
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00029994 vaddr 0x00029994 paddr 0x00029994 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000299ac memsz 0x000299ac flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x000299ac align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00030148 vaddr 0x20000148 paddr 0x00029a18 align 2**16
         filesz 0x00000000 memsz 0x0000de40 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              00021974  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00029994  00029994  00030144  2**0  CONTENTS
  3 .ARM.exidx         00000018  00029994  00029994  00029994  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00030144  2**0  CONTENTS
  6 .data              0000006c  200000d8  000299ac  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00030144  2**0  CONTENTS
  8 .bss               0000de40  20000148  00029a18  00030148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000df88  2000df88  00030148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000302f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000303b2  2**0  CONTENTS, READONLY
 13 .debug_line        0004b51a  00000000  00000000  000303b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        0008b0fa  00000000  00000000  0007b8d0  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000ef3e  00000000  00000000  001069ca  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005f88  00000000  00000000  00115908  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         00061fb5  00000000  00000000  0011b890  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00013534  00000000  00000000  0017d845  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      0001a648  00000000  00000000  00190d79  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000f74c  00000000  00000000  001ab3c4  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000064  00000000  00000000  001bab10  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00019e89  00000000  00000000  001bab74  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    0003bc6b  00000000  00000000  001d49fd  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00029994 l    d  .ARM.extab	00000000 .ARM.extab
00029994 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000df88 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 9mu0l0cofx40kg7
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
0001fba9 l       .debug_str	00000000 
00034b54 l       .debug_str	00000000 
0005a7e0 l       .debug_str	00000000 
0005af47 l       .debug_str	00000000 
0005a214 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00034b81 l       .debug_str	00000000 
00034b73 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0005d439 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
0005c2c2 l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00003f42 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00034b40 l       .debug_str	00000000 
0005fefa l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039bfa l       .debug_str	00000000 
0005d2e3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 uihlqvdlbzm5wxk
00001076 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
0000103b l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000010df l       .debug_str	00000000 
0000114a l       .debug_str	00000000 
00001186 l       .debug_str	00000000 
000011d3 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
0000121d l       .debug_str	00000000 
00001288 l       .debug_str	00000000 
000012a3 l       .debug_str	00000000 
0000130f l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0005b563 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0000136b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016935 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
0005fe56 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e9c l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001fb1d l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f59 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
00016810 l       .debug_str	00000000 
00000f99 l       .debug_str	00000000 
00000fd2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039bfa l       .debug_str	00000000 
0005d2e3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
0001fba9 l       .debug_str	00000000 
0000151c l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
0006190e l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000605f9 l       .debug_str	00000000 
000013e2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000615cd l       .debug_str	00000000 
000013ef l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
000161d9 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000169d l       .debug_str	00000000 
000013ff l       .debug_str	00000000 
00001484 l       .debug_str	00000000 
0000149a l       .debug_str	00000000 
0005d442 l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
0004001e l       .debug_str	00000000 
000014e9 l       .debug_str	00000000 
00001517 l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
00001553 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
0000157b l       .debug_str	00000000 
0006198e l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
000015a8 l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
000015dc l       .debug_str	00000000 
0000160c l       .debug_str	00000000 
00001617 l       .debug_str	00000000 
00001644 l       .debug_str	00000000 
0000164d l       .debug_str	00000000 
00001683 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00001694 l       .debug_str	00000000 
0000151b l       .debug_str	00000000 
0005a361 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
000016bb l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
000016e7 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00039bfa l       .debug_str	00000000 
0005d2e3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
000030eb l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
000036ac l       .debug_str	00000000 
000036ec l       .debug_str	00000000 
0000373a l       .debug_str	00000000 
0000377a l       .debug_str	00000000 
000037a1 l       .debug_str	00000000 
000037e1 l       .debug_str	00000000 
000037ef l       .debug_str	00000000 
0000385e l       .debug_str	00000000 
00003889 l       .debug_str	00000000 
000038f9 l       .debug_str	00000000 
0000390c l       .debug_str	00000000 
0000397c l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000039a8 l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00017097 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
000039b7 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0005b307 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042d18 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b6b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fbd5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
0005a61a l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060a10 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
0004fcbd l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
00001d93 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000606c3 l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da7 l       .debug_str	00000000 
00001db2 l       .debug_str	00000000 
00001dba l       .debug_str	00000000 
0000b338 l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
00001dc2 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001fc2 l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002008 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00002013 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002111 l       .debug_str	00000000 
0000211f l       .debug_str	00000000 
0000217e l       .debug_str	00000000 
000021e5 l       .debug_str	00000000 
000021fb l       .debug_str	00000000 
0000220b l       .debug_str	00000000 
0005eef9 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000221a l       .debug_str	00000000 
000254e8 l       .debug_str	00000000 
00002220 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002238 l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
00002240 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
0000224e l       .debug_str	00000000 
00002294 l       .debug_str	00000000 
00002271 l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
0005ea86 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000233e l       .debug_str	00000000 
00002373 l       .debug_str	00000000 
000023b5 l       .debug_str	00000000 
0005e96f l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002434 l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
00002488 l       .debug_str	00000000 
0005de33 l       .debug_str	00000000 
000024d2 l       .debug_str	00000000 
000024d8 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
000024e4 l       .debug_str	00000000 
0000250d l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
0000251e l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
000025a8 l       .debug_str	00000000 
000025ad l       .debug_str	00000000 
0005ecbd l       .debug_str	00000000 
000025b2 l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
000025c4 l       .debug_str	00000000 
000025f8 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0005deeb l       .debug_str	00000000 
00002682 l       .debug_str	00000000 
000026ae l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026bf l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
00002749 l       .debug_str	00000000 
0005ee91 l       .debug_str	00000000 
0000274e l       .debug_str	00000000 
00002757 l       .debug_str	00000000 
0000275e l       .debug_str	00000000 
00002789 l       .debug_str	00000000 
00002766 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027dd l       .debug_str	00000000 
0005eb59 l       .debug_str	00000000 
00002827 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
00002839 l       .debug_str	00000000 
0000283f l       .debug_str	00000000 
00002847 l       .debug_str	00000000 
00002855 l       .debug_str	00000000 
00002864 l       .debug_str	00000000 
00002875 l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
0000289d l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028c0 l       .debug_str	00000000 
000028f5 l       .debug_str	00000000 
00002937 l       .debug_str	00000000 
0005dfee l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
000029ae l       .debug_str	00000000 
0000298b l       .debug_str	00000000 
000029c0 l       .debug_str	00000000 
00002a02 l       .debug_str	00000000 
00002a4c l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a7e l       .debug_str	00000000 
00002a5b l       .debug_str	00000000 
00002a90 l       .debug_str	00000000 
00002ad2 l       .debug_str	00000000 
00002b1c l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
00002b40 l       .debug_str	00000000 
00002b49 l       .debug_str	00000000 
00002b54 l       .debug_str	00000000 
00002b63 l       .debug_str	00000000 
00002b78 l       .debug_str	00000000 
00002ba9 l       .debug_str	00000000 
00002c46 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002cf6 l       .debug_str	00000000 
00002cff l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d20 l       .debug_str	00000000 
00002d56 l       .debug_str	00000000 
00002dd9 l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00002e80 l       .debug_str	00000000 
00002ecc l       .debug_str	00000000 
00002f20 l       .debug_str	00000000 
00002f3d l       .debug_str	00000000 
00002f51 l       .debug_str	00000000 
00002f9d l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000301b l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
000030ba l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003108 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0003463f l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
00003e57 l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314c l       .debug_str	00000000 
00003154 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
0000316d l       .debug_str	00000000 
00003175 l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031a2 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
000031b6 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000031ca l       .debug_str	00000000 
000031d5 l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005df5f l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00003298 l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
000032b7 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032c6 l       .debug_str	00000000 
000032ce l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
0000331f l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000333d l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
000033ff l       .debug_str	00000000 
00003409 l       .debug_str	00000000 
00003419 l       .debug_str	00000000 
0000342e l       .debug_str	00000000 
00003436 l       .debug_str	00000000 
0000349a l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
0000350d l       .debug_str	00000000 
00003515 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003566 l       .debug_str	00000000 
0000357b l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
000035bf l       .debug_str	00000000 
000035e9 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003660 l       .debug_str	00000000 
0000369f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
00003ba4 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
00003b19 l       .debug_str	00000000 
00003b7c l       .debug_str	00000000 
00003c22 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cc8 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00003d4f l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
0005adc8 l       .debug_str	00000000 
00003d80 l       .debug_str	00000000 
00016935 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000039d8 l       .debug_str	00000000 
00003a62 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
00003a7a l       .debug_str	00000000 
00003b0f l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fbd3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
00004acd l       .debug_str	00000000 
00004afa l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00004b15 l       .debug_str	00000000 
00004b49 l       .debug_str	00000000 
00004b30 l       .debug_str	00000000 
00004b51 l       .debug_str	00000000 
00004b67 l       .debug_str	00000000 
00004bcf l       .debug_str	00000000 
00004c47 l       .debug_str	00000000 
00004c74 l       .debug_str	00000000 
00004c8c l       .debug_str	00000000 
00004cf6 l       .debug_str	00000000 
00004cfe l       .debug_str	00000000 
00004d04 l       .debug_str	00000000 
00004d0e l       .debug_str	00000000 
00004d88 l       .debug_str	00000000 
00004df4 l       .debug_str	00000000 
00004e6d l       .debug_str	00000000 
00004ee6 l       .debug_str	00000000 
00004f51 l       .debug_str	00000000 
00004fc0 l       .debug_str	00000000 
00004fc7 l       .debug_str	00000000 
00004fd2 l       .debug_str	00000000 
00004ffa l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
000050ec l       .debug_str	00000000 
00004feb l       .debug_str	00000000 
000050f8 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
0000516f l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
0004fcbd l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
000051d8 l       .debug_str	00000000 
00005256 l       .debug_str	00000000 
000052c6 l       .debug_str	00000000 
00005340 l       .debug_str	00000000 
0000535a l       .debug_str	00000000 
000053c6 l       .debug_str	00000000 
000053cf l       .debug_str	00000000 
000053db l       .debug_str	00000000 
00005451 l       .debug_str	00000000 
000054c7 l       .debug_str	00000000 
0000553d l       .debug_str	00000000 
000055a5 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00005614 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
00005681 l       .debug_str	00000000 
000056f6 l       .debug_str	00000000 
0000570b l       .debug_str	00000000 
00005772 l       .debug_str	00000000 
0000577b l       .debug_str	00000000 
00005786 l       .debug_str	00000000 
0000578d l       .debug_str	00000000 
0005c2ca l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
000057c2 l       .debug_str	00000000 
0005bd03 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
0005bbaa l       .debug_str	00000000 
00061041 l       .debug_str	00000000 
00005877 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
00005884 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
000615cd l       .debug_str	00000000 
000013ef l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
000161d9 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000169d l       .debug_str	00000000 
00001694 l       .debug_str	00000000 
000058a5 l       .debug_str	00000000 
000058aa l       .debug_str	00000000 
000058af l       .debug_str	00000000 
000058b4 l       .debug_str	00000000 
000058b9 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
000058c9 l       .debug_str	00000000 
000058d4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042d18 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003d8a l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
00003dfe l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003e0a l       .debug_str	00000000 
00003e30 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0003463f l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
00003e57 l       .debug_str	00000000 
00003e3c l       .debug_str	00000000 
00003e63 l       .debug_str	00000000 
00003e6e l       .debug_str	00000000 
00003e79 l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
00003f33 l       .debug_str	00000000 
00003e8a l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003f11 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00003f18 l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00003f47 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003fa4 l       .debug_str	00000000 
00004009 l       .debug_str	00000000 
00004011 l       .debug_str	00000000 
00004033 l       .debug_str	00000000 
0000401a l       .debug_str	00000000 
0000404b l       .debug_str	00000000 
00004071 l       .debug_str	00000000 
000040e9 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005df5f l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
00004160 l       .debug_str	00000000 
000041c9 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
00004280 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fbd5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005a61a l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060a10 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00004306 l       .debug_str	00000000 
0000437f l       .debug_str	00000000 
0006103f l       .debug_str	00000000 
00004384 l       .debug_str	00000000 
000043a7 l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
000043cd l       .debug_str	00000000 
000043b4 l       .debug_str	00000000 
000043af l       .debug_str	00000000 
000043d8 l       .debug_str	00000000 
000043f1 l       .debug_str	00000000 
0000445c l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
000044cc l       .debug_str	00000000 
000044dc l       .debug_str	00000000 
00004554 l       .debug_str	00000000 
0005b85a l       .debug_str	00000000 
0005b5b4 l       .debug_str	00000000 
0000455e l       .debug_str	00000000 
00004565 l       .debug_str	00000000 
00004588 l       .debug_str	00000000 
0000456f l       .debug_str	00000000 
0000456a l       .debug_str	00000000 
00004592 l       .debug_str	00000000 
000045aa l       .debug_str	00000000 
00004614 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00004689 l       .debug_str	00000000 
000046f0 l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
0000477b l       .debug_str	00000000 
00004784 l       .debug_str	00000000 
00004792 l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047ac l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
000047c7 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047e8 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00004801 l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004872 l       .debug_str	00000000 
00004859 l       .debug_str	00000000 
0000487d l       .debug_str	00000000 
0000489f l       .debug_str	00000000 
00004886 l       .debug_str	00000000 
000048ac l       .debug_str	00000000 
000048c7 l       .debug_str	00000000 
00004934 l       .debug_str	00000000 
000049b1 l       .debug_str	00000000 
000049b9 l       .debug_str	00000000 
00004c65 l       .debug_str	00000000 
00004c4c l       .debug_str	00000000 
000049c3 l       .debug_str	00000000 
000049e0 l       .debug_str	00000000 
00004a4f l       .debug_str	00000000 
00004ac5 l       .debug_str	00000000 
00004ad6 l       .debug_str	00000000 
00004ae4 l       .debug_str	00000000 
00004aeb l       .debug_str	00000000 
00004af2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
000078c2 l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
00031734 l       .debug_str	00000000 
000221e5 l       .debug_str	00000000 
0000a3a8 l       .debug_str	00000000 
0000a3d8 l       .debug_str	00000000 
0000a636 l       .debug_str	00000000 
0000a666 l       .debug_str	00000000 
0000a691 l       .debug_str	00000000 
0000a69b l       .debug_str	00000000 
0000a6f4 l       .debug_str	00000000 
0000a948 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000058d9 l       .debug_str	00000000 
00005909 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0006085b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00036053 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
000316c0 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00022439 l       .debug_str	00000000 
00005b4c l       .debug_str	00000000 
00005b7c l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
0001fba9 l       .debug_str	00000000 
0005ad99 l       .debug_str	00000000 
0005b563 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
0006190e l       .debug_str	00000000 
0000ad71 l       .debug_str	00000000 
0000ad7a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000a969 l       .debug_str	00000000 
0000b283 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
0000a9a0 l       .debug_str	00000000 
0000a9f3 l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
0000aa07 l       .debug_str	00000000 
0000aa4d l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
0000aa5b l       .debug_str	00000000 
0000aaa2 l       .debug_str	00000000 
0000aaab l       .debug_str	00000000 
0000aaf4 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
00003d80 l       .debug_str	00000000 
0000ab00 l       .debug_str	00000000 
0000ab7c l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00003d4f l       .debug_str	00000000 
0000aba6 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0000ac51 l       .debug_str	00000000 
0000acd7 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00035e99 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00013d59 l       .debug_str	00000000 
0000acff l       .debug_str	00000000 
0000ad61 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
00016810 l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000ad69 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039bfa l       .debug_str	00000000 
0005d2e3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
0005d725 l       .debug_str	00000000 
0000af8d l       .debug_str	00000000 
0005a2db l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
00061d53 l       .debug_str	00000000 
00061d52 l       .debug_str	00000000 
000615cd l       .debug_str	00000000 
000013ef l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
000161d9 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000169d l       .debug_str	00000000 
00001694 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000254e8 l       .debug_str	00000000 
000254ed l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000ad81 l       .debug_str	00000000 
0005a1fe l       .debug_str	00000000 
0000ad85 l       .debug_str	00000000 
0000adb6 l       .debug_str	00000000 
0000adbc l       .debug_str	00000000 
0000adfd l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000ae12 l       .debug_str	00000000 
0000ae49 l       .debug_str	00000000 
0000ae54 l       .debug_str	00000000 
0006085b l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
0005a342 l       .debug_str	00000000 
0000aeba l       .debug_str	00000000 
0005a331 l       .debug_str	00000000 
0000aeee l       .debug_str	00000000 
0005a2e9 l       .debug_str	00000000 
0000af25 l       .debug_str	00000000 
0005a37b l       .debug_str	00000000 
0000af5d l       .debug_str	00000000 
0005a1ac l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
00003e57 l       .debug_str	00000000 
0000b2d4 l       .debug_str	00000000 
0000b2fb l       .debug_str	00000000 
0000b306 l       .debug_str	00000000 
0000b32d l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000b338 l       .debug_str	00000000 
0000b337 l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0005b2ea l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
0005e23a l       .debug_str	00000000 
0005b544 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000afbe l       .debug_str	00000000 
0000afe7 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0000aff4 l       .debug_str	00000000 
0000b006 l       .debug_str	00000000 
0000b017 l       .debug_str	00000000 
0000b063 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000b06f l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b307 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042d18 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b6b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fbd5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
0005a61a l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060a10 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
0004fcbd l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
00001d93 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000606c3 l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da7 l       .debug_str	00000000 
00001db2 l       .debug_str	00000000 
00001dba l       .debug_str	00000000 
0000b073 l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
00001dc2 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001fc2 l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002008 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00002013 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002111 l       .debug_str	00000000 
0000211f l       .debug_str	00000000 
0000217e l       .debug_str	00000000 
000021e5 l       .debug_str	00000000 
000021fb l       .debug_str	00000000 
0000220b l       .debug_str	00000000 
0005eef9 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000221a l       .debug_str	00000000 
000254e8 l       .debug_str	00000000 
00002220 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002238 l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
00002240 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
0000224e l       .debug_str	00000000 
00002294 l       .debug_str	00000000 
00002271 l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
0005ea86 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000233e l       .debug_str	00000000 
00002373 l       .debug_str	00000000 
000023b5 l       .debug_str	00000000 
0005e96f l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002434 l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
00002488 l       .debug_str	00000000 
0005de33 l       .debug_str	00000000 
000024d2 l       .debug_str	00000000 
000024d8 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
000024e4 l       .debug_str	00000000 
0000250d l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
0000251e l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
000025a8 l       .debug_str	00000000 
000025ad l       .debug_str	00000000 
0005ecbd l       .debug_str	00000000 
000025b2 l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
000025c4 l       .debug_str	00000000 
000025f8 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0005deeb l       .debug_str	00000000 
00002682 l       .debug_str	00000000 
000026ae l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026bf l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
00002749 l       .debug_str	00000000 
0005ee91 l       .debug_str	00000000 
0000274e l       .debug_str	00000000 
00002757 l       .debug_str	00000000 
0000275e l       .debug_str	00000000 
00002789 l       .debug_str	00000000 
00002766 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027dd l       .debug_str	00000000 
0005eb59 l       .debug_str	00000000 
00002827 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
00002839 l       .debug_str	00000000 
0000283f l       .debug_str	00000000 
00002847 l       .debug_str	00000000 
00002855 l       .debug_str	00000000 
00002864 l       .debug_str	00000000 
00002875 l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
0000289d l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028c0 l       .debug_str	00000000 
000028f5 l       .debug_str	00000000 
00002937 l       .debug_str	00000000 
0005dfee l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
000029ae l       .debug_str	00000000 
0000298b l       .debug_str	00000000 
000029c0 l       .debug_str	00000000 
00002a02 l       .debug_str	00000000 
00002a4c l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a7e l       .debug_str	00000000 
00002a5b l       .debug_str	00000000 
00002a90 l       .debug_str	00000000 
00002ad2 l       .debug_str	00000000 
00002b1c l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
00002b40 l       .debug_str	00000000 
00002b49 l       .debug_str	00000000 
00002b54 l       .debug_str	00000000 
00002b63 l       .debug_str	00000000 
00002b78 l       .debug_str	00000000 
00002ba9 l       .debug_str	00000000 
00002c46 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002cf6 l       .debug_str	00000000 
00002cff l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d20 l       .debug_str	00000000 
00002d56 l       .debug_str	00000000 
00002dd9 l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00002e80 l       .debug_str	00000000 
00002ecc l       .debug_str	00000000 
00002f20 l       .debug_str	00000000 
00002f3d l       .debug_str	00000000 
00002f51 l       .debug_str	00000000 
00002f9d l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000301b l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
000030ba l       .debug_str	00000000 
000030eb l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003108 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0003463f l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314c l       .debug_str	00000000 
00003154 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
0000316d l       .debug_str	00000000 
00003175 l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031a2 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
000031b6 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000031ca l       .debug_str	00000000 
000031d5 l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005df5f l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00003298 l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
000032b7 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032c6 l       .debug_str	00000000 
000032ce l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
0000331f l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000333d l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
000033ff l       .debug_str	00000000 
00003409 l       .debug_str	00000000 
00003419 l       .debug_str	00000000 
0000342e l       .debug_str	00000000 
00003436 l       .debug_str	00000000 
0000349a l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
0000350d l       .debug_str	00000000 
00003515 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003566 l       .debug_str	00000000 
0000357b l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
000035bf l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0005b067 l       .debug_str	00000000 
0000b080 l       .debug_str	00000000 
0000b138 l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
0000b19c l       .debug_str	00000000 
0000b1d2 l       .debug_str	00000000 
0000b1eb l       .debug_str	00000000 
0000b225 l       .debug_str	00000000 
0000b242 l       .debug_str	00000000 
0000b27d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
0000b29a l       .debug_str	00000000 
0000b2a4 l       .debug_str	00000000 
0000b2ca l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005fd93 l       .debug_str	00000000 
0000b3fe l       .debug_str	00000000 
0000b43a l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b3f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
00003108 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0005b563 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012af7 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b84b l       .debug_str	00000000 
0000b854 l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0000b8f7 l       .debug_str	00000000 
0000b337 l       .debug_str	00000000 
0000b902 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
0000b479 l       .debug_str	00000000 
0000b4c1 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
0000b4e0 l       .debug_str	00000000 
0000b51b l       .debug_str	00000000 
0000b540 l       .debug_str	00000000 
0000b567 l       .debug_str	00000000 
0000b5c7 l       .debug_str	00000000 
0000b5d0 l       .debug_str	00000000 
0000b63b l       .debug_str	00000000 
0000b64b l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b307 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042d18 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b6b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fbd5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
0005a61a l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060a10 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
0004fcbd l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
00001d93 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000606c3 l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da7 l       .debug_str	00000000 
00001db2 l       .debug_str	00000000 
00001dba l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
00001dc2 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001fc2 l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002008 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00002013 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002111 l       .debug_str	00000000 
0000211f l       .debug_str	00000000 
0000217e l       .debug_str	00000000 
000021e5 l       .debug_str	00000000 
000021fb l       .debug_str	00000000 
0000220b l       .debug_str	00000000 
0005eef9 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000221a l       .debug_str	00000000 
000254e8 l       .debug_str	00000000 
00002220 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002238 l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
00002240 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
0000224e l       .debug_str	00000000 
00002294 l       .debug_str	00000000 
00002271 l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
0005ea86 l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000233e l       .debug_str	00000000 
00002373 l       .debug_str	00000000 
000023b5 l       .debug_str	00000000 
0005e96f l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002434 l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
00002488 l       .debug_str	00000000 
0005de33 l       .debug_str	00000000 
000024d2 l       .debug_str	00000000 
000024d8 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
000024e4 l       .debug_str	00000000 
0000250d l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
0000251e l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
000025a8 l       .debug_str	00000000 
000025ad l       .debug_str	00000000 
0005ecbd l       .debug_str	00000000 
000025b2 l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
000025c4 l       .debug_str	00000000 
000025f8 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
0005deeb l       .debug_str	00000000 
00002682 l       .debug_str	00000000 
000026ae l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026bf l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
00002749 l       .debug_str	00000000 
0005ee91 l       .debug_str	00000000 
0000274e l       .debug_str	00000000 
00002757 l       .debug_str	00000000 
0000275e l       .debug_str	00000000 
00002789 l       .debug_str	00000000 
00002766 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027dd l       .debug_str	00000000 
0005eb59 l       .debug_str	00000000 
00002827 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
00002839 l       .debug_str	00000000 
0000283f l       .debug_str	00000000 
00002847 l       .debug_str	00000000 
00002855 l       .debug_str	00000000 
00002864 l       .debug_str	00000000 
00002875 l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
0000289d l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028c0 l       .debug_str	00000000 
000028f5 l       .debug_str	00000000 
00002937 l       .debug_str	00000000 
0005dfee l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
000029ae l       .debug_str	00000000 
0000298b l       .debug_str	00000000 
000029c0 l       .debug_str	00000000 
00002a02 l       .debug_str	00000000 
00002a4c l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a7e l       .debug_str	00000000 
00002a5b l       .debug_str	00000000 
00002a90 l       .debug_str	00000000 
00002ad2 l       .debug_str	00000000 
00002b1c l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
00002b40 l       .debug_str	00000000 
00002b49 l       .debug_str	00000000 
00002b54 l       .debug_str	00000000 
00002b63 l       .debug_str	00000000 
00002b78 l       .debug_str	00000000 
00002ba9 l       .debug_str	00000000 
00002c46 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002cf6 l       .debug_str	00000000 
00002cff l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d20 l       .debug_str	00000000 
00002d56 l       .debug_str	00000000 
00002dd9 l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00002e80 l       .debug_str	00000000 
00002ecc l       .debug_str	00000000 
00002f20 l       .debug_str	00000000 
00002f3d l       .debug_str	00000000 
00002f51 l       .debug_str	00000000 
00002f9d l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000301b l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
000030ba l       .debug_str	00000000 
000030eb l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0003463f l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
00003e57 l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314c l       .debug_str	00000000 
00003154 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
0000316d l       .debug_str	00000000 
00003175 l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031a2 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
000031b6 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000031ca l       .debug_str	00000000 
000031d5 l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005df5f l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00003298 l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
000032b7 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032c6 l       .debug_str	00000000 
000032ce l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
0000331f l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000333d l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
000033ff l       .debug_str	00000000 
00003409 l       .debug_str	00000000 
00003419 l       .debug_str	00000000 
0000342e l       .debug_str	00000000 
00003436 l       .debug_str	00000000 
0000349a l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
0000350d l       .debug_str	00000000 
00003515 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003566 l       .debug_str	00000000 
0000357b l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
000035bf l       .debug_str	00000000 
0000b338 l       .debug_str	00000000 
0000b6ca l       .debug_str	00000000 
0000b72d l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
0000b7ad l       .debug_str	00000000 
0000b810 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000016bb l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
0000bba7 l       .debug_str	00000000 
0000bbd8 l       .debug_str	00000000 
0000be6b l       .debug_str	00000000 
0000bbf2 l       .debug_str	00000000 
0000bc23 l       .debug_str	00000000 
0000bca1 l       .debug_str	00000000 
0000bc53 l       .debug_str	00000000 
0000bc84 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
0000bc94 l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
0000bca0 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0000bca6 l       .debug_str	00000000 
0000bcf8 l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
0000bd4b l       .debug_str	00000000 
0000bdb4 l       .debug_str	00000000 
0001fba9 l       .debug_str	00000000 
0000be07 l       .debug_str	00000000 
0000be6a l       .debug_str	00000000 
0000be96 l       .debug_str	00000000 
0000bf0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000605f9 l       .debug_str	00000000 
000013e2 l       .debug_str	00000000 
00001725 l       .debug_str	00000000 
0000b90c l       .debug_str	00000000 
0000be8c l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000b91b l       .debug_str	00000000 
0000b963 l       .debug_str	00000000 
0000b96c l       .debug_str	00000000 
0000b9b4 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0000b9bc l       .debug_str	00000000 
0000b5c7 l       .debug_str	00000000 
0000ba04 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0000ba55 l       .debug_str	00000000 
0000ba9d l       .debug_str	00000000 
0000baa6 l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
000192e3 l       .debug_str	00000000 
0000bae0 l       .debug_str	00000000 
0000bb11 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
000016bb l       .debug_str	00000000 
0000bb1b l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
000192f7 l       .debug_str	00000000 
0000bb6c l       .debug_str	00000000 
0000bb9d l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039bfa l       .debug_str	00000000 
0005d2e3 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0000c0b6 l       .debug_str	00000000 
0000bfb3 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
0000c00c l       .debug_str	00000000 
0000c018 l       .debug_str	00000000 
0000c05f l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
0000c06b l       .debug_str	00000000 
0000c0c6 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
0005d2d1 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000bf62 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fbd3 l       .debug_str	00000000 
00009548 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
0000c386 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000193a7 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025d0f l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0003519f l       .debug_str	00000000 
0002fafc l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c3e5 l       .debug_str	00000000 
00019488 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
000194c3 l       .debug_str	00000000 
0000c42f l       .debug_str	00000000 
0000c49e l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000192ed l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
00016b04 l       .debug_str	00000000 
0000c124 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b307 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c135 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c13f l       .debug_str	00000000 
0000c14a l       .debug_str	00000000 
0000c154 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000232bc l       .debug_str	00000000 
0000c15d l       .debug_str	00000000 
0000c1a3 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0005dcf4 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
000232a2 l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
0005b127 l       .debug_str	00000000 
000232e5 l       .debug_str	00000000 
00060bcf l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
0006000b l       .debug_str	00000000 
0000c1cf l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0000e753 l       .debug_str	00000000 
0000c1d2 l       .debug_str	00000000 
0000c212 l       .debug_str	00000000 
0000c221 l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0000c269 l       .debug_str	00000000 
0000c2b0 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
0000c2be l       .debug_str	00000000 
0000c302 l       .debug_str	00000000 
0000c30d l       .debug_str	00000000 
0000c316 l       .debug_str	00000000 
0000c31e l       .debug_str	00000000 
0005cf0c l       .debug_str	00000000 
0000e7c1 l       .debug_str	00000000 
0005b563 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c327 l       .debug_str	00000000 
0000c32d l       .debug_str	00000000 
0000c336 l       .debug_str	00000000 
0000c343 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
0004429b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c346 l       .debug_str	00000000 
0000c35d l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
00010589 l       .debug_str	00000000 
0000c373 l       .debug_str	00000000 
0000c379 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c380 l       .debug_str	00000000 
00016a2c l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001935c l       .debug_str	00000000 
0006048c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
200000e8 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000160 l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0000e3c1 l       .debug_str	00000000 
0000e325 l       .debug_str	00000000 
0000e36b l       .debug_str	00000000 
0000e40a l       .debug_str	00000000 
0000e450 l       .debug_str	00000000 
0000e7c1 l       .debug_str	00000000 
00012bf1 l       .debug_str	00000000 
0000e48a l       .debug_str	00000000 
0000e4d1 l       .debug_str	00000000 
0000e51f l       .debug_str	00000000 
0000e56b l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c380 l       .debug_str	00000000 
0000c386 l       .debug_str	00000000 
00016a2c l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
0001935c l       .debug_str	00000000 
0006048c l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000193a7 l       .debug_str	00000000 
00025d0f l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0002fafc l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000c3e5 l       .debug_str	00000000 
00019488 l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
000194c3 l       .debug_str	00000000 
0000c42f l       .debug_str	00000000 
0000e5ab l       .debug_str	00000000 
0000e657 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e729 l       .debug_str	00000000 
0000e742 l       .debug_str	00000000 
0005b563 l       .debug_str	00000000 
0001faf1 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0001d5e0 l       .debug_str	00000000 
0000e792 l       .debug_str	00000000 
00041455 l       .debug_str	00000000 
0001a55e l       .debug_str	00000000 
0003e005 l       .debug_str	00000000 
0000e795 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
00016ff6 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00028255 l       .debug_str	00000000 
0006190e l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00022dbe l       .debug_str	00000000 
0000e79c l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00025d54 l       .debug_str	00000000 
0000e7a3 l       .debug_str	00000000 
0005dcf5 l       .debug_str	00000000 
0000c1bf l       .debug_str	00000000 
00016b04 l       .debug_str	00000000 
0005cf0c l       .debug_str	00000000 
0000e7af l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000e7c7 l       .debug_str	00000000 
0000e7d3 l       .debug_str	00000000 
0000e7df l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000e7ec l       .debug_str	00000000 
00061e7b l       .debug_str	00000000 
0000e7f9 l       .debug_str	00000000 
0000e870 l       .debug_str	00000000 
0000e879 l       .debug_str	00000000 
0000e887 l       .debug_str	00000000 
0001940a l       .debug_str	00000000 
0000e89f l       .debug_str	00000000 
0000e8d4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4a5 l       .debug_str	00000000 
0000c4ae l       .debug_str	00000000 
0000c4b8 l       .debug_str	00000000 
0000c4c8 l       .debug_str	00000000 
0000e736 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f1 l       .debug_str	00000000 
0000c4f7 l       .debug_str	00000000 
0000c4fd l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
0000c50a l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c516 l       .debug_str	00000000 
0000c51d l       .debug_str	00000000 
0000c523 l       .debug_str	00000000 
0000c52b l       .debug_str	00000000 
0000c532 l       .debug_str	00000000 
0000c538 l       .debug_str	00000000 
0000c53e l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c54a l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c557 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0000c566 l       .debug_str	00000000 
0000c56e l       .debug_str	00000000 
0000c576 l       .debug_str	00000000 
0000c57d l       .debug_str	00000000 
0000c585 l       .debug_str	00000000 
0000c58c l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c59a l       .debug_str	00000000 
0000c5a1 l       .debug_str	00000000 
0000c5a8 l       .debug_str	00000000 
0000c5af l       .debug_str	00000000 
0000c5b5 l       .debug_str	00000000 
0000c5bb l       .debug_str	00000000 
0000c5c1 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5d6 l       .debug_str	00000000 
0000e962 l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
0005f568 l       .debug_str	00000000 
0000c5e9 l       .debug_str	00000000 
0005dcf4 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
000232a2 l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
0005b127 l       .debug_str	00000000 
000232e5 l       .debug_str	00000000 
00060bcf l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
0006000b l       .debug_str	00000000 
0000c1cf l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0000e753 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000c5f5 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000c605 l       .debug_str	00000000 
0000c641 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
0000c660 l       .debug_str	00000000 
0000c6ae l       .debug_str	00000000 
0000c6ef l       .debug_str	00000000 
0000c75b l       .debug_str	00000000 
0000c79d l       .debug_str	00000000 
0000c809 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0006085b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00036053 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
0002c286 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00028111 l       .debug_str	00000000 
0003519f l       .debug_str	00000000 
0000dd7f l       .debug_str	00000000 
0000ddcd l       .debug_str	00000000 
0000df4d l       .debug_str	00000000 
0000df9b l       .debug_str	00000000 
0000dfdc l       .debug_str	00000000 
0000e02a l       .debug_str	00000000 
0000e06b l       .debug_str	00000000 
0000e0bb l       .debug_str	00000000 
0000e23d l       .debug_str	00000000 
0000e28e l       .debug_str	00000000 
0000e2d2 l       .debug_str	00000000 
0001f2b0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0000c5e9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e948 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f1 l       .debug_str	00000000 
0000c4f7 l       .debug_str	00000000 
0000c4fd l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
0000c50a l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c516 l       .debug_str	00000000 
0000c51d l       .debug_str	00000000 
0000c523 l       .debug_str	00000000 
0000c52b l       .debug_str	00000000 
0000c532 l       .debug_str	00000000 
0000c538 l       .debug_str	00000000 
0000c53e l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c54a l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c557 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0000c566 l       .debug_str	00000000 
0000c56e l       .debug_str	00000000 
0000c576 l       .debug_str	00000000 
0000c57d l       .debug_str	00000000 
0000c585 l       .debug_str	00000000 
0000c58c l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c59a l       .debug_str	00000000 
0000c5a1 l       .debug_str	00000000 
0000c5a8 l       .debug_str	00000000 
0000c5af l       .debug_str	00000000 
0000c5b5 l       .debug_str	00000000 
0000c5bb l       .debug_str	00000000 
0000c5c1 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5d6 l       .debug_str	00000000 
0000e962 l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
0005f568 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000e8e0 l       .debug_str	00000000 
0000e91c l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0000e9bd l       .debug_str	00000000 
0000e9b2 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
0000e9fb l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000e96e l       .debug_str	00000000 
0000a7b6 l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0000f466 l       .debug_str	00000000 
0000fa8a l       .debug_str	00000000 
0000fbdd l       .debug_str	00000000 
0000fc0d l       .debug_str	00000000 
0000c32d l       .debug_str	00000000 
0000c336 l       .debug_str	00000000 
0000c343 l       .debug_str	00000000 
0004429b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c346 l       .debug_str	00000000 
0000c35d l       .debug_str	00000000 
00010589 l       .debug_str	00000000 
0001056c l       .debug_str	00000000 
0000fd34 l       .debug_str	00000000 
0000fd64 l       .debug_str	00000000 
00010610 l       .debug_str	00000000 
000105b2 l       .debug_str	00000000 
0000fda6 l       .debug_str	00000000 
0000fdd6 l       .debug_str	00000000 
0000fe25 l       .debug_str	00000000 
0000fe55 l       .debug_str	00000000 
0000fe67 l       .debug_str	00000000 
0000fe97 l       .debug_str	00000000 
0000fed0 l       .debug_str	00000000 
0000fed9 l       .debug_str	00000000 
0000ff06 l       .debug_str	00000000 
0000ff49 l       .debug_str	00000000 
0000ff5f l       .debug_str	00000000 
000100a3 l       .debug_str	00000000 
0001013f l       .debug_str	00000000 
00010209 l       .debug_str	00000000 
00010222 l       .debug_str	00000000 
00010301 l       .debug_str	00000000 
0001044a l       .debug_str	00000000 
00010567 l       .debug_str	00000000 
0001059f l       .debug_str	00000000 
000105e4 l       .debug_str	00000000 
000105ec l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
0000ea08 l       .debug_str	00000000 
0000ea0d l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000ea32 l       .debug_str	00000000 
0000ea39 l       .debug_str	00000000 
0000ea3e l       .debug_str	00000000 
0000ea79 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
0000eab0 l       .debug_str	00000000 
0000eae0 l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
0000eaf3 l       .debug_str	00000000 
0000eaf9 l       .debug_str	00000000 
0000eb00 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000e795 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0006085b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00036053 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000eb08 l       .debug_str	00000000 
0000ec1a l       .debug_str	00000000 
0000ed49 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
0002c14e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027ff4 l       .debug_str	00000000 
0000fefd l       .debug_str	00000000 
0000ee77 l       .debug_str	00000000 
0000eea7 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000ff19 l       .debug_str	00000000 
0000eede l       .debug_str	00000000 
0000ef0e l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0001643f l       .debug_str	00000000 
0000ef5b l       .debug_str	00000000 
0000ef8b l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
0002c286 l       .debug_str	00000000 
00028111 l       .debug_str	00000000 
0000efab l       .debug_str	00000000 
0000efdb l       .debug_str	00000000 
0000e8d9 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f129 l       .debug_str	00000000 
0000f134 l       .debug_str	00000000 
0000f13e l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0001935c l       .debug_str	00000000 
0000f147 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000193a7 l       .debug_str	00000000 
00025d0f l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0003519f l       .debug_str	00000000 
0002fafc l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0002fa90 l       .debug_str	00000000 
0000f154 l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
0002e572 l       .debug_str	00000000 
0000f160 l       .debug_str	00000000 
0000f190 l       .debug_str	00000000 
0000f236 l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
0000f241 l       .debug_str	00000000 
0000f24a l       .debug_str	00000000 
0005d96d l       .debug_str	00000000 
0002e619 l       .debug_str	00000000 
0000f254 l       .debug_str	00000000 
0000f284 l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f1ab l       .debug_str	00000000 
000254ed l       .debug_str	00000000 
00025f26 l       .debug_str	00000000 
0000f35e l       .debug_str	00000000 
0000f38e l       .debug_str	00000000 
0000f3b1 l       .debug_str	00000000 
0000f3de l       .debug_str	00000000 
0000f3ff l       .debug_str	00000000 
0000f506 l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0000f5e0 l       .debug_str	00000000 
0000f657 l       .debug_str	00000000 
0000f6db l       .debug_str	00000000 
0000f756 l       .debug_str	00000000 
0000f7f4 l       .debug_str	00000000 
0000f89f l       .debug_str	00000000 
00029660 l       .debug_str	00000000 
00028d97 l       .debug_str	00000000 
000290ce l       .debug_str	00000000 
0002c054 l       .debug_str	00000000 
00027cbc l       .debug_str	00000000 
0000f941 l       .debug_str	00000000 
0000f971 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00028255 l       .debug_str	00000000 
0000fa5a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
0005aecc l       .debug_str	00000000 
0001061b l       .debug_str	00000000 
0001064c l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000192ed l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00010655 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
00013a9c l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000107b9 l       .debug_str	00000000 
000107c5 l       .debug_str	00000000 
00010886 l       .debug_str	00000000 
00025cf4 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e948 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000106a7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f1 l       .debug_str	00000000 
0000c4f7 l       .debug_str	00000000 
0000c4fd l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
0000c50a l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c516 l       .debug_str	00000000 
0000c51d l       .debug_str	00000000 
0000c523 l       .debug_str	00000000 
0000c52b l       .debug_str	00000000 
0000c532 l       .debug_str	00000000 
0000c538 l       .debug_str	00000000 
0000c53e l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c54a l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c557 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0000c566 l       .debug_str	00000000 
0000c56e l       .debug_str	00000000 
0000c576 l       .debug_str	00000000 
0000c57d l       .debug_str	00000000 
0000c585 l       .debug_str	00000000 
0000c58c l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c59a l       .debug_str	00000000 
0000c5a1 l       .debug_str	00000000 
0000c5a8 l       .debug_str	00000000 
0000c5af l       .debug_str	00000000 
0000c5b5 l       .debug_str	00000000 
0000c5bb l       .debug_str	00000000 
0000c5c1 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5d6 l       .debug_str	00000000 
0000e962 l       .debug_str	00000000 
000106cb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000106f1 l       .debug_str	00000000 
000107b2 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
00025cf4 l       .debug_str	00000000 
00010886 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e729 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000106a7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4a5 l       .debug_str	00000000 
0000c4ae l       .debug_str	00000000 
0000c4b8 l       .debug_str	00000000 
0000c4c8 l       .debug_str	00000000 
0000e736 l       .debug_str	00000000 
0001088d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000108b3 l       .debug_str	00000000 
000107b2 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000107b9 l       .debug_str	00000000 
0001095a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
00001366 l       .debug_str	00000000 
00010a51 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000106a7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000107b9 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
000106cb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00010886 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0005fe56 l       .debug_str	00000000 
00010a01 l       .debug_str	00000000 
00010a3a l       .debug_str	00000000 
00025cf4 l       .debug_str	00000000 
0001088d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
00002330 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000106a7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
000106cb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00010886 l       .debug_str	00000000 
00010a8a l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 10fld6rw1cguoaz1
00001366 l       .debug_str	00000000 
00010bc3 l       .debug_str	00000000 
00010bff l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
00010c08 l       .debug_str	00000000 
0001ac54 l       .debug_str	00000000 
00010c33 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00034b40 l       .debug_str	00000000 
00010c91 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00013922 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00010b69 l       .debug_str	00000000 
00010bb0 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001fb1d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1ewcpkt7vg0rrbln
0001102b l       .debug_str	00000000 
0004429b l       .debug_str	00000000 
000113bc l       .debug_str	00000000 
00002403 l       .debug_str	00000000 
000113b8 l       .debug_str	00000000 
000113b3 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c788 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0005fe56 l       .debug_str	00000000 
00010d42 l       .debug_str	00000000 
00010dce l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016935 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00010deb l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00010e77 l       .debug_str	00000000 
00010eac l       .debug_str	00000000 
00010ec6 l       .debug_str	00000000 
00010efb l       .debug_str	00000000 
00011388 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00010f15 l       .debug_str	00000000 
00011369 l       .debug_str	00000000 
0001132f l       .debug_str	00000000 
00010f4a l       .debug_str	00000000 
00011311 l       .debug_str	00000000 
00010f64 l       .debug_str	00000000 
00010f9a l       .debug_str	00000000 
000112d8 l       .debug_str	00000000 
000112bc l       .debug_str	00000000 
00010fb5 l       .debug_str	00000000 
00011285 l       .debug_str	00000000 
00011269 l       .debug_str	00000000 
00011232 l       .debug_str	00000000 
00011217 l       .debug_str	00000000 
000111e1 l       .debug_str	00000000 
000111c6 l       .debug_str	00000000 
00011190 l       .debug_str	00000000 
00011175 l       .debug_str	00000000 
0001113f l       .debug_str	00000000 
00011124 l       .debug_str	00000000 
000110ee l       .debug_str	00000000 
000110d3 l       .debug_str	00000000 
0001109d l       .debug_str	00000000 
00011009 l       .debug_str	00000000 
000116fc l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000113fa l       .debug_str	00000000 
000113f6 l       .debug_str	00000000 
0005b544 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005a240 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00010c9a l       .debug_str	00000000 
0001643f l       .debug_str	00000000 
00010c9e l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00034b0c l       .debug_str	00000000 
00010ca3 l       .debug_str	00000000 
0001301f l       .debug_str	00000000 
0001fb54 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0002ffec l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00010ca9 l       .debug_str	00000000 
00013159 l       .debug_str	00000000 
00010cac l       .debug_str	00000000 
0004d390 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0005bda2 l       .debug_str	00000000 
000606bb l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
000113f0 l       .debug_str	00000000 
000113ea l       .debug_str	00000000 
000113e4 l       .debug_str	00000000 
000113de l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005d726 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0006190e l       .debug_str	00000000 
000024e8 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000192ed l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000113db l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00025cf4 l       .debug_str	00000000 
00010caf l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
0005b307 l       .debug_str	00000000 
0005d439 l       .debug_str	00000000 
0005adc8 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00010cc3 l       .debug_str	00000000 
00010cce l       .debug_str	00000000 
00010cdb l       .debug_str	00000000 
00010ce9 l       .debug_str	00000000 
00010cf8 l       .debug_str	00000000 
000129b7 l       .debug_str	00000000 
00011397 l       .debug_str	00000000 
00010d0a l       .debug_str	00000000 
00010d30 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00010d3a l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
00016810 l       .debug_str	00000000 
000113d7 l       .debug_str	00000000 
00012a26 l       .debug_str	00000000 
000137af l       .debug_str	00000000 
00013821 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
000113ce l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
000113c4 l       .debug_str	00000000 
0001f420 l     O .text	0000001c str.0
0001f6a0 l     O .text	00000021 str.1
0001f980 l     O .text	00000039 str.2
0001f9e0 l     O .text	00000021 str.3
0001fa20 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 1expeypgojy7j7ax
000031f0 l       .debug_str	00000000 
000113ff l       .debug_str	00000000 
0001143f l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00017097 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042d18 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fbd5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005a61a l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060a10 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0005df5f l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00004384 l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1rlfak9oa38tk11p
0001152d l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
00016810 l       .debug_str	00000000 
0001156c l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000115df l       .debug_str	00000000 
0001161e l       .debug_str	00000000 
000116fc l       .debug_str	00000000 
0001165b l       .debug_str	00000000 
000116be l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000116e5 l       .debug_str	00000000 
0005adc8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
00036d13 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
0001148f l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016935 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
0005fe56 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2qmowyvqdyca5tsh
000118e5 l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
0001174a l       .debug_str	00000000 
0001178f l       .debug_str	00000000 
0001179c l       .debug_str	00000000 
000117e1 l       .debug_str	00000000 
000117ee l       .debug_str	00000000 
00011833 l       .debug_str	00000000 
00011840 l       .debug_str	00000000 
00011885 l       .debug_str	00000000 
00011892 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
000118da l       .debug_str	00000000 
0000c0b6 l       .debug_str	00000000 
0001192d l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00011973 l       .debug_str	00000000 
000119b9 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
0005d2d1 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00011706 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 31071ffymf9y6tnj
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005ad99 l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016935 l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
000119ff l       .debug_str	00000000 
00011a7b l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 33bdok1lz3m5vvyy
00016770 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00011aa8 l       .debug_str	00000000 
00011b04 l       .debug_str	00000000 
00011afa l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0005adc8 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3jm8kpc30rum4biz
00011c0b l       .debug_str	00000000 
000113ce l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00013821 l       .debug_str	00000000 
000137af l       .debug_str	00000000 
00011b9c l       .debug_str	00000000 
00011bdd l       .debug_str	00000000 
00011c4c l       .debug_str	00000000 
00011caf l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
00011cff l       .debug_str	00000000 
00011d7f l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00011df3 l       .debug_str	00000000 
00011e73 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
00036d13 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016935 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016810 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
0005fe56 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00011b0b l       .debug_str	00000000 
00011b4e l       .debug_str	00000000 
000113bc l       .debug_str	00000000 
0004429b l       .debug_str	00000000 
000113c4 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3tdzqkid9cxb86kn
00012840 l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
00010cf8 l       .debug_str	00000000 
000129b7 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012063 l       .debug_str	00000000 
0001206c l       .debug_str	00000000 
00012075 l       .debug_str	00000000 
00012080 l       .debug_str	00000000 
0001208b l       .debug_str	00000000 
00012096 l       .debug_str	00000000 
000120a2 l       .debug_str	00000000 
000120ac l       .debug_str	00000000 
000120b9 l       .debug_str	00000000 
000120c7 l       .debug_str	00000000 
000120d6 l       .debug_str	00000000 
000120e3 l       .debug_str	00000000 
00030367 l       .debug_str	00000000 
000120f3 l       .debug_str	00000000 
0001211e l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00012127 l       .debug_str	00000000 
00022d64 l       .debug_str	00000000 
00012153 l       .debug_str	00000000 
0004001e l       .debug_str	00000000 
00012182 l       .debug_str	00000000 
0005afe6 l       .debug_str	00000000 
000121dc l       .debug_str	00000000 
0003e004 l       .debug_str	00000000 
00012235 l       .debug_str	00000000 
00012293 l       .debug_str	00000000 
0001229c l       .debug_str	00000000 
000122fa l       .debug_str	00000000 
00012303 l       .debug_str	00000000 
00012366 l       .debug_str	00000000 
00012373 l       .debug_str	00000000 
000123d2 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000123dc l       .debug_str	00000000 
00012437 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
0001243d l       .debug_str	00000000 
00012497 l       .debug_str	00000000 
0001249c l       .debug_str	00000000 
0005c2a9 l       .debug_str	00000000 
000124f7 l       .debug_str	00000000 
00012528 l       .debug_str	00000000 
00012536 l       .debug_str	00000000 
00012566 l       .debug_str	00000000 
00012573 l       .debug_str	00000000 
000125a8 l       .debug_str	00000000 
000125e5 l       .debug_str	00000000 
000125f0 l       .debug_str	00000000 
0001262b l       .debug_str	00000000 
00012635 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
000126a8 l       .debug_str	00000000 
000126b4 l       .debug_str	00000000 
000126e5 l       .debug_str	00000000 
000126f3 l       .debug_str	00000000 
00012723 l       .debug_str	00000000 
00012730 l       .debug_str	00000000 
00012760 l       .debug_str	00000000 
0001276d l       .debug_str	00000000 
000127a1 l       .debug_str	00000000 
000127b2 l       .debug_str	00000000 
000127ed l       .debug_str	00000000 
00012805 l       .debug_str	00000000 
00012858 l       .debug_str	00000000 
0001289e l       .debug_str	00000000 
000128c1 l       .debug_str	00000000 
00012907 l       .debug_str	00000000 
0001292a l       .debug_str	00000000 
00012986 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f129 l       .debug_str	00000000 
0000f134 l       .debug_str	00000000 
0000f13e l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
0001935c l       .debug_str	00000000 
0000f147 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000193a7 l       .debug_str	00000000 
00025d0f l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0003519f l       .debug_str	00000000 
0002fafc l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0002fa25 l       .debug_str	00000000 
0005b563 l       .debug_str	00000000 
00060730 l       .debug_str	00000000 
00012991 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00010ca9 l       .debug_str	00000000 
00013159 l       .debug_str	00000000 
00010cac l       .debug_str	00000000 
0004d390 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0005bda2 l       .debug_str	00000000 
000606bb l       .debug_str	00000000 
00025cf4 l       .debug_str	00000000 
00010caf l       .debug_str	00000000 
0005b307 l       .debug_str	00000000 
00011397 l       .debug_str	00000000 
0005c788 l       .debug_str	00000000 
0001299a l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000129a6 l       .debug_str	00000000 
0003e003 l       .debug_str	00000000 
00013927 l       .debug_str	00000000 
00046f3e l       .debug_str	00000000 
0005c600 l       .debug_str	00000000 
00010cca l       .debug_str	00000000 
00010cd5 l       .debug_str	00000000 
00010ce2 l       .debug_str	00000000 
000129c0 l       .debug_str	00000000 
000129ce l       .debug_str	00000000 
000129de l       .debug_str	00000000 
000129cd l       .debug_str	00000000 
000129dd l       .debug_str	00000000 
0001256d l       .debug_str	00000000 
000129ee l       .debug_str	00000000 
000129fc l       .debug_str	00000000 
00012a09 l       .debug_str	00000000 
00012a18 l       .debug_str	00000000 
00012a28 l       .debug_str	00000000 
00030356 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00012a43 l       .debug_str	00000000 
00012a51 l       .debug_str	00000000 
0000232f l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
00012a56 l       .debug_str	00000000 
00012a63 l       .debug_str	00000000 
00012a6f l       .debug_str	00000000 
00012a7d l       .debug_str	00000000 
00012a8c l       .debug_str	00000000 
00012a9e l       .debug_str	00000000 
00012ab4 l       .debug_str	00000000 
00012ab9 l       .debug_str	00000000 
00012ac6 l       .debug_str	00000000 
00012ad3 l       .debug_str	00000000 
00012ae0 l       .debug_str	00000000 
00037b3a l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00012ae3 l       .debug_str	00000000 
00012ae6 l       .debug_str	00000000 
00012aeb l       .debug_str	00000000 
00060cfc l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012af3 l       .debug_str	00000000 
00012afe l       .debug_str	00000000 
00012b0a l       .debug_str	00000000 
00012b15 l       .debug_str	00000000 
00012b20 l       .debug_str	00000000 
00012b2b l       .debug_str	00000000 
00012b36 l       .debug_str	00000000 
00012b41 l       .debug_str	00000000 
00012b4c l       .debug_str	00000000 
00012b57 l       .debug_str	00000000 
00012b62 l       .debug_str	00000000 
00012b6d l       .debug_str	00000000 
00012b78 l       .debug_str	00000000 
00012b84 l       .debug_str	00000000 
00012b90 l       .debug_str	00000000 
00012b9c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005d439 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00011eb1 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042d18 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fbd5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005a61a l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060a10 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00011ebc l       .debug_str	00000000 
00011eea l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00011efb l       .debug_str	00000000 
00011f2f l       .debug_str	00000000 
00011f3d l       .debug_str	00000000 
00011f6e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0004319c l       .debug_str	00000000 
00011f86 l       .debug_str	00000000 
00011f9e l       .debug_str	00000000 
00011fd9 l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
00011ff5 l       .debug_str	00000000 
00011ff9 l       .debug_str	00000000 
0001200a l       .debug_str	00000000 
00012028 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00010cc3 l       .debug_str	00000000 
00010cce l       .debug_str	00000000 
00010cdb l       .debug_str	00000000 
00010ce9 l       .debug_str	00000000 
20000164 l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17hff5b4dd283ecf9fcE
000100b2 l     F .text	000000a8 _ZN3app5chip812render_block17h6c8b81526965606bE
0001064c l     F .text	00000088 _ZN3app5chip812update_color17h39b5eb1e5de90ff7E
00010206 l     F .text	00000022 _ZN3app5chip813PixelIterator10get_window17h111d7a23399766c3E
0001015a l     F .text	000000ac _ZN3app5chip813PixelIterator3new17h975cb5db80e10243E
00010228 l     F .text	00000178 _ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE
200041b4 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17hb69bb065c68bd165E
00010532 l     F .text	0000011a _ZN3app5chip813convert_color17h69ad441a1103d8f7E
0000fd08 l     F .text	000003aa _ZN3app5chip813render_region17hc692a4d55cab74f0E
200001b4 l     O .bss	00004000 _ZN3app5chip816CHIP8_TASK_STACK17hdcbcc41748325ebbE
00010702 l     F .text	00000138 _ZN3app5chip816get_bounding_box17h3d927a3a33434c59E
00026b8c l     O .text	00000004 _ZN3app5chip823PHYSICAL_TO_VIRTUAL_MAP17h5b1a7b084f35e873E
00027390 l     O .text	00000004 _ZN3app5chip823VIRTUAL_TO_PHYSICAL_MAP17h0c964d4301637332E
0001083a l     F .text	0000031e _ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E
00010b58 l     F .text	000004de _ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE
00011036 l     F .text	000000a4 _ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE
000110da l     F .text	00000098 _ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E
0000f75c l     F .text	00000010 _ZN3app5chip88Hardware3new17h53332fc09faf36beE
0000f6a6 l     F .text	000000b6 _ZN3app5chip89task_func17h20d1a4715d78a45aE
000208f0 l     O .text	00000021 str.0
00020930 l     O .text	0000001c str.1
00020a10 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 3zmcssigt164od5g
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
0001fba9 l       .debug_str	00000000 
00060731 l       .debug_str	00000000 
0005dbec l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fbd5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
0005a61a l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060a10 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00004384 l       .debug_str	00000000 
0005ed3c l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016935 l       .debug_str	00000000 
0006190e l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
00012f41 l       .debug_str	00000000 
00012f68 l       .debug_str	00000000 
00012f70 l       .debug_str	00000000 
00012f77 l       .debug_str	00000000 
00012f7d l       .debug_str	00000000 
00012f84 l       .debug_str	00000000 
0005d726 l       .debug_str	00000000 
00012f8a l       .debug_str	00000000 
00012f99 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00012fa7 l       .debug_str	00000000 
00012fac l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005d439 l       .debug_str	00000000 
00012de8 l       .debug_str	00000000 
00012ba8 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0005b127 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000232e5 l       .debug_str	00000000 
00012bb4 l       .debug_str	00000000 
00012beb l       .debug_str	00000000 
0000e7c1 l       .debug_str	00000000 
00012bf7 l       .debug_str	00000000 
00012c2e l       .debug_str	00000000 
00012c39 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012c41 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00012c48 l       .debug_str	00000000 
00012c4f l       .debug_str	00000000 
00060aae l       .debug_str	00000000 
00012c58 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005b2ea l       .debug_str	00000000 
00012c62 l       .debug_str	00000000 
00012f59 l       .debug_str	00000000 
00012c6c l       .debug_str	00000000 
0001a737 l       .debug_str	00000000 
00012ca2 l       .debug_str	00000000 
00012cd0 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042d18 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005df5f l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00012cdc l       .debug_str	00000000 
00012d13 l       .debug_str	00000000 
0005b307 l       .debug_str	00000000 
000605e2 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
0006085b l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00012d1c l       .debug_str	00000000 
00012d30 l       .debug_str	00000000 
00012d63 l       .debug_str	00000000 
00012d6e l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00012da4 l       .debug_str	00000000 
00012de2 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00012df5 l       .debug_str	00000000 
00012e38 l       .debug_str	00000000 
00012e50 l       .debug_str	00000000 
00012e90 l       .debug_str	00000000 
00012ea5 l       .debug_str	00000000 
00012edf l       .debug_str	00000000 
00012eee l       .debug_str	00000000 
00012f2d l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0005b563 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000192e3 l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039bfa l       .debug_str	00000000 
0005d2e3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
20004a64 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h59a4aa8a83a81f4aE
200049b8 l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h163add160b6b9aeeE
200049b8 l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h441481867ef0356fE
20004a4c l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17h8cf0280828a4287dE
200049b4 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17h4fe28d66de6f4ab2E
00011568 l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E
00011cba l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E
0001142e l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E
000113e2 l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E
20004a0a l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h040da56764e02a75E
20004a5c l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17hacfa42d26b44dc46E
000274d0 l     O .text	00000021 str.0
00027510 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 4lznhndqn2vyhgat
0001fa68 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005a240 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0001643f l       .debug_str	00000000 
00010c9e l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00013019 l       .debug_str	00000000 
00034b0c l       .debug_str	00000000 
00010ca3 l       .debug_str	00000000 
0001fb54 l       .debug_str	00000000 
00010c9a l       .debug_str	00000000 
0001301f l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00012fb0 l       .debug_str	00000000 
00019a4b l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0001fb4e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n402vs8u2uo93u9
00013077 l       .debug_str	00000000 
0000e792 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00041455 l       .debug_str	00000000 
0001a55e l       .debug_str	00000000 
0003e005 l       .debug_str	00000000 
0000e795 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
00016b04 l       .debug_str	00000000 
0005d439 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012063 l       .debug_str	00000000 
0001206c l       .debug_str	00000000 
00012075 l       .debug_str	00000000 
00012080 l       .debug_str	00000000 
0001208b l       .debug_str	00000000 
00012096 l       .debug_str	00000000 
000120a2 l       .debug_str	00000000 
000120ac l       .debug_str	00000000 
000120b9 l       .debug_str	00000000 
000120c7 l       .debug_str	00000000 
000120d6 l       .debug_str	00000000 
000120e3 l       .debug_str	00000000 
00030367 l       .debug_str	00000000 
00030356 l       .debug_str	00000000 
0003519f l       .debug_str	00000000 
0001302b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4op4c7h4jps44h2j
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
000130aa l       .debug_str	00000000 
000130e7 l       .debug_str	00000000 
000130f8 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00039bfa l       .debug_str	00000000 
0005d2e3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 50njrjlotjql8eh3
0001319c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0001312a l       .debug_str	00000000 
0001312f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013136 l       .debug_str	00000000 
0001313e l       .debug_str	00000000 
0000c144 l       .debug_str	00000000 
00013146 l       .debug_str	00000000 
0001314e l       .debug_str	00000000 
00013155 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0001315c l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001fbec l       .debug_str	00000000 
000131b1 l       .debug_str	00000000 
00013161 l       .debug_str	00000000 
000344b3 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53ibzm1eooc9qec2
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000131bd l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013216 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
000131c5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 9p7wjmcx8ujsz0s
00013252 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00013223 l       .debug_str	00000000 
00013249 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 mka4gzufox8dws5
0000ea39 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00013291 l       .debug_str	00000000 
0001329c l       .debug_str	00000000 
000132d7 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00013311 l       .debug_str	00000000 
00013341 l       .debug_str	00000000 
00013354 l       .debug_str	00000000 
0000a666 l       .debug_str	00000000 
00013384 l       .debug_str	00000000 
0000a948 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005eecb l       .debug_str	00000000 
00035ebf l       .debug_str	00000000 
0001325a l       .debug_str	00000000 
0001325f l       .debug_str	00000000 
00013265 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0001326d l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nnlkt1k56qesyal
0001353b l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
000134a7 l       .debug_str	00000000 
00013584 l       .debug_str	00000000 
000135ce l       .debug_str	00000000 
00013621 l       .debug_str	00000000 
000136b0 l       .debug_str	00000000 
00013713 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0001378b l       .debug_str	00000000 
000137fd l       .debug_str	00000000 
000138bb l       .debug_str	00000000 
0005b563 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000113bc l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0004429b l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016935 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016810 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
0005fe56 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
000113c4 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
000113ce l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00013821 l       .debug_str	00000000 
000137af l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0001338d l       .debug_str	00000000 
00013417 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 r34gpska6wbd31
00012b0a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000138bf l       .debug_str	00000000 
000343cd l       .debug_str	00000000 
0000ea08 l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00013922 l       .debug_str	00000000 
00013916 l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
00013929 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 rclpy9fcvorr8wf
00000c36 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005eecb l       .debug_str	00000000 
00035ebf l       .debug_str	00000000 
0001325a l       .debug_str	00000000 
0001325f l       .debug_str	00000000 
00013265 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
0002ffec l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013934 l       .debug_str	00000000 
00013990 l       .debug_str	00000000 
000138bc l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
0001502b l       .debug_str	00000000 
00014026 l       .debug_str	00000000 
00014050 l       .debug_str	00000000 
0001409e l       .debug_str	00000000 
000140a6 l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
000140f3 l       .debug_str	00000000 
0001414d l       .debug_str	00000000 
0001415b l       .debug_str	00000000 
000141ae l       .debug_str	00000000 
000141b6 l       .debug_str	00000000 
00011afa l       .debug_str	00000000 
0001420b l       .debug_str	00000000 
00014249 l       .debug_str	00000000 
00014264 l       .debug_str	00000000 
000142c3 l       .debug_str	00000000 
000138bc l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
00014328 l       .debug_str	00000000 
00014359 l       .debug_str	00000000 
00014364 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00014396 l       .debug_str	00000000 
000143c4 l       .debug_str	00000000 
000143d6 l       .debug_str	00000000 
000143fc l       .debug_str	00000000 
00014408 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
0001444f l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c0c6 l       .debug_str	00000000 
0001449a l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
000144a0 l       .debug_str	00000000 
0001452c l       .debug_str	00000000 
00014547 l       .debug_str	00000000 
00014577 l       .debug_str	00000000 
000145ac l       .debug_str	00000000 
000145dc l       .debug_str	00000000 
000145f2 l       .debug_str	00000000 
00014628 l       .debug_str	00000000 
00014643 l       .debug_str	00000000 
0001467d l       .debug_str	00000000 
0001469c l       .debug_str	00000000 
000146d8 l       .debug_str	00000000 
000146fe l       .debug_str	00000000 
0001470a l       .debug_str	00000000 
00014731 l       .debug_str	00000000 
0001473e l       .debug_str	00000000 
0001494b l       .debug_str	00000000 
0001478c l       .debug_str	00000000 
000149bb l       .debug_str	00000000 
000147dd l       .debug_str	00000000 
0001482f l       .debug_str	00000000 
0001483b l       .debug_str	00000000 
00014886 l       .debug_str	00000000 
00014898 l       .debug_str	00000000 
000148db l       .debug_str	00000000 
000148e6 l       .debug_str	00000000 
00014942 l       .debug_str	00000000 
00014953 l       .debug_str	00000000 
000149b2 l       .debug_str	00000000 
000149c6 l       .debug_str	00000000 
00014a1c l       .debug_str	00000000 
00014ab1 l       .debug_str	00000000 
00014abd l       .debug_str	00000000 
00014b57 l       .debug_str	00000000 
00014b68 l       .debug_str	00000000 
00014b8d l       .debug_str	00000000 
00014c36 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
00014c47 l       .debug_str	00000000 
00014ccf l       .debug_str	00000000 
00014c86 l       .debug_str	00000000 
00014cca l       .debug_str	00000000 
00014d14 l       .debug_str	00000000 
00014d55 l       .debug_str	00000000 
00014d7a l       .debug_str	00000000 
00014dcb l       .debug_str	00000000 
00014e10 l       .debug_str	00000000 
00014e63 l       .debug_str	00000000 
00014ec4 l       .debug_str	00000000 
00014f2b l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
00014f72 l       .debug_str	00000000 
00014fbd l       .debug_str	00000000 
00014fca l       .debug_str	00000000 
000150a4 l       .debug_str	00000000 
0001509c l       .debug_str	00000000 
000150ac l       .debug_str	00000000 
00003d4f l       .debug_str	00000000 
000150c8 l       .debug_str	00000000 
0001513d l       .debug_str	00000000 
00015168 l       .debug_str	00000000 
000151e1 l       .debug_str	00000000 
000151eb l       .debug_str	00000000 
00015211 l       .debug_str	00000000 
0001524a l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
00015262 l       .debug_str	00000000 
0001529b l       .debug_str	00000000 
000152d3 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
0001530c l       .debug_str	00000000 
00015347 l       .debug_str	00000000 
0001538b l       .debug_str	00000000 
000153d1 l       .debug_str	00000000 
0001540d l       .debug_str	00000000 
00015435 l       .debug_str	00000000 
00015471 l       .debug_str	00000000 
00015495 l       .debug_str	00000000 
000154f2 l       .debug_str	00000000 
00015506 l       .debug_str	00000000 
00015557 l       .debug_str	00000000 
0001643f l       .debug_str	00000000 
00015563 l       .debug_str	00000000 
000155b4 l       .debug_str	00000000 
000155cb l       .debug_str	00000000 
0001561c l       .debug_str	00000000 
0001563a l       .debug_str	00000000 
0001568b l       .debug_str	00000000 
0001569d l       .debug_str	00000000 
000156f5 l       .debug_str	00000000 
0001570b l       .debug_str	00000000 
0001576e l       .debug_str	00000000 
00015799 l       .debug_str	00000000 
000157fc l       .debug_str	00000000 
00015871 l       .debug_str	00000000 
000158d5 l       .debug_str	00000000 
000158df l       .debug_str	00000000 
0001594a l       .debug_str	00000000 
00015959 l       .debug_str	00000000 
000159c5 l       .debug_str	00000000 
000159f7 l       .debug_str	00000000 
00015a1d l       .debug_str	00000000 
00015a8c l       .debug_str	00000000 
00015aac l       .debug_str	00000000 
00015b1c l       .debug_str	00000000 
00015b3d l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00015bb1 l       .debug_str	00000000 
00015c31 l       .debug_str	00000000 
00015c77 l       .debug_str	00000000 
00015ca0 l       .debug_str	00000000 
00015ca7 l       .debug_str	00000000 
00015cdf l       .debug_str	00000000 
00015d1e l       .debug_str	00000000 
00015d25 l       .debug_str	00000000 
00015d9e l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00015e35 l       .debug_str	00000000 
00015eb3 l       .debug_str	00000000 
00015ebd l       .debug_str	00000000 
00015f4b l       .debug_str	00000000 
00015ff7 l       .debug_str	00000000 
0001603e l       .debug_str	00000000 
0001604b l       .debug_str	00000000 
00016098 l       .debug_str	00000000 
000160ab l       .debug_str	00000000 
000160fd l       .debug_str	00000000 
0001616d l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
000161cd l       .debug_str	00000000 
000161de l       .debug_str	00000000 
00016243 l       .debug_str	00000000 
00016273 l       .debug_str	00000000 
0001627c l       .debug_str	00000000 
000162b8 l       .debug_str	00000000 
000162cc l       .debug_str	00000000 
00016307 l       .debug_str	00000000 
0001634d l       .debug_str	00000000 
0001636b l       .debug_str	00000000 
0001639b l       .debug_str	00000000 
000163a4 l       .debug_str	00000000 
000163de l       .debug_str	00000000 
000163f0 l       .debug_str	00000000 
0001641e l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00016425 l       .debug_str	00000000 
00016431 l       .debug_str	00000000 
0001643b l       .debug_str	00000000 
00016445 l       .debug_str	00000000 
00016468 l       .debug_str	00000000 
000343cd l       .debug_str	00000000 
000164bd l       .debug_str	00000000 
0001651d l       .debug_str	00000000 
00016529 l       .debug_str	00000000 
00016579 l       .debug_str	00000000 
000165dc l       .debug_str	00000000 
00016643 l       .debug_str	00000000 
000166b2 l       .debug_str	00000000 
0005b563 l       .debug_str	00000000 
000138bb l       .debug_str	00000000 
00016742 l       .debug_str	00000000 
0005c600 l       .debug_str	00000000 
00010cd5 l       .debug_str	00000000 
0000c144 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
0005adc8 l       .debug_str	00000000 
00011b04 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00016769 l       .debug_str	00000000 
0005b544 l       .debug_str	00000000 
00016776 l       .debug_str	00000000 
0005b2ea l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00016781 l       .debug_str	00000000 
0006190e l       .debug_str	00000000 
000167d5 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
0005d2d1 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
000167e0 l       .debug_str	00000000 
0001680b l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016817 l       .debug_str	00000000 
00016851 l       .debug_str	00000000 
0001688a l       .debug_str	00000000 
00016899 l       .debug_str	00000000 
000168dc l       .debug_str	00000000 
0005c815 l       .debug_str	00000000 
000391a0 l       .debug_str	00000000 
0005e23a l       .debug_str	00000000 
0001691e l       .debug_str	00000000 
00016942 l       .debug_str	00000000 
00015eb8 l       .debug_str	00000000 
0005ad99 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00016962 l       .debug_str	00000000 
00046f3e l       .debug_str	00000000 
0001699d l       .debug_str	00000000 
000169a4 l       .debug_str	00000000 
00037b3a l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000169e5 l       .debug_str	00000000 
00016a2c l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0001ff19 l       .debug_str	00000000 
00016a06 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
00016ff6 l       .debug_str	00000000 
00016a28 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012af3 l       .debug_str	00000000 
00012afe l       .debug_str	00000000 
00012b0a l       .debug_str	00000000 
00012af7 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b84b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000139f2 l       .debug_str	00000000 
00013a4a l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00013a97 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00013aa1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00013aad l       .debug_str	00000000 
000167f1 l       .debug_str	00000000 
000167e5 l       .debug_str	00000000 
00016810 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005eecb l       .debug_str	00000000 
00035ebf l       .debug_str	00000000 
0001325a l       .debug_str	00000000 
0001325f l       .debug_str	00000000 
00013265 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000113bc l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013abe l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
00013ac4 l       .debug_str	00000000 
0002ffec l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039bfa l       .debug_str	00000000 
0005d2e3 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013acf l       .debug_str	00000000 
00013af8 l       .debug_str	00000000 
00013b07 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
00011ff5 l       .debug_str	00000000 
00016893 l       .debug_str	00000000 
00013b21 l       .debug_str	00000000 
00013b4a l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00013b7f l       .debug_str	00000000 
00013b93 l       .debug_str	00000000 
00013ba6 l       .debug_str	00000000 
00013bf2 l       .debug_str	00000000 
00013c00 l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00035e99 l       .debug_str	00000000 
00013c08 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
00036d13 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00013d59 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
0005fe56 l       .debug_str	00000000 
000169bf l       .debug_str	00000000 
0004429b l       .debug_str	00000000 
000113c4 l       .debug_str	00000000 
00013c12 l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016935 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
00015203 l       .debug_str	00000000 
00016975 l       .debug_str	00000000 
000113ce l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
000166d6 l       .debug_str	00000000 
00016667 l       .debug_str	00000000 
00013c18 l       .debug_str	00000000 
00013c1e l       .debug_str	00000000 
00013c47 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
000151ec l       .debug_str	00000000 
00013c53 l       .debug_str	00000000 
000131bd l       .debug_str	00000000 
00013c80 l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
00013c8b l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00013cb4 l       .debug_str	00000000 
00013cbb l       .debug_str	00000000 
00013ce5 l       .debug_str	00000000 
00020c39 l       .debug_str	00000000 
00013ce9 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
00013cf2 l       .debug_str	00000000 
00013d34 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013d47 l       .debug_str	00000000 
0005fd60 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0004b5ed l       .debug_str	00000000 
00013d62 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00013d71 l       .debug_str	00000000 
00013d7b l       .debug_str	00000000 
00016a12 l       .debug_str	00000000 
000161d9 l       .debug_str	00000000 
00013d80 l       .debug_str	00000000 
00013e06 l       .debug_str	00000000 
00013e10 l       .debug_str	00000000 
00013ea2 l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
00013ee8 l       .debug_str	00000000 
00013f7c l       .debug_str	00000000 
00013fde l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
000173ee l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039bfa l       .debug_str	00000000 
0005d2e3 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001935c l       .debug_str	00000000 
0000c380 l       .debug_str	00000000 
0000c3e5 l       .debug_str	00000000 
00016ae5 l       .debug_str	00000000 
00016aee l       .debug_str	00000000 
00016af6 l       .debug_str	00000000 
00016aff l       .debug_str	00000000 
0003519f l       .debug_str	00000000 
00016b0c l       .debug_str	00000000 
00016b1c l       .debug_str	00000000 
00016b2d l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000193a7 l       .debug_str	00000000 
0000f129 l       .debug_str	00000000 
00016b3e l       .debug_str	00000000 
0000e879 l       .debug_str	00000000 
0000e887 l       .debug_str	00000000 
0001940a l       .debug_str	00000000 
00016b47 l       .debug_str	00000000 
00016b4d l       .debug_str	00000000 
00016b58 l       .debug_str	00000000 
00016b62 l       .debug_str	00000000 
00016b6c l       .debug_str	00000000 
0000b963 l       .debug_str	00000000 
00016bb4 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
00016bfc l       .debug_str	00000000 
00016c44 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00016c4d l       .debug_str	00000000 
00016c76 l       .debug_str	00000000 
00016c7f l       .debug_str	00000000 
00016cdc l       .debug_str	00000000 
0005fe56 l       .debug_str	00000000 
00016d02 l       .debug_str	00000000 
00016d2a l       .debug_str	00000000 
00016d5c l       .debug_str	00000000 
00014359 l       .debug_str	00000000 
00016d8d l       .debug_str	00000000 
00016dea l       .debug_str	00000000 
00016e47 l       .debug_str	00000000 
00016ea4 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00016ed6 l       .debug_str	00000000 
00016f1b l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
00016f27 l       .debug_str	00000000 
0005a360 l       .debug_str	00000000 
00016f63 l       .debug_str	00000000 
0000e9b2 l       .debug_str	00000000 
00016fa7 l       .debug_str	00000000 
00016fee l       .debug_str	00000000 
00016ffc l       .debug_str	00000000 
00017043 l       .debug_str	00000000 
00017051 l       .debug_str	00000000 
00017091 l       .debug_str	00000000 
00017099 l       .debug_str	00000000 
0000ea39 l       .debug_str	00000000 
000170a6 l       .debug_str	00000000 
000170e1 l       .debug_str	00000000 
0001711f l       .debug_str	00000000 
0001714f l       .debug_str	00000000 
00017163 l       .debug_str	00000000 
00017193 l       .debug_str	00000000 
000171a7 l       .debug_str	00000000 
000171d7 l       .debug_str	00000000 
000171eb l       .debug_str	00000000 
0004001e l       .debug_str	00000000 
00017236 l       .debug_str	00000000 
0001728d l       .debug_str	00000000 
0001729c l       .debug_str	00000000 
000172e7 l       .debug_str	00000000 
0000bfaf l       .debug_str	00000000 
0001735e l       .debug_str	00000000 
000173e3 l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
00017465 l       .debug_str	00000000 
000174ea l       .debug_str	00000000 
000174f5 l       .debug_str	00000000 
0005ad99 l       .debug_str	00000000 
0001757e l       .debug_str	00000000 
00020387 l       .debug_str	00000000 
000175f5 l       .debug_str	00000000 
0005c787 l       .debug_str	00000000 
0001768a l       .debug_str	00000000 
00017721 l       .debug_str	00000000 
000177bc l       .debug_str	00000000 
00017851 l       .debug_str	00000000 
000178e8 l       .debug_str	00000000 
00017983 l       .debug_str	00000000 
00017a4b l       .debug_str	00000000 
00017a56 l       .debug_str	00000000 
00017b22 l       .debug_str	00000000 
00017bb2 l       .debug_str	00000000 
00017bbe l       .debug_str	00000000 
00017c64 l       .debug_str	00000000 
00017c70 l       .debug_str	00000000 
00017d14 l       .debug_str	00000000 
00017db6 l       .debug_str	00000000 
00017e5a l       .debug_str	00000000 
00017eae l       .debug_str	00000000 
00017f03 l       .debug_str	00000000 
00017f58 l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
00017fdb l       .debug_str	00000000 
0001805f l       .debug_str	00000000 
000180e3 l       .debug_str	00000000 
0000282b l       .debug_str	00000000 
0001812a l       .debug_str	00000000 
00002831 l       .debug_str	00000000 
00018171 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
000181b8 l       .debug_str	00000000 
00018236 l       .debug_str	00000000 
000182b5 l       .debug_str	00000000 
00018350 l       .debug_str	00000000 
000183e4 l       .debug_str	00000000 
00018431 l       .debug_str	00000000 
0001843d l       .debug_str	00000000 
000184a0 l       .debug_str	00000000 
000184e8 l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
000184f0 l       .debug_str	00000000 
00018584 l       .debug_str	00000000 
000185ea l       .debug_str	00000000 
0001867b l       .debug_str	00000000 
0001871a l       .debug_str	00000000 
000187ab l       .debug_str	00000000 
0001884a l       .debug_str	00000000 
000188ec l       .debug_str	00000000 
0001897d l       .debug_str	00000000 
00018a2b l       .debug_str	00000000 
00018adb l       .debug_str	00000000 
00018b8f l       .debug_str	00000000 
00018c82 l       .debug_str	00000000 
00018c8d l       .debug_str	00000000 
00018d84 l       .debug_str	00000000 
00018e30 l       .debug_str	00000000 
00018e3a l       .debug_str	00000000 
00018eac l       .debug_str	00000000 
00018f21 l       .debug_str	00000000 
00018f94 l       .debug_str	00000000 
00019005 l       .debug_str	00000000 
00019078 l       .debug_str	00000000 
000190ef l       .debug_str	00000000 
00019164 l       .debug_str	00000000 
000191d9 l       .debug_str	00000000 
00019249 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
000192d5 l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
000192db l       .debug_str	00000000 
0001409e l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00016810 l       .debug_str	00000000 
00016781 l       .debug_str	00000000 
00016ff6 l       .debug_str	00000000 
000192de l       .debug_str	00000000 
000192e8 l       .debug_str	00000000 
000192f2 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
000192fc l       .debug_str	00000000 
0001932d l       .debug_str	00000000 
00061e7b l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
00019362 l       .debug_str	00000000 
0001936c l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00019376 l       .debug_str	00000000 
0001937f l       .debug_str	00000000 
000193ae l       .debug_str	00000000 
000193bb l       .debug_str	00000000 
00012ae0 l       .debug_str	00000000 
000193be l       .debug_str	00000000 
000193c1 l       .debug_str	00000000 
000193c4 l       .debug_str	00000000 
000193c7 l       .debug_str	00000000 
000193ca l       .debug_str	00000000 
00019418 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012af7 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
00012b0a l       .debug_str	00000000 
00012b15 l       .debug_str	00000000 
00019488 l       .debug_str	00000000 
00019462 l       .debug_str	00000000 
000194bb l       .debug_str	00000000 
00019496 l       .debug_str	00000000 
000194ec l       .debug_str	00000000 
000194c8 l       .debug_str	00000000 
0001951d l       .debug_str	00000000 
000194f8 l       .debug_str	00000000 
00019551 l       .debug_str	00000000 
0001952a l       .debug_str	00000000 
00019586 l       .debug_str	00000000 
00019560 l       .debug_str	00000000 
000195ba l       .debug_str	00000000 
00019594 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00016a90 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000192e3 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
000192ed l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000192f7 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005eecb l       .debug_str	00000000 
00035ebf l       .debug_str	00000000 
0001325a l       .debug_str	00000000 
0001325f l       .debug_str	00000000 
00013265 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00038db0 l       .debug_str	00000000 
0002ffec l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
000123ee l     F .text	00000044 _ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE
000124e2 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
00012550 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE
00012588 l     F .text	0000001a _ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
0001568b l       .debug_str	00000000 
00019a95 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c0c6 l       .debug_str	00000000 
00019ae0 l       .debug_str	00000000 
00014628 l       .debug_str	00000000 
00019b16 l       .debug_str	00000000 
0001467d l       .debug_str	00000000 
00019b50 l       .debug_str	00000000 
00019b8c l       .debug_str	00000000 
000146fe l       .debug_str	00000000 
00019bb2 l       .debug_str	00000000 
00014731 l       .debug_str	00000000 
00019bd9 l       .debug_str	00000000 
0001494b l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00019c27 l       .debug_str	00000000 
000149bb l       .debug_str	00000000 
00019c78 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00019cca l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
00019d1f l       .debug_str	00000000 
00014ab1 l       .debug_str	00000000 
00019db4 l       .debug_str	00000000 
00019e02 l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
00019e11 l       .debug_str	00000000 
00019e62 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
00019e7a l       .debug_str	00000000 
00019ecf l       .debug_str	00000000 
00013252 l       .debug_str	00000000 
00019eeb l       .debug_str	00000000 
00019f31 l       .debug_str	00000000 
00019f39 l       .debug_str	00000000 
000148db l       .debug_str	00000000 
00019f82 l       .debug_str	00000000 
0005c787 l       .debug_str	00000000 
00019ff1 l       .debug_str	00000000 
00015557 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0001a042 l       .debug_str	00000000 
0001a093 l       .debug_str	00000000 
000156f5 l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00013c80 l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
00013c8b l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016935 l       .debug_str	00000000 
0001a0eb l       .debug_str	00000000 
0001a14e l       .debug_str	00000000 
0001a178 l       .debug_str	00000000 
0001a1db l       .debug_str	00000000 
0001a1e4 l       .debug_str	00000000 
0001a251 l       .debug_str	00000000 
0001a263 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
0001a2d4 l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
0001a334 l       .debug_str	00000000 
0001a367 l       .debug_str	00000000 
0001a3d1 l       .debug_str	00000000 
0001a404 l       .debug_str	00000000 
0001a409 l       .debug_str	00000000 
0001a46d l       .debug_str	00000000 
0005f040 l       .debug_str	00000000 
0001a4c8 l       .debug_str	00000000 
0001a504 l       .debug_str	00000000 
0001a512 l       .debug_str	00000000 
0001a541 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00016810 l       .debug_str	00000000 
0005adc8 l       .debug_str	00000000 
00011b04 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005b544 l       .debug_str	00000000 
0005b2ea l       .debug_str	00000000 
00016769 l       .debug_str	00000000 
00016776 l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000167d5 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
0005d2d1 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016817 l       .debug_str	00000000 
00016851 l       .debug_str	00000000 
0001688a l       .debug_str	00000000 
00016899 l       .debug_str	00000000 
000168dc l       .debug_str	00000000 
0005c815 l       .debug_str	00000000 
000391a0 l       .debug_str	00000000 
0005e23a l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0001691e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
00036432 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
0001a549 l       .debug_str	00000000 
0001a561 l       .debug_str	00000000 
0006190e l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0001a57e l       .debug_str	00000000 
0001256d l       .debug_str	00000000 
0001a597 l       .debug_str	00000000 
0001a5b3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000195c8 l       .debug_str	00000000 
0001961d l       .debug_str	00000000 
00019667 l       .debug_str	00000000 
0001966e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00012b12 l       .debug_str	00000000 
00012b1d l       .debug_str	00000000 
00012b28 l       .debug_str	00000000 
00012b33 l       .debug_str	00000000 
0001a55b l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013ac4 l       .debug_str	00000000 
0005eecb l       .debug_str	00000000 
0002ffec l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00019676 l       .debug_str	00000000 
00013af8 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013b07 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
00011ff5 l       .debug_str	00000000 
00016893 l       .debug_str	00000000 
0001969f l       .debug_str	00000000 
00013b4a l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00013b7f l       .debug_str	00000000 
00013b93 l       .debug_str	00000000 
000196c8 l       .debug_str	00000000 
00013bf2 l       .debug_str	00000000 
00013c00 l       .debug_str	00000000 
00013c08 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
000131bd l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00019714 l       .debug_str	00000000 
0000afe7 l       .debug_str	00000000 
0001973d l       .debug_str	00000000 
00019747 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00016ff6 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
0005ad99 l       .debug_str	00000000 
0001974b l       .debug_str	00000000 
0005b2be l       .debug_str	00000000 
0001a5ad l       .debug_str	00000000 
0001a577 l       .debug_str	00000000 
00019755 l       .debug_str	00000000 
00011afa l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
000197aa l       .debug_str	00000000 
000197e8 l       .debug_str	00000000 
00019800 l       .debug_str	00000000 
00014249 l       .debug_str	00000000 
0001983e l       .debug_str	00000000 
000138bc l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
000198a3 l       .debug_str	00000000 
000198d3 l       .debug_str	00000000 
000198fa l       .debug_str	00000000 
000143fc l       .debug_str	00000000 
00019920 l       .debug_str	00000000 
00019965 l       .debug_str	00000000 
00019971 l       .debug_str	00000000 
0001178f l       .debug_str	00000000 
000199b7 l       .debug_str	00000000 
000199fd l       .debug_str	00000000 
00019a0a l       .debug_str	00000000 
00019a48 l       .debug_str	00000000 
00019a4e l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
00012738 l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
000127a2 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
000127cc l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
0001280a l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
000128da l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
0001a637 l       .debug_str	00000000 
0001a635 l       .debug_str	00000000 
0001a688 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001a5bc l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000131bd l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001a5db l       .debug_str	00000000 
0001a62c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
0001c7f9 l       .debug_str	00000000 
00013146 l       .debug_str	00000000 
0001314e l       .debug_str	00000000 
00013155 l       .debug_str	00000000 
00010c9a l       .debug_str	00000000 
0001301f l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0001a9b0 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
0001a9b4 l       .debug_str	00000000 
00019f31 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00035e99 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00013d59 l       .debug_str	00000000 
0001aa32 l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00046f3e l       .debug_str	00000000 
000607e4 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0001aa49 l       .debug_str	00000000 
00013c47 l       .debug_str	00000000 
0001aa72 l       .debug_str	00000000 
0001aaa4 l       .debug_str	00000000 
00013ac4 l       .debug_str	00000000 
00038db0 l       .debug_str	00000000 
0002ffec l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
0001aab6 l       .debug_str	00000000 
0001aadf l       .debug_str	00000000 
00013b07 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
00011ff5 l       .debug_str	00000000 
00016893 l       .debug_str	00000000 
0001ab04 l       .debug_str	00000000 
00013b4a l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0001ab2d l       .debug_str	00000000 
0001ab57 l       .debug_str	00000000 
0001ab80 l       .debug_str	00000000 
0001abcc l       .debug_str	00000000 
00013c00 l       .debug_str	00000000 
0001abf0 l       .debug_str	00000000 
00013c08 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b3f5 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
0001abfe l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
00036d13 l       .debug_str	00000000 
0005c0af l       .debug_str	00000000 
0004f102 l       .debug_str	00000000 
0005ce14 l       .debug_str	00000000 
0005e72d l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
0001f959 l       .debug_str	00000000 
0004429b l       .debug_str	00000000 
000399ba l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
0001fc69 l       .debug_str	00000000 
0001fc11 l       .debug_str	00000000 
0001ac13 l       .debug_str	00000000 
0001ac1d l       .debug_str	00000000 
0001faf1 l       .debug_str	00000000 
0003519f l       .debug_str	00000000 
0001f8c9 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0001d5e0 l       .debug_str	00000000 
0005fe56 l       .debug_str	00000000 
0001fca2 l       .debug_str	00000000 
0005d2d1 l       .debug_str	00000000 
0001fc81 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
0005ad99 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
0001f91a l       .debug_str	00000000 
00013c18 l       .debug_str	00000000 
0001ac26 l       .debug_str	00000000 
0001ac4f l       .debug_str	00000000 
0001ac5d l       .debug_str	00000000 
0001ac6a l       .debug_str	00000000 
0001ac7d l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
0001ac96 l       .debug_str	00000000 
000131bd l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0001acab l       .debug_str	00000000 
0001ad27 l       .debug_str	00000000 
0001acbe l       .debug_str	00000000 
0001ad00 l       .debug_str	00000000 
0001ad15 l       .debug_str	00000000 
0005fd60 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0004b5ed l       .debug_str	00000000 
0001ad32 l       .debug_str	00000000 
0001ad3c l       .debug_str	00000000 
0001ad6e l       .debug_str	00000000 
0001ad82 l       .debug_str	00000000 
0001ad97 l       .debug_str	00000000 
0001eec4 l       .debug_str	00000000 
0001f0cd l       .debug_str	00000000 
0001ad9e l       .debug_str	00000000 
0001ada9 l       .debug_str	00000000 
0001ae2d l       .debug_str	00000000 
0001ae5b l       .debug_str	00000000 
0001aee1 l       .debug_str	00000000 
0004319c l       .debug_str	00000000 
0001af09 l       .debug_str	00000000 
0001af1a l       .debug_str	00000000 
0001afa4 l       .debug_str	00000000 
0001afc2 l       .debug_str	00000000 
0001b050 l       .debug_str	00000000 
0001b077 l       .debug_str	00000000 
0001b106 l       .debug_str	00000000 
0001b14e l       .debug_str	00000000 
0001b17d l       .debug_str	00000000 
0001b1c5 l       .debug_str	00000000 
0001b1e4 l       .debug_str	00000000 
0001b22c l       .debug_str	00000000 
0001b23c l       .debug_str	00000000 
0001b284 l       .debug_str	00000000 
0001b295 l       .debug_str	00000000 
0001b2dd l       .debug_str	00000000 
0001b2e5 l       .debug_str	00000000 
0001b32d l       .debug_str	00000000 
0001b337 l       .debug_str	00000000 
0001b37f l       .debug_str	00000000 
0001b399 l       .debug_str	00000000 
0001b3e1 l       .debug_str	00000000 
0001b3fa l       .debug_str	00000000 
0001b442 l       .debug_str	00000000 
0001b455 l       .debug_str	00000000 
0001b49d l       .debug_str	00000000 
0001b4a6 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
0001b4ee l       .debug_str	00000000 
0001b538 l       .debug_str	00000000 
0001b583 l       .debug_str	00000000 
0001b5c1 l       .debug_str	00000000 
0001b5f2 l       .debug_str	00000000 
000197e8 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0001b630 l       .debug_str	00000000 
0001b659 l       .debug_str	00000000 
0001b664 l       .debug_str	00000000 
0001b689 l       .debug_str	00000000 
0001b6e8 l       .debug_str	00000000 
000343cd l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
00016810 l       .debug_str	00000000 
0001b74f l       .debug_str	00000000 
0001b779 l       .debug_str	00000000 
0001b7a1 l       .debug_str	00000000 
0001b7d9 l       .debug_str	00000000 
0001b80a l       .debug_str	00000000 
0001b814 l       .debug_str	00000000 
0001b871 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
0001b8a3 l       .debug_str	00000000 
0001b8c9 l       .debug_str	00000000 
0001b8eb l       .debug_str	00000000 
0001b911 l       .debug_str	00000000 
0001b933 l       .debug_str	00000000 
0001b95c l       .debug_str	00000000 
0001b981 l       .debug_str	00000000 
00011885 l       .debug_str	00000000 
0001b9c9 l       .debug_str	00000000 
0001b9d2 l       .debug_str	00000000 
0001ba5c l       .debug_str	00000000 
00010d3a l       .debug_str	00000000 
0001ba79 l       .debug_str	00000000 
0001bb05 l       .debug_str	00000000 
0001bb22 l       .debug_str	00000000 
0001bb42 l       .debug_str	00000000 
0000ea39 l       .debug_str	00000000 
0001bb49 l       .debug_str	00000000 
0001bb84 l       .debug_str	00000000 
0001bbb6 l       .debug_str	00000000 
0001bbc7 l       .debug_str	00000000 
0001bc02 l       .debug_str	00000000 
0001bc48 l       .debug_str	00000000 
000171d7 l       .debug_str	00000000 
0001bc78 l       .debug_str	00000000 
0001bca8 l       .debug_str	00000000 
0001bcc6 l       .debug_str	00000000 
0001bcf6 l       .debug_str	00000000 
0001bd09 l       .debug_str	00000000 
0001bd39 l       .debug_str	00000000 
0001bd4e l       .debug_str	00000000 
0001bd7e l       .debug_str	00000000 
0001bd9a l       .debug_str	00000000 
0001bdca l       .debug_str	00000000 
0001bde8 l       .debug_str	00000000 
0001be18 l       .debug_str	00000000 
0001be33 l       .debug_str	00000000 
0001be63 l       .debug_str	00000000 
0001be87 l       .debug_str	00000000 
0001beb7 l       .debug_str	00000000 
0001bef1 l       .debug_str	00000000 
0001bf21 l       .debug_str	00000000 
0001bf46 l       .debug_str	00000000 
0001bf76 l       .debug_str	00000000 
0001bfa0 l       .debug_str	00000000 
0001bfd6 l       .debug_str	00000000 
0001c007 l       .debug_str	00000000 
0001c041 l       .debug_str	00000000 
0001c076 l       .debug_str	00000000 
0001c0b2 l       .debug_str	00000000 
0001c0d8 l       .debug_str	00000000 
0001c0fa l       .debug_str	00000000 
0001c121 l       .debug_str	00000000 
0001c144 l       .debug_str	00000000 
0001494b l       .debug_str	00000000 
0001c192 l       .debug_str	00000000 
000149bb l       .debug_str	00000000 
0001c1e3 l       .debug_str	00000000 
0001c234 l       .debug_str	00000000 
0001c241 l       .debug_str	00000000 
0001c293 l       .debug_str	00000000 
0001c2a1 l       .debug_str	00000000 
00014886 l       .debug_str	00000000 
0001c2ec l       .debug_str	00000000 
0001c337 l       .debug_str	00000000 
0001c34b l       .debug_str	00000000 
0001c38e l       .debug_str	00000000 
0001c39b l       .debug_str	00000000 
000148db l       .debug_str	00000000 
0001c3de l       .debug_str	00000000 
00014942 l       .debug_str	00000000 
0001c43a l       .debug_str	00000000 
000149b2 l       .debug_str	00000000 
0001c499 l       .debug_str	00000000 
0001c4eb l       .debug_str	00000000 
0001c53d l       .debug_str	00000000 
0001c547 l       .debug_str	00000000 
0001c59c l       .debug_str	00000000 
0001c5f1 l       .debug_str	00000000 
0001c647 l       .debug_str	00000000 
0001482f l       .debug_str	00000000 
0001c69d l       .debug_str	00000000 
0001c6d9 l       .debug_str	00000000 
00016ff6 l       .debug_str	00000000 
0001c717 l       .debug_str	00000000 
0001c752 l       .debug_str	00000000 
00016776 l       .debug_str	00000000 
0001c75d l       .debug_str	00000000 
0001c7a4 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0001c7ba l       .debug_str	00000000 
0001c84b l       .debug_str	00000000 
0001c861 l       .debug_str	00000000 
0001c8a6 l       .debug_str	00000000 
0001c8c0 l       .debug_str	00000000 
0001c923 l       .debug_str	00000000 
0001c943 l       .debug_str	00000000 
0001c982 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0001c9e3 l       .debug_str	00000000 
0001ca22 l       .debug_str	00000000 
0001faec l       .debug_str	00000000 
0001ca49 l       .debug_str	00000000 
0001ca89 l       .debug_str	00000000 
0001cabc l       .debug_str	00000000 
0001cad3 l       .debug_str	00000000 
0001cb19 l       .debug_str	00000000 
0001cb35 l       .debug_str	00000000 
0001cb99 l       .debug_str	00000000 
0001cbbb l       .debug_str	00000000 
0001cbfd l       .debug_str	00000000 
0001cc1e l       .debug_str	00000000 
0001cc60 l       .debug_str	00000000 
0005d96d l       .debug_str	00000000 
0001cc90 l       .debug_str	00000000 
0001ccd4 l       .debug_str	00000000 
0001cd29 l       .debug_str	00000000 
0001cd6d l       .debug_str	00000000 
0001cdc3 l       .debug_str	00000000 
0001ce07 l       .debug_str	00000000 
0001ce7f l       .debug_str	00000000 
0001cec3 l       .debug_str	00000000 
0001cf03 l       .debug_str	00000000 
0001cf1e l       .debug_str	00000000 
0001cf5f l       .debug_str	00000000 
0001cfb5 l       .debug_str	00000000 
0001cff9 l       .debug_str	00000000 
0001d026 l       .debug_str	00000000 
0001d06b l       .debug_str	00000000 
0001d0b3 l       .debug_str	00000000 
0001d0c4 l       .debug_str	00000000 
0001d10c l       .debug_str	00000000 
0001d11d l       .debug_str	00000000 
000344b3 l       .debug_str	00000000 
0001d158 l       .debug_str	00000000 
0001d194 l       .debug_str	00000000 
0001d19a l       .debug_str	00000000 
0001d1d0 l       .debug_str	00000000 
0001d1e3 l       .debug_str	00000000 
0001d21a l       .debug_str	00000000 
0001d22e l       .debug_str	00000000 
0001d270 l       .debug_str	00000000 
0001d28f l       .debug_str	00000000 
0001d2d4 l       .debug_str	00000000 
0001d2ef l       .debug_str	00000000 
0001d354 l       .debug_str	00000000 
0001d3bb l       .debug_str	00000000 
0001d3c6 l       .debug_str	00000000 
0001d40c l       .debug_str	00000000 
0001d452 l       .debug_str	00000000 
0001d45c l       .debug_str	00000000 
0001d4a3 l       .debug_str	00000000 
0001d4ae l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
0001d4f5 l       .debug_str	00000000 
0001d53e l       .debug_str	00000000 
0001d587 l       .debug_str	00000000 
0001d5c0 l       .debug_str	00000000 
0001d5db l       .debug_str	00000000 
0001d5ea l       .debug_str	00000000 
0001d623 l       .debug_str	00000000 
0001d648 l       .debug_str	00000000 
0001d681 l       .debug_str	00000000 
0001d6ba l       .debug_str	00000000 
0001d6e0 l       .debug_str	00000000 
0001d719 l       .debug_str	00000000 
0001d757 l       .debug_str	00000000 
0001d791 l       .debug_str	00000000 
0001d79d l       .debug_str	00000000 
0001d7d9 l       .debug_str	00000000 
0001d7ec l       .debug_str	00000000 
0001d828 l       .debug_str	00000000 
0001d841 l       .debug_str	00000000 
0001d87e l       .debug_str	00000000 
0001d88f l       .debug_str	00000000 
00015557 l       .debug_str	00000000 
0001d8e0 l       .debug_str	00000000 
0001a62c l       .debug_str	00000000 
0001d931 l       .debug_str	00000000 
0001d98c l       .debug_str	00000000 
0001d9ef l       .debug_str	00000000 
0001da0b l       .debug_str	00000000 
0001da6b l       .debug_str	00000000 
0001dacb l       .debug_str	00000000 
0001db2f l       .debug_str	00000000 
0001db4a l       .debug_str	00000000 
0001dbae l       .debug_str	00000000 
0001dbb9 l       .debug_str	00000000 
0001dc23 l       .debug_str	00000000 
0001dc32 l       .debug_str	00000000 
0001dca1 l       .debug_str	00000000 
0001dcb9 l       .debug_str	00000000 
0001dd29 l       .debug_str	00000000 
0001dd42 l       .debug_str	00000000 
0001ddad l       .debug_str	00000000 
0001ddc2 l       .debug_str	00000000 
0001de32 l       .debug_str	00000000 
0001de47 l       .debug_str	00000000 
0001deb7 l       .debug_str	00000000 
0001dec9 l       .debug_str	00000000 
000038f9 l       .debug_str	00000000 
0001df3a l       .debug_str	00000000 
0001dfab l       .debug_str	00000000 
0001dfc1 l       .debug_str	00000000 
0001dfd3 l       .debug_str	00000000 
0001e03f l       .debug_str	00000000 
0001e051 l       .debug_str	00000000 
0001e0bd l       .debug_str	00000000 
0001e0cc l       .debug_str	00000000 
0001e134 l       .debug_str	00000000 
0001e13e l       .debug_str	00000000 
0001e1b2 l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
0001e1bd l       .debug_str	00000000 
0001e235 l       .debug_str	00000000 
0001e24e l       .debug_str	00000000 
0001e2c6 l       .debug_str	00000000 
0001e35c l       .debug_str	00000000 
0001e378 l       .debug_str	00000000 
0001e40e l       .debug_str	00000000 
0001e4a4 l       .debug_str	00000000 
0001e53a l       .debug_str	00000000 
00014ab1 l       .debug_str	00000000 
0001e5af l       .debug_str	00000000 
0001e623 l       .debug_str	00000000 
0001e69c l       .debug_str	00000000 
0001e71b l       .debug_str	00000000 
0001e72c l       .debug_str	00000000 
0001e7ac l       .debug_str	00000000 
0001e80e l       .debug_str	00000000 
0001fd5a l       .debug_str	00000000 
0001e85f l       .debug_str	00000000 
0001e881 l       .debug_str	00000000 
0001e8ae l       .debug_str	00000000 
0001e8dd l       .debug_str	00000000 
0001e8ff l       .debug_str	00000000 
0001e926 l       .debug_str	00000000 
0001e94f l       .debug_str	00000000 
0001e981 l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0001e9d1 l       .debug_str	00000000 
0001ea17 l       .debug_str	00000000 
0001ea2a l       .debug_str	00000000 
0001ea7e l       .debug_str	00000000 
0001eaf0 l       .debug_str	00000000 
0001eb62 l       .debug_str	00000000 
0001ebd4 l       .debug_str	00000000 
0001ec23 l       .debug_str	00000000 
0001ec51 l       .debug_str	00000000 
0001ec5c l       .debug_str	00000000 
0001ecb6 l       .debug_str	00000000 
0001ed2e l       .debug_str	00000000 
0001eda6 l       .debug_str	00000000 
0001edfb l       .debug_str	00000000 
0001ee30 l       .debug_str	00000000 
0000b824 l       .debug_str	00000000 
0001ee5b l       .debug_str	00000000 
0004001e l       .debug_str	00000000 
0001ee8a l       .debug_str	00000000 
0001eeba l       .debug_str	00000000 
0001eed2 l       .debug_str	00000000 
0001ef03 l       .debug_str	00000000 
0001ef35 l       .debug_str	00000000 
0001ef74 l       .debug_str	00000000 
0001ef87 l       .debug_str	00000000 
0001efbf l       .debug_str	00000000 
0001efcb l       .debug_str	00000000 
0001effb l       .debug_str	00000000 
0001f02c l       .debug_str	00000000 
0001f032 l       .debug_str	00000000 
0001f05f l       .debug_str	00000000 
0001f090 l       .debug_str	00000000 
0001f0c3 l       .debug_str	00000000 
0001f0dd l       .debug_str	00000000 
0001f111 l       .debug_str	00000000 
0001f144 l       .debug_str	00000000 
0005a2f8 l       .debug_str	00000000 
0001f191 l       .debug_str	00000000 
0001f1da l       .debug_str	00000000 
0005a2db l       .debug_str	00000000 
0001f225 l       .debug_str	00000000 
0001f24d l       .debug_str	00000000 
0001f293 l       .debug_str	00000000 
0001f299 l       .debug_str	00000000 
0001f2c7 l       .debug_str	00000000 
0001f2e3 l       .debug_str	00000000 
0001f310 l       .debug_str	00000000 
0001f320 l       .debug_str	00000000 
0001f378 l       .debug_str	00000000 
0001f3d1 l       .debug_str	00000000 
0001f3f4 l       .debug_str	00000000 
0001f423 l       .debug_str	00000000 
0001f435 l       .debug_str	00000000 
0001f468 l       .debug_str	00000000 
0001f47e l       .debug_str	00000000 
0001f4cb l       .debug_str	00000000 
0001f51e l       .debug_str	00000000 
0001f551 l       .debug_str	00000000 
0001f561 l       .debug_str	00000000 
0001f5b7 l       .debug_str	00000000 
0001f611 l       .debug_str	00000000 
0001f65f l       .debug_str	00000000 
0001f6b1 l       .debug_str	00000000 
0001f706 l       .debug_str	00000000 
0001f756 l       .debug_str	00000000 
0001f7aa l       .debug_str	00000000 
0001f801 l       .debug_str	00000000 
0001f857 l       .debug_str	00000000 
0001f8ae l       .debug_str	00000000 
0001f8fa l       .debug_str	00000000 
0001f942 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0001f977 l       .debug_str	00000000 
0001f9a3 l       .debug_str	00000000 
0001f9bf l       .debug_str	00000000 
0001f9cc l       .debug_str	00000000 
0001f9da l       .debug_str	00000000 
0001f9df l       .debug_str	00000000 
0001f9e6 l       .debug_str	00000000 
0001f9fd l       .debug_str	00000000 
0001fa13 l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0001fa23 l       .debug_str	00000000 
0005b544 l       .debug_str	00000000 
0001fa46 l       .debug_str	00000000 
0005b2ea l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
000192db l       .debug_str	00000000 
0001fa67 l       .debug_str	00000000 
0001409e l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0001fa6e l       .debug_str	00000000 
0001fac1 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0001fae2 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
0001fae7 l       .debug_str	00000000 
000192f2 l       .debug_str	00000000 
0001fafb l       .debug_str	00000000 
0001fb0f l       .debug_str	00000000 
0001fb18 l       .debug_str	00000000 
0001fb23 l       .debug_str	00000000 
0001fb35 l       .debug_str	00000000 
0001fb49 l       .debug_str	00000000 
0001fb5a l       .debug_str	00000000 
0001fb74 l       .debug_str	00000000 
0001fba4 l       .debug_str	00000000 
0001fbbf l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016817 l       .debug_str	00000000 
00016851 l       .debug_str	00000000 
0001688a l       .debug_str	00000000 
00016899 l       .debug_str	00000000 
000168dc l       .debug_str	00000000 
0005c815 l       .debug_str	00000000 
000391a0 l       .debug_str	00000000 
0005e23a l       .debug_str	00000000 
0001fbdf l       .debug_str	00000000 
0001fbfe l       .debug_str	00000000 
0006076a l       .debug_str	00000000 
0001fc21 l       .debug_str	00000000 
0005b563 l       .debug_str	00000000 
0001319c l       .debug_str	00000000 
0001fc27 l       .debug_str	00000000 
0000c144 l       .debug_str	00000000 
0001fc2f l       .debug_str	00000000 
0005c11c l       .debug_str	00000000 
0006190e l       .debug_str	00000000 
00016769 l       .debug_str	00000000 
0005cb8b l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012af7 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b84b l       .debug_str	00000000 
0001fc37 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
0000b8f7 l       .debug_str	00000000 
0000b902 l       .debug_str	00000000 
0005adc8 l       .debug_str	00000000 
0001fc56 l       .debug_str	00000000 
0001fc75 l       .debug_str	00000000 
0001fc87 l       .debug_str	00000000 
00017097 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00061e7b l       .debug_str	00000000 
0005ca36 l       .debug_str	00000000 
00037b3a l       .debug_str	00000000 
00013019 l       .debug_str	00000000 
0001a9a1 l       .debug_str	00000000 
0001fcf9 l       .debug_str	00000000 
00060731 l       .debug_str	00000000 
0001fd0d l       .debug_str	00000000 
0001fd23 l       .debug_str	00000000 
0001fd33 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0001fd45 l       .debug_str	00000000 
0001fd3f l       .debug_str	00000000 
0001fd54 l       .debug_str	00000000 
0001fd6b l       .debug_str	00000000 
0001fd6a l       .debug_str	00000000 
00012af3 l       .debug_str	00000000 
00012afe l       .debug_str	00000000 
00012b0a l       .debug_str	00000000 
00012b15 l       .debug_str	00000000 
00012b20 l       .debug_str	00000000 
00012b2b l       .debug_str	00000000 
00012b36 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001a764 l       .debug_str	00000000 
0001a7b6 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0005a240 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0001a7fd l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001a804 l       .debug_str	00000000 
0001bb33 l       .debug_str	00000000 
0001fb5f l       .debug_str	00000000 
000192f7 l       .debug_str	00000000 
0001a80d l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0001f294 l       .debug_str	00000000 
0001a814 l       .debug_str	00000000 
0001a837 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0001312a l       .debug_str	00000000 
0001312f l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0001315c l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001fbec l       .debug_str	00000000 
000131b1 l       .debug_str	00000000 
0001a83d l       .debug_str	00000000 
0001a85f l       .debug_str	00000000 
0001a874 l       .debug_str	00000000 
0001a8a6 l       .debug_str	00000000 
0001a8b6 l       .debug_str	00000000 
0001a8e3 l       .debug_str	00000000 
0001a8f4 l       .debug_str	00000000 
0001a922 l       .debug_str	00000000 
0001a934 l       .debug_str	00000000 
0001fb05 l       .debug_str	00000000 
0001fd38 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0001a963 l       .debug_str	00000000 
0001fb1d l       .debug_str	00000000 
00001d84 l       .debug_str	00000000 
0001643f l       .debug_str	00000000 
00010c9e l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00034b0c l       .debug_str	00000000 
00010ca3 l       .debug_str	00000000 
0001fb54 l       .debug_str	00000000 
0001a98a l       .debug_str	00000000 
0001fb40 l       .debug_str	00000000 
0001fb3a l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00039bfa l       .debug_str	00000000 
0005d2e3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
0001fba9 l       .debug_str	00000000 
0001fb88 l       .debug_str	00000000 
0001fb79 l       .debug_str	00000000 
0001fbd3 l       .debug_str	00000000 
0001fbc4 l       .debug_str	00000000 
0001a991 l       .debug_str	00000000 
0001a99a l       .debug_str	00000000 
0005af47 l       .debug_str	00000000 
0005a214 l       .debug_str	00000000 
0001fb2e l       .debug_str	00000000 
0001fb28 l       .debug_str	00000000 
0001fb4e l       .debug_str	00000000 
0001fb14 l       .debug_str	00000000 
0005eecb l       .debug_str	00000000 
00035ebf l       .debug_str	00000000 
0001325a l       .debug_str	00000000 
0001325f l       .debug_str	00000000 
00013265 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
000341bf l       .debug_str	00000000 
0005f413 l       .debug_str	00000000 
0001a9a6 l       .debug_str	00000000 
00013136 l       .debug_str	00000000 
0001313e l       .debug_str	00000000 
00012f88 l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
00012f5e l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
00012e84 l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
00012f20 l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
00012fb2 l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
00012fc2 l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
00012f42 l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
00012f4e l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
00013176 l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
00012fdc l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
00013004 l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20004a68 l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000f0 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
00012e7a l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
00027954 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
00012fd2 l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
00012e70 l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
00012c06 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
00012c3e l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
00012c54 l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
00012c64 l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
00012d08 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
0001319c l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
00013246 l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
00013188 l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
00012dd4 l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
000203d6 l       .debug_str	00000000 
00013cb4 l       .debug_str	00000000 
00019376 l       .debug_str	00000000 
0001fe22 l       .debug_str	00000000 
0001fe57 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0005fe56 l       .debug_str	00000000 
0001fe63 l       .debug_str	00000000 
0001fe9b l       .debug_str	00000000 
0001feb5 l       .debug_str	00000000 
0001febf l       .debug_str	00000000 
0001fec7 l       .debug_str	00000000 
0001fecf l       .debug_str	00000000 
0001ff0b l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0001ff1e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001ff26 l       .debug_str	00000000 
0001ff5e l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
0001ff66 l       .debug_str	00000000 
0001ff9e l       .debug_str	00000000 
0001ffa6 l       .debug_str	00000000 
0001ffde l       .debug_str	00000000 
0001fff8 l       .debug_str	00000000 
00020001 l       .debug_str	00000000 
00020039 l       .debug_str	00000000 
00020042 l       .debug_str	00000000 
0002007a l       .debug_str	00000000 
00013e06 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
00020102 l       .debug_str	00000000 
0002014a l       .debug_str	00000000 
00020155 l       .debug_str	00000000 
000197e8 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00020193 l       .debug_str	00000000 
0001b659 l       .debug_str	00000000 
000201bc l       .debug_str	00000000 
000201e1 l       .debug_str	00000000 
00016810 l       .debug_str	00000000 
0001b74f l       .debug_str	00000000 
00020240 l       .debug_str	00000000 
0001b7a1 l       .debug_str	00000000 
00020268 l       .debug_str	00000000 
00020299 l       .debug_str	00000000 
000202a5 l       .debug_str	00000000 
00020304 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00020336 l       .debug_str	00000000 
0002037e l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0002038b l       .debug_str	00000000 
000203e6 l       .debug_str	00000000 
000203f4 l       .debug_str	00000000 
00011885 l       .debug_str	00000000 
0001bbb6 l       .debug_str	00000000 
0000ea39 l       .debug_str	00000000 
0002043c l       .debug_str	00000000 
0001bc02 l       .debug_str	00000000 
00020477 l       .debug_str	00000000 
000204ae l       .debug_str	00000000 
000204c7 l       .debug_str	00000000 
000204d3 l       .debug_str	00000000 
0001494b l       .debug_str	00000000 
00020525 l       .debug_str	00000000 
000149bb l       .debug_str	00000000 
0002057a l       .debug_str	00000000 
000204b4 l       .debug_str	00000000 
000205ad l       .debug_str	00000000 
00019f31 l       .debug_str	00000000 
000205f3 l       .debug_str	00000000 
000148db l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
0002063c l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
0002064d l       .debug_str	00000000 
000206c2 l       .debug_str	00000000 
000206ef l       .debug_str	00000000 
0001a251 l       .debug_str	00000000 
0002077b l       .debug_str	00000000 
000207fe l       .debug_str	00000000 
0002082d l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0002087a l       .debug_str	00000000 
000208aa l       .debug_str	00000000 
000208f8 l       .debug_str	00000000 
00020928 l       .debug_str	00000000 
00020976 l       .debug_str	00000000 
000209a6 l       .debug_str	00000000 
000209f4 l       .debug_str	00000000 
00020a25 l       .debug_str	00000000 
00020a74 l       .debug_str	00000000 
00020aa5 l       .debug_str	00000000 
00020af4 l       .debug_str	00000000 
00020b24 l       .debug_str	00000000 
00020b2c l       .debug_str	00000000 
00020b5c l       .debug_str	00000000 
00020b64 l       .debug_str	00000000 
00020ba2 l       .debug_str	00000000 
00020bb7 l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000ad69 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005b544 l       .debug_str	00000000 
0005b2ea l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
000192db l       .debug_str	00000000 
0001409e l       .debug_str	00000000 
00020be3 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
0005ad99 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
00016935 l       .debug_str	00000000 
00020c39 l       .debug_str	00000000 
00013ce9 l       .debug_str	00000000 
00020c38 l       .debug_str	00000000 
00020c3c l       .debug_str	00000000 
00020c46 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
0005d2d1 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
00020c4c l       .debug_str	00000000 
00020c50 l       .debug_str	00000000 
0001ff19 l       .debug_str	00000000 
00020c55 l       .debug_str	00000000 
00020c54 l       .debug_str	00000000 
00020c58 l       .debug_str	00000000 
00020c5c l       .debug_str	00000000 
00020c61 l       .debug_str	00000000 
00020c60 l       .debug_str	00000000 
00020c64 l       .debug_str	00000000 
00020c68 l       .debug_str	00000000 
0005adc8 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001fd83 l       .debug_str	00000000 
0001fdd8 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005eecb l       .debug_str	00000000 
00035ebf l       .debug_str	00000000 
0001325a l       .debug_str	00000000 
0001325f l       .debug_str	00000000 
00013265 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013ac4 l       .debug_str	00000000 
00038db0 l       .debug_str	00000000 
0002ffec l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039bfa l       .debug_str	00000000 
0005d2e3 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013c08 l       .debug_str	00000000 
000132c6 l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00020c6c l       .debug_str	00000000 
0005c787 l       .debug_str	00000000 
00020cf1 l       .debug_str	00000000 
00020d5e l       .debug_str	00000000 
00020dd0 l       .debug_str	00000000 
0005b563 l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00020e2e l       .debug_str	00000000 
0004f13e l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0001fa68 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000192f7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005eecb l       .debug_str	00000000 
0002ffec l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00020e4b l       .debug_str	00000000 
000343cd l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
00020eac l       .debug_str	00000000 
000138bc l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
000316c0 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
00021510 l       .debug_str	00000000 
0002157b l       .debug_str	00000000 
000215c1 l       .debug_str	00000000 
00021633 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00021878 l       .debug_str	00000000 
000218ea l       .debug_str	00000000 
00021934 l       .debug_str	00000000 
0002197e l       .debug_str	00000000 
00021bcb l       .debug_str	00000000 
00021c07 l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
000039b7 l       .debug_str	00000000 
00021c4c l       .debug_str	00000000 
00021c89 l       .debug_str	00000000 
00021ccf l       .debug_str	00000000 
00021d0c l       .debug_str	00000000 
00021f4d l       .debug_str	00000000 
00021f8d l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000221d1 l       .debug_str	00000000 
00022425 l       .debug_str	00000000 
0002247e l       .debug_str	00000000 
000226ce l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
000113fa l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0006085b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00036053 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
00031734 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000221e5 l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
00022439 l       .debug_str	00000000 
00020f0f l       .debug_str	00000000 
00020f77 l       .debug_str	00000000 
000211b7 l       .debug_str	00000000 
0002121f l       .debug_str	00000000 
00021264 l       .debug_str	00000000 
000212cf l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
00022774 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000131bd l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00022723 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000192e3 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0000bca1 l       .debug_str	00000000 
000192f7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00022796 l       .debug_str	00000000 
000227f2 l       .debug_str	00000000 
0002284f l       .debug_str	00000000 
000228ac l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0001fb1d l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
00022a76 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005eecb l       .debug_str	00000000 
0002ffec l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00035ebf l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
00022909 l       .debug_str	00000000 
0002297a l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00022986 l       .debug_str	00000000 
000151e1 l       .debug_str	00000000 
000229f7 l       .debug_str	00000000 
00022a68 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
00022e01 l       .debug_str	00000000 
00022e6c l       .debug_str	00000000 
00022f34 l       .debug_str	00000000 
00022ea2 l       .debug_str	00000000 
00022ed9 l       .debug_str	00000000 
00022eec l       .debug_str	00000000 
00022f2b l       .debug_str	00000000 
00022f46 l       .debug_str	00000000 
00022f7e l       .debug_str	00000000 
00022f92 l       .debug_str	00000000 
00022fbe l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000192e3 l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
00060731 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00039bfa l       .debug_str	00000000 
0005d2e3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
0001fba9 l       .debug_str	00000000 
000192f7 l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
0005b563 l       .debug_str	00000000 
00060730 l       .debug_str	00000000 
00022fc7 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
00017097 l       .debug_str	00000000 
00022fcb l       .debug_str	00000000 
0005fc5e l       .debug_str	00000000 
00004ac5 l       .debug_str	00000000 
00004acd l       .debug_str	00000000 
00004ad6 l       .debug_str	00000000 
00004ae4 l       .debug_str	00000000 
00004aeb l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
0000477b l       .debug_str	00000000 
00004784 l       .debug_str	00000000 
00004792 l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047ac l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
000047c7 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047e8 l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00004801 l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00004872 l       .debug_str	00000000 
00004859 l       .debug_str	00000000 
000048ac l       .debug_str	00000000 
0000489f l       .debug_str	00000000 
00004886 l       .debug_str	00000000 
00004af2 l       .debug_str	00000000 
00004b51 l       .debug_str	00000000 
00004afa l       .debug_str	00000000 
00004b15 l       .debug_str	00000000 
00004b49 l       .debug_str	00000000 
00004b30 l       .debug_str	00000000 
0005ed3c l       .debug_str	00000000 
0004d389 l       .debug_str	00000000 
00023b72 l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
0005c54e l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
00022fd3 l       .debug_str	00000000 
0005fd92 l       .debug_str	00000000 
0005e0d2 l       .debug_str	00000000 
0005bfc4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005dcf5 l       .debug_str	00000000 
0000c124 l       .debug_str	00000000 
0005b307 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c135 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c13f l       .debug_str	00000000 
0000c14a l       .debug_str	00000000 
0000c154 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000232bc l       .debug_str	00000000 
00022a7d l       .debug_str	00000000 
00022aae l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0006085b l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00036053 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
000316c0 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00022439 l       .debug_str	00000000 
00022aba l       .debug_str	00000000 
00022aea l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
00031734 l       .debug_str	00000000 
000221e5 l       .debug_str	00000000 
00022af7 l       .debug_str	00000000 
00022b28 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042d18 l       .debug_str	00000000 
00005772 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005fbd5 l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005a61a l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00060a10 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000056f6 l       .debug_str	00000000 
0004fcbd l       .debug_str	00000000 
0000577b l       .debug_str	00000000 
00005786 l       .debug_str	00000000 
00022b30 l       .debug_str	00000000 
00022b5b l       .debug_str	00000000 
00022b6c l       .debug_str	00000000 
00022ba1 l       .debug_str	00000000 
00004cf6 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
000049b1 l       .debug_str	00000000 
000049b9 l       .debug_str	00000000 
0000487d l       .debug_str	00000000 
000049c3 l       .debug_str	00000000 
00004c65 l       .debug_str	00000000 
00004c4c l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004c47 l       .debug_str	00000000 
00004c74 l       .debug_str	00000000 
00004cfe l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
0005df5f l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00004d04 l       .debug_str	00000000 
00022bb0 l       .debug_str	00000000 
00022be3 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00022bf3 l       .debug_str	00000000 
00022c27 l       .debug_str	00000000 
00022c30 l       .debug_str	00000000 
00022c5c l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00022c6b l       .debug_str	00000000 
00022c9e l       .debug_str	00000000 
00022cab l       .debug_str	00000000 
00022cb7 l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00022ce8 l       .debug_str	00000000 
00022d1d l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00022d2e l       .debug_str	00000000 
00022d60 l       .debug_str	00000000 
00022d6e l       .debug_str	00000000 
00022dac l       .debug_str	00000000 
00022dc6 l       .debug_str	00000000 
00022e18 l       .debug_str	00000000 
00022e54 l       .debug_str	00000000 
20004a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20004a78 l     O .bss	00002004 _ZN6mynewt3spi12PENDING_DATA17hf749c482f1fd6e90E
20006f04 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
0001407a l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
20006a8c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20006b04 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20006aa4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20006a84 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
00014392 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
0001457c l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
00014b9a l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
00014864 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
20006a7c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20006ab4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
00014cc2 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
00027b50 l     O .text	0000001c str.0
00027bb0 l     O .text	00000021 str.1
00027c10 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
00039bfa l       .debug_str	00000000 
0005d2e3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
0001fba9 l       .debug_str	00000000 
000232cd l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
000232d3 l       .debug_str	00000000 
0000e7af l       .debug_str	00000000 
0005e0d2 l       .debug_str	00000000 
0005bfc4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
000232a2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0005b127 l       .debug_str	00000000 
000232e5 l       .debug_str	00000000 
0000e7c1 l       .debug_str	00000000 
00022fde l       .debug_str	00000000 
0004001e l       .debug_str	00000000 
00023009 l       .debug_str	00000000 
0006076a l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00023035 l       .debug_str	00000000 
00061a66 l       .debug_str	00000000 
000230a6 l       .debug_str	00000000 
000230d2 l       .debug_str	00000000 
000230ff l       .debug_str	00000000 
0002316b l       .debug_str	00000000 
00023173 l       .debug_str	00000000 
000231e0 l       .debug_str	00000000 
000231e9 l       .debug_str	00000000 
00023216 l       .debug_str	00000000 
00022fbe l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00023290 l       .debug_str	00000000 
000232c0 l       .debug_str	00000000 
0005b307 l       .debug_str	00000000 
0000c135 l       .debug_str	00000000 
0000c13f l       .debug_str	00000000 
0000c14a l       .debug_str	00000000 
0000c154 l       .debug_str	00000000 
000232bc l       .debug_str	00000000 
000232a6 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000192e3 l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00027e10 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
00004afa l       .debug_str	00000000 
00004b15 l       .debug_str	00000000 
00004b49 l       .debug_str	00000000 
000232ea l       .debug_str	00000000 
0002333c l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013c00 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
00042d18 l       .debug_str	00000000 
00004ac5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004acd l       .debug_str	00000000 
00004ad6 l       .debug_str	00000000 
00004ae4 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00004aeb l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
0000477b l       .debug_str	00000000 
00004784 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00004792 l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047ac l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
000047c7 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047e8 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00004801 l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00004872 l       .debug_str	00000000 
00004859 l       .debug_str	00000000 
0000487d l       .debug_str	00000000 
000048ac l       .debug_str	00000000 
0000489f l       .debug_str	00000000 
00004886 l       .debug_str	00000000 
00004af2 l       .debug_str	00000000 
00004b30 l       .debug_str	00000000 
00004b51 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
0002468c l       .debug_str	00000000 
000238ad l       .debug_str	00000000 
000148db l       .debug_str	00000000 
000238f0 l       .debug_str	00000000 
00014942 l       .debug_str	00000000 
0002394c l       .debug_str	00000000 
000149b2 l       .debug_str	00000000 
000239ab l       .debug_str	00000000 
0001494b l       .debug_str	00000000 
000239fd l       .debug_str	00000000 
00023a52 l       .debug_str	00000000 
00023aa8 l       .debug_str	00000000 
00023ad6 l       .debug_str	00000000 
00023ae2 l       .debug_str	00000000 
00023b14 l       .debug_str	00000000 
00023b3b l       .debug_str	00000000 
00023b6d l       .debug_str	00000000 
00023b7d l       .debug_str	00000000 
00023bb2 l       .debug_str	00000000 
00023bc5 l       .debug_str	00000000 
00023bfb l       .debug_str	00000000 
00023c0f l       .debug_str	00000000 
00023c59 l       .debug_str	00000000 
00023c6a l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
00023ca6 l       .debug_str	00000000 
0005a646 l       .debug_str	00000000 
0005fe56 l       .debug_str	00000000 
00023ce4 l       .debug_str	00000000 
00023d22 l       .debug_str	00000000 
00013d7b l       .debug_str	00000000 
00023d2f l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
00023d3d l       .debug_str	00000000 
00023d65 l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
00023da4 l       .debug_str	00000000 
00023dd2 l       .debug_str	00000000 
00023dd9 l       .debug_str	00000000 
00023e7c l       .debug_str	00000000 
00023e8a l       .debug_str	00000000 
00041527 l       .debug_str	00000000 
00023f22 l       .debug_str	00000000 
00023fbc l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00024074 l       .debug_str	00000000 
000343cd l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
0002063c l       .debug_str	00000000 
000240d7 l       .debug_str	00000000 
00024149 l       .debug_str	00000000 
00024173 l       .debug_str	00000000 
000241b1 l       .debug_str	00000000 
000241c4 l       .debug_str	00000000 
0002420f l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00024218 l       .debug_str	00000000 
0002425a l       .debug_str	00000000 
0002551b l       .debug_str	00000000 
00024294 l       .debug_str	00000000 
000242d9 l       .debug_str	00000000 
000242f5 l       .debug_str	00000000 
00024338 l       .debug_str	00000000 
0002434e l       .debug_str	00000000 
000243b3 l       .debug_str	00000000 
00024418 l       .debug_str	00000000 
00024453 l       .debug_str	00000000 
00024460 l       .debug_str	00000000 
000204b4 l       .debug_str	00000000 
00024493 l       .debug_str	00000000 
0000aa4d l       .debug_str	00000000 
000244d9 l       .debug_str	00000000 
00019f31 l       .debug_str	00000000 
0002451f l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
00024566 l       .debug_str	00000000 
000245af l       .debug_str	00000000 
000151e1 l       .debug_str	00000000 
0001fb1d l       .debug_str	00000000 
00016810 l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00024628 l       .debug_str	00000000 
0002466d l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
000246c5 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
000246dd l       .debug_str	00000000 
00024718 l       .debug_str	00000000 
0002473c l       .debug_str	00000000 
00024762 l       .debug_str	00000000 
0002479d l       .debug_str	00000000 
000247c0 l       .debug_str	00000000 
000247e5 l       .debug_str	00000000 
00024822 l       .debug_str	00000000 
00024839 l       .debug_str	00000000 
00024876 l       .debug_str	00000000 
0002488d l       .debug_str	00000000 
0001561c l       .debug_str	00000000 
000248de l       .debug_str	00000000 
000173e3 l       .debug_str	00000000 
00024939 l       .debug_str	00000000 
0002499c l       .debug_str	00000000 
000249de l       .debug_str	00000000 
000158d5 l       .debug_str	00000000 
00024a42 l       .debug_str	00000000 
0001a251 l       .debug_str	00000000 
00024aaf l       .debug_str	00000000 
0000ad61 l       .debug_str	00000000 
00024b11 l       .debug_str	00000000 
00024b1f l       .debug_str	00000000 
00024b8a l       .debug_str	00000000 
00024ba4 l       .debug_str	00000000 
00024bba l       .debug_str	00000000 
00024c25 l       .debug_str	00000000 
00024c35 l       .debug_str	00000000 
00024ca1 l       .debug_str	00000000 
00024cb3 l       .debug_str	00000000 
00024d1f l       .debug_str	00000000 
00024d30 l       .debug_str	00000000 
00024d97 l       .debug_str	00000000 
00024dcf l       .debug_str	00000000 
00024e39 l       .debug_str	00000000 
00024ec1 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00024f35 l       .debug_str	00000000 
00024fb7 l       .debug_str	00000000 
00024fce l       .debug_str	00000000 
0002500c l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
0003463f l       .debug_str	00000000 
00035ebf l       .debug_str	00000000 
0002501f l       .debug_str	00000000 
0002502e l       .debug_str	00000000 
0002506c l       .debug_str	00000000 
0002507f l       .debug_str	00000000 
000250ab l       .debug_str	00000000 
000250b4 l       .debug_str	00000000 
000250e0 l       .debug_str	00000000 
000250e9 l       .debug_str	00000000 
00025149 l       .debug_str	00000000 
00034080 l       .debug_str	00000000 
0002519a l       .debug_str	00000000 
000251eb l       .debug_str	00000000 
00025248 l       .debug_str	00000000 
000252a6 l       .debug_str	00000000 
0002558b l       .debug_str	00000000 
000252f7 l       .debug_str	00000000 
00025320 l       .debug_str	00000000 
00025383 l       .debug_str	00000000 
00025394 l       .debug_str	00000000 
000253a1 l       .debug_str	00000000 
000253b6 l       .debug_str	00000000 
00025407 l       .debug_str	00000000 
00025430 l       .debug_str	00000000 
00025493 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
00022a76 l       .debug_str	00000000 
0006190e l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
000254b0 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
000399ba l       .debug_str	00000000 
0001ff19 l       .debug_str	00000000 
00016ff6 l       .debug_str	00000000 
0005b563 l       .debug_str	00000000 
0005a31a l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0006076a l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
000254d1 l       .debug_str	00000000 
000024e8 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
000254d5 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00023542 l       .debug_str	00000000 
000254e7 l       .debug_str	00000000 
000254ec l       .debug_str	00000000 
000254f1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000167d5 l       .debug_str	00000000 
00025516 l       .debug_str	00000000 
00025552 l       .debug_str	00000000 
0005d2d1 l       .debug_str	00000000 
0003e3e6 l       .debug_str	00000000 
00025568 l       .debug_str	00000000 
00025571 l       .debug_str	00000000 
000379eb l       .debug_str	00000000 
0005b3b6 l       .debug_str	00000000 
0004d5fd l       .debug_str	00000000 
0002557a l       .debug_str	00000000 
0002557e l       .debug_str	00000000 
00037cb1 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012af7 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
00012af3 l       .debug_str	00000000 
00012afe l       .debug_str	00000000 
00012b0a l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000255a0 l       .debug_str	00000000 
0002559b l       .debug_str	00000000 
0005b137 l       .debug_str	00000000 
000255a4 l       .debug_str	00000000 
00039788 l       .debug_str	00000000 
000255ad l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0003c242 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00023361 l       .debug_str	00000000 
000233bb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000342ea l       .debug_str	00000000 
0002340a l       .debug_str	00000000 
000254c2 l       .debug_str	00000000 
000254b5 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
00023412 l       .debug_str	00000000 
0002341f l       .debug_str	00000000 
00023428 l       .debug_str	00000000 
0005a234 l       .debug_str	00000000 
000346b6 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013abe l       .debug_str	00000000 
0005eecb l       .debug_str	00000000 
0002ffec l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013c00 l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00035e99 l       .debug_str	00000000 
00013c08 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b3f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00013d59 l       .debug_str	00000000 
00025562 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
0005ad99 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000131bd l       .debug_str	00000000 
0005d35f l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
00036d13 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
0005b2ea l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
00025536 l       .debug_str	00000000 
00013c18 l       .debug_str	00000000 
00023432 l       .debug_str	00000000 
00023470 l       .debug_str	00000000 
0001aa32 l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00046f3e l       .debug_str	00000000 
000607e4 l       .debug_str	00000000 
0002347f l       .debug_str	00000000 
00013c47 l       .debug_str	00000000 
000234a8 l       .debug_str	00000000 
0001aaa4 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001ac5d l       .debug_str	00000000 
0001fbd3 l       .debug_str	00000000 
0000e7ec l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
000234da l       .debug_str	00000000 
00025500 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
000234e8 l       .debug_str	00000000 
00013d34 l       .debug_str	00000000 
00013d47 l       .debug_str	00000000 
0005fd60 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0004b5ed l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005a3cf l       .debug_str	00000000 
0002352a l       .debug_str	00000000 
0002352e l       .debug_str	00000000 
00023539 l       .debug_str	00000000 
00023548 l       .debug_str	00000000 
00023590 l       .debug_str	00000000 
000235b0 l       .debug_str	00000000 
0003a4d4 l       .debug_str	00000000 
000254e8 l       .debug_str	00000000 
000235fb l       .debug_str	00000000 
000254ed l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
00023646 l       .debug_str	00000000 
00022a68 l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
000236b7 l       .debug_str	00000000 
000143c4 l       .debug_str	00000000 
000236e5 l       .debug_str	00000000 
00011885 l       .debug_str	00000000 
0002372d l       .debug_str	00000000 
0002375d l       .debug_str	00000000 
00023788 l       .debug_str	00000000 
000204ae l       .debug_str	00000000 
000204c7 l       .debug_str	00000000 
000237bf l       .debug_str	00000000 
000149bb l       .debug_str	00000000 
00023810 l       .debug_str	00000000 
0001482f l       .debug_str	00000000 
00023862 l       .debug_str	00000000 
00014886 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0000ea08 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000255b9 l       .debug_str	00000000 
000255e2 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00025673 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000255ef l       .debug_str	00000000 
00013c47 l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
0005f568 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00025618 l       .debug_str	00000000 
0002566d l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
000259e8 l       .debug_str	00000000 
00025850 l       .debug_str	00000000 
0002588c l       .debug_str	00000000 
000258a8 l       .debug_str	00000000 
000258e4 l       .debug_str	00000000 
0002591a l       .debug_str	00000000 
00025956 l       .debug_str	00000000 
00025961 l       .debug_str	00000000 
0002599d l       .debug_str	00000000 
000259ab l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
00025a1f l       .debug_str	00000000 
00025a5c l       .debug_str	00000000 
00025a6b l       .debug_str	00000000 
00025aa8 l       .debug_str	00000000 
00025aeb l       .debug_str	00000000 
00025b28 l       .debug_str	00000000 
0000ea0d l       .debug_str	00000000 
00025b5f l       .debug_str	00000000 
00025b9d l       .debug_str	00000000 
00025bd4 l       .debug_str	00000000 
00025c13 l       .debug_str	00000000 
00025c4c l       .debug_str	00000000 
00025cb0 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00025ce5 l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00025d00 l       .debug_str	00000000 
00025d45 l       .debug_str	00000000 
00025d62 l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
0001937f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
000193a7 l       .debug_str	00000000 
00025677 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025d71 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00025cf4 l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f1ab l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254ed l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f26 l       .debug_str	00000000 
000256b1 l       .debug_str	00000000 
00025d0f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
00025d54 l       .debug_str	00000000 
0000ea08 l       .debug_str	00000000 
000256cd l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000e870 l       .debug_str	00000000 
0000e879 l       .debug_str	00000000 
0000e887 l       .debug_str	00000000 
0001940a l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0000e89f l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000f129 l       .debug_str	00000000 
0000f134 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0005fe56 l       .debug_str	00000000 
000256da l       .debug_str	00000000 
00025713 l       .debug_str	00000000 
000257ae l       .debug_str	00000000 
00025808 l       .debug_str	00000000 
00025844 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1i10ukgv8hgyc1v7
0005f074 l       .debug_str	00000000 
00026840 l       .debug_str	00000000 
0002684b l       .debug_str	00000000 
00026852 l       .debug_str	00000000 
000268bd l       .debug_str	00000000 
000269ee l       .debug_str	00000000 
00026a5b l       .debug_str	00000000 
00026acd l       .debug_str	00000000 
00026bdb l       .debug_str	00000000 
00026be6 l       .debug_str	00000000 
00026c58 l       .debug_str	00000000 
00026d8d l       .debug_str	00000000 
00026dff l       .debug_str	00000000 
00026ecf l       .debug_str	00000000 
00026eea l       .debug_str	00000000 
00026f34 l       .debug_str	00000000 
00027071 l       .debug_str	00000000 
000270ac l       .debug_str	00000000 
000271b4 l       .debug_str	00000000 
000271ef l       .debug_str	00000000 
0002731e l       .debug_str	00000000 
00027359 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000256b1 l       .debug_str	00000000 
00027423 l       .debug_str	00000000 
0002745f l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
0002752a l       .debug_str	00000000 
0002754a l       .debug_str	00000000 
00027586 l       .debug_str	00000000 
0002d40e l       .debug_str	00000000 
0002768f l       .debug_str	00000000 
000276cc l       .debug_str	00000000 
000277d6 l       .debug_str	00000000 
00027813 l       .debug_str	00000000 
00027944 l       .debug_str	00000000 
000279c5 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00028255 l       .debug_str	00000000 
00027afa l       .debug_str	00000000 
00027b78 l       .debug_str	00000000 
000126a8 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00027ca8 l       .debug_str	00000000 
00027d87 l       .debug_str	00000000 
00027ea0 l       .debug_str	00000000 
00027fe0 l       .debug_str	00000000 
000280fd l       .debug_str	00000000 
00028241 l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
000113fa l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0006085b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00036053 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
0002c286 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00028111 l       .debug_str	00000000 
0000eb08 l       .debug_str	00000000 
0000ec1a l       .debug_str	00000000 
0000ed49 l       .debug_str	00000000 
0002c14e l       .debug_str	00000000 
00027ff4 l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f1ab l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254ed l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f26 l       .debug_str	00000000 
0000f3b1 l       .debug_str	00000000 
0000f3de l       .debug_str	00000000 
0000f3ff l       .debug_str	00000000 
0000f466 l       .debug_str	00000000 
0000f506 l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0000f5e0 l       .debug_str	00000000 
0000f657 l       .debug_str	00000000 
0000f6db l       .debug_str	00000000 
0000f756 l       .debug_str	00000000 
0000f7f4 l       .debug_str	00000000 
0000f89f l       .debug_str	00000000 
00029660 l       .debug_str	00000000 
00028d97 l       .debug_str	00000000 
000290ce l       .debug_str	00000000 
0002c054 l       .debug_str	00000000 
00027cbc l       .debug_str	00000000 
00025db3 l       .debug_str	00000000 
00025e41 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00025f11 l       .debug_str	00000000 
00025f2c l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
00010209 l       .debug_str	00000000 
00025f49 l       .debug_str	00000000 
00025f62 l       .debug_str	00000000 
0002ec43 l       .debug_str	00000000 
00025f88 l       .debug_str	00000000 
00025fee l       .debug_str	00000000 
000260f8 l       .debug_str	00000000 
0002615e l       .debug_str	00000000 
0002628f l       .debug_str	00000000 
000262f7 l       .debug_str	00000000 
000263c2 l       .debug_str	00000000 
0002642a l       .debug_str	00000000 
00026533 l       .debug_str	00000000 
0002659b l       .debug_str	00000000 
000266cb l       .debug_str	00000000 
00026736 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00027ed0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
0002838a l       .debug_str	00000000 
000283d5 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0001fb14 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00039bfa l       .debug_str	00000000 
0005d2e3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 24fd677mu7rr1lzm
00026f34 l       .debug_str	00000000 
0002a691 l       .debug_str	00000000 
0002a71a l       .debug_str	00000000 
0002a854 l       .debug_str	00000000 
0002a8dd l       .debug_str	00000000 
0002a9f0 l       .debug_str	00000000 
0002aa7c l       .debug_str	00000000 
0002ab08 l       .debug_str	00000000 
0002ac1e l       .debug_str	00000000 
0002acaa l       .debug_str	00000000 
0002ad98 l       .debug_str	00000000 
0002745f l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
0002752a l       .debug_str	00000000 
0002ae16 l       .debug_str	00000000 
00027586 l       .debug_str	00000000 
0002d40e l       .debug_str	00000000 
0002ae94 l       .debug_str	00000000 
000276cc l       .debug_str	00000000 
0002af13 l       .debug_str	00000000 
00027813 l       .debug_str	00000000 
0002af92 l       .debug_str	00000000 
00025fee l       .debug_str	00000000 
0002b011 l       .debug_str	00000000 
0002615e l       .debug_str	00000000 
0002b090 l       .debug_str	00000000 
0002b112 l       .debug_str	00000000 
0002684b l       .debug_str	00000000 
0002b21f l       .debug_str	00000000 
0002b2a1 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
0002b386 l       .debug_str	00000000 
0002b408 l       .debug_str	00000000 
0002b4d7 l       .debug_str	00000000 
0002b4ee l       .debug_str	00000000 
0002b570 l       .debug_str	00000000 
0002b6a4 l       .debug_str	00000000 
0002b726 l       .debug_str	00000000 
0002b80b l       .debug_str	00000000 
0002b88d l       .debug_str	00000000 
0002b99a l       .debug_str	00000000 
0002ba1c l       .debug_str	00000000 
0002bb50 l       .debug_str	00000000 
0002bbd2 l       .debug_str	00000000 
0002bca1 l       .debug_str	00000000 
0002bd23 l       .debug_str	00000000 
0002be57 l       .debug_str	00000000 
0002bed9 l       .debug_str	00000000 
0002bfe6 l       .debug_str	00000000 
0002c042 l       .debug_str	00000000 
0002c13c l       .debug_str	00000000 
0002c274 l       .debug_str	00000000 
000113fa l       .debug_str	00000000 
0002c3d3 l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002c4e3 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
000192ed l       .debug_str	00000000 
0002c4f0 l       .debug_str	00000000 
0002eb78 l       .debug_str	00000000 
0006190e l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0002c502 l       .debug_str	00000000 
00035e99 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00013d59 l       .debug_str	00000000 
0002c507 l       .debug_str	00000000 
0004001e l       .debug_str	00000000 
0002c63b l       .debug_str	00000000 
0002c796 l       .debug_str	00000000 
0002c8a2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0006085b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00028407 l       .debug_str	00000000 
00028474 l       .debug_str	00000000 
0002850a l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00036053 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0000f5e0 l       .debug_str	00000000 
0000f657 l       .debug_str	00000000 
0000f6db l       .debug_str	00000000 
0000f756 l       .debug_str	00000000 
0000f7f4 l       .debug_str	00000000 
0000f89f l       .debug_str	00000000 
000285c9 l       .debug_str	00000000 
0002868e l       .debug_str	00000000 
00028760 l       .debug_str	00000000 
00028829 l       .debug_str	00000000 
00028913 l       .debug_str	00000000 
00028a1a l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
0002c3e5 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
0002c286 l       .debug_str	00000000 
0000eb08 l       .debug_str	00000000 
0000ec1a l       .debug_str	00000000 
0000ed49 l       .debug_str	00000000 
0002c14e l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f1ab l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254ed l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f26 l       .debug_str	00000000 
0000f3b1 l       .debug_str	00000000 
0000f3de l       .debug_str	00000000 
0000f3ff l       .debug_str	00000000 
0000f466 l       .debug_str	00000000 
0000f506 l       .debug_str	00000000 
00029660 l       .debug_str	00000000 
00028b20 l       .debug_str	00000000 
00028ba2 l       .debug_str	00000000 
00028c90 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00028d97 l       .debug_str	00000000 
00028d78 l       .debug_str	00000000 
000290ce l       .debug_str	00000000 
00028e88 l       .debug_str	00000000 
00028ed9 l       .debug_str	00000000 
00028fc8 l       .debug_str	00000000 
000290b0 l       .debug_str	00000000 
0002c054 l       .debug_str	00000000 
000291be l       .debug_str	00000000 
00029239 l       .debug_str	00000000 
00029323 l       .debug_str	00000000 
00029407 l       .debug_str	00000000 
00029513 l       .debug_str	00000000 
0002955f l       .debug_str	00000000 
0002964a l       .debug_str	00000000 
00029734 l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
0002983e l       .debug_str	00000000 
0002993f l       .debug_str	00000000 
00029995 l       .debug_str	00000000 
00029a93 l       .debug_str	00000000 
00029ae9 l       .debug_str	00000000 
00029c36 l       .debug_str	00000000 
00029c8c l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00029db2 l       .debug_str	00000000 
00029e39 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00025f11 l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00026ecf l       .debug_str	00000000 
00029f0c l       .debug_str	00000000 
00029f93 l       .debug_str	00000000 
00026840 l       .debug_str	00000000 
00026bdb l       .debug_str	00000000 
0002a0a4 l       .debug_str	00000000 
0002a12b l       .debug_str	00000000 
0002a263 l       .debug_str	00000000 
0002a2eb l       .debug_str	00000000 
0002a3bf l       .debug_str	00000000 
0002a448 l       .debug_str	00000000 
0002a51d l       .debug_str	00000000 
0002a5a6 l       .debug_str	00000000 
00027f50 l     O .text	00000021 str.0
00027f90 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0001cace l       .debug_str	00000000 
0002cc9d l       .debug_str	00000000 
0002ccaa l       .debug_str	00000000 
0002ccea l       .debug_str	00000000 
0002cde7 l       .debug_str	00000000 
0002ce27 l       .debug_str	00000000 
0002ce36 l       .debug_str	00000000 
0002ce76 l       .debug_str	00000000 
0002ce95 l       .debug_str	00000000 
0002ced5 l       .debug_str	00000000 
0002cef1 l       .debug_str	00000000 
0002cf31 l       .debug_str	00000000 
0002cf3f l       .debug_str	00000000 
0002cf7f l       .debug_str	00000000 
0005fe56 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c5f5 l       .debug_str	00000000 
0001d5e0 l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
0002cf8d l       .debug_str	00000000 
0002cfce l       .debug_str	00000000 
0000c336 l       .debug_str	00000000 
0002d003 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0002d00d l       .debug_str	00000000 
0002d04e l       .debug_str	00000000 
0001faf1 l       .debug_str	00000000 
0002d09b l       .debug_str	00000000 
0002d0dc l       .debug_str	00000000 
0002d111 l       .debug_str	00000000 
0002d11c l       .debug_str	00000000 
0002d15d l       .debug_str	00000000 
0002d1aa l       .debug_str	00000000 
0002d1eb l       .debug_str	00000000 
0002d220 l       .debug_str	00000000 
0002d28f l       .debug_str	00000000 
0002d390 l       .debug_str	00000000 
0001deb7 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0002d3ff l       .debug_str	00000000 
0002d41e l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00017097 l       .debug_str	00000000 
0005b1a2 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f1ab l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254ed l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f26 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0001643f l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
0002d40e l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0006120d l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
0006085b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00028407 l       .debug_str	00000000 
00028474 l       .debug_str	00000000 
0002850a l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00036053 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0000f5e0 l       .debug_str	00000000 
0000f657 l       .debug_str	00000000 
0000f6db l       .debug_str	00000000 
0000f756 l       .debug_str	00000000 
0000f7f4 l       .debug_str	00000000 
0000f89f l       .debug_str	00000000 
000285c9 l       .debug_str	00000000 
0002868e l       .debug_str	00000000 
00028760 l       .debug_str	00000000 
00028829 l       .debug_str	00000000 
00028913 l       .debug_str	00000000 
00028a1a l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
0002c3e5 l       .debug_str	00000000 
0002983e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002c998 l       .debug_str	00000000 
0002ca78 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
0002752a l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
0000c32d l       .debug_str	00000000 
0002cb76 l       .debug_str	00000000 
0002cb7d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002cb85 l       .debug_str	00000000 
0002cb99 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0002cbcb l       .debug_str	00000000 
0002cbdf l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002cc11 l       .debug_str	00000000 
0002cc50 l       .debug_str	00000000 
0002cc5e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2nk42jtdlqpdrpvo
0000f5e0 l       .debug_str	00000000 
0002d5aa l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0002d69d l       .debug_str	00000000 
0002d715 l       .debug_str	00000000 
0002d82f l       .debug_str	00000000 
0002d8a7 l       .debug_str	00000000 
0000f657 l       .debug_str	00000000 
0000f6db l       .debug_str	00000000 
0000f756 l       .debug_str	00000000 
0000f7f4 l       .debug_str	00000000 
0000f89f l       .debug_str	00000000 
0002d973 l       .debug_str	00000000 
0002d9eb l       .debug_str	00000000 
0002dab7 l       .debug_str	00000000 
0002db2f l       .debug_str	00000000 
0002dbd4 l       .debug_str	00000000 
0002dc4c l       .debug_str	00000000 
0002dcca l       .debug_str	00000000 
0002dd42 l       .debug_str	00000000 
0002dd99 l       .debug_str	00000000 
0002de11 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00036053 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0002d43c l       .debug_str	00000000 
0002d4b4 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0002d532 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2tupw4qr6cy3al7x
00000c36 l       .debug_str	00000000 
00025d0f l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0003519f l       .debug_str	00000000 
0002fafc l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0002fa25 l       .debug_str	00000000 
0002deb6 l       .debug_str	00000000 
0002deff l       .debug_str	00000000 
000113fa l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
00016b04 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f129 l       .debug_str	00000000 
0000f134 l       .debug_str	00000000 
0000f13e l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001935c l       .debug_str	00000000 
0000f147 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000193a7 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 32m5mr5zne5f73k7
0000c1cf l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0005dcf4 l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
00060bcf l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
0006000b l       .debug_str	00000000 
0000e753 l       .debug_str	00000000 
0000e742 l       .debug_str	00000000 
0005c6b2 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0006190e l       .debug_str	00000000 
0005b563 l       .debug_str	00000000 
0000e8d4 l       .debug_str	00000000 
0002e54e l       .debug_str	00000000 
0002e5ea l       .debug_str	00000000 
0000e870 l       .debug_str	00000000 
0000e879 l       .debug_str	00000000 
0000e887 l       .debug_str	00000000 
0001940a l       .debug_str	00000000 
0000e89f l       .debug_str	00000000 
000257ae l       .debug_str	00000000 
0000f250 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
0002e5f5 l       .debug_str	00000000 
0002e6bf l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
0000eaf3 l       .debug_str	00000000 
0000f236 l       .debug_str	00000000 
0000e8d9 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f129 l       .debug_str	00000000 
0000f134 l       .debug_str	00000000 
0000f13e l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001935c l       .debug_str	00000000 
0000f147 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000193a7 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025d0f l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0003519f l       .debug_str	00000000 
0002fafc l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0002fa90 l       .debug_str	00000000 
0000eaf9 l       .debug_str	00000000 
0000eb00 l       .debug_str	00000000 
0000e795 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0006085b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00036053 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000eb08 l       .debug_str	00000000 
0000ec1a l       .debug_str	00000000 
0000ed49 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
0002c14e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00027ff4 l       .debug_str	00000000 
0000f154 l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
0002e572 l       .debug_str	00000000 
0000f23b l       .debug_str	00000000 
0000f241 l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
0002c286 l       .debug_str	00000000 
00028111 l       .debug_str	00000000 
0000f24a l       .debug_str	00000000 
0005d96d l       .debug_str	00000000 
0002e619 l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
0002df73 l       .debug_str	00000000 
0002dfd6 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
000232a2 l       .debug_str	00000000 
0005b127 l       .debug_str	00000000 
000232e5 l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0002fa25 l       .debug_str	00000000 
0002e0a6 l       .debug_str	00000000 
0002e0e9 l       .debug_str	00000000 
0002e18e l       .debug_str	00000000 
0002e1cc l       .debug_str	00000000 
0002e240 l       .debug_str	00000000 
0002e280 l       .debug_str	00000000 
0002e322 l       .debug_str	00000000 
0002e3b0 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000fefd l       .debug_str	00000000 
0000ff19 l       .debug_str	00000000 
0002e421 l       .debug_str	00000000 
0002e4b1 l       .debug_str	00000000 
00010610 l       .debug_str	00000000 
000105b2 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00016b04 l       .debug_str	00000000 
000280e0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3ulq1z5tkxz9njop
00001366 l       .debug_str	00000000 
0002e791 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
000192f7 l       .debug_str	00000000 
000192ed l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00013c18 l       .debug_str	00000000 
0002ffec l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002e6c8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002e72c l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4f0czol4b3uljl4v
00000d05 l       .debug_str	00000000 
0002e90f l       .debug_str	00000000 
00025f11 l       .debug_str	00000000 
00026ecf l       .debug_str	00000000 
0002e92e l       .debug_str	00000000 
0002e9ac l       .debug_str	00000000 
0002ea3c l       .debug_str	00000000 
0002ea53 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
0002063c l       .debug_str	00000000 
00003d80 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
00016935 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002e7f6 l       .debug_str	00000000 
0002e882 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00026840 l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00026bdb l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f1ab l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254ed l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f26 l       .debug_str	00000000 
0002e891 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n9jsiq8blzioqfk
0002eea3 l       .debug_str	00000000 
0002ede7 l       .debug_str	00000000 
0002ee04 l       .debug_str	00000000 
0002ee0d l       .debug_str	00000000 
0002ee53 l       .debug_str	00000000 
0002ee5c l       .debug_str	00000000 
0002f0d8 l       .debug_str	00000000 
0002eeec l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
00003d80 l       .debug_str	00000000 
0002eef8 l       .debug_str	00000000 
0002ef74 l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
0002063c l       .debug_str	00000000 
0002ef9f l       .debug_str	00000000 
0002f01b l       .debug_str	00000000 
0002f04d l       .debug_str	00000000 
0002f0d3 l       .debug_str	00000000 
0002f0e2 l       .debug_str	00000000 
0002ea3c l       .debug_str	00000000 
0002f153 l       .debug_str	00000000 
0002f1c7 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002f1d1 l       .debug_str	00000000 
0002f1de l       .debug_str	00000000 
0002f255 l       .debug_str	00000000 
0002f26f l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
0005ad99 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002eada l       .debug_str	00000000 
0002eb03 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00026840 l       .debug_str	00000000 
0002c4e3 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
000192ed l       .debug_str	00000000 
0002c4f0 l       .debug_str	00000000 
0002eb78 l       .debug_str	00000000 
0002eb10 l       .debug_str	00000000 
0002eb52 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0002eb66 l       .debug_str	00000000 
0005fd60 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0004b5ed l       .debug_str	00000000 
0000fed0 l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f1ab l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254ed l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f26 l       .debug_str	00000000 
0002eb82 l       .debug_str	00000000 
0002ebab l       .debug_str	00000000 
00025f11 l       .debug_str	00000000 
00025f2c l       .debug_str	00000000 
00010209 l       .debug_str	00000000 
00025f49 l       .debug_str	00000000 
00025f62 l       .debug_str	00000000 
0002ec43 l       .debug_str	00000000 
0002ebc8 l       .debug_str	00000000 
0002ec0d l       .debug_str	00000000 
0002ec31 l       .debug_str	00000000 
0002ec60 l       .debug_str	00000000 
00033878 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
0002684b l       .debug_str	00000000 
0002ec93 l       .debug_str	00000000 
000338d6 l       .debug_str	00000000 
0002b4d7 l       .debug_str	00000000 
0002ecc6 l       .debug_str	00000000 
00033958 l       .debug_str	00000000 
00026ecf l       .debug_str	00000000 
0002ecfd l       .debug_str	00000000 
000339dc l       .debug_str	00000000 
00026bdb l       .debug_str	00000000 
0002ed34 l       .debug_str	00000000 
0002ed82 l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
0002ed92 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z4uczzv8d994j8w
00001366 l       .debug_str	00000000 
0002f39f l       .debug_str	00000000 
0002f3f1 l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
0005b2ea l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0006190e l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013c00 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002f290 l       .debug_str	00000000 
0002f2de l       .debug_str	00000000 
0000fed0 l       .debug_str	00000000 
0002f2e7 l       .debug_str	00000000 
0002f337 l       .debug_str	00000000 
0002f342 l       .debug_str	00000000 
0002f393 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
0002f977 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000e870 l       .debug_str	00000000 
0000e879 l       .debug_str	00000000 
0000e887 l       .debug_str	00000000 
0001940a l       .debug_str	00000000 
0000e89f l       .debug_str	00000000 
000257ae l       .debug_str	00000000 
0002f7f3 l       .debug_str	00000000 
0002f8b0 l       .debug_str	00000000 
0002f8eb l       .debug_str	00000000 
0002f944 l       .debug_str	00000000 
00025cb0 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0002f9fa l       .debug_str	00000000 
0002fa5e l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
0002fa61 l       .debug_str	00000000 
00012a4b l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
00025677 l       .debug_str	00000000 
00025d71 l       .debug_str	00000000 
0005a545 l       .debug_str	00000000 
00061e65 l       .debug_str	00000000 
0002fad1 l       .debug_str	00000000 
0002fad4 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00012b0a l       .debug_str	00000000 
000192fc l       .debug_str	00000000 
00012b15 l       .debug_str	00000000 
00012b20 l       .debug_str	00000000 
0002fae1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f129 l       .debug_str	00000000 
0000f134 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
0000f13e l       .debug_str	00000000 
0000e899 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001935c l       .debug_str	00000000 
0000f147 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000193a7 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025d0f l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0003519f l       .debug_str	00000000 
0002fafc l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0002fa25 l       .debug_str	00000000 
0002f3fe l       .debug_str	00000000 
0002f49b l       .debug_str	00000000 
0002f4d4 l       .debug_str	00000000 
0002f573 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0002fa90 l       .debug_str	00000000 
0002f5ac l       .debug_str	00000000 
0002f649 l       .debug_str	00000000 
0002f67d l       .debug_str	00000000 
0002f720 l       .debug_str	00000000 
0002f7bf l       .debug_str	00000000 
000281c0 l     O .text	0000001c str.0
000281f0 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
0002fae1 l       .debug_str	00000000 
0002fafc l       .debug_str	00000000 
0002fba0 l       .debug_str	00000000 
0002fc15 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00012b0a l       .debug_str	00000000 
00025d00 l       .debug_str	00000000 
00012b15 l       .debug_str	00000000 
00012b20 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
000193a7 l       .debug_str	00000000 
0003519f l       .debug_str	00000000 
0002fb31 l       .debug_str	00000000 
00025cb0 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025d0f l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 vnkfcw75uydipan
0002fd5b l       .debug_str	00000000 
00025f26 l       .debug_str	00000000 
00025f11 l       .debug_str	00000000 
00025f2c l       .debug_str	00000000 
0002fc4c l       .debug_str	00000000 
0002fc97 l       .debug_str	00000000 
0002fcaa l       .debug_str	00000000 
0002fcf5 l       .debug_str	00000000 
0002fd18 l       .debug_str	00000000 
00010209 l       .debug_str	00000000 
0002fd77 l       .debug_str	00000000 
0002eeec l       .debug_str	00000000 
0000fed0 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00026840 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002c4e3 l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f1ab l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254ed l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
0000bca2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000106a7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0001088d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00010886 l       .debug_str	00000000 
0002fdba l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2m8s7rk6gjg5sdjo
0002ff7d l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e742 l       .debug_str	00000000 
0000e792 l       .debug_str	00000000 
00041455 l       .debug_str	00000000 
0001a55e l       .debug_str	00000000 
0003e005 l       .debug_str	00000000 
0000e795 l       .debug_str	00000000 
0005b563 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
0006190e l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0005dcf4 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
000232a2 l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
0005b127 l       .debug_str	00000000 
000232e5 l       .debug_str	00000000 
00060bcf l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
0006000b l       .debug_str	00000000 
0000c1cf l       .debug_str	00000000 
0005f663 l       .debug_str	00000000 
0000e753 l       .debug_str	00000000 
0005d439 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012063 l       .debug_str	00000000 
0001206c l       .debug_str	00000000 
00012075 l       .debug_str	00000000 
00012080 l       .debug_str	00000000 
0001208b l       .debug_str	00000000 
00012096 l       .debug_str	00000000 
000120a2 l       .debug_str	00000000 
000120ac l       .debug_str	00000000 
000120b9 l       .debug_str	00000000 
000120c7 l       .debug_str	00000000 
000120d6 l       .debug_str	00000000 
000120e3 l       .debug_str	00000000 
00030367 l       .debug_str	00000000 
00030356 l       .debug_str	00000000 
0003519f l       .debug_str	00000000 
0002fe7f l       .debug_str	00000000 
0002fecd l       .debug_str	00000000 
0002ff2d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2ug841oumney39pv
0005ca36 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000131bd l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
0002ffdf l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002fff2 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0003007e l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00030087 l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00030097 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vf5zed9a93zfp29
0003019f l       .debug_str	00000000 
00030118 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0001326d l       .debug_str	00000000 
0005fe56 l       .debug_str	00000000 
00030120 l       .debug_str	00000000 
00030148 l       .debug_str	00000000 
00030177 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
000192db l       .debug_str	00000000 
0001409e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005eecb l       .debug_str	00000000 
00035ebf l       .debug_str	00000000 
0001325a l       .debug_str	00000000 
0001325f l       .debug_str	00000000 
00013265 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
00038db0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
000300be l       .debug_str	00000000 
000300e7 l       .debug_str	00000000 
000300ef l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ng3xpvqtoio1chp
00036432 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000131bd l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000301ce l       .debug_str	00000000 
0005c787 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3qt6984rqt15w0xm
00026847 l       .debug_str	00000000 
00030331 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000126a8 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00030351 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
0005d439 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012063 l       .debug_str	00000000 
0001206c l       .debug_str	00000000 
00012075 l       .debug_str	00000000 
00012080 l       .debug_str	00000000 
0001208b l       .debug_str	00000000 
00012096 l       .debug_str	00000000 
000120a2 l       .debug_str	00000000 
000120ac l       .debug_str	00000000 
000120b9 l       .debug_str	00000000 
000120c7 l       .debug_str	00000000 
000120d6 l       .debug_str	00000000 
000120e3 l       .debug_str	00000000 
00030367 l       .debug_str	00000000 
00030356 l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
0003023d l       .debug_str	00000000 
000302a0 l       .debug_str	00000000 
000302ca l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5cymlse6j4664rei
0005b2ea l       .debug_str	00000000 
0003049e l       .debug_str	00000000 
000304ba l       .debug_str	00000000 
000304e0 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005e23a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00030375 l       .debug_str	00000000 
00013c47 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0003039e l       .debug_str	00000000 
000303af l       .debug_str	00000000 
000303bf l       .debug_str	00000000 
0003040b l       .debug_str	00000000 
00030416 l       .debug_str	00000000 
0003044c l       .debug_str	00000000 
00030464 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
000309ed l       .debug_str	00000000 
0003ed2e l       .debug_str	00000000 
000039b7 l       .debug_str	00000000 
00030d41 l       .debug_str	00000000 
00021c89 l       .debug_str	00000000 
00030dc0 l       .debug_str	00000000 
00021d0c l       .debug_str	00000000 
00030e3f l       .debug_str	00000000 
00030ec1 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
00031105 l       .debug_str	00000000 
00031187 l       .debug_str	00000000 
000311d0 l       .debug_str	00000000 
00031252 l       .debug_str	00000000 
0003129b l       .debug_str	00000000 
00021f8d l       .debug_str	00000000 
0003131d l       .debug_str	00000000 
0003139f l       .debug_str	00000000 
000315e3 l       .debug_str	00000000 
00031665 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000316ae l       .debug_str	00000000 
00031722 l       .debug_str	00000000 
000113fa l       .debug_str	00000000 
0001fa68 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00035e99 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00013d59 l       .debug_str	00000000 
0006190e l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0002c502 l       .debug_str	00000000 
00031991 l       .debug_str	00000000 
00031bfc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0006085b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00036053 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
000316c0 l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
00031734 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000304e9 l       .debug_str	00000000 
00030570 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
000305bd l       .debug_str	00000000 
00030644 l       .debug_str	00000000 
0003088c l       .debug_str	00000000 
00030915 l       .debug_str	00000000 
00030964 l       .debug_str	00000000 
00030c37 l       .debug_str	00000000 
0002197e l       .debug_str	00000000 
00030cc3 l       .debug_str	00000000 
00021c07 l       .debug_str	00000000 
00028360 l     O .text	0000001c str.0
000283a0 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013c00 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0006190e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00031c6c l       .debug_str	00000000 
0000b32d l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00013c18 l       .debug_str	00000000 
0002ffec l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00031cbc l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
00031f81 l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00031ff9 l       .debug_str	00000000 
00032224 l       .debug_str	00000000 
0003229c l       .debug_str	00000000 
0003242b l       .debug_str	00000000 
000324a3 l       .debug_str	00000000 
0003260b l       .debug_str	00000000 
00032683 l       .debug_str	00000000 
00032701 l       .debug_str	00000000 
00032779 l       .debug_str	00000000 
0003286c l       .debug_str	00000000 
000328e4 l       .debug_str	00000000 
00032ac1 l       .debug_str	00000000 
00032b39 l       .debug_str	00000000 
00032c05 l       .debug_str	00000000 
00032c7d l       .debug_str	00000000 
00032cad l       .debug_str	00000000 
00032d25 l       .debug_str	00000000 
00032dca l       .debug_str	00000000 
00032e42 l       .debug_str	00000000 
00032f83 l       .debug_str	00000000 
00032ffb l       .debug_str	00000000 
000331b1 l       .debug_str	00000000 
00033229 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00036053 l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00031d20 l       .debug_str	00000000 
00031d98 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00031def l       .debug_str	00000000 
00031e67 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16gyyaet005v3lvf
0002566d l       .debug_str	00000000 
0003342d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0003348d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00036053 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1gec8qpvo4ti2nbg
0001cace l       .debug_str	00000000 
0002f393 l       .debug_str	00000000 
000335f1 l       .debug_str	00000000 
0002f3f1 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0005b2ea l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013c08 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000334ed l       .debug_str	00000000 
0002f2de l       .debug_str	00000000 
00026840 l       .debug_str	00000000 
0003353f l       .debug_str	00000000 
00033592 l       .debug_str	00000000 
0003359c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 28buxl9xaffr9rke
0005aecc l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00033647 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
000192ed l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2leljxexqh8ze7wz
00036432 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000131bd l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000336a4 l       .debug_str	00000000 
0005c787 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cgt5uexdtuxl7pe
000339f4 l       .debug_str	00000000 
000338fa l       .debug_str	00000000 
00033917 l       .debug_str	00000000 
00033952 l       .debug_str	00000000 
00033980 l       .debug_str	00000000 
0003399b l       .debug_str	00000000 
000339d6 l       .debug_str	00000000 
000339ff l       .debug_str	00000000 
00033592 l       .debug_str	00000000 
00033a25 l       .debug_str	00000000 
00033a4b l       .debug_str	00000000 
00033a65 l       .debug_str	00000000 
0002f337 l       .debug_str	00000000 
00033a8c l       .debug_str	00000000 
00033ab3 l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
00010209 l       .debug_str	00000000 
0000fed0 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005e23a l       .debug_str	00000000 
0005b544 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00033715 l       .debug_str	00000000 
00033727 l       .debug_str	00000000 
00033738 l       .debug_str	00000000 
00033784 l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f1ab l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254ed l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f26 l       .debug_str	00000000 
00033790 l       .debug_str	00000000 
000337b2 l       .debug_str	00000000 
000337d3 l       .debug_str	00000000 
0003381f l       .debug_str	00000000 
0003383b l       .debug_str	00000000 
00033872 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00026840 l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0003388c l       .debug_str	00000000 
00033899 l       .debug_str	00000000 
000338d0 l       .debug_str	00000000 
00025f11 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3wi7uqccuys0591w
00016817 l       .debug_str	00000000 
00016851 l       .debug_str	00000000 
0001688a l       .debug_str	00000000 
00016899 l       .debug_str	00000000 
000168dc l       .debug_str	00000000 
0005c815 l       .debug_str	00000000 
000391a0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013b07 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
00011ff5 l       .debug_str	00000000 
00016893 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00033ace l       .debug_str	00000000 
00013b4a l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00033af7 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
0002566d l       .debug_str	00000000 
00033b33 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00033b93 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00036053 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
00033c5f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00033bf3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
00036432 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
000131bd l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00033c68 l       .debug_str	00000000 
0005c787 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 25lz0dio8kzdubcg
00016770 l       .debug_str	00000000 
0005b2ea l       .debug_str	00000000 
00025f11 l       .debug_str	00000000 
00010209 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
00013ac4 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00033cd9 l       .debug_str	00000000 
00033d17 l       .debug_str	00000000 
0000f358 l       .debug_str	00000000 
0005f1ab l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000254ed l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00025f26 l       .debug_str	00000000 
00033d30 l       .debug_str	00000000 
00033d6e l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00026840 l       .debug_str	00000000 
0005b544 l       .debug_str	00000000 
0000fed0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
00033d97 l       .debug_str	00000000 
00033daa l       .debug_str	00000000 
00013a9c l       .debug_str	00000000 
0005f0e7 l       .debug_str	00000000 
00033ddb l       .debug_str	00000000 
00033de3 l       .debug_str	00000000 
00033dec l       .debug_str	00000000 
00033e35 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00033df3 l       .debug_str	00000000 
00033e32 l       .debug_str	00000000 
00033e3b l       .debug_str	00000000 
00033e7d l       .debug_str	00000000 
00033e87 l       .debug_str	00000000 
00033eca l       .debug_str	00000000 
00033ed4 l       .debug_str	00000000 
00033f17 l       .debug_str	00000000 
00033f21 l       .debug_str	00000000 
00033f64 l       .debug_str	00000000 
00033f6f l       .debug_str	00000000 
00033fb4 l       .debug_str	00000000 
00033fbf l       .debug_str	00000000 
00034004 l       .debug_str	00000000 
0003400a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000ea09 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0003463f l       .debug_str	00000000 
00011ff1 l       .debug_str	00000000 
00034017 l       .debug_str	00000000 
00034027 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000113d2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000113bc l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00035e99 l       .debug_str	00000000 
00061a03 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00013389 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00013d59 l       .debug_str	00000000 
00025562 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0003406d l       .debug_str	00000000 
000232a4 l       .debug_str	00000000 
0005fe56 l       .debug_str	00000000 
00034a43 l       .debug_str	00000000 
000113c4 l       .debug_str	00000000 
0005fa68 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005b2be l       .debug_str	00000000 
0003407f l       .debug_str	00000000 
00034084 l       .debug_str	00000000 
000613de l       .debug_str	00000000 
0003408f l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
00034099 l       .debug_str	00000000 
0003470d l       .debug_str	00000000 
000340a3 l       .debug_str	00000000 
00016770 l       .debug_str	00000000 
0003474d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00034a86 l       .debug_str	00000000 
000113ce l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
000340b1 l       .debug_str	00000000 
00034125 l       .debug_str	00000000 
00034967 l       .debug_str	00000000 
00034137 l       .debug_str	00000000 
00034753 l       .debug_str	00000000 
0003472d l       .debug_str	00000000 
00015203 l       .debug_str	00000000 
000349aa l       .debug_str	00000000 
0003413c l       .debug_str	00000000 
000341b0 l       .debug_str	00000000 
00034abf l       .debug_str	00000000 
00034b06 l       .debug_str	00000000 
00034a0c l       .debug_str	00000000 
000341c8 l       .debug_str	00000000 
0004429b l       .debug_str	00000000 
000399ba l       .debug_str	00000000 
0005b26d l       .debug_str	00000000 
00034b21 l       .debug_str	00000000 
000349db l       .debug_str	00000000 
00034240 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005f074 l       .debug_str	00000000 
00022a77 l       .debug_str	00000000 
00034298 l       .debug_str	00000000 
0003429d l       .debug_str	00000000 
000342af l       .debug_str	00000000 
0001cace l       .debug_str	00000000 
0003519f l       .debug_str	00000000 
000342b8 l       .debug_str	00000000 
0001ac13 l       .debug_str	00000000 
000342e0 l       .debug_str	00000000 
000342f0 l       .debug_str	00000000 
0005d710 l       .debug_str	00000000 
00034349 l       .debug_str	00000000 
00034351 l       .debug_str	00000000 
00013ce9 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00012c48 l       .debug_str	00000000 
00034359 l       .debug_str	00000000 
0001699d l       .debug_str	00000000 
00034365 l       .debug_str	00000000 
0003436f l       .debug_str	00000000 
0003437c l       .debug_str	00000000 
00034389 l       .debug_str	00000000 
0003439e l       .debug_str	00000000 
000343b2 l       .debug_str	00000000 
000343c8 l       .debug_str	00000000 
000343d0 l       .debug_str	00000000 
000343dd l       .debug_str	00000000 
000343ea l       .debug_str	00000000 
00034cf3 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
000343f7 l       .debug_str	00000000 
00034424 l       .debug_str	00000000 
00034453 l       .debug_str	00000000 
0003447a l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00034499 l       .debug_str	00000000 
000344ae l       .debug_str	00000000 
0001a635 l       .debug_str	00000000 
0004f13f l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
0005aecc l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
000344b8 l       .debug_str	00000000 
000344dd l       .debug_str	00000000 
000344c3 l       .debug_str	00000000 
0003455c l       .debug_str	00000000 
000344ed l       .debug_str	00000000 
000344f3 l       .debug_str	00000000 
00034502 l       .debug_str	00000000 
0003450d l       .debug_str	00000000 
00034542 l       .debug_str	00000000 
00034567 l       .debug_str	00000000 
00034577 l       .debug_str	00000000 
0005bad6 l       .debug_str	00000000 
000345a9 l       .debug_str	00000000 
000345ae l       .debug_str	00000000 
0005c979 l       .debug_str	00000000 
00035e13 l       .debug_str	00000000 
00035e0c l       .debug_str	00000000 
00013c18 l       .debug_str	00000000 
00035e3a l       .debug_str	00000000 
00035e6e l       .debug_str	00000000 
000345b4 l       .debug_str	00000000 
00005940 l       .debug_str	00000000 
000345f2 l       .debug_str	00000000 
00035e17 l       .debug_str	00000000 
00035e64 l       .debug_str	00000000 
000345d3 l       .debug_str	00000000 
000345c0 l       .debug_str	00000000 
000345d9 l       .debug_str	00000000 
00022a76 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0000bca1 l       .debug_str	00000000 
00034601 l       .debug_str	00000000 
00034609 l       .debug_str	00000000 
0003fad2 l       .debug_str	00000000 
0003460f l       .debug_str	00000000 
0004d5fd l       .debug_str	00000000 
00034636 l       .debug_str	00000000 
0003461a l       .debug_str	00000000 
0000ea08 l       .debug_str	00000000 
0003463e l       .debug_str	00000000 
000342ea l       .debug_str	00000000 
0002340a l       .debug_str	00000000 
000254c2 l       .debug_str	00000000 
00034643 l       .debug_str	00000000 
00034667 l       .debug_str	00000000 
0003466d l       .debug_str	00000000 
00034675 l       .debug_str	00000000 
0004fc68 l       .debug_str	00000000 
0003f6ce l       .debug_str	00000000 
0003467a l       .debug_str	00000000 
000346a2 l       .debug_str	00000000 
00034684 l       .debug_str	00000000 
00026847 l       .debug_str	00000000 
000192ed l       .debug_str	00000000 
00016810 l       .debug_str	00000000 
0001fb14 l       .debug_str	00000000 
00023412 l       .debug_str	00000000 
0002341f l       .debug_str	00000000 
00023428 l       .debug_str	00000000 
0005a234 l       .debug_str	00000000 
000346b6 l       .debug_str	00000000 
000346aa l       .debug_str	00000000 
000131bd l       .debug_str	00000000 
000346c3 l       .debug_str	00000000 
000346cf l       .debug_str	00000000 
000346f2 l       .debug_str	00000000 
000346dc l       .debug_str	00000000 
00034700 l       .debug_str	00000000 
00034720 l       .debug_str	00000000 
00034740 l       .debug_str	00000000 
0003475b l       .debug_str	00000000 
00034776 l       .debug_str	00000000 
0003477c l       .debug_str	00000000 
00034780 l       .debug_str	00000000 
00034791 l       .debug_str	00000000 
00034784 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
000347a6 l       .debug_str	00000000 
000347a1 l       .debug_str	00000000 
000347b9 l       .debug_str	00000000 
00034805 l       .debug_str	00000000 
000347de l       .debug_str	00000000 
000347f5 l       .debug_str	00000000 
0003481f l       .debug_str	00000000 
00034810 l       .debug_str	00000000 
00034867 l       .debug_str	00000000 
00034847 l       .debug_str	00000000 
000348c0 l       .debug_str	00000000 
000348a0 l       .debug_str	00000000 
0005a226 l       .debug_str	00000000 
00034917 l       .debug_str	00000000 
0003491c l       .debug_str	00000000 
00034922 l       .debug_str	00000000 
00034945 l       .debug_str	00000000 
00034927 l       .debug_str	00000000 
00034950 l       .debug_str	00000000 
0003499b l       .debug_str	00000000 
000349cc l       .debug_str	00000000 
000349fd l       .debug_str	00000000 
00034a2c l       .debug_str	00000000 
00034a77 l       .debug_str	00000000 
00034aa8 l       .debug_str	00000000 
0001aa32 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0003a0e4 l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00039bfa l       .debug_str	00000000 
0005d2e3 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0006191d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005af55 l       .debug_str	00000000 
0005ae56 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0005b49e l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001fa38 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fbb5 l       .debug_str	00000000 
0001fba9 l       .debug_str	00000000 
0001f9e6 l       .debug_str	00000000 
00034af9 l       .debug_str	00000000 
00034b12 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00034b40 l       .debug_str	00000000 
00034b3f l       .debug_str	00000000 
00034b54 l       .debug_str	00000000 
00034b45 l       .debug_str	00000000 
0005af47 l       .debug_str	00000000 
0005a214 l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00034b81 l       .debug_str	00000000 
00034b73 l       .debug_str	00000000 
00034b72 l       .debug_str	00000000 
0001fb1d l       .debug_str	00000000 
000192f7 l       .debug_str	00000000 
00061d53 l       .debug_str	00000000 
00034b8a l       .debug_str	00000000 
00034b8e l       .debug_str	00000000 
00034b91 l       .debug_str	00000000 
00060843 l       .debug_str	00000000 
000192db l       .debug_str	00000000 
00034b94 l       .debug_str	00000000 
0001a5ad l       .debug_str	00000000 
00034b98 l       .debug_str	00000000 
00034b97 l       .debug_str	00000000 
00034b9d l       .debug_str	00000000 
00034c6f l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
00034bbb l       .debug_str	00000000 
00034ba9 l       .debug_str	00000000 
00034be0 l       .debug_str	00000000 
00034ca8 l       .debug_str	00000000 
00034bfe l       .debug_str	00000000 
00034bec l       .debug_str	00000000 
00034c23 l       .debug_str	00000000 
00034c3c l       .debug_str	00000000 
00034c2a l       .debug_str	00000000 
00034c48 l       .debug_str	00000000 
00034c60 l       .debug_str	00000000 
00034c99 l       .debug_str	00000000 
0001a5b3 l       .debug_str	00000000 
00034cd2 l       .debug_str	00000000 
00034cdf l       .debug_str	00000000 
00034cde l       .debug_str	00000000 
00034ce7 l       .debug_str	00000000 
00034d14 l       .debug_str	00000000 
00034cff l       .debug_str	00000000 
00034d31 l       .debug_str	00000000 
00034d3d l       .debug_str	00000000 
00034de7 l       .debug_str	00000000 
00034d49 l       .debug_str	00000000 
00034d50 l       .debug_str	00000000 
00034d59 l       .debug_str	00000000 
00034d67 l       .debug_str	00000000 
00034d6e l       .debug_str	00000000 
00034d76 l       .debug_str	00000000 
00034d7d l       .debug_str	00000000 
00034dc3 l       .debug_str	00000000 
00034d9e l       .debug_str	00000000 
00034d89 l       .debug_str	00000000 
00034dae l       .debug_str	00000000 
00034dd2 l       .debug_str	00000000 
0000ea27 l       .debug_str	00000000 
00034df3 l       .debug_str	00000000 
000254d5 l       .debug_str	00000000 
0005e72d l       .debug_str	00000000 
0001f959 l       .debug_str	00000000 
0001f942 l       .debug_str	00000000 
00034e0d l       .debug_str	00000000 
00034e30 l       .debug_str	00000000 
00034e19 l       .debug_str	00000000 
00034e7a l       .debug_str	00000000 
00034e6e l       .debug_str	00000000 
000342e5 l       .debug_str	00000000 
00034e97 l       .debug_str	00000000 
00034e80 l       .debug_str	00000000 
00034ee0 l       .debug_str	00000000 
00034f08 l       .debug_str	00000000 
00034ef1 l       .debug_str	00000000 
0005d2d1 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
0005b35c l       .debug_str	00000000 
00034fb7 l       .debug_str	00000000 
00034f99 l       .debug_str	00000000 
000350ad l       .debug_str	00000000 
0003508d l       .debug_str	00000000 
00035120 l       .debug_str	00000000 
00035100 l       .debug_str	00000000 
0004b726 l       .debug_str	00000000 
00035173 l       .debug_str	00000000 
00035180 l       .debug_str	00000000 
0003518b l       .debug_str	00000000 
000351a1 l       .debug_str	00000000 
000351ab l       .debug_str	00000000 
00035201 l       .debug_str	00000000 
00035213 l       .debug_str	00000000 
00035265 l       .debug_str	00000000 
00035279 l       .debug_str	00000000 
000352cd l       .debug_str	00000000 
000352d4 l       .debug_str	00000000 
0003531a l       .debug_str	00000000 
00035329 l       .debug_str	00000000 
00035383 l       .debug_str	00000000 
000353d9 l       .debug_str	00000000 
00035431 l       .debug_str	00000000 
0003547b l       .debug_str	00000000 
00035481 l       .debug_str	00000000 
000354d1 l       .debug_str	00000000 
0003551d l       .debug_str	00000000 
0003556b l       .debug_str	00000000 
0002557b l       .debug_str	00000000 
000355ab l       .debug_str	00000000 
000355f8 l       .debug_str	00000000 
00035641 l       .debug_str	00000000 
0003568c l       .debug_str	00000000 
000356c9 l       .debug_str	00000000 
000356d9 l       .debug_str	00000000 
00035734 l       .debug_str	00000000 
0003578b l       .debug_str	00000000 
000357e4 l       .debug_str	00000000 
00042aba l       .debug_str	00000000 
0003582f l       .debug_str	00000000 
00035883 l       .debug_str	00000000 
000358d3 l       .debug_str	00000000 
00035925 l       .debug_str	00000000 
0005adc8 l       .debug_str	00000000 
00035969 l       .debug_str	00000000 
000359b5 l       .debug_str	00000000 
000359fd l       .debug_str	00000000 
00035a47 l       .debug_str	00000000 
000428f0 l       .debug_str	00000000 
00035a83 l       .debug_str	00000000 
00035ad7 l       .debug_str	00000000 
00035b27 l       .debug_str	00000000 
00035b79 l       .debug_str	00000000 
00035bbd l       .debug_str	00000000 
00035bc9 l       .debug_str	00000000 
00035c20 l       .debug_str	00000000 
00035c73 l       .debug_str	00000000 
00035cc8 l       .debug_str	00000000 
00035d0f l       .debug_str	00000000 
00035d1b l       .debug_str	00000000 
00035d32 l       .debug_str	00000000 
00035d2b l       .debug_str	00000000 
00035d44 l       .debug_str	00000000 
00035d59 l       .debug_str	00000000 
00035daa l       .debug_str	00000000 
00035dba l       .debug_str	00000000 
00035e0b l       .debug_str	00000000 
00035e16 l       .debug_str	00000000 
00035e39 l       .debug_str	00000000 
00035e6d l       .debug_str	00000000 
00035e83 l       .debug_str	00000000 
00035eb1 l       .debug_str	00000000 
00035ea5 l       .debug_str	00000000 
00035ebf l       .debug_str	00000000 
00035ebe l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000192e3 l       .debug_str	00000000 
000254e8 l       .debug_str	00000000 
000254e7 l       .debug_str	00000000 
000254ed l       .debug_str	00000000 
000254ec l       .debug_str	00000000 
00035ec2 l       .debug_str	00000000 
00035f02 l       .debug_str	00000000 
00035f0a l       .debug_str	00000000 
00035f4a l       .debug_str	00000000 
00035f54 l       .debug_str	00000000 
0005a360 l       .debug_str	00000000 
0005eecb l       .debug_str	00000000 
00035f90 l       .debug_str	00000000 
0001b7a1 l       .debug_str	00000000 
00038db0 l       .debug_str	00000000 
00035fb8 l       .debug_str	00000000 
0001b659 l       .debug_str	00000000 
00035fe1 l       .debug_str	00000000 
00036006 l       .debug_str	00000000 
00046f3e l       .debug_str	00000000 
0005b3b6 l       .debug_str	00000000 
0003600d l       .debug_str	00000000 
00036016 l       .debug_str	00000000 
0003604f l       .debug_str	00000000 
00012f3b l       .debug_str	00000000 
00036057 l       .debug_str	00000000 
00014ab1 l       .debug_str	00000000 
000360ec l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
00036137 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
0003617e l       .debug_str	00000000 
00011afa l       .debug_str	00000000 
000361d3 l       .debug_str	00000000 
00036210 l       .debug_str	00000000 
00013c08 l       .debug_str	00000000 
0003621b l       .debug_str	00000000 
000149bb l       .debug_str	00000000 
00036270 l       .debug_str	00000000 
0001494b l       .debug_str	00000000 
000362c2 l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
00036309 l       .debug_str	00000000 
0000acd7 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011486 l       .debug_str	00000000 
00036d13 l       .debug_str	00000000 
0003638f l       .debug_str	00000000 
000363d0 l       .debug_str	00000000 
000363f3 l       .debug_str	00000000 
0003642e l       .debug_str	00000000 
00036438 l       .debug_str	00000000 
000364c2 l       .debug_str	00000000 
000364f4 l       .debug_str	00000000 
00011524 l       .debug_str	00000000 
00013c00 l       .debug_str	00000000 
00036568 l       .debug_str	00000000 
000365b9 l       .debug_str	00000000 
00013d34 l       .debug_str	00000000 
000365fb l       .debug_str	00000000 
00036682 l       .debug_str	00000000 
00036691 l       .debug_str	00000000 
0003671b l       .debug_str	00000000 
00036797 l       .debug_str	00000000 
000367c7 l       .debug_str	00000000 
00036802 l       .debug_str	00000000 
0003680c l       .debug_str	00000000 
00003b0f l       .debug_str	00000000 
00036883 l       .debug_str	00000000 
000368d8 l       .debug_str	00000000 
000368e1 l       .debug_str	00000000 
00036932 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
0003693e l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0003694b l       .debug_str	00000000 
00036954 l       .debug_str	00000000 
0003696a l       .debug_str	00000000 
00036977 l       .debug_str	00000000 
000369bc l       .debug_str	00000000 
000369d0 l       .debug_str	00000000 
00036a25 l       .debug_str	00000000 
00036a2e l       .debug_str	00000000 
0004dbdd l       .debug_str	00000000 
00036a66 l       .debug_str	00000000 
00036aa3 l       .debug_str	00000000 
00036aae l       .debug_str	00000000 
00036b31 l       .debug_str	00000000 
00036b3c l       .debug_str	00000000 
00036bc2 l       .debug_str	00000000 
00036c37 l       .debug_str	00000000 
00036c63 l       .debug_str	00000000 
00036cec l       .debug_str	00000000 
00036cfb l       .debug_str	00000000 
00036d08 l       .debug_str	00000000 
00036d1c l       .debug_str	00000000 
00036d72 l       .debug_str	00000000 
00036de1 l       .debug_str	00000000 
00036e61 l       .debug_str	00000000 
00036ecf l       .debug_str	00000000 
00036f5a l       .debug_str	00000000 
00036fcf l       .debug_str	00000000 
0003700f l       .debug_str	00000000 
00037092 l       .debug_str	00000000 
000370d3 l       .debug_str	00000000 
0004b5e8 l       .debug_str	00000000 
0004f102 l       .debug_str	00000000 
00037138 l       .debug_str	00000000 
000371e7 l       .debug_str	00000000 
00037232 l       .debug_str	00000000 
00014c36 l       .debug_str	00000000 
000372db l       .debug_str	00000000 
00037357 l       .debug_str	00000000 
00013abe l       .debug_str	00000000 
0003737c l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
000373c9 l       .debug_str	00000000 
000141ae l       .debug_str	00000000 
0003741c l       .debug_str	00000000 
00037457 l       .debug_str	00000000 
00037462 l       .debug_str	00000000 
0001a251 l       .debug_str	00000000 
000374ee l       .debug_str	00000000 
00013e06 l       .debug_str	00000000 
00037571 l       .debug_str	00000000 
000375f9 l       .debug_str	00000000 
000206c2 l       .debug_str	00000000 
0003766e l       .debug_str	00000000 
000376f4 l       .debug_str	00000000 
0001513d l       .debug_str	00000000 
00037769 l       .debug_str	00000000 
0000b810 l       .debug_str	00000000 
000377cc l       .debug_str	00000000 
0000ad61 l       .debug_str	00000000 
0003782e l       .debug_str	00000000 
0000aa4d l       .debug_str	00000000 
00037874 l       .debug_str	00000000 
000378bc l       .debug_str	00000000 
000378c6 l       .debug_str	00000000 
00037907 l       .debug_str	00000000 
00037921 l       .debug_str	00000000 
000255a0 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00037927 l       .debug_str	00000000 
00037930 l       .debug_str	00000000 
00037995 l       .debug_str	00000000 
000379a4 l       .debug_str	00000000 
000379e6 l       .debug_str	00000000 
000379f0 l       .debug_str	00000000 
00037a55 l       .debug_str	00000000 
00037a97 l       .debug_str	00000000 
00037ae1 l       .debug_str	00000000 
00037af0 l       .debug_str	00000000 
00037b26 l       .debug_str	00000000 
00037b2f l       .debug_str	00000000 
00017097 l       .debug_str	00000000 
00037b39 l       .debug_str	00000000 
00037b3c l       .debug_str	00000000 
00037b74 l       .debug_str	00000000 
00037b7e l       .debug_str	00000000 
00037bc2 l       .debug_str	00000000 
00037bd8 l       .debug_str	00000000 
00037c21 l       .debug_str	00000000 
00013d7b l       .debug_str	00000000 
0002558b l       .debug_str	00000000 
00037c66 l       .debug_str	00000000 
00037caf l       .debug_str	00000000 
00037cbd l       .debug_str	00000000 
00037d05 l       .debug_str	00000000 
00023c59 l       .debug_str	00000000 
00037d4f l       .debug_str	00000000 
00041527 l       .debug_str	00000000 
00037de7 l       .debug_str	00000000 
0005ad99 l       .debug_str	00000000 
00037e81 l       .debug_str	00000000 
00024149 l       .debug_str	00000000 
00037ef3 l       .debug_str	00000000 
00023e7c l       .debug_str	00000000 
00037f96 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00037fc8 l       .debug_str	00000000 
0003800f l       .debug_str	00000000 
0003801d l       .debug_str	00000000 
00038027 l       .debug_str	00000000 
00038075 l       .debug_str	00000000 
00038085 l       .debug_str	00000000 
000380d0 l       .debug_str	00000000 
000380de l       .debug_str	00000000 
0003816c l       .debug_str	00000000 
0003817b l       .debug_str	00000000 
0000c0b6 l       .debug_str	00000000 
000381c4 l       .debug_str	00000000 
0000c05f l       .debug_str	00000000 
00038209 l       .debug_str	00000000 
00038243 l       .debug_str	00000000 
0003824c l       .debug_str	00000000 
00038298 l       .debug_str	00000000 
000382b0 l       .debug_str	00000000 
00038312 l       .debug_str	00000000 
0000bfaf l       .debug_str	00000000 
00038347 l       .debug_str	00000000 
0003836f l       .debug_str	00000000 
000383a7 l       .debug_str	00000000 
000383d0 l       .debug_str	00000000 
000383db l       .debug_str	00000000 
0001a9b0 l       .debug_str	00000000 
00038400 l       .debug_str	00000000 
0003848f l       .debug_str	00000000 
000384c6 l       .debug_str	00000000 
0003854c l       .debug_str	00000000 
0003859a l       .debug_str	00000000 
000385a3 l       .debug_str	00000000 
00038629 l       .debug_str	00000000 
0003863c l       .debug_str	00000000 
000386c5 l       .debug_str	00000000 
00038721 l       .debug_str	00000000 
00038763 l       .debug_str	00000000 
00038815 l       .debug_str	00000000 
00038854 l       .debug_str	00000000 
000388f9 l       .debug_str	00000000 
0003898d l       .debug_str	00000000 
000389b3 l       .debug_str	00000000 
00038a2f l       .debug_str	00000000 
00038a6a l       .debug_str	00000000 
00038a77 l       .debug_str	00000000 
00038ab0 l       .debug_str	00000000 
00038ac8 l       .debug_str	00000000 
00038b08 l       .debug_str	00000000 
0002ffec l       .debug_str	00000000 
00038b14 l       .debug_str	00000000 
00038b71 l       .debug_str	00000000 
00038bce l       .debug_str	00000000 
00038c7b l       .debug_str	00000000 
00038cd8 l       .debug_str	00000000 
0001651d l       .debug_str	00000000 
00038d45 l       .debug_str	00000000 
00038da9 l       .debug_str	00000000 
00038db4 l       .debug_str	00000000 
00038de4 l       .debug_str	00000000 
00038e10 l       .debug_str	00000000 
00038e7c l       .debug_str	00000000 
00038eac l       .debug_str	00000000 
00038ee8 l       .debug_str	00000000 
00038f32 l       .debug_str	00000000 
00038f42 l       .debug_str	00000000 
00038f77 l       .debug_str	00000000 
00038fbc l       .debug_str	00000000 
00038fc7 l       .debug_str	00000000 
00039007 l       .debug_str	00000000 
00039015 l       .debug_str	00000000 
000390a1 l       .debug_str	00000000 
0003911d l       .debug_str	00000000 
0003913d l       .debug_str	00000000 
00039197 l       .debug_str	00000000 
000391a4 l       .debug_str	00000000 
000391dd l       .debug_str	00000000 
000391e5 l       .debug_str	00000000 
0003923a l       .debug_str	00000000 
0003928c l       .debug_str	00000000 
00038171 l       .debug_str	00000000 
000392d3 l       .debug_str	00000000 
00039347 l       .debug_str	00000000 
0003938b l       .debug_str	00000000 
000393d7 l       .debug_str	00000000 
00039416 l       .debug_str	00000000 
0003943c l       .debug_str	00000000 
0003944e l       .debug_str	00000000 
00039458 l       .debug_str	00000000 
0003949a l       .debug_str	00000000 
00003a62 l       .debug_str	00000000 
00039521 l       .debug_str	00000000 
00011a7b l       .debug_str	00000000 
0003959d l       .debug_str	00000000 
00039614 l       .debug_str	00000000 
00039662 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
000396f2 l       .debug_str	00000000 
0003972e l       .debug_str	00000000 
0003973b l       .debug_str	00000000 
00039781 l       .debug_str	00000000 
0003978e l       .debug_str	00000000 
0003a4d4 l       .debug_str	00000000 
000397c0 l       .debug_str	00000000 
00039810 l       .debug_str	00000000 
00039827 l       .debug_str	00000000 
000398b1 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0003992d l       .debug_str	00000000 
00039941 l       .debug_str	00000000 
0003999e l       .debug_str	00000000 
000399ad l       .debug_str	00000000 
000399be l       .debug_str	00000000 
00039a18 l       .debug_str	00000000 
00039a27 l       .debug_str	00000000 
00039ab0 l       .debug_str	00000000 
00039abe l       .debug_str	00000000 
00039b14 l       .debug_str	00000000 
00039b68 l       .debug_str	00000000 
00039be1 l       .debug_str	00000000 
00039bf9 l       .debug_str	00000000 
00039c03 l       .debug_str	00000000 
00039c9a l       .debug_str	00000000 
00039cb4 l       .debug_str	00000000 
0001d5c0 l       .debug_str	00000000 
00039ced l       .debug_str	00000000 
000138bc l       .debug_str	00000000 
00039d52 l       .debug_str	00000000 
00039de9 l       .debug_str	00000000 
00039ded l       .debug_str	00000000 
0003a0e2 l       .debug_str	00000000 
00039df2 l       .debug_str	00000000 
0005fd93 l       .debug_str	00000000 
00013ac4 l       .debug_str	00000000 
00039e24 l       .debug_str	00000000 
000197e8 l       .debug_str	00000000 
00039e62 l       .debug_str	00000000 
0000a9f3 l       .debug_str	00000000 
00039eb5 l       .debug_str	00000000 
00039f41 l       .debug_str	00000000 
00039fbd l       .debug_str	00000000 
00039fdc l       .debug_str	00000000 
0003a027 l       .debug_str	00000000 
0003a034 l       .debug_str	00000000 
0003a0a8 l       .debug_str	00000000 
0003e3e6 l       .debug_str	00000000 
0004fb21 l       .debug_str	00000000 
0003a0c7 l       .debug_str	00000000 
0003a0e7 l       .debug_str	00000000 
0003a103 l       .debug_str	00000000 
0003a10d l       .debug_str	00000000 
0003a199 l       .debug_str	00000000 
0003a215 l       .debug_str	00000000 
0003a246 l       .debug_str	00000000 
0003a2c9 l       .debug_str	00000000 
0003a2e9 l       .debug_str	00000000 
0003a36f l       .debug_str	00000000 
0003a3e4 l       .debug_str	00000000 
00030087 l       .debug_str	00000000 
0005d35f l       .debug_str	00000000 
0003a425 l       .debug_str	00000000 
0002420f l       .debug_str	00000000 
0003a470 l       .debug_str	00000000 
0003a4cc l       .debug_str	00000000 
0003a4d8 l       .debug_str	00000000 
0003a521 l       .debug_str	00000000 
0003a531 l       .debug_str	00000000 
0003a576 l       .debug_str	00000000 
0003a5bf l       .debug_str	00000000 
0003a604 l       .debug_str	00000000 
0003a660 l       .debug_str	00000000 
0003a6ab l       .debug_str	00000000 
0003a6f2 l       .debug_str	00000000 
0003a750 l       .debug_str	00000000 
0003a79b l       .debug_str	00000000 
0003a7e2 l       .debug_str	00000000 
0003a840 l       .debug_str	00000000 
0003a88b l       .debug_str	00000000 
0003a8d2 l       .debug_str	00000000 
0003a930 l       .debug_str	00000000 
0003a979 l       .debug_str	00000000 
0003a9be l       .debug_str	00000000 
0003aa1a l       .debug_str	00000000 
0003aa63 l       .debug_str	00000000 
0003aaa8 l       .debug_str	00000000 
0003ab04 l       .debug_str	00000000 
0003ab4e l       .debug_str	00000000 
0003ab94 l       .debug_str	00000000 
0003abf1 l       .debug_str	00000000 
0003ac3b l       .debug_str	00000000 
0003ac81 l       .debug_str	00000000 
0003acde l       .debug_str	00000000 
0003ad39 l       .debug_str	00000000 
0003ad81 l       .debug_str	00000000 
0003adc5 l       .debug_str	00000000 
0003ae0d l       .debug_str	00000000 
0003ae51 l       .debug_str	00000000 
0003aeac l       .debug_str	00000000 
0003aef5 l       .debug_str	00000000 
0003af3a l       .debug_str	00000000 
0003af96 l       .debug_str	00000000 
0003afdf l       .debug_str	00000000 
0003b024 l       .debug_str	00000000 
0003b080 l       .debug_str	00000000 
0003b0c9 l       .debug_str	00000000 
0003b10e l       .debug_str	00000000 
0003b16a l       .debug_str	00000000 
0003b1b4 l       .debug_str	00000000 
0003b1fa l       .debug_str	00000000 
0003b257 l       .debug_str	00000000 
0003b2a1 l       .debug_str	00000000 
0003b2e7 l       .debug_str	00000000 
0003b344 l       .debug_str	00000000 
0003b38e l       .debug_str	00000000 
0003b3d4 l       .debug_str	00000000 
0003b431 l       .debug_str	00000000 
0003b48c l       .debug_str	00000000 
0003b4d4 l       .debug_str	00000000 
0003b518 l       .debug_str	00000000 
0003b560 l       .debug_str	00000000 
0003b5a4 l       .debug_str	00000000 
0003b5ff l       .debug_str	00000000 
0003b65a l       .debug_str	00000000 
0003b6a2 l       .debug_str	00000000 
0003b6e6 l       .debug_str	00000000 
0003b72f l       .debug_str	00000000 
0003b774 l       .debug_str	00000000 
0003b7d0 l       .debug_str	00000000 
0003b82c l       .debug_str	00000000 
0003b875 l       .debug_str	00000000 
0003b8ba l       .debug_str	00000000 
0003b916 l       .debug_str	00000000 
0003b95f l       .debug_str	00000000 
0003b9a4 l       .debug_str	00000000 
0003ba00 l       .debug_str	00000000 
0003ba49 l       .debug_str	00000000 
0003ba8e l       .debug_str	00000000 
00023d2f l       .debug_str	00000000 
0003baea l       .debug_str	00000000 
0003bb29 l       .debug_str	00000000 
0003bb5e l       .debug_str	00000000 
0000594d l       .debug_str	00000000 
00013c12 l       .debug_str	00000000 
00013d62 l       .debug_str	00000000 
0003bb68 l       .debug_str	00000000 
00015d1e l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
0003bba2 l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0003bc34 l       .debug_str	00000000 
0001524a l       .debug_str	00000000 
0003bc6d l       .debug_str	00000000 
00014731 l       .debug_str	00000000 
0003bc94 l       .debug_str	00000000 
0001467d l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0003bcce l       .debug_str	00000000 
000143fc l       .debug_str	00000000 
0003bcf4 l       .debug_str	00000000 
0001414d l       .debug_str	00000000 
0003bd4e l       .debug_str	00000000 
00014b57 l       .debug_str	00000000 
0003bde8 l       .debug_str	00000000 
00013d71 l       .debug_str	00000000 
0003be71 l       .debug_str	00000000 
0003bf18 l       .debug_str	00000000 
0003bf51 l       .debug_str	00000000 
0003bfc6 l       .debug_str	00000000 
0003bfef l       .debug_str	00000000 
0002d003 l       .debug_str	00000000 
0003c024 l       .debug_str	00000000 
0003c060 l       .debug_str	00000000 
0003c071 l       .debug_str	00000000 
0003c0aa l       .debug_str	00000000 
0001315c l       .debug_str	00000000 
0003c0b7 l       .debug_str	00000000 
0003c0c6 l       .debug_str	00000000 
0003799d l       .debug_str	00000000 
0003c10f l       .debug_str	00000000 
0003c142 l       .debug_str	00000000 
0003c14f l       .debug_str	00000000 
00061052 l       .debug_str	00000000 
0003c19a l       .debug_str	00000000 
0003c1f2 l       .debug_str	00000000 
0003c207 l       .debug_str	00000000 
0003c23d l       .debug_str	00000000 
0003c248 l       .debug_str	00000000 
0002d111 l       .debug_str	00000000 
0003c2a7 l       .debug_str	00000000 
0003c31a l       .debug_str	00000000 
0003c381 l       .debug_str	00000000 
0003c3a1 l       .debug_str	00000000 
0003c3e0 l       .debug_str	00000000 
0003c3ff l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
0003c472 l       .debug_str	00000000 
0003c4ef l       .debug_str	00000000 
0003c554 l       .debug_str	00000000 
0003c5b4 l       .debug_str	00000000 
0003c627 l       .debug_str	00000000 
0003c6a4 l       .debug_str	00000000 
00015eb3 l       .debug_str	00000000 
0003c71c l       .debug_str	00000000 
0003c791 l       .debug_str	00000000 
0003c80b l       .debug_str	00000000 
00012af3 l       .debug_str	00000000 
00012afe l       .debug_str	00000000 
0003c86b l       .debug_str	00000000 
0005f040 l       .debug_str	00000000 
0003c8a9 l       .debug_str	00000000 
0003c8eb l       .debug_str	00000000 
0003c916 l       .debug_str	00000000 
0003c957 l       .debug_str	00000000 
0003c961 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
0005fefa l       .debug_str	00000000 
0005a7e0 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
0003c9bd l       .debug_str	00000000 
00010bff l       .debug_str	00000000 
0003c9f9 l       .debug_str	00000000 
00010bb0 l       .debug_str	00000000 
0003ca40 l       .debug_str	00000000 
0003ca9e l       .debug_str	00000000 
000343cd l       .debug_str	00000000 
0003caf5 l       .debug_str	00000000 
0003cb4f l       .debug_str	00000000 
0003cb59 l       .debug_str	00000000 
0001312a l       .debug_str	00000000 
0001312f l       .debug_str	00000000 
0003cb9c l       .debug_str	00000000 
0003cbd2 l       .debug_str	00000000 
0003cbe2 l       .debug_str	00000000 
0003cbf1 l       .debug_str	00000000 
0003cbfc l       .debug_str	00000000 
000344b3 l       .debug_str	00000000 
0003cc36 l       .debug_str	00000000 
0003cc7f l       .debug_str	00000000 
00025d54 l       .debug_str	00000000 
0003ccc6 l       .debug_str	00000000 
0003cd01 l       .debug_str	00000000 
0003cd26 l       .debug_str	00000000 
0003cd92 l       .debug_str	00000000 
0003cda5 l       .debug_str	00000000 
0003ce1c l       .debug_str	00000000 
0003ce27 l       .debug_str	00000000 
0003ce64 l       .debug_str	00000000 
0003ce6f l       .debug_str	00000000 
0003cef0 l       .debug_str	00000000 
0003cf36 l       .debug_str	00000000 
0003cf5d l       .debug_str	00000000 
0003cf8c l       .debug_str	00000000 
0003cf9d l       .debug_str	00000000 
00013cb4 l       .debug_str	00000000 
0003cff9 l       .debug_str	00000000 
0003d02a l       .debug_str	00000000 
00011885 l       .debug_str	00000000 
0003d072 l       .debug_str	00000000 
0001ff0b l       .debug_str	00000000 
0003d0b0 l       .debug_str	00000000 
0003d0f4 l       .debug_str	00000000 
0003d147 l       .debug_str	00000000 
00039be2 l       .debug_str	00000000 
0003d1bf l       .debug_str	00000000 
0003d20e l       .debug_str	00000000 
0003d2a4 l       .debug_str	00000000 
0003d2e8 l       .debug_str	00000000 
00041026 l       .debug_str	00000000 
0003d360 l       .debug_str	00000000 
0003d3af l       .debug_str	00000000 
0003d445 l       .debug_str	00000000 
0003d45f l       .debug_str	00000000 
0003d4ae l       .debug_str	00000000 
0003d4e7 l       .debug_str	00000000 
0003d502 l       .debug_str	00000000 
000158d5 l       .debug_str	00000000 
0003d566 l       .debug_str	00000000 
000151e1 l       .debug_str	00000000 
0003d5df l       .debug_str	00000000 
00022a68 l       .debug_str	00000000 
0003d650 l       .debug_str	00000000 
0003d6e6 l       .debug_str	00000000 
0003d77e l       .debug_str	00000000 
0003d7f0 l       .debug_str	00000000 
0003d818 l       .debug_str	00000000 
0001ac5d l       .debug_str	00000000 
0003d8d0 l       .debug_str	00000000 
0002466d l       .debug_str	00000000 
0003d915 l       .debug_str	00000000 
0003d9cb l       .debug_str	00000000 
0003da10 l       .debug_str	00000000 
00002b2a l       .debug_str	00000000 
0003da52 l       .debug_str	00000000 
0003daad l       .debug_str	00000000 
0003dab2 l       .debug_str	00000000 
0003db0b l       .debug_str	00000000 
0003db3f l       .debug_str	00000000 
0003db53 l       .debug_str	00000000 
0003db8e l       .debug_str	00000000 
0003dbd0 l       .debug_str	00000000 
0003dbe6 l       .debug_str	00000000 
0003dc52 l       .debug_str	00000000 
00012af7 l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0003dc94 l       .debug_str	00000000 
0003dcd4 l       .debug_str	00000000 
0003dd2e l       .debug_str	00000000 
0003dd70 l       .debug_str	00000000 
0003ddcb l       .debug_str	00000000 
0003de0d l       .debug_str	00000000 
0003de18 l       .debug_str	00000000 
0003de58 l       .debug_str	00000000 
0003de5e l       .debug_str	00000000 
0003deb8 l       .debug_str	00000000 
0003dec1 l       .debug_str	00000000 
0003df03 l       .debug_str	00000000 
0003df5b l       .debug_str	00000000 
0003df9d l       .debug_str	00000000 
0003dff6 l       .debug_str	00000000 
0003e000 l       .debug_str	00000000 
0003e008 l       .debug_str	00000000 
0003e011 l       .debug_str	00000000 
0003e004 l       .debug_str	00000000 
0003e053 l       .debug_str	00000000 
0003e0a8 l       .debug_str	00000000 
0003e0e5 l       .debug_str	00000000 
0003e127 l       .debug_str	00000000 
0003e17e l       .debug_str	00000000 
0003e1c0 l       .debug_str	00000000 
0003e218 l       .debug_str	00000000 
0003e250 l       .debug_str	00000000 
0003e25c l       .debug_str	00000000 
0003e299 l       .debug_str	00000000 
0003e2fb l       .debug_str	00000000 
0003e33c l       .debug_str	00000000 
0003e345 l       .debug_str	00000000 
0003e3a3 l       .debug_str	00000000 
0003e3dc l       .debug_str	00000000 
0003e3eb l       .debug_str	00000000 
0003e42a l       .debug_str	00000000 
0003e43f l       .debug_str	00000000 
0003e485 l       .debug_str	00000000 
0003e492 l       .debug_str	00000000 
0003e498 l       .debug_str	00000000 
0003e4d1 l       .debug_str	00000000 
0003e55d l       .debug_str	00000000 
0003e599 l       .debug_str	00000000 
0005a3cf l       .debug_str	00000000 
0003e5ab l       .debug_str	00000000 
0003e5e3 l       .debug_str	00000000 
0003e5ef l       .debug_str	00000000 
0003e62c l       .debug_str	00000000 
0003e68e l       .debug_str	00000000 
0003e6cf l       .debug_str	00000000 
0003e72d l       .debug_str	00000000 
0003e767 l       .debug_str	00000000 
0003e7c1 l       .debug_str	00000000 
0003e80a l       .debug_str	00000000 
0003e81a l       .debug_str	00000000 
0003e853 l       .debug_str	00000000 
0003e8d5 l       .debug_str	00000000 
0003e90f l       .debug_str	00000000 
0003e969 l       .debug_str	00000000 
0003e9a4 l       .debug_str	00000000 
0003ea04 l       .debug_str	00000000 
0003ea3f l       .debug_str	00000000 
0003ea9f l       .debug_str	00000000 
0003eadd l       .debug_str	00000000 
0003eb3b l       .debug_str	00000000 
0003eb79 l       .debug_str	00000000 
0003ebd7 l       .debug_str	00000000 
0003ec22 l       .debug_str	00000000 
0003ec2b l       .debug_str	00000000 
0003ec7a l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0003ec86 l       .debug_str	00000000 
0003ecb7 l       .debug_str	00000000 
0003ece2 l       .debug_str	00000000 
0003ed30 l       .debug_str	00000000 
00013ce5 l       .debug_str	00000000 
0003ed37 l       .debug_str	00000000 
0003ed9c l       .debug_str	00000000 
0003edcd l       .debug_str	00000000 
0003edd5 l       .debug_str	00000000 
00014359 l       .debug_str	00000000 
0003ee06 l       .debug_str	00000000 
0003ee5f l       .debug_str	00000000 
0003eeed l       .debug_str	00000000 
0003ef39 l       .debug_str	00000000 
0003ef5e l       .debug_str	00000000 
0003ef7b l       .debug_str	00000000 
0003efa5 l       .debug_str	00000000 
0001abf0 l       .debug_str	00000000 
0001acab l       .debug_str	00000000 
0001ad27 l       .debug_str	00000000 
0003efc7 l       .debug_str	00000000 
0003f014 l       .debug_str	00000000 
0003f059 l       .debug_str	00000000 
0003f098 l       .debug_str	00000000 
0003f0e4 l       .debug_str	00000000 
0003f173 l       .debug_str	00000000 
0003f1c0 l       .debug_str	00000000 
0003f246 l       .debug_str	00000000 
0005c2d1 l       .debug_str	00000000 
0003f26b l       .debug_str	00000000 
0003f295 l       .debug_str	00000000 
0003f29e l       .debug_str	00000000 
0003f2d4 l       .debug_str	00000000 
0003f2dd l       .debug_str	00000000 
0003f36b l       .debug_str	00000000 
0003f3b1 l       .debug_str	00000000 
0003f3d0 l       .debug_str	00000000 
0003f3e7 l       .debug_str	00000000 
0003f40b l       .debug_str	00000000 
0003f427 l       .debug_str	00000000 
0003f46e l       .debug_str	00000000 
0003f4b3 l       .debug_str	00000000 
0003f4f2 l       .debug_str	00000000 
0003f538 l       .debug_str	00000000 
0003f5c7 l       .debug_str	00000000 
0003f60e l       .debug_str	00000000 
0003f694 l       .debug_str	00000000 
0003f6c9 l       .debug_str	00000000 
0003f6d3 l       .debug_str	00000000 
0005b2ea l       .debug_str	00000000 
0003f73e l       .debug_str	00000000 
0003f773 l       .debug_str	00000000 
0003f77d l       .debug_str	00000000 
0003f7b0 l       .debug_str	00000000 
0003f7b8 l       .debug_str	00000000 
0003f7ec l       .debug_str	00000000 
0003f7fe l       .debug_str	00000000 
0003f838 l       .debug_str	00000000 
0003f856 l       .debug_str	00000000 
0003f87c l       .debug_str	00000000 
0003f887 l       .debug_str	00000000 
0003f8b0 l       .debug_str	00000000 
0003f8be l       .debug_str	00000000 
0003f8f8 l       .debug_str	00000000 
0003f92e l       .debug_str	00000000 
0003f954 l       .debug_str	00000000 
0003f977 l       .debug_str	00000000 
0003f9a0 l       .debug_str	00000000 
0003f9c6 l       .debug_str	00000000 
0003fa04 l       .debug_str	00000000 
0003fa1e l       .debug_str	00000000 
0003fa5c l       .debug_str	00000000 
0003fa8e l       .debug_str	00000000 
0003fa9a l       .debug_str	00000000 
00061a66 l       .debug_str	00000000 
0003face l       .debug_str	00000000 
0003fadb l       .debug_str	00000000 
00023b14 l       .debug_str	00000000 
0003fb0d l       .debug_str	00000000 
0003fb77 l       .debug_str	00000000 
0003fbe7 l       .debug_str	00000000 
0003fc4e l       .debug_str	00000000 
0003fc6b l       .debug_str	00000000 
0003fcaa l       .debug_str	00000000 
0003fcc6 l       .debug_str	00000000 
00023ad6 l       .debug_str	00000000 
0003fcf4 l       .debug_str	00000000 
00023bb2 l       .debug_str	00000000 
0003fd29 l       .debug_str	00000000 
0003fd65 l       .debug_str	00000000 
0003fd8b l       .debug_str	00000000 
0003fdca l       .debug_str	00000000 
0003fdda l       .debug_str	00000000 
0003fe3e l       .debug_str	00000000 
0003fe75 l       .debug_str	00000000 
0003fe8b l       .debug_str	00000000 
0003feda l       .debug_str	00000000 
0003fee6 l       .debug_str	00000000 
0003ffb8 l       .debug_str	00000000 
0003ff2d l       .debug_str	00000000 
0003ffb3 l       .debug_str	00000000 
0003ffd7 l       .debug_str	00000000 
00040012 l       .debug_str	00000000 
00040022 l       .debug_str	00000000 
0006198e l       .debug_str	00000000 
00040063 l       .debug_str	00000000 
0004009d l       .debug_str	00000000 
000400ac l       .debug_str	00000000 
000400e5 l       .debug_str	00000000 
000400f3 l       .debug_str	00000000 
0004012c l       .debug_str	00000000 
0004013a l       .debug_str	00000000 
0004018a l       .debug_str	00000000 
00040197 l       .debug_str	00000000 
0004020d l       .debug_str	00000000 
00040218 l       .debug_str	00000000 
0004022a l       .debug_str	00000000 
00040276 l       .debug_str	00000000 
00040293 l       .debug_str	00000000 
00040327 l       .debug_str	00000000 
000403bd l       .debug_str	00000000 
0004042f l       .debug_str	00000000 
00040455 l       .debug_str	00000000 
000404f4 l       .debug_str	00000000 
00040565 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
000405aa l       .debug_str	00000000 
0004060d l       .debug_str	00000000 
00040630 l       .debug_str	00000000 
00040684 l       .debug_str	00000000 
0004069b l       .debug_str	00000000 
0002566d l       .debug_str	00000000 
000406e8 l       .debug_str	00000000 
000406f5 l       .debug_str	00000000 
00040730 l       .debug_str	00000000 
00040758 l       .debug_str	00000000 
000407ba l       .debug_str	00000000 
0003c242 l       .debug_str	00000000 
00040823 l       .debug_str	00000000 
00043051 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0003039e l       .debug_str	00000000 
000303af l       .debug_str	00000000 
00040870 l       .debug_str	00000000 
0000b32d l       .debug_str	00000000 
000408bb l       .debug_str	00000000 
0004093e l       .debug_str	00000000 
0004096e l       .debug_str	00000000 
000409f6 l       .debug_str	00000000 
00040a6b l       .debug_str	00000000 
00040abe l       .debug_str	00000000 
00040b4a l       .debug_str	00000000 
00040b82 l       .debug_str	00000000 
00040bd7 l       .debug_str	00000000 
00040c08 l       .debug_str	00000000 
00040c5a l       .debug_str	00000000 
00040c88 l       .debug_str	00000000 
00040cdc l       .debug_str	00000000 
00040d02 l       .debug_str	00000000 
0001fe57 l       .debug_str	00000000 
00040d39 l       .debug_str	00000000 
00040d84 l       .debug_str	00000000 
00040da0 l       .debug_str	00000000 
00040df6 l       .debug_str	00000000 
0001ff9e l       .debug_str	00000000 
00040e6f l       .debug_str	00000000 
00040ebf l       .debug_str	00000000 
00040f56 l       .debug_str	00000000 
00040fac l       .debug_str	00000000 
00041025 l       .debug_str	00000000 
0004103d l       .debug_str	00000000 
000410d4 l       .debug_str	00000000 
0004110d l       .debug_str	00000000 
0004133d l       .debug_str	00000000 
00041156 l       .debug_str	00000000 
0004001e l       .debug_str	00000000 
00041193 l       .debug_str	00000000 
000411d7 l       .debug_str	00000000 
00041222 l       .debug_str	00000000 
00041262 l       .debug_str	00000000 
0004128c l       .debug_str	00000000 
000412d5 l       .debug_str	00000000 
000412e4 l       .debug_str	00000000 
00041335 l       .debug_str	00000000 
0004134c l       .debug_str	00000000 
0004b5ec l       .debug_str	00000000 
0005cb8b l       .debug_str	00000000 
000413b3 l       .debug_str	00000000 
00041414 l       .debug_str	00000000 
00041433 l       .debug_str	00000000 
0004143c l       .debug_str	00000000 
00041448 l       .debug_str	00000000 
00016ff6 l       .debug_str	00000000 
0004144e l       .debug_str	00000000 
00041458 l       .debug_str	00000000 
0004148a l       .debug_str	00000000 
0004149a l       .debug_str	00000000 
00041522 l       .debug_str	00000000 
0004152b l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
00041598 l       .debug_str	00000000 
000415d7 l       .debug_str	00000000 
00016425 l       .debug_str	00000000 
00016431 l       .debug_str	00000000 
0001643b l       .debug_str	00000000 
000415e6 l       .debug_str	00000000 
00041656 l       .debug_str	00000000 
0004167b l       .debug_str	00000000 
000416ea l       .debug_str	00000000 
00041710 l       .debug_str	00000000 
0004177f l       .debug_str	00000000 
000417a9 l       .debug_str	00000000 
000417e0 l       .debug_str	00000000 
000417eb l       .debug_str	00000000 
00041827 l       .debug_str	00000000 
00041846 l       .debug_str	00000000 
00041880 l       .debug_str	00000000 
000418bb l       .debug_str	00000000 
000418f7 l       .debug_str	00000000 
0000e7ec l       .debug_str	00000000 
00041911 l       .debug_str	00000000 
0004194d l       .debug_str	00000000 
0004195a l       .debug_str	00000000 
0005a646 l       .debug_str	00000000 
00041998 l       .debug_str	00000000 
000419de l       .debug_str	00000000 
00041a66 l       .debug_str	00000000 
00041a7f l       .debug_str	00000000 
00041ad9 l       .debug_str	00000000 
00041b1f l       .debug_str	00000000 
00041b37 l       .debug_str	00000000 
00041bb7 l       .debug_str	00000000 
0004208b l       .debug_str	00000000 
00041bc7 l       .debug_str	00000000 
00041c06 l       .debug_str	00000000 
00041c46 l       .debug_str	00000000 
00041cd0 l       .debug_str	00000000 
00041ce7 l       .debug_str	00000000 
00041d38 l       .debug_str	00000000 
00041d46 l       .debug_str	00000000 
00041d4b l       .debug_str	00000000 
00041da6 l       .debug_str	00000000 
00042760 l       .debug_str	00000000 
00041dfd l       .debug_str	00000000 
00041e30 l       .debug_str	00000000 
00041e77 l       .debug_str	00000000 
00041eb1 l       .debug_str	00000000 
00041ee0 l       .debug_str	00000000 
00041f5e l       .debug_str	00000000 
00041fe2 l       .debug_str	00000000 
0004206f l       .debug_str	00000000 
00042084 l       .debug_str	00000000 
00042094 l       .debug_str	00000000 
000420e0 l       .debug_str	00000000 
00042125 l       .debug_str	00000000 
000421bc l       .debug_str	00000000 
000421d8 l       .debug_str	00000000 
0004221f l       .debug_str	00000000 
0004224d l       .debug_str	00000000 
00042286 l       .debug_str	00000000 
000422a8 l       .debug_str	00000000 
00019f31 l       .debug_str	00000000 
00042326 l       .debug_str	00000000 
000423a6 l       .debug_str	00000000 
000423e5 l       .debug_str	00000000 
0004246f l       .debug_str	00000000 
000424bb l       .debug_str	00000000 
000424d9 l       .debug_str	00000000 
000424e4 l       .debug_str	00000000 
00042546 l       .debug_str	00000000 
0004259d l       .debug_str	00000000 
0004262a l       .debug_str	00000000 
00042676 l       .debug_str	00000000 
0004270d l       .debug_str	00000000 
00042757 l       .debug_str	00000000 
00042773 l       .debug_str	00000000 
000427cd l       .debug_str	00000000 
000427d6 l       .debug_str	00000000 
00042835 l       .debug_str	00000000 
0004288c l       .debug_str	00000000 
000428e5 l       .debug_str	00000000 
000428fa l       .debug_str	00000000 
00042947 l       .debug_str	00000000 
00042992 l       .debug_str	00000000 
000429a5 l       .debug_str	00000000 
0001ea17 l       .debug_str	00000000 
00013252 l       .debug_str	00000000 
000429f0 l       .debug_str	00000000 
00042a05 l       .debug_str	00000000 
00042a11 l       .debug_str	00000000 
00042a56 l       .debug_str	00000000 
00042aaf l       .debug_str	00000000 
00042ac4 l       .debug_str	00000000 
00042b11 l       .debug_str	00000000 
00042b5c l       .debug_str	00000000 
00042b6f l       .debug_str	00000000 
00042bba l       .debug_str	00000000 
00042bcd l       .debug_str	00000000 
00042c31 l       .debug_str	00000000 
00042c6a l       .debug_str	00000000 
00042c96 l       .debug_str	00000000 
000606bb l       .debug_str	00000000 
0005ba80 l       .debug_str	00000000 
00042d15 l       .debug_str	00000000 
00042d1b l       .debug_str	00000000 
00042d24 l       .debug_str	00000000 
00042d5c l       .debug_str	00000000 
00042d79 l       .debug_str	00000000 
00042db5 l       .debug_str	00000000 
00042dd2 l       .debug_str	00000000 
00042e2e l       .debug_str	00000000 
00042e66 l       .debug_str	00000000 
00042ec2 l       .debug_str	00000000 
00025cf4 l       .debug_str	00000000 
00042efa l       .debug_str	00000000 
00042f38 l       .debug_str	00000000 
00042f54 l       .debug_str	00000000 
00042faa l       .debug_str	00000000 
00043011 l       .debug_str	00000000 
00043049 l       .debug_str	00000000 
00043055 l       .debug_str	00000000 
000430bc l       .debug_str	00000000 
000430fb l       .debug_str	00000000 
0004310c l       .debug_str	00000000 
00043145 l       .debug_str	00000000 
000510ed l       .debug_str	00000000 
00043160 l       .debug_str	00000000 
0004319c l       .debug_str	00000000 
00043195 l       .debug_str	00000000 
000431a5 l       .debug_str	00000000 
000431b7 l       .debug_str	00000000 
00043202 l       .debug_str	00000000 
0004321a l       .debug_str	00000000 
00043224 l       .debug_str	00000000 
0004323b l       .debug_str	00000000 
0004324a l       .debug_str	00000000 
0004328c l       .debug_str	00000000 
000432a5 l       .debug_str	00000000 
00043319 l       .debug_str	00000000 
00043328 l       .debug_str	00000000 
00043361 l       .debug_str	00000000 
00043377 l       .debug_str	00000000 
000433b7 l       .debug_str	00000000 
000433c2 l       .debug_str	00000000 
00043441 l       .debug_str	00000000 
0005b1f9 l       .debug_str	00000000 
00043460 l       .debug_str	00000000 
00043475 l       .debug_str	00000000 
0004347f l       .debug_str	00000000 
0001a55e l       .debug_str	00000000 
00043484 l       .debug_str	00000000 
000434b5 l       .debug_str	00000000 
000434c8 l       .debug_str	00000000 
000434d2 l       .debug_str	00000000 
000434ef l       .debug_str	00000000 
0004352a l       .debug_str	00000000 
0004355f l       .debug_str	00000000 
00043590 l       .debug_str	00000000 
000435a4 l       .debug_str	00000000 
000435af l       .debug_str	00000000 
000435cd l       .debug_str	00000000 
00043608 l       .debug_str	00000000 
0004363e l       .debug_str	00000000 
0004366f l       .debug_str	00000000 
00043683 l       .debug_str	00000000 
0004368e l       .debug_str	00000000 
000436ac l       .debug_str	00000000 
000436e7 l       .debug_str	00000000 
0004371d l       .debug_str	00000000 
0004374e l       .debug_str	00000000 
00043762 l       .debug_str	00000000 
0004376d l       .debug_str	00000000 
0004378b l       .debug_str	00000000 
000437c6 l       .debug_str	00000000 
000437fc l       .debug_str	00000000 
0004382d l       .debug_str	00000000 
0004807a l       .debug_str	00000000 
00043842 l       .debug_str	00000000 
0004384e l       .debug_str	00000000 
0004386d l       .debug_str	00000000 
000438a8 l       .debug_str	00000000 
000438df l       .debug_str	00000000 
00043910 l       .debug_str	00000000 
00043923 l       .debug_str	00000000 
0004392d l       .debug_str	00000000 
0004394a l       .debug_str	00000000 
00043985 l       .debug_str	00000000 
000439ba l       .debug_str	00000000 
000439eb l       .debug_str	00000000 
000439ff l       .debug_str	00000000 
00043a0a l       .debug_str	00000000 
00043a28 l       .debug_str	00000000 
00043a63 l       .debug_str	00000000 
00043a99 l       .debug_str	00000000 
00043aca l       .debug_str	00000000 
00043ade l       .debug_str	00000000 
00043b4d l       .debug_str	00000000 
00043b88 l       .debug_str	00000000 
00043bd1 l       .debug_str	00000000 
00043c16 l       .debug_str	00000000 
00043c72 l       .debug_str	00000000 
00043cbb l       .debug_str	00000000 
00043d00 l       .debug_str	00000000 
00043d5c l       .debug_str	00000000 
00043da5 l       .debug_str	00000000 
00043dea l       .debug_str	00000000 
00043e46 l       .debug_str	00000000 
00043e51 l       .debug_str	00000000 
00043e6f l       .debug_str	00000000 
00043eaa l       .debug_str	00000000 
00043ee0 l       .debug_str	00000000 
00043f11 l       .debug_str	00000000 
00043f25 l       .debug_str	00000000 
00043f30 l       .debug_str	00000000 
00043f4e l       .debug_str	00000000 
00043f89 l       .debug_str	00000000 
00043fbf l       .debug_str	00000000 
0004402e l       .debug_str	00000000 
00044069 l       .debug_str	00000000 
0004409a l       .debug_str	00000000 
000440af l       .debug_str	00000000 
000440b4 l       .debug_str	00000000 
000440c0 l       .debug_str	00000000 
000440df l       .debug_str	00000000 
0004411a l       .debug_str	00000000 
00044151 l       .debug_str	00000000 
000441c0 l       .debug_str	00000000 
000441fc l       .debug_str	00000000 
0000aaf4 l       .debug_str	00000000 
00044245 l       .debug_str	00000000 
00044250 l       .debug_str	00000000 
00044297 l       .debug_str	00000000 
000442a1 l       .debug_str	00000000 
00044323 l       .debug_str	00000000 
00044340 l       .debug_str	00000000 
000173e3 l       .debug_str	00000000 
0004439b l       .debug_str	00000000 
000443f5 l       .debug_str	00000000 
00044402 l       .debug_str	00000000 
00044474 l       .debug_str	00000000 
000444d8 l       .debug_str	00000000 
000444e3 l       .debug_str	00000000 
0004455c l       .debug_str	00000000 
00044568 l       .debug_str	00000000 
000445e4 l       .debug_str	00000000 
000445ea l       .debug_str	00000000 
000445f1 l       .debug_str	00000000 
0004462d l       .debug_str	00000000 
000148db l       .debug_str	00000000 
00044676 l       .debug_str	00000000 
000446ba l       .debug_str	00000000 
00044705 l       .debug_str	00000000 
00044744 l       .debug_str	00000000 
00044769 l       .debug_str	00000000 
000447bf l       .debug_str	00000000 
0004482d l       .debug_str	00000000 
000448ad l       .debug_str	00000000 
0004491a l       .debug_str	00000000 
000449a5 l       .debug_str	00000000 
00044a19 l       .debug_str	00000000 
00044a59 l       .debug_str	00000000 
00044ada l       .debug_str	00000000 
00044b1b l       .debug_str	00000000 
00044b7f l       .debug_str	00000000 
00044c2e l       .debug_str	00000000 
00044c78 l       .debug_str	00000000 
00044cc5 l       .debug_str	00000000 
00044d0b l       .debug_str	00000000 
00044d15 l       .debug_str	00000000 
00044d4e l       .debug_str	00000000 
00044d7d l       .debug_str	00000000 
00044dde l       .debug_str	00000000 
00044e0d l       .debug_str	00000000 
00044e4a l       .debug_str	00000000 
00044ed9 l       .debug_str	00000000 
00044f0e l       .debug_str	00000000 
00044f94 l       .debug_str	00000000 
0004501a l       .debug_str	00000000 
0004506e l       .debug_str	00000000 
000450f7 l       .debug_str	00000000 
00019e02 l       .debug_str	00000000 
00045145 l       .debug_str	00000000 
000451d3 l       .debug_str	00000000 
00045227 l       .debug_str	00000000 
00045266 l       .debug_str	00000000 
000452b1 l       .debug_str	00000000 
00045333 l       .debug_str	00000000 
0004534f l       .debug_str	00000000 
000453a8 l       .debug_str	00000000 
00045401 l       .debug_str	00000000 
0004543e l       .debug_str	00000000 
0004547f l       .debug_str	00000000 
000454e0 l       .debug_str	00000000 
00045551 l       .debug_str	00000000 
00045581 l       .debug_str	00000000 
000455c7 l       .debug_str	00000000 
00045639 l       .debug_str	00000000 
000456cd l       .debug_str	00000000 
000456f1 l       .debug_str	00000000 
0004576d l       .debug_str	00000000 
000457a7 l       .debug_str	00000000 
000457e9 l       .debug_str	00000000 
00045899 l       .debug_str	00000000 
000458d8 l       .debug_str	00000000 
0004597b l       .debug_str	00000000 
000459d7 l       .debug_str	00000000 
00045a34 l       .debug_str	00000000 
00045adf l       .debug_str	00000000 
00045b18 l       .debug_str	00000000 
00045b94 l       .debug_str	00000000 
00045bcc l       .debug_str	00000000 
00045bd8 l       .debug_str	00000000 
00045c15 l       .debug_str	00000000 
00045c6d l       .debug_str	00000000 
00045c8d l       .debug_str	00000000 
00045ce6 l       .debug_str	00000000 
00045d3f l       .debug_str	00000000 
00045d98 l       .debug_str	00000000 
00045df2 l       .debug_str	00000000 
00045e28 l       .debug_str	00000000 
00045e38 l       .debug_str	00000000 
00045e47 l       .debug_str	00000000 
00045e50 l       .debug_str	00000000 
00045e87 l       .debug_str	00000000 
00045ec3 l       .debug_str	00000000 
00045ed3 l       .debug_str	00000000 
00045f2f l       .debug_str	00000000 
00045f91 l       .debug_str	00000000 
000391a0 l       .debug_str	00000000 
00045fdb l       .debug_str	00000000 
00046016 l       .debug_str	00000000 
0004603b l       .debug_str	00000000 
0004609a l       .debug_str	00000000 
000460e4 l       .debug_str	00000000 
0004611f l       .debug_str	00000000 
00046144 l       .debug_str	00000000 
000461a3 l       .debug_str	00000000 
0004620c l       .debug_str	00000000 
00046215 l       .debug_str	00000000 
0004624c l       .debug_str	00000000 
000462a8 l       .debug_str	00000000 
0004630a l       .debug_str	00000000 
00046369 l       .debug_str	00000000 
000463c8 l       .debug_str	00000000 
000463fe l       .debug_str	00000000 
0004640f l       .debug_str	00000000 
0004641f l       .debug_str	00000000 
00046429 l       .debug_str	00000000 
00046461 l       .debug_str	00000000 
000464be l       .debug_str	00000000 
00046521 l       .debug_str	00000000 
0004656c l       .debug_str	00000000 
000465a7 l       .debug_str	00000000 
000465cd l       .debug_str	00000000 
0004662d l       .debug_str	00000000 
00046678 l       .debug_str	00000000 
000466b3 l       .debug_str	00000000 
000466d9 l       .debug_str	00000000 
00046739 l       .debug_str	00000000 
0004676f l       .debug_str	00000000 
00046780 l       .debug_str	00000000 
00046790 l       .debug_str	00000000 
0004679a l       .debug_str	00000000 
000467d2 l       .debug_str	00000000 
0004682f l       .debug_str	00000000 
00046892 l       .debug_str	00000000 
000468f2 l       .debug_str	00000000 
00046952 l       .debug_str	00000000 
00046988 l       .debug_str	00000000 
00046999 l       .debug_str	00000000 
000469a9 l       .debug_str	00000000 
000469b3 l       .debug_str	00000000 
000469eb l       .debug_str	00000000 
00046a48 l       .debug_str	00000000 
00046aab l       .debug_str	00000000 
00046af6 l       .debug_str	00000000 
00046b31 l       .debug_str	00000000 
00046b57 l       .debug_str	00000000 
00046bb7 l       .debug_str	00000000 
00046c02 l       .debug_str	00000000 
00046c3d l       .debug_str	00000000 
00046c63 l       .debug_str	00000000 
00046cc3 l       .debug_str	00000000 
00046cf9 l       .debug_str	00000000 
00046d0a l       .debug_str	00000000 
00046d1a l       .debug_str	00000000 
00046d24 l       .debug_str	00000000 
00046d5c l       .debug_str	00000000 
00046db9 l       .debug_str	00000000 
00046e1c l       .debug_str	00000000 
00046e7c l       .debug_str	00000000 
00046edc l       .debug_str	00000000 
00046f12 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00046f25 l       .debug_str	00000000 
00046f37 l       .debug_str	00000000 
00046f43 l       .debug_str	00000000 
00046f7e l       .debug_str	00000000 
00046fdd l       .debug_str	00000000 
00047042 l       .debug_str	00000000 
000470a4 l       .debug_str	00000000 
000470df l       .debug_str	00000000 
00047107 l       .debug_str	00000000 
00047169 l       .debug_str	00000000 
0001d1d0 l       .debug_str	00000000 
0001fbec l       .debug_str	00000000 
000131b1 l       .debug_str	00000000 
0004719f l       .debug_str	00000000 
000471da l       .debug_str	00000000 
0004721a l       .debug_str	00000000 
00047237 l       .debug_str	00000000 
0004727b l       .debug_str	00000000 
0004729c l       .debug_str	00000000 
000472dc l       .debug_str	00000000 
000472f9 l       .debug_str	00000000 
0004733d l       .debug_str	00000000 
0004735e l       .debug_str	00000000 
000473c0 l       .debug_str	00000000 
00047427 l       .debug_str	00000000 
00047462 l       .debug_str	00000000 
00047485 l       .debug_str	00000000 
000474eb l       .debug_str	00000000 
00047526 l       .debug_str	00000000 
00047548 l       .debug_str	00000000 
00047583 l       .debug_str	00000000 
000475a7 l       .debug_str	00000000 
000475e2 l       .debug_str	00000000 
00047605 l       .debug_str	00000000 
00047640 l       .debug_str	00000000 
00047664 l       .debug_str	00000000 
0004769f l       .debug_str	00000000 
000476c2 l       .debug_str	00000000 
000476fd l       .debug_str	00000000 
00047721 l       .debug_str	00000000 
0004776c l       .debug_str	00000000 
000477ce l       .debug_str	00000000 
00047809 l       .debug_str	00000000 
0004782c l       .debug_str	00000000 
00047877 l       .debug_str	00000000 
000478b2 l       .debug_str	00000000 
000478d8 l       .debug_str	00000000 
00047913 l       .debug_str	00000000 
00047939 l       .debug_str	00000000 
0004798a l       .debug_str	00000000 
000479d8 l       .debug_str	00000000 
00047a23 l       .debug_str	00000000 
00047a56 l       .debug_str	00000000 
00047a91 l       .debug_str	00000000 
00047ab6 l       .debug_str	00000000 
00047b42 l       .debug_str	00000000 
00047b76 l       .debug_str	00000000 
00047bf2 l       .debug_str	00000000 
00047c37 l       .debug_str	00000000 
00047c83 l       .debug_str	00000000 
00047ce6 l       .debug_str	00000000 
00047d21 l       .debug_str	00000000 
00047d45 l       .debug_str	00000000 
00047d80 l       .debug_str	00000000 
00047da7 l       .debug_str	00000000 
00047df3 l       .debug_str	00000000 
00047e2e l       .debug_str	00000000 
00047e55 l       .debug_str	00000000 
00047ea0 l       .debug_str	00000000 
00047eec l       .debug_str	00000000 
00047f38 l       .debug_str	00000000 
00047f69 l       .debug_str	00000000 
00047f71 l       .debug_str	00000000 
00010886 l       .debug_str	00000000 
00047fbd l       .debug_str	00000000 
00047ff2 l       .debug_str	00000000 
00048020 l       .debug_str	00000000 
00048029 l       .debug_str	00000000 
00048077 l       .debug_str	00000000 
0004807f l       .debug_str	00000000 
000480e4 l       .debug_str	00000000 
00048137 l       .debug_str	00000000 
00048197 l       .debug_str	00000000 
000481b6 l       .debug_str	00000000 
00048219 l       .debug_str	00000000 
0004823b l       .debug_str	00000000 
00048286 l       .debug_str	00000000 
000482eb l       .debug_str	00000000 
0004830d l       .debug_str	00000000 
00048376 l       .debug_str	00000000 
000483b3 l       .debug_str	00000000 
0004841c l       .debug_str	00000000 
000484ac l       .debug_str	00000000 
0000b9b4 l       .debug_str	00000000 
0004850c l       .debug_str	00000000 
0004856f l       .debug_str	00000000 
000485d8 l       .debug_str	00000000 
0004860b l       .debug_str	00000000 
00048653 l       .debug_str	00000000 
000486cd l       .debug_str	00000000 
0004871e l       .debug_str	00000000 
00048775 l       .debug_str	00000000 
0001b37f l       .debug_str	00000000 
000487bd l       .debug_str	00000000 
0004881b l       .debug_str	00000000 
00048838 l       .debug_str	00000000 
000488a4 l       .debug_str	00000000 
000488e9 l       .debug_str	00000000 
00048937 l       .debug_str	00000000 
0004897f l       .debug_str	00000000 
00048989 l       .debug_str	00000000 
000489f7 l       .debug_str	00000000 
00048a33 l       .debug_str	00000000 
00048a56 l       .debug_str	00000000 
00048ac6 l       .debug_str	00000000 
00048b0e l       .debug_str	00000000 
00048b17 l       .debug_str	00000000 
00048b74 l       .debug_str	00000000 
00048bd7 l       .debug_str	00000000 
00048c37 l       .debug_str	00000000 
00048c97 l       .debug_str	00000000 
00048cf3 l       .debug_str	00000000 
00048d52 l       .debug_str	00000000 
00048db2 l       .debug_str	00000000 
00048dcd l       .debug_str	00000000 
0001b2dd l       .debug_str	00000000 
00048e21 l       .debug_str	00000000 
00048e9f l       .debug_str	00000000 
00048ec9 l       .debug_str	00000000 
00048f2b l       .debug_str	00000000 
00048f8c l       .debug_str	00000000 
00048fe6 l       .debug_str	00000000 
0004904b l       .debug_str	00000000 
0004909d l       .debug_str	00000000 
000490e5 l       .debug_str	00000000 
00049100 l       .debug_str	00000000 
0004917a l       .debug_str	00000000 
000491c7 l       .debug_str	00000000 
00049241 l       .debug_str	00000000 
0004928e l       .debug_str	00000000 
000492e2 l       .debug_str	00000000 
00049334 l       .debug_str	00000000 
0004939c l       .debug_str	00000000 
000493fc l       .debug_str	00000000 
00049456 l       .debug_str	00000000 
000494b5 l       .debug_str	00000000 
0004950f l       .debug_str	00000000 
0004956c l       .debug_str	00000000 
00023470 l       .debug_str	00000000 
000495aa l       .debug_str	00000000 
00024453 l       .debug_str	00000000 
000495e5 l       .debug_str	00000000 
00049657 l       .debug_str	00000000 
0004972a l       .debug_str	00000000 
0001b49d l       .debug_str	00000000 
00049772 l       .debug_str	00000000 
000497c0 l       .debug_str	00000000 
000497ca l       .debug_str	00000000 
00049812 l       .debug_str	00000000 
0004981e l       .debug_str	00000000 
00049892 l       .debug_str	00000000 
0004989d l       .debug_str	00000000 
000498d9 l       .debug_str	00000000 
00049900 l       .debug_str	00000000 
00049951 l       .debug_str	00000000 
0004995e l       .debug_str	00000000 
0004996c l       .debug_str	00000000 
0004997f l       .debug_str	00000000 
0004998a l       .debug_str	00000000 
000499cc l       .debug_str	00000000 
000499e1 l       .debug_str	00000000 
00049a4b l       .debug_str	00000000 
00049aa8 l       .debug_str	00000000 
00049b08 l       .debug_str	00000000 
00049b68 l       .debug_str	00000000 
00049bda l       .debug_str	00000000 
00049c27 l       .debug_str	00000000 
00049c86 l       .debug_str	00000000 
00049ce0 l       .debug_str	00000000 
00049d53 l       .debug_str	00000000 
00049d60 l       .debug_str	00000000 
00049dc0 l       .debug_str	00000000 
00049ddf l       .debug_str	00000000 
00049e47 l       .debug_str	00000000 
00049e62 l       .debug_str	00000000 
00049eba l       .debug_str	00000000 
00049f04 l       .debug_str	00000000 
00049f68 l       .debug_str	00000000 
00049f87 l       .debug_str	00000000 
00049fe9 l       .debug_str	00000000 
0004a04f l       .debug_str	00000000 
0004a0cf l       .debug_str	00000000 
0004a11e l       .debug_str	00000000 
0004a194 l       .debug_str	00000000 
0004a20a l       .debug_str	00000000 
0004a2df l       .debug_str	00000000 
0004a33c l       .debug_str	00000000 
0004a39a l       .debug_str	00000000 
0004a41a l       .debug_str	00000000 
0004a489 l       .debug_str	00000000 
0004a507 l       .debug_str	00000000 
0004a55a l       .debug_str	00000000 
0004a5bf l       .debug_str	00000000 
0004a61f l       .debug_str	00000000 
0004a68d l       .debug_str	00000000 
0004a725 l       .debug_str	00000000 
0004a7b4 l       .debug_str	00000000 
0004a842 l       .debug_str	00000000 
0004a8d0 l       .debug_str	00000000 
0004a9e0 l       .debug_str	00000000 
0004aa54 l       .debug_str	00000000 
0004aa96 l       .debug_str	00000000 
0004aadf l       .debug_str	00000000 
0004ab39 l       .debug_str	00000000 
0004abb2 l       .debug_str	00000000 
0004abbf l       .debug_str	00000000 
0004abc4 l       .debug_str	00000000 
0004ac30 l       .debug_str	00000000 
0004ac77 l       .debug_str	00000000 
0004ad01 l       .debug_str	00000000 
0004ad20 l       .debug_str	00000000 
0004adaa l       .debug_str	00000000 
0004adce l       .debug_str	00000000 
0004ae12 l       .debug_str	00000000 
0004ae76 l       .debug_str	00000000 
0004aeba l       .debug_str	00000000 
0004af2c l       .debug_str	00000000 
0004afea l       .debug_str	00000000 
0004b04c l       .debug_str	00000000 
0004b0e4 l       .debug_str	00000000 
0004b193 l       .debug_str	00000000 
0004b229 l       .debug_str	00000000 
0004b2bc l       .debug_str	00000000 
0004b300 l       .debug_str	00000000 
0004b353 l       .debug_str	00000000 
0004b3d7 l       .debug_str	00000000 
0004b465 l       .debug_str	00000000 
0004b4b9 l       .debug_str	00000000 
0004b4ca l       .debug_str	00000000 
0004b54f l       .debug_str	00000000 
0004b5db l       .debug_str	00000000 
0004b5e4 l       .debug_str	00000000 
0004b5f1 l       .debug_str	00000000 
0004b648 l       .debug_str	00000000 
0004b6cd l       .debug_str	00000000 
0004b71f l       .debug_str	00000000 
0004b72e l       .debug_str	00000000 
0004b775 l       .debug_str	00000000 
0004b7d9 l       .debug_str	00000000 
0004b7fa l       .debug_str	00000000 
0004b87a l       .debug_str	00000000 
0004b8e5 l       .debug_str	00000000 
0004b963 l       .debug_str	00000000 
0004b9b2 l       .debug_str	00000000 
0004ba11 l       .debug_str	00000000 
0004baa9 l       .debug_str	00000000 
0004bb4f l       .debug_str	00000000 
0004bbe5 l       .debug_str	00000000 
0004bc6f l       .debug_str	00000000 
0004bce5 l       .debug_str	00000000 
0004bd2e l       .debug_str	00000000 
0004bd8a l       .debug_str	00000000 
0004be05 l       .debug_str	00000000 
0004be71 l       .debug_str	00000000 
0004befb l       .debug_str	00000000 
0004bf3f l       .debug_str	00000000 
0004bfa0 l       .debug_str	00000000 
0004bfe4 l       .debug_str	00000000 
0004c068 l       .debug_str	00000000 
0004c0f2 l       .debug_str	00000000 
0004c144 l       .debug_str	00000000 
0004c1c2 l       .debug_str	00000000 
0004c247 l       .debug_str	00000000 
0004c29e l       .debug_str	00000000 
0004c31f l       .debug_str	00000000 
0004c3dd l       .debug_str	00000000 
0004c43c l       .debug_str	00000000 
0004c49f l       .debug_str	00000000 
0004c4c4 l       .debug_str	00000000 
0004c528 l       .debug_str	00000000 
0004c549 l       .debug_str	00000000 
0004c5c9 l       .debug_str	00000000 
0004c634 l       .debug_str	00000000 
0004c6b2 l       .debug_str	00000000 
0004c701 l       .debug_str	00000000 
0004c760 l       .debug_str	00000000 
0004c7f8 l       .debug_str	00000000 
0004c89e l       .debug_str	00000000 
0004c934 l       .debug_str	00000000 
0004c9be l       .debug_str	00000000 
0004ca34 l       .debug_str	00000000 
0004ca7d l       .debug_str	00000000 
0004cad9 l       .debug_str	00000000 
0004cb54 l       .debug_str	00000000 
0004cbc0 l       .debug_str	00000000 
0004cc4a l       .debug_str	00000000 
0004cc8e l       .debug_str	00000000 
0004ccef l       .debug_str	00000000 
0004cd33 l       .debug_str	00000000 
0004cdb7 l       .debug_str	00000000 
0004ce41 l       .debug_str	00000000 
0004cebf l       .debug_str	00000000 
0004cf44 l       .debug_str	00000000 
0004cf9b l       .debug_str	00000000 
0004d01c l       .debug_str	00000000 
0004d0da l       .debug_str	00000000 
0004d139 l       .debug_str	00000000 
0004d16c l       .debug_str	00000000 
0004d19f l       .debug_str	00000000 
0004d1d2 l       .debug_str	00000000 
0004d205 l       .debug_str	00000000 
0004d238 l       .debug_str	00000000 
0004d26b l       .debug_str	00000000 
0004d29e l       .debug_str	00000000 
0004d2f2 l       .debug_str	00000000 
0004d320 l       .debug_str	00000000 
0004d374 l       .debug_str	00000000 
0005fd51 l       .debug_str	00000000 
00012f9d l       .debug_str	00000000 
0004d387 l       .debug_str	00000000 
0004d38b l       .debug_str	00000000 
0004d38f l       .debug_str	00000000 
0004d393 l       .debug_str	00000000 
0004d39a l       .debug_str	00000000 
0004d39f l       .debug_str	00000000 
0004d3cf l       .debug_str	00000000 
0004d421 l       .debug_str	00000000 
0004d462 l       .debug_str	00000000 
0004d46f l       .debug_str	00000000 
0004d4ae l       .debug_str	00000000 
0004d4b9 l       .debug_str	00000000 
0004d4f5 l       .debug_str	00000000 
0004d503 l       .debug_str	00000000 
0004d537 l       .debug_str	00000000 
0004d572 l       .debug_str	00000000 
0004d5b0 l       .debug_str	00000000 
0004d5be l       .debug_str	00000000 
0004d5f7 l       .debug_str	00000000 
0004d601 l       .debug_str	00000000 
0004d63d l       .debug_str	00000000 
0004d699 l       .debug_str	00000000 
0004d6a0 l       .debug_str	00000000 
0004d6fe l       .debug_str	00000000 
0004d707 l       .debug_str	00000000 
0004d76e l       .debug_str	00000000 
0004d77f l       .debug_str	00000000 
0004d7dc l       .debug_str	00000000 
0004d83b l       .debug_str	00000000 
0004d897 l       .debug_str	00000000 
0004d8f5 l       .debug_str	00000000 
0004d95c l       .debug_str	00000000 
0004d9b9 l       .debug_str	00000000 
0004da18 l       .debug_str	00000000 
0004da51 l       .debug_str	00000000 
0004da5b l       .debug_str	00000000 
0004dac3 l       .debug_str	00000000 
0004daf6 l       .debug_str	00000000 
0004db00 l       .debug_str	00000000 
0004db36 l       .debug_str	00000000 
0004db42 l       .debug_str	00000000 
0004db79 l       .debug_str	00000000 
0004db86 l       .debug_str	00000000 
0004dbca l       .debug_str	00000000 
0004dbe4 l       .debug_str	00000000 
0004dc55 l       .debug_str	00000000 
0004dc68 l       .debug_str	00000000 
0004dcd9 l       .debug_str	00000000 
0004dd1c l       .debug_str	00000000 
0004dd26 l       .debug_str	00000000 
0004dd70 l       .debug_str	00000000 
0004ddb7 l       .debug_str	00000000 
0004de04 l       .debug_str	00000000 
0004de4e l       .debug_str	00000000 
0004de80 l       .debug_str	00000000 
0004de89 l       .debug_str	00000000 
0004debd l       .debug_str	00000000 
0004def6 l       .debug_str	00000000 
0004df32 l       .debug_str	00000000 
0004df44 l       .debug_str	00000000 
0004df85 l       .debug_str	00000000 
0004dfe4 l       .debug_str	00000000 
0004e015 l       .debug_str	00000000 
0004e02b l       .debug_str	00000000 
0004e060 l       .debug_str	00000000 
0004e0bd l       .debug_str	00000000 
0004e121 l       .debug_str	00000000 
0004e180 l       .debug_str	00000000 
0004e1e0 l       .debug_str	00000000 
0004e23e l       .debug_str	00000000 
0002014a l       .debug_str	00000000 
0004e2a3 l       .debug_str	00000000 
0004e2e9 l       .debug_str	00000000 
0004e329 l       .debug_str	00000000 
0004e3b1 l       .debug_str	00000000 
0005c787 l       .debug_str	00000000 
0004e438 l       .debug_str	00000000 
0004e46b l       .debug_str	00000000 
0004e4df l       .debug_str	00000000 
0004e558 l       .debug_str	00000000 
0004e5cc l       .debug_str	00000000 
0004e62b l       .debug_str	00000000 
0004e688 l       .debug_str	00000000 
0004e6e2 l       .debug_str	00000000 
0004e73e l       .debug_str	00000000 
0004e79b l       .debug_str	00000000 
0004e7fa l       .debug_str	00000000 
0004e862 l       .debug_str	00000000 
0004e8cc l       .debug_str	00000000 
0004e935 l       .debug_str	00000000 
0004e993 l       .debug_str	00000000 
0004ea05 l       .debug_str	00000000 
0004ea09 l       .debug_str	00000000 
0004ea7c l       .debug_str	00000000 
0004eada l       .debug_str	00000000 
0004eb36 l       .debug_str	00000000 
0004eba7 l       .debug_str	00000000 
0004ec1d l       .debug_str	00000000 
0004ec54 l       .debug_str	00000000 
0004ecb0 l       .debug_str	00000000 
0004ed04 l       .debug_str	00000000 
0004ed62 l       .debug_str	00000000 
0004edce l       .debug_str	00000000 
0004ee23 l       .debug_str	00000000 
0004ee56 l       .debug_str	00000000 
0004ee64 l       .debug_str	00000000 
0004ee9c l       .debug_str	00000000 
0004eeaf l       .debug_str	00000000 
0004eee4 l       .debug_str	00000000 
0004ef1a l       .debug_str	00000000 
0004ef75 l       .debug_str	00000000 
0004efa8 l       .debug_str	00000000 
0004efaf l       .debug_str	00000000 
0004eff1 l       .debug_str	00000000 
0004f022 l       .debug_str	00000000 
0004f053 l       .debug_str	00000000 
0004f086 l       .debug_str	00000000 
0004f08d l       .debug_str	00000000 
0004f0ba l       .debug_str	00000000 
0004f0f5 l       .debug_str	00000000 
0004f108 l       .debug_str	00000000 
0004f139 l       .debug_str	00000000 
0004f143 l       .debug_str	00000000 
0004f1a4 l       .debug_str	00000000 
0004f20c l       .debug_str	00000000 
0004f249 l       .debug_str	00000000 
0004f297 l       .debug_str	00000000 
0004f2d3 l       .debug_str	00000000 
0004f30f l       .debug_str	00000000 
0004f348 l       .debug_str	00000000 
0004f382 l       .debug_str	00000000 
0004f3bb l       .debug_str	00000000 
0004f3f2 l       .debug_str	00000000 
0004f42b l       .debug_str	00000000 
0004f465 l       .debug_str	00000000 
0004f4ab l       .debug_str	00000000 
0004f4ce l       .debug_str	00000000 
0004f514 l       .debug_str	00000000 
0004f537 l       .debug_str	00000000 
0004f580 l       .debug_str	00000000 
0004f5a6 l       .debug_str	00000000 
0004f5ef l       .debug_str	00000000 
0004f615 l       .debug_str	00000000 
0004f65f l       .debug_str	00000000 
0004f686 l       .debug_str	00000000 
0004f6d0 l       .debug_str	00000000 
0004f6f7 l       .debug_str	00000000 
0004f744 l       .debug_str	00000000 
0004f76e l       .debug_str	00000000 
0004f7bb l       .debug_str	00000000 
0004f7e5 l       .debug_str	00000000 
0004f818 l       .debug_str	00000000 
0004f844 l       .debug_str	00000000 
0004f89a l       .debug_str	00000000 
0004f8c5 l       .debug_str	00000000 
0004f91d l       .debug_str	00000000 
0004f973 l       .debug_str	00000000 
0004f9ac l       .debug_str	00000000 
0004f9b7 l       .debug_str	00000000 
0001ec51 l       .debug_str	00000000 
0004f9f0 l       .debug_str	00000000 
0004fa17 l       .debug_str	00000000 
0004fa50 l       .debug_str	00000000 
0004fa97 l       .debug_str	00000000 
0004faa4 l       .debug_str	00000000 
0004fcbe l       .debug_str	00000000 
0004fad3 l       .debug_str	00000000 
0004fb13 l       .debug_str	00000000 
0004fb27 l       .debug_str	00000000 
0004fb69 l       .debug_str	00000000 
0004fb9a l       .debug_str	00000000 
0004fbca l       .debug_str	00000000 
0004fbfb l       .debug_str	00000000 
0004fc2c l       .debug_str	00000000 
0004fc63 l       .debug_str	00000000 
0004fc6e l       .debug_str	00000000 
0004fcae l       .debug_str	00000000 
0004fcc2 l       .debug_str	00000000 
0004fcfe l       .debug_str	00000000 
0004fd0e l       .debug_str	00000000 
0004fd43 l       .debug_str	00000000 
0004fd4d l       .debug_str	00000000 
0004fd82 l       .debug_str	00000000 
0004fd8c l       .debug_str	00000000 
0004fde1 l       .debug_str	00000000 
0004fe29 l       .debug_str	00000000 
0004fe6f l       .debug_str	00000000 
0004feb6 l       .debug_str	00000000 
0004feff l       .debug_str	00000000 
0004ff51 l       .debug_str	00000000 
0004ffa3 l       .debug_str	00000000 
00050041 l       .debug_str	00000000 
00050073 l       .debug_str	00000000 
000500ac l       .debug_str	00000000 
000500c1 l       .debug_str	00000000 
000500fc l       .debug_str	00000000 
00050113 l       .debug_str	00000000 
00050151 l       .debug_str	00000000 
0005016b l       .debug_str	00000000 
000501cd l       .debug_str	00000000 
000501f2 l       .debug_str	00000000 
0005024d l       .debug_str	00000000 
0005025c l       .debug_str	00000000 
000502d1 l       .debug_str	00000000 
000502ee l       .debug_str	00000000 
00050328 l       .debug_str	00000000 
00050365 l       .debug_str	00000000 
00050370 l       .debug_str	00000000 
000503a8 l       .debug_str	00000000 
000503af l       .debug_str	00000000 
0005042e l       .debug_str	00000000 
0005048e l       .debug_str	00000000 
000504ec l       .debug_str	00000000 
0005054a l       .debug_str	00000000 
00050582 l       .debug_str	00000000 
000505b7 l       .debug_str	00000000 
000505e2 l       .debug_str	00000000 
000505ec l       .debug_str	00000000 
0005061c l       .debug_str	00000000 
0005062a l       .debug_str	00000000 
00050683 l       .debug_str	00000000 
000506d6 l       .debug_str	00000000 
00050752 l       .debug_str	00000000 
000507b6 l       .debug_str	00000000 
0005081a l       .debug_str	00000000 
00050850 l       .debug_str	00000000 
00050864 l       .debug_str	00000000 
000508a5 l       .debug_str	00000000 
000508bd l       .debug_str	00000000 
00050971 l       .debug_str	00000000 
000509a4 l       .debug_str	00000000 
000509b5 l       .debug_str	00000000 
000509fb l       .debug_str	00000000 
00050a08 l       .debug_str	00000000 
00050a45 l       .debug_str	00000000 
00050a89 l       .debug_str	00000000 
00050aca l       .debug_str	00000000 
00050b0c l       .debug_str	00000000 
00050b16 l       .debug_str	00000000 
00050b5a l       .debug_str	00000000 
00050b65 l       .debug_str	00000000 
00050bb3 l       .debug_str	00000000 
00050c01 l       .debug_str	00000000 
00050c47 l       .debug_str	00000000 
00050c8f l       .debug_str	00000000 
00050cd7 l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
00050d3e l       .debug_str	00000000 
00050d97 l       .debug_str	00000000 
00050e01 l       .debug_str	00000000 
000174ea l       .debug_str	00000000 
00050e6b l       .debug_str	00000000 
00050ee6 l       .debug_str	00000000 
00050f5b l       .debug_str	00000000 
00050f66 l       .debug_str	00000000 
00050fdb l       .debug_str	00000000 
00050fe6 l       .debug_str	00000000 
0005103d l       .debug_str	00000000 
000510a1 l       .debug_str	00000000 
000510ad l       .debug_str	00000000 
000510ea l       .debug_str	00000000 
000510f7 l       .debug_str	00000000 
0005112b l       .debug_str	00000000 
00051166 l       .debug_str	00000000 
000511c2 l       .debug_str	00000000 
0005121d l       .debug_str	00000000 
00051277 l       .debug_str	00000000 
00037cb1 l       .debug_str	00000000 
000512bd l       .debug_str	00000000 
00051323 l       .debug_str	00000000 
0005135a l       .debug_str	00000000 
00051362 l       .debug_str	00000000 
0005139a l       .debug_str	00000000 
000513a3 l       .debug_str	00000000 
000513db l       .debug_str	00000000 
000513e4 l       .debug_str	00000000 
0005141b l       .debug_str	00000000 
00051423 l       .debug_str	00000000 
0005145b l       .debug_str	00000000 
00051464 l       .debug_str	00000000 
0005149c l       .debug_str	00000000 
000514a5 l       .debug_str	00000000 
000514dc l       .debug_str	00000000 
000514e4 l       .debug_str	00000000 
0005155e l       .debug_str	00000000 
000515d8 l       .debug_str	00000000 
00051652 l       .debug_str	00000000 
000516ce l       .debug_str	00000000 
0001ac1d l       .debug_str	00000000 
0005172c l       .debug_str	00000000 
0005178b l       .debug_str	00000000 
000517ea l       .debug_str	00000000 
00051849 l       .debug_str	00000000 
000518a9 l       .debug_str	00000000 
00051907 l       .debug_str	00000000 
00051966 l       .debug_str	00000000 
000519c5 l       .debug_str	00000000 
00051a24 l       .debug_str	00000000 
00051a84 l       .debug_str	00000000 
00051ad9 l       .debug_str	00000000 
00051b2e l       .debug_str	00000000 
00051b88 l       .debug_str	00000000 
00051be2 l       .debug_str	00000000 
00051c1c l       .debug_str	00000000 
00051c25 l       .debug_str	00000000 
00051c5f l       .debug_str	00000000 
00051c68 l       .debug_str	00000000 
00051ca5 l       .debug_str	00000000 
0003919c l       .debug_str	00000000 
00051cde l       .debug_str	00000000 
00051d3f l       .debug_str	00000000 
00051d9d l       .debug_str	00000000 
00051dde l       .debug_str	00000000 
00051e1c l       .debug_str	00000000 
00051e55 l       .debug_str	00000000 
00051e94 l       .debug_str	00000000 
00051ed2 l       .debug_str	00000000 
00051f10 l       .debug_str	00000000 
00051f51 l       .debug_str	00000000 
00051f95 l       .debug_str	00000000 
00051fd2 l       .debug_str	00000000 
00052038 l       .debug_str	00000000 
0005209f l       .debug_str	00000000 
00052102 l       .debug_str	00000000 
00052164 l       .debug_str	00000000 
000521c9 l       .debug_str	00000000 
00052232 l       .debug_str	00000000 
00052298 l       .debug_str	00000000 
000522fe l       .debug_str	00000000 
00052359 l       .debug_str	00000000 
000523c0 l       .debug_str	00000000 
0005242b l       .debug_str	00000000 
00052486 l       .debug_str	00000000 
000524e1 l       .debug_str	00000000 
00023539 l       .debug_str	00000000 
00052528 l       .debug_str	00000000 
00052570 l       .debug_str	00000000 
000525b8 l       .debug_str	00000000 
00052600 l       .debug_str	00000000 
00052649 l       .debug_str	00000000 
00052693 l       .debug_str	00000000 
000526da l       .debug_str	00000000 
0005272d l       .debug_str	00000000 
00052748 l       .debug_str	00000000 
00052790 l       .debug_str	00000000 
000527e4 l       .debug_str	00000000 
0005282c l       .debug_str	00000000 
00052880 l       .debug_str	00000000 
000528c8 l       .debug_str	00000000 
0005291c l       .debug_str	00000000 
00052965 l       .debug_str	00000000 
000529ba l       .debug_str	00000000 
00052a04 l       .debug_str	00000000 
00052a5c l       .debug_str	00000000 
00052abe l       .debug_str	00000000 
00052b1d l       .debug_str	00000000 
00052b7d l       .debug_str	00000000 
00052bdd l       .debug_str	00000000 
00052c3d l       .debug_str	00000000 
00052c9e l       .debug_str	00000000 
00052cfd l       .debug_str	00000000 
00052d5d l       .debug_str	00000000 
00052dbd l       .debug_str	00000000 
00052e1d l       .debug_str	00000000 
00052e7e l       .debug_str	00000000 
00052edb l       .debug_str	00000000 
00052f36 l       .debug_str	00000000 
00052f8c l       .debug_str	00000000 
00052fea l       .debug_str	00000000 
0005303e l       .debug_str	00000000 
0005309f l       .debug_str	00000000 
00053105 l       .debug_str	00000000 
0005316d l       .debug_str	00000000 
000531d4 l       .debug_str	00000000 
00053230 l       .debug_str	00000000 
00053291 l       .debug_str	00000000 
000532eb l       .debug_str	00000000 
00053345 l       .debug_str	00000000 
000533a3 l       .debug_str	00000000 
000533f7 l       .debug_str	00000000 
00053473 l       .debug_str	00000000 
000534dc l       .debug_str	00000000 
00053558 l       .debug_str	00000000 
000535d4 l       .debug_str	00000000 
0005363d l       .debug_str	00000000 
000536b9 l       .debug_str	00000000 
00053726 l       .debug_str	00000000 
00053780 l       .debug_str	00000000 
000537d9 l       .debug_str	00000000 
00053831 l       .debug_str	00000000 
00053890 l       .debug_str	00000000 
000538ef l       .debug_str	00000000 
0005394e l       .debug_str	00000000 
000539ae l       .debug_str	00000000 
00053a0e l       .debug_str	00000000 
00053a6e l       .debug_str	00000000 
00053ace l       .debug_str	00000000 
00053b30 l       .debug_str	00000000 
00053b92 l       .debug_str	00000000 
00053bf3 l       .debug_str	00000000 
00053c55 l       .debug_str	00000000 
00053cb7 l       .debug_str	00000000 
00053d18 l       .debug_str	00000000 
00053d7a l       .debug_str	00000000 
00053ddc l       .debug_str	00000000 
000391e0 l       .debug_str	00000000 
00053e25 l       .debug_str	00000000 
00053e71 l       .debug_str	00000000 
00053e79 l       .debug_str	00000000 
00053ec3 l       .debug_str	00000000 
00053f0e l       .debug_str	00000000 
00053f15 l       .debug_str	00000000 
00053f60 l       .debug_str	00000000 
00053fab l       .debug_str	00000000 
00053ff7 l       .debug_str	00000000 
00054041 l       .debug_str	00000000 
0005408e l       .debug_str	00000000 
000540d9 l       .debug_str	00000000 
00054125 l       .debug_str	00000000 
00054171 l       .debug_str	00000000 
000541bd l       .debug_str	00000000 
0005420a l       .debug_str	00000000 
00054254 l       .debug_str	00000000 
000542a1 l       .debug_str	00000000 
000542ec l       .debug_str	00000000 
00054338 l       .debug_str	00000000 
00054384 l       .debug_str	00000000 
000543d0 l       .debug_str	00000000 
0005441d l       .debug_str	00000000 
00054467 l       .debug_str	00000000 
000544b4 l       .debug_str	00000000 
000544ff l       .debug_str	00000000 
0005454b l       .debug_str	00000000 
00054597 l       .debug_str	00000000 
000545e3 l       .debug_str	00000000 
00054630 l       .debug_str	00000000 
0005467b l       .debug_str	00000000 
000546c9 l       .debug_str	00000000 
00054715 l       .debug_str	00000000 
00054762 l       .debug_str	00000000 
000547af l       .debug_str	00000000 
000547fc l       .debug_str	00000000 
0005484a l       .debug_str	00000000 
00054895 l       .debug_str	00000000 
000548e0 l       .debug_str	00000000 
0005492c l       .debug_str	00000000 
00054978 l       .debug_str	00000000 
000549c5 l       .debug_str	00000000 
00054a11 l       .debug_str	00000000 
00054a5e l       .debug_str	00000000 
00054aab l       .debug_str	00000000 
00054b0a l       .debug_str	00000000 
00054b67 l       .debug_str	00000000 
00054bc3 l       .debug_str	00000000 
00054c21 l       .debug_str	00000000 
00054c7e l       .debug_str	00000000 
00054cdc l       .debug_str	00000000 
00054d39 l       .debug_str	00000000 
00054d97 l       .debug_str	00000000 
00054df4 l       .debug_str	00000000 
00054e53 l       .debug_str	00000000 
00054eb1 l       .debug_str	00000000 
00054f12 l       .debug_str	00000000 
00054f73 l       .debug_str	00000000 
00054fd6 l       .debug_str	00000000 
00055007 l       .debug_str	00000000 
0005500f l       .debug_str	00000000 
00055072 l       .debug_str	00000000 
000550d5 l       .debug_str	00000000 
00055139 l       .debug_str	00000000 
0005519d l       .debug_str	00000000 
00055201 l       .debug_str	00000000 
00055265 l       .debug_str	00000000 
000552c8 l       .debug_str	00000000 
0005532b l       .debug_str	00000000 
0005538f l       .debug_str	00000000 
000553f3 l       .debug_str	00000000 
00055457 l       .debug_str	00000000 
000554bb l       .debug_str	00000000 
000554ec l       .debug_str	00000000 
000554f4 l       .debug_str	00000000 
00055558 l       .debug_str	00000000 
000555bc l       .debug_str	00000000 
00055620 l       .debug_str	00000000 
00055684 l       .debug_str	00000000 
000556e4 l       .debug_str	00000000 
00055744 l       .debug_str	00000000 
00055772 l       .debug_str	00000000 
0005577b l       .debug_str	00000000 
000557dc l       .debug_str	00000000 
0005583d l       .debug_str	00000000 
0005589e l       .debug_str	00000000 
000558ff l       .debug_str	00000000 
00055956 l       .debug_str	00000000 
000559a9 l       .debug_str	00000000 
000559f1 l       .debug_str	00000000 
00055a19 l       .debug_str	00000000 
00055a61 l       .debug_str	00000000 
00055a77 l       .debug_str	00000000 
00055abf l       .debug_str	00000000 
00055af4 l       .debug_str	00000000 
00055b3c l       .debug_str	00000000 
00055b77 l       .debug_str	00000000 
00055bbf l       .debug_str	00000000 
00055c07 l       .debug_str	00000000 
00055c28 l       .debug_str	00000000 
00055c70 l       .debug_str	00000000 
00055c7b l       .debug_str	00000000 
00055cc3 l       .debug_str	00000000 
00055d00 l       .debug_str	00000000 
00055d48 l       .debug_str	00000000 
00055da1 l       .debug_str	00000000 
00055de9 l       .debug_str	00000000 
00055e05 l       .debug_str	00000000 
00055e4d l       .debug_str	00000000 
00055ef9 l       .debug_str	00000000 
00055f41 l       .debug_str	00000000 
00055f5f l       .debug_str	00000000 
00055fa7 l       .debug_str	00000000 
00055fb1 l       .debug_str	00000000 
00055ff9 l       .debug_str	00000000 
00056034 l       .debug_str	00000000 
0005607c l       .debug_str	00000000 
000560cb l       .debug_str	00000000 
00056113 l       .debug_str	00000000 
0005613a l       .debug_str	00000000 
00056182 l       .debug_str	00000000 
000561ac l       .debug_str	00000000 
000561f4 l       .debug_str	00000000 
0005626f l       .debug_str	00000000 
000562b7 l       .debug_str	00000000 
000562ff l       .debug_str	00000000 
00056315 l       .debug_str	00000000 
00016c44 l       .debug_str	00000000 
0005635d l       .debug_str	00000000 
000563a5 l       .debug_str	00000000 
000563ed l       .debug_str	00000000 
0005641e l       .debug_str	00000000 
00056466 l       .debug_str	00000000 
000564ca l       .debug_str	00000000 
00056512 l       .debug_str	00000000 
0000b963 l       .debug_str	00000000 
0005655a l       .debug_str	00000000 
000565a2 l       .debug_str	00000000 
000565af l       .debug_str	00000000 
000565f7 l       .debug_str	00000000 
00056601 l       .debug_str	00000000 
00056649 l       .debug_str	00000000 
00056652 l       .debug_str	00000000 
0005669a l       .debug_str	00000000 
000566c2 l       .debug_str	00000000 
0005670a l       .debug_str	00000000 
00056752 l       .debug_str	00000000 
00056774 l       .debug_str	00000000 
000567bc l       .debug_str	00000000 
000567ed l       .debug_str	00000000 
00056835 l       .debug_str	00000000 
0005687d l       .debug_str	00000000 
000568b5 l       .debug_str	00000000 
000568fd l       .debug_str	00000000 
00056932 l       .debug_str	00000000 
0005697a l       .debug_str	00000000 
000569a3 l       .debug_str	00000000 
000569eb l       .debug_str	00000000 
00056a0f l       .debug_str	00000000 
00056a57 l       .debug_str	00000000 
00056a7c l       .debug_str	00000000 
00056ac4 l       .debug_str	00000000 
00056ae1 l       .debug_str	00000000 
00056b29 l       .debug_str	00000000 
00056b34 l       .debug_str	00000000 
00056b7c l       .debug_str	00000000 
00056ba4 l       .debug_str	00000000 
00056bec l       .debug_str	00000000 
00056bfb l       .debug_str	00000000 
00056c43 l       .debug_str	00000000 
00056c8b l       .debug_str	00000000 
00056ca7 l       .debug_str	00000000 
00056cef l       .debug_str	00000000 
00056d66 l       .debug_str	00000000 
00056dae l       .debug_str	00000000 
00056e25 l       .debug_str	00000000 
00056e6d l       .debug_str	00000000 
00056e76 l       .debug_str	00000000 
00056ebe l       .debug_str	00000000 
00056ee4 l       .debug_str	00000000 
00056f2c l       .debug_str	00000000 
00056f5f l       .debug_str	00000000 
00056fa7 l       .debug_str	00000000 
00056fc4 l       .debug_str	00000000 
0005700c l       .debug_str	00000000 
00057015 l       .debug_str	00000000 
0005705d l       .debug_str	00000000 
000570a5 l       .debug_str	00000000 
000570c9 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
00057111 l       .debug_str	00000000 
00057159 l       .debug_str	00000000 
000571a1 l       .debug_str	00000000 
00057299 l       .debug_str	00000000 
0001b32d l       .debug_str	00000000 
000572e1 l       .debug_str	00000000 
00057329 l       .debug_str	00000000 
00057371 l       .debug_str	00000000 
0005739e l       .debug_str	00000000 
0000ba9d l       .debug_str	00000000 
000573e6 l       .debug_str	00000000 
0005742e l       .debug_str	00000000 
0005748b l       .debug_str	00000000 
000574d3 l       .debug_str	00000000 
000574dc l       .debug_str	00000000 
00057524 l       .debug_str	00000000 
00057541 l       .debug_str	00000000 
00057589 l       .debug_str	00000000 
000575bf l       .debug_str	00000000 
00057607 l       .debug_str	00000000 
0005763c l       .debug_str	00000000 
00057684 l       .debug_str	00000000 
000576bd l       .debug_str	00000000 
00057705 l       .debug_str	00000000 
00057721 l       .debug_str	00000000 
00057769 l       .debug_str	00000000 
00057771 l       .debug_str	00000000 
000577b9 l       .debug_str	00000000 
000577d4 l       .debug_str	00000000 
0005781c l       .debug_str	00000000 
00057844 l       .debug_str	00000000 
0005788e l       .debug_str	00000000 
000578d8 l       .debug_str	00000000 
00057937 l       .debug_str	00000000 
00057994 l       .debug_str	00000000 
000579ed l       .debug_str	00000000 
00057a4c l       .debug_str	00000000 
00057aab l       .debug_str	00000000 
00057b0c l       .debug_str	00000000 
00057b6f l       .debug_str	00000000 
00057bd7 l       .debug_str	00000000 
00057c39 l       .debug_str	00000000 
00057c9f l       .debug_str	00000000 
00057d01 l       .debug_str	00000000 
00057d66 l       .debug_str	00000000 
00057dc9 l       .debug_str	00000000 
00057e25 l       .debug_str	00000000 
00057e7c l       .debug_str	00000000 
00057ed5 l       .debug_str	00000000 
00057f28 l       .debug_str	00000000 
00057f84 l       .debug_str	00000000 
00057fea l       .debug_str	00000000 
00058040 l       .debug_str	00000000 
0005809d l       .debug_str	00000000 
000580ff l       .debug_str	00000000 
00058158 l       .debug_str	00000000 
000581b3 l       .debug_str	00000000 
0005820e l       .debug_str	00000000 
00058269 l       .debug_str	00000000 
000582c6 l       .debug_str	00000000 
00058323 l       .debug_str	00000000 
00058369 l       .debug_str	00000000 
000583b3 l       .debug_str	00000000 
000583f3 l       .debug_str	00000000 
00058430 l       .debug_str	00000000 
00058474 l       .debug_str	00000000 
000584b0 l       .debug_str	00000000 
000584f4 l       .debug_str	00000000 
0005853d l       .debug_str	00000000 
00058546 l       .debug_str	00000000 
0005858f l       .debug_str	00000000 
00058598 l       .debug_str	00000000 
00058601 l       .debug_str	00000000 
0005865e l       .debug_str	00000000 
000586c1 l       .debug_str	00000000 
00058717 l       .debug_str	00000000 
0005876d l       .debug_str	00000000 
000587c6 l       .debug_str	00000000 
0005881e l       .debug_str	00000000 
00058882 l       .debug_str	00000000 
00058908 l       .debug_str	00000000 
0005890e l       .debug_str	00000000 
00058994 l       .debug_str	00000000 
0005899a l       .debug_str	00000000 
00058a1c l       .debug_str	00000000 
00058a9e l       .debug_str	00000000 
00058b21 l       .debug_str	00000000 
00058b28 l       .debug_str	00000000 
00058bab l       .debug_str	00000000 
00058bb2 l       .debug_str	00000000 
00058c38 l       .debug_str	00000000 
00058cbe l       .debug_str	00000000 
00058d41 l       .debug_str	00000000 
00058dc4 l       .debug_str	00000000 
00058e46 l       .debug_str	00000000 
00058ecc l       .debug_str	00000000 
00058f52 l       .debug_str	00000000 
00058fdc l       .debug_str	00000000 
00059064 l       .debug_str	00000000 
000590ec l       .debug_str	00000000 
00059154 l       .debug_str	00000000 
000591bd l       .debug_str	00000000 
00059227 l       .debug_str	00000000 
00059292 l       .debug_str	00000000 
000592f0 l       .debug_str	00000000 
0005934e l       .debug_str	00000000 
000593ac l       .debug_str	00000000 
0005940b l       .debug_str	00000000 
00059469 l       .debug_str	00000000 
000594c8 l       .debug_str	00000000 
00059526 l       .debug_str	00000000 
00059585 l       .debug_str	00000000 
000595e4 l       .debug_str	00000000 
00059643 l       .debug_str	00000000 
000596a1 l       .debug_str	00000000 
00059700 l       .debug_str	00000000 
0005975f l       .debug_str	00000000 
000597be l       .debug_str	00000000 
0005981d l       .debug_str	00000000 
0005987c l       .debug_str	00000000 
000598db l       .debug_str	00000000 
0005993a l       .debug_str	00000000 
00059999 l       .debug_str	00000000 
000599f8 l       .debug_str	00000000 
00059a57 l       .debug_str	00000000 
00059ab6 l       .debug_str	00000000 
00059b15 l       .debug_str	00000000 
00059b74 l       .debug_str	00000000 
00059bd3 l       .debug_str	00000000 
00059c32 l       .debug_str	00000000 
00059c91 l       .debug_str	00000000 
00059cf0 l       .debug_str	00000000 
00059d4f l       .debug_str	00000000 
00059dae l       .debug_str	00000000 
00059e0e l       .debug_str	00000000 
00059e6d l       .debug_str	00000000 
00059ecc l       .debug_str	00000000 
00059f2b l       .debug_str	00000000 
00059f8b l       .debug_str	00000000 
00059fea l       .debug_str	00000000 
0005a049 l       .debug_str	00000000 
0005a0a8 l       .debug_str	00000000 
0005a108 l       .debug_str	00000000 
000184e2 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
0001a500 l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
0001a50a l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
00018b86 l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00019bae l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00018a80 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
00018b30 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
000190a8 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
00018492 l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
000184f4 l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
00028efc l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
00028f77 l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
00029168 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
000284d0 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
00018b5a l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00018b60 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00018b54 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
00018494 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
0001a518 l     F .text	00000024 __semihost
0001a53c l     F .text	00000010 debugger_connected
0001a54c l     F .text	0000002e semihost_write
0001a620 l     F .text	0000001c semihosting_console_write_ch
20006f04 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20006f08 l     O .bss	00000010 avail_queue
20006f18 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20006f24 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
0001a7f0 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
0001a844 l     F .text	00000050 hal_gpio_irq_handler
0001a894 l     F .text	0000002c hal_gpio_irq_setup
0001a8c0 l     F .text	0000001c hal_gpio_find_empty_slot
0001a8dc l     F .text	00000038 hal_gpio_find_pin
20006f28 l     O .bss	00000040 hal_gpio_irqs
20006f68 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
0001aa70 l     F .text	0000007a hal_i2c_delay_us
0001aaec l     F .text	00000024 hal_i2c_resolve
0001ab10 l     F .text	0000001c hal_i2c_convert_status
0001ab2c l     F .text	00000012 read_gpio_inbuffer
0001ab3e l     F .text	000000a2 hal_i2c_clear_bus
000295d0 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
0001aedc l     F .text	0000006e nrf52_irqm_handler
0001af64 l     F .text	00000014 hal_spi_stop_transfer
0001af78 l     F .text	0000004c hal_spi_config_slave
0001afc4 l     F .text	000000b8 hal_spi_init_master
0001b07c l     F .text	000000e0 hal_spi_config_master
000295d8 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
0001b460 l     F .text	0000000e nrf52_hal_wdt_default_handler
0001b470 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
0001b688 l     F .text	00000016 os_main
20007070 l     O .bss	00002000 g_os_main_stack
20006f70 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0001b998 l     F .text	0000005c os_dev_add
0001b9f4 l     F .text	00000026 os_dev_initialize
0001ba1a l     F .text	00000020 os_dev_init
20009070 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20009078 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0001bf44 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0001c058 l     F .text	00000010 os_msys_find_biggest_pool
0001c068 l     F .text	0000002c os_msys_find_pool
0001c0e0 l     F .text	00000044 os_msys_init_once
20009088 l     O .bss	00004900 os_msys_1_data
2000d988 l     O .bss	0000000c os_msys_1_mbuf_pool
2000d994 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0001c33c l     F .text	00000020 os_sanity_check_list_lock
0001c35c l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0001c7d0 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001c8c0 l     F .text	0000004c os_deltatime
0001c90c l     F .text	0000005c os_time_tick
2000d9b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0001cc28 l       .text	00000000 SVC_User
0001cc46 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0001cce8 l       .text	00000000 test1
0001ccdc l       .text	00000000 loop1
0001ccee l       .text	00000000 res1
0001cd0a l       .text	00000000 test2
0001cd12 l       .text	00000000 done
0001ccfe l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001cd1e l       .text	00000000 test1
0001cd1a l       .text	00000000 loop1
0001cd2c l       .text	00000000 test2
0001cd28 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001cd96 l     F .text	000000c0 ui2a
0001ce56 l     F .text	00000020 i2a
0001ce76 l     F .text	00000030 a2d
0001cea6 l     F .text	00000036 a2i
0001cedc l     F .text	0000002a putf
0001cf08 l     F .text	0000011c putchw
0001d024 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001d3a8 l     F .text	00000004 stdin_read
0001d3ac l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001d45c l     F .text	00000028 nrf52k_flash_wait_ready
0001d484 l     F .text	00000054 nrf52k_flash_erase_sector
0001d4d8 l     F .text	00000004 nrf52k_flash_init
0001d4dc l     F .text	00000020 nrf52k_flash_sector_info
0001d4fc l     F .text	000000d0 nrf52k_flash_write
0001d5cc l     F .text	0000000e nrf52k_flash_read
00029790 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001d5dc l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001d7e8 l     F .text	0000000a nrf_read_timer_cntr
0001d7f4 l     F .text	000000b4 nrf_timer_set_ocmp
0001d8a8 l     F .text	0000000a nrf_timer_disable_ocmp
0001d8b2 l     F .text	0000000a nrf_rtc_disable_ocmp
0001d8bc l     F .text	00000054 hal_timer_read_bsptimer
0001d910 l     F .text	00000076 hal_timer_chk_queue
0001d986 l     F .text	0000002c hal_timer_irq_handler
000297ac l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001db4c l     F .text	00000034 nrf52_periph_create_timers
0001db80 l     F .text	00000020 nrf52_periph_create_i2c
0001dba0 l     F .text	00000020 nrf52_periph_create_spi
000297c4 l     O .text	0000000c hal_i2c1_cfg
000297d0 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001dbd4 l     F .text	00000028 sensor_mgr_remove
0001dbfc l     F .text	00000060 sensor_mgr_insert
0001dc5c l     F .text	0000000a sensor_type_traits_empty
0001dc68 l     F .text	0000000c sensor_mgr_evq_set
0001dca2 l     F .text	0000005c sensor_read_data_func
0001dd00 l     F .text	00000048 sensor_base_ts_update_event
0001dd48 l     F .text	00000050 sensor_up_timestamp
0001ddd0 l     F .text	000000a0 sensor_mgr_init
0001e03c l     F .text	0000007c sensor_mgr_wakeup_event
0001de9a l     F .text	00000032 sensor_update_nextrun
0001decc l     F .text	0000001e sensor_calc_nextrun_delta
0001deec l     F .text	00000024 sensor_find_min_nextrun_sensor
0001dfc4 l     F .text	0000004a sensor_mgr_poll_bytype
0001e00e l     F .text	0000002e sensor_poll_per_type_trait
2000d9ec l     O .bss	00000078 sensor_notify_evt_area
2000da64 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000da80 l     O .bss	00000008 oc_sem
2000da88 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000da8c l     O .bss	0000000c hw_id
2000da98 l     O .bss	00000004 hw_id_len
2000daa0 l     O .bss	00000008 sensor_node_address
2000daa8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
000297e8 l     O .text	0000000c COLLECTOR_NODE_HW_ID
000297f4 l     O .text	0000003c SENSOR_NODE_HW_IDS
00029890 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001e260 l     F .text	00000050 config_device
2000dae0 l     O .bss	00000014 adc_1_itf_temp_stub
2000daf8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001e30c l     F .text	00000004 temp_stub_close
0001e310 l     F .text	0000001c temp_stub_sensor_get_config
0001e32c l     F .text	00000026 temp_stub_open
0001e408 l     F .text	0000007c temp_stub_sensor_read
000298d4 l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001e4ac l     F .text	00000030 oc_buffer_tx
0001e4dc l     F .text	0000002c oc_buffer_rx
2000dbb8 l     O .bss	00000018 oc_inq
2000dbd0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000dbe8 l     O .bss	000000c8 oc_client_cb_area
2000dcb0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000dccc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000dcd0 l     O .bss	0000001c oc_rep_objects
2000dcec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001e630 l     F .text	00000078 flash_map_read_mfg
2000dd1c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001e784 l     F .text	00000094 mfg_seek_next_aux
0001e818 l     F .text	00000070 mfg_read_mmr
0001e888 l     F .text	00000054 mfg_read_next_mmr
0001e8dc l     F .text	0000003c mfg_open_flash_area
0001e918 l     F .text	00000044 mfg_read_tlv_body
0001e9e4 l     F .text	0000004e mfg_read_mmr_refs
2000dd94 l     O .bss	00000001 mfg_initialized
2000dd98 l     O .bss	00000018 mfg_mmrs
2000ddb0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001ea4a l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
0001a690 l       .debug_str	00000000 
0001a6e7 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
0001a733 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001a73b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00018698 g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
00016218 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE
0000886c g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE
00008616 g     F .text	000000ba main
00015944 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE
0000a076 g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
0001bc68 g     F .text	00000040 os_eventq_remove
0000a80c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE
0001cab4 g     F .text	00000018 os_arch_init
0001ccd0 g     F .text	00000048 memcmp
00012d12 g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
0001823e g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE
00016f04 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
000121ee g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
00015528 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E
00013088 g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
00017f1e g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
00017da6 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
00015260 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE
000151f4 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
000186c8 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
0000a7ee g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
000091a8 g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
000153f4 g     F .text	0000005a _ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE
0001a328 g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000ded0 g     O .bss	0000001c nrf52_hal_timer0
00015790 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E
0000918e g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
00015606 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE
0001de90 g     F .text	0000000a sensor_unlock
0000aca2 g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
00015734 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E
000098fe g     F .text	00000118 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E
00012242 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
00015718 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE
00017668 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E
00008ffa g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
0001c388 g     F .text	00000024 os_sanity_check_register
0001e360 g     F .text	0000007c temp_stub_init
000178f2 g     F .text	00000022 _ZN4core3cmp3Ord3max17ha8c90ae47563bfdfE
0001c428 g     F .text	00000054 os_sched_insert
2000ddb4 g     O .bss	00000001 g_silence_console
00015c5e g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E
00016532 g     F .text	0000028a _ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E
00015d16 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E
000133a4 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00017b9c g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001eae8 g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
00018464 g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
000154ec g     F .text	00000018 _ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E
00009a88 g     F .text	00000162 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE
00016cae g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE
00008d66 g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
0001609e g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
00019f74 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE
00018476 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E
000159a8 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE
00015e02 g     F .text	00000024 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE
00012432 g     F .text	00000086 _ZN4core3cmp6max_by17h3c9686db40e0f078E
00008ba4 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
00016278 g     F .text	0000004a _ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E
0001e56c g     F .text	00000020 oc_send_buffer
00011fc4 g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E
0001cb5c g     F .text	00000030 os_arch_start
00016188 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE
0000a880 g     F .text	0000001a _ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E
0000ecb0 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE
0001e184 g     F .text	0000001a is_standalone_node
00017a80 g     F .text	00000008 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h48c974e346f24094E
0001bb54 g     F .text	00000010 os_eventq_init
00019586 g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
0001345c g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
00018c6a g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
0001222c g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
00008e5c g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
00018120 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001e0b8 g     F .text	00000028 init_sensor_coap
00017e32 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE
0001e58c g     F .text	0000004c oc_send_multicast_message
00016cbe g     F .text	0000008c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE
00012a34 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
0000edea g     F .text	000000a8 _ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E
00019542 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000def0 g     O .bss	00000034 sensor_mgr
0001a6bc g     F .text	0000002c console_dump
0000afa4 g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E
0001c554 g     F .text	00000078 os_sched_wakeup
0000ed6e g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE
00013334 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
0001a108 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
00008bdc g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001ea48 g     F .text	00000002 _fini
0001b98c g     F .text	0000000a os_cputime_get32
000122f2 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
00015096 g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000ddb5 g     O .bss	00000001 g_console_input_ignore
0001ca44 g     F .text	00000014 os_arch_ctx_sw
0001337a g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
00017ad8 g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E
00015ad2 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE
0001cc92 g     F .text	0000000c SysTick_Handler
0000f2c8 g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE
0000f432 g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E
0001e0f8 g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
00012e34 g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
00012258 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
0001210e g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h1051abda59747a6bE
000094e0 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
000133ae g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001cd6a g     F .text	0000001c strcmp
00016c8a g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE
2000dde8 g     O .bss	00000050 g_idle_task
0000fb46 g     F .text	000000c4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E
0001bb44 g     F .text	00000010 os_dev_reset
00018330 g     F .text	00000010 _ZN4core3ptr5write17h147d4643d861e927E
0000958c g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
0001c6a4 g     F .text	00000010 os_sem_init
0000ee92 g     F .text	00000106 _ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E
0001a63c g     F .text	00000070 console_printhex
0001528c g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
0000ecf8 g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE
00029994 g       .text	00000000 __exidx_start
0001e168 g     F .text	0000001c is_collector_node
000164e2 g     F .text	00000050 _ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E
0001cd32 g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
00019e58 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
0001a5cc g     F .text	00000054 console_buffer
0001bb64 g     F .text	0000000a os_eventq_inited
0001a804 g     F .text	0000000c sysinit_end
00017d54 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
000181b0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
00018640 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000df88 g       .bss	00000000 __HeapBase
00015cae g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE
0000f208 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E
00015bfc g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E
0000948c g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
0000a852 g     F .text	00000012 _ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E
00017a72 g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h8e5f04233c93701aE
000151c8 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
0000f560 g     F .text	00000146 .hidden _ZN3app5chip88on_start17h13652dc8e27bf6d4E
00015570 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001e6e8 g     F .text	00000026 flash_area_read
00013364 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001e5fe g     F .text	00000002 oc_register_ip4
000090b2 g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001e600 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
00011e6c g     F .text	00000060 _ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE
00017c2a g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE
0001ea68 g     F .text	00000028 hal_flash_init
0001bb0c g     F .text	00000036 os_dev_close
0002992c g     O .text	00000048 sysflash_map_dflt
0000f7b8 g     F .text	0000020c _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE
0001d450 g     F .text	0000000c hal_bsp_init
00008c88 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
00016fb0 g     F .text	000005e0 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE
0000fc0a g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha9851d0b0cdc4725E
00012b30 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
000103a0 g     F .text	00000192 _ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE
00009ca0 g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
000129f6 g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001ee44 g     F .text	00000004 __aeabi_memcpy4
00016dda g     F .text	000000c6 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE
0001b2a8 g     F .text	0000002c hal_spi_set_txrx_cb
0001ee3c g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000ddb8 g     O .bss	00000004 console_is_midline
0001ee3c g     F .text	00000006 __aeabi_memclr4
0000f402 g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E
0000a842 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h22ac77b3595708cdE
000080f8 g       .text	00000000 __isr_vector_end
0001ada0 g     F .text	0000013c hal_i2c_master_read
00011f92 g     F .text	0000001a .hidden _ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E
00015d96 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E
0001d088 g     F .text	0000025c tfp_format
00018340 g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E
000180f0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001df5c g     F .text	00000068 sensor_read
00009174 g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
000157a0 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E
00016be2 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE
0001ee44 g     F .text	00000004 __aeabi_memcpy
0001ee44 g     F .text	00000004 __aeabi_memcpy8
2000df24 g     O .bss	00000020 st_up_osco
0001cb8c g     F .text	0000005c os_arch_os_start
0001df3e g     F .text	0000001e sensor_init
0000b0c8 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E
20000000 g       .bss	00000000 _ram_start
0001c9b4 g     F .text	00000026 os_time_delay
000157b0 g     F .text	0000002c _ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE
00011e54 g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E
0001e5fc g     F .text	00000002 oc_register_gatt
20004a6c g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001eae4 g     F .text	00000004 hal_bsp_hw_id_len
0001b94c g     F .text	00000034 os_callout_wakeup_ticks
0001bcc2 g     F .text	00000026 os_mqueue_get
0001abe0 g     F .text	00000098 hal_i2c_init
000121d6 g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h0340384168a45934E
00019414 g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
00019e58 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
000089ac g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0002781c g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
000125b4 g     F .text	00000092 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E
00017590 g     F .text	00000048 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E
000180c0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
0001c654 g     F .text	00000022 os_sched
00008d78 g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
000124b8 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h5567184bcc425327E
00012b76 g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
0000a8d0 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hf625580841d3425eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001dc74 g     F .text	0000002e sensor_mgr_match_bytype
00012a4a g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
000156b6 g     F .text	00000032 _ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E
0000ae24 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
0001c190 g     F .text	00000014 os_mutex_init
00009066 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
0000a032 g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
0000f4fa g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc3726000bdb855aE
2000ddc0 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
00015e26 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E
00008164  w    F .text	00000002 RTC1_IRQHandler
00012c5c g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
00018030 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
00017914 g     F .text	00000022 _ZN4core3cmp3Ord3min17hc89b724701767be9E
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000931c g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
00009462 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
00008c80 g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
00013574 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
0001c134 g     F .text	00000028 os_msys_get_pkthdr
0001e3dc g     F .text	0000002c temp_stub_get_raw_temperature
0001c5cc g     F .text	0000003c os_sched_os_timer_exp
0000f2ee g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE
0001ba3c g     F .text	00000040 os_dev_create
0000a864 g     F .text	0000001c _ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E
000182ba g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
0001c378 g     F .text	00000010 os_sanity_check_init
0001872a g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
000178c0 g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE
0001b980 g     F .text	0000000c os_cputime_init
0000af4a g     F .text	00000030 _ZN4core3any6TypeId2of17h3f51c8cccab069bdE
0001bc50 g     F .text	00000018 os_eventq_run
00013014 g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
0001c15c g     F .text	00000034 os_msys_init
00017670 g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
00017bc6 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
0001ca3a g     F .text	0000000a timer_handler
000123bc g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
00018468 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
000093f2 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
00008cba g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
000156e8 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E
00018460 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
00018708 g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
00017630 g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
0001a108 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
0001588a g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
0001d2e4 g     F .text	00000008 vfprintf
0001524c g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
00012ba2 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
00008984 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E
00012c00 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
0001bd62 g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
00018090 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
0000f21c g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6e7fb991422ea45dE
00019916 g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
000087d2 g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE
00016f28 g     F .text	00000088 _ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE
0001869c g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001ca6a g     F .text	0000000a os_arch_in_critical
00015d02 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E
0000ece8 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E
0001c418 g     F .text	00000010 os_sanity_init
0001765c g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE
000158b4 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE
0001a108 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
00015752 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE
0001b52c g     F .text	0000004c __assert_func
0000f2a6 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E
00017e1e g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
00015ff4 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
000158d2 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE
0001c002 g     F .text	0000001e os_memblock_put_from_cb
0001cbec g     F .text	00000014 os_set_env
00011fac g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h63142b18dacbc787E
2000deac g     O .bss	00000004 g_os_last_ctx_sw_time
000133c0 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
0001a79c g     F .text	00000048 console_printf
000133d6 g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
0000ad74 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
00012a76 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
00013280 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
00017fd0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
0001cc00 g     F .text	00000006 os_arch_init_task_stack
0001e9d4 g     F .text	00000010 mfg_open
0001a108 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
0001e530 g     F .text	00000030 oc_ri_mem_init
00017784 g     F .text	0000013c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E
0000f4d6 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h116a6636383259eeE
000097ee g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001d440 g     F .text	00000010 hal_bsp_flash_dev
0001e710 g     F .text	00000070 flash_map_init
2000dec0 g     O .bss	00000004 g_os_time
0001569e g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E
000106d4 g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17h09fa961dda8dcb87E
000167bc g     F .text	00000392 _ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E
0001cc9e g     F .text	0000001e os_default_irq_asm
0001b578 g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
0001b1e0 g     F .text	00000068 hal_spi_disable
00016db0 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E
0001341c g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E
00009146 g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001e602 g     F .text	00000002 oc_register_lora
00019f74 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hc265973c39f711faE
0001bde4 g     F .text	000000a8 os_mbuf_append
0001e2b0 g     F .text	0000005c temp_stub_create
0001ea90 g     F .text	00000054 hal_flash_read
0001a57c g     F .text	00000048 console_flush
00018212 g     F .text	00000018 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE
00015700 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E
0001b7cc g     F .text	0000001a os_start
00017aa2 g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E
0001d9c4 g     F .text	00000060 hal_timer_init
0001226c g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0001d3bc g     F .text	00000010 rust_sysinit
00008164  w    F .text	00000002 I2S_IRQHandler
0001a6ac g     F .text	00000010 console_printint
0001c678 g     F .text	0000002c os_sched_resort
00011172 g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE
0002976c g     O .text	00000008 MemFile_methods
0001d390 g     F .text	00000018 fmemopen_w
0001426c g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
0001b15c g     F .text	00000038 hal_spi_config
0001ee38  w    F .text	00000002 .hidden __aeabi_ldiv0
0001c048 g     F .text	00000010 os_mempool_module_init
0001c648 g     F .text	0000000c os_sched_next_task
00016d54 g     F .text	0000001a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E
0000a89a g     F .text	00000010 _ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E
0000f0d6 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17hb4ffb829681b047bE
0001a99a g     F .text	00000034 hal_gpio_read
0001b820 g     F .text	0000001a os_callout_init
0001c124 g     F .text	00000010 os_msys_reset
0001d2ec g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001eb3c g     F .text	00000000 .hidden __aeabi_uldivmod
0001c9dc g     F .text	00000038 os_gettimeofday
0001a728 g     F .text	0000001e console_write
00011f66 g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E
00018180 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
000193de g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
000098ea g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
0001b6ac g     F .text	00000070 os_init_idle_task
0001cacc g     F .text	0000008c os_arch_os_init
000162ce g     F .text	000001b6 _ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE
0000942a g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
0001b71c g     F .text	000000b0 os_init
2000de98 g     O .bss	00000008 g_os_mempool_list
000098e0 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
0000a8aa g     F .text	0000001e _ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE
00012a8c g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
0001a724 g     F .text	00000004 semihosting_console_init
0001e96e g     F .text	0000001a mfg_seek_next_with_type
0001c25c g     F .text	000000e0 os_mutex_pend
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0001a978 g     F .text	00000022 hal_gpio_write
00008600 g     F .text	00000014 _start
00012b6e g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
00012bd6 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001ea34 g     F .text	00000014 __wrap_coap_receive
00018000 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000ddbc g     O .bss	00000001 sysinit_active
0000afc0 g     F .text	00000108 _ZN8libchip814Chip8$LT$T$GT$3new17hca880a1e3fbd9a67E
00013498 g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
000153ca g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001d360 g     F .text	0000002e memfile_write
0001ee38  w    F .text	00000002 .hidden __aeabi_idiv0
00016ece g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE
0001b6a0 g     F .text	0000000c os_started
00016b4e g     F .text	0000000a .hidden _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE
0000af7a g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE
0001e508 g     F .text	00000028 oc_buffer_init
000151f6 g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
0000940e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000dea0 g     O .bss	0000000c g_os_sanity_check_mu
000091b8 g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
00017b30 g     F .text	00000042 _ZN4core3ptr4read17h9c6a8e2989f962ccE
0000f0e6 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E
0001ee3c g     F .text	00000006 __aeabi_memclr
0001ee48 g     F .text	0000009a __aeabi_memset4
0000f1f4 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E
00013600 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
000193e6 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
0001822a g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E
000133ec g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E
0001c974 g     F .text	00000040 os_time_advance
0001b194 g     F .text	0000004c hal_spi_enable
0001e99c g     F .text	00000038 mfg_init
00014d16 g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
000089ee g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc4148eaa15af1e8eE
2000de38 g     O .bss	00000050 g_os_main_task
0001ee48 g     F .text	0000009a __aeabi_memset8
00019eb6 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
0000f9c4 g     F .text	000000d4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE
00008c74 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
000299ac g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000148 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
00018a28 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
00008c02 g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
0001a41c g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
0001a810 g     F .text	00000034 NVIC_Relocate
000179d4 g     F .text	0000009e _ZN4core3cmp6min_by17hbd80813895a56a69E
0001a7f8 g     F .text	0000000c sysinit_start
00016eb6 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E
00016ee6 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE
00029778 g     O .text	00000018 nrf52k_flash_dev
0001da24 g     F .text	000000f8 hal_timer_config
00015686 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E
000154a0 g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
0001d34c g     F .text	00000014 vprintf
00009098 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
0001a5c4 g     F .text	00000008 disable_buffer
00017e46 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E
2000de88 g     O .bss	00000004 g_os_started
00018690 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
00015646 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E
20000144 g       .bssnz	00000000 __bssnz_end__
0001baa8 g     F .text	00000020 os_dev_lookup
000161e8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E
00009310 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
0001b508 g     F .text	00000010 hal_watchdog_enable
2000dec4 g     O .bss	0000000c g_hal_os_tick
00017db8 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E
0001ca64 g     F .text	00000006 os_arch_restore_sr
0001b878 g     F .text	00000078 os_callout_reset
000098f4 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001e988 g     F .text	0000000a mfg_read_tlv_flash_area
00017936 g     F .text	0000009e _ZN4core3cmp6max_by17he1a3e576796f8906E
00013438 g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
00016ea0 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E
0001bcb0 g     F .text	00000012 os_mqueue_init
00012646 g     F .text	00000052 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE
00018060 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
00015eae g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0001e352 g     F .text	0000000e temp_stub_default_cfg
0001346c g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E
0000fc12 g     F .text	000000f6 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E
00008020 g       .imghdr	00000000 __text
0001b83c g     F .text	0000003c os_callout_stop
00008908 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E
00015e4c g     F .text	00000062 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E
000081c0 g     F .text	0000004c hal_system_clock_start
0001bdac g     F .text	00000024 os_mbuf_free_chain
000091e4 g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001d3cc g     F .text	00000030 mem_init_mbuf_pool
00013490 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
00011fb4 g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E
000133ca g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
00017dca g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E
0001ac78 g     F .text	00000128 hal_i2c_master_write
0000b11e g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E
00016248 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E
00008164  w    F .text	00000002 QDEC_IRQHandler
0000f534 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE
0000af90 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
000135e2 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
0001284a g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
00016c4c g     F .text	0000001a _ZN4core5slice14from_raw_parts17h1425df913744b73aE
000120d6 g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E
0001bca8 g     F .text	00000008 os_eventq_dflt_get
0001de78 g     F .text	00000018 sensor_lock
00011ecc g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE
00012204 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
0001a750 g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
0001bdd0 g     F .text	00000014 os_mbuf_len
0001bd98 g     F .text	00000014 os_mbuf_free
00016484 g     F .text	0000005e _ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E
000157dc g     F .text	000000ae _ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E
00012a60 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
00013020 g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
0000b170 g     F .text	00003b40 _ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE
0001a746 g     F .text	00000008 console_blocking_mode
000162c2 g     F .text	0000000c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E
0000a8e0 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00009dcc g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
00012218 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001dbc0 g     F .text	00000010 nrf52_periph_create
00016ba0 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E
0001c3ac g     F .text	0000006c os_sanity_run
0000841c g     F .text	00000010 SystemCoreClockUpdate
0000f4ba g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E
00015292 g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
00015504 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
000182d4 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE
0000ef98 g     F .text	0000007e _ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E
0001bfbc g     F .text	00000014 os_mempool_init
00029774 g     O .text	00000004 stdout
0001216e g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h27d5684c70bb37e8E
0000aed4 g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
0001ba7c g     F .text	0000002c os_dev_initialize_all
00008d98 g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
0000fb32 g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E
00015626 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E
00017df4 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
0001b610 g     F .text	00000078 os_idle_task
00008e4c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
00017f36 g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
0000a824 g     F .text	0000001e _ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE
000181fe g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E
00009bea g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
0000fa98 g     F .text	0000009a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE
000190dc g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001e6a8 g     F .text	00000040 flash_area_open
00016d6e g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E
00016b96 g     F .text	0000000a _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E
0001554c g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE
00008164 g     F .text	00000002 Default_Handler
0001868e g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000f3e0 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E
00009336 g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
0001c094 g     F .text	0000004c os_msys_register
00016d96 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE
000091ee g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000d9b0 g     O .bss	00000004 g_os_sanity_check_list
0000acd8 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
00012bac g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
00012786 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
0001b248 g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001ddb4 g     F .text	00000010 sensor_mgr_unlock
2000df80 g     O .bss	00000004 flash_map_entries
00019dfa g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
00017f40 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
00015c0e g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE
0001e604 g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
00016148 g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0000a90c g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
00015276 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE
000158f0 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
00012d24 g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001e95c g     F .text	00000012 mfg_seek_next
00015f00 g     F .text	0000004a _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E
000161b8 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E
0001302a g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
0001591a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE
2000011c g     O .data	00000008 g_os_sleep_list
00018e4c g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
0001bd26 g     F .text	0000000a os_mbuf_pool_init
2000de90 g     O .bss	00000008 g_callout_list
0001c4b8 g     F .text	0000000c os_sched_set_current_task
0001b8f0 g     F .text	0000005c os_callout_tick
0000f016 g     F .text	000000c0 _ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE
0000920a g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
00012c8c g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
000181e8 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E
0000f3be g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E
0001b490 g     F .text	00000078 hal_watchdog_init
2000deb4 g     O .bss	00000001 g_task_id
0001a1de g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
0000a8c8 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
0001bac8 g     F .text	00000044 os_dev_open
2000deb0 g     O .bss	00000004 g_current_task
0001845c g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
00017eb2 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
00008c68 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
0001af4c g     F .text	00000018 nrf52_spi0_irq_handler
0001de70 g     F .text	00000008 sensor_pkg_init
0001e484 g     F .text	00000028 temp_stub_config
0001bce8 g     F .text	0000003e os_mqueue_put
0001a41c g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
0001b2d4 g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
00017a88 g     F .text	0000001a _ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E
0001c4ac g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0001329c g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001e780 g     F .text	00000002 modlog_init
00015b98 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E
00016b58 g     F .text	0000003e _ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE
0001b380 g     F .text	000000e0 hal_spi_txrx_noblock
00018608 g     F .text	00000038 _ZN4core6option13expect_failed17had6579abaad447b4E
000193ee g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
00009184 g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
00008fd6 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
0001c47c g     F .text	00000030 os_sched_ctx_sw_hook
0001df10 g     F .text	0000002e sensor_mgr_register
00012192 g     F .text	00000044 .hidden _ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE
00018640 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
0000f76c g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hd3173c320d2551cfE
00018c8c g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
00008154  w    F .text	00000002 NMI_Handler
000151de g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000f284 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE
00009286 g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
000182ac g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E
00008e54 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
00012a28 g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
0001bd30 g     F .text	00000032 os_mbuf_get
2000deb8 g     O .bss	00000008 g_os_task_list
00008a58 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
00018956 g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
0001d310 g     F .text	0000003a vsnprintf
000140b4 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
0000f4e8 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1647783578bb3807E
0001c1a4 g     F .text	000000b8 os_mutex_release
00013032 g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
0000f45c g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E
00012de6 g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001ddc4 g     F .text	0000000c sensor_mgr_evq_get
000175d8 g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
00012b8a g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
00015d2a g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE
2000de8c g     O .bss	00000004 g_os_idle_ctr
0001a914 g     F .text	0000002c hal_gpio_init_in
00012b26 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
00009a16 g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001dbd0 g     F .text	00000002 sensor_dev_create
0000aee2 g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E
00012698 g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
00008a0c g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
0001a940 g     F .text	00000038 hal_gpio_init_out
0000f776 g     F .text	00000042 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E
00008e76 g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
000127ba g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
000181e0 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E
00016d4a g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E
0000950a g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
0001c968 g     F .text	0000000c os_time_get
00018690 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
0000a780 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
0001c020 g     F .text	00000026 os_memblock_put
00014144 g     F .text	00000128 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
0001c4c4 g     F .text	00000090 os_sched_sleep
00012b64 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001dd98 g     F .text	0000001c sensor_mgr_lock
0001eb6c g     F .text	000002cc .hidden __udivmoddi4
00012224 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001d748 g     F .text	000000a0 os_tick_init
0001544e g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
0001868a g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
000090f8 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
0001c608 g     F .text	00000040 os_sched_wakeup_ticks
00009446 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001db1c g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
0001aa48 g     F .text	00000028 hal_gpio_irq_enable
0001e560 g     F .text	0000000c oc_evq_set
0001e0e0 g     F .text	00000018 is_sensor_node
00019dfa g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001e5d8 g     F .text	00000024 oc_init
0001a032 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
0001a032 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
00009824 g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
000195ca g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
0000af10 g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E
00017fa0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E
2000df48 g     O .bss	00000018 sensor_base_ts
0001a328 g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
00017c8e g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E
000299ac g       .ARM.exidx	00000000 __etext
00019eb6 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
0001767e g     F .text	00000106 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E
0001a7e4 g     F .text	0000000c console_get_ticks
0000ecd4 g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6a25aae91f88a8abE
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0000913c g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
0000f22e g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E
00011f06 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE
20000108 g     O .data	00000004 hal_twi_i2c1
0000ed94 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE
00015a0c g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E
0001c7e8 g     F .text	000000d8 os_task_init
00016efa g     F .text	0000000a _ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E
00009070 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
0001276c g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
00012b54 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
000182ee g     F .text	00000042 _ZN4core3ptr4read17h27a035d1812d8297E
00018150 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
00011f3e g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE
0001c6b4 g     F .text	00000064 os_sem_release
0000f310 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E
0001ee48 g     F .text	0000009a __aeabi_memset
0000f366 g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE
0001be8c g     F .text	000000b8 os_mbuf_dup
0001cc4c g     F .text	00000046 PendSV_Handler
0001347c g     F .text	00000014 _ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E
0001cc06 g     F .text	00000046 SVC_Handler
000089f8 g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E
0001ca58 g     F .text	0000000c os_arch_save_sr
00015666 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E
00008164  w    F .text	00000002 PWM2_IRQHandler
0000815c  w    F .text	00000002 UsageFault_Handler
0001d9b4 g     F .text	00000010 nrf52_timer0_irq_handler
0001ca74 g     F .text	00000040 os_arch_task_stack_init
2000df88 g       .bss	00000000 __bss_end__
0001bfd0 g     F .text	00000032 os_memblock_get
0000f508 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E
2000df84 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
00012884 g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
000122f8 g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
0001b518 g     F .text	00000014 hal_watchdog_tickle
0000a814 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h0697ea54608a328fE
00016158 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE
0001bbd6 g     F .text	0000007a os_eventq_get
0001eb1c g     F .text	00000020 sprintf
0001ca14 g     F .text	00000026 os_time_ms_to_ticks
00008a1c g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
000181e4 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E
0000ad3e g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000d9e8 g     O .bss	00000004 os_flags
0001e608 g     F .text	00000028 oc_rep_init
0001cd18 g     F .text	0000001a memcpy
0001d3fc g     F .text	00000044 sysinit_app
00016c80 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE
00012dce g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E
00017f70 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
0001a258 g     F .text	000000d0 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E
00014d26 g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
0001334e g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
0001a6e8 g     F .text	0000003c console_out_nolock
2000df60 g     O .bss	00000020 oc_transports
0001a9d0 g     F .text	00000078 hal_gpio_irq_init
00015770 g     F .text	00000020 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE
0000f13a g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E
0001cd86 g     F .text	00000010 strlen
0001c718 g     F .text	000000b8 os_sem_pend
0001215a g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he2e30225e051e80dE
000123d8 g     F .text	00000016 _ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE
0001d6b0 g     F .text	00000098 os_tick_idle
00013394 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00011f80 g     F .text	00000012 _ZN4core3mem4swap17h21afb25e2d195463E
00000000 g       .svc_table	00000000 SVC_Table
00013506 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
00016c66 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E
2000fe50 g       *ABS*	00000000 __HeapLimit
0001b7e8 g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
000094b6 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
00012726 g     F .text	00000012 _ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E
0000a7d4 g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
00015f4a g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
00015092 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00008158  w    F .text	00000002 MemoryManagement_Handler
0001a032 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
00015310 g     F .text	000000ba _ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE
0001bb6e g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
00015cd8 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E
00009a4c g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
000125a2 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
00015bea g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE
0001e992 g     F .text	0000000a mfg_read_tlv_mmr_ref
00008c50 g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
0001e1a0 g     F .text	000000c0 sensor_network_init
0001a032 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00017b72 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
00008cfc g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
00013404 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0001cc07 	.word	0x0001cc07
	...
    8058:	0001cc4d 	.word	0x0001cc4d
    805c:	0001cc93 	.word	0x0001cc93
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000df88 	.word	0x2000df88
    ldr    r1, =__etext
    8138:	000299ac 	.word	0x000299ac
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000df88 	.word	0x2000df88
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f012 f94f 	bl	1a810 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f013 f88a 	bl	1b71c <os_init>
    os_start();
    8608:	f013 f8e0 	bl	1b7cc <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f000 f9f8 	bl	8a0c <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f000 ffb5 	bl	958c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f64e 61e2 	movw	r1, #61154	; 0xeee2
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f64e 7318 	movw	r3, #61208	; 0xef18
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f000 fae2 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f008 fd97 	bl	11172 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f64e 61ea 	movw	r1, #61162	; 0xeeea
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f64e 7328 	movw	r3, #61224	; 0xef28
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f000 fad1 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f006 ff7d 	bl	f560 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f64e 7138 	movw	r1, #61240	; 0xef38
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f64e 7344 	movw	r3, #61252	; 0xef44
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f000 fac0 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f000 fb76 	bl	8d78 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f64e 61f2 	movw	r1, #61170	; 0xeef2
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f64e 7354 	movw	r3, #61268	; 0xef54
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f006 fd20 	bl	f0e6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f000 fb5b 	bl	8d66 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f64e 61fa 	movw	r1, #61178	; 0xeefa
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f64e 7364 	movw	r3, #61284	; 0xef64
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f000 fa9b 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f64e 7174 	movw	r1, #61300	; 0xef74
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f000 fd08 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00f ffcd 	bl	1868a <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f64e 707a 	movw	r0, #61306	; 0xef7a
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f000 fcf7 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00f ffbd 	bl	18690 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00f ffbb 	bl	18698 <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f64e 7081 	movw	r0, #61313	; 0xef81
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f000 fce0 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f000 fd02 	bl	9146 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f64e 7084 	movw	r0, #61316	; 0xef84
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f000 fcd3 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f000 fd0d 	bl	9174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f64e 708a 	movw	r0, #61322	; 0xef8a
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f000 fcc7 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f000 fd0a 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f000 fd06 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00f ff85 	bl	18690 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f002 fbf3 	bl	af7a <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f64e 718c 	movw	r1, #61324	; 0xef8c
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f000 f903 	bl	89ac <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f000 fca1 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f64e 708a 	movw	r0, #61322	; 0xef8a
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f000 fc99 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f000 fcdc 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE>:
    87d2:	b580      	push	{r7, lr}
    87d4:	b08a      	sub	sp, #40	; 0x28
    87d6:	9104      	str	r1, [sp, #16]
    87d8:	9205      	str	r2, [sp, #20]
    87da:	9308      	str	r3, [sp, #32]
    87dc:	2100      	movs	r1, #0
    87de:	f88d 101e 	strb.w	r1, [sp, #30]
    87e2:	f88d 101f 	strb.w	r1, [sp, #31]
    87e6:	2101      	movs	r1, #1
    87e8:	f88d 101f 	strb.w	r1, [sp, #31]
    87ec:	f88d 101e 	strb.w	r1, [sp, #30]
    87f0:	9904      	ldr	r1, [sp, #16]
    87f2:	2900      	cmp	r1, #0
    87f4:	9303      	str	r3, [sp, #12]
    87f6:	9002      	str	r0, [sp, #8]
    87f8:	d001      	beq.n	87fe <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x2c>
    87fa:	e7ff      	b.n	87fc <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x2a>
    87fc:	e004      	b.n	8808 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x36>
    87fe:	2000      	movs	r0, #0
    8800:	9902      	ldr	r1, [sp, #8]
    8802:	6008      	str	r0, [r1, #0]
    8804:	e01f      	b.n	8846 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x74>
    8806:	defe      	udf	#254	; 0xfe
    8808:	2000      	movs	r0, #0
    880a:	f88d 001f 	strb.w	r0, [sp, #31]
    880e:	9905      	ldr	r1, [sp, #20]
    8810:	9109      	str	r1, [sp, #36]	; 0x24
    8812:	f88d 001e 	strb.w	r0, [sp, #30]
    8816:	9106      	str	r1, [sp, #24]
    8818:	9906      	ldr	r1, [sp, #24]
    881a:	9803      	ldr	r0, [sp, #12]
    881c:	f002 fbc2 	bl	afa4 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E>
    8820:	9001      	str	r0, [sp, #4]
    8822:	9100      	str	r1, [sp, #0]
    8824:	e7ff      	b.n	8826 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x54>
    8826:	9801      	ldr	r0, [sp, #4]
    8828:	9902      	ldr	r1, [sp, #8]
    882a:	6048      	str	r0, [r1, #4]
    882c:	9a00      	ldr	r2, [sp, #0]
    882e:	608a      	str	r2, [r1, #8]
    8830:	2301      	movs	r3, #1
    8832:	600b      	str	r3, [r1, #0]
    8834:	e007      	b.n	8846 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x74>
    8836:	9804      	ldr	r0, [sp, #16]
    8838:	2801      	cmp	r0, #1
    883a:	d00c      	beq.n	8856 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x84>
    883c:	e015      	b.n	886a <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x98>
    883e:	2000      	movs	r0, #0
    8840:	f88d 001e 	strb.w	r0, [sp, #30]
    8844:	e7f7      	b.n	8836 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x64>
    8846:	f89d 001e 	ldrb.w	r0, [sp, #30]
    884a:	07c0      	lsls	r0, r0, #31
    884c:	2800      	cmp	r0, #0
    884e:	d1f6      	bne.n	883e <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x6c>
    8850:	e7f1      	b.n	8836 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x64>
    8852:	b00a      	add	sp, #40	; 0x28
    8854:	bd80      	pop	{r7, pc}
    8856:	f89d 001f 	ldrb.w	r0, [sp, #31]
    885a:	07c0      	lsls	r0, r0, #31
    885c:	2800      	cmp	r0, #0
    885e:	d0f8      	beq.n	8852 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x80>
    8860:	e7ff      	b.n	8862 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x90>
    8862:	2000      	movs	r0, #0
    8864:	f88d 001f 	strb.w	r0, [sp, #31]
    8868:	e7f3      	b.n	8852 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x80>
    886a:	e7f2      	b.n	8852 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x80>

0000886c <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE>:
    886c:	b580      	push	{r7, lr}
    886e:	b08c      	sub	sp, #48	; 0x30
    8870:	9103      	str	r1, [sp, #12]
    8872:	9204      	str	r2, [sp, #16]
    8874:	930a      	str	r3, [sp, #40]	; 0x28
    8876:	2100      	movs	r1, #0
    8878:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    887c:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    8880:	2101      	movs	r1, #1
    8882:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    8886:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    888a:	9903      	ldr	r1, [sp, #12]
    888c:	2900      	cmp	r1, #0
    888e:	9302      	str	r3, [sp, #8]
    8890:	9001      	str	r0, [sp, #4]
    8892:	d001      	beq.n	8898 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x2c>
    8894:	e7ff      	b.n	8896 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x2a>
    8896:	e004      	b.n	88a2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x36>
    8898:	2000      	movs	r0, #0
    889a:	9901      	ldr	r1, [sp, #4]
    889c:	6008      	str	r0, [r1, #0]
    889e:	e020      	b.n	88e2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x76>
    88a0:	defe      	udf	#254	; 0xfe
    88a2:	2000      	movs	r0, #0
    88a4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    88a8:	9904      	ldr	r1, [sp, #16]
    88aa:	910b      	str	r1, [sp, #44]	; 0x2c
    88ac:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    88b0:	9108      	str	r1, [sp, #32]
    88b2:	9a08      	ldr	r2, [sp, #32]
    88b4:	a805      	add	r0, sp, #20
    88b6:	9902      	ldr	r1, [sp, #8]
    88b8:	f002 fb6a 	bl	af90 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE>
    88bc:	e7ff      	b.n	88be <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x52>
    88be:	9805      	ldr	r0, [sp, #20]
    88c0:	9906      	ldr	r1, [sp, #24]
    88c2:	9a07      	ldr	r2, [sp, #28]
    88c4:	9b01      	ldr	r3, [sp, #4]
    88c6:	60da      	str	r2, [r3, #12]
    88c8:	6099      	str	r1, [r3, #8]
    88ca:	6058      	str	r0, [r3, #4]
    88cc:	2001      	movs	r0, #1
    88ce:	6018      	str	r0, [r3, #0]
    88d0:	e007      	b.n	88e2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x76>
    88d2:	9803      	ldr	r0, [sp, #12]
    88d4:	2801      	cmp	r0, #1
    88d6:	d00c      	beq.n	88f2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x86>
    88d8:	e015      	b.n	8906 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x9a>
    88da:	2000      	movs	r0, #0
    88dc:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    88e0:	e7f7      	b.n	88d2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x66>
    88e2:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    88e6:	07c0      	lsls	r0, r0, #31
    88e8:	2800      	cmp	r0, #0
    88ea:	d1f6      	bne.n	88da <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x6e>
    88ec:	e7f1      	b.n	88d2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x66>
    88ee:	b00c      	add	sp, #48	; 0x30
    88f0:	bd80      	pop	{r7, pc}
    88f2:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    88f6:	07c0      	lsls	r0, r0, #31
    88f8:	2800      	cmp	r0, #0
    88fa:	d0f8      	beq.n	88ee <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x82>
    88fc:	e7ff      	b.n	88fe <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x92>
    88fe:	2000      	movs	r0, #0
    8900:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    8904:	e7f3      	b.n	88ee <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x82>
    8906:	e7f2      	b.n	88ee <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x82>

00008908 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E>:
    8908:	b085      	sub	sp, #20
    890a:	9000      	str	r0, [sp, #0]
    890c:	2000      	movs	r0, #0
    890e:	f88d 000b 	strb.w	r0, [sp, #11]
    8912:	f88d 000a 	strb.w	r0, [sp, #10]
    8916:	2001      	movs	r0, #1
    8918:	f88d 000b 	strb.w	r0, [sp, #11]
    891c:	f88d 000a 	strb.w	r0, [sp, #10]
    8920:	9800      	ldr	r0, [sp, #0]
    8922:	2800      	cmp	r0, #0
    8924:	4601      	mov	r1, r0
    8926:	bf18      	it	ne
    8928:	2101      	movne	r1, #1
    892a:	2800      	cmp	r0, #0
    892c:	d001      	beq.n	8932 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x2a>
    892e:	e7ff      	b.n	8930 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x28>
    8930:	e005      	b.n	893e <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x36>
    8932:	2000      	movs	r0, #0
    8934:	f88d 000a 	strb.w	r0, [sp, #10]
    8938:	9001      	str	r0, [sp, #4]
    893a:	e007      	b.n	894c <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x44>
    893c:	defe      	udf	#254	; 0xfe
    893e:	2000      	movs	r0, #0
    8940:	f88d 000b 	strb.w	r0, [sp, #11]
    8944:	9800      	ldr	r0, [sp, #0]
    8946:	9004      	str	r0, [sp, #16]
    8948:	9001      	str	r0, [sp, #4]
    894a:	e7ff      	b.n	894c <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x44>
    894c:	f89d 000a 	ldrb.w	r0, [sp, #10]
    8950:	07c0      	lsls	r0, r0, #31
    8952:	2800      	cmp	r0, #0
    8954:	d104      	bne.n	8960 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x58>
    8956:	e7ff      	b.n	8958 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x50>
    8958:	9800      	ldr	r0, [sp, #0]
    895a:	2800      	cmp	r0, #0
    895c:	d107      	bne.n	896e <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x66>
    895e:	e010      	b.n	8982 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x7a>
    8960:	2000      	movs	r0, #0
    8962:	f88d 000a 	strb.w	r0, [sp, #10]
    8966:	e7f7      	b.n	8958 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x50>
    8968:	9801      	ldr	r0, [sp, #4]
    896a:	b005      	add	sp, #20
    896c:	4770      	bx	lr
    896e:	f89d 000b 	ldrb.w	r0, [sp, #11]
    8972:	07c0      	lsls	r0, r0, #31
    8974:	2800      	cmp	r0, #0
    8976:	d0f7      	beq.n	8968 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x60>
    8978:	e7ff      	b.n	897a <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x72>
    897a:	2000      	movs	r0, #0
    897c:	f88d 000b 	strb.w	r0, [sp, #11]
    8980:	e7f2      	b.n	8968 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x60>
    8982:	e7f1      	b.n	8968 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x60>

00008984 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E>:
    8984:	b084      	sub	sp, #16
    8986:	9002      	str	r0, [sp, #8]
    8988:	6801      	ldr	r1, [r0, #0]
    898a:	2900      	cmp	r1, #0
    898c:	9000      	str	r0, [sp, #0]
    898e:	d001      	beq.n	8994 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x10>
    8990:	e7ff      	b.n	8992 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0xe>
    8992:	e003      	b.n	899c <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x18>
    8994:	2000      	movs	r0, #0
    8996:	9001      	str	r0, [sp, #4]
    8998:	e005      	b.n	89a6 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x22>
    899a:	defe      	udf	#254	; 0xfe
    899c:	9800      	ldr	r0, [sp, #0]
    899e:	1d01      	adds	r1, r0, #4
    89a0:	9103      	str	r1, [sp, #12]
    89a2:	9101      	str	r1, [sp, #4]
    89a4:	e7ff      	b.n	89a6 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x22>
    89a6:	9801      	ldr	r0, [sp, #4]
    89a8:	b004      	add	sp, #16
    89aa:	4770      	bx	lr

000089ac <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E>:
    89ac:	b084      	sub	sp, #16
    89ae:	9002      	str	r0, [sp, #8]
    89b0:	9802      	ldr	r0, [sp, #8]
    89b2:	2800      	cmp	r0, #0
    89b4:	4602      	mov	r2, r0
    89b6:	bf18      	it	ne
    89b8:	2201      	movne	r2, #1
    89ba:	2800      	cmp	r0, #0
    89bc:	9101      	str	r1, [sp, #4]
    89be:	d001      	beq.n	89c4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x18>
    89c0:	e7ff      	b.n	89c2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x16>
    89c2:	e009      	b.n	89d8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x2c>
    89c4:	f64e 709c 	movw	r0, #61340	; 0xef9c
    89c8:	f2c0 0001 	movt	r0, #1
    89cc:	212b      	movs	r1, #43	; 0x2b
    89ce:	9a01      	ldr	r2, [sp, #4]
    89d0:	f00f fe64 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    89d4:	defe      	udf	#254	; 0xfe
    89d6:	defe      	udf	#254	; 0xfe
    89d8:	9802      	ldr	r0, [sp, #8]
    89da:	9003      	str	r0, [sp, #12]
    89dc:	9902      	ldr	r1, [sp, #8]
    89de:	2900      	cmp	r1, #0
    89e0:	9000      	str	r0, [sp, #0]
    89e2:	d003      	beq.n	89ec <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x40>
    89e4:	e7ff      	b.n	89e6 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x3a>
    89e6:	9800      	ldr	r0, [sp, #0]
    89e8:	b004      	add	sp, #16
    89ea:	4770      	bx	lr
    89ec:	e7fb      	b.n	89e6 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x3a>

000089ee <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc4148eaa15af1e8eE>:
    89ee:	b081      	sub	sp, #4
    89f0:	2100      	movs	r1, #0
    89f2:	6001      	str	r1, [r0, #0]
    89f4:	b001      	add	sp, #4
    89f6:	4770      	bx	lr

000089f8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E>:
    89f8:	b580      	push	{r7, lr}
    89fa:	b082      	sub	sp, #8
    89fc:	9001      	str	r0, [sp, #4]
    89fe:	f7ff ff83 	bl	8908 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E>
    8a02:	9000      	str	r0, [sp, #0]
    8a04:	e7ff      	b.n	8a06 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E+0xe>
    8a06:	9800      	ldr	r0, [sp, #0]
    8a08:	b002      	add	sp, #8
    8a0a:	bd80      	pop	{r7, pc}

00008a0c <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    8a0c:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    8a0e:	f014 fcd5 	bl	1d3bc <rust_sysinit>
    8a12:	e7ff      	b.n	8a14 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    8a14:	f000 fbb6 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8a18:	e7ff      	b.n	8a1a <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    8a1a:	bd80      	pop	{r7, pc}

00008a1c <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    8a1c:	b580      	push	{r7, lr}
    8a1e:	b086      	sub	sp, #24
    8a20:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    8a22:	7801      	ldrb	r1, [r0, #0]
    8a24:	07ca      	lsls	r2, r1, #31
    8a26:	2a00      	cmp	r2, #0
    8a28:	9000      	str	r0, [sp, #0]
    8a2a:	d006      	beq.n	8a3a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    8a2c:	e7ff      	b.n	8a2e <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    8a2e:	9800      	ldr	r0, [sp, #0]
    8a30:	6841      	ldr	r1, [r0, #4]
    8a32:	9103      	str	r1, [sp, #12]
    8a34:	9101      	str	r1, [sp, #4]
        match self.rep {
    8a36:	e00c      	b.n	8a52 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    8a38:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    8a3a:	9800      	ldr	r0, [sp, #0]
    8a3c:	6841      	ldr	r1, [r0, #4]
    8a3e:	6882      	ldr	r2, [r0, #8]
    8a40:	9104      	str	r1, [sp, #16]
    8a42:	9205      	str	r2, [sp, #20]
    8a44:	4608      	mov	r0, r1
    8a46:	4611      	mov	r1, r2
    8a48:	f00a f88c 	bl	12b64 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8a4c:	9001      	str	r0, [sp, #4]
    8a4e:	e7ff      	b.n	8a50 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    8a50:	e7ff      	b.n	8a52 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    8a52:	9801      	ldr	r0, [sp, #4]
    8a54:	b006      	add	sp, #24
    8a56:	bd80      	pop	{r7, pc}

00008a58 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    8a58:	b5b0      	push	{r4, r5, r7, lr}
    8a5a:	b0b2      	sub	sp, #200	; 0xc8
    8a5c:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    8a5e:	7801      	ldrb	r1, [r0, #0]
    8a60:	07ca      	lsls	r2, r1, #31
    8a62:	2a00      	cmp	r2, #0
    8a64:	900e      	str	r0, [sp, #56]	; 0x38
    8a66:	d005      	beq.n	8a74 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    8a68:	e7ff      	b.n	8a6a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    8a6a:	980e      	ldr	r0, [sp, #56]	; 0x38
    8a6c:	6841      	ldr	r1, [r0, #4]
    8a6e:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    8a70:	e096      	b.n	8ba0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    8a72:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    8a74:	980e      	ldr	r0, [sp, #56]	; 0x38
    8a76:	6841      	ldr	r1, [r0, #4]
    8a78:	6882      	ldr	r2, [r0, #8]
    8a7a:	912b      	str	r1, [sp, #172]	; 0xac
    8a7c:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8a7e:	4608      	mov	r0, r1
    8a80:	4611      	mov	r1, r2
    8a82:	f000 faba 	bl	8ffa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    8a86:	9011      	str	r0, [sp, #68]	; 0x44
    8a88:	e7ff      	b.n	8a8a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    8a8a:	f64e 70cc 	movw	r0, #61388	; 0xefcc
    8a8e:	f2c0 0001 	movt	r0, #1
    8a92:	6800      	ldr	r0, [r0, #0]
    8a94:	a911      	add	r1, sp, #68	; 0x44
    8a96:	910f      	str	r1, [sp, #60]	; 0x3c
    8a98:	9010      	str	r0, [sp, #64]	; 0x40
    8a9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8a9c:	902d      	str	r0, [sp, #180]	; 0xb4
    8a9e:	9910      	ldr	r1, [sp, #64]	; 0x40
    8aa0:	912e      	str	r1, [sp, #184]	; 0xb8
    8aa2:	900d      	str	r0, [sp, #52]	; 0x34
    8aa4:	910c      	str	r1, [sp, #48]	; 0x30
    8aa6:	f000 fc46 	bl	9336 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    8aaa:	900b      	str	r0, [sp, #44]	; 0x2c
    8aac:	e7ff      	b.n	8aae <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    8aae:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ab0:	07c1      	lsls	r1, r0, #31
    8ab2:	2900      	cmp	r1, #0
    8ab4:	d001      	beq.n	8aba <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    8ab6:	e7ff      	b.n	8ab8 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    8ab8:	e072      	b.n	8ba0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8aba:	f24f 0024 	movw	r0, #61476	; 0xf024
    8abe:	f2c0 0001 	movt	r0, #1
    8ac2:	6801      	ldr	r1, [r0, #0]
    8ac4:	980d      	ldr	r0, [sp, #52]	; 0x34
    8ac6:	9021      	str	r0, [sp, #132]	; 0x84
    8ac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8aca:	9222      	str	r2, [sp, #136]	; 0x88
    8acc:	f24f 0338 	movw	r3, #61496	; 0xf038
    8ad0:	f2c0 0301 	movt	r3, #1
    8ad4:	681b      	ldr	r3, [r3, #0]
    8ad6:	f24f 0c3c 	movw	ip, #61500	; 0xf03c
    8ada:	f2c0 0c01 	movt	ip, #1
    8ade:	f8dc c000 	ldr.w	ip, [ip]
    8ae2:	46ee      	mov	lr, sp
    8ae4:	2400      	movs	r4, #0
    8ae6:	f8ce 4000 	str.w	r4, [lr]
    8aea:	a823      	add	r0, sp, #140	; 0x8c
    8aec:	2201      	movs	r2, #1
    8aee:	910a      	str	r1, [sp, #40]	; 0x28
    8af0:	4619      	mov	r1, r3
    8af2:	4663      	mov	r3, ip
    8af4:	f000 f856 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8af8:	e7ff      	b.n	8afa <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    8afa:	a821      	add	r0, sp, #132	; 0x84
    8afc:	901e      	str	r0, [sp, #120]	; 0x78
    8afe:	a822      	add	r0, sp, #136	; 0x88
    8b00:	901f      	str	r0, [sp, #124]	; 0x7c
    8b02:	a823      	add	r0, sp, #140	; 0x8c
    8b04:	9020      	str	r0, [sp, #128]	; 0x80
    8b06:	981e      	ldr	r0, [sp, #120]	; 0x78
    8b08:	902f      	str	r0, [sp, #188]	; 0xbc
    8b0a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8b0c:	9130      	str	r1, [sp, #192]	; 0xc0
    8b0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8b10:	9231      	str	r2, [sp, #196]	; 0xc4
    8b12:	f249 13ef 	movw	r3, #37359	; 0x91ef
    8b16:	f2c0 0300 	movt	r3, #0
    8b1a:	9109      	str	r1, [sp, #36]	; 0x24
    8b1c:	4619      	mov	r1, r3
    8b1e:	9208      	str	r2, [sp, #32]
    8b20:	f000 fcb4 	bl	948c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8b24:	9007      	str	r0, [sp, #28]
    8b26:	9106      	str	r1, [sp, #24]
    8b28:	e7ff      	b.n	8b2a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    8b2a:	f249 11ef 	movw	r1, #37359	; 0x91ef
    8b2e:	f2c0 0100 	movt	r1, #0
    8b32:	9809      	ldr	r0, [sp, #36]	; 0x24
    8b34:	f000 fcaa 	bl	948c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8b38:	9005      	str	r0, [sp, #20]
    8b3a:	9104      	str	r1, [sp, #16]
    8b3c:	e7ff      	b.n	8b3e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    8b3e:	f648 416b 	movw	r1, #35947	; 0x8c6b
    8b42:	f2c0 0101 	movt	r1, #1
    8b46:	9808      	ldr	r0, [sp, #32]
    8b48:	f000 fcca 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8b4c:	9003      	str	r0, [sp, #12]
    8b4e:	9102      	str	r1, [sp, #8]
    8b50:	e7ff      	b.n	8b52 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    8b52:	9807      	ldr	r0, [sp, #28]
    8b54:	9018      	str	r0, [sp, #96]	; 0x60
    8b56:	9906      	ldr	r1, [sp, #24]
    8b58:	9119      	str	r1, [sp, #100]	; 0x64
    8b5a:	9a05      	ldr	r2, [sp, #20]
    8b5c:	921a      	str	r2, [sp, #104]	; 0x68
    8b5e:	9b04      	ldr	r3, [sp, #16]
    8b60:	931b      	str	r3, [sp, #108]	; 0x6c
    8b62:	f8dd c00c 	ldr.w	ip, [sp, #12]
    8b66:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    8b6a:	f8dd e008 	ldr.w	lr, [sp, #8]
    8b6e:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    8b72:	466c      	mov	r4, sp
    8b74:	2503      	movs	r5, #3
    8b76:	6025      	str	r5, [r4, #0]
    8b78:	a812      	add	r0, sp, #72	; 0x48
    8b7a:	ab18      	add	r3, sp, #96	; 0x60
    8b7c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8b7e:	462a      	mov	r2, r5
    8b80:	f000 f810 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8b84:	e7ff      	b.n	8b86 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    8b86:	f24f 0058 	movw	r0, #61528	; 0xf058
    8b8a:	f2c0 0001 	movt	r0, #1
    8b8e:	f00f fd7e 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8b92:	9001      	str	r0, [sp, #4]
    8b94:	e7ff      	b.n	8b96 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    8b96:	a812      	add	r0, sp, #72	; 0x48
    8b98:	9901      	ldr	r1, [sp, #4]
    8b9a:	f00f fdb5 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8b9e:	defe      	udf	#254	; 0xfe
    }
    8ba0:	b032      	add	sp, #200	; 0xc8
    8ba2:	bdb0      	pop	{r4, r5, r7, pc}

00008ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    8ba4:	b580      	push	{r7, lr}
    8ba6:	b086      	sub	sp, #24
    8ba8:	f8dd c020 	ldr.w	ip, [sp, #32]
    8bac:	9102      	str	r1, [sp, #8]
    8bae:	9203      	str	r2, [sp, #12]
    8bb0:	9304      	str	r3, [sp, #16]
    8bb2:	f8cd c014 	str.w	ip, [sp, #20]
    8bb6:	f04f 0e00 	mov.w	lr, #0
    8bba:	f8cd e004 	str.w	lr, [sp, #4]
    8bbe:	f8cd e000 	str.w	lr, [sp]
    8bc2:	f8cd e000 	str.w	lr, [sp]
    8bc6:	6001      	str	r1, [r0, #0]
    8bc8:	6042      	str	r2, [r0, #4]
    8bca:	9900      	ldr	r1, [sp, #0]
    8bcc:	9a01      	ldr	r2, [sp, #4]
    8bce:	6081      	str	r1, [r0, #8]
    8bd0:	60c2      	str	r2, [r0, #12]
    8bd2:	6103      	str	r3, [r0, #16]
    8bd4:	f8c0 c014 	str.w	ip, [r0, #20]
    8bd8:	b006      	add	sp, #24
    8bda:	bd80      	pop	{r7, pc}

00008bdc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    8bdc:	b082      	sub	sp, #8
    8bde:	9001      	str	r0, [sp, #4]
    8be0:	7800      	ldrb	r0, [r0, #0]
    8be2:	07c0      	lsls	r0, r0, #31
    8be4:	2800      	cmp	r0, #0
    8be6:	d004      	beq.n	8bf2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    8be8:	e7ff      	b.n	8bea <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    8bea:	2000      	movs	r0, #0
    8bec:	f88d 0003 	strb.w	r0, [sp, #3]
    8bf0:	e003      	b.n	8bfa <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8bf2:	2001      	movs	r0, #1
    8bf4:	f88d 0003 	strb.w	r0, [sp, #3]
    8bf8:	e7ff      	b.n	8bfa <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8bfa:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8bfe:	b002      	add	sp, #8
    8c00:	4770      	bx	lr

00008c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    8c02:	b08a      	sub	sp, #40	; 0x28
    8c04:	9005      	str	r0, [sp, #20]
    8c06:	9107      	str	r1, [sp, #28]
    8c08:	9208      	str	r2, [sp, #32]
    8c0a:	9805      	ldr	r0, [sp, #20]
    8c0c:	f1b0 0c01 	subs.w	ip, r0, #1
    8c10:	bf18      	it	ne
    8c12:	f04f 0c01 	movne.w	ip, #1
    8c16:	2801      	cmp	r0, #1
    8c18:	9304      	str	r3, [sp, #16]
    8c1a:	9203      	str	r2, [sp, #12]
    8c1c:	9102      	str	r1, [sp, #8]
    8c1e:	d010      	beq.n	8c42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    8c20:	e7ff      	b.n	8c22 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    8c22:	9805      	ldr	r0, [sp, #20]
    8c24:	9006      	str	r0, [sp, #24]
    8c26:	4668      	mov	r0, sp
    8c28:	9904      	ldr	r1, [sp, #16]
    8c2a:	6001      	str	r1, [r0, #0]
    8c2c:	f24f 0368 	movw	r3, #61544	; 0xf068
    8c30:	f2c0 0301 	movt	r3, #1
    8c34:	aa06      	add	r2, sp, #24
    8c36:	9802      	ldr	r0, [sp, #8]
    8c38:	9903      	ldr	r1, [sp, #12]
    8c3a:	f00f fd01 	bl	18640 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    8c3e:	defe      	udf	#254	; 0xfe
    8c40:	defe      	udf	#254	; 0xfe
    8c42:	9805      	ldr	r0, [sp, #20]
    8c44:	2801      	cmp	r0, #1
    8c46:	d102      	bne.n	8c4e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    8c48:	e7ff      	b.n	8c4a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    8c4a:	b00a      	add	sp, #40	; 0x28
    8c4c:	4770      	bx	lr
    8c4e:	e7fc      	b.n	8c4a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

00008c50 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    8c50:	b580      	push	{r7, lr}
    8c52:	b082      	sub	sp, #8
    8c54:	9001      	str	r0, [sp, #4]
    8c56:	f7ff ffc1 	bl	8bdc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    8c5a:	9000      	str	r0, [sp, #0]
    8c5c:	e7ff      	b.n	8c5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    8c5e:	2001      	movs	r0, #1
    8c60:	9900      	ldr	r1, [sp, #0]
    8c62:	4388      	bics	r0, r1
    8c64:	b002      	add	sp, #8
    8c66:	bd80      	pop	{r7, pc}

00008c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    8c68:	b082      	sub	sp, #8
    8c6a:	9001      	str	r0, [sp, #4]
    8c6c:	9000      	str	r0, [sp, #0]
    8c6e:	9800      	ldr	r0, [sp, #0]
    8c70:	b002      	add	sp, #8
    8c72:	4770      	bx	lr

00008c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    8c74:	b081      	sub	sp, #4
    8c76:	4601      	mov	r1, r0
    8c78:	f88d 0003 	strb.w	r0, [sp, #3]
    8c7c:	b001      	add	sp, #4
    8c7e:	4770      	bx	lr

00008c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    8c80:	b081      	sub	sp, #4
    8c82:	9000      	str	r0, [sp, #0]
    8c84:	b001      	add	sp, #4
    8c86:	4770      	bx	lr

00008c88 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    8c88:	b580      	push	{r7, lr}
    8c8a:	b08a      	sub	sp, #40	; 0x28
    8c8c:	9007      	str	r0, [sp, #28]
    8c8e:	9108      	str	r1, [sp, #32]
    8c90:	9209      	str	r2, [sp, #36]	; 0x24
    8c92:	2300      	movs	r3, #0
    8c94:	9305      	str	r3, [sp, #20]
    8c96:	9006      	str	r0, [sp, #24]
    8c98:	9805      	ldr	r0, [sp, #20]
    8c9a:	9b06      	ldr	r3, [sp, #24]
    8c9c:	9104      	str	r1, [sp, #16]
    8c9e:	4619      	mov	r1, r3
    8ca0:	9b04      	ldr	r3, [sp, #16]
    8ca2:	9203      	str	r2, [sp, #12]
    8ca4:	461a      	mov	r2, r3
    8ca6:	9b03      	ldr	r3, [sp, #12]
    8ca8:	f000 f828 	bl	8cfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    8cac:	9002      	str	r0, [sp, #8]
    8cae:	9101      	str	r1, [sp, #4]
    8cb0:	e7ff      	b.n	8cb2 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    8cb2:	9802      	ldr	r0, [sp, #8]
    8cb4:	9901      	ldr	r1, [sp, #4]
    8cb6:	b00a      	add	sp, #40	; 0x28
    8cb8:	bd80      	pop	{r7, pc}

00008cba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    8cba:	b580      	push	{r7, lr}
    8cbc:	b08a      	sub	sp, #40	; 0x28
    8cbe:	9006      	str	r0, [sp, #24]
    8cc0:	9107      	str	r1, [sp, #28]
    8cc2:	9208      	str	r2, [sp, #32]
    8cc4:	9309      	str	r3, [sp, #36]	; 0x24
    8cc6:	9005      	str	r0, [sp, #20]
    8cc8:	4610      	mov	r0, r2
    8cca:	9104      	str	r1, [sp, #16]
    8ccc:	4619      	mov	r1, r3
    8cce:	f009 ff2a 	bl	12b26 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8cd2:	9003      	str	r0, [sp, #12]
    8cd4:	e7ff      	b.n	8cd6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    8cd6:	9803      	ldr	r0, [sp, #12]
    8cd8:	9905      	ldr	r1, [sp, #20]
    8cda:	f009 feab 	bl	12a34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    8cde:	9002      	str	r0, [sp, #8]
    8ce0:	e7ff      	b.n	8ce2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    8ce2:	9804      	ldr	r0, [sp, #16]
    8ce4:	9905      	ldr	r1, [sp, #20]
    8ce6:	1a41      	subs	r1, r0, r1
    8ce8:	9802      	ldr	r0, [sp, #8]
    8cea:	f000 f8b7 	bl	8e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    8cee:	9001      	str	r0, [sp, #4]
    8cf0:	9100      	str	r1, [sp, #0]
    8cf2:	e7ff      	b.n	8cf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    8cf4:	9801      	ldr	r0, [sp, #4]
    8cf6:	9900      	ldr	r1, [sp, #0]
    8cf8:	b00a      	add	sp, #40	; 0x28
    8cfa:	bd80      	pop	{r7, pc}

00008cfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    8cfc:	b580      	push	{r7, lr}
    8cfe:	b08c      	sub	sp, #48	; 0x30
    8d00:	9008      	str	r0, [sp, #32]
    8d02:	9109      	str	r1, [sp, #36]	; 0x24
    8d04:	920a      	str	r2, [sp, #40]	; 0x28
    8d06:	930b      	str	r3, [sp, #44]	; 0x2c
    8d08:	4288      	cmp	r0, r1
    8d0a:	9307      	str	r3, [sp, #28]
    8d0c:	9206      	str	r2, [sp, #24]
    8d0e:	9105      	str	r1, [sp, #20]
    8d10:	9004      	str	r0, [sp, #16]
    8d12:	d806      	bhi.n	8d22 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    8d14:	e7ff      	b.n	8d16 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    8d16:	9806      	ldr	r0, [sp, #24]
    8d18:	9907      	ldr	r1, [sp, #28]
    8d1a:	f009 ff1b 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d1e:	9003      	str	r0, [sp, #12]
    8d20:	e004      	b.n	8d2c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    8d22:	9804      	ldr	r0, [sp, #16]
    8d24:	9905      	ldr	r1, [sp, #20]
    8d26:	f010 fc2e 	bl	19586 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    8d2a:	defe      	udf	#254	; 0xfe
    8d2c:	9805      	ldr	r0, [sp, #20]
    8d2e:	9903      	ldr	r1, [sp, #12]
    8d30:	4288      	cmp	r0, r1
    8d32:	d809      	bhi.n	8d48 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    8d34:	e7ff      	b.n	8d36 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    8d36:	9804      	ldr	r0, [sp, #16]
    8d38:	9905      	ldr	r1, [sp, #20]
    8d3a:	9a06      	ldr	r2, [sp, #24]
    8d3c:	9b07      	ldr	r3, [sp, #28]
    8d3e:	f7ff ffbc 	bl	8cba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    8d42:	9002      	str	r0, [sp, #8]
    8d44:	9101      	str	r1, [sp, #4]
    8d46:	e00a      	b.n	8d5e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    8d48:	9806      	ldr	r0, [sp, #24]
    8d4a:	9907      	ldr	r1, [sp, #28]
    8d4c:	f009 ff02 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d50:	9000      	str	r0, [sp, #0]
    8d52:	e7ff      	b.n	8d54 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    8d54:	9805      	ldr	r0, [sp, #20]
    8d56:	9900      	ldr	r1, [sp, #0]
    8d58:	f010 fbf3 	bl	19542 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    8d5c:	defe      	udf	#254	; 0xfe
    8d5e:	9802      	ldr	r0, [sp, #8]
    8d60:	9901      	ldr	r1, [sp, #4]
    8d62:	b00c      	add	sp, #48	; 0x30
    8d64:	bd80      	pop	{r7, pc}

00008d66 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8d66:	b580      	push	{r7, lr}
    8d68:	b082      	sub	sp, #8
    8d6a:	9001      	str	r0, [sp, #4]
    8d6c:	f012 ff70 	bl	1bc50 <os_eventq_run>
    8d70:	e7ff      	b.n	8d72 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    8d72:	2001      	movs	r0, #1
    8d74:	b002      	add	sp, #8
    8d76:	bd80      	pop	{r7, pc}

00008d78 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8d78:	b580      	push	{r7, lr}
    8d7a:	b084      	sub	sp, #16
    8d7c:	9002      	str	r0, [sp, #8]
    8d7e:	f012 ff93 	bl	1bca8 <os_eventq_dflt_get>
    8d82:	4601      	mov	r1, r0
    8d84:	9003      	str	r0, [sp, #12]
    8d86:	9101      	str	r1, [sp, #4]
    8d88:	e7ff      	b.n	8d8a <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    8d8a:	9801      	ldr	r0, [sp, #4]
    8d8c:	9902      	ldr	r1, [sp, #8]
    8d8e:	6048      	str	r0, [r1, #4]
    8d90:	2200      	movs	r2, #0
    8d92:	600a      	str	r2, [r1, #0]
    8d94:	b004      	add	sp, #16
    8d96:	bd80      	pop	{r7, pc}

00008d98 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8d98:	b570      	push	{r4, r5, r6, lr}
    8d9a:	b09c      	sub	sp, #112	; 0x70
    8d9c:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    8da0:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    8da4:	9c22      	ldr	r4, [sp, #136]	; 0x88
    8da6:	9d21      	ldr	r5, [sp, #132]	; 0x84
    8da8:	9e20      	ldr	r6, [sp, #128]	; 0x80
    8daa:	9013      	str	r0, [sp, #76]	; 0x4c
    8dac:	9114      	str	r1, [sp, #80]	; 0x50
    8dae:	9215      	str	r2, [sp, #84]	; 0x54
    8db0:	9316      	str	r3, [sp, #88]	; 0x58
    8db2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    8db6:	9418      	str	r4, [sp, #96]	; 0x60
    8db8:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    8dbc:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    8dc0:	9011      	str	r0, [sp, #68]	; 0x44
    8dc2:	4608      	mov	r0, r1
    8dc4:	9310      	str	r3, [sp, #64]	; 0x40
    8dc6:	920f      	str	r2, [sp, #60]	; 0x3c
    8dc8:	910e      	str	r1, [sp, #56]	; 0x38
    8dca:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8dce:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    8dd2:	940b      	str	r4, [sp, #44]	; 0x2c
    8dd4:	950a      	str	r5, [sp, #40]	; 0x28
    8dd6:	9609      	str	r6, [sp, #36]	; 0x24
    8dd8:	f7ff fe3e 	bl	8a58 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    8ddc:	e7ff      	b.n	8dde <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    8dde:	980e      	ldr	r0, [sp, #56]	; 0x38
    8de0:	f7ff fe1c 	bl	8a1c <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    8de4:	9008      	str	r0, [sp, #32]
    8de6:	e7ff      	b.n	8de8 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    8de8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8dea:	990c      	ldr	r1, [sp, #48]	; 0x30
    8dec:	f000 f93b 	bl	9066 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    8df0:	9007      	str	r0, [sp, #28]
    8df2:	e7ff      	b.n	8df4 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    8df4:	980d      	ldr	r0, [sp, #52]	; 0x34
    8df6:	b281      	uxth	r1, r0
    8df8:	466a      	mov	r2, sp
    8dfa:	60d1      	str	r1, [r2, #12]
    8dfc:	9907      	ldr	r1, [sp, #28]
    8dfe:	6091      	str	r1, [r2, #8]
    8e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e02:	6053      	str	r3, [r2, #4]
    8e04:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    8e08:	fa5f fe8c 	uxtb.w	lr, ip
    8e0c:	f8c2 e000 	str.w	lr, [r2]
    8e10:	9811      	ldr	r0, [sp, #68]	; 0x44
    8e12:	9908      	ldr	r1, [sp, #32]
    8e14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8e16:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8e18:	f013 fce6 	bl	1c7e8 <os_task_init>
    8e1c:	4601      	mov	r1, r0
    8e1e:	901b      	str	r0, [sp, #108]	; 0x6c
    8e20:	9106      	str	r1, [sp, #24]
    8e22:	e7ff      	b.n	8e24 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    8e24:	9806      	ldr	r0, [sp, #24]
    8e26:	2800      	cmp	r0, #0
    8e28:	d005      	beq.n	8e36 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    8e2a:	e7ff      	b.n	8e2c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    8e2c:	9806      	ldr	r0, [sp, #24]
    8e2e:	f00a fabe 	bl	133ae <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    8e32:	9005      	str	r0, [sp, #20]
    8e34:	e004      	b.n	8e40 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    8e36:	2000      	movs	r0, #0
    8e38:	9012      	str	r0, [sp, #72]	; 0x48
    8e3a:	2001      	movs	r0, #1
    8e3c:	9012      	str	r0, [sp, #72]	; 0x48
    8e3e:	e002      	b.n	8e46 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8e40:	9805      	ldr	r0, [sp, #20]
    8e42:	9012      	str	r0, [sp, #72]	; 0x48
    8e44:	e7ff      	b.n	8e46 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8e46:	9812      	ldr	r0, [sp, #72]	; 0x48
    8e48:	b01c      	add	sp, #112	; 0x70
    8e4a:	bd70      	pop	{r4, r5, r6, pc}

00008e4c <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    8e4c:	b081      	sub	sp, #4
    8e4e:	9000      	str	r0, [sp, #0]
    8e50:	b001      	add	sp, #4
    8e52:	4770      	bx	lr

00008e54 <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    8e54:	b081      	sub	sp, #4
    8e56:	9000      	str	r0, [sp, #0]
    8e58:	b001      	add	sp, #4
    8e5a:	4770      	bx	lr

00008e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    8e5c:	b580      	push	{r7, lr}
    8e5e:	b084      	sub	sp, #16
    8e60:	9002      	str	r0, [sp, #8]
    8e62:	9103      	str	r1, [sp, #12]
    8e64:	f000 f993 	bl	918e <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    8e68:	9001      	str	r0, [sp, #4]
    8e6a:	9100      	str	r1, [sp, #0]
    8e6c:	e7ff      	b.n	8e6e <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    8e6e:	9801      	ldr	r0, [sp, #4]
    8e70:	9900      	ldr	r1, [sp, #0]
    8e72:	b004      	add	sp, #16
    8e74:	bd80      	pop	{r7, pc}

00008e76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    8e76:	b5b0      	push	{r4, r5, r7, lr}
    8e78:	b0b8      	sub	sp, #224	; 0xe0
    8e7a:	902f      	str	r0, [sp, #188]	; 0xbc
    8e7c:	9130      	str	r1, [sp, #192]	; 0xc0
    8e7e:	9231      	str	r2, [sp, #196]	; 0xc4
    8e80:	9332      	str	r3, [sp, #200]	; 0xc8
    8e82:	9013      	str	r0, [sp, #76]	; 0x4c
    8e84:	9112      	str	r1, [sp, #72]	; 0x48
    8e86:	9311      	str	r3, [sp, #68]	; 0x44
    8e88:	9210      	str	r2, [sp, #64]	; 0x40
    8e8a:	f009 fe63 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8e8e:	9016      	str	r0, [sp, #88]	; 0x58
    8e90:	e7ff      	b.n	8e92 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    8e92:	9810      	ldr	r0, [sp, #64]	; 0x40
    8e94:	9911      	ldr	r1, [sp, #68]	; 0x44
    8e96:	f009 fe5d 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8e9a:	9017      	str	r0, [sp, #92]	; 0x5c
    8e9c:	e7ff      	b.n	8e9e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    8e9e:	a816      	add	r0, sp, #88	; 0x58
    8ea0:	9014      	str	r0, [sp, #80]	; 0x50
    8ea2:	a817      	add	r0, sp, #92	; 0x5c
    8ea4:	9015      	str	r0, [sp, #84]	; 0x54
    8ea6:	9814      	ldr	r0, [sp, #80]	; 0x50
    8ea8:	9033      	str	r0, [sp, #204]	; 0xcc
    8eaa:	9915      	ldr	r1, [sp, #84]	; 0x54
    8eac:	9134      	str	r1, [sp, #208]	; 0xd0
    8eae:	6802      	ldr	r2, [r0, #0]
    8eb0:	680b      	ldr	r3, [r1, #0]
    8eb2:	429a      	cmp	r2, r3
    8eb4:	900f      	str	r0, [sp, #60]	; 0x3c
    8eb6:	910e      	str	r1, [sp, #56]	; 0x38
    8eb8:	d106      	bne.n	8ec8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    8eba:	e7ff      	b.n	8ebc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    8ebc:	9810      	ldr	r0, [sp, #64]	; 0x40
    8ebe:	9911      	ldr	r1, [sp, #68]	; 0x44
    8ec0:	f009 fe50 	bl	12b64 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8ec4:	900d      	str	r0, [sp, #52]	; 0x34
    8ec6:	e072      	b.n	8fae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    8ec8:	f24f 00cc 	movw	r0, #61644	; 0xf0cc
    8ecc:	f2c0 0001 	movt	r0, #1
    8ed0:	6801      	ldr	r1, [r0, #0]
    8ed2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8ed4:	9027      	str	r0, [sp, #156]	; 0x9c
    8ed6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8ed8:	9228      	str	r2, [sp, #160]	; 0xa0
    8eda:	f24f 130c 	movw	r3, #61708	; 0xf10c
    8ede:	f2c0 0301 	movt	r3, #1
    8ee2:	681b      	ldr	r3, [r3, #0]
    8ee4:	f24f 1c10 	movw	ip, #61712	; 0xf110
    8ee8:	f2c0 0c01 	movt	ip, #1
    8eec:	f8dc c000 	ldr.w	ip, [ip]
    8ef0:	46ee      	mov	lr, sp
    8ef2:	2400      	movs	r4, #0
    8ef4:	f8ce 4000 	str.w	r4, [lr]
    8ef8:	a829      	add	r0, sp, #164	; 0xa4
    8efa:	2201      	movs	r2, #1
    8efc:	910c      	str	r1, [sp, #48]	; 0x30
    8efe:	4619      	mov	r1, r3
    8f00:	4663      	mov	r3, ip
    8f02:	f7ff fe4f 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8f06:	e7ff      	b.n	8f08 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    8f08:	a827      	add	r0, sp, #156	; 0x9c
    8f0a:	9024      	str	r0, [sp, #144]	; 0x90
    8f0c:	a828      	add	r0, sp, #160	; 0xa0
    8f0e:	9025      	str	r0, [sp, #148]	; 0x94
    8f10:	a829      	add	r0, sp, #164	; 0xa4
    8f12:	9026      	str	r0, [sp, #152]	; 0x98
    8f14:	9824      	ldr	r0, [sp, #144]	; 0x90
    8f16:	9035      	str	r0, [sp, #212]	; 0xd4
    8f18:	9925      	ldr	r1, [sp, #148]	; 0x94
    8f1a:	9136      	str	r1, [sp, #216]	; 0xd8
    8f1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8f1e:	9237      	str	r2, [sp, #220]	; 0xdc
    8f20:	f243 2381 	movw	r3, #12929	; 0x3281
    8f24:	f2c0 0301 	movt	r3, #1
    8f28:	910b      	str	r1, [sp, #44]	; 0x2c
    8f2a:	4619      	mov	r1, r3
    8f2c:	920a      	str	r2, [sp, #40]	; 0x28
    8f2e:	f00a f9b5 	bl	1329c <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8f32:	9009      	str	r0, [sp, #36]	; 0x24
    8f34:	9108      	str	r1, [sp, #32]
    8f36:	e7ff      	b.n	8f38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    8f38:	f243 2181 	movw	r1, #12929	; 0x3281
    8f3c:	f2c0 0101 	movt	r1, #1
    8f40:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8f42:	f00a f9ab 	bl	1329c <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8f46:	9007      	str	r0, [sp, #28]
    8f48:	9106      	str	r1, [sp, #24]
    8f4a:	e7ff      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    8f4c:	f648 416b 	movw	r1, #35947	; 0x8c6b
    8f50:	f2c0 0101 	movt	r1, #1
    8f54:	980a      	ldr	r0, [sp, #40]	; 0x28
    8f56:	f000 fac3 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8f5a:	9005      	str	r0, [sp, #20]
    8f5c:	9104      	str	r1, [sp, #16]
    8f5e:	e7ff      	b.n	8f60 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    8f60:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f62:	901e      	str	r0, [sp, #120]	; 0x78
    8f64:	9908      	ldr	r1, [sp, #32]
    8f66:	911f      	str	r1, [sp, #124]	; 0x7c
    8f68:	9a07      	ldr	r2, [sp, #28]
    8f6a:	9220      	str	r2, [sp, #128]	; 0x80
    8f6c:	9b06      	ldr	r3, [sp, #24]
    8f6e:	9321      	str	r3, [sp, #132]	; 0x84
    8f70:	f8dd c014 	ldr.w	ip, [sp, #20]
    8f74:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    8f78:	f8dd e010 	ldr.w	lr, [sp, #16]
    8f7c:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    8f80:	466c      	mov	r4, sp
    8f82:	2503      	movs	r5, #3
    8f84:	6025      	str	r5, [r4, #0]
    8f86:	a818      	add	r0, sp, #96	; 0x60
    8f88:	ab1e      	add	r3, sp, #120	; 0x78
    8f8a:	990c      	ldr	r1, [sp, #48]	; 0x30
    8f8c:	462a      	mov	r2, r5
    8f8e:	f7ff fe09 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8f92:	e7ff      	b.n	8f94 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    8f94:	f24f 1060 	movw	r0, #61792	; 0xf160
    8f98:	f2c0 0001 	movt	r0, #1
    8f9c:	f00f fb77 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8fa0:	9003      	str	r0, [sp, #12]
    8fa2:	e7ff      	b.n	8fa4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    8fa4:	a818      	add	r0, sp, #96	; 0x60
    8fa6:	9903      	ldr	r1, [sp, #12]
    8fa8:	f00f fbae 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8fac:	defe      	udf	#254	; 0xfe
    8fae:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8fb0:	9912      	ldr	r1, [sp, #72]	; 0x48
    8fb2:	f009 fdb8 	bl	12b26 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8fb6:	9002      	str	r0, [sp, #8]
    8fb8:	e7ff      	b.n	8fba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    8fba:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8fbc:	9912      	ldr	r1, [sp, #72]	; 0x48
    8fbe:	f009 fdc9 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8fc2:	9001      	str	r0, [sp, #4]
    8fc4:	e7ff      	b.n	8fc6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    8fc6:	980d      	ldr	r0, [sp, #52]	; 0x34
    8fc8:	9902      	ldr	r1, [sp, #8]
    8fca:	9a01      	ldr	r2, [sp, #4]
    8fcc:	f009 fbce 	bl	1276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    8fd0:	e7ff      	b.n	8fd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    8fd2:	b038      	add	sp, #224	; 0xe0
    8fd4:	bdb0      	pop	{r4, r5, r7, pc}

00008fd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    8fd6:	b580      	push	{r7, lr}
    8fd8:	b086      	sub	sp, #24
    8fda:	9003      	str	r0, [sp, #12]
    8fdc:	9104      	str	r1, [sp, #16]
    8fde:	9205      	str	r2, [sp, #20]
    8fe0:	9002      	str	r0, [sp, #8]
    8fe2:	4610      	mov	r0, r2
    8fe4:	9a02      	ldr	r2, [sp, #8]
    8fe6:	9101      	str	r1, [sp, #4]
    8fe8:	4611      	mov	r1, r2
    8fea:	9a01      	ldr	r2, [sp, #4]
    8fec:	f000 f861 	bl	90b2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    8ff0:	9000      	str	r0, [sp, #0]
    8ff2:	e7ff      	b.n	8ff4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    8ff4:	9800      	ldr	r0, [sp, #0]
    8ff6:	b006      	add	sp, #24
    8ff8:	bd80      	pop	{r7, pc}

00008ffa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    8ffa:	b580      	push	{r7, lr}
    8ffc:	b08e      	sub	sp, #56	; 0x38
    8ffe:	9009      	str	r0, [sp, #36]	; 0x24
    9000:	910a      	str	r1, [sp, #40]	; 0x28
    9002:	9005      	str	r0, [sp, #20]
    9004:	9104      	str	r1, [sp, #16]
    9006:	f009 fda5 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    900a:	9003      	str	r0, [sp, #12]
    900c:	e7ff      	b.n	900e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    900e:	2101      	movs	r1, #1
    9010:	9803      	ldr	r0, [sp, #12]
    9012:	f000 fa7a 	bl	950a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    9016:	9002      	str	r0, [sp, #8]
    9018:	9101      	str	r1, [sp, #4]
    901a:	e7ff      	b.n	901c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    901c:	9802      	ldr	r0, [sp, #8]
    901e:	9901      	ldr	r1, [sp, #4]
    9020:	f000 f97c 	bl	931c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    9024:	9108      	str	r1, [sp, #32]
    9026:	9007      	str	r0, [sp, #28]
    9028:	e7ff      	b.n	902a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    902a:	9807      	ldr	r0, [sp, #28]
    902c:	2800      	cmp	r0, #0
    902e:	d001      	beq.n	9034 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    9030:	e7ff      	b.n	9032 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    9032:	e00c      	b.n	904e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    9034:	9808      	ldr	r0, [sp, #32]
    9036:	900c      	str	r0, [sp, #48]	; 0x30
    9038:	900d      	str	r0, [sp, #52]	; 0x34
    903a:	9905      	ldr	r1, [sp, #20]
    903c:	9000      	str	r0, [sp, #0]
    903e:	4608      	mov	r0, r1
    9040:	9904      	ldr	r1, [sp, #16]
    9042:	9a00      	ldr	r2, [sp, #0]
    9044:	f7ff ffc7 	bl	8fd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    9048:	9006      	str	r0, [sp, #24]
    904a:	e00b      	b.n	9064 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    904c:	defe      	udf	#254	; 0xfe
    904e:	f009 f950 	bl	122f2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    9052:	e002      	b.n	905a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    9054:	9806      	ldr	r0, [sp, #24]
    9056:	b00e      	add	sp, #56	; 0x38
    9058:	bd80      	pop	{r7, pc}
    905a:	f000 f959 	bl	9310 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    905e:	9006      	str	r0, [sp, #24]
    9060:	e7ff      	b.n	9062 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    9062:	e7f7      	b.n	9054 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    9064:	e7f6      	b.n	9054 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

00009066 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    9066:	b082      	sub	sp, #8
    9068:	9000      	str	r0, [sp, #0]
    906a:	9101      	str	r1, [sp, #4]
    906c:	b002      	add	sp, #8
    906e:	4770      	bx	lr

00009070 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    9070:	b580      	push	{r7, lr}
    9072:	b088      	sub	sp, #32
    9074:	9005      	str	r0, [sp, #20]
    9076:	9106      	str	r1, [sp, #24]
    9078:	9207      	str	r2, [sp, #28]
    907a:	9004      	str	r0, [sp, #16]
    907c:	4610      	mov	r0, r2
    907e:	9a04      	ldr	r2, [sp, #16]
    9080:	9103      	str	r1, [sp, #12]
    9082:	4611      	mov	r1, r2
    9084:	9a03      	ldr	r2, [sp, #12]
    9086:	f7ff fdff 	bl	8c88 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    908a:	9002      	str	r0, [sp, #8]
    908c:	9101      	str	r1, [sp, #4]
    908e:	e7ff      	b.n	9090 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    9090:	9802      	ldr	r0, [sp, #8]
    9092:	9901      	ldr	r1, [sp, #4]
    9094:	b008      	add	sp, #32
    9096:	bd80      	pop	{r7, pc}

00009098 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    9098:	b580      	push	{r7, lr}
    909a:	b084      	sub	sp, #16
    909c:	9002      	str	r0, [sp, #8]
    909e:	9103      	str	r1, [sp, #12]
    90a0:	f009 f8e4 	bl	1226c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    90a4:	9001      	str	r0, [sp, #4]
    90a6:	9100      	str	r1, [sp, #0]
    90a8:	e7ff      	b.n	90aa <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    90aa:	9801      	ldr	r0, [sp, #4]
    90ac:	9900      	ldr	r1, [sp, #0]
    90ae:	b004      	add	sp, #16
    90b0:	bd80      	pop	{r7, pc}

000090b2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    90b2:	b580      	push	{r7, lr}
    90b4:	b08a      	sub	sp, #40	; 0x28
    90b6:	9007      	str	r0, [sp, #28]
    90b8:	9108      	str	r1, [sp, #32]
    90ba:	9209      	str	r2, [sp, #36]	; 0x24
    90bc:	9005      	str	r0, [sp, #20]
    90be:	4608      	mov	r0, r1
    90c0:	9104      	str	r1, [sp, #16]
    90c2:	4611      	mov	r1, r2
    90c4:	9203      	str	r2, [sp, #12]
    90c6:	f009 fd45 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    90ca:	9002      	str	r0, [sp, #8]
    90cc:	e7ff      	b.n	90ce <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    90ce:	9805      	ldr	r0, [sp, #20]
    90d0:	9902      	ldr	r1, [sp, #8]
    90d2:	4288      	cmp	r0, r1
    90d4:	d303      	bcc.n	90de <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    90d6:	e7ff      	b.n	90d8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    90d8:	2000      	movs	r0, #0
    90da:	9006      	str	r0, [sp, #24]
    90dc:	e009      	b.n	90f2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    90de:	9805      	ldr	r0, [sp, #20]
    90e0:	9904      	ldr	r1, [sp, #16]
    90e2:	9a03      	ldr	r2, [sp, #12]
    90e4:	f009 fd62 	bl	12bac <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    90e8:	9001      	str	r0, [sp, #4]
    90ea:	e7ff      	b.n	90ec <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    90ec:	9801      	ldr	r0, [sp, #4]
    90ee:	9006      	str	r0, [sp, #24]
    90f0:	e7ff      	b.n	90f2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    90f2:	9806      	ldr	r0, [sp, #24]
    90f4:	b00a      	add	sp, #40	; 0x28
    90f6:	bd80      	pop	{r7, pc}

000090f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    90f8:	b580      	push	{r7, lr}
    90fa:	b08a      	sub	sp, #40	; 0x28
    90fc:	9004      	str	r0, [sp, #16]
    90fe:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    9100:	9003      	str	r0, [sp, #12]
    9102:	9102      	str	r1, [sp, #8]
    9104:	f000 f86e 	bl	91e4 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9108:	4601      	mov	r1, r0
    910a:	9006      	str	r0, [sp, #24]
    910c:	9101      	str	r1, [sp, #4]
    910e:	e7ff      	b.n	9110 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    9110:	9803      	ldr	r0, [sp, #12]
    9112:	9902      	ldr	r1, [sp, #8]
    9114:	f000 f850 	bl	91b8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9118:	9000      	str	r0, [sp, #0]
    911a:	e7ff      	b.n	911c <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    911c:	9800      	ldr	r0, [sp, #0]
    911e:	9007      	str	r0, [sp, #28]
    9120:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    9122:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    9124:	4608      	mov	r0, r1
    9126:	f000 f809 	bl	913c <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    912a:	9009      	str	r0, [sp, #36]	; 0x24
    912c:	e7ff      	b.n	912e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    912e:	9801      	ldr	r0, [sp, #4]
    9130:	9900      	ldr	r1, [sp, #0]
    9132:	f011 fa4b 	bl	1a5cc <console_buffer>
    9136:	e7ff      	b.n	9138 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    9138:	b00a      	add	sp, #40	; 0x28
    913a:	bd80      	pop	{r7, pc}

0000913c <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    913c:	b081      	sub	sp, #4
    913e:	9000      	str	r0, [sp, #0]
    9140:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    9142:	b001      	add	sp, #4
    9144:	4770      	bx	lr

00009146 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    9146:	b580      	push	{r7, lr}
    9148:	b086      	sub	sp, #24
    914a:	9004      	str	r0, [sp, #16]
    914c:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    914e:	9003      	str	r0, [sp, #12]
    9150:	9102      	str	r1, [sp, #8]
    9152:	f000 f847 	bl	91e4 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9156:	9001      	str	r0, [sp, #4]
    9158:	e7ff      	b.n	915a <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    915a:	9803      	ldr	r0, [sp, #12]
    915c:	9902      	ldr	r1, [sp, #8]
    915e:	f000 f82b 	bl	91b8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9162:	9000      	str	r0, [sp, #0]
    9164:	e7ff      	b.n	9166 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    9166:	9801      	ldr	r0, [sp, #4]
    9168:	9900      	ldr	r1, [sp, #0]
    916a:	f011 fa2f 	bl	1a5cc <console_buffer>
    916e:	e7ff      	b.n	9170 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    9170:	b006      	add	sp, #24
    9172:	bd80      	pop	{r7, pc}

00009174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    9174:	b580      	push	{r7, lr}
    9176:	b082      	sub	sp, #8
    9178:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    917a:	f011 fa97 	bl	1a6ac <console_printint>
    917e:	e7ff      	b.n	9180 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    9180:	b002      	add	sp, #8
    9182:	bd80      	pop	{r7, pc}

00009184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    9184:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    9186:	f011 f9f9 	bl	1a57c <console_flush>
    918a:	e7ff      	b.n	918c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    918c:	bd80      	pop	{r7, pc}

0000918e <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    918e:	b086      	sub	sp, #24
    9190:	9004      	str	r0, [sp, #16]
    9192:	9105      	str	r1, [sp, #20]
    9194:	9002      	str	r0, [sp, #8]
    9196:	9103      	str	r1, [sp, #12]
    9198:	9802      	ldr	r0, [sp, #8]
    919a:	9903      	ldr	r1, [sp, #12]
    919c:	9000      	str	r0, [sp, #0]
    919e:	9101      	str	r1, [sp, #4]
    91a0:	9800      	ldr	r0, [sp, #0]
    91a2:	9901      	ldr	r1, [sp, #4]
    91a4:	b006      	add	sp, #24
    91a6:	4770      	bx	lr

000091a8 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    91a8:	b082      	sub	sp, #8
    91aa:	460a      	mov	r2, r1
    91ac:	9000      	str	r0, [sp, #0]
    91ae:	f88d 1007 	strb.w	r1, [sp, #7]
    91b2:	7001      	strb	r1, [r0, #0]
    91b4:	b002      	add	sp, #8
    91b6:	4770      	bx	lr

000091b8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    91b8:	b580      	push	{r7, lr}
    91ba:	b08a      	sub	sp, #40	; 0x28
    91bc:	9004      	str	r0, [sp, #16]
    91be:	9105      	str	r1, [sp, #20]
    91c0:	9008      	str	r0, [sp, #32]
    91c2:	9109      	str	r1, [sp, #36]	; 0x24
    91c4:	9006      	str	r0, [sp, #24]
    91c6:	9107      	str	r1, [sp, #28]
    91c8:	9806      	ldr	r0, [sp, #24]
    91ca:	9907      	ldr	r1, [sp, #28]
    91cc:	9003      	str	r0, [sp, #12]
    91ce:	9102      	str	r1, [sp, #8]
    91d0:	e7ff      	b.n	91d2 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    91d2:	9803      	ldr	r0, [sp, #12]
    91d4:	9902      	ldr	r1, [sp, #8]
    91d6:	f009 fcbd 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    91da:	9001      	str	r0, [sp, #4]
    91dc:	e7ff      	b.n	91de <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    91de:	9801      	ldr	r0, [sp, #4]
    91e0:	b00a      	add	sp, #40	; 0x28
    91e2:	bd80      	pop	{r7, pc}

000091e4 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    91e4:	b082      	sub	sp, #8
    91e6:	9000      	str	r0, [sp, #0]
    91e8:	9101      	str	r1, [sp, #4]
    91ea:	b002      	add	sp, #8
    91ec:	4770      	bx	lr

000091ee <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    91ee:	b580      	push	{r7, lr}
    91f0:	b084      	sub	sp, #16
    91f2:	9002      	str	r0, [sp, #8]
    91f4:	9103      	str	r1, [sp, #12]
    91f6:	6800      	ldr	r0, [r0, #0]
    91f8:	f000 f845 	bl	9286 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    91fc:	9001      	str	r0, [sp, #4]
    91fe:	e7ff      	b.n	9200 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    9200:	9801      	ldr	r0, [sp, #4]
    9202:	f000 0001 	and.w	r0, r0, #1
    9206:	b004      	add	sp, #16
    9208:	bd80      	pop	{r7, pc}

0000920a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    920a:	b087      	sub	sp, #28
    920c:	9000      	str	r0, [sp, #0]
    920e:	9101      	str	r1, [sp, #4]
    9210:	2000      	movs	r0, #0
    9212:	f88d 0013 	strb.w	r0, [sp, #19]
    9216:	f88d 0012 	strb.w	r0, [sp, #18]
    921a:	2001      	movs	r0, #1
    921c:	f88d 0013 	strb.w	r0, [sp, #19]
    9220:	f88d 0012 	strb.w	r0, [sp, #18]
    9224:	9800      	ldr	r0, [sp, #0]
    9226:	2800      	cmp	r0, #0
    9228:	d001      	beq.n	922e <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    922a:	e7ff      	b.n	922c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    922c:	e006      	b.n	923c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    922e:	2000      	movs	r0, #0
    9230:	f88d 0012 	strb.w	r0, [sp, #18]
    9234:	2001      	movs	r0, #1
    9236:	9002      	str	r0, [sp, #8]
    9238:	e008      	b.n	924c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    923a:	defe      	udf	#254	; 0xfe
    923c:	2000      	movs	r0, #0
    923e:	f88d 0013 	strb.w	r0, [sp, #19]
    9242:	9901      	ldr	r1, [sp, #4]
    9244:	9106      	str	r1, [sp, #24]
    9246:	9103      	str	r1, [sp, #12]
    9248:	9002      	str	r0, [sp, #8]
    924a:	e7ff      	b.n	924c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    924c:	f89d 0012 	ldrb.w	r0, [sp, #18]
    9250:	07c0      	lsls	r0, r0, #31
    9252:	2800      	cmp	r0, #0
    9254:	d104      	bne.n	9260 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    9256:	e7ff      	b.n	9258 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9258:	9800      	ldr	r0, [sp, #0]
    925a:	2801      	cmp	r0, #1
    925c:	d008      	beq.n	9270 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    925e:	e011      	b.n	9284 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    9260:	2000      	movs	r0, #0
    9262:	f88d 0012 	strb.w	r0, [sp, #18]
    9266:	e7f7      	b.n	9258 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9268:	9802      	ldr	r0, [sp, #8]
    926a:	9903      	ldr	r1, [sp, #12]
    926c:	b007      	add	sp, #28
    926e:	4770      	bx	lr
    9270:	f89d 0013 	ldrb.w	r0, [sp, #19]
    9274:	07c0      	lsls	r0, r0, #31
    9276:	2800      	cmp	r0, #0
    9278:	d0f6      	beq.n	9268 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    927a:	e7ff      	b.n	927c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    927c:	2000      	movs	r0, #0
    927e:	f88d 0013 	strb.w	r0, [sp, #19]
    9282:	e7f1      	b.n	9268 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9284:	e7f0      	b.n	9268 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

00009286 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    9286:	b580      	push	{r7, lr}
    9288:	b08e      	sub	sp, #56	; 0x38
    928a:	900b      	str	r0, [sp, #44]	; 0x2c
    928c:	910c      	str	r1, [sp, #48]	; 0x30
    928e:	9003      	str	r0, [sp, #12]
    9290:	9803      	ldr	r0, [sp, #12]
    9292:	6800      	ldr	r0, [r0, #0]
    9294:	2800      	cmp	r0, #0
    9296:	4602      	mov	r2, r0
    9298:	bf18      	it	ne
    929a:	2201      	movne	r2, #1
    929c:	2800      	cmp	r0, #0
    929e:	9101      	str	r1, [sp, #4]
    92a0:	d00f      	beq.n	92c2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    92a2:	e7ff      	b.n	92a4 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    92a4:	9803      	ldr	r0, [sp, #12]
    92a6:	900d      	str	r0, [sp, #52]	; 0x34
    92a8:	f24f 1270 	movw	r2, #61808	; 0xf170
    92ac:	f2c0 0201 	movt	r2, #1
    92b0:	a907      	add	r1, sp, #28
    92b2:	2304      	movs	r3, #4
    92b4:	9000      	str	r0, [sp, #0]
    92b6:	4608      	mov	r0, r1
    92b8:	9901      	ldr	r1, [sp, #4]
    92ba:	f010 f898 	bl	193ee <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    92be:	e011      	b.n	92e4 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    92c0:	defe      	udf	#254	; 0xfe
    92c2:	f24f 1274 	movw	r2, #61812	; 0xf174
    92c6:	f2c0 0201 	movt	r2, #1
    92ca:	a804      	add	r0, sp, #16
    92cc:	2304      	movs	r3, #4
    92ce:	9901      	ldr	r1, [sp, #4]
    92d0:	f010 f88d 	bl	193ee <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    92d4:	e7ff      	b.n	92d6 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    92d6:	a804      	add	r0, sp, #16
    92d8:	f00f fba6 	bl	18a28 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    92dc:	f88d 000b 	strb.w	r0, [sp, #11]
    92e0:	e7ff      	b.n	92e2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    92e2:	e011      	b.n	9308 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    92e4:	9800      	ldr	r0, [sp, #0]
    92e6:	900a      	str	r0, [sp, #40]	; 0x28
    92e8:	f24f 1278 	movw	r2, #61816	; 0xf178
    92ec:	f2c0 0201 	movt	r2, #1
    92f0:	a807      	add	r0, sp, #28
    92f2:	a90a      	add	r1, sp, #40	; 0x28
    92f4:	f00f fb2f 	bl	18956 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    92f8:	e7ff      	b.n	92fa <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    92fa:	a807      	add	r0, sp, #28
    92fc:	f00f fb94 	bl	18a28 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    9300:	f88d 000b 	strb.w	r0, [sp, #11]
    9304:	e7ff      	b.n	9306 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    9306:	e7ff      	b.n	9308 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    9308:	f89d 000b 	ldrb.w	r0, [sp, #11]
    930c:	b00e      	add	sp, #56	; 0x38
    930e:	bd80      	pop	{r7, pc}

00009310 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    9310:	b082      	sub	sp, #8
    9312:	2000      	movs	r0, #0
    9314:	9000      	str	r0, [sp, #0]
    9316:	9800      	ldr	r0, [sp, #0]
    9318:	b002      	add	sp, #8
    931a:	4770      	bx	lr

0000931c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    931c:	b580      	push	{r7, lr}
    931e:	b084      	sub	sp, #16
    9320:	9002      	str	r0, [sp, #8]
    9322:	9103      	str	r1, [sp, #12]
    9324:	f7ff ff71 	bl	920a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    9328:	9001      	str	r0, [sp, #4]
    932a:	9100      	str	r1, [sp, #0]
    932c:	e7ff      	b.n	932e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    932e:	9801      	ldr	r0, [sp, #4]
    9330:	9900      	ldr	r1, [sp, #0]
    9332:	b004      	add	sp, #16
    9334:	bd80      	pop	{r7, pc}

00009336 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    9336:	b580      	push	{r7, lr}
    9338:	b094      	sub	sp, #80	; 0x50
    933a:	9008      	str	r0, [sp, #32]
    933c:	9109      	str	r1, [sp, #36]	; 0x24
    933e:	6802      	ldr	r2, [r0, #0]
    9340:	2a00      	cmp	r2, #0
    9342:	bf18      	it	ne
    9344:	2201      	movne	r2, #1
    9346:	f04f 0300 	mov.w	r3, #0
    934a:	930b      	str	r3, [sp, #44]	; 0x2c
    934c:	920a      	str	r2, [sp, #40]	; 0x28
    934e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9352:	9104      	str	r1, [sp, #16]
    9354:	9003      	str	r0, [sp, #12]
    9356:	9202      	str	r2, [sp, #8]
    9358:	e7ff      	b.n	935a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    935a:	9802      	ldr	r0, [sp, #8]
    935c:	9902      	ldr	r1, [sp, #8]
    935e:	910d      	str	r1, [sp, #52]	; 0x34
    9360:	9a04      	ldr	r2, [sp, #16]
    9362:	6813      	ldr	r3, [r2, #0]
    9364:	2b00      	cmp	r3, #0
    9366:	bf18      	it	ne
    9368:	2301      	movne	r3, #1
    936a:	f04f 0c00 	mov.w	ip, #0
    936e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    9372:	930e      	str	r3, [sp, #56]	; 0x38
    9374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9376:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    937a:	9001      	str	r0, [sp, #4]
    937c:	9300      	str	r3, [sp, #0]
    937e:	e7ff      	b.n	9380 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    9380:	9800      	ldr	r0, [sp, #0]
    9382:	9011      	str	r0, [sp, #68]	; 0x44
    9384:	9901      	ldr	r1, [sp, #4]
    9386:	4281      	cmp	r1, r0
    9388:	d104      	bne.n	9394 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    938a:	e7ff      	b.n	938c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    938c:	2001      	movs	r0, #1
    938e:	f88d 0017 	strb.w	r0, [sp, #23]
    9392:	e003      	b.n	939c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    9394:	2000      	movs	r0, #0
    9396:	f88d 0017 	strb.w	r0, [sp, #23]
    939a:	e7ff      	b.n	939c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    939c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    93a0:	07c0      	lsls	r0, r0, #31
    93a2:	2800      	cmp	r0, #0
    93a4:	d104      	bne.n	93b0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    93a6:	e7ff      	b.n	93a8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    93a8:	2000      	movs	r0, #0
    93aa:	f88d 0016 	strb.w	r0, [sp, #22]
    93ae:	e01c      	b.n	93ea <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    93b0:	9803      	ldr	r0, [sp, #12]
    93b2:	9006      	str	r0, [sp, #24]
    93b4:	9904      	ldr	r1, [sp, #16]
    93b6:	9107      	str	r1, [sp, #28]
    93b8:	9a06      	ldr	r2, [sp, #24]
    93ba:	6812      	ldr	r2, [r2, #0]
    93bc:	2a00      	cmp	r2, #0
    93be:	d104      	bne.n	93ca <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    93c0:	e7ff      	b.n	93c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    93c2:	2001      	movs	r0, #1
    93c4:	f88d 0016 	strb.w	r0, [sp, #22]
    93c8:	e00e      	b.n	93e8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    93ca:	9807      	ldr	r0, [sp, #28]
    93cc:	6800      	ldr	r0, [r0, #0]
    93ce:	2800      	cmp	r0, #0
    93d0:	d0f7      	beq.n	93c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    93d2:	e7ff      	b.n	93d4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    93d4:	9806      	ldr	r0, [sp, #24]
    93d6:	9012      	str	r0, [sp, #72]	; 0x48
    93d8:	9907      	ldr	r1, [sp, #28]
    93da:	9113      	str	r1, [sp, #76]	; 0x4c
    93dc:	f00a f901 	bl	135e2 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    93e0:	f88d 0016 	strb.w	r0, [sp, #22]
    93e4:	e7ff      	b.n	93e6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    93e6:	e7ff      	b.n	93e8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    93e8:	e7ff      	b.n	93ea <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    93ea:	f89d 0016 	ldrb.w	r0, [sp, #22]
    93ee:	b014      	add	sp, #80	; 0x50
    93f0:	bd80      	pop	{r7, pc}

000093f2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    93f2:	b580      	push	{r7, lr}
    93f4:	b084      	sub	sp, #16
    93f6:	9002      	str	r0, [sp, #8]
    93f8:	9103      	str	r1, [sp, #12]
    93fa:	6800      	ldr	r0, [r0, #0]
    93fc:	f00a f883 	bl	13506 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    9400:	9001      	str	r0, [sp, #4]
    9402:	e7ff      	b.n	9404 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    9404:	9801      	ldr	r0, [sp, #4]
    9406:	f000 0001 	and.w	r0, r0, #1
    940a:	b004      	add	sp, #16
    940c:	bd80      	pop	{r7, pc}

0000940e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    940e:	b580      	push	{r7, lr}
    9410:	b084      	sub	sp, #16
    9412:	9002      	str	r0, [sp, #8]
    9414:	9103      	str	r1, [sp, #12]
    9416:	6800      	ldr	r0, [r0, #0]
    9418:	f00a f83e 	bl	13498 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    941c:	9001      	str	r0, [sp, #4]
    941e:	e7ff      	b.n	9420 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    9420:	9801      	ldr	r0, [sp, #4]
    9422:	f000 0001 	and.w	r0, r0, #1
    9426:	b004      	add	sp, #16
    9428:	bd80      	pop	{r7, pc}

0000942a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    942a:	b580      	push	{r7, lr}
    942c:	b084      	sub	sp, #16
    942e:	9002      	str	r0, [sp, #8]
    9430:	9103      	str	r1, [sp, #12]
    9432:	6800      	ldr	r0, [r0, #0]
    9434:	f7ff ffeb 	bl	940e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    9438:	9001      	str	r0, [sp, #4]
    943a:	e7ff      	b.n	943c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    943c:	9801      	ldr	r0, [sp, #4]
    943e:	f000 0001 	and.w	r0, r0, #1
    9442:	b004      	add	sp, #16
    9444:	bd80      	pop	{r7, pc}

00009446 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    9446:	b580      	push	{r7, lr}
    9448:	b084      	sub	sp, #16
    944a:	9002      	str	r0, [sp, #8]
    944c:	9103      	str	r1, [sp, #12]
    944e:	6800      	ldr	r0, [r0, #0]
    9450:	f00a f890 	bl	13574 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    9454:	9001      	str	r0, [sp, #4]
    9456:	e7ff      	b.n	9458 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    9458:	9801      	ldr	r0, [sp, #4]
    945a:	f000 0001 	and.w	r0, r0, #1
    945e:	b004      	add	sp, #16
    9460:	bd80      	pop	{r7, pc}

00009462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    9462:	b089      	sub	sp, #36	; 0x24
    9464:	9005      	str	r0, [sp, #20]
    9466:	9106      	str	r1, [sp, #24]
    9468:	9107      	str	r1, [sp, #28]
    946a:	9907      	ldr	r1, [sp, #28]
    946c:	9002      	str	r0, [sp, #8]
    946e:	9101      	str	r1, [sp, #4]
    9470:	e7ff      	b.n	9472 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    9472:	9802      	ldr	r0, [sp, #8]
    9474:	9008      	str	r0, [sp, #32]
    9476:	9908      	ldr	r1, [sp, #32]
    9478:	9100      	str	r1, [sp, #0]
    947a:	e7ff      	b.n	947c <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    947c:	9800      	ldr	r0, [sp, #0]
    947e:	9003      	str	r0, [sp, #12]
    9480:	9901      	ldr	r1, [sp, #4]
    9482:	9104      	str	r1, [sp, #16]
    9484:	9803      	ldr	r0, [sp, #12]
    9486:	9904      	ldr	r1, [sp, #16]
    9488:	b009      	add	sp, #36	; 0x24
    948a:	4770      	bx	lr

0000948c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    948c:	b089      	sub	sp, #36	; 0x24
    948e:	9005      	str	r0, [sp, #20]
    9490:	9106      	str	r1, [sp, #24]
    9492:	9107      	str	r1, [sp, #28]
    9494:	9907      	ldr	r1, [sp, #28]
    9496:	9002      	str	r0, [sp, #8]
    9498:	9101      	str	r1, [sp, #4]
    949a:	e7ff      	b.n	949c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    949c:	9802      	ldr	r0, [sp, #8]
    949e:	9008      	str	r0, [sp, #32]
    94a0:	9908      	ldr	r1, [sp, #32]
    94a2:	9100      	str	r1, [sp, #0]
    94a4:	e7ff      	b.n	94a6 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    94a6:	9800      	ldr	r0, [sp, #0]
    94a8:	9003      	str	r0, [sp, #12]
    94aa:	9901      	ldr	r1, [sp, #4]
    94ac:	9104      	str	r1, [sp, #16]
    94ae:	9803      	ldr	r0, [sp, #12]
    94b0:	9904      	ldr	r1, [sp, #16]
    94b2:	b009      	add	sp, #36	; 0x24
    94b4:	4770      	bx	lr

000094b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    94b6:	b089      	sub	sp, #36	; 0x24
    94b8:	9005      	str	r0, [sp, #20]
    94ba:	9106      	str	r1, [sp, #24]
    94bc:	9107      	str	r1, [sp, #28]
    94be:	9907      	ldr	r1, [sp, #28]
    94c0:	9002      	str	r0, [sp, #8]
    94c2:	9101      	str	r1, [sp, #4]
    94c4:	e7ff      	b.n	94c6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    94c6:	9802      	ldr	r0, [sp, #8]
    94c8:	9008      	str	r0, [sp, #32]
    94ca:	9908      	ldr	r1, [sp, #32]
    94cc:	9100      	str	r1, [sp, #0]
    94ce:	e7ff      	b.n	94d0 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    94d0:	9800      	ldr	r0, [sp, #0]
    94d2:	9003      	str	r0, [sp, #12]
    94d4:	9901      	ldr	r1, [sp, #4]
    94d6:	9104      	str	r1, [sp, #16]
    94d8:	9803      	ldr	r0, [sp, #12]
    94da:	9904      	ldr	r1, [sp, #16]
    94dc:	b009      	add	sp, #36	; 0x24
    94de:	4770      	bx	lr

000094e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    94e0:	b089      	sub	sp, #36	; 0x24
    94e2:	9005      	str	r0, [sp, #20]
    94e4:	9106      	str	r1, [sp, #24]
    94e6:	9107      	str	r1, [sp, #28]
    94e8:	9907      	ldr	r1, [sp, #28]
    94ea:	9002      	str	r0, [sp, #8]
    94ec:	9101      	str	r1, [sp, #4]
    94ee:	e7ff      	b.n	94f0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    94f0:	9802      	ldr	r0, [sp, #8]
    94f2:	9008      	str	r0, [sp, #32]
    94f4:	9908      	ldr	r1, [sp, #32]
    94f6:	9100      	str	r1, [sp, #0]
    94f8:	e7ff      	b.n	94fa <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    94fa:	9800      	ldr	r0, [sp, #0]
    94fc:	9003      	str	r0, [sp, #12]
    94fe:	9901      	ldr	r1, [sp, #4]
    9500:	9104      	str	r1, [sp, #16]
    9502:	9803      	ldr	r0, [sp, #12]
    9504:	9904      	ldr	r1, [sp, #16]
    9506:	b009      	add	sp, #36	; 0x24
    9508:	4770      	bx	lr

0000950a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    950a:	b580      	push	{r7, lr}
    950c:	b088      	sub	sp, #32
    950e:	9004      	str	r0, [sp, #16]
    9510:	9105      	str	r1, [sp, #20]
    9512:	f000 f819 	bl	9548 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    9516:	9001      	str	r0, [sp, #4]
    9518:	9100      	str	r1, [sp, #0]
    951a:	e7ff      	b.n	951c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    951c:	9801      	ldr	r0, [sp, #4]
    951e:	9006      	str	r0, [sp, #24]
    9520:	9900      	ldr	r1, [sp, #0]
    9522:	f001 0201 	and.w	r2, r1, #1
    9526:	f88d 201f 	strb.w	r2, [sp, #31]
    952a:	2a00      	cmp	r2, #0
    952c:	d105      	bne.n	953a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    952e:	e7ff      	b.n	9530 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    9530:	9801      	ldr	r0, [sp, #4]
    9532:	9003      	str	r0, [sp, #12]
    9534:	2101      	movs	r1, #1
    9536:	9102      	str	r1, [sp, #8]
    9538:	e002      	b.n	9540 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    953a:	2000      	movs	r0, #0
    953c:	9002      	str	r0, [sp, #8]
    953e:	e7ff      	b.n	9540 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9540:	9802      	ldr	r0, [sp, #8]
    9542:	9903      	ldr	r1, [sp, #12]
    9544:	b008      	add	sp, #32
    9546:	bd80      	pop	{r7, pc}

00009548 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    9548:	b08a      	sub	sp, #40	; 0x28
    954a:	9004      	str	r0, [sp, #16]
    954c:	9105      	str	r1, [sp, #20]
    954e:	1a40      	subs	r0, r0, r1
    9550:	f04f 0100 	mov.w	r1, #0
    9554:	f141 0100 	adc.w	r1, r1, #0
    9558:	f1c1 0101 	rsb	r1, r1, #1
    955c:	9006      	str	r0, [sp, #24]
    955e:	f88d 101c 	strb.w	r1, [sp, #28]
    9562:	9806      	ldr	r0, [sp, #24]
    9564:	f89d 101c 	ldrb.w	r1, [sp, #28]
    9568:	9001      	str	r0, [sp, #4]
    956a:	9100      	str	r1, [sp, #0]
    956c:	e7ff      	b.n	956e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
    956e:	9801      	ldr	r0, [sp, #4]
    9570:	9008      	str	r0, [sp, #32]
    9572:	9900      	ldr	r1, [sp, #0]
    9574:	f001 0201 	and.w	r2, r1, #1
    9578:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    957c:	9002      	str	r0, [sp, #8]
    957e:	f88d 200c 	strb.w	r2, [sp, #12]
    9582:	9802      	ldr	r0, [sp, #8]
    9584:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9588:	b00a      	add	sp, #40	; 0x28
    958a:	4770      	bx	lr

0000958c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
    baudrate:   8000,  //  In kHZ. Use SPI at 8MHz (the fastest clock available on the nRF52832) because otherwise refreshing will be super slow.
    word_size:  hal::HAL_SPI_WORD_SIZE_8BIT as u8,
};

/// Initialise the display controller
pub fn start_display() -> MynewtResult<()> {
    958c:	b5b0      	push	{r4, r5, r7, lr}
    958e:	b0b2      	sub	sp, #200	; 0xc8
    //  Create SPI port and GPIO pins
    let mut spi_port = mynewt::SPI::new();
    9590:	f00b fbc1 	bl	14d16 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
    9594:	9115      	str	r1, [sp, #84]	; 0x54
    9596:	9014      	str	r0, [sp, #80]	; 0x50
    9598:	e7ff      	b.n	959a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
    959a:	f00b fd7a 	bl	15092 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    959e:	9016      	str	r0, [sp, #88]	; 0x58
    95a0:	e7ff      	b.n	95a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
    95a2:	f00b fd76 	bl	15092 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    95a6:	9017      	str	r0, [sp, #92]	; 0x5c
    95a8:	e7ff      	b.n	95aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>

    //  Init SPI port and GPIO pins
    spi_port.init(
    95aa:	f240 03e8 	movw	r3, #232	; 0xe8
    95ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b2:	a814      	add	r0, sp, #80	; 0x50
    95b4:	2100      	movs	r1, #0
    95b6:	2219      	movs	r2, #25
    95b8:	f00b fbb5 	bl	14d26 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
    95bc:	9012      	str	r0, [sp, #72]	; 0x48
    95be:	e7ff      	b.n	95c0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
    95c0:	9812      	ldr	r0, [sp, #72]	; 0x48
    95c2:	f7ff fb5d 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    95c6:	9018      	str	r0, [sp, #96]	; 0x60
    95c8:	e7ff      	b.n	95ca <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
        DISPLAY_SPI, //  Mynewt SPI port 0
        DISPLAY_CS,  //  LCD_CS (P0.25): Chip select
        unsafe { &mut SPI_SETTINGS }
    ) ? ;
    95ca:	9818      	ldr	r0, [sp, #96]	; 0x60
    95cc:	1e41      	subs	r1, r0, #1
    95ce:	bf18      	it	ne
    95d0:	2101      	movne	r1, #1
    95d2:	2801      	cmp	r0, #1
    95d4:	d001      	beq.n	95da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
    95d6:	e7ff      	b.n	95d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
    95d8:	e006      	b.n	95e8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
    95da:	a816      	add	r0, sp, #88	; 0x58
    95dc:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    95de:	f00b fd5a 	bl	15096 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    95e2:	9011      	str	r0, [sp, #68]	; 0x44
    95e4:	e010      	b.n	9608 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
    95e6:	defe      	udf	#254	; 0xfe
    ) ? ;
    95e8:	9818      	ldr	r0, [sp, #96]	; 0x60
    95ea:	902d      	str	r0, [sp, #180]	; 0xb4
    95ec:	f009 ff50 	bl	13490 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    95f0:	9010      	str	r0, [sp, #64]	; 0x40
    95f2:	e002      	b.n	95fa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
    unsafe {
        DISPLAY.init(&mut delay) ? ;
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    }
    Ok(())
}
    95f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    95f6:	b032      	add	sp, #200	; 0xc8
    95f8:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
    95fa:	9810      	ldr	r0, [sp, #64]	; 0x40
    95fc:	f7ff fb34 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9600:	9013      	str	r0, [sp, #76]	; 0x4c
    9602:	e7ff      	b.n	9604 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
    9604:	e7ff      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    9606:	e7f5      	b.n	95f4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9608:	9811      	ldr	r0, [sp, #68]	; 0x44
    960a:	f7ff fb39 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    960e:	9019      	str	r0, [sp, #100]	; 0x64
    9610:	e7ff      	b.n	9612 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
    9612:	9819      	ldr	r0, [sp, #100]	; 0x64
    9614:	1e41      	subs	r1, r0, #1
    9616:	bf18      	it	ne
    9618:	2101      	movne	r1, #1
    961a:	2801      	cmp	r0, #1
    961c:	d001      	beq.n	9622 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
    961e:	e7ff      	b.n	9620 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
    9620:	e006      	b.n	9630 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
    9622:	a817      	add	r0, sp, #92	; 0x5c
    9624:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9626:	f00b fd36 	bl	15096 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    962a:	900f      	str	r0, [sp, #60]	; 0x3c
    962c:	e00c      	b.n	9648 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    962e:	defe      	udf	#254	; 0xfe
    9630:	9819      	ldr	r0, [sp, #100]	; 0x64
    9632:	902e      	str	r0, [sp, #184]	; 0xb8
    9634:	f009 ff2c 	bl	13490 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9638:	900e      	str	r0, [sp, #56]	; 0x38
    963a:	e7ff      	b.n	963c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
    963c:	980e      	ldr	r0, [sp, #56]	; 0x38
    963e:	f7ff fb13 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9642:	9013      	str	r0, [sp, #76]	; 0x4c
    9644:	e7ff      	b.n	9646 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
    9646:	e7de      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9648:	980f      	ldr	r0, [sp, #60]	; 0x3c
    964a:	f7ff fb19 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    964e:	901a      	str	r0, [sp, #104]	; 0x68
    9650:	e7ff      	b.n	9652 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
    9652:	981a      	ldr	r0, [sp, #104]	; 0x68
    9654:	1e41      	subs	r1, r0, #1
    9656:	bf18      	it	ne
    9658:	2101      	movne	r1, #1
    965a:	2801      	cmp	r0, #1
    965c:	d001      	beq.n	9662 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
    965e:	e7ff      	b.n	9660 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
    9660:	e004      	b.n	966c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    9662:	f00b fd16 	bl	15092 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    9666:	900d      	str	r0, [sp, #52]	; 0x34
    9668:	e00c      	b.n	9684 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    966a:	defe      	udf	#254	; 0xfe
    966c:	981a      	ldr	r0, [sp, #104]	; 0x68
    966e:	902f      	str	r0, [sp, #188]	; 0xbc
    9670:	f009 ff0e 	bl	13490 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9674:	900c      	str	r0, [sp, #48]	; 0x30
    9676:	e7ff      	b.n	9678 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
    9678:	980c      	ldr	r0, [sp, #48]	; 0x30
    967a:	f7ff faf5 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    967e:	9013      	str	r0, [sp, #76]	; 0x4c
    9680:	e7ff      	b.n	9682 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
    9682:	e7c0      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    9684:	f240 1060 	movw	r0, #352	; 0x160
    9688:	f2c2 0000 	movt	r0, #8192	; 0x2000
    968c:	990d      	ldr	r1, [sp, #52]	; 0x34
    968e:	6001      	str	r1, [r0, #0]
    9690:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    9692:	f00b fd00 	bl	15096 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    9696:	900b      	str	r0, [sp, #44]	; 0x2c
    9698:	e7ff      	b.n	969a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
    969a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    969c:	f7ff faf0 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    96a0:	901b      	str	r0, [sp, #108]	; 0x6c
    96a2:	e7ff      	b.n	96a4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
    96a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
    96a6:	1e41      	subs	r1, r0, #1
    96a8:	bf18      	it	ne
    96aa:	2101      	movne	r1, #1
    96ac:	2801      	cmp	r0, #1
    96ae:	d001      	beq.n	96b4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
    96b0:	e7ff      	b.n	96b2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
    96b2:	e008      	b.n	96c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
    96b4:	f240 1060 	movw	r0, #352	; 0x160
    96b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    96bc:	f00b fd84 	bl	151c8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    96c0:	900a      	str	r0, [sp, #40]	; 0x28
    96c2:	e00d      	b.n	96e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    96c4:	defe      	udf	#254	; 0xfe
    96c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
    96c8:	9030      	str	r0, [sp, #192]	; 0xc0
    96ca:	f009 fee1 	bl	13490 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    96ce:	9009      	str	r0, [sp, #36]	; 0x24
    96d0:	e7ff      	b.n	96d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
    96d2:	9809      	ldr	r0, [sp, #36]	; 0x24
    96d4:	f7ff fac8 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96d8:	9013      	str	r0, [sp, #76]	; 0x4c
    96da:	e7ff      	b.n	96dc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
    96dc:	e7ff      	b.n	96de <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    96de:	e792      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
    96e0:	980a      	ldr	r0, [sp, #40]	; 0x28
    96e2:	f7ff facd 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    96e6:	901c      	str	r0, [sp, #112]	; 0x70
    96e8:	e7ff      	b.n	96ea <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
    96ea:	981c      	ldr	r0, [sp, #112]	; 0x70
    96ec:	1e41      	subs	r1, r0, #1
    96ee:	bf18      	it	ne
    96f0:	2101      	movne	r1, #1
    96f2:	2801      	cmp	r0, #1
    96f4:	d001      	beq.n	96fa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
    96f6:	e7ff      	b.n	96f8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
    96f8:	e011      	b.n	971e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
    96fa:	9914      	ldr	r1, [sp, #80]	; 0x50
    96fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
    96fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
    9700:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    9702:	46ec      	mov	ip, sp
    9704:	f04f 0e01 	mov.w	lr, #1
    9708:	f8cc e008 	str.w	lr, [ip, #8]
    970c:	f8cc e004 	str.w	lr, [ip, #4]
    9710:	f8cc 0000 	str.w	r0, [ip]
    9714:	a81d      	add	r0, sp, #116	; 0x74
    9716:	f000 fc8c 	bl	a032 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
    971a:	e00c      	b.n	9736 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
    971c:	defe      	udf	#254	; 0xfe
    971e:	981c      	ldr	r0, [sp, #112]	; 0x70
    9720:	9031      	str	r0, [sp, #196]	; 0xc4
    9722:	f009 feb5 	bl	13490 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9726:	9008      	str	r0, [sp, #32]
    9728:	e7ff      	b.n	972a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
    972a:	9808      	ldr	r0, [sp, #32]
    972c:	f7ff fa9c 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9730:	9013      	str	r0, [sp, #76]	; 0x4c
    9732:	e7ff      	b.n	9734 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
    9734:	e7d3      	b.n	96de <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    9736:	f240 1048 	movw	r0, #328	; 0x148
    973a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    973e:	a91d      	add	r1, sp, #116	; 0x74
    9740:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9744:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
    9748:	f00b fd54 	bl	151f4 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
    974c:	e7ff      	b.n	974e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
    974e:	f240 1048 	movw	r0, #328	; 0x148
    9752:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9756:	a923      	add	r1, sp, #140	; 0x8c
    9758:	f000 fc8d 	bl	a076 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
    975c:	9007      	str	r0, [sp, #28]
    975e:	e7ff      	b.n	9760 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
    9760:	9807      	ldr	r0, [sp, #28]
    9762:	f000 0001 	and.w	r0, r0, #1
    9766:	f7ff fa85 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    976a:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    976e:	e7ff      	b.n	9770 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
    9770:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    9774:	07c1      	lsls	r1, r0, #31
    9776:	2900      	cmp	r1, #0
    9778:	d001      	beq.n	977e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
    977a:	e7ff      	b.n	977c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
    977c:	e00d      	b.n	979a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    977e:	f24f 108c 	movw	r0, #61836	; 0xf18c
    9782:	f2c0 0001 	movt	r0, #1
    9786:	6801      	ldr	r1, [r0, #0]
    9788:	f240 1048 	movw	r0, #328	; 0x148
    978c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9790:	f000 fa86 	bl	9ca0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
    9794:	9006      	str	r0, [sp, #24]
    9796:	e00b      	b.n	97b0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
    9798:	defe      	udf	#254	; 0xfe
    979a:	f009 fe11 	bl	133c0 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    979e:	9005      	str	r0, [sp, #20]
    97a0:	e7ff      	b.n	97a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
    97a2:	9805      	ldr	r0, [sp, #20]
    97a4:	f7ff fa60 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    97a8:	9013      	str	r0, [sp, #76]	; 0x4c
    97aa:	e7ff      	b.n	97ac <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
    97ac:	e7ff      	b.n	97ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
    97ae:	e72a      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    97b0:	9806      	ldr	r0, [sp, #24]
    97b2:	f000 0001 	and.w	r0, r0, #1
    97b6:	f7ff fa5d 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    97ba:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    97be:	e7ff      	b.n	97c0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
    97c0:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    97c4:	07c1      	lsls	r1, r0, #31
    97c6:	2900      	cmp	r1, #0
    97c8:	d001      	beq.n	97ce <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
    97ca:	e7ff      	b.n	97cc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
    97cc:	e005      	b.n	97da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
    97ce:	2000      	movs	r0, #0
    Ok(())
    97d0:	9013      	str	r0, [sp, #76]	; 0x4c
    97d2:	2001      	movs	r0, #1
    97d4:	9013      	str	r0, [sp, #76]	; 0x4c
}
    97d6:	e70d      	b.n	95f4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    97d8:	defe      	udf	#254	; 0xfe
    97da:	f009 fdf1 	bl	133c0 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    97de:	9004      	str	r0, [sp, #16]
    97e0:	e7ff      	b.n	97e2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
    97e2:	9804      	ldr	r0, [sp, #16]
    97e4:	f7ff fa40 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    97e8:	9013      	str	r0, [sp, #76]	; 0x4c
    97ea:	e7ff      	b.n	97ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
    97ec:	e7df      	b.n	97ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

000097ee <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
    97ee:	b580      	push	{r7, lr}
    97f0:	b08a      	sub	sp, #40	; 0x28
    97f2:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    97f4:	f001 faa3 	bl	ad3e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
    97f8:	9307      	str	r3, [sp, #28]
    97fa:	9206      	str	r2, [sp, #24]
    97fc:	9105      	str	r1, [sp, #20]
    97fe:	9004      	str	r0, [sp, #16]
    9800:	e7ff      	b.n	9802 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
    9802:	a804      	add	r0, sp, #16
    9804:	f00b fde1 	bl	153ca <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    9808:	9003      	str	r0, [sp, #12]
    980a:	e7ff      	b.n	980c <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
    980c:	9803      	ldr	r0, [sp, #12]
    980e:	f00b feaf 	bl	15570 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    9812:	9002      	str	r0, [sp, #8]
    9814:	9101      	str	r1, [sp, #4]
    9816:	e7ff      	b.n	9818 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
    9818:	9802      	ldr	r0, [sp, #8]
    981a:	f000 0001 	and.w	r0, r0, #1
    981e:	9901      	ldr	r1, [sp, #4]
    9820:	b00a      	add	sp, #40	; 0x28
    9822:	bd80      	pop	{r7, pc}

00009824 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
    9824:	b580      	push	{r7, lr}
    9826:	b090      	sub	sp, #64	; 0x40
    9828:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
    982a:	f100 010c 	add.w	r1, r0, #12
    982e:	9006      	str	r0, [sp, #24]
    9830:	4608      	mov	r0, r1
    9832:	f00b fcd4 	bl	151de <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    9836:	9005      	str	r0, [sp, #20]
    9838:	e7ff      	b.n	983a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
    983a:	9805      	ldr	r0, [sp, #20]
    983c:	f00c fc2f 	bl	1609e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
    9840:	9004      	str	r0, [sp, #16]
    9842:	e7ff      	b.n	9844 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
    9844:	9804      	ldr	r0, [sp, #16]
    9846:	f000 0001 	and.w	r0, r0, #1
    984a:	f7ff fa13 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    984e:	f88d 001f 	strb.w	r0, [sp, #31]
    9852:	e7ff      	b.n	9854 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
    9854:	f89d 001f 	ldrb.w	r0, [sp, #31]
    9858:	07c1      	lsls	r1, r0, #31
    985a:	2900      	cmp	r1, #0
    985c:	d001      	beq.n	9862 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
    985e:	e7ff      	b.n	9860 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
    9860:	e006      	b.n	9870 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
    9862:	9806      	ldr	r0, [sp, #24]
    9864:	300c      	adds	r0, #12
    9866:	f00b fcaf 	bl	151c8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    986a:	9003      	str	r0, [sp, #12]
    986c:	e00d      	b.n	988a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
    986e:	defe      	udf	#254	; 0xfe
    9870:	f009 f9c6 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9874:	e003      	b.n	987e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
    9876:	f89d 001e 	ldrb.w	r0, [sp, #30]
    987a:	b010      	add	sp, #64	; 0x40
    987c:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
    987e:	f00c fc63 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9882:	f88d 001e 	strb.w	r0, [sp, #30]
    9886:	e7ff      	b.n	9888 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
    9888:	e7f5      	b.n	9876 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
    988a:	9803      	ldr	r0, [sp, #12]
    988c:	f00c fbb2 	bl	15ff4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
    9890:	9002      	str	r0, [sp, #8]
    9892:	e7ff      	b.n	9894 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
    9894:	9802      	ldr	r0, [sp, #8]
    9896:	f000 0001 	and.w	r0, r0, #1
    989a:	f7ff f9eb 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    989e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    98a2:	e7ff      	b.n	98a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
    98a4:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    98a8:	07c1      	lsls	r1, r0, #31
    98aa:	2900      	cmp	r1, #0
    98ac:	d001      	beq.n	98b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
    98ae:	e7ff      	b.n	98b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
    98b0:	e006      	b.n	98c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
    98b2:	9806      	ldr	r0, [sp, #24]
    98b4:	300c      	adds	r0, #12
    98b6:	f00b fc92 	bl	151de <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    98ba:	9001      	str	r0, [sp, #4]
    98bc:	e009      	b.n	98d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
    98be:	defe      	udf	#254	; 0xfe
    98c0:	f009 f99e 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    98c4:	e7ff      	b.n	98c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
    98c6:	f00c fc3f 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    98ca:	f88d 001e 	strb.w	r0, [sp, #30]
    98ce:	e7ff      	b.n	98d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
    98d0:	e7d1      	b.n	9876 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
    98d2:	9801      	ldr	r0, [sp, #4]
    98d4:	f00c fb39 	bl	15f4a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
    98d8:	f88d 001e 	strb.w	r0, [sp, #30]
    98dc:	e7ff      	b.n	98de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
    98de:	e7ca      	b.n	9876 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

000098e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
    98e0:	b082      	sub	sp, #8
    98e2:	9001      	str	r0, [sp, #4]
    98e4:	e7ff      	b.n	98e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
    98e6:	b002      	add	sp, #8
    98e8:	4770      	bx	lr

000098ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
    98ea:	b082      	sub	sp, #8
    98ec:	9001      	str	r0, [sp, #4]
    98ee:	e7ff      	b.n	98f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
    98f0:	b002      	add	sp, #8
    98f2:	4770      	bx	lr

000098f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
    98f4:	b082      	sub	sp, #8
    98f6:	9001      	str	r0, [sp, #4]
    98f8:	e7ff      	b.n	98fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
    98fa:	b002      	add	sp, #8
    98fc:	4770      	bx	lr

000098fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    98fe:	b5f0      	push	{r4, r5, r6, r7, lr}
    9900:	b0c7      	sub	sp, #284	; 0x11c
    9902:	f8dd c134 	ldr.w	ip, [sp, #308]	; 0x134
    9906:	f8dd e130 	ldr.w	lr, [sp, #304]	; 0x130
    990a:	461c      	mov	r4, r3
    990c:	4615      	mov	r5, r2
    990e:	460e      	mov	r6, r1
    9910:	9040      	str	r0, [sp, #256]	; 0x100
    9912:	f8ad 1104 	strh.w	r1, [sp, #260]	; 0x104
    9916:	f8ad 2106 	strh.w	r2, [sp, #262]	; 0x106
    991a:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
    991e:	f8ad e10a 	strh.w	lr, [sp, #266]	; 0x10a
    9922:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    9924:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    9928:	2701      	movs	r7, #1
    992a:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    992e:	466f      	mov	r7, sp
    9930:	f8c7 e000 	str.w	lr, [r7]
    9934:	900a      	str	r0, [sp, #40]	; 0x28
    9936:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    993a:	9408      	str	r4, [sp, #32]
    993c:	9507      	str	r5, [sp, #28]
    993e:	9606      	str	r6, [sp, #24]
    9940:	f000 fa44 	bl	9dcc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    9944:	9005      	str	r0, [sp, #20]
    9946:	e7ff      	b.n	9948 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x4a>
    9948:	9805      	ldr	r0, [sp, #20]
    994a:	f000 0001 	and.w	r0, r0, #1
    994e:	f7ff f991 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9952:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    9956:	e7ff      	b.n	9958 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x5a>
    9958:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    995c:	07c1      	lsls	r1, r0, #31
    995e:	2900      	cmp	r1, #0
    9960:	d001      	beq.n	9966 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x68>
    9962:	e7ff      	b.n	9964 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x66>
    9964:	e00f      	b.n	9986 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x88>
    9966:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    9968:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    996c:	a80c      	add	r0, sp, #48	; 0x30
    996e:	22cc      	movs	r2, #204	; 0xcc
    9970:	9004      	str	r0, [sp, #16]
    9972:	9909      	ldr	r1, [sp, #36]	; 0x24
    9974:	f015 fa66 	bl	1ee44 <__aeabi_memcpy>
    9978:	980a      	ldr	r0, [sp, #40]	; 0x28
    997a:	9904      	ldr	r1, [sp, #16]
    997c:	f000 f884 	bl	9a88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>
    9980:	9003      	str	r0, [sp, #12]
    9982:	e00d      	b.n	99a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa2>
        self.set_address_window(sx, sy, ex, ey)?;
    9984:	defe      	udf	#254	; 0xfe
    9986:	f009 f93b 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    998a:	e003      	b.n	9994 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x96>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
    998c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9990:	b047      	add	sp, #284	; 0x11c
    9992:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    9994:	f00c fbd8 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9998:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    999c:	e7ff      	b.n	999e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa0>
    999e:	e034      	b.n	9a0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        self.write_pixels(colors) ? ;
    99a0:	9803      	ldr	r0, [sp, #12]
    99a2:	f000 0001 	and.w	r0, r0, #1
    99a6:	f7ff f965 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    99aa:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    99ae:	e7ff      	b.n	99b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xb2>
    99b0:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    99b4:	07c1      	lsls	r1, r0, #31
    99b6:	2900      	cmp	r1, #0
    99b8:	d001      	beq.n	99be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xc0>
    99ba:	e7ff      	b.n	99bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xbe>
    99bc:	e004      	b.n	99c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xca>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    99be:	f00a fc55 	bl	1426c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    99c2:	9002      	str	r0, [sp, #8]
    99c4:	e009      	b.n	99da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xdc>
        self.write_pixels(colors) ? ;
    99c6:	defe      	udf	#254	; 0xfe
    99c8:	f009 f91a 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    99cc:	e7ff      	b.n	99ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xd0>
    99ce:	f00c fbbb 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    99d2:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    99d6:	e7ff      	b.n	99d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xda>
    99d8:	e017      	b.n	9a0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    99da:	f24f 1190 	movw	r1, #61840	; 0xf190
    99de:	f2c0 0101 	movt	r1, #1
    99e2:	f24f 13ec 	movw	r3, #61932	; 0xf1ec
    99e6:	f2c0 0301 	movt	r3, #1
    99ea:	220e      	movs	r2, #14
    99ec:	9802      	ldr	r0, [sp, #8]
    99ee:	f7ff f908 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    99f2:	e7ff      	b.n	99f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xf6>
    99f4:	2000      	movs	r0, #0
        Ok(())
    99f6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    99fa:	e7c7      	b.n	998c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    99fc:	2000      	movs	r0, #0
    99fe:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    9a02:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a04:	f000 ff1d 	bl	a842 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    9a08:	e7c0      	b.n	998c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    9a0a:	f89d 00ff 	ldrb.w	r0, [sp, #255]	; 0xff
    9a0e:	07c0      	lsls	r0, r0, #31
    9a10:	2800      	cmp	r0, #0
    9a12:	d1f3      	bne.n	99fc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xfe>
    9a14:	e7ba      	b.n	998c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>

00009a16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
    9a16:	b580      	push	{r7, lr}
    9a18:	b084      	sub	sp, #16
    9a1a:	9001      	str	r0, [sp, #4]
    9a1c:	9102      	str	r1, [sp, #8]
    9a1e:	9203      	str	r2, [sp, #12]
        mynewt::spi::spi_noblock_write_data(
    9a20:	4608      	mov	r0, r1
    9a22:	4611      	mov	r1, r2
    9a24:	f00a fb8e 	bl	14144 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9a28:	9000      	str	r0, [sp, #0]
    9a2a:	e7ff      	b.n	9a2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
    9a2c:	f24f 11fc 	movw	r1, #61948	; 0xf1fc
    9a30:	f2c0 0101 	movt	r1, #1
    9a34:	f24f 230c 	movw	r3, #61964	; 0xf20c
    9a38:	f2c0 0301 	movt	r3, #1
    9a3c:	220d      	movs	r2, #13
    9a3e:	9800      	ldr	r0, [sp, #0]
    9a40:	f7ff f8df 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9a44:	e7ff      	b.n	9a46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
    9a46:	2000      	movs	r0, #0
    }
    9a48:	b004      	add	sp, #16
    9a4a:	bd80      	pop	{r7, pc}

00009a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
    9a4c:	b580      	push	{r7, lr}
    9a4e:	b088      	sub	sp, #32
    9a50:	460a      	mov	r2, r1
    9a52:	9006      	str	r0, [sp, #24]
    9a54:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
    9a58:	9004      	str	r0, [sp, #16]
    9a5a:	4608      	mov	r0, r1
    9a5c:	9203      	str	r2, [sp, #12]
    9a5e:	f000 feb9 	bl	a7d4 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
    9a62:	9002      	str	r0, [sp, #8]
    9a64:	e7ff      	b.n	9a66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
    9a66:	9802      	ldr	r0, [sp, #8]
    9a68:	f8ad 0016 	strh.w	r0, [sp, #22]
    9a6c:	e7ff      	b.n	9a6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
    9a6e:	f10d 0116 	add.w	r1, sp, #22
    9a72:	2202      	movs	r2, #2
        self.write_data(&bytes)
    9a74:	9804      	ldr	r0, [sp, #16]
    9a76:	f7ff ffce 	bl	9a16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
    9a7a:	9001      	str	r0, [sp, #4]
    9a7c:	e7ff      	b.n	9a7e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
    9a7e:	9801      	ldr	r0, [sp, #4]
    9a80:	f000 0001 	and.w	r0, r0, #1
    9a84:	b008      	add	sp, #32
    9a86:	bd80      	pop	{r7, pc}

00009a88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    9a88:	b580      	push	{r7, lr}
    9a8a:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
    9a8e:	90a8      	str	r0, [sp, #672]	; 0x2a0
    9a90:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    9a92:	f88d 229f 	strb.w	r2, [sp, #671]	; 0x29f
    9a96:	2301      	movs	r3, #1
    9a98:	f88d 329f 	strb.w	r3, [sp, #671]	; 0x29f
    9a9c:	232c      	movs	r3, #44	; 0x2c
    9a9e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    9aa2:	920a      	str	r2, [sp, #40]	; 0x28
    9aa4:	9209      	str	r2, [sp, #36]	; 0x24
    9aa6:	9209      	str	r2, [sp, #36]	; 0x24
    9aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9aac:	f89d c023 	ldrb.w	ip, [sp, #35]	; 0x23
    9ab0:	9007      	str	r0, [sp, #28]
    9ab2:	9106      	str	r1, [sp, #24]
    9ab4:	4661      	mov	r1, ip
    9ab6:	f000 f898 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9aba:	9005      	str	r0, [sp, #20]
    9abc:	e7ff      	b.n	9abe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x36>
    9abe:	9805      	ldr	r0, [sp, #20]
    9ac0:	f000 0001 	and.w	r0, r0, #1
    9ac4:	f7ff f8d6 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9ac8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    9acc:	e7ff      	b.n	9ace <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x46>
    9ace:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    9ad2:	07c1      	lsls	r1, r0, #31
    9ad4:	2900      	cmp	r1, #0
    9ad6:	d001      	beq.n	9adc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x54>
    9ad8:	e7ff      	b.n	9ada <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x52>
    9ada:	e00e      	b.n	9afa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x72>
    9adc:	2000      	movs	r0, #0
        for color in colors {
    9ade:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    9ae2:	a83f      	add	r0, sp, #252	; 0xfc
    9ae4:	22cc      	movs	r2, #204	; 0xcc
    9ae6:	9004      	str	r0, [sp, #16]
    9ae8:	9906      	ldr	r1, [sp, #24]
    9aea:	f015 f9ab 	bl	1ee44 <__aeabi_memcpy>
    9aee:	a80b      	add	r0, sp, #44	; 0x2c
    9af0:	9904      	ldr	r1, [sp, #16]
    9af2:	f00b fe5d 	bl	157b0 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>
    9af6:	e00e      	b.n	9b16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8e>
        self.write_command(Instruction::RAMWR, None)?;
    9af8:	defe      	udf	#254	; 0xfe
    9afa:	f009 f881 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9afe:	e004      	b.n	9b0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x82>
    }
    9b00:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    9b04:	f50d 7d2e 	add.w	sp, sp, #696	; 0x2b8
    9b08:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    9b0a:	f00c fb1d 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9b0e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    9b12:	e7ff      	b.n	9b14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8c>
    9b14:	e063      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
    9b16:	a872      	add	r0, sp, #456	; 0x1c8
    9b18:	a90b      	add	r1, sp, #44	; 0x2c
    9b1a:	22d0      	movs	r2, #208	; 0xd0
        for color in colors {
    9b1c:	f015 f992 	bl	1ee44 <__aeabi_memcpy>
    9b20:	e7ff      	b.n	9b22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
    9b22:	a872      	add	r0, sp, #456	; 0x1c8
    9b24:	f00b fe5a 	bl	157dc <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>
    9b28:	f8ad 129a 	strh.w	r1, [sp, #666]	; 0x29a
    9b2c:	f8ad 0298 	strh.w	r0, [sp, #664]	; 0x298
    9b30:	e7ff      	b.n	9b32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xaa>
    9b32:	f8bd 0298 	ldrh.w	r0, [sp, #664]	; 0x298
    9b36:	4601      	mov	r1, r0
    9b38:	2800      	cmp	r0, #0
    9b3a:	d001      	beq.n	9b40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb8>
    9b3c:	e7ff      	b.n	9b3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb6>
    9b3e:	e004      	b.n	9b4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xc2>
    9b40:	a872      	add	r0, sp, #456	; 0x1c8
        }
    9b42:	f000 fe9d 	bl	a880 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    9b46:	e02e      	b.n	9ba6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11e>
        for color in colors {
    9b48:	defe      	udf	#254	; 0xfe
    9b4a:	f8bd 029a 	ldrh.w	r0, [sp, #666]	; 0x29a
    9b4e:	f8ad 02b2 	strh.w	r0, [sp, #690]	; 0x2b2
    9b52:	f8ad 02b4 	strh.w	r0, [sp, #692]	; 0x2b4
    9b56:	f8ad 02b6 	strh.w	r0, [sp, #694]	; 0x2b6
            self.write_word(color)?;
    9b5a:	9907      	ldr	r1, [sp, #28]
    9b5c:	9003      	str	r0, [sp, #12]
    9b5e:	4608      	mov	r0, r1
    9b60:	9903      	ldr	r1, [sp, #12]
    9b62:	f7ff ff73 	bl	9a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9b66:	9002      	str	r0, [sp, #8]
    9b68:	e7ff      	b.n	9b6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xe2>
    9b6a:	9802      	ldr	r0, [sp, #8]
    9b6c:	f000 0001 	and.w	r0, r0, #1
    9b70:	f7ff f880 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9b74:	f88d 029e 	strb.w	r0, [sp, #670]	; 0x29e
    9b78:	e7ff      	b.n	9b7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xf2>
    9b7a:	f89d 029e 	ldrb.w	r0, [sp, #670]	; 0x29e
    9b7e:	07c1      	lsls	r1, r0, #31
    9b80:	2900      	cmp	r1, #0
    9b82:	d001      	beq.n	9b88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x100>
    9b84:	e7ff      	b.n	9b86 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xfe>
    9b86:	e001      	b.n	9b8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x104>
        for color in colors {
    9b88:	e7cb      	b.n	9b22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
            self.write_word(color)?;
    9b8a:	defe      	udf	#254	; 0xfe
    9b8c:	f009 f838 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9b90:	e7ff      	b.n	9b92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x10a>
    9b92:	f00c fad9 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9b96:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    9b9a:	e7ff      	b.n	9b9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x114>
    9b9c:	a872      	add	r0, sp, #456	; 0x1c8
        }
    9b9e:	f000 fe6f 	bl	a880 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    9ba2:	e7ff      	b.n	9ba4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11c>
    }
    9ba4:	e01b      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    9ba6:	f00a fb61 	bl	1426c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    9baa:	9001      	str	r0, [sp, #4]
    9bac:	e7ff      	b.n	9bae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x126>
    9bae:	f24f 1190 	movw	r1, #61840	; 0xf190
    9bb2:	f2c0 0101 	movt	r1, #1
    9bb6:	f24f 231c 	movw	r3, #61980	; 0xf21c
    9bba:	f2c0 0301 	movt	r3, #1
    9bbe:	220e      	movs	r2, #14
    9bc0:	9801      	ldr	r0, [sp, #4]
    9bc2:	f7ff f81e 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9bc6:	e7ff      	b.n	9bc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x140>
    9bc8:	2000      	movs	r0, #0
        Ok(())
    9bca:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    }
    9bce:	e797      	b.n	9b00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    9bd0:	2000      	movs	r0, #0
    9bd2:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    9bd6:	9806      	ldr	r0, [sp, #24]
    9bd8:	f000 fe33 	bl	a842 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    9bdc:	e790      	b.n	9b00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    9bde:	f89d 029f 	ldrb.w	r0, [sp, #671]	; 0x29f
    9be2:	07c0      	lsls	r0, r0, #31
    9be4:	2800      	cmp	r0, #0
    9be6:	d1f3      	bne.n	9bd0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x148>
    9be8:	e78a      	b.n	9b00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>

00009bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
    9bea:	b580      	push	{r7, lr}
    9bec:	b08e      	sub	sp, #56	; 0x38
    9bee:	468c      	mov	ip, r1
    9bf0:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    9bf4:	920b      	str	r2, [sp, #44]	; 0x2c
    9bf6:	930c      	str	r3, [sp, #48]	; 0x30
    9bf8:	900d      	str	r0, [sp, #52]	; 0x34
    9bfa:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
    9bfe:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9c02:	f000 fdbd 	bl	a780 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
    9c06:	9008      	str	r0, [sp, #32]
    9c08:	9107      	str	r1, [sp, #28]
    9c0a:	e7ff      	b.n	9c0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
    9c0c:	9808      	ldr	r0, [sp, #32]
    9c0e:	f000 0001 	and.w	r0, r0, #1
    9c12:	f24f 222c 	movw	r2, #61996	; 0xf22c
    9c16:	f2c0 0201 	movt	r2, #1
    9c1a:	9907      	ldr	r1, [sp, #28]
    9c1c:	f00b fc17 	bl	1544e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9c20:	9006      	str	r0, [sp, #24]
    9c22:	e7ff      	b.n	9c24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
    9c24:	9806      	ldr	r0, [sp, #24]
    9c26:	f00a fa45 	bl	140b4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
    9c2a:	9005      	str	r0, [sp, #20]
    9c2c:	e7ff      	b.n	9c2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
    9c2e:	f24f 213c 	movw	r1, #62012	; 0xf23c
    9c32:	f2c0 0101 	movt	r1, #1
    9c36:	f24f 2348 	movw	r3, #62024	; 0xf248
    9c3a:	f2c0 0301 	movt	r3, #1
    9c3e:	220c      	movs	r2, #12
    9c40:	9805      	ldr	r0, [sp, #20]
    9c42:	f7fe ffde 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9c46:	e7ff      	b.n	9c48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
    9c48:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
    9c4a:	f00b fc5b 	bl	15504 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
    9c4e:	9004      	str	r0, [sp, #16]
    9c50:	e7ff      	b.n	9c52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
    9c52:	9804      	ldr	r0, [sp, #16]
    9c54:	07c1      	lsls	r1, r0, #31
    9c56:	2900      	cmp	r1, #0
    9c58:	d01f      	beq.n	9c9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9c5a:	e7ff      	b.n	9c5c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
    9c5c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9c5e:	990c      	ldr	r1, [sp, #48]	; 0x30
    9c60:	f24f 2258 	movw	r2, #62040	; 0xf258
    9c64:	f2c0 0201 	movt	r2, #1
    9c68:	f00b fc1a 	bl	154a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
    9c6c:	9003      	str	r0, [sp, #12]
    9c6e:	9102      	str	r1, [sp, #8]
    9c70:	e7ff      	b.n	9c72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
    9c72:	9803      	ldr	r0, [sp, #12]
    9c74:	9902      	ldr	r1, [sp, #8]
    9c76:	f00a fa65 	bl	14144 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9c7a:	9001      	str	r0, [sp, #4]
    9c7c:	e7ff      	b.n	9c7e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
    9c7e:	f24f 11fc 	movw	r1, #61948	; 0xf1fc
    9c82:	f2c0 0101 	movt	r1, #1
    9c86:	f24f 2368 	movw	r3, #62056	; 0xf268
    9c8a:	f2c0 0301 	movt	r3, #1
    9c8e:	220d      	movs	r2, #13
    9c90:	9801      	ldr	r0, [sp, #4]
    9c92:	f7fe ffb6 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9c96:	e7ff      	b.n	9c98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
    9c98:	e7ff      	b.n	9c9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9c9a:	2000      	movs	r0, #0
    }
    9c9c:	b00e      	add	sp, #56	; 0x38
    9c9e:	bd80      	pop	{r7, pc}

00009ca0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:
    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
    9ca0:	b580      	push	{r7, lr}
    9ca2:	b098      	sub	sp, #96	; 0x60
    9ca4:	9012      	str	r0, [sp, #72]	; 0x48
    9ca6:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
    9ca8:	7d02      	ldrb	r2, [r0, #20]
    9caa:	07d2      	lsls	r2, r2, #31
    9cac:	2a00      	cmp	r2, #0
    9cae:	910a      	str	r1, [sp, #40]	; 0x28
    9cb0:	9009      	str	r0, [sp, #36]	; 0x24
    9cb2:	d109      	bne.n	9cc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
    9cb4:	e7ff      	b.n	9cb6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
    9cb6:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9cb8:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    9cbc:	980a      	ldr	r0, [sp, #40]	; 0x28
    9cbe:	f7ff fd96 	bl	97ee <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9cc2:	9008      	str	r0, [sp, #32]
    9cc4:	9107      	str	r1, [sp, #28]
    9cc6:	e044      	b.n	9d52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
    9cc8:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
    9cca:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    9cce:	980a      	ldr	r0, [sp, #40]	; 0x28
    9cd0:	f7ff fd8d 	bl	97ee <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9cd4:	9006      	str	r0, [sp, #24]
    9cd6:	9105      	str	r1, [sp, #20]
    9cd8:	e7ff      	b.n	9cda <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
    9cda:	9806      	ldr	r0, [sp, #24]
    9cdc:	f000 0001 	and.w	r0, r0, #1
    9ce0:	f24f 2278 	movw	r2, #62072	; 0xf278
    9ce4:	f2c0 0201 	movt	r2, #1
    9ce8:	9905      	ldr	r1, [sp, #20]
    9cea:	f00b fbb0 	bl	1544e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9cee:	9004      	str	r0, [sp, #16]
    9cf0:	e7ff      	b.n	9cf2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
    9cf2:	9804      	ldr	r0, [sp, #16]
    9cf4:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9cf8:	f10d 0139 	add.w	r1, sp, #57	; 0x39
    9cfc:	910c      	str	r1, [sp, #48]	; 0x30
    9cfe:	2101      	movs	r1, #1
    9d00:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
    9d02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9d04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9d06:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9d0a:	9809      	ldr	r0, [sp, #36]	; 0x24
    9d0c:	f7ff ff6d 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9d10:	9003      	str	r0, [sp, #12]
    9d12:	e7ff      	b.n	9d14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
    9d14:	9803      	ldr	r0, [sp, #12]
    9d16:	f000 0001 	and.w	r0, r0, #1
    9d1a:	f7fe ffab 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d1e:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    9d22:	e7ff      	b.n	9d24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
    9d24:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9d28:	07c1      	lsls	r1, r0, #31
    9d2a:	2900      	cmp	r1, #0
    9d2c:	d001      	beq.n	9d32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
    9d2e:	e7ff      	b.n	9d30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
    9d30:	e001      	b.n	9d36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
    9d32:	e047      	b.n	9dc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9d34:	defe      	udf	#254	; 0xfe
            ))?;
    9d36:	f008 ff63 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d3a:	e003      	b.n	9d44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
    }
    9d3c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9d40:	b018      	add	sp, #96	; 0x60
    9d42:	bd80      	pop	{r7, pc}
            ))?;
    9d44:	f00c fa00 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d48:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9d4c:	e7ff      	b.n	9d4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
    9d4e:	e7ff      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9d50:	e7f4      	b.n	9d3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9d52:	9808      	ldr	r0, [sp, #32]
    9d54:	f000 0001 	and.w	r0, r0, #1
    9d58:	f24f 2288 	movw	r2, #62088	; 0xf288
    9d5c:	f2c0 0201 	movt	r2, #1
    9d60:	9907      	ldr	r1, [sp, #28]
    9d62:	f00b fb74 	bl	1544e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9d66:	9002      	str	r0, [sp, #8]
    9d68:	e7ff      	b.n	9d6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
    9d6a:	9802      	ldr	r0, [sp, #8]
    9d6c:	f040 0108 	orr.w	r1, r0, #8
    9d70:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    9d74:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    9d78:	910f      	str	r1, [sp, #60]	; 0x3c
    9d7a:	2101      	movs	r1, #1
    9d7c:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
    9d7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9d80:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9d82:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9d86:	9809      	ldr	r0, [sp, #36]	; 0x24
    9d88:	f7ff ff2f 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9d8c:	9001      	str	r0, [sp, #4]
    9d8e:	e7ff      	b.n	9d90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
    9d90:	9801      	ldr	r0, [sp, #4]
    9d92:	f000 0001 	and.w	r0, r0, #1
    9d96:	f7fe ff6d 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d9a:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9d9e:	e7ff      	b.n	9da0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
    9da0:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9da4:	07c1      	lsls	r1, r0, #31
    9da6:	2900      	cmp	r1, #0
    9da8:	d001      	beq.n	9dae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
    9daa:	e7ff      	b.n	9dac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
    9dac:	e001      	b.n	9db2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
    9dae:	e009      	b.n	9dc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9db0:	defe      	udf	#254	; 0xfe
            ))?;
    9db2:	f008 ff25 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9db6:	e7ff      	b.n	9db8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
    9db8:	f00c f9c6 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9dbc:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9dc0:	e7ff      	b.n	9dc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
    9dc2:	e7c5      	b.n	9d50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9dc4:	2000      	movs	r0, #0
        Ok(())
    9dc6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9dca:	e7b7      	b.n	9d3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00009dcc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
    9dcc:	b5b0      	push	{r4, r5, r7, lr}
    9dce:	b0a2      	sub	sp, #136	; 0x88
    9dd0:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
    9dd4:	469e      	mov	lr, r3
    9dd6:	4614      	mov	r4, r2
    9dd8:	460d      	mov	r5, r1
    9dda:	9015      	str	r0, [sp, #84]	; 0x54
    9ddc:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    9de0:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    9de4:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    9de8:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    9dec:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
    9dee:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    9df2:	2100      	movs	r1, #0
    9df4:	9110      	str	r1, [sp, #64]	; 0x40
    9df6:	910f      	str	r1, [sp, #60]	; 0x3c
    9df8:	910f      	str	r1, [sp, #60]	; 0x3c
    9dfa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9dfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9dfe:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9e02:	900d      	str	r0, [sp, #52]	; 0x34
    9e04:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9e08:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9e0c:	940a      	str	r4, [sp, #40]	; 0x28
    9e0e:	9509      	str	r5, [sp, #36]	; 0x24
    9e10:	f7ff feeb 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e14:	9008      	str	r0, [sp, #32]
    9e16:	e7ff      	b.n	9e18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
    9e18:	9808      	ldr	r0, [sp, #32]
    9e1a:	f000 0001 	and.w	r0, r0, #1
    9e1e:	f7fe ff29 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e22:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9e26:	e7ff      	b.n	9e28 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
    9e28:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9e2c:	07c1      	lsls	r1, r0, #31
    9e2e:	2900      	cmp	r1, #0
    9e30:	d001      	beq.n	9e36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
    9e32:	e7ff      	b.n	9e34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
    9e34:	e00d      	b.n	9e52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
    9e36:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e38:	8a01      	ldrh	r1, [r0, #16]
    9e3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9e3c:	fa11 f182 	uxtah	r1, r1, r2
    9e40:	b28b      	uxth	r3, r1
    9e42:	468c      	mov	ip, r1
    9e44:	428b      	cmp	r3, r1
    9e46:	f8cd c01c 	str.w	ip, [sp, #28]
    9e4a:	f040 80c2 	bne.w	9fd2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
    9e4e:	e00d      	b.n	9e6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
    9e50:	defe      	udf	#254	; 0xfe
    9e52:	f008 fed5 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e56:	e003      	b.n	9e60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
    }
    9e58:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    9e5c:	b022      	add	sp, #136	; 0x88
    9e5e:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
    9e60:	f00c f972 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e64:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9e68:	e7ff      	b.n	9e6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
    9e6a:	e7f5      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9e6c:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e6e:	9907      	ldr	r1, [sp, #28]
    9e70:	f7ff fdec 	bl	9a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9e74:	9006      	str	r0, [sp, #24]
    9e76:	e7ff      	b.n	9e78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
    9e78:	9806      	ldr	r0, [sp, #24]
    9e7a:	f000 0001 	and.w	r0, r0, #1
    9e7e:	f7fe fef9 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e82:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9e86:	e7ff      	b.n	9e88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
    9e88:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9e8c:	07c1      	lsls	r1, r0, #31
    9e8e:	2900      	cmp	r1, #0
    9e90:	d001      	beq.n	9e96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
    9e92:	e7ff      	b.n	9e94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
    9e94:	e00d      	b.n	9eb2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
    9e96:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e98:	8a01      	ldrh	r1, [r0, #16]
    9e9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9e9c:	fa11 f182 	uxtah	r1, r1, r2
    9ea0:	b28b      	uxth	r3, r1
    9ea2:	468c      	mov	ip, r1
    9ea4:	428b      	cmp	r3, r1
    9ea6:	f8cd c014 	str.w	ip, [sp, #20]
    9eaa:	f040 809e 	bne.w	9fea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
    9eae:	e009      	b.n	9ec4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
    9eb0:	defe      	udf	#254	; 0xfe
    9eb2:	f008 fea5 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9eb6:	e7ff      	b.n	9eb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
    9eb8:	f00c f946 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ebc:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9ec0:	e7ff      	b.n	9ec2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
    9ec2:	e7c9      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
    9ec4:	980d      	ldr	r0, [sp, #52]	; 0x34
    9ec6:	9905      	ldr	r1, [sp, #20]
    9ec8:	f7ff fdc0 	bl	9a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9ecc:	9004      	str	r0, [sp, #16]
    9ece:	e7ff      	b.n	9ed0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
    9ed0:	9804      	ldr	r0, [sp, #16]
    9ed2:	f000 0001 	and.w	r0, r0, #1
    9ed6:	f7fe fecd 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9eda:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    9ede:	e7ff      	b.n	9ee0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
    9ee0:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    9ee4:	07c1      	lsls	r1, r0, #31
    9ee6:	2900      	cmp	r1, #0
    9ee8:	d001      	beq.n	9eee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
    9eea:	e7ff      	b.n	9eec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
    9eec:	e010      	b.n	9f10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
    9eee:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
    9ef0:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    9ef4:	2000      	movs	r0, #0
    9ef6:	9013      	str	r0, [sp, #76]	; 0x4c
    9ef8:	9012      	str	r0, [sp, #72]	; 0x48
    9efa:	9012      	str	r0, [sp, #72]	; 0x48
    9efc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9efe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9f00:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
    9f04:	980d      	ldr	r0, [sp, #52]	; 0x34
    9f06:	f7ff fe70 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f0a:	9003      	str	r0, [sp, #12]
    9f0c:	e009      	b.n	9f22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
    9f0e:	defe      	udf	#254	; 0xfe
    9f10:	f008 fe76 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f14:	e7ff      	b.n	9f16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
    9f16:	f00c f917 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9f1a:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9f1e:	e7ff      	b.n	9f20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
    9f20:	e79a      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
    9f22:	9803      	ldr	r0, [sp, #12]
    9f24:	f000 0001 	and.w	r0, r0, #1
    9f28:	f7fe fea4 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f2c:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9f30:	e7ff      	b.n	9f32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
    9f32:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    9f36:	07c1      	lsls	r1, r0, #31
    9f38:	2900      	cmp	r1, #0
    9f3a:	d001      	beq.n	9f40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
    9f3c:	e7ff      	b.n	9f3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
    9f3e:	e00c      	b.n	9f5a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
    9f40:	980d      	ldr	r0, [sp, #52]	; 0x34
    9f42:	8a41      	ldrh	r1, [r0, #18]
    9f44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9f46:	fa11 f182 	uxtah	r1, r1, r2
    9f4a:	b28b      	uxth	r3, r1
    9f4c:	468c      	mov	ip, r1
    9f4e:	428b      	cmp	r3, r1
    9f50:	f8cd c008 	str.w	ip, [sp, #8]
    9f54:	d155      	bne.n	a002 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
    9f56:	e009      	b.n	9f6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
    9f58:	defe      	udf	#254	; 0xfe
    9f5a:	f008 fe51 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f5e:	e7ff      	b.n	9f60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
    9f60:	f00c f8f2 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9f64:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9f68:	e7ff      	b.n	9f6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
    9f6a:	e775      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
    9f6c:	980d      	ldr	r0, [sp, #52]	; 0x34
    9f6e:	9902      	ldr	r1, [sp, #8]
    9f70:	f7ff fd6c 	bl	9a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9f74:	9001      	str	r0, [sp, #4]
    9f76:	e7ff      	b.n	9f78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
    9f78:	9801      	ldr	r0, [sp, #4]
    9f7a:	f000 0001 	and.w	r0, r0, #1
    9f7e:	f7fe fe79 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f82:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    9f86:	e7ff      	b.n	9f88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
    9f88:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    9f8c:	07c1      	lsls	r1, r0, #31
    9f8e:	2900      	cmp	r1, #0
    9f90:	d001      	beq.n	9f96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
    9f92:	e7ff      	b.n	9f94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
    9f94:	e00c      	b.n	9fb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
    9f96:	980d      	ldr	r0, [sp, #52]	; 0x34
    9f98:	8a41      	ldrh	r1, [r0, #18]
    9f9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9f9c:	fa11 f182 	uxtah	r1, r1, r2
    9fa0:	b28b      	uxth	r3, r1
    9fa2:	468c      	mov	ip, r1
    9fa4:	428b      	cmp	r3, r1
    9fa6:	f8cd c000 	str.w	ip, [sp]
    9faa:	d136      	bne.n	a01a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
    9fac:	e009      	b.n	9fc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
    9fae:	defe      	udf	#254	; 0xfe
    9fb0:	f008 fe26 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9fb4:	e7ff      	b.n	9fb6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
    9fb6:	f00c f8c7 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9fba:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9fbe:	e7ff      	b.n	9fc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
    9fc0:	e74a      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
    9fc2:	980d      	ldr	r0, [sp, #52]	; 0x34
    9fc4:	9900      	ldr	r1, [sp, #0]
    9fc6:	f7ff fd41 	bl	9a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9fca:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9fce:	e7ff      	b.n	9fd0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
    9fd0:	e742      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9fd2:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    9fd6:	f2c0 0001 	movt	r0, #1
    9fda:	f24f 2298 	movw	r2, #62104	; 0xf298
    9fde:	f2c0 0201 	movt	r2, #1
    9fe2:	211c      	movs	r1, #28
    9fe4:	f00e fb5a 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9fe8:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
    9fea:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    9fee:	f2c0 0001 	movt	r0, #1
    9ff2:	f24f 22cc 	movw	r2, #62156	; 0xf2cc
    9ff6:	f2c0 0201 	movt	r2, #1
    9ffa:	211c      	movs	r1, #28
    9ffc:	f00e fb4e 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    a000:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
    a002:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    a006:	f2c0 0001 	movt	r0, #1
    a00a:	f24f 22dc 	movw	r2, #62172	; 0xf2dc
    a00e:	f2c0 0201 	movt	r2, #1
    a012:	211c      	movs	r1, #28
    a014:	f00e fb42 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    a018:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
    a01a:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    a01e:	f2c0 0001 	movt	r0, #1
    a022:	f24f 22ec 	movw	r2, #62188	; 0xf2ec
    a026:	f2c0 0201 	movt	r2, #1
    a02a:	211c      	movs	r1, #28
    a02c:	f00e fb36 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    a030:	defe      	udf	#254	; 0xfe

0000a032 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
    a032:	b5b0      	push	{r4, r5, r7, lr}
    a034:	b08a      	sub	sp, #40	; 0x28
    a036:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    a03a:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    a03e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    a040:	9106      	str	r1, [sp, #24]
    a042:	9207      	str	r2, [sp, #28]
    a044:	9308      	str	r3, [sp, #32]
    a046:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    a04a:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
    a04e:	9100      	str	r1, [sp, #0]
    a050:	9201      	str	r2, [sp, #4]
    a052:	9302      	str	r3, [sp, #8]
    a054:	9403      	str	r4, [sp, #12]
    a056:	f88d e014 	strb.w	lr, [sp, #20]
    a05a:	f88d c015 	strb.w	ip, [sp, #21]
    a05e:	2100      	movs	r1, #0
    a060:	f8ad 1010 	strh.w	r1, [sp, #16]
    a064:	f8ad 1012 	strh.w	r1, [sp, #18]
    a068:	4669      	mov	r1, sp
        display
    a06a:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    a06e:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
    a072:	b00a      	add	sp, #40	; 0x28
    a074:	bdb0      	pop	{r4, r5, r7, pc}

0000a076 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
    a076:	b580      	push	{r7, lr}
    a078:	b0f6      	sub	sp, #472	; 0x1d8
    a07a:	904e      	str	r0, [sp, #312]	; 0x138
    a07c:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
    a07e:	9117      	str	r1, [sp, #92]	; 0x5c
    a080:	9016      	str	r0, [sp, #88]	; 0x58
    a082:	f009 fabd 	bl	13600 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
    a086:	9015      	str	r0, [sp, #84]	; 0x54
    a088:	e7ff      	b.n	a08a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
    a08a:	f24f 21fc 	movw	r1, #62204	; 0xf2fc
    a08e:	f2c0 0101 	movt	r1, #1
    a092:	f24f 330c 	movw	r3, #62220	; 0xf30c
    a096:	f2c0 0301 	movt	r3, #1
    a09a:	220d      	movs	r2, #13
    a09c:	9815      	ldr	r0, [sp, #84]	; 0x54
    a09e:	f7fe fdb0 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a0a2:	e7ff      	b.n	a0a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
    a0a4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0a6:	f7ff fbbd 	bl	9824 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
    a0aa:	9014      	str	r0, [sp, #80]	; 0x50
    a0ac:	e7ff      	b.n	a0ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
    a0ae:	9814      	ldr	r0, [sp, #80]	; 0x50
    a0b0:	f000 0001 	and.w	r0, r0, #1
    a0b4:	f7fe fdde 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a0b8:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    a0bc:	e7ff      	b.n	a0be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
    a0be:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
    a0c2:	07c1      	lsls	r1, r0, #31
    a0c4:	2900      	cmp	r1, #0
    a0c6:	d001      	beq.n	a0cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
    a0c8:	e7ff      	b.n	a0ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
    a0ca:	e010      	b.n	a0ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
    a0cc:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
    a0ce:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    a0d2:	2000      	movs	r0, #0
    a0d4:	901a      	str	r0, [sp, #104]	; 0x68
    a0d6:	9019      	str	r0, [sp, #100]	; 0x64
    a0d8:	9019      	str	r0, [sp, #100]	; 0x64
    a0da:	9a19      	ldr	r2, [sp, #100]	; 0x64
    a0dc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    a0de:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    a0e2:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0e4:	f7ff fd81 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0e8:	9013      	str	r0, [sp, #76]	; 0x4c
    a0ea:	e00d      	b.n	a108 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
    a0ec:	defe      	udf	#254	; 0xfe
    a0ee:	f008 fd87 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a0f2:	e003      	b.n	a0fc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
    a0f4:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    a0f8:	b076      	add	sp, #472	; 0x1d8
    a0fa:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
    a0fc:	f00c f824 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a100:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a104:	e7ff      	b.n	a106 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
    a106:	e7f5      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
    a108:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a10a:	f000 0001 	and.w	r0, r0, #1
    a10e:	f7fe fdb1 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a112:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    a116:	e7ff      	b.n	a118 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
    a118:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    a11c:	07c1      	lsls	r1, r0, #31
    a11e:	2900      	cmp	r1, #0
    a120:	d001      	beq.n	a126 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
    a122:	e7ff      	b.n	a124 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
    a124:	e005      	b.n	a132 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
    a126:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a128:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a12a:	f00b f864 	bl	151f6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a12e:	e009      	b.n	a144 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
    a130:	defe      	udf	#254	; 0xfe
    a132:	f008 fd65 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a136:	e7ff      	b.n	a138 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
    a138:	f00c f806 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a13c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a140:	e7ff      	b.n	a142 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
    a142:	e7d7      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a144:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
    a146:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    a14a:	2000      	movs	r0, #0
    a14c:	901d      	str	r0, [sp, #116]	; 0x74
    a14e:	901c      	str	r0, [sp, #112]	; 0x70
    a150:	901c      	str	r0, [sp, #112]	; 0x70
    a152:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    a154:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a156:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
    a15a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a15c:	f7ff fd45 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a160:	9012      	str	r0, [sp, #72]	; 0x48
    a162:	e7ff      	b.n	a164 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
    a164:	9812      	ldr	r0, [sp, #72]	; 0x48
    a166:	f000 0001 	and.w	r0, r0, #1
    a16a:	f7fe fd83 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a16e:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
    a172:	e7ff      	b.n	a174 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
    a174:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
    a178:	07c1      	lsls	r1, r0, #31
    a17a:	2900      	cmp	r1, #0
    a17c:	d001      	beq.n	a182 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
    a17e:	e7ff      	b.n	a180 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
    a180:	e005      	b.n	a18e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
    a182:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a184:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a186:	f00b f836 	bl	151f6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a18a:	e009      	b.n	a1a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
    a18c:	defe      	udf	#254	; 0xfe
    a18e:	f008 fd37 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a192:	e7ff      	b.n	a194 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
    a194:	f00b ffd8 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a198:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a19c:	e7ff      	b.n	a19e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
    a19e:	e7a9      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a1a0:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a1a2:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    a1a6:	f24f 3020 	movw	r0, #62240	; 0xf320
    a1aa:	f2c0 0001 	movt	r0, #1
    a1ae:	6800      	ldr	r0, [r0, #0]
    a1b0:	901f      	str	r0, [sp, #124]	; 0x7c
    a1b2:	2003      	movs	r0, #3
    a1b4:	9020      	str	r0, [sp, #128]	; 0x80
    a1b6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    a1b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    a1ba:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    a1be:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1c0:	f7ff fd13 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1c4:	9011      	str	r0, [sp, #68]	; 0x44
    a1c6:	e7ff      	b.n	a1c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
    a1c8:	9811      	ldr	r0, [sp, #68]	; 0x44
    a1ca:	f000 0001 	and.w	r0, r0, #1
    a1ce:	f7fe fd51 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a1d2:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    a1d6:	e7ff      	b.n	a1d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
    a1d8:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    a1dc:	07c1      	lsls	r1, r0, #31
    a1de:	2900      	cmp	r1, #0
    a1e0:	d001      	beq.n	a1e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
    a1e2:	e7ff      	b.n	a1e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
    a1e4:	e014      	b.n	a210 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
    a1e6:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a1e8:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    a1ec:	f24f 3020 	movw	r0, #62240	; 0xf320
    a1f0:	f2c0 0001 	movt	r0, #1
    a1f4:	6800      	ldr	r0, [r0, #0]
    a1f6:	9022      	str	r0, [sp, #136]	; 0x88
    a1f8:	2003      	movs	r0, #3
    a1fa:	9023      	str	r0, [sp, #140]	; 0x8c
    a1fc:	9a22      	ldr	r2, [sp, #136]	; 0x88
    a1fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    a200:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
    a204:	9816      	ldr	r0, [sp, #88]	; 0x58
    a206:	f7ff fcf0 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a20a:	9010      	str	r0, [sp, #64]	; 0x40
    a20c:	e009      	b.n	a222 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    a20e:	defe      	udf	#254	; 0xfe
    a210:	f008 fcf6 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a214:	e7ff      	b.n	a216 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
    a216:	f00b ff97 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a21a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a21e:	e7ff      	b.n	a220 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
    a220:	e768      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a222:	9810      	ldr	r0, [sp, #64]	; 0x40
    a224:	f000 0001 	and.w	r0, r0, #1
    a228:	f7fe fd24 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a22c:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
    a230:	e7ff      	b.n	a232 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
    a232:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
    a236:	07c1      	lsls	r1, r0, #31
    a238:	2900      	cmp	r1, #0
    a23a:	d001      	beq.n	a240 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
    a23c:	e7ff      	b.n	a23e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
    a23e:	e014      	b.n	a26a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
    a240:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
    a242:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a246:	f24f 302c 	movw	r0, #62252	; 0xf32c
    a24a:	f2c0 0001 	movt	r0, #1
    a24e:	6800      	ldr	r0, [r0, #0]
    a250:	9025      	str	r0, [sp, #148]	; 0x94
    a252:	2006      	movs	r0, #6
    a254:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
    a256:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a258:	9b26      	ldr	r3, [sp, #152]	; 0x98
    a25a:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
    a25e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a260:	f7ff fcc3 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a264:	900f      	str	r0, [sp, #60]	; 0x3c
    a266:	e009      	b.n	a27c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    a268:	defe      	udf	#254	; 0xfe
    a26a:	f008 fcc9 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a26e:	e7ff      	b.n	a270 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
    a270:	f00b ff6a 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a274:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a278:	e7ff      	b.n	a27a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
    a27a:	e73b      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
    a27c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a27e:	f000 0001 	and.w	r0, r0, #1
    a282:	f7fe fcf7 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a286:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
    a28a:	e7ff      	b.n	a28c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a28c:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
    a290:	07c1      	lsls	r1, r0, #31
    a292:	2900      	cmp	r1, #0
    a294:	d001      	beq.n	a29a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
    a296:	e7ff      	b.n	a298 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
    a298:	e014      	b.n	a2c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
    a29a:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a29c:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
    a2a0:	f24f 3034 	movw	r0, #62260	; 0xf334
    a2a4:	f2c0 0001 	movt	r0, #1
    a2a8:	6800      	ldr	r0, [r0, #0]
    a2aa:	9028      	str	r0, [sp, #160]	; 0xa0
    a2ac:	2001      	movs	r0, #1
    a2ae:	9029      	str	r0, [sp, #164]	; 0xa4
    a2b0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    a2b2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    a2b4:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
    a2b8:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2ba:	f7ff fc96 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2be:	900e      	str	r0, [sp, #56]	; 0x38
    a2c0:	e009      	b.n	a2d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
    a2c2:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a2c4:	f008 fc9c 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a2c8:	e7ff      	b.n	a2ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
    a2ca:	f00b ff3d 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2ce:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a2d2:	e7ff      	b.n	a2d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
    a2d4:	e70e      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a2d6:	980e      	ldr	r0, [sp, #56]	; 0x38
    a2d8:	f000 0001 	and.w	r0, r0, #1
    a2dc:	f7fe fcca 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a2e0:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
    a2e4:	e7ff      	b.n	a2e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
    a2e6:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
    a2ea:	07c1      	lsls	r1, r0, #31
    a2ec:	2900      	cmp	r1, #0
    a2ee:	d001      	beq.n	a2f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
    a2f0:	e7ff      	b.n	a2f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
    a2f2:	e014      	b.n	a31e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
    a2f4:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a2f6:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
    a2fa:	f24f 303c 	movw	r0, #62268	; 0xf33c
    a2fe:	f2c0 0001 	movt	r0, #1
    a302:	6800      	ldr	r0, [r0, #0]
    a304:	902b      	str	r0, [sp, #172]	; 0xac
    a306:	2003      	movs	r0, #3
    a308:	902c      	str	r0, [sp, #176]	; 0xb0
    a30a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    a30c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    a30e:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
    a312:	9816      	ldr	r0, [sp, #88]	; 0x58
    a314:	f7ff fc69 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a318:	900d      	str	r0, [sp, #52]	; 0x34
    a31a:	e009      	b.n	a330 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a31c:	defe      	udf	#254	; 0xfe
    a31e:	f008 fc6f 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a322:	e7ff      	b.n	a324 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
    a324:	f00b ff10 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a328:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a32c:	e7ff      	b.n	a32e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
    a32e:	e6e1      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a330:	980d      	ldr	r0, [sp, #52]	; 0x34
    a332:	f000 0001 	and.w	r0, r0, #1
    a336:	f7fe fc9d 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a33a:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
    a33e:	e7ff      	b.n	a340 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
    a340:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
    a344:	07c1      	lsls	r1, r0, #31
    a346:	2900      	cmp	r1, #0
    a348:	d001      	beq.n	a34e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
    a34a:	e7ff      	b.n	a34c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
    a34c:	e014      	b.n	a378 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
    a34e:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a350:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
    a354:	f24f 3044 	movw	r0, #62276	; 0xf344
    a358:	f2c0 0001 	movt	r0, #1
    a35c:	6800      	ldr	r0, [r0, #0]
    a35e:	902e      	str	r0, [sp, #184]	; 0xb8
    a360:	2001      	movs	r0, #1
    a362:	902f      	str	r0, [sp, #188]	; 0xbc
    a364:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    a366:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    a368:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
    a36c:	9816      	ldr	r0, [sp, #88]	; 0x58
    a36e:	f7ff fc3c 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a372:	900c      	str	r0, [sp, #48]	; 0x30
    a374:	e009      	b.n	a38a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a376:	defe      	udf	#254	; 0xfe
    a378:	f008 fc42 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a37c:	e7ff      	b.n	a37e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
    a37e:	f00b fee3 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a382:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a386:	e7ff      	b.n	a388 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
    a388:	e6b4      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a38a:	980c      	ldr	r0, [sp, #48]	; 0x30
    a38c:	f000 0001 	and.w	r0, r0, #1
    a390:	f7fe fc70 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a394:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
    a398:	e7ff      	b.n	a39a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
    a39a:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
    a39e:	07c1      	lsls	r1, r0, #31
    a3a0:	2900      	cmp	r1, #0
    a3a2:	d001      	beq.n	a3a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
    a3a4:	e7ff      	b.n	a3a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
    a3a6:	e014      	b.n	a3d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
    a3a8:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a3aa:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
    a3ae:	f24f 304c 	movw	r0, #62284	; 0xf34c
    a3b2:	f2c0 0001 	movt	r0, #1
    a3b6:	6800      	ldr	r0, [r0, #0]
    a3b8:	9031      	str	r0, [sp, #196]	; 0xc4
    a3ba:	2002      	movs	r0, #2
    a3bc:	9032      	str	r0, [sp, #200]	; 0xc8
    a3be:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    a3c0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    a3c2:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
    a3c6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a3c8:	f7ff fc0f 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a3cc:	900b      	str	r0, [sp, #44]	; 0x2c
    a3ce:	e009      	b.n	a3e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a3d0:	defe      	udf	#254	; 0xfe
    a3d2:	f008 fc15 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a3d6:	e7ff      	b.n	a3d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
    a3d8:	f00b feb6 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a3dc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a3e0:	e7ff      	b.n	a3e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
    a3e2:	e687      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a3e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a3e6:	f000 0001 	and.w	r0, r0, #1
    a3ea:	f7fe fc43 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3ee:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
    a3f2:	e7ff      	b.n	a3f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
    a3f4:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
    a3f8:	07c1      	lsls	r1, r0, #31
    a3fa:	2900      	cmp	r1, #0
    a3fc:	d001      	beq.n	a402 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
    a3fe:	e7ff      	b.n	a400 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
    a400:	e014      	b.n	a42c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
    a402:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a404:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
    a408:	f24f 3054 	movw	r0, #62292	; 0xf354
    a40c:	f2c0 0001 	movt	r0, #1
    a410:	6800      	ldr	r0, [r0, #0]
    a412:	9034      	str	r0, [sp, #208]	; 0xd0
    a414:	2002      	movs	r0, #2
    a416:	9035      	str	r0, [sp, #212]	; 0xd4
    a418:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    a41a:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    a41c:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
    a420:	9816      	ldr	r0, [sp, #88]	; 0x58
    a422:	f7ff fbe2 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a426:	900a      	str	r0, [sp, #40]	; 0x28
    a428:	e009      	b.n	a43e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a42a:	defe      	udf	#254	; 0xfe
    a42c:	f008 fbe8 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a430:	e7ff      	b.n	a432 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
    a432:	f00b fe89 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a436:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a43a:	e7ff      	b.n	a43c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
    a43c:	e65a      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a43e:	980a      	ldr	r0, [sp, #40]	; 0x28
    a440:	f000 0001 	and.w	r0, r0, #1
    a444:	f7fe fc16 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a448:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
    a44c:	e7ff      	b.n	a44e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
    a44e:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
    a452:	07c1      	lsls	r1, r0, #31
    a454:	2900      	cmp	r1, #0
    a456:	d001      	beq.n	a45c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
    a458:	e7ff      	b.n	a45a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
    a45a:	e014      	b.n	a486 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
    a45c:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a45e:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
    a462:	f24f 305c 	movw	r0, #62300	; 0xf35c
    a466:	f2c0 0001 	movt	r0, #1
    a46a:	6800      	ldr	r0, [r0, #0]
    a46c:	9037      	str	r0, [sp, #220]	; 0xdc
    a46e:	2002      	movs	r0, #2
    a470:	9038      	str	r0, [sp, #224]	; 0xe0
    a472:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    a474:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    a476:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
    a47a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a47c:	f7ff fbb5 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a480:	9009      	str	r0, [sp, #36]	; 0x24
    a482:	e009      	b.n	a498 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a484:	defe      	udf	#254	; 0xfe
    a486:	f008 fbbb 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a48a:	e7ff      	b.n	a48c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
    a48c:	f00b fe5c 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a490:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a494:	e7ff      	b.n	a496 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
    a496:	e62d      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a498:	9809      	ldr	r0, [sp, #36]	; 0x24
    a49a:	f000 0001 	and.w	r0, r0, #1
    a49e:	f7fe fbe9 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a4a2:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
    a4a6:	e7ff      	b.n	a4a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
    a4a8:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
    a4ac:	07c1      	lsls	r1, r0, #31
    a4ae:	2900      	cmp	r1, #0
    a4b0:	d001      	beq.n	a4b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
    a4b2:	e7ff      	b.n	a4b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
    a4b4:	e014      	b.n	a4e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
    a4b6:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a4b8:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
    a4bc:	f24f 3064 	movw	r0, #62308	; 0xf364
    a4c0:	f2c0 0001 	movt	r0, #1
    a4c4:	6800      	ldr	r0, [r0, #0]
    a4c6:	903a      	str	r0, [sp, #232]	; 0xe8
    a4c8:	2001      	movs	r0, #1
    a4ca:	903b      	str	r0, [sp, #236]	; 0xec
    a4cc:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    a4ce:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    a4d0:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
    a4d4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a4d6:	f7ff fb88 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a4da:	9008      	str	r0, [sp, #32]
    a4dc:	e009      	b.n	a4f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a4de:	defe      	udf	#254	; 0xfe
    a4e0:	f008 fb8e 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a4e4:	e7ff      	b.n	a4e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
    a4e6:	f00b fe2f 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a4ea:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a4ee:	e7ff      	b.n	a4f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
    a4f0:	e600      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a4f2:	9808      	ldr	r0, [sp, #32]
    a4f4:	f000 0001 	and.w	r0, r0, #1
    a4f8:	f7fe fbbc 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a4fc:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
    a500:	e7ff      	b.n	a502 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
    a502:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
    a506:	07c1      	lsls	r1, r0, #31
    a508:	2900      	cmp	r1, #0
    a50a:	d001      	beq.n	a510 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
    a50c:	e7ff      	b.n	a50e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
    a50e:	e006      	b.n	a51e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
    a510:	9816      	ldr	r0, [sp, #88]	; 0x58
    a512:	7d41      	ldrb	r1, [r0, #21]
    a514:	07c9      	lsls	r1, r1, #31
    a516:	2900      	cmp	r1, #0
    a518:	d11a      	bne.n	a550 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
    a51a:	e009      	b.n	a530 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a51c:	defe      	udf	#254	; 0xfe
    a51e:	f008 fb6f 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a522:	e7ff      	b.n	a524 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
    a524:	f00b fe10 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a528:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a52c:	e7ff      	b.n	a52e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
    a52e:	e5e1      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a530:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
    a532:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    a536:	2000      	movs	r0, #0
    a538:	9041      	str	r0, [sp, #260]	; 0x104
    a53a:	9040      	str	r0, [sp, #256]	; 0x100
    a53c:	9040      	str	r0, [sp, #256]	; 0x100
    a53e:	9a40      	ldr	r2, [sp, #256]	; 0x100
    a540:	9b41      	ldr	r3, [sp, #260]	; 0x104
    a542:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
    a546:	9816      	ldr	r0, [sp, #88]	; 0x58
    a548:	f7ff fb4f 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a54c:	9007      	str	r0, [sp, #28]
    a54e:	e02a      	b.n	a5a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
    a550:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
    a552:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    a556:	2000      	movs	r0, #0
    a558:	903e      	str	r0, [sp, #248]	; 0xf8
    a55a:	903d      	str	r0, [sp, #244]	; 0xf4
    a55c:	903d      	str	r0, [sp, #244]	; 0xf4
    a55e:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    a560:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    a562:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
    a566:	9816      	ldr	r0, [sp, #88]	; 0x58
    a568:	f7ff fb3f 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a56c:	9006      	str	r0, [sp, #24]
    a56e:	e7ff      	b.n	a570 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
    a570:	9806      	ldr	r0, [sp, #24]
    a572:	f000 0001 	and.w	r0, r0, #1
    a576:	f7fe fb7d 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a57a:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
    a57e:	e7ff      	b.n	a580 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
    a580:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
    a584:	07c1      	lsls	r1, r0, #31
    a586:	2900      	cmp	r1, #0
    a588:	d001      	beq.n	a58e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
    a58a:	e7ff      	b.n	a58c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
    a58c:	e001      	b.n	a592 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
    a58e:	e024      	b.n	a5da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
    a590:	defe      	udf	#254	; 0xfe
    a592:	f008 fb35 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a596:	e7ff      	b.n	a598 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
    a598:	f00b fdd6 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a59c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a5a0:	e7ff      	b.n	a5a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
    a5a2:	e7ff      	b.n	a5a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
    a5a4:	e5a6      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
    a5a6:	9807      	ldr	r0, [sp, #28]
    a5a8:	f000 0001 	and.w	r0, r0, #1
    a5ac:	f7fe fb62 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a5b0:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
    a5b4:	e7ff      	b.n	a5b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
    a5b6:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
    a5ba:	07c1      	lsls	r1, r0, #31
    a5bc:	2900      	cmp	r1, #0
    a5be:	d001      	beq.n	a5c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
    a5c0:	e7ff      	b.n	a5c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
    a5c2:	e001      	b.n	a5c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
    a5c4:	e009      	b.n	a5da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
    a5c6:	defe      	udf	#254	; 0xfe
    a5c8:	f008 fb1a 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a5cc:	e7ff      	b.n	a5ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
    a5ce:	f00b fdbb 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a5d2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a5d6:	e7ff      	b.n	a5d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
    a5d8:	e7e4      	b.n	a5a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
    a5da:	9816      	ldr	r0, [sp, #88]	; 0x58
    a5dc:	7d01      	ldrb	r1, [r0, #20]
    a5de:	07c9      	lsls	r1, r1, #31
    a5e0:	2900      	cmp	r1, #0
    a5e2:	d114      	bne.n	a60e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
    a5e4:	e7ff      	b.n	a5e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
    a5e6:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a5e8:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    a5ec:	f24f 3074 	movw	r0, #62324	; 0xf374
    a5f0:	f2c0 0001 	movt	r0, #1
    a5f4:	6800      	ldr	r0, [r0, #0]
    a5f6:	9046      	str	r0, [sp, #280]	; 0x118
    a5f8:	2001      	movs	r0, #1
    a5fa:	9047      	str	r0, [sp, #284]	; 0x11c
    a5fc:	9a46      	ldr	r2, [sp, #280]	; 0x118
    a5fe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a600:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
    a604:	9816      	ldr	r0, [sp, #88]	; 0x58
    a606:	f7ff faf0 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a60a:	9005      	str	r0, [sp, #20]
    a60c:	e02e      	b.n	a66c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
    a60e:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a610:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
    a614:	f24f 306c 	movw	r0, #62316	; 0xf36c
    a618:	f2c0 0001 	movt	r0, #1
    a61c:	6800      	ldr	r0, [r0, #0]
    a61e:	9043      	str	r0, [sp, #268]	; 0x10c
    a620:	2001      	movs	r0, #1
    a622:	9044      	str	r0, [sp, #272]	; 0x110
    a624:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a626:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a628:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
    a62c:	9816      	ldr	r0, [sp, #88]	; 0x58
    a62e:	f7ff fadc 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a632:	9004      	str	r0, [sp, #16]
    a634:	e7ff      	b.n	a636 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
    a636:	9804      	ldr	r0, [sp, #16]
    a638:	f000 0001 	and.w	r0, r0, #1
    a63c:	f7fe fb1a 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a640:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
    a644:	e7ff      	b.n	a646 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
    a646:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
    a64a:	07c1      	lsls	r1, r0, #31
    a64c:	2900      	cmp	r1, #0
    a64e:	d001      	beq.n	a654 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
    a650:	e7ff      	b.n	a652 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
    a652:	e001      	b.n	a658 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
    a654:	e024      	b.n	a6a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a656:	defe      	udf	#254	; 0xfe
    a658:	f008 fad2 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a65c:	e7ff      	b.n	a65e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
    a65e:	f00b fd73 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a662:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a666:	e7ff      	b.n	a668 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
    a668:	e7ff      	b.n	a66a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a66a:	e543      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a66c:	9805      	ldr	r0, [sp, #20]
    a66e:	f000 0001 	and.w	r0, r0, #1
    a672:	f7fe faff 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a676:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
    a67a:	e7ff      	b.n	a67c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
    a67c:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    a680:	07c1      	lsls	r1, r0, #31
    a682:	2900      	cmp	r1, #0
    a684:	d001      	beq.n	a68a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
    a686:	e7ff      	b.n	a688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
    a688:	e001      	b.n	a68e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
    a68a:	e009      	b.n	a6a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a68c:	defe      	udf	#254	; 0xfe
    a68e:	f008 fab7 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a692:	e7ff      	b.n	a694 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
    a694:	f00b fd58 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a698:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a69c:	e7ff      	b.n	a69e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
    a69e:	e7e4      	b.n	a66a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a6a0:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a6a2:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
    a6a6:	f24f 307c 	movw	r0, #62332	; 0xf37c
    a6aa:	f2c0 0001 	movt	r0, #1
    a6ae:	6800      	ldr	r0, [r0, #0]
    a6b0:	9049      	str	r0, [sp, #292]	; 0x124
    a6b2:	2001      	movs	r0, #1
    a6b4:	904a      	str	r0, [sp, #296]	; 0x128
    a6b6:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a6b8:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    a6ba:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
    a6be:	9816      	ldr	r0, [sp, #88]	; 0x58
    a6c0:	f7ff fa93 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a6c4:	9003      	str	r0, [sp, #12]
    a6c6:	e7ff      	b.n	a6c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
    a6c8:	9803      	ldr	r0, [sp, #12]
    a6ca:	f000 0001 	and.w	r0, r0, #1
    a6ce:	f7fe fad1 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a6d2:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
    a6d6:	e7ff      	b.n	a6d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
    a6d8:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
    a6dc:	07c1      	lsls	r1, r0, #31
    a6de:	2900      	cmp	r1, #0
    a6e0:	d001      	beq.n	a6e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
    a6e2:	e7ff      	b.n	a6e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
    a6e4:	e010      	b.n	a708 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
    a6e6:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
    a6e8:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
    a6ec:	2000      	movs	r0, #0
    a6ee:	904d      	str	r0, [sp, #308]	; 0x134
    a6f0:	904c      	str	r0, [sp, #304]	; 0x130
    a6f2:	904c      	str	r0, [sp, #304]	; 0x130
    a6f4:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    a6f6:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    a6f8:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
    a6fc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a6fe:	f7ff fa74 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a702:	9002      	str	r0, [sp, #8]
    a704:	e009      	b.n	a71a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a706:	defe      	udf	#254	; 0xfe
    a708:	f008 fa7a 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a70c:	e7ff      	b.n	a70e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
    a70e:	f00b fd1b 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a712:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a716:	e7ff      	b.n	a718 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
    a718:	e4ec      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
    a71a:	9802      	ldr	r0, [sp, #8]
    a71c:	f000 0001 	and.w	r0, r0, #1
    a720:	f7fe faa8 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a724:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
    a728:	e7ff      	b.n	a72a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
    a72a:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
    a72e:	07c1      	lsls	r1, r0, #31
    a730:	2900      	cmp	r1, #0
    a732:	d001      	beq.n	a738 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
    a734:	e7ff      	b.n	a736 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
    a736:	e005      	b.n	a744 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
    a738:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a73a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a73c:	f00a fd5b 	bl	151f6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a740:	e009      	b.n	a756 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
    a742:	defe      	udf	#254	; 0xfe
    a744:	f008 fa5c 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a748:	e7ff      	b.n	a74a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
    a74a:	f00b fcfd 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a74e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a752:	e7ff      	b.n	a754 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
    a754:	e4ce      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    a756:	f009 fd89 	bl	1426c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    a75a:	9001      	str	r0, [sp, #4]
    a75c:	e7ff      	b.n	a75e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
    a75e:	f24f 1190 	movw	r1, #61840	; 0xf190
    a762:	f2c0 0101 	movt	r1, #1
    a766:	f24f 3380 	movw	r3, #62336	; 0xf380
    a76a:	f2c0 0301 	movt	r3, #1
    a76e:	220e      	movs	r2, #14
    a770:	9801      	ldr	r0, [sp, #4]
    a772:	f7fe fa46 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a776:	e7ff      	b.n	a778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
    a778:	2000      	movs	r0, #0
        Ok(())
    a77a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
    a77e:	e4b9      	b.n	a0f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

0000a780 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
    a780:	b580      	push	{r7, lr}
    a782:	b08a      	sub	sp, #40	; 0x28
    a784:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    a786:	f000 fa8c 	bl	aca2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
    a78a:	9307      	str	r3, [sp, #28]
    a78c:	9206      	str	r2, [sp, #24]
    a78e:	9105      	str	r1, [sp, #20]
    a790:	9004      	str	r0, [sp, #16]
    a792:	e7ff      	b.n	a794 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
    a794:	a804      	add	r0, sp, #16
    a796:	f00a fe18 	bl	153ca <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    a79a:	9003      	str	r0, [sp, #12]
    a79c:	e7ff      	b.n	a79e <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
    a79e:	9803      	ldr	r0, [sp, #12]
    a7a0:	f00a fee6 	bl	15570 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    a7a4:	9002      	str	r0, [sp, #8]
    a7a6:	9101      	str	r1, [sp, #4]
    a7a8:	e7ff      	b.n	a7aa <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
    a7aa:	9802      	ldr	r0, [sp, #8]
    a7ac:	f000 0001 	and.w	r0, r0, #1
    a7b0:	9901      	ldr	r1, [sp, #4]
    a7b2:	b00a      	add	sp, #40	; 0x28
    a7b4:	bd80      	pop	{r7, pc}

0000a7b6 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
    a7b6:	b082      	sub	sp, #8
    a7b8:	4601      	mov	r1, r0
    a7ba:	f8ad 0004 	strh.w	r0, [sp, #4]
    a7be:	ba00      	rev	r0, r0
    a7c0:	0c00      	lsrs	r0, r0, #16
    a7c2:	f8ad 0006 	strh.w	r0, [sp, #6]
    a7c6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a7ca:	9000      	str	r0, [sp, #0]
    a7cc:	e7ff      	b.n	a7ce <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
    a7ce:	9800      	ldr	r0, [sp, #0]
    a7d0:	b002      	add	sp, #8
    a7d2:	4770      	bx	lr

0000a7d4 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
    a7d4:	b580      	push	{r7, lr}
    a7d6:	b084      	sub	sp, #16
    a7d8:	4601      	mov	r1, r0
    a7da:	f8ad 000e 	strh.w	r0, [sp, #14]
    a7de:	9102      	str	r1, [sp, #8]
    a7e0:	f7ff ffe9 	bl	a7b6 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
    a7e4:	9001      	str	r0, [sp, #4]
    a7e6:	e7ff      	b.n	a7e8 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
    a7e8:	9801      	ldr	r0, [sp, #4]
    a7ea:	b004      	add	sp, #16
    a7ec:	bd80      	pop	{r7, pc}

0000a7ee <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
    a7ee:	b580      	push	{r7, lr}
    a7f0:	b084      	sub	sp, #16
    a7f2:	9002      	str	r0, [sp, #8]
    a7f4:	9802      	ldr	r0, [sp, #8]
    a7f6:	f00a fd4c 	bl	15292 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
    a7fa:	9001      	str	r0, [sp, #4]
    a7fc:	9100      	str	r1, [sp, #0]
    a7fe:	e7ff      	b.n	a800 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
    a800:	9801      	ldr	r0, [sp, #4]
    a802:	f000 0001 	and.w	r0, r0, #1
    a806:	9900      	ldr	r1, [sp, #0]
    a808:	b004      	add	sp, #16
    a80a:	bd80      	pop	{r7, pc}

0000a80c <_ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE>:
    a80c:	b081      	sub	sp, #4
    a80e:	9000      	str	r0, [sp, #0]
    a810:	b001      	add	sp, #4
    a812:	4770      	bx	lr

0000a814 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>:
    a814:	b580      	push	{r7, lr}
    a816:	b082      	sub	sp, #8
    a818:	9001      	str	r0, [sp, #4]
    a81a:	f000 f83e 	bl	a89a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a81e:	e7ff      	b.n	a820 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE+0xc>
    a820:	b002      	add	sp, #8
    a822:	bd80      	pop	{r7, pc}

0000a824 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>:
    a824:	b580      	push	{r7, lr}
    a826:	b082      	sub	sp, #8
    a828:	9001      	str	r0, [sp, #4]
    a82a:	6801      	ldr	r1, [r0, #0]
    a82c:	2900      	cmp	r1, #0
    a82e:	9000      	str	r0, [sp, #0]
    a830:	d102      	bne.n	a838 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x14>
    a832:	e7ff      	b.n	a834 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>
    a834:	b002      	add	sp, #8
    a836:	bd80      	pop	{r7, pc}
    a838:	9800      	ldr	r0, [sp, #0]
    a83a:	3004      	adds	r0, #4
    a83c:	f7ff ffea 	bl	a814 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>
    a840:	e7f8      	b.n	a834 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>

0000a842 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>:
    a842:	b580      	push	{r7, lr}
    a844:	b082      	sub	sp, #8
    a846:	9001      	str	r0, [sp, #4]
    a848:	f00a ff0d 	bl	15666 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>
    a84c:	e7ff      	b.n	a84e <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE+0xc>
    a84e:	b002      	add	sp, #8
    a850:	bd80      	pop	{r7, pc}

0000a852 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>:
    a852:	b580      	push	{r7, lr}
    a854:	b082      	sub	sp, #8
    a856:	9001      	str	r0, [sp, #4]
    a858:	3024      	adds	r0, #36	; 0x24
    a85a:	f000 f81e 	bl	a89a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a85e:	e7ff      	b.n	a860 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E+0xe>
    a860:	b002      	add	sp, #8
    a862:	bd80      	pop	{r7, pc}

0000a864 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>:
    a864:	b580      	push	{r7, lr}
    a866:	b082      	sub	sp, #8
    a868:	9001      	str	r0, [sp, #4]
    a86a:	9000      	str	r0, [sp, #0]
    a86c:	f7ff fff1 	bl	a852 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>
    a870:	e001      	b.n	a876 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0x12>
    a872:	b002      	add	sp, #8
    a874:	bd80      	pop	{r7, pc}
    a876:	9800      	ldr	r0, [sp, #0]
    a878:	3094      	adds	r0, #148	; 0x94
    a87a:	f7ff ffe2 	bl	a842 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a87e:	e7f8      	b.n	a872 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0xe>

0000a880 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>:
    a880:	b580      	push	{r7, lr}
    a882:	b082      	sub	sp, #8
    a884:	9001      	str	r0, [sp, #4]
    a886:	9000      	str	r0, [sp, #0]
    a888:	f00a ff15 	bl	156b6 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>
    a88c:	e001      	b.n	a892 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0x12>
    a88e:	b002      	add	sp, #8
    a890:	bd80      	pop	{r7, pc}
    a892:	9800      	ldr	r0, [sp, #0]
    a894:	f7ff ffd5 	bl	a842 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a898:	e7f9      	b.n	a88e <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0xe>

0000a89a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>:
    a89a:	b580      	push	{r7, lr}
    a89c:	b082      	sub	sp, #8
    a89e:	9001      	str	r0, [sp, #4]
    a8a0:	f00a fed1 	bl	15646 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>
    a8a4:	e7ff      	b.n	a8a6 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E+0xc>
    a8a6:	b002      	add	sp, #8
    a8a8:	bd80      	pop	{r7, pc}

0000a8aa <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>:
    a8aa:	b580      	push	{r7, lr}
    a8ac:	b082      	sub	sp, #8
    a8ae:	9001      	str	r0, [sp, #4]
    a8b0:	6801      	ldr	r1, [r0, #0]
    a8b2:	2900      	cmp	r1, #0
    a8b4:	9000      	str	r0, [sp, #0]
    a8b6:	d102      	bne.n	a8be <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x14>
    a8b8:	e7ff      	b.n	a8ba <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>
    a8ba:	b002      	add	sp, #8
    a8bc:	bd80      	pop	{r7, pc}
    a8be:	9800      	ldr	r0, [sp, #0]
    a8c0:	3004      	adds	r0, #4
    a8c2:	f000 f805 	bl	a8d0 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>
    a8c6:	e7f8      	b.n	a8ba <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>

0000a8c8 <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
    a8c8:	b081      	sub	sp, #4
    a8ca:	9000      	str	r0, [sp, #0]
    a8cc:	b001      	add	sp, #4
    a8ce:	4770      	bx	lr

0000a8d0 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>:
    a8d0:	b580      	push	{r7, lr}
    a8d2:	b082      	sub	sp, #8
    a8d4:	9001      	str	r0, [sp, #4]
    a8d6:	f7ff ffb4 	bl	a842 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a8da:	e7ff      	b.n	a8dc <_ZN4core3ptr13drop_in_place17hf625580841d3425eE+0xc>
    a8dc:	b002      	add	sp, #8
    a8de:	bd80      	pop	{r7, pc}

0000a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
    a8e0:	b089      	sub	sp, #36	; 0x24
    a8e2:	9005      	str	r0, [sp, #20]
    a8e4:	9106      	str	r1, [sp, #24]
    a8e6:	9107      	str	r1, [sp, #28]
    a8e8:	9907      	ldr	r1, [sp, #28]
    a8ea:	9002      	str	r0, [sp, #8]
    a8ec:	9101      	str	r1, [sp, #4]
    a8ee:	e7ff      	b.n	a8f0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
    a8f0:	9802      	ldr	r0, [sp, #8]
    a8f2:	9008      	str	r0, [sp, #32]
    a8f4:	9908      	ldr	r1, [sp, #32]
    a8f6:	9100      	str	r1, [sp, #0]
    a8f8:	e7ff      	b.n	a8fa <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
    a8fa:	9800      	ldr	r0, [sp, #0]
    a8fc:	9003      	str	r0, [sp, #12]
    a8fe:	9901      	ldr	r1, [sp, #4]
    a900:	9104      	str	r1, [sp, #16]
    a902:	9803      	ldr	r0, [sp, #12]
    a904:	9904      	ldr	r1, [sp, #16]
    a906:	b009      	add	sp, #36	; 0x24
    a908:	4770      	bx	lr
	...

0000a90c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
    a90c:	b08a      	sub	sp, #40	; 0x28
    a90e:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
    a910:	7800      	ldrb	r0, [r0, #0]
    a912:	9001      	str	r0, [sp, #4]
    a914:	9901      	ldr	r1, [sp, #4]
    a916:	e8df f011 	tbh	[pc, r1, lsl #1]
    a91a:	0103      	.short	0x0103
    a91c:	01020107 	.word	0x01020107
    a920:	010c0102 	.word	0x010c0102
    a924:	01020102 	.word	0x01020102
    a928:	01020102 	.word	0x01020102
    a92c:	01020111 	.word	0x01020111
    a930:	01020102 	.word	0x01020102
    a934:	01020102 	.word	0x01020102
    a938:	01160102 	.word	0x01160102
    a93c:	0120011b 	.word	0x0120011b
    a940:	01020125 	.word	0x01020125
    a944:	01020102 	.word	0x01020102
    a948:	01020102 	.word	0x01020102
    a94c:	01020102 	.word	0x01020102
    a950:	01020102 	.word	0x01020102
    a954:	01020102 	.word	0x01020102
    a958:	012a0102 	.word	0x012a0102
    a95c:	0102012f 	.word	0x0102012f
    a960:	01020102 	.word	0x01020102
    a964:	01020102 	.word	0x01020102
    a968:	01340102 	.word	0x01340102
    a96c:	013e0139 	.word	0x013e0139
    a970:	01480143 	.word	0x01480143
    a974:	014d0102 	.word	0x014d0102
    a978:	01520102 	.word	0x01520102
    a97c:	01020102 	.word	0x01020102
    a980:	01020102 	.word	0x01020102
    a984:	015c0102 	.word	0x015c0102
    a988:	01020102 	.word	0x01020102
    a98c:	01570102 	.word	0x01570102
    a990:	01020102 	.word	0x01020102
    a994:	01020102 	.word	0x01020102
    a998:	01020102 	.word	0x01020102
    a99c:	01020102 	.word	0x01020102
    a9a0:	01020102 	.word	0x01020102
    a9a4:	01020102 	.word	0x01020102
    a9a8:	01020102 	.word	0x01020102
    a9ac:	01020102 	.word	0x01020102
    a9b0:	01020102 	.word	0x01020102
    a9b4:	01020102 	.word	0x01020102
    a9b8:	01020102 	.word	0x01020102
    a9bc:	01020102 	.word	0x01020102
    a9c0:	01020102 	.word	0x01020102
    a9c4:	01020102 	.word	0x01020102
    a9c8:	01020102 	.word	0x01020102
    a9cc:	01020102 	.word	0x01020102
    a9d0:	01020102 	.word	0x01020102
    a9d4:	01020102 	.word	0x01020102
    a9d8:	01020102 	.word	0x01020102
    a9dc:	01020102 	.word	0x01020102
    a9e0:	01020102 	.word	0x01020102
    a9e4:	01020102 	.word	0x01020102
    a9e8:	01020102 	.word	0x01020102
    a9ec:	01020102 	.word	0x01020102
    a9f0:	01020102 	.word	0x01020102
    a9f4:	01020102 	.word	0x01020102
    a9f8:	01020102 	.word	0x01020102
    a9fc:	01020102 	.word	0x01020102
    aa00:	01020102 	.word	0x01020102
    aa04:	01020102 	.word	0x01020102
    aa08:	01020102 	.word	0x01020102
    aa0c:	01020102 	.word	0x01020102
    aa10:	01020102 	.word	0x01020102
    aa14:	01020102 	.word	0x01020102
    aa18:	01020102 	.word	0x01020102
    aa1c:	01020102 	.word	0x01020102
    aa20:	01020102 	.word	0x01020102
    aa24:	01020102 	.word	0x01020102
    aa28:	01020102 	.word	0x01020102
    aa2c:	01020102 	.word	0x01020102
    aa30:	01020102 	.word	0x01020102
    aa34:	01020102 	.word	0x01020102
    aa38:	01020102 	.word	0x01020102
    aa3c:	01020102 	.word	0x01020102
    aa40:	01020102 	.word	0x01020102
    aa44:	01020102 	.word	0x01020102
    aa48:	01020102 	.word	0x01020102
    aa4c:	01020102 	.word	0x01020102
    aa50:	01020102 	.word	0x01020102
    aa54:	01020102 	.word	0x01020102
    aa58:	01020102 	.word	0x01020102
    aa5c:	01020102 	.word	0x01020102
    aa60:	01020102 	.word	0x01020102
    aa64:	01020102 	.word	0x01020102
    aa68:	01020102 	.word	0x01020102
    aa6c:	01020102 	.word	0x01020102
    aa70:	01020102 	.word	0x01020102
    aa74:	01020102 	.word	0x01020102
    aa78:	01020102 	.word	0x01020102
    aa7c:	01660161 	.word	0x01660161
    aa80:	0170016b 	.word	0x0170016b
    aa84:	01750102 	.word	0x01750102
    aa88:	01020102 	.word	0x01020102
    aa8c:	01020102 	.word	0x01020102
    aa90:	01020102 	.word	0x01020102
    aa94:	01020102 	.word	0x01020102
    aa98:	017a0102 	.word	0x017a0102
    aa9c:	0184017f 	.word	0x0184017f
    aaa0:	018e0189 	.word	0x018e0189
    aaa4:	01020193 	.word	0x01020193
    aaa8:	01020102 	.word	0x01020102
    aaac:	01020102 	.word	0x01020102
    aab0:	01020102 	.word	0x01020102
    aab4:	01020102 	.word	0x01020102
    aab8:	01020102 	.word	0x01020102
    aabc:	01020102 	.word	0x01020102
    aac0:	01020102 	.word	0x01020102
    aac4:	01020102 	.word	0x01020102
    aac8:	01020102 	.word	0x01020102
    aacc:	01980102 	.word	0x01980102
    aad0:	01a2019d 	.word	0x01a2019d
    aad4:	010201a7 	.word	0x010201a7
    aad8:	01b10102 	.word	0x01b10102
    aadc:	010200fd 	.word	0x010200fd
    aae0:	01020102 	.word	0x01020102
    aae4:	01020102 	.word	0x01020102
    aae8:	01020102 	.word	0x01020102
    aaec:	01020102 	.word	0x01020102
    aaf0:	01020102 	.word	0x01020102
    aaf4:	01020102 	.word	0x01020102
    aaf8:	01020102 	.word	0x01020102
    aafc:	01020102 	.word	0x01020102
    ab00:	01020102 	.word	0x01020102
    ab04:	01020102 	.word	0x01020102
    ab08:	01020102 	.word	0x01020102
    ab0c:	01020102 	.word	0x01020102
    ab10:	01ac0102 	.word	0x01ac0102
    ab14:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    ab16:	9007      	str	r0, [sp, #28]
    ab18:	20e1      	movs	r0, #225	; 0xe1
    ab1a:	9006      	str	r0, [sp, #24]
    ab1c:	e0b3      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab1e:	defe      	udf	#254	; 0xfe
    ab20:	2000      	movs	r0, #0
    ab22:	9007      	str	r0, [sp, #28]
    ab24:	9006      	str	r0, [sp, #24]
    ab26:	e0ae      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab28:	2000      	movs	r0, #0
    ab2a:	9007      	str	r0, [sp, #28]
    ab2c:	2001      	movs	r0, #1
    ab2e:	9006      	str	r0, [sp, #24]
    ab30:	e0a9      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab32:	2000      	movs	r0, #0
    ab34:	9007      	str	r0, [sp, #28]
    ab36:	2004      	movs	r0, #4
    ab38:	9006      	str	r0, [sp, #24]
    ab3a:	e0a4      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab3c:	2000      	movs	r0, #0
    ab3e:	9007      	str	r0, [sp, #28]
    ab40:	2009      	movs	r0, #9
    ab42:	9006      	str	r0, [sp, #24]
    ab44:	e09f      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab46:	2000      	movs	r0, #0
    ab48:	9007      	str	r0, [sp, #28]
    ab4a:	2010      	movs	r0, #16
    ab4c:	9006      	str	r0, [sp, #24]
    ab4e:	e09a      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab50:	2000      	movs	r0, #0
    ab52:	9007      	str	r0, [sp, #28]
    ab54:	2011      	movs	r0, #17
    ab56:	9006      	str	r0, [sp, #24]
    ab58:	e095      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab5a:	2000      	movs	r0, #0
    ab5c:	9007      	str	r0, [sp, #28]
    ab5e:	2012      	movs	r0, #18
    ab60:	9006      	str	r0, [sp, #24]
    ab62:	e090      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab64:	2000      	movs	r0, #0
    ab66:	9007      	str	r0, [sp, #28]
    ab68:	2013      	movs	r0, #19
    ab6a:	9006      	str	r0, [sp, #24]
    ab6c:	e08b      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab6e:	2000      	movs	r0, #0
    ab70:	9007      	str	r0, [sp, #28]
    ab72:	2020      	movs	r0, #32
    ab74:	9006      	str	r0, [sp, #24]
    ab76:	e086      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab78:	2000      	movs	r0, #0
    ab7a:	9007      	str	r0, [sp, #28]
    ab7c:	2021      	movs	r0, #33	; 0x21
    ab7e:	9006      	str	r0, [sp, #24]
    ab80:	e081      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab82:	2000      	movs	r0, #0
    ab84:	9007      	str	r0, [sp, #28]
    ab86:	2028      	movs	r0, #40	; 0x28
    ab88:	9006      	str	r0, [sp, #24]
    ab8a:	e07c      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab8c:	2000      	movs	r0, #0
    ab8e:	9007      	str	r0, [sp, #28]
    ab90:	2029      	movs	r0, #41	; 0x29
    ab92:	9006      	str	r0, [sp, #24]
    ab94:	e077      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ab96:	2000      	movs	r0, #0
    ab98:	9007      	str	r0, [sp, #28]
    ab9a:	202a      	movs	r0, #42	; 0x2a
    ab9c:	9006      	str	r0, [sp, #24]
    ab9e:	e072      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    aba0:	2000      	movs	r0, #0
    aba2:	9007      	str	r0, [sp, #28]
    aba4:	202b      	movs	r0, #43	; 0x2b
    aba6:	9006      	str	r0, [sp, #24]
    aba8:	e06d      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abaa:	2000      	movs	r0, #0
    abac:	9007      	str	r0, [sp, #28]
    abae:	202c      	movs	r0, #44	; 0x2c
    abb0:	9006      	str	r0, [sp, #24]
    abb2:	e068      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abb4:	2000      	movs	r0, #0
    abb6:	9007      	str	r0, [sp, #28]
    abb8:	202e      	movs	r0, #46	; 0x2e
    abba:	9006      	str	r0, [sp, #24]
    abbc:	e063      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abbe:	2000      	movs	r0, #0
    abc0:	9007      	str	r0, [sp, #28]
    abc2:	2030      	movs	r0, #48	; 0x30
    abc4:	9006      	str	r0, [sp, #24]
    abc6:	e05e      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abc8:	2000      	movs	r0, #0
    abca:	9007      	str	r0, [sp, #28]
    abcc:	203a      	movs	r0, #58	; 0x3a
    abce:	9006      	str	r0, [sp, #24]
    abd0:	e059      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abd2:	2000      	movs	r0, #0
    abd4:	9007      	str	r0, [sp, #28]
    abd6:	2036      	movs	r0, #54	; 0x36
    abd8:	9006      	str	r0, [sp, #24]
    abda:	e054      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abdc:	2000      	movs	r0, #0
    abde:	9007      	str	r0, [sp, #28]
    abe0:	20b1      	movs	r0, #177	; 0xb1
    abe2:	9006      	str	r0, [sp, #24]
    abe4:	e04f      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abe6:	2000      	movs	r0, #0
    abe8:	9007      	str	r0, [sp, #28]
    abea:	20b2      	movs	r0, #178	; 0xb2
    abec:	9006      	str	r0, [sp, #24]
    abee:	e04a      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abf0:	2000      	movs	r0, #0
    abf2:	9007      	str	r0, [sp, #28]
    abf4:	20b3      	movs	r0, #179	; 0xb3
    abf6:	9006      	str	r0, [sp, #24]
    abf8:	e045      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    abfa:	2000      	movs	r0, #0
    abfc:	9007      	str	r0, [sp, #28]
    abfe:	20b4      	movs	r0, #180	; 0xb4
    ac00:	9006      	str	r0, [sp, #24]
    ac02:	e040      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac04:	2000      	movs	r0, #0
    ac06:	9007      	str	r0, [sp, #28]
    ac08:	20b6      	movs	r0, #182	; 0xb6
    ac0a:	9006      	str	r0, [sp, #24]
    ac0c:	e03b      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac0e:	2000      	movs	r0, #0
    ac10:	9007      	str	r0, [sp, #28]
    ac12:	20c0      	movs	r0, #192	; 0xc0
    ac14:	9006      	str	r0, [sp, #24]
    ac16:	e036      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac18:	2000      	movs	r0, #0
    ac1a:	9007      	str	r0, [sp, #28]
    ac1c:	20c1      	movs	r0, #193	; 0xc1
    ac1e:	9006      	str	r0, [sp, #24]
    ac20:	e031      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac22:	2000      	movs	r0, #0
    ac24:	9007      	str	r0, [sp, #28]
    ac26:	20c2      	movs	r0, #194	; 0xc2
    ac28:	9006      	str	r0, [sp, #24]
    ac2a:	e02c      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac2c:	2000      	movs	r0, #0
    ac2e:	9007      	str	r0, [sp, #28]
    ac30:	20c3      	movs	r0, #195	; 0xc3
    ac32:	9006      	str	r0, [sp, #24]
    ac34:	e027      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac36:	2000      	movs	r0, #0
    ac38:	9007      	str	r0, [sp, #28]
    ac3a:	20c4      	movs	r0, #196	; 0xc4
    ac3c:	9006      	str	r0, [sp, #24]
    ac3e:	e022      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac40:	2000      	movs	r0, #0
    ac42:	9007      	str	r0, [sp, #28]
    ac44:	20c5      	movs	r0, #197	; 0xc5
    ac46:	9006      	str	r0, [sp, #24]
    ac48:	e01d      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac4a:	2000      	movs	r0, #0
    ac4c:	9007      	str	r0, [sp, #28]
    ac4e:	20da      	movs	r0, #218	; 0xda
    ac50:	9006      	str	r0, [sp, #24]
    ac52:	e018      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac54:	2000      	movs	r0, #0
    ac56:	9007      	str	r0, [sp, #28]
    ac58:	20db      	movs	r0, #219	; 0xdb
    ac5a:	9006      	str	r0, [sp, #24]
    ac5c:	e013      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac5e:	2000      	movs	r0, #0
    ac60:	9007      	str	r0, [sp, #28]
    ac62:	20dc      	movs	r0, #220	; 0xdc
    ac64:	9006      	str	r0, [sp, #24]
    ac66:	e00e      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac68:	2000      	movs	r0, #0
    ac6a:	9007      	str	r0, [sp, #28]
    ac6c:	20dd      	movs	r0, #221	; 0xdd
    ac6e:	9006      	str	r0, [sp, #24]
    ac70:	e009      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac72:	2000      	movs	r0, #0
    ac74:	9007      	str	r0, [sp, #28]
    ac76:	20fc      	movs	r0, #252	; 0xfc
    ac78:	9006      	str	r0, [sp, #24]
    ac7a:	e004      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac7c:	2000      	movs	r0, #0
    ac7e:	9007      	str	r0, [sp, #28]
    ac80:	20e0      	movs	r0, #224	; 0xe0
    ac82:	9006      	str	r0, [sp, #24]
    ac84:	e7ff      	b.n	ac86 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    ac86:	9806      	ldr	r0, [sp, #24]
    ac88:	9907      	ldr	r1, [sp, #28]
    ac8a:	9105      	str	r1, [sp, #20]
    ac8c:	9004      	str	r0, [sp, #16]
    ac8e:	2000      	movs	r0, #0
    ac90:	9003      	str	r0, [sp, #12]
    ac92:	2001      	movs	r0, #1
    ac94:	9002      	str	r0, [sp, #8]
    ac96:	9802      	ldr	r0, [sp, #8]
    ac98:	9903      	ldr	r1, [sp, #12]
    ac9a:	9a04      	ldr	r2, [sp, #16]
    ac9c:	9b05      	ldr	r3, [sp, #20]
    ac9e:	b00a      	add	sp, #40	; 0x28
    aca0:	4770      	bx	lr

0000aca2 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
    aca2:	b580      	push	{r7, lr}
    aca4:	b08a      	sub	sp, #40	; 0x28
    aca6:	9009      	str	r0, [sp, #36]	; 0x24
    aca8:	f7ff fe30 	bl	a90c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
    acac:	9108      	str	r1, [sp, #32]
    acae:	9007      	str	r0, [sp, #28]
    acb0:	9306      	str	r3, [sp, #24]
    acb2:	9205      	str	r2, [sp, #20]
    acb4:	e7ff      	b.n	acb6 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
    acb6:	9807      	ldr	r0, [sp, #28]
    acb8:	9908      	ldr	r1, [sp, #32]
    acba:	9a05      	ldr	r2, [sp, #20]
    acbc:	9b06      	ldr	r3, [sp, #24]
    acbe:	f000 f859 	bl	ad74 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
    acc2:	9104      	str	r1, [sp, #16]
    acc4:	9003      	str	r0, [sp, #12]
    acc6:	9302      	str	r3, [sp, #8]
    acc8:	9201      	str	r2, [sp, #4]
    acca:	e7ff      	b.n	accc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
    accc:	9803      	ldr	r0, [sp, #12]
    acce:	9904      	ldr	r1, [sp, #16]
    acd0:	9a01      	ldr	r2, [sp, #4]
    acd2:	9b02      	ldr	r3, [sp, #8]
    acd4:	b00a      	add	sp, #40	; 0x28
    acd6:	bd80      	pop	{r7, pc}

0000acd8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
    acd8:	b08a      	sub	sp, #40	; 0x28
    acda:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
    acdc:	7800      	ldrb	r0, [r0, #0]
    acde:	4601      	mov	r1, r0
    ace0:	2800      	cmp	r0, #0
    ace2:	9101      	str	r1, [sp, #4]
    ace4:	d00f      	beq.n	ad06 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
    ace6:	e7ff      	b.n	ace8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
    ace8:	9801      	ldr	r0, [sp, #4]
    acea:	2860      	cmp	r0, #96	; 0x60
    acec:	d00f      	beq.n	ad0e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
    acee:	e7ff      	b.n	acf0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
    acf0:	9801      	ldr	r0, [sp, #4]
    acf2:	28a0      	cmp	r0, #160	; 0xa0
    acf4:	d001      	beq.n	acfa <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
    acf6:	e7ff      	b.n	acf8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
    acf8:	e00e      	b.n	ad18 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
    acfa:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    acfc:	9007      	str	r0, [sp, #28]
    acfe:	20a0      	movs	r0, #160	; 0xa0
    ad00:	9006      	str	r0, [sp, #24]
    ad02:	e00e      	b.n	ad22 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ad04:	defe      	udf	#254	; 0xfe
    ad06:	2000      	movs	r0, #0
    ad08:	9007      	str	r0, [sp, #28]
    ad0a:	9006      	str	r0, [sp, #24]
    ad0c:	e009      	b.n	ad22 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ad0e:	2000      	movs	r0, #0
    ad10:	9007      	str	r0, [sp, #28]
    ad12:	2060      	movs	r0, #96	; 0x60
    ad14:	9006      	str	r0, [sp, #24]
    ad16:	e004      	b.n	ad22 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ad18:	2000      	movs	r0, #0
    ad1a:	9007      	str	r0, [sp, #28]
    ad1c:	20c0      	movs	r0, #192	; 0xc0
    ad1e:	9006      	str	r0, [sp, #24]
    ad20:	e7ff      	b.n	ad22 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    ad22:	9806      	ldr	r0, [sp, #24]
    ad24:	9907      	ldr	r1, [sp, #28]
    ad26:	9105      	str	r1, [sp, #20]
    ad28:	9004      	str	r0, [sp, #16]
    ad2a:	2000      	movs	r0, #0
    ad2c:	9003      	str	r0, [sp, #12]
    ad2e:	2001      	movs	r0, #1
    ad30:	9002      	str	r0, [sp, #8]
    ad32:	9802      	ldr	r0, [sp, #8]
    ad34:	9903      	ldr	r1, [sp, #12]
    ad36:	9a04      	ldr	r2, [sp, #16]
    ad38:	9b05      	ldr	r3, [sp, #20]
    ad3a:	b00a      	add	sp, #40	; 0x28
    ad3c:	4770      	bx	lr

0000ad3e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
    ad3e:	b580      	push	{r7, lr}
    ad40:	b08a      	sub	sp, #40	; 0x28
    ad42:	9009      	str	r0, [sp, #36]	; 0x24
    ad44:	f7ff ffc8 	bl	acd8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
    ad48:	9108      	str	r1, [sp, #32]
    ad4a:	9007      	str	r0, [sp, #28]
    ad4c:	9306      	str	r3, [sp, #24]
    ad4e:	9205      	str	r2, [sp, #20]
    ad50:	e7ff      	b.n	ad52 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
    ad52:	9807      	ldr	r0, [sp, #28]
    ad54:	9908      	ldr	r1, [sp, #32]
    ad56:	9a05      	ldr	r2, [sp, #20]
    ad58:	9b06      	ldr	r3, [sp, #24]
    ad5a:	f000 f863 	bl	ae24 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
    ad5e:	9104      	str	r1, [sp, #16]
    ad60:	9003      	str	r0, [sp, #12]
    ad62:	9302      	str	r3, [sp, #8]
    ad64:	9201      	str	r2, [sp, #4]
    ad66:	e7ff      	b.n	ad68 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
    ad68:	9803      	ldr	r0, [sp, #12]
    ad6a:	9904      	ldr	r1, [sp, #16]
    ad6c:	9a01      	ldr	r2, [sp, #4]
    ad6e:	9b02      	ldr	r3, [sp, #8]
    ad70:	b00a      	add	sp, #40	; 0x28
    ad72:	bd80      	pop	{r7, pc}

0000ad74 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
    ad74:	b5b0      	push	{r4, r5, r7, lr}
    ad76:	b090      	sub	sp, #64	; 0x40
    ad78:	469c      	mov	ip, r3
    ad7a:	4696      	mov	lr, r2
    ad7c:	460c      	mov	r4, r1
    ad7e:	4605      	mov	r5, r0
    ad80:	9103      	str	r1, [sp, #12]
    ad82:	9002      	str	r0, [sp, #8]
    ad84:	9305      	str	r3, [sp, #20]
    ad86:	9204      	str	r2, [sp, #16]
    ad88:	2000      	movs	r0, #0
    ad8a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad8e:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad92:	2001      	movs	r0, #1
    ad94:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ad98:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ad9c:	9802      	ldr	r0, [sp, #8]
    ad9e:	2800      	cmp	r0, #0
    ada0:	d001      	beq.n	ada6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
    ada2:	e7ff      	b.n	ada4 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
    ada4:	e004      	b.n	adb0 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
    ada6:	2000      	movs	r0, #0
    ada8:	9007      	str	r0, [sp, #28]
    adaa:	9006      	str	r0, [sp, #24]
    adac:	e023      	b.n	adf6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    adae:	defe      	udf	#254	; 0xfe
    adb0:	2000      	movs	r0, #0
    adb2:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    adb6:	9904      	ldr	r1, [sp, #16]
    adb8:	9a05      	ldr	r2, [sp, #20]
    adba:	920f      	str	r2, [sp, #60]	; 0x3c
    adbc:	910e      	str	r1, [sp, #56]	; 0x38
    adbe:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    adc2:	920b      	str	r2, [sp, #44]	; 0x2c
    adc4:	910a      	str	r1, [sp, #40]	; 0x28
    adc6:	980a      	ldr	r0, [sp, #40]	; 0x28
    adc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    adca:	f000 f883 	bl	aed4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
    adce:	9101      	str	r1, [sp, #4]
    add0:	9000      	str	r0, [sp, #0]
    add2:	e7ff      	b.n	add4 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
    add4:	9800      	ldr	r0, [sp, #0]
    add6:	9008      	str	r0, [sp, #32]
    add8:	9901      	ldr	r1, [sp, #4]
    adda:	9109      	str	r1, [sp, #36]	; 0x24
    addc:	2200      	movs	r2, #0
    adde:	9207      	str	r2, [sp, #28]
    ade0:	2201      	movs	r2, #1
    ade2:	9206      	str	r2, [sp, #24]
    ade4:	e007      	b.n	adf6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    ade6:	9802      	ldr	r0, [sp, #8]
    ade8:	2801      	cmp	r0, #1
    adea:	d010      	beq.n	ae0e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
    adec:	e019      	b.n	ae22 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
    adee:	2000      	movs	r0, #0
    adf0:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    adf4:	e7f7      	b.n	ade6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    adf6:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    adfa:	07c0      	lsls	r0, r0, #31
    adfc:	2800      	cmp	r0, #0
    adfe:	d1f6      	bne.n	adee <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
    ae00:	e7f1      	b.n	ade6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    ae02:	9806      	ldr	r0, [sp, #24]
    ae04:	9907      	ldr	r1, [sp, #28]
    ae06:	9a08      	ldr	r2, [sp, #32]
    ae08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ae0a:	b010      	add	sp, #64	; 0x40
    ae0c:	bdb0      	pop	{r4, r5, r7, pc}
    ae0e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ae12:	07c0      	lsls	r0, r0, #31
    ae14:	2800      	cmp	r0, #0
    ae16:	d0f4      	beq.n	ae02 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    ae18:	e7ff      	b.n	ae1a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
    ae1a:	2000      	movs	r0, #0
    ae1c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ae20:	e7ef      	b.n	ae02 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    ae22:	e7ee      	b.n	ae02 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

0000ae24 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
    ae24:	b5b0      	push	{r4, r5, r7, lr}
    ae26:	b090      	sub	sp, #64	; 0x40
    ae28:	469c      	mov	ip, r3
    ae2a:	4696      	mov	lr, r2
    ae2c:	460c      	mov	r4, r1
    ae2e:	4605      	mov	r5, r0
    ae30:	9103      	str	r1, [sp, #12]
    ae32:	9002      	str	r0, [sp, #8]
    ae34:	9305      	str	r3, [sp, #20]
    ae36:	9204      	str	r2, [sp, #16]
    ae38:	2000      	movs	r0, #0
    ae3a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ae3e:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ae42:	2001      	movs	r0, #1
    ae44:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ae48:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ae4c:	9802      	ldr	r0, [sp, #8]
    ae4e:	2800      	cmp	r0, #0
    ae50:	d001      	beq.n	ae56 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
    ae52:	e7ff      	b.n	ae54 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
    ae54:	e004      	b.n	ae60 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
    ae56:	2000      	movs	r0, #0
    ae58:	9007      	str	r0, [sp, #28]
    ae5a:	9006      	str	r0, [sp, #24]
    ae5c:	e023      	b.n	aea6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ae5e:	defe      	udf	#254	; 0xfe
    ae60:	2000      	movs	r0, #0
    ae62:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ae66:	9904      	ldr	r1, [sp, #16]
    ae68:	9a05      	ldr	r2, [sp, #20]
    ae6a:	920f      	str	r2, [sp, #60]	; 0x3c
    ae6c:	910e      	str	r1, [sp, #56]	; 0x38
    ae6e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ae72:	920b      	str	r2, [sp, #44]	; 0x2c
    ae74:	910a      	str	r1, [sp, #40]	; 0x28
    ae76:	980a      	ldr	r0, [sp, #40]	; 0x28
    ae78:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ae7a:	f00c fbf9 	bl	17670 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
    ae7e:	9101      	str	r1, [sp, #4]
    ae80:	9000      	str	r0, [sp, #0]
    ae82:	e7ff      	b.n	ae84 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
    ae84:	9800      	ldr	r0, [sp, #0]
    ae86:	9008      	str	r0, [sp, #32]
    ae88:	9901      	ldr	r1, [sp, #4]
    ae8a:	9109      	str	r1, [sp, #36]	; 0x24
    ae8c:	2200      	movs	r2, #0
    ae8e:	9207      	str	r2, [sp, #28]
    ae90:	2201      	movs	r2, #1
    ae92:	9206      	str	r2, [sp, #24]
    ae94:	e007      	b.n	aea6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ae96:	9802      	ldr	r0, [sp, #8]
    ae98:	2801      	cmp	r0, #1
    ae9a:	d010      	beq.n	aebe <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
    ae9c:	e019      	b.n	aed2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
    ae9e:	2000      	movs	r0, #0
    aea0:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aea4:	e7f7      	b.n	ae96 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    aea6:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    aeaa:	07c0      	lsls	r0, r0, #31
    aeac:	2800      	cmp	r0, #0
    aeae:	d1f6      	bne.n	ae9e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
    aeb0:	e7f1      	b.n	ae96 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    aeb2:	9806      	ldr	r0, [sp, #24]
    aeb4:	9907      	ldr	r1, [sp, #28]
    aeb6:	9a08      	ldr	r2, [sp, #32]
    aeb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aeba:	b010      	add	sp, #64	; 0x40
    aebc:	bdb0      	pop	{r4, r5, r7, pc}
    aebe:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    aec2:	07c0      	lsls	r0, r0, #31
    aec4:	2800      	cmp	r0, #0
    aec6:	d0f4      	beq.n	aeb2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    aec8:	e7ff      	b.n	aeca <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
    aeca:	2000      	movs	r0, #0
    aecc:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aed0:	e7ef      	b.n	aeb2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    aed2:	e7ee      	b.n	aeb2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

0000aed4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
    aed4:	b084      	sub	sp, #16
    aed6:	460a      	mov	r2, r1
    aed8:	4603      	mov	r3, r0
    aeda:	9103      	str	r1, [sp, #12]
    aedc:	9002      	str	r0, [sp, #8]
    aede:	b004      	add	sp, #16
    aee0:	4770      	bx	lr

0000aee2 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E>:
    aee2:	b580      	push	{r7, lr}
    aee4:	b086      	sub	sp, #24
    aee6:	9004      	str	r0, [sp, #16]
    aee8:	9105      	str	r1, [sp, #20]
    aeea:	9002      	str	r0, [sp, #8]
    aeec:	f000 f810 	bl	af10 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E>
    aef0:	9001      	str	r0, [sp, #4]
    aef2:	e7ff      	b.n	aef4 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x12>
    aef4:	9801      	ldr	r0, [sp, #4]
    aef6:	07c1      	lsls	r1, r0, #31
    aef8:	2900      	cmp	r1, #0
    aefa:	d103      	bne.n	af04 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x22>
    aefc:	e7ff      	b.n	aefe <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x1c>
    aefe:	2000      	movs	r0, #0
    af00:	9003      	str	r0, [sp, #12]
    af02:	e002      	b.n	af0a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x28>
    af04:	9802      	ldr	r0, [sp, #8]
    af06:	9003      	str	r0, [sp, #12]
    af08:	e7ff      	b.n	af0a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x28>
    af0a:	9803      	ldr	r0, [sp, #12]
    af0c:	b006      	add	sp, #24
    af0e:	bd80      	pop	{r7, pc}

0000af10 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E>:
    af10:	b580      	push	{r7, lr}
    af12:	b08a      	sub	sp, #40	; 0x28
    af14:	9008      	str	r0, [sp, #32]
    af16:	9109      	str	r1, [sp, #36]	; 0x24
    af18:	9103      	str	r1, [sp, #12]
    af1a:	9002      	str	r0, [sp, #8]
    af1c:	f000 f815 	bl	af4a <_ZN4core3any6TypeId2of17h3f51c8cccab069bdE>
    af20:	9105      	str	r1, [sp, #20]
    af22:	9004      	str	r0, [sp, #16]
    af24:	e7ff      	b.n	af26 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E+0x16>
    af26:	9803      	ldr	r0, [sp, #12]
    af28:	68c1      	ldr	r1, [r0, #12]
    af2a:	9802      	ldr	r0, [sp, #8]
    af2c:	4788      	blx	r1
    af2e:	9107      	str	r1, [sp, #28]
    af30:	9006      	str	r0, [sp, #24]
    af32:	e7ff      	b.n	af34 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E+0x24>
    af34:	a804      	add	r0, sp, #16
    af36:	a906      	add	r1, sp, #24
    af38:	f007 f919 	bl	1216e <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h27d5684c70bb37e8E>
    af3c:	9001      	str	r0, [sp, #4]
    af3e:	e7ff      	b.n	af40 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E+0x30>
    af40:	9801      	ldr	r0, [sp, #4]
    af42:	f000 0001 	and.w	r0, r0, #1
    af46:	b00a      	add	sp, #40	; 0x28
    af48:	bd80      	pop	{r7, pc}

0000af4a <_ZN4core3any6TypeId2of17h3f51c8cccab069bdE>:
    af4a:	b086      	sub	sp, #24
    af4c:	f249 40d9 	movw	r0, #38105	; 0x94d9
    af50:	f2c1 1010 	movt	r0, #4368	; 0x1110
    af54:	9005      	str	r0, [sp, #20]
    af56:	f249 7064 	movw	r0, #38756	; 0x9764
    af5a:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    af5e:	9004      	str	r0, [sp, #16]
    af60:	9804      	ldr	r0, [sp, #16]
    af62:	9905      	ldr	r1, [sp, #20]
    af64:	9001      	str	r0, [sp, #4]
    af66:	9100      	str	r1, [sp, #0]
    af68:	e7ff      	b.n	af6a <_ZN4core3any6TypeId2of17h3f51c8cccab069bdE+0x20>
    af6a:	9801      	ldr	r0, [sp, #4]
    af6c:	9002      	str	r0, [sp, #8]
    af6e:	9900      	ldr	r1, [sp, #0]
    af70:	9103      	str	r1, [sp, #12]
    af72:	9802      	ldr	r0, [sp, #8]
    af74:	9903      	ldr	r1, [sp, #12]
    af76:	b006      	add	sp, #24
    af78:	4770      	bx	lr

0000af7a <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE>:
    af7a:	b580      	push	{r7, lr}
    af7c:	b084      	sub	sp, #16
    af7e:	9002      	str	r0, [sp, #8]
    af80:	9103      	str	r1, [sp, #12]
    af82:	f7ff ffae 	bl	aee2 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E>
    af86:	9001      	str	r0, [sp, #4]
    af88:	e7ff      	b.n	af8a <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE+0x10>
    af8a:	9801      	ldr	r0, [sp, #4]
    af8c:	b004      	add	sp, #16
    af8e:	bd80      	pop	{r7, pc}

0000af90 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE>:
    af90:	b580      	push	{r7, lr}
    af92:	b082      	sub	sp, #8
    af94:	9200      	str	r2, [sp, #0]
    af96:	9101      	str	r1, [sp, #4]
    af98:	9a00      	ldr	r2, [sp, #0]
    af9a:	f003 fe89 	bl	ecb0 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE>
    af9e:	e7ff      	b.n	afa0 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE+0x10>
    afa0:	b002      	add	sp, #8
    afa2:	bd80      	pop	{r7, pc}

0000afa4 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E>:
    afa4:	b580      	push	{r7, lr}
    afa6:	b084      	sub	sp, #16
    afa8:	9102      	str	r1, [sp, #8]
    afaa:	9003      	str	r0, [sp, #12]
    afac:	9902      	ldr	r1, [sp, #8]
    afae:	f003 fe91 	bl	ecd4 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6a25aae91f88a8abE>
    afb2:	9001      	str	r0, [sp, #4]
    afb4:	9100      	str	r1, [sp, #0]
    afb6:	e7ff      	b.n	afb8 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E+0x14>
    afb8:	9801      	ldr	r0, [sp, #4]
    afba:	9900      	ldr	r1, [sp, #0]
    afbc:	b004      	add	sp, #16
    afbe:	bd80      	pop	{r7, pc}

0000afc0 <_ZN8libchip814Chip8$LT$T$GT$3new17hca880a1e3fbd9a67E>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    afc0:	b5b0      	push	{r4, r5, r7, lr}
    afc2:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    afc6:	b082      	sub	sp, #8
    afc8:	f10d 0e0c 	add.w	lr, sp, #12
    afcc:	f50e 5282 	add.w	r2, lr, #4160	; 0x1040
    afd0:	2300      	movs	r3, #0
        Self {
            v: [0; REGS],
    afd2:	930b      	str	r3, [sp, #44]	; 0x2c
    afd4:	930a      	str	r3, [sp, #40]	; 0x28
    afd6:	9309      	str	r3, [sp, #36]	; 0x24
    afd8:	9308      	str	r3, [sp, #32]
    afda:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
    afde:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    afe2:	9007      	str	r0, [sp, #28]
    afe4:	4660      	mov	r0, ip
    afe6:	9106      	str	r1, [sp, #24]
    afe8:	4671      	mov	r1, lr
    afea:	9205      	str	r2, [sp, #20]
    afec:	9304      	str	r3, [sp, #16]
    afee:	f8cd c00c 	str.w	ip, [sp, #12]
    aff2:	f8cd e008 	str.w	lr, [sp, #8]
    aff6:	f013 ff21 	bl	1ee3c <__aeabi_memclr>
            stack: [0; STACKS],
    affa:	9804      	ldr	r0, [sp, #16]
    affc:	9905      	ldr	r1, [sp, #20]
    affe:	6008      	str	r0, [r1, #0]
    b000:	f841 0c04 	str.w	r0, [r1, #-4]
    b004:	f841 0c08 	str.w	r0, [r1, #-8]
    b008:	f841 0c0c 	str.w	r0, [r1, #-12]
    b00c:	f841 0c10 	str.w	r0, [r1, #-16]
    b010:	f841 0c14 	str.w	r0, [r1, #-20]
    b014:	f841 0c18 	str.w	r0, [r1, #-24]
    b018:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    b01c:	6088      	str	r0, [r1, #8]
    b01e:	6048      	str	r0, [r1, #4]
            running: false,
            hw,
    b020:	9a06      	ldr	r2, [sp, #24]
    b022:	8893      	ldrh	r3, [r2, #4]
    b024:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    b028:	f8ae 3064 	strh.w	r3, [lr, #100]	; 0x64
    b02c:	6813      	ldr	r3, [r2, #0]
    b02e:	614b      	str	r3, [r1, #20]
        Self {
    b030:	9b08      	ldr	r3, [sp, #32]
    b032:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    b036:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    b03a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    b03c:	9d07      	ldr	r5, [sp, #28]
    b03e:	642c      	str	r4, [r5, #64]	; 0x40
    b040:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
    b044:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
    b048:	636b      	str	r3, [r5, #52]	; 0x34
    b04a:	8228      	strh	r0, [r5, #16]
    b04c:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    b050:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    b054:	8268      	strh	r0, [r5, #18]
    b056:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
    b05a:	f105 0047 	add.w	r0, r5, #71	; 0x47
    b05e:	9903      	ldr	r1, [sp, #12]
    b060:	9a02      	ldr	r2, [sp, #8]
    b062:	f013 feef 	bl	1ee44 <__aeabi_memcpy>
    b066:	9907      	ldr	r1, [sp, #28]
    b068:	f101 0214 	add.w	r2, r1, #20
    b06c:	f10d 0e10 	add.w	lr, sp, #16
    b070:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    b074:	2320      	movs	r3, #32
    b076:	9001      	str	r0, [sp, #4]
    b078:	4610      	mov	r0, r2
    b07a:	461a      	mov	r2, r3
    b07c:	f013 fee2 	bl	1ee44 <__aeabi_memcpy>
    b080:	9905      	ldr	r1, [sp, #20]
    b082:	684a      	ldr	r2, [r1, #4]
    b084:	688b      	ldr	r3, [r1, #8]
    b086:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    b08a:	f8d1 e010 	ldr.w	lr, [r1, #16]
    b08e:	9c07      	ldr	r4, [sp, #28]
    b090:	6063      	str	r3, [r4, #4]
    b092:	6022      	str	r2, [r4, #0]
    b094:	f8c4 e00c 	str.w	lr, [r4, #12]
    b098:	f8c4 c008 	str.w	ip, [r4, #8]
    b09c:	f241 0247 	movw	r2, #4167	; 0x1047
    b0a0:	9b04      	ldr	r3, [sp, #16]
    b0a2:	54a3      	strb	r3, [r4, r2]
    b0a4:	f241 0248 	movw	r2, #4168	; 0x1048
    b0a8:	eb04 0c02 	add.w	ip, r4, r2
    b0ac:	f8d1 e014 	ldr.w	lr, [r1, #20]
    b0b0:	f844 e002 	str.w	lr, [r4, r2]
    b0b4:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
    b0b8:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    b0bc:	f8ac 2004 	strh.w	r2, [ip, #4]
        }
    }
    b0c0:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    b0c4:	b002      	add	sp, #8
    b0c6:	bdb0      	pop	{r4, r5, r7, pc}

0000b0c8 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    b0c8:	b580      	push	{r7, lr}
    b0ca:	b086      	sub	sp, #24
    b0cc:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    b0ce:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    b0d2:	2201      	movs	r2, #1
    b0d4:	9003      	str	r0, [sp, #12]
    b0d6:	4608      	mov	r0, r1
    b0d8:	4611      	mov	r1, r2
    b0da:	f004 f908 	bl	f2ee <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE>
    b0de:	9002      	str	r0, [sp, #8]
    b0e0:	e7ff      	b.n	b0e2 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E+0x1a>
    b0e2:	9802      	ldr	r0, [sp, #8]
    b0e4:	9903      	ldr	r1, [sp, #12]
    b0e6:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    b0ea:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    b0ee:	4613      	mov	r3, r2
    b0f0:	2a0f      	cmp	r2, #15
    b0f2:	9301      	str	r3, [sp, #4]
    b0f4:	d80a      	bhi.n	b10c <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E+0x44>
    b0f6:	e7ff      	b.n	b0f8 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E+0x30>
    b0f8:	9803      	ldr	r0, [sp, #12]
    b0fa:	9901      	ldr	r1, [sp, #4]
    b0fc:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    b100:	8a92      	ldrh	r2, [r2, #20]
    b102:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    b106:	4610      	mov	r0, r2
    b108:	b006      	add	sp, #24
    b10a:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    b10c:	f24f 30e8 	movw	r0, #62440	; 0xf3e8
    b110:	f2c0 0001 	movt	r0, #1
    b114:	2210      	movs	r2, #16
    b116:	9901      	ldr	r1, [sp, #4]
    b118:	f00d fad6 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b11c:	defe      	udf	#254	; 0xfe

0000b11e <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E>:
    pub fn run(mut self, rom: &[u8]) {
    b11e:	b580      	push	{r7, lr}
    b120:	b086      	sub	sp, #24
    b122:	9104      	str	r1, [sp, #16]
    b124:	9205      	str	r2, [sp, #20]
        self.setup();
    b126:	9003      	str	r0, [sp, #12]
    b128:	9202      	str	r2, [sp, #8]
    b12a:	9101      	str	r1, [sp, #4]
    b12c:	f003 ff34 	bl	ef98 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E>
    b130:	e7ff      	b.n	b132 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x14>
        self.load(rom);
    b132:	9803      	ldr	r0, [sp, #12]
    b134:	9901      	ldr	r1, [sp, #4]
    b136:	9a02      	ldr	r2, [sp, #8]
    b138:	f003 fdde 	bl	ecf8 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE>
    b13c:	e7ff      	b.n	b13e <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x20>
        while self.running {
    b13e:	e7ff      	b.n	b140 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x22>
    b140:	f241 0047 	movw	r0, #4167	; 0x1047
    b144:	9903      	ldr	r1, [sp, #12]
    b146:	5c08      	ldrb	r0, [r1, r0]
    b148:	07c0      	lsls	r0, r0, #31
    b14a:	2800      	cmp	r0, #0
    b14c:	d101      	bne.n	b152 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x34>
    b14e:	e7ff      	b.n	b150 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x32>
    }
    b150:	e00c      	b.n	b16c <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x4e>
            self.sched();
    b152:	9803      	ldr	r0, [sp, #12]
    b154:	f003 fe9d 	bl	ee92 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E>
    b158:	e7ff      	b.n	b15a <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x3c>
            self.eval();
    b15a:	9803      	ldr	r0, [sp, #12]
    b15c:	f000 f808 	bl	b170 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE>
    b160:	e7ff      	b.n	b162 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x44>
            self.next();
    b162:	9803      	ldr	r0, [sp, #12]
    b164:	f003 fe03 	bl	ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    b168:	e7ff      	b.n	b16a <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x4c>
        while self.running {
    b16a:	e7e9      	b.n	b140 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x22>
    }
    b16c:	b006      	add	sp, #24
    b16e:	bd80      	pop	{r7, pc}

0000b170 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    b170:	b570      	push	{r4, r5, r6, lr}
    b172:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    b176:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    b17a:	8a41      	ldrh	r1, [r0, #18]
    b17c:	460a      	mov	r2, r1
    b17e:	2300      	movs	r3, #0
    b180:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    b184:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    b188:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    b18c:	f043 82c0 	bne.w	e710 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35a0>
    b190:	e7ff      	b.n	b192 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22>
    b192:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b196:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    b19a:	1842      	adds	r2, r0, r1
    b19c:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    b1a0:	4613      	mov	r3, r2
    b1a2:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    b1a6:	8a42      	ldrh	r2, [r0, #18]
    b1a8:	3201      	adds	r2, #1
    b1aa:	fa1f fc82 	uxth.w	ip, r2
    b1ae:	4696      	mov	lr, r2
    b1b0:	4594      	cmp	ip, r2
    b1b2:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    b1b6:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    b1ba:	f043 82b4 	bne.w	e726 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35b6>
    b1be:	e7ff      	b.n	b1c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x50>
    b1c0:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    b1c4:	b281      	uxth	r1, r0
    b1c6:	460a      	mov	r2, r1
    b1c8:	2300      	movs	r3, #0
    b1ca:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    b1ce:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    b1d2:	f043 82b4 	bne.w	e73e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35ce>
    b1d6:	e7ff      	b.n	b1d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x68>
    b1d8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b1dc:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    b1e0:	1842      	adds	r2, r0, r1
    b1e2:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    b1e6:	4613      	mov	r3, r2
    b1e8:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    b1ec:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    b1f0:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    b1f4:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    b1f8:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    b1fc:	e7ff      	b.n	b1fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8e>
    b1fe:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    b202:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    b206:	ea40 0201 	orr.w	r2, r0, r1
    b20a:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    b20e:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    b212:	f36f 321f 	bfc	r2, #12, #20
    b216:	4613      	mov	r3, r2
    b218:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    b21c:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    b220:	f002 020f 	and.w	r2, r2, #15
    b224:	4694      	mov	ip, r2
    b226:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    b22a:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    b22e:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    b232:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    b236:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    b23a:	e7ff      	b.n	b23c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcc>
    b23c:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    b240:	f000 010f 	and.w	r1, r0, #15
    b244:	460a      	mov	r2, r1
    b246:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    b24a:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    b24e:	0909      	lsrs	r1, r1, #4
    b250:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    b254:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    b258:	e7ff      	b.n	b25a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xea>
    b25a:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    b25e:	f000 010f 	and.w	r1, r0, #15
    b262:	460a      	mov	r2, r1
    b264:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    b268:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    b26c:	b2cb      	uxtb	r3, r1
    b26e:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    b272:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    b276:	0b09      	lsrs	r1, r1, #12
    b278:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    b27c:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    b280:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    b284:	e7ff      	b.n	b286 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x116>
    b286:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    b28a:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    b28e:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    b292:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    b296:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    b29a:	e7ff      	b.n	b29c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12c>
    b29c:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    b2a0:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    b2a4:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    b2a8:	0912      	lsrs	r2, r2, #4
    b2aa:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    b2ae:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    b2b2:	e7ff      	b.n	b2b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x144>
    b2b4:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    b2b8:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    b2bc:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    b2c0:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    b2c4:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    b2c8:	e7ff      	b.n	b2ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15a>
    b2ca:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    b2ce:	f000 010f 	and.w	r1, r0, #15
        match (
    b2d2:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    b2d6:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    b2da:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    b2de:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    b2e2:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    b2e6:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    b2ea:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    b2ee:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    b2f2:	468e      	mov	lr, r1
    b2f4:	290f      	cmp	r1, #15
    b2f6:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    b2fa:	d84f      	bhi.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b2fc:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    b300:	e8df f011 	tbh	[pc, r1, lsl #1]
    b304:	03060010 	.word	0x03060010
    b308:	04320399 	.word	0x04320399
    b30c:	002c04d2 	.word	0x002c04d2
    b310:	06b4061f 	.word	0x06b4061f
    b314:	00750032 	.word	0x00750032
    b318:	0ee40e59 	.word	0x0ee40e59
    b31c:	10260f85 	.word	0x10260f85
    b320:	0095007b 	.word	0x0095007b
    b324:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    b328:	2800      	cmp	r0, #0
    b32a:	f040 8261 	bne.w	b7f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x680>
    b32e:	e7ff      	b.n	b330 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c0>
    b330:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    b334:	280e      	cmp	r0, #14
    b336:	f040 825b 	bne.w	b7f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x680>
    b33a:	e7ff      	b.n	b33c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cc>
    b33c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b340:	4601      	mov	r1, r0
    b342:	2800      	cmp	r0, #0
    b344:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    b348:	f000 80c0 	beq.w	b4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35c>
    b34c:	e7ff      	b.n	b34e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1de>
    b34e:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    b352:	b281      	uxth	r1, r0
    b354:	290e      	cmp	r1, #14
    b356:	f000 81b6 	beq.w	b6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x556>
    b35a:	e249      	b.n	b7f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x680>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    b35c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b360:	2800      	cmp	r0, #0
    b362:	f000 8541 	beq.w	bde8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc78>
    b366:	e019      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    b368:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b36c:	4601      	mov	r1, r0
    b36e:	280e      	cmp	r0, #14
    b370:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    b374:	d812      	bhi.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b376:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    b37a:	e8df f011 	tbh	[pc, r1, lsl #1]
    b37e:	071e      	.short	0x071e
    b380:	086707c0 	.word	0x086707c0
    b384:	09b5090e 	.word	0x09b5090e
    b388:	0b3b0a77 	.word	0x0b3b0a77
    b38c:	000f0bf0 	.word	0x000f0bf0
    b390:	000f000f 	.word	0x000f000f
    b394:	000f000f 	.word	0x000f000f
    b398:	0cb4000f 	.word	0x0cb4000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    b39c:	f64f 70f8 	movw	r0, #65528	; 0xfff8
    b3a0:	f2c0 0001 	movt	r0, #1
    b3a4:	6801      	ldr	r1, [r0, #0]
    b3a6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b3aa:	f100 0212 	add.w	r2, r0, #18
    b3ae:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    b3b2:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    b3b6:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    b3ba:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    b3be:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    b3c2:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    b3c6:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    b3ca:	f649 6cb7 	movw	ip, #40631	; 0x9eb7
    b3ce:	f2c0 0c01 	movt	ip, #1
    b3d2:	4610      	mov	r0, r2
    b3d4:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    b3d8:	4661      	mov	r1, ip
    b3da:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    b3de:	f7ff fa7f 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b3e2:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    b3e6:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    b3ea:	f003 b94f 	b.w	e68c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x351c>
            (9, _, _, 0) => {
    b3ee:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b3f2:	2800      	cmp	r0, #0
    b3f4:	f001 8532 	beq.w	ce5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cec>
    b3f8:	e7d0      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xe, _, 9, 0xe) => {
    b3fa:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    b3fe:	4601      	mov	r1, r0
    b400:	2809      	cmp	r0, #9
    b402:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    b406:	d006      	beq.n	b416 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a6>
    b408:	e7ff      	b.n	b40a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29a>
    b40a:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    b40e:	b281      	uxth	r1, r0
    b410:	290a      	cmp	r1, #10
    b412:	d006      	beq.n	b422 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b2>
    b414:	e7c2      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b416:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b41a:	280e      	cmp	r0, #14
    b41c:	f002 815b 	beq.w	d6d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2566>
    b420:	e7bc      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xe, _, 0xa, 0x1) => {
    b422:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b426:	2801      	cmp	r0, #1
    b428:	f002 81fe 	beq.w	d828 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b8>
    b42c:	e7b6      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 0, 7) => {
    b42e:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    b432:	4601      	mov	r1, r0
    b434:	2806      	cmp	r0, #6
    b436:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    b43a:	d8af      	bhi.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b43c:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    b440:	e8df f001 	tbb	[pc, r1]
    b444:	322c1505 	.word	0x322c1505
    b448:	003e3804 	.word	0x003e3804
    b44c:	e7a6      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b44e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b452:	4601      	mov	r1, r0
    b454:	2807      	cmp	r0, #7
    b456:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    b45a:	f002 828e 	beq.w	d97a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x280a>
    b45e:	e7ff      	b.n	b460 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f0>
    b460:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    b464:	b281      	uxth	r1, r0
    b466:	290a      	cmp	r1, #10
    b468:	f002 8320 	beq.w	daac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x293c>
    b46c:	e796      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 1, 5) => {
    b46e:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b472:	4601      	mov	r1, r0
    b474:	2805      	cmp	r0, #5
    b476:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    b47a:	f002 83b1 	beq.w	dbe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a70>
    b47e:	e7ff      	b.n	b480 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x310>
    b480:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    b484:	b281      	uxth	r1, r0
    b486:	2908      	cmp	r1, #8
    b488:	f002 843f 	beq.w	dd0a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b9a>
    b48c:	e7ff      	b.n	b48e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31e>
    b48e:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    b492:	b281      	uxth	r1, r0
    b494:	290e      	cmp	r1, #14
    b496:	f002 84cd 	beq.w	de34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2cc4>
    b49a:	e77f      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 2, 9) => {
    b49c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b4a0:	2809      	cmp	r0, #9
    b4a2:	f002 856b 	beq.w	df7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e0c>
    b4a6:	e779      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 3, 3) => {
    b4a8:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b4ac:	2803      	cmp	r0, #3
    b4ae:	f002 8616 	beq.w	e0de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f6e>
    b4b2:	e773      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 5, 5) => {
    b4b4:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b4b8:	2805      	cmp	r0, #5
    b4ba:	f002 871f 	beq.w	e2fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x318c>
    b4be:	e76d      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 6, 5) => {
    b4c0:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b4c4:	2805      	cmp	r0, #5
    b4c6:	f002 87fc 	beq.w	e4c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3352>
    b4ca:	e767      	b.n	b39c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b4cc:	2005      	movs	r0, #5
    b4ce:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    b4d2:	f24f 4050 	movw	r0, #62544	; 0xf450
    b4d6:	f2c0 0001 	movt	r0, #1
    b4da:	6801      	ldr	r1, [r0, #0]
    b4dc:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    b4e0:	f006 fcb8 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b4e4:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    b4e8:	e01f      	b.n	b52a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ba>
    b4ea:	2001      	movs	r0, #1
    b4ec:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    b4f0:	e015      	b.n	b51e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ae>
    b4f2:	2000      	movs	r0, #0
    b4f4:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    b4f8:	e011      	b.n	b51e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ae>
    b4fa:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    b4fc:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    b500:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    b504:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b508:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b50c:	f006 fd17 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b510:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    b514:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    b518:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    b51c:	e00b      	b.n	b536 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3c6>
    b51e:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    b522:	07c0      	lsls	r0, r0, #31
    b524:	2800      	cmp	r0, #0
    b526:	d115      	bne.n	b554 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3e4>
    b528:	e05e      	b.n	b5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x478>
    b52a:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    b52e:	07c1      	lsls	r1, r0, #31
    b530:	2900      	cmp	r1, #0
    b532:	d1e2      	bne.n	b4fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38a>
    b534:	e7dd      	b.n	b4f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x382>
    b536:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    b53a:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    b53e:	f006 fc89 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b542:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    b546:	e7ff      	b.n	b548 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3d8>
    b548:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    b54c:	07c1      	lsls	r1, r0, #31
    b54e:	2900      	cmp	r1, #0
    b550:	d1cb      	bne.n	b4ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37a>
    b552:	e7ce      	b.n	b4f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x382>
                trace!("[{:04x}] CLS", self.pc);
    b554:	f240 2098 	movw	r0, #664	; 0x298
    b558:	f2c0 0002 	movt	r0, #2
    b55c:	6801      	ldr	r1, [r0, #0]
    b55e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b562:	f100 0212 	add.w	r2, r0, #18
    b566:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    b56a:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    b56e:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    b572:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    b576:	f2c0 0301 	movt	r3, #1
    b57a:	4610      	mov	r0, r2
    b57c:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    b580:	4619      	mov	r1, r3
    b582:	f7ff f9ad 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b586:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    b58a:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    b58e:	e7ff      	b.n	b590 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x420>
    b590:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    b594:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    b598:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    b59c:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    b5a0:	f24f 4298 	movw	r2, #62616	; 0xf498
    b5a4:	f2c0 0201 	movt	r2, #1
    b5a8:	6812      	ldr	r2, [r2, #0]
    b5aa:	466b      	mov	r3, sp
    b5ac:	f04f 0c01 	mov.w	ip, #1
    b5b0:	f8c3 c008 	str.w	ip, [r3, #8]
    b5b4:	605a      	str	r2, [r3, #4]
    b5b6:	f8c3 c000 	str.w	ip, [r3]
    b5ba:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    b5be:	2202      	movs	r2, #2
    b5c0:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    b5c4:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    b5c8:	f006 fc80 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b5cc:	e7ff      	b.n	b5ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x45e>
    b5ce:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    b5d2:	f240 20b8 	movw	r0, #696	; 0x2b8
    b5d6:	f2c0 0002 	movt	r0, #2
    b5da:	6802      	ldr	r2, [r0, #0]
    b5dc:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    b5e0:	f007 fd52 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b5e4:	e7ff      	b.n	b5e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x476>
    b5e6:	e7ff      	b.n	b5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x478>
    b5e8:	f241 0048 	movw	r0, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    b5ec:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    b5f0:	4408      	add	r0, r1
    b5f2:	f004 fa9e 	bl	fb32 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E>
    b5f6:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    b5f8:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    b5fa:	e7ff      	b.n	b5fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x48c>
    b5fc:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    b5fe:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    b602:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    b604:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    b608:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    b60a:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    b60e:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    b612:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    b616:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    b61a:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    b61e:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    b622:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    b626:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    b62a:	f003 fde3 	bl	f1f4 <_ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E>
    b62e:	e7ff      	b.n	b630 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4c0>
    b630:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    b634:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    b638:	f003 ff3f 	bl	f4ba <_ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E>
    b63c:	e7ff      	b.n	b63e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4ce>
    b63e:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    b642:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    b646:	f006 fd88 	bl	1215a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he2e30225e051e80dE>
    b64a:	e7ff      	b.n	b64c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4dc>
    b64c:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    b650:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    b654:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    b658:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    b65c:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    b660:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    b664:	e7ff      	b.n	b666 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4f6>
    b666:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    b66a:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    b66e:	f006 fca1 	bl	11fb4 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E>
    b672:	e7ff      	b.n	b674 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x504>
    b674:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    b678:	2800      	cmp	r0, #0
    b67a:	d001      	beq.n	b680 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x510>
    b67c:	e7ff      	b.n	b67e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x50e>
    b67e:	e002      	b.n	b686 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x516>
        match (
    b680:	f003 b843 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    b684:	defe      	udf	#254	; 0xfe
    b686:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    b68a:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    b68e:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    b692:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    b696:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    b69a:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    b69e:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    b6a2:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    b6a6:	f241 0248 	movw	r2, #4168	; 0x1048
                    self.hw.vram_set(x, y, false);
    b6aa:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    b6ae:	441a      	add	r2, r3
    b6b0:	2300      	movs	r3, #0
    b6b2:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    b6b4:	4610      	mov	r0, r2
    b6b6:	9afd      	ldr	r2, [sp, #1012]	; 0x3f4
    b6b8:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    b6ba:	4611      	mov	r1, r2
    b6bc:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    b6be:	f004 f87b 	bl	f7b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE>
    b6c2:	e7ff      	b.n	b6c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x554>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    b6c4:	e7cf      	b.n	b666 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4f6>
    b6c6:	2005      	movs	r0, #5
    b6c8:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    b6cc:	f24f 4050 	movw	r0, #62544	; 0xf450
    b6d0:	f2c0 0001 	movt	r0, #1
    b6d4:	6801      	ldr	r1, [r0, #0]
    b6d6:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    b6da:	f006 fbbb 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b6de:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    b6e0:	e01f      	b.n	b722 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5b2>
    b6e2:	2001      	movs	r0, #1
    b6e4:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    b6e8:	e015      	b.n	b716 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5a6>
    b6ea:	2000      	movs	r0, #0
    b6ec:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    b6f0:	e011      	b.n	b716 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5a6>
    b6f2:	2000      	movs	r0, #0
    b6f4:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    b6f8:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    b6fc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b700:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b704:	f006 fc1b 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b708:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    b70c:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    b710:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    b714:	e00a      	b.n	b72c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5bc>
    b716:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    b71a:	07c0      	lsls	r0, r0, #31
    b71c:	2800      	cmp	r0, #0
    b71e:	d112      	bne.n	b746 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5d6>
    b720:	e055      	b.n	b7ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x65e>
    b722:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    b724:	07c1      	lsls	r1, r0, #31
    b726:	2900      	cmp	r1, #0
    b728:	d1e3      	bne.n	b6f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x582>
    b72a:	e7de      	b.n	b6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x57a>
    b72c:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    b730:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    b734:	f006 fb8e 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b738:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    b73a:	e7ff      	b.n	b73c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5cc>
    b73c:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    b73e:	07c1      	lsls	r1, r0, #31
    b740:	2900      	cmp	r1, #0
    b742:	d1ce      	bne.n	b6e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x572>
    b744:	e7d1      	b.n	b6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x57a>
                trace!("[{:04x}] RET", self.pc);
    b746:	f240 205c 	movw	r0, #604	; 0x25c
    b74a:	f2c0 0002 	movt	r0, #2
    b74e:	6801      	ldr	r1, [r0, #0]
    b750:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b754:	f100 0212 	add.w	r2, r0, #18
    b758:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    b75c:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    b760:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    b764:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    b768:	f2c0 0301 	movt	r3, #1
    b76c:	4610      	mov	r0, r2
    b76e:	91f9      	str	r1, [sp, #996]	; 0x3e4
    b770:	4619      	mov	r1, r3
    b772:	f7ff f8b5 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b776:	90f8      	str	r0, [sp, #992]	; 0x3e0
    b778:	91f7      	str	r1, [sp, #988]	; 0x3dc
    b77a:	e7ff      	b.n	b77c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x60c>
    b77c:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    b77e:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    b782:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    b784:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    b788:	f24f 4298 	movw	r2, #62616	; 0xf498
    b78c:	f2c0 0201 	movt	r2, #1
    b790:	6812      	ldr	r2, [r2, #0]
    b792:	466b      	mov	r3, sp
    b794:	f04f 0c01 	mov.w	ip, #1
    b798:	f8c3 c008 	str.w	ip, [r3, #8]
    b79c:	605a      	str	r2, [r3, #4]
    b79e:	f8c3 c000 	str.w	ip, [r3]
    b7a2:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    b7a6:	2202      	movs	r2, #2
    b7a8:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    b7ac:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    b7ae:	f006 fb8d 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b7b2:	e7ff      	b.n	b7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x644>
    b7b4:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    b7b8:	f240 207c 	movw	r0, #636	; 0x27c
    b7bc:	f2c0 0002 	movt	r0, #2
    b7c0:	6802      	ldr	r2, [r0, #0]
    b7c2:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    b7c6:	f007 fc5f 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b7ca:	e7ff      	b.n	b7cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x65c>
    b7cc:	e7ff      	b.n	b7ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x65e>
                let addr = self.pop();
    b7ce:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b7d2:	f7ff fc79 	bl	b0c8 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E>
    b7d6:	4601      	mov	r1, r0
    b7d8:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    b7dc:	91f6      	str	r1, [sp, #984]	; 0x3d8
    b7de:	e7ff      	b.n	b7e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x670>
                self.jump(addr);
    b7e0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b7e4:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    b7e6:	f003 fa7f 	bl	ece8 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    b7ea:	e7ff      	b.n	b7ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x67c>
        match (
    b7ec:	f002 bf8d 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    b7f0:	2005      	movs	r0, #5
    b7f2:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    b7f6:	f24f 4050 	movw	r0, #62544	; 0xf450
    b7fa:	f2c0 0001 	movt	r0, #1
    b7fe:	6801      	ldr	r1, [r0, #0]
    b800:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    b804:	f006 fb26 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b808:	90f5      	str	r0, [sp, #980]	; 0x3d4
    b80a:	e01f      	b.n	b84c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6dc>
    b80c:	2001      	movs	r0, #1
    b80e:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    b812:	e015      	b.n	b840 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6d0>
    b814:	2000      	movs	r0, #0
    b816:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    b81a:	e011      	b.n	b840 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6d0>
    b81c:	2000      	movs	r0, #0
    b81e:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    b822:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    b826:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b82a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b82e:	f006 fb86 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b832:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    b836:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    b83a:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    b83e:	e00a      	b.n	b856 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6e6>
    b840:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    b844:	07c0      	lsls	r0, r0, #31
    b846:	2800      	cmp	r0, #0
    b848:	d112      	bne.n	b870 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x700>
    b84a:	e055      	b.n	b8f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x788>
    b84c:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    b84e:	07c1      	lsls	r1, r0, #31
    b850:	2900      	cmp	r1, #0
    b852:	d1e3      	bne.n	b81c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6ac>
    b854:	e7de      	b.n	b814 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6a4>
    b856:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    b85a:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    b85e:	f006 faf9 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b862:	90f4      	str	r0, [sp, #976]	; 0x3d0
    b864:	e7ff      	b.n	b866 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6f6>
    b866:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    b868:	07c1      	lsls	r1, r0, #31
    b86a:	2900      	cmp	r1, #0
    b86c:	d1ce      	bne.n	b80c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x69c>
    b86e:	e7d1      	b.n	b814 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6a4>
                trace!("[{:04x}] SYS nnn", self.pc);
    b870:	f240 2000 	movw	r0, #512	; 0x200
    b874:	f2c0 0002 	movt	r0, #2
    b878:	6801      	ldr	r1, [r0, #0]
    b87a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b87e:	f100 0212 	add.w	r2, r0, #18
    b882:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    b886:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    b88a:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    b88e:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    b892:	f2c0 0301 	movt	r3, #1
    b896:	4610      	mov	r0, r2
    b898:	91f3      	str	r1, [sp, #972]	; 0x3cc
    b89a:	4619      	mov	r1, r3
    b89c:	f7ff f820 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b8a0:	90f2      	str	r0, [sp, #968]	; 0x3c8
    b8a2:	91f1      	str	r1, [sp, #964]	; 0x3c4
    b8a4:	e7ff      	b.n	b8a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x736>
    b8a6:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    b8a8:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    b8ac:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    b8ae:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    b8b2:	f24f 4298 	movw	r2, #62616	; 0xf498
    b8b6:	f2c0 0201 	movt	r2, #1
    b8ba:	6812      	ldr	r2, [r2, #0]
    b8bc:	466b      	mov	r3, sp
    b8be:	f04f 0c01 	mov.w	ip, #1
    b8c2:	f8c3 c008 	str.w	ip, [r3, #8]
    b8c6:	605a      	str	r2, [r3, #4]
    b8c8:	f8c3 c000 	str.w	ip, [r3]
    b8cc:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    b8d0:	2202      	movs	r2, #2
    b8d2:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    b8d6:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    b8d8:	f006 faf8 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b8dc:	e7ff      	b.n	b8de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x76e>
    b8de:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    b8e2:	f240 2020 	movw	r0, #544	; 0x220
    b8e6:	f2c0 0002 	movt	r0, #2
    b8ea:	6802      	ldr	r2, [r0, #0]
    b8ec:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    b8f0:	f007 fbca 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b8f4:	e7ff      	b.n	b8f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x786>
    b8f6:	e7ff      	b.n	b8f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x788>
    b8f8:	f240 2024 	movw	r0, #548	; 0x224
    b8fc:	f2c0 0002 	movt	r0, #2
    b900:	f240 2234 	movw	r2, #564	; 0x234
    b904:	f2c0 0202 	movt	r2, #2
    b908:	210f      	movs	r1, #15
    b90a:	f00c fec7 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b90e:	defe      	udf	#254	; 0xfe
    b910:	2005      	movs	r0, #5
    b912:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    b916:	f24f 4050 	movw	r0, #62544	; 0xf450
    b91a:	f2c0 0001 	movt	r0, #1
    b91e:	6801      	ldr	r1, [r0, #0]
    b920:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    b924:	f006 fa96 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b928:	90f0      	str	r0, [sp, #960]	; 0x3c0
    b92a:	e01f      	b.n	b96c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7fc>
    b92c:	2001      	movs	r0, #1
    b92e:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    b932:	e015      	b.n	b960 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7f0>
    b934:	2000      	movs	r0, #0
    b936:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    b93a:	e011      	b.n	b960 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7f0>
    b93c:	2000      	movs	r0, #0
    b93e:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    b942:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    b946:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b94a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b94e:	f006 faf6 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b952:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    b956:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    b95a:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    b95e:	e00a      	b.n	b976 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x806>
    b960:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    b964:	07c0      	lsls	r0, r0, #31
    b966:	2800      	cmp	r0, #0
    b968:	d112      	bne.n	b990 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x820>
    b96a:	e055      	b.n	ba18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8a8>
    b96c:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    b96e:	07c1      	lsls	r1, r0, #31
    b970:	2900      	cmp	r1, #0
    b972:	d1e3      	bne.n	b93c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7cc>
    b974:	e7de      	b.n	b934 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7c4>
    b976:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    b97a:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    b97e:	f006 fa69 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b982:	90ef      	str	r0, [sp, #956]	; 0x3bc
    b984:	e7ff      	b.n	b986 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x816>
    b986:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    b988:	07c1      	lsls	r1, r0, #31
    b98a:	2900      	cmp	r1, #0
    b98c:	d1ce      	bne.n	b92c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7bc>
    b98e:	e7d1      	b.n	b934 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7c4>
                trace!("[{:04x}] JP nnn", self.pc);
    b990:	f240 10c0 	movw	r0, #448	; 0x1c0
    b994:	f2c0 0002 	movt	r0, #2
    b998:	6801      	ldr	r1, [r0, #0]
    b99a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b99e:	f100 0212 	add.w	r2, r0, #18
    b9a2:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    b9a6:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    b9aa:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    b9ae:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    b9b2:	f2c0 0301 	movt	r3, #1
    b9b6:	4610      	mov	r0, r2
    b9b8:	91ee      	str	r1, [sp, #952]	; 0x3b8
    b9ba:	4619      	mov	r1, r3
    b9bc:	f7fe ff90 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b9c0:	90ed      	str	r0, [sp, #948]	; 0x3b4
    b9c2:	91ec      	str	r1, [sp, #944]	; 0x3b0
    b9c4:	e7ff      	b.n	b9c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x856>
    b9c6:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    b9c8:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    b9cc:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    b9ce:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    b9d2:	f24f 4298 	movw	r2, #62616	; 0xf498
    b9d6:	f2c0 0201 	movt	r2, #1
    b9da:	6812      	ldr	r2, [r2, #0]
    b9dc:	466b      	mov	r3, sp
    b9de:	f04f 0c01 	mov.w	ip, #1
    b9e2:	f8c3 c008 	str.w	ip, [r3, #8]
    b9e6:	605a      	str	r2, [r3, #4]
    b9e8:	f8c3 c000 	str.w	ip, [r3]
    b9ec:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    b9f0:	2202      	movs	r2, #2
    b9f2:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    b9f6:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    b9f8:	f006 fa68 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b9fc:	e7ff      	b.n	b9fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x88e>
    b9fe:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    ba02:	f240 10e0 	movw	r0, #480	; 0x1e0
    ba06:	f2c0 0002 	movt	r0, #2
    ba0a:	6802      	ldr	r2, [r0, #0]
    ba0c:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    ba10:	f007 fb3a 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ba14:	e7ff      	b.n	ba16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8a6>
    ba16:	e7ff      	b.n	ba18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8a8>
    ba18:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    ba1a:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    ba1e:	f003 fcdf 	bl	f3e0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>
    ba22:	90eb      	str	r0, [sp, #940]	; 0x3ac
    ba24:	e7ff      	b.n	ba26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8b6>
    ba26:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba2a:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    ba2c:	f003 f95c 	bl	ece8 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    ba30:	e7ff      	b.n	ba32 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8c2>
        match (
    ba32:	f002 be6a 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    ba36:	2005      	movs	r0, #5
    ba38:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    ba3c:	f24f 4050 	movw	r0, #62544	; 0xf450
    ba40:	f2c0 0001 	movt	r0, #1
    ba44:	6801      	ldr	r1, [r0, #0]
    ba46:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    ba4a:	f006 fa03 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ba4e:	90ea      	str	r0, [sp, #936]	; 0x3a8
    ba50:	e01f      	b.n	ba92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x922>
    ba52:	2001      	movs	r0, #1
    ba54:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    ba58:	e015      	b.n	ba86 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x916>
    ba5a:	2000      	movs	r0, #0
    ba5c:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    ba60:	e011      	b.n	ba86 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x916>
    ba62:	2000      	movs	r0, #0
    ba64:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    ba68:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    ba6c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ba70:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ba74:	f006 fa63 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    ba78:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    ba7c:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    ba80:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    ba84:	e00a      	b.n	ba9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x92c>
    ba86:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    ba8a:	07c0      	lsls	r0, r0, #31
    ba8c:	2800      	cmp	r0, #0
    ba8e:	d112      	bne.n	bab6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x946>
    ba90:	e055      	b.n	bb3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9ce>
    ba92:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    ba94:	07c1      	lsls	r1, r0, #31
    ba96:	2900      	cmp	r1, #0
    ba98:	d1e3      	bne.n	ba62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8f2>
    ba9a:	e7de      	b.n	ba5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8ea>
    ba9c:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    baa0:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    baa4:	f006 f9d6 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    baa8:	90e9      	str	r0, [sp, #932]	; 0x3a4
    baaa:	e7ff      	b.n	baac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x93c>
    baac:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    baae:	07c1      	lsls	r1, r0, #31
    bab0:	2900      	cmp	r1, #0
    bab2:	d1ce      	bne.n	ba52 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8e2>
    bab4:	e7d1      	b.n	ba5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8ea>
                trace!("[{:04x}] CALL nnn", self.pc);
    bab6:	f240 108c 	movw	r0, #396	; 0x18c
    baba:	f2c0 0002 	movt	r0, #2
    babe:	6801      	ldr	r1, [r0, #0]
    bac0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bac4:	f100 0212 	add.w	r2, r0, #18
    bac8:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    bacc:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    bad0:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    bad4:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    bad8:	f2c0 0301 	movt	r3, #1
    badc:	4610      	mov	r0, r2
    bade:	91e8      	str	r1, [sp, #928]	; 0x3a0
    bae0:	4619      	mov	r1, r3
    bae2:	f7fe fefd 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bae6:	90e7      	str	r0, [sp, #924]	; 0x39c
    bae8:	91e6      	str	r1, [sp, #920]	; 0x398
    baea:	e7ff      	b.n	baec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x97c>
    baec:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    baee:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    baf2:	99e6      	ldr	r1, [sp, #920]	; 0x398
    baf4:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    baf8:	f24f 4298 	movw	r2, #62616	; 0xf498
    bafc:	f2c0 0201 	movt	r2, #1
    bb00:	6812      	ldr	r2, [r2, #0]
    bb02:	466b      	mov	r3, sp
    bb04:	f04f 0c01 	mov.w	ip, #1
    bb08:	f8c3 c008 	str.w	ip, [r3, #8]
    bb0c:	605a      	str	r2, [r3, #4]
    bb0e:	f8c3 c000 	str.w	ip, [r3]
    bb12:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    bb16:	2202      	movs	r2, #2
    bb18:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    bb1c:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    bb1e:	f006 f9d5 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bb22:	e7ff      	b.n	bb24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9b4>
    bb24:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    bb28:	f240 10ac 	movw	r0, #428	; 0x1ac
    bb2c:	f2c0 0002 	movt	r0, #2
    bb30:	6802      	ldr	r2, [r0, #0]
    bb32:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    bb36:	f007 faa7 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bb3a:	e7ff      	b.n	bb3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9cc>
    bb3c:	e7ff      	b.n	bb3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9ce>
                self.push(self.pc);
    bb3e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bb42:	8a41      	ldrh	r1, [r0, #18]
    bb44:	f003 f926 	bl	ed94 <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE>
    bb48:	e7ff      	b.n	bb4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9da>
    bb4a:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    bb4c:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    bb50:	f003 fc46 	bl	f3e0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>
    bb54:	90e5      	str	r0, [sp, #916]	; 0x394
    bb56:	e7ff      	b.n	bb58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9e8>
    bb58:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bb5c:	99e5      	ldr	r1, [sp, #916]	; 0x394
    bb5e:	f003 f8c3 	bl	ece8 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    bb62:	e7ff      	b.n	bb64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9f4>
        match (
    bb64:	f002 bdd1 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bb68:	2005      	movs	r0, #5
    bb6a:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    bb6e:	f24f 4050 	movw	r0, #62544	; 0xf450
    bb72:	f2c0 0001 	movt	r0, #1
    bb76:	6801      	ldr	r1, [r0, #0]
    bb78:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    bb7c:	f006 f96a 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bb80:	90e4      	str	r0, [sp, #912]	; 0x390
    bb82:	e01f      	b.n	bbc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa54>
    bb84:	2001      	movs	r0, #1
    bb86:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    bb8a:	e015      	b.n	bbb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa48>
    bb8c:	2000      	movs	r0, #0
    bb8e:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    bb92:	e011      	b.n	bbb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa48>
    bb94:	2000      	movs	r0, #0
    bb96:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    bb9a:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    bb9e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bba2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bba6:	f006 f9ca 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bbaa:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    bbae:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    bbb2:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    bbb6:	e00a      	b.n	bbce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa5e>
    bbb8:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    bbbc:	07c0      	lsls	r0, r0, #31
    bbbe:	2800      	cmp	r0, #0
    bbc0:	d112      	bne.n	bbe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa78>
    bbc2:	e055      	b.n	bc70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb00>
    bbc4:	98e4      	ldr	r0, [sp, #912]	; 0x390
    bbc6:	07c1      	lsls	r1, r0, #31
    bbc8:	2900      	cmp	r1, #0
    bbca:	d1e3      	bne.n	bb94 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa24>
    bbcc:	e7de      	b.n	bb8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa1c>
    bbce:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    bbd2:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    bbd6:	f006 f93d 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bbda:	90e3      	str	r0, [sp, #908]	; 0x38c
    bbdc:	e7ff      	b.n	bbde <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa6e>
    bbde:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    bbe0:	07c1      	lsls	r1, r0, #31
    bbe2:	2900      	cmp	r1, #0
    bbe4:	d1ce      	bne.n	bb84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa14>
    bbe6:	e7d1      	b.n	bb8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa1c>
                trace!("[{:04x}] SE Vx kk", self.pc);
    bbe8:	f240 103c 	movw	r0, #316	; 0x13c
    bbec:	f2c0 0002 	movt	r0, #2
    bbf0:	6801      	ldr	r1, [r0, #0]
    bbf2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bbf6:	f100 0212 	add.w	r2, r0, #18
    bbfa:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    bbfe:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    bc02:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    bc06:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    bc0a:	f2c0 0301 	movt	r3, #1
    bc0e:	4610      	mov	r0, r2
    bc10:	91e2      	str	r1, [sp, #904]	; 0x388
    bc12:	4619      	mov	r1, r3
    bc14:	f7fe fe64 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bc18:	90e1      	str	r0, [sp, #900]	; 0x384
    bc1a:	91e0      	str	r1, [sp, #896]	; 0x380
    bc1c:	e7ff      	b.n	bc1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xaae>
    bc1e:	98e1      	ldr	r0, [sp, #900]	; 0x384
    bc20:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    bc24:	99e0      	ldr	r1, [sp, #896]	; 0x380
    bc26:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    bc2a:	f24f 4298 	movw	r2, #62616	; 0xf498
    bc2e:	f2c0 0201 	movt	r2, #1
    bc32:	6812      	ldr	r2, [r2, #0]
    bc34:	466b      	mov	r3, sp
    bc36:	f04f 0c01 	mov.w	ip, #1
    bc3a:	f8c3 c008 	str.w	ip, [r3, #8]
    bc3e:	605a      	str	r2, [r3, #4]
    bc40:	f8c3 c000 	str.w	ip, [r3]
    bc44:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    bc48:	2202      	movs	r2, #2
    bc4a:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    bc4e:	99e2      	ldr	r1, [sp, #904]	; 0x388
    bc50:	f006 f93c 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bc54:	e7ff      	b.n	bc56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xae6>
    bc56:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    bc5a:	f240 105c 	movw	r0, #348	; 0x15c
    bc5e:	f2c0 0002 	movt	r0, #2
    bc62:	6802      	ldr	r2, [r0, #0]
    bc64:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    bc68:	f007 fa0e 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bc6c:	e7ff      	b.n	bc6e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xafe>
    bc6e:	e7ff      	b.n	bc70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb00>
                if self.v[x] == kk {
    bc70:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bc74:	280f      	cmp	r0, #15
    bc76:	f203 8011 	bhi.w	ec9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3b2c>
    bc7a:	e7ff      	b.n	bc7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb0c>
    bc7c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bc80:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bc84:	1842      	adds	r2, r0, r1
    bc86:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bc8a:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    bc8e:	fa5f fc83 	uxtb.w	ip, r3
    bc92:	4562      	cmp	r2, ip
    bc94:	d106      	bne.n	bca4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb34>
    bc96:	e7ff      	b.n	bc98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb28>
                    self.next();
    bc98:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bc9c:	f003 f867 	bl	ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    bca0:	e7ff      	b.n	bca2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb32>
                if self.v[x] == kk {
    bca2:	e7ff      	b.n	bca4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb34>
        match (
    bca4:	f002 bd31 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bca8:	2005      	movs	r0, #5
    bcaa:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    bcae:	f24f 4050 	movw	r0, #62544	; 0xf450
    bcb2:	f2c0 0001 	movt	r0, #1
    bcb6:	6801      	ldr	r1, [r0, #0]
    bcb8:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    bcbc:	f006 f8ca 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bcc0:	90df      	str	r0, [sp, #892]	; 0x37c
    bcc2:	e01f      	b.n	bd04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb94>
    bcc4:	2001      	movs	r0, #1
    bcc6:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    bcca:	e015      	b.n	bcf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb88>
    bccc:	2000      	movs	r0, #0
    bcce:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    bcd2:	e011      	b.n	bcf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb88>
    bcd4:	2000      	movs	r0, #0
    bcd6:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    bcda:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    bcde:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bce2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bce6:	f006 f92a 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bcea:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    bcee:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    bcf2:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    bcf6:	e00a      	b.n	bd0e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb9e>
    bcf8:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    bcfc:	07c0      	lsls	r0, r0, #31
    bcfe:	2800      	cmp	r0, #0
    bd00:	d112      	bne.n	bd28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xbb8>
    bd02:	e055      	b.n	bdb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc40>
    bd04:	98df      	ldr	r0, [sp, #892]	; 0x37c
    bd06:	07c1      	lsls	r1, r0, #31
    bd08:	2900      	cmp	r1, #0
    bd0a:	d1e3      	bne.n	bcd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb64>
    bd0c:	e7de      	b.n	bccc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb5c>
    bd0e:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    bd12:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    bd16:	f006 f89d 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bd1a:	90de      	str	r0, [sp, #888]	; 0x378
    bd1c:	e7ff      	b.n	bd1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xbae>
    bd1e:	98de      	ldr	r0, [sp, #888]	; 0x378
    bd20:	07c1      	lsls	r1, r0, #31
    bd22:	2900      	cmp	r1, #0
    bd24:	d1ce      	bne.n	bcc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb54>
    bd26:	e7d1      	b.n	bccc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb5c>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    bd28:	f240 00ec 	movw	r0, #236	; 0xec
    bd2c:	f2c0 0002 	movt	r0, #2
    bd30:	6801      	ldr	r1, [r0, #0]
    bd32:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bd36:	f100 0212 	add.w	r2, r0, #18
    bd3a:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    bd3e:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    bd42:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    bd46:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    bd4a:	f2c0 0301 	movt	r3, #1
    bd4e:	4610      	mov	r0, r2
    bd50:	91dd      	str	r1, [sp, #884]	; 0x374
    bd52:	4619      	mov	r1, r3
    bd54:	f7fe fdc4 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bd58:	90dc      	str	r0, [sp, #880]	; 0x370
    bd5a:	91db      	str	r1, [sp, #876]	; 0x36c
    bd5c:	e7ff      	b.n	bd5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xbee>
    bd5e:	98dc      	ldr	r0, [sp, #880]	; 0x370
    bd60:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    bd64:	99db      	ldr	r1, [sp, #876]	; 0x36c
    bd66:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    bd6a:	f24f 4298 	movw	r2, #62616	; 0xf498
    bd6e:	f2c0 0201 	movt	r2, #1
    bd72:	6812      	ldr	r2, [r2, #0]
    bd74:	466b      	mov	r3, sp
    bd76:	f04f 0c01 	mov.w	ip, #1
    bd7a:	f8c3 c008 	str.w	ip, [r3, #8]
    bd7e:	605a      	str	r2, [r3, #4]
    bd80:	f8c3 c000 	str.w	ip, [r3]
    bd84:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    bd88:	2202      	movs	r2, #2
    bd8a:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    bd8e:	99dd      	ldr	r1, [sp, #884]	; 0x374
    bd90:	f006 f89c 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bd94:	e7ff      	b.n	bd96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc26>
    bd96:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    bd9a:	f240 100c 	movw	r0, #268	; 0x10c
    bd9e:	f2c0 0002 	movt	r0, #2
    bda2:	6802      	ldr	r2, [r0, #0]
    bda4:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    bda8:	f007 f96e 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bdac:	e7ff      	b.n	bdae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc3e>
    bdae:	e7ff      	b.n	bdb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc40>
                if self.v[x] != kk {
    bdb0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bdb4:	280f      	cmp	r0, #15
    bdb6:	f202 8767 	bhi.w	ec88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3b18>
    bdba:	e7ff      	b.n	bdbc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc4c>
    bdbc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bdc0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bdc4:	1842      	adds	r2, r0, r1
    bdc6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bdca:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    bdce:	fa5f fc83 	uxtb.w	ip, r3
    bdd2:	4562      	cmp	r2, ip
    bdd4:	d006      	beq.n	bde4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc74>
    bdd6:	e7ff      	b.n	bdd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc68>
                    self.next();
    bdd8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bddc:	f002 ffc7 	bl	ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    bde0:	e7ff      	b.n	bde2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc72>
                if self.v[x] != kk {
    bde2:	e7ff      	b.n	bde4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc74>
        match (
    bde4:	f002 bc91 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bde8:	2005      	movs	r0, #5
    bdea:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    bdee:	f24f 4050 	movw	r0, #62544	; 0xf450
    bdf2:	f2c0 0001 	movt	r0, #1
    bdf6:	6801      	ldr	r1, [r0, #0]
    bdf8:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    bdfc:	f006 f82a 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    be00:	90da      	str	r0, [sp, #872]	; 0x368
    be02:	e01f      	b.n	be44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcd4>
    be04:	2001      	movs	r0, #1
    be06:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    be0a:	e015      	b.n	be38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcc8>
    be0c:	2000      	movs	r0, #0
    be0e:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    be12:	e011      	b.n	be38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcc8>
    be14:	2000      	movs	r0, #0
    be16:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    be1a:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    be1e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    be22:	f2c2 0000 	movt	r0, #8192	; 0x2000
    be26:	f006 f88a 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    be2a:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    be2e:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    be32:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    be36:	e00a      	b.n	be4e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcde>
    be38:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    be3c:	07c0      	lsls	r0, r0, #31
    be3e:	2800      	cmp	r0, #0
    be40:	d112      	bne.n	be68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcf8>
    be42:	e055      	b.n	bef0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd80>
    be44:	98da      	ldr	r0, [sp, #872]	; 0x368
    be46:	07c1      	lsls	r1, r0, #31
    be48:	2900      	cmp	r1, #0
    be4a:	d1e3      	bne.n	be14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xca4>
    be4c:	e7de      	b.n	be0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc9c>
    be4e:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    be52:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    be56:	f005 fffd 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    be5a:	90d9      	str	r0, [sp, #868]	; 0x364
    be5c:	e7ff      	b.n	be5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcee>
    be5e:	98d9      	ldr	r0, [sp, #868]	; 0x364
    be60:	07c1      	lsls	r1, r0, #31
    be62:	2900      	cmp	r1, #0
    be64:	d1ce      	bne.n	be04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc94>
    be66:	e7d1      	b.n	be0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc9c>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    be68:	f240 008c 	movw	r0, #140	; 0x8c
    be6c:	f2c0 0002 	movt	r0, #2
    be70:	6801      	ldr	r1, [r0, #0]
    be72:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    be76:	f100 0212 	add.w	r2, r0, #18
    be7a:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    be7e:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    be82:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    be86:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    be8a:	f2c0 0301 	movt	r3, #1
    be8e:	4610      	mov	r0, r2
    be90:	91d8      	str	r1, [sp, #864]	; 0x360
    be92:	4619      	mov	r1, r3
    be94:	f7fe fd24 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    be98:	90d7      	str	r0, [sp, #860]	; 0x35c
    be9a:	91d6      	str	r1, [sp, #856]	; 0x358
    be9c:	e7ff      	b.n	be9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd2e>
    be9e:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    bea0:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    bea4:	99d6      	ldr	r1, [sp, #856]	; 0x358
    bea6:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    beaa:	f24f 4298 	movw	r2, #62616	; 0xf498
    beae:	f2c0 0201 	movt	r2, #1
    beb2:	6812      	ldr	r2, [r2, #0]
    beb4:	466b      	mov	r3, sp
    beb6:	f04f 0c01 	mov.w	ip, #1
    beba:	f8c3 c008 	str.w	ip, [r3, #8]
    bebe:	605a      	str	r2, [r3, #4]
    bec0:	f8c3 c000 	str.w	ip, [r3]
    bec4:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    bec8:	2202      	movs	r2, #2
    beca:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    bece:	99d8      	ldr	r1, [sp, #864]	; 0x360
    bed0:	f005 fffc 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bed4:	e7ff      	b.n	bed6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd66>
    bed6:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    beda:	f240 00ac 	movw	r0, #172	; 0xac
    bede:	f2c0 0002 	movt	r0, #2
    bee2:	6802      	ldr	r2, [r0, #0]
    bee4:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    bee8:	f007 f8ce 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    beec:	e7ff      	b.n	beee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd7e>
    beee:	e7ff      	b.n	bef0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd80>
                if self.v[x] == self.v[y] {
    bef0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bef4:	280f      	cmp	r0, #15
    bef6:	f202 86b3 	bhi.w	ec60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3af0>
    befa:	e7ff      	b.n	befc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd8c>
    befc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf00:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bf04:	1842      	adds	r2, r0, r1
    bf06:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bf0a:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    bf0e:	2b0f      	cmp	r3, #15
    bf10:	92d5      	str	r2, [sp, #852]	; 0x354
    bf12:	f202 86af 	bhi.w	ec74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3b04>
    bf16:	e7ff      	b.n	bf18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xda8>
    bf18:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf1c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    bf20:	1842      	adds	r2, r0, r1
    bf22:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bf26:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    bf28:	fa5f fc83 	uxtb.w	ip, r3
    bf2c:	4594      	cmp	ip, r2
    bf2e:	d106      	bne.n	bf3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdce>
    bf30:	e7ff      	b.n	bf32 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdc2>
                    self.next();
    bf32:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf36:	f002 ff1a 	bl	ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    bf3a:	e7ff      	b.n	bf3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdcc>
                if self.v[x] == self.v[y] {
    bf3c:	e7ff      	b.n	bf3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdce>
        match (
    bf3e:	f002 bbe4 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bf42:	2005      	movs	r0, #5
    bf44:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    bf48:	f24f 4050 	movw	r0, #62544	; 0xf450
    bf4c:	f2c0 0001 	movt	r0, #1
    bf50:	6801      	ldr	r1, [r0, #0]
    bf52:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    bf56:	f005 ff7d 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bf5a:	90d4      	str	r0, [sp, #848]	; 0x350
    bf5c:	e01f      	b.n	bf9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe2e>
    bf5e:	2001      	movs	r0, #1
    bf60:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    bf64:	e015      	b.n	bf92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe22>
    bf66:	2000      	movs	r0, #0
    bf68:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    bf6c:	e011      	b.n	bf92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe22>
    bf6e:	2000      	movs	r0, #0
    bf70:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    bf74:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    bf78:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bf7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bf80:	f005 ffdd 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bf84:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    bf88:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    bf8c:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    bf90:	e00a      	b.n	bfa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe38>
    bf92:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    bf96:	07c0      	lsls	r0, r0, #31
    bf98:	2800      	cmp	r0, #0
    bf9a:	d112      	bne.n	bfc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe52>
    bf9c:	e055      	b.n	c04a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xeda>
    bf9e:	98d4      	ldr	r0, [sp, #848]	; 0x350
    bfa0:	07c1      	lsls	r1, r0, #31
    bfa2:	2900      	cmp	r1, #0
    bfa4:	d1e3      	bne.n	bf6e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdfe>
    bfa6:	e7de      	b.n	bf66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdf6>
    bfa8:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    bfac:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    bfb0:	f005 ff50 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bfb4:	90d3      	str	r0, [sp, #844]	; 0x34c
    bfb6:	e7ff      	b.n	bfb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe48>
    bfb8:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    bfba:	07c1      	lsls	r1, r0, #31
    bfbc:	2900      	cmp	r1, #0
    bfbe:	d1ce      	bne.n	bf5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdee>
    bfc0:	e7d1      	b.n	bf66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdf6>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    bfc2:	f64f 70a4 	movw	r0, #65444	; 0xffa4
    bfc6:	f2c0 0001 	movt	r0, #1
    bfca:	6801      	ldr	r1, [r0, #0]
    bfcc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bfd0:	f100 0212 	add.w	r2, r0, #18
    bfd4:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    bfd8:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    bfdc:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    bfe0:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    bfe4:	f2c0 0301 	movt	r3, #1
    bfe8:	4610      	mov	r0, r2
    bfea:	91d2      	str	r1, [sp, #840]	; 0x348
    bfec:	4619      	mov	r1, r3
    bfee:	f7fe fc77 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bff2:	90d1      	str	r0, [sp, #836]	; 0x344
    bff4:	91d0      	str	r1, [sp, #832]	; 0x340
    bff6:	e7ff      	b.n	bff8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe88>
    bff8:	98d1      	ldr	r0, [sp, #836]	; 0x344
    bffa:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    bffe:	99d0      	ldr	r1, [sp, #832]	; 0x340
    c000:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    c004:	f24f 4298 	movw	r2, #62616	; 0xf498
    c008:	f2c0 0201 	movt	r2, #1
    c00c:	6812      	ldr	r2, [r2, #0]
    c00e:	466b      	mov	r3, sp
    c010:	f04f 0c01 	mov.w	ip, #1
    c014:	f8c3 c008 	str.w	ip, [r3, #8]
    c018:	605a      	str	r2, [r3, #4]
    c01a:	f8c3 c000 	str.w	ip, [r3]
    c01e:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    c022:	2202      	movs	r2, #2
    c024:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    c028:	99d2      	ldr	r1, [sp, #840]	; 0x348
    c02a:	f005 ff4f 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c02e:	e7ff      	b.n	c030 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xec0>
    c030:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    c034:	f64f 70c4 	movw	r0, #65476	; 0xffc4
    c038:	f2c0 0001 	movt	r0, #1
    c03c:	6802      	ldr	r2, [r0, #0]
    c03e:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    c042:	f007 f821 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c046:	e7ff      	b.n	c048 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xed8>
    c048:	e7ff      	b.n	c04a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xeda>
                self.v[x] = kk;
    c04a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c04e:	280f      	cmp	r0, #15
    c050:	f202 85fc 	bhi.w	ec4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3adc>
    c054:	e7ff      	b.n	c056 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xee6>
    c056:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c05a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c05e:	1842      	adds	r2, r0, r1
    c060:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    c064:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c068:	f002 bb4f 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c06c:	2005      	movs	r0, #5
    c06e:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    c072:	f24f 4050 	movw	r0, #62544	; 0xf450
    c076:	f2c0 0001 	movt	r0, #1
    c07a:	6801      	ldr	r1, [r0, #0]
    c07c:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    c080:	f005 fee8 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c084:	90cf      	str	r0, [sp, #828]	; 0x33c
    c086:	e01f      	b.n	c0c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf58>
    c088:	2001      	movs	r0, #1
    c08a:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    c08e:	e015      	b.n	c0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf4c>
    c090:	2000      	movs	r0, #0
    c092:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    c096:	e011      	b.n	c0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf4c>
    c098:	2000      	movs	r0, #0
    c09a:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    c09e:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    c0a2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c0a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c0aa:	f005 ff48 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c0ae:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    c0b2:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    c0b6:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    c0ba:	e00a      	b.n	c0d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf62>
    c0bc:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    c0c0:	07c0      	lsls	r0, r0, #31
    c0c2:	2800      	cmp	r0, #0
    c0c4:	d112      	bne.n	c0ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf7c>
    c0c6:	e055      	b.n	c174 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1004>
    c0c8:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    c0ca:	07c1      	lsls	r1, r0, #31
    c0cc:	2900      	cmp	r1, #0
    c0ce:	d1e3      	bne.n	c098 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf28>
    c0d0:	e7de      	b.n	c090 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf20>
    c0d2:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    c0d6:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    c0da:	f005 febb 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c0de:	90ce      	str	r0, [sp, #824]	; 0x338
    c0e0:	e7ff      	b.n	c0e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf72>
    c0e2:	98ce      	ldr	r0, [sp, #824]	; 0x338
    c0e4:	07c1      	lsls	r1, r0, #31
    c0e6:	2900      	cmp	r1, #0
    c0e8:	d1ce      	bne.n	c088 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf18>
    c0ea:	e7d1      	b.n	c090 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf20>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    c0ec:	f64f 7044 	movw	r0, #65348	; 0xff44
    c0f0:	f2c0 0001 	movt	r0, #1
    c0f4:	6801      	ldr	r1, [r0, #0]
    c0f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c0fa:	f100 0212 	add.w	r2, r0, #18
    c0fe:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    c102:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    c106:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    c10a:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    c10e:	f2c0 0301 	movt	r3, #1
    c112:	4610      	mov	r0, r2
    c114:	91cd      	str	r1, [sp, #820]	; 0x334
    c116:	4619      	mov	r1, r3
    c118:	f7fe fbe2 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c11c:	90cc      	str	r0, [sp, #816]	; 0x330
    c11e:	91cb      	str	r1, [sp, #812]	; 0x32c
    c120:	e7ff      	b.n	c122 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xfb2>
    c122:	98cc      	ldr	r0, [sp, #816]	; 0x330
    c124:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    c128:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    c12a:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    c12e:	f24f 4298 	movw	r2, #62616	; 0xf498
    c132:	f2c0 0201 	movt	r2, #1
    c136:	6812      	ldr	r2, [r2, #0]
    c138:	466b      	mov	r3, sp
    c13a:	f04f 0c01 	mov.w	ip, #1
    c13e:	f8c3 c008 	str.w	ip, [r3, #8]
    c142:	605a      	str	r2, [r3, #4]
    c144:	f8c3 c000 	str.w	ip, [r3]
    c148:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    c14c:	2202      	movs	r2, #2
    c14e:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    c152:	99cd      	ldr	r1, [sp, #820]	; 0x334
    c154:	f005 feba 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c158:	e7ff      	b.n	c15a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xfea>
    c15a:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    c15e:	f64f 7064 	movw	r0, #65380	; 0xff64
    c162:	f2c0 0001 	movt	r0, #1
    c166:	6802      	ldr	r2, [r0, #0]
    c168:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    c16c:	f006 ff8c 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c170:	e7ff      	b.n	c172 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1002>
    c172:	e7ff      	b.n	c174 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1004>
                self.v[x] = self.v[x].wrapping_add(kk);
    c174:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c178:	280f      	cmp	r0, #15
    c17a:	f202 8553 	bhi.w	ec24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ab4>
    c17e:	e7ff      	b.n	c180 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1010>
    c180:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c184:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c188:	1842      	adds	r2, r0, r1
    c18a:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    c18e:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    c192:	f003 f877 	bl	f284 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE>
    c196:	90ca      	str	r0, [sp, #808]	; 0x328
    c198:	e7ff      	b.n	c19a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x102a>
    c19a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c19e:	280f      	cmp	r0, #15
    c1a0:	f202 854a 	bhi.w	ec38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ac8>
    c1a4:	e7ff      	b.n	c1a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1036>
    c1a6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c1aa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c1ae:	1842      	adds	r2, r0, r1
    c1b0:	9bca      	ldr	r3, [sp, #808]	; 0x328
    c1b2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c1b6:	f002 baa8 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c1ba:	2005      	movs	r0, #5
    c1bc:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    c1c0:	f24f 4050 	movw	r0, #62544	; 0xf450
    c1c4:	f2c0 0001 	movt	r0, #1
    c1c8:	6801      	ldr	r1, [r0, #0]
    c1ca:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    c1ce:	f005 fe41 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c1d2:	90c9      	str	r0, [sp, #804]	; 0x324
    c1d4:	e01f      	b.n	c216 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10a6>
    c1d6:	2001      	movs	r0, #1
    c1d8:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    c1dc:	e015      	b.n	c20a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x109a>
    c1de:	2000      	movs	r0, #0
    c1e0:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    c1e4:	e011      	b.n	c20a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x109a>
    c1e6:	2000      	movs	r0, #0
    c1e8:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    c1ec:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    c1f0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c1f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c1f8:	f005 fea1 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c1fc:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    c200:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    c204:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    c208:	e00a      	b.n	c220 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10b0>
    c20a:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    c20e:	07c0      	lsls	r0, r0, #31
    c210:	2800      	cmp	r0, #0
    c212:	d112      	bne.n	c23a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10ca>
    c214:	e055      	b.n	c2c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1152>
    c216:	98c9      	ldr	r0, [sp, #804]	; 0x324
    c218:	07c1      	lsls	r1, r0, #31
    c21a:	2900      	cmp	r1, #0
    c21c:	d1e3      	bne.n	c1e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1076>
    c21e:	e7de      	b.n	c1de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x106e>
    c220:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    c224:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    c228:	f005 fe14 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c22c:	90c8      	str	r0, [sp, #800]	; 0x320
    c22e:	e7ff      	b.n	c230 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10c0>
    c230:	98c8      	ldr	r0, [sp, #800]	; 0x320
    c232:	07c1      	lsls	r1, r0, #31
    c234:	2900      	cmp	r1, #0
    c236:	d1ce      	bne.n	c1d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1066>
    c238:	e7d1      	b.n	c1de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x106e>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    c23a:	f64f 60e4 	movw	r0, #65252	; 0xfee4
    c23e:	f2c0 0001 	movt	r0, #1
    c242:	6801      	ldr	r1, [r0, #0]
    c244:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c248:	f100 0212 	add.w	r2, r0, #18
    c24c:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    c250:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    c254:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    c258:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    c25c:	f2c0 0301 	movt	r3, #1
    c260:	4610      	mov	r0, r2
    c262:	91c7      	str	r1, [sp, #796]	; 0x31c
    c264:	4619      	mov	r1, r3
    c266:	f7fe fb3b 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c26a:	90c6      	str	r0, [sp, #792]	; 0x318
    c26c:	91c5      	str	r1, [sp, #788]	; 0x314
    c26e:	e7ff      	b.n	c270 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1100>
    c270:	98c6      	ldr	r0, [sp, #792]	; 0x318
    c272:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    c276:	99c5      	ldr	r1, [sp, #788]	; 0x314
    c278:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    c27c:	f24f 4298 	movw	r2, #62616	; 0xf498
    c280:	f2c0 0201 	movt	r2, #1
    c284:	6812      	ldr	r2, [r2, #0]
    c286:	466b      	mov	r3, sp
    c288:	f04f 0c01 	mov.w	ip, #1
    c28c:	f8c3 c008 	str.w	ip, [r3, #8]
    c290:	605a      	str	r2, [r3, #4]
    c292:	f8c3 c000 	str.w	ip, [r3]
    c296:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    c29a:	2202      	movs	r2, #2
    c29c:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    c2a0:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    c2a2:	f005 fe13 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c2a6:	e7ff      	b.n	c2a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1138>
    c2a8:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    c2ac:	f64f 7004 	movw	r0, #65284	; 0xff04
    c2b0:	f2c0 0001 	movt	r0, #1
    c2b4:	6802      	ldr	r2, [r0, #0]
    c2b6:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    c2ba:	f006 fee5 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c2be:	e7ff      	b.n	c2c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1150>
    c2c0:	e7ff      	b.n	c2c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1152>
                self.v[x] = self.v[y];
    c2c2:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c2c6:	280f      	cmp	r0, #15
    c2c8:	f202 8498 	bhi.w	ebfc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a8c>
    c2cc:	e7ff      	b.n	c2ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x115e>
    c2ce:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c2d2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c2d6:	1842      	adds	r2, r0, r1
    c2d8:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c2dc:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c2e0:	2b0f      	cmp	r3, #15
    c2e2:	92c4      	str	r2, [sp, #784]	; 0x310
    c2e4:	f202 8494 	bhi.w	ec10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3aa0>
    c2e8:	e7ff      	b.n	c2ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x117a>
    c2ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c2ee:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c2f2:	1842      	adds	r2, r0, r1
    c2f4:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    c2f6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c2fa:	f002 ba06 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c2fe:	2005      	movs	r0, #5
    c300:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    c304:	f24f 4050 	movw	r0, #62544	; 0xf450
    c308:	f2c0 0001 	movt	r0, #1
    c30c:	6801      	ldr	r1, [r0, #0]
    c30e:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    c312:	f005 fd9f 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c316:	90c3      	str	r0, [sp, #780]	; 0x30c
    c318:	e01f      	b.n	c35a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11ea>
    c31a:	2001      	movs	r0, #1
    c31c:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    c320:	e015      	b.n	c34e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11de>
    c322:	2000      	movs	r0, #0
    c324:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    c328:	e011      	b.n	c34e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11de>
    c32a:	2000      	movs	r0, #0
    c32c:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    c330:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    c334:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c338:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c33c:	f005 fdff 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c340:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    c344:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    c348:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    c34c:	e00a      	b.n	c364 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11f4>
    c34e:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    c352:	07c0      	lsls	r0, r0, #31
    c354:	2800      	cmp	r0, #0
    c356:	d112      	bne.n	c37e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x120e>
    c358:	e055      	b.n	c406 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1296>
    c35a:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    c35c:	07c1      	lsls	r1, r0, #31
    c35e:	2900      	cmp	r1, #0
    c360:	d1e3      	bne.n	c32a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11ba>
    c362:	e7de      	b.n	c322 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11b2>
    c364:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    c368:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    c36c:	f005 fd72 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c370:	90c2      	str	r0, [sp, #776]	; 0x308
    c372:	e7ff      	b.n	c374 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1204>
    c374:	98c2      	ldr	r0, [sp, #776]	; 0x308
    c376:	07c1      	lsls	r1, r0, #31
    c378:	2900      	cmp	r1, #0
    c37a:	d1ce      	bne.n	c31a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11aa>
    c37c:	e7d1      	b.n	c322 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11b2>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    c37e:	f64f 6084 	movw	r0, #65156	; 0xfe84
    c382:	f2c0 0001 	movt	r0, #1
    c386:	6801      	ldr	r1, [r0, #0]
    c388:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c38c:	f100 0212 	add.w	r2, r0, #18
    c390:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    c394:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    c398:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    c39c:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    c3a0:	f2c0 0301 	movt	r3, #1
    c3a4:	4610      	mov	r0, r2
    c3a6:	91c1      	str	r1, [sp, #772]	; 0x304
    c3a8:	4619      	mov	r1, r3
    c3aa:	f7fe fa99 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c3ae:	90c0      	str	r0, [sp, #768]	; 0x300
    c3b0:	91bf      	str	r1, [sp, #764]	; 0x2fc
    c3b2:	e7ff      	b.n	c3b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1244>
    c3b4:	98c0      	ldr	r0, [sp, #768]	; 0x300
    c3b6:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    c3ba:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    c3bc:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    c3c0:	f24f 4298 	movw	r2, #62616	; 0xf498
    c3c4:	f2c0 0201 	movt	r2, #1
    c3c8:	6812      	ldr	r2, [r2, #0]
    c3ca:	466b      	mov	r3, sp
    c3cc:	f04f 0c01 	mov.w	ip, #1
    c3d0:	f8c3 c008 	str.w	ip, [r3, #8]
    c3d4:	605a      	str	r2, [r3, #4]
    c3d6:	f8c3 c000 	str.w	ip, [r3]
    c3da:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    c3de:	2202      	movs	r2, #2
    c3e0:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    c3e4:	99c1      	ldr	r1, [sp, #772]	; 0x304
    c3e6:	f005 fd71 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c3ea:	e7ff      	b.n	c3ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x127c>
    c3ec:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    c3f0:	f64f 60a4 	movw	r0, #65188	; 0xfea4
    c3f4:	f2c0 0001 	movt	r0, #1
    c3f8:	6802      	ldr	r2, [r0, #0]
    c3fa:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    c3fe:	f006 fe43 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c402:	e7ff      	b.n	c404 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1294>
    c404:	e7ff      	b.n	c406 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1296>
                self.v[x] |= self.v[y];
    c406:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c40a:	280f      	cmp	r0, #15
    c40c:	f202 83e2 	bhi.w	ebd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a64>
    c410:	e7ff      	b.n	c412 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12a2>
    c412:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c416:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c41a:	1842      	adds	r2, r0, r1
    c41c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c420:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c424:	2b0f      	cmp	r3, #15
    c426:	92be      	str	r2, [sp, #760]	; 0x2f8
    c428:	f202 83de 	bhi.w	ebe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a78>
    c42c:	e7ff      	b.n	c42e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12be>
    c42e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c432:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c436:	1842      	adds	r2, r0, r1
    c438:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    c43c:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    c440:	ea43 030c 	orr.w	r3, r3, ip
    c444:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c448:	f002 b95f 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c44c:	2005      	movs	r0, #5
    c44e:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    c452:	f24f 4050 	movw	r0, #62544	; 0xf450
    c456:	f2c0 0001 	movt	r0, #1
    c45a:	6801      	ldr	r1, [r0, #0]
    c45c:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    c460:	f005 fcf8 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c464:	90bd      	str	r0, [sp, #756]	; 0x2f4
    c466:	e01f      	b.n	c4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1338>
    c468:	2001      	movs	r0, #1
    c46a:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    c46e:	e015      	b.n	c49c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x132c>
    c470:	2000      	movs	r0, #0
    c472:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    c476:	e011      	b.n	c49c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x132c>
    c478:	2000      	movs	r0, #0
    c47a:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    c47e:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    c482:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c486:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c48a:	f005 fd58 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c48e:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    c492:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    c496:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    c49a:	e00a      	b.n	c4b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1342>
    c49c:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    c4a0:	07c0      	lsls	r0, r0, #31
    c4a2:	2800      	cmp	r0, #0
    c4a4:	d112      	bne.n	c4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x135c>
    c4a6:	e055      	b.n	c554 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13e4>
    c4a8:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    c4aa:	07c1      	lsls	r1, r0, #31
    c4ac:	2900      	cmp	r1, #0
    c4ae:	d1e3      	bne.n	c478 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1308>
    c4b0:	e7de      	b.n	c470 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1300>
    c4b2:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    c4b6:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    c4ba:	f005 fccb 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c4be:	90bc      	str	r0, [sp, #752]	; 0x2f0
    c4c0:	e7ff      	b.n	c4c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1352>
    c4c2:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    c4c4:	07c1      	lsls	r1, r0, #31
    c4c6:	2900      	cmp	r1, #0
    c4c8:	d1ce      	bne.n	c468 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12f8>
    c4ca:	e7d1      	b.n	c470 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1300>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    c4cc:	f64f 6024 	movw	r0, #65060	; 0xfe24
    c4d0:	f2c0 0001 	movt	r0, #1
    c4d4:	6801      	ldr	r1, [r0, #0]
    c4d6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c4da:	f100 0212 	add.w	r2, r0, #18
    c4de:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    c4e2:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    c4e6:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    c4ea:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    c4ee:	f2c0 0301 	movt	r3, #1
    c4f2:	4610      	mov	r0, r2
    c4f4:	91bb      	str	r1, [sp, #748]	; 0x2ec
    c4f6:	4619      	mov	r1, r3
    c4f8:	f7fe f9f2 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c4fc:	90ba      	str	r0, [sp, #744]	; 0x2e8
    c4fe:	91b9      	str	r1, [sp, #740]	; 0x2e4
    c500:	e7ff      	b.n	c502 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1392>
    c502:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    c504:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    c508:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    c50a:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    c50e:	f24f 4298 	movw	r2, #62616	; 0xf498
    c512:	f2c0 0201 	movt	r2, #1
    c516:	6812      	ldr	r2, [r2, #0]
    c518:	466b      	mov	r3, sp
    c51a:	f04f 0c01 	mov.w	ip, #1
    c51e:	f8c3 c008 	str.w	ip, [r3, #8]
    c522:	605a      	str	r2, [r3, #4]
    c524:	f8c3 c000 	str.w	ip, [r3]
    c528:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    c52c:	2202      	movs	r2, #2
    c52e:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    c532:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    c534:	f005 fcca 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c538:	e7ff      	b.n	c53a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13ca>
    c53a:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    c53e:	f64f 6044 	movw	r0, #65092	; 0xfe44
    c542:	f2c0 0001 	movt	r0, #1
    c546:	6802      	ldr	r2, [r0, #0]
    c548:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    c54c:	f006 fd9c 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c550:	e7ff      	b.n	c552 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13e2>
    c552:	e7ff      	b.n	c554 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13e4>
                self.v[x] &= self.v[y];
    c554:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c558:	280f      	cmp	r0, #15
    c55a:	f202 8327 	bhi.w	ebac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a3c>
    c55e:	e7ff      	b.n	c560 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13f0>
    c560:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c564:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c568:	1842      	adds	r2, r0, r1
    c56a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c56e:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c572:	2b0f      	cmp	r3, #15
    c574:	92b8      	str	r2, [sp, #736]	; 0x2e0
    c576:	f202 8323 	bhi.w	ebc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a50>
    c57a:	e7ff      	b.n	c57c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x140c>
    c57c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c580:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c584:	1842      	adds	r2, r0, r1
    c586:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    c58a:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    c58e:	ea03 030c 	and.w	r3, r3, ip
    c592:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c596:	f002 b8b8 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c59a:	2005      	movs	r0, #5
    c59c:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    c5a0:	f24f 4050 	movw	r0, #62544	; 0xf450
    c5a4:	f2c0 0001 	movt	r0, #1
    c5a8:	6801      	ldr	r1, [r0, #0]
    c5aa:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    c5ae:	f005 fc51 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c5b2:	90b7      	str	r0, [sp, #732]	; 0x2dc
    c5b4:	e01f      	b.n	c5f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1486>
    c5b6:	2001      	movs	r0, #1
    c5b8:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    c5bc:	e015      	b.n	c5ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x147a>
    c5be:	2000      	movs	r0, #0
    c5c0:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    c5c4:	e011      	b.n	c5ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x147a>
    c5c6:	2000      	movs	r0, #0
    c5c8:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    c5cc:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    c5d0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c5d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c5d8:	f005 fcb1 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c5dc:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    c5e0:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    c5e4:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    c5e8:	e00a      	b.n	c600 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1490>
    c5ea:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    c5ee:	07c0      	lsls	r0, r0, #31
    c5f0:	2800      	cmp	r0, #0
    c5f2:	d112      	bne.n	c61a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x14aa>
    c5f4:	e055      	b.n	c6a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1532>
    c5f6:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    c5f8:	07c1      	lsls	r1, r0, #31
    c5fa:	2900      	cmp	r1, #0
    c5fc:	d1e3      	bne.n	c5c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1456>
    c5fe:	e7de      	b.n	c5be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x144e>
    c600:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    c604:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    c608:	f005 fc24 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c60c:	90b6      	str	r0, [sp, #728]	; 0x2d8
    c60e:	e7ff      	b.n	c610 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x14a0>
    c610:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    c612:	07c1      	lsls	r1, r0, #31
    c614:	2900      	cmp	r1, #0
    c616:	d1ce      	bne.n	c5b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1446>
    c618:	e7d1      	b.n	c5be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x144e>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    c61a:	f64f 50c4 	movw	r0, #64964	; 0xfdc4
    c61e:	f2c0 0001 	movt	r0, #1
    c622:	6801      	ldr	r1, [r0, #0]
    c624:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c628:	f100 0212 	add.w	r2, r0, #18
    c62c:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    c630:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    c634:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    c638:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    c63c:	f2c0 0301 	movt	r3, #1
    c640:	4610      	mov	r0, r2
    c642:	91b5      	str	r1, [sp, #724]	; 0x2d4
    c644:	4619      	mov	r1, r3
    c646:	f7fe f94b 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c64a:	90b4      	str	r0, [sp, #720]	; 0x2d0
    c64c:	91b3      	str	r1, [sp, #716]	; 0x2cc
    c64e:	e7ff      	b.n	c650 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x14e0>
    c650:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    c652:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    c656:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    c658:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    c65c:	f24f 4298 	movw	r2, #62616	; 0xf498
    c660:	f2c0 0201 	movt	r2, #1
    c664:	6812      	ldr	r2, [r2, #0]
    c666:	466b      	mov	r3, sp
    c668:	f04f 0c01 	mov.w	ip, #1
    c66c:	f8c3 c008 	str.w	ip, [r3, #8]
    c670:	605a      	str	r2, [r3, #4]
    c672:	f8c3 c000 	str.w	ip, [r3]
    c676:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    c67a:	2202      	movs	r2, #2
    c67c:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    c680:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    c682:	f005 fc23 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c686:	e7ff      	b.n	c688 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1518>
    c688:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    c68c:	f64f 50e4 	movw	r0, #64996	; 0xfde4
    c690:	f2c0 0001 	movt	r0, #1
    c694:	6802      	ldr	r2, [r0, #0]
    c696:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    c69a:	f006 fcf5 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c69e:	e7ff      	b.n	c6a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1530>
    c6a0:	e7ff      	b.n	c6a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1532>
                self.v[x] ^= self.v[y];
    c6a2:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c6a6:	280f      	cmp	r0, #15
    c6a8:	f202 826c 	bhi.w	eb84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a14>
    c6ac:	e7ff      	b.n	c6ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x153e>
    c6ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c6b2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c6b6:	1842      	adds	r2, r0, r1
    c6b8:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c6bc:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c6c0:	2b0f      	cmp	r3, #15
    c6c2:	92b2      	str	r2, [sp, #712]	; 0x2c8
    c6c4:	f202 8268 	bhi.w	eb98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a28>
    c6c8:	e7ff      	b.n	c6ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x155a>
    c6ca:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c6ce:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c6d2:	1842      	adds	r2, r0, r1
    c6d4:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    c6d8:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    c6dc:	ea83 030c 	eor.w	r3, r3, ip
    c6e0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c6e4:	f002 b811 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c6e8:	2005      	movs	r0, #5
    c6ea:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    c6ee:	f24f 4050 	movw	r0, #62544	; 0xf450
    c6f2:	f2c0 0001 	movt	r0, #1
    c6f6:	6801      	ldr	r1, [r0, #0]
    c6f8:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    c6fc:	f005 fbaa 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c700:	90b1      	str	r0, [sp, #708]	; 0x2c4
    c702:	e01f      	b.n	c744 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15d4>
    c704:	2001      	movs	r0, #1
    c706:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    c70a:	e015      	b.n	c738 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15c8>
    c70c:	2000      	movs	r0, #0
    c70e:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    c712:	e011      	b.n	c738 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15c8>
    c714:	2000      	movs	r0, #0
    c716:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    c71a:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    c71e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c722:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c726:	f005 fc0a 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c72a:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    c72e:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    c732:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    c736:	e00a      	b.n	c74e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15de>
    c738:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    c73c:	07c0      	lsls	r0, r0, #31
    c73e:	2800      	cmp	r0, #0
    c740:	d112      	bne.n	c768 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15f8>
    c742:	e055      	b.n	c7f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1680>
    c744:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    c746:	07c1      	lsls	r1, r0, #31
    c748:	2900      	cmp	r1, #0
    c74a:	d1e3      	bne.n	c714 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15a4>
    c74c:	e7de      	b.n	c70c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x159c>
    c74e:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    c752:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    c756:	f005 fb7d 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c75a:	90b0      	str	r0, [sp, #704]	; 0x2c0
    c75c:	e7ff      	b.n	c75e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15ee>
    c75e:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    c760:	07c1      	lsls	r1, r0, #31
    c762:	2900      	cmp	r1, #0
    c764:	d1ce      	bne.n	c704 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1594>
    c766:	e7d1      	b.n	c70c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x159c>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    c768:	f64f 5054 	movw	r0, #64852	; 0xfd54
    c76c:	f2c0 0001 	movt	r0, #1
    c770:	6801      	ldr	r1, [r0, #0]
    c772:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c776:	f100 0212 	add.w	r2, r0, #18
    c77a:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    c77e:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    c782:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    c786:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    c78a:	f2c0 0301 	movt	r3, #1
    c78e:	4610      	mov	r0, r2
    c790:	91af      	str	r1, [sp, #700]	; 0x2bc
    c792:	4619      	mov	r1, r3
    c794:	f7fe f8a4 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c798:	90ae      	str	r0, [sp, #696]	; 0x2b8
    c79a:	91ad      	str	r1, [sp, #692]	; 0x2b4
    c79c:	e7ff      	b.n	c79e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x162e>
    c79e:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    c7a0:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    c7a4:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    c7a6:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    c7aa:	f24f 4298 	movw	r2, #62616	; 0xf498
    c7ae:	f2c0 0201 	movt	r2, #1
    c7b2:	6812      	ldr	r2, [r2, #0]
    c7b4:	466b      	mov	r3, sp
    c7b6:	f04f 0c01 	mov.w	ip, #1
    c7ba:	f8c3 c008 	str.w	ip, [r3, #8]
    c7be:	605a      	str	r2, [r3, #4]
    c7c0:	f8c3 c000 	str.w	ip, [r3]
    c7c4:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    c7c8:	2202      	movs	r2, #2
    c7ca:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    c7ce:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    c7d0:	f005 fb7c 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c7d4:	e7ff      	b.n	c7d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1666>
    c7d6:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    c7da:	f64f 5074 	movw	r0, #64884	; 0xfd74
    c7de:	f2c0 0001 	movt	r0, #1
    c7e2:	6802      	ldr	r2, [r0, #0]
    c7e4:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    c7e8:	f006 fc4e 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c7ec:	e7ff      	b.n	c7ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x167e>
    c7ee:	e7ff      	b.n	c7f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1680>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    c7f0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c7f4:	280f      	cmp	r0, #15
    c7f6:	f202 81a7 	bhi.w	eb48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39d8>
    c7fa:	e7ff      	b.n	c7fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x168c>
    c7fc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c800:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c804:	1842      	adds	r2, r0, r1
    c806:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c80a:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    c80e:	2b0f      	cmp	r3, #15
    c810:	92ac      	str	r2, [sp, #688]	; 0x2b0
    c812:	f202 81a3 	bhi.w	eb5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39ec>
    c816:	e7ff      	b.n	c818 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x16a8>
    c818:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c81c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c820:	1842      	adds	r2, r0, r1
    c822:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c826:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    c828:	f002 fd72 	bl	f310 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E>
    c82c:	90ab      	str	r0, [sp, #684]	; 0x2ac
    c82e:	91aa      	str	r1, [sp, #680]	; 0x2a8
    c830:	e7ff      	b.n	c832 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x16c2>
    c832:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    c834:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    c838:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    c83a:	f001 0201 	and.w	r2, r1, #1
    c83e:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    c842:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c846:	2a0f      	cmp	r2, #15
    c848:	f202 8192 	bhi.w	eb70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a00>
    c84c:	e7ff      	b.n	c84e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x16de>
    c84e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c852:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c856:	1842      	adds	r2, r0, r1
    c858:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    c85a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    c85e:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    c860:	f002 0c01 	and.w	ip, r2, #1
    c864:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    c868:	f001 bf4f 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c86c:	2005      	movs	r0, #5
    c86e:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    c872:	f24f 4050 	movw	r0, #62544	; 0xf450
    c876:	f2c0 0001 	movt	r0, #1
    c87a:	6801      	ldr	r1, [r0, #0]
    c87c:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    c880:	f005 fae8 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c884:	90a9      	str	r0, [sp, #676]	; 0x2a4
    c886:	e01f      	b.n	c8c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1758>
    c888:	2001      	movs	r0, #1
    c88a:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    c88e:	e015      	b.n	c8bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x174c>
    c890:	2000      	movs	r0, #0
    c892:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    c896:	e011      	b.n	c8bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x174c>
    c898:	2000      	movs	r0, #0
    c89a:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    c89e:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    c8a2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c8a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c8aa:	f005 fb48 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c8ae:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    c8b2:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    c8b6:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    c8ba:	e00a      	b.n	c8d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1762>
    c8bc:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    c8c0:	07c0      	lsls	r0, r0, #31
    c8c2:	2800      	cmp	r0, #0
    c8c4:	d112      	bne.n	c8ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x177c>
    c8c6:	e055      	b.n	c974 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1804>
    c8c8:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    c8ca:	07c1      	lsls	r1, r0, #31
    c8cc:	2900      	cmp	r1, #0
    c8ce:	d1e3      	bne.n	c898 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1728>
    c8d0:	e7de      	b.n	c890 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1720>
    c8d2:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    c8d6:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    c8da:	f005 fabb 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c8de:	90a8      	str	r0, [sp, #672]	; 0x2a0
    c8e0:	e7ff      	b.n	c8e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1772>
    c8e2:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    c8e4:	07c1      	lsls	r1, r0, #31
    c8e6:	2900      	cmp	r1, #0
    c8e8:	d1ce      	bne.n	c888 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1718>
    c8ea:	e7d1      	b.n	c890 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1720>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    c8ec:	f64f 40e4 	movw	r0, #64740	; 0xfce4
    c8f0:	f2c0 0001 	movt	r0, #1
    c8f4:	6801      	ldr	r1, [r0, #0]
    c8f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c8fa:	f100 0212 	add.w	r2, r0, #18
    c8fe:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    c902:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    c906:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    c90a:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    c90e:	f2c0 0301 	movt	r3, #1
    c912:	4610      	mov	r0, r2
    c914:	91a7      	str	r1, [sp, #668]	; 0x29c
    c916:	4619      	mov	r1, r3
    c918:	f7fd ffe2 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c91c:	90a6      	str	r0, [sp, #664]	; 0x298
    c91e:	91a5      	str	r1, [sp, #660]	; 0x294
    c920:	e7ff      	b.n	c922 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x17b2>
    c922:	98a6      	ldr	r0, [sp, #664]	; 0x298
    c924:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    c928:	99a5      	ldr	r1, [sp, #660]	; 0x294
    c92a:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    c92e:	f24f 4298 	movw	r2, #62616	; 0xf498
    c932:	f2c0 0201 	movt	r2, #1
    c936:	6812      	ldr	r2, [r2, #0]
    c938:	466b      	mov	r3, sp
    c93a:	f04f 0c01 	mov.w	ip, #1
    c93e:	f8c3 c008 	str.w	ip, [r3, #8]
    c942:	605a      	str	r2, [r3, #4]
    c944:	f8c3 c000 	str.w	ip, [r3]
    c948:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    c94c:	2202      	movs	r2, #2
    c94e:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    c952:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    c954:	f005 faba 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c958:	e7ff      	b.n	c95a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x17ea>
    c95a:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    c95e:	f64f 5004 	movw	r0, #64772	; 0xfd04
    c962:	f2c0 0001 	movt	r0, #1
    c966:	6802      	ldr	r2, [r0, #0]
    c968:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    c96c:	f006 fb8c 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c970:	e7ff      	b.n	c972 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1802>
    c972:	e7ff      	b.n	c974 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1804>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    c974:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c978:	280f      	cmp	r0, #15
    c97a:	f202 80c7 	bhi.w	eb0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x399c>
    c97e:	e7ff      	b.n	c980 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1810>
    c980:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c984:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c988:	1842      	adds	r2, r0, r1
    c98a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c98e:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    c992:	2b0f      	cmp	r3, #15
    c994:	92a4      	str	r2, [sp, #656]	; 0x290
    c996:	f202 80c3 	bhi.w	eb20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39b0>
    c99a:	e7ff      	b.n	c99c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x182c>
    c99c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c9a0:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c9a4:	1842      	adds	r2, r0, r1
    c9a6:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c9aa:	98a4      	ldr	r0, [sp, #656]	; 0x290
    c9ac:	f002 fcdb 	bl	f366 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE>
    c9b0:	90a3      	str	r0, [sp, #652]	; 0x28c
    c9b2:	91a2      	str	r1, [sp, #648]	; 0x288
    c9b4:	e7ff      	b.n	c9b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1846>
    c9b6:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    c9b8:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    c9bc:	99a2      	ldr	r1, [sp, #648]	; 0x288
    c9be:	f001 0201 	and.w	r2, r1, #1
    c9c2:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    c9c6:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c9ca:	2a0f      	cmp	r2, #15
    c9cc:	f202 80b2 	bhi.w	eb34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39c4>
    c9d0:	e7ff      	b.n	c9d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1862>
    c9d2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c9d6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c9da:	1842      	adds	r2, r0, r1
    c9dc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    c9de:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    c9e2:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    c9e4:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    c9e8:	ea22 020c 	bic.w	r2, r2, ip
    c9ec:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    c9f0:	f001 be8b 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c9f4:	2005      	movs	r0, #5
    c9f6:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    c9fa:	f24f 4050 	movw	r0, #62544	; 0xf450
    c9fe:	f2c0 0001 	movt	r0, #1
    ca02:	6801      	ldr	r1, [r0, #0]
    ca04:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    ca08:	f005 fa24 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ca0c:	90a1      	str	r0, [sp, #644]	; 0x284
    ca0e:	e01f      	b.n	ca50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18e0>
    ca10:	2001      	movs	r0, #1
    ca12:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    ca16:	e015      	b.n	ca44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18d4>
    ca18:	2000      	movs	r0, #0
    ca1a:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    ca1e:	e011      	b.n	ca44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18d4>
    ca20:	2000      	movs	r0, #0
    ca22:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    ca26:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    ca2a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ca2e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ca32:	f005 fa84 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    ca36:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    ca3a:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    ca3e:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    ca42:	e00a      	b.n	ca5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18ea>
    ca44:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    ca48:	07c0      	lsls	r0, r0, #31
    ca4a:	2800      	cmp	r0, #0
    ca4c:	d112      	bne.n	ca74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1904>
    ca4e:	e055      	b.n	cafc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x198c>
    ca50:	98a1      	ldr	r0, [sp, #644]	; 0x284
    ca52:	07c1      	lsls	r1, r0, #31
    ca54:	2900      	cmp	r1, #0
    ca56:	d1e3      	bne.n	ca20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18b0>
    ca58:	e7de      	b.n	ca18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18a8>
    ca5a:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    ca5e:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    ca62:	f005 f9f7 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ca66:	90a0      	str	r0, [sp, #640]	; 0x280
    ca68:	e7ff      	b.n	ca6a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18fa>
    ca6a:	98a0      	ldr	r0, [sp, #640]	; 0x280
    ca6c:	07c1      	lsls	r1, r0, #31
    ca6e:	2900      	cmp	r1, #0
    ca70:	d1ce      	bne.n	ca10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18a0>
    ca72:	e7d1      	b.n	ca18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18a8>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    ca74:	f64f 4074 	movw	r0, #64628	; 0xfc74
    ca78:	f2c0 0001 	movt	r0, #1
    ca7c:	6801      	ldr	r1, [r0, #0]
    ca7e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ca82:	f100 0212 	add.w	r2, r0, #18
    ca86:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    ca8a:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    ca8e:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    ca92:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    ca96:	f2c0 0301 	movt	r3, #1
    ca9a:	4610      	mov	r0, r2
    ca9c:	919f      	str	r1, [sp, #636]	; 0x27c
    ca9e:	4619      	mov	r1, r3
    caa0:	f7fd ff1e 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    caa4:	909e      	str	r0, [sp, #632]	; 0x278
    caa6:	919d      	str	r1, [sp, #628]	; 0x274
    caa8:	e7ff      	b.n	caaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x193a>
    caaa:	989e      	ldr	r0, [sp, #632]	; 0x278
    caac:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    cab0:	999d      	ldr	r1, [sp, #628]	; 0x274
    cab2:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    cab6:	f24f 4298 	movw	r2, #62616	; 0xf498
    caba:	f2c0 0201 	movt	r2, #1
    cabe:	6812      	ldr	r2, [r2, #0]
    cac0:	466b      	mov	r3, sp
    cac2:	f04f 0c01 	mov.w	ip, #1
    cac6:	f8c3 c008 	str.w	ip, [r3, #8]
    caca:	605a      	str	r2, [r3, #4]
    cacc:	f8c3 c000 	str.w	ip, [r3]
    cad0:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    cad4:	2202      	movs	r2, #2
    cad6:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    cada:	999f      	ldr	r1, [sp, #636]	; 0x27c
    cadc:	f005 f9f6 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cae0:	e7ff      	b.n	cae2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1972>
    cae2:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    cae6:	f64f 4094 	movw	r0, #64660	; 0xfc94
    caea:	f2c0 0001 	movt	r0, #1
    caee:	6802      	ldr	r2, [r0, #0]
    caf0:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    caf4:	f006 fac8 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    caf8:	e7ff      	b.n	cafa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x198a>
    cafa:	e7ff      	b.n	cafc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x198c>
                self.v[0xf] = self.v[x] & 1;
    cafc:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cb00:	280f      	cmp	r0, #15
    cb02:	f201 87e5 	bhi.w	ead0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3960>
    cb06:	e7ff      	b.n	cb08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1998>
    cb08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb0c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cb10:	1842      	adds	r2, r0, r1
    cb12:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cb16:	f002 0201 	and.w	r2, r2, #1
    cb1a:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    cb1e:	290f      	cmp	r1, #15
    cb20:	f201 87e0 	bhi.w	eae4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3974>
    cb24:	e7ff      	b.n	cb26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x19b6>
    cb26:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb2a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cb2e:	1842      	adds	r2, r0, r1
    cb30:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    cb34:	2101      	movs	r1, #1
    cb36:	f002 fbc7 	bl	f2c8 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE>
    cb3a:	909c      	str	r0, [sp, #624]	; 0x270
    cb3c:	e7ff      	b.n	cb3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x19ce>
    cb3e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cb42:	280f      	cmp	r0, #15
    cb44:	f201 87d8 	bhi.w	eaf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3988>
    cb48:	e7ff      	b.n	cb4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x19da>
    cb4a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb4e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cb52:	1842      	adds	r2, r0, r1
    cb54:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    cb56:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    cb5a:	f001 bdd6 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cb5e:	2005      	movs	r0, #5
    cb60:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    cb64:	f24f 4050 	movw	r0, #62544	; 0xf450
    cb68:	f2c0 0001 	movt	r0, #1
    cb6c:	6801      	ldr	r1, [r0, #0]
    cb6e:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    cb72:	f005 f96f 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cb76:	909b      	str	r0, [sp, #620]	; 0x26c
    cb78:	e01f      	b.n	cbba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a4a>
    cb7a:	2001      	movs	r0, #1
    cb7c:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    cb80:	e015      	b.n	cbae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a3e>
    cb82:	2000      	movs	r0, #0
    cb84:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    cb88:	e011      	b.n	cbae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a3e>
    cb8a:	2000      	movs	r0, #0
    cb8c:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    cb90:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    cb94:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cb98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cb9c:	f005 f9cf 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    cba0:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    cba4:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    cba8:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    cbac:	e00a      	b.n	cbc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a54>
    cbae:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    cbb2:	07c0      	lsls	r0, r0, #31
    cbb4:	2800      	cmp	r0, #0
    cbb6:	d112      	bne.n	cbde <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a6e>
    cbb8:	e055      	b.n	cc66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1af6>
    cbba:	989b      	ldr	r0, [sp, #620]	; 0x26c
    cbbc:	07c1      	lsls	r1, r0, #31
    cbbe:	2900      	cmp	r1, #0
    cbc0:	d1e3      	bne.n	cb8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a1a>
    cbc2:	e7de      	b.n	cb82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a12>
    cbc4:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    cbc8:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    cbcc:	f005 f942 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cbd0:	909a      	str	r0, [sp, #616]	; 0x268
    cbd2:	e7ff      	b.n	cbd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a64>
    cbd4:	989a      	ldr	r0, [sp, #616]	; 0x268
    cbd6:	07c1      	lsls	r1, r0, #31
    cbd8:	2900      	cmp	r1, #0
    cbda:	d1ce      	bne.n	cb7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a0a>
    cbdc:	e7d1      	b.n	cb82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a12>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    cbde:	f64f 4004 	movw	r0, #64516	; 0xfc04
    cbe2:	f2c0 0001 	movt	r0, #1
    cbe6:	6801      	ldr	r1, [r0, #0]
    cbe8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cbec:	f100 0212 	add.w	r2, r0, #18
    cbf0:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    cbf4:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    cbf8:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    cbfc:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    cc00:	f2c0 0301 	movt	r3, #1
    cc04:	4610      	mov	r0, r2
    cc06:	9199      	str	r1, [sp, #612]	; 0x264
    cc08:	4619      	mov	r1, r3
    cc0a:	f7fd fe69 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cc0e:	9098      	str	r0, [sp, #608]	; 0x260
    cc10:	9197      	str	r1, [sp, #604]	; 0x25c
    cc12:	e7ff      	b.n	cc14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1aa4>
    cc14:	9898      	ldr	r0, [sp, #608]	; 0x260
    cc16:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    cc1a:	9997      	ldr	r1, [sp, #604]	; 0x25c
    cc1c:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    cc20:	f24f 4298 	movw	r2, #62616	; 0xf498
    cc24:	f2c0 0201 	movt	r2, #1
    cc28:	6812      	ldr	r2, [r2, #0]
    cc2a:	466b      	mov	r3, sp
    cc2c:	f04f 0c01 	mov.w	ip, #1
    cc30:	f8c3 c008 	str.w	ip, [r3, #8]
    cc34:	605a      	str	r2, [r3, #4]
    cc36:	f8c3 c000 	str.w	ip, [r3]
    cc3a:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    cc3e:	2202      	movs	r2, #2
    cc40:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    cc44:	9999      	ldr	r1, [sp, #612]	; 0x264
    cc46:	f005 f941 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cc4a:	e7ff      	b.n	cc4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1adc>
    cc4c:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    cc50:	f64f 4024 	movw	r0, #64548	; 0xfc24
    cc54:	f2c0 0001 	movt	r0, #1
    cc58:	6802      	ldr	r2, [r0, #0]
    cc5a:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    cc5e:	f006 fa13 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cc62:	e7ff      	b.n	cc64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1af4>
    cc64:	e7ff      	b.n	cc66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1af6>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    cc66:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    cc6a:	280f      	cmp	r0, #15
    cc6c:	f201 8712 	bhi.w	ea94 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3924>
    cc70:	e7ff      	b.n	cc72 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b02>
    cc72:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc76:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    cc7a:	1842      	adds	r2, r0, r1
    cc7c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cc80:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    cc84:	2b0f      	cmp	r3, #15
    cc86:	9296      	str	r2, [sp, #600]	; 0x258
    cc88:	f201 870e 	bhi.w	eaa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3938>
    cc8c:	e7ff      	b.n	cc8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b1e>
    cc8e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc92:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cc96:	1842      	adds	r2, r0, r1
    cc98:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    cc9c:	9896      	ldr	r0, [sp, #600]	; 0x258
    cc9e:	f002 fb62 	bl	f366 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE>
    cca2:	9095      	str	r0, [sp, #596]	; 0x254
    cca4:	9194      	str	r1, [sp, #592]	; 0x250
    cca6:	e7ff      	b.n	cca8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b38>
    cca8:	9895      	ldr	r0, [sp, #596]	; 0x254
    ccaa:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    ccae:	9994      	ldr	r1, [sp, #592]	; 0x250
    ccb0:	f001 0201 	and.w	r2, r1, #1
    ccb4:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    ccb8:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ccbc:	2a0f      	cmp	r2, #15
    ccbe:	f201 86fd 	bhi.w	eabc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x394c>
    ccc2:	e7ff      	b.n	ccc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b54>
    ccc4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ccc8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cccc:	1842      	adds	r2, r0, r1
    ccce:	9b95      	ldr	r3, [sp, #596]	; 0x254
    ccd0:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    ccd4:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    ccd6:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    ccda:	ea22 020c 	bic.w	r2, r2, ip
    ccde:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    cce2:	f001 bd12 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cce6:	2005      	movs	r0, #5
    cce8:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    ccec:	f24f 4050 	movw	r0, #62544	; 0xf450
    ccf0:	f2c0 0001 	movt	r0, #1
    ccf4:	6801      	ldr	r1, [r0, #0]
    ccf6:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    ccfa:	f005 f8ab 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ccfe:	9093      	str	r0, [sp, #588]	; 0x24c
    cd00:	e01f      	b.n	cd42 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bd2>
    cd02:	2001      	movs	r0, #1
    cd04:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    cd08:	e015      	b.n	cd36 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bc6>
    cd0a:	2000      	movs	r0, #0
    cd0c:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    cd10:	e011      	b.n	cd36 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bc6>
    cd12:	2000      	movs	r0, #0
    cd14:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    cd18:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    cd1c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cd20:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cd24:	f005 f90b 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    cd28:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    cd2c:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    cd30:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    cd34:	e00a      	b.n	cd4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bdc>
    cd36:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    cd3a:	07c0      	lsls	r0, r0, #31
    cd3c:	2800      	cmp	r0, #0
    cd3e:	d112      	bne.n	cd66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bf6>
    cd40:	e055      	b.n	cdee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c7e>
    cd42:	9893      	ldr	r0, [sp, #588]	; 0x24c
    cd44:	07c1      	lsls	r1, r0, #31
    cd46:	2900      	cmp	r1, #0
    cd48:	d1e3      	bne.n	cd12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ba2>
    cd4a:	e7de      	b.n	cd0a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b9a>
    cd4c:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    cd50:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    cd54:	f005 f87e 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cd58:	9092      	str	r0, [sp, #584]	; 0x248
    cd5a:	e7ff      	b.n	cd5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bec>
    cd5c:	9892      	ldr	r0, [sp, #584]	; 0x248
    cd5e:	07c1      	lsls	r1, r0, #31
    cd60:	2900      	cmp	r1, #0
    cd62:	d1ce      	bne.n	cd02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b92>
    cd64:	e7d1      	b.n	cd0a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b9a>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    cd66:	f64f 3090 	movw	r0, #64400	; 0xfb90
    cd6a:	f2c0 0001 	movt	r0, #1
    cd6e:	6801      	ldr	r1, [r0, #0]
    cd70:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cd74:	f100 0212 	add.w	r2, r0, #18
    cd78:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    cd7c:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    cd80:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    cd84:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    cd88:	f2c0 0301 	movt	r3, #1
    cd8c:	4610      	mov	r0, r2
    cd8e:	9191      	str	r1, [sp, #580]	; 0x244
    cd90:	4619      	mov	r1, r3
    cd92:	f7fd fda5 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cd96:	9090      	str	r0, [sp, #576]	; 0x240
    cd98:	918f      	str	r1, [sp, #572]	; 0x23c
    cd9a:	e7ff      	b.n	cd9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c2c>
    cd9c:	9890      	ldr	r0, [sp, #576]	; 0x240
    cd9e:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    cda2:	998f      	ldr	r1, [sp, #572]	; 0x23c
    cda4:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    cda8:	f24f 4298 	movw	r2, #62616	; 0xf498
    cdac:	f2c0 0201 	movt	r2, #1
    cdb0:	6812      	ldr	r2, [r2, #0]
    cdb2:	466b      	mov	r3, sp
    cdb4:	f04f 0c01 	mov.w	ip, #1
    cdb8:	f8c3 c008 	str.w	ip, [r3, #8]
    cdbc:	605a      	str	r2, [r3, #4]
    cdbe:	f8c3 c000 	str.w	ip, [r3]
    cdc2:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    cdc6:	2202      	movs	r2, #2
    cdc8:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    cdcc:	9991      	ldr	r1, [sp, #580]	; 0x244
    cdce:	f005 f87d 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cdd2:	e7ff      	b.n	cdd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c64>
    cdd4:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    cdd8:	f64f 30b0 	movw	r0, #64432	; 0xfbb0
    cddc:	f2c0 0001 	movt	r0, #1
    cde0:	6802      	ldr	r2, [r0, #0]
    cde2:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    cde6:	f006 f94f 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cdea:	e7ff      	b.n	cdec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c7c>
    cdec:	e7ff      	b.n	cdee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c7e>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    cdee:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cdf2:	280f      	cmp	r0, #15
    cdf4:	f201 8630 	bhi.w	ea58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38e8>
    cdf8:	e7ff      	b.n	cdfa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c8a>
    cdfa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cdfe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ce02:	1842      	adds	r2, r0, r1
    ce04:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ce08:	09d2      	lsrs	r2, r2, #7
    ce0a:	928e      	str	r2, [sp, #568]	; 0x238
    ce0c:	e7ff      	b.n	ce0e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c9e>
    ce0e:	988e      	ldr	r0, [sp, #568]	; 0x238
    ce10:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ce14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    ce18:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ce1c:	2a0f      	cmp	r2, #15
    ce1e:	f201 8625 	bhi.w	ea6c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38fc>
    ce22:	e7ff      	b.n	ce24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cb4>
    ce24:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ce28:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ce2c:	1842      	adds	r2, r0, r1
    ce2e:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ce32:	2101      	movs	r1, #1
    ce34:	f002 fa37 	bl	f2a6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E>
    ce38:	908d      	str	r0, [sp, #564]	; 0x234
    ce3a:	e7ff      	b.n	ce3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ccc>
    ce3c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ce40:	280f      	cmp	r0, #15
    ce42:	f201 861d 	bhi.w	ea80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3910>
    ce46:	e7ff      	b.n	ce48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cd8>
    ce48:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ce4c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ce50:	1842      	adds	r2, r0, r1
    ce52:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    ce54:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ce58:	f001 bc57 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    ce5c:	2005      	movs	r0, #5
    ce5e:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    ce62:	f24f 4050 	movw	r0, #62544	; 0xf450
    ce66:	f2c0 0001 	movt	r0, #1
    ce6a:	6801      	ldr	r1, [r0, #0]
    ce6c:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    ce70:	f004 fff0 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ce74:	908c      	str	r0, [sp, #560]	; 0x230
    ce76:	e01f      	b.n	ceb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d48>
    ce78:	2001      	movs	r0, #1
    ce7a:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    ce7e:	e015      	b.n	ceac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d3c>
    ce80:	2000      	movs	r0, #0
    ce82:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    ce86:	e011      	b.n	ceac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d3c>
    ce88:	2000      	movs	r0, #0
    ce8a:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    ce8e:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    ce92:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ce96:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ce9a:	f005 f850 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    ce9e:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    cea2:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    cea6:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    ceaa:	e00a      	b.n	cec2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d52>
    ceac:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    ceb0:	07c0      	lsls	r0, r0, #31
    ceb2:	2800      	cmp	r0, #0
    ceb4:	d112      	bne.n	cedc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d6c>
    ceb6:	e055      	b.n	cf64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1df4>
    ceb8:	988c      	ldr	r0, [sp, #560]	; 0x230
    ceba:	07c1      	lsls	r1, r0, #31
    cebc:	2900      	cmp	r1, #0
    cebe:	d1e3      	bne.n	ce88 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d18>
    cec0:	e7de      	b.n	ce80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d10>
    cec2:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    cec6:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    ceca:	f004 ffc3 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cece:	908b      	str	r0, [sp, #556]	; 0x22c
    ced0:	e7ff      	b.n	ced2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d62>
    ced2:	988b      	ldr	r0, [sp, #556]	; 0x22c
    ced4:	07c1      	lsls	r1, r0, #31
    ced6:	2900      	cmp	r1, #0
    ced8:	d1ce      	bne.n	ce78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d08>
    ceda:	e7d1      	b.n	ce80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d10>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    cedc:	f64f 3030 	movw	r0, #64304	; 0xfb30
    cee0:	f2c0 0001 	movt	r0, #1
    cee4:	6801      	ldr	r1, [r0, #0]
    cee6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ceea:	f100 0212 	add.w	r2, r0, #18
    ceee:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    cef2:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    cef6:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    cefa:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    cefe:	f2c0 0301 	movt	r3, #1
    cf02:	4610      	mov	r0, r2
    cf04:	918a      	str	r1, [sp, #552]	; 0x228
    cf06:	4619      	mov	r1, r3
    cf08:	f7fd fcea 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cf0c:	9089      	str	r0, [sp, #548]	; 0x224
    cf0e:	9188      	str	r1, [sp, #544]	; 0x220
    cf10:	e7ff      	b.n	cf12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1da2>
    cf12:	9889      	ldr	r0, [sp, #548]	; 0x224
    cf14:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    cf18:	9988      	ldr	r1, [sp, #544]	; 0x220
    cf1a:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    cf1e:	f24f 4298 	movw	r2, #62616	; 0xf498
    cf22:	f2c0 0201 	movt	r2, #1
    cf26:	6812      	ldr	r2, [r2, #0]
    cf28:	466b      	mov	r3, sp
    cf2a:	f04f 0c01 	mov.w	ip, #1
    cf2e:	f8c3 c008 	str.w	ip, [r3, #8]
    cf32:	605a      	str	r2, [r3, #4]
    cf34:	f8c3 c000 	str.w	ip, [r3]
    cf38:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    cf3c:	2202      	movs	r2, #2
    cf3e:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    cf42:	998a      	ldr	r1, [sp, #552]	; 0x228
    cf44:	f004 ffc2 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cf48:	e7ff      	b.n	cf4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1dda>
    cf4a:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    cf4e:	f64f 3050 	movw	r0, #64336	; 0xfb50
    cf52:	f2c0 0001 	movt	r0, #1
    cf56:	6802      	ldr	r2, [r0, #0]
    cf58:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    cf5c:	f006 f894 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cf60:	e7ff      	b.n	cf62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1df2>
    cf62:	e7ff      	b.n	cf64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1df4>
                if self.v[x] != self.v[y] {
    cf64:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cf68:	280f      	cmp	r0, #15
    cf6a:	f201 8561 	bhi.w	ea30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38c0>
    cf6e:	e7ff      	b.n	cf70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e00>
    cf70:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cf74:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cf78:	1842      	adds	r2, r0, r1
    cf7a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cf7e:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    cf82:	2b0f      	cmp	r3, #15
    cf84:	9287      	str	r2, [sp, #540]	; 0x21c
    cf86:	f201 855d 	bhi.w	ea44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38d4>
    cf8a:	e7ff      	b.n	cf8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e1c>
    cf8c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cf90:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    cf94:	1842      	adds	r2, r0, r1
    cf96:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cf9a:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    cf9c:	fa5f fc83 	uxtb.w	ip, r3
    cfa0:	4594      	cmp	ip, r2
    cfa2:	d006      	beq.n	cfb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e42>
    cfa4:	e7ff      	b.n	cfa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e36>
                    self.next();
    cfa6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cfaa:	f001 fee0 	bl	ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    cfae:	e7ff      	b.n	cfb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e40>
                if self.v[x] != self.v[y] {
    cfb0:	e7ff      	b.n	cfb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e42>
        match (
    cfb2:	f001 bbaa 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cfb6:	2005      	movs	r0, #5
    cfb8:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    cfbc:	f24f 4050 	movw	r0, #62544	; 0xf450
    cfc0:	f2c0 0001 	movt	r0, #1
    cfc4:	6801      	ldr	r1, [r0, #0]
    cfc6:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    cfca:	f004 ff43 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cfce:	9086      	str	r0, [sp, #536]	; 0x218
    cfd0:	e01f      	b.n	d012 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ea2>
    cfd2:	2001      	movs	r0, #1
    cfd4:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    cfd8:	e015      	b.n	d006 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e96>
    cfda:	2000      	movs	r0, #0
    cfdc:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    cfe0:	e011      	b.n	d006 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e96>
    cfe2:	2000      	movs	r0, #0
    cfe4:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    cfe8:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    cfec:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cff0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cff4:	f004 ffa3 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    cff8:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    cffc:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    d000:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    d004:	e00a      	b.n	d01c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1eac>
    d006:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    d00a:	07c0      	lsls	r0, r0, #31
    d00c:	2800      	cmp	r0, #0
    d00e:	d112      	bne.n	d036 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ec6>
    d010:	e055      	b.n	d0be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f4e>
    d012:	9886      	ldr	r0, [sp, #536]	; 0x218
    d014:	07c1      	lsls	r1, r0, #31
    d016:	2900      	cmp	r1, #0
    d018:	d1e3      	bne.n	cfe2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e72>
    d01a:	e7de      	b.n	cfda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e6a>
    d01c:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    d020:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    d024:	f004 ff16 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d028:	9085      	str	r0, [sp, #532]	; 0x214
    d02a:	e7ff      	b.n	d02c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ebc>
    d02c:	9885      	ldr	r0, [sp, #532]	; 0x214
    d02e:	07c1      	lsls	r1, r0, #31
    d030:	2900      	cmp	r1, #0
    d032:	d1ce      	bne.n	cfd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e62>
    d034:	e7d1      	b.n	cfda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e6a>
                trace!("[{:04x}] LD I, nnn", self.pc);
    d036:	f64f 20f0 	movw	r0, #64240	; 0xfaf0
    d03a:	f2c0 0001 	movt	r0, #1
    d03e:	6801      	ldr	r1, [r0, #0]
    d040:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d044:	f100 0212 	add.w	r2, r0, #18
    d048:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    d04c:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    d050:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    d054:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    d058:	f2c0 0301 	movt	r3, #1
    d05c:	4610      	mov	r0, r2
    d05e:	9184      	str	r1, [sp, #528]	; 0x210
    d060:	4619      	mov	r1, r3
    d062:	f7fd fc3d 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d066:	9083      	str	r0, [sp, #524]	; 0x20c
    d068:	9182      	str	r1, [sp, #520]	; 0x208
    d06a:	e7ff      	b.n	d06c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1efc>
    d06c:	9883      	ldr	r0, [sp, #524]	; 0x20c
    d06e:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    d072:	9982      	ldr	r1, [sp, #520]	; 0x208
    d074:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    d078:	f24f 4298 	movw	r2, #62616	; 0xf498
    d07c:	f2c0 0201 	movt	r2, #1
    d080:	6812      	ldr	r2, [r2, #0]
    d082:	466b      	mov	r3, sp
    d084:	f04f 0c01 	mov.w	ip, #1
    d088:	f8c3 c008 	str.w	ip, [r3, #8]
    d08c:	605a      	str	r2, [r3, #4]
    d08e:	f8c3 c000 	str.w	ip, [r3]
    d092:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    d096:	2202      	movs	r2, #2
    d098:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    d09c:	9984      	ldr	r1, [sp, #528]	; 0x210
    d09e:	f004 ff15 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d0a2:	e7ff      	b.n	d0a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f34>
    d0a4:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    d0a8:	f64f 3010 	movw	r0, #64272	; 0xfb10
    d0ac:	f2c0 0001 	movt	r0, #1
    d0b0:	6802      	ldr	r2, [r0, #0]
    d0b2:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    d0b6:	f005 ffe7 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d0ba:	e7ff      	b.n	d0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f4c>
    d0bc:	e7ff      	b.n	d0be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f4e>
                self.i = nnn;
    d0be:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    d0c2:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d0c6:	8208      	strh	r0, [r1, #16]
        match (
    d0c8:	f001 bb1f 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d0cc:	2005      	movs	r0, #5
    d0ce:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    d0d2:	f24f 4050 	movw	r0, #62544	; 0xf450
    d0d6:	f2c0 0001 	movt	r0, #1
    d0da:	6801      	ldr	r1, [r0, #0]
    d0dc:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    d0e0:	f004 feb8 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d0e4:	9081      	str	r0, [sp, #516]	; 0x204
    d0e6:	e01f      	b.n	d128 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fb8>
    d0e8:	2001      	movs	r0, #1
    d0ea:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    d0ee:	e015      	b.n	d11c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fac>
    d0f0:	2000      	movs	r0, #0
    d0f2:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    d0f6:	e011      	b.n	d11c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fac>
    d0f8:	2000      	movs	r0, #0
    d0fa:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    d0fe:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    d102:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d106:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d10a:	f004 ff18 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d10e:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    d112:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    d116:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    d11a:	e00a      	b.n	d132 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fc2>
    d11c:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    d120:	07c0      	lsls	r0, r0, #31
    d122:	2800      	cmp	r0, #0
    d124:	d112      	bne.n	d14c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fdc>
    d126:	e055      	b.n	d1d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2064>
    d128:	9881      	ldr	r0, [sp, #516]	; 0x204
    d12a:	07c1      	lsls	r1, r0, #31
    d12c:	2900      	cmp	r1, #0
    d12e:	d1e3      	bne.n	d0f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f88>
    d130:	e7de      	b.n	d0f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f80>
    d132:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    d136:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    d13a:	f004 fe8b 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d13e:	9080      	str	r0, [sp, #512]	; 0x200
    d140:	e7ff      	b.n	d142 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fd2>
    d142:	9880      	ldr	r0, [sp, #512]	; 0x200
    d144:	07c1      	lsls	r1, r0, #31
    d146:	2900      	cmp	r1, #0
    d148:	d1ce      	bne.n	d0e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f78>
    d14a:	e7d1      	b.n	d0f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f80>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    d14c:	f64f 20b0 	movw	r0, #64176	; 0xfab0
    d150:	f2c0 0001 	movt	r0, #1
    d154:	6801      	ldr	r1, [r0, #0]
    d156:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d15a:	f100 0212 	add.w	r2, r0, #18
    d15e:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    d162:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    d166:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    d16a:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    d16e:	f2c0 0301 	movt	r3, #1
    d172:	4610      	mov	r0, r2
    d174:	917f      	str	r1, [sp, #508]	; 0x1fc
    d176:	4619      	mov	r1, r3
    d178:	f7fd fbb2 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d17c:	907e      	str	r0, [sp, #504]	; 0x1f8
    d17e:	917d      	str	r1, [sp, #500]	; 0x1f4
    d180:	e7ff      	b.n	d182 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2012>
    d182:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    d184:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    d188:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    d18a:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    d18e:	f24f 4298 	movw	r2, #62616	; 0xf498
    d192:	f2c0 0201 	movt	r2, #1
    d196:	6812      	ldr	r2, [r2, #0]
    d198:	466b      	mov	r3, sp
    d19a:	f04f 0c01 	mov.w	ip, #1
    d19e:	f8c3 c008 	str.w	ip, [r3, #8]
    d1a2:	605a      	str	r2, [r3, #4]
    d1a4:	f8c3 c000 	str.w	ip, [r3]
    d1a8:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    d1ac:	2202      	movs	r2, #2
    d1ae:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    d1b2:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    d1b4:	f004 fe8a 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d1b8:	e7ff      	b.n	d1ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x204a>
    d1ba:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    d1be:	f64f 20d0 	movw	r0, #64208	; 0xfad0
    d1c2:	f2c0 0001 	movt	r0, #1
    d1c6:	6802      	ldr	r2, [r0, #0]
    d1c8:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    d1cc:	f005 ff5c 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d1d0:	e7ff      	b.n	d1d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2062>
    d1d2:	e7ff      	b.n	d1d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2064>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    d1d4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d1d8:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    d1dc:	f004 fec3 	bl	11f66 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>
    d1e0:	907c      	str	r0, [sp, #496]	; 0x1f0
    d1e2:	e7ff      	b.n	d1e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2074>
    d1e4:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    d1e8:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    d1ea:	f002 f8e8 	bl	f3be <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>
    d1ee:	907b      	str	r0, [sp, #492]	; 0x1ec
    d1f0:	e7ff      	b.n	d1f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2082>
    d1f2:	2102      	movs	r1, #2
    d1f4:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    d1f6:	f002 f8f3 	bl	f3e0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>
    d1fa:	907a      	str	r0, [sp, #488]	; 0x1e8
    d1fc:	e7ff      	b.n	d1fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x208e>
    d1fe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d202:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    d204:	f001 fd70 	bl	ece8 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    d208:	e7ff      	b.n	d20a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x209a>
        match (
    d20a:	f001 ba7e 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d20e:	2005      	movs	r0, #5
    d210:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    d214:	f24f 4050 	movw	r0, #62544	; 0xf450
    d218:	f2c0 0001 	movt	r0, #1
    d21c:	6801      	ldr	r1, [r0, #0]
    d21e:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    d222:	f004 fe17 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d226:	9079      	str	r0, [sp, #484]	; 0x1e4
    d228:	e01f      	b.n	d26a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20fa>
    d22a:	2001      	movs	r0, #1
    d22c:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    d230:	e015      	b.n	d25e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ee>
    d232:	2000      	movs	r0, #0
    d234:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    d238:	e011      	b.n	d25e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ee>
    d23a:	2000      	movs	r0, #0
    d23c:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    d240:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    d244:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d248:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d24c:	f004 fe77 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d250:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    d254:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    d258:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    d25c:	e00a      	b.n	d274 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2104>
    d25e:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    d262:	07c0      	lsls	r0, r0, #31
    d264:	2800      	cmp	r0, #0
    d266:	d112      	bne.n	d28e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x211e>
    d268:	e055      	b.n	d316 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21a6>
    d26a:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    d26c:	07c1      	lsls	r1, r0, #31
    d26e:	2900      	cmp	r1, #0
    d270:	d1e3      	bne.n	d23a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ca>
    d272:	e7de      	b.n	d232 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20c2>
    d274:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    d278:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    d27c:	f004 fdea 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d280:	9078      	str	r0, [sp, #480]	; 0x1e0
    d282:	e7ff      	b.n	d284 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2114>
    d284:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    d286:	07c1      	lsls	r1, r0, #31
    d288:	2900      	cmp	r1, #0
    d28a:	d1ce      	bne.n	d22a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ba>
    d28c:	e7d1      	b.n	d232 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20c2>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    d28e:	f64f 2060 	movw	r0, #64096	; 0xfa60
    d292:	f2c0 0001 	movt	r0, #1
    d296:	6801      	ldr	r1, [r0, #0]
    d298:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d29c:	f100 0212 	add.w	r2, r0, #18
    d2a0:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    d2a4:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    d2a8:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    d2ac:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    d2b0:	f2c0 0301 	movt	r3, #1
    d2b4:	4610      	mov	r0, r2
    d2b6:	9177      	str	r1, [sp, #476]	; 0x1dc
    d2b8:	4619      	mov	r1, r3
    d2ba:	f7fd fb11 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d2be:	9076      	str	r0, [sp, #472]	; 0x1d8
    d2c0:	9175      	str	r1, [sp, #468]	; 0x1d4
    d2c2:	e7ff      	b.n	d2c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2154>
    d2c4:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    d2c6:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    d2ca:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    d2cc:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    d2d0:	f24f 4298 	movw	r2, #62616	; 0xf498
    d2d4:	f2c0 0201 	movt	r2, #1
    d2d8:	6812      	ldr	r2, [r2, #0]
    d2da:	466b      	mov	r3, sp
    d2dc:	f04f 0c01 	mov.w	ip, #1
    d2e0:	f8c3 c008 	str.w	ip, [r3, #8]
    d2e4:	605a      	str	r2, [r3, #4]
    d2e6:	f8c3 c000 	str.w	ip, [r3]
    d2ea:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    d2ee:	2202      	movs	r2, #2
    d2f0:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    d2f4:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    d2f6:	f004 fde9 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d2fa:	e7ff      	b.n	d2fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x218c>
    d2fc:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    d300:	f64f 2080 	movw	r0, #64128	; 0xfa80
    d304:	f2c0 0001 	movt	r0, #1
    d308:	6802      	ldr	r2, [r0, #0]
    d30a:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    d30e:	f005 febb 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d312:	e7ff      	b.n	d314 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21a4>
    d314:	e7ff      	b.n	d316 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21a6>
    d316:	f241 0048 	movw	r0, #4168	; 0x1048
                self.v[x] = self.hw.rand() & kk;
    d31a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d31e:	4408      	add	r0, r1
    d320:	f002 fa24 	bl	f76c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hd3173c320d2551cfE>
    d324:	9074      	str	r0, [sp, #464]	; 0x1d0
    d326:	e7ff      	b.n	d328 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21b8>
    d328:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d32c:	280f      	cmp	r0, #15
    d32e:	f201 8375 	bhi.w	ea1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38ac>
    d332:	e7ff      	b.n	d334 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21c4>
    d334:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d338:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d33c:	1842      	adds	r2, r0, r1
    d33e:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    d340:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    d344:	ea03 0e0c 	and.w	lr, r3, ip
    d348:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    d34c:	f001 b9dd 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d350:	2005      	movs	r0, #5
    d352:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    d356:	f24f 4050 	movw	r0, #62544	; 0xf450
    d35a:	f2c0 0001 	movt	r0, #1
    d35e:	6801      	ldr	r1, [r0, #0]
    d360:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    d364:	f004 fd76 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d368:	9073      	str	r0, [sp, #460]	; 0x1cc
    d36a:	e01f      	b.n	d3ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x223c>
    d36c:	2001      	movs	r0, #1
    d36e:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    d372:	e015      	b.n	d3a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2230>
    d374:	2000      	movs	r0, #0
    d376:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    d37a:	e011      	b.n	d3a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2230>
    d37c:	2000      	movs	r0, #0
    d37e:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    d382:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    d386:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d38a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d38e:	f004 fdd6 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d392:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    d396:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    d39a:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    d39e:	e00a      	b.n	d3b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2246>
    d3a0:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    d3a4:	07c0      	lsls	r0, r0, #31
    d3a6:	2800      	cmp	r0, #0
    d3a8:	d112      	bne.n	d3d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2260>
    d3aa:	e055      	b.n	d458 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22e8>
    d3ac:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    d3ae:	07c1      	lsls	r1, r0, #31
    d3b0:	2900      	cmp	r1, #0
    d3b2:	d1e3      	bne.n	d37c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x220c>
    d3b4:	e7de      	b.n	d374 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2204>
    d3b6:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    d3ba:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    d3be:	f004 fd49 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d3c2:	9072      	str	r0, [sp, #456]	; 0x1c8
    d3c4:	e7ff      	b.n	d3c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2256>
    d3c6:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    d3c8:	07c1      	lsls	r1, r0, #31
    d3ca:	2900      	cmp	r1, #0
    d3cc:	d1ce      	bne.n	d36c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21fc>
    d3ce:	e7d1      	b.n	d374 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2204>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    d3d0:	f64f 1004 	movw	r0, #63748	; 0xf904
    d3d4:	f2c0 0001 	movt	r0, #1
    d3d8:	6801      	ldr	r1, [r0, #0]
    d3da:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d3de:	f100 0212 	add.w	r2, r0, #18
    d3e2:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    d3e6:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    d3ea:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    d3ee:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    d3f2:	f2c0 0301 	movt	r3, #1
    d3f6:	4610      	mov	r0, r2
    d3f8:	9171      	str	r1, [sp, #452]	; 0x1c4
    d3fa:	4619      	mov	r1, r3
    d3fc:	f7fd fa70 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d400:	9070      	str	r0, [sp, #448]	; 0x1c0
    d402:	916f      	str	r1, [sp, #444]	; 0x1bc
    d404:	e7ff      	b.n	d406 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2296>
    d406:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    d408:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    d40c:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    d40e:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    d412:	f24f 4298 	movw	r2, #62616	; 0xf498
    d416:	f2c0 0201 	movt	r2, #1
    d41a:	6812      	ldr	r2, [r2, #0]
    d41c:	466b      	mov	r3, sp
    d41e:	f04f 0c01 	mov.w	ip, #1
    d422:	f8c3 c008 	str.w	ip, [r3, #8]
    d426:	605a      	str	r2, [r3, #4]
    d428:	f8c3 c000 	str.w	ip, [r3]
    d42c:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    d430:	2202      	movs	r2, #2
    d432:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    d436:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    d438:	f004 fd48 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d43c:	e7ff      	b.n	d43e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22ce>
    d43e:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    d442:	f64f 1024 	movw	r0, #63780	; 0xf924
    d446:	f2c0 0001 	movt	r0, #1
    d44a:	6802      	ldr	r2, [r0, #0]
    d44c:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    d450:	f005 fe1a 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d454:	e7ff      	b.n	d456 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22e6>
    d456:	e7ff      	b.n	d458 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22e8>
                let basex = self.v[x] as usize;
    d458:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d45c:	280f      	cmp	r0, #15
    d45e:	f201 826b 	bhi.w	e938 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37c8>
    d462:	e7ff      	b.n	d464 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22f4>
    d464:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d468:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d46c:	1842      	adds	r2, r0, r1
    d46e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d472:	4613      	mov	r3, r2
    d474:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    d478:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    d47c:	2a0f      	cmp	r2, #15
    d47e:	936e      	str	r3, [sp, #440]	; 0x1b8
    d480:	f201 8264 	bhi.w	e94c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37dc>
    d484:	e7ff      	b.n	d486 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2316>
    d486:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d48a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d48e:	1842      	adds	r2, r0, r1
    d490:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d494:	4613      	mov	r3, r2
    d496:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
    d49a:	f241 0248 	movw	r2, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    d49e:	4410      	add	r0, r2
    d4a0:	936d      	str	r3, [sp, #436]	; 0x1b4
    d4a2:	f002 fb46 	bl	fb32 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E>
    d4a6:	906c      	str	r0, [sp, #432]	; 0x1b0
    d4a8:	916b      	str	r1, [sp, #428]	; 0x1ac
    d4aa:	e7ff      	b.n	d4ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x233c>
    d4ac:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    d4ae:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    d4b2:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    d4b4:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    d4b8:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    d4ba:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    d4be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    d4c2:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    d4c6:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    d4ca:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    d4ce:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    d4d2:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    d4d6:	f005 fb64 	bl	12ba2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    d4da:	906a      	str	r0, [sp, #424]	; 0x1a8
    d4dc:	9169      	str	r1, [sp, #420]	; 0x1a4
    d4de:	e7ff      	b.n	d4e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2370>
    d4e0:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    d4e2:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    d4e6:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    d4e8:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    d4ec:	e7ff      	b.n	d4ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x237e>
    d4ee:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    d4f2:	f005 facb 	bl	12a8c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d4f6:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    d4fa:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    d4fe:	e7ff      	b.n	d500 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2390>
    d500:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    d504:	2800      	cmp	r0, #0
    d506:	d001      	beq.n	d50c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x239c>
    d508:	e7ff      	b.n	d50a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x239a>
    d50a:	e002      	b.n	d512 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x23a2>
        match (
    d50c:	f001 b8fd 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for y in 0..n {
    d510:	defe      	udf	#254	; 0xfe
    d512:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    d516:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    d51a:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    d51e:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    d522:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d526:	8a0a      	ldrh	r2, [r1, #16]
    d528:	1813      	adds	r3, r2, r0
    d52a:	469c      	mov	ip, r3
    d52c:	4293      	cmp	r3, r2
    d52e:	9068      	str	r0, [sp, #416]	; 0x1a0
    d530:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    d534:	f0c1 8214 	bcc.w	e960 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37f0>
    d538:	e7ff      	b.n	d53a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x23ca>
    d53a:	2000      	movs	r0, #0
    d53c:	9967      	ldr	r1, [sp, #412]	; 0x19c
    d53e:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    d542:	f041 8219 	bne.w	e978 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3808>
    d546:	e7ff      	b.n	d548 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x23d8>
    d548:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d54c:	9967      	ldr	r1, [sp, #412]	; 0x19c
    d54e:	1842      	adds	r2, r0, r1
    d550:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d554:	4613      	mov	r3, r2
    d556:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    d55a:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    d55c:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    d560:	eb02 0e0c 	add.w	lr, r2, ip
    d564:	4674      	mov	r4, lr
    d566:	4596      	cmp	lr, r2
    d568:	9366      	str	r3, [sp, #408]	; 0x198
    d56a:	9465      	str	r4, [sp, #404]	; 0x194
    d56c:	f0c1 820e 	bcc.w	e98c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x381c>
    d570:	e7ff      	b.n	d572 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2402>
    d572:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    d574:	2800      	cmp	r0, #0
    d576:	f001 8215 	beq.w	e9a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3834>
    d57a:	e7ff      	b.n	d57c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x240c>
    d57c:	9865      	ldr	r0, [sp, #404]	; 0x194
    d57e:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    d580:	fbb0 f2f1 	udiv	r2, r0, r1
    d584:	fb02 0211 	mls	r2, r2, r1, r0
    d588:	4613      	mov	r3, r2
    d58a:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    d58e:	2200      	movs	r2, #0
                    for x in 0..8 {
    d590:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    d594:	2208      	movs	r2, #8
    d596:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    d59a:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    d59e:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    d5a2:	9364      	str	r3, [sp, #400]	; 0x190
    d5a4:	f005 fafd 	bl	12ba2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    d5a8:	9063      	str	r0, [sp, #396]	; 0x18c
    d5aa:	9162      	str	r1, [sp, #392]	; 0x188
    d5ac:	e7ff      	b.n	d5ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x243e>
    d5ae:	9863      	ldr	r0, [sp, #396]	; 0x18c
    d5b0:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    d5b4:	9962      	ldr	r1, [sp, #392]	; 0x188
    d5b6:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    d5ba:	e7ff      	b.n	d5bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x244c>
    d5bc:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    d5c0:	f005 fa64 	bl	12a8c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d5c4:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    d5c8:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    d5cc:	e7ff      	b.n	d5ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x245e>
    d5ce:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    d5d2:	2800      	cmp	r0, #0
    d5d4:	d001      	beq.n	d5da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x246a>
    d5d6:	e7ff      	b.n	d5d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2468>
    d5d8:	e001      	b.n	d5de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x246e>
                for y in 0..n {
    d5da:	e788      	b.n	d4ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x237e>
                    for x in 0..8 {
    d5dc:	defe      	udf	#254	; 0xfe
    d5de:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    d5e2:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    d5e6:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    d5ea:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    d5ee:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    d5f0:	1842      	adds	r2, r0, r1
    d5f2:	4613      	mov	r3, r2
    d5f4:	4282      	cmp	r2, r0
    d5f6:	9061      	str	r0, [sp, #388]	; 0x184
    d5f8:	9360      	str	r3, [sp, #384]	; 0x180
    d5fa:	f0c1 81df 	bcc.w	e9bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x384c>
    d5fe:	e7ff      	b.n	d600 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2490>
    d600:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    d602:	2800      	cmp	r0, #0
    d604:	f001 81e6 	beq.w	e9d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3864>
    d608:	e7ff      	b.n	d60a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x249a>
    d60a:	9860      	ldr	r0, [sp, #384]	; 0x180
    d60c:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    d60e:	fbb0 f2f1 	udiv	r2, r0, r1
    d612:	fb02 0211 	mls	r2, r2, r1, r0
    d616:	4613      	mov	r3, r2
    d618:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    d61c:	9a61      	ldr	r2, [sp, #388]	; 0x184
    d61e:	f1c2 0c07 	rsb	ip, r2, #7
    d622:	f04f 0e07 	mov.w	lr, #7
    d626:	4596      	cmp	lr, r2
    d628:	935f      	str	r3, [sp, #380]	; 0x17c
    d62a:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    d62e:	f0c1 81dd 	bcc.w	e9ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x387c>
    d632:	e7ff      	b.n	d634 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x24c4>
    d634:	985e      	ldr	r0, [sp, #376]	; 0x178
    d636:	f000 0107 	and.w	r1, r0, #7
    d63a:	2201      	movs	r2, #1
    d63c:	fa02 f101 	lsl.w	r1, r2, r1
    d640:	08c2      	lsrs	r2, r0, #3
    d642:	2a00      	cmp	r2, #0
    d644:	915d      	str	r1, [sp, #372]	; 0x174
    d646:	f041 81dd 	bne.w	ea04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3894>
    d64a:	e7ff      	b.n	d64c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x24dc>
    d64c:	9866      	ldr	r0, [sp, #408]	; 0x198
    d64e:	995d      	ldr	r1, [sp, #372]	; 0x174
    d650:	ea00 0201 	and.w	r2, r0, r1
    d654:	b2d2      	uxtb	r2, r2
    d656:	2a00      	cmp	r2, #0
    d658:	bf18      	it	ne
    d65a:	2201      	movne	r2, #1
    d65c:	4613      	mov	r3, r2
    d65e:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
    d662:	f241 0248 	movw	r2, #4168	; 0x1048
                        let dst = self.hw.vram_get(vramx, vramy);
    d666:	f8dd c490 	ldr.w	ip, [sp, #1168]	; 0x490
    d66a:	eb0c 0002 	add.w	r0, ip, r2
    d66e:	995f      	ldr	r1, [sp, #380]	; 0x17c
    d670:	9a64      	ldr	r2, [sp, #400]	; 0x190
    d672:	935c      	str	r3, [sp, #368]	; 0x170
    d674:	f002 f9a6 	bl	f9c4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE>
    d678:	4601      	mov	r1, r0
    d67a:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    d67e:	915b      	str	r1, [sp, #364]	; 0x16c
    d680:	e7ff      	b.n	d682 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2512>
                        self.v[0xf] |= (src && dst) as u8;
    d682:	985c      	ldr	r0, [sp, #368]	; 0x170
    d684:	07c1      	lsls	r1, r0, #31
    d686:	2900      	cmp	r1, #0
    d688:	d108      	bne.n	d69c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x252c>
    d68a:	e003      	b.n	d694 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2524>
    d68c:	2001      	movs	r0, #1
    d68e:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    d692:	e008      	b.n	d6a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2536>
    d694:	2000      	movs	r0, #0
    d696:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    d69a:	e004      	b.n	d6a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2536>
    d69c:	985b      	ldr	r0, [sp, #364]	; 0x16c
    d69e:	07c1      	lsls	r1, r0, #31
    d6a0:	2900      	cmp	r1, #0
    d6a2:	d1f3      	bne.n	d68c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x251c>
    d6a4:	e7f6      	b.n	d694 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2524>
    d6a6:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    d6aa:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d6ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    d6b2:	4310      	orrs	r0, r2
    d6b4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    d6b8:	f241 0048 	movw	r0, #4168	; 0x1048
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    d6bc:	4408      	add	r0, r1
    d6be:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    d6c0:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    d6c2:	ea82 0c03 	eor.w	ip, r2, r3
    d6c6:	f00c 0301 	and.w	r3, ip, #1
    d6ca:	995f      	ldr	r1, [sp, #380]	; 0x17c
    d6cc:	9a64      	ldr	r2, [sp, #400]	; 0x190
    d6ce:	f002 f873 	bl	f7b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE>
    d6d2:	e7ff      	b.n	d6d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2564>
                    for x in 0..8 {
    d6d4:	e772      	b.n	d5bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x244c>
    d6d6:	2005      	movs	r0, #5
    d6d8:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    d6dc:	f24f 4050 	movw	r0, #62544	; 0xf450
    d6e0:	f2c0 0001 	movt	r0, #1
    d6e4:	6801      	ldr	r1, [r0, #0]
    d6e6:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    d6ea:	f004 fbb3 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d6ee:	905a      	str	r0, [sp, #360]	; 0x168
    d6f0:	e01f      	b.n	d732 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25c2>
    d6f2:	2001      	movs	r0, #1
    d6f4:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    d6f8:	e015      	b.n	d726 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25b6>
    d6fa:	2000      	movs	r0, #0
    d6fc:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    d700:	e011      	b.n	d726 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25b6>
    d702:	2000      	movs	r0, #0
    d704:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    d708:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    d70c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d710:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d714:	f004 fc13 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d718:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    d71c:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    d720:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    d724:	e00a      	b.n	d73c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25cc>
    d726:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    d72a:	07c0      	lsls	r0, r0, #31
    d72c:	2800      	cmp	r0, #0
    d72e:	d112      	bne.n	d756 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25e6>
    d730:	e055      	b.n	d7de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x266e>
    d732:	985a      	ldr	r0, [sp, #360]	; 0x168
    d734:	07c1      	lsls	r1, r0, #31
    d736:	2900      	cmp	r1, #0
    d738:	d1e3      	bne.n	d702 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2592>
    d73a:	e7de      	b.n	d6fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x258a>
    d73c:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    d740:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    d744:	f004 fb86 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d748:	9059      	str	r0, [sp, #356]	; 0x164
    d74a:	e7ff      	b.n	d74c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25dc>
    d74c:	9859      	ldr	r0, [sp, #356]	; 0x164
    d74e:	07c1      	lsls	r1, r0, #31
    d750:	2900      	cmp	r1, #0
    d752:	d1ce      	bne.n	d6f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2582>
    d754:	e7d1      	b.n	d6fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x258a>
                trace!("[{:04x}] SKP Vx", self.pc);
    d756:	f64f 00b0 	movw	r0, #63664	; 0xf8b0
    d75a:	f2c0 0001 	movt	r0, #1
    d75e:	6801      	ldr	r1, [r0, #0]
    d760:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d764:	f100 0212 	add.w	r2, r0, #18
    d768:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    d76c:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    d770:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    d774:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    d778:	f2c0 0301 	movt	r3, #1
    d77c:	4610      	mov	r0, r2
    d77e:	9158      	str	r1, [sp, #352]	; 0x160
    d780:	4619      	mov	r1, r3
    d782:	f7fd f8ad 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d786:	9057      	str	r0, [sp, #348]	; 0x15c
    d788:	9156      	str	r1, [sp, #344]	; 0x158
    d78a:	e7ff      	b.n	d78c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x261c>
    d78c:	9857      	ldr	r0, [sp, #348]	; 0x15c
    d78e:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    d792:	9956      	ldr	r1, [sp, #344]	; 0x158
    d794:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    d798:	f24f 4298 	movw	r2, #62616	; 0xf498
    d79c:	f2c0 0201 	movt	r2, #1
    d7a0:	6812      	ldr	r2, [r2, #0]
    d7a2:	466b      	mov	r3, sp
    d7a4:	f04f 0c01 	mov.w	ip, #1
    d7a8:	f8c3 c008 	str.w	ip, [r3, #8]
    d7ac:	605a      	str	r2, [r3, #4]
    d7ae:	f8c3 c000 	str.w	ip, [r3]
    d7b2:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    d7b6:	2202      	movs	r2, #2
    d7b8:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    d7bc:	9958      	ldr	r1, [sp, #352]	; 0x160
    d7be:	f004 fb85 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d7c2:	e7ff      	b.n	d7c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2654>
    d7c4:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    d7c8:	f64f 00d0 	movw	r0, #63696	; 0xf8d0
    d7cc:	f2c0 0001 	movt	r0, #1
    d7d0:	6802      	ldr	r2, [r0, #0]
    d7d2:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    d7d6:	f005 fc57 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d7da:	e7ff      	b.n	d7dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x266c>
    d7dc:	e7ff      	b.n	d7de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x266e>
    d7de:	f241 0048 	movw	r0, #4168	; 0x1048
                if self.hw.key(self.v[x]) {
    d7e2:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d7e6:	4408      	add	r0, r1
    d7e8:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    d7ec:	2a0f      	cmp	r2, #15
    d7ee:	9055      	str	r0, [sp, #340]	; 0x154
    d7f0:	f201 8098 	bhi.w	e924 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37b4>
    d7f4:	e7ff      	b.n	d7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2686>
    d7f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d7fa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d7fe:	1842      	adds	r2, r0, r1
    d800:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    d804:	9855      	ldr	r0, [sp, #340]	; 0x154
    d806:	f001 ffb6 	bl	f776 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>
    d80a:	9054      	str	r0, [sp, #336]	; 0x150
    d80c:	e7ff      	b.n	d80e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x269e>
    d80e:	9854      	ldr	r0, [sp, #336]	; 0x150
    d810:	07c1      	lsls	r1, r0, #31
    d812:	2900      	cmp	r1, #0
    d814:	d006      	beq.n	d824 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b4>
    d816:	e7ff      	b.n	d818 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26a8>
                    self.next();
    d818:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d81c:	f001 faa7 	bl	ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    d820:	e7ff      	b.n	d822 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b2>
                if self.hw.key(self.v[x]) {
    d822:	e7ff      	b.n	d824 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b4>
        match (
    d824:	f000 bf71 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d828:	2005      	movs	r0, #5
    d82a:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    d82e:	f24f 4050 	movw	r0, #62544	; 0xf450
    d832:	f2c0 0001 	movt	r0, #1
    d836:	6801      	ldr	r1, [r0, #0]
    d838:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    d83c:	f004 fb0a 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d840:	9053      	str	r0, [sp, #332]	; 0x14c
    d842:	e01f      	b.n	d884 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2714>
    d844:	2001      	movs	r0, #1
    d846:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    d84a:	e015      	b.n	d878 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2708>
    d84c:	2000      	movs	r0, #0
    d84e:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    d852:	e011      	b.n	d878 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2708>
    d854:	2000      	movs	r0, #0
    d856:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    d85a:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    d85e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d862:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d866:	f004 fb6a 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d86a:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    d86e:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    d872:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    d876:	e00a      	b.n	d88e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x271e>
    d878:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    d87c:	07c0      	lsls	r0, r0, #31
    d87e:	2800      	cmp	r0, #0
    d880:	d112      	bne.n	d8a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2738>
    d882:	e055      	b.n	d930 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27c0>
    d884:	9853      	ldr	r0, [sp, #332]	; 0x14c
    d886:	07c1      	lsls	r1, r0, #31
    d888:	2900      	cmp	r1, #0
    d88a:	d1e3      	bne.n	d854 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26e4>
    d88c:	e7de      	b.n	d84c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26dc>
    d88e:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    d892:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    d896:	f004 fadd 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d89a:	9052      	str	r0, [sp, #328]	; 0x148
    d89c:	e7ff      	b.n	d89e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x272e>
    d89e:	9852      	ldr	r0, [sp, #328]	; 0x148
    d8a0:	07c1      	lsls	r1, r0, #31
    d8a2:	2900      	cmp	r1, #0
    d8a4:	d1ce      	bne.n	d844 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26d4>
    d8a6:	e7d1      	b.n	d84c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26dc>
                trace!("[{:04x}] SKNP Vx", self.pc);
    d8a8:	f64f 006c 	movw	r0, #63596	; 0xf86c
    d8ac:	f2c0 0001 	movt	r0, #1
    d8b0:	6801      	ldr	r1, [r0, #0]
    d8b2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d8b6:	f100 0212 	add.w	r2, r0, #18
    d8ba:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    d8be:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    d8c2:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    d8c6:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    d8ca:	f2c0 0301 	movt	r3, #1
    d8ce:	4610      	mov	r0, r2
    d8d0:	9151      	str	r1, [sp, #324]	; 0x144
    d8d2:	4619      	mov	r1, r3
    d8d4:	f7fd f804 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d8d8:	9050      	str	r0, [sp, #320]	; 0x140
    d8da:	914f      	str	r1, [sp, #316]	; 0x13c
    d8dc:	e7ff      	b.n	d8de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x276e>
    d8de:	9850      	ldr	r0, [sp, #320]	; 0x140
    d8e0:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    d8e4:	994f      	ldr	r1, [sp, #316]	; 0x13c
    d8e6:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    d8ea:	f24f 4298 	movw	r2, #62616	; 0xf498
    d8ee:	f2c0 0201 	movt	r2, #1
    d8f2:	6812      	ldr	r2, [r2, #0]
    d8f4:	466b      	mov	r3, sp
    d8f6:	f04f 0c01 	mov.w	ip, #1
    d8fa:	f8c3 c008 	str.w	ip, [r3, #8]
    d8fe:	605a      	str	r2, [r3, #4]
    d900:	f8c3 c000 	str.w	ip, [r3]
    d904:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    d908:	2202      	movs	r2, #2
    d90a:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    d90e:	9951      	ldr	r1, [sp, #324]	; 0x144
    d910:	f004 fadc 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d914:	e7ff      	b.n	d916 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27a6>
    d916:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    d91a:	f64f 008c 	movw	r0, #63628	; 0xf88c
    d91e:	f2c0 0001 	movt	r0, #1
    d922:	6802      	ldr	r2, [r0, #0]
    d924:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    d928:	f005 fbae 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d92c:	e7ff      	b.n	d92e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27be>
    d92e:	e7ff      	b.n	d930 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27c0>
    d930:	f241 0048 	movw	r0, #4168	; 0x1048
                if !self.hw.key(self.v[x]) {
    d934:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d938:	4408      	add	r0, r1
    d93a:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    d93e:	2a0f      	cmp	r2, #15
    d940:	904e      	str	r0, [sp, #312]	; 0x138
    d942:	f200 87e5 	bhi.w	e910 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37a0>
    d946:	e7ff      	b.n	d948 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27d8>
    d948:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d94c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d950:	1842      	adds	r2, r0, r1
    d952:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    d956:	984e      	ldr	r0, [sp, #312]	; 0x138
    d958:	f001 ff0d 	bl	f776 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>
    d95c:	904d      	str	r0, [sp, #308]	; 0x134
    d95e:	e7ff      	b.n	d960 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27f0>
    d960:	984d      	ldr	r0, [sp, #308]	; 0x134
    d962:	07c1      	lsls	r1, r0, #31
    d964:	2900      	cmp	r1, #0
    d966:	d106      	bne.n	d976 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2806>
    d968:	e7ff      	b.n	d96a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27fa>
                    self.next();
    d96a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d96e:	f001 f9fe 	bl	ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    d972:	e7ff      	b.n	d974 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2804>
                if !self.hw.key(self.v[x]) {
    d974:	e7ff      	b.n	d976 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2806>
        match (
    d976:	f000 bec8 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d97a:	2005      	movs	r0, #5
    d97c:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    d980:	f24f 4050 	movw	r0, #62544	; 0xf450
    d984:	f2c0 0001 	movt	r0, #1
    d988:	6801      	ldr	r1, [r0, #0]
    d98a:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    d98e:	f004 fa61 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d992:	904c      	str	r0, [sp, #304]	; 0x130
    d994:	e01f      	b.n	d9d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2866>
    d996:	2001      	movs	r0, #1
    d998:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    d99c:	e015      	b.n	d9ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x285a>
    d99e:	2000      	movs	r0, #0
    d9a0:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    d9a4:	e011      	b.n	d9ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x285a>
    d9a6:	2000      	movs	r0, #0
    d9a8:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    d9ac:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    d9b0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d9b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d9b8:	f004 fac1 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d9bc:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    d9c0:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    d9c4:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    d9c8:	e00a      	b.n	d9e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2870>
    d9ca:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    d9ce:	07c0      	lsls	r0, r0, #31
    d9d0:	2800      	cmp	r0, #0
    d9d2:	d112      	bne.n	d9fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x288a>
    d9d4:	e055      	b.n	da82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2912>
    d9d6:	984c      	ldr	r0, [sp, #304]	; 0x130
    d9d8:	07c1      	lsls	r1, r0, #31
    d9da:	2900      	cmp	r1, #0
    d9dc:	d1e3      	bne.n	d9a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2836>
    d9de:	e7de      	b.n	d99e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x282e>
    d9e0:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    d9e4:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    d9e8:	f004 fa34 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d9ec:	904b      	str	r0, [sp, #300]	; 0x12c
    d9ee:	e7ff      	b.n	d9f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2880>
    d9f0:	984b      	ldr	r0, [sp, #300]	; 0x12c
    d9f2:	07c1      	lsls	r1, r0, #31
    d9f4:	2900      	cmp	r1, #0
    d9f6:	d1ce      	bne.n	d996 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2826>
    d9f8:	e7d1      	b.n	d99e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x282e>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    d9fa:	f64f 001c 	movw	r0, #63516	; 0xf81c
    d9fe:	f2c0 0001 	movt	r0, #1
    da02:	6801      	ldr	r1, [r0, #0]
    da04:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da08:	f100 0212 	add.w	r2, r0, #18
    da0c:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    da10:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    da14:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    da18:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    da1c:	f2c0 0301 	movt	r3, #1
    da20:	4610      	mov	r0, r2
    da22:	914a      	str	r1, [sp, #296]	; 0x128
    da24:	4619      	mov	r1, r3
    da26:	f7fc ff5b 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    da2a:	9049      	str	r0, [sp, #292]	; 0x124
    da2c:	9148      	str	r1, [sp, #288]	; 0x120
    da2e:	e7ff      	b.n	da30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x28c0>
    da30:	9849      	ldr	r0, [sp, #292]	; 0x124
    da32:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    da36:	9948      	ldr	r1, [sp, #288]	; 0x120
    da38:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    da3c:	f24f 4298 	movw	r2, #62616	; 0xf498
    da40:	f2c0 0201 	movt	r2, #1
    da44:	6812      	ldr	r2, [r2, #0]
    da46:	466b      	mov	r3, sp
    da48:	f04f 0c01 	mov.w	ip, #1
    da4c:	f8c3 c008 	str.w	ip, [r3, #8]
    da50:	605a      	str	r2, [r3, #4]
    da52:	f8c3 c000 	str.w	ip, [r3]
    da56:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    da5a:	2202      	movs	r2, #2
    da5c:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    da60:	994a      	ldr	r1, [sp, #296]	; 0x128
    da62:	f004 fa33 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    da66:	e7ff      	b.n	da68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x28f8>
    da68:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    da6c:	f64f 003c 	movw	r0, #63548	; 0xf83c
    da70:	f2c0 0001 	movt	r0, #1
    da74:	6802      	ldr	r2, [r0, #0]
    da76:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    da7a:	f005 fb05 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    da7e:	e7ff      	b.n	da80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2910>
    da80:	e7ff      	b.n	da82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2912>
                self.v[x] = self.dt;
    da82:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da86:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    da8a:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    da8e:	2a0f      	cmp	r2, #15
    da90:	9147      	str	r1, [sp, #284]	; 0x11c
    da92:	f200 8733 	bhi.w	e8fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x378c>
    da96:	e7ff      	b.n	da98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2928>
    da98:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da9c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    daa0:	1842      	adds	r2, r0, r1
    daa2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    daa4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    daa8:	f000 be2f 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    daac:	2005      	movs	r0, #5
    daae:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    dab2:	f24f 4050 	movw	r0, #62544	; 0xf450
    dab6:	f2c0 0001 	movt	r0, #1
    daba:	6801      	ldr	r1, [r0, #0]
    dabc:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    dac0:	f004 f9c8 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dac4:	9046      	str	r0, [sp, #280]	; 0x118
    dac6:	e01f      	b.n	db08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2998>
    dac8:	2001      	movs	r0, #1
    daca:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    dace:	e015      	b.n	dafc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x298c>
    dad0:	2000      	movs	r0, #0
    dad2:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    dad6:	e011      	b.n	dafc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x298c>
    dad8:	2000      	movs	r0, #0
    dada:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    dade:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    dae2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dae6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    daea:	f004 fa28 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    daee:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    daf2:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    daf6:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    dafa:	e00a      	b.n	db12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29a2>
    dafc:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    db00:	07c0      	lsls	r0, r0, #31
    db02:	2800      	cmp	r0, #0
    db04:	d112      	bne.n	db2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29bc>
    db06:	e055      	b.n	dbb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a44>
    db08:	9846      	ldr	r0, [sp, #280]	; 0x118
    db0a:	07c1      	lsls	r1, r0, #31
    db0c:	2900      	cmp	r1, #0
    db0e:	d1e3      	bne.n	dad8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2968>
    db10:	e7de      	b.n	dad0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2960>
    db12:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    db16:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    db1a:	f004 f99b 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    db1e:	9045      	str	r0, [sp, #276]	; 0x114
    db20:	e7ff      	b.n	db22 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29b2>
    db22:	9845      	ldr	r0, [sp, #276]	; 0x114
    db24:	07c1      	lsls	r1, r0, #31
    db26:	2900      	cmp	r1, #0
    db28:	d1ce      	bne.n	dac8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2958>
    db2a:	e7d1      	b.n	dad0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2960>
                trace!("[{:04x}] LD Vx, K", self.pc);
    db2c:	f24f 70cc 	movw	r0, #63436	; 0xf7cc
    db30:	f2c0 0001 	movt	r0, #1
    db34:	6801      	ldr	r1, [r0, #0]
    db36:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db3a:	f100 0212 	add.w	r2, r0, #18
    db3e:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    db42:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    db46:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    db4a:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    db4e:	f2c0 0301 	movt	r3, #1
    db52:	4610      	mov	r0, r2
    db54:	9144      	str	r1, [sp, #272]	; 0x110
    db56:	4619      	mov	r1, r3
    db58:	f7fc fec2 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    db5c:	9043      	str	r0, [sp, #268]	; 0x10c
    db5e:	9142      	str	r1, [sp, #264]	; 0x108
    db60:	e7ff      	b.n	db62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29f2>
    db62:	9843      	ldr	r0, [sp, #268]	; 0x10c
    db64:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    db68:	9942      	ldr	r1, [sp, #264]	; 0x108
    db6a:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    db6e:	f24f 4298 	movw	r2, #62616	; 0xf498
    db72:	f2c0 0201 	movt	r2, #1
    db76:	6812      	ldr	r2, [r2, #0]
    db78:	466b      	mov	r3, sp
    db7a:	f04f 0c01 	mov.w	ip, #1
    db7e:	f8c3 c008 	str.w	ip, [r3, #8]
    db82:	605a      	str	r2, [r3, #4]
    db84:	f8c3 c000 	str.w	ip, [r3]
    db88:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    db8c:	2202      	movs	r2, #2
    db8e:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    db92:	9944      	ldr	r1, [sp, #272]	; 0x110
    db94:	f004 f99a 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    db98:	e7ff      	b.n	db9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a2a>
    db9a:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    db9e:	f24f 70ec 	movw	r0, #63468	; 0xf7ec
    dba2:	f2c0 0001 	movt	r0, #1
    dba6:	6802      	ldr	r2, [r0, #0]
    dba8:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    dbac:	f005 fa6c 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dbb0:	e7ff      	b.n	dbb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a42>
    dbb2:	e7ff      	b.n	dbb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a44>
                self.v[x] = self.waitkey();
    dbb4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dbb8:	f001 fa2d 	bl	f016 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE>
    dbbc:	9041      	str	r0, [sp, #260]	; 0x104
    dbbe:	e7ff      	b.n	dbc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a50>
    dbc0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dbc4:	280f      	cmp	r0, #15
    dbc6:	f200 868f 	bhi.w	e8e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3778>
    dbca:	e7ff      	b.n	dbcc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a5c>
    dbcc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dbd0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dbd4:	1842      	adds	r2, r0, r1
    dbd6:	9b41      	ldr	r3, [sp, #260]	; 0x104
    dbd8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    dbdc:	f000 bd95 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    dbe0:	2005      	movs	r0, #5
    dbe2:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    dbe6:	f24f 4050 	movw	r0, #62544	; 0xf450
    dbea:	f2c0 0001 	movt	r0, #1
    dbee:	6801      	ldr	r1, [r0, #0]
    dbf0:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    dbf4:	f004 f92e 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dbf8:	9040      	str	r0, [sp, #256]	; 0x100
    dbfa:	e01f      	b.n	dc3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2acc>
    dbfc:	2001      	movs	r0, #1
    dbfe:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    dc02:	e015      	b.n	dc30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ac0>
    dc04:	2000      	movs	r0, #0
    dc06:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    dc0a:	e011      	b.n	dc30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ac0>
    dc0c:	2000      	movs	r0, #0
    dc0e:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    dc12:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    dc16:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dc1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dc1e:	f004 f98e 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    dc22:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    dc26:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    dc2a:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    dc2e:	e00a      	b.n	dc46 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ad6>
    dc30:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    dc34:	07c0      	lsls	r0, r0, #31
    dc36:	2800      	cmp	r0, #0
    dc38:	d112      	bne.n	dc60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2af0>
    dc3a:	e055      	b.n	dce8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b78>
    dc3c:	9840      	ldr	r0, [sp, #256]	; 0x100
    dc3e:	07c1      	lsls	r1, r0, #31
    dc40:	2900      	cmp	r1, #0
    dc42:	d1e3      	bne.n	dc0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a9c>
    dc44:	e7de      	b.n	dc04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a94>
    dc46:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    dc4a:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    dc4e:	f004 f901 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dc52:	903f      	str	r0, [sp, #252]	; 0xfc
    dc54:	e7ff      	b.n	dc56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ae6>
    dc56:	983f      	ldr	r0, [sp, #252]	; 0xfc
    dc58:	07c1      	lsls	r1, r0, #31
    dc5a:	2900      	cmp	r1, #0
    dc5c:	d1ce      	bne.n	dbfc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a8c>
    dc5e:	e7d1      	b.n	dc04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a94>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    dc60:	f24f 707c 	movw	r0, #63356	; 0xf77c
    dc64:	f2c0 0001 	movt	r0, #1
    dc68:	6801      	ldr	r1, [r0, #0]
    dc6a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc6e:	f100 0212 	add.w	r2, r0, #18
    dc72:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    dc76:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    dc7a:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    dc7e:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    dc82:	f2c0 0301 	movt	r3, #1
    dc86:	4610      	mov	r0, r2
    dc88:	913e      	str	r1, [sp, #248]	; 0xf8
    dc8a:	4619      	mov	r1, r3
    dc8c:	f7fc fe28 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dc90:	903d      	str	r0, [sp, #244]	; 0xf4
    dc92:	913c      	str	r1, [sp, #240]	; 0xf0
    dc94:	e7ff      	b.n	dc96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b26>
    dc96:	983d      	ldr	r0, [sp, #244]	; 0xf4
    dc98:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    dc9c:	993c      	ldr	r1, [sp, #240]	; 0xf0
    dc9e:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    dca2:	f24f 4298 	movw	r2, #62616	; 0xf498
    dca6:	f2c0 0201 	movt	r2, #1
    dcaa:	6812      	ldr	r2, [r2, #0]
    dcac:	466b      	mov	r3, sp
    dcae:	f04f 0c01 	mov.w	ip, #1
    dcb2:	f8c3 c008 	str.w	ip, [r3, #8]
    dcb6:	605a      	str	r2, [r3, #4]
    dcb8:	f8c3 c000 	str.w	ip, [r3]
    dcbc:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    dcc0:	2202      	movs	r2, #2
    dcc2:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    dcc6:	993e      	ldr	r1, [sp, #248]	; 0xf8
    dcc8:	f004 f900 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    dccc:	e7ff      	b.n	dcce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b5e>
    dcce:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    dcd2:	f24f 709c 	movw	r0, #63388	; 0xf79c
    dcd6:	f2c0 0001 	movt	r0, #1
    dcda:	6802      	ldr	r2, [r0, #0]
    dcdc:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    dce0:	f005 f9d2 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dce4:	e7ff      	b.n	dce6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b76>
    dce6:	e7ff      	b.n	dce8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b78>
                self.dt = self.v[x];
    dce8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dcec:	280f      	cmp	r0, #15
    dcee:	f200 85f1 	bhi.w	e8d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3764>
    dcf2:	e7ff      	b.n	dcf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b84>
    dcf4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dcf8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dcfc:	1842      	adds	r2, r0, r1
    dcfe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dd02:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    dd06:	f000 bd00 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    dd0a:	2005      	movs	r0, #5
    dd0c:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    dd10:	f24f 4050 	movw	r0, #62544	; 0xf450
    dd14:	f2c0 0001 	movt	r0, #1
    dd18:	6801      	ldr	r1, [r0, #0]
    dd1a:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    dd1e:	f004 f899 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dd22:	903b      	str	r0, [sp, #236]	; 0xec
    dd24:	e01f      	b.n	dd66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bf6>
    dd26:	2001      	movs	r0, #1
    dd28:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    dd2c:	e015      	b.n	dd5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bea>
    dd2e:	2000      	movs	r0, #0
    dd30:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    dd34:	e011      	b.n	dd5a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bea>
    dd36:	2000      	movs	r0, #0
    dd38:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    dd3c:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    dd40:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dd44:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dd48:	f004 f8f9 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    dd4c:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    dd50:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    dd54:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    dd58:	e00a      	b.n	dd70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c00>
    dd5a:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    dd5e:	07c0      	lsls	r0, r0, #31
    dd60:	2800      	cmp	r0, #0
    dd62:	d112      	bne.n	dd8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c1a>
    dd64:	e055      	b.n	de12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ca2>
    dd66:	983b      	ldr	r0, [sp, #236]	; 0xec
    dd68:	07c1      	lsls	r1, r0, #31
    dd6a:	2900      	cmp	r1, #0
    dd6c:	d1e3      	bne.n	dd36 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bc6>
    dd6e:	e7de      	b.n	dd2e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bbe>
    dd70:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    dd74:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    dd78:	f004 f86c 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dd7c:	903a      	str	r0, [sp, #232]	; 0xe8
    dd7e:	e7ff      	b.n	dd80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c10>
    dd80:	983a      	ldr	r0, [sp, #232]	; 0xe8
    dd82:	07c1      	lsls	r1, r0, #31
    dd84:	2900      	cmp	r1, #0
    dd86:	d1ce      	bne.n	dd26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bb6>
    dd88:	e7d1      	b.n	dd2e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bbe>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    dd8a:	f24f 702c 	movw	r0, #63276	; 0xf72c
    dd8e:	f2c0 0001 	movt	r0, #1
    dd92:	6801      	ldr	r1, [r0, #0]
    dd94:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dd98:	f100 0212 	add.w	r2, r0, #18
    dd9c:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    dda0:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    dda4:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    dda8:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    ddac:	f2c0 0301 	movt	r3, #1
    ddb0:	4610      	mov	r0, r2
    ddb2:	9139      	str	r1, [sp, #228]	; 0xe4
    ddb4:	4619      	mov	r1, r3
    ddb6:	f7fc fd93 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ddba:	9038      	str	r0, [sp, #224]	; 0xe0
    ddbc:	9137      	str	r1, [sp, #220]	; 0xdc
    ddbe:	e7ff      	b.n	ddc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c50>
    ddc0:	9838      	ldr	r0, [sp, #224]	; 0xe0
    ddc2:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    ddc6:	9937      	ldr	r1, [sp, #220]	; 0xdc
    ddc8:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    ddcc:	f24f 4298 	movw	r2, #62616	; 0xf498
    ddd0:	f2c0 0201 	movt	r2, #1
    ddd4:	6812      	ldr	r2, [r2, #0]
    ddd6:	466b      	mov	r3, sp
    ddd8:	f04f 0c01 	mov.w	ip, #1
    dddc:	f8c3 c008 	str.w	ip, [r3, #8]
    dde0:	605a      	str	r2, [r3, #4]
    dde2:	f8c3 c000 	str.w	ip, [r3]
    dde6:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    ddea:	2202      	movs	r2, #2
    ddec:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    ddf0:	9939      	ldr	r1, [sp, #228]	; 0xe4
    ddf2:	f004 f86b 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    ddf6:	e7ff      	b.n	ddf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c88>
    ddf8:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    ddfc:	f24f 704c 	movw	r0, #63308	; 0xf74c
    de00:	f2c0 0001 	movt	r0, #1
    de04:	6802      	ldr	r2, [r0, #0]
    de06:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    de0a:	f005 f93d 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    de0e:	e7ff      	b.n	de10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ca0>
    de10:	e7ff      	b.n	de12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ca2>
                self.st = self.v[x];
    de12:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    de16:	280f      	cmp	r0, #15
    de18:	f200 8552 	bhi.w	e8c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3750>
    de1c:	e7ff      	b.n	de1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2cae>
    de1e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de22:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    de26:	1842      	adds	r2, r0, r1
    de28:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    de2c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    de30:	f000 bc6b 	b.w	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    de34:	2005      	movs	r0, #5
    de36:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    de3a:	f24f 4050 	movw	r0, #62544	; 0xf450
    de3e:	f2c0 0001 	movt	r0, #1
    de42:	6801      	ldr	r1, [r0, #0]
    de44:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    de48:	f004 f804 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    de4c:	9036      	str	r0, [sp, #216]	; 0xd8
    de4e:	e01f      	b.n	de90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d20>
    de50:	2001      	movs	r0, #1
    de52:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    de56:	e015      	b.n	de84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d14>
    de58:	2000      	movs	r0, #0
    de5a:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    de5e:	e011      	b.n	de84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d14>
    de60:	2000      	movs	r0, #0
    de62:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    de66:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    de6a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    de6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    de72:	f004 f864 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    de76:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    de7a:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    de7e:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    de82:	e00a      	b.n	de9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d2a>
    de84:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    de88:	07c0      	lsls	r0, r0, #31
    de8a:	2800      	cmp	r0, #0
    de8c:	d112      	bne.n	deb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d44>
    de8e:	e055      	b.n	df3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2dcc>
    de90:	9836      	ldr	r0, [sp, #216]	; 0xd8
    de92:	07c1      	lsls	r1, r0, #31
    de94:	2900      	cmp	r1, #0
    de96:	d1e3      	bne.n	de60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2cf0>
    de98:	e7de      	b.n	de58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ce8>
    de9a:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    de9e:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    dea2:	f003 ffd7 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dea6:	9035      	str	r0, [sp, #212]	; 0xd4
    dea8:	e7ff      	b.n	deaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d3a>
    deaa:	9835      	ldr	r0, [sp, #212]	; 0xd4
    deac:	07c1      	lsls	r1, r0, #31
    deae:	2900      	cmp	r1, #0
    deb0:	d1ce      	bne.n	de50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ce0>
    deb2:	e7d1      	b.n	de58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ce8>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    deb4:	f24f 60dc 	movw	r0, #63196	; 0xf6dc
    deb8:	f2c0 0001 	movt	r0, #1
    debc:	6801      	ldr	r1, [r0, #0]
    debe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dec2:	f100 0212 	add.w	r2, r0, #18
    dec6:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    deca:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    dece:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    ded2:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    ded6:	f2c0 0301 	movt	r3, #1
    deda:	4610      	mov	r0, r2
    dedc:	9134      	str	r1, [sp, #208]	; 0xd0
    dede:	4619      	mov	r1, r3
    dee0:	f7fc fcfe 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dee4:	9033      	str	r0, [sp, #204]	; 0xcc
    dee6:	9132      	str	r1, [sp, #200]	; 0xc8
    dee8:	e7ff      	b.n	deea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d7a>
    deea:	9833      	ldr	r0, [sp, #204]	; 0xcc
    deec:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    def0:	9932      	ldr	r1, [sp, #200]	; 0xc8
    def2:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    def6:	f24f 4298 	movw	r2, #62616	; 0xf498
    defa:	f2c0 0201 	movt	r2, #1
    defe:	6812      	ldr	r2, [r2, #0]
    df00:	466b      	mov	r3, sp
    df02:	f04f 0c01 	mov.w	ip, #1
    df06:	f8c3 c008 	str.w	ip, [r3, #8]
    df0a:	605a      	str	r2, [r3, #4]
    df0c:	f8c3 c000 	str.w	ip, [r3]
    df10:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    df14:	2202      	movs	r2, #2
    df16:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    df1a:	9934      	ldr	r1, [sp, #208]	; 0xd0
    df1c:	f003 ffd6 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    df20:	e7ff      	b.n	df22 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2db2>
    df22:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    df26:	f24f 60fc 	movw	r0, #63228	; 0xf6fc
    df2a:	f2c0 0001 	movt	r0, #1
    df2e:	6802      	ldr	r2, [r0, #0]
    df30:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    df34:	f005 f8a8 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    df38:	e7ff      	b.n	df3a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2dca>
    df3a:	e7ff      	b.n	df3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2dcc>
                self.i = self.i.wrapping_add(self.v[x].into());
    df3c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df40:	8a01      	ldrh	r1, [r0, #16]
    df42:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    df46:	2a0f      	cmp	r2, #15
    df48:	9131      	str	r1, [sp, #196]	; 0xc4
    df4a:	f200 84af 	bhi.w	e8ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x373c>
    df4e:	e7ff      	b.n	df50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2de0>
    df50:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df54:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    df58:	1842      	adds	r2, r0, r1
    df5a:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    df5e:	f004 f802 	bl	11f66 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>
    df62:	9030      	str	r0, [sp, #192]	; 0xc0
    df64:	e7ff      	b.n	df66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2df6>
    df66:	9831      	ldr	r0, [sp, #196]	; 0xc4
    df68:	9930      	ldr	r1, [sp, #192]	; 0xc0
    df6a:	f001 fa28 	bl	f3be <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>
    df6e:	902f      	str	r0, [sp, #188]	; 0xbc
    df70:	e7ff      	b.n	df72 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e02>
    df72:	982f      	ldr	r0, [sp, #188]	; 0xbc
    df74:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    df78:	8208      	strh	r0, [r1, #16]
        match (
    df7a:	e3c6      	b.n	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    df7c:	2005      	movs	r0, #5
    df7e:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
    df82:	f24f 4050 	movw	r0, #62544	; 0xf450
    df86:	f2c0 0001 	movt	r0, #1
    df8a:	6801      	ldr	r1, [r0, #0]
    df8c:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    df90:	f003 ff60 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    df94:	902e      	str	r0, [sp, #184]	; 0xb8
    df96:	e01f      	b.n	dfd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e68>
    df98:	2001      	movs	r0, #1
    df9a:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    df9e:	e015      	b.n	dfcc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e5c>
    dfa0:	2000      	movs	r0, #0
    dfa2:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    dfa6:	e011      	b.n	dfcc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e5c>
    dfa8:	2000      	movs	r0, #0
    dfaa:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
    dfae:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
    dfb2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dfb6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dfba:	f003 ffc0 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    dfbe:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
    dfc2:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
    dfc6:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
    dfca:	e00a      	b.n	dfe2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e72>
    dfcc:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
    dfd0:	07c0      	lsls	r0, r0, #31
    dfd2:	2800      	cmp	r0, #0
    dfd4:	d112      	bne.n	dffc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e8c>
    dfd6:	e055      	b.n	e084 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f14>
    dfd8:	982e      	ldr	r0, [sp, #184]	; 0xb8
    dfda:	07c1      	lsls	r1, r0, #31
    dfdc:	2900      	cmp	r1, #0
    dfde:	d1e3      	bne.n	dfa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e38>
    dfe0:	e7de      	b.n	dfa0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e30>
    dfe2:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    dfe6:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
    dfea:	f003 ff33 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dfee:	902d      	str	r0, [sp, #180]	; 0xb4
    dff0:	e7ff      	b.n	dff2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e82>
    dff2:	982d      	ldr	r0, [sp, #180]	; 0xb4
    dff4:	07c1      	lsls	r1, r0, #31
    dff6:	2900      	cmp	r1, #0
    dff8:	d1ce      	bne.n	df98 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e28>
    dffa:	e7d1      	b.n	dfa0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e30>
                trace!("[{:04x}] LD F, Vx", self.pc);
    dffc:	f24f 6058 	movw	r0, #63064	; 0xf658
    e000:	f2c0 0001 	movt	r0, #1
    e004:	6801      	ldr	r1, [r0, #0]
    e006:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e00a:	f100 0212 	add.w	r2, r0, #18
    e00e:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
    e012:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
    e016:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
    e01a:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    e01e:	f2c0 0301 	movt	r3, #1
    e022:	4610      	mov	r0, r2
    e024:	912c      	str	r1, [sp, #176]	; 0xb0
    e026:	4619      	mov	r1, r3
    e028:	f7fc fc5a 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e02c:	902b      	str	r0, [sp, #172]	; 0xac
    e02e:	912a      	str	r1, [sp, #168]	; 0xa8
    e030:	e7ff      	b.n	e032 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ec2>
    e032:	982b      	ldr	r0, [sp, #172]	; 0xac
    e034:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
    e038:	992a      	ldr	r1, [sp, #168]	; 0xa8
    e03a:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
    e03e:	f24f 4298 	movw	r2, #62616	; 0xf498
    e042:	f2c0 0201 	movt	r2, #1
    e046:	6812      	ldr	r2, [r2, #0]
    e048:	466b      	mov	r3, sp
    e04a:	f04f 0c01 	mov.w	ip, #1
    e04e:	f8c3 c008 	str.w	ip, [r3, #8]
    e052:	605a      	str	r2, [r3, #4]
    e054:	f8c3 c000 	str.w	ip, [r3]
    e058:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    e05c:	2202      	movs	r2, #2
    e05e:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
    e062:	992c      	ldr	r1, [sp, #176]	; 0xb0
    e064:	f003 ff32 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e068:	e7ff      	b.n	e06a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2efa>
    e06a:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
    e06e:	f24f 6078 	movw	r0, #63096	; 0xf678
    e072:	f2c0 0001 	movt	r0, #1
    e076:	6802      	ldr	r2, [r0, #0]
    e078:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    e07c:	f005 f804 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e080:	e7ff      	b.n	e082 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f12>
    e082:	e7ff      	b.n	e084 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f14>
                self.i = (self.v[x] * 5).into();
    e084:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e088:	280f      	cmp	r0, #15
    e08a:	f200 83f9 	bhi.w	e880 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3710>
    e08e:	e7ff      	b.n	e090 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f20>
    e090:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e094:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e098:	1842      	adds	r2, r0, r1
    e09a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e09e:	2305      	movs	r3, #5
    e0a0:	fba2 2303 	umull	r2, r3, r2, r3
    e0a4:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    e0a8:	f04f 0e00 	mov.w	lr, #0
    e0ac:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    e0b0:	bf18      	it	ne
    e0b2:	f04f 0c01 	movne.w	ip, #1
    e0b6:	2b00      	cmp	r3, #0
    e0b8:	bf18      	it	ne
    e0ba:	2301      	movne	r3, #1
    e0bc:	ea43 030c 	orr.w	r3, r3, ip
    e0c0:	2b00      	cmp	r3, #0
    e0c2:	9229      	str	r2, [sp, #164]	; 0xa4
    e0c4:	f040 83e6 	bne.w	e894 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3724>
    e0c8:	e7ff      	b.n	e0ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f5a>
    e0ca:	9829      	ldr	r0, [sp, #164]	; 0xa4
    e0cc:	f003 ff4b 	bl	11f66 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>
    e0d0:	9028      	str	r0, [sp, #160]	; 0xa0
    e0d2:	e7ff      	b.n	e0d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f64>
    e0d4:	9828      	ldr	r0, [sp, #160]	; 0xa0
    e0d6:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    e0da:	8208      	strh	r0, [r1, #16]
        match (
    e0dc:	e315      	b.n	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    e0de:	2005      	movs	r0, #5
    e0e0:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
    e0e4:	f24f 4050 	movw	r0, #62544	; 0xf450
    e0e8:	f2c0 0001 	movt	r0, #1
    e0ec:	6801      	ldr	r1, [r0, #0]
    e0ee:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    e0f2:	f003 feaf 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e0f6:	9027      	str	r0, [sp, #156]	; 0x9c
    e0f8:	e01f      	b.n	e13a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fca>
    e0fa:	2001      	movs	r0, #1
    e0fc:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    e100:	e015      	b.n	e12e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fbe>
    e102:	2000      	movs	r0, #0
    e104:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    e108:	e011      	b.n	e12e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fbe>
    e10a:	2000      	movs	r0, #0
    e10c:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
    e110:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
    e114:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e118:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e11c:	f003 ff0f 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    e120:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
    e124:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
    e128:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
    e12c:	e00a      	b.n	e144 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fd4>
    e12e:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
    e132:	07c0      	lsls	r0, r0, #31
    e134:	2800      	cmp	r0, #0
    e136:	d112      	bne.n	e15e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fee>
    e138:	e055      	b.n	e1e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3076>
    e13a:	9827      	ldr	r0, [sp, #156]	; 0x9c
    e13c:	07c1      	lsls	r1, r0, #31
    e13e:	2900      	cmp	r1, #0
    e140:	d1e3      	bne.n	e10a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f9a>
    e142:	e7de      	b.n	e102 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f92>
    e144:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    e148:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
    e14c:	f003 fe82 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e150:	9026      	str	r0, [sp, #152]	; 0x98
    e152:	e7ff      	b.n	e154 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fe4>
    e154:	9826      	ldr	r0, [sp, #152]	; 0x98
    e156:	07c1      	lsls	r1, r0, #31
    e158:	2900      	cmp	r1, #0
    e15a:	d1ce      	bne.n	e0fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f8a>
    e15c:	e7d1      	b.n	e102 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f92>
                trace!("[{:04x}] LD B, Vx", self.pc);
    e15e:	f24f 50b8 	movw	r0, #62904	; 0xf5b8
    e162:	f2c0 0001 	movt	r0, #1
    e166:	6801      	ldr	r1, [r0, #0]
    e168:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e16c:	f100 0212 	add.w	r2, r0, #18
    e170:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
    e174:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
    e178:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
    e17c:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    e180:	f2c0 0301 	movt	r3, #1
    e184:	4610      	mov	r0, r2
    e186:	9125      	str	r1, [sp, #148]	; 0x94
    e188:	4619      	mov	r1, r3
    e18a:	f7fc fba9 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e18e:	9024      	str	r0, [sp, #144]	; 0x90
    e190:	9123      	str	r1, [sp, #140]	; 0x8c
    e192:	e7ff      	b.n	e194 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3024>
    e194:	9824      	ldr	r0, [sp, #144]	; 0x90
    e196:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
    e19a:	9923      	ldr	r1, [sp, #140]	; 0x8c
    e19c:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
    e1a0:	f24f 4298 	movw	r2, #62616	; 0xf498
    e1a4:	f2c0 0201 	movt	r2, #1
    e1a8:	6812      	ldr	r2, [r2, #0]
    e1aa:	466b      	mov	r3, sp
    e1ac:	f04f 0c01 	mov.w	ip, #1
    e1b0:	f8c3 c008 	str.w	ip, [r3, #8]
    e1b4:	605a      	str	r2, [r3, #4]
    e1b6:	f8c3 c000 	str.w	ip, [r3]
    e1ba:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    e1be:	2202      	movs	r2, #2
    e1c0:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
    e1c4:	9925      	ldr	r1, [sp, #148]	; 0x94
    e1c6:	f003 fe81 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e1ca:	e7ff      	b.n	e1cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x305c>
    e1cc:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
    e1d0:	f24f 50d8 	movw	r0, #62936	; 0xf5d8
    e1d4:	f2c0 0001 	movt	r0, #1
    e1d8:	6802      	ldr	r2, [r0, #0]
    e1da:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    e1de:	f004 ff53 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e1e2:	e7ff      	b.n	e1e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3074>
    e1e4:	e7ff      	b.n	e1e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3076>
                let bcd = self.v[x];
    e1e6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e1ea:	280f      	cmp	r0, #15
    e1ec:	f200 8308 	bhi.w	e800 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3690>
    e1f0:	e7ff      	b.n	e1f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3082>
    e1f2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e1f6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e1fa:	1842      	adds	r2, r0, r1
    e1fc:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e200:	4613      	mov	r3, r2
    e202:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
    e206:	f248 5c1f 	movw	ip, #34079	; 0x851f
    e20a:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
    e20e:	fba2 2c0c 	umull	r2, ip, r2, ip
    e212:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    e216:	f8b0 e010 	ldrh.w	lr, [r0, #16]
    e21a:	4674      	mov	r4, lr
    e21c:	2500      	movs	r5, #0
    e21e:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
    e222:	9322      	str	r3, [sp, #136]	; 0x88
    e224:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    e228:	9420      	str	r4, [sp, #128]	; 0x80
    e22a:	f040 82f3 	bne.w	e814 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36a4>
    e22e:	e7ff      	b.n	e230 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x30c0>
    e230:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e234:	9920      	ldr	r1, [sp, #128]	; 0x80
    e236:	1842      	adds	r2, r0, r1
    e238:	9b21      	ldr	r3, [sp, #132]	; 0x84
    e23a:	fa5f fc83 	uxtb.w	ip, r3
    e23e:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    e242:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    e246:	fbac 450e 	umull	r4, r5, ip, lr
    e24a:	08ed      	lsrs	r5, r5, #3
    e24c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    e250:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
    e254:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    e258:	9a22      	ldr	r2, [sp, #136]	; 0x88
    e25a:	fa5f fc82 	uxtb.w	ip, r2
    e25e:	fbac ce0e 	umull	ip, lr, ip, lr
    e262:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    e266:	8a05      	ldrh	r5, [r0, #16]
    e268:	3501      	adds	r5, #1
    e26a:	2600      	movs	r6, #0
    e26c:	2e00      	cmp	r6, #0
    e26e:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    e272:	951e      	str	r5, [sp, #120]	; 0x78
    e274:	f040 82d8 	bne.w	e828 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36b8>
    e278:	e7ff      	b.n	e27a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x310a>
    e27a:	2000      	movs	r0, #0
    e27c:	991e      	ldr	r1, [sp, #120]	; 0x78
    e27e:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    e282:	f040 82dd 	bne.w	e840 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36d0>
    e286:	e7ff      	b.n	e288 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3118>
    e288:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e28c:	991e      	ldr	r1, [sp, #120]	; 0x78
    e28e:	1842      	adds	r2, r0, r1
    e290:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    e292:	fa5f fc83 	uxtb.w	ip, r3
    e296:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    e29a:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    e29e:	fbac e40e 	umull	lr, r4, ip, lr
    e2a2:	08e4      	lsrs	r4, r4, #3
    e2a4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    e2a8:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    e2ac:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
    e2b0:	8a02      	ldrh	r2, [r0, #16]
    e2b2:	3202      	adds	r2, #2
    e2b4:	f04f 0c00 	mov.w	ip, #0
    e2b8:	f1bc 0f00 	cmp.w	ip, #0
    e2bc:	921d      	str	r2, [sp, #116]	; 0x74
    e2be:	f040 82c9 	bne.w	e854 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36e4>
    e2c2:	e7ff      	b.n	e2c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3154>
    e2c4:	2000      	movs	r0, #0
    e2c6:	991d      	ldr	r1, [sp, #116]	; 0x74
    e2c8:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    e2cc:	f040 82ce 	bne.w	e86c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36fc>
    e2d0:	e7ff      	b.n	e2d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3162>
    e2d2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e2d6:	991d      	ldr	r1, [sp, #116]	; 0x74
    e2d8:	1842      	adds	r2, r0, r1
    e2da:	9b22      	ldr	r3, [sp, #136]	; 0x88
    e2dc:	fa5f fc83 	uxtb.w	ip, r3
    e2e0:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    e2e4:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    e2e8:	fbac e40e 	umull	lr, r4, ip, lr
    e2ec:	08e4      	lsrs	r4, r4, #3
    e2ee:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    e2f2:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    e2f6:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
    e2fa:	e206      	b.n	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    e2fc:	2005      	movs	r0, #5
    e2fe:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
    e302:	f24f 4050 	movw	r0, #62544	; 0xf450
    e306:	f2c0 0001 	movt	r0, #1
    e30a:	6801      	ldr	r1, [r0, #0]
    e30c:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    e310:	f003 fda0 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e314:	901c      	str	r0, [sp, #112]	; 0x70
    e316:	e01f      	b.n	e358 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31e8>
    e318:	2001      	movs	r0, #1
    e31a:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    e31e:	e015      	b.n	e34c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31dc>
    e320:	2000      	movs	r0, #0
    e322:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    e326:	e011      	b.n	e34c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31dc>
    e328:	2000      	movs	r0, #0
    e32a:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
    e32e:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
    e332:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e336:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e33a:	f003 fe00 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    e33e:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
    e342:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
    e346:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
    e34a:	e00a      	b.n	e362 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31f2>
    e34c:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
    e350:	07c0      	lsls	r0, r0, #31
    e352:	2800      	cmp	r0, #0
    e354:	d112      	bne.n	e37c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x320c>
    e356:	e055      	b.n	e404 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3294>
    e358:	981c      	ldr	r0, [sp, #112]	; 0x70
    e35a:	07c1      	lsls	r1, r0, #31
    e35c:	2900      	cmp	r1, #0
    e35e:	d1e3      	bne.n	e328 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31b8>
    e360:	e7de      	b.n	e320 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31b0>
    e362:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    e366:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
    e36a:	f003 fd73 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e36e:	901b      	str	r0, [sp, #108]	; 0x6c
    e370:	e7ff      	b.n	e372 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3202>
    e372:	981b      	ldr	r0, [sp, #108]	; 0x6c
    e374:	07c1      	lsls	r1, r0, #31
    e376:	2900      	cmp	r1, #0
    e378:	d1ce      	bne.n	e318 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31a8>
    e37a:	e7d1      	b.n	e320 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31b0>
                trace!("[{:04x}] LD [I], Vx", self.pc);
    e37c:	f24f 5038 	movw	r0, #62776	; 0xf538
    e380:	f2c0 0001 	movt	r0, #1
    e384:	6801      	ldr	r1, [r0, #0]
    e386:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e38a:	f100 0212 	add.w	r2, r0, #18
    e38e:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
    e392:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
    e396:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
    e39a:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    e39e:	f2c0 0301 	movt	r3, #1
    e3a2:	4610      	mov	r0, r2
    e3a4:	911a      	str	r1, [sp, #104]	; 0x68
    e3a6:	4619      	mov	r1, r3
    e3a8:	f7fc fa9a 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e3ac:	9019      	str	r0, [sp, #100]	; 0x64
    e3ae:	9118      	str	r1, [sp, #96]	; 0x60
    e3b0:	e7ff      	b.n	e3b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3242>
    e3b2:	9819      	ldr	r0, [sp, #100]	; 0x64
    e3b4:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
    e3b8:	9918      	ldr	r1, [sp, #96]	; 0x60
    e3ba:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
    e3be:	f24f 4298 	movw	r2, #62616	; 0xf498
    e3c2:	f2c0 0201 	movt	r2, #1
    e3c6:	6812      	ldr	r2, [r2, #0]
    e3c8:	466b      	mov	r3, sp
    e3ca:	f04f 0c01 	mov.w	ip, #1
    e3ce:	f8c3 c008 	str.w	ip, [r3, #8]
    e3d2:	605a      	str	r2, [r3, #4]
    e3d4:	f8c3 c000 	str.w	ip, [r3]
    e3d8:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    e3dc:	2202      	movs	r2, #2
    e3de:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
    e3e2:	991a      	ldr	r1, [sp, #104]	; 0x68
    e3e4:	f003 fd72 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e3e8:	e7ff      	b.n	e3ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x327a>
    e3ea:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
    e3ee:	f24f 5058 	movw	r0, #62808	; 0xf558
    e3f2:	f2c0 0001 	movt	r0, #1
    e3f6:	6802      	ldr	r2, [r0, #0]
    e3f8:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    e3fc:	f004 fe44 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e400:	e7ff      	b.n	e402 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3292>
    e402:	e7ff      	b.n	e404 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3294>
                let x = x as usize;
    e404:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e408:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
    e40c:	1c41      	adds	r1, r0, #1
    e40e:	460a      	mov	r2, r1
    e410:	4281      	cmp	r1, r0
    e412:	9217      	str	r2, [sp, #92]	; 0x5c
    e414:	f0c0 81c9 	bcc.w	e7aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x363a>
    e418:	e7ff      	b.n	e41a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32aa>
    e41a:	2000      	movs	r0, #0
    e41c:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
    e420:	9817      	ldr	r0, [sp, #92]	; 0x5c
    e422:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
    e426:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
    e42a:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
    e42e:	f004 fbb8 	bl	12ba2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    e432:	9016      	str	r0, [sp, #88]	; 0x58
    e434:	9115      	str	r1, [sp, #84]	; 0x54
    e436:	e7ff      	b.n	e438 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32c8>
    e438:	9816      	ldr	r0, [sp, #88]	; 0x58
    e43a:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
    e43e:	9915      	ldr	r1, [sp, #84]	; 0x54
    e440:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
    e444:	e7ff      	b.n	e446 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32d6>
    e446:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
    e44a:	f004 fb1f 	bl	12a8c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    e44e:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
    e452:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
    e456:	e7ff      	b.n	e458 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32e8>
    e458:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
    e45c:	2800      	cmp	r0, #0
    e45e:	d001      	beq.n	e464 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32f4>
    e460:	e7ff      	b.n	e462 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32f2>
    e462:	e001      	b.n	e468 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32f8>
        match (
    e464:	e151      	b.n	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for i in 0..(x + 1) {
    e466:	defe      	udf	#254	; 0xfe
    e468:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
    e46c:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
    e470:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
    e474:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
    e478:	280f      	cmp	r0, #15
    e47a:	9014      	str	r0, [sp, #80]	; 0x50
    e47c:	f200 81a1 	bhi.w	e7c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3652>
    e480:	e7ff      	b.n	e482 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3312>
    e482:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e486:	9914      	ldr	r1, [sp, #80]	; 0x50
    e488:	1842      	adds	r2, r0, r1
    e48a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e48e:	8a03      	ldrh	r3, [r0, #16]
    e490:	eb03 0c01 	add.w	ip, r3, r1
    e494:	46e6      	mov	lr, ip
    e496:	459c      	cmp	ip, r3
    e498:	9213      	str	r2, [sp, #76]	; 0x4c
    e49a:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    e49e:	f0c0 8199 	bcc.w	e7d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3664>
    e4a2:	e7ff      	b.n	e4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3334>
    e4a4:	2000      	movs	r0, #0
    e4a6:	9912      	ldr	r1, [sp, #72]	; 0x48
    e4a8:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    e4ac:	f040 819e 	bne.w	e7ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x367c>
    e4b0:	e7ff      	b.n	e4b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3342>
    e4b2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e4b6:	9912      	ldr	r1, [sp, #72]	; 0x48
    e4b8:	1842      	adds	r2, r0, r1
    e4ba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e4bc:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
    e4c0:	e7c1      	b.n	e446 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32d6>
    e4c2:	2005      	movs	r0, #5
    e4c4:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
    e4c8:	f24f 4050 	movw	r0, #62544	; 0xf450
    e4cc:	f2c0 0001 	movt	r0, #1
    e4d0:	6801      	ldr	r1, [r0, #0]
    e4d2:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    e4d6:	f003 fcbd 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e4da:	9011      	str	r0, [sp, #68]	; 0x44
    e4dc:	e01f      	b.n	e51e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33ae>
    e4de:	2001      	movs	r0, #1
    e4e0:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    e4e4:	e015      	b.n	e512 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33a2>
    e4e6:	2000      	movs	r0, #0
    e4e8:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    e4ec:	e011      	b.n	e512 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33a2>
    e4ee:	2000      	movs	r0, #0
    e4f0:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
    e4f4:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
    e4f8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e4fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e500:	f003 fd1d 	bl	11f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    e504:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
    e508:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
    e50c:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
    e510:	e00a      	b.n	e528 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33b8>
    e512:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
    e516:	07c0      	lsls	r0, r0, #31
    e518:	2800      	cmp	r0, #0
    e51a:	d112      	bne.n	e542 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33d2>
    e51c:	e055      	b.n	e5ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x345a>
    e51e:	9811      	ldr	r0, [sp, #68]	; 0x44
    e520:	07c1      	lsls	r1, r0, #31
    e522:	2900      	cmp	r1, #0
    e524:	d1e3      	bne.n	e4ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x337e>
    e526:	e7de      	b.n	e4e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3376>
    e528:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    e52c:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
    e530:	f003 fc90 	bl	11e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e534:	9010      	str	r0, [sp, #64]	; 0x40
    e536:	e7ff      	b.n	e538 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33c8>
    e538:	9810      	ldr	r0, [sp, #64]	; 0x40
    e53a:	07c1      	lsls	r1, r0, #31
    e53c:	2900      	cmp	r1, #0
    e53e:	d1ce      	bne.n	e4de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x336e>
    e540:	e7d1      	b.n	e4e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3376>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
    e542:	f24f 4074 	movw	r0, #62580	; 0xf474
    e546:	f2c0 0001 	movt	r0, #1
    e54a:	6801      	ldr	r1, [r0, #0]
    e54c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e550:	f100 0212 	add.w	r2, r0, #18
    e554:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
    e558:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
    e55c:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
    e560:	f649 63b7 	movw	r3, #40631	; 0x9eb7
    e564:	f2c0 0301 	movt	r3, #1
    e568:	4610      	mov	r0, r2
    e56a:	910f      	str	r1, [sp, #60]	; 0x3c
    e56c:	4619      	mov	r1, r3
    e56e:	f7fc f9b7 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e572:	900e      	str	r0, [sp, #56]	; 0x38
    e574:	910d      	str	r1, [sp, #52]	; 0x34
    e576:	e7ff      	b.n	e578 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3408>
    e578:	980e      	ldr	r0, [sp, #56]	; 0x38
    e57a:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
    e57e:	990d      	ldr	r1, [sp, #52]	; 0x34
    e580:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
    e584:	f24f 4298 	movw	r2, #62616	; 0xf498
    e588:	f2c0 0201 	movt	r2, #1
    e58c:	6812      	ldr	r2, [r2, #0]
    e58e:	466b      	mov	r3, sp
    e590:	f04f 0c01 	mov.w	ip, #1
    e594:	f8c3 c008 	str.w	ip, [r3, #8]
    e598:	605a      	str	r2, [r3, #4]
    e59a:	f8c3 c000 	str.w	ip, [r3]
    e59e:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    e5a2:	2202      	movs	r2, #2
    e5a4:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
    e5a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e5aa:	f003 fc8f 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e5ae:	e7ff      	b.n	e5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3440>
    e5b0:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
    e5b4:	f24f 40d8 	movw	r0, #62680	; 0xf4d8
    e5b8:	f2c0 0001 	movt	r0, #1
    e5bc:	6802      	ldr	r2, [r0, #0]
    e5be:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    e5c2:	f004 fd61 	bl	13088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e5c6:	e7ff      	b.n	e5c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3458>
    e5c8:	e7ff      	b.n	e5ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x345a>
                let x = x as usize;
    e5ca:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e5ce:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
    e5d2:	1c41      	adds	r1, r0, #1
    e5d4:	460a      	mov	r2, r1
    e5d6:	4281      	cmp	r1, r0
    e5d8:	920c      	str	r2, [sp, #48]	; 0x30
    e5da:	f0c0 80bb 	bcc.w	e754 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35e4>
    e5de:	e7ff      	b.n	e5e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3470>
    e5e0:	2000      	movs	r0, #0
    e5e2:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
    e5e6:	980c      	ldr	r0, [sp, #48]	; 0x30
    e5e8:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
    e5ec:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
    e5f0:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
    e5f4:	f004 fad5 	bl	12ba2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    e5f8:	900b      	str	r0, [sp, #44]	; 0x2c
    e5fa:	910a      	str	r1, [sp, #40]	; 0x28
    e5fc:	e7ff      	b.n	e5fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x348e>
    e5fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e600:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
    e604:	990a      	ldr	r1, [sp, #40]	; 0x28
    e606:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
    e60a:	e7ff      	b.n	e60c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x349c>
    e60c:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
    e610:	f004 fa3c 	bl	12a8c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    e614:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
    e618:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
    e61c:	e7ff      	b.n	e61e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34ae>
    e61e:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
    e622:	2800      	cmp	r0, #0
    e624:	d001      	beq.n	e62a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34ba>
    e626:	e7ff      	b.n	e628 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34b8>
    e628:	e001      	b.n	e62e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34be>
        match (
    e62a:	e06e      	b.n	e70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for i in 0..(x + 1) {
    e62c:	defe      	udf	#254	; 0xfe
    e62e:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
    e632:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
    e636:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
    e63a:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
    e63e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    e642:	8a0a      	ldrh	r2, [r1, #16]
    e644:	1813      	adds	r3, r2, r0
    e646:	469c      	mov	ip, r3
    e648:	4293      	cmp	r3, r2
    e64a:	9009      	str	r0, [sp, #36]	; 0x24
    e64c:	f8cd c020 	str.w	ip, [sp, #32]
    e650:	f0c0 808c 	bcc.w	e76c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35fc>
    e654:	e7ff      	b.n	e656 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34e6>
    e656:	2000      	movs	r0, #0
    e658:	9908      	ldr	r1, [sp, #32]
    e65a:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    e65e:	f040 8091 	bne.w	e784 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3614>
    e662:	e7ff      	b.n	e664 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34f4>
    e664:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e668:	9908      	ldr	r1, [sp, #32]
    e66a:	1842      	adds	r2, r0, r1
    e66c:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    e670:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e672:	2b0f      	cmp	r3, #15
    e674:	9207      	str	r2, [sp, #28]
    e676:	f200 808f 	bhi.w	e798 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3628>
    e67a:	e7ff      	b.n	e67c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x350c>
    e67c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e680:	9909      	ldr	r1, [sp, #36]	; 0x24
    e682:	1842      	adds	r2, r0, r1
    e684:	9b07      	ldr	r3, [sp, #28]
    e686:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
    e68a:	e7bf      	b.n	e60c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x349c>
    e68c:	f649 61b7 	movw	r1, #40631	; 0x9eb7
    e690:	f2c0 0101 	movt	r1, #1
    e694:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
    e698:	f7fc f922 	bl	a8e0 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e69c:	9006      	str	r0, [sp, #24]
    e69e:	9105      	str	r1, [sp, #20]
    e6a0:	e7ff      	b.n	e6a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3532>
    e6a2:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
    e6a6:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
    e6aa:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
    e6ae:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
    e6b2:	9a06      	ldr	r2, [sp, #24]
    e6b4:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
    e6b8:	9b05      	ldr	r3, [sp, #20]
    e6ba:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
    e6be:	f240 0c3c 	movw	ip, #60	; 0x3c
    e6c2:	f2c0 0c02 	movt	ip, #2
    e6c6:	f8dc c000 	ldr.w	ip, [ip]
    e6ca:	46ee      	mov	lr, sp
    e6cc:	2402      	movs	r4, #2
    e6ce:	f8ce 4008 	str.w	r4, [lr, #8]
    e6d2:	f8ce c004 	str.w	ip, [lr, #4]
    e6d6:	f8ce 4000 	str.w	r4, [lr]
    e6da:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    e6de:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
    e6e2:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
    e6e6:	4622      	mov	r2, r4
    e6e8:	f003 fbf0 	bl	11ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e6ec:	e7ff      	b.n	e6ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x357e>
    e6ee:	f240 0060 	movw	r0, #96	; 0x60
    e6f2:	f2c0 0002 	movt	r0, #2
    e6f6:	f009 ffca 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    e6fa:	9004      	str	r0, [sp, #16]
    e6fc:	e7ff      	b.n	e6fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x358e>
    e6fe:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    e702:	9904      	ldr	r1, [sp, #16]
    e704:	f00a f800 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    e708:	defe      	udf	#254	; 0xfe
        }
    }
    e70a:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
    e70e:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
    e710:	f24f 30f8 	movw	r0, #62456	; 0xf3f8
    e714:	f2c0 0001 	movt	r0, #1
    e718:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e71c:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    e720:	f009 ffd2 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e724:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
    e726:	f24f 4020 	movw	r0, #62496	; 0xf420
    e72a:	f2c0 0001 	movt	r0, #1
    e72e:	f24f 4208 	movw	r2, #62472	; 0xf408
    e732:	f2c0 0201 	movt	r2, #1
    e736:	211c      	movs	r1, #28
    e738:	f009 ffb0 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e73c:	defe      	udf	#254	; 0xfe
    e73e:	f24f 403c 	movw	r0, #62524	; 0xf43c
    e742:	f2c0 0001 	movt	r0, #1
    e746:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e74a:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    e74e:	f009 ffbb 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e752:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    e754:	f24f 4020 	movw	r0, #62496	; 0xf420
    e758:	f2c0 0001 	movt	r0, #1
    e75c:	f24f 42dc 	movw	r2, #62684	; 0xf4dc
    e760:	f2c0 0201 	movt	r2, #1
    e764:	211c      	movs	r1, #28
    e766:	f009 ff99 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e76a:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
    e76c:	f24f 4020 	movw	r0, #62496	; 0xf420
    e770:	f2c0 0001 	movt	r0, #1
    e774:	f24f 42ec 	movw	r2, #62700	; 0xf4ec
    e778:	f2c0 0201 	movt	r2, #1
    e77c:	211c      	movs	r1, #28
    e77e:	f009 ff8d 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e782:	defe      	udf	#254	; 0xfe
    e784:	f24f 40fc 	movw	r0, #62716	; 0xf4fc
    e788:	f2c0 0001 	movt	r0, #1
    e78c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e790:	9908      	ldr	r1, [sp, #32]
    e792:	f009 ff99 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e796:	defe      	udf	#254	; 0xfe
    e798:	f24f 500c 	movw	r0, #62732	; 0xf50c
    e79c:	f2c0 0001 	movt	r0, #1
    e7a0:	2210      	movs	r2, #16
    e7a2:	9909      	ldr	r1, [sp, #36]	; 0x24
    e7a4:	f009 ff90 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7a8:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    e7aa:	f24f 4020 	movw	r0, #62496	; 0xf420
    e7ae:	f2c0 0001 	movt	r0, #1
    e7b2:	f24f 525c 	movw	r2, #62812	; 0xf55c
    e7b6:	f2c0 0201 	movt	r2, #1
    e7ba:	211c      	movs	r1, #28
    e7bc:	f009 ff6e 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e7c0:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
    e7c2:	f24f 506c 	movw	r0, #62828	; 0xf56c
    e7c6:	f2c0 0001 	movt	r0, #1
    e7ca:	2210      	movs	r2, #16
    e7cc:	9914      	ldr	r1, [sp, #80]	; 0x50
    e7ce:	f009 ff7b 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7d2:	defe      	udf	#254	; 0xfe
    e7d4:	f24f 4020 	movw	r0, #62496	; 0xf420
    e7d8:	f2c0 0001 	movt	r0, #1
    e7dc:	f24f 527c 	movw	r2, #62844	; 0xf57c
    e7e0:	f2c0 0201 	movt	r2, #1
    e7e4:	211c      	movs	r1, #28
    e7e6:	f009 ff59 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e7ea:	defe      	udf	#254	; 0xfe
    e7ec:	f24f 508c 	movw	r0, #62860	; 0xf58c
    e7f0:	f2c0 0001 	movt	r0, #1
    e7f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e7f8:	9912      	ldr	r1, [sp, #72]	; 0x48
    e7fa:	f009 ff65 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7fe:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
    e800:	f24f 50dc 	movw	r0, #62940	; 0xf5dc
    e804:	f2c0 0001 	movt	r0, #1
    e808:	2210      	movs	r2, #16
    e80a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e80e:	f009 ff5b 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e812:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
    e814:	f24f 50ec 	movw	r0, #62956	; 0xf5ec
    e818:	f2c0 0001 	movt	r0, #1
    e81c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e820:	9920      	ldr	r1, [sp, #128]	; 0x80
    e822:	f009 ff51 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e826:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    e828:	f24f 4020 	movw	r0, #62496	; 0xf420
    e82c:	f2c0 0001 	movt	r0, #1
    e830:	f24f 52fc 	movw	r2, #62972	; 0xf5fc
    e834:	f2c0 0201 	movt	r2, #1
    e838:	211c      	movs	r1, #28
    e83a:	f009 ff2f 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e83e:	defe      	udf	#254	; 0xfe
    e840:	f24f 600c 	movw	r0, #62988	; 0xf60c
    e844:	f2c0 0001 	movt	r0, #1
    e848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e84c:	991e      	ldr	r1, [sp, #120]	; 0x78
    e84e:	f009 ff3b 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e852:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
    e854:	f24f 4020 	movw	r0, #62496	; 0xf420
    e858:	f2c0 0001 	movt	r0, #1
    e85c:	f24f 621c 	movw	r2, #63004	; 0xf61c
    e860:	f2c0 0201 	movt	r2, #1
    e864:	211c      	movs	r1, #28
    e866:	f009 ff19 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e86a:	defe      	udf	#254	; 0xfe
    e86c:	f24f 602c 	movw	r0, #63020	; 0xf62c
    e870:	f2c0 0001 	movt	r0, #1
    e874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e878:	991d      	ldr	r1, [sp, #116]	; 0x74
    e87a:	f009 ff25 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e87e:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
    e880:	f24f 607c 	movw	r0, #63100	; 0xf67c
    e884:	f2c0 0001 	movt	r0, #1
    e888:	2210      	movs	r2, #16
    e88a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e88e:	f009 ff1b 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e892:	defe      	udf	#254	; 0xfe
    e894:	f24f 60a0 	movw	r0, #63136	; 0xf6a0
    e898:	f2c0 0001 	movt	r0, #1
    e89c:	f24f 628c 	movw	r2, #63116	; 0xf68c
    e8a0:	f2c0 0201 	movt	r2, #1
    e8a4:	2121      	movs	r1, #33	; 0x21
    e8a6:	f009 fef9 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e8aa:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
    e8ac:	f24f 7000 	movw	r0, #63232	; 0xf700
    e8b0:	f2c0 0001 	movt	r0, #1
    e8b4:	2210      	movs	r2, #16
    e8b6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8ba:	f009 ff05 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8be:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
    e8c0:	f24f 7050 	movw	r0, #63312	; 0xf750
    e8c4:	f2c0 0001 	movt	r0, #1
    e8c8:	2210      	movs	r2, #16
    e8ca:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8ce:	f009 fefb 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8d2:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
    e8d4:	f24f 70a0 	movw	r0, #63392	; 0xf7a0
    e8d8:	f2c0 0001 	movt	r0, #1
    e8dc:	2210      	movs	r2, #16
    e8de:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8e2:	f009 fef1 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8e6:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
    e8e8:	f24f 70f0 	movw	r0, #63472	; 0xf7f0
    e8ec:	f2c0 0001 	movt	r0, #1
    e8f0:	2210      	movs	r2, #16
    e8f2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8f6:	f009 fee7 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8fa:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
    e8fc:	f64f 0040 	movw	r0, #63552	; 0xf840
    e900:	f2c0 0001 	movt	r0, #1
    e904:	2210      	movs	r2, #16
    e906:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e90a:	f009 fedd 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e90e:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
    e910:	f64f 0090 	movw	r0, #63632	; 0xf890
    e914:	f2c0 0001 	movt	r0, #1
    e918:	2210      	movs	r2, #16
    e91a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e91e:	f009 fed3 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e922:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
    e924:	f64f 00d4 	movw	r0, #63700	; 0xf8d4
    e928:	f2c0 0001 	movt	r0, #1
    e92c:	2210      	movs	r2, #16
    e92e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e932:	f009 fec9 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e936:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
    e938:	f64f 1028 	movw	r0, #63784	; 0xf928
    e93c:	f2c0 0001 	movt	r0, #1
    e940:	2210      	movs	r2, #16
    e942:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e946:	f009 febf 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e94a:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
    e94c:	f64f 1038 	movw	r0, #63800	; 0xf938
    e950:	f2c0 0001 	movt	r0, #1
    e954:	2210      	movs	r2, #16
    e956:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e95a:	f009 feb5 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e95e:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
    e960:	f24f 4020 	movw	r0, #62496	; 0xf420
    e964:	f2c0 0001 	movt	r0, #1
    e968:	f64f 1248 	movw	r2, #63816	; 0xf948
    e96c:	f2c0 0201 	movt	r2, #1
    e970:	211c      	movs	r1, #28
    e972:	f009 fe93 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e976:	defe      	udf	#254	; 0xfe
    e978:	f64f 1058 	movw	r0, #63832	; 0xf958
    e97c:	f2c0 0001 	movt	r0, #1
    e980:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e984:	9967      	ldr	r1, [sp, #412]	; 0x19c
    e986:	f009 fe9f 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e98a:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
    e98c:	f24f 4020 	movw	r0, #62496	; 0xf420
    e990:	f2c0 0001 	movt	r0, #1
    e994:	f64f 1268 	movw	r2, #63848	; 0xf968
    e998:	f2c0 0201 	movt	r2, #1
    e99c:	211c      	movs	r1, #28
    e99e:	f009 fe7d 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e9a2:	defe      	udf	#254	; 0xfe
    e9a4:	f64f 1080 	movw	r0, #63872	; 0xf980
    e9a8:	f2c0 0001 	movt	r0, #1
    e9ac:	f64f 1268 	movw	r2, #63848	; 0xf968
    e9b0:	f2c0 0201 	movt	r2, #1
    e9b4:	2139      	movs	r1, #57	; 0x39
    e9b6:	f009 fe71 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e9ba:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
    e9bc:	f24f 4020 	movw	r0, #62496	; 0xf420
    e9c0:	f2c0 0001 	movt	r0, #1
    e9c4:	f64f 12bc 	movw	r2, #63932	; 0xf9bc
    e9c8:	f2c0 0201 	movt	r2, #1
    e9cc:	211c      	movs	r1, #28
    e9ce:	f009 fe65 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e9d2:	defe      	udf	#254	; 0xfe
    e9d4:	f64f 1080 	movw	r0, #63872	; 0xf980
    e9d8:	f2c0 0001 	movt	r0, #1
    e9dc:	f64f 12bc 	movw	r2, #63932	; 0xf9bc
    e9e0:	f2c0 0201 	movt	r2, #1
    e9e4:	2139      	movs	r1, #57	; 0x39
    e9e6:	f009 fe59 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e9ea:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
    e9ec:	f64f 10e0 	movw	r0, #63968	; 0xf9e0
    e9f0:	f2c0 0001 	movt	r0, #1
    e9f4:	f64f 12cc 	movw	r2, #63948	; 0xf9cc
    e9f8:	f2c0 0201 	movt	r2, #1
    e9fc:	2121      	movs	r1, #33	; 0x21
    e9fe:	f009 fe4d 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ea02:	defe      	udf	#254	; 0xfe
    ea04:	f64f 2020 	movw	r0, #64032	; 0xfa20
    ea08:	f2c0 0001 	movt	r0, #1
    ea0c:	f64f 2204 	movw	r2, #64004	; 0xfa04
    ea10:	f2c0 0201 	movt	r2, #1
    ea14:	2123      	movs	r1, #35	; 0x23
    ea16:	f009 fe41 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ea1a:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
    ea1c:	f64f 2084 	movw	r0, #64132	; 0xfa84
    ea20:	f2c0 0001 	movt	r0, #1
    ea24:	2210      	movs	r2, #16
    ea26:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea2a:	f009 fe4d 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ea2e:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
    ea30:	f64f 3054 	movw	r0, #64340	; 0xfb54
    ea34:	f2c0 0001 	movt	r0, #1
    ea38:	2210      	movs	r2, #16
    ea3a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea3e:	f009 fe43 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ea42:	defe      	udf	#254	; 0xfe
    ea44:	f64f 3064 	movw	r0, #64356	; 0xfb64
    ea48:	f2c0 0001 	movt	r0, #1
    ea4c:	2210      	movs	r2, #16
    ea4e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ea52:	f009 fe39 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ea56:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    ea58:	f64f 30b4 	movw	r0, #64436	; 0xfbb4
    ea5c:	f2c0 0001 	movt	r0, #1
    ea60:	2210      	movs	r2, #16
    ea62:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea66:	f009 fe2f 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ea6a:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
    ea6c:	f64f 30c4 	movw	r0, #64452	; 0xfbc4
    ea70:	f2c0 0001 	movt	r0, #1
    ea74:	2210      	movs	r2, #16
    ea76:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea7a:	f009 fe25 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ea7e:	defe      	udf	#254	; 0xfe
    ea80:	f64f 30d4 	movw	r0, #64468	; 0xfbd4
    ea84:	f2c0 0001 	movt	r0, #1
    ea88:	2210      	movs	r2, #16
    ea8a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ea8e:	f009 fe1b 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ea92:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    ea94:	f64f 4028 	movw	r0, #64552	; 0xfc28
    ea98:	f2c0 0001 	movt	r0, #1
    ea9c:	2210      	movs	r2, #16
    ea9e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    eaa2:	f009 fe11 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eaa6:	defe      	udf	#254	; 0xfe
    eaa8:	f64f 4038 	movw	r0, #64568	; 0xfc38
    eaac:	f2c0 0001 	movt	r0, #1
    eab0:	2210      	movs	r2, #16
    eab2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eab6:	f009 fe07 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eaba:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    eabc:	f64f 4048 	movw	r0, #64584	; 0xfc48
    eac0:	f2c0 0001 	movt	r0, #1
    eac4:	2210      	movs	r2, #16
    eac6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eaca:	f009 fdfd 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eace:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
    ead0:	f64f 4098 	movw	r0, #64664	; 0xfc98
    ead4:	f2c0 0001 	movt	r0, #1
    ead8:	2210      	movs	r2, #16
    eada:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eade:	f009 fdf3 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eae2:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
    eae4:	f64f 40a8 	movw	r0, #64680	; 0xfca8
    eae8:	f2c0 0001 	movt	r0, #1
    eaec:	2210      	movs	r2, #16
    eaee:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eaf2:	f009 fde9 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eaf6:	defe      	udf	#254	; 0xfe
    eaf8:	f64f 40b8 	movw	r0, #64696	; 0xfcb8
    eafc:	f2c0 0001 	movt	r0, #1
    eb00:	2210      	movs	r2, #16
    eb02:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb06:	f009 fddf 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb0a:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    eb0c:	f64f 5008 	movw	r0, #64776	; 0xfd08
    eb10:	f2c0 0001 	movt	r0, #1
    eb14:	2210      	movs	r2, #16
    eb16:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb1a:	f009 fdd5 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb1e:	defe      	udf	#254	; 0xfe
    eb20:	f64f 5018 	movw	r0, #64792	; 0xfd18
    eb24:	f2c0 0001 	movt	r0, #1
    eb28:	2210      	movs	r2, #16
    eb2a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    eb2e:	f009 fdcb 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb32:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    eb34:	f64f 5028 	movw	r0, #64808	; 0xfd28
    eb38:	f2c0 0001 	movt	r0, #1
    eb3c:	2210      	movs	r2, #16
    eb3e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb42:	f009 fdc1 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb46:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    eb48:	f64f 5078 	movw	r0, #64888	; 0xfd78
    eb4c:	f2c0 0001 	movt	r0, #1
    eb50:	2210      	movs	r2, #16
    eb52:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb56:	f009 fdb7 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb5a:	defe      	udf	#254	; 0xfe
    eb5c:	f64f 5088 	movw	r0, #64904	; 0xfd88
    eb60:	f2c0 0001 	movt	r0, #1
    eb64:	2210      	movs	r2, #16
    eb66:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    eb6a:	f009 fdad 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb6e:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    eb70:	f64f 5098 	movw	r0, #64920	; 0xfd98
    eb74:	f2c0 0001 	movt	r0, #1
    eb78:	2210      	movs	r2, #16
    eb7a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eb7e:	f009 fda3 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb82:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
    eb84:	f64f 50e8 	movw	r0, #65000	; 0xfde8
    eb88:	f2c0 0001 	movt	r0, #1
    eb8c:	2210      	movs	r2, #16
    eb8e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    eb92:	f009 fd99 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eb96:	defe      	udf	#254	; 0xfe
    eb98:	f64f 50f8 	movw	r0, #65016	; 0xfdf8
    eb9c:	f2c0 0001 	movt	r0, #1
    eba0:	2210      	movs	r2, #16
    eba2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    eba6:	f009 fd8f 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ebaa:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
    ebac:	f64f 6048 	movw	r0, #65096	; 0xfe48
    ebb0:	f2c0 0001 	movt	r0, #1
    ebb4:	2210      	movs	r2, #16
    ebb6:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ebba:	f009 fd85 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ebbe:	defe      	udf	#254	; 0xfe
    ebc0:	f64f 6058 	movw	r0, #65112	; 0xfe58
    ebc4:	f2c0 0001 	movt	r0, #1
    ebc8:	2210      	movs	r2, #16
    ebca:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ebce:	f009 fd7b 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ebd2:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
    ebd4:	f64f 60a8 	movw	r0, #65192	; 0xfea8
    ebd8:	f2c0 0001 	movt	r0, #1
    ebdc:	2210      	movs	r2, #16
    ebde:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ebe2:	f009 fd71 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ebe6:	defe      	udf	#254	; 0xfe
    ebe8:	f64f 60b8 	movw	r0, #65208	; 0xfeb8
    ebec:	f2c0 0001 	movt	r0, #1
    ebf0:	2210      	movs	r2, #16
    ebf2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ebf6:	f009 fd67 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ebfa:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
    ebfc:	f64f 7008 	movw	r0, #65288	; 0xff08
    ec00:	f2c0 0001 	movt	r0, #1
    ec04:	2210      	movs	r2, #16
    ec06:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ec0a:	f009 fd5d 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec0e:	defe      	udf	#254	; 0xfe
    ec10:	f64f 7018 	movw	r0, #65304	; 0xff18
    ec14:	f2c0 0001 	movt	r0, #1
    ec18:	2210      	movs	r2, #16
    ec1a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec1e:	f009 fd53 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec22:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
    ec24:	f64f 7068 	movw	r0, #65384	; 0xff68
    ec28:	f2c0 0001 	movt	r0, #1
    ec2c:	2210      	movs	r2, #16
    ec2e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec32:	f009 fd49 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec36:	defe      	udf	#254	; 0xfe
    ec38:	f64f 7078 	movw	r0, #65400	; 0xff78
    ec3c:	f2c0 0001 	movt	r0, #1
    ec40:	2210      	movs	r2, #16
    ec42:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec46:	f009 fd3f 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec4a:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
    ec4c:	f64f 70c8 	movw	r0, #65480	; 0xffc8
    ec50:	f2c0 0001 	movt	r0, #1
    ec54:	2210      	movs	r2, #16
    ec56:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec5a:	f009 fd35 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec5e:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
    ec60:	f240 00b0 	movw	r0, #176	; 0xb0
    ec64:	f2c0 0002 	movt	r0, #2
    ec68:	2210      	movs	r2, #16
    ec6a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec6e:	f009 fd2b 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec72:	defe      	udf	#254	; 0xfe
    ec74:	f240 00c0 	movw	r0, #192	; 0xc0
    ec78:	f2c0 0002 	movt	r0, #2
    ec7c:	2210      	movs	r2, #16
    ec7e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ec82:	f009 fd21 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec86:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
    ec88:	f240 1010 	movw	r0, #272	; 0x110
    ec8c:	f2c0 0002 	movt	r0, #2
    ec90:	2210      	movs	r2, #16
    ec92:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ec96:	f009 fd17 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ec9a:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
    ec9c:	f240 1060 	movw	r0, #352	; 0x160
    eca0:	f2c0 0002 	movt	r0, #2
    eca4:	2210      	movs	r2, #16
    eca6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ecaa:	f009 fd0d 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ecae:	defe      	udf	#254	; 0xfe

0000ecb0 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    ecb0:	b580      	push	{r7, lr}
    ecb2:	b086      	sub	sp, #24
    ecb4:	9104      	str	r1, [sp, #16]
    ecb6:	9205      	str	r2, [sp, #20]
    ecb8:	6809      	ldr	r1, [r1, #0]
    ecba:	6809      	ldr	r1, [r1, #0]
    ecbc:	2300      	movs	r3, #0
    ecbe:	9301      	str	r3, [sp, #4]
    ecc0:	9102      	str	r1, [sp, #8]
    ecc2:	9203      	str	r2, [sp, #12]
    ecc4:	9901      	ldr	r1, [sp, #4]
    ecc6:	9a02      	ldr	r2, [sp, #8]
    ecc8:	9b03      	ldr	r3, [sp, #12]
    ecca:	f000 fa9d 	bl	f208 <_ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E>
    ecce:	e7ff      	b.n	ecd0 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE+0x20>
    ecd0:	b006      	add	sp, #24
    ecd2:	bd80      	pop	{r7, pc}

0000ecd4 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6a25aae91f88a8abE>:
    ecd4:	b084      	sub	sp, #16
    ecd6:	9002      	str	r0, [sp, #8]
    ecd8:	9103      	str	r1, [sp, #12]
    ecda:	6800      	ldr	r0, [r0, #0]
    ecdc:	9000      	str	r0, [sp, #0]
    ecde:	9101      	str	r1, [sp, #4]
    ece0:	9800      	ldr	r0, [sp, #0]
    ece2:	9901      	ldr	r1, [sp, #4]
    ece4:	b004      	add	sp, #16
    ece6:	4770      	bx	lr

0000ece8 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>:
    fn jump(&mut self, pc: u16) {
    ece8:	b082      	sub	sp, #8
    ecea:	460a      	mov	r2, r1
    ecec:	9000      	str	r0, [sp, #0]
    ecee:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
    ecf2:	8241      	strh	r1, [r0, #18]
    }
    ecf4:	b002      	add	sp, #8
    ecf6:	4770      	bx	lr

0000ecf8 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE>:
    fn load(&mut self, rom: &[u8]) {
    ecf8:	b580      	push	{r7, lr}
    ecfa:	b08a      	sub	sp, #40	; 0x28
    ecfc:	9105      	str	r1, [sp, #20]
    ecfe:	9206      	str	r2, [sp, #24]
    ed00:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    ed02:	3047      	adds	r0, #71	; 0x47
    ed04:	9905      	ldr	r1, [sp, #20]
    ed06:	9a06      	ldr	r2, [sp, #24]
    ed08:	9004      	str	r0, [sp, #16]
    ed0a:	4608      	mov	r0, r1
    ed0c:	4611      	mov	r1, r2
    ed0e:	f003 ff21 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    ed12:	9003      	str	r0, [sp, #12]
    ed14:	e7ff      	b.n	ed16 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x1e>
    ed16:	9803      	ldr	r0, [sp, #12]
    ed18:	f500 7100 	add.w	r1, r0, #512	; 0x200
    ed1c:	460a      	mov	r2, r1
    ed1e:	4281      	cmp	r1, r0
    ed20:	9202      	str	r2, [sp, #8]
    ed22:	d318      	bcc.n	ed56 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x5e>
    ed24:	e7ff      	b.n	ed26 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x2e>
    ed26:	f44f 7000 	mov.w	r0, #512	; 0x200
    ed2a:	9007      	str	r0, [sp, #28]
    ed2c:	9802      	ldr	r0, [sp, #8]
    ed2e:	9008      	str	r0, [sp, #32]
    ed30:	9a07      	ldr	r2, [sp, #28]
    ed32:	9b08      	ldr	r3, [sp, #32]
    ed34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    ed38:	9804      	ldr	r0, [sp, #16]
    ed3a:	f000 fb7a 	bl	f432 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E>
    ed3e:	9001      	str	r0, [sp, #4]
    ed40:	9100      	str	r1, [sp, #0]
    ed42:	e7ff      	b.n	ed44 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x4c>
    ed44:	9a05      	ldr	r2, [sp, #20]
    ed46:	9b06      	ldr	r3, [sp, #24]
    ed48:	9801      	ldr	r0, [sp, #4]
    ed4a:	9900      	ldr	r1, [sp, #0]
    ed4c:	f7fa f893 	bl	8e76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    ed50:	e7ff      	b.n	ed52 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x5a>
    }
    ed52:	b00a      	add	sp, #40	; 0x28
    ed54:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    ed56:	f24f 4020 	movw	r0, #62496	; 0xf420
    ed5a:	f2c0 0001 	movt	r0, #1
    ed5e:	f240 22bc 	movw	r2, #700	; 0x2bc
    ed62:	f2c0 0202 	movt	r2, #2
    ed66:	211c      	movs	r1, #28
    ed68:	f009 fc98 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ed6c:	defe      	udf	#254	; 0xfe

0000ed6e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>:
    fn next(&mut self) {
    ed6e:	b580      	push	{r7, lr}
    ed70:	b084      	sub	sp, #16
    ed72:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
    ed74:	8a41      	ldrh	r1, [r0, #18]
    ed76:	2202      	movs	r2, #2
    ed78:	9002      	str	r0, [sp, #8]
    ed7a:	4608      	mov	r0, r1
    ed7c:	4611      	mov	r1, r2
    ed7e:	f000 fb1e 	bl	f3be <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>
    ed82:	9001      	str	r0, [sp, #4]
    ed84:	e7ff      	b.n	ed86 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE+0x18>
    ed86:	9802      	ldr	r0, [sp, #8]
    ed88:	9901      	ldr	r1, [sp, #4]
    ed8a:	f7ff ffad 	bl	ece8 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    ed8e:	e7ff      	b.n	ed90 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE+0x22>
    }
    ed90:	b004      	add	sp, #16
    ed92:	bd80      	pop	{r7, pc}

0000ed94 <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE>:
    fn push(&mut self, item: u16) {
    ed94:	b580      	push	{r7, lr}
    ed96:	b086      	sub	sp, #24
    ed98:	460a      	mov	r2, r1
    ed9a:	9004      	str	r0, [sp, #16]
    ed9c:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
    eda0:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    eda4:	460b      	mov	r3, r1
    eda6:	290f      	cmp	r1, #15
    eda8:	9003      	str	r0, [sp, #12]
    edaa:	9202      	str	r2, [sp, #8]
    edac:	9301      	str	r3, [sp, #4]
    edae:	d813      	bhi.n	edd8 <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE+0x44>
    edb0:	e7ff      	b.n	edb2 <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE+0x1e>
    edb2:	9803      	ldr	r0, [sp, #12]
    edb4:	9901      	ldr	r1, [sp, #4]
    edb6:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    edba:	9b02      	ldr	r3, [sp, #8]
    edbc:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
    edbe:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    edc2:	2101      	movs	r1, #1
    edc4:	f000 fa5e 	bl	f284 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE>
    edc8:	9000      	str	r0, [sp, #0]
    edca:	e7ff      	b.n	edcc <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE+0x38>
    edcc:	9800      	ldr	r0, [sp, #0]
    edce:	9903      	ldr	r1, [sp, #12]
    edd0:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
    edd4:	b006      	add	sp, #24
    edd6:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
    edd8:	f240 20cc 	movw	r0, #716	; 0x2cc
    eddc:	f2c0 0002 	movt	r0, #2
    ede0:	2210      	movs	r2, #16
    ede2:	9901      	ldr	r1, [sp, #4]
    ede4:	f009 fc70 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ede8:	defe      	udf	#254	; 0xfe

0000edea <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E>:
    fn tick(&mut self) {
    edea:	b580      	push	{r7, lr}
    edec:	b084      	sub	sp, #16
    edee:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
    edf0:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    edf4:	2900      	cmp	r1, #0
    edf6:	9002      	str	r0, [sp, #8]
    edf8:	d00f      	beq.n	ee1a <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x30>
    edfa:	e7ff      	b.n	edfc <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x12>
            self.dt -= 1;
    edfc:	9802      	ldr	r0, [sp, #8]
    edfe:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    ee02:	3901      	subs	r1, #1
    ee04:	b2ca      	uxtb	r2, r1
    ee06:	460b      	mov	r3, r1
    ee08:	428a      	cmp	r2, r1
    ee0a:	9301      	str	r3, [sp, #4]
    ee0c:	d129      	bne.n	ee62 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x78>
    ee0e:	e7ff      	b.n	ee10 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x26>
    ee10:	9801      	ldr	r0, [sp, #4]
    ee12:	9902      	ldr	r1, [sp, #8]
    ee14:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
    ee18:	e7ff      	b.n	ee1a <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x30>
        if self.st > 0 {
    ee1a:	9802      	ldr	r0, [sp, #8]
    ee1c:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    ee20:	2900      	cmp	r1, #0
    ee22:	d01c      	beq.n	ee5e <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x74>
    ee24:	e7ff      	b.n	ee26 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x3c>
            self.st -= 1;
    ee26:	9802      	ldr	r0, [sp, #8]
    ee28:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    ee2c:	3901      	subs	r1, #1
    ee2e:	b2ca      	uxtb	r2, r1
    ee30:	460b      	mov	r3, r1
    ee32:	428a      	cmp	r2, r1
    ee34:	9300      	str	r3, [sp, #0]
    ee36:	d120      	bne.n	ee7a <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x90>
    ee38:	e7ff      	b.n	ee3a <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x50>
    ee3a:	9800      	ldr	r0, [sp, #0]
    ee3c:	9902      	ldr	r1, [sp, #8]
    ee3e:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
    ee42:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
    ee46:	2a00      	cmp	r2, #0
    ee48:	d108      	bne.n	ee5c <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x72>
    ee4a:	e7ff      	b.n	ee4c <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x62>
    ee4c:	f241 0048 	movw	r0, #4168	; 0x1048
                self.hw.beep();
    ee50:	9902      	ldr	r1, [sp, #8]
    ee52:	4408      	add	r0, r1
    ee54:	f000 fed9 	bl	fc0a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha9851d0b0cdc4725E>
    ee58:	e7ff      	b.n	ee5a <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x70>
            if self.st == 0 {
    ee5a:	e7ff      	b.n	ee5c <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x72>
        if self.st > 0 {
    ee5c:	e7ff      	b.n	ee5e <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x74>
    }
    ee5e:	b004      	add	sp, #16
    ee60:	bd80      	pop	{r7, pc}
            self.dt -= 1;
    ee62:	f64f 10e0 	movw	r0, #63968	; 0xf9e0
    ee66:	f2c0 0001 	movt	r0, #1
    ee6a:	f240 22dc 	movw	r2, #732	; 0x2dc
    ee6e:	f2c0 0202 	movt	r2, #2
    ee72:	2121      	movs	r1, #33	; 0x21
    ee74:	f009 fc12 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ee78:	defe      	udf	#254	; 0xfe
            self.st -= 1;
    ee7a:	f64f 10e0 	movw	r0, #63968	; 0xf9e0
    ee7e:	f2c0 0001 	movt	r0, #1
    ee82:	f240 22ec 	movw	r2, #748	; 0x2ec
    ee86:	f2c0 0202 	movt	r2, #2
    ee8a:	2121      	movs	r1, #33	; 0x21
    ee8c:	f009 fc06 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ee90:	defe      	udf	#254	; 0xfe

0000ee92 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E>:
    fn sched(&mut self) {
    ee92:	b510      	push	{r4, lr}
    ee94:	b098      	sub	sp, #96	; 0x60
    ee96:	9015      	str	r0, [sp, #84]	; 0x54
    ee98:	f241 0148 	movw	r1, #4168	; 0x1048
        if self.hw.sched() {
    ee9c:	4401      	add	r1, r0
    ee9e:	900b      	str	r0, [sp, #44]	; 0x2c
    eea0:	4608      	mov	r0, r1
    eea2:	f000 feb6 	bl	fc12 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E>
    eea6:	900a      	str	r0, [sp, #40]	; 0x28
    eea8:	e7ff      	b.n	eeaa <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x18>
    eeaa:	980a      	ldr	r0, [sp, #40]	; 0x28
    eeac:	07c1      	lsls	r1, r0, #31
    eeae:	2900      	cmp	r1, #0
    eeb0:	d005      	beq.n	eebe <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x2c>
    eeb2:	e7ff      	b.n	eeb4 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x22>
            self.shutdown();
    eeb4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eeb6:	f000 f90e 	bl	f0d6 <_ZN8libchip814Chip8$LT$T$GT$8shutdown17hb4ffb829681b047bE>
    eeba:	e7ff      	b.n	eebc <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x2a>
        if self.hw.sched() {
    eebc:	e7ff      	b.n	eebe <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x2c>
        if let Some(t) = self.time {
    eebe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eec0:	6801      	ldr	r1, [r0, #0]
    eec2:	2901      	cmp	r1, #1
    eec4:	d009      	beq.n	eeda <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x48>
    eec6:	e7ff      	b.n	eec8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x36>
    eec8:	f241 0048 	movw	r0, #4168	; 0x1048
            self.time = Some(self.hw.clock());
    eecc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    eece:	4408      	add	r0, r1
    eed0:	f000 fe39 	bl	fb46 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>
    eed4:	9109      	str	r1, [sp, #36]	; 0x24
    eed6:	9008      	str	r0, [sp, #32]
    eed8:	e046      	b.n	ef68 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xd6>
        if let Some(t) = self.time {
    eeda:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eedc:	6881      	ldr	r1, [r0, #8]
    eede:	68c2      	ldr	r2, [r0, #12]
    eee0:	9217      	str	r2, [sp, #92]	; 0x5c
    eee2:	9116      	str	r1, [sp, #88]	; 0x58
    eee4:	f241 0348 	movw	r3, #4168	; 0x1048
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    eee8:	4418      	add	r0, r3
    eeea:	9107      	str	r1, [sp, #28]
    eeec:	9206      	str	r2, [sp, #24]
    eeee:	f000 fe2a 	bl	fb46 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>
    eef2:	9105      	str	r1, [sp, #20]
    eef4:	9004      	str	r0, [sp, #16]
    eef6:	e7ff      	b.n	eef8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x66>
    eef8:	9804      	ldr	r0, [sp, #16]
    eefa:	9905      	ldr	r1, [sp, #20]
    eefc:	9a07      	ldr	r2, [sp, #28]
    eefe:	9b06      	ldr	r3, [sp, #24]
    ef00:	f000 fa7f 	bl	f402 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E>
    ef04:	9103      	str	r1, [sp, #12]
    ef06:	9002      	str	r0, [sp, #8]
    ef08:	e7ff      	b.n	ef0a <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x78>
    ef0a:	f245 002b 	movw	r0, #20523	; 0x502b
    ef0e:	f2c0 00fe 	movt	r0, #254	; 0xfe
    ef12:	9902      	ldr	r1, [sp, #8]
    ef14:	1a08      	subs	r0, r1, r0
    ef16:	9a03      	ldr	r2, [sp, #12]
    ef18:	f172 0300 	sbcs.w	r3, r2, #0
    ef1c:	d323      	bcc.n	ef66 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xd4>
    ef1e:	e7ff      	b.n	ef20 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x8e>
                self.tick();
    ef20:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ef22:	f7ff ff62 	bl	edea <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E>
    ef26:	e7ff      	b.n	ef28 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x96>
    ef28:	f241 0048 	movw	r0, #4168	; 0x1048
                self.time = Some(self.hw.clock());
    ef2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ef2e:	4408      	add	r0, r1
    ef30:	f000 fe09 	bl	fb46 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>
    ef34:	9101      	str	r1, [sp, #4]
    ef36:	9000      	str	r0, [sp, #0]
    ef38:	e7ff      	b.n	ef3a <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xa8>
    ef3a:	9800      	ldr	r0, [sp, #0]
    ef3c:	900e      	str	r0, [sp, #56]	; 0x38
    ef3e:	9901      	ldr	r1, [sp, #4]
    ef40:	910f      	str	r1, [sp, #60]	; 0x3c
    ef42:	2200      	movs	r2, #0
    ef44:	920d      	str	r2, [sp, #52]	; 0x34
    ef46:	2201      	movs	r2, #1
    ef48:	920c      	str	r2, [sp, #48]	; 0x30
    ef4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ef4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ef4e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    ef52:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    ef56:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ef58:	6063      	str	r3, [r4, #4]
    ef5a:	6022      	str	r2, [r4, #0]
    ef5c:	f8c4 e00c 	str.w	lr, [r4, #12]
    ef60:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    ef64:	e7ff      	b.n	ef66 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xd4>
        if let Some(t) = self.time {
    ef66:	e015      	b.n	ef94 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x102>
            self.time = Some(self.hw.clock());
    ef68:	9808      	ldr	r0, [sp, #32]
    ef6a:	9012      	str	r0, [sp, #72]	; 0x48
    ef6c:	9909      	ldr	r1, [sp, #36]	; 0x24
    ef6e:	9113      	str	r1, [sp, #76]	; 0x4c
    ef70:	2200      	movs	r2, #0
    ef72:	9211      	str	r2, [sp, #68]	; 0x44
    ef74:	2201      	movs	r2, #1
    ef76:	9210      	str	r2, [sp, #64]	; 0x40
    ef78:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ef7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ef7c:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    ef80:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
    ef84:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ef86:	6063      	str	r3, [r4, #4]
    ef88:	6022      	str	r2, [r4, #0]
    ef8a:	f8c4 e00c 	str.w	lr, [r4, #12]
    ef8e:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
    ef92:	e7ff      	b.n	ef94 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x102>
    }
    ef94:	b018      	add	sp, #96	; 0x60
    ef96:	bd10      	pop	{r4, pc}

0000ef98 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E>:
    fn setup(&mut self) {
    ef98:	b580      	push	{r7, lr}
    ef9a:	b088      	sub	sp, #32
    ef9c:	9007      	str	r0, [sp, #28]
    ef9e:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
    efa2:	8241      	strh	r1, [r0, #18]
    efa4:	f241 0148 	movw	r1, #4168	; 0x1048
        self.hw.vram_setsize(DISPS);
    efa8:	4401      	add	r1, r0
    efaa:	f24f 42b4 	movw	r2, #62644	; 0xf4b4
    efae:	f2c0 0201 	movt	r2, #1
    efb2:	6813      	ldr	r3, [r2, #0]
    efb4:	6852      	ldr	r2, [r2, #4]
    efb6:	9005      	str	r0, [sp, #20]
    efb8:	4608      	mov	r0, r1
    efba:	4619      	mov	r1, r3
    efbc:	f000 fd6c 	bl	fa98 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE>
    efc0:	e7ff      	b.n	efc2 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x2a>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
    efc2:	9805      	ldr	r0, [sp, #20]
    efc4:	f100 0147 	add.w	r1, r0, #71	; 0x47
    efc8:	f647 001c 	movw	r0, #30748	; 0x781c
    efcc:	f2c0 0002 	movt	r0, #2
    efd0:	2250      	movs	r2, #80	; 0x50
    efd2:	9104      	str	r1, [sp, #16]
    efd4:	4611      	mov	r1, r2
    efd6:	f003 fdbd 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    efda:	9003      	str	r0, [sp, #12]
    efdc:	e7ff      	b.n	efde <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x46>
    efde:	9803      	ldr	r0, [sp, #12]
    efe0:	9006      	str	r0, [sp, #24]
    efe2:	9a06      	ldr	r2, [sp, #24]
    efe4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    efe8:	9804      	ldr	r0, [sp, #16]
    efea:	f7fa f841 	bl	9070 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
    efee:	9002      	str	r0, [sp, #8]
    eff0:	9101      	str	r1, [sp, #4]
    eff2:	e7ff      	b.n	eff4 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x5c>
    eff4:	f647 021c 	movw	r2, #30748	; 0x781c
    eff8:	f2c0 0202 	movt	r2, #2
    effc:	2350      	movs	r3, #80	; 0x50
    effe:	9802      	ldr	r0, [sp, #8]
    f000:	9901      	ldr	r1, [sp, #4]
    f002:	f7f9 ff38 	bl	8e76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    f006:	e7ff      	b.n	f008 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x70>
    f008:	f241 0047 	movw	r0, #4167	; 0x1047
    f00c:	2101      	movs	r1, #1
        self.running = true;
    f00e:	9a05      	ldr	r2, [sp, #20]
    f010:	5411      	strb	r1, [r2, r0]
    }
    f012:	b008      	add	sp, #32
    f014:	bd80      	pop	{r7, pc}

0000f016 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE>:
    fn waitkey(&mut self) -> u8 {
    f016:	b580      	push	{r7, lr}
    f018:	b08c      	sub	sp, #48	; 0x30
    f01a:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
    f01c:	9005      	str	r0, [sp, #20]
    f01e:	e7ff      	b.n	f020 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xa>
    f020:	f241 0047 	movw	r0, #4167	; 0x1047
    f024:	9905      	ldr	r1, [sp, #20]
    f026:	5c08      	ldrb	r0, [r1, r0]
    f028:	07c0      	lsls	r0, r0, #31
    f02a:	2800      	cmp	r0, #0
    f02c:	d104      	bne.n	f038 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x22>
    f02e:	e7ff      	b.n	f030 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x1a>
    f030:	2020      	movs	r0, #32
        return b' ';
    f032:	f88d 001b 	strb.w	r0, [sp, #27]
    f036:	e04a      	b.n	f0ce <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xb8>
            self.sched();
    f038:	9805      	ldr	r0, [sp, #20]
    f03a:	f7ff ff2a 	bl	ee92 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E>
    f03e:	e7ff      	b.n	f040 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x2a>
    f040:	2000      	movs	r0, #0
            for i in 0..0xf {
    f042:	f88d 001c 	strb.w	r0, [sp, #28]
    f046:	200f      	movs	r0, #15
    f048:	f88d 001d 	strb.w	r0, [sp, #29]
    f04c:	f89d 001c 	ldrb.w	r0, [sp, #28]
    f050:	f89d 101d 	ldrb.w	r1, [sp, #29]
    f054:	f000 f8e2 	bl	f21c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6e7fb991422ea45dE>
    f058:	9004      	str	r0, [sp, #16]
    f05a:	9103      	str	r1, [sp, #12]
    f05c:	e7ff      	b.n	f05e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x48>
    f05e:	9804      	ldr	r0, [sp, #16]
    f060:	f88d 0020 	strb.w	r0, [sp, #32]
    f064:	9903      	ldr	r1, [sp, #12]
    f066:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    f06a:	e7ff      	b.n	f06c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x56>
    f06c:	a808      	add	r0, sp, #32
    f06e:	f000 f864 	bl	f13a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E>
    f072:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    f076:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    f07a:	e7ff      	b.n	f07c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x66>
    f07c:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    f080:	07c1      	lsls	r1, r0, #31
    f082:	2900      	cmp	r1, #0
    f084:	d001      	beq.n	f08a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x74>
    f086:	e7ff      	b.n	f088 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x72>
    f088:	e001      	b.n	f08e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x78>
        while self.running {
    f08a:	e7c9      	b.n	f020 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xa>
            for i in 0..0xf {
    f08c:	defe      	udf	#254	; 0xfe
    f08e:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    f092:	4601      	mov	r1, r0
    f094:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    f098:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    f09c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    f0a0:	f241 0248 	movw	r2, #4168	; 0x1048
                if self.hw.key(i) {
    f0a4:	9b05      	ldr	r3, [sp, #20]
    f0a6:	441a      	add	r2, r3
    f0a8:	9002      	str	r0, [sp, #8]
    f0aa:	4610      	mov	r0, r2
    f0ac:	9a02      	ldr	r2, [sp, #8]
    f0ae:	9101      	str	r1, [sp, #4]
    f0b0:	4611      	mov	r1, r2
    f0b2:	f000 fb60 	bl	f776 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>
    f0b6:	9000      	str	r0, [sp, #0]
    f0b8:	e7ff      	b.n	f0ba <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xa4>
    f0ba:	9800      	ldr	r0, [sp, #0]
    f0bc:	07c1      	lsls	r1, r0, #31
    f0be:	2900      	cmp	r1, #0
    f0c0:	d101      	bne.n	f0c6 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xb0>
    f0c2:	e7ff      	b.n	f0c4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xae>
            for i in 0..0xf {
    f0c4:	e7d2      	b.n	f06c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x56>
                    return i;
    f0c6:	9801      	ldr	r0, [sp, #4]
    f0c8:	f88d 001b 	strb.w	r0, [sp, #27]
    f0cc:	e7ff      	b.n	f0ce <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xb8>
    }
    f0ce:	f89d 001b 	ldrb.w	r0, [sp, #27]
    f0d2:	b00c      	add	sp, #48	; 0x30
    f0d4:	bd80      	pop	{r7, pc}

0000f0d6 <_ZN8libchip814Chip8$LT$T$GT$8shutdown17hb4ffb829681b047bE>:
    fn shutdown(&mut self) {
    f0d6:	b081      	sub	sp, #4
    f0d8:	9000      	str	r0, [sp, #0]
    f0da:	f241 0147 	movw	r1, #4167	; 0x1047
    f0de:	2200      	movs	r2, #0
        self.running = false;
    f0e0:	5442      	strb	r2, [r0, r1]
    }
    f0e2:	b001      	add	sp, #4
    f0e4:	4770      	bx	lr

0000f0e6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E>:
    f0e6:	b08a      	sub	sp, #40	; 0x28
    f0e8:	9107      	str	r1, [sp, #28]
    f0ea:	9208      	str	r2, [sp, #32]
    f0ec:	f8d0 c000 	ldr.w	ip, [r0]
    f0f0:	f1bc 0f00 	cmp.w	ip, #0
    f0f4:	9305      	str	r3, [sp, #20]
    f0f6:	9204      	str	r2, [sp, #16]
    f0f8:	9103      	str	r1, [sp, #12]
    f0fa:	9002      	str	r0, [sp, #8]
    f0fc:	d011      	beq.n	f122 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x3c>
    f0fe:	e7ff      	b.n	f100 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x1a>
    f100:	9802      	ldr	r0, [sp, #8]
    f102:	6841      	ldr	r1, [r0, #4]
    f104:	9106      	str	r1, [sp, #24]
    f106:	4669      	mov	r1, sp
    f108:	9a05      	ldr	r2, [sp, #20]
    f10a:	600a      	str	r2, [r1, #0]
    f10c:	f240 23fc 	movw	r3, #764	; 0x2fc
    f110:	f2c0 0302 	movt	r3, #2
    f114:	aa06      	add	r2, sp, #24
    f116:	9803      	ldr	r0, [sp, #12]
    f118:	9904      	ldr	r1, [sp, #16]
    f11a:	f009 fa91 	bl	18640 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    f11e:	defe      	udf	#254	; 0xfe
    f120:	defe      	udf	#254	; 0xfe
    f122:	9802      	ldr	r0, [sp, #8]
    f124:	6841      	ldr	r1, [r0, #4]
    f126:	9109      	str	r1, [sp, #36]	; 0x24
    f128:	6802      	ldr	r2, [r0, #0]
    f12a:	2a00      	cmp	r2, #0
    f12c:	9101      	str	r1, [sp, #4]
    f12e:	d103      	bne.n	f138 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x52>
    f130:	e7ff      	b.n	f132 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x4c>
    f132:	9801      	ldr	r0, [sp, #4]
    f134:	b00a      	add	sp, #40	; 0x28
    f136:	4770      	bx	lr
    f138:	e7fb      	b.n	f132 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x4c>

0000f13a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E>:
    f13a:	b580      	push	{r7, lr}
    f13c:	b086      	sub	sp, #24
    f13e:	9005      	str	r0, [sp, #20]
    f140:	2100      	movs	r1, #0
    f142:	f88d 1013 	strb.w	r1, [sp, #19]
    f146:	1c41      	adds	r1, r0, #1
    f148:	9002      	str	r0, [sp, #8]
    f14a:	f003 f844 	bl	121d6 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h0340384168a45934E>
    f14e:	9001      	str	r0, [sp, #4]
    f150:	e7ff      	b.n	f152 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x18>
    f152:	9801      	ldr	r0, [sp, #4]
    f154:	07c1      	lsls	r1, r0, #31
    f156:	2900      	cmp	r1, #0
    f158:	d104      	bne.n	f164 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x2a>
    f15a:	e7ff      	b.n	f15c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x22>
    f15c:	2000      	movs	r0, #0
    f15e:	f88d 000c 	strb.w	r0, [sp, #12]
    f162:	e02c      	b.n	f1be <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x84>
    f164:	2001      	movs	r0, #1
    f166:	f88d 0013 	strb.w	r0, [sp, #19]
    f16a:	9902      	ldr	r1, [sp, #8]
    f16c:	9000      	str	r0, [sp, #0]
    f16e:	4608      	mov	r0, r1
    f170:	9900      	ldr	r1, [sp, #0]
    f172:	f000 f973 	bl	f45c <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E>
    f176:	f88d 1011 	strb.w	r1, [sp, #17]
    f17a:	f88d 0010 	strb.w	r0, [sp, #16]
    f17e:	e7ff      	b.n	f180 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x46>
    f180:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f184:	07c0      	lsls	r0, r0, #31
    f186:	2800      	cmp	r0, #0
    f188:	d104      	bne.n	f194 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x5a>
    f18a:	e7ff      	b.n	f18c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x52>
    f18c:	2000      	movs	r0, #0
    f18e:	f88d 000c 	strb.w	r0, [sp, #12]
    f192:	e029      	b.n	f1e8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xae>
    f194:	2000      	movs	r0, #0
    f196:	f88d 0013 	strb.w	r0, [sp, #19]
    f19a:	f89d 0011 	ldrb.w	r0, [sp, #17]
    f19e:	f88d 0012 	strb.w	r0, [sp, #18]
    f1a2:	f10d 0012 	add.w	r0, sp, #18
    f1a6:	9902      	ldr	r1, [sp, #8]
    f1a8:	f002 feea 	bl	11f80 <_ZN4core3mem4swap17h21afb25e2d195463E>
    f1ac:	e7ff      	b.n	f1ae <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x74>
    f1ae:	f89d 0012 	ldrb.w	r0, [sp, #18]
    f1b2:	f88d 000d 	strb.w	r0, [sp, #13]
    f1b6:	2001      	movs	r0, #1
    f1b8:	f88d 000c 	strb.w	r0, [sp, #12]
    f1bc:	e014      	b.n	f1e8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xae>
    f1be:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f1c2:	f89d 100d 	ldrb.w	r1, [sp, #13]
    f1c6:	b006      	add	sp, #24
    f1c8:	bd80      	pop	{r7, pc}
    f1ca:	2000      	movs	r0, #0
    f1cc:	f88d 0013 	strb.w	r0, [sp, #19]
    f1d0:	e7f5      	b.n	f1be <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x84>
    f1d2:	f89d 0013 	ldrb.w	r0, [sp, #19]
    f1d6:	07c0      	lsls	r0, r0, #31
    f1d8:	2800      	cmp	r0, #0
    f1da:	d0f6      	beq.n	f1ca <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x90>
    f1dc:	e7ff      	b.n	f1de <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xa4>
    f1de:	2000      	movs	r0, #0
    f1e0:	f88d 0013 	strb.w	r0, [sp, #19]
    f1e4:	e7f1      	b.n	f1ca <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x90>
    f1e6:	e7f0      	b.n	f1ca <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x90>
    f1e8:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f1ec:	07c0      	lsls	r0, r0, #31
    f1ee:	2800      	cmp	r0, #0
    f1f0:	d1ef      	bne.n	f1d2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x98>
    f1f2:	e7f8      	b.n	f1e6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xac>

0000f1f4 <_ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E>:
    f1f4:	b580      	push	{r7, lr}
    f1f6:	b084      	sub	sp, #16
    f1f8:	9101      	str	r1, [sp, #4]
    f1fa:	9202      	str	r2, [sp, #8]
    f1fc:	9303      	str	r3, [sp, #12]
    f1fe:	f000 f96a 	bl	f4d6 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h116a6636383259eeE>
    f202:	e7ff      	b.n	f204 <_ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E+0x10>
    f204:	b004      	add	sp, #16
    f206:	bd80      	pop	{r7, pc}

0000f208 <_ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E>:
    f208:	b580      	push	{r7, lr}
    f20a:	b084      	sub	sp, #16
    f20c:	9101      	str	r1, [sp, #4]
    f20e:	9202      	str	r2, [sp, #8]
    f210:	9303      	str	r3, [sp, #12]
    f212:	f000 f969 	bl	f4e8 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1647783578bb3807E>
    f216:	e7ff      	b.n	f218 <_ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E+0x10>
    f218:	b004      	add	sp, #16
    f21a:	bd80      	pop	{r7, pc}

0000f21c <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6e7fb991422ea45dE>:
    f21c:	b081      	sub	sp, #4
    f21e:	460a      	mov	r2, r1
    f220:	4603      	mov	r3, r0
    f222:	f88d 0000 	strb.w	r0, [sp]
    f226:	f88d 1001 	strb.w	r1, [sp, #1]
    f22a:	b001      	add	sp, #4
    f22c:	4770      	bx	lr

0000f22e <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E>:
    f22e:	b580      	push	{r7, lr}
    f230:	b086      	sub	sp, #24
    f232:	460a      	mov	r2, r1
    f234:	4603      	mov	r3, r0
    f236:	f88d 0014 	strb.w	r0, [sp, #20]
    f23a:	f88d 1015 	strb.w	r1, [sp, #21]
    f23e:	9203      	str	r2, [sp, #12]
    f240:	9302      	str	r3, [sp, #8]
    f242:	f000 f865 	bl	f310 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E>
    f246:	9001      	str	r0, [sp, #4]
    f248:	9100      	str	r1, [sp, #0]
    f24a:	e7ff      	b.n	f24c <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x1e>
    f24c:	9801      	ldr	r0, [sp, #4]
    f24e:	f88d 0016 	strb.w	r0, [sp, #22]
    f252:	9900      	ldr	r1, [sp, #0]
    f254:	f001 0201 	and.w	r2, r1, #1
    f258:	f88d 2017 	strb.w	r2, [sp, #23]
    f25c:	2a00      	cmp	r2, #0
    f25e:	d107      	bne.n	f270 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x42>
    f260:	e7ff      	b.n	f262 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x34>
    f262:	9801      	ldr	r0, [sp, #4]
    f264:	f88d 0011 	strb.w	r0, [sp, #17]
    f268:	2101      	movs	r1, #1
    f26a:	f88d 1010 	strb.w	r1, [sp, #16]
    f26e:	e003      	b.n	f278 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x4a>
    f270:	2000      	movs	r0, #0
    f272:	f88d 0010 	strb.w	r0, [sp, #16]
    f276:	e7ff      	b.n	f278 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x4a>
    f278:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f27c:	f89d 1011 	ldrb.w	r1, [sp, #17]
    f280:	b006      	add	sp, #24
    f282:	bd80      	pop	{r7, pc}

0000f284 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE>:
    f284:	b082      	sub	sp, #8
    f286:	460a      	mov	r2, r1
    f288:	4603      	mov	r3, r0
    f28a:	f88d 0005 	strb.w	r0, [sp, #5]
    f28e:	f88d 1006 	strb.w	r1, [sp, #6]
    f292:	4408      	add	r0, r1
    f294:	f88d 0007 	strb.w	r0, [sp, #7]
    f298:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f29c:	9000      	str	r0, [sp, #0]
    f29e:	e7ff      	b.n	f2a0 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE+0x1c>
    f2a0:	9800      	ldr	r0, [sp, #0]
    f2a2:	b002      	add	sp, #8
    f2a4:	4770      	bx	lr

0000f2a6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E>:
    f2a6:	b084      	sub	sp, #16
    f2a8:	4602      	mov	r2, r0
    f2aa:	f88d 0007 	strb.w	r0, [sp, #7]
    f2ae:	9102      	str	r1, [sp, #8]
    f2b0:	f001 0107 	and.w	r1, r1, #7
    f2b4:	4088      	lsls	r0, r1
    f2b6:	f88d 000f 	strb.w	r0, [sp, #15]
    f2ba:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f2be:	9000      	str	r0, [sp, #0]
    f2c0:	e7ff      	b.n	f2c2 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E+0x1c>
    f2c2:	9800      	ldr	r0, [sp, #0]
    f2c4:	b004      	add	sp, #16
    f2c6:	4770      	bx	lr

0000f2c8 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE>:
    f2c8:	b084      	sub	sp, #16
    f2ca:	b2c2      	uxtb	r2, r0
    f2cc:	4603      	mov	r3, r0
    f2ce:	f88d 0007 	strb.w	r0, [sp, #7]
    f2d2:	9102      	str	r1, [sp, #8]
    f2d4:	f001 0007 	and.w	r0, r1, #7
    f2d8:	fa22 f000 	lsr.w	r0, r2, r0
    f2dc:	f88d 000f 	strb.w	r0, [sp, #15]
    f2e0:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f2e4:	9000      	str	r0, [sp, #0]
    f2e6:	e7ff      	b.n	f2e8 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE+0x20>
    f2e8:	9800      	ldr	r0, [sp, #0]
    f2ea:	b004      	add	sp, #16
    f2ec:	4770      	bx	lr

0000f2ee <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE>:
    f2ee:	b082      	sub	sp, #8
    f2f0:	460a      	mov	r2, r1
    f2f2:	4603      	mov	r3, r0
    f2f4:	f88d 0005 	strb.w	r0, [sp, #5]
    f2f8:	f88d 1006 	strb.w	r1, [sp, #6]
    f2fc:	1a40      	subs	r0, r0, r1
    f2fe:	f88d 0007 	strb.w	r0, [sp, #7]
    f302:	f89d 0007 	ldrb.w	r0, [sp, #7]
    f306:	9000      	str	r0, [sp, #0]
    f308:	e7ff      	b.n	f30a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE+0x1c>
    f30a:	9800      	ldr	r0, [sp, #0]
    f30c:	b002      	add	sp, #8
    f30e:	4770      	bx	lr

0000f310 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E>:
    f310:	b084      	sub	sp, #16
    f312:	b2c2      	uxtb	r2, r0
    f314:	460b      	mov	r3, r1
    f316:	4684      	mov	ip, r0
    f318:	f88d 000a 	strb.w	r0, [sp, #10]
    f31c:	f88d 100b 	strb.w	r1, [sp, #11]
    f320:	fa52 f081 	uxtab	r0, r2, r1
    f324:	b2c1      	uxtb	r1, r0
    f326:	1a09      	subs	r1, r1, r0
    f328:	bf18      	it	ne
    f32a:	2101      	movne	r1, #1
    f32c:	f88d 000c 	strb.w	r0, [sp, #12]
    f330:	f88d 100d 	strb.w	r1, [sp, #13]
    f334:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f338:	f89d 100d 	ldrb.w	r1, [sp, #13]
    f33c:	9001      	str	r0, [sp, #4]
    f33e:	9100      	str	r1, [sp, #0]
    f340:	e7ff      	b.n	f342 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E+0x32>
    f342:	9801      	ldr	r0, [sp, #4]
    f344:	f88d 000e 	strb.w	r0, [sp, #14]
    f348:	9900      	ldr	r1, [sp, #0]
    f34a:	f001 0201 	and.w	r2, r1, #1
    f34e:	f88d 200f 	strb.w	r2, [sp, #15]
    f352:	f88d 0008 	strb.w	r0, [sp, #8]
    f356:	f88d 2009 	strb.w	r2, [sp, #9]
    f35a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f35e:	f89d 1009 	ldrb.w	r1, [sp, #9]
    f362:	b004      	add	sp, #16
    f364:	4770      	bx	lr

0000f366 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE>:
    f366:	b580      	push	{r7, lr}
    f368:	b084      	sub	sp, #16
    f36a:	b2ca      	uxtb	r2, r1
    f36c:	b2c3      	uxtb	r3, r0
    f36e:	468c      	mov	ip, r1
    f370:	4686      	mov	lr, r0
    f372:	f88d 000a 	strb.w	r0, [sp, #10]
    f376:	f88d 100b 	strb.w	r1, [sp, #11]
    f37a:	1a98      	subs	r0, r3, r2
    f37c:	b2c1      	uxtb	r1, r0
    f37e:	1a09      	subs	r1, r1, r0
    f380:	bf18      	it	ne
    f382:	2101      	movne	r1, #1
    f384:	f88d 000c 	strb.w	r0, [sp, #12]
    f388:	f88d 100d 	strb.w	r1, [sp, #13]
    f38c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f390:	f89d 100d 	ldrb.w	r1, [sp, #13]
    f394:	9001      	str	r0, [sp, #4]
    f396:	9100      	str	r1, [sp, #0]
    f398:	e7ff      	b.n	f39a <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE+0x34>
    f39a:	9801      	ldr	r0, [sp, #4]
    f39c:	f88d 000e 	strb.w	r0, [sp, #14]
    f3a0:	9900      	ldr	r1, [sp, #0]
    f3a2:	f001 0201 	and.w	r2, r1, #1
    f3a6:	f88d 200f 	strb.w	r2, [sp, #15]
    f3aa:	f88d 0008 	strb.w	r0, [sp, #8]
    f3ae:	f88d 2009 	strb.w	r2, [sp, #9]
    f3b2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f3b6:	f89d 1009 	ldrb.w	r1, [sp, #9]
    f3ba:	b004      	add	sp, #16
    f3bc:	bd80      	pop	{r7, pc}

0000f3be <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>:
    f3be:	b083      	sub	sp, #12
    f3c0:	460a      	mov	r2, r1
    f3c2:	4603      	mov	r3, r0
    f3c4:	f8ad 0006 	strh.w	r0, [sp, #6]
    f3c8:	f8ad 1008 	strh.w	r1, [sp, #8]
    f3cc:	4408      	add	r0, r1
    f3ce:	f8ad 000a 	strh.w	r0, [sp, #10]
    f3d2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    f3d6:	9000      	str	r0, [sp, #0]
    f3d8:	e7ff      	b.n	f3da <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E+0x1c>
    f3da:	9800      	ldr	r0, [sp, #0]
    f3dc:	b003      	add	sp, #12
    f3de:	4770      	bx	lr

0000f3e0 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>:
    f3e0:	b083      	sub	sp, #12
    f3e2:	460a      	mov	r2, r1
    f3e4:	4603      	mov	r3, r0
    f3e6:	f8ad 0006 	strh.w	r0, [sp, #6]
    f3ea:	f8ad 1008 	strh.w	r1, [sp, #8]
    f3ee:	1a40      	subs	r0, r0, r1
    f3f0:	f8ad 000a 	strh.w	r0, [sp, #10]
    f3f4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    f3f8:	9000      	str	r0, [sp, #0]
    f3fa:	e7ff      	b.n	f3fc <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E+0x1c>
    f3fc:	9800      	ldr	r0, [sp, #0]
    f3fe:	b003      	add	sp, #12
    f400:	4770      	bx	lr

0000f402 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E>:
    f402:	b5b0      	push	{r4, r5, r7, lr}
    f404:	b088      	sub	sp, #32
    f406:	469c      	mov	ip, r3
    f408:	4696      	mov	lr, r2
    f40a:	460c      	mov	r4, r1
    f40c:	4605      	mov	r5, r0
    f40e:	9103      	str	r1, [sp, #12]
    f410:	9002      	str	r0, [sp, #8]
    f412:	9305      	str	r3, [sp, #20]
    f414:	9204      	str	r2, [sp, #16]
    f416:	1a80      	subs	r0, r0, r2
    f418:	eb61 0103 	sbc.w	r1, r1, r3
    f41c:	9107      	str	r1, [sp, #28]
    f41e:	9006      	str	r0, [sp, #24]
    f420:	9806      	ldr	r0, [sp, #24]
    f422:	9907      	ldr	r1, [sp, #28]
    f424:	9001      	str	r0, [sp, #4]
    f426:	9100      	str	r1, [sp, #0]
    f428:	e7ff      	b.n	f42a <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E+0x28>
    f42a:	9801      	ldr	r0, [sp, #4]
    f42c:	9900      	ldr	r1, [sp, #0]
    f42e:	b008      	add	sp, #32
    f430:	bdb0      	pop	{r4, r5, r7, pc}

0000f432 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E>:
    f432:	b580      	push	{r7, lr}
    f434:	b088      	sub	sp, #32
    f436:	9004      	str	r0, [sp, #16]
    f438:	9105      	str	r1, [sp, #20]
    f43a:	9206      	str	r2, [sp, #24]
    f43c:	9307      	str	r3, [sp, #28]
    f43e:	9003      	str	r0, [sp, #12]
    f440:	4610      	mov	r0, r2
    f442:	9102      	str	r1, [sp, #8]
    f444:	4619      	mov	r1, r3
    f446:	9a03      	ldr	r2, [sp, #12]
    f448:	9b02      	ldr	r3, [sp, #8]
    f44a:	f7f9 fc57 	bl	8cfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    f44e:	9001      	str	r0, [sp, #4]
    f450:	9100      	str	r1, [sp, #0]
    f452:	e7ff      	b.n	f454 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E+0x22>
    f454:	9801      	ldr	r0, [sp, #4]
    f456:	9900      	ldr	r1, [sp, #0]
    f458:	b008      	add	sp, #32
    f45a:	bd80      	pop	{r7, pc}

0000f45c <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E>:
    f45c:	b580      	push	{r7, lr}
    f45e:	b088      	sub	sp, #32
    f460:	9005      	str	r0, [sp, #20]
    f462:	9106      	str	r1, [sp, #24]
    f464:	9002      	str	r0, [sp, #8]
    f466:	4608      	mov	r0, r1
    f468:	f008 fa2a 	bl	178c0 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE>
    f46c:	f88d 1011 	strb.w	r1, [sp, #17]
    f470:	f88d 0010 	strb.w	r0, [sp, #16]
    f474:	e7ff      	b.n	f476 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x1a>
    f476:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f47a:	07c1      	lsls	r1, r0, #31
    f47c:	2900      	cmp	r1, #0
    f47e:	d005      	beq.n	f48c <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x30>
    f480:	e7ff      	b.n	f482 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x26>
    f482:	2000      	movs	r0, #0
    f484:	f88d 000c 	strb.w	r0, [sp, #12]
    f488:	e011      	b.n	f4ae <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x52>
    f48a:	defe      	udf	#254	; 0xfe
    f48c:	f89d 0011 	ldrb.w	r0, [sp, #17]
    f490:	f88d 001f 	strb.w	r0, [sp, #31]
    f494:	9902      	ldr	r1, [sp, #8]
    f496:	780a      	ldrb	r2, [r1, #0]
    f498:	9001      	str	r0, [sp, #4]
    f49a:	4610      	mov	r0, r2
    f49c:	9901      	ldr	r1, [sp, #4]
    f49e:	f7ff fec6 	bl	f22e <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E>
    f4a2:	f88d 100d 	strb.w	r1, [sp, #13]
    f4a6:	f88d 000c 	strb.w	r0, [sp, #12]
    f4aa:	e7ff      	b.n	f4ac <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x50>
    f4ac:	e7ff      	b.n	f4ae <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x52>
    f4ae:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f4b2:	f89d 100d 	ldrb.w	r1, [sp, #13]
    f4b6:	b008      	add	sp, #32
    f4b8:	bd80      	pop	{r7, pc}

0000f4ba <_ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E>:
    f4ba:	b580      	push	{r7, lr}
    f4bc:	b084      	sub	sp, #16
    f4be:	680a      	ldr	r2, [r1, #0]
    f4c0:	684b      	ldr	r3, [r1, #4]
    f4c2:	6889      	ldr	r1, [r1, #8]
    f4c4:	9103      	str	r1, [sp, #12]
    f4c6:	9302      	str	r3, [sp, #8]
    f4c8:	9201      	str	r2, [sp, #4]
    f4ca:	a901      	add	r1, sp, #4
    f4cc:	f002 fe03 	bl	120d6 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E>
    f4d0:	e7ff      	b.n	f4d2 <_ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E+0x18>
    f4d2:	b004      	add	sp, #16
    f4d4:	bd80      	pop	{r7, pc}

0000f4d6 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h116a6636383259eeE>:
    f4d6:	b083      	sub	sp, #12
    f4d8:	9100      	str	r1, [sp, #0]
    f4da:	9201      	str	r2, [sp, #4]
    f4dc:	9302      	str	r3, [sp, #8]
    f4de:	6001      	str	r1, [r0, #0]
    f4e0:	6042      	str	r2, [r0, #4]
    f4e2:	6083      	str	r3, [r0, #8]
    f4e4:	b003      	add	sp, #12
    f4e6:	4770      	bx	lr

0000f4e8 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1647783578bb3807E>:
    f4e8:	b083      	sub	sp, #12
    f4ea:	9100      	str	r1, [sp, #0]
    f4ec:	9201      	str	r2, [sp, #4]
    f4ee:	9302      	str	r3, [sp, #8]
    f4f0:	6001      	str	r1, [r0, #0]
    f4f2:	6042      	str	r2, [r0, #4]
    f4f4:	6083      	str	r3, [r0, #8]
    f4f6:	b003      	add	sp, #12
    f4f8:	4770      	bx	lr

0000f4fa <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc3726000bdb855aE>:
    f4fa:	680a      	ldr	r2, [r1, #0]
    f4fc:	684b      	ldr	r3, [r1, #4]
    f4fe:	6889      	ldr	r1, [r1, #8]
    f500:	6081      	str	r1, [r0, #8]
    f502:	6043      	str	r3, [r0, #4]
    f504:	6002      	str	r2, [r0, #0]
    f506:	4770      	bx	lr

0000f508 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E>:
    f508:	b580      	push	{r7, lr}
    f50a:	b086      	sub	sp, #24
    f50c:	9105      	str	r1, [sp, #20]
    f50e:	9004      	str	r0, [sp, #16]
    f510:	4608      	mov	r0, r1
    f512:	9103      	str	r1, [sp, #12]
    f514:	f003 faba 	bl	12a8c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f518:	9002      	str	r0, [sp, #8]
    f51a:	9101      	str	r1, [sp, #4]
    f51c:	e7ff      	b.n	f51e <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E+0x16>
    f51e:	9803      	ldr	r0, [sp, #12]
    f520:	f100 0308 	add.w	r3, r0, #8
    f524:	9804      	ldr	r0, [sp, #16]
    f526:	9902      	ldr	r1, [sp, #8]
    f528:	9a01      	ldr	r2, [sp, #4]
    f52a:	f7f9 f99f 	bl	886c <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE>
    f52e:	e7ff      	b.n	f530 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E+0x28>
    f530:	b006      	add	sp, #24
    f532:	bd80      	pop	{r7, pc}

0000f534 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE>:
    f534:	b580      	push	{r7, lr}
    f536:	b086      	sub	sp, #24
    f538:	9105      	str	r1, [sp, #20]
    f53a:	9004      	str	r0, [sp, #16]
    f53c:	4608      	mov	r0, r1
    f53e:	9103      	str	r1, [sp, #12]
    f540:	f003 faa4 	bl	12a8c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f544:	9002      	str	r0, [sp, #8]
    f546:	9101      	str	r1, [sp, #4]
    f548:	e7ff      	b.n	f54a <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE+0x16>
    f54a:	9803      	ldr	r0, [sp, #12]
    f54c:	f100 0308 	add.w	r3, r0, #8
    f550:	9804      	ldr	r0, [sp, #16]
    f552:	9902      	ldr	r1, [sp, #8]
    f554:	9a01      	ldr	r2, [sp, #4]
    f556:	f7f9 f93c 	bl	87d2 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE>
    f55a:	e7ff      	b.n	f55c <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE+0x28>
    f55c:	b006      	add	sp, #24
    f55e:	bd80      	pop	{r7, pc}

0000f560 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E>:
/// CHIP8 Virtual Pixel size, in Physical Pixels
const PIXEL_WIDTH: usize = 3;
const PIXEL_HEIGHT: usize = 5;

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    f560:	b510      	push	{r4, lr}
    f562:	b0ac      	sub	sp, #176	; 0xb0
    console::print("Rust CHIP8\n"); console::flush();
    f564:	f240 300c 	movw	r0, #780	; 0x30c
    f568:	f2c0 0002 	movt	r0, #2
    f56c:	210b      	movs	r1, #11
    f56e:	f7f9 fdc3 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f572:	e7ff      	b.n	f574 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x14>
    f574:	f7f9 fe06 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f578:	e7ff      	b.n	f57a <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x1a>
    f57a:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    f57c:	900f      	str	r0, [sp, #60]	; 0x3c
    f57e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    f580:	f003 f80f 	bl	125a2 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    f584:	900e      	str	r0, [sp, #56]	; 0x38
    f586:	910d      	str	r1, [sp, #52]	; 0x34
    f588:	e7ff      	b.n	f58a <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x2a>
    f58a:	20ef      	movs	r0, #239	; 0xef
    f58c:	900c      	str	r0, [sp, #48]	; 0x30
    f58e:	990c      	ldr	r1, [sp, #48]	; 0x30
    f590:	f003 f807 	bl	125a2 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    f594:	900b      	str	r0, [sp, #44]	; 0x2c
    f596:	910a      	str	r1, [sp, #40]	; 0x28
    f598:	e7ff      	b.n	f59a <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x3a>
    let background = Rectangle::<Rgb565>
    f59a:	4668      	mov	r0, sp
    f59c:	990a      	ldr	r1, [sp, #40]	; 0x28
    f59e:	6001      	str	r1, [r0, #0]
    f5a0:	a818      	add	r0, sp, #96	; 0x60
    f5a2:	990e      	ldr	r1, [sp, #56]	; 0x38
    f5a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    f5a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5a8:	f008 f816 	bl	175d8 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    f5ac:	e7ff      	b.n	f5ae <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x4e>
    f5ae:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    f5b0:	f88d 0080 	strb.w	r0, [sp, #128]	; 0x80
    f5b4:	f88d 0081 	strb.w	r0, [sp, #129]	; 0x81
    f5b8:	f88d 0082 	strb.w	r0, [sp, #130]	; 0x82
    f5bc:	f89d 0082 	ldrb.w	r0, [sp, #130]	; 0x82
    f5c0:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
    f5c4:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    f5c8:	f003 f866 	bl	12698 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    f5cc:	9009      	str	r0, [sp, #36]	; 0x24
    f5ce:	e7ff      	b.n	f5d0 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x70>
    f5d0:	9809      	ldr	r0, [sp, #36]	; 0x24
    f5d2:	f8ad 007e 	strh.w	r0, [sp, #126]	; 0x7e
    f5d6:	2101      	movs	r1, #1
    f5d8:	f8ad 107c 	strh.w	r1, [sp, #124]	; 0x7c
    let background = Rectangle::<Rgb565>
    f5dc:	f8bd 307e 	ldrh.w	r3, [sp, #126]	; 0x7e
    f5e0:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
    f5e4:	a811      	add	r0, sp, #68	; 0x44
    f5e6:	a918      	add	r1, sp, #96	; 0x60
    f5e8:	f007 fc8c 	bl	16f04 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    f5ec:	e7ff      	b.n	f5ee <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x8e>
    f5ee:	a811      	add	r0, sp, #68	; 0x44
    f5f0:	a921      	add	r1, sp, #132	; 0x84

    //  Render background to display
    druid::draw_to_display(background);
    f5f2:	460a      	mov	r2, r1
    f5f4:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    f5f8:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    f5fc:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    f600:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    f604:	4608      	mov	r0, r1
    f606:	f006 fe37 	bl	16278 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    f60a:	e7ff      	b.n	f60c <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xac>
    f60c:	2000      	movs	r0, #0
    f60e:	223f      	movs	r2, #63	; 0x3f
    f610:	231f      	movs	r3, #31
    render_region(0, 0, SCREEN_WIDTH as u8 - 1, SCREEN_HEIGHT as u8 - 1);
    f612:	9008      	str	r0, [sp, #32]
    f614:	9908      	ldr	r1, [sp, #32]
    f616:	f000 fb77 	bl	fd08 <_ZN3app5chip813render_region17hc692a4d55cab74f0E>
    f61a:	e7ff      	b.n	f61c <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xbc>

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    f61c:	f240 302c 	movw	r0, #812	; 0x32c
    f620:	f2c0 0002 	movt	r0, #2
    f624:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    f626:	f24f 60a7 	movw	r0, #63143	; 0xf6a7
    f62a:	f2c0 0000 	movt	r0, #0
    f62e:	9029      	str	r0, [sp, #164]	; 0xa4
    os::task_init(                  //  Create a new task and start it...
    f630:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    f632:	4668      	mov	r0, sp
    f634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    f638:	6103      	str	r3, [r0, #16]
    f63a:	60c3      	str	r3, [r0, #12]
    f63c:	f240 13b4 	movw	r3, #436	; 0x1b4
    f640:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f644:	6083      	str	r3, [r0, #8]
    f646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f64a:	6043      	str	r3, [r0, #4]
    f64c:	2314      	movs	r3, #20
    f64e:	6003      	str	r3, [r0, #0]
    f650:	f240 1064 	movw	r0, #356	; 0x164
    f654:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f658:	2300      	movs	r3, #0
    f65a:	f7f9 fb9d 	bl	8d98 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    f65e:	9007      	str	r0, [sp, #28]
    f660:	e7ff      	b.n	f662 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x102>
    f662:	9807      	ldr	r0, [sp, #28]
    f664:	f7f9 fb0c 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    f668:	9028      	str	r0, [sp, #160]	; 0xa0
    f66a:	e7ff      	b.n	f66c <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x10c>
        NULL,  //  Argument to be passed to above function
        20,    //  Task priority: highest is 0, lowest is 255 (main task is 127), SPI is 10
        os::OS_WAIT_FOREVER as u32,       //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                                 //  `?` means check for error
    f66c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    f66e:	1e41      	subs	r1, r0, #1
    f670:	bf18      	it	ne
    f672:	2101      	movne	r1, #1
    f674:	2801      	cmp	r0, #1
    f676:	d001      	beq.n	f67c <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x11c>
    f678:	e7ff      	b.n	f67a <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x11a>
    f67a:	e005      	b.n	f688 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x128>
    f67c:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    f67e:	9010      	str	r0, [sp, #64]	; 0x40
    f680:	2001      	movs	r0, #1
    f682:	9010      	str	r0, [sp, #64]	; 0x40
}
    f684:	e006      	b.n	f694 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x134>
    os::task_init(                  //  Create a new task and start it...
    f686:	defe      	udf	#254	; 0xfe
    ) ? ;                                 //  `?` means check for error
    f688:	9828      	ldr	r0, [sp, #160]	; 0xa0
    f68a:	902b      	str	r0, [sp, #172]	; 0xac
    f68c:	f003 ff00 	bl	13490 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    f690:	9006      	str	r0, [sp, #24]
    f692:	e002      	b.n	f69a <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x13a>
}
    f694:	9810      	ldr	r0, [sp, #64]	; 0x40
    f696:	b02c      	add	sp, #176	; 0xb0
    f698:	bd10      	pop	{r4, pc}
    ) ? ;                                 //  `?` means check for error
    f69a:	9806      	ldr	r0, [sp, #24]
    f69c:	f7f9 fae4 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    f6a0:	9010      	str	r0, [sp, #64]	; 0x40
    f6a2:	e7ff      	b.n	f6a4 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x144>
    f6a4:	e7f6      	b.n	f694 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x134>

0000f6a6 <_ZN3app5chip89task_func17h20d1a4715d78a45aE>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 4096;  //  Must be 4096 and above because CHIP8 Emulator requires substantial stack space

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {    
    f6a6:	b580      	push	{r7, lr}
    f6a8:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
    f6ac:	b082      	sub	sp, #8
    f6ae:	f50d 5103 	add.w	r1, sp, #8384	; 0x20c0
    f6b2:	6008      	str	r0, [r1, #0]
    f6b4:	a804      	add	r0, sp, #16
    //  Create the hardware API for rendering the emulator
    let hardware = Hardware::new();
    f6b6:	9103      	str	r1, [sp, #12]
    f6b8:	f000 f850 	bl	f75c <_ZN3app5chip88Hardware3new17h53332fc09faf36beE>
    f6bc:	e7ff      	b.n	f6be <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x18>

    //  Create the emulator
    let chip8 = libchip8::Chip8::new(hardware);
    f6be:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    f6c2:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    f6c6:	f8ae 006c 	strh.w	r0, [lr, #108]	; 0x6c
    f6ca:	9804      	ldr	r0, [sp, #16]
    f6cc:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    f6d0:	f8ce 0068 	str.w	r0, [lr, #104]	; 0x68
    f6d4:	a806      	add	r0, sp, #24
    f6d6:	f10d 0e08 	add.w	lr, sp, #8
    f6da:	f50e 5183 	add.w	r1, lr, #4192	; 0x1060
    f6de:	f7fb fc6f 	bl	afc0 <_ZN8libchip814Chip8$LT$T$GT$3new17hca880a1e3fbd9a67E>
    f6e2:	e7ff      	b.n	f6e4 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x3e>
    console::print("CHIP8 started\n"); console::flush();
    f6e4:	f240 3030 	movw	r0, #816	; 0x330
    f6e8:	f2c0 0002 	movt	r0, #2
    f6ec:	210e      	movs	r1, #14
    f6ee:	f7f9 fd03 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f6f2:	e7ff      	b.n	f6f4 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x4e>
    f6f4:	f7f9 fd46 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f6f8:	e7ff      	b.n	f6fa <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x54>

    //  Load the emulator ROM
    let rom = include_bytes!("../roms/invaders.ch8");
    f6fa:	f240 303e 	movw	r0, #830	; 0x33e
    f6fe:	f2c0 0002 	movt	r0, #2
    f702:	9903      	ldr	r1, [sp, #12]
    f704:	6048      	str	r0, [r1, #4]
    f706:	f10d 0e10 	add.w	lr, sp, #16
    f70a:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    f70e:	a906      	add	r1, sp, #24
    f710:	f241 0350 	movw	r3, #4176	; 0x1050
    //  let rom = include_bytes!("../roms/blinky.ch8");
    //  let rom = include_bytes!("../roms/pong.ch8");

    //  Run the emulator ROM. This will block until emulator terminates
    chip8.run(rom);
    f714:	9002      	str	r0, [sp, #8]
    f716:	4610      	mov	r0, r2
    f718:	9201      	str	r2, [sp, #4]
    f71a:	461a      	mov	r2, r3
    f71c:	f00f fb92 	bl	1ee44 <__aeabi_memcpy>
    f720:	f240 5215 	movw	r2, #1301	; 0x515
    f724:	9801      	ldr	r0, [sp, #4]
    f726:	9902      	ldr	r1, [sp, #8]
    f728:	f7fb fcf9 	bl	b11e <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E>
    f72c:	e7ff      	b.n	f72e <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x88>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    f72e:	f640 0053 	movw	r0, #2131	; 0x853
    f732:	f2c0 0002 	movt	r0, #2
    f736:	210b      	movs	r1, #11
    f738:	f7f9 fcde 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f73c:	e7ff      	b.n	f73e <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x98>
    f73e:	f7f9 fd21 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f742:	e7ff      	b.n	f744 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x9e>
    assert!(false, "CHIP8 should not end");
    f744:	f640 005e 	movw	r0, #2142	; 0x85e
    f748:	f2c0 0002 	movt	r0, #2
    f74c:	f640 0288 	movw	r2, #2184	; 0x888
    f750:	f2c0 0202 	movt	r2, #2
    f754:	2114      	movs	r1, #20
    f756:	f008 ffa1 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f75a:	defe      	udf	#254	; 0xfe

0000f75c <_ZN3app5chip88Hardware3new17h53332fc09faf36beE>:
    is_checking_input: bool,
}

impl Hardware {
    /// Return a new Hardware API for rendering CHIP8 Emulator
    pub fn new() -> Hardware {
    f75c:	2100      	movs	r1, #0
        Hardware {
    f75e:	7001      	strb	r1, [r0, #0]
    f760:	7041      	strb	r1, [r0, #1]
    f762:	7081      	strb	r1, [r0, #2]
    f764:	70c1      	strb	r1, [r0, #3]
    f766:	7101      	strb	r1, [r0, #4]
    f768:	7141      	strb	r1, [r0, #5]
            update_right: 0,
            update_bottom: 0,
            is_interactive: false,
            is_checking_input: false,
        }
    }
    f76a:	4770      	bx	lr

0000f76c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hd3173c320d2551cfE>:
}

impl libchip8::Hardware for Hardware {
    /// Return a random value.
    fn rand(&mut self) -> u8 {
    f76c:	b081      	sub	sp, #4
    f76e:	9000      	str	r0, [sp, #0]
    f770:	207b      	movs	r0, #123	; 0x7b
        123  //  TODO
    }
    f772:	b001      	add	sp, #4
    f774:	4770      	bx	lr

0000f776 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>:

    /// Check if the key is pressed.
    fn key(&mut self, _key: u8) -> bool {
    f776:	b580      	push	{r7, lr}
    f778:	b084      	sub	sp, #16
    f77a:	460a      	mov	r2, r1
    f77c:	9002      	str	r0, [sp, #8]
    f77e:	f88d 100f 	strb.w	r1, [sp, #15]
        if !self.is_interactive {
    f782:	7901      	ldrb	r1, [r0, #4]
    f784:	07c9      	lsls	r1, r1, #31
    f786:	2900      	cmp	r1, #0
    f788:	9001      	str	r0, [sp, #4]
    f78a:	d10f      	bne.n	f7ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x36>
    f78c:	e7ff      	b.n	f78e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x18>
    f78e:	2001      	movs	r0, #1
            self.is_interactive = true;
    f790:	9901      	ldr	r1, [sp, #4]
    f792:	7108      	strb	r0, [r1, #4]
            console::print("key\n"); console::flush(); ////
    f794:	f640 0098 	movw	r0, #2200	; 0x898
    f798:	f2c0 0002 	movt	r0, #2
    f79c:	2104      	movs	r1, #4
    f79e:	f7f9 fcab 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f7a2:	e7ff      	b.n	f7a4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x2e>
    f7a4:	f7f9 fcee 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f7a8:	e7ff      	b.n	f7aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x34>
        if !self.is_interactive {
    f7aa:	e7ff      	b.n	f7ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x36>
    f7ac:	2001      	movs	r0, #1
        }
        self.is_checking_input = true;
    f7ae:	9901      	ldr	r1, [sp, #4]
    f7b0:	7148      	strb	r0, [r1, #5]
    f7b2:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    f7b4:	b004      	add	sp, #16
    f7b6:	bd80      	pop	{r7, pc}

0000f7b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE>:

    /// Set the state of a pixel in the screen. true for white, and false for black.
    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    f7b8:	b08c      	sub	sp, #48	; 0x30
    f7ba:	469c      	mov	ip, r3
    f7bc:	9007      	str	r0, [sp, #28]
    f7be:	9108      	str	r1, [sp, #32]
    f7c0:	9209      	str	r2, [sp, #36]	; 0x24
    f7c2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        //  console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    f7c6:	293f      	cmp	r1, #63	; 0x3f
    f7c8:	9205      	str	r2, [sp, #20]
    f7ca:	9104      	str	r1, [sp, #16]
    f7cc:	9003      	str	r0, [sp, #12]
    f7ce:	f8cd c008 	str.w	ip, [sp, #8]
    f7d2:	d804      	bhi.n	f7de <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x26>
    f7d4:	e7ff      	b.n	f7d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1e>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f7d6:	9805      	ldr	r0, [sp, #20]
    f7d8:	281f      	cmp	r0, #31
    f7da:	d814      	bhi.n	f806 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x4e>
    f7dc:	e00b      	b.n	f7f6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x3e>
        assert!(x < SCREEN_WIDTH, "x overflow");
    f7de:	f640 009c 	movw	r0, #2204	; 0x89c
    f7e2:	f2c0 0002 	movt	r0, #2
    f7e6:	f640 02a8 	movw	r2, #2216	; 0x8a8
    f7ea:	f2c0 0202 	movt	r2, #2
    f7ee:	210a      	movs	r1, #10
    f7f0:	f008 ff54 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f7f4:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f7f6:	9805      	ldr	r0, [sp, #20]
    f7f8:	0181      	lsls	r1, r0, #6
    f7fa:	0e82      	lsrs	r2, r0, #26
    f7fc:	2a00      	cmp	r2, #0
    f7fe:	9101      	str	r1, [sp, #4]
    f800:	f040 80be 	bne.w	f980 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1c8>
    f804:	e00b      	b.n	f81e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x66>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f806:	f640 00b8 	movw	r0, #2232	; 0x8b8
    f80a:	f2c0 0002 	movt	r0, #2
    f80e:	f640 02c4 	movw	r2, #2244	; 0x8c4
    f812:	f2c0 0202 	movt	r2, #2
    f816:	210a      	movs	r1, #10
    f818:	f008 ff40 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f81c:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f81e:	9804      	ldr	r0, [sp, #16]
    f820:	9901      	ldr	r1, [sp, #4]
    f822:	1842      	adds	r2, r0, r1
    f824:	4613      	mov	r3, r2
    f826:	4282      	cmp	r2, r0
    f828:	9300      	str	r3, [sp, #0]
    f82a:	f0c0 80b5 	bcc.w	f998 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1e0>
    f82e:	e7ff      	b.n	f830 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x78>
    f830:	9800      	ldr	r0, [sp, #0]
    f832:	900b      	str	r0, [sp, #44]	; 0x2c
        unsafe { SCREEN_BUFFER[i] = 
            if d {
    f834:	9902      	ldr	r1, [sp, #8]
    f836:	07ca      	lsls	r2, r1, #31
    f838:	2a00      	cmp	r2, #0
    f83a:	d106      	bne.n	f84a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x92>
    f83c:	e7ff      	b.n	f83e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x86>
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
                else { 200 }                    //  Darker colour for initial screen
            } 
            else { 
                if self.is_interactive { 127 }  //  Fade to black
    f83e:	9803      	ldr	r0, [sp, #12]
    f840:	7901      	ldrb	r1, [r0, #4]
    f842:	07c9      	lsls	r1, r1, #31
    f844:	2900      	cmp	r1, #0
    f846:	d113      	bne.n	f870 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xb8>
    f848:	e00e      	b.n	f868 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xb0>
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    f84a:	9803      	ldr	r0, [sp, #12]
    f84c:	7901      	ldrb	r1, [r0, #4]
    f84e:	07c9      	lsls	r1, r1, #31
    f850:	2900      	cmp	r1, #0
    f852:	d104      	bne.n	f85e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xa6>
    f854:	e7ff      	b.n	f856 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x9e>
    f856:	20c8      	movs	r0, #200	; 0xc8
                else { 200 }                    //  Darker colour for initial screen
    f858:	f88d 0018 	strb.w	r0, [sp, #24]
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    f85c:	e003      	b.n	f866 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xae>
    f85e:	20ff      	movs	r0, #255	; 0xff
    f860:	f88d 0018 	strb.w	r0, [sp, #24]
    f864:	e7ff      	b.n	f866 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xae>
            if d {
    f866:	e008      	b.n	f87a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc2>
    f868:	2000      	movs	r0, #0
                else { 0 }                      //  Black for initial screen                 
    f86a:	f88d 0018 	strb.w	r0, [sp, #24]
                if self.is_interactive { 127 }  //  Fade to black
    f86e:	e003      	b.n	f878 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc0>
    f870:	207f      	movs	r0, #127	; 0x7f
    f872:	f88d 0018 	strb.w	r0, [sp, #24]
    f876:	e7ff      	b.n	f878 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc0>
            if d {
    f878:	e7ff      	b.n	f87a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc2>
    f87a:	2000      	movs	r0, #0
        unsafe { SCREEN_BUFFER[i] = 
    f87c:	9900      	ldr	r1, [sp, #0]
    f87e:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    f882:	f040 8095 	bne.w	f9b0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1f8>
    f886:	e7ff      	b.n	f888 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xd0>
    f888:	f244 10b4 	movw	r0, #16820	; 0x41b4
    f88c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f890:	f89d 1018 	ldrb.w	r1, [sp, #24]
    f894:	9a00      	ldr	r2, [sp, #0]
    f896:	5481      	strb	r1, [r0, r2]
            }  
        };

        //  Remember the boundaries of the screen region to be updated
        if self.update_left == 0 && self.update_right == 0 &&
    f898:	9803      	ldr	r0, [sp, #12]
    f89a:	7801      	ldrb	r1, [r0, #0]
    f89c:	2900      	cmp	r1, #0
    f89e:	d02e      	beq.n	f8fe <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x146>
    f8a0:	e029      	b.n	f8f6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x13e>
    f8a2:	2001      	movs	r0, #1
    f8a4:	f88d 0019 	strb.w	r0, [sp, #25]
    f8a8:	e008      	b.n	f8bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x104>
    f8aa:	2000      	movs	r0, #0
    f8ac:	f88d 0019 	strb.w	r0, [sp, #25]
    f8b0:	e004      	b.n	f8bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x104>
            self.update_top == 0 && self.update_bottom == 0 {
    f8b2:	9803      	ldr	r0, [sp, #12]
    f8b4:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    f8b6:	2900      	cmp	r1, #0
    f8b8:	d0f3      	beq.n	f8a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xea>
    f8ba:	e7f6      	b.n	f8aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xf2>
    f8bc:	f89d 0019 	ldrb.w	r0, [sp, #25]
    f8c0:	07c0      	lsls	r0, r0, #31
    f8c2:	2800      	cmp	r0, #0
    f8c4:	d126      	bne.n	f914 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x15c>
    f8c6:	e02d      	b.n	f924 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x16c>
    f8c8:	2001      	movs	r0, #1
    f8ca:	f88d 001a 	strb.w	r0, [sp, #26]
    f8ce:	e008      	b.n	f8e2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x12a>
    f8d0:	2000      	movs	r0, #0
    f8d2:	f88d 001a 	strb.w	r0, [sp, #26]
    f8d6:	e004      	b.n	f8e2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x12a>
            self.update_top == 0 && self.update_bottom == 0 {
    f8d8:	9803      	ldr	r0, [sp, #12]
    f8da:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    f8dc:	2900      	cmp	r1, #0
    f8de:	d0f3      	beq.n	f8c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x110>
    f8e0:	e7f6      	b.n	f8d0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x118>
    f8e2:	f89d 001a 	ldrb.w	r0, [sp, #26]
    f8e6:	07c0      	lsls	r0, r0, #31
    f8e8:	2800      	cmp	r0, #0
    f8ea:	d1e2      	bne.n	f8b2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xfa>
    f8ec:	e7dd      	b.n	f8aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xf2>
    f8ee:	2001      	movs	r0, #1
    f8f0:	f88d 001b 	strb.w	r0, [sp, #27]
    f8f4:	e008      	b.n	f908 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x150>
    f8f6:	2000      	movs	r0, #0
    f8f8:	f88d 001b 	strb.w	r0, [sp, #27]
    f8fc:	e004      	b.n	f908 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x150>
    f8fe:	9803      	ldr	r0, [sp, #12]
    f900:	7881      	ldrb	r1, [r0, #2]
    f902:	2900      	cmp	r1, #0
    f904:	d0f3      	beq.n	f8ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x136>
    f906:	e7f6      	b.n	f8f6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x13e>
    f908:	f89d 001b 	ldrb.w	r0, [sp, #27]
    f90c:	07c0      	lsls	r0, r0, #31
    f90e:	2800      	cmp	r0, #0
    f910:	d1e2      	bne.n	f8d8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x120>
    f912:	e7dd      	b.n	f8d0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x118>
            self.update_left = x as u8;
    f914:	9804      	ldr	r0, [sp, #16]
    f916:	9903      	ldr	r1, [sp, #12]
    f918:	7008      	strb	r0, [r1, #0]
            self.update_right = x as u8;
    f91a:	7088      	strb	r0, [r1, #2]
            self.update_top = y as u8;
    f91c:	9a05      	ldr	r2, [sp, #20]
    f91e:	704a      	strb	r2, [r1, #1]
            self.update_bottom = y as u8;
    f920:	70ca      	strb	r2, [r1, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    f922:	e7ff      	b.n	f924 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x16c>
        }
        if (x as u8) < self.update_left { self.update_left = x as u8; }
    f924:	9804      	ldr	r0, [sp, #16]
    f926:	b2c1      	uxtb	r1, r0
    f928:	9a03      	ldr	r2, [sp, #12]
    f92a:	7813      	ldrb	r3, [r2, #0]
    f92c:	4299      	cmp	r1, r3
    f92e:	d204      	bcs.n	f93a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x182>
    f930:	e7ff      	b.n	f932 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x17a>
    f932:	9804      	ldr	r0, [sp, #16]
    f934:	9903      	ldr	r1, [sp, #12]
    f936:	7008      	strb	r0, [r1, #0]
    f938:	e7ff      	b.n	f93a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x182>
        if (x as u8) > self.update_right { self.update_right = x as u8; }
    f93a:	9804      	ldr	r0, [sp, #16]
    f93c:	b2c1      	uxtb	r1, r0
    f93e:	9a03      	ldr	r2, [sp, #12]
    f940:	7893      	ldrb	r3, [r2, #2]
    f942:	4299      	cmp	r1, r3
    f944:	d904      	bls.n	f950 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x198>
    f946:	e7ff      	b.n	f948 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x190>
    f948:	9804      	ldr	r0, [sp, #16]
    f94a:	9903      	ldr	r1, [sp, #12]
    f94c:	7088      	strb	r0, [r1, #2]
    f94e:	e7ff      	b.n	f950 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x198>
        if (y as u8) < self.update_top { self.update_top = y as u8; }
    f950:	9805      	ldr	r0, [sp, #20]
    f952:	b2c1      	uxtb	r1, r0
    f954:	9a03      	ldr	r2, [sp, #12]
    f956:	7853      	ldrb	r3, [r2, #1]
    f958:	4299      	cmp	r1, r3
    f95a:	d204      	bcs.n	f966 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1ae>
    f95c:	e7ff      	b.n	f95e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1a6>
    f95e:	9805      	ldr	r0, [sp, #20]
    f960:	9903      	ldr	r1, [sp, #12]
    f962:	7048      	strb	r0, [r1, #1]
    f964:	e7ff      	b.n	f966 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1ae>
        if (y as u8) > self.update_bottom { self.update_bottom = y as u8; }
    f966:	9805      	ldr	r0, [sp, #20]
    f968:	b2c1      	uxtb	r1, r0
    f96a:	9a03      	ldr	r2, [sp, #12]
    f96c:	78d3      	ldrb	r3, [r2, #3]
    f96e:	4299      	cmp	r1, r3
    f970:	d904      	bls.n	f97c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1c4>
    f972:	e7ff      	b.n	f974 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1bc>
    f974:	9805      	ldr	r0, [sp, #20]
    f976:	9903      	ldr	r1, [sp, #12]
    f978:	70c8      	strb	r0, [r1, #3]
    f97a:	e7ff      	b.n	f97c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1c4>
    }
    f97c:	b00c      	add	sp, #48	; 0x30
    f97e:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    f980:	f640 00f0 	movw	r0, #2288	; 0x8f0
    f984:	f2c0 0002 	movt	r0, #2
    f988:	f640 02d4 	movw	r2, #2260	; 0x8d4
    f98c:	f2c0 0202 	movt	r2, #2
    f990:	2121      	movs	r1, #33	; 0x21
    f992:	f008 fe83 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f996:	defe      	udf	#254	; 0xfe
    f998:	f640 1030 	movw	r0, #2352	; 0x930
    f99c:	f2c0 0002 	movt	r0, #2
    f9a0:	f640 1214 	movw	r2, #2324	; 0x914
    f9a4:	f2c0 0202 	movt	r2, #2
    f9a8:	211c      	movs	r1, #28
    f9aa:	f008 fe77 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f9ae:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = 
    f9b0:	f640 104c 	movw	r0, #2380	; 0x94c
    f9b4:	f2c0 0002 	movt	r0, #2
    f9b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f9bc:	9900      	ldr	r1, [sp, #0]
    f9be:	f008 fe83 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    f9c2:	defe      	udf	#254	; 0xfe

0000f9c4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE>:

    /// Get the current state of a pixel in the screen.
    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    f9c4:	b088      	sub	sp, #32
    f9c6:	9004      	str	r0, [sp, #16]
    f9c8:	9105      	str	r1, [sp, #20]
    f9ca:	9206      	str	r2, [sp, #24]
        //  console::print("get "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    f9cc:	293f      	cmp	r1, #63	; 0x3f
    f9ce:	9203      	str	r2, [sp, #12]
    f9d0:	9102      	str	r1, [sp, #8]
    f9d2:	d804      	bhi.n	f9de <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x1a>
    f9d4:	e7ff      	b.n	f9d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x12>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f9d6:	9803      	ldr	r0, [sp, #12]
    f9d8:	281f      	cmp	r0, #31
    f9da:	d813      	bhi.n	fa04 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x40>
    f9dc:	e00b      	b.n	f9f6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x32>
        assert!(x < SCREEN_WIDTH, "x overflow");
    f9de:	f640 009c 	movw	r0, #2204	; 0x89c
    f9e2:	f2c0 0002 	movt	r0, #2
    f9e6:	f640 125c 	movw	r2, #2396	; 0x95c
    f9ea:	f2c0 0202 	movt	r2, #2
    f9ee:	210a      	movs	r1, #10
    f9f0:	f008 fe54 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f9f4:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f9f6:	9803      	ldr	r0, [sp, #12]
    f9f8:	0181      	lsls	r1, r0, #6
    f9fa:	0e82      	lsrs	r2, r0, #26
    f9fc:	2a00      	cmp	r2, #0
    f9fe:	9101      	str	r1, [sp, #4]
    fa00:	d128      	bne.n	fa54 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x90>
    fa02:	e00b      	b.n	fa1c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x58>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    fa04:	f640 00b8 	movw	r0, #2232	; 0x8b8
    fa08:	f2c0 0002 	movt	r0, #2
    fa0c:	f640 126c 	movw	r2, #2412	; 0x96c
    fa10:	f2c0 0202 	movt	r2, #2
    fa14:	210a      	movs	r1, #10
    fa16:	f008 fe41 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fa1a:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    fa1c:	9802      	ldr	r0, [sp, #8]
    fa1e:	9901      	ldr	r1, [sp, #4]
    fa20:	1842      	adds	r2, r0, r1
    fa22:	4613      	mov	r3, r2
    fa24:	4282      	cmp	r2, r0
    fa26:	9300      	str	r3, [sp, #0]
    fa28:	d320      	bcc.n	fa6c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0xa8>
    fa2a:	e7ff      	b.n	fa2c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x68>
    fa2c:	9800      	ldr	r0, [sp, #0]
    fa2e:	9007      	str	r0, [sp, #28]
    fa30:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] >= 128 }
    fa32:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    fa36:	d125      	bne.n	fa84 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0xc0>
    fa38:	e7ff      	b.n	fa3a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x76>
    fa3a:	f244 10b4 	movw	r0, #16820	; 0x41b4
    fa3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fa42:	9900      	ldr	r1, [sp, #0]
    fa44:	5640      	ldrsb	r0, [r0, r1]
    fa46:	2200      	movs	r2, #0
    fa48:	2800      	cmp	r0, #0
    fa4a:	bf48      	it	mi
    fa4c:	2201      	movmi	r2, #1
    }
    fa4e:	4610      	mov	r0, r2
    fa50:	b008      	add	sp, #32
    fa52:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    fa54:	f640 00f0 	movw	r0, #2288	; 0x8f0
    fa58:	f2c0 0002 	movt	r0, #2
    fa5c:	f640 127c 	movw	r2, #2428	; 0x97c
    fa60:	f2c0 0202 	movt	r2, #2
    fa64:	2121      	movs	r1, #33	; 0x21
    fa66:	f008 fe19 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fa6a:	defe      	udf	#254	; 0xfe
    fa6c:	f640 1030 	movw	r0, #2352	; 0x930
    fa70:	f2c0 0002 	movt	r0, #2
    fa74:	f640 128c 	movw	r2, #2444	; 0x98c
    fa78:	f2c0 0202 	movt	r2, #2
    fa7c:	211c      	movs	r1, #28
    fa7e:	f008 fe0d 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fa82:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] >= 128 }
    fa84:	f640 109c 	movw	r0, #2460	; 0x99c
    fa88:	f2c0 0002 	movt	r0, #2
    fa8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    fa90:	9900      	ldr	r1, [sp, #0]
    fa92:	f008 fe19 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    fa96:	defe      	udf	#254	; 0xfe

0000fa98 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE>:

    /// Set the size of the screen.
    fn vram_setsize(&mut self, size: (usize, usize)) {
    fa98:	b580      	push	{r7, lr}
    fa9a:	b086      	sub	sp, #24
    fa9c:	9003      	str	r0, [sp, #12]
    fa9e:	9104      	str	r1, [sp, #16]
    faa0:	9205      	str	r2, [sp, #20]
        //  Do nothing. We assume SCREEN_WIDTH and SCREEN_HEIGHT.
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    faa2:	2940      	cmp	r1, #64	; 0x40
    faa4:	9201      	str	r2, [sp, #4]
    faa6:	9100      	str	r1, [sp, #0]
    faa8:	d008      	beq.n	fabc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x24>
    faaa:	e003      	b.n	fab4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x1c>
    faac:	2001      	movs	r0, #1
    faae:	f88d 000b 	strb.w	r0, [sp, #11]
    fab2:	e007      	b.n	fac4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x2c>
    fab4:	2000      	movs	r0, #0
    fab6:	f88d 000b 	strb.w	r0, [sp, #11]
    faba:	e003      	b.n	fac4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x2c>
    fabc:	9801      	ldr	r0, [sp, #4]
    fabe:	2820      	cmp	r0, #32
    fac0:	d0f4      	beq.n	faac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x14>
    fac2:	e7f7      	b.n	fab4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x1c>
    fac4:	f89d 000b 	ldrb.w	r0, [sp, #11]
    fac8:	07c0      	lsls	r0, r0, #31
    faca:	2800      	cmp	r0, #0
    facc:	d008      	beq.n	fae0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x48>
    face:	e7ff      	b.n	fad0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x38>
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    fad0:	f640 10b4 	movw	r0, #2484	; 0x9b4
    fad4:	f2c0 0002 	movt	r0, #2
    fad8:	2108      	movs	r1, #8
    fada:	f7f9 fb0d 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    fade:	e00b      	b.n	faf8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x60>
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    fae0:	f640 10ac 	movw	r0, #2476	; 0x9ac
    fae4:	f2c0 0002 	movt	r0, #2
    fae8:	f640 12d4 	movw	r2, #2516	; 0x9d4
    faec:	f2c0 0202 	movt	r2, #2
    faf0:	2108      	movs	r1, #8
    faf2:	f008 fdd3 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    faf6:	defe      	udf	#254	; 0xfe
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    faf8:	9800      	ldr	r0, [sp, #0]
    fafa:	f7f9 fb3b 	bl	9174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    fafe:	e7ff      	b.n	fb00 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x68>
    fb00:	f640 10e4 	movw	r0, #2532	; 0x9e4
    fb04:	f2c0 0002 	movt	r0, #2
    fb08:	2102      	movs	r1, #2
    fb0a:	f7f9 faf5 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    fb0e:	e7ff      	b.n	fb10 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x78>
    fb10:	9801      	ldr	r0, [sp, #4]
    fb12:	f7f9 fb2f 	bl	9174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    fb16:	e7ff      	b.n	fb18 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x80>
    fb18:	f640 10e6 	movw	r0, #2534	; 0x9e6
    fb1c:	f2c0 0002 	movt	r0, #2
    fb20:	2101      	movs	r1, #1
    fb22:	f7f9 fae9 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    fb26:	e7ff      	b.n	fb28 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x90>
    fb28:	f7f9 fb2c 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    fb2c:	e7ff      	b.n	fb2e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x96>
    }
    fb2e:	b006      	add	sp, #24
    fb30:	bd80      	pop	{r7, pc}

0000fb32 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E>:

    /// Get the size of the screen.
    fn vram_size(&mut self) -> (usize, usize) {
    fb32:	b083      	sub	sp, #12
    fb34:	9002      	str	r0, [sp, #8]
    fb36:	2040      	movs	r0, #64	; 0x40
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    fb38:	9000      	str	r0, [sp, #0]
    fb3a:	2020      	movs	r0, #32
    fb3c:	9001      	str	r0, [sp, #4]
    }
    fb3e:	9800      	ldr	r0, [sp, #0]
    fb40:	9901      	ldr	r1, [sp, #4]
    fb42:	b003      	add	sp, #12
    fb44:	4770      	bx	lr

0000fb46 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>:

    /// Return the current clock value in nanoseconds.
    fn clock(&mut self) -> u64 {
    fb46:	b5b0      	push	{r4, r5, r7, lr}
    fb48:	b086      	sub	sp, #24
    fb4a:	9005      	str	r0, [sp, #20]
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    fb4c:	f00c ff0c 	bl	1c968 <os_time_get>
    fb50:	9004      	str	r0, [sp, #16]
    fb52:	e7ff      	b.n	fb54 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0xe>
    fb54:	2000      	movs	r0, #0
    fb56:	9904      	ldr	r1, [sp, #16]
    fb58:	fba0 2301 	umull	r2, r3, r0, r1
    fb5c:	2b00      	cmp	r3, #0
    fb5e:	bf18      	it	ne
    fb60:	2301      	movne	r3, #1
    fb62:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    fb66:	fba0 e40c 	umull	lr, r4, r0, ip
    fb6a:	2c00      	cmp	r4, #0
    fb6c:	bf18      	it	ne
    fb6e:	2401      	movne	r4, #1
    fb70:	ea43 0304 	orr.w	r3, r3, r4
    fb74:	4472      	add	r2, lr
    fb76:	fba1 ce0c 	umull	ip, lr, r1, ip
    fb7a:	eb12 020e 	adds.w	r2, r2, lr
    fb7e:	f140 0000 	adc.w	r0, r0, #0
    fb82:	ea40 0003 	orr.w	r0, r0, r3
    fb86:	2800      	cmp	r0, #0
    fb88:	f8cd c00c 	str.w	ip, [sp, #12]
    fb8c:	9202      	str	r2, [sp, #8]
    fb8e:	d124      	bne.n	fbda <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0x94>
    fb90:	e7ff      	b.n	fb92 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0x4c>
    fb92:	2000      	movs	r0, #0
    fb94:	9903      	ldr	r1, [sp, #12]
    fb96:	fba0 2301 	umull	r2, r3, r0, r1
    fb9a:	2b00      	cmp	r3, #0
    fb9c:	bf18      	it	ne
    fb9e:	2301      	movne	r3, #1
    fba0:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    fba4:	f8dd e008 	ldr.w	lr, [sp, #8]
    fba8:	fbae 450c 	umull	r4, r5, lr, ip
    fbac:	2d00      	cmp	r5, #0
    fbae:	bf18      	it	ne
    fbb0:	2501      	movne	r5, #1
    fbb2:	ea43 0305 	orr.w	r3, r3, r5
    fbb6:	4422      	add	r2, r4
    fbb8:	fba1 c40c 	umull	ip, r4, r1, ip
    fbbc:	1912      	adds	r2, r2, r4
    fbbe:	f140 0000 	adc.w	r0, r0, #0
    fbc2:	ea40 0003 	orr.w	r0, r0, r3
    fbc6:	2800      	cmp	r0, #0
    fbc8:	f8cd c004 	str.w	ip, [sp, #4]
    fbcc:	9200      	str	r2, [sp, #0]
    fbce:	d110      	bne.n	fbf2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0xac>
    fbd0:	e7ff      	b.n	fbd2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0x8c>
    }
    fbd2:	9801      	ldr	r0, [sp, #4]
    fbd4:	9900      	ldr	r1, [sp, #0]
    fbd6:	b006      	add	sp, #24
    fbd8:	bdb0      	pop	{r4, r5, r7, pc}
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    fbda:	f640 00f0 	movw	r0, #2288	; 0x8f0
    fbde:	f2c0 0002 	movt	r0, #2
    fbe2:	f640 12e8 	movw	r2, #2536	; 0x9e8
    fbe6:	f2c0 0202 	movt	r2, #2
    fbea:	2121      	movs	r1, #33	; 0x21
    fbec:	f008 fd56 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fbf0:	defe      	udf	#254	; 0xfe
    fbf2:	f640 00f0 	movw	r0, #2288	; 0x8f0
    fbf6:	f2c0 0002 	movt	r0, #2
    fbfa:	f640 12e8 	movw	r2, #2536	; 0x9e8
    fbfe:	f2c0 0202 	movt	r2, #2
    fc02:	2121      	movs	r1, #33	; 0x21
    fc04:	f008 fd4a 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc08:	defe      	udf	#254	; 0xfe

0000fc0a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha9851d0b0cdc4725E>:

    /// Play beep sound.
    fn beep(&mut self) {
    fc0a:	b081      	sub	sp, #4
    fc0c:	9000      	str	r0, [sp, #0]
        //  TODO: Vibrate? Flash?
    }
    fc0e:	b001      	add	sp, #4
    fc10:	4770      	bx	lr

0000fc12 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E>:

    /// Called in every step; return true for shutdown.
    fn sched(&mut self) -> bool {
    fc12:	b580      	push	{r7, lr}
    fc14:	b084      	sub	sp, #16
    fc16:	9003      	str	r0, [sp, #12]
        //  console::print("sched\n"); console::flush(); ////

        //  If no screen update, return
        if self.update_left == 0 && self.update_right == 0 &&
    fc18:	7801      	ldrb	r1, [r0, #0]
    fc1a:	2900      	cmp	r1, #0
    fc1c:	9001      	str	r0, [sp, #4]
    fc1e:	d02e      	beq.n	fc7e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x6c>
    fc20:	e029      	b.n	fc76 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x64>
    fc22:	2001      	movs	r0, #1
    fc24:	f88d 0009 	strb.w	r0, [sp, #9]
    fc28:	e008      	b.n	fc3c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x2a>
    fc2a:	2000      	movs	r0, #0
    fc2c:	f88d 0009 	strb.w	r0, [sp, #9]
    fc30:	e004      	b.n	fc3c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x2a>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    fc32:	9801      	ldr	r0, [sp, #4]
    fc34:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    fc36:	2900      	cmp	r1, #0
    fc38:	d0f3      	beq.n	fc22 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x10>
    fc3a:	e7f6      	b.n	fc2a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x18>
    fc3c:	f89d 0009 	ldrb.w	r0, [sp, #9]
    fc40:	07c0      	lsls	r0, r0, #31
    fc42:	2800      	cmp	r0, #0
    fc44:	d12c      	bne.n	fca0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x8e>
    fc46:	e025      	b.n	fc94 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x82>
    fc48:	2001      	movs	r0, #1
    fc4a:	f88d 000a 	strb.w	r0, [sp, #10]
    fc4e:	e008      	b.n	fc62 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x50>
    fc50:	2000      	movs	r0, #0
    fc52:	f88d 000a 	strb.w	r0, [sp, #10]
    fc56:	e004      	b.n	fc62 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x50>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    fc58:	9801      	ldr	r0, [sp, #4]
    fc5a:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    fc5c:	2900      	cmp	r1, #0
    fc5e:	d0f3      	beq.n	fc48 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x36>
    fc60:	e7f6      	b.n	fc50 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x3e>
    fc62:	f89d 000a 	ldrb.w	r0, [sp, #10]
    fc66:	07c0      	lsls	r0, r0, #31
    fc68:	2800      	cmp	r0, #0
    fc6a:	d1e2      	bne.n	fc32 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x20>
    fc6c:	e7dd      	b.n	fc2a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x18>
    fc6e:	2001      	movs	r0, #1
    fc70:	f88d 000b 	strb.w	r0, [sp, #11]
    fc74:	e008      	b.n	fc88 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x76>
    fc76:	2000      	movs	r0, #0
    fc78:	f88d 000b 	strb.w	r0, [sp, #11]
    fc7c:	e004      	b.n	fc88 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x76>
    fc7e:	9801      	ldr	r0, [sp, #4]
    fc80:	7881      	ldrb	r1, [r0, #2]
    fc82:	2900      	cmp	r1, #0
    fc84:	d0f3      	beq.n	fc6e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x5c>
    fc86:	e7f6      	b.n	fc76 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x64>
    fc88:	f89d 000b 	ldrb.w	r0, [sp, #11]
    fc8c:	07c0      	lsls	r0, r0, #31
    fc8e:	2800      	cmp	r0, #0
    fc90:	d1e2      	bne.n	fc58 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x46>
    fc92:	e7dd      	b.n	fc50 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x3e>

        //  If emulator is preparing the initial screen, refresh the screen later
        if !self.is_interactive { return false; }
    fc94:	9801      	ldr	r0, [sp, #4]
    fc96:	7901      	ldrb	r1, [r0, #4]
    fc98:	07c9      	lsls	r1, r1, #31
    fc9a:	2900      	cmp	r1, #0
    fc9c:	d00e      	beq.n	fcbc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xaa>
    fc9e:	e007      	b.n	fcb0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x9e>
    fca0:	2000      	movs	r0, #0
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    fca2:	f88d 0008 	strb.w	r0, [sp, #8]
    fca6:	e7ff      	b.n	fca8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>
        self.update_right = 0;
        self.update_bottom = 0;

        //  Return false to indicate no shutdown
        false
    }
    fca8:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fcac:	b004      	add	sp, #16
    fcae:	bd80      	pop	{r7, pc}
        if !self.is_checking_input { return false; }
    fcb0:	9801      	ldr	r0, [sp, #4]
    fcb2:	7941      	ldrb	r1, [r0, #5]
    fcb4:	07c9      	lsls	r1, r1, #31
    fcb6:	2900      	cmp	r1, #0
    fcb8:	d00a      	beq.n	fcd0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xbe>
    fcba:	e003      	b.n	fcc4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xb2>
    fcbc:	2000      	movs	r0, #0
        if !self.is_interactive { return false; }
    fcbe:	f88d 0008 	strb.w	r0, [sp, #8]
    fcc2:	e7f1      	b.n	fca8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>
    fcc4:	2000      	movs	r0, #0
        self.is_checking_input = false;
    fcc6:	9901      	ldr	r1, [sp, #4]
    fcc8:	7148      	strb	r0, [r1, #5]
        unsafe { hal_watchdog_tickle() };
    fcca:	f00b fc25 	bl	1b518 <hal_watchdog_tickle>
    fcce:	e003      	b.n	fcd8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xc6>
    fcd0:	2000      	movs	r0, #0
        if !self.is_checking_input { return false; }
    fcd2:	f88d 0008 	strb.w	r0, [sp, #8]
    fcd6:	e7e7      	b.n	fca8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>
    fcd8:	2001      	movs	r0, #1
        unsafe { os::os_time_delay(1) };
    fcda:	f00c fe6b 	bl	1c9b4 <os_time_delay>
    fcde:	e7ff      	b.n	fce0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xce>
        render_region(
    fce0:	9801      	ldr	r0, [sp, #4]
    fce2:	7800      	ldrb	r0, [r0, #0]
    fce4:	9901      	ldr	r1, [sp, #4]
    fce6:	7849      	ldrb	r1, [r1, #1]
    fce8:	9a01      	ldr	r2, [sp, #4]
    fcea:	7892      	ldrb	r2, [r2, #2]
    fcec:	9b01      	ldr	r3, [sp, #4]
    fcee:	78db      	ldrb	r3, [r3, #3]
    fcf0:	f000 f80a 	bl	fd08 <_ZN3app5chip813render_region17hc692a4d55cab74f0E>
    fcf4:	e7ff      	b.n	fcf6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xe4>
    fcf6:	2000      	movs	r0, #0
        self.update_left = 0;
    fcf8:	9901      	ldr	r1, [sp, #4]
    fcfa:	7008      	strb	r0, [r1, #0]
        self.update_top = 0;
    fcfc:	7048      	strb	r0, [r1, #1]
        self.update_right = 0;
    fcfe:	7088      	strb	r0, [r1, #2]
        self.update_bottom = 0;
    fd00:	70c8      	strb	r0, [r1, #3]
        false
    fd02:	f88d 0008 	strb.w	r0, [sp, #8]
    }
    fd06:	e7cf      	b.n	fca8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>

0000fd08 <_ZN3app5chip813render_region17hc692a4d55cab74f0E>:
}

/// Render the Virtual Screen region
fn render_region(left: u8, top: u8, right: u8, bottom: u8) {
    fd08:	b5b0      	push	{r4, r5, r7, lr}
    fd0a:	b0a2      	sub	sp, #136	; 0x88
    fd0c:	469c      	mov	ip, r3
    fd0e:	4696      	mov	lr, r2
    fd10:	460c      	mov	r4, r1
    fd12:	4605      	mov	r5, r0
    fd14:	f88d 0068 	strb.w	r0, [sp, #104]	; 0x68
    fd18:	f88d 1069 	strb.w	r1, [sp, #105]	; 0x69
    fd1c:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
    fd20:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
    //  Get the physical bounding box width and height
    let physical_box    = get_bounding_box(left, top, right, bottom);  //  Returns (left,top,right,bottom)
    fd24:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
    fd28:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
    fd2c:	9414      	str	r4, [sp, #80]	; 0x50
    fd2e:	9513      	str	r5, [sp, #76]	; 0x4c
    fd30:	f000 fce7 	bl	10702 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E>
    fd34:	901b      	str	r0, [sp, #108]	; 0x6c
    fd36:	981b      	ldr	r0, [sp, #108]	; 0x6c
    fd38:	9017      	str	r0, [sp, #92]	; 0x5c
    fd3a:	e7ff      	b.n	fd3c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x34>
    let physical_width  = (physical_box.2 - physical_box.0 + 1) as usize;
    fd3c:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
    fd40:	f89d 105e 	ldrb.w	r1, [sp, #94]	; 0x5e
    fd44:	1a08      	subs	r0, r1, r0
    fd46:	b2c1      	uxtb	r1, r0
    fd48:	4602      	mov	r2, r0
    fd4a:	4281      	cmp	r1, r0
    fd4c:	9212      	str	r2, [sp, #72]	; 0x48
    fd4e:	f040 80fc 	bne.w	ff4a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x242>
    fd52:	e7ff      	b.n	fd54 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x4c>
    fd54:	2001      	movs	r0, #1
    fd56:	9912      	ldr	r1, [sp, #72]	; 0x48
    fd58:	fa50 f081 	uxtab	r0, r0, r1
    fd5c:	b2c2      	uxtb	r2, r0
    fd5e:	4603      	mov	r3, r0
    fd60:	4282      	cmp	r2, r0
    fd62:	9311      	str	r3, [sp, #68]	; 0x44
    fd64:	f040 80fd 	bne.w	ff62 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x25a>
    fd68:	e7ff      	b.n	fd6a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x62>
    fd6a:	9811      	ldr	r0, [sp, #68]	; 0x44
    fd6c:	b2c1      	uxtb	r1, r0
    fd6e:	460a      	mov	r2, r1
    fd70:	911c      	str	r1, [sp, #112]	; 0x70
    let physical_height = (physical_box.3 - physical_box.1 + 1) as usize;
    fd72:	f89d 105d 	ldrb.w	r1, [sp, #93]	; 0x5d
    fd76:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
    fd7a:	1a59      	subs	r1, r3, r1
    fd7c:	b2cb      	uxtb	r3, r1
    fd7e:	468c      	mov	ip, r1
    fd80:	428b      	cmp	r3, r1
    fd82:	9210      	str	r2, [sp, #64]	; 0x40
    fd84:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    fd88:	f040 80f7 	bne.w	ff7a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x272>
    fd8c:	e7ff      	b.n	fd8e <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x86>
    fd8e:	2001      	movs	r0, #1
    fd90:	990f      	ldr	r1, [sp, #60]	; 0x3c
    fd92:	fa50 f081 	uxtab	r0, r0, r1
    fd96:	b2c2      	uxtb	r2, r0
    fd98:	4603      	mov	r3, r0
    fd9a:	4282      	cmp	r2, r0
    fd9c:	930e      	str	r3, [sp, #56]	; 0x38
    fd9e:	f040 80f8 	bne.w	ff92 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x28a>
    fda2:	e7ff      	b.n	fda4 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x9c>
    fda4:	980e      	ldr	r0, [sp, #56]	; 0x38
    fda6:	b2c1      	uxtb	r1, r0
    fda8:	911d      	str	r1, [sp, #116]	; 0x74
    //  If the update region is small, render with a single block
    if physical_width + physical_height <= (BLOCK_WIDTH * PIXEL_WIDTH) + (BLOCK_HEIGHT * PIXEL_HEIGHT) {  //  Will not overflow SPI buffer
    fdaa:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fdac:	4411      	add	r1, r2
    fdae:	460b      	mov	r3, r1
    fdb0:	4291      	cmp	r1, r2
    fdb2:	930d      	str	r3, [sp, #52]	; 0x34
    fdb4:	f0c0 80f9 	bcc.w	ffaa <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2a2>
    fdb8:	e7ff      	b.n	fdba <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xb2>
    fdba:	980d      	ldr	r0, [sp, #52]	; 0x34
    fdbc:	2829      	cmp	r0, #41	; 0x29
    fdbe:	d307      	bcc.n	fdd0 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xc8>
    fdc0:	e7ff      	b.n	fdc2 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xba>
        render_block(left, top, right, bottom);
    } else {
        //  If the update region is too big for a single block, break the region into blocks and render
        let mut x = left;
    fdc2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    fdc4:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
        let mut y = top;
    fdc8:	9914      	ldr	r1, [sp, #80]	; 0x50
    fdca:	f88d 1063 	strb.w	r1, [sp, #99]	; 0x63
        loop {
    fdce:	e007      	b.n	fde0 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xd8>
        render_block(left, top, right, bottom);
    fdd0:	9813      	ldr	r0, [sp, #76]	; 0x4c
    fdd2:	9914      	ldr	r1, [sp, #80]	; 0x50
    fdd4:	9a15      	ldr	r2, [sp, #84]	; 0x54
    fdd6:	9b16      	ldr	r3, [sp, #88]	; 0x58
    fdd8:	f000 f96b 	bl	100b2 <_ZN3app5chip812render_block17h6c8b81526965606bE>
    fddc:	e7ff      	b.n	fdde <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xd6>
    if physical_width + physical_height <= (BLOCK_WIDTH * PIXEL_WIDTH) + (BLOCK_HEIGHT * PIXEL_HEIGHT) {  //  Will not overflow SPI buffer
    fdde:	e0b2      	b.n	ff46 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x23e>
            let block_right  = (x + BLOCK_WIDTH as u8 - 1).min(right);
    fde0:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    fde4:	3005      	adds	r0, #5
    fde6:	b2c1      	uxtb	r1, r0
    fde8:	4602      	mov	r2, r0
    fdea:	4281      	cmp	r1, r0
    fdec:	920c      	str	r2, [sp, #48]	; 0x30
    fdee:	f040 80e8 	bne.w	ffc2 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2ba>
    fdf2:	e7ff      	b.n	fdf4 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xec>
    fdf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fdf8:	990c      	ldr	r1, [sp, #48]	; 0x30
    fdfa:	fa50 f081 	uxtab	r0, r0, r1
    fdfe:	b2c2      	uxtb	r2, r0
    fe00:	4603      	mov	r3, r0
    fe02:	4282      	cmp	r2, r0
    fe04:	930b      	str	r3, [sp, #44]	; 0x2c
    fe06:	f040 80e8 	bne.w	ffda <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2d2>
    fe0a:	e7ff      	b.n	fe0c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x104>
    fe0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    fe0e:	9915      	ldr	r1, [sp, #84]	; 0x54
    fe10:	f007 fd80 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
    fe14:	4601      	mov	r1, r0
    fe16:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    fe1a:	910a      	str	r1, [sp, #40]	; 0x28
    fe1c:	e7ff      	b.n	fe1e <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x116>
            let block_bottom = (y + BLOCK_HEIGHT as u8 - 1).min(bottom);
    fe1e:	f89d 0063 	ldrb.w	r0, [sp, #99]	; 0x63
    fe22:	3005      	adds	r0, #5
    fe24:	b2c1      	uxtb	r1, r0
    fe26:	4602      	mov	r2, r0
    fe28:	4281      	cmp	r1, r0
    fe2a:	9209      	str	r2, [sp, #36]	; 0x24
    fe2c:	f040 80e1 	bne.w	fff2 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2ea>
    fe30:	e7ff      	b.n	fe32 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x12a>
    fe32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fe36:	9909      	ldr	r1, [sp, #36]	; 0x24
    fe38:	fa50 f081 	uxtab	r0, r0, r1
    fe3c:	b2c2      	uxtb	r2, r0
    fe3e:	4603      	mov	r3, r0
    fe40:	4282      	cmp	r2, r0
    fe42:	9308      	str	r3, [sp, #32]
    fe44:	f040 80e1 	bne.w	1000a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x302>
    fe48:	e7ff      	b.n	fe4a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x142>
    fe4a:	9808      	ldr	r0, [sp, #32]
    fe4c:	9916      	ldr	r1, [sp, #88]	; 0x58
    fe4e:	f007 fd61 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
    fe52:	4601      	mov	r1, r0
    fe54:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    fe58:	9107      	str	r1, [sp, #28]
    fe5a:	e7ff      	b.n	fe5c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x154>

            let physical_box     = get_bounding_box(left, top, right, bottom);  //  Returns (left,top,right,bottom)
    fe5c:	9813      	ldr	r0, [sp, #76]	; 0x4c
    fe5e:	9914      	ldr	r1, [sp, #80]	; 0x50
    fe60:	9a15      	ldr	r2, [sp, #84]	; 0x54
    fe62:	9b16      	ldr	r3, [sp, #88]	; 0x58
    fe64:	f000 fc4d 	bl	10702 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E>
    fe68:	901f      	str	r0, [sp, #124]	; 0x7c
    fe6a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    fe6c:	9019      	str	r0, [sp, #100]	; 0x64
    fe6e:	e7ff      	b.n	fe70 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x168>
            let _physical_width  = (physical_box.2 - physical_box.0 + 1) as usize;
    fe70:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
    fe74:	f89d 1066 	ldrb.w	r1, [sp, #102]	; 0x66
    fe78:	1a08      	subs	r0, r1, r0
    fe7a:	b2c1      	uxtb	r1, r0
    fe7c:	4602      	mov	r2, r0
    fe7e:	4281      	cmp	r1, r0
    fe80:	9206      	str	r2, [sp, #24]
    fe82:	f040 80ce 	bne.w	10022 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x31a>
    fe86:	e7ff      	b.n	fe88 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x180>
    fe88:	2001      	movs	r0, #1
    fe8a:	9906      	ldr	r1, [sp, #24]
    fe8c:	fa50 f081 	uxtab	r0, r0, r1
    fe90:	b2c2      	uxtb	r2, r0
    fe92:	4603      	mov	r3, r0
    fe94:	4282      	cmp	r2, r0
    fe96:	9305      	str	r3, [sp, #20]
    fe98:	f040 80cf 	bne.w	1003a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x332>
    fe9c:	e7ff      	b.n	fe9e <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x196>
    fe9e:	9805      	ldr	r0, [sp, #20]
    fea0:	b2c1      	uxtb	r1, r0
    fea2:	9120      	str	r1, [sp, #128]	; 0x80
            let _physical_height = (physical_box.3 - physical_box.1 + 1) as usize;
    fea4:	f89d 1065 	ldrb.w	r1, [sp, #101]	; 0x65
    fea8:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
    feac:	1a51      	subs	r1, r2, r1
    feae:	b2ca      	uxtb	r2, r1
    feb0:	460b      	mov	r3, r1
    feb2:	428a      	cmp	r2, r1
    feb4:	9304      	str	r3, [sp, #16]
    feb6:	f040 80cc 	bne.w	10052 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x34a>
    feba:	e7ff      	b.n	febc <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1b4>
    febc:	2001      	movs	r0, #1
    febe:	9904      	ldr	r1, [sp, #16]
    fec0:	fa50 f081 	uxtab	r0, r0, r1
    fec4:	b2c2      	uxtb	r2, r0
    fec6:	4603      	mov	r3, r0
    fec8:	4282      	cmp	r2, r0
    feca:	9303      	str	r3, [sp, #12]
    fecc:	f040 80cd 	bne.w	1006a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x362>
    fed0:	e7ff      	b.n	fed2 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1ca>
    fed2:	9803      	ldr	r0, [sp, #12]
    fed4:	b2c1      	uxtb	r1, r0
    fed6:	9121      	str	r1, [sp, #132]	; 0x84
            //  assert!(physical_width + physical_height <= (BLOCK_WIDTH * PIXEL_WIDTH) + (BLOCK_HEIGHT * PIXEL_HEIGHT), "region overflow");
            render_block(x, y,
    fed8:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    fedc:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    fee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fee2:	9b07      	ldr	r3, [sp, #28]
    fee4:	f000 f8e5 	bl	100b2 <_ZN3app5chip812render_block17h6c8b81526965606bE>
    fee8:	e7ff      	b.n	feea <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1e2>
                block_right,
                block_bottom
            );  //  Will not overflow SPI buffer
            x += BLOCK_WIDTH as u8;
    feea:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    feee:	3005      	adds	r0, #5
    fef0:	b2c1      	uxtb	r1, r0
    fef2:	4602      	mov	r2, r0
    fef4:	4281      	cmp	r1, r0
    fef6:	9202      	str	r2, [sp, #8]
    fef8:	f040 80c3 	bne.w	10082 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x37a>
    fefc:	e7ff      	b.n	fefe <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f6>
    fefe:	9802      	ldr	r0, [sp, #8]
    ff00:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
            if x > right {
    ff04:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
    ff08:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ff0a:	b2d3      	uxtb	r3, r2
    ff0c:	4299      	cmp	r1, r3
    ff0e:	d919      	bls.n	ff44 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x23c>
    ff10:	e7ff      	b.n	ff12 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x20a>
                x = left;
    ff12:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ff14:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
                y += BLOCK_HEIGHT as u8;
    ff18:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    ff1c:	3105      	adds	r1, #5
    ff1e:	b2ca      	uxtb	r2, r1
    ff20:	460b      	mov	r3, r1
    ff22:	428a      	cmp	r2, r1
    ff24:	9301      	str	r3, [sp, #4]
    ff26:	f040 80b8 	bne.w	1009a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x392>
    ff2a:	e7ff      	b.n	ff2c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x224>
    ff2c:	9801      	ldr	r0, [sp, #4]
    ff2e:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
                if y > bottom { break; }
    ff32:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    ff36:	9a16      	ldr	r2, [sp, #88]	; 0x58
    ff38:	b2d3      	uxtb	r3, r2
    ff3a:	4299      	cmp	r1, r3
    ff3c:	d801      	bhi.n	ff42 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x23a>
    ff3e:	e7ff      	b.n	ff40 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x238>
            if x > right {
    ff40:	e000      	b.n	ff44 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x23c>
    if physical_width + physical_height <= (BLOCK_WIDTH * PIXEL_WIDTH) + (BLOCK_HEIGHT * PIXEL_HEIGHT) {  //  Will not overflow SPI buffer
    ff42:	e000      	b.n	ff46 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x23e>
        loop {
    ff44:	e74c      	b.n	fde0 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xd8>
            }
        }
    }
}
    ff46:	b022      	add	sp, #136	; 0x88
    ff48:	bdb0      	pop	{r4, r5, r7, pc}
    let physical_width  = (physical_box.2 - physical_box.0 + 1) as usize;
    ff4a:	f640 2010 	movw	r0, #2576	; 0xa10
    ff4e:	f2c0 0002 	movt	r0, #2
    ff52:	f640 12f8 	movw	r2, #2552	; 0x9f8
    ff56:	f2c0 0202 	movt	r2, #2
    ff5a:	2121      	movs	r1, #33	; 0x21
    ff5c:	f008 fb9e 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ff60:	defe      	udf	#254	; 0xfe
    ff62:	f640 1030 	movw	r0, #2352	; 0x930
    ff66:	f2c0 0002 	movt	r0, #2
    ff6a:	f640 2234 	movw	r2, #2612	; 0xa34
    ff6e:	f2c0 0202 	movt	r2, #2
    ff72:	211c      	movs	r1, #28
    ff74:	f008 fb92 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ff78:	defe      	udf	#254	; 0xfe
    let physical_height = (physical_box.3 - physical_box.1 + 1) as usize;
    ff7a:	f640 2010 	movw	r0, #2576	; 0xa10
    ff7e:	f2c0 0002 	movt	r0, #2
    ff82:	f640 2244 	movw	r2, #2628	; 0xa44
    ff86:	f2c0 0202 	movt	r2, #2
    ff8a:	2121      	movs	r1, #33	; 0x21
    ff8c:	f008 fb86 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ff90:	defe      	udf	#254	; 0xfe
    ff92:	f640 1030 	movw	r0, #2352	; 0x930
    ff96:	f2c0 0002 	movt	r0, #2
    ff9a:	f640 2254 	movw	r2, #2644	; 0xa54
    ff9e:	f2c0 0202 	movt	r2, #2
    ffa2:	211c      	movs	r1, #28
    ffa4:	f008 fb7a 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ffa8:	defe      	udf	#254	; 0xfe
    if physical_width + physical_height <= (BLOCK_WIDTH * PIXEL_WIDTH) + (BLOCK_HEIGHT * PIXEL_HEIGHT) {  //  Will not overflow SPI buffer
    ffaa:	f640 1030 	movw	r0, #2352	; 0x930
    ffae:	f2c0 0002 	movt	r0, #2
    ffb2:	f640 2264 	movw	r2, #2660	; 0xa64
    ffb6:	f2c0 0202 	movt	r2, #2
    ffba:	211c      	movs	r1, #28
    ffbc:	f008 fb6e 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ffc0:	defe      	udf	#254	; 0xfe
            let block_right  = (x + BLOCK_WIDTH as u8 - 1).min(right);
    ffc2:	f640 1030 	movw	r0, #2352	; 0x930
    ffc6:	f2c0 0002 	movt	r0, #2
    ffca:	f640 2274 	movw	r2, #2676	; 0xa74
    ffce:	f2c0 0202 	movt	r2, #2
    ffd2:	211c      	movs	r1, #28
    ffd4:	f008 fb62 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ffd8:	defe      	udf	#254	; 0xfe
    ffda:	f640 2010 	movw	r0, #2576	; 0xa10
    ffde:	f2c0 0002 	movt	r0, #2
    ffe2:	f640 2284 	movw	r2, #2692	; 0xa84
    ffe6:	f2c0 0202 	movt	r2, #2
    ffea:	2121      	movs	r1, #33	; 0x21
    ffec:	f008 fb56 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fff0:	defe      	udf	#254	; 0xfe
            let block_bottom = (y + BLOCK_HEIGHT as u8 - 1).min(bottom);
    fff2:	f640 1030 	movw	r0, #2352	; 0x930
    fff6:	f2c0 0002 	movt	r0, #2
    fffa:	f640 2294 	movw	r2, #2708	; 0xa94
    fffe:	f2c0 0202 	movt	r2, #2
   10002:	211c      	movs	r1, #28
   10004:	f008 fb4a 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10008:	defe      	udf	#254	; 0xfe
   1000a:	f640 2010 	movw	r0, #2576	; 0xa10
   1000e:	f2c0 0002 	movt	r0, #2
   10012:	f640 22a4 	movw	r2, #2724	; 0xaa4
   10016:	f2c0 0202 	movt	r2, #2
   1001a:	2121      	movs	r1, #33	; 0x21
   1001c:	f008 fb3e 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10020:	defe      	udf	#254	; 0xfe
            let _physical_width  = (physical_box.2 - physical_box.0 + 1) as usize;
   10022:	f640 2010 	movw	r0, #2576	; 0xa10
   10026:	f2c0 0002 	movt	r0, #2
   1002a:	f640 22b4 	movw	r2, #2740	; 0xab4
   1002e:	f2c0 0202 	movt	r2, #2
   10032:	2121      	movs	r1, #33	; 0x21
   10034:	f008 fb32 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10038:	defe      	udf	#254	; 0xfe
   1003a:	f640 1030 	movw	r0, #2352	; 0x930
   1003e:	f2c0 0002 	movt	r0, #2
   10042:	f640 22c4 	movw	r2, #2756	; 0xac4
   10046:	f2c0 0202 	movt	r2, #2
   1004a:	211c      	movs	r1, #28
   1004c:	f008 fb26 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10050:	defe      	udf	#254	; 0xfe
            let _physical_height = (physical_box.3 - physical_box.1 + 1) as usize;
   10052:	f640 2010 	movw	r0, #2576	; 0xa10
   10056:	f2c0 0002 	movt	r0, #2
   1005a:	f640 22d4 	movw	r2, #2772	; 0xad4
   1005e:	f2c0 0202 	movt	r2, #2
   10062:	2121      	movs	r1, #33	; 0x21
   10064:	f008 fb1a 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10068:	defe      	udf	#254	; 0xfe
   1006a:	f640 1030 	movw	r0, #2352	; 0x930
   1006e:	f2c0 0002 	movt	r0, #2
   10072:	f640 22e4 	movw	r2, #2788	; 0xae4
   10076:	f2c0 0202 	movt	r2, #2
   1007a:	211c      	movs	r1, #28
   1007c:	f008 fb0e 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10080:	defe      	udf	#254	; 0xfe
            x += BLOCK_WIDTH as u8;
   10082:	f640 1030 	movw	r0, #2352	; 0x930
   10086:	f2c0 0002 	movt	r0, #2
   1008a:	f640 22f4 	movw	r2, #2804	; 0xaf4
   1008e:	f2c0 0202 	movt	r2, #2
   10092:	211c      	movs	r1, #28
   10094:	f008 fb02 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10098:	defe      	udf	#254	; 0xfe
                y += BLOCK_HEIGHT as u8;
   1009a:	f640 1030 	movw	r0, #2352	; 0x930
   1009e:	f2c0 0002 	movt	r0, #2
   100a2:	f640 3204 	movw	r2, #2820	; 0xb04
   100a6:	f2c0 0202 	movt	r2, #2
   100aa:	211c      	movs	r1, #28
   100ac:	f008 faf6 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   100b0:	defe      	udf	#254	; 0xfe

000100b2 <_ZN3app5chip812render_block17h6c8b81526965606bE>:

/// Render the Virtual Block
fn render_block(left: u8, top: u8, right: u8, bottom: u8) {
   100b2:	b570      	push	{r4, r5, r6, lr}
   100b4:	b092      	sub	sp, #72	; 0x48
   100b6:	469c      	mov	ip, r3
   100b8:	4696      	mov	lr, r2
   100ba:	460c      	mov	r4, r1
   100bc:	4605      	mov	r5, r0
   100be:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
   100c2:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
   100c6:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
   100ca:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    //  console::print("render "); console::printint(left as i32); console::print(", "); console::printint(top as i32); console::print(", "); console::printint(right as i32 - left as i32); console::print(", "); console::printint(bottom as i32 - top as i32); console::print("\n"); console::flush(); ////
    //  Create a new block for the region to be updated
    let mut block = PixelIterator::new(
   100ce:	466e      	mov	r6, sp
   100d0:	6033      	str	r3, [r6, #0]
   100d2:	ab0a      	add	r3, sp, #40	; 0x28
   100d4:	9009      	str	r0, [sp, #36]	; 0x24
   100d6:	4618      	mov	r0, r3
   100d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   100da:	9108      	str	r1, [sp, #32]
   100dc:	4619      	mov	r1, r3
   100de:	9e08      	ldr	r6, [sp, #32]
   100e0:	9207      	str	r2, [sp, #28]
   100e2:	4632      	mov	r2, r6
   100e4:	9b07      	ldr	r3, [sp, #28]
   100e6:	f8cd c018 	str.w	ip, [sp, #24]
   100ea:	f8cd e014 	str.w	lr, [sp, #20]
   100ee:	9404      	str	r4, [sp, #16]
   100f0:	9503      	str	r5, [sp, #12]
   100f2:	f000 f832 	bl	1015a <_ZN3app5chip813PixelIterator3new17h975cb5db80e10243E>
   100f6:	e7ff      	b.n	100f8 <_ZN3app5chip812render_block17h6c8b81526965606bE+0x46>
   100f8:	a80a      	add	r0, sp, #40	; 0x28
        left, top, 
        right, bottom,
    );
    //  Render the block
    let (left_physical, top_physical, right_physical, bottom_physical) = block.get_window();
   100fa:	f000 f884 	bl	10206 <_ZN3app5chip813PixelIterator10get_window17h111d7a23399766c3E>
   100fe:	9010      	str	r0, [sp, #64]	; 0x40
   10100:	9810      	ldr	r0, [sp, #64]	; 0x40
   10102:	900e      	str	r0, [sp, #56]	; 0x38
   10104:	e7ff      	b.n	10106 <_ZN3app5chip812render_block17h6c8b81526965606bE+0x54>
   10106:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
   1010a:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
   1010e:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
   10112:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   10116:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   1011a:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
   1011e:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   10122:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    druid::set_display_pixels(left_physical as u16, top_physical as u16, right_physical as u16, bottom_physical as u16,
   10126:	46ec      	mov	ip, sp
   10128:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1012c:	f8cc e000 	str.w	lr, [ip]
   10130:	f001 fe9c 	bl	11e6c <_ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE>
   10134:	9002      	str	r0, [sp, #8]
   10136:	e7ff      	b.n	10138 <_ZN3app5chip812render_block17h6c8b81526965606bE+0x86>
   10138:	9802      	ldr	r0, [sp, #8]
   1013a:	f000 0001 	and.w	r0, r0, #1
   1013e:	f640 3114 	movw	r1, #2836	; 0xb14
   10142:	f2c0 0102 	movt	r1, #2
   10146:	f640 3328 	movw	r3, #2856	; 0xb28
   1014a:	f2c0 0302 	movt	r3, #2
   1014e:	2211      	movs	r2, #17
   10150:	f005 fead 	bl	15eae <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   10154:	e7ff      	b.n	10156 <_ZN3app5chip812render_block17h6c8b81526965606bE+0xa4>
        &mut block
    ).expect("set pixels failed");    
}
   10156:	b012      	add	sp, #72	; 0x48
   10158:	bd70      	pop	{r4, r5, r6, pc}

0001015a <_ZN3app5chip813PixelIterator3new17h975cb5db80e10243E>:
    physical_bottom:    u8,
}

impl PixelIterator {
    /// Return a new PixelInterator for the block dimensions
    pub fn new(
   1015a:	b570      	push	{r4, r5, r6, lr}
   1015c:	b08a      	sub	sp, #40	; 0x28
   1015e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   10162:	469e      	mov	lr, r3
   10164:	4614      	mov	r4, r2
   10166:	460d      	mov	r5, r1
   10168:	f88d 101c 	strb.w	r1, [sp, #28]
   1016c:	f88d 201d 	strb.w	r2, [sp, #29]
   10170:	f88d 301e 	strb.w	r3, [sp, #30]
   10174:	f88d c01f 	strb.w	ip, [sp, #31]
        block_right:     u8,
        //  End row number for block
        block_bottom:    u8,        
    ) -> PixelIterator {
        let (physical_left, physical_top, physical_right, physical_bottom) = 
            get_bounding_box(block_left, block_top, block_right, block_bottom);
   10178:	9005      	str	r0, [sp, #20]
   1017a:	4608      	mov	r0, r1
   1017c:	4611      	mov	r1, r2
   1017e:	461a      	mov	r2, r3
   10180:	4663      	mov	r3, ip
   10182:	f8cd c010 	str.w	ip, [sp, #16]
   10186:	f8cd e00c 	str.w	lr, [sp, #12]
   1018a:	9402      	str	r4, [sp, #8]
   1018c:	9501      	str	r5, [sp, #4]
   1018e:	f000 fab8 	bl	10702 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E>
   10192:	9008      	str	r0, [sp, #32]
   10194:	9808      	ldr	r0, [sp, #32]
   10196:	9006      	str	r0, [sp, #24]
   10198:	e7ff      	b.n	1019a <_ZN3app5chip813PixelIterator3new17h975cb5db80e10243E+0x40>
        let (physical_left, physical_top, physical_right, physical_bottom) = 
   1019a:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1019e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   101a2:	f89d 1019 	ldrb.w	r1, [sp, #25]
   101a6:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   101aa:	f89d 201a 	ldrb.w	r2, [sp, #26]
   101ae:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
   101b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
   101b6:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        PixelIterator {
   101ba:	f8dd c004 	ldr.w	ip, [sp, #4]
   101be:	f8dd e014 	ldr.w	lr, [sp, #20]
   101c2:	f88e c000 	strb.w	ip, [lr]
   101c6:	9c02      	ldr	r4, [sp, #8]
   101c8:	f88e 4001 	strb.w	r4, [lr, #1]
   101cc:	2500      	movs	r5, #0
   101ce:	f88e 5002 	strb.w	r5, [lr, #2]
   101d2:	f88e 5003 	strb.w	r5, [lr, #3]
   101d6:	f88e 0004 	strb.w	r0, [lr, #4]
   101da:	f88e 1005 	strb.w	r1, [lr, #5]
   101de:	f88e c006 	strb.w	ip, [lr, #6]
   101e2:	9d03      	ldr	r5, [sp, #12]
   101e4:	f88e 5007 	strb.w	r5, [lr, #7]
   101e8:	f88e 4008 	strb.w	r4, [lr, #8]
   101ec:	9e04      	ldr	r6, [sp, #16]
   101ee:	f88e 6009 	strb.w	r6, [lr, #9]
   101f2:	f88e 000a 	strb.w	r0, [lr, #10]
   101f6:	f88e 200b 	strb.w	r2, [lr, #11]
   101fa:	f88e 100c 	strb.w	r1, [lr, #12]
   101fe:	f88e 300d 	strb.w	r3, [lr, #13]
            x_physical: physical_left,
            y_physical: physical_top,
            block_left, block_right, block_top, block_bottom,
            physical_left, physical_top, physical_right, physical_bottom
        }
    }
   10202:	b00a      	add	sp, #40	; 0x28
   10204:	bd70      	pop	{r4, r5, r6, pc}

00010206 <_ZN3app5chip813PixelIterator10get_window17h111d7a23399766c3E>:
        x >= self.block_left && x <= self.block_right &&
            y >= self.block_top && y <= self.block_bottom
    } */

    /// Return window of Physical Pixels (left, top, right, bottom) for this Virtual Block
    pub fn get_window(&self) -> (u8, u8, u8, u8) {
   10206:	b082      	sub	sp, #8
   10208:	9001      	str	r0, [sp, #4]
        ( self.physical_left, self.physical_top, self.physical_right, self.physical_bottom )
   1020a:	7a81      	ldrb	r1, [r0, #10]
   1020c:	7ac2      	ldrb	r2, [r0, #11]
   1020e:	7b03      	ldrb	r3, [r0, #12]
   10210:	7b40      	ldrb	r0, [r0, #13]
   10212:	f88d 1000 	strb.w	r1, [sp]
   10216:	f88d 3001 	strb.w	r3, [sp, #1]
   1021a:	f88d 2002 	strb.w	r2, [sp, #2]
   1021e:	f88d 0003 	strb.w	r0, [sp, #3]
    }
   10222:	9800      	ldr	r0, [sp, #0]
   10224:	b002      	add	sp, #8
   10226:	4770      	bx	lr

00010228 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE>:

    /// Return the 16-bit colour of the Virtual Pixel
    fn get_color(&mut self) -> u16 {
   10228:	b580      	push	{r7, lr}
   1022a:	b08a      	sub	sp, #40	; 0x28
   1022c:	9007      	str	r0, [sp, #28]
        assert!(self.x < SCREEN_WIDTH as u8 && self.y < SCREEN_HEIGHT as u8, "color overflow");
   1022e:	7801      	ldrb	r1, [r0, #0]
   10230:	2940      	cmp	r1, #64	; 0x40
   10232:	9005      	str	r0, [sp, #20]
   10234:	d308      	bcc.n	10248 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x20>
   10236:	e003      	b.n	10240 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x18>
   10238:	2001      	movs	r0, #1
   1023a:	f88d 001a 	strb.w	r0, [sp, #26]
   1023e:	e008      	b.n	10252 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x2a>
   10240:	2000      	movs	r0, #0
   10242:	f88d 001a 	strb.w	r0, [sp, #26]
   10246:	e004      	b.n	10252 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x2a>
   10248:	9805      	ldr	r0, [sp, #20]
   1024a:	7841      	ldrb	r1, [r0, #1]
   1024c:	2920      	cmp	r1, #32
   1024e:	d3f3      	bcc.n	10238 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x10>
   10250:	e7f6      	b.n	10240 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x18>
   10252:	f89d 001a 	ldrb.w	r0, [sp, #26]
   10256:	07c0      	lsls	r0, r0, #31
   10258:	2800      	cmp	r0, #0
   1025a:	d00a      	beq.n	10272 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x4a>
   1025c:	e7ff      	b.n	1025e <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x36>
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
   1025e:	9805      	ldr	r0, [sp, #20]
   10260:	7801      	ldrb	r1, [r0, #0]
   10262:	7842      	ldrb	r2, [r0, #1]
   10264:	0192      	lsls	r2, r2, #6
   10266:	2300      	movs	r3, #0
   10268:	2b00      	cmp	r3, #0
   1026a:	9104      	str	r1, [sp, #16]
   1026c:	9203      	str	r2, [sp, #12]
   1026e:	d161      	bne.n	10334 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x10c>
   10270:	e00b      	b.n	1028a <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x62>
        assert!(self.x < SCREEN_WIDTH as u8 && self.y < SCREEN_HEIGHT as u8, "color overflow");
   10272:	f640 3038 	movw	r0, #2872	; 0xb38
   10276:	f2c0 0002 	movt	r0, #2
   1027a:	f640 3248 	movw	r2, #2888	; 0xb48
   1027e:	f2c0 0202 	movt	r2, #2
   10282:	210e      	movs	r1, #14
   10284:	f008 fa0a 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10288:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
   1028a:	9804      	ldr	r0, [sp, #16]
   1028c:	9903      	ldr	r1, [sp, #12]
   1028e:	1842      	adds	r2, r0, r1
   10290:	4613      	mov	r3, r2
   10292:	4282      	cmp	r2, r0
   10294:	9302      	str	r3, [sp, #8]
   10296:	d359      	bcc.n	1034c <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x124>
   10298:	e7ff      	b.n	1029a <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x72>
   1029a:	9802      	ldr	r0, [sp, #8]
   1029c:	9008      	str	r0, [sp, #32]
   1029e:	2100      	movs	r1, #0
        let color = unsafe { convert_color(SCREEN_BUFFER[i]) };
   102a0:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
   102a4:	d15e      	bne.n	10364 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x13c>
   102a6:	e7ff      	b.n	102a8 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x80>
   102a8:	f244 10b4 	movw	r0, #16820	; 0x41b4
   102ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
   102b0:	9902      	ldr	r1, [sp, #8]
   102b2:	5c40      	ldrb	r0, [r0, r1]
   102b4:	f000 f93d 	bl	10532 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E>
   102b8:	4601      	mov	r1, r0
   102ba:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   102be:	9101      	str	r1, [sp, #4]
   102c0:	e7ff      	b.n	102c2 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x9a>
        if self.x_offset == 0 && self.y_offset == 0 {  //  Update colours only once per Virtual Pixel
   102c2:	9805      	ldr	r0, [sp, #20]
   102c4:	7881      	ldrb	r1, [r0, #2]
   102c6:	2900      	cmp	r1, #0
   102c8:	d008      	beq.n	102dc <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xb4>
   102ca:	e003      	b.n	102d4 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xac>
   102cc:	2001      	movs	r0, #1
   102ce:	f88d 001b 	strb.w	r0, [sp, #27]
   102d2:	e008      	b.n	102e6 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xbe>
   102d4:	2000      	movs	r0, #0
   102d6:	f88d 001b 	strb.w	r0, [sp, #27]
   102da:	e004      	b.n	102e6 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xbe>
   102dc:	9805      	ldr	r0, [sp, #20]
   102de:	78c1      	ldrb	r1, [r0, #3]
   102e0:	2900      	cmp	r1, #0
   102e2:	d0f3      	beq.n	102cc <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xa4>
   102e4:	e7f6      	b.n	102d4 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xac>
   102e6:	f89d 001b 	ldrb.w	r0, [sp, #27]
   102ea:	07c0      	lsls	r0, r0, #31
   102ec:	2800      	cmp	r0, #0
   102ee:	d01e      	beq.n	1032e <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x106>
   102f0:	e7ff      	b.n	102f2 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xca>
   102f2:	2000      	movs	r0, #0
            unsafe { SCREEN_BUFFER[i] = update_color(SCREEN_BUFFER[i]); }  //  Fade to black
   102f4:	9902      	ldr	r1, [sp, #8]
   102f6:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
   102fa:	d13d      	bne.n	10378 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x150>
   102fc:	e7ff      	b.n	102fe <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xd6>
   102fe:	f244 10b4 	movw	r0, #16820	; 0x41b4
   10302:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10306:	9902      	ldr	r1, [sp, #8]
   10308:	5c40      	ldrb	r0, [r0, r1]
   1030a:	f000 f99f 	bl	1064c <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E>
   1030e:	9000      	str	r0, [sp, #0]
   10310:	e7ff      	b.n	10312 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xea>
   10312:	2000      	movs	r0, #0
   10314:	9902      	ldr	r1, [sp, #8]
   10316:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
   1031a:	d137      	bne.n	1038c <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x164>
   1031c:	e7ff      	b.n	1031e <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0xf6>
   1031e:	f244 10b4 	movw	r0, #16820	; 0x41b4
   10322:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10326:	9900      	ldr	r1, [sp, #0]
   10328:	9a02      	ldr	r2, [sp, #8]
   1032a:	5481      	strb	r1, [r0, r2]
        if self.x_offset == 0 && self.y_offset == 0 {  //  Update colours only once per Virtual Pixel
   1032c:	e7ff      	b.n	1032e <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE+0x106>
        }
        color
    }    
   1032e:	9801      	ldr	r0, [sp, #4]
   10330:	b00a      	add	sp, #40	; 0x28
   10332:	bd80      	pop	{r7, pc}
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
   10334:	f640 00f0 	movw	r0, #2288	; 0x8f0
   10338:	f2c0 0002 	movt	r0, #2
   1033c:	f640 3258 	movw	r2, #2904	; 0xb58
   10340:	f2c0 0202 	movt	r2, #2
   10344:	2121      	movs	r1, #33	; 0x21
   10346:	f008 f9a9 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1034a:	defe      	udf	#254	; 0xfe
   1034c:	f640 1030 	movw	r0, #2352	; 0x930
   10350:	f2c0 0002 	movt	r0, #2
   10354:	f640 3268 	movw	r2, #2920	; 0xb68
   10358:	f2c0 0202 	movt	r2, #2
   1035c:	211c      	movs	r1, #28
   1035e:	f008 f99d 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10362:	defe      	udf	#254	; 0xfe
        let color = unsafe { convert_color(SCREEN_BUFFER[i]) };
   10364:	f640 3078 	movw	r0, #2936	; 0xb78
   10368:	f2c0 0002 	movt	r0, #2
   1036c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10370:	9902      	ldr	r1, [sp, #8]
   10372:	f008 f9a9 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10376:	defe      	udf	#254	; 0xfe
            unsafe { SCREEN_BUFFER[i] = update_color(SCREEN_BUFFER[i]); }  //  Fade to black
   10378:	f640 3088 	movw	r0, #2952	; 0xb88
   1037c:	f2c0 0002 	movt	r0, #2
   10380:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10384:	9902      	ldr	r1, [sp, #8]
   10386:	f008 f99f 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1038a:	defe      	udf	#254	; 0xfe
   1038c:	f640 3098 	movw	r0, #2968	; 0xb98
   10390:	f2c0 0002 	movt	r0, #2
   10394:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10398:	9902      	ldr	r1, [sp, #8]
   1039a:	f008 f995 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1039e:	defe      	udf	#254	; 0xfe

000103a0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE>:
        return Some(color);
    }

    /// Return the next Physical Pixel colour
    #[cfg(feature = "chip8_curve")]  //  If we are rendering CHIP8 Emulator as curved surface...
    fn next(&mut self) -> Option<Self::Item> {
   103a0:	b580      	push	{r7, lr}
   103a2:	b08c      	sub	sp, #48	; 0x30
   103a4:	900a      	str	r0, [sp, #40]	; 0x28
        if self.y_physical > self.physical_bottom { return None; }  //  No more Physical Pixels
   103a6:	7941      	ldrb	r1, [r0, #5]
   103a8:	7b42      	ldrb	r2, [r0, #13]
   103aa:	4291      	cmp	r1, r2
   103ac:	9007      	str	r0, [sp, #28]
   103ae:	d805      	bhi.n	103bc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x1c>
   103b0:	e7ff      	b.n	103b2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x12>
        assert!(self.x_physical < PHYSICAL_WIDTH as u8, "x overflow");
   103b2:	9807      	ldr	r0, [sp, #28]
   103b4:	7901      	ldrb	r1, [r0, #4]
   103b6:	29ef      	cmp	r1, #239	; 0xef
   103b8:	d80f      	bhi.n	103da <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x3a>
   103ba:	e009      	b.n	103d0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x30>
   103bc:	2000      	movs	r0, #0
        if self.y_physical > self.physical_bottom { return None; }  //  No more Physical Pixels
   103be:	f8ad 0020 	strh.w	r0, [sp, #32]
   103c2:	e7ff      	b.n	103c4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x24>
            self.y_physical += 1;
        }
        
        //  Return the Physical Pixel color
        return Some(color);
    }    
   103c4:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   103c8:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   103cc:	b00c      	add	sp, #48	; 0x30
   103ce:	bd80      	pop	{r7, pc}
        assert!(self.y_physical < PHYSICAL_HEIGHT as u8, "y overflow");
   103d0:	9807      	ldr	r0, [sp, #28]
   103d2:	7941      	ldrb	r1, [r0, #5]
   103d4:	29c7      	cmp	r1, #199	; 0xc7
   103d6:	d81b      	bhi.n	10410 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x70>
   103d8:	e00b      	b.n	103f2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x52>
        assert!(self.x_physical < PHYSICAL_WIDTH as u8, "x overflow");
   103da:	f640 009c 	movw	r0, #2204	; 0x89c
   103de:	f2c0 0002 	movt	r0, #2
   103e2:	f640 32a8 	movw	r2, #2984	; 0xba8
   103e6:	f2c0 0202 	movt	r2, #2
   103ea:	210a      	movs	r1, #10
   103ec:	f008 f956 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   103f0:	defe      	udf	#254	; 0xfe
        let virtual_pixel = map_physical_to_virtual(self.x_physical, self.y_physical);
   103f2:	9807      	ldr	r0, [sp, #28]
   103f4:	7900      	ldrb	r0, [r0, #4]
   103f6:	9907      	ldr	r1, [sp, #28]
   103f8:	7949      	ldrb	r1, [r1, #5]
   103fa:	f000 fa1e 	bl	1083a <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E>
   103fe:	4602      	mov	r2, r0
   10400:	460b      	mov	r3, r1
   10402:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
   10406:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
   1040a:	9206      	str	r2, [sp, #24]
   1040c:	9305      	str	r3, [sp, #20]
   1040e:	e00b      	b.n	10428 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x88>
        assert!(self.y_physical < PHYSICAL_HEIGHT as u8, "y overflow");
   10410:	f640 00b8 	movw	r0, #2232	; 0x8b8
   10414:	f2c0 0002 	movt	r0, #2
   10418:	f640 32b8 	movw	r2, #3000	; 0xbb8
   1041c:	f2c0 0202 	movt	r2, #2
   10420:	210a      	movs	r1, #10
   10422:	f008 f93b 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10426:	defe      	udf	#254	; 0xfe
        if self.x == virtual_pixel.0 && self.y == virtual_pixel.1 {
   10428:	9807      	ldr	r0, [sp, #28]
   1042a:	7801      	ldrb	r1, [r0, #0]
   1042c:	9a06      	ldr	r2, [sp, #24]
   1042e:	b2d3      	uxtb	r3, r2
   10430:	4299      	cmp	r1, r3
   10432:	d008      	beq.n	10446 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xa6>
   10434:	e003      	b.n	1043e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x9e>
   10436:	2001      	movs	r0, #1
   10438:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   1043c:	e00a      	b.n	10454 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xb4>
   1043e:	2000      	movs	r0, #0
   10440:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   10444:	e006      	b.n	10454 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xb4>
   10446:	9807      	ldr	r0, [sp, #28]
   10448:	7841      	ldrb	r1, [r0, #1]
   1044a:	9a05      	ldr	r2, [sp, #20]
   1044c:	b2d3      	uxtb	r3, r2
   1044e:	4299      	cmp	r1, r3
   10450:	d0f1      	beq.n	10436 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x96>
   10452:	e7f4      	b.n	1043e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x9e>
   10454:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   10458:	07c0      	lsls	r0, r0, #31
   1045a:	2800      	cmp	r0, #0
   1045c:	d109      	bne.n	10472 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xd2>
   1045e:	e7ff      	b.n	10460 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xc0>
            self.x = virtual_pixel.0;
   10460:	9806      	ldr	r0, [sp, #24]
   10462:	9907      	ldr	r1, [sp, #28]
   10464:	7008      	strb	r0, [r1, #0]
            self.y = virtual_pixel.1;
   10466:	9a05      	ldr	r2, [sp, #20]
   10468:	704a      	strb	r2, [r1, #1]
   1046a:	2300      	movs	r3, #0
            self.x_offset = 0;
   1046c:	708b      	strb	r3, [r1, #2]
            self.y_offset = 0;
   1046e:	70cb      	strb	r3, [r1, #3]
        if self.x == virtual_pixel.0 && self.y == virtual_pixel.1 {
   10470:	e00c      	b.n	1048c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xec>
            self.x_offset += 1;
   10472:	9807      	ldr	r0, [sp, #28]
   10474:	7881      	ldrb	r1, [r0, #2]
   10476:	3101      	adds	r1, #1
   10478:	b2ca      	uxtb	r2, r1
   1047a:	460b      	mov	r3, r1
   1047c:	428a      	cmp	r2, r1
   1047e:	9304      	str	r3, [sp, #16]
   10480:	d133      	bne.n	104ea <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x14a>
   10482:	e7ff      	b.n	10484 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xe4>
   10484:	9804      	ldr	r0, [sp, #16]
   10486:	9907      	ldr	r1, [sp, #28]
   10488:	7088      	strb	r0, [r1, #2]
        if self.x == virtual_pixel.0 && self.y == virtual_pixel.1 {
   1048a:	e7ff      	b.n	1048c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xec>
        let color = self.get_color();
   1048c:	9807      	ldr	r0, [sp, #28]
   1048e:	f7ff fecb 	bl	10228 <_ZN3app5chip813PixelIterator9get_color17h7767fc783e6b7e6dE>
   10492:	4601      	mov	r1, r0
   10494:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   10498:	9103      	str	r1, [sp, #12]
   1049a:	e7ff      	b.n	1049c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0xfc>
        self.x_physical += 1;
   1049c:	9807      	ldr	r0, [sp, #28]
   1049e:	7901      	ldrb	r1, [r0, #4]
   104a0:	3101      	adds	r1, #1
   104a2:	b2ca      	uxtb	r2, r1
   104a4:	460b      	mov	r3, r1
   104a6:	428a      	cmp	r2, r1
   104a8:	9302      	str	r3, [sp, #8]
   104aa:	d12a      	bne.n	10502 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x162>
   104ac:	e7ff      	b.n	104ae <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x10e>
   104ae:	9802      	ldr	r0, [sp, #8]
   104b0:	9907      	ldr	r1, [sp, #28]
   104b2:	7108      	strb	r0, [r1, #4]
        if self.x_physical > self.physical_right {
   104b4:	790a      	ldrb	r2, [r1, #4]
   104b6:	7acb      	ldrb	r3, [r1, #11]
   104b8:	429a      	cmp	r2, r3
   104ba:	d90f      	bls.n	104dc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x13c>
   104bc:	e7ff      	b.n	104be <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x11e>
            self.x_physical = self.physical_left;
   104be:	9807      	ldr	r0, [sp, #28]
   104c0:	7a81      	ldrb	r1, [r0, #10]
   104c2:	7101      	strb	r1, [r0, #4]
            self.y_physical += 1;
   104c4:	7941      	ldrb	r1, [r0, #5]
   104c6:	3101      	adds	r1, #1
   104c8:	b2ca      	uxtb	r2, r1
   104ca:	460b      	mov	r3, r1
   104cc:	428a      	cmp	r2, r1
   104ce:	9301      	str	r3, [sp, #4]
   104d0:	d123      	bne.n	1051a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x17a>
   104d2:	e7ff      	b.n	104d4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x134>
   104d4:	9801      	ldr	r0, [sp, #4]
   104d6:	9907      	ldr	r1, [sp, #28]
   104d8:	7148      	strb	r0, [r1, #5]
        if self.x_physical > self.physical_right {
   104da:	e7ff      	b.n	104dc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x13c>
        return Some(color);
   104dc:	9803      	ldr	r0, [sp, #12]
   104de:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
   104e2:	2101      	movs	r1, #1
   104e4:	f8ad 1020 	strh.w	r1, [sp, #32]
   104e8:	e76c      	b.n	103c4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE+0x24>
            self.x_offset += 1;
   104ea:	f640 1030 	movw	r0, #2352	; 0x930
   104ee:	f2c0 0002 	movt	r0, #2
   104f2:	f640 32c8 	movw	r2, #3016	; 0xbc8
   104f6:	f2c0 0202 	movt	r2, #2
   104fa:	211c      	movs	r1, #28
   104fc:	f008 f8ce 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10500:	defe      	udf	#254	; 0xfe
        self.x_physical += 1;
   10502:	f640 1030 	movw	r0, #2352	; 0x930
   10506:	f2c0 0002 	movt	r0, #2
   1050a:	f640 32d8 	movw	r2, #3032	; 0xbd8
   1050e:	f2c0 0202 	movt	r2, #2
   10512:	211c      	movs	r1, #28
   10514:	f008 f8c2 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10518:	defe      	udf	#254	; 0xfe
            self.y_physical += 1;
   1051a:	f640 1030 	movw	r0, #2352	; 0x930
   1051e:	f2c0 0002 	movt	r0, #2
   10522:	f640 32e8 	movw	r2, #3048	; 0xbe8
   10526:	f2c0 0202 	movt	r2, #2
   1052a:	211c      	movs	r1, #28
   1052c:	f008 f8b6 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10530:	defe      	udf	#254	; 0xfe

00010532 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E>:
}

/// Convert the Virtual Colour (8-bit greyscale) to 16-bit Colour
fn convert_color(grey: u8) -> u16 {
   10532:	b580      	push	{r7, lr}
   10534:	b08a      	sub	sp, #40	; 0x28
   10536:	b2c1      	uxtb	r1, r0
   10538:	4602      	mov	r2, r0
   1053a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    match grey {
        250..=255 => Rgb565::from(( grey, grey, grey )).0,  //  White
   1053e:	29fa      	cmp	r1, #250	; 0xfa
   10540:	9205      	str	r2, [sp, #20]
   10542:	d304      	bcc.n	1054e <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x1c>
   10544:	e7ff      	b.n	10546 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x14>
   10546:	2001      	movs	r0, #1
   10548:	2800      	cmp	r0, #0
   1054a:	d11d      	bne.n	10588 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x56>
   1054c:	e7ff      	b.n	1054e <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x1c>
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
   1054e:	9805      	ldr	r0, [sp, #20]
   10550:	b241      	sxtb	r1, r0
   10552:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   10556:	dc05      	bgt.n	10564 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x32>
   10558:	e7ff      	b.n	1055a <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x28>
   1055a:	9805      	ldr	r0, [sp, #20]
   1055c:	b2c1      	uxtb	r1, r0
   1055e:	29fa      	cmp	r1, #250	; 0xfa
   10560:	d327      	bcc.n	105b2 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x80>
   10562:	e7ff      	b.n	10564 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x32>
   10564:	2000      	movs	r0, #0
        0..128   => Rgb565::from(( 0, 0, grey )).0,  //  Dark Blue
   10566:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   1056a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   1056e:	9805      	ldr	r0, [sp, #20]
   10570:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
   10574:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
   10578:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   1057c:	ea42 4001 	orr.w	r0, r2, r1, lsl #16
   10580:	f002 f88a 	bl	12698 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
   10584:	9004      	str	r0, [sp, #16]
   10586:	e041      	b.n	1060c <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xda>
        250..=255 => Rgb565::from(( grey, grey, grey )).0,  //  White
   10588:	9805      	ldr	r0, [sp, #20]
   1058a:	f88d 001c 	strb.w	r0, [sp, #28]
   1058e:	f88d 001d 	strb.w	r0, [sp, #29]
   10592:	f88d 001e 	strb.w	r0, [sp, #30]
   10596:	f89d 101e 	ldrb.w	r1, [sp, #30]
   1059a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   1059e:	ea42 4001 	orr.w	r0, r2, r1, lsl #16
   105a2:	f002 f879 	bl	12698 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
   105a6:	9003      	str	r0, [sp, #12]
   105a8:	e7ff      	b.n	105aa <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x78>
   105aa:	9803      	ldr	r0, [sp, #12]
   105ac:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
   105b0:	e030      	b.n	10614 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xe2>
   105b2:	f06f 0063 	mvn.w	r0, #99	; 0x63
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
   105b6:	9905      	ldr	r1, [sp, #20]
   105b8:	fa50 f081 	uxtab	r0, r0, r1
   105bc:	b2c2      	uxtb	r2, r0
   105be:	4603      	mov	r3, r0
   105c0:	4282      	cmp	r2, r0
   105c2:	9302      	str	r3, [sp, #8]
   105c4:	d12a      	bne.n	1061c <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xea>
   105c6:	e7ff      	b.n	105c8 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x96>
   105c8:	f06f 0063 	mvn.w	r0, #99	; 0x63
   105cc:	9905      	ldr	r1, [sp, #20]
   105ce:	fa50 f081 	uxtab	r0, r0, r1
   105d2:	b2c2      	uxtb	r2, r0
   105d4:	4603      	mov	r3, r0
   105d6:	4282      	cmp	r2, r0
   105d8:	9301      	str	r3, [sp, #4]
   105da:	d12b      	bne.n	10634 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x102>
   105dc:	e7ff      	b.n	105de <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xac>
   105de:	9802      	ldr	r0, [sp, #8]
   105e0:	f88d 0020 	strb.w	r0, [sp, #32]
   105e4:	9905      	ldr	r1, [sp, #20]
   105e6:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   105ea:	9a01      	ldr	r2, [sp, #4]
   105ec:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   105f0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   105f4:	f8bd c020 	ldrh.w	ip, [sp, #32]
   105f8:	ea4c 4003 	orr.w	r0, ip, r3, lsl #16
   105fc:	f002 f84c 	bl	12698 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
   10600:	9000      	str	r0, [sp, #0]
   10602:	e7ff      	b.n	10604 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xd2>
   10604:	9800      	ldr	r0, [sp, #0]
   10606:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
   1060a:	e003      	b.n	10614 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xe2>
        0..128   => Rgb565::from(( 0, 0, grey )).0,  //  Dark Blue
   1060c:	9804      	ldr	r0, [sp, #16]
   1060e:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
   10612:	e7ff      	b.n	10614 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xe2>
    }
}
   10614:	f8bd 001a 	ldrh.w	r0, [sp, #26]
   10618:	b00a      	add	sp, #40	; 0x28
   1061a:	bd80      	pop	{r7, pc}
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
   1061c:	f640 2010 	movw	r0, #2576	; 0xa10
   10620:	f2c0 0002 	movt	r0, #2
   10624:	f640 32f8 	movw	r2, #3064	; 0xbf8
   10628:	f2c0 0202 	movt	r2, #2
   1062c:	2121      	movs	r1, #33	; 0x21
   1062e:	f008 f835 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10632:	defe      	udf	#254	; 0xfe
   10634:	f640 2010 	movw	r0, #2576	; 0xa10
   10638:	f2c0 0002 	movt	r0, #2
   1063c:	f640 4208 	movw	r2, #3080	; 0xc08
   10640:	f2c0 0202 	movt	r2, #2
   10644:	2121      	movs	r1, #33	; 0x21
   10646:	f008 f829 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1064a:	defe      	udf	#254	; 0xfe

0001064c <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E>:

/// Fade the Virtual Colour (8-bit greyscale) to black
fn update_color(grey: u8) -> u8 {
   1064c:	b084      	sub	sp, #16
   1064e:	b2c1      	uxtb	r1, r0
   10650:	4602      	mov	r2, r0
   10652:	f88d 000f 	strb.w	r0, [sp, #15]
    match grey {
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
   10656:	29c8      	cmp	r1, #200	; 0xc8
   10658:	9202      	str	r2, [sp, #8]
   1065a:	d304      	bcc.n	10666 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x1a>
   1065c:	e7ff      	b.n	1065e <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x12>
   1065e:	2001      	movs	r0, #1
   10660:	2800      	cmp	r0, #0
   10662:	d110      	bne.n	10686 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x3a>
   10664:	e7ff      	b.n	10666 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x1a>
        128..200 => grey,        //  Normal white stays the same
   10666:	9802      	ldr	r0, [sp, #8]
   10668:	b241      	sxtb	r1, r0
   1066a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1066e:	dc05      	bgt.n	1067c <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x30>
   10670:	e7ff      	b.n	10672 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x26>
   10672:	9802      	ldr	r0, [sp, #8]
   10674:	b2c1      	uxtb	r1, r0
   10676:	29c8      	cmp	r1, #200	; 0xc8
   10678:	d314      	bcc.n	106a4 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x58>
   1067a:	e7ff      	b.n	1067c <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x30>
        0..128   => grey >> 1,   //  Dark fade to black
   1067c:	9802      	ldr	r0, [sp, #8]
   1067e:	b2c1      	uxtb	r1, r0
   10680:	0849      	lsrs	r1, r1, #1
   10682:	9101      	str	r1, [sp, #4]
   10684:	e012      	b.n	106ac <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x60>
   10686:	f06f 0001 	mvn.w	r0, #1
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
   1068a:	9902      	ldr	r1, [sp, #8]
   1068c:	fa50 f081 	uxtab	r0, r0, r1
   10690:	b2c2      	uxtb	r2, r0
   10692:	4603      	mov	r3, r0
   10694:	4282      	cmp	r2, r0
   10696:	9300      	str	r3, [sp, #0]
   10698:	d110      	bne.n	106bc <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x70>
   1069a:	e7ff      	b.n	1069c <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x50>
   1069c:	9800      	ldr	r0, [sp, #0]
   1069e:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
   106a2:	e007      	b.n	106b4 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x68>
        128..200 => grey,        //  Normal white stays the same
   106a4:	9802      	ldr	r0, [sp, #8]
   106a6:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
   106aa:	e003      	b.n	106b4 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x68>
        0..128   => grey >> 1,   //  Dark fade to black
   106ac:	9801      	ldr	r0, [sp, #4]
   106ae:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
   106b2:	e7ff      	b.n	106b4 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x68>
    }
}
   106b4:	f89d 000e 	ldrb.w	r0, [sp, #14]
   106b8:	b004      	add	sp, #16
   106ba:	4770      	bx	lr
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
   106bc:	f640 2010 	movw	r0, #2576	; 0xa10
   106c0:	f2c0 0002 	movt	r0, #2
   106c4:	f640 4218 	movw	r2, #3096	; 0xc18
   106c8:	f2c0 0202 	movt	r2, #2
   106cc:	2121      	movs	r1, #33	; 0x21
   106ce:	f007 ffe5 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   106d2:	defe      	udf	#254	; 0xfe

000106d4 <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E>:

/// TODO: Handle touch events to emulate buttons
pub fn handle_touch(_x: u16, _y: u16) { 
   106d4:	b580      	push	{r7, lr}
   106d6:	b084      	sub	sp, #16
   106d8:	460a      	mov	r2, r1
   106da:	4603      	mov	r3, r0
   106dc:	f8ad 000c 	strh.w	r0, [sp, #12]
   106e0:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
   106e4:	f640 4028 	movw	r0, #3112	; 0xc28
   106e8:	f2c0 0002 	movt	r0, #2
   106ec:	2118      	movs	r1, #24
   106ee:	9202      	str	r2, [sp, #8]
   106f0:	9301      	str	r3, [sp, #4]
   106f2:	f7f8 fd01 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
   106f6:	e7ff      	b.n	106f8 <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E+0x24>
   106f8:	f7f8 fd44 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
   106fc:	e7ff      	b.n	106fe <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E+0x2a>
}
   106fe:	b004      	add	sp, #16
   10700:	bd80      	pop	{r7, pc}

00010702 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E>:
    ( left, top, right, bottom )
}

/// Return Bounding Box of Physical Pixels (left, top, right, bottom) that correspond to the Virtual Pixels
#[cfg(feature = "chip8_curve")]  //  If we are rendering CHIP8 Emulator as curved surface...
fn get_bounding_box(virtual_left: u8, virtual_top: u8, virtual_right: u8, virtual_bottom: u8) -> (u8, u8, u8, u8) {
   10702:	b5b0      	push	{r4, r5, r7, lr}
   10704:	b090      	sub	sp, #64	; 0x40
   10706:	469c      	mov	ip, r3
   10708:	4696      	mov	lr, r2
   1070a:	460c      	mov	r4, r1
   1070c:	4605      	mov	r5, r0
   1070e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   10712:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
   10716:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
   1071a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    //  One Virtual Pixel may map to multiple Physical Pixels, so we lookup the Physical Bounding Box.
    //  TODO: Handle wide and tall Bounding Boxes
    let physical_left_top = map_virtual_to_physical(virtual_left, virtual_top);  //  Returns (left,top,right,bottom)
   1071e:	f8cd c01c 	str.w	ip, [sp, #28]
   10722:	f8cd e018 	str.w	lr, [sp, #24]
   10726:	9405      	str	r4, [sp, #20]
   10728:	9504      	str	r5, [sp, #16]
   1072a:	f000 fa15 	bl	10b58 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE>
   1072e:	900d      	str	r0, [sp, #52]	; 0x34
   10730:	980d      	ldr	r0, [sp, #52]	; 0x34
   10732:	9009      	str	r0, [sp, #36]	; 0x24
   10734:	e7ff      	b.n	10736 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x34>
    let physical_right_bottom = map_virtual_to_physical(virtual_right, virtual_bottom);
   10736:	9806      	ldr	r0, [sp, #24]
   10738:	9907      	ldr	r1, [sp, #28]
   1073a:	f000 fa0d 	bl	10b58 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE>
   1073e:	900e      	str	r0, [sp, #56]	; 0x38
   10740:	980e      	ldr	r0, [sp, #56]	; 0x38
   10742:	900a      	str	r0, [sp, #40]	; 0x28
   10744:	e7ff      	b.n	10746 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x44>

    let left: u8 = physical_left_top.0;
   10746:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   1074a:	4601      	mov	r1, r0
   1074c:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    let top: u8 = physical_left_top.1;
   10750:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   10754:	4602      	mov	r2, r0
   10756:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    let right: u8 = physical_right_bottom.2.min(PHYSICAL_WIDTH as u8 - 1);
   1075a:	f89d 002a 	ldrb.w	r0, [sp, #42]	; 0x2a
   1075e:	23ef      	movs	r3, #239	; 0xef
   10760:	9103      	str	r1, [sp, #12]
   10762:	4619      	mov	r1, r3
   10764:	9202      	str	r2, [sp, #8]
   10766:	f007 f8d5 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   1076a:	4601      	mov	r1, r0
   1076c:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
   10770:	9101      	str	r1, [sp, #4]
   10772:	e7ff      	b.n	10774 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x72>
    let bottom: u8 = physical_right_bottom.3.min(PHYSICAL_HEIGHT as u8 - 1);
   10774:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   10778:	21c7      	movs	r1, #199	; 0xc7
   1077a:	f007 f8cb 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   1077e:	4601      	mov	r1, r0
   10780:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   10784:	9100      	str	r1, [sp, #0]
   10786:	e7ff      	b.n	10788 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x86>
    assert!(left < PHYSICAL_WIDTH as u8 && top < PHYSICAL_HEIGHT as u8 && right < PHYSICAL_WIDTH as u8 && bottom < PHYSICAL_HEIGHT as u8, "overflow");
   10788:	9803      	ldr	r0, [sp, #12]
   1078a:	b2c1      	uxtb	r1, r0
   1078c:	29f0      	cmp	r1, #240	; 0xf0
   1078e:	d32e      	bcc.n	107ee <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xec>
   10790:	e029      	b.n	107e6 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xe4>
   10792:	2001      	movs	r0, #1
   10794:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10798:	e008      	b.n	107ac <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xaa>
   1079a:	2000      	movs	r0, #0
   1079c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   107a0:	e004      	b.n	107ac <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xaa>
   107a2:	9800      	ldr	r0, [sp, #0]
   107a4:	b2c1      	uxtb	r1, r0
   107a6:	29c8      	cmp	r1, #200	; 0xc8
   107a8:	d3f3      	bcc.n	10792 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x90>
   107aa:	e7f6      	b.n	1079a <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x98>
   107ac:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   107b0:	07c0      	lsls	r0, r0, #31
   107b2:	2800      	cmp	r0, #0
   107b4:	d035      	beq.n	10822 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x120>
   107b6:	e025      	b.n	10804 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x102>
   107b8:	2001      	movs	r0, #1
   107ba:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   107be:	e008      	b.n	107d2 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xd0>
   107c0:	2000      	movs	r0, #0
   107c2:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   107c6:	e004      	b.n	107d2 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xd0>
   107c8:	9801      	ldr	r0, [sp, #4]
   107ca:	b2c1      	uxtb	r1, r0
   107cc:	29f0      	cmp	r1, #240	; 0xf0
   107ce:	d3f3      	bcc.n	107b8 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xb6>
   107d0:	e7f6      	b.n	107c0 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xbe>
   107d2:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   107d6:	07c0      	lsls	r0, r0, #31
   107d8:	2800      	cmp	r0, #0
   107da:	d1e2      	bne.n	107a2 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xa0>
   107dc:	e7dd      	b.n	1079a <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0x98>
   107de:	2001      	movs	r0, #1
   107e0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   107e4:	e008      	b.n	107f8 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xf6>
   107e6:	2000      	movs	r0, #0
   107e8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   107ec:	e004      	b.n	107f8 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xf6>
   107ee:	9802      	ldr	r0, [sp, #8]
   107f0:	b2c1      	uxtb	r1, r0
   107f2:	29c8      	cmp	r1, #200	; 0xc8
   107f4:	d3f3      	bcc.n	107de <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xdc>
   107f6:	e7f6      	b.n	107e6 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xe4>
   107f8:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   107fc:	07c0      	lsls	r0, r0, #31
   107fe:	2800      	cmp	r0, #0
   10800:	d1e2      	bne.n	107c8 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xc6>
   10802:	e7dd      	b.n	107c0 <_ZN3app5chip816get_bounding_box17h3d927a3a33434c59E+0xbe>
    ( left, top, right, bottom )
   10804:	9803      	ldr	r0, [sp, #12]
   10806:	f88d 0020 	strb.w	r0, [sp, #32]
   1080a:	9902      	ldr	r1, [sp, #8]
   1080c:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   10810:	9a01      	ldr	r2, [sp, #4]
   10812:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   10816:	9b00      	ldr	r3, [sp, #0]
   10818:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
}
   1081c:	9808      	ldr	r0, [sp, #32]
   1081e:	b010      	add	sp, #64	; 0x40
   10820:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(left < PHYSICAL_WIDTH as u8 && top < PHYSICAL_HEIGHT as u8 && right < PHYSICAL_WIDTH as u8 && bottom < PHYSICAL_HEIGHT as u8, "overflow");
   10822:	f640 10bc 	movw	r0, #2492	; 0x9bc
   10826:	f2c0 0002 	movt	r0, #2
   1082a:	f640 4240 	movw	r2, #3136	; 0xc40
   1082e:	f2c0 0202 	movt	r2, #2
   10832:	2108      	movs	r1, #8
   10834:	f007 ff32 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10838:	defe      	udf	#254	; 0xfe

0001083a <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E>:
const VIRTUAL_TO_PHYSICAL_MAP_HEIGHT: usize = SCREEN_HEIGHT / 2;

/// For Physical (x,y) Coordinates, return the corresponding Virtual (x,y) Coordinates.
/// Used by the CHIP-8 Emulator to decide which Virtual Pixel to fetch the colour value when rendering a Physical Pixel.
#[cfg(feature = "chip8_curve")]  //  If we are rendering CHIP8 Emulator as curved surface...
fn map_physical_to_virtual(x: u8, y: u8) -> (u8, u8) {
   1083a:	b580      	push	{r7, lr}
   1083c:	b094      	sub	sp, #80	; 0x50
   1083e:	b2c2      	uxtb	r2, r0
   10840:	460b      	mov	r3, r1
   10842:	4684      	mov	ip, r0
   10844:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
   10848:	f88d 104b 	strb.w	r1, [sp, #75]	; 0x4b
    //  Check which quadrant (x,y) belongs to and flip accordingly
    let flip =  //  (flip for X, flip for Y)
        if x < PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   1084c:	2a78      	cmp	r2, #120	; 0x78
   1084e:	930d      	str	r3, [sp, #52]	; 0x34
   10850:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   10854:	d308      	bcc.n	10868 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x2e>
   10856:	e003      	b.n	10860 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x26>
   10858:	2001      	movs	r0, #1
   1085a:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   1085e:	e008      	b.n	10872 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x38>
   10860:	2000      	movs	r0, #0
   10862:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   10866:	e004      	b.n	10872 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x38>
   10868:	980d      	ldr	r0, [sp, #52]	; 0x34
   1086a:	b2c1      	uxtb	r1, r0
   1086c:	2964      	cmp	r1, #100	; 0x64
   1086e:	d3f3      	bcc.n	10858 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1e>
   10870:	e7f6      	b.n	10860 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x26>
   10872:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   10876:	07c0      	lsls	r0, r0, #31
   10878:	2800      	cmp	r0, #0
   1087a:	d105      	bne.n	10888 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x4e>
   1087c:	e7ff      	b.n	1087e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x44>
            (true, true)  //  Top left quadrant: Flip horizontally and vertically
        } else if x >= PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   1087e:	980c      	ldr	r0, [sp, #48]	; 0x30
   10880:	b2c1      	uxtb	r1, r0
   10882:	2977      	cmp	r1, #119	; 0x77
   10884:	d80e      	bhi.n	108a4 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x6a>
   10886:	e009      	b.n	1089c <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x62>
   10888:	2001      	movs	r0, #1
            (true, true)  //  Top left quadrant: Flip horizontally and vertically
   1088a:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
   1088e:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
        if x < PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   10892:	e040      	b.n	10916 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xdc>
   10894:	2001      	movs	r0, #1
        } else if x >= PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   10896:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
   1089a:	e008      	b.n	108ae <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x74>
   1089c:	2000      	movs	r0, #0
   1089e:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
   108a2:	e004      	b.n	108ae <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x74>
   108a4:	980d      	ldr	r0, [sp, #52]	; 0x34
   108a6:	b2c1      	uxtb	r1, r0
   108a8:	2964      	cmp	r1, #100	; 0x64
   108aa:	d3f3      	bcc.n	10894 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x5a>
   108ac:	e7f6      	b.n	1089c <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x62>
   108ae:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
   108b2:	07c0      	lsls	r0, r0, #31
   108b4:	2800      	cmp	r0, #0
   108b6:	d105      	bne.n	108c4 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x8a>
   108b8:	e7ff      	b.n	108ba <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x80>
            (false, true)   //  Top right quadrant: Flip vertically
        } else if x < PHYSICAL_WIDTH as u8 / 2 && y >= PHYSICAL_HEIGHT as u8 / 2 {
   108ba:	980c      	ldr	r0, [sp, #48]	; 0x30
   108bc:	b2c1      	uxtb	r1, r0
   108be:	2978      	cmp	r1, #120	; 0x78
   108c0:	d30f      	bcc.n	108e2 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xa8>
   108c2:	e00a      	b.n	108da <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xa0>
   108c4:	2000      	movs	r0, #0
            (false, true)   //  Top right quadrant: Flip vertically
   108c6:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
   108ca:	2001      	movs	r0, #1
   108cc:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
        } else if x >= PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   108d0:	e020      	b.n	10914 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xda>
   108d2:	2001      	movs	r0, #1
        } else if x < PHYSICAL_WIDTH as u8 / 2 && y >= PHYSICAL_HEIGHT as u8 / 2 {
   108d4:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
   108d8:	e008      	b.n	108ec <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xb2>
   108da:	2000      	movs	r0, #0
   108dc:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
   108e0:	e004      	b.n	108ec <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xb2>
   108e2:	980d      	ldr	r0, [sp, #52]	; 0x34
   108e4:	b2c1      	uxtb	r1, r0
   108e6:	2963      	cmp	r1, #99	; 0x63
   108e8:	d8f3      	bhi.n	108d2 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x98>
   108ea:	e7f6      	b.n	108da <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xa0>
   108ec:	f89d 0041 	ldrb.w	r0, [sp, #65]	; 0x41
   108f0:	07c0      	lsls	r0, r0, #31
   108f2:	2800      	cmp	r0, #0
   108f4:	d106      	bne.n	10904 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xca>
   108f6:	e7ff      	b.n	108f8 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xbe>
   108f8:	2000      	movs	r0, #0
            (true, false)   //  Bottom left quadrant: Flip horizontally
        } else {
            (false, false)    //  Bottom right quadrant: Don't flip
   108fa:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
   108fe:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
        } else if x < PHYSICAL_WIDTH as u8 / 2 && y >= PHYSICAL_HEIGHT as u8 / 2 {
   10902:	e006      	b.n	10912 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xd8>
   10904:	2001      	movs	r0, #1
            (true, false)   //  Bottom left quadrant: Flip horizontally
   10906:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
   1090a:	2000      	movs	r0, #0
   1090c:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
        } else if x < PHYSICAL_WIDTH as u8 / 2 && y >= PHYSICAL_HEIGHT as u8 / 2 {
   10910:	e7ff      	b.n	10912 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xd8>
        } else if x >= PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   10912:	e7ff      	b.n	10914 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xda>
        if x < PHYSICAL_WIDTH as u8 / 2 && y < PHYSICAL_HEIGHT as u8 / 2 {
   10914:	e7ff      	b.n	10916 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xdc>
        };
    let x_normalised = 
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - x } 
   10916:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   1091a:	07c0      	lsls	r0, r0, #31
   1091c:	2800      	cmp	r0, #0
   1091e:	d10c      	bne.n	1093a <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x100>
   10920:	e7ff      	b.n	10922 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0xe8>
   10922:	f06f 0077 	mvn.w	r0, #119	; 0x77
        else      { x - PHYSICAL_WIDTH as u8 / 2 };
   10926:	990c      	ldr	r1, [sp, #48]	; 0x30
   10928:	fa50 f081 	uxtab	r0, r0, r1
   1092c:	b2c2      	uxtb	r2, r0
   1092e:	4603      	mov	r3, r0
   10930:	4282      	cmp	r2, r0
   10932:	930b      	str	r3, [sp, #44]	; 0x2c
   10934:	f040 80bc 	bne.w	10ab0 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x276>
   10938:	e00e      	b.n	10958 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x11e>
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - x } 
   1093a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1093c:	b2c1      	uxtb	r1, r0
   1093e:	f1c1 0178 	rsb	r1, r1, #120	; 0x78
   10942:	b2ca      	uxtb	r2, r1
   10944:	460b      	mov	r3, r1
   10946:	428a      	cmp	r2, r1
   10948:	930a      	str	r3, [sp, #40]	; 0x28
   1094a:	f040 80a5 	bne.w	10a98 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x25e>
   1094e:	e7ff      	b.n	10950 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x116>
   10950:	980a      	ldr	r0, [sp, #40]	; 0x28
   10952:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
   10956:	e003      	b.n	10960 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x126>
        else      { x - PHYSICAL_WIDTH as u8 / 2 };
   10958:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1095a:	f88d 0042 	strb.w	r0, [sp, #66]	; 0x42
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - x } 
   1095e:	e7ff      	b.n	10960 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x126>
    let y_normalised = 
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - y }
   10960:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
   10964:	07c0      	lsls	r0, r0, #31
   10966:	2800      	cmp	r0, #0
   10968:	d10c      	bne.n	10984 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x14a>
   1096a:	e7ff      	b.n	1096c <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x132>
   1096c:	f06f 0063 	mvn.w	r0, #99	; 0x63
        else      { y - PHYSICAL_HEIGHT as u8 / 2 };
   10970:	990d      	ldr	r1, [sp, #52]	; 0x34
   10972:	fa50 f081 	uxtab	r0, r0, r1
   10976:	b2c2      	uxtb	r2, r0
   10978:	4603      	mov	r3, r0
   1097a:	4282      	cmp	r2, r0
   1097c:	9309      	str	r3, [sp, #36]	; 0x24
   1097e:	f040 80af 	bne.w	10ae0 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x2a6>
   10982:	e00e      	b.n	109a2 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x168>
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - y }
   10984:	980d      	ldr	r0, [sp, #52]	; 0x34
   10986:	b2c1      	uxtb	r1, r0
   10988:	f1c1 0164 	rsb	r1, r1, #100	; 0x64
   1098c:	b2ca      	uxtb	r2, r1
   1098e:	460b      	mov	r3, r1
   10990:	428a      	cmp	r2, r1
   10992:	9308      	str	r3, [sp, #32]
   10994:	f040 8098 	bne.w	10ac8 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x28e>
   10998:	e7ff      	b.n	1099a <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x160>
   1099a:	9808      	ldr	r0, [sp, #32]
   1099c:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   109a0:	e003      	b.n	109aa <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x170>
        else      { y - PHYSICAL_HEIGHT as u8 / 2 };
   109a2:	9809      	ldr	r0, [sp, #36]	; 0x24
   109a4:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - y }
   109a8:	e7ff      	b.n	109aa <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x170>
    let p = map_physical_to_virtual_normalised(x_normalised, y_normalised);  //  Returns (x,y)
   109aa:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
   109ae:	f89d 0042 	ldrb.w	r0, [sp, #66]	; 0x42
   109b2:	f000 fb40 	bl	11036 <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE>
   109b6:	4602      	mov	r2, r0
   109b8:	460b      	mov	r3, r1
   109ba:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
   109be:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
   109c2:	9207      	str	r2, [sp, #28]
   109c4:	9306      	str	r3, [sp, #24]
   109c6:	e7ff      	b.n	109c8 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x18e>
    let p2 = (
        if flip.0 { SCREEN_WIDTH as u8 / 2 - p.0 } 
   109c8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
   109cc:	07c0      	lsls	r0, r0, #31
   109ce:	2800      	cmp	r0, #0
   109d0:	d10b      	bne.n	109ea <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1b0>
   109d2:	e7ff      	b.n	109d4 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x19a>
   109d4:	2020      	movs	r0, #32
        else      { p.0 + SCREEN_WIDTH as u8 / 2 }
   109d6:	9907      	ldr	r1, [sp, #28]
   109d8:	fa50 f081 	uxtab	r0, r0, r1
   109dc:	b2c2      	uxtb	r2, r0
   109de:	4603      	mov	r3, r0
   109e0:	4282      	cmp	r2, r0
   109e2:	9305      	str	r3, [sp, #20]
   109e4:	f040 8094 	bne.w	10b10 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x2d6>
   109e8:	e00d      	b.n	10a06 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1cc>
        if flip.0 { SCREEN_WIDTH as u8 / 2 - p.0 } 
   109ea:	9807      	ldr	r0, [sp, #28]
   109ec:	b2c1      	uxtb	r1, r0
   109ee:	f1c1 0120 	rsb	r1, r1, #32
   109f2:	b2ca      	uxtb	r2, r1
   109f4:	460b      	mov	r3, r1
   109f6:	428a      	cmp	r2, r1
   109f8:	9304      	str	r3, [sp, #16]
   109fa:	d17d      	bne.n	10af8 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x2be>
   109fc:	e7ff      	b.n	109fe <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1c4>
   109fe:	9804      	ldr	r0, [sp, #16]
   10a00:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
   10a04:	e003      	b.n	10a0e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1d4>
        else      { p.0 + SCREEN_WIDTH as u8 / 2 }
   10a06:	9805      	ldr	r0, [sp, #20]
   10a08:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
        if flip.0 { SCREEN_WIDTH as u8 / 2 - p.0 } 
   10a0c:	e7ff      	b.n	10a0e <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1d4>
        ,
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - p.1 } 
   10a0e:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
   10a12:	07c0      	lsls	r0, r0, #31
   10a14:	2800      	cmp	r0, #0
   10a16:	d10b      	bne.n	10a30 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1f6>
   10a18:	e7ff      	b.n	10a1a <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x1e0>
   10a1a:	2010      	movs	r0, #16
        else      { p.1 + SCREEN_HEIGHT as u8 / 2 }
   10a1c:	9906      	ldr	r1, [sp, #24]
   10a1e:	fa50 f081 	uxtab	r0, r0, r1
   10a22:	b2c2      	uxtb	r2, r0
   10a24:	4603      	mov	r3, r0
   10a26:	4282      	cmp	r2, r0
   10a28:	9303      	str	r3, [sp, #12]
   10a2a:	f040 8089 	bne.w	10b40 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x306>
   10a2e:	e00d      	b.n	10a4c <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x212>
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - p.1 } 
   10a30:	9806      	ldr	r0, [sp, #24]
   10a32:	b2c1      	uxtb	r1, r0
   10a34:	f1c1 0110 	rsb	r1, r1, #16
   10a38:	b2ca      	uxtb	r2, r1
   10a3a:	460b      	mov	r3, r1
   10a3c:	428a      	cmp	r2, r1
   10a3e:	9302      	str	r3, [sp, #8]
   10a40:	d172      	bne.n	10b28 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x2ee>
   10a42:	e7ff      	b.n	10a44 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x20a>
   10a44:	9802      	ldr	r0, [sp, #8]
   10a46:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
   10a4a:	e003      	b.n	10a54 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x21a>
        else      { p.1 + SCREEN_HEIGHT as u8 / 2 }
   10a4c:	9803      	ldr	r0, [sp, #12]
   10a4e:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - p.1 } 
   10a52:	e7ff      	b.n	10a54 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x21a>
    let p2 = (
   10a54:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   10a58:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
   10a5c:	f89d 0049 	ldrb.w	r0, [sp, #73]	; 0x49
   10a60:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    );
    //  Crop to screen size
    (
        p2.0.min(SCREEN_WIDTH as u8 - 1),
   10a64:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   10a68:	213f      	movs	r1, #63	; 0x3f
   10a6a:	f006 ff53 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10a6e:	9001      	str	r0, [sp, #4]
   10a70:	e7ff      	b.n	10a72 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x238>
        p2.1.min(SCREEN_HEIGHT as u8 - 1),
   10a72:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
   10a76:	211f      	movs	r1, #31
   10a78:	f006 ff4c 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10a7c:	9000      	str	r0, [sp, #0]
   10a7e:	e7ff      	b.n	10a80 <_ZN3app5chip823map_physical_to_virtual17h27b2afc71d7e4361E+0x246>
    (
   10a80:	9801      	ldr	r0, [sp, #4]
   10a82:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
   10a86:	9900      	ldr	r1, [sp, #0]
   10a88:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
    )
}
   10a8c:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
   10a90:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
   10a94:	b014      	add	sp, #80	; 0x50
   10a96:	bd80      	pop	{r7, pc}
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - x } 
   10a98:	f640 2010 	movw	r0, #2576	; 0xa10
   10a9c:	f2c0 0002 	movt	r0, #2
   10aa0:	f640 4250 	movw	r2, #3152	; 0xc50
   10aa4:	f2c0 0202 	movt	r2, #2
   10aa8:	2121      	movs	r1, #33	; 0x21
   10aaa:	f007 fdf7 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10aae:	defe      	udf	#254	; 0xfe
        else      { x - PHYSICAL_WIDTH as u8 / 2 };
   10ab0:	f640 2010 	movw	r0, #2576	; 0xa10
   10ab4:	f2c0 0002 	movt	r0, #2
   10ab8:	f640 4260 	movw	r2, #3168	; 0xc60
   10abc:	f2c0 0202 	movt	r2, #2
   10ac0:	2121      	movs	r1, #33	; 0x21
   10ac2:	f007 fdeb 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ac6:	defe      	udf	#254	; 0xfe
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - y }
   10ac8:	f640 2010 	movw	r0, #2576	; 0xa10
   10acc:	f2c0 0002 	movt	r0, #2
   10ad0:	f640 4270 	movw	r2, #3184	; 0xc70
   10ad4:	f2c0 0202 	movt	r2, #2
   10ad8:	2121      	movs	r1, #33	; 0x21
   10ada:	f007 fddf 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ade:	defe      	udf	#254	; 0xfe
        else      { y - PHYSICAL_HEIGHT as u8 / 2 };
   10ae0:	f640 2010 	movw	r0, #2576	; 0xa10
   10ae4:	f2c0 0002 	movt	r0, #2
   10ae8:	f640 4280 	movw	r2, #3200	; 0xc80
   10aec:	f2c0 0202 	movt	r2, #2
   10af0:	2121      	movs	r1, #33	; 0x21
   10af2:	f007 fdd3 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10af6:	defe      	udf	#254	; 0xfe
        if flip.0 { SCREEN_WIDTH as u8 / 2 - p.0 } 
   10af8:	f640 2010 	movw	r0, #2576	; 0xa10
   10afc:	f2c0 0002 	movt	r0, #2
   10b00:	f640 4290 	movw	r2, #3216	; 0xc90
   10b04:	f2c0 0202 	movt	r2, #2
   10b08:	2121      	movs	r1, #33	; 0x21
   10b0a:	f007 fdc7 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b0e:	defe      	udf	#254	; 0xfe
        else      { p.0 + SCREEN_WIDTH as u8 / 2 }
   10b10:	f640 1030 	movw	r0, #2352	; 0x930
   10b14:	f2c0 0002 	movt	r0, #2
   10b18:	f640 42a0 	movw	r2, #3232	; 0xca0
   10b1c:	f2c0 0202 	movt	r2, #2
   10b20:	211c      	movs	r1, #28
   10b22:	f007 fdbb 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b26:	defe      	udf	#254	; 0xfe
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - p.1 } 
   10b28:	f640 2010 	movw	r0, #2576	; 0xa10
   10b2c:	f2c0 0002 	movt	r0, #2
   10b30:	f640 42b0 	movw	r2, #3248	; 0xcb0
   10b34:	f2c0 0202 	movt	r2, #2
   10b38:	2121      	movs	r1, #33	; 0x21
   10b3a:	f007 fdaf 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b3e:	defe      	udf	#254	; 0xfe
        else      { p.1 + SCREEN_HEIGHT as u8 / 2 }
   10b40:	f640 1030 	movw	r0, #2352	; 0x930
   10b44:	f2c0 0002 	movt	r0, #2
   10b48:	f640 42c0 	movw	r2, #3264	; 0xcc0
   10b4c:	f2c0 0202 	movt	r2, #2
   10b50:	211c      	movs	r1, #28
   10b52:	f007 fda3 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10b56:	defe      	udf	#254	; 0xfe

00010b58 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE>:

/// For each Virtual (x,y) Coordinate, return the Bounding Box (left, top, right, bottom) that encloses the corresponding Physical (x,y) Coordinates.
/// Used by the CHIP-8 Emulator to decide which Physical Pixels to redraw when a Virtual Pixel is updated.
#[cfg(feature = "chip8_curve")]  //  If we are rendering CHIP8 Emulator as curved surface...
fn map_virtual_to_physical(x: u8, y: u8) -> (u8, u8, u8, u8) {
   10b58:	b580      	push	{r7, lr}
   10b5a:	b0a0      	sub	sp, #128	; 0x80
   10b5c:	b2c2      	uxtb	r2, r0
   10b5e:	460b      	mov	r3, r1
   10b60:	4684      	mov	ip, r0
   10b62:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
   10b66:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
    //  Check which quadrant (x,y) belongs to and flip accordingly
    let flip =  //  (flip for X, flip for Y)
        if x < SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   10b6a:	2a20      	cmp	r2, #32
   10b6c:	9315      	str	r3, [sp, #84]	; 0x54
   10b6e:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
   10b72:	d308      	bcc.n	10b86 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x2e>
   10b74:	e003      	b.n	10b7e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x26>
   10b76:	2001      	movs	r0, #1
   10b78:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   10b7c:	e008      	b.n	10b90 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x38>
   10b7e:	2000      	movs	r0, #0
   10b80:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
   10b84:	e004      	b.n	10b90 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x38>
   10b86:	9815      	ldr	r0, [sp, #84]	; 0x54
   10b88:	b2c1      	uxtb	r1, r0
   10b8a:	2910      	cmp	r1, #16
   10b8c:	d3f3      	bcc.n	10b76 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1e>
   10b8e:	e7f6      	b.n	10b7e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x26>
   10b90:	f89d 005f 	ldrb.w	r0, [sp, #95]	; 0x5f
   10b94:	07c0      	lsls	r0, r0, #31
   10b96:	2800      	cmp	r0, #0
   10b98:	d105      	bne.n	10ba6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x4e>
   10b9a:	e7ff      	b.n	10b9c <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x44>
            (true, true)  //  Top left quadrant: Flip horizontally and vertically
        } else if x >= SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   10b9c:	9814      	ldr	r0, [sp, #80]	; 0x50
   10b9e:	b2c1      	uxtb	r1, r0
   10ba0:	291f      	cmp	r1, #31
   10ba2:	d80e      	bhi.n	10bc2 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x6a>
   10ba4:	e009      	b.n	10bba <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x62>
   10ba6:	2001      	movs	r0, #1
            (true, true)  //  Top left quadrant: Flip horizontally and vertically
   10ba8:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
   10bac:	f88d 005d 	strb.w	r0, [sp, #93]	; 0x5d
        if x < SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   10bb0:	e040      	b.n	10c34 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xdc>
   10bb2:	2001      	movs	r0, #1
        } else if x >= SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   10bb4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   10bb8:	e008      	b.n	10bcc <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x74>
   10bba:	2000      	movs	r0, #0
   10bbc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   10bc0:	e004      	b.n	10bcc <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x74>
   10bc2:	9815      	ldr	r0, [sp, #84]	; 0x54
   10bc4:	b2c1      	uxtb	r1, r0
   10bc6:	2910      	cmp	r1, #16
   10bc8:	d3f3      	bcc.n	10bb2 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x5a>
   10bca:	e7f6      	b.n	10bba <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x62>
   10bcc:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   10bd0:	07c0      	lsls	r0, r0, #31
   10bd2:	2800      	cmp	r0, #0
   10bd4:	d105      	bne.n	10be2 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x8a>
   10bd6:	e7ff      	b.n	10bd8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x80>
            (false, true)   //  Top right quadrant: Flip vertically
        } else if x < SCREEN_WIDTH as u8 / 2 && y >= SCREEN_HEIGHT as u8 / 2 {
   10bd8:	9814      	ldr	r0, [sp, #80]	; 0x50
   10bda:	b2c1      	uxtb	r1, r0
   10bdc:	2920      	cmp	r1, #32
   10bde:	d30f      	bcc.n	10c00 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xa8>
   10be0:	e00a      	b.n	10bf8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xa0>
   10be2:	2000      	movs	r0, #0
            (false, true)   //  Top right quadrant: Flip vertically
   10be4:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
   10be8:	2001      	movs	r0, #1
   10bea:	f88d 005d 	strb.w	r0, [sp, #93]	; 0x5d
        } else if x >= SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   10bee:	e020      	b.n	10c32 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xda>
   10bf0:	2001      	movs	r0, #1
        } else if x < SCREEN_WIDTH as u8 / 2 && y >= SCREEN_HEIGHT as u8 / 2 {
   10bf2:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
   10bf6:	e008      	b.n	10c0a <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xb2>
   10bf8:	2000      	movs	r0, #0
   10bfa:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
   10bfe:	e004      	b.n	10c0a <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xb2>
   10c00:	9815      	ldr	r0, [sp, #84]	; 0x54
   10c02:	b2c1      	uxtb	r1, r0
   10c04:	290f      	cmp	r1, #15
   10c06:	d8f3      	bhi.n	10bf0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x98>
   10c08:	e7f6      	b.n	10bf8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xa0>
   10c0a:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
   10c0e:	07c0      	lsls	r0, r0, #31
   10c10:	2800      	cmp	r0, #0
   10c12:	d106      	bne.n	10c22 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xca>
   10c14:	e7ff      	b.n	10c16 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xbe>
   10c16:	2000      	movs	r0, #0
            (true, false)   //  Bottom left quadrant: Flip horizontally
        } else {
            (false, false)    //  Bottom right quadrant: Don't flip
   10c18:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
   10c1c:	f88d 005d 	strb.w	r0, [sp, #93]	; 0x5d
        } else if x < SCREEN_WIDTH as u8 / 2 && y >= SCREEN_HEIGHT as u8 / 2 {
   10c20:	e006      	b.n	10c30 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xd8>
   10c22:	2001      	movs	r0, #1
            (true, false)   //  Bottom left quadrant: Flip horizontally
   10c24:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
   10c28:	2000      	movs	r0, #0
   10c2a:	f88d 005d 	strb.w	r0, [sp, #93]	; 0x5d
        } else if x < SCREEN_WIDTH as u8 / 2 && y >= SCREEN_HEIGHT as u8 / 2 {
   10c2e:	e7ff      	b.n	10c30 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xd8>
        } else if x >= SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   10c30:	e7ff      	b.n	10c32 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xda>
        if x < SCREEN_WIDTH as u8 / 2 && y < SCREEN_HEIGHT as u8 / 2 {
   10c32:	e7ff      	b.n	10c34 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xdc>
        };
    let x_normalised = 
        if flip.0 { SCREEN_WIDTH as u8 / 2 - x } 
   10c34:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
   10c38:	07c0      	lsls	r0, r0, #31
   10c3a:	2800      	cmp	r0, #0
   10c3c:	d10c      	bne.n	10c58 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x100>
   10c3e:	e7ff      	b.n	10c40 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0xe8>
   10c40:	f06f 001f 	mvn.w	r0, #31
        else      { x - SCREEN_WIDTH as u8 / 2 };
   10c44:	9914      	ldr	r1, [sp, #80]	; 0x50
   10c46:	fa50 f081 	uxtab	r0, r0, r1
   10c4a:	b2c2      	uxtb	r2, r0
   10c4c:	4603      	mov	r3, r0
   10c4e:	4282      	cmp	r2, r0
   10c50:	9313      	str	r3, [sp, #76]	; 0x4c
   10c52:	f040 816c 	bne.w	10f2e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x3d6>
   10c56:	e00e      	b.n	10c76 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x11e>
        if flip.0 { SCREEN_WIDTH as u8 / 2 - x } 
   10c58:	9814      	ldr	r0, [sp, #80]	; 0x50
   10c5a:	b2c1      	uxtb	r1, r0
   10c5c:	f1c1 0120 	rsb	r1, r1, #32
   10c60:	b2ca      	uxtb	r2, r1
   10c62:	460b      	mov	r3, r1
   10c64:	428a      	cmp	r2, r1
   10c66:	9312      	str	r3, [sp, #72]	; 0x48
   10c68:	f040 8155 	bne.w	10f16 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x3be>
   10c6c:	e7ff      	b.n	10c6e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x116>
   10c6e:	9812      	ldr	r0, [sp, #72]	; 0x48
   10c70:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
   10c74:	e003      	b.n	10c7e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x126>
        else      { x - SCREEN_WIDTH as u8 / 2 };
   10c76:	9813      	ldr	r0, [sp, #76]	; 0x4c
   10c78:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
        if flip.0 { SCREEN_WIDTH as u8 / 2 - x } 
   10c7c:	e7ff      	b.n	10c7e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x126>
    let y_normalised = 
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - y }
   10c7e:	f89d 005d 	ldrb.w	r0, [sp, #93]	; 0x5d
   10c82:	07c0      	lsls	r0, r0, #31
   10c84:	2800      	cmp	r0, #0
   10c86:	d10c      	bne.n	10ca2 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x14a>
   10c88:	e7ff      	b.n	10c8a <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x132>
   10c8a:	f06f 000f 	mvn.w	r0, #15
        else      { y - SCREEN_HEIGHT as u8 / 2 };
   10c8e:	9915      	ldr	r1, [sp, #84]	; 0x54
   10c90:	fa50 f081 	uxtab	r0, r0, r1
   10c94:	b2c2      	uxtb	r2, r0
   10c96:	4603      	mov	r3, r0
   10c98:	4282      	cmp	r2, r0
   10c9a:	9311      	str	r3, [sp, #68]	; 0x44
   10c9c:	f040 815f 	bne.w	10f5e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x406>
   10ca0:	e00e      	b.n	10cc0 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x168>
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - y }
   10ca2:	9815      	ldr	r0, [sp, #84]	; 0x54
   10ca4:	b2c1      	uxtb	r1, r0
   10ca6:	f1c1 0110 	rsb	r1, r1, #16
   10caa:	b2ca      	uxtb	r2, r1
   10cac:	460b      	mov	r3, r1
   10cae:	428a      	cmp	r2, r1
   10cb0:	9310      	str	r3, [sp, #64]	; 0x40
   10cb2:	f040 8148 	bne.w	10f46 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x3ee>
   10cb6:	e7ff      	b.n	10cb8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x160>
   10cb8:	9810      	ldr	r0, [sp, #64]	; 0x40
   10cba:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
   10cbe:	e003      	b.n	10cc8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x170>
        else      { y - SCREEN_HEIGHT as u8 / 2 };
   10cc0:	9811      	ldr	r0, [sp, #68]	; 0x44
   10cc2:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - y }
   10cc6:	e7ff      	b.n	10cc8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x170>
    let b = map_virtual_to_physical_normalised(x_normalised, y_normalised);  //  Returns (left,top,right,bottom)
   10cc8:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
   10ccc:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
   10cd0:	f000 fa03 	bl	110da <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E>
   10cd4:	901f      	str	r0, [sp, #124]	; 0x7c
   10cd6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10cd8:	9019      	str	r0, [sp, #100]	; 0x64
   10cda:	e7ff      	b.n	10cdc <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x184>
    let b2 = (
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.0 } 
   10cdc:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
   10ce0:	07c0      	lsls	r0, r0, #31
   10ce2:	2800      	cmp	r0, #0
   10ce4:	d10a      	bne.n	10cfc <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1a4>
   10ce6:	e7ff      	b.n	10ce8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x190>
        else      { b.0 + PHYSICAL_WIDTH as u8 / 2 }
   10ce8:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
   10cec:	3078      	adds	r0, #120	; 0x78
   10cee:	b2c1      	uxtb	r1, r0
   10cf0:	4602      	mov	r2, r0
   10cf2:	4281      	cmp	r1, r0
   10cf4:	920f      	str	r2, [sp, #60]	; 0x3c
   10cf6:	f040 814a 	bne.w	10f8e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x436>
   10cfa:	e00e      	b.n	10d1a <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1c2>
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.0 } 
   10cfc:	f89d 0064 	ldrb.w	r0, [sp, #100]	; 0x64
   10d00:	f1c0 0078 	rsb	r0, r0, #120	; 0x78
   10d04:	b2c1      	uxtb	r1, r0
   10d06:	4602      	mov	r2, r0
   10d08:	4281      	cmp	r1, r0
   10d0a:	920e      	str	r2, [sp, #56]	; 0x38
   10d0c:	f040 8133 	bne.w	10f76 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x41e>
   10d10:	e7ff      	b.n	10d12 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1ba>
   10d12:	980e      	ldr	r0, [sp, #56]	; 0x38
   10d14:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
   10d18:	e003      	b.n	10d22 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1ca>
        else      { b.0 + PHYSICAL_WIDTH as u8 / 2 }
   10d1a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10d1c:	f88d 006c 	strb.w	r0, [sp, #108]	; 0x6c
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.0 } 
   10d20:	e7ff      	b.n	10d22 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1ca>
        ,
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.1 } 
   10d22:	f89d 005d 	ldrb.w	r0, [sp, #93]	; 0x5d
   10d26:	07c0      	lsls	r0, r0, #31
   10d28:	2800      	cmp	r0, #0
   10d2a:	d10a      	bne.n	10d42 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1ea>
   10d2c:	e7ff      	b.n	10d2e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x1d6>
        else      { b.1 + PHYSICAL_HEIGHT as u8 / 2 }
   10d2e:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
   10d32:	3064      	adds	r0, #100	; 0x64
   10d34:	b2c1      	uxtb	r1, r0
   10d36:	4602      	mov	r2, r0
   10d38:	4281      	cmp	r1, r0
   10d3a:	920d      	str	r2, [sp, #52]	; 0x34
   10d3c:	f040 813f 	bne.w	10fbe <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x466>
   10d40:	e00e      	b.n	10d60 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x208>
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.1 } 
   10d42:	f89d 0065 	ldrb.w	r0, [sp, #101]	; 0x65
   10d46:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
   10d4a:	b2c1      	uxtb	r1, r0
   10d4c:	4602      	mov	r2, r0
   10d4e:	4281      	cmp	r1, r0
   10d50:	920c      	str	r2, [sp, #48]	; 0x30
   10d52:	f040 8128 	bne.w	10fa6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x44e>
   10d56:	e7ff      	b.n	10d58 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x200>
   10d58:	980c      	ldr	r0, [sp, #48]	; 0x30
   10d5a:	f88d 006d 	strb.w	r0, [sp, #109]	; 0x6d
   10d5e:	e003      	b.n	10d68 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x210>
        else      { b.1 + PHYSICAL_HEIGHT as u8 / 2 }
   10d60:	980d      	ldr	r0, [sp, #52]	; 0x34
   10d62:	f88d 006d 	strb.w	r0, [sp, #109]	; 0x6d
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.1 } 
   10d66:	e7ff      	b.n	10d68 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x210>
        ,
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.2 } 
   10d68:	f89d 005c 	ldrb.w	r0, [sp, #92]	; 0x5c
   10d6c:	07c0      	lsls	r0, r0, #31
   10d6e:	2800      	cmp	r0, #0
   10d70:	d10a      	bne.n	10d88 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x230>
   10d72:	e7ff      	b.n	10d74 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x21c>
        else      { b.2 + PHYSICAL_WIDTH as u8 / 2 }
   10d74:	f89d 0066 	ldrb.w	r0, [sp, #102]	; 0x66
   10d78:	3078      	adds	r0, #120	; 0x78
   10d7a:	b2c1      	uxtb	r1, r0
   10d7c:	4602      	mov	r2, r0
   10d7e:	4281      	cmp	r1, r0
   10d80:	920b      	str	r2, [sp, #44]	; 0x2c
   10d82:	f040 8134 	bne.w	10fee <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x496>
   10d86:	e00e      	b.n	10da6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x24e>
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.2 } 
   10d88:	f89d 0066 	ldrb.w	r0, [sp, #102]	; 0x66
   10d8c:	f1c0 0078 	rsb	r0, r0, #120	; 0x78
   10d90:	b2c1      	uxtb	r1, r0
   10d92:	4602      	mov	r2, r0
   10d94:	4281      	cmp	r1, r0
   10d96:	920a      	str	r2, [sp, #40]	; 0x28
   10d98:	f040 811d 	bne.w	10fd6 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x47e>
   10d9c:	e7ff      	b.n	10d9e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x246>
   10d9e:	980a      	ldr	r0, [sp, #40]	; 0x28
   10da0:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
   10da4:	e003      	b.n	10dae <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x256>
        else      { b.2 + PHYSICAL_WIDTH as u8 / 2 }
   10da6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10da8:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.2 } 
   10dac:	e7ff      	b.n	10dae <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x256>
        ,
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.3 } 
   10dae:	f89d 005d 	ldrb.w	r0, [sp, #93]	; 0x5d
   10db2:	07c0      	lsls	r0, r0, #31
   10db4:	2800      	cmp	r0, #0
   10db6:	d10a      	bne.n	10dce <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x276>
   10db8:	e7ff      	b.n	10dba <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x262>
        else      { b.3 + PHYSICAL_HEIGHT as u8 / 2 }
   10dba:	f89d 0067 	ldrb.w	r0, [sp, #103]	; 0x67
   10dbe:	3064      	adds	r0, #100	; 0x64
   10dc0:	b2c1      	uxtb	r1, r0
   10dc2:	4602      	mov	r2, r0
   10dc4:	4281      	cmp	r1, r0
   10dc6:	9209      	str	r2, [sp, #36]	; 0x24
   10dc8:	f040 8129 	bne.w	1101e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x4c6>
   10dcc:	e00e      	b.n	10dec <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x294>
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.3 } 
   10dce:	f89d 0067 	ldrb.w	r0, [sp, #103]	; 0x67
   10dd2:	f1c0 0064 	rsb	r0, r0, #100	; 0x64
   10dd6:	b2c1      	uxtb	r1, r0
   10dd8:	4602      	mov	r2, r0
   10dda:	4281      	cmp	r1, r0
   10ddc:	9208      	str	r2, [sp, #32]
   10dde:	f040 8112 	bne.w	11006 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x4ae>
   10de2:	e7ff      	b.n	10de4 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x28c>
   10de4:	9808      	ldr	r0, [sp, #32]
   10de6:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
   10dea:	e003      	b.n	10df4 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x29c>
        else      { b.3 + PHYSICAL_HEIGHT as u8 / 2 }
   10dec:	9809      	ldr	r0, [sp, #36]	; 0x24
   10dee:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.3 } 
   10df2:	e7ff      	b.n	10df4 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x29c>
    let b2 = (
   10df4:	f89d 006c 	ldrb.w	r0, [sp, #108]	; 0x6c
   10df8:	f88d 0068 	strb.w	r0, [sp, #104]	; 0x68
   10dfc:	f89d 006d 	ldrb.w	r0, [sp, #109]	; 0x6d
   10e00:	f88d 0069 	strb.w	r0, [sp, #105]	; 0x69
   10e04:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
   10e08:	f88d 006a 	strb.w	r0, [sp, #106]	; 0x6a
   10e0c:	f89d 006f 	ldrb.w	r0, [sp, #111]	; 0x6f
   10e10:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
    );
    //  Crop to screen size
    let crop = (
        b2.0.min(PHYSICAL_WIDTH as u8 - 1),   //  Left
   10e14:	f89d 0068 	ldrb.w	r0, [sp, #104]	; 0x68
   10e18:	21ef      	movs	r1, #239	; 0xef
   10e1a:	f006 fd7b 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10e1e:	9007      	str	r0, [sp, #28]
   10e20:	e7ff      	b.n	10e22 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x2ca>
        b2.1.min(PHYSICAL_HEIGHT as u8 - 1),  //  Top
   10e22:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
   10e26:	21c7      	movs	r1, #199	; 0xc7
   10e28:	f006 fd74 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10e2c:	9006      	str	r0, [sp, #24]
   10e2e:	e7ff      	b.n	10e30 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x2d8>
        b2.2.min(PHYSICAL_WIDTH as u8 - 1),   //  Right
   10e30:	f89d 006a 	ldrb.w	r0, [sp, #106]	; 0x6a
   10e34:	21ef      	movs	r1, #239	; 0xef
   10e36:	f006 fd6d 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10e3a:	9005      	str	r0, [sp, #20]
   10e3c:	e7ff      	b.n	10e3e <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x2e6>
        b2.3.min(PHYSICAL_HEIGHT as u8 - 1),  //  Bottom
   10e3e:	f89d 006b 	ldrb.w	r0, [sp, #107]	; 0x6b
   10e42:	21c7      	movs	r1, #199	; 0xc7
   10e44:	f006 fd66 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10e48:	9004      	str	r0, [sp, #16]
   10e4a:	e7ff      	b.n	10e4c <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x2f4>
    let crop = (
   10e4c:	9807      	ldr	r0, [sp, #28]
   10e4e:	f88d 0070 	strb.w	r0, [sp, #112]	; 0x70
   10e52:	9906      	ldr	r1, [sp, #24]
   10e54:	f88d 1071 	strb.w	r1, [sp, #113]	; 0x71
   10e58:	9a05      	ldr	r2, [sp, #20]
   10e5a:	f88d 2072 	strb.w	r2, [sp, #114]	; 0x72
   10e5e:	9b04      	ldr	r3, [sp, #16]
   10e60:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    );
    //  Flip left and right, top and bottom if necessary
    let result = (
        crop.0.min(crop.2),  //  Left
   10e64:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
   10e68:	f89d 1072 	ldrb.w	r1, [sp, #114]	; 0x72
   10e6c:	f006 fd52 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10e70:	9003      	str	r0, [sp, #12]
   10e72:	e7ff      	b.n	10e74 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x31c>
        crop.1.min(crop.3),  //  Top
   10e74:	f89d 0071 	ldrb.w	r0, [sp, #113]	; 0x71
   10e78:	f89d 1073 	ldrb.w	r1, [sp, #115]	; 0x73
   10e7c:	f006 fd4a 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   10e80:	9002      	str	r0, [sp, #8]
   10e82:	e7ff      	b.n	10e84 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x32c>
        crop.0.max(crop.2),  //  Right
   10e84:	f89d 0070 	ldrb.w	r0, [sp, #112]	; 0x70
   10e88:	f89d 1072 	ldrb.w	r1, [sp, #114]	; 0x72
   10e8c:	f006 fd31 	bl	178f2 <_ZN4core3cmp3Ord3max17ha8c90ae47563bfdfE>
   10e90:	9001      	str	r0, [sp, #4]
   10e92:	e7ff      	b.n	10e94 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x33c>
        crop.1.max(crop.3),  //  Bottom
   10e94:	f89d 0071 	ldrb.w	r0, [sp, #113]	; 0x71
   10e98:	f89d 1073 	ldrb.w	r1, [sp, #115]	; 0x73
   10e9c:	f006 fd29 	bl	178f2 <_ZN4core3cmp3Ord3max17ha8c90ae47563bfdfE>
   10ea0:	9000      	str	r0, [sp, #0]
   10ea2:	e7ff      	b.n	10ea4 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x34c>
    let result = (
   10ea4:	9803      	ldr	r0, [sp, #12]
   10ea6:	f88d 0074 	strb.w	r0, [sp, #116]	; 0x74
   10eaa:	9902      	ldr	r1, [sp, #8]
   10eac:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
   10eb0:	9a01      	ldr	r2, [sp, #4]
   10eb2:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
   10eb6:	9b00      	ldr	r3, [sp, #0]
   10eb8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
    );
    assert!(result.0 <= result.2 && result.1 <= result.3, "flip error");  //  Left <= Right and Top <= Bottom
   10ebc:	f89d c074 	ldrb.w	ip, [sp, #116]	; 0x74
   10ec0:	f89d e076 	ldrb.w	lr, [sp, #118]	; 0x76
   10ec4:	45f4      	cmp	ip, lr
   10ec6:	d908      	bls.n	10eda <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x382>
   10ec8:	e003      	b.n	10ed2 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x37a>
   10eca:	2001      	movs	r0, #1
   10ecc:	f88d 0079 	strb.w	r0, [sp, #121]	; 0x79
   10ed0:	e00a      	b.n	10ee8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x390>
   10ed2:	2000      	movs	r0, #0
   10ed4:	f88d 0079 	strb.w	r0, [sp, #121]	; 0x79
   10ed8:	e006      	b.n	10ee8 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x390>
   10eda:	f89d 0075 	ldrb.w	r0, [sp, #117]	; 0x75
   10ede:	f89d 1077 	ldrb.w	r1, [sp, #119]	; 0x77
   10ee2:	4288      	cmp	r0, r1
   10ee4:	d9f1      	bls.n	10eca <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x372>
   10ee6:	e7f4      	b.n	10ed2 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x37a>
   10ee8:	f89d 0079 	ldrb.w	r0, [sp, #121]	; 0x79
   10eec:	07c0      	lsls	r0, r0, #31
   10eee:	2800      	cmp	r0, #0
   10ef0:	d005      	beq.n	10efe <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x3a6>
   10ef2:	e7ff      	b.n	10ef4 <_ZN3app5chip823map_virtual_to_physical17h86013679af9f807aE+0x39c>
    result
   10ef4:	981d      	ldr	r0, [sp, #116]	; 0x74
   10ef6:	9016      	str	r0, [sp, #88]	; 0x58
}
   10ef8:	9816      	ldr	r0, [sp, #88]	; 0x58
   10efa:	b020      	add	sp, #128	; 0x80
   10efc:	bd80      	pop	{r7, pc}
    assert!(result.0 <= result.2 && result.1 <= result.3, "flip error");  //  Left <= Right and Top <= Bottom
   10efe:	f640 5090 	movw	r0, #3472	; 0xd90
   10f02:	f2c0 0002 	movt	r0, #2
   10f06:	f640 529c 	movw	r2, #3484	; 0xd9c
   10f0a:	f2c0 0202 	movt	r2, #2
   10f0e:	210a      	movs	r1, #10
   10f10:	f007 fbc4 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f14:	defe      	udf	#254	; 0xfe
        if flip.0 { SCREEN_WIDTH as u8 / 2 - x } 
   10f16:	f640 2010 	movw	r0, #2576	; 0xa10
   10f1a:	f2c0 0002 	movt	r0, #2
   10f1e:	f640 42d0 	movw	r2, #3280	; 0xcd0
   10f22:	f2c0 0202 	movt	r2, #2
   10f26:	2121      	movs	r1, #33	; 0x21
   10f28:	f007 fbb8 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f2c:	defe      	udf	#254	; 0xfe
        else      { x - SCREEN_WIDTH as u8 / 2 };
   10f2e:	f640 2010 	movw	r0, #2576	; 0xa10
   10f32:	f2c0 0002 	movt	r0, #2
   10f36:	f640 42e0 	movw	r2, #3296	; 0xce0
   10f3a:	f2c0 0202 	movt	r2, #2
   10f3e:	2121      	movs	r1, #33	; 0x21
   10f40:	f007 fbac 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f44:	defe      	udf	#254	; 0xfe
        if flip.1 { SCREEN_HEIGHT as u8 / 2 - y }
   10f46:	f640 2010 	movw	r0, #2576	; 0xa10
   10f4a:	f2c0 0002 	movt	r0, #2
   10f4e:	f640 42f0 	movw	r2, #3312	; 0xcf0
   10f52:	f2c0 0202 	movt	r2, #2
   10f56:	2121      	movs	r1, #33	; 0x21
   10f58:	f007 fba0 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f5c:	defe      	udf	#254	; 0xfe
        else      { y - SCREEN_HEIGHT as u8 / 2 };
   10f5e:	f640 2010 	movw	r0, #2576	; 0xa10
   10f62:	f2c0 0002 	movt	r0, #2
   10f66:	f640 5200 	movw	r2, #3328	; 0xd00
   10f6a:	f2c0 0202 	movt	r2, #2
   10f6e:	2121      	movs	r1, #33	; 0x21
   10f70:	f007 fb94 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f74:	defe      	udf	#254	; 0xfe
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.0 } 
   10f76:	f640 2010 	movw	r0, #2576	; 0xa10
   10f7a:	f2c0 0002 	movt	r0, #2
   10f7e:	f640 5210 	movw	r2, #3344	; 0xd10
   10f82:	f2c0 0202 	movt	r2, #2
   10f86:	2121      	movs	r1, #33	; 0x21
   10f88:	f007 fb88 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f8c:	defe      	udf	#254	; 0xfe
        else      { b.0 + PHYSICAL_WIDTH as u8 / 2 }
   10f8e:	f640 1030 	movw	r0, #2352	; 0x930
   10f92:	f2c0 0002 	movt	r0, #2
   10f96:	f640 5220 	movw	r2, #3360	; 0xd20
   10f9a:	f2c0 0202 	movt	r2, #2
   10f9e:	211c      	movs	r1, #28
   10fa0:	f007 fb7c 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10fa4:	defe      	udf	#254	; 0xfe
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.1 } 
   10fa6:	f640 2010 	movw	r0, #2576	; 0xa10
   10faa:	f2c0 0002 	movt	r0, #2
   10fae:	f640 5230 	movw	r2, #3376	; 0xd30
   10fb2:	f2c0 0202 	movt	r2, #2
   10fb6:	2121      	movs	r1, #33	; 0x21
   10fb8:	f007 fb70 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10fbc:	defe      	udf	#254	; 0xfe
        else      { b.1 + PHYSICAL_HEIGHT as u8 / 2 }
   10fbe:	f640 1030 	movw	r0, #2352	; 0x930
   10fc2:	f2c0 0002 	movt	r0, #2
   10fc6:	f640 5240 	movw	r2, #3392	; 0xd40
   10fca:	f2c0 0202 	movt	r2, #2
   10fce:	211c      	movs	r1, #28
   10fd0:	f007 fb64 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10fd4:	defe      	udf	#254	; 0xfe
        if flip.0 { PHYSICAL_WIDTH as u8 / 2 - b.2 } 
   10fd6:	f640 2010 	movw	r0, #2576	; 0xa10
   10fda:	f2c0 0002 	movt	r0, #2
   10fde:	f640 5250 	movw	r2, #3408	; 0xd50
   10fe2:	f2c0 0202 	movt	r2, #2
   10fe6:	2121      	movs	r1, #33	; 0x21
   10fe8:	f007 fb58 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10fec:	defe      	udf	#254	; 0xfe
        else      { b.2 + PHYSICAL_WIDTH as u8 / 2 }
   10fee:	f640 1030 	movw	r0, #2352	; 0x930
   10ff2:	f2c0 0002 	movt	r0, #2
   10ff6:	f640 5260 	movw	r2, #3424	; 0xd60
   10ffa:	f2c0 0202 	movt	r2, #2
   10ffe:	211c      	movs	r1, #28
   11000:	f007 fb4c 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11004:	defe      	udf	#254	; 0xfe
        if flip.1 { PHYSICAL_HEIGHT as u8 / 2 - b.3 } 
   11006:	f640 2010 	movw	r0, #2576	; 0xa10
   1100a:	f2c0 0002 	movt	r0, #2
   1100e:	f640 5270 	movw	r2, #3440	; 0xd70
   11012:	f2c0 0202 	movt	r2, #2
   11016:	2121      	movs	r1, #33	; 0x21
   11018:	f007 fb40 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1101c:	defe      	udf	#254	; 0xfe
        else      { b.3 + PHYSICAL_HEIGHT as u8 / 2 }
   1101e:	f640 1030 	movw	r0, #2352	; 0x930
   11022:	f2c0 0002 	movt	r0, #2
   11026:	f640 5280 	movw	r2, #3456	; 0xd80
   1102a:	f2c0 0202 	movt	r2, #2
   1102e:	211c      	movs	r1, #28
   11030:	f007 fb34 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11034:	defe      	udf	#254	; 0xfe

00011036 <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE>:

/// Same as map_physical_to_virtual, except that (x,y) belongs to the X >= 0, Y >= 0 quadrant
#[cfg(feature = "chip8_curve")]  //  If we are rendering CHIP8 Emulator as curved surface...
fn map_physical_to_virtual_normalised(x: u8, y: u8) -> (u8, u8) {
   11036:	b580      	push	{r7, lr}
   11038:	b088      	sub	sp, #32
   1103a:	460a      	mov	r2, r1
   1103c:	4603      	mov	r3, r0
   1103e:	f88d 0018 	strb.w	r0, [sp, #24]
   11042:	f88d 1019 	strb.w	r1, [sp, #25]
   11046:	2177      	movs	r1, #119	; 0x77
    let x_index = x.min(PHYSICAL_TO_VIRTUAL_MAP_WIDTH as u8 - 1);
   11048:	9205      	str	r2, [sp, #20]
   1104a:	9304      	str	r3, [sp, #16]
   1104c:	f006 fc62 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   11050:	4601      	mov	r1, r0
   11052:	f88d 001a 	strb.w	r0, [sp, #26]
   11056:	9103      	str	r1, [sp, #12]
   11058:	e7ff      	b.n	1105a <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x24>
   1105a:	2163      	movs	r1, #99	; 0x63
    let y_index = y.min(PHYSICAL_TO_VIRTUAL_MAP_HEIGHT as u8 - 1);
   1105c:	9805      	ldr	r0, [sp, #20]
   1105e:	f006 fc59 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   11062:	4601      	mov	r1, r0
   11064:	f88d 001b 	strb.w	r0, [sp, #27]
   11068:	9102      	str	r1, [sp, #8]
   1106a:	e7ff      	b.n	1106c <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x36>
    let virtual_pixel = PHYSICAL_TO_VIRTUAL_MAP[y_index as usize][x_index as usize];  //  Returns (x,y)
   1106c:	9802      	ldr	r0, [sp, #8]
   1106e:	b2c1      	uxtb	r1, r0
   11070:	460a      	mov	r2, r1
   11072:	2963      	cmp	r1, #99	; 0x63
   11074:	9201      	str	r2, [sp, #4]
   11076:	d81e      	bhi.n	110b6 <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x80>
   11078:	e7ff      	b.n	1107a <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x44>
   1107a:	9803      	ldr	r0, [sp, #12]
   1107c:	b2c1      	uxtb	r1, r0
   1107e:	460a      	mov	r2, r1
   11080:	2977      	cmp	r1, #119	; 0x77
   11082:	9200      	str	r2, [sp, #0]
   11084:	d820      	bhi.n	110c8 <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x92>
   11086:	e7ff      	b.n	11088 <_ZN3app5chip834map_physical_to_virtual_normalised17hf032f006470b0b3cE+0x52>
   11088:	f646 308c 	movw	r0, #27532	; 0x6b8c
   1108c:	f2c0 0002 	movt	r0, #2
   11090:	6800      	ldr	r0, [r0, #0]
   11092:	9901      	ldr	r1, [sp, #4]
   11094:	ebc1 1201 	rsb	r2, r1, r1, lsl #4
   11098:	eb00 1002 	add.w	r0, r0, r2, lsl #4
   1109c:	9a00      	ldr	r2, [sp, #0]
   1109e:	eb00 0342 	add.w	r3, r0, r2, lsl #1
   110a2:	f810 0012 	ldrb.w	r0, [r0, r2, lsl #1]
   110a6:	785b      	ldrb	r3, [r3, #1]
   110a8:	f88d 001c 	strb.w	r0, [sp, #28]
   110ac:	f88d 301d 	strb.w	r3, [sp, #29]
    virtual_pixel
}
   110b0:	4619      	mov	r1, r3
   110b2:	b008      	add	sp, #32
   110b4:	bd80      	pop	{r7, pc}
    let virtual_pixel = PHYSICAL_TO_VIRTUAL_MAP[y_index as usize][x_index as usize];  //  Returns (x,y)
   110b6:	f640 50ac 	movw	r0, #3500	; 0xdac
   110ba:	f2c0 0002 	movt	r0, #2
   110be:	2264      	movs	r2, #100	; 0x64
   110c0:	9901      	ldr	r1, [sp, #4]
   110c2:	f007 fb01 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   110c6:	defe      	udf	#254	; 0xfe
   110c8:	f640 50ac 	movw	r0, #3500	; 0xdac
   110cc:	f2c0 0002 	movt	r0, #2
   110d0:	2278      	movs	r2, #120	; 0x78
   110d2:	9900      	ldr	r1, [sp, #0]
   110d4:	f007 faf8 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   110d8:	defe      	udf	#254	; 0xfe

000110da <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E>:

/// Same as map_virtual_to_physical, except that (x,y) belongs to the X >= 0, Y >= 0 quadrant
#[cfg(feature = "chip8_curve")]  //  If we are rendering CHIP8 Emulator as curved surface...
fn map_virtual_to_physical_normalised(x: u8, y: u8) -> (u8, u8, u8, u8) {
   110da:	b580      	push	{r7, lr}
   110dc:	b08a      	sub	sp, #40	; 0x28
   110de:	460a      	mov	r2, r1
   110e0:	4603      	mov	r3, r0
   110e2:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   110e6:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   110ea:	211f      	movs	r1, #31
    let x_index = x.min(VIRTUAL_TO_PHYSICAL_MAP_WIDTH as u8 - 1);
   110ec:	9206      	str	r2, [sp, #24]
   110ee:	9305      	str	r3, [sp, #20]
   110f0:	f006 fc10 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   110f4:	4601      	mov	r1, r0
   110f6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
   110fa:	9104      	str	r1, [sp, #16]
   110fc:	e7ff      	b.n	110fe <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x24>
   110fe:	210f      	movs	r1, #15
    let y_index = y.min(VIRTUAL_TO_PHYSICAL_MAP_HEIGHT as u8 - 1);
   11100:	9806      	ldr	r0, [sp, #24]
   11102:	f006 fc07 	bl	17914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>
   11106:	4601      	mov	r1, r0
   11108:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   1110c:	9103      	str	r1, [sp, #12]
   1110e:	e7ff      	b.n	11110 <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x36>
    let physical_box = VIRTUAL_TO_PHYSICAL_MAP[y_index as usize][x_index as usize];  //  Returns (left,top,right,bottom)
   11110:	9803      	ldr	r0, [sp, #12]
   11112:	b2c1      	uxtb	r1, r0
   11114:	460a      	mov	r2, r1
   11116:	290f      	cmp	r1, #15
   11118:	9202      	str	r2, [sp, #8]
   1111a:	d818      	bhi.n	1114e <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x74>
   1111c:	e7ff      	b.n	1111e <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x44>
   1111e:	9804      	ldr	r0, [sp, #16]
   11120:	b2c1      	uxtb	r1, r0
   11122:	460a      	mov	r2, r1
   11124:	291f      	cmp	r1, #31
   11126:	9201      	str	r2, [sp, #4]
   11128:	d81a      	bhi.n	11160 <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x86>
   1112a:	e7ff      	b.n	1112c <_ZN3app5chip834map_virtual_to_physical_normalised17h22322e42a62041f8E+0x52>
   1112c:	f247 3090 	movw	r0, #29584	; 0x7390
   11130:	f2c0 0002 	movt	r0, #2
   11134:	6800      	ldr	r0, [r0, #0]
   11136:	9902      	ldr	r1, [sp, #8]
   11138:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
   1113c:	9a01      	ldr	r2, [sp, #4]
   1113e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
   11142:	9008      	str	r0, [sp, #32]
    physical_box
   11144:	9808      	ldr	r0, [sp, #32]
   11146:	9007      	str	r0, [sp, #28]
}
   11148:	9807      	ldr	r0, [sp, #28]
   1114a:	b00a      	add	sp, #40	; 0x28
   1114c:	bd80      	pop	{r7, pc}
    let physical_box = VIRTUAL_TO_PHYSICAL_MAP[y_index as usize][x_index as usize];  //  Returns (left,top,right,bottom)
   1114e:	f640 50bc 	movw	r0, #3516	; 0xdbc
   11152:	f2c0 0002 	movt	r0, #2
   11156:	2210      	movs	r2, #16
   11158:	9902      	ldr	r1, [sp, #8]
   1115a:	f007 fab5 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1115e:	defe      	udf	#254	; 0xfe
   11160:	f640 50bc 	movw	r0, #3516	; 0xdbc
   11164:	f2c0 0002 	movt	r0, #2
   11168:	2220      	movs	r2, #32
   1116a:	9901      	ldr	r1, [sp, #4]
   1116c:	f007 faac 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11170:	defe      	udf	#254	; 0xfe

00011172 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
   11172:	b5b0      	push	{r4, r5, r7, lr}
   11174:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
   11176:	f247 3094 	movw	r0, #29588	; 0x7394
   1117a:	f2c0 0002 	movt	r0, #2
   1117e:	2112      	movs	r1, #18
   11180:	f7f7 ffba 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
   11184:	e7ff      	b.n	11186 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
   11186:	f644 10b4 	movw	r0, #18868	; 0x49b4
   1118a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1118e:	210a      	movs	r1, #10
   11190:	f003 ff81 	bl	15096 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   11194:	9012      	str	r0, [sp, #72]	; 0x48
   11196:	e7ff      	b.n	11198 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x26>
   11198:	9812      	ldr	r0, [sp, #72]	; 0x48
   1119a:	f7f7 fd71 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   1119e:	9014      	str	r0, [sp, #80]	; 0x50
   111a0:	e7ff      	b.n	111a2 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x30>
   111a2:	9814      	ldr	r0, [sp, #80]	; 0x50
   111a4:	1e41      	subs	r1, r0, #1
   111a6:	bf18      	it	ne
   111a8:	2101      	movne	r1, #1
   111aa:	2801      	cmp	r0, #1
   111ac:	d001      	beq.n	111b2 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x40>
   111ae:	e7ff      	b.n	111b0 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x3e>
   111b0:	e008      	b.n	111c4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
   111b2:	f644 10b4 	movw	r0, #18868	; 0x49b4
   111b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   111ba:	f004 f805 	bl	151c8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
   111be:	9011      	str	r0, [sp, #68]	; 0x44
   111c0:	e00f      	b.n	111e2 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
   111c2:	defe      	udf	#254	; 0xfe
   111c4:	9814      	ldr	r0, [sp, #80]	; 0x50
   111c6:	9036      	str	r0, [sp, #216]	; 0xd8
   111c8:	f002 f962 	bl	13490 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   111cc:	9010      	str	r0, [sp, #64]	; 0x40
   111ce:	e002      	b.n	111d6 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
   111d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   111d2:	b03e      	add	sp, #248	; 0xf8
   111d4:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
   111d6:	9810      	ldr	r0, [sp, #64]	; 0x40
   111d8:	f7f7 fd46 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   111dc:	9013      	str	r0, [sp, #76]	; 0x4c
   111de:	e7ff      	b.n	111e0 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x6e>
   111e0:	e7f6      	b.n	111d0 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x5e>
        TOUCH_RESET.set_low() ? ;
   111e2:	9811      	ldr	r0, [sp, #68]	; 0x44
   111e4:	f7f7 fd4c 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   111e8:	9015      	str	r0, [sp, #84]	; 0x54
   111ea:	e7ff      	b.n	111ec <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x7a>
   111ec:	9815      	ldr	r0, [sp, #84]	; 0x54
   111ee:	1e41      	subs	r1, r0, #1
   111f0:	bf18      	it	ne
   111f2:	2101      	movne	r1, #1
   111f4:	2801      	cmp	r0, #1
   111f6:	d001      	beq.n	111fc <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x8a>
   111f8:	e7ff      	b.n	111fa <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x88>
   111fa:	e008      	b.n	1120e <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x9c>
        TOUCH_DELAY.delay_ms(20);
   111fc:	f644 10b8 	movw	r0, #18872	; 0x49b8
   11200:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11204:	2114      	movs	r1, #20
   11206:	f003 fff6 	bl	151f6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   1120a:	e00d      	b.n	11228 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb6>
        TOUCH_RESET.set_low() ? ;
   1120c:	defe      	udf	#254	; 0xfe
   1120e:	9815      	ldr	r0, [sp, #84]	; 0x54
   11210:	9037      	str	r0, [sp, #220]	; 0xdc
   11212:	f002 f93d 	bl	13490 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   11216:	900f      	str	r0, [sp, #60]	; 0x3c
   11218:	e7ff      	b.n	1121a <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xa8>
   1121a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1121c:	f7f7 fd24 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   11220:	9013      	str	r0, [sp, #76]	; 0x4c
   11222:	e7ff      	b.n	11224 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb2>
   11224:	e7ff      	b.n	11226 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb4>
   11226:	e7d3      	b.n	111d0 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x5e>
        TOUCH_RESET.set_high() ? ;
   11228:	f644 10b4 	movw	r0, #18868	; 0x49b4
   1122c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11230:	f003 ffd5 	bl	151de <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
   11234:	900e      	str	r0, [sp, #56]	; 0x38
   11236:	e7ff      	b.n	11238 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xc6>
   11238:	980e      	ldr	r0, [sp, #56]	; 0x38
   1123a:	f7f7 fd21 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   1123e:	9016      	str	r0, [sp, #88]	; 0x58
   11240:	e7ff      	b.n	11242 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xd0>
   11242:	9816      	ldr	r0, [sp, #88]	; 0x58
   11244:	1e41      	subs	r1, r0, #1
   11246:	bf18      	it	ne
   11248:	2101      	movne	r1, #1
   1124a:	2801      	cmp	r0, #1
   1124c:	d001      	beq.n	11252 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xe0>
   1124e:	e7ff      	b.n	11250 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xde>
   11250:	e008      	b.n	11264 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
   11252:	f644 10b8 	movw	r0, #18872	; 0x49b8
   11256:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1125a:	21c8      	movs	r1, #200	; 0xc8
   1125c:	f003 ffcb 	bl	151f6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   11260:	e00c      	b.n	1127c <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x10a>
        TOUCH_RESET.set_high() ? ;
   11262:	defe      	udf	#254	; 0xfe
   11264:	9816      	ldr	r0, [sp, #88]	; 0x58
   11266:	9038      	str	r0, [sp, #224]	; 0xe0
   11268:	f002 f912 	bl	13490 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   1126c:	900d      	str	r0, [sp, #52]	; 0x34
   1126e:	e7ff      	b.n	11270 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xfe>
   11270:	980d      	ldr	r0, [sp, #52]	; 0x34
   11272:	f7f7 fcf9 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   11276:	9013      	str	r0, [sp, #76]	; 0x4c
   11278:	e7ff      	b.n	1127a <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x108>
   1127a:	e7d4      	b.n	11226 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
   1127c:	f644 10b8 	movw	r0, #18872	; 0x49b8
   11280:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11284:	21c8      	movs	r1, #200	; 0xc8
   11286:	f003 ffb6 	bl	151f6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   1128a:	e7ff      	b.n	1128c <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
   1128c:	f241 402f 	movw	r0, #5167	; 0x142f
   11290:	f2c0 0001 	movt	r0, #1
   11294:	9017      	str	r0, [sp, #92]	; 0x5c
   11296:	9817      	ldr	r0, [sp, #92]	; 0x5c
   11298:	f644 214c 	movw	r1, #19020	; 0x4a4c
   1129c:	f2c2 0100 	movt	r1, #8192	; 0x2000
   112a0:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
   112a2:	f241 30e3 	movw	r0, #5091	; 0x13e3
   112a6:	f2c0 0001 	movt	r0, #1
   112aa:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
   112ac:	e7ff      	b.n	112ae <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
   112ae:	9919      	ldr	r1, [sp, #100]	; 0x64
   112b0:	4668      	mov	r0, sp
   112b2:	2201      	movs	r2, #1
   112b4:	6002      	str	r2, [r0, #0]
   112b6:	201c      	movs	r0, #28
   112b8:	2200      	movs	r2, #0
   112ba:	2302      	movs	r3, #2
   112bc:	f009 fb88 	bl	1a9d0 <hal_gpio_irq_init>
   112c0:	9018      	str	r0, [sp, #96]	; 0x60
   112c2:	e7ff      	b.n	112c4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
   112c4:	f247 30ac 	movw	r0, #29612	; 0x73ac
   112c8:	f2c0 0002 	movt	r0, #2
   112cc:	6800      	ldr	r0, [r0, #0]
   112ce:	a918      	add	r1, sp, #96	; 0x60
   112d0:	911a      	str	r1, [sp, #104]	; 0x68
   112d2:	901b      	str	r0, [sp, #108]	; 0x6c
   112d4:	981a      	ldr	r0, [sp, #104]	; 0x68
   112d6:	9039      	str	r0, [sp, #228]	; 0xe4
   112d8:	991b      	ldr	r1, [sp, #108]	; 0x6c
   112da:	913a      	str	r1, [sp, #232]	; 0xe8
   112dc:	6802      	ldr	r2, [r0, #0]
   112de:	680b      	ldr	r3, [r1, #0]
   112e0:	429a      	cmp	r2, r3
   112e2:	900c      	str	r0, [sp, #48]	; 0x30
   112e4:	910b      	str	r1, [sp, #44]	; 0x2c
   112e6:	d104      	bne.n	112f2 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x180>
   112e8:	e7ff      	b.n	112ea <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x178>
   112ea:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
   112ec:	f009 fbac 	bl	1aa48 <hal_gpio_irq_enable>
   112f0:	e072      	b.n	113d8 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
   112f2:	f247 4004 	movw	r0, #29700	; 0x7404
   112f6:	f2c0 0002 	movt	r0, #2
   112fa:	6801      	ldr	r1, [r0, #0]
   112fc:	980c      	ldr	r0, [sp, #48]	; 0x30
   112fe:	902b      	str	r0, [sp, #172]	; 0xac
   11300:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11302:	922c      	str	r2, [sp, #176]	; 0xb0
   11304:	f247 4320 	movw	r3, #29728	; 0x7420
   11308:	f2c0 0302 	movt	r3, #2
   1130c:	681b      	ldr	r3, [r3, #0]
   1130e:	f247 4c24 	movw	ip, #29732	; 0x7424
   11312:	f2c0 0c02 	movt	ip, #2
   11316:	f8dc c000 	ldr.w	ip, [ip]
   1131a:	46ee      	mov	lr, sp
   1131c:	2400      	movs	r4, #0
   1131e:	f8ce 4000 	str.w	r4, [lr]
   11322:	a82d      	add	r0, sp, #180	; 0xb4
   11324:	2201      	movs	r2, #1
   11326:	910a      	str	r1, [sp, #40]	; 0x28
   11328:	4619      	mov	r1, r3
   1132a:	4663      	mov	r3, ip
   1132c:	f000 fdeb 	bl	11f06 <_ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE>
   11330:	e7ff      	b.n	11332 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x1c0>
   11332:	a82b      	add	r0, sp, #172	; 0xac
   11334:	9028      	str	r0, [sp, #160]	; 0xa0
   11336:	a82c      	add	r0, sp, #176	; 0xb0
   11338:	9029      	str	r0, [sp, #164]	; 0xa4
   1133a:	a82d      	add	r0, sp, #180	; 0xb4
   1133c:	902a      	str	r0, [sp, #168]	; 0xa8
   1133e:	9828      	ldr	r0, [sp, #160]	; 0xa0
   11340:	903b      	str	r0, [sp, #236]	; 0xec
   11342:	9929      	ldr	r1, [sp, #164]	; 0xa4
   11344:	913c      	str	r1, [sp, #240]	; 0xf0
   11346:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   11348:	923d      	str	r2, [sp, #244]	; 0xf4
   1134a:	f242 33bd 	movw	r3, #9149	; 0x23bd
   1134e:	f2c0 0301 	movt	r3, #1
   11352:	9109      	str	r1, [sp, #36]	; 0x24
   11354:	4619      	mov	r1, r3
   11356:	9208      	str	r2, [sp, #32]
   11358:	f7f8 f883 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1135c:	9007      	str	r0, [sp, #28]
   1135e:	9106      	str	r1, [sp, #24]
   11360:	e7ff      	b.n	11362 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x1f0>
   11362:	f242 31bd 	movw	r1, #9149	; 0x23bd
   11366:	f2c0 0101 	movt	r1, #1
   1136a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1136c:	f7f8 f879 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   11370:	9005      	str	r0, [sp, #20]
   11372:	9104      	str	r1, [sp, #16]
   11374:	e7ff      	b.n	11376 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x204>
   11376:	f648 416b 	movw	r1, #35947	; 0x8c6b
   1137a:	f2c0 0101 	movt	r1, #1
   1137e:	9808      	ldr	r0, [sp, #32]
   11380:	f7f8 f8ae 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   11384:	9003      	str	r0, [sp, #12]
   11386:	9102      	str	r1, [sp, #8]
   11388:	e7ff      	b.n	1138a <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x218>
   1138a:	9807      	ldr	r0, [sp, #28]
   1138c:	9022      	str	r0, [sp, #136]	; 0x88
   1138e:	9906      	ldr	r1, [sp, #24]
   11390:	9123      	str	r1, [sp, #140]	; 0x8c
   11392:	9a05      	ldr	r2, [sp, #20]
   11394:	9224      	str	r2, [sp, #144]	; 0x90
   11396:	9b04      	ldr	r3, [sp, #16]
   11398:	9325      	str	r3, [sp, #148]	; 0x94
   1139a:	f8dd c00c 	ldr.w	ip, [sp, #12]
   1139e:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
   113a2:	f8dd e008 	ldr.w	lr, [sp, #8]
   113a6:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
   113aa:	466c      	mov	r4, sp
   113ac:	2503      	movs	r5, #3
   113ae:	6025      	str	r5, [r4, #0]
   113b0:	a81c      	add	r0, sp, #112	; 0x70
   113b2:	ab22      	add	r3, sp, #136	; 0x88
   113b4:	990a      	ldr	r1, [sp, #40]	; 0x28
   113b6:	462a      	mov	r2, r5
   113b8:	f000 fda5 	bl	11f06 <_ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE>
   113bc:	e7ff      	b.n	113be <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x24c>
   113be:	f247 4044 	movw	r0, #29764	; 0x7444
   113c2:	f2c0 0002 	movt	r0, #2
   113c6:	f007 f962 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   113ca:	9001      	str	r0, [sp, #4]
   113cc:	e7ff      	b.n	113ce <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x25c>
   113ce:	a81c      	add	r0, sp, #112	; 0x70
   113d0:	9901      	ldr	r1, [sp, #4]
   113d2:	f007 f999 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   113d6:	defe      	udf	#254	; 0xfe
   113d8:	2000      	movs	r0, #0
    Ok(())
   113da:	9013      	str	r0, [sp, #76]	; 0x4c
   113dc:	2001      	movs	r0, #1
   113de:	9013      	str	r0, [sp, #76]	; 0x4c
}
   113e0:	e6f6      	b.n	111d0 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x5e>

000113e2 <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
   113e2:	b580      	push	{r7, lr}
   113e4:	b086      	sub	sp, #24
   113e6:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
   113e8:	f644 214c 	movw	r1, #19020	; 0x4a4c
   113ec:	f2c2 0100 	movt	r1, #8192	; 0x2000
   113f0:	6088      	str	r0, [r1, #8]
   113f2:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
   113f4:	f7f7 fcc0 	bl	8d78 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
   113f8:	e7ff      	b.n	113fa <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E+0x18>
   113fa:	f64e 61f2 	movw	r1, #61170	; 0xeef2
   113fe:	f2c0 0101 	movt	r1, #1
   11402:	f247 435c 	movw	r3, #29788	; 0x745c
   11406:	f2c0 0302 	movt	r3, #2
   1140a:	a802      	add	r0, sp, #8
   1140c:	2208      	movs	r2, #8
   1140e:	f7fd fe6a 	bl	f0e6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E>
   11412:	4601      	mov	r1, r0
   11414:	9005      	str	r0, [sp, #20]
   11416:	9101      	str	r1, [sp, #4]
   11418:	e7ff      	b.n	1141a <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
   1141a:	f644 214c 	movw	r1, #19020	; 0x4a4c
   1141e:	f2c2 0100 	movt	r1, #8192	; 0x2000
   11422:	9801      	ldr	r0, [sp, #4]
   11424:	f00a fba3 	bl	1bb6e <os_eventq_put>
   11428:	e7ff      	b.n	1142a <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E+0x48>
    //console::print("touch\n"); ////
}
   1142a:	b006      	add	sp, #24
   1142c:	bd80      	pop	{r7, pc}

0001142e <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
   1142e:	b580      	push	{r7, lr}
   11430:	b094      	sub	sp, #80	; 0x50
   11432:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
   11434:	f644 10b8 	movw	r0, #18872	; 0x49b8
   11438:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1143c:	f000 f894 	bl	11568 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E>
   11440:	9006      	str	r0, [sp, #24]
   11442:	e7ff      	b.n	11444 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x16>
   11444:	f247 416c 	movw	r1, #29804	; 0x746c
   11448:	f2c0 0102 	movt	r1, #2
   1144c:	f247 437c 	movw	r3, #29820	; 0x747c
   11450:	f2c0 0302 	movt	r3, #2
   11454:	220e      	movs	r2, #14
   11456:	9806      	ldr	r0, [sp, #24]
   11458:	f7f7 fbd3 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1145c:	e7ff      	b.n	1145e <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
   1145e:	f644 10b8 	movw	r0, #18872	; 0x49b8
   11462:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11466:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
   1146a:	2100      	movs	r1, #0
   1146c:	9107      	str	r1, [sp, #28]
   1146e:	9008      	str	r0, [sp, #32]
   11470:	9807      	ldr	r0, [sp, #28]
   11472:	9908      	ldr	r1, [sp, #32]
   11474:	f001 fb95 	bl	12ba2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   11478:	9005      	str	r0, [sp, #20]
   1147a:	9104      	str	r1, [sp, #16]
   1147c:	e7ff      	b.n	1147e <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x50>
   1147e:	9805      	ldr	r0, [sp, #20]
   11480:	9009      	str	r0, [sp, #36]	; 0x24
   11482:	9904      	ldr	r1, [sp, #16]
   11484:	910a      	str	r1, [sp, #40]	; 0x28
   11486:	e7ff      	b.n	11488 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x5a>
   11488:	a809      	add	r0, sp, #36	; 0x24
   1148a:	f001 faff 	bl	12a8c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   1148e:	910c      	str	r1, [sp, #48]	; 0x30
   11490:	900b      	str	r0, [sp, #44]	; 0x2c
   11492:	e7ff      	b.n	11494 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x66>
   11494:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11496:	2800      	cmp	r0, #0
   11498:	d001      	beq.n	1149e <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x70>
   1149a:	e7ff      	b.n	1149c <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x6e>
   1149c:	e002      	b.n	114a4 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
   1149e:	b014      	add	sp, #80	; 0x50
   114a0:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
   114a2:	defe      	udf	#254	; 0xfe
   114a4:	980c      	ldr	r0, [sp, #48]	; 0x30
   114a6:	900f      	str	r0, [sp, #60]	; 0x3c
   114a8:	9010      	str	r0, [sp, #64]	; 0x40
   114aa:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
   114ac:	2809      	cmp	r0, #9
   114ae:	9003      	str	r0, [sp, #12]
   114b0:	d851      	bhi.n	11556 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x128>
   114b2:	e7ff      	b.n	114b4 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x86>
   114b4:	f644 10b8 	movw	r0, #18872	; 0x49b8
   114b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   114bc:	9903      	ldr	r1, [sp, #12]
   114be:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   114c2:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
   114c6:	4603      	mov	r3, r0
   114c8:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
   114cc:	f8b2 c002 	ldrh.w	ip, [r2, #2]
   114d0:	46e6      	mov	lr, ip
   114d2:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
   114d6:	7912      	ldrb	r2, [r2, #4]
   114d8:	4694      	mov	ip, r2
   114da:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
   114de:	2800      	cmp	r0, #0
   114e0:	9302      	str	r3, [sp, #8]
   114e2:	f8cd e004 	str.w	lr, [sp, #4]
   114e6:	f8cd c000 	str.w	ip, [sp]
   114ea:	d008      	beq.n	114fe <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xd0>
   114ec:	e003      	b.n	114f6 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xc8>
   114ee:	2001      	movs	r0, #1
   114f0:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
   114f4:	e008      	b.n	11508 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xda>
   114f6:	2000      	movs	r0, #0
   114f8:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
   114fc:	e004      	b.n	11508 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xda>
   114fe:	9801      	ldr	r0, [sp, #4]
   11500:	0401      	lsls	r1, r0, #16
   11502:	2900      	cmp	r1, #0
   11504:	d0f3      	beq.n	114ee <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xc0>
   11506:	e7f6      	b.n	114f6 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xc8>
   11508:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
   1150c:	07c0      	lsls	r0, r0, #31
   1150e:	2800      	cmp	r0, #0
   11510:	d105      	bne.n	1151e <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf0>
   11512:	e7ff      	b.n	11514 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xe6>
            if action != 0 && action != 2 { continue; }
   11514:	9800      	ldr	r0, [sp, #0]
   11516:	0601      	lsls	r1, r0, #24
   11518:	2900      	cmp	r1, #0
   1151a:	d10a      	bne.n	11532 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x104>
   1151c:	e005      	b.n	1152a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xfc>
            if x == 0 && y == 0 { continue; }
   1151e:	e7ff      	b.n	11520 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf2>
   11520:	e7b2      	b.n	11488 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x5a>
   11522:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
   11524:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   11528:	e008      	b.n	1153c <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x10e>
   1152a:	2000      	movs	r0, #0
   1152c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   11530:	e004      	b.n	1153c <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x10e>
   11532:	9800      	ldr	r0, [sp, #0]
   11534:	b2c1      	uxtb	r1, r0
   11536:	2902      	cmp	r1, #2
   11538:	d1f3      	bne.n	11522 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf4>
   1153a:	e7f6      	b.n	1152a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xfc>
   1153c:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   11540:	07c0      	lsls	r0, r0, #31
   11542:	2800      	cmp	r0, #0
   11544:	d105      	bne.n	11552 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x124>
   11546:	e7ff      	b.n	11548 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x11a>
            super::handle_touch(x, y);
   11548:	9802      	ldr	r0, [sp, #8]
   1154a:	9901      	ldr	r1, [sp, #4]
   1154c:	f7ff f8c2 	bl	106d4 <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E>
   11550:	e000      	b.n	11554 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x126>
            if action != 0 && action != 2 { continue; }
   11552:	e7e5      	b.n	11520 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
   11554:	e798      	b.n	11488 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
   11556:	f247 408c 	movw	r0, #29836	; 0x748c
   1155a:	f2c0 0002 	movt	r0, #2
   1155e:	220a      	movs	r2, #10
   11560:	9903      	ldr	r1, [sp, #12]
   11562:	f007 f8b1 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11566:	defe      	udf	#254	; 0xfe

00011568 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
   11568:	b580      	push	{r7, lr}
   1156a:	b0de      	sub	sp, #376	; 0x178
   1156c:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
   1156e:	4669      	mov	r1, sp
   11570:	223f      	movs	r2, #63	; 0x3f
   11572:	600a      	str	r2, [r1, #0]
   11574:	f644 230a 	movw	r3, #18954	; 0x4a0a
   11578:	f2c2 0300 	movt	r3, #8192	; 0x2000
   1157c:	2115      	movs	r1, #21
   1157e:	f04f 0c00 	mov.w	ip, #0
   11582:	9026      	str	r0, [sp, #152]	; 0x98
   11584:	4608      	mov	r0, r1
   11586:	4661      	mov	r1, ip
   11588:	f000 fb97 	bl	11cba <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E>
   1158c:	9025      	str	r0, [sp, #148]	; 0x94
   1158e:	e7ff      	b.n	11590 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x28>
   11590:	f247 419c 	movw	r1, #29852	; 0x749c
   11594:	f2c0 0102 	movt	r1, #2
   11598:	f247 43b0 	movw	r3, #29872	; 0x74b0
   1159c:	f2c0 0302 	movt	r3, #2
   115a0:	2213      	movs	r2, #19
   115a2:	9825      	ldr	r0, [sp, #148]	; 0x94
   115a4:	f7f7 fb2d 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   115a8:	e7ff      	b.n	115aa <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x42>
   115aa:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
   115ae:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
   115b0:	9024      	str	r0, [sp, #144]	; 0x90
   115b2:	9123      	str	r1, [sp, #140]	; 0x8c
   115b4:	f00d fc42 	bl	1ee3c <__aeabi_memclr>
   115b8:	a827      	add	r0, sp, #156	; 0x9c
   115ba:	9924      	ldr	r1, [sp, #144]	; 0x90
   115bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   115be:	f00d fc41 	bl	1ee44 <__aeabi_memcpy>
   115c2:	e7ff      	b.n	115c4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5c>
   115c4:	a927      	add	r1, sp, #156	; 0x9c
   115c6:	2252      	movs	r2, #82	; 0x52
   115c8:	9826      	ldr	r0, [sp, #152]	; 0x98
   115ca:	f00d fc3b 	bl	1ee44 <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
   115ce:	f644 210a 	movw	r1, #18954	; 0x4a0a
   115d2:	f2c2 0100 	movt	r1, #8192	; 0x2000
   115d6:	7889      	ldrb	r1, [r1, #2]
   115d8:	f001 010f 	and.w	r1, r1, #15
   115dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   115de:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
   115e2:	2100      	movs	r1, #0
    data.count     = 0;
   115e4:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
   115e8:	9150      	str	r1, [sp, #320]	; 0x140
   115ea:	2105      	movs	r1, #5
   115ec:	9151      	str	r1, [sp, #324]	; 0x144
   115ee:	9950      	ldr	r1, [sp, #320]	; 0x140
   115f0:	9b51      	ldr	r3, [sp, #324]	; 0x144
   115f2:	9022      	str	r0, [sp, #136]	; 0x88
   115f4:	4608      	mov	r0, r1
   115f6:	4619      	mov	r1, r3
   115f8:	f001 fad3 	bl	12ba2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   115fc:	9021      	str	r0, [sp, #132]	; 0x84
   115fe:	9120      	str	r1, [sp, #128]	; 0x80
   11600:	e7ff      	b.n	11602 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x9a>
   11602:	9821      	ldr	r0, [sp, #132]	; 0x84
   11604:	9052      	str	r0, [sp, #328]	; 0x148
   11606:	9920      	ldr	r1, [sp, #128]	; 0x80
   11608:	9153      	str	r1, [sp, #332]	; 0x14c
   1160a:	e7ff      	b.n	1160c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xa4>
   1160c:	a852      	add	r0, sp, #328	; 0x148
   1160e:	f001 fa3d 	bl	12a8c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   11612:	9155      	str	r1, [sp, #340]	; 0x154
   11614:	9054      	str	r0, [sp, #336]	; 0x150
   11616:	e7ff      	b.n	11618 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xb0>
   11618:	9854      	ldr	r0, [sp, #336]	; 0x150
   1161a:	2800      	cmp	r0, #0
   1161c:	d001      	beq.n	11622 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xba>
   1161e:	e7ff      	b.n	11620 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xb8>
   11620:	e001      	b.n	11626 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xbe>
   11622:	e00d      	b.n	11640 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xd8>
   11624:	defe      	udf	#254	; 0xfe
   11626:	9855      	ldr	r0, [sp, #340]	; 0x154
   11628:	9058      	str	r0, [sp, #352]	; 0x160
   1162a:	9059      	str	r0, [sp, #356]	; 0x164
   1162c:	905a      	str	r0, [sp, #360]	; 0x168
   1162e:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
   11630:	fba1 1200 	umull	r1, r2, r1, r0
   11634:	2a00      	cmp	r2, #0
   11636:	901f      	str	r0, [sp, #124]	; 0x7c
   11638:	911e      	str	r1, [sp, #120]	; 0x78
   1163a:	f040 81c1 	bne.w	119c0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x458>
   1163e:	e002      	b.n	11646 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xde>
   11640:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
   11642:	b05e      	add	sp, #376	; 0x178
   11644:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
   11646:	981e      	ldr	r0, [sp, #120]	; 0x78
   11648:	1d41      	adds	r1, r0, #5
   1164a:	460a      	mov	r2, r1
   1164c:	4281      	cmp	r1, r0
   1164e:	921d      	str	r2, [sp, #116]	; 0x74
   11650:	f0c0 81c2 	bcc.w	119d8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x470>
   11654:	e7ff      	b.n	11656 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xee>
   11656:	981d      	ldr	r0, [sp, #116]	; 0x74
   11658:	283e      	cmp	r0, #62	; 0x3e
   1165a:	f200 81c9 	bhi.w	119f0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x488>
   1165e:	e7ff      	b.n	11660 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xf8>
   11660:	f644 200a 	movw	r0, #18954	; 0x4a0a
   11664:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11668:	991d      	ldr	r1, [sp, #116]	; 0x74
   1166a:	5c40      	ldrb	r0, [r0, r1]
   1166c:	0900      	lsrs	r0, r0, #4
   1166e:	901c      	str	r0, [sp, #112]	; 0x70
   11670:	e7ff      	b.n	11672 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x10a>
   11672:	981c      	ldr	r0, [sp, #112]	; 0x70
   11674:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
   11678:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
   1167a:	290e      	cmp	r1, #14
   1167c:	d80b      	bhi.n	11696 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x12e>
   1167e:	e7ff      	b.n	11680 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x118>
        data.count += 1;
   11680:	9826      	ldr	r0, [sp, #152]	; 0x98
   11682:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
   11686:	3101      	adds	r1, #1
   11688:	b2ca      	uxtb	r2, r1
   1168a:	460b      	mov	r3, r1
   1168c:	428a      	cmp	r2, r1
   1168e:	931b      	str	r3, [sp, #108]	; 0x6c
   11690:	f040 81b7 	bne.w	11a02 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x49a>
   11694:	e001      	b.n	1169a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x132>
        if pointid >= HYN_MAX_ID { break; }
   11696:	e7ff      	b.n	11698 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x130>
   11698:	e7d2      	b.n	11640 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xd8>
        data.count += 1;
   1169a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1169c:	9926      	ldr	r1, [sp, #152]	; 0x98
   1169e:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
   116a2:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   116a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   116a6:	fba2 2c03 	umull	r2, ip, r2, r3
   116aa:	f1bc 0f00 	cmp.w	ip, #0
   116ae:	921a      	str	r2, [sp, #104]	; 0x68
   116b0:	f040 81b3 	bne.w	11a1a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4b2>
   116b4:	e7ff      	b.n	116b6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x14e>
   116b6:	981a      	ldr	r0, [sp, #104]	; 0x68
   116b8:	1cc1      	adds	r1, r0, #3
   116ba:	460a      	mov	r2, r1
   116bc:	4281      	cmp	r1, r0
   116be:	9219      	str	r2, [sp, #100]	; 0x64
   116c0:	f0c0 81b7 	bcc.w	11a32 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4ca>
   116c4:	e7ff      	b.n	116c6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x15e>
   116c6:	9819      	ldr	r0, [sp, #100]	; 0x64
   116c8:	283e      	cmp	r0, #62	; 0x3e
   116ca:	f200 81be 	bhi.w	11a4a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4e2>
   116ce:	e7ff      	b.n	116d0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x168>
   116d0:	f644 200a 	movw	r0, #18954	; 0x4a0a
   116d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   116d8:	9919      	ldr	r1, [sp, #100]	; 0x64
   116da:	5c40      	ldrb	r0, [r0, r1]
   116dc:	f000 000f 	and.w	r0, r0, #15
   116e0:	4602      	mov	r2, r0
   116e2:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
   116e6:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
   116e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   116ea:	fba0 0c03 	umull	r0, ip, r0, r3
   116ee:	f1bc 0f00 	cmp.w	ip, #0
   116f2:	9218      	str	r2, [sp, #96]	; 0x60
   116f4:	9017      	str	r0, [sp, #92]	; 0x5c
   116f6:	f040 81b1 	bne.w	11a5c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4f4>
   116fa:	e7ff      	b.n	116fc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x194>
   116fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   116fe:	1d01      	adds	r1, r0, #4
   11700:	460a      	mov	r2, r1
   11702:	4281      	cmp	r1, r0
   11704:	9216      	str	r2, [sp, #88]	; 0x58
   11706:	f0c0 81b5 	bcc.w	11a74 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x50c>
   1170a:	e7ff      	b.n	1170c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1a4>
   1170c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1170e:	283e      	cmp	r0, #62	; 0x3e
   11710:	f200 81bc 	bhi.w	11a8c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x524>
   11714:	e7ff      	b.n	11716 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1ae>
   11716:	f644 200a 	movw	r0, #18954	; 0x4a0a
   1171a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1171e:	9916      	ldr	r1, [sp, #88]	; 0x58
   11720:	5c40      	ldrb	r0, [r0, r1]
   11722:	4602      	mov	r2, r0
   11724:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
   11728:	9818      	ldr	r0, [sp, #96]	; 0x60
   1172a:	0203      	lsls	r3, r0, #8
   1172c:	9215      	str	r2, [sp, #84]	; 0x54
   1172e:	9314      	str	r3, [sp, #80]	; 0x50
   11730:	e7ff      	b.n	11732 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1ca>
   11732:	981f      	ldr	r0, [sp, #124]	; 0x7c
   11734:	2809      	cmp	r0, #9
   11736:	f200 81b2 	bhi.w	11a9e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x536>
   1173a:	e7ff      	b.n	1173c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1d4>
   1173c:	9814      	ldr	r0, [sp, #80]	; 0x50
   1173e:	9915      	ldr	r1, [sp, #84]	; 0x54
   11740:	ea40 0201 	orr.w	r2, r0, r1
   11744:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11746:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
   1174a:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
   1174e:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   11750:	fba2 2e0c 	umull	r2, lr, r2, ip
   11754:	f1be 0f00 	cmp.w	lr, #0
   11758:	9213      	str	r2, [sp, #76]	; 0x4c
   1175a:	f040 81a9 	bne.w	11ab0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x548>
   1175e:	e7ff      	b.n	11760 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1f8>
   11760:	9813      	ldr	r0, [sp, #76]	; 0x4c
   11762:	1d41      	adds	r1, r0, #5
   11764:	460a      	mov	r2, r1
   11766:	4281      	cmp	r1, r0
   11768:	9212      	str	r2, [sp, #72]	; 0x48
   1176a:	f0c0 81ad 	bcc.w	11ac8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x560>
   1176e:	e7ff      	b.n	11770 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x208>
   11770:	9812      	ldr	r0, [sp, #72]	; 0x48
   11772:	283e      	cmp	r0, #62	; 0x3e
   11774:	f200 81b4 	bhi.w	11ae0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x578>
   11778:	e7ff      	b.n	1177a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x212>
   1177a:	f644 200a 	movw	r0, #18954	; 0x4a0a
   1177e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11782:	9912      	ldr	r1, [sp, #72]	; 0x48
   11784:	5c40      	ldrb	r0, [r0, r1]
   11786:	f000 000f 	and.w	r0, r0, #15
   1178a:	4602      	mov	r2, r0
   1178c:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
   11790:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
   11792:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   11794:	fba0 0c03 	umull	r0, ip, r0, r3
   11798:	f1bc 0f00 	cmp.w	ip, #0
   1179c:	9211      	str	r2, [sp, #68]	; 0x44
   1179e:	9010      	str	r0, [sp, #64]	; 0x40
   117a0:	f040 81a7 	bne.w	11af2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x58a>
   117a4:	e7ff      	b.n	117a6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x23e>
   117a6:	9810      	ldr	r0, [sp, #64]	; 0x40
   117a8:	1d81      	adds	r1, r0, #6
   117aa:	460a      	mov	r2, r1
   117ac:	4281      	cmp	r1, r0
   117ae:	920f      	str	r2, [sp, #60]	; 0x3c
   117b0:	f0c0 81ab 	bcc.w	11b0a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5a2>
   117b4:	e7ff      	b.n	117b6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x24e>
   117b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
   117b8:	283e      	cmp	r0, #62	; 0x3e
   117ba:	f200 81b2 	bhi.w	11b22 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5ba>
   117be:	e7ff      	b.n	117c0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x258>
   117c0:	f644 200a 	movw	r0, #18954	; 0x4a0a
   117c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   117c8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   117ca:	5c40      	ldrb	r0, [r0, r1]
   117cc:	4602      	mov	r2, r0
   117ce:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
   117d2:	9811      	ldr	r0, [sp, #68]	; 0x44
   117d4:	0203      	lsls	r3, r0, #8
   117d6:	920e      	str	r2, [sp, #56]	; 0x38
   117d8:	930d      	str	r3, [sp, #52]	; 0x34
   117da:	e7ff      	b.n	117dc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x274>
   117dc:	981f      	ldr	r0, [sp, #124]	; 0x7c
   117de:	2809      	cmp	r0, #9
   117e0:	f200 81a8 	bhi.w	11b34 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5cc>
   117e4:	e7ff      	b.n	117e6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x27e>
   117e6:	9826      	ldr	r0, [sp, #152]	; 0x98
   117e8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   117ea:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   117ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   117f0:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   117f4:	ea43 0e0c 	orr.w	lr, r3, ip
   117f8:	f8a2 e002 	strh.w	lr, [r2, #2]
   117fc:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
   117fe:	fba2 2e01 	umull	r2, lr, r2, r1
   11802:	f1be 0f00 	cmp.w	lr, #0
   11806:	920c      	str	r2, [sp, #48]	; 0x30
   11808:	f040 819d 	bne.w	11b46 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5de>
   1180c:	e7ff      	b.n	1180e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2a6>
   1180e:	980c      	ldr	r0, [sp, #48]	; 0x30
   11810:	1cc1      	adds	r1, r0, #3
   11812:	460a      	mov	r2, r1
   11814:	4281      	cmp	r1, r0
   11816:	920b      	str	r2, [sp, #44]	; 0x2c
   11818:	f0c0 81a1 	bcc.w	11b5e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5f6>
   1181c:	e7ff      	b.n	1181e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2b6>
   1181e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11820:	283e      	cmp	r0, #62	; 0x3e
   11822:	f200 81a8 	bhi.w	11b76 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x60e>
   11826:	e7ff      	b.n	11828 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2c0>
   11828:	f644 200a 	movw	r0, #18954	; 0x4a0a
   1182c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11830:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11832:	5c40      	ldrb	r0, [r0, r1]
   11834:	0980      	lsrs	r0, r0, #6
   11836:	900a      	str	r0, [sp, #40]	; 0x28
   11838:	e7ff      	b.n	1183a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2d2>
        data.touches[i].action =
   1183a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1183c:	2809      	cmp	r0, #9
   1183e:	f200 81a3 	bhi.w	11b88 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x620>
   11842:	e7ff      	b.n	11844 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2dc>
   11844:	9826      	ldr	r0, [sp, #152]	; 0x98
   11846:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11848:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   1184c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1184e:	7113      	strb	r3, [r2, #4]
   11850:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
   11852:	fba2 2c01 	umull	r2, ip, r2, r1
   11856:	f1bc 0f00 	cmp.w	ip, #0
   1185a:	9209      	str	r2, [sp, #36]	; 0x24
   1185c:	f040 819d 	bne.w	11b9a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x632>
   11860:	e7ff      	b.n	11862 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2fa>
   11862:	9809      	ldr	r0, [sp, #36]	; 0x24
   11864:	1d41      	adds	r1, r0, #5
   11866:	460a      	mov	r2, r1
   11868:	4281      	cmp	r1, r0
   1186a:	9208      	str	r2, [sp, #32]
   1186c:	f0c0 81a1 	bcc.w	11bb2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x64a>
   11870:	e7ff      	b.n	11872 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x30a>
   11872:	9808      	ldr	r0, [sp, #32]
   11874:	283e      	cmp	r0, #62	; 0x3e
   11876:	f200 81a8 	bhi.w	11bca <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x662>
   1187a:	e7ff      	b.n	1187c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x314>
   1187c:	f644 200a 	movw	r0, #18954	; 0x4a0a
   11880:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11884:	9908      	ldr	r1, [sp, #32]
   11886:	5c40      	ldrb	r0, [r0, r1]
   11888:	0900      	lsrs	r0, r0, #4
   1188a:	9007      	str	r0, [sp, #28]
   1188c:	e7ff      	b.n	1188e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x326>
        data.touches[i].finger =
   1188e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   11890:	2809      	cmp	r0, #9
   11892:	f200 81a3 	bhi.w	11bdc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x674>
   11896:	e7ff      	b.n	11898 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x330>
   11898:	9826      	ldr	r0, [sp, #152]	; 0x98
   1189a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1189c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   118a0:	9b07      	ldr	r3, [sp, #28]
   118a2:	7153      	strb	r3, [r2, #5]
   118a4:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
   118a6:	fba2 2c01 	umull	r2, ip, r2, r1
   118aa:	f1bc 0f00 	cmp.w	ip, #0
   118ae:	9206      	str	r2, [sp, #24]
   118b0:	f040 819d 	bne.w	11bee <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x686>
   118b4:	e7ff      	b.n	118b6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x34e>
   118b6:	9806      	ldr	r0, [sp, #24]
   118b8:	1dc1      	adds	r1, r0, #7
   118ba:	460a      	mov	r2, r1
   118bc:	4281      	cmp	r1, r0
   118be:	9205      	str	r2, [sp, #20]
   118c0:	f0c0 81a1 	bcc.w	11c06 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x69e>
   118c4:	e7ff      	b.n	118c6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x35e>
   118c6:	9805      	ldr	r0, [sp, #20]
   118c8:	283e      	cmp	r0, #62	; 0x3e
   118ca:	f200 81a8 	bhi.w	11c1e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6b6>
   118ce:	e7ff      	b.n	118d0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x368>
   118d0:	f644 200a 	movw	r0, #18954	; 0x4a0a
   118d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   118d8:	9905      	ldr	r1, [sp, #20]
   118da:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
   118dc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   118de:	2a09      	cmp	r2, #9
   118e0:	9004      	str	r0, [sp, #16]
   118e2:	f200 81a5 	bhi.w	11c30 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6c8>
   118e6:	e7ff      	b.n	118e8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x380>
   118e8:	9826      	ldr	r0, [sp, #152]	; 0x98
   118ea:	991f      	ldr	r1, [sp, #124]	; 0x7c
   118ec:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   118f0:	9b04      	ldr	r3, [sp, #16]
   118f2:	7193      	strb	r3, [r2, #6]
   118f4:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
   118f6:	fba2 2c01 	umull	r2, ip, r2, r1
   118fa:	f1bc 0f00 	cmp.w	ip, #0
   118fe:	9203      	str	r2, [sp, #12]
   11900:	f040 819f 	bne.w	11c42 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6da>
   11904:	e7ff      	b.n	11906 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x39e>
   11906:	9803      	ldr	r0, [sp, #12]
   11908:	f100 0108 	add.w	r1, r0, #8
   1190c:	460a      	mov	r2, r1
   1190e:	4281      	cmp	r1, r0
   11910:	9202      	str	r2, [sp, #8]
   11912:	f0c0 81a2 	bcc.w	11c5a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6f2>
   11916:	e7ff      	b.n	11918 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3b0>
   11918:	9802      	ldr	r0, [sp, #8]
   1191a:	283e      	cmp	r0, #62	; 0x3e
   1191c:	f200 81a9 	bhi.w	11c72 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x70a>
   11920:	e7ff      	b.n	11922 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3ba>
   11922:	f644 200a 	movw	r0, #18954	; 0x4a0a
   11926:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1192a:	9902      	ldr	r1, [sp, #8]
   1192c:	5c40      	ldrb	r0, [r0, r1]
   1192e:	0900      	lsrs	r0, r0, #4
   11930:	9001      	str	r0, [sp, #4]
   11932:	e7ff      	b.n	11934 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3cc>
        data.touches[i].area =
   11934:	981f      	ldr	r0, [sp, #124]	; 0x7c
   11936:	2809      	cmp	r0, #9
   11938:	f200 81a4 	bhi.w	11c84 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x71c>
   1193c:	e7ff      	b.n	1193e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3d6>
   1193e:	9826      	ldr	r0, [sp, #152]	; 0x98
   11940:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11942:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   11946:	9b01      	ldr	r3, [sp, #4]
   11948:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
   1194a:	290a      	cmp	r1, #10
   1194c:	d326      	bcc.n	1199c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x434>
   1194e:	e1a2      	b.n	11c96 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x72e>
   11950:	2001      	movs	r0, #1
   11952:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
   11956:	e009      	b.n	1196c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x404>
   11958:	2000      	movs	r0, #0
   1195a:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
   1195e:	e005      	b.n	1196c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x404>
            && (data.point_num == 0) {
   11960:	9826      	ldr	r0, [sp, #152]	; 0x98
   11962:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
   11966:	2900      	cmp	r1, #0
   11968:	d0f2      	beq.n	11950 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3e8>
   1196a:	e7f5      	b.n	11958 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3f0>
   1196c:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
   11970:	07c0      	lsls	r0, r0, #31
   11972:	2800      	cmp	r0, #0
   11974:	d123      	bne.n	119be <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x456>
   11976:	e021      	b.n	119bc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x454>
   11978:	2001      	movs	r0, #1
   1197a:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
   1197e:	e007      	b.n	11990 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x428>
   11980:	2000      	movs	r0, #0
   11982:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
   11986:	e003      	b.n	11990 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x428>
   11988:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1198a:	280a      	cmp	r0, #10
   1198c:	d30e      	bcc.n	119ac <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x444>
   1198e:	e18b      	b.n	11ca8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x740>
   11990:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
   11994:	07c0      	lsls	r0, r0, #31
   11996:	2800      	cmp	r0, #0
   11998:	d1e2      	bne.n	11960 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3f8>
   1199a:	e7dd      	b.n	11958 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3f0>
   1199c:	9826      	ldr	r0, [sp, #152]	; 0x98
   1199e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   119a0:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   119a4:	7912      	ldrb	r2, [r2, #4]
   119a6:	2a00      	cmp	r2, #0
   119a8:	d0e6      	beq.n	11978 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x410>
   119aa:	e7ed      	b.n	11988 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x420>
   119ac:	9826      	ldr	r0, [sp, #152]	; 0x98
   119ae:	991f      	ldr	r1, [sp, #124]	; 0x7c
   119b0:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   119b4:	7912      	ldrb	r2, [r2, #4]
   119b6:	2a02      	cmp	r2, #2
   119b8:	d0de      	beq.n	11978 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x410>
   119ba:	e7e1      	b.n	11980 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
   119bc:	e626      	b.n	1160c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xa4>
            break;
   119be:	e66b      	b.n	11698 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
   119c0:	f247 40d0 	movw	r0, #29904	; 0x74d0
   119c4:	f2c0 0002 	movt	r0, #2
   119c8:	f247 42c0 	movw	r2, #29888	; 0x74c0
   119cc:	f2c0 0202 	movt	r2, #2
   119d0:	2121      	movs	r1, #33	; 0x21
   119d2:	f006 fe63 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   119d6:	defe      	udf	#254	; 0xfe
   119d8:	f247 5010 	movw	r0, #29968	; 0x7510
   119dc:	f2c0 0002 	movt	r0, #2
   119e0:	f247 42f4 	movw	r2, #29940	; 0x74f4
   119e4:	f2c0 0202 	movt	r2, #2
   119e8:	211c      	movs	r1, #28
   119ea:	f006 fe57 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   119ee:	defe      	udf	#254	; 0xfe
   119f0:	f247 502c 	movw	r0, #29996	; 0x752c
   119f4:	f2c0 0002 	movt	r0, #2
   119f8:	223f      	movs	r2, #63	; 0x3f
   119fa:	991d      	ldr	r1, [sp, #116]	; 0x74
   119fc:	f006 fe64 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11a00:	defe      	udf	#254	; 0xfe
        data.count += 1;
   11a02:	f247 5010 	movw	r0, #29968	; 0x7510
   11a06:	f2c0 0002 	movt	r0, #2
   11a0a:	f247 523c 	movw	r2, #30012	; 0x753c
   11a0e:	f2c0 0202 	movt	r2, #2
   11a12:	211c      	movs	r1, #28
   11a14:	f006 fe42 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11a18:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   11a1a:	f247 40d0 	movw	r0, #29904	; 0x74d0
   11a1e:	f2c0 0002 	movt	r0, #2
   11a22:	f247 524c 	movw	r2, #30028	; 0x754c
   11a26:	f2c0 0202 	movt	r2, #2
   11a2a:	2121      	movs	r1, #33	; 0x21
   11a2c:	f006 fe36 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11a30:	defe      	udf	#254	; 0xfe
   11a32:	f247 5010 	movw	r0, #29968	; 0x7510
   11a36:	f2c0 0002 	movt	r0, #2
   11a3a:	f247 525c 	movw	r2, #30044	; 0x755c
   11a3e:	f2c0 0202 	movt	r2, #2
   11a42:	211c      	movs	r1, #28
   11a44:	f006 fe2a 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11a48:	defe      	udf	#254	; 0xfe
   11a4a:	f247 506c 	movw	r0, #30060	; 0x756c
   11a4e:	f2c0 0002 	movt	r0, #2
   11a52:	223f      	movs	r2, #63	; 0x3f
   11a54:	9919      	ldr	r1, [sp, #100]	; 0x64
   11a56:	f006 fe37 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11a5a:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
   11a5c:	f247 40d0 	movw	r0, #29904	; 0x74d0
   11a60:	f2c0 0002 	movt	r0, #2
   11a64:	f247 527c 	movw	r2, #30076	; 0x757c
   11a68:	f2c0 0202 	movt	r2, #2
   11a6c:	2121      	movs	r1, #33	; 0x21
   11a6e:	f006 fe15 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11a72:	defe      	udf	#254	; 0xfe
   11a74:	f247 5010 	movw	r0, #29968	; 0x7510
   11a78:	f2c0 0002 	movt	r0, #2
   11a7c:	f247 528c 	movw	r2, #30092	; 0x758c
   11a80:	f2c0 0202 	movt	r2, #2
   11a84:	211c      	movs	r1, #28
   11a86:	f006 fe09 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11a8a:	defe      	udf	#254	; 0xfe
   11a8c:	f247 509c 	movw	r0, #30108	; 0x759c
   11a90:	f2c0 0002 	movt	r0, #2
   11a94:	223f      	movs	r2, #63	; 0x3f
   11a96:	9916      	ldr	r1, [sp, #88]	; 0x58
   11a98:	f006 fe16 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11a9c:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
   11a9e:	f247 50ac 	movw	r0, #30124	; 0x75ac
   11aa2:	f2c0 0002 	movt	r0, #2
   11aa6:	220a      	movs	r2, #10
   11aa8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11aaa:	f006 fe0d 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11aae:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   11ab0:	f247 40d0 	movw	r0, #29904	; 0x74d0
   11ab4:	f2c0 0002 	movt	r0, #2
   11ab8:	f247 52bc 	movw	r2, #30140	; 0x75bc
   11abc:	f2c0 0202 	movt	r2, #2
   11ac0:	2121      	movs	r1, #33	; 0x21
   11ac2:	f006 fdeb 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11ac6:	defe      	udf	#254	; 0xfe
   11ac8:	f247 5010 	movw	r0, #29968	; 0x7510
   11acc:	f2c0 0002 	movt	r0, #2
   11ad0:	f247 52cc 	movw	r2, #30156	; 0x75cc
   11ad4:	f2c0 0202 	movt	r2, #2
   11ad8:	211c      	movs	r1, #28
   11ada:	f006 fddf 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11ade:	defe      	udf	#254	; 0xfe
   11ae0:	f247 50dc 	movw	r0, #30172	; 0x75dc
   11ae4:	f2c0 0002 	movt	r0, #2
   11ae8:	223f      	movs	r2, #63	; 0x3f
   11aea:	9912      	ldr	r1, [sp, #72]	; 0x48
   11aec:	f006 fdec 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11af0:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
   11af2:	f247 40d0 	movw	r0, #29904	; 0x74d0
   11af6:	f2c0 0002 	movt	r0, #2
   11afa:	f247 52ec 	movw	r2, #30188	; 0x75ec
   11afe:	f2c0 0202 	movt	r2, #2
   11b02:	2121      	movs	r1, #33	; 0x21
   11b04:	f006 fdca 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11b08:	defe      	udf	#254	; 0xfe
   11b0a:	f247 5010 	movw	r0, #29968	; 0x7510
   11b0e:	f2c0 0002 	movt	r0, #2
   11b12:	f247 52fc 	movw	r2, #30204	; 0x75fc
   11b16:	f2c0 0202 	movt	r2, #2
   11b1a:	211c      	movs	r1, #28
   11b1c:	f006 fdbe 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11b20:	defe      	udf	#254	; 0xfe
   11b22:	f247 600c 	movw	r0, #30220	; 0x760c
   11b26:	f2c0 0002 	movt	r0, #2
   11b2a:	223f      	movs	r2, #63	; 0x3f
   11b2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11b2e:	f006 fdcb 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11b32:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
   11b34:	f247 601c 	movw	r0, #30236	; 0x761c
   11b38:	f2c0 0002 	movt	r0, #2
   11b3c:	220a      	movs	r2, #10
   11b3e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11b40:	f006 fdc2 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11b44:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
   11b46:	f247 40d0 	movw	r0, #29904	; 0x74d0
   11b4a:	f2c0 0002 	movt	r0, #2
   11b4e:	f247 622c 	movw	r2, #30252	; 0x762c
   11b52:	f2c0 0202 	movt	r2, #2
   11b56:	2121      	movs	r1, #33	; 0x21
   11b58:	f006 fda0 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11b5c:	defe      	udf	#254	; 0xfe
   11b5e:	f247 5010 	movw	r0, #29968	; 0x7510
   11b62:	f2c0 0002 	movt	r0, #2
   11b66:	f247 623c 	movw	r2, #30268	; 0x763c
   11b6a:	f2c0 0202 	movt	r2, #2
   11b6e:	211c      	movs	r1, #28
   11b70:	f006 fd94 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11b74:	defe      	udf	#254	; 0xfe
   11b76:	f247 604c 	movw	r0, #30284	; 0x764c
   11b7a:	f2c0 0002 	movt	r0, #2
   11b7e:	223f      	movs	r2, #63	; 0x3f
   11b80:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11b82:	f006 fda1 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11b86:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
   11b88:	f247 605c 	movw	r0, #30300	; 0x765c
   11b8c:	f2c0 0002 	movt	r0, #2
   11b90:	220a      	movs	r2, #10
   11b92:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11b94:	f006 fd98 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11b98:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
   11b9a:	f247 40d0 	movw	r0, #29904	; 0x74d0
   11b9e:	f2c0 0002 	movt	r0, #2
   11ba2:	f247 626c 	movw	r2, #30316	; 0x766c
   11ba6:	f2c0 0202 	movt	r2, #2
   11baa:	2121      	movs	r1, #33	; 0x21
   11bac:	f006 fd76 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11bb0:	defe      	udf	#254	; 0xfe
   11bb2:	f247 5010 	movw	r0, #29968	; 0x7510
   11bb6:	f2c0 0002 	movt	r0, #2
   11bba:	f247 627c 	movw	r2, #30332	; 0x767c
   11bbe:	f2c0 0202 	movt	r2, #2
   11bc2:	211c      	movs	r1, #28
   11bc4:	f006 fd6a 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11bc8:	defe      	udf	#254	; 0xfe
   11bca:	f247 608c 	movw	r0, #30348	; 0x768c
   11bce:	f2c0 0002 	movt	r0, #2
   11bd2:	223f      	movs	r2, #63	; 0x3f
   11bd4:	9908      	ldr	r1, [sp, #32]
   11bd6:	f006 fd77 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11bda:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
   11bdc:	f247 609c 	movw	r0, #30364	; 0x769c
   11be0:	f2c0 0002 	movt	r0, #2
   11be4:	220a      	movs	r2, #10
   11be6:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11be8:	f006 fd6e 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11bec:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
   11bee:	f247 40d0 	movw	r0, #29904	; 0x74d0
   11bf2:	f2c0 0002 	movt	r0, #2
   11bf6:	f247 62ac 	movw	r2, #30380	; 0x76ac
   11bfa:	f2c0 0202 	movt	r2, #2
   11bfe:	2121      	movs	r1, #33	; 0x21
   11c00:	f006 fd4c 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11c04:	defe      	udf	#254	; 0xfe
   11c06:	f247 5010 	movw	r0, #29968	; 0x7510
   11c0a:	f2c0 0002 	movt	r0, #2
   11c0e:	f247 62bc 	movw	r2, #30396	; 0x76bc
   11c12:	f2c0 0202 	movt	r2, #2
   11c16:	211c      	movs	r1, #28
   11c18:	f006 fd40 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11c1c:	defe      	udf	#254	; 0xfe
   11c1e:	f247 60cc 	movw	r0, #30412	; 0x76cc
   11c22:	f2c0 0002 	movt	r0, #2
   11c26:	223f      	movs	r2, #63	; 0x3f
   11c28:	9905      	ldr	r1, [sp, #20]
   11c2a:	f006 fd4d 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11c2e:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
   11c30:	f247 60dc 	movw	r0, #30428	; 0x76dc
   11c34:	f2c0 0002 	movt	r0, #2
   11c38:	220a      	movs	r2, #10
   11c3a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11c3c:	f006 fd44 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11c40:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
   11c42:	f247 40d0 	movw	r0, #29904	; 0x74d0
   11c46:	f2c0 0002 	movt	r0, #2
   11c4a:	f247 62ec 	movw	r2, #30444	; 0x76ec
   11c4e:	f2c0 0202 	movt	r2, #2
   11c52:	2121      	movs	r1, #33	; 0x21
   11c54:	f006 fd22 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11c58:	defe      	udf	#254	; 0xfe
   11c5a:	f247 5010 	movw	r0, #29968	; 0x7510
   11c5e:	f2c0 0002 	movt	r0, #2
   11c62:	f247 62fc 	movw	r2, #30460	; 0x76fc
   11c66:	f2c0 0202 	movt	r2, #2
   11c6a:	211c      	movs	r1, #28
   11c6c:	f006 fd16 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11c70:	defe      	udf	#254	; 0xfe
   11c72:	f247 700c 	movw	r0, #30476	; 0x770c
   11c76:	f2c0 0002 	movt	r0, #2
   11c7a:	223f      	movs	r2, #63	; 0x3f
   11c7c:	9902      	ldr	r1, [sp, #8]
   11c7e:	f006 fd23 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11c82:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
   11c84:	f247 701c 	movw	r0, #30492	; 0x771c
   11c88:	f2c0 0002 	movt	r0, #2
   11c8c:	220a      	movs	r2, #10
   11c8e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11c90:	f006 fd1a 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11c94:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
   11c96:	f247 702c 	movw	r0, #30508	; 0x772c
   11c9a:	f2c0 0002 	movt	r0, #2
   11c9e:	220a      	movs	r2, #10
   11ca0:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11ca2:	f006 fd11 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11ca6:	defe      	udf	#254	; 0xfe
   11ca8:	f247 703c 	movw	r0, #30524	; 0x773c
   11cac:	f2c0 0002 	movt	r0, #2
   11cb0:	220a      	movs	r2, #10
   11cb2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   11cb4:	f006 fd08 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   11cb8:	defe      	udf	#254	; 0xfe

00011cba <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
   11cba:	b5b0      	push	{r4, r5, r7, lr}
   11cbc:	b094      	sub	sp, #80	; 0x50
   11cbe:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
   11cc2:	4696      	mov	lr, r2
   11cc4:	460c      	mov	r4, r1
   11cc6:	4605      	mov	r5, r0
   11cc8:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
   11ccc:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
   11cd0:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
   11cd4:	9310      	str	r3, [sp, #64]	; 0x40
   11cd6:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
   11cda:	4618      	mov	r0, r3
   11cdc:	4661      	mov	r1, ip
   11cde:	930d      	str	r3, [sp, #52]	; 0x34
   11ce0:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   11ce4:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   11ce8:	940a      	str	r4, [sp, #40]	; 0x28
   11cea:	9509      	str	r5, [sp, #36]	; 0x24
   11cec:	f000 ff32 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   11cf0:	9008      	str	r0, [sp, #32]
   11cf2:	e7ff      	b.n	11cf4 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x3a>
   11cf4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11cf6:	b2c1      	uxtb	r1, r0
   11cf8:	9a08      	ldr	r2, [sp, #32]
   11cfa:	428a      	cmp	r2, r1
   11cfc:	d30d      	bcc.n	11d1a <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x60>
   11cfe:	e7ff      	b.n	11d00 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   11d00:	980a      	ldr	r0, [sp, #40]	; 0x28
   11d02:	b2c1      	uxtb	r1, r0
   11d04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11d06:	fa51 f182 	uxtab	r1, r1, r2
   11d0a:	b2cb      	uxtb	r3, r1
   11d0c:	468c      	mov	ip, r1
   11d0e:	428b      	cmp	r3, r1
   11d10:	f8cd c01c 	str.w	ip, [sp, #28]
   11d14:	f040 8092 	bne.w	11e3c <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x182>
   11d18:	e00b      	b.n	11d32 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
   11d1a:	f247 704c 	movw	r0, #30540	; 0x774c
   11d1e:	f2c0 0002 	movt	r0, #2
   11d22:	f247 7254 	movw	r2, #30548	; 0x7754
   11d26:	f2c0 0202 	movt	r2, #2
   11d2a:	2107      	movs	r1, #7
   11d2c:	f006 fcb6 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11d30:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   11d32:	9807      	ldr	r0, [sp, #28]
   11d34:	b241      	sxtb	r1, r0
   11d36:	2900      	cmp	r1, #0
   11d38:	d411      	bmi.n	11d5e <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0xa4>
   11d3a:	e7ff      	b.n	11d3c <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
   11d3c:	f644 2064 	movw	r0, #19044	; 0x4a64
   11d40:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11d44:	990a      	ldr	r1, [sp, #40]	; 0x28
   11d46:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
   11d48:	f644 225c 	movw	r2, #19036	; 0x4a5c
   11d4c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11d52:	7013      	strb	r3, [r2, #0]
   11d54:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
   11d56:	f000 fefd 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   11d5a:	9006      	str	r0, [sp, #24]
   11d5c:	e00b      	b.n	11d76 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   11d5e:	f247 4054 	movw	r0, #29780	; 0x7454
   11d62:	f2c0 0002 	movt	r0, #2
   11d66:	f247 7274 	movw	r2, #30580	; 0x7774
   11d6a:	f2c0 0202 	movt	r2, #2
   11d6e:	2108      	movs	r1, #8
   11d70:	f006 fc94 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11d74:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
   11d76:	f644 205c 	movw	r0, #19036	; 0x4a5c
   11d7a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11d7e:	9906      	ldr	r1, [sp, #24]
   11d80:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
   11d82:	f644 2064 	movw	r0, #19044	; 0x4a64
   11d86:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11d8a:	2101      	movs	r1, #1
   11d8c:	f000 fecb 	bl	12b26 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11d90:	9005      	str	r0, [sp, #20]
   11d92:	e7ff      	b.n	11d94 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0xda>
   11d94:	f644 205c 	movw	r0, #19036	; 0x4a5c
   11d98:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11d9c:	9905      	ldr	r1, [sp, #20]
   11d9e:	6041      	str	r1, [r0, #4]
   11da0:	2201      	movs	r2, #1
   11da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   11da6:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
   11daa:	9004      	str	r0, [sp, #16]
   11dac:	4610      	mov	r0, r2
   11dae:	9904      	ldr	r1, [sp, #16]
   11db0:	461a      	mov	r2, r3
   11db2:	4663      	mov	r3, ip
   11db4:	f008 ff60 	bl	1ac78 <hal_i2c_master_write>
   11db8:	9012      	str	r0, [sp, #72]	; 0x48
   11dba:	e7ff      	b.n	11dbc <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
   11dbc:	f644 2064 	movw	r0, #19044	; 0x4a64
   11dc0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11dc4:	2100      	movs	r1, #0
   11dc6:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
   11dc8:	f644 205c 	movw	r0, #19036	; 0x4a5c
   11dcc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11dd0:	9909      	ldr	r1, [sp, #36]	; 0x24
   11dd2:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
   11dd4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11dd6:	b2d3      	uxtb	r3, r2
   11dd8:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
   11dda:	980d      	ldr	r0, [sp, #52]	; 0x34
   11ddc:	990c      	ldr	r1, [sp, #48]	; 0x30
   11dde:	f000 fea2 	bl	12b26 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11de2:	9003      	str	r0, [sp, #12]
   11de4:	e7ff      	b.n	11de6 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x12c>
   11de6:	f644 205c 	movw	r0, #19036	; 0x4a5c
   11dea:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11dee:	9903      	ldr	r1, [sp, #12]
   11df0:	6041      	str	r1, [r0, #4]
   11df2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11df6:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
   11df8:	9002      	str	r0, [sp, #8]
   11dfa:	4618      	mov	r0, r3
   11dfc:	9902      	ldr	r1, [sp, #8]
   11dfe:	f008 ffcf 	bl	1ada0 <hal_i2c_master_read>
   11e02:	4601      	mov	r1, r0
   11e04:	9013      	str	r0, [sp, #76]	; 0x4c
   11e06:	9101      	str	r1, [sp, #4]
   11e08:	e7ff      	b.n	11e0a <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
   11e0a:	9801      	ldr	r0, [sp, #4]
   11e0c:	2804      	cmp	r0, #4
   11e0e:	d005      	beq.n	11e1c <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x162>
   11e10:	e7ff      	b.n	11e12 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x158>
   11e12:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
   11e14:	900e      	str	r0, [sp, #56]	; 0x38
   11e16:	2001      	movs	r0, #1
   11e18:	900e      	str	r0, [sp, #56]	; 0x38
}
   11e1a:	e00c      	b.n	11e36 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x17c>
        console::print("i2c fail\n"); ////
   11e1c:	f247 7084 	movw	r0, #30596	; 0x7784
   11e20:	f2c0 0002 	movt	r0, #2
   11e24:	2109      	movs	r1, #9
   11e26:	f7f7 f967 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
   11e2a:	e7ff      	b.n	11e2c <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x172>
   11e2c:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
   11e2e:	900e      	str	r0, [sp, #56]	; 0x38
   11e30:	2001      	movs	r0, #1
   11e32:	900e      	str	r0, [sp, #56]	; 0x38
   11e34:	e7ff      	b.n	11e36 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x17c>
}
   11e36:	980e      	ldr	r0, [sp, #56]	; 0x38
   11e38:	b014      	add	sp, #80	; 0x50
   11e3a:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   11e3c:	f247 5010 	movw	r0, #29968	; 0x7510
   11e40:	f2c0 0002 	movt	r0, #2
   11e44:	f247 7264 	movw	r2, #30564	; 0x7764
   11e48:	f2c0 0202 	movt	r2, #2
   11e4c:	211c      	movs	r1, #28
   11e4e:	f006 fc25 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11e52:	defe      	udf	#254	; 0xfe

00011e54 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>:
    fn le(&self, other: &LevelFilter) -> bool {
   11e54:	b082      	sub	sp, #8
   11e56:	9000      	str	r0, [sp, #0]
   11e58:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   11e5a:	6800      	ldr	r0, [r0, #0]
   11e5c:	6809      	ldr	r1, [r1, #0]
   11e5e:	2200      	movs	r2, #0
   11e60:	4288      	cmp	r0, r1
   11e62:	bf98      	it	ls
   11e64:	2201      	movls	r2, #1
    }
   11e66:	4610      	mov	r0, r2
   11e68:	b002      	add	sp, #8
   11e6a:	4770      	bx	lr

00011e6c <_ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE>:
        item
    ).expect("draw blocks fail");
}

/// Draw the pixel colours to the display at the window from (sx,sy) to (ex,ey)
pub fn set_display_pixels<P: IntoIterator<Item = u16>>(sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
   11e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e6e:	b08d      	sub	sp, #52	; 0x34
   11e70:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   11e74:	469e      	mov	lr, r3
   11e76:	4614      	mov	r4, r2
   11e78:	460d      	mov	r5, r1
   11e7a:	4606      	mov	r6, r0
   11e7c:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   11e80:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
   11e84:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   11e88:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    unsafe { DISPLAY.set_pixels(sx, sy, ex, ey, colors) }
   11e8c:	466f      	mov	r7, sp
   11e8e:	f8c7 c004 	str.w	ip, [r7, #4]
   11e92:	603b      	str	r3, [r7, #0]
   11e94:	f240 1348 	movw	r3, #328	; 0x148
   11e98:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11e9c:	900a      	str	r0, [sp, #40]	; 0x28
   11e9e:	4618      	mov	r0, r3
   11ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11ea2:	9109      	str	r1, [sp, #36]	; 0x24
   11ea4:	4619      	mov	r1, r3
   11ea6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   11eaa:	9208      	str	r2, [sp, #32]
   11eac:	4662      	mov	r2, ip
   11eae:	9b08      	ldr	r3, [sp, #32]
   11eb0:	f8cd e01c 	str.w	lr, [sp, #28]
   11eb4:	9406      	str	r4, [sp, #24]
   11eb6:	9505      	str	r5, [sp, #20]
   11eb8:	9604      	str	r6, [sp, #16]
   11eba:	f005 fbe0 	bl	1767e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E>
   11ebe:	9003      	str	r0, [sp, #12]
   11ec0:	e7ff      	b.n	11ec2 <_ZN22piet_embedded_graphics7display18set_display_pixels17he48c5c43fd96ddebE+0x56>
}
   11ec2:	9803      	ldr	r0, [sp, #12]
   11ec4:	f000 0001 	and.w	r0, r0, #1
   11ec8:	b00d      	add	sp, #52	; 0x34
   11eca:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011ecc <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>:
   11ecc:	b510      	push	{r4, lr}
   11ece:	b088      	sub	sp, #32
   11ed0:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   11ed4:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   11ed8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   11eda:	9102      	str	r1, [sp, #8]
   11edc:	9203      	str	r2, [sp, #12]
   11ede:	9304      	str	r3, [sp, #16]
   11ee0:	9405      	str	r4, [sp, #20]
   11ee2:	f8cd e018 	str.w	lr, [sp, #24]
   11ee6:	f8cd c01c 	str.w	ip, [sp, #28]
   11eea:	f8cd e000 	str.w	lr, [sp]
   11eee:	f8cd c004 	str.w	ip, [sp, #4]
   11ef2:	6001      	str	r1, [r0, #0]
   11ef4:	6042      	str	r2, [r0, #4]
   11ef6:	9900      	ldr	r1, [sp, #0]
   11ef8:	9a01      	ldr	r2, [sp, #4]
   11efa:	6081      	str	r1, [r0, #8]
   11efc:	60c2      	str	r2, [r0, #12]
   11efe:	6103      	str	r3, [r0, #16]
   11f00:	6144      	str	r4, [r0, #20]
   11f02:	b008      	add	sp, #32
   11f04:	bd10      	pop	{r4, pc}

00011f06 <_ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE>:
   11f06:	b580      	push	{r7, lr}
   11f08:	b086      	sub	sp, #24
   11f0a:	f8dd c020 	ldr.w	ip, [sp, #32]
   11f0e:	9102      	str	r1, [sp, #8]
   11f10:	9203      	str	r2, [sp, #12]
   11f12:	9304      	str	r3, [sp, #16]
   11f14:	f8cd c014 	str.w	ip, [sp, #20]
   11f18:	f04f 0e00 	mov.w	lr, #0
   11f1c:	f8cd e004 	str.w	lr, [sp, #4]
   11f20:	f8cd e000 	str.w	lr, [sp]
   11f24:	f8cd e000 	str.w	lr, [sp]
   11f28:	6001      	str	r1, [r0, #0]
   11f2a:	6042      	str	r2, [r0, #4]
   11f2c:	9900      	ldr	r1, [sp, #0]
   11f2e:	9a01      	ldr	r2, [sp, #4]
   11f30:	6081      	str	r1, [r0, #8]
   11f32:	60c2      	str	r2, [r0, #12]
   11f34:	6103      	str	r3, [r0, #16]
   11f36:	f8c0 c014 	str.w	ip, [r0, #20]
   11f3a:	b006      	add	sp, #24
   11f3c:	bd80      	pop	{r7, pc}

00011f3e <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>:
   11f3e:	b580      	push	{r7, lr}
   11f40:	b086      	sub	sp, #24
   11f42:	460a      	mov	r2, r1
   11f44:	9004      	str	r0, [sp, #16]
   11f46:	f88d 1017 	strb.w	r1, [sp, #23]
   11f4a:	9203      	str	r2, [sp, #12]
   11f4c:	f000 fe86 	bl	12c5c <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11f50:	9002      	str	r0, [sp, #8]
   11f52:	e7ff      	b.n	11f54 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE+0x16>
   11f54:	9802      	ldr	r0, [sp, #8]
   11f56:	9903      	ldr	r1, [sp, #12]
   11f58:	f000 fe98 	bl	12c8c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   11f5c:	9001      	str	r0, [sp, #4]
   11f5e:	e7ff      	b.n	11f60 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE+0x22>
   11f60:	9801      	ldr	r0, [sp, #4]
   11f62:	b006      	add	sp, #24
   11f64:	bd80      	pop	{r7, pc}

00011f66 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>:
   11f66:	b580      	push	{r7, lr}
   11f68:	b084      	sub	sp, #16
   11f6a:	4601      	mov	r1, r0
   11f6c:	f88d 000f 	strb.w	r0, [sp, #15]
   11f70:	9102      	str	r1, [sp, #8]
   11f72:	f005 fd7e 	bl	17a72 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h8e5f04233c93701aE>
   11f76:	9001      	str	r0, [sp, #4]
   11f78:	e7ff      	b.n	11f7a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E+0x14>
   11f7a:	9801      	ldr	r0, [sp, #4]
   11f7c:	b004      	add	sp, #16
   11f7e:	bd80      	pop	{r7, pc}

00011f80 <_ZN4core3mem4swap17h21afb25e2d195463E>:
   11f80:	b580      	push	{r7, lr}
   11f82:	b082      	sub	sp, #8
   11f84:	9000      	str	r0, [sp, #0]
   11f86:	9101      	str	r1, [sp, #4]
   11f88:	f005 fda6 	bl	17ad8 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E>
   11f8c:	e7ff      	b.n	11f8e <_ZN4core3mem4swap17h21afb25e2d195463E+0xe>
   11f8e:	b002      	add	sp, #8
   11f90:	bd80      	pop	{r7, pc}

00011f92 <_ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E>:
   11f92:	b580      	push	{r7, lr}
   11f94:	b084      	sub	sp, #16
   11f96:	9001      	str	r0, [sp, #4]
   11f98:	9102      	str	r1, [sp, #8]
   11f9a:	9801      	ldr	r0, [sp, #4]
   11f9c:	9902      	ldr	r1, [sp, #8]
   11f9e:	f000 f8f8 	bl	12192 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE>
   11fa2:	9000      	str	r0, [sp, #0]
   11fa4:	e7ff      	b.n	11fa6 <_ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E+0x14>
   11fa6:	9800      	ldr	r0, [sp, #0]
   11fa8:	b004      	add	sp, #16
   11faa:	bd80      	pop	{r7, pc}

00011fac <_ZN4core3ptr13drop_in_place17h63142b18dacbc787E>:
   11fac:	b081      	sub	sp, #4
   11fae:	9000      	str	r0, [sp, #0]
   11fb0:	b001      	add	sp, #4
   11fb2:	4770      	bx	lr

00011fb4 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E>:
   11fb4:	b580      	push	{r7, lr}
   11fb6:	b082      	sub	sp, #8
   11fb8:	9101      	str	r1, [sp, #4]
   11fba:	f000 f803 	bl	11fc4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E>
   11fbe:	e7ff      	b.n	11fc0 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E+0xc>
   11fc0:	b002      	add	sp, #8
   11fc2:	bd80      	pop	{r7, pc}

00011fc4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E>:
   11fc4:	b580      	push	{r7, lr}
   11fc6:	b0a0      	sub	sp, #128	; 0x80
   11fc8:	911c      	str	r1, [sp, #112]	; 0x70
   11fca:	9103      	str	r1, [sp, #12]
   11fcc:	9002      	str	r0, [sp, #8]
   11fce:	e7ff      	b.n	11fd0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc>
   11fd0:	9803      	ldr	r0, [sp, #12]
   11fd2:	68c1      	ldr	r1, [r0, #12]
   11fd4:	2901      	cmp	r1, #1
   11fd6:	d11e      	bne.n	12016 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x52>
   11fd8:	e7ff      	b.n	11fda <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x16>
   11fda:	9803      	ldr	r0, [sp, #12]
   11fdc:	f100 0110 	add.w	r1, r0, #16
   11fe0:	911e      	str	r1, [sp, #120]	; 0x78
   11fe2:	a804      	add	r0, sp, #16
   11fe4:	f7fd faa6 	bl	f534 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE>
   11fe8:	e7ff      	b.n	11fea <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x26>
   11fea:	9804      	ldr	r0, [sp, #16]
   11fec:	2801      	cmp	r0, #1
   11fee:	d001      	beq.n	11ff4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x30>
   11ff0:	e7ff      	b.n	11ff2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x2e>
   11ff2:	e00f      	b.n	12014 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x50>
   11ff4:	9804      	ldr	r0, [sp, #16]
   11ff6:	9905      	ldr	r1, [sp, #20]
   11ff8:	9a06      	ldr	r2, [sp, #24]
   11ffa:	9209      	str	r2, [sp, #36]	; 0x24
   11ffc:	9108      	str	r1, [sp, #32]
   11ffe:	9007      	str	r0, [sp, #28]
   12000:	9807      	ldr	r0, [sp, #28]
   12002:	9908      	ldr	r1, [sp, #32]
   12004:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12006:	9b02      	ldr	r3, [sp, #8]
   12008:	609a      	str	r2, [r3, #8]
   1200a:	6059      	str	r1, [r3, #4]
   1200c:	6018      	str	r0, [r3, #0]
   1200e:	e7ff      	b.n	12010 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x4c>
   12010:	b020      	add	sp, #128	; 0x80
   12012:	bd80      	pop	{r7, pc}
   12014:	e7ff      	b.n	12016 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x52>
   12016:	a80a      	add	r0, sp, #40	; 0x28
   12018:	9903      	ldr	r1, [sp, #12]
   1201a:	f7fd fa75 	bl	f508 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E>
   1201e:	e7ff      	b.n	12020 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x5c>
   12020:	980a      	ldr	r0, [sp, #40]	; 0x28
   12022:	2800      	cmp	r0, #0
   12024:	d012      	beq.n	1204c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x88>
   12026:	e7ff      	b.n	12028 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x64>
   12028:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1202a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1202c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1202e:	9211      	str	r2, [sp, #68]	; 0x44
   12030:	9110      	str	r1, [sp, #64]	; 0x40
   12032:	900f      	str	r0, [sp, #60]	; 0x3c
   12034:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12036:	9910      	ldr	r1, [sp, #64]	; 0x40
   12038:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1203a:	921b      	str	r2, [sp, #108]	; 0x6c
   1203c:	911a      	str	r1, [sp, #104]	; 0x68
   1203e:	9019      	str	r0, [sp, #100]	; 0x64
   12040:	a816      	add	r0, sp, #88	; 0x58
   12042:	a919      	add	r1, sp, #100	; 0x64
   12044:	f7fd fa59 	bl	f4fa <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc3726000bdb855aE>
   12048:	e028      	b.n	1209c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd8>
   1204a:	defe      	udf	#254	; 0xfe
   1204c:	9803      	ldr	r0, [sp, #12]
   1204e:	301c      	adds	r0, #28
   12050:	f7f6 fc98 	bl	8984 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E>
   12054:	9001      	str	r0, [sp, #4]
   12056:	e7ff      	b.n	12058 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x94>
   12058:	9801      	ldr	r0, [sp, #4]
   1205a:	f7f6 fccd 	bl	89f8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E>
   1205e:	900e      	str	r0, [sp, #56]	; 0x38
   12060:	e7ff      	b.n	12062 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x9e>
   12062:	980e      	ldr	r0, [sp, #56]	; 0x38
   12064:	fab0 f180 	clz	r1, r0
   12068:	0949      	lsrs	r1, r1, #5
   1206a:	2800      	cmp	r0, #0
   1206c:	d101      	bne.n	12072 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xae>
   1206e:	e7ff      	b.n	12070 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xac>
   12070:	e009      	b.n	12086 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc2>
   12072:	980e      	ldr	r0, [sp, #56]	; 0x38
   12074:	901f      	str	r0, [sp, #124]	; 0x7c
   12076:	9902      	ldr	r1, [sp, #8]
   12078:	9000      	str	r0, [sp, #0]
   1207a:	4608      	mov	r0, r1
   1207c:	9900      	ldr	r1, [sp, #0]
   1207e:	f7fd fa59 	bl	f534 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE>
   12082:	e00a      	b.n	1209a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd6>
   12084:	defe      	udf	#254	; 0xfe
   12086:	f003 f901 	bl	1528c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
   1208a:	e7ff      	b.n	1208c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc8>
   1208c:	9802      	ldr	r0, [sp, #8]
   1208e:	f7f6 fcae 	bl	89ee <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc4148eaa15af1e8eE>
   12092:	e7ff      	b.n	12094 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd0>
   12094:	e7ff      	b.n	12096 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd2>
   12096:	e7ff      	b.n	12098 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd4>
   12098:	e7ba      	b.n	12010 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x4c>
   1209a:	e7fc      	b.n	12096 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd2>
   1209c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1209e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   120a0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   120a2:	9215      	str	r2, [sp, #84]	; 0x54
   120a4:	9114      	str	r1, [sp, #80]	; 0x50
   120a6:	9013      	str	r0, [sp, #76]	; 0x4c
   120a8:	2001      	movs	r0, #1
   120aa:	9012      	str	r0, [sp, #72]	; 0x48
   120ac:	e7ff      	b.n	120ae <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xea>
   120ae:	9812      	ldr	r0, [sp, #72]	; 0x48
   120b0:	9913      	ldr	r1, [sp, #76]	; 0x4c
   120b2:	9a14      	ldr	r2, [sp, #80]	; 0x50
   120b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   120b6:	f8dd c00c 	ldr.w	ip, [sp, #12]
   120ba:	f8cc 3018 	str.w	r3, [ip, #24]
   120be:	f8cc 2014 	str.w	r2, [ip, #20]
   120c2:	f8cc 1010 	str.w	r1, [ip, #16]
   120c6:	f8cc 000c 	str.w	r0, [ip, #12]
   120ca:	980a      	ldr	r0, [sp, #40]	; 0x28
   120cc:	2801      	cmp	r0, #1
   120ce:	d101      	bne.n	120d4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x110>
   120d0:	e7ff      	b.n	120d2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x10e>
   120d2:	e77d      	b.n	11fd0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc>
   120d4:	e7fd      	b.n	120d2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x10e>

000120d6 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E>:
   120d6:	b5b0      	push	{r4, r5, r7, lr}
   120d8:	b090      	sub	sp, #64	; 0x40
   120da:	680a      	ldr	r2, [r1, #0]
   120dc:	684b      	ldr	r3, [r1, #4]
   120de:	6889      	ldr	r1, [r1, #8]
   120e0:	910f      	str	r1, [sp, #60]	; 0x3c
   120e2:	930e      	str	r3, [sp, #56]	; 0x38
   120e4:	920d      	str	r2, [sp, #52]	; 0x34
   120e6:	a902      	add	r1, sp, #8
   120e8:	aa0d      	add	r2, sp, #52	; 0x34
   120ea:	9001      	str	r0, [sp, #4]
   120ec:	4608      	mov	r0, r1
   120ee:	4611      	mov	r1, r2
   120f0:	f000 f80d 	bl	1210e <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h1051abda59747a6bE>
   120f4:	e7ff      	b.n	120f6 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E+0x20>
   120f6:	a802      	add	r0, sp, #8
   120f8:	9901      	ldr	r1, [sp, #4]
   120fa:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
   120fe:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
   12102:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
   12106:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
   1210a:	b010      	add	sp, #64	; 0x40
   1210c:	bdb0      	pop	{r4, r5, r7, pc}

0001210e <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h1051abda59747a6bE>:
   1210e:	b08b      	sub	sp, #44	; 0x2c
   12110:	680a      	ldr	r2, [r1, #0]
   12112:	684b      	ldr	r3, [r1, #4]
   12114:	6889      	ldr	r1, [r1, #8]
   12116:	9102      	str	r1, [sp, #8]
   12118:	9301      	str	r3, [sp, #4]
   1211a:	9200      	str	r2, [sp, #0]
   1211c:	2100      	movs	r1, #0
   1211e:	9103      	str	r1, [sp, #12]
   12120:	9107      	str	r1, [sp, #28]
   12122:	9900      	ldr	r1, [sp, #0]
   12124:	9a01      	ldr	r2, [sp, #4]
   12126:	9b02      	ldr	r3, [sp, #8]
   12128:	6083      	str	r3, [r0, #8]
   1212a:	6042      	str	r2, [r0, #4]
   1212c:	6001      	str	r1, [r0, #0]
   1212e:	9903      	ldr	r1, [sp, #12]
   12130:	9a04      	ldr	r2, [sp, #16]
   12132:	9b05      	ldr	r3, [sp, #20]
   12134:	f8dd c018 	ldr.w	ip, [sp, #24]
   12138:	f8c0 c018 	str.w	ip, [r0, #24]
   1213c:	6143      	str	r3, [r0, #20]
   1213e:	6102      	str	r2, [r0, #16]
   12140:	60c1      	str	r1, [r0, #12]
   12142:	9907      	ldr	r1, [sp, #28]
   12144:	9a08      	ldr	r2, [sp, #32]
   12146:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12148:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   1214c:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   12150:	6243      	str	r3, [r0, #36]	; 0x24
   12152:	6202      	str	r2, [r0, #32]
   12154:	61c1      	str	r1, [r0, #28]
   12156:	b00b      	add	sp, #44	; 0x2c
   12158:	4770      	bx	lr

0001215a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he2e30225e051e80dE>:
   1215a:	b5b0      	push	{r4, r5, r7, lr}
   1215c:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
   12160:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
   12164:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   12168:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   1216c:	bdb0      	pop	{r4, r5, r7, pc}

0001216e <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h27d5684c70bb37e8E>:
   1216e:	b084      	sub	sp, #16
   12170:	9000      	str	r0, [sp, #0]
   12172:	9101      	str	r1, [sp, #4]
   12174:	9102      	str	r1, [sp, #8]
   12176:	9003      	str	r0, [sp, #12]
   12178:	6802      	ldr	r2, [r0, #0]
   1217a:	6840      	ldr	r0, [r0, #4]
   1217c:	680b      	ldr	r3, [r1, #0]
   1217e:	6849      	ldr	r1, [r1, #4]
   12180:	4048      	eors	r0, r1
   12182:	ea82 0103 	eor.w	r1, r2, r3
   12186:	4308      	orrs	r0, r1
   12188:	fab0 f080 	clz	r0, r0
   1218c:	0940      	lsrs	r0, r0, #5
   1218e:	b004      	add	sp, #16
   12190:	4770      	bx	lr

00012192 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE>:
   12192:	b085      	sub	sp, #20
   12194:	9003      	str	r0, [sp, #12]
   12196:	9104      	str	r1, [sp, #16]
   12198:	7802      	ldrb	r2, [r0, #0]
   1219a:	780b      	ldrb	r3, [r1, #0]
   1219c:	429a      	cmp	r2, r3
   1219e:	9101      	str	r1, [sp, #4]
   121a0:	9000      	str	r0, [sp, #0]
   121a2:	d307      	bcc.n	121b4 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x22>
   121a4:	e7ff      	b.n	121a6 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x14>
   121a6:	9800      	ldr	r0, [sp, #0]
   121a8:	7801      	ldrb	r1, [r0, #0]
   121aa:	9a01      	ldr	r2, [sp, #4]
   121ac:	7813      	ldrb	r3, [r2, #0]
   121ae:	4299      	cmp	r1, r3
   121b0:	d008      	beq.n	121c4 <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x32>
   121b2:	e003      	b.n	121bc <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x2a>
   121b4:	20ff      	movs	r0, #255	; 0xff
   121b6:	f88d 000b 	strb.w	r0, [sp, #11]
   121ba:	e008      	b.n	121ce <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3c>
   121bc:	2001      	movs	r0, #1
   121be:	f88d 000b 	strb.w	r0, [sp, #11]
   121c2:	e003      	b.n	121cc <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3a>
   121c4:	2000      	movs	r0, #0
   121c6:	f88d 000b 	strb.w	r0, [sp, #11]
   121ca:	e7ff      	b.n	121cc <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3a>
   121cc:	e7ff      	b.n	121ce <_ZN4core3cmp5impls47_$LT$impl$u20$core..cmp..Ord$u20$for$u20$u8$GT$3cmp17h4f7b8004b1ffb98eE+0x3c>
   121ce:	f89d 000b 	ldrb.w	r0, [sp, #11]
   121d2:	b005      	add	sp, #20
   121d4:	4770      	bx	lr

000121d6 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h0340384168a45934E>:
   121d6:	b082      	sub	sp, #8
   121d8:	9000      	str	r0, [sp, #0]
   121da:	9101      	str	r1, [sp, #4]
   121dc:	7800      	ldrb	r0, [r0, #0]
   121de:	7809      	ldrb	r1, [r1, #0]
   121e0:	2200      	movs	r2, #0
   121e2:	4288      	cmp	r0, r1
   121e4:	bf38      	it	cc
   121e6:	2201      	movcc	r2, #1
   121e8:	4610      	mov	r0, r2
   121ea:	b002      	add	sp, #8
   121ec:	4770      	bx	lr

000121ee <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   121ee:	b084      	sub	sp, #16
   121f0:	9001      	str	r0, [sp, #4]
   121f2:	9102      	str	r1, [sp, #8]
   121f4:	4408      	add	r0, r1
   121f6:	9003      	str	r0, [sp, #12]
   121f8:	9803      	ldr	r0, [sp, #12]
   121fa:	9000      	str	r0, [sp, #0]
   121fc:	e7ff      	b.n	121fe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   121fe:	9800      	ldr	r0, [sp, #0]
   12200:	b004      	add	sp, #16
   12202:	4770      	bx	lr

00012204 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   12204:	b082      	sub	sp, #8
   12206:	9001      	str	r0, [sp, #4]
   12208:	9000      	str	r0, [sp, #0]
   1220a:	e7ff      	b.n	1220c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   1220c:	9800      	ldr	r0, [sp, #0]
   1220e:	fab0 f180 	clz	r1, r0
   12212:	0948      	lsrs	r0, r1, #5
   12214:	b002      	add	sp, #8
   12216:	4770      	bx	lr

00012218 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   12218:	b082      	sub	sp, #8
   1221a:	9001      	str	r0, [sp, #4]
   1221c:	9000      	str	r0, [sp, #0]
   1221e:	9800      	ldr	r0, [sp, #0]
   12220:	b002      	add	sp, #8
   12222:	4770      	bx	lr

00012224 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   12224:	b081      	sub	sp, #4
   12226:	9000      	str	r0, [sp, #0]
   12228:	b001      	add	sp, #4
   1222a:	4770      	bx	lr

0001222c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   1222c:	b580      	push	{r7, lr}
   1222e:	b084      	sub	sp, #16
   12230:	9002      	str	r0, [sp, #8]
   12232:	9103      	str	r1, [sp, #12]
   12234:	f000 f805 	bl	12242 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   12238:	9001      	str	r0, [sp, #4]
   1223a:	e7ff      	b.n	1223c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   1223c:	9801      	ldr	r0, [sp, #4]
   1223e:	b004      	add	sp, #16
   12240:	bd80      	pop	{r7, pc}

00012242 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   12242:	b084      	sub	sp, #16
   12244:	9001      	str	r0, [sp, #4]
   12246:	9102      	str	r1, [sp, #8]
   12248:	4408      	add	r0, r1
   1224a:	9003      	str	r0, [sp, #12]
   1224c:	9803      	ldr	r0, [sp, #12]
   1224e:	9000      	str	r0, [sp, #0]
   12250:	e7ff      	b.n	12252 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   12252:	9800      	ldr	r0, [sp, #0]
   12254:	b004      	add	sp, #16
   12256:	4770      	bx	lr

00012258 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   12258:	b082      	sub	sp, #8
   1225a:	9001      	str	r0, [sp, #4]
   1225c:	9000      	str	r0, [sp, #0]
   1225e:	e7ff      	b.n	12260 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   12260:	9800      	ldr	r0, [sp, #0]
   12262:	fab0 f180 	clz	r1, r0
   12266:	0948      	lsrs	r0, r1, #5
   12268:	b002      	add	sp, #8
   1226a:	4770      	bx	lr

0001226c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   1226c:	b580      	push	{r7, lr}
   1226e:	b090      	sub	sp, #64	; 0x40
   12270:	900c      	str	r0, [sp, #48]	; 0x30
   12272:	910d      	str	r1, [sp, #52]	; 0x34
   12274:	9007      	str	r0, [sp, #28]
   12276:	9106      	str	r1, [sp, #24]
   12278:	f001 f894 	bl	133a4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   1227c:	4601      	mov	r1, r0
   1227e:	900e      	str	r0, [sp, #56]	; 0x38
   12280:	9105      	str	r1, [sp, #20]
   12282:	e7ff      	b.n	12284 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   12284:	9805      	ldr	r0, [sp, #20]
   12286:	f7ff ffe7 	bl	12258 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   1228a:	e7ff      	b.n	1228c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   1228c:	e7ff      	b.n	1228e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   1228e:	2001      	movs	r0, #1
   12290:	900f      	str	r0, [sp, #60]	; 0x3c
   12292:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12294:	9004      	str	r0, [sp, #16]
   12296:	e7ff      	b.n	12298 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   12298:	9804      	ldr	r0, [sp, #16]
   1229a:	2800      	cmp	r0, #0
   1229c:	d006      	beq.n	122ac <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   1229e:	e7ff      	b.n	122a0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   122a0:	9807      	ldr	r0, [sp, #28]
   122a2:	9906      	ldr	r1, [sp, #24]
   122a4:	f001 f876 	bl	13394 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   122a8:	9003      	str	r0, [sp, #12]
   122aa:	e00e      	b.n	122ca <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   122ac:	9807      	ldr	r0, [sp, #28]
   122ae:	9906      	ldr	r1, [sp, #24]
   122b0:	f001 f870 	bl	13394 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   122b4:	9002      	str	r0, [sp, #8]
   122b6:	e7ff      	b.n	122b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   122b8:	9805      	ldr	r0, [sp, #20]
   122ba:	9902      	ldr	r1, [sp, #8]
   122bc:	f7ff ffb6 	bl	1222c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   122c0:	9001      	str	r0, [sp, #4]
   122c2:	e7ff      	b.n	122c4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   122c4:	9801      	ldr	r0, [sp, #4]
   122c6:	900a      	str	r0, [sp, #40]	; 0x28
   122c8:	e006      	b.n	122d8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   122ca:	9805      	ldr	r0, [sp, #20]
   122cc:	9903      	ldr	r1, [sp, #12]
   122ce:	f001 f83e 	bl	1334e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   122d2:	900a      	str	r0, [sp, #40]	; 0x28
   122d4:	e7ff      	b.n	122d6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   122d6:	e7ff      	b.n	122d8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   122d8:	9805      	ldr	r0, [sp, #20]
   122da:	f7ff ff9d 	bl	12218 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   122de:	9000      	str	r0, [sp, #0]
   122e0:	e7ff      	b.n	122e2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   122e2:	980a      	ldr	r0, [sp, #40]	; 0x28
   122e4:	9900      	ldr	r1, [sp, #0]
   122e6:	9108      	str	r1, [sp, #32]
   122e8:	9009      	str	r0, [sp, #36]	; 0x24
   122ea:	9808      	ldr	r0, [sp, #32]
   122ec:	9909      	ldr	r1, [sp, #36]	; 0x24
   122ee:	b010      	add	sp, #64	; 0x40
   122f0:	bd80      	pop	{r7, pc}

000122f2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   122f2:	b081      	sub	sp, #4
   122f4:	b001      	add	sp, #4
   122f6:	4770      	bx	lr

000122f8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   122f8:	b580      	push	{r7, lr}
   122fa:	b08e      	sub	sp, #56	; 0x38
   122fc:	9007      	str	r0, [sp, #28]
   122fe:	6801      	ldr	r1, [r0, #0]
   12300:	9005      	str	r0, [sp, #20]
   12302:	4608      	mov	r0, r1
   12304:	f7ff ff8e 	bl	12224 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   12308:	9004      	str	r0, [sp, #16]
   1230a:	e7ff      	b.n	1230c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   1230c:	9804      	ldr	r0, [sp, #16]
   1230e:	f7ff ff79 	bl	12204 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   12312:	e7ff      	b.n	12314 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   12314:	e7ff      	b.n	12316 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   12316:	2001      	movs	r0, #1
   12318:	9008      	str	r0, [sp, #32]
   1231a:	9808      	ldr	r0, [sp, #32]
   1231c:	9003      	str	r0, [sp, #12]
   1231e:	e7ff      	b.n	12320 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   12320:	9803      	ldr	r0, [sp, #12]
   12322:	2800      	cmp	r0, #0
   12324:	d007      	beq.n	12336 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   12326:	e7ff      	b.n	12328 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   12328:	9805      	ldr	r0, [sp, #20]
   1232a:	6840      	ldr	r0, [r0, #4]
   1232c:	f7ff ff94 	bl	12258 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   12330:	e7ff      	b.n	12332 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   12332:	e7ff      	b.n	12334 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   12334:	e7ff      	b.n	12336 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   12336:	9805      	ldr	r0, [sp, #20]
   12338:	6800      	ldr	r0, [r0, #0]
   1233a:	f7ff ff73 	bl	12224 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1233e:	9002      	str	r0, [sp, #8]
   12340:	e7ff      	b.n	12342 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   12342:	9805      	ldr	r0, [sp, #20]
   12344:	6841      	ldr	r1, [r0, #4]
   12346:	9a02      	ldr	r2, [sp, #8]
   12348:	428a      	cmp	r2, r1
   1234a:	d02e      	beq.n	123aa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   1234c:	e7ff      	b.n	1234e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   1234e:	9805      	ldr	r0, [sp, #20]
   12350:	900a      	str	r0, [sp, #40]	; 0x28
   12352:	2101      	movs	r1, #1
   12354:	910b      	str	r1, [sp, #44]	; 0x2c
   12356:	910d      	str	r1, [sp, #52]	; 0x34
   12358:	990d      	ldr	r1, [sp, #52]	; 0x34
   1235a:	2900      	cmp	r1, #0
   1235c:	d015      	beq.n	1238a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   1235e:	e7ff      	b.n	12360 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   12360:	9805      	ldr	r0, [sp, #20]
   12362:	6800      	ldr	r0, [r0, #0]
   12364:	f7ff ff5e 	bl	12224 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   12368:	900c      	str	r0, [sp, #48]	; 0x30
   1236a:	9905      	ldr	r1, [sp, #20]
   1236c:	680a      	ldr	r2, [r1, #0]
   1236e:	9001      	str	r0, [sp, #4]
   12370:	4610      	mov	r0, r2
   12372:	f7ff ff57 	bl	12224 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   12376:	2101      	movs	r1, #1
   12378:	f7ff ff39 	bl	121ee <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   1237c:	f7ff ff4c 	bl	12218 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   12380:	9905      	ldr	r1, [sp, #20]
   12382:	6008      	str	r0, [r1, #0]
   12384:	9801      	ldr	r0, [sp, #4]
   12386:	9009      	str	r0, [sp, #36]	; 0x24
   12388:	e00c      	b.n	123a4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   1238a:	9805      	ldr	r0, [sp, #20]
   1238c:	6840      	ldr	r0, [r0, #4]
   1238e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   12392:	f7ff ff56 	bl	12242 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   12396:	9905      	ldr	r1, [sp, #20]
   12398:	6048      	str	r0, [r1, #4]
   1239a:	6808      	ldr	r0, [r1, #0]
   1239c:	f7ff ff42 	bl	12224 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   123a0:	9009      	str	r0, [sp, #36]	; 0x24
   123a2:	e7ff      	b.n	123a4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   123a4:	9809      	ldr	r0, [sp, #36]	; 0x24
   123a6:	9000      	str	r0, [sp, #0]
   123a8:	e002      	b.n	123b0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   123aa:	2000      	movs	r0, #0
   123ac:	9006      	str	r0, [sp, #24]
   123ae:	e002      	b.n	123b6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   123b0:	9800      	ldr	r0, [sp, #0]
   123b2:	9006      	str	r0, [sp, #24]
   123b4:	e7ff      	b.n	123b6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   123b6:	9806      	ldr	r0, [sp, #24]
   123b8:	b00e      	add	sp, #56	; 0x38
   123ba:	bd80      	pop	{r7, pc}

000123bc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
   123bc:	b580      	push	{r7, lr}
   123be:	b084      	sub	sp, #16
   123c0:	9002      	str	r0, [sp, #8]
   123c2:	9103      	str	r1, [sp, #12]
   123c4:	6800      	ldr	r0, [r0, #0]
   123c6:	f000 f88c 	bl	124e2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
   123ca:	9001      	str	r0, [sp, #4]
   123cc:	e7ff      	b.n	123ce <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
   123ce:	9801      	ldr	r0, [sp, #4]
   123d0:	f000 0001 	and.w	r0, r0, #1
   123d4:	b004      	add	sp, #16
   123d6:	bd80      	pop	{r7, pc}

000123d8 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>:
   123d8:	b580      	push	{r7, lr}
   123da:	b084      	sub	sp, #16
   123dc:	9002      	str	r0, [sp, #8]
   123de:	9103      	str	r1, [sp, #12]
   123e0:	f000 f827 	bl	12432 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>
   123e4:	9001      	str	r0, [sp, #4]
   123e6:	e7ff      	b.n	123e8 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE+0x10>
   123e8:	9801      	ldr	r0, [sp, #4]
   123ea:	b004      	add	sp, #16
   123ec:	bd80      	pop	{r7, pc}

000123ee <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>:
   123ee:	b085      	sub	sp, #20
   123f0:	9003      	str	r0, [sp, #12]
   123f2:	9104      	str	r1, [sp, #16]
   123f4:	6802      	ldr	r2, [r0, #0]
   123f6:	680b      	ldr	r3, [r1, #0]
   123f8:	429a      	cmp	r2, r3
   123fa:	9101      	str	r1, [sp, #4]
   123fc:	9000      	str	r0, [sp, #0]
   123fe:	db07      	blt.n	12410 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x22>
   12400:	e7ff      	b.n	12402 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x14>
   12402:	9800      	ldr	r0, [sp, #0]
   12404:	6801      	ldr	r1, [r0, #0]
   12406:	9a01      	ldr	r2, [sp, #4]
   12408:	6813      	ldr	r3, [r2, #0]
   1240a:	4299      	cmp	r1, r3
   1240c:	d008      	beq.n	12420 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x32>
   1240e:	e003      	b.n	12418 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x2a>
   12410:	20ff      	movs	r0, #255	; 0xff
   12412:	f88d 000b 	strb.w	r0, [sp, #11]
   12416:	e008      	b.n	1242a <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
   12418:	2001      	movs	r0, #1
   1241a:	f88d 000b 	strb.w	r0, [sp, #11]
   1241e:	e003      	b.n	12428 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
   12420:	2000      	movs	r0, #0
   12422:	f88d 000b 	strb.w	r0, [sp, #11]
   12426:	e7ff      	b.n	12428 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
   12428:	e7ff      	b.n	1242a <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
   1242a:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1242e:	b005      	add	sp, #20
   12430:	4770      	bx	lr

00012432 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>:
   12432:	b580      	push	{r7, lr}
   12434:	b088      	sub	sp, #32
   12436:	9000      	str	r0, [sp, #0]
   12438:	9101      	str	r1, [sp, #4]
   1243a:	2000      	movs	r0, #0
   1243c:	f88d 001b 	strb.w	r0, [sp, #27]
   12440:	f88d 001a 	strb.w	r0, [sp, #26]
   12444:	2001      	movs	r0, #1
   12446:	f88d 001b 	strb.w	r0, [sp, #27]
   1244a:	f88d 001a 	strb.w	r0, [sp, #26]
   1244e:	4668      	mov	r0, sp
   12450:	9004      	str	r0, [sp, #16]
   12452:	a801      	add	r0, sp, #4
   12454:	9005      	str	r0, [sp, #20]
   12456:	9804      	ldr	r0, [sp, #16]
   12458:	9905      	ldr	r1, [sp, #20]
   1245a:	f000 f895 	bl	12588 <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>
   1245e:	f88d 000f 	strb.w	r0, [sp, #15]
   12462:	e7ff      	b.n	12464 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x32>
   12464:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   12468:	1c41      	adds	r1, r0, #1
   1246a:	2902      	cmp	r1, #2
   1246c:	d307      	bcc.n	1247e <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x4c>
   1246e:	e7ff      	b.n	12470 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x3e>
   12470:	2000      	movs	r0, #0
   12472:	f88d 001b 	strb.w	r0, [sp, #27]
   12476:	9800      	ldr	r0, [sp, #0]
   12478:	9002      	str	r0, [sp, #8]
   1247a:	e006      	b.n	1248a <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
   1247c:	defe      	udf	#254	; 0xfe
   1247e:	2000      	movs	r0, #0
   12480:	f88d 001a 	strb.w	r0, [sp, #26]
   12484:	9801      	ldr	r0, [sp, #4]
   12486:	9002      	str	r0, [sp, #8]
   12488:	e7ff      	b.n	1248a <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
   1248a:	f89d 001a 	ldrb.w	r0, [sp, #26]
   1248e:	07c0      	lsls	r0, r0, #31
   12490:	2800      	cmp	r0, #0
   12492:	d109      	bne.n	124a8 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x76>
   12494:	e7ff      	b.n	12496 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
   12496:	f89d 001b 	ldrb.w	r0, [sp, #27]
   1249a:	07c0      	lsls	r0, r0, #31
   1249c:	2800      	cmp	r0, #0
   1249e:	d107      	bne.n	124b0 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x7e>
   124a0:	e7ff      	b.n	124a2 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>
   124a2:	9802      	ldr	r0, [sp, #8]
   124a4:	b008      	add	sp, #32
   124a6:	bd80      	pop	{r7, pc}
   124a8:	2000      	movs	r0, #0
   124aa:	f88d 001a 	strb.w	r0, [sp, #26]
   124ae:	e7f2      	b.n	12496 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
   124b0:	2000      	movs	r0, #0
   124b2:	f88d 001b 	strb.w	r0, [sp, #27]
   124b6:	e7f4      	b.n	124a2 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>

000124b8 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>:
   124b8:	b089      	sub	sp, #36	; 0x24
   124ba:	9005      	str	r0, [sp, #20]
   124bc:	9106      	str	r1, [sp, #24]
   124be:	9107      	str	r1, [sp, #28]
   124c0:	9907      	ldr	r1, [sp, #28]
   124c2:	9002      	str	r0, [sp, #8]
   124c4:	9101      	str	r1, [sp, #4]
   124c6:	e7ff      	b.n	124c8 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x10>
   124c8:	9802      	ldr	r0, [sp, #8]
   124ca:	9008      	str	r0, [sp, #32]
   124cc:	9908      	ldr	r1, [sp, #32]
   124ce:	9100      	str	r1, [sp, #0]
   124d0:	e7ff      	b.n	124d2 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x1a>
   124d2:	9800      	ldr	r0, [sp, #0]
   124d4:	9003      	str	r0, [sp, #12]
   124d6:	9901      	ldr	r1, [sp, #4]
   124d8:	9104      	str	r1, [sp, #16]
   124da:	9803      	ldr	r0, [sp, #12]
   124dc:	9904      	ldr	r1, [sp, #16]
   124de:	b009      	add	sp, #36	; 0x24
   124e0:	4770      	bx	lr

000124e2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
   124e2:	b580      	push	{r7, lr}
   124e4:	b088      	sub	sp, #32
   124e6:	9006      	str	r0, [sp, #24]
   124e8:	9107      	str	r1, [sp, #28]
   124ea:	9004      	str	r0, [sp, #16]
   124ec:	4608      	mov	r0, r1
   124ee:	9103      	str	r1, [sp, #12]
   124f0:	f006 ff75 	bl	193de <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   124f4:	9002      	str	r0, [sp, #8]
   124f6:	e7ff      	b.n	124f8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
   124f8:	9802      	ldr	r0, [sp, #8]
   124fa:	07c1      	lsls	r1, r0, #31
   124fc:	2900      	cmp	r1, #0
   124fe:	d105      	bne.n	1250c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
   12500:	e7ff      	b.n	12502 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
   12502:	9803      	ldr	r0, [sp, #12]
   12504:	f006 ff6f 	bl	193e6 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12508:	9001      	str	r0, [sp, #4]
   1250a:	e007      	b.n	1251c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
   1250c:	9804      	ldr	r0, [sp, #16]
   1250e:	9903      	ldr	r1, [sp, #12]
   12510:	f007 fd8f 	bl	1a032 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12514:	f88d 0017 	strb.w	r0, [sp, #23]
   12518:	e7ff      	b.n	1251a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
   1251a:	e015      	b.n	12548 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   1251c:	9801      	ldr	r0, [sp, #4]
   1251e:	07c1      	lsls	r1, r0, #31
   12520:	2900      	cmp	r1, #0
   12522:	d107      	bne.n	12534 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
   12524:	e7ff      	b.n	12526 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
   12526:	9804      	ldr	r0, [sp, #16]
   12528:	9903      	ldr	r1, [sp, #12]
   1252a:	f007 fefd 	bl	1a328 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   1252e:	f88d 0017 	strb.w	r0, [sp, #23]
   12532:	e007      	b.n	12544 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
   12534:	9804      	ldr	r0, [sp, #16]
   12536:	9903      	ldr	r1, [sp, #12]
   12538:	f007 fde6 	bl	1a108 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   1253c:	f88d 0017 	strb.w	r0, [sp, #23]
   12540:	e7ff      	b.n	12542 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
   12542:	e000      	b.n	12546 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   12544:	e7ff      	b.n	12546 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   12546:	e7ff      	b.n	12548 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   12548:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1254c:	b008      	add	sp, #32
   1254e:	bd80      	pop	{r7, pc}

00012550 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>:
   12550:	b580      	push	{r7, lr}
   12552:	b086      	sub	sp, #24
   12554:	f8dd c020 	ldr.w	ip, [sp, #32]
   12558:	9102      	str	r1, [sp, #8]
   1255a:	9203      	str	r2, [sp, #12]
   1255c:	9304      	str	r3, [sp, #16]
   1255e:	f8cd c014 	str.w	ip, [sp, #20]
   12562:	f04f 0e00 	mov.w	lr, #0
   12566:	f8cd e004 	str.w	lr, [sp, #4]
   1256a:	f8cd e000 	str.w	lr, [sp]
   1256e:	f8cd e000 	str.w	lr, [sp]
   12572:	6001      	str	r1, [r0, #0]
   12574:	6042      	str	r2, [r0, #4]
   12576:	9900      	ldr	r1, [sp, #0]
   12578:	9a01      	ldr	r2, [sp, #4]
   1257a:	6081      	str	r1, [r0, #8]
   1257c:	60c2      	str	r2, [r0, #12]
   1257e:	6103      	str	r3, [r0, #16]
   12580:	f8c0 c014 	str.w	ip, [r0, #20]
   12584:	b006      	add	sp, #24
   12586:	bd80      	pop	{r7, pc}

00012588 <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>:
   12588:	b580      	push	{r7, lr}
   1258a:	b084      	sub	sp, #16
   1258c:	9001      	str	r0, [sp, #4]
   1258e:	9102      	str	r1, [sp, #8]
   12590:	9801      	ldr	r0, [sp, #4]
   12592:	9902      	ldr	r1, [sp, #8]
   12594:	f7ff ff2b 	bl	123ee <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>
   12598:	9000      	str	r0, [sp, #0]
   1259a:	e7ff      	b.n	1259c <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E+0x14>
   1259c:	9800      	ldr	r0, [sp, #0]
   1259e:	b004      	add	sp, #16
   125a0:	bd80      	pop	{r7, pc}

000125a2 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
   125a2:	b084      	sub	sp, #16
   125a4:	9002      	str	r0, [sp, #8]
   125a6:	9103      	str	r1, [sp, #12]
            Coord(x, y)
   125a8:	9000      	str	r0, [sp, #0]
   125aa:	9101      	str	r1, [sp, #4]
        }
   125ac:	9800      	ldr	r0, [sp, #0]
   125ae:	9901      	ldr	r1, [sp, #4]
   125b0:	b004      	add	sp, #16
   125b2:	4770      	bx	lr

000125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>:
    }

    impl Index<usize> for Coord {
        type Output = CoordPart;

        fn index(&self, idx: usize) -> &CoordPart {
   125b4:	b580      	push	{r7, lr}
   125b6:	b096      	sub	sp, #88	; 0x58
   125b8:	9109      	str	r1, [sp, #36]	; 0x24
   125ba:	9014      	str	r0, [sp, #80]	; 0x50
            match idx {
                0 => &self.0,
   125bc:	9909      	ldr	r1, [sp, #36]	; 0x24
   125be:	2900      	cmp	r1, #0
   125c0:	9008      	str	r0, [sp, #32]
   125c2:	9107      	str	r1, [sp, #28]
   125c4:	d018      	beq.n	125f8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x44>
   125c6:	e7ff      	b.n	125c8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x14>
   125c8:	9807      	ldr	r0, [sp, #28]
   125ca:	2801      	cmp	r0, #1
   125cc:	d017      	beq.n	125fe <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x4a>
   125ce:	e7ff      	b.n	125d0 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x1c>
                1 => &self.1,
                _ => panic!("Unreachable index {}", idx),
   125d0:	f647 0008 	movw	r0, #30728	; 0x7808
   125d4:	f2c0 0002 	movt	r0, #2
   125d8:	6801      	ldr	r1, [r0, #0]
   125da:	a809      	add	r0, sp, #36	; 0x24
   125dc:	9013      	str	r0, [sp, #76]	; 0x4c
   125de:	9813      	ldr	r0, [sp, #76]	; 0x4c
   125e0:	9015      	str	r0, [sp, #84]	; 0x54
   125e2:	f24a 421d 	movw	r2, #42013	; 0xa41d
   125e6:	f2c0 0201 	movt	r2, #1
   125ea:	9106      	str	r1, [sp, #24]
   125ec:	4611      	mov	r1, r2
   125ee:	f7ff ff63 	bl	124b8 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>
   125f2:	9005      	str	r0, [sp, #20]
   125f4:	9104      	str	r1, [sp, #16]
   125f6:	e006      	b.n	12606 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x52>
                0 => &self.0,
   125f8:	9808      	ldr	r0, [sp, #32]
   125fa:	900a      	str	r0, [sp, #40]	; 0x28
            match idx {
   125fc:	e020      	b.n	12640 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                1 => &self.1,
   125fe:	9808      	ldr	r0, [sp, #32]
   12600:	1d01      	adds	r1, r0, #4
   12602:	910a      	str	r1, [sp, #40]	; 0x28
            match idx {
   12604:	e01c      	b.n	12640 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                _ => panic!("Unreachable index {}", idx),
   12606:	9805      	ldr	r0, [sp, #20]
   12608:	9011      	str	r0, [sp, #68]	; 0x44
   1260a:	9904      	ldr	r1, [sp, #16]
   1260c:	9112      	str	r1, [sp, #72]	; 0x48
   1260e:	466a      	mov	r2, sp
   12610:	2301      	movs	r3, #1
   12612:	6013      	str	r3, [r2, #0]
   12614:	a80b      	add	r0, sp, #44	; 0x2c
   12616:	aa11      	add	r2, sp, #68	; 0x44
   12618:	9906      	ldr	r1, [sp, #24]
   1261a:	9203      	str	r2, [sp, #12]
   1261c:	461a      	mov	r2, r3
   1261e:	9b03      	ldr	r3, [sp, #12]
   12620:	f7ff ff96 	bl	12550 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>
   12624:	e7ff      	b.n	12626 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x72>
   12626:	f647 000c 	movw	r0, #30732	; 0x780c
   1262a:	f2c0 0002 	movt	r0, #2
   1262e:	f006 f82e 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12632:	9002      	str	r0, [sp, #8]
   12634:	e7ff      	b.n	12636 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x82>
   12636:	a80b      	add	r0, sp, #44	; 0x2c
   12638:	9902      	ldr	r1, [sp, #8]
   1263a:	f006 f865 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1263e:	defe      	udf	#254	; 0xfe
            match idx {
   12640:	980a      	ldr	r0, [sp, #40]	; 0x28
            }
        }
   12642:	b016      	add	sp, #88	; 0x58
   12644:	bd80      	pop	{r7, pc}

00012646 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>:
    /// #
    /// let coord = Coord::new(-5, 10);
    ///
    /// assert_eq!(coord.to_unsigned(), UnsignedCoord::new(0, 10));
    /// ```
    fn to_unsigned(self) -> UnsignedCoord {
   12646:	b580      	push	{r7, lr}
   12648:	b088      	sub	sp, #32
   1264a:	9006      	str	r0, [sp, #24]
   1264c:	9107      	str	r1, [sp, #28]
   1264e:	a806      	add	r0, sp, #24
   12650:	2100      	movs	r1, #0
        UnsignedCoord::new(self[0].max(0) as u32, self[1].max(0) as u32)
   12652:	f7ff ffaf 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12656:	9005      	str	r0, [sp, #20]
   12658:	e7ff      	b.n	1265a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x14>
   1265a:	9805      	ldr	r0, [sp, #20]
   1265c:	6800      	ldr	r0, [r0, #0]
   1265e:	2100      	movs	r1, #0
   12660:	f7ff feba 	bl	123d8 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
   12664:	9004      	str	r0, [sp, #16]
   12666:	e7ff      	b.n	12668 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x22>
   12668:	a806      	add	r0, sp, #24
   1266a:	2101      	movs	r1, #1
   1266c:	f7ff ffa2 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12670:	9003      	str	r0, [sp, #12]
   12672:	e7ff      	b.n	12674 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x2e>
   12674:	9803      	ldr	r0, [sp, #12]
   12676:	6800      	ldr	r0, [r0, #0]
   12678:	2100      	movs	r1, #0
   1267a:	f7ff fead 	bl	123d8 <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
   1267e:	9002      	str	r0, [sp, #8]
   12680:	e7ff      	b.n	12682 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x3c>
   12682:	9804      	ldr	r0, [sp, #16]
   12684:	9902      	ldr	r1, [sp, #8]
   12686:	f000 f84e 	bl	12726 <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>
   1268a:	9001      	str	r0, [sp, #4]
   1268c:	9100      	str	r1, [sp, #0]
   1268e:	e7ff      	b.n	12690 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x4a>
    }
   12690:	9801      	ldr	r0, [sp, #4]
   12692:	9900      	ldr	r1, [sp, #0]
   12694:	b008      	add	sp, #32
   12696:	bd80      	pop	{r7, pc}

00012698 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
   12698:	b08b      	sub	sp, #44	; 0x2c
   1269a:	4601      	mov	r1, r0
   1269c:	f8ad 0020 	strh.w	r0, [sp, #32]
   126a0:	0c00      	lsrs	r0, r0, #16
   126a2:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   126a6:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   126aa:	f88d 001e 	strb.w	r0, [sp, #30]
   126ae:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   126b2:	f8ad 001c 	strh.w	r0, [sp, #28]
   126b6:	f89d 001c 	ldrb.w	r0, [sp, #28]
   126ba:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   126be:	f89d 201d 	ldrb.w	r2, [sp, #29]
   126c2:	4613      	mov	r3, r2
   126c4:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   126c8:	f89d 201e 	ldrb.w	r2, [sp, #30]
   126cc:	4694      	mov	ip, r2
   126ce:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
   126d2:	0200      	lsls	r0, r0, #8
   126d4:	9306      	str	r3, [sp, #24]
   126d6:	f8cd c014 	str.w	ip, [sp, #20]
   126da:	9004      	str	r0, [sp, #16]
   126dc:	e7ff      	b.n	126de <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
   126de:	9804      	ldr	r0, [sp, #16]
   126e0:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
   126e4:	9a06      	ldr	r2, [sp, #24]
   126e6:	b2d3      	uxtb	r3, r2
   126e8:	00db      	lsls	r3, r3, #3
   126ea:	9103      	str	r1, [sp, #12]
   126ec:	9302      	str	r3, [sp, #8]
   126ee:	e7ff      	b.n	126f0 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
   126f0:	9802      	ldr	r0, [sp, #8]
   126f2:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
   126f6:	9a03      	ldr	r2, [sp, #12]
   126f8:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
   126fa:	9b05      	ldr	r3, [sp, #20]
   126fc:	fa5f fc83 	uxtb.w	ip, r3
   12700:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   12704:	9101      	str	r1, [sp, #4]
   12706:	f8cd c000 	str.w	ip, [sp]
   1270a:	e7ff      	b.n	1270c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
   1270c:	9800      	ldr	r0, [sp, #0]
   1270e:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
   12712:	9a01      	ldr	r2, [sp, #4]
   12714:	4311      	orrs	r1, r2
   12716:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
   1271a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
   1271e:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   12722:	b00b      	add	sp, #44	; 0x2c
   12724:	4770      	bx	lr

00012726 <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct UnsignedCoord(pub UnsignedCoordPart, pub UnsignedCoordPart);

    impl UnsignedCoord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: UnsignedCoordPart, y: UnsignedCoordPart) -> Self {
   12726:	b084      	sub	sp, #16
   12728:	9002      	str	r0, [sp, #8]
   1272a:	9103      	str	r1, [sp, #12]
            UnsignedCoord(x, y)
   1272c:	9000      	str	r0, [sp, #0]
   1272e:	9101      	str	r1, [sp, #4]
        }
   12730:	9800      	ldr	r0, [sp, #0]
   12732:	9901      	ldr	r1, [sp, #4]
   12734:	b004      	add	sp, #16
   12736:	4770      	bx	lr

00012738 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
   12738:	b580      	push	{r7, lr}
   1273a:	b088      	sub	sp, #32
   1273c:	9005      	str	r0, [sp, #20]
   1273e:	9106      	str	r1, [sp, #24]
   12740:	9003      	str	r0, [sp, #12]
   12742:	4608      	mov	r0, r1
   12744:	f000 fa21 	bl	12b8a <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
   12748:	9004      	str	r0, [sp, #16]
   1274a:	e7ff      	b.n	1274c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
   1274c:	9804      	ldr	r0, [sp, #16]
   1274e:	9007      	str	r0, [sp, #28]
   12750:	9903      	ldr	r1, [sp, #12]
   12752:	680a      	ldr	r2, [r1, #0]
   12754:	9002      	str	r0, [sp, #8]
   12756:	4610      	mov	r0, r2
   12758:	9902      	ldr	r1, [sp, #8]
   1275a:	f000 f837 	bl	127cc <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
   1275e:	9001      	str	r0, [sp, #4]
   12760:	9100      	str	r1, [sp, #0]
   12762:	e7ff      	b.n	12764 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
   12764:	9801      	ldr	r0, [sp, #4]
   12766:	9900      	ldr	r1, [sp, #0]
   12768:	b008      	add	sp, #32
   1276a:	bd80      	pop	{r7, pc}

0001276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
   1276c:	b580      	push	{r7, lr}
   1276e:	b084      	sub	sp, #16
   12770:	9001      	str	r0, [sp, #4]
   12772:	9102      	str	r1, [sp, #8]
   12774:	9203      	str	r2, [sp, #12]
   12776:	9000      	str	r0, [sp, #0]
   12778:	4608      	mov	r0, r1
   1277a:	9900      	ldr	r1, [sp, #0]
   1277c:	f00c fb62 	bl	1ee44 <__aeabi_memcpy>
   12780:	e7ff      	b.n	12782 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
   12782:	b004      	add	sp, #16
   12784:	bd80      	pop	{r7, pc}

00012786 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
   12786:	b580      	push	{r7, lr}
   12788:	b084      	sub	sp, #16
   1278a:	9001      	str	r0, [sp, #4]
   1278c:	9102      	str	r1, [sp, #8]
   1278e:	9203      	str	r2, [sp, #12]
   12790:	0092      	lsls	r2, r2, #2
   12792:	9000      	str	r0, [sp, #0]
   12794:	4608      	mov	r0, r1
   12796:	9900      	ldr	r1, [sp, #0]
   12798:	f00c fb54 	bl	1ee44 <__aeabi_memcpy>
   1279c:	e7ff      	b.n	1279e <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
   1279e:	b004      	add	sp, #16
   127a0:	bd80      	pop	{r7, pc}

000127a2 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
   127a2:	b082      	sub	sp, #8
   127a4:	9000      	str	r0, [sp, #0]
   127a6:	9101      	str	r1, [sp, #4]
   127a8:	6800      	ldr	r0, [r0, #0]
   127aa:	6809      	ldr	r1, [r1, #0]
   127ac:	2200      	movs	r2, #0
   127ae:	4288      	cmp	r0, r1
   127b0:	bf38      	it	cc
   127b2:	2201      	movcc	r2, #1
   127b4:	4610      	mov	r0, r2
   127b6:	b002      	add	sp, #8
   127b8:	4770      	bx	lr

000127ba <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
   127ba:	b580      	push	{r7, lr}
   127bc:	b082      	sub	sp, #8
   127be:	9000      	str	r0, [sp, #0]
   127c0:	9101      	str	r1, [sp, #4]
   127c2:	f000 f85f 	bl	12884 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
   127c6:	e7ff      	b.n	127c8 <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
   127c8:	b002      	add	sp, #8
   127ca:	bd80      	pop	{r7, pc}

000127cc <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
   127cc:	b580      	push	{r7, lr}
   127ce:	b088      	sub	sp, #32
   127d0:	9004      	str	r0, [sp, #16]
   127d2:	9105      	str	r1, [sp, #20]
   127d4:	f000 f819 	bl	1280a <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
   127d8:	9001      	str	r0, [sp, #4]
   127da:	9100      	str	r1, [sp, #0]
   127dc:	e7ff      	b.n	127de <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
   127de:	9801      	ldr	r0, [sp, #4]
   127e0:	9006      	str	r0, [sp, #24]
   127e2:	9900      	ldr	r1, [sp, #0]
   127e4:	f001 0201 	and.w	r2, r1, #1
   127e8:	f88d 201f 	strb.w	r2, [sp, #31]
   127ec:	2a00      	cmp	r2, #0
   127ee:	d105      	bne.n	127fc <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
   127f0:	e7ff      	b.n	127f2 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
   127f2:	9801      	ldr	r0, [sp, #4]
   127f4:	9003      	str	r0, [sp, #12]
   127f6:	2101      	movs	r1, #1
   127f8:	9102      	str	r1, [sp, #8]
   127fa:	e002      	b.n	12802 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   127fc:	2000      	movs	r0, #0
   127fe:	9002      	str	r0, [sp, #8]
   12800:	e7ff      	b.n	12802 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   12802:	9802      	ldr	r0, [sp, #8]
   12804:	9903      	ldr	r1, [sp, #12]
   12806:	b008      	add	sp, #32
   12808:	bd80      	pop	{r7, pc}

0001280a <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
   1280a:	b08a      	sub	sp, #40	; 0x28
   1280c:	9004      	str	r0, [sp, #16]
   1280e:	9105      	str	r1, [sp, #20]
   12810:	1840      	adds	r0, r0, r1
   12812:	f04f 0100 	mov.w	r1, #0
   12816:	f141 0100 	adc.w	r1, r1, #0
   1281a:	9006      	str	r0, [sp, #24]
   1281c:	f88d 101c 	strb.w	r1, [sp, #28]
   12820:	9806      	ldr	r0, [sp, #24]
   12822:	f89d 101c 	ldrb.w	r1, [sp, #28]
   12826:	9001      	str	r0, [sp, #4]
   12828:	9100      	str	r1, [sp, #0]
   1282a:	e7ff      	b.n	1282c <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
   1282c:	9801      	ldr	r0, [sp, #4]
   1282e:	9008      	str	r0, [sp, #32]
   12830:	9900      	ldr	r1, [sp, #0]
   12832:	f001 0201 	and.w	r2, r1, #1
   12836:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1283a:	9002      	str	r0, [sp, #8]
   1283c:	f88d 200c 	strb.w	r2, [sp, #12]
   12840:	9802      	ldr	r0, [sp, #8]
   12842:	f89d 100c 	ldrb.w	r1, [sp, #12]
   12846:	b00a      	add	sp, #40	; 0x28
   12848:	4770      	bx	lr

0001284a <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
   1284a:	b580      	push	{r7, lr}
   1284c:	b08c      	sub	sp, #48	; 0x30
   1284e:	9005      	str	r0, [sp, #20]
   12850:	9106      	str	r1, [sp, #24]
   12852:	9207      	str	r2, [sp, #28]
   12854:	4603      	mov	r3, r0
   12856:	9008      	str	r0, [sp, #32]
   12858:	4608      	mov	r0, r1
   1285a:	9109      	str	r1, [sp, #36]	; 0x24
   1285c:	2104      	movs	r1, #4
   1285e:	910b      	str	r1, [sp, #44]	; 0x2c
   12860:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12862:	9204      	str	r2, [sp, #16]
   12864:	9303      	str	r3, [sp, #12]
   12866:	9002      	str	r0, [sp, #8]
   12868:	9101      	str	r1, [sp, #4]
   1286a:	e7ff      	b.n	1286c <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
   1286c:	9801      	ldr	r0, [sp, #4]
   1286e:	9904      	ldr	r1, [sp, #16]
   12870:	fb00 f201 	mul.w	r2, r0, r1
   12874:	920a      	str	r2, [sp, #40]	; 0x28
   12876:	9803      	ldr	r0, [sp, #12]
   12878:	9902      	ldr	r1, [sp, #8]
   1287a:	f000 f82e 	bl	128da <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
   1287e:	e7ff      	b.n	12880 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
   12880:	b00c      	add	sp, #48	; 0x30
   12882:	bd80      	pop	{r7, pc}

00012884 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
   12884:	b580      	push	{r7, lr}
   12886:	b088      	sub	sp, #32
   12888:	9004      	str	r0, [sp, #16]
   1288a:	9105      	str	r1, [sp, #20]
   1288c:	2204      	movs	r2, #4
   1288e:	9207      	str	r2, [sp, #28]
   12890:	9a07      	ldr	r2, [sp, #28]
   12892:	9103      	str	r1, [sp, #12]
   12894:	9002      	str	r0, [sp, #8]
   12896:	9201      	str	r2, [sp, #4]
   12898:	e7ff      	b.n	1289a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
   1289a:	9801      	ldr	r0, [sp, #4]
   1289c:	2820      	cmp	r0, #32
   1289e:	d306      	bcc.n	128ae <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
   128a0:	e7ff      	b.n	128a2 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
   128a2:	2201      	movs	r2, #1
   128a4:	9802      	ldr	r0, [sp, #8]
   128a6:	9903      	ldr	r1, [sp, #12]
   128a8:	f7ff ffcf 	bl	1284a <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
   128ac:	e012      	b.n	128d4 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
   128ae:	9802      	ldr	r0, [sp, #8]
   128b0:	f000 f8a1 	bl	129f6 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
   128b4:	4601      	mov	r1, r0
   128b6:	9006      	str	r0, [sp, #24]
   128b8:	9100      	str	r1, [sp, #0]
   128ba:	e7ff      	b.n	128bc <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
   128bc:	2201      	movs	r2, #1
   128be:	9803      	ldr	r0, [sp, #12]
   128c0:	9902      	ldr	r1, [sp, #8]
   128c2:	f7ff ff60 	bl	12786 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   128c6:	e7ff      	b.n	128c8 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
   128c8:	9803      	ldr	r0, [sp, #12]
   128ca:	9900      	ldr	r1, [sp, #0]
   128cc:	f000 f8ac 	bl	12a28 <_ZN4core3ptr5write17h4a80332de2cee3d3E>
   128d0:	e7ff      	b.n	128d2 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
   128d2:	e000      	b.n	128d6 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   128d4:	e7ff      	b.n	128d6 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   128d6:	b008      	add	sp, #32
   128d8:	bd80      	pop	{r7, pc}

000128da <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
   128da:	b5d0      	push	{r4, r6, r7, lr}
   128dc:	af02      	add	r7, sp, #8
   128de:	b0b4      	sub	sp, #208	; 0xd0
   128e0:	466c      	mov	r4, sp
   128e2:	f36f 0404 	bfc	r4, #0, #5
   128e6:	46a5      	mov	sp, r4
   128e8:	9024      	str	r0, [sp, #144]	; 0x90
   128ea:	9125      	str	r1, [sp, #148]	; 0x94
   128ec:	9226      	str	r2, [sp, #152]	; 0x98
   128ee:	2320      	movs	r3, #32
   128f0:	932f      	str	r3, [sp, #188]	; 0xbc
   128f2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   128f4:	9327      	str	r3, [sp, #156]	; 0x9c
   128f6:	920e      	str	r2, [sp, #56]	; 0x38
   128f8:	910d      	str	r1, [sp, #52]	; 0x34
   128fa:	900c      	str	r0, [sp, #48]	; 0x30
   128fc:	930b      	str	r3, [sp, #44]	; 0x2c
   128fe:	e7ff      	b.n	12900 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
   12900:	2000      	movs	r0, #0
   12902:	900f      	str	r0, [sp, #60]	; 0x3c
   12904:	e7ff      	b.n	12906 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   12906:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12908:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1290a:	4408      	add	r0, r1
   1290c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1290e:	4290      	cmp	r0, r2
   12910:	d905      	bls.n	1291e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
   12912:	e7ff      	b.n	12914 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
   12914:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12916:	990e      	ldr	r1, [sp, #56]	; 0x38
   12918:	4288      	cmp	r0, r1
   1291a:	d334      	bcc.n	12986 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
   1291c:	e067      	b.n	129ee <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   1291e:	e7ff      	b.n	12920 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
   12920:	a810      	add	r0, sp, #64	; 0x40
   12922:	9030      	str	r0, [sp, #192]	; 0xc0
   12924:	9031      	str	r0, [sp, #196]	; 0xc4
   12926:	e7ff      	b.n	12928 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
   12928:	a810      	add	r0, sp, #64	; 0x40
   1292a:	4601      	mov	r1, r0
   1292c:	9028      	str	r0, [sp, #160]	; 0xa0
   1292e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12930:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12932:	900a      	str	r0, [sp, #40]	; 0x28
   12934:	4610      	mov	r0, r2
   12936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12938:	9109      	str	r1, [sp, #36]	; 0x24
   1293a:	4619      	mov	r1, r3
   1293c:	f000 f87a 	bl	12a34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   12940:	4601      	mov	r1, r0
   12942:	9029      	str	r0, [sp, #164]	; 0xa4
   12944:	9108      	str	r1, [sp, #32]
   12946:	e7ff      	b.n	12948 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
   12948:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1294a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1294c:	f000 f872 	bl	12a34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   12950:	4601      	mov	r1, r0
   12952:	902a      	str	r0, [sp, #168]	; 0xa8
   12954:	9107      	str	r1, [sp, #28]
   12956:	e7ff      	b.n	12958 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
   12958:	9808      	ldr	r0, [sp, #32]
   1295a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1295c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1295e:	f7ff ff05 	bl	1276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   12962:	e7ff      	b.n	12964 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
   12964:	9807      	ldr	r0, [sp, #28]
   12966:	9908      	ldr	r1, [sp, #32]
   12968:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1296a:	f7ff feff 	bl	1276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1296e:	e7ff      	b.n	12970 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
   12970:	9809      	ldr	r0, [sp, #36]	; 0x24
   12972:	9907      	ldr	r1, [sp, #28]
   12974:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12976:	f7ff fef9 	bl	1276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1297a:	e7ff      	b.n	1297c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
   1297c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1297e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12980:	4408      	add	r0, r1
   12982:	900f      	str	r0, [sp, #60]	; 0x3c
   12984:	e7bf      	b.n	12906 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   12986:	e7ff      	b.n	12988 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
   12988:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1298a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1298c:	1a08      	subs	r0, r1, r0
   1298e:	4602      	mov	r2, r0
   12990:	902b      	str	r0, [sp, #172]	; 0xac
   12992:	a81c      	add	r0, sp, #112	; 0x70
   12994:	9032      	str	r0, [sp, #200]	; 0xc8
   12996:	9033      	str	r0, [sp, #204]	; 0xcc
   12998:	9206      	str	r2, [sp, #24]
   1299a:	9005      	str	r0, [sp, #20]
   1299c:	e7ff      	b.n	1299e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
   1299e:	9805      	ldr	r0, [sp, #20]
   129a0:	9905      	ldr	r1, [sp, #20]
   129a2:	912c      	str	r1, [sp, #176]	; 0xb0
   129a4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   129a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   129a8:	9004      	str	r0, [sp, #16]
   129aa:	4610      	mov	r0, r2
   129ac:	f000 f842 	bl	12a34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   129b0:	4601      	mov	r1, r0
   129b2:	902d      	str	r0, [sp, #180]	; 0xb4
   129b4:	9103      	str	r1, [sp, #12]
   129b6:	e7ff      	b.n	129b8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
   129b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   129ba:	980d      	ldr	r0, [sp, #52]	; 0x34
   129bc:	f000 f83a 	bl	12a34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   129c0:	4601      	mov	r1, r0
   129c2:	902e      	str	r0, [sp, #184]	; 0xb8
   129c4:	9102      	str	r1, [sp, #8]
   129c6:	e7ff      	b.n	129c8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
   129c8:	9803      	ldr	r0, [sp, #12]
   129ca:	9904      	ldr	r1, [sp, #16]
   129cc:	9a06      	ldr	r2, [sp, #24]
   129ce:	f7ff fecd 	bl	1276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   129d2:	e7ff      	b.n	129d4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
   129d4:	9802      	ldr	r0, [sp, #8]
   129d6:	9903      	ldr	r1, [sp, #12]
   129d8:	9a06      	ldr	r2, [sp, #24]
   129da:	f7ff fec7 	bl	1276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   129de:	e7ff      	b.n	129e0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
   129e0:	9804      	ldr	r0, [sp, #16]
   129e2:	9902      	ldr	r1, [sp, #8]
   129e4:	9a06      	ldr	r2, [sp, #24]
   129e6:	f7ff fec1 	bl	1276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   129ea:	e7ff      	b.n	129ec <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
   129ec:	e7ff      	b.n	129ee <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   129ee:	f1a7 0408 	sub.w	r4, r7, #8
   129f2:	46a5      	mov	sp, r4
   129f4:	bdd0      	pop	{r4, r6, r7, pc}

000129f6 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
   129f6:	b580      	push	{r7, lr}
   129f8:	b08a      	sub	sp, #40	; 0x28
   129fa:	9004      	str	r0, [sp, #16]
   129fc:	9905      	ldr	r1, [sp, #20]
   129fe:	9103      	str	r1, [sp, #12]
   12a00:	9002      	str	r0, [sp, #8]
   12a02:	e7ff      	b.n	12a04 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
   12a04:	a803      	add	r0, sp, #12
   12a06:	9008      	str	r0, [sp, #32]
   12a08:	9009      	str	r0, [sp, #36]	; 0x24
   12a0a:	e7ff      	b.n	12a0c <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
   12a0c:	a903      	add	r1, sp, #12
   12a0e:	2201      	movs	r2, #1
   12a10:	9802      	ldr	r0, [sp, #8]
   12a12:	f7ff feb8 	bl	12786 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   12a16:	e7ff      	b.n	12a18 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
   12a18:	9803      	ldr	r0, [sp, #12]
   12a1a:	9006      	str	r0, [sp, #24]
   12a1c:	9007      	str	r0, [sp, #28]
   12a1e:	9001      	str	r0, [sp, #4]
   12a20:	e7ff      	b.n	12a22 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
   12a22:	9801      	ldr	r0, [sp, #4]
   12a24:	b00a      	add	sp, #40	; 0x28
   12a26:	bd80      	pop	{r7, pc}

00012a28 <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
   12a28:	b082      	sub	sp, #8
   12a2a:	9000      	str	r0, [sp, #0]
   12a2c:	9101      	str	r1, [sp, #4]
   12a2e:	6001      	str	r1, [r0, #0]
   12a30:	b002      	add	sp, #8
   12a32:	4770      	bx	lr

00012a34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
   12a34:	b580      	push	{r7, lr}
   12a36:	b084      	sub	sp, #16
   12a38:	9002      	str	r0, [sp, #8]
   12a3a:	9103      	str	r1, [sp, #12]
   12a3c:	f000 f805 	bl	12a4a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
   12a40:	9001      	str	r0, [sp, #4]
   12a42:	e7ff      	b.n	12a44 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
   12a44:	9801      	ldr	r0, [sp, #4]
   12a46:	b004      	add	sp, #16
   12a48:	bd80      	pop	{r7, pc}

00012a4a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
   12a4a:	b084      	sub	sp, #16
   12a4c:	9001      	str	r0, [sp, #4]
   12a4e:	9102      	str	r1, [sp, #8]
   12a50:	4408      	add	r0, r1
   12a52:	9003      	str	r0, [sp, #12]
   12a54:	9803      	ldr	r0, [sp, #12]
   12a56:	9000      	str	r0, [sp, #0]
   12a58:	e7ff      	b.n	12a5a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
   12a5a:	9800      	ldr	r0, [sp, #0]
   12a5c:	b004      	add	sp, #16
   12a5e:	4770      	bx	lr

00012a60 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
   12a60:	b580      	push	{r7, lr}
   12a62:	b084      	sub	sp, #16
   12a64:	9002      	str	r0, [sp, #8]
   12a66:	9103      	str	r1, [sp, #12]
   12a68:	f000 f805 	bl	12a76 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
   12a6c:	9001      	str	r0, [sp, #4]
   12a6e:	e7ff      	b.n	12a70 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
   12a70:	9801      	ldr	r0, [sp, #4]
   12a72:	b004      	add	sp, #16
   12a74:	bd80      	pop	{r7, pc}

00012a76 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
   12a76:	b084      	sub	sp, #16
   12a78:	9001      	str	r0, [sp, #4]
   12a7a:	9102      	str	r1, [sp, #8]
   12a7c:	4408      	add	r0, r1
   12a7e:	9003      	str	r0, [sp, #12]
   12a80:	9803      	ldr	r0, [sp, #12]
   12a82:	9000      	str	r0, [sp, #0]
   12a84:	e7ff      	b.n	12a86 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
   12a86:	9800      	ldr	r0, [sp, #0]
   12a88:	b004      	add	sp, #16
   12a8a:	4770      	bx	lr

00012a8c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
   12a8c:	b580      	push	{r7, lr}
   12a8e:	b08a      	sub	sp, #40	; 0x28
   12a90:	9009      	str	r0, [sp, #36]	; 0x24
   12a92:	2100      	movs	r1, #0
   12a94:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   12a98:	1d01      	adds	r1, r0, #4
   12a9a:	9002      	str	r0, [sp, #8]
   12a9c:	f7ff fe81 	bl	127a2 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
   12aa0:	9001      	str	r0, [sp, #4]
   12aa2:	e7ff      	b.n	12aa4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
   12aa4:	9801      	ldr	r0, [sp, #4]
   12aa6:	07c1      	lsls	r1, r0, #31
   12aa8:	2900      	cmp	r1, #0
   12aaa:	d103      	bne.n	12ab4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
   12aac:	e7ff      	b.n	12aae <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
   12aae:	2000      	movs	r0, #0
   12ab0:	9003      	str	r0, [sp, #12]
   12ab2:	e021      	b.n	12af8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   12ab4:	2001      	movs	r0, #1
   12ab6:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12aba:	9902      	ldr	r1, [sp, #8]
   12abc:	9000      	str	r0, [sp, #0]
   12abe:	4608      	mov	r0, r1
   12ac0:	9900      	ldr	r1, [sp, #0]
   12ac2:	f7ff fe39 	bl	12738 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
   12ac6:	9106      	str	r1, [sp, #24]
   12ac8:	9005      	str	r0, [sp, #20]
   12aca:	e7ff      	b.n	12acc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
   12acc:	9805      	ldr	r0, [sp, #20]
   12ace:	2801      	cmp	r0, #1
   12ad0:	d003      	beq.n	12ada <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
   12ad2:	e7ff      	b.n	12ad4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
   12ad4:	2000      	movs	r0, #0
   12ad6:	9003      	str	r0, [sp, #12]
   12ad8:	e021      	b.n	12b1e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   12ada:	2000      	movs	r0, #0
   12adc:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12ae0:	9806      	ldr	r0, [sp, #24]
   12ae2:	9007      	str	r0, [sp, #28]
   12ae4:	a807      	add	r0, sp, #28
   12ae6:	9902      	ldr	r1, [sp, #8]
   12ae8:	f7ff fe67 	bl	127ba <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
   12aec:	e7ff      	b.n	12aee <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
   12aee:	9807      	ldr	r0, [sp, #28]
   12af0:	9004      	str	r0, [sp, #16]
   12af2:	2001      	movs	r0, #1
   12af4:	9003      	str	r0, [sp, #12]
   12af6:	e012      	b.n	12b1e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   12af8:	9803      	ldr	r0, [sp, #12]
   12afa:	9904      	ldr	r1, [sp, #16]
   12afc:	b00a      	add	sp, #40	; 0x28
   12afe:	bd80      	pop	{r7, pc}
   12b00:	2000      	movs	r0, #0
   12b02:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12b06:	e7f7      	b.n	12af8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   12b08:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   12b0c:	07c0      	lsls	r0, r0, #31
   12b0e:	2800      	cmp	r0, #0
   12b10:	d0f6      	beq.n	12b00 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   12b12:	e7ff      	b.n	12b14 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
   12b14:	2000      	movs	r0, #0
   12b16:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12b1a:	e7f1      	b.n	12b00 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   12b1c:	e7f0      	b.n	12b00 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   12b1e:	9805      	ldr	r0, [sp, #20]
   12b20:	2801      	cmp	r0, #1
   12b22:	d0f1      	beq.n	12b08 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
   12b24:	e7fa      	b.n	12b1c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

00012b26 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
   12b26:	b082      	sub	sp, #8
   12b28:	9000      	str	r0, [sp, #0]
   12b2a:	9101      	str	r1, [sp, #4]
   12b2c:	b002      	add	sp, #8
   12b2e:	4770      	bx	lr

00012b30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
   12b30:	b580      	push	{r7, lr}
   12b32:	b086      	sub	sp, #24
   12b34:	9003      	str	r0, [sp, #12]
   12b36:	9104      	str	r1, [sp, #16]
   12b38:	9205      	str	r2, [sp, #20]
   12b3a:	9002      	str	r0, [sp, #8]
   12b3c:	4610      	mov	r0, r2
   12b3e:	9a02      	ldr	r2, [sp, #8]
   12b40:	9101      	str	r1, [sp, #4]
   12b42:	4611      	mov	r1, r2
   12b44:	9a01      	ldr	r2, [sp, #4]
   12b46:	f000 f846 	bl	12bd6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
   12b4a:	9000      	str	r0, [sp, #0]
   12b4c:	e7ff      	b.n	12b4e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
   12b4e:	9800      	ldr	r0, [sp, #0]
   12b50:	b006      	add	sp, #24
   12b52:	bd80      	pop	{r7, pc}

00012b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
   12b54:	b084      	sub	sp, #16
   12b56:	9002      	str	r0, [sp, #8]
   12b58:	9103      	str	r1, [sp, #12]
   12b5a:	9000      	str	r0, [sp, #0]
   12b5c:	9101      	str	r1, [sp, #4]
   12b5e:	9801      	ldr	r0, [sp, #4]
   12b60:	b004      	add	sp, #16
   12b62:	4770      	bx	lr

00012b64 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
   12b64:	b082      	sub	sp, #8
   12b66:	9000      	str	r0, [sp, #0]
   12b68:	9101      	str	r1, [sp, #4]
   12b6a:	b002      	add	sp, #8
   12b6c:	4770      	bx	lr

00012b6e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
   12b6e:	b081      	sub	sp, #4
   12b70:	9000      	str	r0, [sp, #0]
   12b72:	b001      	add	sp, #4
   12b74:	4770      	bx	lr

00012b76 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
   12b76:	b580      	push	{r7, lr}
   12b78:	b082      	sub	sp, #8
   12b7a:	9001      	str	r0, [sp, #4]
   12b7c:	f7ff fff7 	bl	12b6e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
   12b80:	9000      	str	r0, [sp, #0]
   12b82:	e7ff      	b.n	12b84 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
   12b84:	9800      	ldr	r0, [sp, #0]
   12b86:	b002      	add	sp, #8
   12b88:	bd80      	pop	{r7, pc}

00012b8a <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
   12b8a:	b580      	push	{r7, lr}
   12b8c:	b084      	sub	sp, #16
   12b8e:	9003      	str	r0, [sp, #12]
   12b90:	f7ff fff1 	bl	12b76 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
   12b94:	9001      	str	r0, [sp, #4]
   12b96:	e7ff      	b.n	12b98 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
   12b98:	9801      	ldr	r0, [sp, #4]
   12b9a:	9002      	str	r0, [sp, #8]
   12b9c:	9802      	ldr	r0, [sp, #8]
   12b9e:	b004      	add	sp, #16
   12ba0:	bd80      	pop	{r7, pc}

00012ba2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
   12ba2:	b082      	sub	sp, #8
   12ba4:	9000      	str	r0, [sp, #0]
   12ba6:	9101      	str	r1, [sp, #4]
   12ba8:	b002      	add	sp, #8
   12baa:	4770      	bx	lr

00012bac <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
   12bac:	b580      	push	{r7, lr}
   12bae:	b086      	sub	sp, #24
   12bb0:	9003      	str	r0, [sp, #12]
   12bb2:	9104      	str	r1, [sp, #16]
   12bb4:	9205      	str	r2, [sp, #20]
   12bb6:	9002      	str	r0, [sp, #8]
   12bb8:	4608      	mov	r0, r1
   12bba:	4611      	mov	r1, r2
   12bbc:	f7ff ffd2 	bl	12b64 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   12bc0:	9001      	str	r0, [sp, #4]
   12bc2:	e7ff      	b.n	12bc4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
   12bc4:	9801      	ldr	r0, [sp, #4]
   12bc6:	9902      	ldr	r1, [sp, #8]
   12bc8:	f7ff ff4a 	bl	12a60 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
   12bcc:	9000      	str	r0, [sp, #0]
   12bce:	e7ff      	b.n	12bd0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
   12bd0:	9800      	ldr	r0, [sp, #0]
   12bd2:	b006      	add	sp, #24
   12bd4:	bd80      	pop	{r7, pc}

00012bd6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
   12bd6:	b580      	push	{r7, lr}
   12bd8:	b086      	sub	sp, #24
   12bda:	9003      	str	r0, [sp, #12]
   12bdc:	9104      	str	r1, [sp, #16]
   12bde:	9205      	str	r2, [sp, #20]
   12be0:	9002      	str	r0, [sp, #8]
   12be2:	4608      	mov	r0, r1
   12be4:	4611      	mov	r1, r2
   12be6:	f7ff ff9e 	bl	12b26 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   12bea:	9001      	str	r0, [sp, #4]
   12bec:	e7ff      	b.n	12bee <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
   12bee:	9801      	ldr	r0, [sp, #4]
   12bf0:	9902      	ldr	r1, [sp, #8]
   12bf2:	f7ff ff1f 	bl	12a34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   12bf6:	9000      	str	r0, [sp, #0]
   12bf8:	e7ff      	b.n	12bfa <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
   12bfa:	9800      	ldr	r0, [sp, #0]
   12bfc:	b006      	add	sp, #24
   12bfe:	bd80      	pop	{r7, pc}

00012c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   12c00:	b081      	sub	sp, #4
   12c02:	b001      	add	sp, #4
   12c04:	4770      	bx	lr

00012c06 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
   12c06:	b580      	push	{r7, lr}
   12c08:	b086      	sub	sp, #24
   12c0a:	f8dd c020 	ldr.w	ip, [sp, #32]
   12c0e:	9102      	str	r1, [sp, #8]
   12c10:	9203      	str	r2, [sp, #12]
   12c12:	9304      	str	r3, [sp, #16]
   12c14:	f8cd c014 	str.w	ip, [sp, #20]
   12c18:	f04f 0e00 	mov.w	lr, #0
   12c1c:	f8cd e004 	str.w	lr, [sp, #4]
   12c20:	f8cd e000 	str.w	lr, [sp]
   12c24:	f8cd e000 	str.w	lr, [sp]
   12c28:	6001      	str	r1, [r0, #0]
   12c2a:	6042      	str	r2, [r0, #4]
   12c2c:	9900      	ldr	r1, [sp, #0]
   12c2e:	9a01      	ldr	r2, [sp, #4]
   12c30:	6081      	str	r1, [r0, #8]
   12c32:	60c2      	str	r2, [r0, #12]
   12c34:	6103      	str	r3, [r0, #16]
   12c36:	f8c0 c014 	str.w	ip, [r0, #20]
   12c3a:	b006      	add	sp, #24
   12c3c:	bd80      	pop	{r7, pc}

00012c3e <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
   12c3e:	b580      	push	{r7, lr}
   12c40:	b084      	sub	sp, #16
   12c42:	9101      	str	r1, [sp, #4]
   12c44:	9202      	str	r2, [sp, #8]
   12c46:	9901      	ldr	r1, [sp, #4]
   12c48:	9a02      	ldr	r2, [sp, #8]
   12c4a:	f000 fa94 	bl	13176 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
   12c4e:	e7ff      	b.n	12c50 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
   12c50:	b004      	add	sp, #16
   12c52:	bd80      	pop	{r7, pc}

00012c54 <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
   12c54:	b081      	sub	sp, #4
   12c56:	9000      	str	r0, [sp, #0]
   12c58:	b001      	add	sp, #4
   12c5a:	4770      	bx	lr

00012c5c <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
   12c5c:	b081      	sub	sp, #4
   12c5e:	9000      	str	r0, [sp, #0]
   12c60:	b001      	add	sp, #4
   12c62:	4770      	bx	lr

00012c64 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
   12c64:	b580      	push	{r7, lr}
   12c66:	b086      	sub	sp, #24
   12c68:	460a      	mov	r2, r1
   12c6a:	9004      	str	r0, [sp, #16]
   12c6c:	f88d 1017 	strb.w	r1, [sp, #23]
   12c70:	9203      	str	r2, [sp, #12]
   12c72:	f7ff fff3 	bl	12c5c <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   12c76:	9002      	str	r0, [sp, #8]
   12c78:	e7ff      	b.n	12c7a <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
   12c7a:	9802      	ldr	r0, [sp, #8]
   12c7c:	9903      	ldr	r1, [sp, #12]
   12c7e:	f000 f805 	bl	12c8c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   12c82:	9001      	str	r0, [sp, #4]
   12c84:	e7ff      	b.n	12c86 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
   12c86:	9801      	ldr	r0, [sp, #4]
   12c88:	b006      	add	sp, #24
   12c8a:	bd80      	pop	{r7, pc}

00012c8c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
   12c8c:	b086      	sub	sp, #24
   12c8e:	460a      	mov	r2, r1
   12c90:	f88d 100f 	strb.w	r1, [sp, #15]
   12c94:	9005      	str	r0, [sp, #20]
   12c96:	f89d 100f 	ldrb.w	r1, [sp, #15]
   12c9a:	9002      	str	r0, [sp, #8]
   12c9c:	9101      	str	r1, [sp, #4]
   12c9e:	9901      	ldr	r1, [sp, #4]
   12ca0:	e8df f001 	tbb	[pc, r1]
   12ca4:	03102317 	.word	0x03102317
   12ca8:	001c      	.short	0x001c
   12caa:	f647 006c 	movw	r0, #30828	; 0x786c
   12cae:	f2c0 0002 	movt	r0, #2
   12cb2:	f647 02e8 	movw	r2, #30952	; 0x78e8
   12cb6:	f2c0 0202 	movt	r2, #2
   12cba:	2131      	movs	r1, #49	; 0x31
   12cbc:	f005 fcee 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12cc0:	defe      	udf	#254	; 0xfe
   12cc2:	defe      	udf	#254	; 0xfe
   12cc4:	9802      	ldr	r0, [sp, #8]
   12cc6:	6801      	ldr	r1, [r0, #0]
   12cc8:	f3bf 8f5f 	dmb	sy
   12ccc:	9104      	str	r1, [sp, #16]
   12cce:	e7ff      	b.n	12cd0 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
   12cd0:	e017      	b.n	12d02 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   12cd2:	9802      	ldr	r0, [sp, #8]
   12cd4:	6801      	ldr	r1, [r0, #0]
   12cd6:	9104      	str	r1, [sp, #16]
   12cd8:	e7ff      	b.n	12cda <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
   12cda:	e012      	b.n	12d02 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   12cdc:	9802      	ldr	r0, [sp, #8]
   12cde:	6801      	ldr	r1, [r0, #0]
   12ce0:	f3bf 8f5f 	dmb	sy
   12ce4:	9104      	str	r1, [sp, #16]
   12ce6:	e7ff      	b.n	12ce8 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
   12ce8:	e00b      	b.n	12d02 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   12cea:	f647 00f8 	movw	r0, #30968	; 0x78f8
   12cee:	f2c0 0002 	movt	r0, #2
   12cf2:	f647 02e8 	movw	r2, #30952	; 0x78e8
   12cf6:	f2c0 0202 	movt	r2, #2
   12cfa:	2128      	movs	r1, #40	; 0x28
   12cfc:	f005 fcce 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12d00:	defe      	udf	#254	; 0xfe
   12d02:	9804      	ldr	r0, [sp, #16]
   12d04:	b006      	add	sp, #24
   12d06:	4770      	bx	lr

00012d08 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
   12d08:	b081      	sub	sp, #4
   12d0a:	9000      	str	r0, [sp, #0]
   12d0c:	6800      	ldr	r0, [r0, #0]
   12d0e:	b001      	add	sp, #4
   12d10:	4770      	bx	lr

00012d12 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
   12d12:	b082      	sub	sp, #8
   12d14:	9001      	str	r0, [sp, #4]
   12d16:	6801      	ldr	r1, [r0, #0]
   12d18:	6840      	ldr	r0, [r0, #4]
   12d1a:	9000      	str	r0, [sp, #0]
   12d1c:	4608      	mov	r0, r1
   12d1e:	9900      	ldr	r1, [sp, #0]
   12d20:	b002      	add	sp, #8
   12d22:	4770      	bx	lr

00012d24 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
   12d24:	b580      	push	{r7, lr}
   12d26:	b08c      	sub	sp, #48	; 0x30
   12d28:	9101      	str	r1, [sp, #4]
   12d2a:	9202      	str	r2, [sp, #8]
   12d2c:	2100      	movs	r1, #0
   12d2e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   12d32:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   12d36:	2101      	movs	r1, #1
   12d38:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   12d3c:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   12d40:	9901      	ldr	r1, [sp, #4]
   12d42:	2900      	cmp	r1, #0
   12d44:	460a      	mov	r2, r1
   12d46:	bf18      	it	ne
   12d48:	2201      	movne	r2, #1
   12d4a:	2900      	cmp	r1, #0
   12d4c:	9000      	str	r0, [sp, #0]
   12d4e:	d001      	beq.n	12d54 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
   12d50:	e7ff      	b.n	12d52 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
   12d52:	e008      	b.n	12d66 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
   12d54:	2000      	movs	r0, #0
   12d56:	9900      	ldr	r1, [sp, #0]
   12d58:	6088      	str	r0, [r1, #8]
   12d5a:	6048      	str	r0, [r1, #4]
   12d5c:	6008      	str	r0, [r1, #0]
   12d5e:	2002      	movs	r0, #2
   12d60:	6008      	str	r0, [r1, #0]
   12d62:	e021      	b.n	12da8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   12d64:	defe      	udf	#254	; 0xfe
   12d66:	2000      	movs	r0, #0
   12d68:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12d6c:	9901      	ldr	r1, [sp, #4]
   12d6e:	9a02      	ldr	r2, [sp, #8]
   12d70:	910a      	str	r1, [sp, #40]	; 0x28
   12d72:	920b      	str	r2, [sp, #44]	; 0x2c
   12d74:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   12d78:	9106      	str	r1, [sp, #24]
   12d7a:	9207      	str	r2, [sp, #28]
   12d7c:	9906      	ldr	r1, [sp, #24]
   12d7e:	9a07      	ldr	r2, [sp, #28]
   12d80:	a803      	add	r0, sp, #12
   12d82:	f7ff ff5c 	bl	12c3e <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
   12d86:	e7ff      	b.n	12d88 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
   12d88:	9803      	ldr	r0, [sp, #12]
   12d8a:	9904      	ldr	r1, [sp, #16]
   12d8c:	9a05      	ldr	r2, [sp, #20]
   12d8e:	9b00      	ldr	r3, [sp, #0]
   12d90:	609a      	str	r2, [r3, #8]
   12d92:	6059      	str	r1, [r3, #4]
   12d94:	6018      	str	r0, [r3, #0]
   12d96:	e007      	b.n	12da8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   12d98:	9801      	ldr	r0, [sp, #4]
   12d9a:	2800      	cmp	r0, #0
   12d9c:	d10c      	bne.n	12db8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
   12d9e:	e015      	b.n	12dcc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
   12da0:	2000      	movs	r0, #0
   12da2:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   12da6:	e7f7      	b.n	12d98 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   12da8:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   12dac:	07c0      	lsls	r0, r0, #31
   12dae:	2800      	cmp	r0, #0
   12db0:	d1f6      	bne.n	12da0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
   12db2:	e7f1      	b.n	12d98 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   12db4:	b00c      	add	sp, #48	; 0x30
   12db6:	bd80      	pop	{r7, pc}
   12db8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   12dbc:	07c0      	lsls	r0, r0, #31
   12dbe:	2800      	cmp	r0, #0
   12dc0:	d0f8      	beq.n	12db4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   12dc2:	e7ff      	b.n	12dc4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
   12dc4:	2000      	movs	r0, #0
   12dc6:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   12dca:	e7f3      	b.n	12db4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   12dcc:	e7f2      	b.n	12db4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

00012dce <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>:
   12dce:	b081      	sub	sp, #4
   12dd0:	b001      	add	sp, #4
   12dd2:	4770      	bx	lr

00012dd4 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
   12dd4:	b5b0      	push	{r4, r5, r7, lr}
   12dd6:	b081      	sub	sp, #4
   12dd8:	9100      	str	r1, [sp, #0]
   12dda:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   12dde:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   12de2:	b001      	add	sp, #4
   12de4:	bdb0      	pop	{r4, r5, r7, pc}

00012de6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
   12de6:	b580      	push	{r7, lr}
   12de8:	b088      	sub	sp, #32
   12dea:	9106      	str	r1, [sp, #24]
   12dec:	680a      	ldr	r2, [r1, #0]
   12dee:	1e93      	subs	r3, r2, #2
   12df0:	bf18      	it	ne
   12df2:	2301      	movne	r3, #1
   12df4:	2a02      	cmp	r2, #2
   12df6:	9102      	str	r1, [sp, #8]
   12df8:	9001      	str	r0, [sp, #4]
   12dfa:	d001      	beq.n	12e00 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
   12dfc:	e7ff      	b.n	12dfe <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
   12dfe:	e008      	b.n	12e12 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
   12e00:	2000      	movs	r0, #0
   12e02:	9901      	ldr	r1, [sp, #4]
   12e04:	6088      	str	r0, [r1, #8]
   12e06:	6048      	str	r0, [r1, #4]
   12e08:	6008      	str	r0, [r1, #0]
   12e0a:	2002      	movs	r0, #2
   12e0c:	6008      	str	r0, [r1, #0]
   12e0e:	e00f      	b.n	12e30 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   12e10:	defe      	udf	#254	; 0xfe
   12e12:	9802      	ldr	r0, [sp, #8]
   12e14:	9007      	str	r0, [sp, #28]
   12e16:	a803      	add	r0, sp, #12
   12e18:	9902      	ldr	r1, [sp, #8]
   12e1a:	f000 f9b5 	bl	13188 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
   12e1e:	e7ff      	b.n	12e20 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
   12e20:	9803      	ldr	r0, [sp, #12]
   12e22:	9904      	ldr	r1, [sp, #16]
   12e24:	9a05      	ldr	r2, [sp, #20]
   12e26:	9b01      	ldr	r3, [sp, #4]
   12e28:	609a      	str	r2, [r3, #8]
   12e2a:	6059      	str	r1, [r3, #4]
   12e2c:	6018      	str	r0, [r3, #0]
   12e2e:	e7ff      	b.n	12e30 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   12e30:	b008      	add	sp, #32
   12e32:	bd80      	pop	{r7, pc}

00012e34 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
   12e34:	b580      	push	{r7, lr}
   12e36:	b086      	sub	sp, #24
   12e38:	9004      	str	r0, [sp, #16]
   12e3a:	6801      	ldr	r1, [r0, #0]
   12e3c:	2900      	cmp	r1, #0
   12e3e:	9001      	str	r0, [sp, #4]
   12e40:	d001      	beq.n	12e46 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
   12e42:	e7ff      	b.n	12e44 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
   12e44:	e003      	b.n	12e4e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
   12e46:	2000      	movs	r0, #0
   12e48:	9002      	str	r0, [sp, #8]
   12e4a:	e00d      	b.n	12e68 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   12e4c:	defe      	udf	#254	; 0xfe
   12e4e:	9801      	ldr	r0, [sp, #4]
   12e50:	1d01      	adds	r1, r0, #4
   12e52:	9105      	str	r1, [sp, #20]
   12e54:	4608      	mov	r0, r1
   12e56:	f7ff ff57 	bl	12d08 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
   12e5a:	9000      	str	r0, [sp, #0]
   12e5c:	e7ff      	b.n	12e5e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
   12e5e:	9800      	ldr	r0, [sp, #0]
   12e60:	9003      	str	r0, [sp, #12]
   12e62:	2101      	movs	r1, #1
   12e64:	9102      	str	r1, [sp, #8]
   12e66:	e7ff      	b.n	12e68 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   12e68:	9802      	ldr	r0, [sp, #8]
   12e6a:	9903      	ldr	r1, [sp, #12]
   12e6c:	b006      	add	sp, #24
   12e6e:	bd80      	pop	{r7, pc}

00012e70 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
   12e70:	b081      	sub	sp, #4
   12e72:	9000      	str	r0, [sp, #0]
        *self
   12e74:	6800      	ldr	r0, [r0, #0]
    }
   12e76:	b001      	add	sp, #4
   12e78:	4770      	bx	lr

00012e7a <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
   12e7a:	b580      	push	{r7, lr}
        RecordBuilder::new()
   12e7c:	f000 f802 	bl	12e84 <_ZN3log13RecordBuilder3new17haca8312579858419E>
   12e80:	e7ff      	b.n	12e82 <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
   12e82:	bd80      	pop	{r7, pc}

00012e84 <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
   12e84:	b570      	push	{r4, r5, r6, lr}
   12e86:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
   12e88:	f647 1138 	movw	r1, #31032	; 0x7938
   12e8c:	f2c0 0102 	movt	r1, #2
   12e90:	6809      	ldr	r1, [r1, #0]
   12e92:	466a      	mov	r2, sp
   12e94:	2300      	movs	r3, #0
   12e96:	6013      	str	r3, [r2, #0]
   12e98:	aa16      	add	r2, sp, #88	; 0x58
   12e9a:	9004      	str	r0, [sp, #16]
   12e9c:	4610      	mov	r0, r2
   12e9e:	9103      	str	r1, [sp, #12]
   12ea0:	461a      	mov	r2, r3
   12ea2:	9b03      	ldr	r3, [sp, #12]
   12ea4:	f7ff feaf 	bl	12c06 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
   12ea8:	e7ff      	b.n	12eaa <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
   12eaa:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
   12eac:	f000 f891 	bl	12fd2 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
   12eb0:	e7ff      	b.n	12eb2 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
   12eb2:	a81c      	add	r0, sp, #112	; 0x70
   12eb4:	a91f      	add	r1, sp, #124	; 0x7c
   12eb6:	f000 f8a5 	bl	13004 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
   12eba:	e7ff      	b.n	12ebc <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
   12ebc:	2000      	movs	r0, #0
                module_path: None,
   12ebe:	9024      	str	r0, [sp, #144]	; 0x90
   12ec0:	9023      	str	r0, [sp, #140]	; 0x8c
   12ec2:	9022      	str	r0, [sp, #136]	; 0x88
   12ec4:	2102      	movs	r1, #2
   12ec6:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
   12ec8:	9027      	str	r0, [sp, #156]	; 0x9c
   12eca:	9026      	str	r0, [sp, #152]	; 0x98
   12ecc:	9025      	str	r0, [sp, #148]	; 0x94
   12ece:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
   12ed0:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
   12ed2:	981c      	ldr	r0, [sp, #112]	; 0x70
   12ed4:	991d      	ldr	r1, [sp, #116]	; 0x74
   12ed6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12ed8:	9207      	str	r2, [sp, #28]
   12eda:	9106      	str	r1, [sp, #24]
   12edc:	9005      	str	r0, [sp, #20]
   12ede:	a805      	add	r0, sp, #20
   12ee0:	f100 010c 	add.w	r1, r0, #12
   12ee4:	aa16      	add	r2, sp, #88	; 0x58
   12ee6:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   12eea:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   12eee:	9922      	ldr	r1, [sp, #136]	; 0x88
   12ef0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   12ef2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   12ef4:	9310      	str	r3, [sp, #64]	; 0x40
   12ef6:	920f      	str	r2, [sp, #60]	; 0x3c
   12ef8:	910e      	str	r1, [sp, #56]	; 0x38
   12efa:	9925      	ldr	r1, [sp, #148]	; 0x94
   12efc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   12efe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   12f00:	9313      	str	r3, [sp, #76]	; 0x4c
   12f02:	9212      	str	r2, [sp, #72]	; 0x48
   12f04:	9111      	str	r1, [sp, #68]	; 0x44
   12f06:	9928      	ldr	r1, [sp, #160]	; 0xa0
   12f08:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   12f0a:	9114      	str	r1, [sp, #80]	; 0x50
   12f0c:	9215      	str	r2, [sp, #84]	; 0x54
   12f0e:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
   12f10:	9904      	ldr	r1, [sp, #16]
   12f12:	9002      	str	r0, [sp, #8]
   12f14:	4608      	mov	r0, r1
   12f16:	9902      	ldr	r1, [sp, #8]
   12f18:	f00b ff94 	bl	1ee44 <__aeabi_memcpy>
    }
   12f1c:	b02a      	add	sp, #168	; 0xa8
   12f1e:	bd70      	pop	{r4, r5, r6, pc}

00012f20 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
   12f20:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f22:	b087      	sub	sp, #28
   12f24:	9006      	str	r0, [sp, #24]
   12f26:	466a      	mov	r2, sp
        self.record.args = args;
   12f28:	4613      	mov	r3, r2
   12f2a:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
   12f2e:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
   12f32:	f100 010c 	add.w	r1, r0, #12
   12f36:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   12f3a:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
   12f3e:	b007      	add	sp, #28
   12f40:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012f42 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
   12f42:	b082      	sub	sp, #8
   12f44:	9000      	str	r0, [sp, #0]
   12f46:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
   12f48:	6001      	str	r1, [r0, #0]
    }
   12f4a:	b002      	add	sp, #8
   12f4c:	4770      	bx	lr

00012f4e <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
   12f4e:	b083      	sub	sp, #12
   12f50:	9000      	str	r0, [sp, #0]
   12f52:	9101      	str	r1, [sp, #4]
   12f54:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
   12f56:	6041      	str	r1, [r0, #4]
   12f58:	6082      	str	r2, [r0, #8]
    }
   12f5a:	b003      	add	sp, #12
   12f5c:	4770      	bx	lr

00012f5e <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
   12f5e:	b580      	push	{r7, lr}
   12f60:	b088      	sub	sp, #32
   12f62:	9005      	str	r0, [sp, #20]
   12f64:	9106      	str	r1, [sp, #24]
   12f66:	9207      	str	r2, [sp, #28]
   12f68:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
   12f6a:	9001      	str	r0, [sp, #4]
   12f6c:	4618      	mov	r0, r3
   12f6e:	f7ff fed9 	bl	12d24 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   12f72:	e7ff      	b.n	12f74 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
   12f74:	9802      	ldr	r0, [sp, #8]
   12f76:	9903      	ldr	r1, [sp, #12]
   12f78:	9a04      	ldr	r2, [sp, #16]
   12f7a:	9b01      	ldr	r3, [sp, #4]
   12f7c:	62da      	str	r2, [r3, #44]	; 0x2c
   12f7e:	6299      	str	r1, [r3, #40]	; 0x28
   12f80:	6258      	str	r0, [r3, #36]	; 0x24
    }
   12f82:	4618      	mov	r0, r3
   12f84:	b008      	add	sp, #32
   12f86:	bd80      	pop	{r7, pc}

00012f88 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
   12f88:	b580      	push	{r7, lr}
   12f8a:	b088      	sub	sp, #32
   12f8c:	9005      	str	r0, [sp, #20]
   12f8e:	9106      	str	r1, [sp, #24]
   12f90:	9207      	str	r2, [sp, #28]
   12f92:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
   12f94:	9001      	str	r0, [sp, #4]
   12f96:	4618      	mov	r0, r3
   12f98:	f7ff fec4 	bl	12d24 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   12f9c:	e7ff      	b.n	12f9e <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
   12f9e:	9802      	ldr	r0, [sp, #8]
   12fa0:	9903      	ldr	r1, [sp, #12]
   12fa2:	9a04      	ldr	r2, [sp, #16]
   12fa4:	9b01      	ldr	r3, [sp, #4]
   12fa6:	639a      	str	r2, [r3, #56]	; 0x38
   12fa8:	6359      	str	r1, [r3, #52]	; 0x34
   12faa:	6318      	str	r0, [r3, #48]	; 0x30
    }
   12fac:	4618      	mov	r0, r3
   12fae:	b008      	add	sp, #32
   12fb0:	bd80      	pop	{r7, pc}

00012fb2 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
   12fb2:	b083      	sub	sp, #12
   12fb4:	9000      	str	r0, [sp, #0]
   12fb6:	9101      	str	r1, [sp, #4]
   12fb8:	9202      	str	r2, [sp, #8]
        self.record.line = line;
   12fba:	63c1      	str	r1, [r0, #60]	; 0x3c
   12fbc:	6402      	str	r2, [r0, #64]	; 0x40
    }
   12fbe:	b003      	add	sp, #12
   12fc0:	4770      	bx	lr

00012fc2 <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
   12fc2:	b580      	push	{r7, lr}
   12fc4:	b082      	sub	sp, #8
   12fc6:	9101      	str	r1, [sp, #4]
        self.record.clone()
   12fc8:	f000 f8e8 	bl	1319c <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
   12fcc:	e7ff      	b.n	12fce <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
   12fce:	b002      	add	sp, #8
   12fd0:	bd80      	pop	{r7, pc}

00012fd2 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
   12fd2:	b580      	push	{r7, lr}
        MetadataBuilder::new()
   12fd4:	f000 f802 	bl	12fdc <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
   12fd8:	e7ff      	b.n	12fda <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
   12fda:	bd80      	pop	{r7, pc}

00012fdc <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
   12fdc:	b084      	sub	sp, #16
   12fde:	2103      	movs	r1, #3
                level: Level::Info,
   12fe0:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
   12fe2:	9903      	ldr	r1, [sp, #12]
   12fe4:	9100      	str	r1, [sp, #0]
   12fe6:	f647 1120 	movw	r1, #31008	; 0x7920
   12fea:	f2c0 0102 	movt	r1, #2
   12fee:	9101      	str	r1, [sp, #4]
   12ff0:	2100      	movs	r1, #0
   12ff2:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
   12ff4:	9900      	ldr	r1, [sp, #0]
   12ff6:	9a01      	ldr	r2, [sp, #4]
   12ff8:	9b02      	ldr	r3, [sp, #8]
   12ffa:	6083      	str	r3, [r0, #8]
   12ffc:	6042      	str	r2, [r0, #4]
   12ffe:	6001      	str	r1, [r0, #0]
    }
   13000:	b004      	add	sp, #16
   13002:	4770      	bx	lr

00013004 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
   13004:	b580      	push	{r7, lr}
   13006:	b082      	sub	sp, #8
   13008:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
   1300a:	f000 f91c 	bl	13246 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   1300e:	e7ff      	b.n	13010 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
   13010:	b002      	add	sp, #8
   13012:	bd80      	pop	{r7, pc}

00013014 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
   13014:	b082      	sub	sp, #8
   13016:	9000      	str	r0, [sp, #0]
   13018:	9101      	str	r1, [sp, #4]
   1301a:	2000      	movs	r0, #0
    }
   1301c:	b002      	add	sp, #8
   1301e:	4770      	bx	lr

00013020 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
   13020:	b082      	sub	sp, #8
   13022:	9000      	str	r0, [sp, #0]
   13024:	9101      	str	r1, [sp, #4]
   13026:	b002      	add	sp, #8
   13028:	4770      	bx	lr

0001302a <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
   1302a:	b081      	sub	sp, #4
   1302c:	9000      	str	r0, [sp, #0]
   1302e:	b001      	add	sp, #4
   13030:	4770      	bx	lr

00013032 <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
   13032:	b580      	push	{r7, lr}
   13034:	b084      	sub	sp, #16
   13036:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   13038:	f88d 000f 	strb.w	r0, [sp, #15]
   1303c:	f89d 100f 	ldrb.w	r1, [sp, #15]
   13040:	f644 2068 	movw	r0, #19048	; 0x4a68
   13044:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13048:	f7ff fe0c 	bl	12c64 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
   1304c:	9000      	str	r0, [sp, #0]
   1304e:	e7ff      	b.n	13050 <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
   13050:	9800      	ldr	r0, [sp, #0]
   13052:	2802      	cmp	r0, #2
   13054:	d109      	bne.n	1306a <_ZN3log6logger17hf609e7cc1c031552E+0x38>
   13056:	e7ff      	b.n	13058 <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
   13058:	f240 00f0 	movw	r0, #240	; 0xf0
   1305c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13060:	6801      	ldr	r1, [r0, #0]
   13062:	6840      	ldr	r0, [r0, #4]
   13064:	9101      	str	r1, [sp, #4]
   13066:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   13068:	e00a      	b.n	13080 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
   1306a:	f647 1054 	movw	r0, #31060	; 0x7954
   1306e:	f2c0 0002 	movt	r0, #2
   13072:	9001      	str	r0, [sp, #4]
   13074:	f647 103c 	movw	r0, #31036	; 0x793c
   13078:	f2c0 0002 	movt	r0, #2
   1307c:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   1307e:	e7ff      	b.n	13080 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
   13080:	9801      	ldr	r0, [sp, #4]
   13082:	9902      	ldr	r1, [sp, #8]
        }
    }
}
   13084:	b004      	add	sp, #16
   13086:	bd80      	pop	{r7, pc}

00013088 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
   13088:	b570      	push	{r4, r5, r6, lr}
   1308a:	b0ca      	sub	sp, #296	; 0x128
   1308c:	9141      	str	r1, [sp, #260]	; 0x104
   1308e:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
   13090:	6813      	ldr	r3, [r2, #0]
   13092:	f8d2 c004 	ldr.w	ip, [r2, #4]
   13096:	9343      	str	r3, [sp, #268]	; 0x10c
   13098:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
   1309c:	f8d2 e008 	ldr.w	lr, [r2, #8]
   130a0:	68d4      	ldr	r4, [r2, #12]
   130a2:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
   130a6:	9446      	str	r4, [sp, #280]	; 0x118
   130a8:	6915      	ldr	r5, [r2, #16]
   130aa:	6956      	ldr	r6, [r2, #20]
   130ac:	9547      	str	r5, [sp, #284]	; 0x11c
   130ae:	9648      	str	r6, [sp, #288]	; 0x120
   130b0:	6992      	ldr	r2, [r2, #24]
   130b2:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
   130b4:	9112      	str	r1, [sp, #72]	; 0x48
   130b6:	9011      	str	r0, [sp, #68]	; 0x44
   130b8:	9310      	str	r3, [sp, #64]	; 0x40
   130ba:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   130be:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   130c2:	940d      	str	r4, [sp, #52]	; 0x34
   130c4:	950c      	str	r5, [sp, #48]	; 0x30
   130c6:	960b      	str	r6, [sp, #44]	; 0x2c
   130c8:	920a      	str	r2, [sp, #40]	; 0x28
   130ca:	f7ff ffb2 	bl	13032 <_ZN3log6logger17hf609e7cc1c031552E>
   130ce:	9009      	str	r0, [sp, #36]	; 0x24
   130d0:	9108      	str	r1, [sp, #32]
   130d2:	e7ff      	b.n	130d4 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
   130d4:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
   130d6:	f7ff fed0 	bl	12e7a <_ZN3log6Record7builder17hde62ab0132265febE>
   130da:	e7ff      	b.n	130dc <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
   130dc:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
   130de:	4601      	mov	r1, r0
   130e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   130e2:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   130e6:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   130ea:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
   130ec:	9007      	str	r0, [sp, #28]
   130ee:	4608      	mov	r0, r1
   130f0:	9907      	ldr	r1, [sp, #28]
   130f2:	f7ff ff15 	bl	12f20 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
   130f6:	9006      	str	r0, [sp, #24]
   130f8:	e7ff      	b.n	130fa <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
   130fa:	9806      	ldr	r0, [sp, #24]
   130fc:	9912      	ldr	r1, [sp, #72]	; 0x48
   130fe:	f7ff ff20 	bl	12f42 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
   13102:	9005      	str	r0, [sp, #20]
   13104:	e7ff      	b.n	13106 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
   13106:	9805      	ldr	r0, [sp, #20]
   13108:	9910      	ldr	r1, [sp, #64]	; 0x40
   1310a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1310c:	f7ff ff1f 	bl	12f4e <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
   13110:	9004      	str	r0, [sp, #16]
   13112:	e7ff      	b.n	13114 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
   13114:	980e      	ldr	r0, [sp, #56]	; 0x38
   13116:	903b      	str	r0, [sp, #236]	; 0xec
   13118:	990d      	ldr	r1, [sp, #52]	; 0x34
   1311a:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
   1311c:	993b      	ldr	r1, [sp, #236]	; 0xec
   1311e:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   13120:	9804      	ldr	r0, [sp, #16]
   13122:	f7ff ff1c 	bl	12f5e <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
   13126:	9003      	str	r0, [sp, #12]
   13128:	e7ff      	b.n	1312a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
   1312a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1312c:	903d      	str	r0, [sp, #244]	; 0xf4
   1312e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13130:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
   13132:	993d      	ldr	r1, [sp, #244]	; 0xf4
   13134:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
   13136:	9803      	ldr	r0, [sp, #12]
   13138:	f7ff ff26 	bl	12f88 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
   1313c:	9002      	str	r0, [sp, #8]
   1313e:	e7ff      	b.n	13140 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
   13140:	980a      	ldr	r0, [sp, #40]	; 0x28
   13142:	9040      	str	r0, [sp, #256]	; 0x100
   13144:	2101      	movs	r1, #1
   13146:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
   13148:	993f      	ldr	r1, [sp, #252]	; 0xfc
   1314a:	9a40      	ldr	r2, [sp, #256]	; 0x100
   1314c:	9802      	ldr	r0, [sp, #8]
   1314e:	f7ff ff30 	bl	12fb2 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
   13152:	9001      	str	r0, [sp, #4]
   13154:	e7ff      	b.n	13156 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
   13156:	a813      	add	r0, sp, #76	; 0x4c
   13158:	9901      	ldr	r1, [sp, #4]
   1315a:	f7ff ff32 	bl	12fc2 <_ZN3log13RecordBuilder5build17h83529556a009112eE>
   1315e:	e7ff      	b.n	13160 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
   13160:	9808      	ldr	r0, [sp, #32]
   13162:	6901      	ldr	r1, [r0, #16]
   13164:	aa13      	add	r2, sp, #76	; 0x4c
   13166:	9809      	ldr	r0, [sp, #36]	; 0x24
   13168:	9100      	str	r1, [sp, #0]
   1316a:	4611      	mov	r1, r2
   1316c:	9a00      	ldr	r2, [sp, #0]
   1316e:	4790      	blx	r2
   13170:	e7ff      	b.n	13172 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
   13172:	b04a      	add	sp, #296	; 0x128
   13174:	bd70      	pop	{r4, r5, r6, pc}

00013176 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
   13176:	b082      	sub	sp, #8
   13178:	9100      	str	r1, [sp, #0]
   1317a:	9201      	str	r2, [sp, #4]
   1317c:	6041      	str	r1, [r0, #4]
   1317e:	6082      	str	r2, [r0, #8]
   13180:	2100      	movs	r1, #0
   13182:	6001      	str	r1, [r0, #0]
   13184:	b002      	add	sp, #8
   13186:	4770      	bx	lr

00013188 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   13188:	b081      	sub	sp, #4
   1318a:	9100      	str	r1, [sp, #0]
   1318c:	680a      	ldr	r2, [r1, #0]
   1318e:	684b      	ldr	r3, [r1, #4]
   13190:	6889      	ldr	r1, [r1, #8]
   13192:	6081      	str	r1, [r0, #8]
   13194:	6043      	str	r3, [r0, #4]
   13196:	6002      	str	r2, [r0, #0]
   13198:	b001      	add	sp, #4
   1319a:	4770      	bx	lr

0001319c <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
   1319c:	b570      	push	{r4, r5, r6, lr}
   1319e:	b09c      	sub	sp, #112	; 0x70
   131a0:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
   131a2:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
   131a4:	f101 020c 	add.w	r2, r1, #12
   131a8:	4613      	mov	r3, r2
   131aa:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
   131ac:	f101 0224 	add.w	r2, r1, #36	; 0x24
   131b0:	4694      	mov	ip, r2
   131b2:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
   131b4:	f101 0230 	add.w	r2, r1, #48	; 0x30
   131b8:	4696      	mov	lr, r2
   131ba:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
   131bc:	f101 023c 	add.w	r2, r1, #60	; 0x3c
   131c0:	4614      	mov	r4, r2
   131c2:	921b      	str	r2, [sp, #108]	; 0x6c
   131c4:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
   131c6:	9006      	str	r0, [sp, #24]
   131c8:	4610      	mov	r0, r2
   131ca:	9305      	str	r3, [sp, #20]
   131cc:	f8cd c010 	str.w	ip, [sp, #16]
   131d0:	f8cd e00c 	str.w	lr, [sp, #12]
   131d4:	9402      	str	r4, [sp, #8]
   131d6:	f000 f836 	bl	13246 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   131da:	e7ff      	b.n	131dc <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
   131dc:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
   131de:	9905      	ldr	r1, [sp, #20]
   131e0:	f7ff fdf8 	bl	12dd4 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
   131e4:	e7ff      	b.n	131e6 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
   131e6:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
   131e8:	9904      	ldr	r1, [sp, #16]
   131ea:	f7ff fdfc 	bl	12de6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   131ee:	e7ff      	b.n	131f0 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
   131f0:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
   131f2:	9903      	ldr	r1, [sp, #12]
   131f4:	f7ff fdf7 	bl	12de6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   131f8:	e7ff      	b.n	131fa <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
   131fa:	9802      	ldr	r0, [sp, #8]
   131fc:	f7ff fe1a 	bl	12e34 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
   13200:	9001      	str	r0, [sp, #4]
   13202:	9100      	str	r1, [sp, #0]
   13204:	e7ff      	b.n	13206 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
   13206:	9807      	ldr	r0, [sp, #28]
   13208:	9908      	ldr	r1, [sp, #32]
   1320a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1320c:	9b06      	ldr	r3, [sp, #24]
   1320e:	609a      	str	r2, [r3, #8]
   13210:	6059      	str	r1, [r3, #4]
   13212:	6018      	str	r0, [r3, #0]
   13214:	f103 000c 	add.w	r0, r3, #12
   13218:	a90a      	add	r1, sp, #40	; 0x28
   1321a:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
   1321e:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
   13222:	9810      	ldr	r0, [sp, #64]	; 0x40
   13224:	9911      	ldr	r1, [sp, #68]	; 0x44
   13226:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13228:	62da      	str	r2, [r3, #44]	; 0x2c
   1322a:	6299      	str	r1, [r3, #40]	; 0x28
   1322c:	6258      	str	r0, [r3, #36]	; 0x24
   1322e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13230:	9914      	ldr	r1, [sp, #80]	; 0x50
   13232:	9a15      	ldr	r2, [sp, #84]	; 0x54
   13234:	639a      	str	r2, [r3, #56]	; 0x38
   13236:	6359      	str	r1, [r3, #52]	; 0x34
   13238:	6318      	str	r0, [r3, #48]	; 0x30
   1323a:	9801      	ldr	r0, [sp, #4]
   1323c:	63d8      	str	r0, [r3, #60]	; 0x3c
   1323e:	9900      	ldr	r1, [sp, #0]
   13240:	6419      	str	r1, [r3, #64]	; 0x40
   13242:	b01c      	add	sp, #112	; 0x70
   13244:	bd70      	pop	{r4, r5, r6, pc}

00013246 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   13246:	b580      	push	{r7, lr}
   13248:	b088      	sub	sp, #32
   1324a:	9105      	str	r1, [sp, #20]
    level: Level,
   1324c:	9106      	str	r1, [sp, #24]
    target: &'a str,
   1324e:	1d0a      	adds	r2, r1, #4
   13250:	4613      	mov	r3, r2
   13252:	9207      	str	r2, [sp, #28]
    level: Level,
   13254:	9004      	str	r0, [sp, #16]
   13256:	4608      	mov	r0, r1
   13258:	9303      	str	r3, [sp, #12]
   1325a:	f7ff fe09 	bl	12e70 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
   1325e:	9002      	str	r0, [sp, #8]
   13260:	e7ff      	b.n	13262 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
   13262:	9803      	ldr	r0, [sp, #12]
   13264:	f7ff fd55 	bl	12d12 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
   13268:	9001      	str	r0, [sp, #4]
   1326a:	9100      	str	r1, [sp, #0]
   1326c:	e7ff      	b.n	1326e <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   1326e:	9802      	ldr	r0, [sp, #8]
   13270:	9904      	ldr	r1, [sp, #16]
   13272:	6008      	str	r0, [r1, #0]
   13274:	9a01      	ldr	r2, [sp, #4]
   13276:	604a      	str	r2, [r1, #4]
   13278:	9b00      	ldr	r3, [sp, #0]
   1327a:	608b      	str	r3, [r1, #8]
   1327c:	b008      	add	sp, #32
   1327e:	bd80      	pop	{r7, pc}

00013280 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   13280:	b580      	push	{r7, lr}
   13282:	b084      	sub	sp, #16
   13284:	9002      	str	r0, [sp, #8]
   13286:	9103      	str	r1, [sp, #12]
   13288:	6800      	ldr	r0, [r0, #0]
   1328a:	f000 f81c 	bl	132c6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   1328e:	9001      	str	r0, [sp, #4]
   13290:	e7ff      	b.n	13292 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   13292:	9801      	ldr	r0, [sp, #4]
   13294:	f000 0001 	and.w	r0, r0, #1
   13298:	b004      	add	sp, #16
   1329a:	bd80      	pop	{r7, pc}

0001329c <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   1329c:	b089      	sub	sp, #36	; 0x24
   1329e:	9005      	str	r0, [sp, #20]
   132a0:	9106      	str	r1, [sp, #24]
   132a2:	9107      	str	r1, [sp, #28]
   132a4:	9907      	ldr	r1, [sp, #28]
   132a6:	9002      	str	r0, [sp, #8]
   132a8:	9101      	str	r1, [sp, #4]
   132aa:	e7ff      	b.n	132ac <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   132ac:	9802      	ldr	r0, [sp, #8]
   132ae:	9008      	str	r0, [sp, #32]
   132b0:	9908      	ldr	r1, [sp, #32]
   132b2:	9100      	str	r1, [sp, #0]
   132b4:	e7ff      	b.n	132b6 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   132b6:	9800      	ldr	r0, [sp, #0]
   132b8:	9003      	str	r0, [sp, #12]
   132ba:	9901      	ldr	r1, [sp, #4]
   132bc:	9104      	str	r1, [sp, #16]
   132be:	9803      	ldr	r0, [sp, #12]
   132c0:	9904      	ldr	r1, [sp, #16]
   132c2:	b009      	add	sp, #36	; 0x24
   132c4:	4770      	bx	lr

000132c6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   132c6:	b580      	push	{r7, lr}
   132c8:	b088      	sub	sp, #32
   132ca:	9006      	str	r0, [sp, #24]
   132cc:	9107      	str	r1, [sp, #28]
   132ce:	9004      	str	r0, [sp, #16]
   132d0:	4608      	mov	r0, r1
   132d2:	9103      	str	r1, [sp, #12]
   132d4:	f006 f883 	bl	193de <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   132d8:	9002      	str	r0, [sp, #8]
   132da:	e7ff      	b.n	132dc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   132dc:	9802      	ldr	r0, [sp, #8]
   132de:	07c1      	lsls	r1, r0, #31
   132e0:	2900      	cmp	r1, #0
   132e2:	d105      	bne.n	132f0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   132e4:	e7ff      	b.n	132e6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   132e6:	9803      	ldr	r0, [sp, #12]
   132e8:	f006 f87d 	bl	193e6 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   132ec:	9001      	str	r0, [sp, #4]
   132ee:	e007      	b.n	13300 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   132f0:	9804      	ldr	r0, [sp, #16]
   132f2:	9903      	ldr	r1, [sp, #12]
   132f4:	f006 fe9d 	bl	1a032 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   132f8:	f88d 0017 	strb.w	r0, [sp, #23]
   132fc:	e7ff      	b.n	132fe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   132fe:	e015      	b.n	1332c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   13300:	9801      	ldr	r0, [sp, #4]
   13302:	07c1      	lsls	r1, r0, #31
   13304:	2900      	cmp	r1, #0
   13306:	d107      	bne.n	13318 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   13308:	e7ff      	b.n	1330a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   1330a:	9804      	ldr	r0, [sp, #16]
   1330c:	9903      	ldr	r1, [sp, #12]
   1330e:	f007 f885 	bl	1a41c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   13312:	f88d 0017 	strb.w	r0, [sp, #23]
   13316:	e007      	b.n	13328 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   13318:	9804      	ldr	r0, [sp, #16]
   1331a:	9903      	ldr	r1, [sp, #12]
   1331c:	f006 fef4 	bl	1a108 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   13320:	f88d 0017 	strb.w	r0, [sp, #23]
   13324:	e7ff      	b.n	13326 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   13326:	e000      	b.n	1332a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   13328:	e7ff      	b.n	1332a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   1332a:	e7ff      	b.n	1332c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   1332c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13330:	b008      	add	sp, #32
   13332:	bd80      	pop	{r7, pc}

00013334 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   13334:	b086      	sub	sp, #24
   13336:	9004      	str	r0, [sp, #16]
   13338:	9105      	str	r1, [sp, #20]
   1333a:	9002      	str	r0, [sp, #8]
   1333c:	9103      	str	r1, [sp, #12]
   1333e:	9802      	ldr	r0, [sp, #8]
   13340:	9903      	ldr	r1, [sp, #12]
   13342:	9000      	str	r0, [sp, #0]
   13344:	9101      	str	r1, [sp, #4]
   13346:	9800      	ldr	r0, [sp, #0]
   13348:	9901      	ldr	r1, [sp, #4]
   1334a:	b006      	add	sp, #24
   1334c:	4770      	bx	lr

0001334e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   1334e:	b580      	push	{r7, lr}
   13350:	b084      	sub	sp, #16
   13352:	9002      	str	r0, [sp, #8]
   13354:	9103      	str	r1, [sp, #12]
   13356:	f000 f805 	bl	13364 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   1335a:	9001      	str	r0, [sp, #4]
   1335c:	e7ff      	b.n	1335e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   1335e:	9801      	ldr	r0, [sp, #4]
   13360:	b004      	add	sp, #16
   13362:	bd80      	pop	{r7, pc}

00013364 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   13364:	b084      	sub	sp, #16
   13366:	9001      	str	r0, [sp, #4]
   13368:	9102      	str	r1, [sp, #8]
   1336a:	4408      	add	r0, r1
   1336c:	9003      	str	r0, [sp, #12]
   1336e:	9803      	ldr	r0, [sp, #12]
   13370:	9000      	str	r0, [sp, #0]
   13372:	e7ff      	b.n	13374 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   13374:	9800      	ldr	r0, [sp, #0]
   13376:	b004      	add	sp, #16
   13378:	4770      	bx	lr

0001337a <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   1337a:	b580      	push	{r7, lr}
   1337c:	b084      	sub	sp, #16
   1337e:	9002      	str	r0, [sp, #8]
   13380:	9103      	str	r1, [sp, #12]
   13382:	f7ff ffd7 	bl	13334 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   13386:	9001      	str	r0, [sp, #4]
   13388:	9100      	str	r1, [sp, #0]
   1338a:	e7ff      	b.n	1338c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   1338c:	9801      	ldr	r0, [sp, #4]
   1338e:	9900      	ldr	r1, [sp, #0]
   13390:	b004      	add	sp, #16
   13392:	bd80      	pop	{r7, pc}

00013394 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   13394:	b084      	sub	sp, #16
   13396:	9002      	str	r0, [sp, #8]
   13398:	9103      	str	r1, [sp, #12]
   1339a:	9000      	str	r0, [sp, #0]
   1339c:	9101      	str	r1, [sp, #4]
   1339e:	9801      	ldr	r0, [sp, #4]
   133a0:	b004      	add	sp, #16
   133a2:	4770      	bx	lr

000133a4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   133a4:	b082      	sub	sp, #8
   133a6:	9000      	str	r0, [sp, #0]
   133a8:	9101      	str	r1, [sp, #4]
   133aa:	b002      	add	sp, #8
   133ac:	4770      	bx	lr

000133ae <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
   133ae:	b083      	sub	sp, #12
   133b0:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
   133b2:	9002      	str	r0, [sp, #8]
   133b4:	9802      	ldr	r0, [sp, #8]
   133b6:	9000      	str	r0, [sp, #0]
   133b8:	e7ff      	b.n	133ba <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
   133ba:	9800      	ldr	r0, [sp, #0]
   133bc:	b003      	add	sp, #12
   133be:	4770      	bx	lr

000133c0 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
   133c0:	b081      	sub	sp, #4
   133c2:	f06f 000c 	mvn.w	r0, #12
        }
   133c6:	b001      	add	sp, #4
   133c8:	4770      	bx	lr

000133ca <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
   133ca:	b082      	sub	sp, #8
   133cc:	9000      	str	r0, [sp, #0]
   133ce:	9101      	str	r1, [sp, #4]
   133d0:	2000      	movs	r0, #0
        }
   133d2:	b002      	add	sp, #8
   133d4:	4770      	bx	lr

000133d6 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   133d6:	b082      	sub	sp, #8
   133d8:	9000      	str	r0, [sp, #0]
   133da:	9101      	str	r1, [sp, #4]
   133dc:	7800      	ldrb	r0, [r0, #0]
   133de:	7809      	ldrb	r1, [r1, #0]
   133e0:	1a40      	subs	r0, r0, r1
   133e2:	fab0 f080 	clz	r0, r0
   133e6:	0940      	lsrs	r0, r0, #5
   133e8:	b002      	add	sp, #8
   133ea:	4770      	bx	lr

000133ec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   133ec:	b580      	push	{r7, lr}
   133ee:	b084      	sub	sp, #16
   133f0:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   133f2:	f004 fcea 	bl	17dca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>
   133f6:	9002      	str	r0, [sp, #8]
   133f8:	9101      	str	r1, [sp, #4]
   133fa:	e7ff      	b.n	133fc <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E+0x10>
    }
   133fc:	9802      	ldr	r0, [sp, #8]
   133fe:	9901      	ldr	r1, [sp, #4]
   13400:	b004      	add	sp, #16
   13402:	bd80      	pop	{r7, pc}

00013404 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   13404:	b580      	push	{r7, lr}
   13406:	b084      	sub	sp, #16
   13408:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1340a:	f004 fcf3 	bl	17df4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   1340e:	9002      	str	r0, [sp, #8]
   13410:	9101      	str	r1, [sp, #4]
   13412:	e7ff      	b.n	13414 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   13414:	9802      	ldr	r0, [sp, #8]
   13416:	9901      	ldr	r1, [sp, #4]
   13418:	b004      	add	sp, #16
   1341a:	bd80      	pop	{r7, pc}

0001341c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   1341c:	b580      	push	{r7, lr}
   1341e:	b084      	sub	sp, #16
   13420:	9001      	str	r0, [sp, #4]
   13422:	9102      	str	r1, [sp, #8]
   13424:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   13426:	f004 fc32 	bl	17c8e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>
   1342a:	9000      	str	r0, [sp, #0]
   1342c:	e7ff      	b.n	1342e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E+0x12>
    }
   1342e:	9800      	ldr	r0, [sp, #0]
   13430:	f000 0001 	and.w	r0, r0, #1
   13434:	b004      	add	sp, #16
   13436:	bd80      	pop	{r7, pc}

00013438 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   13438:	b580      	push	{r7, lr}
   1343a:	b086      	sub	sp, #24
   1343c:	460a      	mov	r2, r1
   1343e:	9004      	str	r0, [sp, #16]
   13440:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   13444:	9203      	str	r2, [sp, #12]
   13446:	f004 fc85 	bl	17d54 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   1344a:	9002      	str	r0, [sp, #8]
   1344c:	9101      	str	r1, [sp, #4]
   1344e:	e7ff      	b.n	13450 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   13450:	9802      	ldr	r0, [sp, #8]
   13452:	f000 0001 	and.w	r0, r0, #1
   13456:	9901      	ldr	r1, [sp, #4]
   13458:	b006      	add	sp, #24
   1345a:	bd80      	pop	{r7, pc}

0001345c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   1345c:	b580      	push	{r7, lr}
   1345e:	b082      	sub	sp, #8
   13460:	9001      	str	r0, [sp, #4]
        self.0.clear()
   13462:	f004 fca0 	bl	17da6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   13466:	e7ff      	b.n	13468 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   13468:	b002      	add	sp, #8
   1346a:	bd80      	pop	{r7, pc}

0001346c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>:
    pub fn clear(&mut self) {
   1346c:	b580      	push	{r7, lr}
   1346e:	b082      	sub	sp, #8
   13470:	9001      	str	r0, [sp, #4]
        self.0.clear()
   13472:	f004 fca1 	bl	17db8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>
   13476:	e7ff      	b.n	13478 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E+0xc>
    }
   13478:	b002      	add	sp, #8
   1347a:	bd80      	pop	{r7, pc}

0001347c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>:
    pub fn capacity(&self) -> usize {
   1347c:	b580      	push	{r7, lr}
   1347e:	b082      	sub	sp, #8
   13480:	9001      	str	r0, [sp, #4]
        self.0.capacity()
   13482:	f004 fcd6 	bl	17e32 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   13486:	9000      	str	r0, [sp, #0]
   13488:	e7ff      	b.n	1348a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E+0xe>
    }
   1348a:	9800      	ldr	r0, [sp, #0]
   1348c:	b002      	add	sp, #8
   1348e:	bd80      	pop	{r7, pc}

00013490 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
   13490:	b081      	sub	sp, #4
   13492:	9000      	str	r0, [sp, #0]
   13494:	b001      	add	sp, #4
   13496:	4770      	bx	lr

00013498 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   13498:	b580      	push	{r7, lr}
   1349a:	b088      	sub	sp, #32
   1349c:	9006      	str	r0, [sp, #24]
   1349e:	9107      	str	r1, [sp, #28]
   134a0:	9004      	str	r0, [sp, #16]
   134a2:	4608      	mov	r0, r1
   134a4:	9103      	str	r1, [sp, #12]
   134a6:	f005 ff9a 	bl	193de <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   134aa:	9002      	str	r0, [sp, #8]
   134ac:	e7ff      	b.n	134ae <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   134ae:	9802      	ldr	r0, [sp, #8]
   134b0:	07c1      	lsls	r1, r0, #31
   134b2:	2900      	cmp	r1, #0
   134b4:	d105      	bne.n	134c2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   134b6:	e7ff      	b.n	134b8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   134b8:	9803      	ldr	r0, [sp, #12]
   134ba:	f005 ff94 	bl	193e6 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   134be:	9001      	str	r0, [sp, #4]
   134c0:	e007      	b.n	134d2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   134c2:	9804      	ldr	r0, [sp, #16]
   134c4:	9903      	ldr	r1, [sp, #12]
   134c6:	f006 fc98 	bl	19dfa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   134ca:	f88d 0017 	strb.w	r0, [sp, #23]
   134ce:	e7ff      	b.n	134d0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   134d0:	e015      	b.n	134fe <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   134d2:	9801      	ldr	r0, [sp, #4]
   134d4:	07c1      	lsls	r1, r0, #31
   134d6:	2900      	cmp	r1, #0
   134d8:	d107      	bne.n	134ea <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   134da:	e7ff      	b.n	134dc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   134dc:	9804      	ldr	r0, [sp, #16]
   134de:	9903      	ldr	r1, [sp, #12]
   134e0:	f006 fe7d 	bl	1a1de <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   134e4:	f88d 0017 	strb.w	r0, [sp, #23]
   134e8:	e007      	b.n	134fa <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   134ea:	9804      	ldr	r0, [sp, #16]
   134ec:	9903      	ldr	r1, [sp, #12]
   134ee:	f006 fcb3 	bl	19e58 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   134f2:	f88d 0017 	strb.w	r0, [sp, #23]
   134f6:	e7ff      	b.n	134f8 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   134f8:	e000      	b.n	134fc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   134fa:	e7ff      	b.n	134fc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   134fc:	e7ff      	b.n	134fe <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   134fe:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13502:	b008      	add	sp, #32
   13504:	bd80      	pop	{r7, pc}

00013506 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   13506:	b580      	push	{r7, lr}
   13508:	b088      	sub	sp, #32
   1350a:	9006      	str	r0, [sp, #24]
   1350c:	9107      	str	r1, [sp, #28]
   1350e:	9004      	str	r0, [sp, #16]
   13510:	4608      	mov	r0, r1
   13512:	9103      	str	r1, [sp, #12]
   13514:	f005 ff63 	bl	193de <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   13518:	9002      	str	r0, [sp, #8]
   1351a:	e7ff      	b.n	1351c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   1351c:	9802      	ldr	r0, [sp, #8]
   1351e:	07c1      	lsls	r1, r0, #31
   13520:	2900      	cmp	r1, #0
   13522:	d105      	bne.n	13530 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   13524:	e7ff      	b.n	13526 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   13526:	9803      	ldr	r0, [sp, #12]
   13528:	f005 ff5d 	bl	193e6 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1352c:	9001      	str	r0, [sp, #4]
   1352e:	e007      	b.n	13540 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   13530:	9804      	ldr	r0, [sp, #16]
   13532:	9903      	ldr	r1, [sp, #12]
   13534:	f006 fd7d 	bl	1a032 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   13538:	f88d 0017 	strb.w	r0, [sp, #23]
   1353c:	e7ff      	b.n	1353e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   1353e:	e015      	b.n	1356c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   13540:	9801      	ldr	r0, [sp, #4]
   13542:	07c1      	lsls	r1, r0, #31
   13544:	2900      	cmp	r1, #0
   13546:	d107      	bne.n	13558 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   13548:	e7ff      	b.n	1354a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   1354a:	9804      	ldr	r0, [sp, #16]
   1354c:	9903      	ldr	r1, [sp, #12]
   1354e:	f006 feeb 	bl	1a328 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   13552:	f88d 0017 	strb.w	r0, [sp, #23]
   13556:	e007      	b.n	13568 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   13558:	9804      	ldr	r0, [sp, #16]
   1355a:	9903      	ldr	r1, [sp, #12]
   1355c:	f006 fdd4 	bl	1a108 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   13560:	f88d 0017 	strb.w	r0, [sp, #23]
   13564:	e7ff      	b.n	13566 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   13566:	e000      	b.n	1356a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   13568:	e7ff      	b.n	1356a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   1356a:	e7ff      	b.n	1356c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   1356c:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13570:	b008      	add	sp, #32
   13572:	bd80      	pop	{r7, pc}

00013574 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   13574:	b580      	push	{r7, lr}
   13576:	b088      	sub	sp, #32
   13578:	9006      	str	r0, [sp, #24]
   1357a:	9107      	str	r1, [sp, #28]
   1357c:	9004      	str	r0, [sp, #16]
   1357e:	4608      	mov	r0, r1
   13580:	9103      	str	r1, [sp, #12]
   13582:	f005 ff2c 	bl	193de <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   13586:	9002      	str	r0, [sp, #8]
   13588:	e7ff      	b.n	1358a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   1358a:	9802      	ldr	r0, [sp, #8]
   1358c:	07c1      	lsls	r1, r0, #31
   1358e:	2900      	cmp	r1, #0
   13590:	d105      	bne.n	1359e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   13592:	e7ff      	b.n	13594 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   13594:	9803      	ldr	r0, [sp, #12]
   13596:	f005 ff26 	bl	193e6 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1359a:	9001      	str	r0, [sp, #4]
   1359c:	e007      	b.n	135ae <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   1359e:	9804      	ldr	r0, [sp, #16]
   135a0:	9903      	ldr	r1, [sp, #12]
   135a2:	f006 fd46 	bl	1a032 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   135a6:	f88d 0017 	strb.w	r0, [sp, #23]
   135aa:	e7ff      	b.n	135ac <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   135ac:	e015      	b.n	135da <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   135ae:	9801      	ldr	r0, [sp, #4]
   135b0:	07c1      	lsls	r1, r0, #31
   135b2:	2900      	cmp	r1, #0
   135b4:	d107      	bne.n	135c6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   135b6:	e7ff      	b.n	135b8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   135b8:	9804      	ldr	r0, [sp, #16]
   135ba:	9903      	ldr	r1, [sp, #12]
   135bc:	f006 ff2e 	bl	1a41c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   135c0:	f88d 0017 	strb.w	r0, [sp, #23]
   135c4:	e007      	b.n	135d6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   135c6:	9804      	ldr	r0, [sp, #16]
   135c8:	9903      	ldr	r1, [sp, #12]
   135ca:	f006 fd9d 	bl	1a108 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   135ce:	f88d 0017 	strb.w	r0, [sp, #23]
   135d2:	e7ff      	b.n	135d4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   135d4:	e000      	b.n	135d8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   135d6:	e7ff      	b.n	135d8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   135d8:	e7ff      	b.n	135da <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   135da:	f89d 0017 	ldrb.w	r0, [sp, #23]
   135de:	b008      	add	sp, #32
   135e0:	bd80      	pop	{r7, pc}

000135e2 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   135e2:	b580      	push	{r7, lr}
   135e4:	b084      	sub	sp, #16
   135e6:	9002      	str	r0, [sp, #8]
   135e8:	9103      	str	r1, [sp, #12]
   135ea:	6800      	ldr	r0, [r0, #0]
   135ec:	6809      	ldr	r1, [r1, #0]
   135ee:	f7ff fef2 	bl	133d6 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   135f2:	9001      	str	r0, [sp, #4]
   135f4:	e7ff      	b.n	135f6 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   135f6:	9801      	ldr	r0, [sp, #4]
   135f8:	f000 0001 	and.w	r0, r0, #1
   135fc:	b004      	add	sp, #16
   135fe:	bd80      	pop	{r7, pc}

00013600 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   13600:	b5b0      	push	{r4, r5, r7, lr}
   13602:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   13606:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   13608:	f007 fdea 	bl	1b1e0 <hal_spi_disable>
   1360c:	e7ff      	b.n	1360e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   1360e:	f240 01f8 	movw	r1, #248	; 0xf8
   13612:	f2c2 0100 	movt	r1, #8192	; 0x2000
   13616:	2000      	movs	r0, #0
   13618:	f007 fda0 	bl	1b15c <hal_spi_config>
   1361c:	906a      	str	r0, [sp, #424]	; 0x1a8
   1361e:	e7ff      	b.n	13620 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   13620:	f647 1058 	movw	r0, #31064	; 0x7958
   13624:	f2c0 0002 	movt	r0, #2
   13628:	6800      	ldr	r0, [r0, #0]
   1362a:	a96a      	add	r1, sp, #424	; 0x1a8
   1362c:	916b      	str	r1, [sp, #428]	; 0x1ac
   1362e:	906c      	str	r0, [sp, #432]	; 0x1b0
   13630:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   13632:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   13636:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   13638:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   1363c:	6802      	ldr	r2, [r0, #0]
   1363e:	680b      	ldr	r3, [r1, #0]
   13640:	429a      	cmp	r2, r3
   13642:	9068      	str	r0, [sp, #416]	; 0x1a0
   13644:	9167      	str	r1, [sp, #412]	; 0x19c
   13646:	d10c      	bne.n	13662 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   13648:	e7ff      	b.n	1364a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   1364a:	f646 7004 	movw	r0, #28420	; 0x6f04
   1364e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13652:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   13656:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   1365a:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   1365e:	9066      	str	r0, [sp, #408]	; 0x198
   13660:	e075      	b.n	1374e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   13662:	f647 10b0 	movw	r0, #31152	; 0x79b0
   13666:	f2c0 0002 	movt	r0, #2
   1366a:	6801      	ldr	r1, [r0, #0]
   1366c:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   1366e:	907c      	str	r0, [sp, #496]	; 0x1f0
   13670:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   13672:	927d      	str	r2, [sp, #500]	; 0x1f4
   13674:	f647 13cc 	movw	r3, #31180	; 0x79cc
   13678:	f2c0 0302 	movt	r3, #2
   1367c:	681b      	ldr	r3, [r3, #0]
   1367e:	f647 1cd0 	movw	ip, #31184	; 0x79d0
   13682:	f2c0 0c02 	movt	ip, #2
   13686:	f8dc c000 	ldr.w	ip, [ip]
   1368a:	46ee      	mov	lr, sp
   1368c:	2400      	movs	r4, #0
   1368e:	f8ce 4000 	str.w	r4, [lr]
   13692:	a87e      	add	r0, sp, #504	; 0x1f8
   13694:	2201      	movs	r2, #1
   13696:	9165      	str	r1, [sp, #404]	; 0x194
   13698:	4619      	mov	r1, r3
   1369a:	4663      	mov	r3, ip
   1369c:	f7f5 fa82 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   136a0:	e7ff      	b.n	136a2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   136a2:	a87c      	add	r0, sp, #496	; 0x1f0
   136a4:	9079      	str	r0, [sp, #484]	; 0x1e4
   136a6:	a87d      	add	r0, sp, #500	; 0x1f4
   136a8:	907a      	str	r0, [sp, #488]	; 0x1e8
   136aa:	a87e      	add	r0, sp, #504	; 0x1f8
   136ac:	907b      	str	r0, [sp, #492]	; 0x1ec
   136ae:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   136b0:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   136b4:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   136b6:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   136ba:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   136bc:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   136c0:	f249 33f3 	movw	r3, #37875	; 0x93f3
   136c4:	f2c0 0300 	movt	r3, #0
   136c8:	9164      	str	r1, [sp, #400]	; 0x190
   136ca:	4619      	mov	r1, r3
   136cc:	9263      	str	r2, [sp, #396]	; 0x18c
   136ce:	f7f5 fec8 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   136d2:	9062      	str	r0, [sp, #392]	; 0x188
   136d4:	9161      	str	r1, [sp, #388]	; 0x184
   136d6:	e7ff      	b.n	136d8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   136d8:	f249 31f3 	movw	r1, #37875	; 0x93f3
   136dc:	f2c0 0100 	movt	r1, #0
   136e0:	9864      	ldr	r0, [sp, #400]	; 0x190
   136e2:	f7f5 febe 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   136e6:	9060      	str	r0, [sp, #384]	; 0x180
   136e8:	915f      	str	r1, [sp, #380]	; 0x17c
   136ea:	e7ff      	b.n	136ec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   136ec:	f648 416b 	movw	r1, #35947	; 0x8c6b
   136f0:	f2c0 0101 	movt	r1, #1
   136f4:	9863      	ldr	r0, [sp, #396]	; 0x18c
   136f6:	f7f5 fef3 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   136fa:	905e      	str	r0, [sp, #376]	; 0x178
   136fc:	915d      	str	r1, [sp, #372]	; 0x174
   136fe:	e7ff      	b.n	13700 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   13700:	9862      	ldr	r0, [sp, #392]	; 0x188
   13702:	9073      	str	r0, [sp, #460]	; 0x1cc
   13704:	9961      	ldr	r1, [sp, #388]	; 0x184
   13706:	9174      	str	r1, [sp, #464]	; 0x1d0
   13708:	9a60      	ldr	r2, [sp, #384]	; 0x180
   1370a:	9275      	str	r2, [sp, #468]	; 0x1d4
   1370c:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   1370e:	9376      	str	r3, [sp, #472]	; 0x1d8
   13710:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   13714:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   13718:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   1371c:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   13720:	466c      	mov	r4, sp
   13722:	2503      	movs	r5, #3
   13724:	6025      	str	r5, [r4, #0]
   13726:	a86d      	add	r0, sp, #436	; 0x1b4
   13728:	ab73      	add	r3, sp, #460	; 0x1cc
   1372a:	9965      	ldr	r1, [sp, #404]	; 0x194
   1372c:	462a      	mov	r2, r5
   1372e:	f7f5 fa39 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13732:	e7ff      	b.n	13734 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   13734:	f647 10ec 	movw	r0, #31212	; 0x79ec
   13738:	f2c0 0002 	movt	r0, #2
   1373c:	f004 ffa7 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13740:	905c      	str	r0, [sp, #368]	; 0x170
   13742:	e7ff      	b.n	13744 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   13744:	a86d      	add	r0, sp, #436	; 0x1b4
   13746:	995c      	ldr	r1, [sp, #368]	; 0x170
   13748:	f004 ffde 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1374c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   1374e:	f644 309b 	movw	r0, #19355	; 0x4b9b
   13752:	f2c0 0001 	movt	r0, #1
   13756:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   13758:	9985      	ldr	r1, [sp, #532]	; 0x214
   1375a:	2000      	movs	r0, #0
   1375c:	9a66      	ldr	r2, [sp, #408]	; 0x198
   1375e:	f007 fda3 	bl	1b2a8 <hal_spi_set_txrx_cb>
   13762:	9084      	str	r0, [sp, #528]	; 0x210
   13764:	e7ff      	b.n	13766 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   13766:	f647 1058 	movw	r0, #31064	; 0x7958
   1376a:	f2c0 0002 	movt	r0, #2
   1376e:	6800      	ldr	r0, [r0, #0]
   13770:	a984      	add	r1, sp, #528	; 0x210
   13772:	9186      	str	r1, [sp, #536]	; 0x218
   13774:	9087      	str	r0, [sp, #540]	; 0x21c
   13776:	9886      	ldr	r0, [sp, #536]	; 0x218
   13778:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   1377c:	9987      	ldr	r1, [sp, #540]	; 0x21c
   1377e:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   13782:	6802      	ldr	r2, [r0, #0]
   13784:	680b      	ldr	r3, [r1, #0]
   13786:	429a      	cmp	r2, r3
   13788:	905b      	str	r0, [sp, #364]	; 0x16c
   1378a:	915a      	str	r1, [sp, #360]	; 0x168
   1378c:	d105      	bne.n	1379a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   1378e:	e7ff      	b.n	13790 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   13790:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   13792:	f007 fcff 	bl	1b194 <hal_spi_enable>
   13796:	909f      	str	r0, [sp, #636]	; 0x27c
   13798:	e075      	b.n	13886 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   1379a:	f647 10b0 	movw	r0, #31152	; 0x79b0
   1379e:	f2c0 0002 	movt	r0, #2
   137a2:	6801      	ldr	r1, [r0, #0]
   137a4:	985b      	ldr	r0, [sp, #364]	; 0x16c
   137a6:	9097      	str	r0, [sp, #604]	; 0x25c
   137a8:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   137aa:	9298      	str	r2, [sp, #608]	; 0x260
   137ac:	f647 2310 	movw	r3, #31248	; 0x7a10
   137b0:	f2c0 0302 	movt	r3, #2
   137b4:	681b      	ldr	r3, [r3, #0]
   137b6:	f647 1cd0 	movw	ip, #31184	; 0x79d0
   137ba:	f2c0 0c02 	movt	ip, #2
   137be:	f8dc c000 	ldr.w	ip, [ip]
   137c2:	46ee      	mov	lr, sp
   137c4:	2400      	movs	r4, #0
   137c6:	f8ce 4000 	str.w	r4, [lr]
   137ca:	a899      	add	r0, sp, #612	; 0x264
   137cc:	2201      	movs	r2, #1
   137ce:	9159      	str	r1, [sp, #356]	; 0x164
   137d0:	4619      	mov	r1, r3
   137d2:	4663      	mov	r3, ip
   137d4:	f7f5 f9e6 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   137d8:	e7ff      	b.n	137da <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   137da:	a897      	add	r0, sp, #604	; 0x25c
   137dc:	9094      	str	r0, [sp, #592]	; 0x250
   137de:	a898      	add	r0, sp, #608	; 0x260
   137e0:	9095      	str	r0, [sp, #596]	; 0x254
   137e2:	a899      	add	r0, sp, #612	; 0x264
   137e4:	9096      	str	r0, [sp, #600]	; 0x258
   137e6:	9894      	ldr	r0, [sp, #592]	; 0x250
   137e8:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   137ec:	9995      	ldr	r1, [sp, #596]	; 0x254
   137ee:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   137f2:	9a96      	ldr	r2, [sp, #600]	; 0x258
   137f4:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   137f8:	f249 33f3 	movw	r3, #37875	; 0x93f3
   137fc:	f2c0 0300 	movt	r3, #0
   13800:	9158      	str	r1, [sp, #352]	; 0x160
   13802:	4619      	mov	r1, r3
   13804:	9257      	str	r2, [sp, #348]	; 0x15c
   13806:	f7f5 fe2c 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1380a:	9056      	str	r0, [sp, #344]	; 0x158
   1380c:	9155      	str	r1, [sp, #340]	; 0x154
   1380e:	e7ff      	b.n	13810 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   13810:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13814:	f2c0 0100 	movt	r1, #0
   13818:	9858      	ldr	r0, [sp, #352]	; 0x160
   1381a:	f7f5 fe22 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1381e:	9054      	str	r0, [sp, #336]	; 0x150
   13820:	9153      	str	r1, [sp, #332]	; 0x14c
   13822:	e7ff      	b.n	13824 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   13824:	f648 416b 	movw	r1, #35947	; 0x8c6b
   13828:	f2c0 0101 	movt	r1, #1
   1382c:	9857      	ldr	r0, [sp, #348]	; 0x15c
   1382e:	f7f5 fe57 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13832:	9052      	str	r0, [sp, #328]	; 0x148
   13834:	9151      	str	r1, [sp, #324]	; 0x144
   13836:	e7ff      	b.n	13838 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   13838:	9856      	ldr	r0, [sp, #344]	; 0x158
   1383a:	908e      	str	r0, [sp, #568]	; 0x238
   1383c:	9955      	ldr	r1, [sp, #340]	; 0x154
   1383e:	918f      	str	r1, [sp, #572]	; 0x23c
   13840:	9a54      	ldr	r2, [sp, #336]	; 0x150
   13842:	9290      	str	r2, [sp, #576]	; 0x240
   13844:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   13846:	9391      	str	r3, [sp, #580]	; 0x244
   13848:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   1384c:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   13850:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   13854:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   13858:	466c      	mov	r4, sp
   1385a:	2503      	movs	r5, #3
   1385c:	6025      	str	r5, [r4, #0]
   1385e:	a888      	add	r0, sp, #544	; 0x220
   13860:	ab8e      	add	r3, sp, #568	; 0x238
   13862:	9959      	ldr	r1, [sp, #356]	; 0x164
   13864:	462a      	mov	r2, r5
   13866:	f7f5 f99d 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1386a:	e7ff      	b.n	1386c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   1386c:	f647 2014 	movw	r0, #31252	; 0x7a14
   13870:	f2c0 0002 	movt	r0, #2
   13874:	f004 ff0b 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13878:	9050      	str	r0, [sp, #320]	; 0x140
   1387a:	e7ff      	b.n	1387c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   1387c:	a888      	add	r0, sp, #544	; 0x220
   1387e:	9950      	ldr	r1, [sp, #320]	; 0x140
   13880:	f004 ff42 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13884:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   13886:	f647 1058 	movw	r0, #31064	; 0x7958
   1388a:	f2c0 0002 	movt	r0, #2
   1388e:	6800      	ldr	r0, [r0, #0]
   13890:	a99f      	add	r1, sp, #636	; 0x27c
   13892:	91a0      	str	r1, [sp, #640]	; 0x280
   13894:	90a1      	str	r0, [sp, #644]	; 0x284
   13896:	98a0      	ldr	r0, [sp, #640]	; 0x280
   13898:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   1389c:	99a1      	ldr	r1, [sp, #644]	; 0x284
   1389e:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   138a2:	6802      	ldr	r2, [r0, #0]
   138a4:	680b      	ldr	r3, [r1, #0]
   138a6:	429a      	cmp	r2, r3
   138a8:	904f      	str	r0, [sp, #316]	; 0x13c
   138aa:	914e      	str	r1, [sp, #312]	; 0x138
   138ac:	d106      	bne.n	138bc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   138ae:	e7ff      	b.n	138b0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   138b0:	2019      	movs	r0, #25
   138b2:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   138b4:	f007 f844 	bl	1a940 <hal_gpio_init_out>
   138b8:	90b9      	str	r0, [sp, #740]	; 0x2e4
   138ba:	e075      	b.n	139a8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   138bc:	f647 10b0 	movw	r0, #31152	; 0x79b0
   138c0:	f2c0 0002 	movt	r0, #2
   138c4:	6801      	ldr	r1, [r0, #0]
   138c6:	984f      	ldr	r0, [sp, #316]	; 0x13c
   138c8:	90b1      	str	r0, [sp, #708]	; 0x2c4
   138ca:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   138cc:	92b2      	str	r2, [sp, #712]	; 0x2c8
   138ce:	f647 233c 	movw	r3, #31292	; 0x7a3c
   138d2:	f2c0 0302 	movt	r3, #2
   138d6:	681b      	ldr	r3, [r3, #0]
   138d8:	f647 1cd0 	movw	ip, #31184	; 0x79d0
   138dc:	f2c0 0c02 	movt	ip, #2
   138e0:	f8dc c000 	ldr.w	ip, [ip]
   138e4:	46ee      	mov	lr, sp
   138e6:	2400      	movs	r4, #0
   138e8:	f8ce 4000 	str.w	r4, [lr]
   138ec:	a8b3      	add	r0, sp, #716	; 0x2cc
   138ee:	2201      	movs	r2, #1
   138f0:	914d      	str	r1, [sp, #308]	; 0x134
   138f2:	4619      	mov	r1, r3
   138f4:	4663      	mov	r3, ip
   138f6:	f7f5 f955 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   138fa:	e7ff      	b.n	138fc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   138fc:	a8b1      	add	r0, sp, #708	; 0x2c4
   138fe:	90ae      	str	r0, [sp, #696]	; 0x2b8
   13900:	a8b2      	add	r0, sp, #712	; 0x2c8
   13902:	90af      	str	r0, [sp, #700]	; 0x2bc
   13904:	a8b3      	add	r0, sp, #716	; 0x2cc
   13906:	90b0      	str	r0, [sp, #704]	; 0x2c0
   13908:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   1390a:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   1390e:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   13910:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   13914:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   13916:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   1391a:	f249 33f3 	movw	r3, #37875	; 0x93f3
   1391e:	f2c0 0300 	movt	r3, #0
   13922:	914c      	str	r1, [sp, #304]	; 0x130
   13924:	4619      	mov	r1, r3
   13926:	924b      	str	r2, [sp, #300]	; 0x12c
   13928:	f7f5 fd9b 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1392c:	904a      	str	r0, [sp, #296]	; 0x128
   1392e:	9149      	str	r1, [sp, #292]	; 0x124
   13930:	e7ff      	b.n	13932 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   13932:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13936:	f2c0 0100 	movt	r1, #0
   1393a:	984c      	ldr	r0, [sp, #304]	; 0x130
   1393c:	f7f5 fd91 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13940:	9048      	str	r0, [sp, #288]	; 0x120
   13942:	9147      	str	r1, [sp, #284]	; 0x11c
   13944:	e7ff      	b.n	13946 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   13946:	f648 416b 	movw	r1, #35947	; 0x8c6b
   1394a:	f2c0 0101 	movt	r1, #1
   1394e:	984b      	ldr	r0, [sp, #300]	; 0x12c
   13950:	f7f5 fdc6 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13954:	9046      	str	r0, [sp, #280]	; 0x118
   13956:	9145      	str	r1, [sp, #276]	; 0x114
   13958:	e7ff      	b.n	1395a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   1395a:	984a      	ldr	r0, [sp, #296]	; 0x128
   1395c:	90a8      	str	r0, [sp, #672]	; 0x2a0
   1395e:	9949      	ldr	r1, [sp, #292]	; 0x124
   13960:	91a9      	str	r1, [sp, #676]	; 0x2a4
   13962:	9a48      	ldr	r2, [sp, #288]	; 0x120
   13964:	92aa      	str	r2, [sp, #680]	; 0x2a8
   13966:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   13968:	93ab      	str	r3, [sp, #684]	; 0x2ac
   1396a:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   1396e:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   13972:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   13976:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   1397a:	466c      	mov	r4, sp
   1397c:	2503      	movs	r5, #3
   1397e:	6025      	str	r5, [r4, #0]
   13980:	a8a2      	add	r0, sp, #648	; 0x288
   13982:	aba8      	add	r3, sp, #672	; 0x2a0
   13984:	994d      	ldr	r1, [sp, #308]	; 0x134
   13986:	462a      	mov	r2, r5
   13988:	f7f5 f90c 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1398c:	e7ff      	b.n	1398e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   1398e:	f647 2040 	movw	r0, #31296	; 0x7a40
   13992:	f2c0 0002 	movt	r0, #2
   13996:	f004 fe7a 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1399a:	9044      	str	r0, [sp, #272]	; 0x110
   1399c:	e7ff      	b.n	1399e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   1399e:	a8a2      	add	r0, sp, #648	; 0x288
   139a0:	9944      	ldr	r1, [sp, #272]	; 0x110
   139a2:	f004 feb1 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   139a6:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   139a8:	f647 1058 	movw	r0, #31064	; 0x7958
   139ac:	f2c0 0002 	movt	r0, #2
   139b0:	6800      	ldr	r0, [r0, #0]
   139b2:	a9b9      	add	r1, sp, #740	; 0x2e4
   139b4:	91ba      	str	r1, [sp, #744]	; 0x2e8
   139b6:	90bb      	str	r0, [sp, #748]	; 0x2ec
   139b8:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   139ba:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   139be:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   139c0:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   139c4:	6802      	ldr	r2, [r0, #0]
   139c6:	680b      	ldr	r3, [r1, #0]
   139c8:	429a      	cmp	r2, r3
   139ca:	9043      	str	r0, [sp, #268]	; 0x10c
   139cc:	9142      	str	r1, [sp, #264]	; 0x108
   139ce:	d106      	bne.n	139de <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   139d0:	e7ff      	b.n	139d2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   139d2:	2012      	movs	r0, #18
   139d4:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   139d6:	f006 ffb3 	bl	1a940 <hal_gpio_init_out>
   139da:	90d3      	str	r0, [sp, #844]	; 0x34c
   139dc:	e075      	b.n	13aca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   139de:	f647 10b0 	movw	r0, #31152	; 0x79b0
   139e2:	f2c0 0002 	movt	r0, #2
   139e6:	6801      	ldr	r1, [r0, #0]
   139e8:	9843      	ldr	r0, [sp, #268]	; 0x10c
   139ea:	90cb      	str	r0, [sp, #812]	; 0x32c
   139ec:	9a42      	ldr	r2, [sp, #264]	; 0x108
   139ee:	92cc      	str	r2, [sp, #816]	; 0x330
   139f0:	f647 2364 	movw	r3, #31332	; 0x7a64
   139f4:	f2c0 0302 	movt	r3, #2
   139f8:	681b      	ldr	r3, [r3, #0]
   139fa:	f647 1cd0 	movw	ip, #31184	; 0x79d0
   139fe:	f2c0 0c02 	movt	ip, #2
   13a02:	f8dc c000 	ldr.w	ip, [ip]
   13a06:	46ee      	mov	lr, sp
   13a08:	2400      	movs	r4, #0
   13a0a:	f8ce 4000 	str.w	r4, [lr]
   13a0e:	a8cd      	add	r0, sp, #820	; 0x334
   13a10:	2201      	movs	r2, #1
   13a12:	9141      	str	r1, [sp, #260]	; 0x104
   13a14:	4619      	mov	r1, r3
   13a16:	4663      	mov	r3, ip
   13a18:	f7f5 f8c4 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13a1c:	e7ff      	b.n	13a1e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   13a1e:	a8cb      	add	r0, sp, #812	; 0x32c
   13a20:	90c8      	str	r0, [sp, #800]	; 0x320
   13a22:	a8cc      	add	r0, sp, #816	; 0x330
   13a24:	90c9      	str	r0, [sp, #804]	; 0x324
   13a26:	a8cd      	add	r0, sp, #820	; 0x334
   13a28:	90ca      	str	r0, [sp, #808]	; 0x328
   13a2a:	98c8      	ldr	r0, [sp, #800]	; 0x320
   13a2c:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   13a30:	99c9      	ldr	r1, [sp, #804]	; 0x324
   13a32:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   13a36:	9aca      	ldr	r2, [sp, #808]	; 0x328
   13a38:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   13a3c:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13a40:	f2c0 0300 	movt	r3, #0
   13a44:	9140      	str	r1, [sp, #256]	; 0x100
   13a46:	4619      	mov	r1, r3
   13a48:	923f      	str	r2, [sp, #252]	; 0xfc
   13a4a:	f7f5 fd0a 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13a4e:	903e      	str	r0, [sp, #248]	; 0xf8
   13a50:	913d      	str	r1, [sp, #244]	; 0xf4
   13a52:	e7ff      	b.n	13a54 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   13a54:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13a58:	f2c0 0100 	movt	r1, #0
   13a5c:	9840      	ldr	r0, [sp, #256]	; 0x100
   13a5e:	f7f5 fd00 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13a62:	903c      	str	r0, [sp, #240]	; 0xf0
   13a64:	913b      	str	r1, [sp, #236]	; 0xec
   13a66:	e7ff      	b.n	13a68 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   13a68:	f648 416b 	movw	r1, #35947	; 0x8c6b
   13a6c:	f2c0 0101 	movt	r1, #1
   13a70:	983f      	ldr	r0, [sp, #252]	; 0xfc
   13a72:	f7f5 fd35 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13a76:	903a      	str	r0, [sp, #232]	; 0xe8
   13a78:	9139      	str	r1, [sp, #228]	; 0xe4
   13a7a:	e7ff      	b.n	13a7c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   13a7c:	983e      	ldr	r0, [sp, #248]	; 0xf8
   13a7e:	90c2      	str	r0, [sp, #776]	; 0x308
   13a80:	993d      	ldr	r1, [sp, #244]	; 0xf4
   13a82:	91c3      	str	r1, [sp, #780]	; 0x30c
   13a84:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   13a86:	92c4      	str	r2, [sp, #784]	; 0x310
   13a88:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   13a8a:	93c5      	str	r3, [sp, #788]	; 0x314
   13a8c:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   13a90:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   13a94:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   13a98:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   13a9c:	466c      	mov	r4, sp
   13a9e:	2503      	movs	r5, #3
   13aa0:	6025      	str	r5, [r4, #0]
   13aa2:	a8bc      	add	r0, sp, #752	; 0x2f0
   13aa4:	abc2      	add	r3, sp, #776	; 0x308
   13aa6:	9941      	ldr	r1, [sp, #260]	; 0x104
   13aa8:	462a      	mov	r2, r5
   13aaa:	f7f5 f87b 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13aae:	e7ff      	b.n	13ab0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   13ab0:	f647 2068 	movw	r0, #31336	; 0x7a68
   13ab4:	f2c0 0002 	movt	r0, #2
   13ab8:	f004 fde9 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13abc:	9038      	str	r0, [sp, #224]	; 0xe0
   13abe:	e7ff      	b.n	13ac0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   13ac0:	a8bc      	add	r0, sp, #752	; 0x2f0
   13ac2:	9938      	ldr	r1, [sp, #224]	; 0xe0
   13ac4:	f004 fe20 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13ac8:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13aca:	f647 1058 	movw	r0, #31064	; 0x7958
   13ace:	f2c0 0002 	movt	r0, #2
   13ad2:	6800      	ldr	r0, [r0, #0]
   13ad4:	a9d3      	add	r1, sp, #844	; 0x34c
   13ad6:	91d4      	str	r1, [sp, #848]	; 0x350
   13ad8:	90d5      	str	r0, [sp, #852]	; 0x354
   13ada:	98d4      	ldr	r0, [sp, #848]	; 0x350
   13adc:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   13ae0:	99d5      	ldr	r1, [sp, #852]	; 0x354
   13ae2:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   13ae6:	6802      	ldr	r2, [r0, #0]
   13ae8:	680b      	ldr	r3, [r1, #0]
   13aea:	429a      	cmp	r2, r3
   13aec:	9037      	str	r0, [sp, #220]	; 0xdc
   13aee:	9136      	str	r1, [sp, #216]	; 0xd8
   13af0:	d107      	bne.n	13b02 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   13af2:	e7ff      	b.n	13af4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   13af4:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   13af8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13afc:	f008 f82a 	bl	1bb54 <os_eventq_init>
   13b00:	e075      	b.n	13bee <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13b02:	f647 10b0 	movw	r0, #31152	; 0x79b0
   13b06:	f2c0 0002 	movt	r0, #2
   13b0a:	6801      	ldr	r1, [r0, #0]
   13b0c:	9837      	ldr	r0, [sp, #220]	; 0xdc
   13b0e:	90e5      	str	r0, [sp, #916]	; 0x394
   13b10:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   13b12:	92e6      	str	r2, [sp, #920]	; 0x398
   13b14:	f647 2364 	movw	r3, #31332	; 0x7a64
   13b18:	f2c0 0302 	movt	r3, #2
   13b1c:	681b      	ldr	r3, [r3, #0]
   13b1e:	f647 1cd0 	movw	ip, #31184	; 0x79d0
   13b22:	f2c0 0c02 	movt	ip, #2
   13b26:	f8dc c000 	ldr.w	ip, [ip]
   13b2a:	46ee      	mov	lr, sp
   13b2c:	2400      	movs	r4, #0
   13b2e:	f8ce 4000 	str.w	r4, [lr]
   13b32:	a8e7      	add	r0, sp, #924	; 0x39c
   13b34:	2201      	movs	r2, #1
   13b36:	9135      	str	r1, [sp, #212]	; 0xd4
   13b38:	4619      	mov	r1, r3
   13b3a:	4663      	mov	r3, ip
   13b3c:	f7f5 f832 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b40:	e7ff      	b.n	13b42 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   13b42:	a8e5      	add	r0, sp, #916	; 0x394
   13b44:	90e2      	str	r0, [sp, #904]	; 0x388
   13b46:	a8e6      	add	r0, sp, #920	; 0x398
   13b48:	90e3      	str	r0, [sp, #908]	; 0x38c
   13b4a:	a8e7      	add	r0, sp, #924	; 0x39c
   13b4c:	90e4      	str	r0, [sp, #912]	; 0x390
   13b4e:	98e2      	ldr	r0, [sp, #904]	; 0x388
   13b50:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   13b54:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   13b56:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   13b5a:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   13b5c:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   13b60:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13b64:	f2c0 0300 	movt	r3, #0
   13b68:	9134      	str	r1, [sp, #208]	; 0xd0
   13b6a:	4619      	mov	r1, r3
   13b6c:	9233      	str	r2, [sp, #204]	; 0xcc
   13b6e:	f7f5 fc78 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b72:	9032      	str	r0, [sp, #200]	; 0xc8
   13b74:	9131      	str	r1, [sp, #196]	; 0xc4
   13b76:	e7ff      	b.n	13b78 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   13b78:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13b7c:	f2c0 0100 	movt	r1, #0
   13b80:	9834      	ldr	r0, [sp, #208]	; 0xd0
   13b82:	f7f5 fc6e 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b86:	9030      	str	r0, [sp, #192]	; 0xc0
   13b88:	912f      	str	r1, [sp, #188]	; 0xbc
   13b8a:	e7ff      	b.n	13b8c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   13b8c:	f648 416b 	movw	r1, #35947	; 0x8c6b
   13b90:	f2c0 0101 	movt	r1, #1
   13b94:	9833      	ldr	r0, [sp, #204]	; 0xcc
   13b96:	f7f5 fca3 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13b9a:	902e      	str	r0, [sp, #184]	; 0xb8
   13b9c:	912d      	str	r1, [sp, #180]	; 0xb4
   13b9e:	e7ff      	b.n	13ba0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   13ba0:	9832      	ldr	r0, [sp, #200]	; 0xc8
   13ba2:	90dc      	str	r0, [sp, #880]	; 0x370
   13ba4:	9931      	ldr	r1, [sp, #196]	; 0xc4
   13ba6:	91dd      	str	r1, [sp, #884]	; 0x374
   13ba8:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   13baa:	92de      	str	r2, [sp, #888]	; 0x378
   13bac:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   13bae:	93df      	str	r3, [sp, #892]	; 0x37c
   13bb0:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   13bb4:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   13bb8:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   13bbc:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   13bc0:	466c      	mov	r4, sp
   13bc2:	2503      	movs	r5, #3
   13bc4:	6025      	str	r5, [r4, #0]
   13bc6:	a8d6      	add	r0, sp, #856	; 0x358
   13bc8:	abdc      	add	r3, sp, #880	; 0x370
   13bca:	9935      	ldr	r1, [sp, #212]	; 0xd4
   13bcc:	462a      	mov	r2, r5
   13bce:	f7f4 ffe9 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13bd2:	e7ff      	b.n	13bd4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   13bd4:	f647 2078 	movw	r0, #31352	; 0x7a78
   13bd8:	f2c0 0002 	movt	r0, #2
   13bdc:	f004 fd57 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13be0:	902c      	str	r0, [sp, #176]	; 0xb0
   13be2:	e7ff      	b.n	13be4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   13be4:	a8d6      	add	r0, sp, #856	; 0x358
   13be6:	992c      	ldr	r1, [sp, #176]	; 0xb0
   13be8:	f004 fd8e 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13bec:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   13bee:	f244 507d 	movw	r0, #17789	; 0x457d
   13bf2:	f2c0 0001 	movt	r0, #1
   13bf6:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   13bf8:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   13bfa:	f646 208c 	movw	r0, #27276	; 0x6a8c
   13bfe:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13c02:	2200      	movs	r2, #0
   13c04:	f008 f854 	bl	1bcb0 <os_mqueue_init>
   13c08:	90ed      	str	r0, [sp, #948]	; 0x3b4
   13c0a:	e7ff      	b.n	13c0c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   13c0c:	f647 1058 	movw	r0, #31064	; 0x7958
   13c10:	f2c0 0002 	movt	r0, #2
   13c14:	6800      	ldr	r0, [r0, #0]
   13c16:	a9ed      	add	r1, sp, #948	; 0x3b4
   13c18:	91ef      	str	r1, [sp, #956]	; 0x3bc
   13c1a:	90f0      	str	r0, [sp, #960]	; 0x3c0
   13c1c:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   13c1e:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   13c22:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   13c24:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   13c28:	6802      	ldr	r2, [r0, #0]
   13c2a:	680b      	ldr	r3, [r1, #0]
   13c2c:	429a      	cmp	r2, r3
   13c2e:	902b      	str	r0, [sp, #172]	; 0xac
   13c30:	912a      	str	r1, [sp, #168]	; 0xa8
   13c32:	d10a      	bne.n	13c4a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   13c34:	e7ff      	b.n	13c36 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   13c36:	f646 207c 	movw	r0, #27260	; 0x6a7c
   13c3a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13c3e:	2100      	movs	r1, #0
   13c40:	f008 fd30 	bl	1c6a4 <os_sem_init>
   13c44:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   13c48:	e07b      	b.n	13d42 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   13c4a:	f647 10b0 	movw	r0, #31152	; 0x79b0
   13c4e:	f2c0 0002 	movt	r0, #2
   13c52:	6801      	ldr	r1, [r0, #0]
   13c54:	982b      	ldr	r0, [sp, #172]	; 0xac
   13c56:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   13c5a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   13c5c:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   13c60:	f647 239c 	movw	r3, #31388	; 0x7a9c
   13c64:	f2c0 0302 	movt	r3, #2
   13c68:	681b      	ldr	r3, [r3, #0]
   13c6a:	f647 1cd0 	movw	ip, #31184	; 0x79d0
   13c6e:	f2c0 0c02 	movt	ip, #2
   13c72:	f8dc c000 	ldr.w	ip, [ip]
   13c76:	46ee      	mov	lr, sp
   13c78:	2400      	movs	r4, #0
   13c7a:	f8ce 4000 	str.w	r4, [lr]
   13c7e:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13c82:	2201      	movs	r2, #1
   13c84:	9129      	str	r1, [sp, #164]	; 0xa4
   13c86:	4619      	mov	r1, r3
   13c88:	4663      	mov	r3, ip
   13c8a:	f7f4 ff8b 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c8e:	e7ff      	b.n	13c90 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   13c90:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   13c94:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   13c96:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   13c9a:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   13c9c:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13ca0:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   13ca2:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   13ca4:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   13ca8:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   13caa:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   13cae:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   13cb0:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   13cb4:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13cb8:	f2c0 0300 	movt	r3, #0
   13cbc:	9128      	str	r1, [sp, #160]	; 0xa0
   13cbe:	4619      	mov	r1, r3
   13cc0:	9227      	str	r2, [sp, #156]	; 0x9c
   13cc2:	f7f5 fbce 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13cc6:	9026      	str	r0, [sp, #152]	; 0x98
   13cc8:	9125      	str	r1, [sp, #148]	; 0x94
   13cca:	e7ff      	b.n	13ccc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   13ccc:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13cd0:	f2c0 0100 	movt	r1, #0
   13cd4:	9828      	ldr	r0, [sp, #160]	; 0xa0
   13cd6:	f7f5 fbc4 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13cda:	9024      	str	r0, [sp, #144]	; 0x90
   13cdc:	9123      	str	r1, [sp, #140]	; 0x8c
   13cde:	e7ff      	b.n	13ce0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   13ce0:	f648 416b 	movw	r1, #35947	; 0x8c6b
   13ce4:	f2c0 0101 	movt	r1, #1
   13ce8:	9827      	ldr	r0, [sp, #156]	; 0x9c
   13cea:	f7f5 fbf9 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13cee:	9022      	str	r0, [sp, #136]	; 0x88
   13cf0:	9121      	str	r1, [sp, #132]	; 0x84
   13cf2:	e7ff      	b.n	13cf4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   13cf4:	9826      	ldr	r0, [sp, #152]	; 0x98
   13cf6:	90f7      	str	r0, [sp, #988]	; 0x3dc
   13cf8:	9925      	ldr	r1, [sp, #148]	; 0x94
   13cfa:	91f8      	str	r1, [sp, #992]	; 0x3e0
   13cfc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13cfe:	92f9      	str	r2, [sp, #996]	; 0x3e4
   13d00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13d02:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   13d04:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   13d08:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   13d0c:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   13d10:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   13d14:	466c      	mov	r4, sp
   13d16:	2503      	movs	r5, #3
   13d18:	6025      	str	r5, [r4, #0]
   13d1a:	a8f1      	add	r0, sp, #964	; 0x3c4
   13d1c:	abf7      	add	r3, sp, #988	; 0x3dc
   13d1e:	9929      	ldr	r1, [sp, #164]	; 0xa4
   13d20:	462a      	mov	r2, r5
   13d22:	f7f4 ff3f 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13d26:	e7ff      	b.n	13d28 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   13d28:	f647 20a0 	movw	r0, #31392	; 0x7aa0
   13d2c:	f2c0 0002 	movt	r0, #2
   13d30:	f004 fcad 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13d34:	9020      	str	r0, [sp, #128]	; 0x80
   13d36:	e7ff      	b.n	13d38 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   13d38:	a8f1      	add	r0, sp, #964	; 0x3c4
   13d3a:	9920      	ldr	r1, [sp, #128]	; 0x80
   13d3c:	f004 fce4 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13d40:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13d42:	f647 1058 	movw	r0, #31064	; 0x7958
   13d46:	f2c0 0002 	movt	r0, #2
   13d4a:	6800      	ldr	r0, [r0, #0]
   13d4c:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   13d50:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   13d54:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   13d58:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   13d5c:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   13d60:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   13d64:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   13d68:	6802      	ldr	r2, [r0, #0]
   13d6a:	680b      	ldr	r3, [r1, #0]
   13d6c:	429a      	cmp	r2, r3
   13d6e:	901f      	str	r0, [sp, #124]	; 0x7c
   13d70:	911e      	str	r1, [sp, #120]	; 0x78
   13d72:	d10a      	bne.n	13d8a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   13d74:	e7ff      	b.n	13d76 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   13d76:	f646 2084 	movw	r0, #27268	; 0x6a84
   13d7a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13d7e:	2102      	movs	r1, #2
   13d80:	f008 fc90 	bl	1c6a4 <os_sem_init>
   13d84:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   13d88:	e088      	b.n	13e9c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13d8a:	f647 10b0 	movw	r0, #31152	; 0x79b0
   13d8e:	f2c0 0002 	movt	r0, #2
   13d92:	6801      	ldr	r1, [r0, #0]
   13d94:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13d96:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   13d9a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13d9c:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   13da0:	f647 23c8 	movw	r3, #31432	; 0x7ac8
   13da4:	f2c0 0302 	movt	r3, #2
   13da8:	681b      	ldr	r3, [r3, #0]
   13daa:	f647 1cd0 	movw	ip, #31184	; 0x79d0
   13dae:	f2c0 0c02 	movt	ip, #2
   13db2:	f8dc c000 	ldr.w	ip, [ip]
   13db6:	46ee      	mov	lr, sp
   13db8:	2400      	movs	r4, #0
   13dba:	f8ce 4000 	str.w	r4, [lr]
   13dbe:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13dc2:	2201      	movs	r2, #1
   13dc4:	911d      	str	r1, [sp, #116]	; 0x74
   13dc6:	4619      	mov	r1, r3
   13dc8:	4663      	mov	r3, ip
   13dca:	f7f4 feeb 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13dce:	e7ff      	b.n	13dd0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   13dd0:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   13dd4:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   13dd8:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   13ddc:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   13de0:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13de4:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   13de8:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   13dec:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   13df0:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   13df4:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   13df8:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   13dfc:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   13e00:	f249 4347 	movw	r3, #37959	; 0x9447
   13e04:	f2c0 0300 	movt	r3, #0
   13e08:	911c      	str	r1, [sp, #112]	; 0x70
   13e0a:	4619      	mov	r1, r3
   13e0c:	921b      	str	r2, [sp, #108]	; 0x6c
   13e0e:	f7f5 fb52 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13e12:	901a      	str	r0, [sp, #104]	; 0x68
   13e14:	9119      	str	r1, [sp, #100]	; 0x64
   13e16:	e7ff      	b.n	13e18 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   13e18:	f249 4147 	movw	r1, #37959	; 0x9447
   13e1c:	f2c0 0100 	movt	r1, #0
   13e20:	981c      	ldr	r0, [sp, #112]	; 0x70
   13e22:	f7f5 fb48 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13e26:	9018      	str	r0, [sp, #96]	; 0x60
   13e28:	9117      	str	r1, [sp, #92]	; 0x5c
   13e2a:	e7ff      	b.n	13e2c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   13e2c:	f648 416b 	movw	r1, #35947	; 0x8c6b
   13e30:	f2c0 0101 	movt	r1, #1
   13e34:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13e36:	f7f5 fb53 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13e3a:	9016      	str	r0, [sp, #88]	; 0x58
   13e3c:	9115      	str	r1, [sp, #84]	; 0x54
   13e3e:	e7ff      	b.n	13e40 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   13e40:	981a      	ldr	r0, [sp, #104]	; 0x68
   13e42:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   13e46:	9919      	ldr	r1, [sp, #100]	; 0x64
   13e48:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   13e4c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13e4e:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   13e52:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13e54:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   13e58:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   13e5c:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   13e60:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   13e64:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   13e68:	466c      	mov	r4, sp
   13e6a:	2503      	movs	r5, #3
   13e6c:	6025      	str	r5, [r4, #0]
   13e6e:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13e72:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   13e76:	991d      	ldr	r1, [sp, #116]	; 0x74
   13e78:	462a      	mov	r2, r5
   13e7a:	f7f4 fe93 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13e7e:	e7ff      	b.n	13e80 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   13e80:	f647 20cc 	movw	r0, #31436	; 0x7acc
   13e84:	f2c0 0002 	movt	r0, #2
   13e88:	f004 fc01 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13e8c:	9014      	str	r0, [sp, #80]	; 0x50
   13e8e:	e7ff      	b.n	13e90 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   13e90:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13e94:	9914      	ldr	r1, [sp, #80]	; 0x50
   13e96:	f004 fc37 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13e9a:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13e9c:	f647 1058 	movw	r0, #31064	; 0x7958
   13ea0:	f2c0 0002 	movt	r0, #2
   13ea4:	6800      	ldr	r0, [r0, #0]
   13ea6:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   13eaa:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   13eae:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   13eb2:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   13eb6:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   13eba:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   13ebe:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   13ec2:	6802      	ldr	r2, [r0, #0]
   13ec4:	680b      	ldr	r3, [r1, #0]
   13ec6:	429a      	cmp	r2, r3
   13ec8:	9013      	str	r0, [sp, #76]	; 0x4c
   13eca:	9112      	str	r1, [sp, #72]	; 0x48
   13ecc:	d125      	bne.n	13f1a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   13ece:	e7ff      	b.n	13ed0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   13ed0:	f647 20f8 	movw	r0, #31480	; 0x7af8
   13ed4:	f2c0 0002 	movt	r0, #2
   13ed8:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   13eda:	f244 007b 	movw	r0, #16507	; 0x407b
   13ede:	f2c0 0001 	movt	r0, #1
   13ee2:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   13ee6:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   13eea:	4668      	mov	r0, sp
   13eec:	f44f 7380 	mov.w	r3, #256	; 0x100
   13ef0:	6103      	str	r3, [r0, #16]
   13ef2:	60c3      	str	r3, [r0, #12]
   13ef4:	f646 3304 	movw	r3, #27396	; 0x6b04
   13ef8:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13efc:	6083      	str	r3, [r0, #8]
   13efe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13f02:	6043      	str	r3, [r0, #4]
   13f04:	230a      	movs	r3, #10
   13f06:	6003      	str	r3, [r0, #0]
   13f08:	f646 20b4 	movw	r0, #27316	; 0x6ab4
   13f0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13f10:	2300      	movs	r3, #0
   13f12:	f7f4 ff41 	bl	8d98 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   13f16:	9011      	str	r0, [sp, #68]	; 0x44
   13f18:	e088      	b.n	1402c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13f1a:	f647 10b0 	movw	r0, #31152	; 0x79b0
   13f1e:	f2c0 0002 	movt	r0, #2
   13f22:	6801      	ldr	r1, [r0, #0]
   13f24:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13f26:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   13f2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13f2c:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   13f30:	f647 23c8 	movw	r3, #31432	; 0x7ac8
   13f34:	f2c0 0302 	movt	r3, #2
   13f38:	681b      	ldr	r3, [r3, #0]
   13f3a:	f647 1cd0 	movw	ip, #31184	; 0x79d0
   13f3e:	f2c0 0c02 	movt	ip, #2
   13f42:	f8dc c000 	ldr.w	ip, [ip]
   13f46:	46ee      	mov	lr, sp
   13f48:	2400      	movs	r4, #0
   13f4a:	f8ce 4000 	str.w	r4, [lr]
   13f4e:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13f52:	2201      	movs	r2, #1
   13f54:	9110      	str	r1, [sp, #64]	; 0x40
   13f56:	4619      	mov	r1, r3
   13f58:	4663      	mov	r3, ip
   13f5a:	f7f4 fe23 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13f5e:	e7ff      	b.n	13f60 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   13f60:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   13f64:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   13f68:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   13f6c:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   13f70:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13f74:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   13f78:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   13f7c:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   13f80:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   13f84:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   13f88:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   13f8c:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   13f90:	f249 4347 	movw	r3, #37959	; 0x9447
   13f94:	f2c0 0300 	movt	r3, #0
   13f98:	910f      	str	r1, [sp, #60]	; 0x3c
   13f9a:	4619      	mov	r1, r3
   13f9c:	920e      	str	r2, [sp, #56]	; 0x38
   13f9e:	f7f5 fa8a 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13fa2:	900d      	str	r0, [sp, #52]	; 0x34
   13fa4:	910c      	str	r1, [sp, #48]	; 0x30
   13fa6:	e7ff      	b.n	13fa8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   13fa8:	f249 4147 	movw	r1, #37959	; 0x9447
   13fac:	f2c0 0100 	movt	r1, #0
   13fb0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13fb2:	f7f5 fa80 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13fb6:	900b      	str	r0, [sp, #44]	; 0x2c
   13fb8:	910a      	str	r1, [sp, #40]	; 0x28
   13fba:	e7ff      	b.n	13fbc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   13fbc:	f648 416b 	movw	r1, #35947	; 0x8c6b
   13fc0:	f2c0 0101 	movt	r1, #1
   13fc4:	980e      	ldr	r0, [sp, #56]	; 0x38
   13fc6:	f7f5 fa8b 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13fca:	9009      	str	r0, [sp, #36]	; 0x24
   13fcc:	9108      	str	r1, [sp, #32]
   13fce:	e7ff      	b.n	13fd0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   13fd0:	980d      	ldr	r0, [sp, #52]	; 0x34
   13fd2:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   13fd6:	990c      	ldr	r1, [sp, #48]	; 0x30
   13fd8:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   13fdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13fde:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   13fe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13fe4:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   13fe8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   13fec:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   13ff0:	f8dd e020 	ldr.w	lr, [sp, #32]
   13ff4:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   13ff8:	466c      	mov	r4, sp
   13ffa:	2503      	movs	r5, #3
   13ffc:	6025      	str	r5, [r4, #0]
   13ffe:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   14002:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   14006:	9910      	ldr	r1, [sp, #64]	; 0x40
   14008:	462a      	mov	r2, r5
   1400a:	f7f4 fdcb 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1400e:	e7ff      	b.n	14010 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   14010:	f647 20dc 	movw	r0, #31452	; 0x7adc
   14014:	f2c0 0002 	movt	r0, #2
   14018:	f004 fb39 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1401c:	9007      	str	r0, [sp, #28]
   1401e:	e7ff      	b.n	14020 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   14020:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   14024:	9907      	ldr	r1, [sp, #28]
   14026:	f004 fb6f 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1402a:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   1402c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1402e:	f7f4 fe27 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   14032:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   14036:	e7ff      	b.n	14038 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   14038:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   1403c:	1e41      	subs	r1, r0, #1
   1403e:	bf18      	it	ne
   14040:	2101      	movne	r1, #1
   14042:	2801      	cmp	r0, #1
   14044:	d001      	beq.n	1404a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   14046:	e7ff      	b.n	14048 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   14048:	e005      	b.n	14056 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   1404a:	2000      	movs	r0, #0
    Ok(())
   1404c:	9069      	str	r0, [sp, #420]	; 0x1a4
   1404e:	2001      	movs	r0, #1
   14050:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   14052:	e008      	b.n	14066 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   14054:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   14056:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   1405a:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   1405e:	f7ff fa17 	bl	13490 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   14062:	9006      	str	r0, [sp, #24]
   14064:	e003      	b.n	1406e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   14066:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   14068:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   1406c:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   1406e:	9806      	ldr	r0, [sp, #24]
   14070:	f7f4 fdfa 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   14074:	9069      	str	r0, [sp, #420]	; 0x1a4
   14076:	e7ff      	b.n	14078 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   14078:	e7f5      	b.n	14066 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

0001407a <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   1407a:	b580      	push	{r7, lr}
   1407c:	b082      	sub	sp, #8
   1407e:	9001      	str	r0, [sp, #4]
    loop {
   14080:	e7ff      	b.n	14082 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   14082:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   14086:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1408a:	f7f4 fe6c 	bl	8d66 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   1408e:	9000      	str	r0, [sp, #0]
   14090:	e7ff      	b.n	14092 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   14092:	f647 21fc 	movw	r1, #31484	; 0x7afc
   14096:	f2c0 0102 	movt	r1, #2
   1409a:	f647 3308 	movw	r3, #31496	; 0x7b08
   1409e:	f2c0 0302 	movt	r3, #2
   140a2:	220b      	movs	r2, #11
   140a4:	9800      	ldr	r0, [sp, #0]
   140a6:	f7f4 fdac 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   140aa:	e7ff      	b.n	140ac <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   140ac:	f007 fa34 	bl	1b518 <hal_watchdog_tickle>
   140b0:	e7ff      	b.n	140b2 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   140b2:	e7e6      	b.n	14082 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

000140b4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   140b4:	b580      	push	{r7, lr}
   140b6:	b08c      	sub	sp, #48	; 0x30
   140b8:	4601      	mov	r1, r0
   140ba:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   140be:	9104      	str	r1, [sp, #16]
   140c0:	f000 f8d4 	bl	1426c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   140c4:	9003      	str	r0, [sp, #12]
   140c6:	e7ff      	b.n	140c8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   140c8:	9803      	ldr	r0, [sp, #12]
   140ca:	f7f4 fdd9 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   140ce:	9006      	str	r0, [sp, #24]
   140d0:	e7ff      	b.n	140d2 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   140d2:	9806      	ldr	r0, [sp, #24]
   140d4:	1e41      	subs	r1, r0, #1
   140d6:	bf18      	it	ne
   140d8:	2101      	movne	r1, #1
   140da:	2801      	cmp	r0, #1
   140dc:	d001      	beq.n	140e2 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   140de:	e7ff      	b.n	140e0 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   140e0:	e00c      	b.n	140fc <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   140e2:	f644 2070 	movw	r0, #19056	; 0x4a70
   140e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   140ea:	9904      	ldr	r1, [sp, #16]
   140ec:	f7ff f9a4 	bl	13438 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   140f0:	f88d 101d 	strb.w	r1, [sp, #29]
   140f4:	f88d 001c 	strb.w	r0, [sp, #28]
   140f8:	e00f      	b.n	1411a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   140fa:	defe      	udf	#254	; 0xfe
   140fc:	9806      	ldr	r0, [sp, #24]
   140fe:	900b      	str	r0, [sp, #44]	; 0x2c
   14100:	f7ff f9c6 	bl	13490 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   14104:	9002      	str	r0, [sp, #8]
   14106:	e002      	b.n	1410e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   14108:	9805      	ldr	r0, [sp, #20]
   1410a:	b00c      	add	sp, #48	; 0x30
   1410c:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   1410e:	9802      	ldr	r0, [sp, #8]
   14110:	f7f4 fdaa 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   14114:	9005      	str	r0, [sp, #20]
   14116:	e7ff      	b.n	14118 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   14118:	e7f6      	b.n	14108 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   1411a:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   1411c:	f7f4 fd98 	bl	8c50 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   14120:	9001      	str	r0, [sp, #4]
   14122:	e7ff      	b.n	14124 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   14124:	9801      	ldr	r0, [sp, #4]
   14126:	07c1      	lsls	r1, r0, #31
   14128:	2900      	cmp	r1, #0
   1412a:	d105      	bne.n	14138 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   1412c:	e7ff      	b.n	1412e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   1412e:	2000      	movs	r0, #0
    Ok(())
   14130:	9005      	str	r0, [sp, #20]
   14132:	2001      	movs	r0, #1
   14134:	9005      	str	r0, [sp, #20]
}
   14136:	e7e7      	b.n	14108 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   14138:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   1413c:	9008      	str	r0, [sp, #32]
   1413e:	9808      	ldr	r0, [sp, #32]
   14140:	9005      	str	r0, [sp, #20]
   14142:	e7e1      	b.n	14108 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

00014144 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   14144:	b580      	push	{r7, lr}
   14146:	b094      	sub	sp, #80	; 0x50
   14148:	9010      	str	r0, [sp, #64]	; 0x40
   1414a:	9111      	str	r1, [sp, #68]	; 0x44
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   1414c:	f644 2270 	movw	r2, #19056	; 0x4a70
   14150:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14154:	900d      	str	r0, [sp, #52]	; 0x34
   14156:	4610      	mov	r0, r2
   14158:	910c      	str	r1, [sp, #48]	; 0x30
   1415a:	f7ff f953 	bl	13404 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   1415e:	900b      	str	r0, [sp, #44]	; 0x2c
   14160:	910a      	str	r1, [sp, #40]	; 0x28
   14162:	e7ff      	b.n	14164 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   14164:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14166:	990a      	ldr	r1, [sp, #40]	; 0x28
   14168:	f7fe fcf4 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1416c:	9009      	str	r0, [sp, #36]	; 0x24
   1416e:	e7ff      	b.n	14170 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   14170:	9809      	ldr	r0, [sp, #36]	; 0x24
   14172:	2800      	cmp	r0, #0
   14174:	d009      	beq.n	1418a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x46>
   14176:	e7ff      	b.n	14178 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  if unsafe { PENDING_DATA.len() + data.len() > PENDING_DATA.capacity() } { cortex_m::asm::bkpt(); } ////
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   14178:	f644 2078 	movw	r0, #19064	; 0x4a78
   1417c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14180:	f7ff f934 	bl	133ec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   14184:	9008      	str	r0, [sp, #32]
   14186:	9107      	str	r1, [sp, #28]
   14188:	e00b      	b.n	141a2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x5e>
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   1418a:	f647 3018 	movw	r0, #31512	; 0x7b18
   1418e:	f2c0 0002 	movt	r0, #2
   14192:	f647 3224 	movw	r2, #31524	; 0x7b24
   14196:	f2c0 0202 	movt	r2, #2
   1419a:	210b      	movs	r1, #11
   1419c:	f004 fa7e 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   141a0:	defe      	udf	#254	; 0xfe
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   141a2:	9808      	ldr	r0, [sp, #32]
   141a4:	9907      	ldr	r1, [sp, #28]
   141a6:	f7fe fcd5 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   141aa:	9006      	str	r0, [sp, #24]
   141ac:	e7ff      	b.n	141ae <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x6a>
   141ae:	980d      	ldr	r0, [sp, #52]	; 0x34
   141b0:	990c      	ldr	r1, [sp, #48]	; 0x30
   141b2:	f7fe fccf 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   141b6:	9005      	str	r0, [sp, #20]
   141b8:	e7ff      	b.n	141ba <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x76>
   141ba:	9806      	ldr	r0, [sp, #24]
   141bc:	9905      	ldr	r1, [sp, #20]
   141be:	1842      	adds	r2, r0, r1
   141c0:	4613      	mov	r3, r2
   141c2:	4282      	cmp	r2, r0
   141c4:	9304      	str	r3, [sp, #16]
   141c6:	d345      	bcc.n	14254 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x110>
   141c8:	e7ff      	b.n	141ca <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x86>
   141ca:	f644 2078 	movw	r0, #19064	; 0x4a78
   141ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
   141d2:	f7ff f953 	bl	1347c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>
   141d6:	9003      	str	r0, [sp, #12]
   141d8:	e7ff      	b.n	141da <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x96>
   141da:	9804      	ldr	r0, [sp, #16]
   141dc:	9903      	ldr	r1, [sp, #12]
   141de:	4288      	cmp	r0, r1
   141e0:	d80a      	bhi.n	141f8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xb4>
   141e2:	e7ff      	b.n	141e4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa0>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   141e4:	f644 2078 	movw	r0, #19064	; 0x4a78
   141e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   141ec:	990d      	ldr	r1, [sp, #52]	; 0x34
   141ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   141f0:	f7ff f914 	bl	1341c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>
   141f4:	9002      	str	r0, [sp, #8]
   141f6:	e00b      	b.n	14210 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xcc>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   141f8:	f647 306c 	movw	r0, #31596	; 0x7b6c
   141fc:	f2c0 0002 	movt	r0, #2
   14200:	f647 3278 	movw	r2, #31608	; 0x7b78
   14204:	f2c0 0202 	movt	r2, #2
   14208:	210c      	movs	r1, #12
   1420a:	f004 fa47 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1420e:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   14210:	9802      	ldr	r0, [sp, #8]
   14212:	f000 0001 	and.w	r0, r0, #1
   14216:	f7f4 fd2d 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1421a:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   1421e:	e7ff      	b.n	14220 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xdc>
   14220:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   14224:	07c1      	lsls	r1, r0, #31
   14226:	2900      	cmp	r1, #0
   14228:	d001      	beq.n	1422e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xea>
   1422a:	e7ff      	b.n	1422c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xe8>
   1422c:	e005      	b.n	1423a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xf6>
   1422e:	2000      	movs	r0, #0
    Ok(())
   14230:	900e      	str	r0, [sp, #56]	; 0x38
   14232:	2001      	movs	r0, #1
   14234:	900e      	str	r0, [sp, #56]	; 0x38
}
   14236:	e004      	b.n	14242 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   14238:	defe      	udf	#254	; 0xfe
   1423a:	f7ff f8c1 	bl	133c0 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   1423e:	9001      	str	r0, [sp, #4]
   14240:	e002      	b.n	14248 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x104>
}
   14242:	980e      	ldr	r0, [sp, #56]	; 0x38
   14244:	b014      	add	sp, #80	; 0x50
   14246:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   14248:	9801      	ldr	r0, [sp, #4]
   1424a:	f7f4 fd0d 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   1424e:	900e      	str	r0, [sp, #56]	; 0x38
   14250:	e7ff      	b.n	14252 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x10e>
   14252:	e7f6      	b.n	14242 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   14254:	f647 3050 	movw	r0, #31568	; 0x7b50
   14258:	f2c0 0002 	movt	r0, #2
   1425c:	f647 3234 	movw	r2, #31540	; 0x7b34
   14260:	f2c0 0202 	movt	r2, #2
   14264:	211c      	movs	r1, #28
   14266:	f004 fa19 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1426a:	defe      	udf	#254	; 0xfe

0001426c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   1426c:	b580      	push	{r7, lr}
   1426e:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   14270:	f644 2070 	movw	r0, #19056	; 0x4a70
   14274:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14278:	f7ff f8c4 	bl	13404 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   1427c:	900b      	str	r0, [sp, #44]	; 0x2c
   1427e:	910a      	str	r1, [sp, #40]	; 0x28
   14280:	e016      	b.n	142b0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   14282:	2001      	movs	r0, #1
   14284:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   14288:	e00c      	b.n	142a4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   1428a:	2000      	movs	r0, #0
   1428c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   14290:	e008      	b.n	142a4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   14292:	f644 2078 	movw	r0, #19064	; 0x4a78
   14296:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1429a:	f7ff f8a7 	bl	133ec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   1429e:	9009      	str	r0, [sp, #36]	; 0x24
   142a0:	9108      	str	r1, [sp, #32]
   142a2:	e00f      	b.n	142c4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   142a4:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   142a8:	07c0      	lsls	r0, r0, #31
   142aa:	2800      	cmp	r0, #0
   142ac:	d11d      	bne.n	142ea <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   142ae:	e013      	b.n	142d8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   142b0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   142b2:	990a      	ldr	r1, [sp, #40]	; 0x28
   142b4:	f7fe fc4e 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   142b8:	9007      	str	r0, [sp, #28]
   142ba:	e7ff      	b.n	142bc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   142bc:	9807      	ldr	r0, [sp, #28]
   142be:	2800      	cmp	r0, #0
   142c0:	d0e7      	beq.n	14292 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   142c2:	e7e2      	b.n	1428a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   142c4:	9809      	ldr	r0, [sp, #36]	; 0x24
   142c6:	9908      	ldr	r1, [sp, #32]
   142c8:	f7fe fc44 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   142cc:	9006      	str	r0, [sp, #24]
   142ce:	e7ff      	b.n	142d0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   142d0:	9806      	ldr	r0, [sp, #24]
   142d2:	2800      	cmp	r0, #0
   142d4:	d0d5      	beq.n	14282 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   142d6:	e7d8      	b.n	1428a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   142d8:	f644 2070 	movw	r0, #19056	; 0x4a70
   142dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   142e0:	f7ff f890 	bl	13404 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   142e4:	9005      	str	r0, [sp, #20]
   142e6:	9104      	str	r1, [sp, #16]
   142e8:	e007      	b.n	142fa <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   142ea:	2000      	movs	r0, #0
        return Ok(());
   142ec:	900c      	str	r0, [sp, #48]	; 0x30
   142ee:	2001      	movs	r0, #1
   142f0:	900c      	str	r0, [sp, #48]	; 0x30
   142f2:	e7ff      	b.n	142f4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   142f4:	980c      	ldr	r0, [sp, #48]	; 0x30
   142f6:	b010      	add	sp, #64	; 0x40
   142f8:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   142fa:	9804      	ldr	r0, [sp, #16]
   142fc:	2800      	cmp	r0, #0
   142fe:	d03f      	beq.n	14380 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   14300:	e7ff      	b.n	14302 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   14302:	9805      	ldr	r0, [sp, #20]
   14304:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   14306:	f644 2078 	movw	r0, #19064	; 0x4a78
   1430a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1430e:	9103      	str	r1, [sp, #12]
   14310:	f7ff f86c 	bl	133ec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   14314:	9002      	str	r0, [sp, #8]
   14316:	9101      	str	r1, [sp, #4]
   14318:	e7ff      	b.n	1431a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   1431a:	9803      	ldr	r0, [sp, #12]
   1431c:	9902      	ldr	r1, [sp, #8]
   1431e:	9a01      	ldr	r2, [sp, #4]
   14320:	f000 f837 	bl	14392 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   14324:	900e      	str	r0, [sp, #56]	; 0x38
   14326:	e7ff      	b.n	14328 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   14328:	980e      	ldr	r0, [sp, #56]	; 0x38
   1432a:	2801      	cmp	r0, #1
   1432c:	d107      	bne.n	1433e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   1432e:	e7ff      	b.n	14330 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   14330:	f644 2070 	movw	r0, #19056	; 0x4a70
   14334:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14338:	f7ff f890 	bl	1345c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   1433c:	e014      	b.n	14368 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   1433e:	980e      	ldr	r0, [sp, #56]	; 0x38
   14340:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   14342:	f644 2170 	movw	r1, #19056	; 0x4a70
   14346:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1434a:	9000      	str	r0, [sp, #0]
   1434c:	4608      	mov	r0, r1
   1434e:	f7ff f885 	bl	1345c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   14352:	e7ff      	b.n	14354 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   14354:	f644 2078 	movw	r0, #19064	; 0x4a78
   14358:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1435c:	f7ff f886 	bl	1346c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   14360:	e7ff      	b.n	14362 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   14362:	9800      	ldr	r0, [sp, #0]
   14364:	900c      	str	r0, [sp, #48]	; 0x30
   14366:	e7c5      	b.n	142f4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   14368:	f644 2078 	movw	r0, #19064	; 0x4a78
   1436c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14370:	f7ff f87c 	bl	1346c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   14374:	e7ff      	b.n	14376 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   14376:	2000      	movs	r0, #0
    Ok(())
   14378:	900c      	str	r0, [sp, #48]	; 0x30
   1437a:	2001      	movs	r0, #1
   1437c:	900c      	str	r0, [sp, #48]	; 0x30
}
   1437e:	e7b9      	b.n	142f4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   14380:	f647 3088 	movw	r0, #31624	; 0x7b88
   14384:	f2c0 0002 	movt	r0, #2
   14388:	2100      	movs	r1, #0
   1438a:	9a04      	ldr	r2, [sp, #16]
   1438c:	f004 f99c 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   14390:	defe      	udf	#254	; 0xfe

00014392 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   14392:	b580      	push	{r7, lr}
   14394:	b0a0      	sub	sp, #128	; 0x80
   14396:	4603      	mov	r3, r0
   14398:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   1439c:	9116      	str	r1, [sp, #88]	; 0x58
   1439e:	9217      	str	r2, [sp, #92]	; 0x5c
   143a0:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   143a4:	9018      	str	r0, [sp, #96]	; 0x60
   143a6:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   143aa:	fba0 0c0c 	umull	r0, ip, r0, ip
   143ae:	f1bc 0f00 	cmp.w	ip, #0
   143b2:	920f      	str	r2, [sp, #60]	; 0x3c
   143b4:	910e      	str	r1, [sp, #56]	; 0x38
   143b6:	900d      	str	r0, [sp, #52]	; 0x34
   143b8:	f040 80c8 	bne.w	1454c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   143bc:	e7ff      	b.n	143be <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   143be:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   143c2:	f2c1 0062 	movt	r0, #4194	; 0x1062
   143c6:	990d      	ldr	r1, [sp, #52]	; 0x34
   143c8:	fba1 0200 	umull	r0, r2, r1, r0
   143cc:	0991      	lsrs	r1, r2, #6
   143ce:	f646 2284 	movw	r2, #27268	; 0x6a84
   143d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
   143d6:	900c      	str	r0, [sp, #48]	; 0x30
   143d8:	4610      	mov	r0, r2
   143da:	f008 f99d 	bl	1c718 <os_sem_pend>
   143de:	e7ff      	b.n	143e0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   143e0:	980e      	ldr	r0, [sp, #56]	; 0x38
   143e2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   143e4:	f7fe fbb6 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   143e8:	900b      	str	r0, [sp, #44]	; 0x2c
   143ea:	e7ff      	b.n	143ec <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   143ec:	2001      	movs	r0, #1
   143ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
   143f0:	fa10 f081 	uxtah	r0, r0, r1
   143f4:	b282      	uxth	r2, r0
   143f6:	4603      	mov	r3, r0
   143f8:	4282      	cmp	r2, r0
   143fa:	930a      	str	r3, [sp, #40]	; 0x28
   143fc:	f040 80b2 	bne.w	14564 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   14400:	e7ff      	b.n	14402 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   14402:	980a      	ldr	r0, [sp, #40]	; 0x28
   14404:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   14408:	b280      	uxth	r0, r0
   1440a:	2100      	movs	r1, #0
   1440c:	f007 fe92 	bl	1c134 <os_msys_get_pkthdr>
   14410:	4601      	mov	r1, r0
   14412:	901a      	str	r0, [sp, #104]	; 0x68
   14414:	9109      	str	r1, [sp, #36]	; 0x24
   14416:	e7ff      	b.n	14418 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   14418:	9809      	ldr	r0, [sp, #36]	; 0x24
   1441a:	f000 ff17 	bl	1524c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   1441e:	9008      	str	r0, [sp, #32]
   14420:	e7ff      	b.n	14422 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   14422:	9808      	ldr	r0, [sp, #32]
   14424:	07c1      	lsls	r1, r0, #31
   14426:	2900      	cmp	r1, #0
   14428:	d106      	bne.n	14438 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   1442a:	e7ff      	b.n	1442c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   1442c:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   14430:	901b      	str	r0, [sp, #108]	; 0x6c
   14432:	991b      	ldr	r1, [sp, #108]	; 0x6c
   14434:	9107      	str	r1, [sp, #28]
   14436:	e010      	b.n	1445a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   14438:	f646 2084 	movw	r0, #27268	; 0x6a84
   1443c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14440:	f008 f938 	bl	1c6b4 <os_sem_release>
   14444:	e7ff      	b.n	14446 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   14446:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1444a:	9012      	str	r0, [sp, #72]	; 0x48
   1444c:	9812      	ldr	r0, [sp, #72]	; 0x48
   1444e:	9011      	str	r0, [sp, #68]	; 0x44
   14450:	e002      	b.n	14458 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   14452:	9811      	ldr	r0, [sp, #68]	; 0x44
   14454:	b020      	add	sp, #128	; 0x80
   14456:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   14458:	e7fb      	b.n	14452 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   1445a:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   1445c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1445e:	9907      	ldr	r1, [sp, #28]
   14460:	f007 fcc0 	bl	1bde4 <os_mbuf_append>
   14464:	4601      	mov	r1, r0
   14466:	901c      	str	r0, [sp, #112]	; 0x70
   14468:	9106      	str	r1, [sp, #24]
   1446a:	e7ff      	b.n	1446c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   1446c:	9806      	ldr	r0, [sp, #24]
   1446e:	2800      	cmp	r0, #0
   14470:	d106      	bne.n	14480 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   14472:	e7ff      	b.n	14474 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   14474:	980e      	ldr	r0, [sp, #56]	; 0x38
   14476:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14478:	f7fe fb74 	bl	12b64 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   1447c:	9005      	str	r0, [sp, #20]
   1447e:	e011      	b.n	144a4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   14480:	9809      	ldr	r0, [sp, #36]	; 0x24
   14482:	f007 fc93 	bl	1bdac <os_mbuf_free_chain>
   14486:	e7ff      	b.n	14488 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   14488:	f646 2084 	movw	r0, #27268	; 0x6a84
   1448c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14490:	f008 f910 	bl	1c6b4 <os_sem_release>
   14494:	e7ff      	b.n	14496 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   14496:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1449a:	9013      	str	r0, [sp, #76]	; 0x4c
   1449c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1449e:	9011      	str	r0, [sp, #68]	; 0x44
   144a0:	e7ff      	b.n	144a2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   144a2:	e7d9      	b.n	14458 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   144a4:	9805      	ldr	r0, [sp, #20]
   144a6:	901d      	str	r0, [sp, #116]	; 0x74
   144a8:	991d      	ldr	r1, [sp, #116]	; 0x74
   144aa:	9104      	str	r1, [sp, #16]
   144ac:	e7ff      	b.n	144ae <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   144ae:	980e      	ldr	r0, [sp, #56]	; 0x38
   144b0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   144b2:	f7fe fb4f 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   144b6:	9003      	str	r0, [sp, #12]
   144b8:	e7ff      	b.n	144ba <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   144ba:	9803      	ldr	r0, [sp, #12]
   144bc:	b282      	uxth	r2, r0
   144be:	9809      	ldr	r0, [sp, #36]	; 0x24
   144c0:	9904      	ldr	r1, [sp, #16]
   144c2:	f007 fc8f 	bl	1bde4 <os_mbuf_append>
   144c6:	4601      	mov	r1, r0
   144c8:	901e      	str	r0, [sp, #120]	; 0x78
   144ca:	9102      	str	r1, [sp, #8]
   144cc:	e7ff      	b.n	144ce <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   144ce:	9802      	ldr	r0, [sp, #8]
   144d0:	2800      	cmp	r0, #0
   144d2:	d10f      	bne.n	144f4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   144d4:	e7ff      	b.n	144d6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   144d6:	f646 208c 	movw	r0, #27276	; 0x6a8c
   144da:	f2c2 0000 	movt	r0, #8192	; 0x2000
   144de:	f646 21a4 	movw	r1, #27300	; 0x6aa4
   144e2:	f2c2 0100 	movt	r1, #8192	; 0x2000
   144e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   144e8:	f007 fbfe 	bl	1bce8 <os_mqueue_put>
   144ec:	4601      	mov	r1, r0
   144ee:	901f      	str	r0, [sp, #124]	; 0x7c
   144f0:	9101      	str	r1, [sp, #4]
   144f2:	e011      	b.n	14518 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   144f4:	9809      	ldr	r0, [sp, #36]	; 0x24
   144f6:	f007 fc59 	bl	1bdac <os_mbuf_free_chain>
   144fa:	e7ff      	b.n	144fc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   144fc:	f646 2084 	movw	r0, #27268	; 0x6a84
   14500:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14504:	f008 f8d6 	bl	1c6b4 <os_sem_release>
   14508:	e7ff      	b.n	1450a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   1450a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1450e:	9014      	str	r0, [sp, #80]	; 0x50
   14510:	9814      	ldr	r0, [sp, #80]	; 0x50
   14512:	9011      	str	r0, [sp, #68]	; 0x44
   14514:	e7ff      	b.n	14516 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   14516:	e7c4      	b.n	144a2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   14518:	9801      	ldr	r0, [sp, #4]
   1451a:	2800      	cmp	r0, #0
   1451c:	d105      	bne.n	1452a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   1451e:	e7ff      	b.n	14520 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   14520:	2000      	movs	r0, #0
    Ok(())
   14522:	9011      	str	r0, [sp, #68]	; 0x44
   14524:	2001      	movs	r0, #1
   14526:	9011      	str	r0, [sp, #68]	; 0x44
}
   14528:	e793      	b.n	14452 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   1452a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1452c:	f007 fc3e 	bl	1bdac <os_mbuf_free_chain>
   14530:	e7ff      	b.n	14532 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   14532:	f646 2084 	movw	r0, #27268	; 0x6a84
   14536:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1453a:	f008 f8bb 	bl	1c6b4 <os_sem_release>
   1453e:	e7ff      	b.n	14540 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   14540:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   14544:	9015      	str	r0, [sp, #84]	; 0x54
   14546:	9815      	ldr	r0, [sp, #84]	; 0x54
   14548:	9011      	str	r0, [sp, #68]	; 0x44
   1454a:	e7e4      	b.n	14516 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1454c:	f647 30b0 	movw	r0, #31664	; 0x7bb0
   14550:	f2c0 0002 	movt	r0, #2
   14554:	f647 3298 	movw	r2, #31640	; 0x7b98
   14558:	f2c0 0202 	movt	r2, #2
   1455c:	2121      	movs	r1, #33	; 0x21
   1455e:	f004 f89d 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14562:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   14564:	f647 3050 	movw	r0, #31568	; 0x7b50
   14568:	f2c0 0002 	movt	r0, #2
   1456c:	f647 32d4 	movw	r2, #31700	; 0x7bd4
   14570:	f2c0 0202 	movt	r2, #2
   14574:	211c      	movs	r1, #28
   14576:	f004 f891 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1457a:	defe      	udf	#254	; 0xfe

0001457c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   1457c:	b5b0      	push	{r4, r5, r7, lr}
   1457e:	b0c4      	sub	sp, #272	; 0x110
   14580:	9038      	str	r0, [sp, #224]	; 0xe0
   14582:	e7ff      	b.n	14584 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   14584:	f646 208c 	movw	r0, #27276	; 0x6a8c
   14588:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1458c:	f007 fb99 	bl	1bcc2 <os_mqueue_get>
   14590:	4601      	mov	r1, r0
   14592:	9039      	str	r0, [sp, #228]	; 0xe4
   14594:	911b      	str	r1, [sp, #108]	; 0x6c
   14596:	e7ff      	b.n	14598 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   14598:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1459a:	f000 fe57 	bl	1524c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   1459e:	901a      	str	r0, [sp, #104]	; 0x68
   145a0:	e7ff      	b.n	145a2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   145a2:	981a      	ldr	r0, [sp, #104]	; 0x68
   145a4:	07c1      	lsls	r1, r0, #31
   145a6:	2900      	cmp	r1, #0
   145a8:	d106      	bne.n	145b8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   145aa:	e7ff      	b.n	145ac <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   145ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
   145ae:	901c      	str	r0, [sp, #112]	; 0x70
   145b0:	2101      	movs	r1, #1
        let mut first_byte = true;
   145b2:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   145b6:	e001      	b.n	145bc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   145b8:	b044      	add	sp, #272	; 0x110
   145ba:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   145bc:	981c      	ldr	r0, [sp, #112]	; 0x70
   145be:	f000 fe45 	bl	1524c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   145c2:	9019      	str	r0, [sp, #100]	; 0x64
   145c4:	e7ff      	b.n	145c6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   145c6:	9819      	ldr	r0, [sp, #100]	; 0x64
   145c8:	07c1      	lsls	r1, r0, #31
   145ca:	2900      	cmp	r1, #0
   145cc:	d004      	beq.n	145d8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   145ce:	e7ff      	b.n	145d0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   145d0:	981b      	ldr	r0, [sp, #108]	; 0x6c
   145d2:	f007 fbeb 	bl	1bdac <os_mbuf_free_chain>
   145d6:	e0aa      	b.n	1472e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   145d8:	981c      	ldr	r0, [sp, #112]	; 0x70
   145da:	6800      	ldr	r0, [r0, #0]
   145dc:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   145de:	991c      	ldr	r1, [sp, #112]	; 0x70
   145e0:	88c9      	ldrh	r1, [r1, #6]
   145e2:	460a      	mov	r2, r1
   145e4:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   145e8:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   145ec:	07c9      	lsls	r1, r1, #31
   145ee:	2900      	cmp	r1, #0
   145f0:	9018      	str	r0, [sp, #96]	; 0x60
   145f2:	9217      	str	r2, [sp, #92]	; 0x5c
   145f4:	d105      	bne.n	14602 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   145f6:	e7ff      	b.n	145f8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   145f8:	9818      	ldr	r0, [sp, #96]	; 0x60
   145fa:	903e      	str	r0, [sp, #248]	; 0xf8
   145fc:	983e      	ldr	r0, [sp, #248]	; 0xf8
   145fe:	9016      	str	r0, [sp, #88]	; 0x58
   14600:	e07b      	b.n	146fa <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   14602:	2000      	movs	r0, #0
                first_byte = false;
   14604:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   14608:	9818      	ldr	r0, [sp, #96]	; 0x60
   1460a:	903c      	str	r0, [sp, #240]	; 0xf0
   1460c:	983c      	ldr	r0, [sp, #240]	; 0xf0
   1460e:	9015      	str	r0, [sp, #84]	; 0x54
   14610:	e7ff      	b.n	14612 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   14612:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   14614:	9915      	ldr	r1, [sp, #84]	; 0x54
   14616:	9014      	str	r0, [sp, #80]	; 0x50
   14618:	4608      	mov	r0, r1
   1461a:	9914      	ldr	r1, [sp, #80]	; 0x50
   1461c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1461e:	f000 f921 	bl	14864 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   14622:	9013      	str	r0, [sp, #76]	; 0x4c
   14624:	e7ff      	b.n	14626 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   14626:	f647 31e4 	movw	r1, #31716	; 0x7be4
   1462a:	f2c0 0102 	movt	r1, #2
   1462e:	f647 33f0 	movw	r3, #31728	; 0x7bf0
   14632:	f2c0 0302 	movt	r3, #2
   14636:	220c      	movs	r2, #12
   14638:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1463a:	f7f4 fae2 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1463e:	e7ff      	b.n	14640 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   14640:	9818      	ldr	r0, [sp, #96]	; 0x60
   14642:	7801      	ldrb	r1, [r0, #0]
   14644:	2901      	cmp	r1, #1
   14646:	d013      	beq.n	14670 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   14648:	e01a      	b.n	14680 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   1464a:	2001      	movs	r0, #1
   1464c:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   14650:	e008      	b.n	14664 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   14652:	2000      	movs	r0, #0
   14654:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   14658:	e004      	b.n	14664 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   1465a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1465c:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   1465e:	2929      	cmp	r1, #41	; 0x29
   14660:	d0f3      	beq.n	1464a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   14662:	e7f6      	b.n	14652 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   14664:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   14668:	07c0      	lsls	r0, r0, #31
   1466a:	2800      	cmp	r0, #0
   1466c:	d113      	bne.n	14696 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   1466e:	e017      	b.n	146a0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   14670:	2001      	movs	r0, #1
   14672:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   14676:	e008      	b.n	1468a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   14678:	2000      	movs	r0, #0
   1467a:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   1467e:	e004      	b.n	1468a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   14680:	9818      	ldr	r0, [sp, #96]	; 0x60
   14682:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   14684:	2911      	cmp	r1, #17
   14686:	d0f3      	beq.n	14670 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   14688:	e7f6      	b.n	14678 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   1468a:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   1468e:	07c0      	lsls	r0, r0, #31
   14690:	2800      	cmp	r0, #0
   14692:	d1da      	bne.n	1464a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   14694:	e7e1      	b.n	1465a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   14696:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   14698:	f000 fb13 	bl	14cc2 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   1469c:	e7ff      	b.n	1469e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   1469e:	e7ff      	b.n	146a0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   146a0:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   146a2:	9818      	ldr	r0, [sp, #96]	; 0x60
   146a4:	f7fe f9c6 	bl	12a34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   146a8:	9012      	str	r0, [sp, #72]	; 0x48
   146aa:	e7ff      	b.n	146ac <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   146ac:	9812      	ldr	r0, [sp, #72]	; 0x48
   146ae:	903d      	str	r0, [sp, #244]	; 0xf4
   146b0:	983d      	ldr	r0, [sp, #244]	; 0xf4
   146b2:	9011      	str	r0, [sp, #68]	; 0x44
   146b4:	e7ff      	b.n	146b6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   146b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   146ba:	9917      	ldr	r1, [sp, #92]	; 0x5c
   146bc:	fa10 f081 	uxtah	r0, r0, r1
   146c0:	b282      	uxth	r2, r0
   146c2:	4603      	mov	r3, r0
   146c4:	4282      	cmp	r2, r0
   146c6:	9310      	str	r3, [sp, #64]	; 0x40
   146c8:	f040 80c0 	bne.w	1484c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   146cc:	e7ff      	b.n	146ce <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   146ce:	9810      	ldr	r0, [sp, #64]	; 0x40
   146d0:	b281      	uxth	r1, r0
   146d2:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   146d4:	9811      	ldr	r0, [sp, #68]	; 0x44
   146d6:	f000 f8c5 	bl	14864 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   146da:	900f      	str	r0, [sp, #60]	; 0x3c
   146dc:	e7ff      	b.n	146de <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   146de:	f647 31e4 	movw	r1, #31716	; 0x7be4
   146e2:	f2c0 0102 	movt	r1, #2
   146e6:	f647 4334 	movw	r3, #31796	; 0x7c34
   146ea:	f2c0 0302 	movt	r3, #2
   146ee:	220c      	movs	r2, #12
   146f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   146f2:	f7f4 fa86 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   146f6:	e7ff      	b.n	146f8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   146f8:	e015      	b.n	14726 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   146fa:	9817      	ldr	r0, [sp, #92]	; 0x5c
   146fc:	b281      	uxth	r1, r0
   146fe:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   14700:	9816      	ldr	r0, [sp, #88]	; 0x58
   14702:	f000 f8af 	bl	14864 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   14706:	900e      	str	r0, [sp, #56]	; 0x38
   14708:	e7ff      	b.n	1470a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   1470a:	f647 31e4 	movw	r1, #31716	; 0x7be4
   1470e:	f2c0 0102 	movt	r1, #2
   14712:	f647 4344 	movw	r3, #31812	; 0x7c44
   14716:	f2c0 0302 	movt	r3, #2
   1471a:	220c      	movs	r2, #12
   1471c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1471e:	f7f4 fa70 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14722:	e7ff      	b.n	14724 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   14724:	e7ff      	b.n	14726 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   14726:	981c      	ldr	r0, [sp, #112]	; 0x70
   14728:	68c0      	ldr	r0, [r0, #12]
   1472a:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   1472c:	e746      	b.n	145bc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   1472e:	f646 2084 	movw	r0, #27268	; 0x6a84
   14732:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14736:	f007 ffbd 	bl	1c6b4 <os_sem_release>
   1473a:	901e      	str	r0, [sp, #120]	; 0x78
   1473c:	e7ff      	b.n	1473e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   1473e:	f647 1058 	movw	r0, #31064	; 0x7958
   14742:	f2c0 0002 	movt	r0, #2
   14746:	6800      	ldr	r0, [r0, #0]
   14748:	a91e      	add	r1, sp, #120	; 0x78
   1474a:	911f      	str	r1, [sp, #124]	; 0x7c
   1474c:	9020      	str	r0, [sp, #128]	; 0x80
   1474e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   14750:	903f      	str	r0, [sp, #252]	; 0xfc
   14752:	9920      	ldr	r1, [sp, #128]	; 0x80
   14754:	9140      	str	r1, [sp, #256]	; 0x100
   14756:	6802      	ldr	r2, [r0, #0]
   14758:	680b      	ldr	r3, [r1, #0]
   1475a:	429a      	cmp	r2, r3
   1475c:	900d      	str	r0, [sp, #52]	; 0x34
   1475e:	910c      	str	r1, [sp, #48]	; 0x30
   14760:	d101      	bne.n	14766 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   14762:	e7ff      	b.n	14764 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   14764:	e70e      	b.n	14584 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   14766:	f647 10b0 	movw	r0, #31152	; 0x79b0
   1476a:	f2c0 0002 	movt	r0, #2
   1476e:	6801      	ldr	r1, [r0, #0]
   14770:	980d      	ldr	r0, [sp, #52]	; 0x34
   14772:	9030      	str	r0, [sp, #192]	; 0xc0
   14774:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14776:	9231      	str	r2, [sp, #196]	; 0xc4
   14778:	f647 23c8 	movw	r3, #31432	; 0x7ac8
   1477c:	f2c0 0302 	movt	r3, #2
   14780:	681b      	ldr	r3, [r3, #0]
   14782:	f647 1cd0 	movw	ip, #31184	; 0x79d0
   14786:	f2c0 0c02 	movt	ip, #2
   1478a:	f8dc c000 	ldr.w	ip, [ip]
   1478e:	46ee      	mov	lr, sp
   14790:	2400      	movs	r4, #0
   14792:	f8ce 4000 	str.w	r4, [lr]
   14796:	a832      	add	r0, sp, #200	; 0xc8
   14798:	2201      	movs	r2, #1
   1479a:	910b      	str	r1, [sp, #44]	; 0x2c
   1479c:	4619      	mov	r1, r3
   1479e:	4663      	mov	r3, ip
   147a0:	f7f4 fa00 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   147a4:	e7ff      	b.n	147a6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   147a6:	a830      	add	r0, sp, #192	; 0xc0
   147a8:	902d      	str	r0, [sp, #180]	; 0xb4
   147aa:	a831      	add	r0, sp, #196	; 0xc4
   147ac:	902e      	str	r0, [sp, #184]	; 0xb8
   147ae:	a832      	add	r0, sp, #200	; 0xc8
   147b0:	902f      	str	r0, [sp, #188]	; 0xbc
   147b2:	982d      	ldr	r0, [sp, #180]	; 0xb4
   147b4:	9041      	str	r0, [sp, #260]	; 0x104
   147b6:	992e      	ldr	r1, [sp, #184]	; 0xb8
   147b8:	9142      	str	r1, [sp, #264]	; 0x108
   147ba:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   147bc:	9243      	str	r2, [sp, #268]	; 0x10c
   147be:	f249 4347 	movw	r3, #37959	; 0x9447
   147c2:	f2c0 0300 	movt	r3, #0
   147c6:	910a      	str	r1, [sp, #40]	; 0x28
   147c8:	4619      	mov	r1, r3
   147ca:	9209      	str	r2, [sp, #36]	; 0x24
   147cc:	f7f4 fe73 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   147d0:	9008      	str	r0, [sp, #32]
   147d2:	9107      	str	r1, [sp, #28]
   147d4:	e7ff      	b.n	147d6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   147d6:	f249 4147 	movw	r1, #37959	; 0x9447
   147da:	f2c0 0100 	movt	r1, #0
   147de:	980a      	ldr	r0, [sp, #40]	; 0x28
   147e0:	f7f4 fe69 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   147e4:	9006      	str	r0, [sp, #24]
   147e6:	9105      	str	r1, [sp, #20]
   147e8:	e7ff      	b.n	147ea <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   147ea:	f648 416b 	movw	r1, #35947	; 0x8c6b
   147ee:	f2c0 0101 	movt	r1, #1
   147f2:	9809      	ldr	r0, [sp, #36]	; 0x24
   147f4:	f7f4 fe74 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   147f8:	9004      	str	r0, [sp, #16]
   147fa:	9103      	str	r1, [sp, #12]
   147fc:	e7ff      	b.n	147fe <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   147fe:	9808      	ldr	r0, [sp, #32]
   14800:	9027      	str	r0, [sp, #156]	; 0x9c
   14802:	9907      	ldr	r1, [sp, #28]
   14804:	9128      	str	r1, [sp, #160]	; 0xa0
   14806:	9a06      	ldr	r2, [sp, #24]
   14808:	9229      	str	r2, [sp, #164]	; 0xa4
   1480a:	9b05      	ldr	r3, [sp, #20]
   1480c:	932a      	str	r3, [sp, #168]	; 0xa8
   1480e:	f8dd c010 	ldr.w	ip, [sp, #16]
   14812:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   14816:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1481a:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   1481e:	466c      	mov	r4, sp
   14820:	2503      	movs	r5, #3
   14822:	6025      	str	r5, [r4, #0]
   14824:	a821      	add	r0, sp, #132	; 0x84
   14826:	ab27      	add	r3, sp, #156	; 0x9c
   14828:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1482a:	462a      	mov	r2, r5
   1482c:	f7f4 f9ba 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14830:	e7ff      	b.n	14832 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   14832:	f647 4054 	movw	r0, #31828	; 0x7c54
   14836:	f2c0 0002 	movt	r0, #2
   1483a:	f003 ff28 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1483e:	9002      	str	r0, [sp, #8]
   14840:	e7ff      	b.n	14842 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   14842:	a821      	add	r0, sp, #132	; 0x84
   14844:	9902      	ldr	r1, [sp, #8]
   14846:	f003 ff5f 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1484a:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   1484c:	f647 4010 	movw	r0, #31760	; 0x7c10
   14850:	f2c0 0002 	movt	r0, #2
   14854:	f647 4200 	movw	r2, #31744	; 0x7c00
   14858:	f2c0 0202 	movt	r2, #2
   1485c:	2121      	movs	r1, #33	; 0x21
   1485e:	f003 ff1d 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14862:	defe      	udf	#254	; 0xfe

00014864 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   14864:	b5b0      	push	{r4, r5, r7, lr}
   14866:	b0e8      	sub	sp, #416	; 0x1a0
   14868:	4613      	mov	r3, r2
   1486a:	9058      	str	r0, [sp, #352]	; 0x160
   1486c:	9159      	str	r1, [sp, #356]	; 0x164
   1486e:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   14872:	2900      	cmp	r1, #0
   14874:	9121      	str	r1, [sp, #132]	; 0x84
   14876:	9020      	str	r0, [sp, #128]	; 0x80
   14878:	931f      	str	r3, [sp, #124]	; 0x7c
   1487a:	d004      	beq.n	14886 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   1487c:	e7ff      	b.n	1487e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   1487e:	9821      	ldr	r0, [sp, #132]	; 0x84
   14880:	2801      	cmp	r0, #1
   14882:	db0d      	blt.n	148a0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   14884:	e007      	b.n	14896 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   14886:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   14888:	9022      	str	r0, [sp, #136]	; 0x88
   1488a:	2001      	movs	r0, #1
   1488c:	9022      	str	r0, [sp, #136]	; 0x88
   1488e:	e7ff      	b.n	14890 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   14890:	9822      	ldr	r0, [sp, #136]	; 0x88
   14892:	b068      	add	sp, #416	; 0x1a0
   14894:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   14896:	981f      	ldr	r0, [sp, #124]	; 0x7c
   14898:	07c1      	lsls	r1, r0, #31
   1489a:	2900      	cmp	r1, #0
   1489c:	d10f      	bne.n	148be <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   1489e:	e00b      	b.n	148b8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   148a0:	f647 4064 	movw	r0, #31844	; 0x7c64
   148a4:	f2c0 0002 	movt	r0, #2
   148a8:	f647 4270 	movw	r2, #31856	; 0x7c70
   148ac:	f2c0 0202 	movt	r2, #2
   148b0:	210b      	movs	r1, #11
   148b2:	f003 fef3 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   148b6:	defe      	udf	#254	; 0xfe
   148b8:	2001      	movs	r0, #1
        else { 1 }
   148ba:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   148bc:	e002      	b.n	148c4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   148be:	2000      	movs	r0, #0
   148c0:	9023      	str	r0, [sp, #140]	; 0x8c
   148c2:	e7ff      	b.n	148c4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   148c4:	9923      	ldr	r1, [sp, #140]	; 0x8c
   148c6:	2012      	movs	r0, #18
   148c8:	f006 f856 	bl	1a978 <hal_gpio_write>
   148cc:	e7ff      	b.n	148ce <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   148ce:	2019      	movs	r0, #25
   148d0:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   148d2:	f006 f851 	bl	1a978 <hal_gpio_write>
   148d6:	e7ff      	b.n	148d8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   148d8:	9821      	ldr	r0, [sp, #132]	; 0x84
   148da:	2801      	cmp	r0, #1
   148dc:	d005      	beq.n	148ea <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   148de:	e7ff      	b.n	148e0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   148e0:	9820      	ldr	r0, [sp, #128]	; 0x80
   148e2:	9061      	str	r0, [sp, #388]	; 0x184
   148e4:	9961      	ldr	r1, [sp, #388]	; 0x184
   148e6:	911e      	str	r1, [sp, #120]	; 0x78
   148e8:	e094      	b.n	14a14 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   148ea:	9820      	ldr	r0, [sp, #128]	; 0x80
   148ec:	905b      	str	r0, [sp, #364]	; 0x16c
   148ee:	995b      	ldr	r1, [sp, #364]	; 0x16c
   148f0:	911d      	str	r1, [sp, #116]	; 0x74
   148f2:	e7ff      	b.n	148f4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   148f4:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   148f6:	901c      	str	r0, [sp, #112]	; 0x70
   148f8:	991d      	ldr	r1, [sp, #116]	; 0x74
   148fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   148fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
   148fe:	f006 fce9 	bl	1b2d4 <hal_spi_txrx>
   14902:	9024      	str	r0, [sp, #144]	; 0x90
   14904:	e7ff      	b.n	14906 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14906:	f647 1058 	movw	r0, #31064	; 0x7958
   1490a:	f2c0 0002 	movt	r0, #2
   1490e:	6800      	ldr	r0, [r0, #0]
   14910:	a924      	add	r1, sp, #144	; 0x90
   14912:	9125      	str	r1, [sp, #148]	; 0x94
   14914:	9026      	str	r0, [sp, #152]	; 0x98
   14916:	9825      	ldr	r0, [sp, #148]	; 0x94
   14918:	905c      	str	r0, [sp, #368]	; 0x170
   1491a:	9926      	ldr	r1, [sp, #152]	; 0x98
   1491c:	915d      	str	r1, [sp, #372]	; 0x174
   1491e:	6802      	ldr	r2, [r0, #0]
   14920:	680b      	ldr	r3, [r1, #0]
   14922:	429a      	cmp	r2, r3
   14924:	901b      	str	r0, [sp, #108]	; 0x6c
   14926:	911a      	str	r1, [sp, #104]	; 0x68
   14928:	d101      	bne.n	1492e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   1492a:	e7ff      	b.n	1492c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   1492c:	e11f      	b.n	14b6e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   1492e:	f647 10b0 	movw	r0, #31152	; 0x79b0
   14932:	f2c0 0002 	movt	r0, #2
   14936:	6801      	ldr	r1, [r0, #0]
   14938:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1493a:	9036      	str	r0, [sp, #216]	; 0xd8
   1493c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1493e:	9237      	str	r2, [sp, #220]	; 0xdc
   14940:	f647 4388 	movw	r3, #31880	; 0x7c88
   14944:	f2c0 0302 	movt	r3, #2
   14948:	681b      	ldr	r3, [r3, #0]
   1494a:	f647 1cd0 	movw	ip, #31184	; 0x79d0
   1494e:	f2c0 0c02 	movt	ip, #2
   14952:	f8dc c000 	ldr.w	ip, [ip]
   14956:	46ee      	mov	lr, sp
   14958:	2400      	movs	r4, #0
   1495a:	f8ce 4000 	str.w	r4, [lr]
   1495e:	a838      	add	r0, sp, #224	; 0xe0
   14960:	2201      	movs	r2, #1
   14962:	9119      	str	r1, [sp, #100]	; 0x64
   14964:	4619      	mov	r1, r3
   14966:	4663      	mov	r3, ip
   14968:	f7f4 f91c 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1496c:	e7ff      	b.n	1496e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   1496e:	a836      	add	r0, sp, #216	; 0xd8
   14970:	9033      	str	r0, [sp, #204]	; 0xcc
   14972:	a837      	add	r0, sp, #220	; 0xdc
   14974:	9034      	str	r0, [sp, #208]	; 0xd0
   14976:	a838      	add	r0, sp, #224	; 0xe0
   14978:	9035      	str	r0, [sp, #212]	; 0xd4
   1497a:	9833      	ldr	r0, [sp, #204]	; 0xcc
   1497c:	905e      	str	r0, [sp, #376]	; 0x178
   1497e:	9934      	ldr	r1, [sp, #208]	; 0xd0
   14980:	915f      	str	r1, [sp, #380]	; 0x17c
   14982:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   14984:	9260      	str	r2, [sp, #384]	; 0x180
   14986:	f249 33f3 	movw	r3, #37875	; 0x93f3
   1498a:	f2c0 0300 	movt	r3, #0
   1498e:	9118      	str	r1, [sp, #96]	; 0x60
   14990:	4619      	mov	r1, r3
   14992:	9217      	str	r2, [sp, #92]	; 0x5c
   14994:	f7f4 fd65 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14998:	9016      	str	r0, [sp, #88]	; 0x58
   1499a:	9115      	str	r1, [sp, #84]	; 0x54
   1499c:	e7ff      	b.n	1499e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   1499e:	f249 31f3 	movw	r1, #37875	; 0x93f3
   149a2:	f2c0 0100 	movt	r1, #0
   149a6:	9818      	ldr	r0, [sp, #96]	; 0x60
   149a8:	f7f4 fd5b 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   149ac:	9014      	str	r0, [sp, #80]	; 0x50
   149ae:	9113      	str	r1, [sp, #76]	; 0x4c
   149b0:	e7ff      	b.n	149b2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   149b2:	f648 416b 	movw	r1, #35947	; 0x8c6b
   149b6:	f2c0 0101 	movt	r1, #1
   149ba:	9817      	ldr	r0, [sp, #92]	; 0x5c
   149bc:	f7f4 fd90 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   149c0:	9012      	str	r0, [sp, #72]	; 0x48
   149c2:	9111      	str	r1, [sp, #68]	; 0x44
   149c4:	e7ff      	b.n	149c6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   149c6:	9816      	ldr	r0, [sp, #88]	; 0x58
   149c8:	902d      	str	r0, [sp, #180]	; 0xb4
   149ca:	9915      	ldr	r1, [sp, #84]	; 0x54
   149cc:	912e      	str	r1, [sp, #184]	; 0xb8
   149ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
   149d0:	922f      	str	r2, [sp, #188]	; 0xbc
   149d2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   149d4:	9330      	str	r3, [sp, #192]	; 0xc0
   149d6:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   149da:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   149de:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   149e2:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   149e6:	466c      	mov	r4, sp
   149e8:	2503      	movs	r5, #3
   149ea:	6025      	str	r5, [r4, #0]
   149ec:	a827      	add	r0, sp, #156	; 0x9c
   149ee:	ab2d      	add	r3, sp, #180	; 0xb4
   149f0:	9919      	ldr	r1, [sp, #100]	; 0x64
   149f2:	462a      	mov	r2, r5
   149f4:	f7f4 f8d6 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   149f8:	e7ff      	b.n	149fa <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   149fa:	f647 408c 	movw	r0, #31884	; 0x7c8c
   149fe:	f2c0 0002 	movt	r0, #2
   14a02:	f003 fe44 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14a06:	9010      	str	r0, [sp, #64]	; 0x40
   14a08:	e7ff      	b.n	14a0a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   14a0a:	a827      	add	r0, sp, #156	; 0x9c
   14a0c:	9910      	ldr	r1, [sp, #64]	; 0x40
   14a0e:	f003 fe7b 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14a12:	defe      	udf	#254	; 0xfe
   14a14:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   14a16:	900f      	str	r0, [sp, #60]	; 0x3c
   14a18:	991e      	ldr	r1, [sp, #120]	; 0x78
   14a1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14a1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14a1e:	f006 fcaf 	bl	1b380 <hal_spi_txrx_noblock>
   14a22:	903e      	str	r0, [sp, #248]	; 0xf8
   14a24:	e7ff      	b.n	14a26 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14a26:	f647 1058 	movw	r0, #31064	; 0x7958
   14a2a:	f2c0 0002 	movt	r0, #2
   14a2e:	6800      	ldr	r0, [r0, #0]
   14a30:	a93e      	add	r1, sp, #248	; 0xf8
   14a32:	913f      	str	r1, [sp, #252]	; 0xfc
   14a34:	9040      	str	r0, [sp, #256]	; 0x100
   14a36:	983f      	ldr	r0, [sp, #252]	; 0xfc
   14a38:	9062      	str	r0, [sp, #392]	; 0x188
   14a3a:	9940      	ldr	r1, [sp, #256]	; 0x100
   14a3c:	9163      	str	r1, [sp, #396]	; 0x18c
   14a3e:	6802      	ldr	r2, [r0, #0]
   14a40:	680b      	ldr	r3, [r1, #0]
   14a42:	429a      	cmp	r2, r3
   14a44:	900e      	str	r0, [sp, #56]	; 0x38
   14a46:	910d      	str	r1, [sp, #52]	; 0x34
   14a48:	d10c      	bne.n	14a64 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   14a4a:	e7ff      	b.n	14a4c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   14a4c:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   14a50:	9067      	str	r0, [sp, #412]	; 0x19c
   14a52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14a56:	fba0 0101 	umull	r0, r1, r0, r1
   14a5a:	2900      	cmp	r1, #0
   14a5c:	900c      	str	r0, [sp, #48]	; 0x30
   14a5e:	f040 8090 	bne.w	14b82 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   14a62:	e072      	b.n	14b4a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14a64:	f647 10b0 	movw	r0, #31152	; 0x79b0
   14a68:	f2c0 0002 	movt	r0, #2
   14a6c:	6801      	ldr	r1, [r0, #0]
   14a6e:	980e      	ldr	r0, [sp, #56]	; 0x38
   14a70:	9050      	str	r0, [sp, #320]	; 0x140
   14a72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14a74:	9251      	str	r2, [sp, #324]	; 0x144
   14a76:	f647 4388 	movw	r3, #31880	; 0x7c88
   14a7a:	f2c0 0302 	movt	r3, #2
   14a7e:	681b      	ldr	r3, [r3, #0]
   14a80:	f647 1cd0 	movw	ip, #31184	; 0x79d0
   14a84:	f2c0 0c02 	movt	ip, #2
   14a88:	f8dc c000 	ldr.w	ip, [ip]
   14a8c:	46ee      	mov	lr, sp
   14a8e:	2400      	movs	r4, #0
   14a90:	f8ce 4000 	str.w	r4, [lr]
   14a94:	a852      	add	r0, sp, #328	; 0x148
   14a96:	2201      	movs	r2, #1
   14a98:	910b      	str	r1, [sp, #44]	; 0x2c
   14a9a:	4619      	mov	r1, r3
   14a9c:	4663      	mov	r3, ip
   14a9e:	f7f4 f881 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14aa2:	e7ff      	b.n	14aa4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   14aa4:	a850      	add	r0, sp, #320	; 0x140
   14aa6:	904d      	str	r0, [sp, #308]	; 0x134
   14aa8:	a851      	add	r0, sp, #324	; 0x144
   14aaa:	904e      	str	r0, [sp, #312]	; 0x138
   14aac:	a852      	add	r0, sp, #328	; 0x148
   14aae:	904f      	str	r0, [sp, #316]	; 0x13c
   14ab0:	984d      	ldr	r0, [sp, #308]	; 0x134
   14ab2:	9064      	str	r0, [sp, #400]	; 0x190
   14ab4:	994e      	ldr	r1, [sp, #312]	; 0x138
   14ab6:	9165      	str	r1, [sp, #404]	; 0x194
   14ab8:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   14aba:	9266      	str	r2, [sp, #408]	; 0x198
   14abc:	f249 33f3 	movw	r3, #37875	; 0x93f3
   14ac0:	f2c0 0300 	movt	r3, #0
   14ac4:	910a      	str	r1, [sp, #40]	; 0x28
   14ac6:	4619      	mov	r1, r3
   14ac8:	9209      	str	r2, [sp, #36]	; 0x24
   14aca:	f7f4 fcca 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14ace:	9008      	str	r0, [sp, #32]
   14ad0:	9107      	str	r1, [sp, #28]
   14ad2:	e7ff      	b.n	14ad4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   14ad4:	f249 31f3 	movw	r1, #37875	; 0x93f3
   14ad8:	f2c0 0100 	movt	r1, #0
   14adc:	980a      	ldr	r0, [sp, #40]	; 0x28
   14ade:	f7f4 fcc0 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14ae2:	9006      	str	r0, [sp, #24]
   14ae4:	9105      	str	r1, [sp, #20]
   14ae6:	e7ff      	b.n	14ae8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   14ae8:	f648 416b 	movw	r1, #35947	; 0x8c6b
   14aec:	f2c0 0101 	movt	r1, #1
   14af0:	9809      	ldr	r0, [sp, #36]	; 0x24
   14af2:	f7f4 fcf5 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14af6:	9004      	str	r0, [sp, #16]
   14af8:	9103      	str	r1, [sp, #12]
   14afa:	e7ff      	b.n	14afc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   14afc:	9808      	ldr	r0, [sp, #32]
   14afe:	9047      	str	r0, [sp, #284]	; 0x11c
   14b00:	9907      	ldr	r1, [sp, #28]
   14b02:	9148      	str	r1, [sp, #288]	; 0x120
   14b04:	9a06      	ldr	r2, [sp, #24]
   14b06:	9249      	str	r2, [sp, #292]	; 0x124
   14b08:	9b05      	ldr	r3, [sp, #20]
   14b0a:	934a      	str	r3, [sp, #296]	; 0x128
   14b0c:	f8dd c010 	ldr.w	ip, [sp, #16]
   14b10:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   14b14:	f8dd e00c 	ldr.w	lr, [sp, #12]
   14b18:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   14b1c:	466c      	mov	r4, sp
   14b1e:	2503      	movs	r5, #3
   14b20:	6025      	str	r5, [r4, #0]
   14b22:	a841      	add	r0, sp, #260	; 0x104
   14b24:	ab47      	add	r3, sp, #284	; 0x11c
   14b26:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14b28:	462a      	mov	r2, r5
   14b2a:	f7f4 f83b 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14b2e:	e7ff      	b.n	14b30 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   14b30:	f647 409c 	movw	r0, #31900	; 0x7c9c
   14b34:	f2c0 0002 	movt	r0, #2
   14b38:	f003 fda9 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14b3c:	9002      	str	r0, [sp, #8]
   14b3e:	e7ff      	b.n	14b40 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   14b40:	a841      	add	r0, sp, #260	; 0x104
   14b42:	9902      	ldr	r1, [sp, #8]
   14b44:	f003 fde0 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14b48:	defe      	udf	#254	; 0xfe
   14b4a:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14b4e:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14b52:	990c      	ldr	r1, [sp, #48]	; 0x30
   14b54:	fba1 0200 	umull	r0, r2, r1, r0
   14b58:	0991      	lsrs	r1, r2, #6
   14b5a:	f646 227c 	movw	r2, #27260	; 0x6a7c
   14b5e:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14b62:	9001      	str	r0, [sp, #4]
   14b64:	4610      	mov	r0, r2
   14b66:	f007 fdd7 	bl	1c718 <os_sem_pend>
   14b6a:	e7ff      	b.n	14b6c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   14b6c:	e7ff      	b.n	14b6e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   14b6e:	2019      	movs	r0, #25
   14b70:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   14b72:	f005 ff01 	bl	1a978 <hal_gpio_write>
   14b76:	e7ff      	b.n	14b78 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   14b78:	2000      	movs	r0, #0
    Ok(())
   14b7a:	9022      	str	r0, [sp, #136]	; 0x88
   14b7c:	2001      	movs	r0, #1
   14b7e:	9022      	str	r0, [sp, #136]	; 0x88
}
   14b80:	e686      	b.n	14890 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14b82:	f647 30b0 	movw	r0, #31664	; 0x7bb0
   14b86:	f2c0 0002 	movt	r0, #2
   14b8a:	f647 42ac 	movw	r2, #31916	; 0x7cac
   14b8e:	f2c0 0202 	movt	r2, #2
   14b92:	2121      	movs	r1, #33	; 0x21
   14b94:	f003 fd82 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14b98:	defe      	udf	#254	; 0xfe

00014b9a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   14b9a:	b5b0      	push	{r4, r5, r7, lr}
   14b9c:	b0ae      	sub	sp, #184	; 0xb8
   14b9e:	9027      	str	r0, [sp, #156]	; 0x9c
   14ba0:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   14ba2:	f646 207c 	movw	r0, #27260	; 0x6a7c
   14ba6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14baa:	f007 fd83 	bl	1c6b4 <os_sem_release>
   14bae:	900d      	str	r0, [sp, #52]	; 0x34
   14bb0:	e7ff      	b.n	14bb2 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   14bb2:	f647 1058 	movw	r0, #31064	; 0x7958
   14bb6:	f2c0 0002 	movt	r0, #2
   14bba:	6800      	ldr	r0, [r0, #0]
   14bbc:	a90d      	add	r1, sp, #52	; 0x34
   14bbe:	910e      	str	r1, [sp, #56]	; 0x38
   14bc0:	900f      	str	r0, [sp, #60]	; 0x3c
   14bc2:	980e      	ldr	r0, [sp, #56]	; 0x38
   14bc4:	9029      	str	r0, [sp, #164]	; 0xa4
   14bc6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14bc8:	912a      	str	r1, [sp, #168]	; 0xa8
   14bca:	6802      	ldr	r2, [r0, #0]
   14bcc:	680b      	ldr	r3, [r1, #0]
   14bce:	429a      	cmp	r2, r3
   14bd0:	900c      	str	r0, [sp, #48]	; 0x30
   14bd2:	910b      	str	r1, [sp, #44]	; 0x2c
   14bd4:	d102      	bne.n	14bdc <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   14bd6:	e7ff      	b.n	14bd8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   14bd8:	b02e      	add	sp, #184	; 0xb8
   14bda:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   14bdc:	f647 10b0 	movw	r0, #31152	; 0x79b0
   14be0:	f2c0 0002 	movt	r0, #2
   14be4:	6801      	ldr	r1, [r0, #0]
   14be6:	980c      	ldr	r0, [sp, #48]	; 0x30
   14be8:	901f      	str	r0, [sp, #124]	; 0x7c
   14bea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14bec:	9220      	str	r2, [sp, #128]	; 0x80
   14bee:	f647 23c8 	movw	r3, #31432	; 0x7ac8
   14bf2:	f2c0 0302 	movt	r3, #2
   14bf6:	681b      	ldr	r3, [r3, #0]
   14bf8:	f647 1cd0 	movw	ip, #31184	; 0x79d0
   14bfc:	f2c0 0c02 	movt	ip, #2
   14c00:	f8dc c000 	ldr.w	ip, [ip]
   14c04:	46ee      	mov	lr, sp
   14c06:	2400      	movs	r4, #0
   14c08:	f8ce 4000 	str.w	r4, [lr]
   14c0c:	a821      	add	r0, sp, #132	; 0x84
   14c0e:	2201      	movs	r2, #1
   14c10:	910a      	str	r1, [sp, #40]	; 0x28
   14c12:	4619      	mov	r1, r3
   14c14:	4663      	mov	r3, ip
   14c16:	f7f3 ffc5 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14c1a:	e7ff      	b.n	14c1c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   14c1c:	a81f      	add	r0, sp, #124	; 0x7c
   14c1e:	901c      	str	r0, [sp, #112]	; 0x70
   14c20:	a820      	add	r0, sp, #128	; 0x80
   14c22:	901d      	str	r0, [sp, #116]	; 0x74
   14c24:	a821      	add	r0, sp, #132	; 0x84
   14c26:	901e      	str	r0, [sp, #120]	; 0x78
   14c28:	981c      	ldr	r0, [sp, #112]	; 0x70
   14c2a:	902b      	str	r0, [sp, #172]	; 0xac
   14c2c:	991d      	ldr	r1, [sp, #116]	; 0x74
   14c2e:	912c      	str	r1, [sp, #176]	; 0xb0
   14c30:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14c32:	922d      	str	r2, [sp, #180]	; 0xb4
   14c34:	f249 4347 	movw	r3, #37959	; 0x9447
   14c38:	f2c0 0300 	movt	r3, #0
   14c3c:	9109      	str	r1, [sp, #36]	; 0x24
   14c3e:	4619      	mov	r1, r3
   14c40:	9208      	str	r2, [sp, #32]
   14c42:	f7f4 fc38 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14c46:	9007      	str	r0, [sp, #28]
   14c48:	9106      	str	r1, [sp, #24]
   14c4a:	e7ff      	b.n	14c4c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   14c4c:	f249 4147 	movw	r1, #37959	; 0x9447
   14c50:	f2c0 0100 	movt	r1, #0
   14c54:	9809      	ldr	r0, [sp, #36]	; 0x24
   14c56:	f7f4 fc2e 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14c5a:	9005      	str	r0, [sp, #20]
   14c5c:	9104      	str	r1, [sp, #16]
   14c5e:	e7ff      	b.n	14c60 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   14c60:	f648 416b 	movw	r1, #35947	; 0x8c6b
   14c64:	f2c0 0101 	movt	r1, #1
   14c68:	9808      	ldr	r0, [sp, #32]
   14c6a:	f7f4 fc39 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14c6e:	9003      	str	r0, [sp, #12]
   14c70:	9102      	str	r1, [sp, #8]
   14c72:	e7ff      	b.n	14c74 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   14c74:	9807      	ldr	r0, [sp, #28]
   14c76:	9016      	str	r0, [sp, #88]	; 0x58
   14c78:	9906      	ldr	r1, [sp, #24]
   14c7a:	9117      	str	r1, [sp, #92]	; 0x5c
   14c7c:	9a05      	ldr	r2, [sp, #20]
   14c7e:	9218      	str	r2, [sp, #96]	; 0x60
   14c80:	9b04      	ldr	r3, [sp, #16]
   14c82:	9319      	str	r3, [sp, #100]	; 0x64
   14c84:	f8dd c00c 	ldr.w	ip, [sp, #12]
   14c88:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   14c8c:	f8dd e008 	ldr.w	lr, [sp, #8]
   14c90:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   14c94:	466c      	mov	r4, sp
   14c96:	2503      	movs	r5, #3
   14c98:	6025      	str	r5, [r4, #0]
   14c9a:	a810      	add	r0, sp, #64	; 0x40
   14c9c:	ab16      	add	r3, sp, #88	; 0x58
   14c9e:	990a      	ldr	r1, [sp, #40]	; 0x28
   14ca0:	462a      	mov	r2, r5
   14ca2:	f7f3 ff7f 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14ca6:	e7ff      	b.n	14ca8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   14ca8:	f647 40bc 	movw	r0, #31932	; 0x7cbc
   14cac:	f2c0 0002 	movt	r0, #2
   14cb0:	f003 fced 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14cb4:	9001      	str	r0, [sp, #4]
   14cb6:	e7ff      	b.n	14cb8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   14cb8:	a810      	add	r0, sp, #64	; 0x40
   14cba:	9901      	ldr	r1, [sp, #4]
   14cbc:	f003 fd24 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14cc0:	defe      	udf	#254	; 0xfe

00014cc2 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   14cc2:	b580      	push	{r7, lr}
   14cc4:	b084      	sub	sp, #16
   14cc6:	4601      	mov	r1, r0
   14cc8:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14ccc:	b2c0      	uxtb	r0, r0
   14cce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14cd2:	fba0 0202 	umull	r0, r2, r0, r2
   14cd6:	2a00      	cmp	r2, #0
   14cd8:	9001      	str	r0, [sp, #4]
   14cda:	d110      	bne.n	14cfe <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   14cdc:	e7ff      	b.n	14cde <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   14cde:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14ce2:	f2c1 0062 	movt	r0, #4194	; 0x1062
   14ce6:	9901      	ldr	r1, [sp, #4]
   14ce8:	fba1 0200 	umull	r0, r2, r1, r0
   14cec:	0992      	lsrs	r2, r2, #6
   14cee:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   14cf0:	9000      	str	r0, [sp, #0]
   14cf2:	4610      	mov	r0, r2
   14cf4:	f007 fe5e 	bl	1c9b4 <os_time_delay>
   14cf8:	e7ff      	b.n	14cfa <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   14cfa:	b004      	add	sp, #16
   14cfc:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14cfe:	f647 30b0 	movw	r0, #31664	; 0x7bb0
   14d02:	f2c0 0002 	movt	r0, #2
   14d06:	f647 42cc 	movw	r2, #31948	; 0x7ccc
   14d0a:	f2c0 0202 	movt	r2, #2
   14d0e:	2121      	movs	r1, #33	; 0x21
   14d10:	f003 fcc4 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14d14:	defe      	udf	#254	; 0xfe

00014d16 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
   14d16:	b082      	sub	sp, #8
   14d18:	2000      	movs	r0, #0
        SPI {
   14d1a:	9000      	str	r0, [sp, #0]
   14d1c:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
   14d1e:	9800      	ldr	r0, [sp, #0]
   14d20:	9901      	ldr	r1, [sp, #4]
   14d22:	b002      	add	sp, #8
   14d24:	4770      	bx	lr

00014d26 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
   14d26:	b5b0      	push	{r4, r5, r7, lr}
   14d28:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
   14d2c:	9077      	str	r0, [sp, #476]	; 0x1dc
   14d2e:	9178      	str	r1, [sp, #480]	; 0x1e0
   14d30:	9279      	str	r2, [sp, #484]	; 0x1e4
   14d32:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
   14d34:	9028      	str	r0, [sp, #160]	; 0xa0
   14d36:	4608      	mov	r0, r1
   14d38:	9127      	str	r1, [sp, #156]	; 0x9c
   14d3a:	4619      	mov	r1, r3
   14d3c:	9226      	str	r2, [sp, #152]	; 0x98
   14d3e:	f006 fa0d 	bl	1b15c <hal_spi_config>
   14d42:	9029      	str	r0, [sp, #164]	; 0xa4
   14d44:	e7ff      	b.n	14d46 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
   14d46:	f647 40dc 	movw	r0, #31964	; 0x7cdc
   14d4a:	f2c0 0002 	movt	r0, #2
   14d4e:	6800      	ldr	r0, [r0, #0]
   14d50:	a929      	add	r1, sp, #164	; 0xa4
   14d52:	912a      	str	r1, [sp, #168]	; 0xa8
   14d54:	902b      	str	r0, [sp, #172]	; 0xac
   14d56:	982a      	ldr	r0, [sp, #168]	; 0xa8
   14d58:	907b      	str	r0, [sp, #492]	; 0x1ec
   14d5a:	992b      	ldr	r1, [sp, #172]	; 0xac
   14d5c:	917c      	str	r1, [sp, #496]	; 0x1f0
   14d5e:	6802      	ldr	r2, [r0, #0]
   14d60:	680b      	ldr	r3, [r1, #0]
   14d62:	429a      	cmp	r2, r3
   14d64:	9025      	str	r0, [sp, #148]	; 0x94
   14d66:	9124      	str	r1, [sp, #144]	; 0x90
   14d68:	d105      	bne.n	14d76 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
   14d6a:	e7ff      	b.n	14d6c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
   14d6c:	9827      	ldr	r0, [sp, #156]	; 0x9c
   14d6e:	f006 fa11 	bl	1b194 <hal_spi_enable>
   14d72:	9043      	str	r0, [sp, #268]	; 0x10c
   14d74:	e072      	b.n	14e5c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
   14d76:	f647 5034 	movw	r0, #32052	; 0x7d34
   14d7a:	f2c0 0002 	movt	r0, #2
   14d7e:	6801      	ldr	r1, [r0, #0]
   14d80:	9825      	ldr	r0, [sp, #148]	; 0x94
   14d82:	903b      	str	r0, [sp, #236]	; 0xec
   14d84:	9a24      	ldr	r2, [sp, #144]	; 0x90
   14d86:	923c      	str	r2, [sp, #240]	; 0xf0
   14d88:	f647 5350 	movw	r3, #32080	; 0x7d50
   14d8c:	f2c0 0302 	movt	r3, #2
   14d90:	681b      	ldr	r3, [r3, #0]
   14d92:	f647 5c54 	movw	ip, #32084	; 0x7d54
   14d96:	f2c0 0c02 	movt	ip, #2
   14d9a:	f8dc c000 	ldr.w	ip, [ip]
   14d9e:	46ee      	mov	lr, sp
   14da0:	2400      	movs	r4, #0
   14da2:	f8ce 4000 	str.w	r4, [lr]
   14da6:	a83d      	add	r0, sp, #244	; 0xf4
   14da8:	2201      	movs	r2, #1
   14daa:	9123      	str	r1, [sp, #140]	; 0x8c
   14dac:	4619      	mov	r1, r3
   14dae:	4663      	mov	r3, ip
   14db0:	f7f3 fef8 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14db4:	e7ff      	b.n	14db6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
   14db6:	a83b      	add	r0, sp, #236	; 0xec
   14db8:	9038      	str	r0, [sp, #224]	; 0xe0
   14dba:	a83c      	add	r0, sp, #240	; 0xf0
   14dbc:	9039      	str	r0, [sp, #228]	; 0xe4
   14dbe:	a83d      	add	r0, sp, #244	; 0xf4
   14dc0:	903a      	str	r0, [sp, #232]	; 0xe8
   14dc2:	9838      	ldr	r0, [sp, #224]	; 0xe0
   14dc4:	907d      	str	r0, [sp, #500]	; 0x1f4
   14dc6:	9939      	ldr	r1, [sp, #228]	; 0xe4
   14dc8:	917e      	str	r1, [sp, #504]	; 0x1f8
   14dca:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   14dcc:	927f      	str	r2, [sp, #508]	; 0x1fc
   14dce:	f249 33f3 	movw	r3, #37875	; 0x93f3
   14dd2:	f2c0 0300 	movt	r3, #0
   14dd6:	9122      	str	r1, [sp, #136]	; 0x88
   14dd8:	4619      	mov	r1, r3
   14dda:	9221      	str	r2, [sp, #132]	; 0x84
   14ddc:	f7f4 fb41 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14de0:	9020      	str	r0, [sp, #128]	; 0x80
   14de2:	911f      	str	r1, [sp, #124]	; 0x7c
   14de4:	e7ff      	b.n	14de6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
   14de6:	f249 31f3 	movw	r1, #37875	; 0x93f3
   14dea:	f2c0 0100 	movt	r1, #0
   14dee:	9822      	ldr	r0, [sp, #136]	; 0x88
   14df0:	f7f4 fb37 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14df4:	901e      	str	r0, [sp, #120]	; 0x78
   14df6:	911d      	str	r1, [sp, #116]	; 0x74
   14df8:	e7ff      	b.n	14dfa <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
   14dfa:	f648 416b 	movw	r1, #35947	; 0x8c6b
   14dfe:	f2c0 0101 	movt	r1, #1
   14e02:	9821      	ldr	r0, [sp, #132]	; 0x84
   14e04:	f7f4 fb6c 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14e08:	901c      	str	r0, [sp, #112]	; 0x70
   14e0a:	911b      	str	r1, [sp, #108]	; 0x6c
   14e0c:	e7ff      	b.n	14e0e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
   14e0e:	9820      	ldr	r0, [sp, #128]	; 0x80
   14e10:	9032      	str	r0, [sp, #200]	; 0xc8
   14e12:	991f      	ldr	r1, [sp, #124]	; 0x7c
   14e14:	9133      	str	r1, [sp, #204]	; 0xcc
   14e16:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14e18:	9234      	str	r2, [sp, #208]	; 0xd0
   14e1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   14e1c:	9335      	str	r3, [sp, #212]	; 0xd4
   14e1e:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
   14e22:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
   14e26:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
   14e2a:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
   14e2e:	466c      	mov	r4, sp
   14e30:	2503      	movs	r5, #3
   14e32:	6025      	str	r5, [r4, #0]
   14e34:	a82c      	add	r0, sp, #176	; 0xb0
   14e36:	ab32      	add	r3, sp, #200	; 0xc8
   14e38:	9923      	ldr	r1, [sp, #140]	; 0x8c
   14e3a:	462a      	mov	r2, r5
   14e3c:	f7f3 feb2 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14e40:	e7ff      	b.n	14e42 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
   14e42:	f647 5070 	movw	r0, #32112	; 0x7d70
   14e46:	f2c0 0002 	movt	r0, #2
   14e4a:	f003 fc20 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14e4e:	901a      	str	r0, [sp, #104]	; 0x68
   14e50:	e7ff      	b.n	14e52 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
   14e52:	a82c      	add	r0, sp, #176	; 0xb0
   14e54:	991a      	ldr	r1, [sp, #104]	; 0x68
   14e56:	f003 fc57 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14e5a:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
   14e5c:	f647 40dc 	movw	r0, #31964	; 0x7cdc
   14e60:	f2c0 0002 	movt	r0, #2
   14e64:	6800      	ldr	r0, [r0, #0]
   14e66:	a943      	add	r1, sp, #268	; 0x10c
   14e68:	9144      	str	r1, [sp, #272]	; 0x110
   14e6a:	9045      	str	r0, [sp, #276]	; 0x114
   14e6c:	9844      	ldr	r0, [sp, #272]	; 0x110
   14e6e:	9080      	str	r0, [sp, #512]	; 0x200
   14e70:	9945      	ldr	r1, [sp, #276]	; 0x114
   14e72:	9181      	str	r1, [sp, #516]	; 0x204
   14e74:	6802      	ldr	r2, [r0, #0]
   14e76:	680b      	ldr	r3, [r1, #0]
   14e78:	429a      	cmp	r2, r3
   14e7a:	9019      	str	r0, [sp, #100]	; 0x64
   14e7c:	9118      	str	r1, [sp, #96]	; 0x60
   14e7e:	d106      	bne.n	14e8e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
   14e80:	e7ff      	b.n	14e82 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
   14e82:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
   14e84:	9826      	ldr	r0, [sp, #152]	; 0x98
   14e86:	f005 fd5b 	bl	1a940 <hal_gpio_init_out>
   14e8a:	905d      	str	r0, [sp, #372]	; 0x174
   14e8c:	e072      	b.n	14f74 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
   14e8e:	f647 5034 	movw	r0, #32052	; 0x7d34
   14e92:	f2c0 0002 	movt	r0, #2
   14e96:	6801      	ldr	r1, [r0, #0]
   14e98:	9819      	ldr	r0, [sp, #100]	; 0x64
   14e9a:	9055      	str	r0, [sp, #340]	; 0x154
   14e9c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   14e9e:	9256      	str	r2, [sp, #344]	; 0x158
   14ea0:	f647 5398 	movw	r3, #32152	; 0x7d98
   14ea4:	f2c0 0302 	movt	r3, #2
   14ea8:	681b      	ldr	r3, [r3, #0]
   14eaa:	f647 5c54 	movw	ip, #32084	; 0x7d54
   14eae:	f2c0 0c02 	movt	ip, #2
   14eb2:	f8dc c000 	ldr.w	ip, [ip]
   14eb6:	46ee      	mov	lr, sp
   14eb8:	2400      	movs	r4, #0
   14eba:	f8ce 4000 	str.w	r4, [lr]
   14ebe:	a857      	add	r0, sp, #348	; 0x15c
   14ec0:	2201      	movs	r2, #1
   14ec2:	9117      	str	r1, [sp, #92]	; 0x5c
   14ec4:	4619      	mov	r1, r3
   14ec6:	4663      	mov	r3, ip
   14ec8:	f7f3 fe6c 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14ecc:	e7ff      	b.n	14ece <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
   14ece:	a855      	add	r0, sp, #340	; 0x154
   14ed0:	9052      	str	r0, [sp, #328]	; 0x148
   14ed2:	a856      	add	r0, sp, #344	; 0x158
   14ed4:	9053      	str	r0, [sp, #332]	; 0x14c
   14ed6:	a857      	add	r0, sp, #348	; 0x15c
   14ed8:	9054      	str	r0, [sp, #336]	; 0x150
   14eda:	9852      	ldr	r0, [sp, #328]	; 0x148
   14edc:	9082      	str	r0, [sp, #520]	; 0x208
   14ede:	9953      	ldr	r1, [sp, #332]	; 0x14c
   14ee0:	9183      	str	r1, [sp, #524]	; 0x20c
   14ee2:	9a54      	ldr	r2, [sp, #336]	; 0x150
   14ee4:	9284      	str	r2, [sp, #528]	; 0x210
   14ee6:	f249 33f3 	movw	r3, #37875	; 0x93f3
   14eea:	f2c0 0300 	movt	r3, #0
   14eee:	9116      	str	r1, [sp, #88]	; 0x58
   14ef0:	4619      	mov	r1, r3
   14ef2:	9215      	str	r2, [sp, #84]	; 0x54
   14ef4:	f7f4 fab5 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14ef8:	9014      	str	r0, [sp, #80]	; 0x50
   14efa:	9113      	str	r1, [sp, #76]	; 0x4c
   14efc:	e7ff      	b.n	14efe <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
   14efe:	f249 31f3 	movw	r1, #37875	; 0x93f3
   14f02:	f2c0 0100 	movt	r1, #0
   14f06:	9816      	ldr	r0, [sp, #88]	; 0x58
   14f08:	f7f4 faab 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14f0c:	9012      	str	r0, [sp, #72]	; 0x48
   14f0e:	9111      	str	r1, [sp, #68]	; 0x44
   14f10:	e7ff      	b.n	14f12 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
   14f12:	f648 416b 	movw	r1, #35947	; 0x8c6b
   14f16:	f2c0 0101 	movt	r1, #1
   14f1a:	9815      	ldr	r0, [sp, #84]	; 0x54
   14f1c:	f7f4 fae0 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14f20:	9010      	str	r0, [sp, #64]	; 0x40
   14f22:	910f      	str	r1, [sp, #60]	; 0x3c
   14f24:	e7ff      	b.n	14f26 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
   14f26:	9814      	ldr	r0, [sp, #80]	; 0x50
   14f28:	904c      	str	r0, [sp, #304]	; 0x130
   14f2a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   14f2c:	914d      	str	r1, [sp, #308]	; 0x134
   14f2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14f30:	924e      	str	r2, [sp, #312]	; 0x138
   14f32:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14f34:	934f      	str	r3, [sp, #316]	; 0x13c
   14f36:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   14f3a:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
   14f3e:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   14f42:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
   14f46:	466c      	mov	r4, sp
   14f48:	2503      	movs	r5, #3
   14f4a:	6025      	str	r5, [r4, #0]
   14f4c:	a846      	add	r0, sp, #280	; 0x118
   14f4e:	ab4c      	add	r3, sp, #304	; 0x130
   14f50:	9917      	ldr	r1, [sp, #92]	; 0x5c
   14f52:	462a      	mov	r2, r5
   14f54:	f7f3 fe26 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14f58:	e7ff      	b.n	14f5a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
   14f5a:	f647 509c 	movw	r0, #32156	; 0x7d9c
   14f5e:	f2c0 0002 	movt	r0, #2
   14f62:	f003 fb94 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14f66:	900e      	str	r0, [sp, #56]	; 0x38
   14f68:	e7ff      	b.n	14f6a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
   14f6a:	a846      	add	r0, sp, #280	; 0x118
   14f6c:	990e      	ldr	r1, [sp, #56]	; 0x38
   14f6e:	f003 fbcb 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14f72:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
   14f74:	f647 40dc 	movw	r0, #31964	; 0x7cdc
   14f78:	f2c0 0002 	movt	r0, #2
   14f7c:	6800      	ldr	r0, [r0, #0]
   14f7e:	a95d      	add	r1, sp, #372	; 0x174
   14f80:	915e      	str	r1, [sp, #376]	; 0x178
   14f82:	905f      	str	r0, [sp, #380]	; 0x17c
   14f84:	985e      	ldr	r0, [sp, #376]	; 0x178
   14f86:	9085      	str	r0, [sp, #532]	; 0x214
   14f88:	995f      	ldr	r1, [sp, #380]	; 0x17c
   14f8a:	9186      	str	r1, [sp, #536]	; 0x218
   14f8c:	6802      	ldr	r2, [r0, #0]
   14f8e:	680b      	ldr	r3, [r1, #0]
   14f90:	429a      	cmp	r2, r3
   14f92:	900d      	str	r0, [sp, #52]	; 0x34
   14f94:	910c      	str	r1, [sp, #48]	; 0x30
   14f96:	d109      	bne.n	14fac <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
   14f98:	e7ff      	b.n	14f9a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
   14f9a:	9827      	ldr	r0, [sp, #156]	; 0x9c
   14f9c:	9928      	ldr	r1, [sp, #160]	; 0xa0
   14f9e:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
   14fa0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   14fa2:	604a      	str	r2, [r1, #4]
   14fa4:	2001      	movs	r0, #1
        Ok(())
    }
   14fa6:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
   14faa:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
   14fac:	f647 5034 	movw	r0, #32052	; 0x7d34
   14fb0:	f2c0 0002 	movt	r0, #2
   14fb4:	6801      	ldr	r1, [r0, #0]
   14fb6:	980d      	ldr	r0, [sp, #52]	; 0x34
   14fb8:	906f      	str	r0, [sp, #444]	; 0x1bc
   14fba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14fbc:	9270      	str	r2, [sp, #448]	; 0x1c0
   14fbe:	f647 53c4 	movw	r3, #32196	; 0x7dc4
   14fc2:	f2c0 0302 	movt	r3, #2
   14fc6:	681b      	ldr	r3, [r3, #0]
   14fc8:	f647 5c54 	movw	ip, #32084	; 0x7d54
   14fcc:	f2c0 0c02 	movt	ip, #2
   14fd0:	f8dc c000 	ldr.w	ip, [ip]
   14fd4:	46ee      	mov	lr, sp
   14fd6:	2400      	movs	r4, #0
   14fd8:	f8ce 4000 	str.w	r4, [lr]
   14fdc:	a871      	add	r0, sp, #452	; 0x1c4
   14fde:	2201      	movs	r2, #1
   14fe0:	910b      	str	r1, [sp, #44]	; 0x2c
   14fe2:	4619      	mov	r1, r3
   14fe4:	4663      	mov	r3, ip
   14fe6:	f7f3 fddd 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14fea:	e7ff      	b.n	14fec <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
   14fec:	a86f      	add	r0, sp, #444	; 0x1bc
   14fee:	906c      	str	r0, [sp, #432]	; 0x1b0
   14ff0:	a870      	add	r0, sp, #448	; 0x1c0
   14ff2:	906d      	str	r0, [sp, #436]	; 0x1b4
   14ff4:	a871      	add	r0, sp, #452	; 0x1c4
   14ff6:	906e      	str	r0, [sp, #440]	; 0x1b8
   14ff8:	986c      	ldr	r0, [sp, #432]	; 0x1b0
   14ffa:	9087      	str	r0, [sp, #540]	; 0x21c
   14ffc:	996d      	ldr	r1, [sp, #436]	; 0x1b4
   14ffe:	9188      	str	r1, [sp, #544]	; 0x220
   15000:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   15002:	9289      	str	r2, [sp, #548]	; 0x224
   15004:	f249 33f3 	movw	r3, #37875	; 0x93f3
   15008:	f2c0 0300 	movt	r3, #0
   1500c:	910a      	str	r1, [sp, #40]	; 0x28
   1500e:	4619      	mov	r1, r3
   15010:	9209      	str	r2, [sp, #36]	; 0x24
   15012:	f7f4 fa26 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   15016:	9008      	str	r0, [sp, #32]
   15018:	9107      	str	r1, [sp, #28]
   1501a:	e7ff      	b.n	1501c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
   1501c:	f249 31f3 	movw	r1, #37875	; 0x93f3
   15020:	f2c0 0100 	movt	r1, #0
   15024:	980a      	ldr	r0, [sp, #40]	; 0x28
   15026:	f7f4 fa1c 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1502a:	9006      	str	r0, [sp, #24]
   1502c:	9105      	str	r1, [sp, #20]
   1502e:	e7ff      	b.n	15030 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
   15030:	f648 416b 	movw	r1, #35947	; 0x8c6b
   15034:	f2c0 0101 	movt	r1, #1
   15038:	9809      	ldr	r0, [sp, #36]	; 0x24
   1503a:	f7f4 fa51 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1503e:	9004      	str	r0, [sp, #16]
   15040:	9103      	str	r1, [sp, #12]
   15042:	e7ff      	b.n	15044 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
   15044:	9808      	ldr	r0, [sp, #32]
   15046:	9066      	str	r0, [sp, #408]	; 0x198
   15048:	9907      	ldr	r1, [sp, #28]
   1504a:	9167      	str	r1, [sp, #412]	; 0x19c
   1504c:	9a06      	ldr	r2, [sp, #24]
   1504e:	9268      	str	r2, [sp, #416]	; 0x1a0
   15050:	9b05      	ldr	r3, [sp, #20]
   15052:	9369      	str	r3, [sp, #420]	; 0x1a4
   15054:	f8dd c010 	ldr.w	ip, [sp, #16]
   15058:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
   1505c:	f8dd e00c 	ldr.w	lr, [sp, #12]
   15060:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
   15064:	466c      	mov	r4, sp
   15066:	2503      	movs	r5, #3
   15068:	6025      	str	r5, [r4, #0]
   1506a:	a860      	add	r0, sp, #384	; 0x180
   1506c:	ab66      	add	r3, sp, #408	; 0x198
   1506e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15070:	462a      	mov	r2, r5
   15072:	f7f3 fd97 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   15076:	e7ff      	b.n	15078 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
   15078:	f647 50c8 	movw	r0, #32200	; 0x7dc8
   1507c:	f2c0 0002 	movt	r0, #2
   15080:	f003 fb05 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   15084:	9002      	str	r0, [sp, #8]
   15086:	e7ff      	b.n	15088 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
   15088:	a860      	add	r0, sp, #384	; 0x180
   1508a:	9902      	ldr	r1, [sp, #8]
   1508c:	f003 fb3c 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   15090:	defe      	udf	#254	; 0xfe

00015092 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
   15092:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
   15094:	4770      	bx	lr

00015096 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
   15096:	b5b0      	push	{r4, r5, r7, lr}
   15098:	b0b0      	sub	sp, #192	; 0xc0
   1509a:	9029      	str	r0, [sp, #164]	; 0xa4
   1509c:	912a      	str	r1, [sp, #168]	; 0xa8
   1509e:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
   150a0:	900e      	str	r0, [sp, #56]	; 0x38
   150a2:	4608      	mov	r0, r1
   150a4:	910d      	str	r1, [sp, #52]	; 0x34
   150a6:	4611      	mov	r1, r2
   150a8:	f005 fc4a 	bl	1a940 <hal_gpio_init_out>
   150ac:	900f      	str	r0, [sp, #60]	; 0x3c
   150ae:	e7ff      	b.n	150b0 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
   150b0:	f647 40dc 	movw	r0, #31964	; 0x7cdc
   150b4:	f2c0 0002 	movt	r0, #2
   150b8:	6800      	ldr	r0, [r0, #0]
   150ba:	a90f      	add	r1, sp, #60	; 0x3c
   150bc:	9110      	str	r1, [sp, #64]	; 0x40
   150be:	9011      	str	r0, [sp, #68]	; 0x44
   150c0:	9810      	ldr	r0, [sp, #64]	; 0x40
   150c2:	902b      	str	r0, [sp, #172]	; 0xac
   150c4:	9911      	ldr	r1, [sp, #68]	; 0x44
   150c6:	912c      	str	r1, [sp, #176]	; 0xb0
   150c8:	6802      	ldr	r2, [r0, #0]
   150ca:	680b      	ldr	r3, [r1, #0]
   150cc:	429a      	cmp	r2, r3
   150ce:	900c      	str	r0, [sp, #48]	; 0x30
   150d0:	910b      	str	r1, [sp, #44]	; 0x2c
   150d2:	d106      	bne.n	150e2 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
   150d4:	e7ff      	b.n	150d6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
   150d6:	980d      	ldr	r0, [sp, #52]	; 0x34
   150d8:	990e      	ldr	r1, [sp, #56]	; 0x38
   150da:	6008      	str	r0, [r1, #0]
   150dc:	2001      	movs	r0, #1
        Ok(())
    }
   150de:	b030      	add	sp, #192	; 0xc0
   150e0:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
   150e2:	f647 5034 	movw	r0, #32052	; 0x7d34
   150e6:	f2c0 0002 	movt	r0, #2
   150ea:	6801      	ldr	r1, [r0, #0]
   150ec:	980c      	ldr	r0, [sp, #48]	; 0x30
   150ee:	9021      	str	r0, [sp, #132]	; 0x84
   150f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   150f2:	9222      	str	r2, [sp, #136]	; 0x88
   150f4:	f647 53ec 	movw	r3, #32236	; 0x7dec
   150f8:	f2c0 0302 	movt	r3, #2
   150fc:	681b      	ldr	r3, [r3, #0]
   150fe:	f647 5c54 	movw	ip, #32084	; 0x7d54
   15102:	f2c0 0c02 	movt	ip, #2
   15106:	f8dc c000 	ldr.w	ip, [ip]
   1510a:	46ee      	mov	lr, sp
   1510c:	2400      	movs	r4, #0
   1510e:	f8ce 4000 	str.w	r4, [lr]
   15112:	a823      	add	r0, sp, #140	; 0x8c
   15114:	2201      	movs	r2, #1
   15116:	910a      	str	r1, [sp, #40]	; 0x28
   15118:	4619      	mov	r1, r3
   1511a:	4663      	mov	r3, ip
   1511c:	f7f3 fd42 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   15120:	e7ff      	b.n	15122 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
   15122:	a821      	add	r0, sp, #132	; 0x84
   15124:	901e      	str	r0, [sp, #120]	; 0x78
   15126:	a822      	add	r0, sp, #136	; 0x88
   15128:	901f      	str	r0, [sp, #124]	; 0x7c
   1512a:	a823      	add	r0, sp, #140	; 0x8c
   1512c:	9020      	str	r0, [sp, #128]	; 0x80
   1512e:	981e      	ldr	r0, [sp, #120]	; 0x78
   15130:	902d      	str	r0, [sp, #180]	; 0xb4
   15132:	991f      	ldr	r1, [sp, #124]	; 0x7c
   15134:	912e      	str	r1, [sp, #184]	; 0xb8
   15136:	9a20      	ldr	r2, [sp, #128]	; 0x80
   15138:	922f      	str	r2, [sp, #188]	; 0xbc
   1513a:	f249 33f3 	movw	r3, #37875	; 0x93f3
   1513e:	f2c0 0300 	movt	r3, #0
   15142:	9109      	str	r1, [sp, #36]	; 0x24
   15144:	4619      	mov	r1, r3
   15146:	9208      	str	r2, [sp, #32]
   15148:	f7f4 f98b 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1514c:	9007      	str	r0, [sp, #28]
   1514e:	9106      	str	r1, [sp, #24]
   15150:	e7ff      	b.n	15152 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
   15152:	f249 31f3 	movw	r1, #37875	; 0x93f3
   15156:	f2c0 0100 	movt	r1, #0
   1515a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1515c:	f7f4 f981 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   15160:	9005      	str	r0, [sp, #20]
   15162:	9104      	str	r1, [sp, #16]
   15164:	e7ff      	b.n	15166 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
   15166:	f648 416b 	movw	r1, #35947	; 0x8c6b
   1516a:	f2c0 0101 	movt	r1, #1
   1516e:	9808      	ldr	r0, [sp, #32]
   15170:	f7f4 f9b6 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   15174:	9003      	str	r0, [sp, #12]
   15176:	9102      	str	r1, [sp, #8]
   15178:	e7ff      	b.n	1517a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
   1517a:	9807      	ldr	r0, [sp, #28]
   1517c:	9018      	str	r0, [sp, #96]	; 0x60
   1517e:	9906      	ldr	r1, [sp, #24]
   15180:	9119      	str	r1, [sp, #100]	; 0x64
   15182:	9a05      	ldr	r2, [sp, #20]
   15184:	921a      	str	r2, [sp, #104]	; 0x68
   15186:	9b04      	ldr	r3, [sp, #16]
   15188:	931b      	str	r3, [sp, #108]	; 0x6c
   1518a:	f8dd c00c 	ldr.w	ip, [sp, #12]
   1518e:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
   15192:	f8dd e008 	ldr.w	lr, [sp, #8]
   15196:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
   1519a:	466c      	mov	r4, sp
   1519c:	2503      	movs	r5, #3
   1519e:	6025      	str	r5, [r4, #0]
   151a0:	a812      	add	r0, sp, #72	; 0x48
   151a2:	ab18      	add	r3, sp, #96	; 0x60
   151a4:	990a      	ldr	r1, [sp, #40]	; 0x28
   151a6:	462a      	mov	r2, r5
   151a8:	f7f3 fcfc 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   151ac:	e7ff      	b.n	151ae <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
   151ae:	f647 50f0 	movw	r0, #32240	; 0x7df0
   151b2:	f2c0 0002 	movt	r0, #2
   151b6:	f003 fa6a 	bl	1868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   151ba:	9001      	str	r0, [sp, #4]
   151bc:	e7ff      	b.n	151be <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
   151be:	a812      	add	r0, sp, #72	; 0x48
   151c0:	9901      	ldr	r1, [sp, #4]
   151c2:	f003 faa1 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   151c6:	defe      	udf	#254	; 0xfe

000151c8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
   151c8:	b580      	push	{r7, lr}
   151ca:	b082      	sub	sp, #8
   151cc:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
   151ce:	6800      	ldr	r0, [r0, #0]
   151d0:	2100      	movs	r1, #0
   151d2:	f005 fbd1 	bl	1a978 <hal_gpio_write>
   151d6:	e7ff      	b.n	151d8 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
   151d8:	2001      	movs	r0, #1
        Ok(())
    }
   151da:	b002      	add	sp, #8
   151dc:	bd80      	pop	{r7, pc}

000151de <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
   151de:	b580      	push	{r7, lr}
   151e0:	b082      	sub	sp, #8
   151e2:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
   151e4:	6800      	ldr	r0, [r0, #0]
   151e6:	2101      	movs	r1, #1
   151e8:	f005 fbc6 	bl	1a978 <hal_gpio_write>
   151ec:	e7ff      	b.n	151ee <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
   151ee:	2001      	movs	r0, #1
        Ok(())
    }
   151f0:	b002      	add	sp, #8
   151f2:	bd80      	pop	{r7, pc}

000151f4 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
   151f4:	4770      	bx	lr

000151f6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
   151f6:	b580      	push	{r7, lr}
   151f8:	b086      	sub	sp, #24
   151fa:	460a      	mov	r2, r1
   151fc:	9003      	str	r0, [sp, #12]
   151fe:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   15202:	b2c8      	uxtb	r0, r1
   15204:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   15208:	fba0 0101 	umull	r0, r1, r0, r1
   1520c:	2900      	cmp	r1, #0
   1520e:	9002      	str	r0, [sp, #8]
   15210:	d110      	bne.n	15234 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
   15212:	e7ff      	b.n	15214 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
   15214:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   15218:	f2c1 0062 	movt	r0, #4194	; 0x1062
   1521c:	9902      	ldr	r1, [sp, #8]
   1521e:	fba1 0200 	umull	r0, r2, r1, r0
   15222:	0992      	lsrs	r2, r2, #6
   15224:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
   15226:	9001      	str	r0, [sp, #4]
   15228:	4610      	mov	r0, r2
   1522a:	f007 fbc3 	bl	1c9b4 <os_time_delay>
   1522e:	e7ff      	b.n	15230 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
   15230:	b006      	add	sp, #24
   15232:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   15234:	f647 6010 	movw	r0, #32272	; 0x7e10
   15238:	f2c0 0002 	movt	r0, #2
   1523c:	f647 6200 	movw	r2, #32256	; 0x7e00
   15240:	f2c0 0202 	movt	r2, #2
   15244:	2121      	movs	r1, #33	; 0x21
   15246:	f003 fa29 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1524a:	defe      	udf	#254	; 0xfe

0001524c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   1524c:	b082      	sub	sp, #8
   1524e:	9001      	str	r0, [sp, #4]
   15250:	9000      	str	r0, [sp, #0]
   15252:	e7ff      	b.n	15254 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   15254:	9800      	ldr	r0, [sp, #0]
   15256:	fab0 f180 	clz	r1, r0
   1525a:	0948      	lsrs	r0, r1, #5
   1525c:	b002      	add	sp, #8
   1525e:	4770      	bx	lr

00015260 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>:
   15260:	b580      	push	{r7, lr}
   15262:	b084      	sub	sp, #16
   15264:	9002      	str	r0, [sp, #8]
   15266:	9103      	str	r1, [sp, #12]
   15268:	f000 f805 	bl	15276 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   1526c:	9001      	str	r0, [sp, #4]
   1526e:	e7ff      	b.n	15270 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE+0x10>
   15270:	9801      	ldr	r0, [sp, #4]
   15272:	b004      	add	sp, #16
   15274:	bd80      	pop	{r7, pc}

00015276 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>:
   15276:	b084      	sub	sp, #16
   15278:	9001      	str	r0, [sp, #4]
   1527a:	9102      	str	r1, [sp, #8]
   1527c:	4408      	add	r0, r1
   1527e:	9003      	str	r0, [sp, #12]
   15280:	9803      	ldr	r0, [sp, #12]
   15282:	9000      	str	r0, [sp, #0]
   15284:	e7ff      	b.n	15286 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE+0x10>
   15286:	9800      	ldr	r0, [sp, #0]
   15288:	b004      	add	sp, #16
   1528a:	4770      	bx	lr

0001528c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   1528c:	b081      	sub	sp, #4
   1528e:	b001      	add	sp, #4
   15290:	4770      	bx	lr

00015292 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   15292:	b08a      	sub	sp, #40	; 0x28
   15294:	9005      	str	r0, [sp, #20]
   15296:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   15298:	9107      	str	r1, [sp, #28]
   1529a:	21ff      	movs	r1, #255	; 0xff
   1529c:	9106      	str	r1, [sp, #24]
   1529e:	2108      	movs	r1, #8
   152a0:	9108      	str	r1, [sp, #32]
   152a2:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   152a4:	9003      	str	r0, [sp, #12]
   152a6:	9102      	str	r1, [sp, #8]
   152a8:	e016      	b.n	152d8 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   152aa:	2001      	movs	r0, #1
   152ac:	f88d 0013 	strb.w	r0, [sp, #19]
   152b0:	e00c      	b.n	152cc <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   152b2:	2000      	movs	r0, #0
   152b4:	f88d 0013 	strb.w	r0, [sp, #19]
   152b8:	e008      	b.n	152cc <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   152ba:	9803      	ldr	r0, [sp, #12]
   152bc:	6801      	ldr	r1, [r0, #0]
   152be:	6842      	ldr	r2, [r0, #4]
   152c0:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   152c4:	f172 0200 	sbcs.w	r2, r2, #0
   152c8:	d3ef      	bcc.n	152aa <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   152ca:	e7f2      	b.n	152b2 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   152cc:	f89d 0013 	ldrb.w	r0, [sp, #19]
   152d0:	07c0      	lsls	r0, r0, #31
   152d2:	2800      	cmp	r0, #0
   152d4:	d10e      	bne.n	152f4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   152d6:	e009      	b.n	152ec <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   152d8:	2001      	movs	r0, #1
   152da:	9009      	str	r0, [sp, #36]	; 0x24
   152dc:	9809      	ldr	r0, [sp, #36]	; 0x24
   152de:	9001      	str	r0, [sp, #4]
   152e0:	e7ff      	b.n	152e2 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   152e2:	9802      	ldr	r0, [sp, #8]
   152e4:	9901      	ldr	r1, [sp, #4]
   152e6:	4288      	cmp	r0, r1
   152e8:	d9df      	bls.n	152aa <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   152ea:	e7e6      	b.n	152ba <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   152ec:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   152ee:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   152f2:	e007      	b.n	15304 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   152f4:	9803      	ldr	r0, [sp, #12]
   152f6:	7801      	ldrb	r1, [r0, #0]
   152f8:	f88d 1011 	strb.w	r1, [sp, #17]
   152fc:	2101      	movs	r1, #1
   152fe:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   15302:	e7ff      	b.n	15304 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   15304:	f89d 0010 	ldrb.w	r0, [sp, #16]
   15308:	f89d 1011 	ldrb.w	r1, [sp, #17]
   1530c:	b00a      	add	sp, #40	; 0x28
   1530e:	4770      	bx	lr

00015310 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>:
   15310:	b580      	push	{r7, lr}
   15312:	b090      	sub	sp, #64	; 0x40
   15314:	2200      	movs	r2, #0
   15316:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   1531a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   1531e:	2201      	movs	r2, #1
   15320:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   15324:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   15328:	680a      	ldr	r2, [r1, #0]
   1532a:	2a00      	cmp	r2, #0
   1532c:	9101      	str	r1, [sp, #4]
   1532e:	9000      	str	r0, [sp, #0]
   15330:	d001      	beq.n	15336 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x26>
   15332:	e7ff      	b.n	15334 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x24>
   15334:	e004      	b.n	15340 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x30>
   15336:	2000      	movs	r0, #0
   15338:	9900      	ldr	r1, [sp, #0]
   1533a:	6008      	str	r0, [r1, #0]
   1533c:	e032      	b.n	153a4 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   1533e:	defe      	udf	#254	; 0xfe
   15340:	2000      	movs	r0, #0
   15342:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   15346:	9901      	ldr	r1, [sp, #4]
   15348:	684a      	ldr	r2, [r1, #4]
   1534a:	688b      	ldr	r3, [r1, #8]
   1534c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   15350:	f8cd c010 	str.w	ip, [sp, #16]
   15354:	9303      	str	r3, [sp, #12]
   15356:	9202      	str	r2, [sp, #8]
   15358:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   1535c:	9802      	ldr	r0, [sp, #8]
   1535e:	9a03      	ldr	r2, [sp, #12]
   15360:	9b04      	ldr	r3, [sp, #16]
   15362:	930d      	str	r3, [sp, #52]	; 0x34
   15364:	920c      	str	r2, [sp, #48]	; 0x30
   15366:	900b      	str	r0, [sp, #44]	; 0x2c
   15368:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1536a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1536c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1536e:	930a      	str	r3, [sp, #40]	; 0x28
   15370:	9209      	str	r2, [sp, #36]	; 0x24
   15372:	9008      	str	r0, [sp, #32]
   15374:	a805      	add	r0, sp, #20
   15376:	a908      	add	r1, sp, #32
   15378:	f002 f90a 	bl	17590 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>
   1537c:	e7ff      	b.n	1537e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x6e>
   1537e:	9805      	ldr	r0, [sp, #20]
   15380:	9906      	ldr	r1, [sp, #24]
   15382:	9a07      	ldr	r2, [sp, #28]
   15384:	9b00      	ldr	r3, [sp, #0]
   15386:	60da      	str	r2, [r3, #12]
   15388:	6099      	str	r1, [r3, #8]
   1538a:	6058      	str	r0, [r3, #4]
   1538c:	2001      	movs	r0, #1
   1538e:	6018      	str	r0, [r3, #0]
   15390:	e008      	b.n	153a4 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   15392:	9801      	ldr	r0, [sp, #4]
   15394:	6801      	ldr	r1, [r0, #0]
   15396:	2901      	cmp	r1, #1
   15398:	d00c      	beq.n	153b4 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa4>
   1539a:	e015      	b.n	153c8 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb8>
   1539c:	2000      	movs	r0, #0
   1539e:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   153a2:	e7f6      	b.n	15392 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   153a4:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   153a8:	07c0      	lsls	r0, r0, #31
   153aa:	2800      	cmp	r0, #0
   153ac:	d1f6      	bne.n	1539c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x8c>
   153ae:	e7f0      	b.n	15392 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   153b0:	b010      	add	sp, #64	; 0x40
   153b2:	bd80      	pop	{r7, pc}
   153b4:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   153b8:	07c0      	lsls	r0, r0, #31
   153ba:	2800      	cmp	r0, #0
   153bc:	d0f8      	beq.n	153b0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   153be:	e7ff      	b.n	153c0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb0>
   153c0:	2000      	movs	r0, #0
   153c2:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   153c6:	e7f3      	b.n	153b0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   153c8:	e7f2      	b.n	153b0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>

000153ca <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   153ca:	b084      	sub	sp, #16
   153cc:	9002      	str	r0, [sp, #8]
   153ce:	6801      	ldr	r1, [r0, #0]
   153d0:	2900      	cmp	r1, #0
   153d2:	9000      	str	r0, [sp, #0]
   153d4:	d001      	beq.n	153da <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   153d6:	e7ff      	b.n	153d8 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   153d8:	e003      	b.n	153e2 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   153da:	2000      	movs	r0, #0
   153dc:	9001      	str	r0, [sp, #4]
   153de:	e006      	b.n	153ee <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   153e0:	defe      	udf	#254	; 0xfe
   153e2:	9800      	ldr	r0, [sp, #0]
   153e4:	f100 0108 	add.w	r1, r0, #8
   153e8:	9103      	str	r1, [sp, #12]
   153ea:	9101      	str	r1, [sp, #4]
   153ec:	e7ff      	b.n	153ee <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   153ee:	9801      	ldr	r0, [sp, #4]
   153f0:	b004      	add	sp, #16
   153f2:	4770      	bx	lr

000153f4 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>:
   153f4:	b510      	push	{r4, lr}
   153f6:	b088      	sub	sp, #32
   153f8:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   153fc:	468e      	mov	lr, r1
   153fe:	4604      	mov	r4, r0
   15400:	f8ad 0010 	strh.w	r0, [sp, #16]
   15404:	f8ad 1012 	strh.w	r1, [sp, #18]
   15408:	9205      	str	r2, [sp, #20]
   1540a:	9306      	str	r3, [sp, #24]
   1540c:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   15410:	4601      	mov	r1, r0
   15412:	2800      	cmp	r0, #0
   15414:	9303      	str	r3, [sp, #12]
   15416:	9202      	str	r2, [sp, #8]
   15418:	f8cd c004 	str.w	ip, [sp, #4]
   1541c:	d001      	beq.n	15422 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2e>
   1541e:	e7ff      	b.n	15420 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2c>
   15420:	e006      	b.n	15430 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x3c>
   15422:	9802      	ldr	r0, [sp, #8]
   15424:	9903      	ldr	r1, [sp, #12]
   15426:	9a01      	ldr	r2, [sp, #4]
   15428:	f003 f8ee 	bl	18608 <_ZN4core6option13expect_failed17had6579abaad447b4E>
   1542c:	defe      	udf	#254	; 0xfe
   1542e:	defe      	udf	#254	; 0xfe
   15430:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   15434:	4601      	mov	r1, r0
   15436:	f8ad 001e 	strh.w	r0, [sp, #30]
   1543a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   1543e:	2801      	cmp	r0, #1
   15440:	9100      	str	r1, [sp, #0]
   15442:	d103      	bne.n	1544c <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x58>
   15444:	e7ff      	b.n	15446 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>
   15446:	9800      	ldr	r0, [sp, #0]
   15448:	b008      	add	sp, #32
   1544a:	bd10      	pop	{r4, pc}
   1544c:	e7fb      	b.n	15446 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>

0001544e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   1544e:	b084      	sub	sp, #16
   15450:	460b      	mov	r3, r1
   15452:	4684      	mov	ip, r0
   15454:	f88d 000c 	strb.w	r0, [sp, #12]
   15458:	f88d 100d 	strb.w	r1, [sp, #13]
   1545c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   15460:	07c1      	lsls	r1, r0, #31
   15462:	2900      	cmp	r1, #0
   15464:	9202      	str	r2, [sp, #8]
   15466:	d001      	beq.n	1546c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   15468:	e7ff      	b.n	1546a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   1546a:	e009      	b.n	15480 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   1546c:	f647 6031 	movw	r0, #32305	; 0x7e31
   15470:	f2c0 0002 	movt	r0, #2
   15474:	212b      	movs	r1, #43	; 0x2b
   15476:	9a02      	ldr	r2, [sp, #8]
   15478:	f003 f910 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1547c:	defe      	udf	#254	; 0xfe
   1547e:	defe      	udf	#254	; 0xfe
   15480:	f89d 000d 	ldrb.w	r0, [sp, #13]
   15484:	4601      	mov	r1, r0
   15486:	f88d 000f 	strb.w	r0, [sp, #15]
   1548a:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1548e:	07c0      	lsls	r0, r0, #31
   15490:	2800      	cmp	r0, #0
   15492:	9101      	str	r1, [sp, #4]
   15494:	d003      	beq.n	1549e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   15496:	e7ff      	b.n	15498 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   15498:	9801      	ldr	r0, [sp, #4]
   1549a:	b004      	add	sp, #16
   1549c:	4770      	bx	lr
   1549e:	e7fb      	b.n	15498 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

000154a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   154a0:	b088      	sub	sp, #32
   154a2:	9004      	str	r0, [sp, #16]
   154a4:	9105      	str	r1, [sp, #20]
   154a6:	9804      	ldr	r0, [sp, #16]
   154a8:	2800      	cmp	r0, #0
   154aa:	4601      	mov	r1, r0
   154ac:	bf18      	it	ne
   154ae:	2101      	movne	r1, #1
   154b0:	2800      	cmp	r0, #0
   154b2:	9203      	str	r2, [sp, #12]
   154b4:	d001      	beq.n	154ba <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   154b6:	e7ff      	b.n	154b8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   154b8:	e009      	b.n	154ce <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   154ba:	f647 6031 	movw	r0, #32305	; 0x7e31
   154be:	f2c0 0002 	movt	r0, #2
   154c2:	212b      	movs	r1, #43	; 0x2b
   154c4:	9a03      	ldr	r2, [sp, #12]
   154c6:	f003 f8e9 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   154ca:	defe      	udf	#254	; 0xfe
   154cc:	defe      	udf	#254	; 0xfe
   154ce:	9804      	ldr	r0, [sp, #16]
   154d0:	9905      	ldr	r1, [sp, #20]
   154d2:	9006      	str	r0, [sp, #24]
   154d4:	9107      	str	r1, [sp, #28]
   154d6:	9a04      	ldr	r2, [sp, #16]
   154d8:	2a00      	cmp	r2, #0
   154da:	9002      	str	r0, [sp, #8]
   154dc:	9101      	str	r1, [sp, #4]
   154de:	d004      	beq.n	154ea <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   154e0:	e7ff      	b.n	154e2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   154e2:	9802      	ldr	r0, [sp, #8]
   154e4:	9901      	ldr	r1, [sp, #4]
   154e6:	b008      	add	sp, #32
   154e8:	4770      	bx	lr
   154ea:	e7fa      	b.n	154e2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

000154ec <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>:
   154ec:	b580      	push	{r7, lr}
   154ee:	b082      	sub	sp, #8
   154f0:	9001      	str	r0, [sp, #4]
   154f2:	f000 f82b 	bl	1554c <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   154f6:	9000      	str	r0, [sp, #0]
   154f8:	e7ff      	b.n	154fa <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E+0xe>
   154fa:	2001      	movs	r0, #1
   154fc:	9900      	ldr	r1, [sp, #0]
   154fe:	4388      	bics	r0, r1
   15500:	b002      	add	sp, #8
   15502:	bd80      	pop	{r7, pc}

00015504 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   15504:	b082      	sub	sp, #8
   15506:	9001      	str	r0, [sp, #4]
   15508:	6800      	ldr	r0, [r0, #0]
   1550a:	2800      	cmp	r0, #0
   1550c:	d104      	bne.n	15518 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   1550e:	e7ff      	b.n	15510 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   15510:	2000      	movs	r0, #0
   15512:	f88d 0003 	strb.w	r0, [sp, #3]
   15516:	e003      	b.n	15520 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   15518:	2001      	movs	r0, #1
   1551a:	f88d 0003 	strb.w	r0, [sp, #3]
   1551e:	e7ff      	b.n	15520 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   15520:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15524:	b002      	add	sp, #8
   15526:	4770      	bx	lr

00015528 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>:
   15528:	b082      	sub	sp, #8
   1552a:	9001      	str	r0, [sp, #4]
   1552c:	6800      	ldr	r0, [r0, #0]
   1552e:	2801      	cmp	r0, #1
   15530:	d004      	beq.n	1553c <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x14>
   15532:	e7ff      	b.n	15534 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0xc>
   15534:	2000      	movs	r0, #0
   15536:	f88d 0003 	strb.w	r0, [sp, #3]
   1553a:	e003      	b.n	15544 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   1553c:	2001      	movs	r0, #1
   1553e:	f88d 0003 	strb.w	r0, [sp, #3]
   15542:	e7ff      	b.n	15544 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   15544:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15548:	b002      	add	sp, #8
   1554a:	4770      	bx	lr

0001554c <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>:
   1554c:	b082      	sub	sp, #8
   1554e:	9001      	str	r0, [sp, #4]
   15550:	8800      	ldrh	r0, [r0, #0]
   15552:	2801      	cmp	r0, #1
   15554:	d004      	beq.n	15560 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x14>
   15556:	e7ff      	b.n	15558 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0xc>
   15558:	2000      	movs	r0, #0
   1555a:	f88d 0003 	strb.w	r0, [sp, #3]
   1555e:	e003      	b.n	15568 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   15560:	2001      	movs	r0, #1
   15562:	f88d 0003 	strb.w	r0, [sp, #3]
   15566:	e7ff      	b.n	15568 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   15568:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1556c:	b002      	add	sp, #8
   1556e:	4770      	bx	lr

00015570 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   15570:	b580      	push	{r7, lr}
   15572:	b086      	sub	sp, #24
   15574:	9000      	str	r0, [sp, #0]
   15576:	2000      	movs	r0, #0
   15578:	f88d 000f 	strb.w	r0, [sp, #15]
   1557c:	f88d 000e 	strb.w	r0, [sp, #14]
   15580:	2001      	movs	r0, #1
   15582:	f88d 000f 	strb.w	r0, [sp, #15]
   15586:	f88d 000e 	strb.w	r0, [sp, #14]
   1558a:	9800      	ldr	r0, [sp, #0]
   1558c:	2800      	cmp	r0, #0
   1558e:	4601      	mov	r1, r0
   15590:	bf18      	it	ne
   15592:	2101      	movne	r1, #1
   15594:	2800      	cmp	r0, #0
   15596:	d001      	beq.n	1559c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   15598:	e7ff      	b.n	1559a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   1559a:	e004      	b.n	155a6 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   1559c:	2000      	movs	r0, #0
   1559e:	f88d 0004 	strb.w	r0, [sp, #4]
   155a2:	e019      	b.n	155d8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   155a4:	defe      	udf	#254	; 0xfe
   155a6:	2000      	movs	r0, #0
   155a8:	f88d 000f 	strb.w	r0, [sp, #15]
   155ac:	9900      	ldr	r1, [sp, #0]
   155ae:	9105      	str	r1, [sp, #20]
   155b0:	f88d 000e 	strb.w	r0, [sp, #14]
   155b4:	9102      	str	r1, [sp, #8]
   155b6:	9802      	ldr	r0, [sp, #8]
   155b8:	f7f5 f919 	bl	a7ee <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   155bc:	f88d 1005 	strb.w	r1, [sp, #5]
   155c0:	f88d 0004 	strb.w	r0, [sp, #4]
   155c4:	e7ff      	b.n	155c6 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   155c6:	e007      	b.n	155d8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   155c8:	9800      	ldr	r0, [sp, #0]
   155ca:	2800      	cmp	r0, #0
   155cc:	d110      	bne.n	155f0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   155ce:	e019      	b.n	15604 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   155d0:	2000      	movs	r0, #0
   155d2:	f88d 000e 	strb.w	r0, [sp, #14]
   155d6:	e7f7      	b.n	155c8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   155d8:	f89d 000e 	ldrb.w	r0, [sp, #14]
   155dc:	07c0      	lsls	r0, r0, #31
   155de:	2800      	cmp	r0, #0
   155e0:	d1f6      	bne.n	155d0 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   155e2:	e7f1      	b.n	155c8 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   155e4:	f89d 0004 	ldrb.w	r0, [sp, #4]
   155e8:	f89d 1005 	ldrb.w	r1, [sp, #5]
   155ec:	b006      	add	sp, #24
   155ee:	bd80      	pop	{r7, pc}
   155f0:	f89d 000f 	ldrb.w	r0, [sp, #15]
   155f4:	07c0      	lsls	r0, r0, #31
   155f6:	2800      	cmp	r0, #0
   155f8:	d0f4      	beq.n	155e4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   155fa:	e7ff      	b.n	155fc <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   155fc:	2000      	movs	r0, #0
   155fe:	f88d 000f 	strb.w	r0, [sp, #15]
   15602:	e7ef      	b.n	155e4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   15604:	e7ee      	b.n	155e4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

00015606 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>:
    fn clone(&self) -> Self {
   15606:	b580      	push	{r7, lr}
   15608:	b09c      	sub	sp, #112	; 0x70
   1560a:	911b      	str	r1, [sp, #108]	; 0x6c
   1560c:	aa01      	add	r2, sp, #4
        Vec(self.0.clone())
   1560e:	9000      	str	r0, [sp, #0]
   15610:	4610      	mov	r0, r2
   15612:	f000 fafc 	bl	15c0e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>
   15616:	e7ff      	b.n	15618 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE+0x12>
   15618:	a901      	add	r1, sp, #4
   1561a:	2268      	movs	r2, #104	; 0x68
   1561c:	9800      	ldr	r0, [sp, #0]
   1561e:	f009 fc11 	bl	1ee44 <__aeabi_memcpy>
    }
   15622:	b01c      	add	sp, #112	; 0x70
   15624:	bd80      	pop	{r7, pc}

00015626 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>:
    fn clone(&self) -> Self {
   15626:	b580      	push	{r7, lr}
   15628:	b0b6      	sub	sp, #216	; 0xd8
   1562a:	9135      	str	r1, [sp, #212]	; 0xd4
   1562c:	aa02      	add	r2, sp, #8
        Vec(self.0.clone())
   1562e:	9001      	str	r0, [sp, #4]
   15630:	4610      	mov	r0, r2
   15632:	f000 fb14 	bl	15c5e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>
   15636:	e7ff      	b.n	15638 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E+0x12>
   15638:	a902      	add	r1, sp, #8
   1563a:	22cc      	movs	r2, #204	; 0xcc
   1563c:	9801      	ldr	r0, [sp, #4]
   1563e:	f009 fc01 	bl	1ee44 <__aeabi_memcpy>
    }
   15642:	b036      	add	sp, #216	; 0xd8
   15644:	bd80      	pop	{r7, pc}

00015646 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>:
    fn drop(&mut self) {
   15646:	b580      	push	{r7, lr}
   15648:	b084      	sub	sp, #16
   1564a:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   1564c:	f000 f84c 	bl	156e8 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>
   15650:	9002      	str	r0, [sp, #8]
   15652:	9101      	str	r1, [sp, #4]
   15654:	e7ff      	b.n	15656 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x10>
   15656:	9802      	ldr	r0, [sp, #8]
   15658:	9901      	ldr	r1, [sp, #4]
   1565a:	f001 fb7b 	bl	16d54 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   1565e:	e7ff      	b.n	15660 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1a>
   15660:	e7ff      	b.n	15662 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1c>
    }
   15662:	b004      	add	sp, #16
   15664:	bd80      	pop	{r7, pc}

00015666 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>:
    fn drop(&mut self) {
   15666:	b580      	push	{r7, lr}
   15668:	b084      	sub	sp, #16
   1566a:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   1566c:	f000 f848 	bl	15700 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   15670:	9002      	str	r0, [sp, #8]
   15672:	9101      	str	r1, [sp, #4]
   15674:	e7ff      	b.n	15676 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x10>
   15676:	9802      	ldr	r0, [sp, #8]
   15678:	9901      	ldr	r1, [sp, #4]
   1567a:	f001 fb6b 	bl	16d54 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   1567e:	e7ff      	b.n	15680 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1a>
   15680:	e7ff      	b.n	15682 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1c>
    }
   15682:	b004      	add	sp, #16
   15684:	bd80      	pop	{r7, pc}

00015686 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>:
    fn deref(&self) -> &[T] {
   15686:	b580      	push	{r7, lr}
   15688:	b084      	sub	sp, #16
   1568a:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1568c:	f000 fb0f 	bl	15cae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   15690:	9002      	str	r0, [sp, #8]
   15692:	9101      	str	r1, [sp, #4]
   15694:	e7ff      	b.n	15696 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E+0x10>
    }
   15696:	9802      	ldr	r0, [sp, #8]
   15698:	9901      	ldr	r1, [sp, #4]
   1569a:	b004      	add	sp, #16
   1569c:	bd80      	pop	{r7, pc}

0001569e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>:
    fn deref(&self) -> &[T] {
   1569e:	b580      	push	{r7, lr}
   156a0:	b084      	sub	sp, #16
   156a2:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   156a4:	f000 fb18 	bl	15cd8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   156a8:	9002      	str	r0, [sp, #8]
   156aa:	9101      	str	r1, [sp, #4]
   156ac:	e7ff      	b.n	156ae <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E+0x10>
    }
   156ae:	9802      	ldr	r0, [sp, #8]
   156b0:	9901      	ldr	r1, [sp, #4]
   156b2:	b004      	add	sp, #16
   156b4:	bd80      	pop	{r7, pc}

000156b6 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>:
    fn drop(&mut self) {
   156b6:	b580      	push	{r7, lr}
   156b8:	b086      	sub	sp, #24
   156ba:	9005      	str	r0, [sp, #20]
            ptr::drop_in_place(&mut self.vec[self.next..]);
   156bc:	9003      	str	r0, [sp, #12]
   156be:	f000 f81f 	bl	15700 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   156c2:	9002      	str	r0, [sp, #8]
   156c4:	9101      	str	r1, [sp, #4]
   156c6:	e7ff      	b.n	156c8 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x12>
   156c8:	9803      	ldr	r0, [sp, #12]
   156ca:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   156ce:	9104      	str	r1, [sp, #16]
   156d0:	9a04      	ldr	r2, [sp, #16]
   156d2:	9802      	ldr	r0, [sp, #8]
   156d4:	9901      	ldr	r1, [sp, #4]
   156d6:	f001 fb4a 	bl	16d6e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>
   156da:	e7ff      	b.n	156dc <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x26>
   156dc:	e7ff      	b.n	156de <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x28>
   156de:	2000      	movs	r0, #0
            self.vec.0.len = 0;
   156e0:	9903      	ldr	r1, [sp, #12]
   156e2:	6008      	str	r0, [r1, #0]
    }
   156e4:	b006      	add	sp, #24
   156e6:	bd80      	pop	{r7, pc}

000156e8 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>:

impl<T, N> ops::DerefMut for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn deref_mut(&mut self) -> &mut [T] {
   156e8:	b580      	push	{r7, lr}
   156ea:	b084      	sub	sp, #16
   156ec:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   156ee:	f000 f8ff 	bl	158f0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   156f2:	9002      	str	r0, [sp, #8]
   156f4:	9101      	str	r1, [sp, #4]
   156f6:	e7ff      	b.n	156f8 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E+0x10>
    }
   156f8:	9802      	ldr	r0, [sp, #8]
   156fa:	9901      	ldr	r1, [sp, #4]
   156fc:	b004      	add	sp, #16
   156fe:	bd80      	pop	{r7, pc}

00015700 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>:
    fn deref_mut(&mut self) -> &mut [T] {
   15700:	b580      	push	{r7, lr}
   15702:	b084      	sub	sp, #16
   15704:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   15706:	f000 f908 	bl	1591a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   1570a:	9002      	str	r0, [sp, #8]
   1570c:	9101      	str	r1, [sp, #4]
   1570e:	e7ff      	b.n	15710 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E+0x10>
    }
   15710:	9802      	ldr	r0, [sp, #8]
   15712:	9901      	ldr	r1, [sp, #4]
   15714:	b004      	add	sp, #16
   15716:	bd80      	pop	{r7, pc}

00015718 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   15718:	b580      	push	{r7, lr}
   1571a:	b084      	sub	sp, #16
   1571c:	9001      	str	r0, [sp, #4]
   1571e:	9102      	str	r1, [sp, #8]
   15720:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   15722:	f000 f973 	bl	15a0c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   15726:	9000      	str	r0, [sp, #0]
   15728:	e7ff      	b.n	1572a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE+0x12>
    }
   1572a:	9800      	ldr	r0, [sp, #0]
   1572c:	f000 0001 	and.w	r0, r0, #1
   15730:	b004      	add	sp, #16
   15732:	bd80      	pop	{r7, pc}

00015734 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>:
    pub fn new() -> Self {
   15734:	b580      	push	{r7, lr}
   15736:	b09c      	sub	sp, #112	; 0x70
   15738:	a902      	add	r1, sp, #8
        Vec(crate::i::Vec::new())
   1573a:	9001      	str	r0, [sp, #4]
   1573c:	4608      	mov	r0, r1
   1573e:	f000 f8c8 	bl	158d2 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   15742:	e7ff      	b.n	15744 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E+0x10>
   15744:	a902      	add	r1, sp, #8
   15746:	2268      	movs	r2, #104	; 0x68
   15748:	9801      	ldr	r0, [sp, #4]
   1574a:	f009 fb7b 	bl	1ee44 <__aeabi_memcpy>
    }
   1574e:	b01c      	add	sp, #112	; 0x70
   15750:	bd80      	pop	{r7, pc}

00015752 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>:
    pub fn new() -> Self {
   15752:	b580      	push	{r7, lr}
   15754:	b0b4      	sub	sp, #208	; 0xd0
   15756:	a901      	add	r1, sp, #4
        Vec(crate::i::Vec::new())
   15758:	9000      	str	r0, [sp, #0]
   1575a:	4608      	mov	r0, r1
   1575c:	f000 f8aa 	bl	158b4 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   15760:	e7ff      	b.n	15762 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE+0x10>
   15762:	a901      	add	r1, sp, #4
   15764:	22cc      	movs	r2, #204	; 0xcc
   15766:	9800      	ldr	r0, [sp, #0]
   15768:	f009 fb6c 	bl	1ee44 <__aeabi_memcpy>
    }
   1576c:	b034      	add	sp, #208	; 0xd0
   1576e:	bd80      	pop	{r7, pc}

00015770 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   15770:	b580      	push	{r7, lr}
   15772:	b086      	sub	sp, #24
   15774:	460a      	mov	r2, r1
   15776:	9004      	str	r0, [sp, #16]
   15778:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.0.push(item)
   1577c:	9203      	str	r2, [sp, #12]
   1577e:	f000 fa0b 	bl	15b98 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>
   15782:	9002      	str	r0, [sp, #8]
   15784:	9101      	str	r1, [sp, #4]
   15786:	e7ff      	b.n	15788 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE+0x18>
    }
   15788:	9802      	ldr	r0, [sp, #8]
   1578a:	9901      	ldr	r1, [sp, #4]
   1578c:	b006      	add	sp, #24
   1578e:	bd80      	pop	{r7, pc}

00015790 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>:
    pub fn clear(&mut self) {
   15790:	b580      	push	{r7, lr}
   15792:	b082      	sub	sp, #8
   15794:	9001      	str	r0, [sp, #4]
        self.0.clear()
   15796:	f000 fa28 	bl	15bea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>
   1579a:	e7ff      	b.n	1579c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E+0xc>
    }
   1579c:	b002      	add	sp, #8
   1579e:	bd80      	pop	{r7, pc}

000157a0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>:
    pub fn clear(&mut self) {
   157a0:	b580      	push	{r7, lr}
   157a2:	b082      	sub	sp, #8
   157a4:	9001      	str	r0, [sp, #4]
        self.0.clear()
   157a6:	f000 fa29 	bl	15bfc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>
   157aa:	e7ff      	b.n	157ac <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E+0xc>
    }
   157ac:	b002      	add	sp, #8
   157ae:	bd80      	pop	{r7, pc}

000157b0 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>:
    fn into_iter(self) -> Self::IntoIter {
   157b0:	b580      	push	{r7, lr}
   157b2:	b0b6      	sub	sp, #216	; 0xd8
   157b4:	aa03      	add	r2, sp, #12
   157b6:	23cc      	movs	r3, #204	; 0xcc
        IntoIter { vec: self, next: 0 }
   157b8:	9002      	str	r0, [sp, #8]
   157ba:	4610      	mov	r0, r2
   157bc:	9201      	str	r2, [sp, #4]
   157be:	461a      	mov	r2, r3
   157c0:	9300      	str	r3, [sp, #0]
   157c2:	f009 fb3f 	bl	1ee44 <__aeabi_memcpy>
   157c6:	9802      	ldr	r0, [sp, #8]
   157c8:	9901      	ldr	r1, [sp, #4]
   157ca:	9a00      	ldr	r2, [sp, #0]
   157cc:	f009 fb3a 	bl	1ee44 <__aeabi_memcpy>
   157d0:	2000      	movs	r0, #0
   157d2:	9902      	ldr	r1, [sp, #8]
   157d4:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    }
   157d8:	b036      	add	sp, #216	; 0xd8
   157da:	bd80      	pop	{r7, pc}

000157dc <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>:
    fn next(&mut self) -> Option<Self::Item> {
   157dc:	b580      	push	{r7, lr}
   157de:	b08e      	sub	sp, #56	; 0x38
   157e0:	900a      	str	r0, [sp, #40]	; 0x28
        if self.next < self.vec.len() {
   157e2:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   157e6:	9008      	str	r0, [sp, #32]
   157e8:	9107      	str	r1, [sp, #28]
   157ea:	f7ff ff58 	bl	1569e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>
   157ee:	9006      	str	r0, [sp, #24]
   157f0:	9105      	str	r1, [sp, #20]
   157f2:	e7ff      	b.n	157f4 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x18>
   157f4:	9806      	ldr	r0, [sp, #24]
   157f6:	9905      	ldr	r1, [sp, #20]
   157f8:	f001 fa59 	bl	16cae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   157fc:	9004      	str	r0, [sp, #16]
   157fe:	e7ff      	b.n	15800 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x24>
   15800:	9807      	ldr	r0, [sp, #28]
   15802:	9904      	ldr	r1, [sp, #16]
   15804:	4288      	cmp	r0, r1
   15806:	d304      	bcc.n	15812 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x36>
   15808:	e7ff      	b.n	1580a <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x2e>
   1580a:	2000      	movs	r0, #0
            None
   1580c:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   15810:	e029      	b.n	15866 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
                (self.vec.0.buffer.as_ptr() as *const T)
   15812:	9808      	ldr	r0, [sp, #32]
   15814:	1d01      	adds	r1, r0, #4
   15816:	910c      	str	r1, [sp, #48]	; 0x30
   15818:	910d      	str	r1, [sp, #52]	; 0x34
   1581a:	9103      	str	r1, [sp, #12]
   1581c:	e7ff      	b.n	1581e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x42>
                    .add(self.next)
   1581e:	9808      	ldr	r0, [sp, #32]
   15820:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
                (self.vec.0.buffer.as_ptr() as *const T)
   15824:	9803      	ldr	r0, [sp, #12]
   15826:	f002 fcdf 	bl	181e8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   1582a:	9002      	str	r0, [sp, #8]
   1582c:	e7ff      	b.n	1582e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x52>
   1582e:	9802      	ldr	r0, [sp, #8]
   15830:	f002 fce5 	bl	181fe <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>
   15834:	4601      	mov	r1, r0
   15836:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   1583a:	9101      	str	r1, [sp, #4]
   1583c:	e7ff      	b.n	1583e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x62>
            self.next += 1;
   1583e:	9808      	ldr	r0, [sp, #32]
   15840:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   15844:	1c4a      	adds	r2, r1, #1
   15846:	4613      	mov	r3, r2
   15848:	428a      	cmp	r2, r1
   1584a:	9300      	str	r3, [sp, #0]
   1584c:	d311      	bcc.n	15872 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x96>
   1584e:	e7ff      	b.n	15850 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x74>
   15850:	9800      	ldr	r0, [sp, #0]
   15852:	9908      	ldr	r1, [sp, #32]
   15854:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
            Some(item)
   15858:	9a01      	ldr	r2, [sp, #4]
   1585a:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
   1585e:	2301      	movs	r3, #1
   15860:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   15864:	e7ff      	b.n	15866 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
    }
   15866:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   1586a:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   1586e:	b00e      	add	sp, #56	; 0x38
   15870:	bd80      	pop	{r7, pc}
            self.next += 1;
   15872:	f647 60d0 	movw	r0, #32464	; 0x7ed0
   15876:	f2c0 0002 	movt	r0, #2
   1587a:	f647 62b4 	movw	r2, #32436	; 0x7eb4
   1587e:	f2c0 0202 	movt	r2, #2
   15882:	211c      	movs	r1, #28
   15884:	f002 ff0a 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15888:	defe      	udf	#254	; 0xfe

0001588a <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   1588a:	b580      	push	{r7, lr}
   1588c:	b084      	sub	sp, #16
   1588e:	9002      	str	r0, [sp, #8]
   15890:	9103      	str	r1, [sp, #12]
   15892:	f647 60ec 	movw	r0, #32492	; 0x7eec
   15896:	f2c0 0002 	movt	r0, #2
   1589a:	2202      	movs	r2, #2
   1589c:	9001      	str	r0, [sp, #4]
   1589e:	4608      	mov	r0, r1
   158a0:	9901      	ldr	r1, [sp, #4]
   158a2:	f003 fc1b 	bl	190dc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   158a6:	9000      	str	r0, [sp, #0]
   158a8:	e7ff      	b.n	158aa <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   158aa:	9800      	ldr	r0, [sp, #0]
   158ac:	f000 0001 	and.w	r0, r0, #1
   158b0:	b004      	add	sp, #16
   158b2:	bd80      	pop	{r7, pc}

000158b4 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>:
    pub const fn new() -> Self {
   158b4:	b580      	push	{r7, lr}
   158b6:	b0b4      	sub	sp, #208	; 0xd0
            buffer: MaybeUninit::uninit(),
   158b8:	9001      	str	r0, [sp, #4]
   158ba:	e7ff      	b.n	158bc <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE+0x8>
        Self {
   158bc:	9801      	ldr	r0, [sp, #4]
   158be:	3004      	adds	r0, #4
   158c0:	a902      	add	r1, sp, #8
   158c2:	22c8      	movs	r2, #200	; 0xc8
   158c4:	f009 fabe 	bl	1ee44 <__aeabi_memcpy>
   158c8:	2100      	movs	r1, #0
   158ca:	9a01      	ldr	r2, [sp, #4]
   158cc:	6011      	str	r1, [r2, #0]
    }
   158ce:	b034      	add	sp, #208	; 0xd0
   158d0:	bd80      	pop	{r7, pc}

000158d2 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>:
    pub const fn new() -> Self {
   158d2:	b580      	push	{r7, lr}
   158d4:	b09a      	sub	sp, #104	; 0x68
            buffer: MaybeUninit::uninit(),
   158d6:	9000      	str	r0, [sp, #0]
   158d8:	e7ff      	b.n	158da <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE+0x8>
        Self {
   158da:	9800      	ldr	r0, [sp, #0]
   158dc:	3004      	adds	r0, #4
   158de:	a901      	add	r1, sp, #4
   158e0:	2264      	movs	r2, #100	; 0x64
   158e2:	f009 faaf 	bl	1ee44 <__aeabi_memcpy>
   158e6:	2100      	movs	r1, #0
   158e8:	9a00      	ldr	r2, [sp, #0]
   158ea:	6011      	str	r1, [r2, #0]
    }
   158ec:	b01a      	add	sp, #104	; 0x68
   158ee:	bd80      	pop	{r7, pc}

000158f0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   158f0:	b580      	push	{r7, lr}
   158f2:	b088      	sub	sp, #32
   158f4:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   158f6:	1d01      	adds	r1, r0, #4
   158f8:	9106      	str	r1, [sp, #24]
   158fa:	9107      	str	r1, [sp, #28]
   158fc:	9004      	str	r0, [sp, #16]
   158fe:	9103      	str	r1, [sp, #12]
   15900:	e7ff      	b.n	15902 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x12>
   15902:	9804      	ldr	r0, [sp, #16]
   15904:	6801      	ldr	r1, [r0, #0]
   15906:	9803      	ldr	r0, [sp, #12]
   15908:	f001 f9ad 	bl	16c66 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   1590c:	9002      	str	r0, [sp, #8]
   1590e:	9101      	str	r1, [sp, #4]
   15910:	e7ff      	b.n	15912 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x22>
    }
   15912:	9802      	ldr	r0, [sp, #8]
   15914:	9901      	ldr	r1, [sp, #4]
   15916:	b008      	add	sp, #32
   15918:	bd80      	pop	{r7, pc}

0001591a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   1591a:	b580      	push	{r7, lr}
   1591c:	b088      	sub	sp, #32
   1591e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   15920:	1d01      	adds	r1, r0, #4
   15922:	9106      	str	r1, [sp, #24]
   15924:	9107      	str	r1, [sp, #28]
   15926:	9004      	str	r0, [sp, #16]
   15928:	9103      	str	r1, [sp, #12]
   1592a:	e7ff      	b.n	1592c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x12>
   1592c:	9804      	ldr	r0, [sp, #16]
   1592e:	6801      	ldr	r1, [r0, #0]
   15930:	9803      	ldr	r0, [sp, #12]
   15932:	f001 f998 	bl	16c66 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15936:	9002      	str	r0, [sp, #8]
   15938:	9101      	str	r1, [sp, #4]
   1593a:	e7ff      	b.n	1593c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x22>
    }
   1593c:	9802      	ldr	r0, [sp, #8]
   1593e:	9901      	ldr	r1, [sp, #4]
   15940:	b008      	add	sp, #32
   15942:	bd80      	pop	{r7, pc}

00015944 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   15944:	b580      	push	{r7, lr}
   15946:	b08a      	sub	sp, #40	; 0x28
   15948:	460a      	mov	r2, r1
   1594a:	9006      	str	r0, [sp, #24]
   1594c:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   15950:	1d01      	adds	r1, r0, #4
   15952:	9108      	str	r1, [sp, #32]
   15954:	9109      	str	r1, [sp, #36]	; 0x24
   15956:	9005      	str	r0, [sp, #20]
   15958:	9204      	str	r2, [sp, #16]
   1595a:	9103      	str	r1, [sp, #12]
   1595c:	e7ff      	b.n	1595e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x1a>
            .add(self.len)
   1595e:	9805      	ldr	r0, [sp, #20]
   15960:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   15962:	9803      	ldr	r0, [sp, #12]
   15964:	f001 fa9c 	bl	16ea0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15968:	9002      	str	r0, [sp, #8]
   1596a:	e7ff      	b.n	1596c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x28>
   1596c:	9802      	ldr	r0, [sp, #8]
   1596e:	9904      	ldr	r1, [sp, #16]
   15970:	f001 faa1 	bl	16eb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   15974:	e7ff      	b.n	15976 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x32>
        self.len += 1;
   15976:	9805      	ldr	r0, [sp, #20]
   15978:	6801      	ldr	r1, [r0, #0]
   1597a:	1c4a      	adds	r2, r1, #1
   1597c:	4613      	mov	r3, r2
   1597e:	428a      	cmp	r2, r1
   15980:	9301      	str	r3, [sp, #4]
   15982:	d305      	bcc.n	15990 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x4c>
   15984:	e7ff      	b.n	15986 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x42>
   15986:	9801      	ldr	r0, [sp, #4]
   15988:	9905      	ldr	r1, [sp, #20]
   1598a:	6008      	str	r0, [r1, #0]
    }
   1598c:	b00a      	add	sp, #40	; 0x28
   1598e:	bd80      	pop	{r7, pc}
        self.len += 1;
   15990:	f647 7090 	movw	r0, #32656	; 0x7f90
   15994:	f2c0 0002 	movt	r0, #2
   15998:	f647 7274 	movw	r2, #32628	; 0x7f74
   1599c:	f2c0 0202 	movt	r2, #2
   159a0:	211c      	movs	r1, #28
   159a2:	f002 fe7b 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   159a6:	defe      	udf	#254	; 0xfe

000159a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   159a8:	b580      	push	{r7, lr}
   159aa:	b08a      	sub	sp, #40	; 0x28
   159ac:	460a      	mov	r2, r1
   159ae:	9006      	str	r0, [sp, #24]
   159b0:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   159b4:	1d01      	adds	r1, r0, #4
   159b6:	9108      	str	r1, [sp, #32]
   159b8:	9109      	str	r1, [sp, #36]	; 0x24
   159ba:	9005      	str	r0, [sp, #20]
   159bc:	9204      	str	r2, [sp, #16]
   159be:	9103      	str	r1, [sp, #12]
   159c0:	e7ff      	b.n	159c2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x1a>
            .add(self.len)
   159c2:	9805      	ldr	r0, [sp, #20]
   159c4:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   159c6:	9803      	ldr	r0, [sp, #12]
   159c8:	f001 fa6a 	bl	16ea0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   159cc:	9002      	str	r0, [sp, #8]
   159ce:	e7ff      	b.n	159d0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x28>
   159d0:	9802      	ldr	r0, [sp, #8]
   159d2:	9904      	ldr	r1, [sp, #16]
   159d4:	f001 fa6f 	bl	16eb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   159d8:	e7ff      	b.n	159da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x32>
        self.len += 1;
   159da:	9805      	ldr	r0, [sp, #20]
   159dc:	6801      	ldr	r1, [r0, #0]
   159de:	1c4a      	adds	r2, r1, #1
   159e0:	4613      	mov	r3, r2
   159e2:	428a      	cmp	r2, r1
   159e4:	9301      	str	r3, [sp, #4]
   159e6:	d305      	bcc.n	159f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x4c>
   159e8:	e7ff      	b.n	159ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x42>
   159ea:	9801      	ldr	r0, [sp, #4]
   159ec:	9905      	ldr	r1, [sp, #20]
   159ee:	6008      	str	r0, [r1, #0]
    }
   159f0:	b00a      	add	sp, #40	; 0x28
   159f2:	bd80      	pop	{r7, pc}
        self.len += 1;
   159f4:	f647 7090 	movw	r0, #32656	; 0x7f90
   159f8:	f2c0 0002 	movt	r0, #2
   159fc:	f647 7274 	movw	r2, #32628	; 0x7f74
   15a00:	f2c0 0202 	movt	r2, #2
   15a04:	211c      	movs	r1, #28
   15a06:	f002 fe49 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15a0a:	defe      	udf	#254	; 0xfe

00015a0c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   15a0c:	b580      	push	{r7, lr}
   15a0e:	b094      	sub	sp, #80	; 0x50
   15a10:	900e      	str	r0, [sp, #56]	; 0x38
   15a12:	910f      	str	r1, [sp, #60]	; 0x3c
   15a14:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   15a16:	6803      	ldr	r3, [r0, #0]
   15a18:	9009      	str	r0, [sp, #36]	; 0x24
   15a1a:	4608      	mov	r0, r1
   15a1c:	9108      	str	r1, [sp, #32]
   15a1e:	4611      	mov	r1, r2
   15a20:	9207      	str	r2, [sp, #28]
   15a22:	9306      	str	r3, [sp, #24]
   15a24:	f001 f943 	bl	16cae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15a28:	9005      	str	r0, [sp, #20]
   15a2a:	e7ff      	b.n	15a2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x20>
   15a2c:	9806      	ldr	r0, [sp, #24]
   15a2e:	9905      	ldr	r1, [sp, #20]
   15a30:	1842      	adds	r2, r0, r1
   15a32:	4613      	mov	r3, r2
   15a34:	4282      	cmp	r2, r0
   15a36:	9304      	str	r3, [sp, #16]
   15a38:	d33f      	bcc.n	15aba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xae>
   15a3a:	e7ff      	b.n	15a3c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x30>
   15a3c:	9809      	ldr	r0, [sp, #36]	; 0x24
   15a3e:	f000 f96a 	bl	15d16 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>
   15a42:	9003      	str	r0, [sp, #12]
   15a44:	e7ff      	b.n	15a46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x3a>
   15a46:	9804      	ldr	r0, [sp, #16]
   15a48:	9903      	ldr	r1, [sp, #12]
   15a4a:	4288      	cmp	r0, r1
   15a4c:	d807      	bhi.n	15a5e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x52>
   15a4e:	e7ff      	b.n	15a50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x44>
            for elem in other {
   15a50:	9808      	ldr	r0, [sp, #32]
   15a52:	9907      	ldr	r1, [sp, #28]
   15a54:	f001 f99f 	bl	16d96 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   15a58:	9002      	str	r0, [sp, #8]
   15a5a:	9101      	str	r1, [sp, #4]
   15a5c:	e003      	b.n	15a66 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x5a>
   15a5e:	2001      	movs	r0, #1
            Err(())
   15a60:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   15a64:	e025      	b.n	15ab2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   15a66:	9802      	ldr	r0, [sp, #8]
   15a68:	900b      	str	r0, [sp, #44]	; 0x2c
   15a6a:	9901      	ldr	r1, [sp, #4]
   15a6c:	910c      	str	r1, [sp, #48]	; 0x30
   15a6e:	e7ff      	b.n	15a70 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
   15a70:	a80b      	add	r0, sp, #44	; 0x2c
   15a72:	f001 f9b2 	bl	16dda <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   15a76:	900d      	str	r0, [sp, #52]	; 0x34
   15a78:	e7ff      	b.n	15a7a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x6e>
   15a7a:	980d      	ldr	r0, [sp, #52]	; 0x34
   15a7c:	2800      	cmp	r0, #0
   15a7e:	4601      	mov	r1, r0
   15a80:	bf18      	it	ne
   15a82:	2101      	movne	r1, #1
   15a84:	2800      	cmp	r0, #0
   15a86:	d001      	beq.n	15a8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x80>
   15a88:	e7ff      	b.n	15a8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x7e>
   15a8a:	e004      	b.n	15a96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x8a>
   15a8c:	2000      	movs	r0, #0
            Ok(())
   15a8e:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   15a92:	e00e      	b.n	15ab2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   15a94:	defe      	udf	#254	; 0xfe
   15a96:	980d      	ldr	r0, [sp, #52]	; 0x34
   15a98:	9011      	str	r0, [sp, #68]	; 0x44
   15a9a:	9012      	str	r0, [sp, #72]	; 0x48
   15a9c:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   15a9e:	f001 f856 	bl	16b4e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   15aa2:	9000      	str	r0, [sp, #0]
   15aa4:	e7ff      	b.n	15aa6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x9a>
   15aa6:	9809      	ldr	r0, [sp, #36]	; 0x24
   15aa8:	9900      	ldr	r1, [sp, #0]
   15aaa:	f7ff ff4b 	bl	15944 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>
   15aae:	e7ff      	b.n	15ab0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa4>
            for elem in other {
   15ab0:	e7de      	b.n	15a70 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
    }
   15ab2:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   15ab6:	b014      	add	sp, #80	; 0x50
   15ab8:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   15aba:	f647 7090 	movw	r0, #32656	; 0x7f90
   15abe:	f2c0 0002 	movt	r0, #2
   15ac2:	f647 72ac 	movw	r2, #32684	; 0x7fac
   15ac6:	f2c0 0202 	movt	r2, #2
   15aca:	211c      	movs	r1, #28
   15acc:	f002 fde6 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15ad0:	defe      	udf	#254	; 0xfe

00015ad2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   15ad2:	b580      	push	{r7, lr}
   15ad4:	b094      	sub	sp, #80	; 0x50
   15ad6:	900e      	str	r0, [sp, #56]	; 0x38
   15ad8:	910f      	str	r1, [sp, #60]	; 0x3c
   15ada:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   15adc:	6803      	ldr	r3, [r0, #0]
   15ade:	9009      	str	r0, [sp, #36]	; 0x24
   15ae0:	4608      	mov	r0, r1
   15ae2:	9108      	str	r1, [sp, #32]
   15ae4:	4611      	mov	r1, r2
   15ae6:	9207      	str	r2, [sp, #28]
   15ae8:	9306      	str	r3, [sp, #24]
   15aea:	f001 f8e0 	bl	16cae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15aee:	9005      	str	r0, [sp, #20]
   15af0:	e7ff      	b.n	15af2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x20>
   15af2:	9806      	ldr	r0, [sp, #24]
   15af4:	9905      	ldr	r1, [sp, #20]
   15af6:	1842      	adds	r2, r0, r1
   15af8:	4613      	mov	r3, r2
   15afa:	4282      	cmp	r2, r0
   15afc:	9304      	str	r3, [sp, #16]
   15afe:	d33f      	bcc.n	15b80 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xae>
   15b00:	e7ff      	b.n	15b02 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x30>
   15b02:	9809      	ldr	r0, [sp, #36]	; 0x24
   15b04:	f000 f8fd 	bl	15d02 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   15b08:	9003      	str	r0, [sp, #12]
   15b0a:	e7ff      	b.n	15b0c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x3a>
   15b0c:	9804      	ldr	r0, [sp, #16]
   15b0e:	9903      	ldr	r1, [sp, #12]
   15b10:	4288      	cmp	r0, r1
   15b12:	d807      	bhi.n	15b24 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x52>
   15b14:	e7ff      	b.n	15b16 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x44>
            for elem in other {
   15b16:	9808      	ldr	r0, [sp, #32]
   15b18:	9907      	ldr	r1, [sp, #28]
   15b1a:	f001 f93c 	bl	16d96 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   15b1e:	9002      	str	r0, [sp, #8]
   15b20:	9101      	str	r1, [sp, #4]
   15b22:	e003      	b.n	15b2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x5a>
   15b24:	2001      	movs	r0, #1
            Err(())
   15b26:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   15b2a:	e025      	b.n	15b78 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   15b2c:	9802      	ldr	r0, [sp, #8]
   15b2e:	900b      	str	r0, [sp, #44]	; 0x2c
   15b30:	9901      	ldr	r1, [sp, #4]
   15b32:	910c      	str	r1, [sp, #48]	; 0x30
   15b34:	e7ff      	b.n	15b36 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
   15b36:	a80b      	add	r0, sp, #44	; 0x2c
   15b38:	f001 f94f 	bl	16dda <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   15b3c:	900d      	str	r0, [sp, #52]	; 0x34
   15b3e:	e7ff      	b.n	15b40 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x6e>
   15b40:	980d      	ldr	r0, [sp, #52]	; 0x34
   15b42:	2800      	cmp	r0, #0
   15b44:	4601      	mov	r1, r0
   15b46:	bf18      	it	ne
   15b48:	2101      	movne	r1, #1
   15b4a:	2800      	cmp	r0, #0
   15b4c:	d001      	beq.n	15b52 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x80>
   15b4e:	e7ff      	b.n	15b50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x7e>
   15b50:	e004      	b.n	15b5c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x8a>
   15b52:	2000      	movs	r0, #0
            Ok(())
   15b54:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   15b58:	e00e      	b.n	15b78 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   15b5a:	defe      	udf	#254	; 0xfe
   15b5c:	980d      	ldr	r0, [sp, #52]	; 0x34
   15b5e:	9011      	str	r0, [sp, #68]	; 0x44
   15b60:	9012      	str	r0, [sp, #72]	; 0x48
   15b62:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   15b64:	f000 fff3 	bl	16b4e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   15b68:	9000      	str	r0, [sp, #0]
   15b6a:	e7ff      	b.n	15b6c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x9a>
   15b6c:	9809      	ldr	r0, [sp, #36]	; 0x24
   15b6e:	9900      	ldr	r1, [sp, #0]
   15b70:	f7ff ff1a 	bl	159a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   15b74:	e7ff      	b.n	15b76 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa4>
            for elem in other {
   15b76:	e7de      	b.n	15b36 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
    }
   15b78:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   15b7c:	b014      	add	sp, #80	; 0x50
   15b7e:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   15b80:	f647 7090 	movw	r0, #32656	; 0x7f90
   15b84:	f2c0 0002 	movt	r0, #2
   15b88:	f647 72ac 	movw	r2, #32684	; 0x7fac
   15b8c:	f2c0 0202 	movt	r2, #2
   15b90:	211c      	movs	r1, #28
   15b92:	f002 fd83 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15b96:	defe      	udf	#254	; 0xfe

00015b98 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   15b98:	b580      	push	{r7, lr}
   15b9a:	b088      	sub	sp, #32
   15b9c:	460a      	mov	r2, r1
   15b9e:	9006      	str	r0, [sp, #24]
   15ba0:	f8ad 101e 	strh.w	r1, [sp, #30]
        if self.len < self.capacity() {
   15ba4:	6801      	ldr	r1, [r0, #0]
   15ba6:	9004      	str	r0, [sp, #16]
   15ba8:	9203      	str	r2, [sp, #12]
   15baa:	9102      	str	r1, [sp, #8]
   15bac:	f000 f8a9 	bl	15d02 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   15bb0:	9001      	str	r0, [sp, #4]
   15bb2:	e7ff      	b.n	15bb4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x1c>
   15bb4:	9802      	ldr	r0, [sp, #8]
   15bb6:	9901      	ldr	r1, [sp, #4]
   15bb8:	4288      	cmp	r0, r1
   15bba:	d307      	bcc.n	15bcc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x34>
   15bbc:	e7ff      	b.n	15bbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x26>
            Err(item)
   15bbe:	9803      	ldr	r0, [sp, #12]
   15bc0:	f8ad 0016 	strh.w	r0, [sp, #22]
   15bc4:	2101      	movs	r1, #1
   15bc6:	f8ad 1014 	strh.w	r1, [sp, #20]
        if self.len < self.capacity() {
   15bca:	e008      	b.n	15bde <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
            unsafe { self.push_unchecked(item) }
   15bcc:	9804      	ldr	r0, [sp, #16]
   15bce:	9903      	ldr	r1, [sp, #12]
   15bd0:	f7ff feea 	bl	159a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   15bd4:	e7ff      	b.n	15bd6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x3e>
   15bd6:	2000      	movs	r0, #0
            Ok(())
   15bd8:	f8ad 0014 	strh.w	r0, [sp, #20]
        if self.len < self.capacity() {
   15bdc:	e7ff      	b.n	15bde <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
    }
   15bde:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15be2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   15be6:	b008      	add	sp, #32
   15be8:	bd80      	pop	{r7, pc}

00015bea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>:
    pub(crate) fn clear(&mut self) {
   15bea:	b580      	push	{r7, lr}
   15bec:	b082      	sub	sp, #8
   15bee:	9001      	str	r0, [sp, #4]
   15bf0:	2100      	movs	r1, #0
        self.truncate(0);
   15bf2:	f000 f8d0 	bl	15d96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>
   15bf6:	e7ff      	b.n	15bf8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE+0xe>
    }
   15bf8:	b002      	add	sp, #8
   15bfa:	bd80      	pop	{r7, pc}

00015bfc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>:
    pub(crate) fn clear(&mut self) {
   15bfc:	b580      	push	{r7, lr}
   15bfe:	b082      	sub	sp, #8
   15c00:	9001      	str	r0, [sp, #4]
   15c02:	2100      	movs	r1, #0
        self.truncate(0);
   15c04:	f000 f891 	bl	15d2a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>
   15c08:	e7ff      	b.n	15c0a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E+0xe>
    }
   15c0a:	b002      	add	sp, #8
   15c0c:	bd80      	pop	{r7, pc}

00015c0e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>:
    pub(crate) fn clone(&self) -> Self
   15c0e:	b580      	push	{r7, lr}
   15c10:	b0a0      	sub	sp, #128	; 0x80
   15c12:	911f      	str	r1, [sp, #124]	; 0x7c
   15c14:	aa05      	add	r2, sp, #20
        let mut new = Self::new();
   15c16:	9004      	str	r0, [sp, #16]
   15c18:	4610      	mov	r0, r2
   15c1a:	9103      	str	r1, [sp, #12]
   15c1c:	f7ff fe59 	bl	158d2 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   15c20:	e7ff      	b.n	15c22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   15c22:	9803      	ldr	r0, [sp, #12]
   15c24:	f000 f843 	bl	15cae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   15c28:	9002      	str	r0, [sp, #8]
   15c2a:	9101      	str	r1, [sp, #4]
   15c2c:	e7ff      	b.n	15c2e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x20>
   15c2e:	a805      	add	r0, sp, #20
   15c30:	9902      	ldr	r1, [sp, #8]
   15c32:	9a01      	ldr	r2, [sp, #4]
   15c34:	f7ff ff4d 	bl	15ad2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>
   15c38:	9000      	str	r0, [sp, #0]
   15c3a:	e7ff      	b.n	15c3c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x2e>
   15c3c:	9800      	ldr	r0, [sp, #0]
   15c3e:	f000 0001 	and.w	r0, r0, #1
   15c42:	f647 71bc 	movw	r1, #32700	; 0x7fbc
   15c46:	f2c0 0102 	movt	r1, #2
   15c4a:	f000 f959 	bl	15f00 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   15c4e:	e7ff      	b.n	15c50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x42>
   15c50:	a905      	add	r1, sp, #20
   15c52:	2268      	movs	r2, #104	; 0x68
        new
   15c54:	9804      	ldr	r0, [sp, #16]
   15c56:	f009 f8f5 	bl	1ee44 <__aeabi_memcpy>
    }
   15c5a:	b020      	add	sp, #128	; 0x80
   15c5c:	bd80      	pop	{r7, pc}

00015c5e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>:
    pub(crate) fn clone(&self) -> Self
   15c5e:	b580      	push	{r7, lr}
   15c60:	b0ba      	sub	sp, #232	; 0xe8
   15c62:	9139      	str	r1, [sp, #228]	; 0xe4
   15c64:	aa06      	add	r2, sp, #24
        let mut new = Self::new();
   15c66:	9005      	str	r0, [sp, #20]
   15c68:	4610      	mov	r0, r2
   15c6a:	9104      	str	r1, [sp, #16]
   15c6c:	f7ff fe22 	bl	158b4 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   15c70:	e7ff      	b.n	15c72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   15c72:	9804      	ldr	r0, [sp, #16]
   15c74:	f000 f830 	bl	15cd8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   15c78:	9003      	str	r0, [sp, #12]
   15c7a:	9102      	str	r1, [sp, #8]
   15c7c:	e7ff      	b.n	15c7e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x20>
   15c7e:	a806      	add	r0, sp, #24
   15c80:	9903      	ldr	r1, [sp, #12]
   15c82:	9a02      	ldr	r2, [sp, #8]
   15c84:	f7ff fec2 	bl	15a0c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   15c88:	9001      	str	r0, [sp, #4]
   15c8a:	e7ff      	b.n	15c8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x2e>
   15c8c:	9801      	ldr	r0, [sp, #4]
   15c8e:	f000 0001 	and.w	r0, r0, #1
   15c92:	f647 71bc 	movw	r1, #32700	; 0x7fbc
   15c96:	f2c0 0102 	movt	r1, #2
   15c9a:	f000 f931 	bl	15f00 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   15c9e:	e7ff      	b.n	15ca0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x42>
   15ca0:	a906      	add	r1, sp, #24
   15ca2:	22cc      	movs	r2, #204	; 0xcc
        new
   15ca4:	9805      	ldr	r0, [sp, #20]
   15ca6:	f009 f8cd 	bl	1ee44 <__aeabi_memcpy>
    }
   15caa:	b03a      	add	sp, #232	; 0xe8
   15cac:	bd80      	pop	{r7, pc}

00015cae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   15cae:	b580      	push	{r7, lr}
   15cb0:	b088      	sub	sp, #32
   15cb2:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   15cb4:	1d01      	adds	r1, r0, #4
   15cb6:	9106      	str	r1, [sp, #24]
   15cb8:	9107      	str	r1, [sp, #28]
   15cba:	9004      	str	r0, [sp, #16]
   15cbc:	9103      	str	r1, [sp, #12]
   15cbe:	e7ff      	b.n	15cc0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x12>
   15cc0:	9804      	ldr	r0, [sp, #16]
   15cc2:	6801      	ldr	r1, [r0, #0]
   15cc4:	9803      	ldr	r0, [sp, #12]
   15cc6:	f000 ffc1 	bl	16c4c <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   15cca:	9002      	str	r0, [sp, #8]
   15ccc:	9101      	str	r1, [sp, #4]
   15cce:	e7ff      	b.n	15cd0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x22>
    }
   15cd0:	9802      	ldr	r0, [sp, #8]
   15cd2:	9901      	ldr	r1, [sp, #4]
   15cd4:	b008      	add	sp, #32
   15cd6:	bd80      	pop	{r7, pc}

00015cd8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   15cd8:	b580      	push	{r7, lr}
   15cda:	b088      	sub	sp, #32
   15cdc:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   15cde:	1d01      	adds	r1, r0, #4
   15ce0:	9106      	str	r1, [sp, #24]
   15ce2:	9107      	str	r1, [sp, #28]
   15ce4:	9004      	str	r0, [sp, #16]
   15ce6:	9103      	str	r1, [sp, #12]
   15ce8:	e7ff      	b.n	15cea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x12>
   15cea:	9804      	ldr	r0, [sp, #16]
   15cec:	6801      	ldr	r1, [r0, #0]
   15cee:	9803      	ldr	r0, [sp, #12]
   15cf0:	f000 ffac 	bl	16c4c <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   15cf4:	9002      	str	r0, [sp, #8]
   15cf6:	9101      	str	r1, [sp, #4]
   15cf8:	e7ff      	b.n	15cfa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x22>
    }
   15cfa:	9802      	ldr	r0, [sp, #8]
   15cfc:	9901      	ldr	r1, [sp, #4]
   15cfe:	b008      	add	sp, #32
   15d00:	bd80      	pop	{r7, pc}

00015d02 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>:
    pub(crate) fn capacity(&self) -> usize {
   15d02:	b580      	push	{r7, lr}
   15d04:	b082      	sub	sp, #8
   15d06:	9001      	str	r0, [sp, #4]
        N::to_usize()
   15d08:	f000 fa26 	bl	16158 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   15d0c:	9000      	str	r0, [sp, #0]
   15d0e:	e7ff      	b.n	15d10 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E+0xe>
    }
   15d10:	9800      	ldr	r0, [sp, #0]
   15d12:	b002      	add	sp, #8
   15d14:	bd80      	pop	{r7, pc}

00015d16 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>:
    pub(crate) fn capacity(&self) -> usize {
   15d16:	b580      	push	{r7, lr}
   15d18:	b082      	sub	sp, #8
   15d1a:	9001      	str	r0, [sp, #4]
        N::to_usize()
   15d1c:	f000 fa34 	bl	16188 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>
   15d20:	9000      	str	r0, [sp, #0]
   15d22:	e7ff      	b.n	15d24 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E+0xe>
    }
   15d24:	9800      	ldr	r0, [sp, #0]
   15d26:	b002      	add	sp, #8
   15d28:	bd80      	pop	{r7, pc}

00015d2a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   15d2a:	b580      	push	{r7, lr}
   15d2c:	b08a      	sub	sp, #40	; 0x28
   15d2e:	9007      	str	r0, [sp, #28]
   15d30:	9108      	str	r1, [sp, #32]
   15d32:	9106      	str	r1, [sp, #24]
   15d34:	9005      	str	r0, [sp, #20]
   15d36:	e7ff      	b.n	15d38 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
            while len < self.len {
   15d38:	9805      	ldr	r0, [sp, #20]
   15d3a:	6801      	ldr	r1, [r0, #0]
   15d3c:	9a06      	ldr	r2, [sp, #24]
   15d3e:	428a      	cmp	r2, r1
   15d40:	d302      	bcc.n	15d48 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1e>
   15d42:	e7ff      	b.n	15d44 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1a>
    }
   15d44:	b00a      	add	sp, #40	; 0x28
   15d46:	bd80      	pop	{r7, pc}
                self.len -= 1;
   15d48:	9805      	ldr	r0, [sp, #20]
   15d4a:	6801      	ldr	r1, [r0, #0]
   15d4c:	1e4a      	subs	r2, r1, #1
   15d4e:	2901      	cmp	r1, #1
   15d50:	9204      	str	r2, [sp, #16]
   15d52:	d314      	bcc.n	15d7e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x54>
   15d54:	e7ff      	b.n	15d56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x2c>
   15d56:	9804      	ldr	r0, [sp, #16]
   15d58:	9905      	ldr	r1, [sp, #20]
   15d5a:	6008      	str	r0, [r1, #0]
                let len = self.len;
   15d5c:	680a      	ldr	r2, [r1, #0]
   15d5e:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   15d60:	4608      	mov	r0, r1
   15d62:	9203      	str	r2, [sp, #12]
   15d64:	f7ff fdd9 	bl	1591a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   15d68:	9002      	str	r0, [sp, #8]
   15d6a:	9101      	str	r1, [sp, #4]
   15d6c:	e7ff      	b.n	15d6e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x44>
   15d6e:	9802      	ldr	r0, [sp, #8]
   15d70:	9901      	ldr	r1, [sp, #4]
   15d72:	9a03      	ldr	r2, [sp, #12]
   15d74:	f000 ff89 	bl	16c8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   15d78:	e7ff      	b.n	15d7a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x50>
   15d7a:	e7ff      	b.n	15d7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x52>
            while len < self.len {
   15d7c:	e7dc      	b.n	15d38 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
                self.len -= 1;
   15d7e:	f647 7050 	movw	r0, #32592	; 0x7f50
   15d82:	f2c0 0002 	movt	r0, #2
   15d86:	f647 72cc 	movw	r2, #32716	; 0x7fcc
   15d8a:	f2c0 0202 	movt	r2, #2
   15d8e:	2121      	movs	r1, #33	; 0x21
   15d90:	f002 fc84 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15d94:	defe      	udf	#254	; 0xfe

00015d96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   15d96:	b580      	push	{r7, lr}
   15d98:	b08a      	sub	sp, #40	; 0x28
   15d9a:	9007      	str	r0, [sp, #28]
   15d9c:	9108      	str	r1, [sp, #32]
   15d9e:	9106      	str	r1, [sp, #24]
   15da0:	9005      	str	r0, [sp, #20]
   15da2:	e7ff      	b.n	15da4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
            while len < self.len {
   15da4:	9805      	ldr	r0, [sp, #20]
   15da6:	6801      	ldr	r1, [r0, #0]
   15da8:	9a06      	ldr	r2, [sp, #24]
   15daa:	428a      	cmp	r2, r1
   15dac:	d302      	bcc.n	15db4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1e>
   15dae:	e7ff      	b.n	15db0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1a>
    }
   15db0:	b00a      	add	sp, #40	; 0x28
   15db2:	bd80      	pop	{r7, pc}
                self.len -= 1;
   15db4:	9805      	ldr	r0, [sp, #20]
   15db6:	6801      	ldr	r1, [r0, #0]
   15db8:	1e4a      	subs	r2, r1, #1
   15dba:	2901      	cmp	r1, #1
   15dbc:	9204      	str	r2, [sp, #16]
   15dbe:	d314      	bcc.n	15dea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x54>
   15dc0:	e7ff      	b.n	15dc2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x2c>
   15dc2:	9804      	ldr	r0, [sp, #16]
   15dc4:	9905      	ldr	r1, [sp, #20]
   15dc6:	6008      	str	r0, [r1, #0]
                let len = self.len;
   15dc8:	680a      	ldr	r2, [r1, #0]
   15dca:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   15dcc:	4608      	mov	r0, r1
   15dce:	9203      	str	r2, [sp, #12]
   15dd0:	f7ff fd8e 	bl	158f0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   15dd4:	9002      	str	r0, [sp, #8]
   15dd6:	9101      	str	r1, [sp, #4]
   15dd8:	e7ff      	b.n	15dda <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x44>
   15dda:	9802      	ldr	r0, [sp, #8]
   15ddc:	9901      	ldr	r1, [sp, #4]
   15dde:	9a03      	ldr	r2, [sp, #12]
   15de0:	f000 ff53 	bl	16c8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   15de4:	e7ff      	b.n	15de6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x50>
   15de6:	e7ff      	b.n	15de8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x52>
            while len < self.len {
   15de8:	e7dc      	b.n	15da4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
                self.len -= 1;
   15dea:	f647 7050 	movw	r0, #32592	; 0x7f50
   15dee:	f2c0 0002 	movt	r0, #2
   15df2:	f647 72cc 	movw	r2, #32716	; 0x7fcc
   15df6:	f2c0 0202 	movt	r2, #2
   15dfa:	2121      	movs	r1, #33	; 0x21
   15dfc:	f002 fc4e 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15e00:	defe      	udf	#254	; 0xfe

00015e02 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>:
   15e02:	b082      	sub	sp, #8
   15e04:	9001      	str	r0, [sp, #4]
   15e06:	8800      	ldrh	r0, [r0, #0]
   15e08:	2800      	cmp	r0, #0
   15e0a:	d004      	beq.n	15e16 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x14>
   15e0c:	e7ff      	b.n	15e0e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0xc>
   15e0e:	2000      	movs	r0, #0
   15e10:	f88d 0003 	strb.w	r0, [sp, #3]
   15e14:	e003      	b.n	15e1e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   15e16:	2001      	movs	r0, #1
   15e18:	f88d 0003 	strb.w	r0, [sp, #3]
   15e1c:	e7ff      	b.n	15e1e <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   15e1e:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15e22:	b002      	add	sp, #8
   15e24:	4770      	bx	lr

00015e26 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>:
   15e26:	b082      	sub	sp, #8
   15e28:	9001      	str	r0, [sp, #4]
   15e2a:	7800      	ldrb	r0, [r0, #0]
   15e2c:	07c0      	lsls	r0, r0, #31
   15e2e:	2800      	cmp	r0, #0
   15e30:	d004      	beq.n	15e3c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x16>
   15e32:	e7ff      	b.n	15e34 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0xe>
   15e34:	2000      	movs	r0, #0
   15e36:	f88d 0003 	strb.w	r0, [sp, #3]
   15e3a:	e003      	b.n	15e44 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   15e3c:	2001      	movs	r0, #1
   15e3e:	f88d 0003 	strb.w	r0, [sp, #3]
   15e42:	e7ff      	b.n	15e44 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   15e44:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15e48:	b002      	add	sp, #8
   15e4a:	4770      	bx	lr

00015e4c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>:
   15e4c:	b510      	push	{r4, lr}
   15e4e:	b08a      	sub	sp, #40	; 0x28
   15e50:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   15e54:	468e      	mov	lr, r1
   15e56:	4604      	mov	r4, r0
   15e58:	f8ad 0014 	strh.w	r0, [sp, #20]
   15e5c:	f8ad 1016 	strh.w	r1, [sp, #22]
   15e60:	9207      	str	r2, [sp, #28]
   15e62:	9308      	str	r3, [sp, #32]
   15e64:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15e68:	4601      	mov	r1, r0
   15e6a:	2800      	cmp	r0, #0
   15e6c:	9304      	str	r3, [sp, #16]
   15e6e:	9203      	str	r2, [sp, #12]
   15e70:	f8cd c008 	str.w	ip, [sp, #8]
   15e74:	d013      	beq.n	15e9e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x52>
   15e76:	e7ff      	b.n	15e78 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x2c>
   15e78:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   15e7c:	f8ad 001a 	strh.w	r0, [sp, #26]
   15e80:	4668      	mov	r0, sp
   15e82:	9902      	ldr	r1, [sp, #8]
   15e84:	6001      	str	r1, [r0, #0]
   15e86:	f647 73ec 	movw	r3, #32748	; 0x7fec
   15e8a:	f2c0 0302 	movt	r3, #2
   15e8e:	f10d 021a 	add.w	r2, sp, #26
   15e92:	9803      	ldr	r0, [sp, #12]
   15e94:	9904      	ldr	r1, [sp, #16]
   15e96:	f002 fbd3 	bl	18640 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15e9a:	defe      	udf	#254	; 0xfe
   15e9c:	defe      	udf	#254	; 0xfe
   15e9e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15ea2:	2800      	cmp	r0, #0
   15ea4:	d102      	bne.n	15eac <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x60>
   15ea6:	e7ff      	b.n	15ea8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>
   15ea8:	b00a      	add	sp, #40	; 0x28
   15eaa:	bd10      	pop	{r4, pc}
   15eac:	e7fc      	b.n	15ea8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>

00015eae <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   15eae:	b580      	push	{r7, lr}
   15eb0:	b08a      	sub	sp, #40	; 0x28
   15eb2:	4684      	mov	ip, r0
   15eb4:	f88d 0017 	strb.w	r0, [sp, #23]
   15eb8:	9107      	str	r1, [sp, #28]
   15eba:	9208      	str	r2, [sp, #32]
   15ebc:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15ec0:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   15ec4:	f1be 0f00 	cmp.w	lr, #0
   15ec8:	9304      	str	r3, [sp, #16]
   15eca:	9203      	str	r2, [sp, #12]
   15ecc:	9102      	str	r1, [sp, #8]
   15ece:	d00e      	beq.n	15eee <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   15ed0:	e7ff      	b.n	15ed2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   15ed2:	4668      	mov	r0, sp
   15ed4:	9904      	ldr	r1, [sp, #16]
   15ed6:	6001      	str	r1, [r0, #0]
   15ed8:	f647 73dc 	movw	r3, #32732	; 0x7fdc
   15edc:	f2c0 0302 	movt	r3, #2
   15ee0:	aa06      	add	r2, sp, #24
   15ee2:	9802      	ldr	r0, [sp, #8]
   15ee4:	9903      	ldr	r1, [sp, #12]
   15ee6:	f002 fbab 	bl	18640 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15eea:	defe      	udf	#254	; 0xfe
   15eec:	defe      	udf	#254	; 0xfe
   15eee:	f89d 0017 	ldrb.w	r0, [sp, #23]
   15ef2:	07c0      	lsls	r0, r0, #31
   15ef4:	2800      	cmp	r0, #0
   15ef6:	d102      	bne.n	15efe <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   15ef8:	e7ff      	b.n	15efa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   15efa:	b00a      	add	sp, #40	; 0x28
   15efc:	bd80      	pop	{r7, pc}
   15efe:	e7fc      	b.n	15efa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

00015f00 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>:
   15f00:	b086      	sub	sp, #24
   15f02:	4602      	mov	r2, r0
   15f04:	f88d 000f 	strb.w	r0, [sp, #15]
   15f08:	f89d 000f 	ldrb.w	r0, [sp, #15]
   15f0c:	07c3      	lsls	r3, r0, #31
   15f0e:	2b00      	cmp	r3, #0
   15f10:	9102      	str	r1, [sp, #8]
   15f12:	d011      	beq.n	15f38 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x38>
   15f14:	e7ff      	b.n	15f16 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x16>
   15f16:	4668      	mov	r0, sp
   15f18:	9902      	ldr	r1, [sp, #8]
   15f1a:	6001      	str	r1, [r0, #0]
   15f1c:	f647 70fc 	movw	r0, #32764	; 0x7ffc
   15f20:	f2c0 0002 	movt	r0, #2
   15f24:	f647 73dc 	movw	r3, #32732	; 0x7fdc
   15f28:	f2c0 0302 	movt	r3, #2
   15f2c:	212b      	movs	r1, #43	; 0x2b
   15f2e:	aa04      	add	r2, sp, #16
   15f30:	f002 fb86 	bl	18640 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15f34:	defe      	udf	#254	; 0xfe
   15f36:	defe      	udf	#254	; 0xfe
   15f38:	f89d 000f 	ldrb.w	r0, [sp, #15]
   15f3c:	07c0      	lsls	r0, r0, #31
   15f3e:	2800      	cmp	r0, #0
   15f40:	d102      	bne.n	15f48 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x48>
   15f42:	e7ff      	b.n	15f44 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>
   15f44:	b006      	add	sp, #24
   15f46:	4770      	bx	lr
   15f48:	e7fc      	b.n	15f44 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>

00015f4a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   15f4a:	b580      	push	{r7, lr}
   15f4c:	b088      	sub	sp, #32
   15f4e:	9001      	str	r0, [sp, #4]
   15f50:	2000      	movs	r0, #0
   15f52:	f88d 0013 	strb.w	r0, [sp, #19]
   15f56:	f88d 0011 	strb.w	r0, [sp, #17]
   15f5a:	f88d 0012 	strb.w	r0, [sp, #18]
   15f5e:	2001      	movs	r0, #1
   15f60:	f88d 0012 	strb.w	r0, [sp, #18]
   15f64:	f88d 0013 	strb.w	r0, [sp, #19]
   15f68:	f88d 0011 	strb.w	r0, [sp, #17]
   15f6c:	9801      	ldr	r0, [sp, #4]
   15f6e:	1e41      	subs	r1, r0, #1
   15f70:	bf18      	it	ne
   15f72:	2101      	movne	r1, #1
   15f74:	2801      	cmp	r0, #1
   15f76:	d00d      	beq.n	15f94 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   15f78:	e7ff      	b.n	15f7a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   15f7a:	2000      	movs	r0, #0
   15f7c:	f88d 0013 	strb.w	r0, [sp, #19]
   15f80:	9901      	ldr	r1, [sp, #4]
   15f82:	9107      	str	r1, [sp, #28]
   15f84:	f88d 0011 	strb.w	r0, [sp, #17]
   15f88:	9103      	str	r1, [sp, #12]
   15f8a:	9803      	ldr	r0, [sp, #12]
   15f8c:	f7f3 fcb2 	bl	98f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   15f90:	e006      	b.n	15fa0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   15f92:	defe      	udf	#254	; 0xfe
   15f94:	2000      	movs	r0, #0
   15f96:	f88d 0012 	strb.w	r0, [sp, #18]
   15f9a:	f88d 000b 	strb.w	r0, [sp, #11]
   15f9e:	e003      	b.n	15fa8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   15fa0:	2001      	movs	r0, #1
   15fa2:	f88d 000b 	strb.w	r0, [sp, #11]
   15fa6:	e7ff      	b.n	15fa8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   15fa8:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15fac:	07c0      	lsls	r0, r0, #31
   15fae:	2800      	cmp	r0, #0
   15fb0:	d104      	bne.n	15fbc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   15fb2:	e7ff      	b.n	15fb4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   15fb4:	9801      	ldr	r0, [sp, #4]
   15fb6:	2801      	cmp	r0, #1
   15fb8:	d008      	beq.n	15fcc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   15fba:	e011      	b.n	15fe0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   15fbc:	2000      	movs	r0, #0
   15fbe:	f88d 0011 	strb.w	r0, [sp, #17]
   15fc2:	e7f7      	b.n	15fb4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   15fc4:	f89d 000b 	ldrb.w	r0, [sp, #11]
   15fc8:	b008      	add	sp, #32
   15fca:	bd80      	pop	{r7, pc}
   15fcc:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15fd0:	07c0      	lsls	r0, r0, #31
   15fd2:	2800      	cmp	r0, #0
   15fd4:	d0f6      	beq.n	15fc4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15fd6:	e7ff      	b.n	15fd8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   15fd8:	2000      	movs	r0, #0
   15fda:	f88d 0012 	strb.w	r0, [sp, #18]
   15fde:	e7f1      	b.n	15fc4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15fe0:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15fe4:	07c0      	lsls	r0, r0, #31
   15fe6:	2800      	cmp	r0, #0
   15fe8:	d0ec      	beq.n	15fc4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15fea:	e7ff      	b.n	15fec <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   15fec:	2000      	movs	r0, #0
   15fee:	f88d 0013 	strb.w	r0, [sp, #19]
   15ff2:	e7e7      	b.n	15fc4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

00015ff4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   15ff4:	b580      	push	{r7, lr}
   15ff6:	b088      	sub	sp, #32
   15ff8:	9001      	str	r0, [sp, #4]
   15ffa:	2000      	movs	r0, #0
   15ffc:	f88d 0013 	strb.w	r0, [sp, #19]
   16000:	f88d 0011 	strb.w	r0, [sp, #17]
   16004:	f88d 0012 	strb.w	r0, [sp, #18]
   16008:	2001      	movs	r0, #1
   1600a:	f88d 0012 	strb.w	r0, [sp, #18]
   1600e:	f88d 0013 	strb.w	r0, [sp, #19]
   16012:	f88d 0011 	strb.w	r0, [sp, #17]
   16016:	9801      	ldr	r0, [sp, #4]
   16018:	1e41      	subs	r1, r0, #1
   1601a:	bf18      	it	ne
   1601c:	2101      	movne	r1, #1
   1601e:	2801      	cmp	r0, #1
   16020:	d00d      	beq.n	1603e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   16022:	e7ff      	b.n	16024 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   16024:	2000      	movs	r0, #0
   16026:	f88d 0013 	strb.w	r0, [sp, #19]
   1602a:	9901      	ldr	r1, [sp, #4]
   1602c:	9107      	str	r1, [sp, #28]
   1602e:	f88d 0011 	strb.w	r0, [sp, #17]
   16032:	9103      	str	r1, [sp, #12]
   16034:	9803      	ldr	r0, [sp, #12]
   16036:	f7f3 fc53 	bl	98e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   1603a:	e006      	b.n	1604a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   1603c:	defe      	udf	#254	; 0xfe
   1603e:	2000      	movs	r0, #0
   16040:	f88d 0012 	strb.w	r0, [sp, #18]
   16044:	f88d 000b 	strb.w	r0, [sp, #11]
   16048:	e003      	b.n	16052 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   1604a:	2001      	movs	r0, #1
   1604c:	f88d 000b 	strb.w	r0, [sp, #11]
   16050:	e7ff      	b.n	16052 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   16052:	f89d 0011 	ldrb.w	r0, [sp, #17]
   16056:	07c0      	lsls	r0, r0, #31
   16058:	2800      	cmp	r0, #0
   1605a:	d104      	bne.n	16066 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   1605c:	e7ff      	b.n	1605e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1605e:	9801      	ldr	r0, [sp, #4]
   16060:	2801      	cmp	r0, #1
   16062:	d008      	beq.n	16076 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   16064:	e011      	b.n	1608a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   16066:	2000      	movs	r0, #0
   16068:	f88d 0011 	strb.w	r0, [sp, #17]
   1606c:	e7f7      	b.n	1605e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1606e:	f89d 000b 	ldrb.w	r0, [sp, #11]
   16072:	b008      	add	sp, #32
   16074:	bd80      	pop	{r7, pc}
   16076:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1607a:	07c0      	lsls	r0, r0, #31
   1607c:	2800      	cmp	r0, #0
   1607e:	d0f6      	beq.n	1606e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   16080:	e7ff      	b.n	16082 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   16082:	2000      	movs	r0, #0
   16084:	f88d 0012 	strb.w	r0, [sp, #18]
   16088:	e7f1      	b.n	1606e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   1608a:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1608e:	07c0      	lsls	r0, r0, #31
   16090:	2800      	cmp	r0, #0
   16092:	d0ec      	beq.n	1606e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   16094:	e7ff      	b.n	16096 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   16096:	2000      	movs	r0, #0
   16098:	f88d 0013 	strb.w	r0, [sp, #19]
   1609c:	e7e7      	b.n	1606e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

0001609e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   1609e:	b580      	push	{r7, lr}
   160a0:	b088      	sub	sp, #32
   160a2:	9001      	str	r0, [sp, #4]
   160a4:	2000      	movs	r0, #0
   160a6:	f88d 0013 	strb.w	r0, [sp, #19]
   160aa:	f88d 0011 	strb.w	r0, [sp, #17]
   160ae:	f88d 0012 	strb.w	r0, [sp, #18]
   160b2:	2001      	movs	r0, #1
   160b4:	f88d 0012 	strb.w	r0, [sp, #18]
   160b8:	f88d 0013 	strb.w	r0, [sp, #19]
   160bc:	f88d 0011 	strb.w	r0, [sp, #17]
   160c0:	9801      	ldr	r0, [sp, #4]
   160c2:	1e41      	subs	r1, r0, #1
   160c4:	bf18      	it	ne
   160c6:	2101      	movne	r1, #1
   160c8:	2801      	cmp	r0, #1
   160ca:	d00d      	beq.n	160e8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   160cc:	e7ff      	b.n	160ce <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   160ce:	2000      	movs	r0, #0
   160d0:	f88d 0013 	strb.w	r0, [sp, #19]
   160d4:	9901      	ldr	r1, [sp, #4]
   160d6:	9107      	str	r1, [sp, #28]
   160d8:	f88d 0011 	strb.w	r0, [sp, #17]
   160dc:	9103      	str	r1, [sp, #12]
   160de:	9803      	ldr	r0, [sp, #12]
   160e0:	f7f3 fc03 	bl	98ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   160e4:	e006      	b.n	160f4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   160e6:	defe      	udf	#254	; 0xfe
   160e8:	2000      	movs	r0, #0
   160ea:	f88d 0012 	strb.w	r0, [sp, #18]
   160ee:	f88d 000b 	strb.w	r0, [sp, #11]
   160f2:	e003      	b.n	160fc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   160f4:	2001      	movs	r0, #1
   160f6:	f88d 000b 	strb.w	r0, [sp, #11]
   160fa:	e7ff      	b.n	160fc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   160fc:	f89d 0011 	ldrb.w	r0, [sp, #17]
   16100:	07c0      	lsls	r0, r0, #31
   16102:	2800      	cmp	r0, #0
   16104:	d104      	bne.n	16110 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   16106:	e7ff      	b.n	16108 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   16108:	9801      	ldr	r0, [sp, #4]
   1610a:	2801      	cmp	r0, #1
   1610c:	d008      	beq.n	16120 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   1610e:	e011      	b.n	16134 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   16110:	2000      	movs	r0, #0
   16112:	f88d 0011 	strb.w	r0, [sp, #17]
   16116:	e7f7      	b.n	16108 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   16118:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1611c:	b008      	add	sp, #32
   1611e:	bd80      	pop	{r7, pc}
   16120:	f89d 0012 	ldrb.w	r0, [sp, #18]
   16124:	07c0      	lsls	r0, r0, #31
   16126:	2800      	cmp	r0, #0
   16128:	d0f6      	beq.n	16118 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1612a:	e7ff      	b.n	1612c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   1612c:	2000      	movs	r0, #0
   1612e:	f88d 0012 	strb.w	r0, [sp, #18]
   16132:	e7f1      	b.n	16118 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   16134:	f89d 0013 	ldrb.w	r0, [sp, #19]
   16138:	07c0      	lsls	r0, r0, #31
   1613a:	2800      	cmp	r0, #0
   1613c:	d0ec      	beq.n	16118 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1613e:	e7ff      	b.n	16140 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   16140:	2000      	movs	r0, #0
   16142:	f88d 0013 	strb.w	r0, [sp, #19]
   16146:	e7e7      	b.n	16118 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

00016148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   16148:	b082      	sub	sp, #8
   1614a:	2001      	movs	r0, #1
   1614c:	f88d 0003 	strb.w	r0, [sp, #3]
   16150:	f89d 0003 	ldrb.w	r0, [sp, #3]
   16154:	b002      	add	sp, #8
   16156:	4770      	bx	lr

00016158 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   16158:	b580      	push	{r7, lr}
   1615a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1615c:	f002 f840 	bl	181e0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   16160:	9003      	str	r0, [sp, #12]
   16162:	e7ff      	b.n	16164 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0xc>
   16164:	9803      	ldr	r0, [sp, #12]
   16166:	f002 f8a1 	bl	182ac <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1616a:	9002      	str	r0, [sp, #8]
   1616c:	e7ff      	b.n	1616e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x16>
   1616e:	f000 f823 	bl	161b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>
   16172:	9001      	str	r0, [sp, #4]
   16174:	e7ff      	b.n	16176 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x1e>
   16176:	9801      	ldr	r0, [sp, #4]
   16178:	0041      	lsls	r1, r0, #1
   1617a:	9100      	str	r1, [sp, #0]
   1617c:	e7ff      	b.n	1617e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x26>
   1617e:	9802      	ldr	r0, [sp, #8]
   16180:	9900      	ldr	r1, [sp, #0]
   16182:	4308      	orrs	r0, r1
    }
   16184:	b004      	add	sp, #16
   16186:	bd80      	pop	{r7, pc}

00016188 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>:
    fn to_usize() -> usize {
   16188:	b580      	push	{r7, lr}
   1618a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1618c:	f002 f828 	bl	181e0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   16190:	9003      	str	r0, [sp, #12]
   16192:	e7ff      	b.n	16194 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0xc>
   16194:	9803      	ldr	r0, [sp, #12]
   16196:	f002 f889 	bl	182ac <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1619a:	9002      	str	r0, [sp, #8]
   1619c:	e7ff      	b.n	1619e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x16>
   1619e:	f7ff ffdb 	bl	16158 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   161a2:	9001      	str	r0, [sp, #4]
   161a4:	e7ff      	b.n	161a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x1e>
   161a6:	9801      	ldr	r0, [sp, #4]
   161a8:	0041      	lsls	r1, r0, #1
   161aa:	9100      	str	r1, [sp, #0]
   161ac:	e7ff      	b.n	161ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x26>
   161ae:	9802      	ldr	r0, [sp, #8]
   161b0:	9900      	ldr	r1, [sp, #0]
   161b2:	4308      	orrs	r0, r1
    }
   161b4:	b004      	add	sp, #16
   161b6:	bd80      	pop	{r7, pc}

000161b8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>:
    fn to_usize() -> usize {
   161b8:	b580      	push	{r7, lr}
   161ba:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   161bc:	f002 f812 	bl	181e4 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   161c0:	9003      	str	r0, [sp, #12]
   161c2:	e7ff      	b.n	161c4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0xc>
   161c4:	9803      	ldr	r0, [sp, #12]
   161c6:	f002 f871 	bl	182ac <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   161ca:	9002      	str	r0, [sp, #8]
   161cc:	e7ff      	b.n	161ce <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x16>
   161ce:	f000 f83b 	bl	16248 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>
   161d2:	9001      	str	r0, [sp, #4]
   161d4:	e7ff      	b.n	161d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x1e>
   161d6:	9801      	ldr	r0, [sp, #4]
   161d8:	0041      	lsls	r1, r0, #1
   161da:	9100      	str	r1, [sp, #0]
   161dc:	e7ff      	b.n	161de <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x26>
   161de:	9802      	ldr	r0, [sp, #8]
   161e0:	9900      	ldr	r1, [sp, #0]
   161e2:	4308      	orrs	r0, r1
    }
   161e4:	b004      	add	sp, #16
   161e6:	bd80      	pop	{r7, pc}

000161e8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>:
    fn to_usize() -> usize {
   161e8:	b580      	push	{r7, lr}
   161ea:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   161ec:	f001 fff8 	bl	181e0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   161f0:	9003      	str	r0, [sp, #12]
   161f2:	e7ff      	b.n	161f4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0xc>
   161f4:	9803      	ldr	r0, [sp, #12]
   161f6:	f002 f859 	bl	182ac <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   161fa:	9002      	str	r0, [sp, #8]
   161fc:	e7ff      	b.n	161fe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x16>
   161fe:	f000 f80b 	bl	16218 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>
   16202:	9001      	str	r0, [sp, #4]
   16204:	e7ff      	b.n	16206 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x1e>
   16206:	9801      	ldr	r0, [sp, #4]
   16208:	0041      	lsls	r1, r0, #1
   1620a:	9100      	str	r1, [sp, #0]
   1620c:	e7ff      	b.n	1620e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x26>
   1620e:	9802      	ldr	r0, [sp, #8]
   16210:	9900      	ldr	r1, [sp, #0]
   16212:	4308      	orrs	r0, r1
    }
   16214:	b004      	add	sp, #16
   16216:	bd80      	pop	{r7, pc}

00016218 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>:
    fn to_usize() -> usize {
   16218:	b580      	push	{r7, lr}
   1621a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1621c:	f001 ffe2 	bl	181e4 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   16220:	9003      	str	r0, [sp, #12]
   16222:	e7ff      	b.n	16224 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0xc>
   16224:	9803      	ldr	r0, [sp, #12]
   16226:	f002 f841 	bl	182ac <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1622a:	9002      	str	r0, [sp, #8]
   1622c:	e7ff      	b.n	1622e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x16>
   1622e:	f001 ff5f 	bl	180f0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   16232:	9001      	str	r0, [sp, #4]
   16234:	e7ff      	b.n	16236 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x1e>
   16236:	9801      	ldr	r0, [sp, #4]
   16238:	0041      	lsls	r1, r0, #1
   1623a:	9100      	str	r1, [sp, #0]
   1623c:	e7ff      	b.n	1623e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x26>
   1623e:	9802      	ldr	r0, [sp, #8]
   16240:	9900      	ldr	r1, [sp, #0]
   16242:	4308      	orrs	r0, r1
    }
   16244:	b004      	add	sp, #16
   16246:	bd80      	pop	{r7, pc}

00016248 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>:
    fn to_usize() -> usize {
   16248:	b580      	push	{r7, lr}
   1624a:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1624c:	f001 ffc8 	bl	181e0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   16250:	9003      	str	r0, [sp, #12]
   16252:	e7ff      	b.n	16254 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0xc>
   16254:	9803      	ldr	r0, [sp, #12]
   16256:	f002 f829 	bl	182ac <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   1625a:	9002      	str	r0, [sp, #8]
   1625c:	e7ff      	b.n	1625e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x16>
   1625e:	f7ff ffc3 	bl	161e8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>
   16262:	9001      	str	r0, [sp, #4]
   16264:	e7ff      	b.n	16266 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x1e>
   16266:	9801      	ldr	r0, [sp, #4]
   16268:	0041      	lsls	r1, r0, #1
   1626a:	9100      	str	r1, [sp, #0]
   1626c:	e7ff      	b.n	1626e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x26>
   1626e:	9802      	ldr	r0, [sp, #8]
   16270:	9900      	ldr	r1, [sp, #0]
   16272:	4308      	orrs	r0, r1
    }
   16274:	b004      	add	sp, #16
   16276:	bd80      	pop	{r7, pc}

00016278 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>:
pub fn draw_to_display<T>(item: T)
   16278:	b510      	push	{r4, lr}
   1627a:	b088      	sub	sp, #32
   1627c:	a901      	add	r1, sp, #4
        item
   1627e:	460a      	mov	r2, r1
   16280:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
   16284:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
   16288:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
   1628c:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
   16290:	f240 1048 	movw	r0, #328	; 0x148
   16294:	f2c2 0000 	movt	r0, #8192	; 0x2000
   16298:	f000 f819 	bl	162ce <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>
   1629c:	9000      	str	r0, [sp, #0]
   1629e:	e7ff      	b.n	162a0 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x28>
   162a0:	9800      	ldr	r0, [sp, #0]
   162a2:	f000 0001 	and.w	r0, r0, #1
   162a6:	f248 0127 	movw	r1, #32807	; 0x8027
   162aa:	f2c0 0102 	movt	r1, #2
   162ae:	f248 0370 	movw	r3, #32880	; 0x8070
   162b2:	f2c0 0302 	movt	r3, #2
   162b6:	2210      	movs	r2, #16
   162b8:	f7ff fdf9 	bl	15eae <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   162bc:	e7ff      	b.n	162be <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x46>
}
   162be:	b008      	add	sp, #32
   162c0:	bd10      	pop	{r4, pc}

000162c2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>:
   162c2:	b580      	push	{r7, lr}
   162c4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   162c8:	f008 fdbc 	bl	1ee44 <__aeabi_memcpy>
   162cc:	bd80      	pop	{r7, pc}

000162ce <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>:
    pub colors:   BlockColors,
}

/// Draw the pixels in the item as Pixel Blocks of contiguous Pixel Rows. The pixels are grouped by row then by block.
#[allow(dead_code)]
pub fn draw_blocks<SPI, DC, RST, T>(display: &mut ST7735<SPI, DC, RST>, item_pixels: T) -> Result<(),()>
   162ce:	b5b0      	push	{r4, r5, r7, lr}
   162d0:	f5ad 6d48 	sub.w	sp, sp, #3200	; 0xc80
   162d4:	f8cd 0c6c 	str.w	r0, [sp, #3180]	; 0xc6c
   162d8:	aa19      	add	r2, sp, #100	; 0x64
    SPI: spi::Write<u8>,
    DC: OutputPin,
    RST: OutputPin,
    T: IntoIterator<Item = Pixel<Rgb565>>, {
    //  Get the pixels for the item to be rendered.
    let pixels = item_pixels.into_iter();
   162da:	4613      	mov	r3, r2
   162dc:	e8b1 5010 	ldmia.w	r1!, {r4, ip, lr}
   162e0:	e8a3 5010 	stmia.w	r3!, {r4, ip, lr}
   162e4:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
   162e8:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
   162ec:	a910      	add	r1, sp, #64	; 0x40
   162ee:	900e      	str	r0, [sp, #56]	; 0x38
   162f0:	4608      	mov	r0, r1
   162f2:	4611      	mov	r1, r2
   162f4:	f000 fe01 	bl	16efa <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>
   162f8:	e7ff      	b.n	162fa <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x2c>
   162fa:	a810      	add	r0, sp, #64	; 0x40
   162fc:	a945      	add	r1, sp, #276	; 0x114
    //  Batch the pixels into Pixel Rows.
    let rows = to_rows(pixels);
   162fe:	460a      	mov	r2, r1
   16300:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
   16304:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   16308:	e890 5038 	ldmia.w	r0, {r3, r4, r5, ip, lr}
   1630c:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   16310:	a820      	add	r0, sp, #128	; 0x80
   16312:	f000 f8b7 	bl	16484 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>
   16316:	e7ff      	b.n	16318 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x4a>
   16318:	a8a9      	add	r0, sp, #676	; 0x2a4
   1631a:	a920      	add	r1, sp, #128	; 0x80
   1631c:	2294      	movs	r2, #148	; 0x94
    //  Batch the Pixel Rows into Pixel Blocks.
    let blocks = to_blocks(rows);
   1631e:	900d      	str	r0, [sp, #52]	; 0x34
   16320:	f008 fd90 	bl	1ee44 <__aeabi_memcpy>
   16324:	a84e      	add	r0, sp, #312	; 0x138
   16326:	990d      	ldr	r1, [sp, #52]	; 0x34
   16328:	f000 f8db 	bl	164e2 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>
   1632c:	e7ff      	b.n	1632e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x60>
   1632e:	f20d 40a4 	addw	r0, sp, #1188	; 0x4a4
   16332:	a94e      	add	r1, sp, #312	; 0x138
   16334:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    //  For each Pixel Block...
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   16338:	900c      	str	r0, [sp, #48]	; 0x30
   1633a:	f008 fd83 	bl	1ee44 <__aeabi_memcpy>
   1633e:	a8ce      	add	r0, sp, #824	; 0x338
   16340:	990c      	ldr	r1, [sp, #48]	; 0x30
   16342:	f7ff ffbe 	bl	162c2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>
   16346:	e7ff      	b.n	16348 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x7a>
   16348:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
   1634c:	a9ce      	add	r1, sp, #824	; 0x338
   1634e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   16352:	f008 fd77 	bl	1ee44 <__aeabi_memcpy>
   16356:	e7ff      	b.n	16358 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
   16358:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   1635c:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
   16360:	f000 fa2c 	bl	167bc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>
   16364:	e7ff      	b.n	16366 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x98>
   16366:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   1636a:	2800      	cmp	r0, #0
   1636c:	d001      	beq.n	16372 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa4>
   1636e:	e7ff      	b.n	16370 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa2>
   16370:	e005      	b.n	1637e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xb0>
   16372:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   16376:	f7f4 fa98 	bl	a8aa <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   1637a:	e01c      	b.n	163b6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xe8>
   1637c:	defe      	udf	#254	; 0xfe
   1637e:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   16382:	1d01      	adds	r1, r0, #4
   16384:	f60d 1028 	addw	r0, sp, #2344	; 0x928
   16388:	22d4      	movs	r2, #212	; 0xd4
   1638a:	900b      	str	r0, [sp, #44]	; 0x2c
   1638c:	920a      	str	r2, [sp, #40]	; 0x28
   1638e:	f008 fd59 	bl	1ee44 <__aeabi_memcpy>
   16392:	f60d 10fc 	addw	r0, sp, #2556	; 0x9fc
   16396:	9009      	str	r0, [sp, #36]	; 0x24
   16398:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1639a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1639c:	f008 fd52 	bl	1ee44 <__aeabi_memcpy>
   163a0:	f20d 707c 	addw	r0, sp, #1916	; 0x77c
   163a4:	9909      	ldr	r1, [sp, #36]	; 0x24
   163a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   163a8:	f008 fd4c 	bl	1ee44 <__aeabi_memcpy>
   163ac:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   163b0:	2801      	cmp	r0, #1
   163b2:	d02c      	beq.n	1640e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>
   163b4:	e061      	b.n	1647a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x1ac>
   163b6:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
        //  Dump out the Pixel Blocks for the square in test_display()
        /* if x_left >= 60 && x_left <= 150 && x_right >= 60 && x_right <= 150 && y_top >= 60 && y_top <= 150 && y_bottom >= 60 && y_bottom <= 150 {
            console::print("pixel block ("); console::printint(x_left as i32); console::print(", "); console::printint(y_top as i32); ////
            console::print("), ("); console::printint(x_right as i32); console::print(", "); console::printint(y_bottom as i32); console::print(")\n"); ////    
        } */
    }
   163ba:	f7f4 fa53 	bl	a864 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   163be:	e022      	b.n	16406 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x138>
        display.set_pixels(
   163c0:	f89d 0b9f 	ldrb.w	r0, [sp, #2975]	; 0xb9f
   163c4:	f7f2 fc56 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   163c8:	f88d 0b9e 	strb.w	r0, [sp, #2974]	; 0xb9e
   163cc:	e7ff      	b.n	163ce <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x100>
            colors) ? ;
   163ce:	f89d 0b9e 	ldrb.w	r0, [sp, #2974]	; 0xb9e
   163d2:	07c1      	lsls	r1, r0, #31
   163d4:	2900      	cmp	r1, #0
   163d6:	d001      	beq.n	163dc <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10e>
   163d8:	e7ff      	b.n	163da <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10c>
   163da:	e001      	b.n	163e0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x112>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   163dc:	e7bc      	b.n	16358 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
        display.set_pixels(
   163de:	defe      	udf	#254	; 0xfe
            colors) ? ;
   163e0:	f7fc fc0e 	bl	12c00 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   163e4:	e004      	b.n	163f0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x122>
    Ok(())
}
   163e6:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   163ea:	f50d 6d48 	add.w	sp, sp, #3200	; 0xc80
   163ee:	bdb0      	pop	{r4, r5, r7, pc}
            colors) ? ;
   163f0:	f7ff feaa 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   163f4:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   163f8:	e7ff      	b.n	163fa <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x12c>
   163fa:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
    }
   163fe:	f7f4 fa31 	bl	a864 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   16402:	e7ff      	b.n	16404 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x136>
}
   16404:	e7ef      	b.n	163e6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
   16406:	2000      	movs	r0, #0
    Ok(())
   16408:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
}
   1640c:	e7eb      	b.n	163e6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   1640e:	f8bd 0848 	ldrh.w	r0, [sp, #2120]	; 0x848
   16412:	f8ad 0c78 	strh.w	r0, [sp, #3192]	; 0xc78
   16416:	f8bd 184a 	ldrh.w	r1, [sp, #2122]	; 0x84a
   1641a:	f8ad 1c7a 	strh.w	r1, [sp, #3194]	; 0xc7a
   1641e:	f8bd 284c 	ldrh.w	r2, [sp, #2124]	; 0x84c
   16422:	f8ad 2c7c 	strh.w	r2, [sp, #3196]	; 0xc7c
   16426:	f8bd 384e 	ldrh.w	r3, [sp, #2126]	; 0x84e
   1642a:	f8ad 3c7e 	strh.w	r3, [sp, #3198]	; 0xc7e
   1642e:	f50d 6c2d 	add.w	ip, sp, #2768	; 0xad0
   16432:	f20d 7e7c 	addw	lr, sp, #1916	; 0x77c
   16436:	24cc      	movs	r4, #204	; 0xcc
   16438:	9008      	str	r0, [sp, #32]
   1643a:	4660      	mov	r0, ip
   1643c:	9107      	str	r1, [sp, #28]
   1643e:	4671      	mov	r1, lr
   16440:	9206      	str	r2, [sp, #24]
   16442:	4622      	mov	r2, r4
   16444:	9305      	str	r3, [sp, #20]
   16446:	f8cd c010 	str.w	ip, [sp, #16]
   1644a:	9403      	str	r4, [sp, #12]
   1644c:	f008 fcfa 	bl	1ee44 <__aeabi_memcpy>
   16450:	f50d 603a 	add.w	r0, sp, #2976	; 0xba0
            colors) ? ;
   16454:	9002      	str	r0, [sp, #8]
   16456:	9904      	ldr	r1, [sp, #16]
   16458:	9a03      	ldr	r2, [sp, #12]
   1645a:	f008 fcf3 	bl	1ee44 <__aeabi_memcpy>
        display.set_pixels(
   1645e:	4668      	mov	r0, sp
   16460:	9902      	ldr	r1, [sp, #8]
   16462:	6041      	str	r1, [r0, #4]
   16464:	9a05      	ldr	r2, [sp, #20]
   16466:	6002      	str	r2, [r0, #0]
   16468:	980e      	ldr	r0, [sp, #56]	; 0x38
   1646a:	9908      	ldr	r1, [sp, #32]
   1646c:	9a06      	ldr	r2, [sp, #24]
   1646e:	9b07      	ldr	r3, [sp, #28]
   16470:	f7f3 fa45 	bl	98fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>
   16474:	f88d 0b9f 	strb.w	r0, [sp, #2975]	; 0xb9f
   16478:	e7a2      	b.n	163c0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xf2>
   1647a:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   1647e:	f7f4 fa14 	bl	a8aa <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   16482:	e7c4      	b.n	1640e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>

00016484 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>:

/// Batch the pixels into Pixel Rows, which are contiguous pixels on the same row.
/// P can be any Pixel Iterator (e.g. a rectangle).
fn to_rows<P>(pixels: P) -> RowIterator<P>
   16484:	b5b0      	push	{r4, r5, r7, lr}
   16486:	b0a4      	sub	sp, #144	; 0x90
   16488:	aa01      	add	r2, sp, #4
where
    P: Iterator<Item = Pixel<Rgb565>>, {
    RowIterator::<P> {
        pixels,
   1648a:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
   1648e:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   16492:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
   16496:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   1649a:	a90a      	add	r1, sp, #40	; 0x28
        x_left: 0,
        x_right: 0,
        y: 0,
        colors: RowColors::new(),
   1649c:	9000      	str	r0, [sp, #0]
   1649e:	4608      	mov	r0, r1
   164a0:	f7ff f948 	bl	15734 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>
   164a4:	e7ff      	b.n	164a6 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E+0x22>
   164a6:	a801      	add	r0, sp, #4
    RowIterator::<P> {
   164a8:	9900      	ldr	r1, [sp, #0]
   164aa:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
   164ae:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
   164b2:	e890 501c 	ldmia.w	r0, {r2, r3, r4, ip, lr}
   164b6:	e881 501c 	stmia.w	r1, {r2, r3, r4, ip, lr}
   164ba:	2000      	movs	r0, #0
   164bc:	9900      	ldr	r1, [sp, #0]
   164be:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
   164c2:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
   164c6:	f8a1 0090 	strh.w	r0, [r1, #144]	; 0x90
   164ca:	f101 0024 	add.w	r0, r1, #36	; 0x24
   164ce:	a90a      	add	r1, sp, #40	; 0x28
   164d0:	2268      	movs	r2, #104	; 0x68
   164d2:	f008 fcb7 	bl	1ee44 <__aeabi_memcpy>
   164d6:	2001      	movs	r0, #1
   164d8:	9900      	ldr	r1, [sp, #0]
   164da:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
        first_pixel: true,
    }
}
   164de:	b024      	add	sp, #144	; 0x90
   164e0:	bdb0      	pop	{r4, r5, r7, pc}

000164e2 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>:

/// Batch the Pixel Rows into Pixel Blocks, which are contiguous Pixel Rows with the same start and end column number
/// R can be any Pixel Row Iterator.
fn to_blocks<R>(rows: R) -> BlockIterator<R>
   164e2:	b580      	push	{r7, lr}
   164e4:	b0da      	sub	sp, #360	; 0x168
   164e6:	aa02      	add	r2, sp, #8
   164e8:	2394      	movs	r3, #148	; 0x94
where
    R: Iterator<Item = PixelRow>, {
    BlockIterator::<R> {
        rows,
   164ea:	9001      	str	r0, [sp, #4]
   164ec:	4610      	mov	r0, r2
   164ee:	461a      	mov	r2, r3
   164f0:	f008 fca8 	bl	1ee44 <__aeabi_memcpy>
   164f4:	a827      	add	r0, sp, #156	; 0x9c
        x_left: 0,
        x_right: 0,
        y_top: 0,
        y_bottom: 0,
        colors: BlockColors::new(),
   164f6:	f7ff f92c 	bl	15752 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>
   164fa:	e7ff      	b.n	164fc <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E+0x1a>
   164fc:	a902      	add	r1, sp, #8
   164fe:	2294      	movs	r2, #148	; 0x94
    BlockIterator::<R> {
   16500:	9801      	ldr	r0, [sp, #4]
   16502:	f008 fc9f 	bl	1ee44 <__aeabi_memcpy>
   16506:	2000      	movs	r0, #0
   16508:	9901      	ldr	r1, [sp, #4]
   1650a:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
   1650e:	f8a1 0162 	strh.w	r0, [r1, #354]	; 0x162
   16512:	f8a1 0164 	strh.w	r0, [r1, #356]	; 0x164
   16516:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
   1651a:	f101 0094 	add.w	r0, r1, #148	; 0x94
   1651e:	a927      	add	r1, sp, #156	; 0x9c
   16520:	22cc      	movs	r2, #204	; 0xcc
   16522:	f008 fc8f 	bl	1ee44 <__aeabi_memcpy>
   16526:	2001      	movs	r0, #1
   16528:	9901      	ldr	r1, [sp, #4]
   1652a:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
        first_row: true,
    }
}    
   1652e:	b05a      	add	sp, #360	; 0x168
   16530:	bd80      	pop	{r7, pc}

00016532 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>:
impl<P: Iterator<Item = Pixel<Rgb565>>> Iterator for RowIterator<P> {
    /// This Iterator returns Pixel Rows
    type Item = PixelRow;

    /// Return the next Pixel Row of contiguous pixels on the same row
    fn next(&mut self) -> Option<Self::Item> {
   16532:	b580      	push	{r7, lr}
   16534:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
   16538:	91c1      	str	r1, [sp, #772]	; 0x304
        //  Loop over all pixels until we have composed a Pixel Row, or we have run out of pixels.
        loop {
   1653a:	9116      	str	r1, [sp, #88]	; 0x58
   1653c:	9015      	str	r0, [sp, #84]	; 0x54
   1653e:	e7ff      	b.n	16540 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   16540:	a817      	add	r0, sp, #92	; 0x5c
            //  Get the next pixel.
            let next_pixel = self.pixels.next();
   16542:	9916      	ldr	r1, [sp, #88]	; 0x58
   16544:	f000 fd34 	bl	16fb0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>
   16548:	e7ff      	b.n	1654a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x18>
            match next_pixel {
                None => {  //  If no more pixels...
   1654a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1654c:	2800      	cmp	r0, #0
   1654e:	d01c      	beq.n	1658a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x58>
   16550:	e7ff      	b.n	16552 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x20>
                    };
                    self.colors.clear();
                    self.first_pixel = true;
                    return Some(row);
                }
                Some(Pixel(coord, color)) => {  //  If there is a pixel...
   16552:	9818      	ldr	r0, [sp, #96]	; 0x60
   16554:	9919      	ldr	r1, [sp, #100]	; 0x64
   16556:	90c2      	str	r0, [sp, #776]	; 0x308
   16558:	91c3      	str	r1, [sp, #780]	; 0x30c
   1655a:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   1655e:	4613      	mov	r3, r2
   16560:	f8ad 2310 	strh.w	r2, [sp, #784]	; 0x310
                    let x = coord.0 as u16;
   16564:	f8ad 0312 	strh.w	r0, [sp, #786]	; 0x312
                    let y = coord.1 as u16;
   16568:	f8ad 1314 	strh.w	r1, [sp, #788]	; 0x314
                    let color = color.0;
   1656c:	f8ad 2316 	strh.w	r2, [sp, #790]	; 0x316
                    //  Save the first pixel as the row start and handle next pixel.
                    if self.first_pixel {
   16570:	9a16      	ldr	r2, [sp, #88]	; 0x58
   16572:	f892 c092 	ldrb.w	ip, [r2, #146]	; 0x92
   16576:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
   1657a:	f1bc 0f00 	cmp.w	ip, #0
   1657e:	9014      	str	r0, [sp, #80]	; 0x50
   16580:	9113      	str	r1, [sp, #76]	; 0x4c
   16582:	9312      	str	r3, [sp, #72]	; 0x48
   16584:	d156      	bne.n	16634 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x102>
   16586:	e04a      	b.n	1661e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xec>
            match next_pixel {
   16588:	defe      	udf	#254	; 0xfe
                    if self.first_pixel {
   1658a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1658c:	f890 1092 	ldrb.w	r1, [r0, #146]	; 0x92
   16590:	07c9      	lsls	r1, r1, #31
   16592:	2900      	cmp	r1, #0
   16594:	d111      	bne.n	165ba <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x88>
   16596:	e7ff      	b.n	16598 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x66>
                        x_left: self.x_left,
   16598:	9816      	ldr	r0, [sp, #88]	; 0x58
   1659a:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   1659e:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   165a2:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   165a6:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   165aa:	a837      	add	r0, sp, #220	; 0xdc
   165ac:	9111      	str	r1, [sp, #68]	; 0x44
   165ae:	4661      	mov	r1, ip
   165b0:	9210      	str	r2, [sp, #64]	; 0x40
   165b2:	930f      	str	r3, [sp, #60]	; 0x3c
   165b4:	f7ff f827 	bl	15606 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   165b8:	e006      	b.n	165c8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x96>
   165ba:	2000      	movs	r0, #0
                        return None;  //  No pixels to group
   165bc:	9915      	ldr	r1, [sp, #84]	; 0x54
   165be:	6008      	str	r0, [r1, #0]
   165c0:	e7ff      	b.n	165c2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                        .expect("never");
                    return Some(row);
                }
            }
        }
    }
   165c2:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
   165c6:	bd80      	pop	{r7, pc}
                    let row = PixelRow {
   165c8:	9811      	ldr	r0, [sp, #68]	; 0x44
   165ca:	f8ad 00d4 	strh.w	r0, [sp, #212]	; 0xd4
   165ce:	9910      	ldr	r1, [sp, #64]	; 0x40
   165d0:	f8ad 10d6 	strh.w	r1, [sp, #214]	; 0xd6
   165d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   165d6:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
   165da:	a81b      	add	r0, sp, #108	; 0x6c
   165dc:	a937      	add	r1, sp, #220	; 0xdc
   165de:	2268      	movs	r2, #104	; 0x68
   165e0:	f008 fc30 	bl	1ee44 <__aeabi_memcpy>
                    self.colors.clear();
   165e4:	9816      	ldr	r0, [sp, #88]	; 0x58
   165e6:	3024      	adds	r0, #36	; 0x24
   165e8:	f7ff f8d2 	bl	15790 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   165ec:	e7ff      	b.n	165ee <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xbc>
   165ee:	2001      	movs	r0, #1
                    self.first_pixel = true;
   165f0:	9916      	ldr	r1, [sp, #88]	; 0x58
   165f2:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
   165f6:	aa51      	add	r2, sp, #324	; 0x144
   165f8:	a91b      	add	r1, sp, #108	; 0x6c
   165fa:	2370      	movs	r3, #112	; 0x70
                    return Some(row);
   165fc:	900e      	str	r0, [sp, #56]	; 0x38
   165fe:	4610      	mov	r0, r2
   16600:	920d      	str	r2, [sp, #52]	; 0x34
   16602:	461a      	mov	r2, r3
   16604:	930c      	str	r3, [sp, #48]	; 0x30
   16606:	f008 fc1d 	bl	1ee44 <__aeabi_memcpy>
   1660a:	9815      	ldr	r0, [sp, #84]	; 0x54
   1660c:	3004      	adds	r0, #4
   1660e:	990d      	ldr	r1, [sp, #52]	; 0x34
   16610:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16612:	f008 fc17 	bl	1ee44 <__aeabi_memcpy>
   16616:	980e      	ldr	r0, [sp, #56]	; 0x38
   16618:	9915      	ldr	r1, [sp, #84]	; 0x54
   1661a:	6008      	str	r0, [r1, #0]
   1661c:	e7d1      	b.n	165c2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   1661e:	9816      	ldr	r0, [sp, #88]	; 0x58
   16620:	f8b0 108e 	ldrh.w	r1, [r0, #142]	; 0x8e
   16624:	3101      	adds	r1, #1
   16626:	b28a      	uxth	r2, r1
   16628:	460b      	mov	r3, r1
   1662a:	428a      	cmp	r2, r1
   1662c:	930b      	str	r3, [sp, #44]	; 0x2c
   1662e:	f040 80b9 	bne.w	167a4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x272>
   16632:	e040      	b.n	166b6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x184>
   16634:	2000      	movs	r0, #0
                        self.first_pixel = false;
   16636:	9916      	ldr	r1, [sp, #88]	; 0x58
   16638:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
                        self.x_left = x;
   1663c:	9814      	ldr	r0, [sp, #80]	; 0x50
   1663e:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                        self.x_right = x;
   16642:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                        self.y = y;
   16646:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16648:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                        self.colors.clear();
   1664c:	f101 0024 	add.w	r0, r1, #36	; 0x24
   16650:	f7ff f89e 	bl	15790 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   16654:	e7ff      	b.n	16656 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x124>
                        self.colors.push(color)
   16656:	9816      	ldr	r0, [sp, #88]	; 0x58
   16658:	3024      	adds	r0, #36	; 0x24
   1665a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1665c:	f7ff f888 	bl	15770 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   16660:	900a      	str	r0, [sp, #40]	; 0x28
   16662:	9109      	str	r1, [sp, #36]	; 0x24
   16664:	e7ff      	b.n	16666 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x134>
   16666:	f248 00bc 	movw	r0, #32956	; 0x80bc
   1666a:	f2c0 0002 	movt	r0, #2
   1666e:	4669      	mov	r1, sp
   16670:	6008      	str	r0, [r1, #0]
   16672:	f248 0280 	movw	r2, #32896	; 0x8080
   16676:	f2c0 0202 	movt	r2, #2
   1667a:	2305      	movs	r3, #5
   1667c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1667e:	9909      	ldr	r1, [sp, #36]	; 0x24
   16680:	f7ff fbe4 	bl	15e4c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   16684:	e7ff      	b.n	16686 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x154>
                        continue;
   16686:	e7ff      	b.n	16688 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
   16688:	e75a      	b.n	16540 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   1668a:	2001      	movs	r0, #1
                    if x == self.x_right + 1 && y == self.y {
   1668c:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   16690:	e00b      	b.n	166aa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   16692:	2000      	movs	r0, #0
   16694:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   16698:	e007      	b.n	166aa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   1669a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1669c:	f8b0 1090 	ldrh.w	r1, [r0, #144]	; 0x90
   166a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   166a2:	b293      	uxth	r3, r2
   166a4:	428b      	cmp	r3, r1
   166a6:	d0f0      	beq.n	1668a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x158>
   166a8:	e7f3      	b.n	16692 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
   166aa:	f89d 01b7 	ldrb.w	r0, [sp, #439]	; 0x1b7
   166ae:	07c0      	lsls	r0, r0, #31
   166b0:	2800      	cmp	r0, #0
   166b2:	d107      	bne.n	166c4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x192>
   166b4:	e020      	b.n	166f8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
   166b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   166b8:	b281      	uxth	r1, r0
   166ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
   166bc:	b293      	uxth	r3, r2
   166be:	428b      	cmp	r3, r1
   166c0:	d0eb      	beq.n	1669a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x168>
   166c2:	e7e6      	b.n	16692 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
                        if self.colors.push(color).is_ok() {
   166c4:	9816      	ldr	r0, [sp, #88]	; 0x58
   166c6:	3024      	adds	r0, #36	; 0x24
   166c8:	9912      	ldr	r1, [sp, #72]	; 0x48
   166ca:	f7ff f851 	bl	15770 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   166ce:	f8ad 11ba 	strh.w	r1, [sp, #442]	; 0x1ba
   166d2:	f8ad 01b8 	strh.w	r0, [sp, #440]	; 0x1b8
   166d6:	e7ff      	b.n	166d8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1a6>
   166d8:	a86e      	add	r0, sp, #440	; 0x1b8
   166da:	f7ff fb92 	bl	15e02 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>
   166de:	9008      	str	r0, [sp, #32]
   166e0:	e7ff      	b.n	166e2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1b0>
   166e2:	9808      	ldr	r0, [sp, #32]
   166e4:	07c1      	lsls	r1, r0, #31
   166e6:	2900      	cmp	r1, #0
   166e8:	d101      	bne.n	166ee <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1bc>
   166ea:	e7ff      	b.n	166ec <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1ba>
                    if x == self.x_right + 1 && y == self.y {
   166ec:	e004      	b.n	166f8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
                            self.x_right = x;
   166ee:	9814      	ldr	r0, [sp, #80]	; 0x50
   166f0:	9916      	ldr	r1, [sp, #88]	; 0x58
   166f2:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                            continue;
   166f6:	e7c7      	b.n	16688 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
                        x_left: self.x_left,
   166f8:	9816      	ldr	r0, [sp, #88]	; 0x58
   166fa:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   166fe:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   16702:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   16706:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   1670a:	a88b      	add	r0, sp, #556	; 0x22c
   1670c:	9107      	str	r1, [sp, #28]
   1670e:	4661      	mov	r1, ip
   16710:	9206      	str	r2, [sp, #24]
   16712:	9305      	str	r3, [sp, #20]
   16714:	f7fe ff77 	bl	15606 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   16718:	e7ff      	b.n	1671a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1e8>
                    let row = PixelRow {
   1671a:	9807      	ldr	r0, [sp, #28]
   1671c:	f8ad 0224 	strh.w	r0, [sp, #548]	; 0x224
   16720:	9906      	ldr	r1, [sp, #24]
   16722:	f8ad 1226 	strh.w	r1, [sp, #550]	; 0x226
   16726:	9a05      	ldr	r2, [sp, #20]
   16728:	f8ad 2228 	strh.w	r2, [sp, #552]	; 0x228
   1672c:	a86f      	add	r0, sp, #444	; 0x1bc
   1672e:	a98b      	add	r1, sp, #556	; 0x22c
   16730:	2268      	movs	r2, #104	; 0x68
   16732:	f008 fb87 	bl	1ee44 <__aeabi_memcpy>
                    self.x_left = x;
   16736:	9814      	ldr	r0, [sp, #80]	; 0x50
   16738:	9916      	ldr	r1, [sp, #88]	; 0x58
   1673a:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                    self.x_right = x;
   1673e:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                    self.y = y;
   16742:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16744:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                    self.colors.clear();
   16748:	f101 0024 	add.w	r0, r1, #36	; 0x24
   1674c:	f7ff f820 	bl	15790 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   16750:	e7ff      	b.n	16752 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x220>
                    self.colors.push(color)
   16752:	9816      	ldr	r0, [sp, #88]	; 0x58
   16754:	3024      	adds	r0, #36	; 0x24
   16756:	9912      	ldr	r1, [sp, #72]	; 0x48
   16758:	f7ff f80a 	bl	15770 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   1675c:	9004      	str	r0, [sp, #16]
   1675e:	9103      	str	r1, [sp, #12]
   16760:	e7ff      	b.n	16762 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x230>
   16762:	f248 00fc 	movw	r0, #33020	; 0x80fc
   16766:	f2c0 0002 	movt	r0, #2
   1676a:	4669      	mov	r1, sp
   1676c:	6008      	str	r0, [r1, #0]
   1676e:	f248 0280 	movw	r2, #32896	; 0x8080
   16772:	f2c0 0202 	movt	r2, #2
   16776:	2305      	movs	r3, #5
   16778:	9804      	ldr	r0, [sp, #16]
   1677a:	9903      	ldr	r1, [sp, #12]
   1677c:	f7ff fb66 	bl	15e4c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   16780:	e7ff      	b.n	16782 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x250>
   16782:	a8a5      	add	r0, sp, #660	; 0x294
   16784:	a96f      	add	r1, sp, #444	; 0x1bc
   16786:	2270      	movs	r2, #112	; 0x70
                    return Some(row);
   16788:	9002      	str	r0, [sp, #8]
   1678a:	9201      	str	r2, [sp, #4]
   1678c:	f008 fb5a 	bl	1ee44 <__aeabi_memcpy>
   16790:	9815      	ldr	r0, [sp, #84]	; 0x54
   16792:	3004      	adds	r0, #4
   16794:	9902      	ldr	r1, [sp, #8]
   16796:	9a01      	ldr	r2, [sp, #4]
   16798:	f008 fb54 	bl	1ee44 <__aeabi_memcpy>
   1679c:	2001      	movs	r0, #1
   1679e:	9915      	ldr	r1, [sp, #84]	; 0x54
   167a0:	6008      	str	r0, [r1, #0]
   167a2:	e70e      	b.n	165c2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   167a4:	f248 00e0 	movw	r0, #32992	; 0x80e0
   167a8:	f2c0 0002 	movt	r0, #2
   167ac:	f248 02cc 	movw	r2, #32972	; 0x80cc
   167b0:	f2c0 0202 	movt	r2, #2
   167b4:	211c      	movs	r1, #28
   167b6:	f001 ff71 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   167ba:	defe      	udf	#254	; 0xfe

000167bc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>:
impl<R: Iterator<Item = PixelRow>> Iterator for BlockIterator<R> {
    /// This Iterator returns Pixel Blocks
    type Item = PixelBlock;

    /// Return the next Pixel Block of contiguous Pixel Rows with the same start and end column number
    fn next(&mut self) -> Option<Self::Item> {
   167bc:	b580      	push	{r7, lr}
   167be:	f5ad 6dcb 	sub.w	sp, sp, #1624	; 0x658
   167c2:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c
   167c6:	2200      	movs	r2, #0
        //  Loop over all Pixel Rows until we have composed a Pixel Block, or we have run out of Pixel Rows.
        loop {
   167c8:	f88d 264b 	strb.w	r2, [sp, #1611]	; 0x64b
   167cc:	911f      	str	r1, [sp, #124]	; 0x7c
   167ce:	901e      	str	r0, [sp, #120]	; 0x78
   167d0:	e7ff      	b.n	167d2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   167d2:	2001      	movs	r0, #1
            //  Get the next Pixel Row.
            let next_row = self.rows.next();
   167d4:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   167d8:	a820      	add	r0, sp, #128	; 0x80
   167da:	991f      	ldr	r1, [sp, #124]	; 0x7c
   167dc:	f7ff fea9 	bl	16532 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>
   167e0:	e7ff      	b.n	167e2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x26>
            match next_row {
                None => {  //  If no more Pixel Rows...
   167e2:	9820      	ldr	r0, [sp, #128]	; 0x80
   167e4:	2800      	cmp	r0, #0
   167e6:	d026      	beq.n	16836 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x7a>
   167e8:	e7ff      	b.n	167ea <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e>
   167ea:	a820      	add	r0, sp, #128	; 0x80
                    };
                    self.colors.clear();
                    self.first_row = true;
                    return Some(row);
                }
                Some(PixelRow { x_left, x_right, y, colors, .. }) => {  //  If there is a Pixel Row...
   167ec:	1d01      	adds	r1, r0, #4
   167ee:	f8bd 00ec 	ldrh.w	r0, [sp, #236]	; 0xec
   167f2:	4602      	mov	r2, r0
   167f4:	f8ad 0652 	strh.w	r0, [sp, #1618]	; 0x652
   167f8:	f8bd 00ee 	ldrh.w	r0, [sp, #238]	; 0xee
   167fc:	4603      	mov	r3, r0
   167fe:	f8ad 0654 	strh.w	r0, [sp, #1620]	; 0x654
   16802:	f8bd 00f0 	ldrh.w	r0, [sp, #240]	; 0xf0
   16806:	4684      	mov	ip, r0
   16808:	f8ad 0656 	strh.w	r0, [sp, #1622]	; 0x656
   1680c:	2000      	movs	r0, #0
   1680e:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   16812:	a8da      	add	r0, sp, #872	; 0x368
   16814:	f04f 0e68 	mov.w	lr, #104	; 0x68
   16818:	921d      	str	r2, [sp, #116]	; 0x74
   1681a:	4672      	mov	r2, lr
   1681c:	931c      	str	r3, [sp, #112]	; 0x70
   1681e:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   16822:	f008 fb0f 	bl	1ee44 <__aeabi_memcpy>
                    //  Save the first row as the block start and handle next block.
                    if self.first_row {
   16826:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16828:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   1682c:	07c9      	lsls	r1, r1, #31
   1682e:	2900      	cmp	r1, #0
   16830:	d15a      	bne.n	168e8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x12c>
   16832:	e04e      	b.n	168d2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x116>
            match next_row {
   16834:	defe      	udf	#254	; 0xfe
                    if self.first_row {
   16836:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16838:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   1683c:	07c9      	lsls	r1, r1, #31
   1683e:	2900      	cmp	r1, #0
   16840:	d115      	bne.n	1686e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xb2>
   16842:	e7ff      	b.n	16844 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x88>
                        x_left: self.x_left,
   16844:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16846:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   1684a:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   1684e:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   16852:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   16856:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   1685a:	a872      	add	r0, sp, #456	; 0x1c8
   1685c:	911a      	str	r1, [sp, #104]	; 0x68
   1685e:	4671      	mov	r1, lr
   16860:	9219      	str	r2, [sp, #100]	; 0x64
   16862:	9318      	str	r3, [sp, #96]	; 0x60
   16864:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   16868:	f7fe fedd 	bl	15626 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   1686c:	e003      	b.n	16876 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xba>
   1686e:	2000      	movs	r0, #0
                        return None;  //  No rows to group
   16870:	991e      	ldr	r1, [sp, #120]	; 0x78
   16872:	6008      	str	r0, [r1, #0]
   16874:	e153      	b.n	16b1e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                    let row = PixelBlock {
   16876:	981a      	ldr	r0, [sp, #104]	; 0x68
   16878:	f8ad 01c0 	strh.w	r0, [sp, #448]	; 0x1c0
   1687c:	9919      	ldr	r1, [sp, #100]	; 0x64
   1687e:	f8ad 11c2 	strh.w	r1, [sp, #450]	; 0x1c2
   16882:	9a18      	ldr	r2, [sp, #96]	; 0x60
   16884:	f8ad 21c4 	strh.w	r2, [sp, #452]	; 0x1c4
   16888:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1688a:	f8ad 31c6 	strh.w	r3, [sp, #454]	; 0x1c6
   1688e:	a83d      	add	r0, sp, #244	; 0xf4
   16890:	a972      	add	r1, sp, #456	; 0x1c8
   16892:	22cc      	movs	r2, #204	; 0xcc
   16894:	f008 fad6 	bl	1ee44 <__aeabi_memcpy>
                    self.colors.clear();
   16898:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1689a:	3094      	adds	r0, #148	; 0x94
   1689c:	f7fe ff80 	bl	157a0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   168a0:	e7ff      	b.n	168a2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xe6>
   168a2:	2001      	movs	r0, #1
                    self.first_row = true;
   168a4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   168a6:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   168aa:	aaa5      	add	r2, sp, #660	; 0x294
   168ac:	a93d      	add	r1, sp, #244	; 0xf4
   168ae:	23d4      	movs	r3, #212	; 0xd4
                    return Some(row);
   168b0:	9016      	str	r0, [sp, #88]	; 0x58
   168b2:	4610      	mov	r0, r2
   168b4:	9215      	str	r2, [sp, #84]	; 0x54
   168b6:	461a      	mov	r2, r3
   168b8:	9314      	str	r3, [sp, #80]	; 0x50
   168ba:	f008 fac3 	bl	1ee44 <__aeabi_memcpy>
   168be:	981e      	ldr	r0, [sp, #120]	; 0x78
   168c0:	3004      	adds	r0, #4
   168c2:	9915      	ldr	r1, [sp, #84]	; 0x54
   168c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   168c6:	f008 fabd 	bl	1ee44 <__aeabi_memcpy>
   168ca:	9816      	ldr	r0, [sp, #88]	; 0x58
   168cc:	991e      	ldr	r1, [sp, #120]	; 0x78
   168ce:	6008      	str	r0, [r1, #0]
   168d0:	e125      	b.n	16b1e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                        self.colors.extend_from_slice(&colors)
                            .expect("never");
                        continue;
                    }
                    //  If this row is adjacent to the previous row and same size, add to the block.
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   168d2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   168d4:	f8b0 1166 	ldrh.w	r1, [r0, #358]	; 0x166
   168d8:	3101      	adds	r1, #1
   168da:	b28a      	uxth	r2, r1
   168dc:	460b      	mov	r3, r1
   168de:	428a      	cmp	r2, r1
   168e0:	9313      	str	r3, [sp, #76]	; 0x4c
   168e2:	f040 8128 	bne.w	16b36 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x37a>
   168e6:	e069      	b.n	169bc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x200>
   168e8:	2000      	movs	r0, #0
                        self.first_row = false;
   168ea:	991f      	ldr	r1, [sp, #124]	; 0x7c
   168ec:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
                        self.x_left = x_left;
   168f0:	981d      	ldr	r0, [sp, #116]	; 0x74
   168f2:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                        self.x_right = x_right;
   168f6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   168f8:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                        self.y_top = y;
   168fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   168fe:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                        self.y_bottom = y;
   16902:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                        self.colors.clear();
   16906:	f101 0094 	add.w	r0, r1, #148	; 0x94
   1690a:	f7fe ff49 	bl	157a0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   1690e:	e7ff      	b.n	16910 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x154>
                        self.colors.extend_from_slice(&colors)
   16910:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16912:	f100 0194 	add.w	r1, r0, #148	; 0x94
   16916:	a8da      	add	r0, sp, #872	; 0x368
   16918:	9112      	str	r1, [sp, #72]	; 0x48
   1691a:	f7fe feb4 	bl	15686 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   1691e:	9011      	str	r0, [sp, #68]	; 0x44
   16920:	9110      	str	r1, [sp, #64]	; 0x40
   16922:	e7ff      	b.n	16924 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x168>
   16924:	9812      	ldr	r0, [sp, #72]	; 0x48
   16926:	9911      	ldr	r1, [sp, #68]	; 0x44
   16928:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1692a:	f7fe fef5 	bl	15718 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   1692e:	900f      	str	r0, [sp, #60]	; 0x3c
   16930:	e7ff      	b.n	16932 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x176>
   16932:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16934:	f000 0001 	and.w	r0, r0, #1
   16938:	f248 0180 	movw	r1, #32896	; 0x8080
   1693c:	f2c0 0102 	movt	r1, #2
   16940:	f248 130c 	movw	r3, #33036	; 0x810c
   16944:	f2c0 0302 	movt	r3, #2
   16948:	2205      	movs	r2, #5
   1694a:	f7ff fab0 	bl	15eae <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   1694e:	e7ff      	b.n	16950 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x194>
                        continue;
   16950:	e7ff      	b.n	16952 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
   16952:	a8da      	add	r0, sp, #872	; 0x368
                    self.colors.clear();
                    self.colors.extend_from_slice(&colors)
                        .expect("never");
                    return Some(row);
                }
            }
   16954:	f7f3 ffa1 	bl	a89a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   16958:	e7ff      	b.n	1695a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x19e>
        }
   1695a:	9820      	ldr	r0, [sp, #128]	; 0x80
   1695c:	2801      	cmp	r0, #1
   1695e:	f000 80e2 	beq.w	16b26 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
   16962:	e0e4      	b.n	16b2e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x372>
   16964:	2001      	movs	r0, #1
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   16966:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   1696a:	e00b      	b.n	16984 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   1696c:	2000      	movs	r0, #0
   1696e:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   16972:	e007      	b.n	16984 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   16974:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16976:	f8b0 1162 	ldrh.w	r1, [r0, #354]	; 0x162
   1697a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1697c:	b293      	uxth	r3, r2
   1697e:	428b      	cmp	r3, r1
   16980:	d0f0      	beq.n	16964 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1a8>
   16982:	e7f3      	b.n	1696c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   16984:	f89d 03d1 	ldrb.w	r0, [sp, #977]	; 0x3d1
   16988:	07c0      	lsls	r0, r0, #31
   1698a:	2800      	cmp	r0, #0
   1698c:	d11d      	bne.n	169ca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x20e>
   1698e:	e03f      	b.n	16a10 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
   16990:	2001      	movs	r0, #1
   16992:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   16996:	e00b      	b.n	169b0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   16998:	2000      	movs	r0, #0
   1699a:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   1699e:	e007      	b.n	169b0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   169a0:	981f      	ldr	r0, [sp, #124]	; 0x7c
   169a2:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
   169a6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   169a8:	b293      	uxth	r3, r2
   169aa:	428b      	cmp	r3, r1
   169ac:	d0f0      	beq.n	16990 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1d4>
   169ae:	e7f3      	b.n	16998 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
   169b0:	f89d 03d2 	ldrb.w	r0, [sp, #978]	; 0x3d2
   169b4:	07c0      	lsls	r0, r0, #31
   169b6:	2800      	cmp	r0, #0
   169b8:	d1dc      	bne.n	16974 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b8>
   169ba:	e7d7      	b.n	1696c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   169bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
   169be:	b281      	uxth	r1, r0
   169c0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   169c2:	b293      	uxth	r3, r2
   169c4:	428b      	cmp	r3, r1
   169c6:	d0eb      	beq.n	169a0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1e4>
   169c8:	e7e6      	b.n	16998 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
                        if self.colors.extend_from_slice(&colors).is_ok() {
   169ca:	981f      	ldr	r0, [sp, #124]	; 0x7c
   169cc:	f100 0194 	add.w	r1, r0, #148	; 0x94
   169d0:	a8da      	add	r0, sp, #872	; 0x368
   169d2:	910e      	str	r1, [sp, #56]	; 0x38
   169d4:	f7fe fe57 	bl	15686 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   169d8:	900d      	str	r0, [sp, #52]	; 0x34
   169da:	910c      	str	r1, [sp, #48]	; 0x30
   169dc:	e7ff      	b.n	169de <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x222>
   169de:	980e      	ldr	r0, [sp, #56]	; 0x38
   169e0:	990d      	ldr	r1, [sp, #52]	; 0x34
   169e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   169e4:	f7fe fe98 	bl	15718 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   169e8:	f88d 03d3 	strb.w	r0, [sp, #979]	; 0x3d3
   169ec:	e7ff      	b.n	169ee <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x232>
   169ee:	f20d 30d3 	addw	r0, sp, #979	; 0x3d3
   169f2:	f7ff fa18 	bl	15e26 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>
   169f6:	900b      	str	r0, [sp, #44]	; 0x2c
   169f8:	e7ff      	b.n	169fa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x23e>
   169fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   169fc:	07c1      	lsls	r1, r0, #31
   169fe:	2900      	cmp	r1, #0
   16a00:	d101      	bne.n	16a06 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x24a>
   16a02:	e7ff      	b.n	16a04 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x248>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   16a04:	e004      	b.n	16a10 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
                            self.y_bottom = y;
   16a06:	981b      	ldr	r0, [sp, #108]	; 0x6c
   16a08:	991f      	ldr	r1, [sp, #124]	; 0x7c
   16a0a:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
                            continue;    
   16a0e:	e7a0      	b.n	16952 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
                        x_left: self.x_left,
   16a10:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16a12:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   16a16:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   16a1a:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   16a1e:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   16a22:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   16a26:	f50d 6095 	add.w	r0, sp, #1192	; 0x4a8
   16a2a:	910a      	str	r1, [sp, #40]	; 0x28
   16a2c:	4671      	mov	r1, lr
   16a2e:	9209      	str	r2, [sp, #36]	; 0x24
   16a30:	9308      	str	r3, [sp, #32]
   16a32:	f8cd c01c 	str.w	ip, [sp, #28]
   16a36:	f7fe fdf6 	bl	15626 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   16a3a:	e7ff      	b.n	16a3c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x280>
                    let row = PixelBlock {
   16a3c:	980a      	ldr	r0, [sp, #40]	; 0x28
   16a3e:	f8ad 04a0 	strh.w	r0, [sp, #1184]	; 0x4a0
   16a42:	9909      	ldr	r1, [sp, #36]	; 0x24
   16a44:	f8ad 14a2 	strh.w	r1, [sp, #1186]	; 0x4a2
   16a48:	9a08      	ldr	r2, [sp, #32]
   16a4a:	f8ad 24a4 	strh.w	r2, [sp, #1188]	; 0x4a4
   16a4e:	9b07      	ldr	r3, [sp, #28]
   16a50:	f8ad 34a6 	strh.w	r3, [sp, #1190]	; 0x4a6
   16a54:	a8f5      	add	r0, sp, #980	; 0x3d4
   16a56:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
   16a5a:	22cc      	movs	r2, #204	; 0xcc
   16a5c:	f008 f9f2 	bl	1ee44 <__aeabi_memcpy>
                    self.x_left = x_left;
   16a60:	981d      	ldr	r0, [sp, #116]	; 0x74
   16a62:	991f      	ldr	r1, [sp, #124]	; 0x7c
   16a64:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                    self.x_right = x_right;
   16a68:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   16a6a:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                    self.y_top = y;
   16a6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   16a70:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                    self.y_bottom = y;
   16a74:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                    self.colors.clear();
   16a78:	f101 0094 	add.w	r0, r1, #148	; 0x94
   16a7c:	f7fe fe90 	bl	157a0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   16a80:	e7ff      	b.n	16a82 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2c6>
                    self.colors.extend_from_slice(&colors)
   16a82:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16a84:	f100 0194 	add.w	r1, r0, #148	; 0x94
   16a88:	a8da      	add	r0, sp, #872	; 0x368
   16a8a:	9106      	str	r1, [sp, #24]
   16a8c:	f7fe fdfb 	bl	15686 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   16a90:	9005      	str	r0, [sp, #20]
   16a92:	9104      	str	r1, [sp, #16]
   16a94:	e7ff      	b.n	16a96 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2da>
   16a96:	9806      	ldr	r0, [sp, #24]
   16a98:	9905      	ldr	r1, [sp, #20]
   16a9a:	9a04      	ldr	r2, [sp, #16]
   16a9c:	f7fe fe3c 	bl	15718 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   16aa0:	9003      	str	r0, [sp, #12]
   16aa2:	e7ff      	b.n	16aa4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e8>
   16aa4:	9803      	ldr	r0, [sp, #12]
   16aa6:	f000 0001 	and.w	r0, r0, #1
   16aaa:	f248 0180 	movw	r1, #32896	; 0x8080
   16aae:	f2c0 0102 	movt	r1, #2
   16ab2:	f248 132c 	movw	r3, #33068	; 0x812c
   16ab6:	f2c0 0302 	movt	r3, #2
   16aba:	2205      	movs	r2, #5
   16abc:	f7ff f9f7 	bl	15eae <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   16ac0:	e7ff      	b.n	16ac2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x306>
   16ac2:	f20d 5074 	addw	r0, sp, #1396	; 0x574
   16ac6:	a9f5      	add	r1, sp, #980	; 0x3d4
   16ac8:	22d4      	movs	r2, #212	; 0xd4
                    return Some(row);
   16aca:	9002      	str	r0, [sp, #8]
   16acc:	9201      	str	r2, [sp, #4]
   16ace:	f008 f9b9 	bl	1ee44 <__aeabi_memcpy>
   16ad2:	981e      	ldr	r0, [sp, #120]	; 0x78
   16ad4:	3004      	adds	r0, #4
   16ad6:	9902      	ldr	r1, [sp, #8]
   16ad8:	9a01      	ldr	r2, [sp, #4]
   16ada:	f008 f9b3 	bl	1ee44 <__aeabi_memcpy>
   16ade:	2001      	movs	r0, #1
   16ae0:	991e      	ldr	r1, [sp, #120]	; 0x78
   16ae2:	6008      	str	r0, [r1, #0]
   16ae4:	a8da      	add	r0, sp, #872	; 0x368
            }
   16ae6:	f7f3 fed8 	bl	a89a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   16aea:	e7ff      	b.n	16aec <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x330>
                    return Some(row);
   16aec:	e017      	b.n	16b1e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
   16aee:	2000      	movs	r0, #0
        }
   16af0:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
    }
   16af4:	f50d 6dcb 	add.w	sp, sp, #1624	; 0x658
   16af8:	bd80      	pop	{r7, pc}
        }
   16afa:	f89d 064b 	ldrb.w	r0, [sp, #1611]	; 0x64b
   16afe:	07c0      	lsls	r0, r0, #31
   16b00:	2800      	cmp	r0, #0
   16b02:	d0f4      	beq.n	16aee <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   16b04:	e7ff      	b.n	16b06 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x34a>
   16b06:	2000      	movs	r0, #0
   16b08:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   16b0c:	a820      	add	r0, sp, #128	; 0x80
   16b0e:	3004      	adds	r0, #4
   16b10:	f7f3 fec3 	bl	a89a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   16b14:	e7eb      	b.n	16aee <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   16b16:	a820      	add	r0, sp, #128	; 0x80
   16b18:	f7f3 fe84 	bl	a824 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   16b1c:	e7e7      	b.n	16aee <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   16b1e:	9820      	ldr	r0, [sp, #128]	; 0x80
   16b20:	2801      	cmp	r0, #1
   16b22:	d0ea      	beq.n	16afa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x33e>
   16b24:	e7f7      	b.n	16b16 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x35a>
   16b26:	2000      	movs	r0, #0
   16b28:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
                        continue;
   16b2c:	e651      	b.n	167d2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   16b2e:	a820      	add	r0, sp, #128	; 0x80
        }
   16b30:	f7f3 fe78 	bl	a824 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   16b34:	e7f7      	b.n	16b26 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   16b36:	f248 00e0 	movw	r0, #32992	; 0x80e0
   16b3a:	f2c0 0002 	movt	r0, #2
   16b3e:	f248 121c 	movw	r2, #33052	; 0x811c
   16b42:	f2c0 0202 	movt	r2, #2
   16b46:	211c      	movs	r1, #28
   16b48:	f001 fda8 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16b4c:	defe      	udf	#254	; 0xfe

00016b4e <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>:
   16b4e:	b081      	sub	sp, #4
   16b50:	9000      	str	r0, [sp, #0]
   16b52:	8800      	ldrh	r0, [r0, #0]
   16b54:	b001      	add	sp, #4
   16b56:	4770      	bx	lr

00016b58 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>:
   16b58:	b580      	push	{r7, lr}
   16b5a:	b08c      	sub	sp, #48	; 0x30
   16b5c:	9009      	str	r0, [sp, #36]	; 0x24
   16b5e:	910a      	str	r1, [sp, #40]	; 0x28
   16b60:	920b      	str	r2, [sp, #44]	; 0x2c
   16b62:	9006      	str	r0, [sp, #24]
   16b64:	4608      	mov	r0, r1
   16b66:	9105      	str	r1, [sp, #20]
   16b68:	4611      	mov	r1, r2
   16b6a:	9204      	str	r2, [sp, #16]
   16b6c:	f000 f89f 	bl	16cae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   16b70:	9003      	str	r0, [sp, #12]
   16b72:	e7ff      	b.n	16b74 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x1c>
   16b74:	9806      	ldr	r0, [sp, #24]
   16b76:	9007      	str	r0, [sp, #28]
   16b78:	9903      	ldr	r1, [sp, #12]
   16b7a:	9108      	str	r1, [sp, #32]
   16b7c:	9807      	ldr	r0, [sp, #28]
   16b7e:	9908      	ldr	r1, [sp, #32]
   16b80:	9a05      	ldr	r2, [sp, #20]
   16b82:	9b04      	ldr	r3, [sp, #16]
   16b84:	f000 f82d 	bl	16be2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>
   16b88:	9002      	str	r0, [sp, #8]
   16b8a:	9101      	str	r1, [sp, #4]
   16b8c:	e7ff      	b.n	16b8e <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x36>
   16b8e:	9802      	ldr	r0, [sp, #8]
   16b90:	9901      	ldr	r1, [sp, #4]
   16b92:	b00c      	add	sp, #48	; 0x30
   16b94:	bd80      	pop	{r7, pc}

00016b96 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>:
   16b96:	b083      	sub	sp, #12
   16b98:	9001      	str	r0, [sp, #4]
   16b9a:	9102      	str	r1, [sp, #8]
   16b9c:	b003      	add	sp, #12
   16b9e:	4770      	bx	lr

00016ba0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>:
   16ba0:	b580      	push	{r7, lr}
   16ba2:	b08a      	sub	sp, #40	; 0x28
   16ba4:	9006      	str	r0, [sp, #24]
   16ba6:	9107      	str	r1, [sp, #28]
   16ba8:	9208      	str	r2, [sp, #32]
   16baa:	9309      	str	r3, [sp, #36]	; 0x24
   16bac:	9005      	str	r0, [sp, #20]
   16bae:	4610      	mov	r0, r2
   16bb0:	9104      	str	r1, [sp, #16]
   16bb2:	4619      	mov	r1, r3
   16bb4:	f000 f864 	bl	16c80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   16bb8:	9003      	str	r0, [sp, #12]
   16bba:	e7ff      	b.n	16bbc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x1c>
   16bbc:	9803      	ldr	r0, [sp, #12]
   16bbe:	9905      	ldr	r1, [sp, #20]
   16bc0:	f000 f96e 	bl	16ea0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   16bc4:	9002      	str	r0, [sp, #8]
   16bc6:	e7ff      	b.n	16bc8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x28>
   16bc8:	9804      	ldr	r0, [sp, #16]
   16bca:	9905      	ldr	r1, [sp, #20]
   16bcc:	1a41      	subs	r1, r0, r1
   16bce:	9802      	ldr	r0, [sp, #8]
   16bd0:	f000 f849 	bl	16c66 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   16bd4:	9001      	str	r0, [sp, #4]
   16bd6:	9100      	str	r1, [sp, #0]
   16bd8:	e7ff      	b.n	16bda <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x3a>
   16bda:	9801      	ldr	r0, [sp, #4]
   16bdc:	9900      	ldr	r1, [sp, #0]
   16bde:	b00a      	add	sp, #40	; 0x28
   16be0:	bd80      	pop	{r7, pc}

00016be2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>:
   16be2:	b580      	push	{r7, lr}
   16be4:	b08c      	sub	sp, #48	; 0x30
   16be6:	9008      	str	r0, [sp, #32]
   16be8:	9109      	str	r1, [sp, #36]	; 0x24
   16bea:	920a      	str	r2, [sp, #40]	; 0x28
   16bec:	930b      	str	r3, [sp, #44]	; 0x2c
   16bee:	4288      	cmp	r0, r1
   16bf0:	9307      	str	r3, [sp, #28]
   16bf2:	9206      	str	r2, [sp, #24]
   16bf4:	9105      	str	r1, [sp, #20]
   16bf6:	9004      	str	r0, [sp, #16]
   16bf8:	d806      	bhi.n	16c08 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x26>
   16bfa:	e7ff      	b.n	16bfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x1a>
   16bfc:	9806      	ldr	r0, [sp, #24]
   16bfe:	9907      	ldr	r1, [sp, #28]
   16c00:	f000 f855 	bl	16cae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   16c04:	9003      	str	r0, [sp, #12]
   16c06:	e004      	b.n	16c12 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x30>
   16c08:	9804      	ldr	r0, [sp, #16]
   16c0a:	9905      	ldr	r1, [sp, #20]
   16c0c:	f002 fcbb 	bl	19586 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16c10:	defe      	udf	#254	; 0xfe
   16c12:	9805      	ldr	r0, [sp, #20]
   16c14:	9903      	ldr	r1, [sp, #12]
   16c16:	4288      	cmp	r0, r1
   16c18:	d809      	bhi.n	16c2e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x4c>
   16c1a:	e7ff      	b.n	16c1c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x3a>
   16c1c:	9804      	ldr	r0, [sp, #16]
   16c1e:	9905      	ldr	r1, [sp, #20]
   16c20:	9a06      	ldr	r2, [sp, #24]
   16c22:	9b07      	ldr	r3, [sp, #28]
   16c24:	f7ff ffbc 	bl	16ba0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>
   16c28:	9002      	str	r0, [sp, #8]
   16c2a:	9101      	str	r1, [sp, #4]
   16c2c:	e00a      	b.n	16c44 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x62>
   16c2e:	9806      	ldr	r0, [sp, #24]
   16c30:	9907      	ldr	r1, [sp, #28]
   16c32:	f000 f83c 	bl	16cae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   16c36:	9000      	str	r0, [sp, #0]
   16c38:	e7ff      	b.n	16c3a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x58>
   16c3a:	9805      	ldr	r0, [sp, #20]
   16c3c:	9900      	ldr	r1, [sp, #0]
   16c3e:	f002 fc80 	bl	19542 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   16c42:	defe      	udf	#254	; 0xfe
   16c44:	9802      	ldr	r0, [sp, #8]
   16c46:	9901      	ldr	r1, [sp, #4]
   16c48:	b00c      	add	sp, #48	; 0x30
   16c4a:	bd80      	pop	{r7, pc}

00016c4c <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>:
   16c4c:	b580      	push	{r7, lr}
   16c4e:	b084      	sub	sp, #16
   16c50:	9002      	str	r0, [sp, #8]
   16c52:	9103      	str	r1, [sp, #12]
   16c54:	f001 fb31 	bl	182ba <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>
   16c58:	9001      	str	r0, [sp, #4]
   16c5a:	9100      	str	r1, [sp, #0]
   16c5c:	e7ff      	b.n	16c5e <_ZN4core5slice14from_raw_parts17h1425df913744b73aE+0x12>
   16c5e:	9801      	ldr	r0, [sp, #4]
   16c60:	9900      	ldr	r1, [sp, #0]
   16c62:	b004      	add	sp, #16
   16c64:	bd80      	pop	{r7, pc}

00016c66 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>:
   16c66:	b580      	push	{r7, lr}
   16c68:	b084      	sub	sp, #16
   16c6a:	9002      	str	r0, [sp, #8]
   16c6c:	9103      	str	r1, [sp, #12]
   16c6e:	f001 fb31 	bl	182d4 <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>
   16c72:	9001      	str	r0, [sp, #4]
   16c74:	9100      	str	r1, [sp, #0]
   16c76:	e7ff      	b.n	16c78 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E+0x12>
   16c78:	9801      	ldr	r0, [sp, #4]
   16c7a:	9900      	ldr	r1, [sp, #0]
   16c7c:	b004      	add	sp, #16
   16c7e:	bd80      	pop	{r7, pc}

00016c80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>:
   16c80:	b082      	sub	sp, #8
   16c82:	9000      	str	r0, [sp, #0]
   16c84:	9101      	str	r1, [sp, #4]
   16c86:	b002      	add	sp, #8
   16c88:	4770      	bx	lr

00016c8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>:
   16c8a:	b580      	push	{r7, lr}
   16c8c:	b086      	sub	sp, #24
   16c8e:	9003      	str	r0, [sp, #12]
   16c90:	9104      	str	r1, [sp, #16]
   16c92:	9205      	str	r2, [sp, #20]
   16c94:	9002      	str	r0, [sp, #8]
   16c96:	4610      	mov	r0, r2
   16c98:	9a02      	ldr	r2, [sp, #8]
   16c9a:	9101      	str	r1, [sp, #4]
   16c9c:	4611      	mov	r1, r2
   16c9e:	9a01      	ldr	r2, [sp, #4]
   16ca0:	f000 f886 	bl	16db0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>
   16ca4:	9000      	str	r0, [sp, #0]
   16ca6:	e7ff      	b.n	16ca8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE+0x1e>
   16ca8:	9800      	ldr	r0, [sp, #0]
   16caa:	b006      	add	sp, #24
   16cac:	bd80      	pop	{r7, pc}

00016cae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>:
   16cae:	b084      	sub	sp, #16
   16cb0:	9002      	str	r0, [sp, #8]
   16cb2:	9103      	str	r1, [sp, #12]
   16cb4:	9000      	str	r0, [sp, #0]
   16cb6:	9101      	str	r1, [sp, #4]
   16cb8:	9801      	ldr	r0, [sp, #4]
   16cba:	b004      	add	sp, #16
   16cbc:	4770      	bx	lr

00016cbe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>:
   16cbe:	b580      	push	{r7, lr}
   16cc0:	b092      	sub	sp, #72	; 0x48
   16cc2:	900e      	str	r0, [sp, #56]	; 0x38
   16cc4:	910f      	str	r1, [sp, #60]	; 0x3c
   16cc6:	9009      	str	r0, [sp, #36]	; 0x24
   16cc8:	9108      	str	r1, [sp, #32]
   16cca:	f000 f83e 	bl	16d4a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>
   16cce:	4601      	mov	r1, r0
   16cd0:	9010      	str	r0, [sp, #64]	; 0x40
   16cd2:	9107      	str	r1, [sp, #28]
   16cd4:	e7ff      	b.n	16cd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x18>
   16cd6:	9807      	ldr	r0, [sp, #28]
   16cd8:	f001 faa7 	bl	1822a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   16cdc:	e7ff      	b.n	16cde <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x20>
   16cde:	e7ff      	b.n	16ce0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x22>
   16ce0:	2002      	movs	r0, #2
   16ce2:	9011      	str	r0, [sp, #68]	; 0x44
   16ce4:	9811      	ldr	r0, [sp, #68]	; 0x44
   16ce6:	9006      	str	r0, [sp, #24]
   16ce8:	e7ff      	b.n	16cea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x2c>
   16cea:	9806      	ldr	r0, [sp, #24]
   16cec:	2800      	cmp	r0, #0
   16cee:	d006      	beq.n	16cfe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x40>
   16cf0:	e7ff      	b.n	16cf2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x34>
   16cf2:	9809      	ldr	r0, [sp, #36]	; 0x24
   16cf4:	9908      	ldr	r1, [sp, #32]
   16cf6:	f7ff ffda 	bl	16cae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   16cfa:	9005      	str	r0, [sp, #20]
   16cfc:	e011      	b.n	16d22 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x64>
   16cfe:	9807      	ldr	r0, [sp, #28]
   16d00:	9909      	ldr	r1, [sp, #36]	; 0x24
   16d02:	9004      	str	r0, [sp, #16]
   16d04:	4608      	mov	r0, r1
   16d06:	9908      	ldr	r1, [sp, #32]
   16d08:	f7ff ffd1 	bl	16cae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   16d0c:	9003      	str	r0, [sp, #12]
   16d0e:	e7ff      	b.n	16d10 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x52>
   16d10:	9804      	ldr	r0, [sp, #16]
   16d12:	9903      	ldr	r1, [sp, #12]
   16d14:	f7fe faa4 	bl	15260 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>
   16d18:	9002      	str	r0, [sp, #8]
   16d1a:	e7ff      	b.n	16d1c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x5e>
   16d1c:	9802      	ldr	r0, [sp, #8]
   16d1e:	900c      	str	r0, [sp, #48]	; 0x30
   16d20:	e006      	b.n	16d30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   16d22:	9807      	ldr	r0, [sp, #28]
   16d24:	9905      	ldr	r1, [sp, #20]
   16d26:	f001 fa5f 	bl	181e8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   16d2a:	900c      	str	r0, [sp, #48]	; 0x30
   16d2c:	e7ff      	b.n	16d2e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x70>
   16d2e:	e7ff      	b.n	16d30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   16d30:	9807      	ldr	r0, [sp, #28]
   16d32:	f000 fc93 	bl	1765c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   16d36:	9001      	str	r0, [sp, #4]
   16d38:	e7ff      	b.n	16d3a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x7c>
   16d3a:	980c      	ldr	r0, [sp, #48]	; 0x30
   16d3c:	9901      	ldr	r1, [sp, #4]
   16d3e:	910a      	str	r1, [sp, #40]	; 0x28
   16d40:	900b      	str	r0, [sp, #44]	; 0x2c
   16d42:	980a      	ldr	r0, [sp, #40]	; 0x28
   16d44:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16d46:	b012      	add	sp, #72	; 0x48
   16d48:	bd80      	pop	{r7, pc}

00016d4a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>:
   16d4a:	b082      	sub	sp, #8
   16d4c:	9000      	str	r0, [sp, #0]
   16d4e:	9101      	str	r1, [sp, #4]
   16d50:	b002      	add	sp, #8
   16d52:	4770      	bx	lr

00016d54 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>:
   16d54:	b580      	push	{r7, lr}
   16d56:	b086      	sub	sp, #24
   16d58:	9003      	str	r0, [sp, #12]
   16d5a:	9104      	str	r1, [sp, #16]
   16d5c:	f7ff ff1b 	bl	16b96 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>
   16d60:	9002      	str	r0, [sp, #8]
   16d62:	9101      	str	r1, [sp, #4]
   16d64:	e7ff      	b.n	16d66 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E+0x12>
   16d66:	9802      	ldr	r0, [sp, #8]
   16d68:	9901      	ldr	r1, [sp, #4]
   16d6a:	b006      	add	sp, #24
   16d6c:	bd80      	pop	{r7, pc}

00016d6e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>:
   16d6e:	b580      	push	{r7, lr}
   16d70:	b088      	sub	sp, #32
   16d72:	9005      	str	r0, [sp, #20]
   16d74:	9106      	str	r1, [sp, #24]
   16d76:	9207      	str	r2, [sp, #28]
   16d78:	9004      	str	r0, [sp, #16]
   16d7a:	4610      	mov	r0, r2
   16d7c:	9a04      	ldr	r2, [sp, #16]
   16d7e:	9103      	str	r1, [sp, #12]
   16d80:	4611      	mov	r1, r2
   16d82:	9a03      	ldr	r2, [sp, #12]
   16d84:	f7ff fee8 	bl	16b58 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>
   16d88:	9002      	str	r0, [sp, #8]
   16d8a:	9101      	str	r1, [sp, #4]
   16d8c:	e7ff      	b.n	16d8e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E+0x20>
   16d8e:	9802      	ldr	r0, [sp, #8]
   16d90:	9901      	ldr	r1, [sp, #4]
   16d92:	b008      	add	sp, #32
   16d94:	bd80      	pop	{r7, pc}

00016d96 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>:
   16d96:	b580      	push	{r7, lr}
   16d98:	b084      	sub	sp, #16
   16d9a:	9002      	str	r0, [sp, #8]
   16d9c:	9103      	str	r1, [sp, #12]
   16d9e:	f7ff ff8e 	bl	16cbe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>
   16da2:	9001      	str	r0, [sp, #4]
   16da4:	9100      	str	r1, [sp, #0]
   16da6:	e7ff      	b.n	16da8 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE+0x12>
   16da8:	9801      	ldr	r0, [sp, #4]
   16daa:	9900      	ldr	r1, [sp, #0]
   16dac:	b004      	add	sp, #16
   16dae:	bd80      	pop	{r7, pc}

00016db0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>:
   16db0:	b580      	push	{r7, lr}
   16db2:	b086      	sub	sp, #24
   16db4:	9003      	str	r0, [sp, #12]
   16db6:	9104      	str	r1, [sp, #16]
   16db8:	9205      	str	r2, [sp, #20]
   16dba:	9002      	str	r0, [sp, #8]
   16dbc:	4608      	mov	r0, r1
   16dbe:	4611      	mov	r1, r2
   16dc0:	f7ff ff5e 	bl	16c80 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   16dc4:	9001      	str	r0, [sp, #4]
   16dc6:	e7ff      	b.n	16dc8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x18>
   16dc8:	9801      	ldr	r0, [sp, #4]
   16dca:	9902      	ldr	r1, [sp, #8]
   16dcc:	f000 f868 	bl	16ea0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   16dd0:	9000      	str	r0, [sp, #0]
   16dd2:	e7ff      	b.n	16dd4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x24>
   16dd4:	9800      	ldr	r0, [sp, #0]
   16dd6:	b006      	add	sp, #24
   16dd8:	bd80      	pop	{r7, pc}

00016dda <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>:
   16dda:	b580      	push	{r7, lr}
   16ddc:	b08e      	sub	sp, #56	; 0x38
   16dde:	9007      	str	r0, [sp, #28]
   16de0:	6801      	ldr	r1, [r0, #0]
   16de2:	9005      	str	r0, [sp, #20]
   16de4:	4608      	mov	r0, r1
   16de6:	f000 fc3f 	bl	17668 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16dea:	9004      	str	r0, [sp, #16]
   16dec:	e7ff      	b.n	16dee <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x14>
   16dee:	9804      	ldr	r0, [sp, #16]
   16df0:	f000 f879 	bl	16ee6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>
   16df4:	e7ff      	b.n	16df6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1c>
   16df6:	e7ff      	b.n	16df8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1e>
   16df8:	2002      	movs	r0, #2
   16dfa:	9008      	str	r0, [sp, #32]
   16dfc:	9808      	ldr	r0, [sp, #32]
   16dfe:	9003      	str	r0, [sp, #12]
   16e00:	e7ff      	b.n	16e02 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x28>
   16e02:	9803      	ldr	r0, [sp, #12]
   16e04:	2800      	cmp	r0, #0
   16e06:	d007      	beq.n	16e18 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   16e08:	e7ff      	b.n	16e0a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x30>
   16e0a:	9805      	ldr	r0, [sp, #20]
   16e0c:	6840      	ldr	r0, [r0, #4]
   16e0e:	f001 fa0c 	bl	1822a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   16e12:	e7ff      	b.n	16e14 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3a>
   16e14:	e7ff      	b.n	16e16 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3c>
   16e16:	e7ff      	b.n	16e18 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   16e18:	9805      	ldr	r0, [sp, #20]
   16e1a:	6800      	ldr	r0, [r0, #0]
   16e1c:	f000 fc24 	bl	17668 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16e20:	9002      	str	r0, [sp, #8]
   16e22:	e7ff      	b.n	16e24 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x4a>
   16e24:	9805      	ldr	r0, [sp, #20]
   16e26:	6841      	ldr	r1, [r0, #4]
   16e28:	9a02      	ldr	r2, [sp, #8]
   16e2a:	428a      	cmp	r2, r1
   16e2c:	d02f      	beq.n	16e8e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xb4>
   16e2e:	e7ff      	b.n	16e30 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x56>
   16e30:	9805      	ldr	r0, [sp, #20]
   16e32:	900a      	str	r0, [sp, #40]	; 0x28
   16e34:	2101      	movs	r1, #1
   16e36:	910b      	str	r1, [sp, #44]	; 0x2c
   16e38:	2102      	movs	r1, #2
   16e3a:	910d      	str	r1, [sp, #52]	; 0x34
   16e3c:	990d      	ldr	r1, [sp, #52]	; 0x34
   16e3e:	2900      	cmp	r1, #0
   16e40:	d015      	beq.n	16e6e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x94>
   16e42:	e7ff      	b.n	16e44 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x6a>
   16e44:	9805      	ldr	r0, [sp, #20]
   16e46:	6800      	ldr	r0, [r0, #0]
   16e48:	f000 fc0e 	bl	17668 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16e4c:	900c      	str	r0, [sp, #48]	; 0x30
   16e4e:	9905      	ldr	r1, [sp, #20]
   16e50:	680a      	ldr	r2, [r1, #0]
   16e52:	9001      	str	r0, [sp, #4]
   16e54:	4610      	mov	r0, r2
   16e56:	f000 fc07 	bl	17668 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16e5a:	2101      	movs	r1, #1
   16e5c:	f000 f837 	bl	16ece <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   16e60:	f000 fbfc 	bl	1765c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   16e64:	9905      	ldr	r1, [sp, #20]
   16e66:	6008      	str	r0, [r1, #0]
   16e68:	9801      	ldr	r0, [sp, #4]
   16e6a:	9009      	str	r0, [sp, #36]	; 0x24
   16e6c:	e00c      	b.n	16e88 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   16e6e:	9805      	ldr	r0, [sp, #20]
   16e70:	6840      	ldr	r0, [r0, #4]
   16e72:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16e76:	f7fe f9fe 	bl	15276 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   16e7a:	9905      	ldr	r1, [sp, #20]
   16e7c:	6048      	str	r0, [r1, #4]
   16e7e:	6808      	ldr	r0, [r1, #0]
   16e80:	f000 fbf2 	bl	17668 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   16e84:	9009      	str	r0, [sp, #36]	; 0x24
   16e86:	e7ff      	b.n	16e88 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   16e88:	9809      	ldr	r0, [sp, #36]	; 0x24
   16e8a:	9000      	str	r0, [sp, #0]
   16e8c:	e002      	b.n	16e94 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xba>
   16e8e:	2000      	movs	r0, #0
   16e90:	9006      	str	r0, [sp, #24]
   16e92:	e002      	b.n	16e9a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   16e94:	9800      	ldr	r0, [sp, #0]
   16e96:	9006      	str	r0, [sp, #24]
   16e98:	e7ff      	b.n	16e9a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   16e9a:	9806      	ldr	r0, [sp, #24]
   16e9c:	b00e      	add	sp, #56	; 0x38
   16e9e:	bd80      	pop	{r7, pc}

00016ea0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>:
   16ea0:	b580      	push	{r7, lr}
   16ea2:	b084      	sub	sp, #16
   16ea4:	9002      	str	r0, [sp, #8]
   16ea6:	9103      	str	r1, [sp, #12]
   16ea8:	f000 f811 	bl	16ece <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   16eac:	9001      	str	r0, [sp, #4]
   16eae:	e7ff      	b.n	16eb0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E+0x10>
   16eb0:	9801      	ldr	r0, [sp, #4]
   16eb2:	b004      	add	sp, #16
   16eb4:	bd80      	pop	{r7, pc}

00016eb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>:
   16eb6:	b580      	push	{r7, lr}
   16eb8:	b084      	sub	sp, #16
   16eba:	460a      	mov	r2, r1
   16ebc:	9002      	str	r0, [sp, #8]
   16ebe:	f8ad 100e 	strh.w	r1, [sp, #14]
   16ec2:	9201      	str	r2, [sp, #4]
   16ec4:	f001 fa34 	bl	18330 <_ZN4core3ptr5write17h147d4643d861e927E>
   16ec8:	e7ff      	b.n	16eca <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E+0x14>
   16eca:	b004      	add	sp, #16
   16ecc:	bd80      	pop	{r7, pc}

00016ece <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>:
   16ece:	b084      	sub	sp, #16
   16ed0:	9001      	str	r0, [sp, #4]
   16ed2:	9102      	str	r1, [sp, #8]
   16ed4:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   16ed8:	9003      	str	r0, [sp, #12]
   16eda:	9803      	ldr	r0, [sp, #12]
   16edc:	9000      	str	r0, [sp, #0]
   16ede:	e7ff      	b.n	16ee0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE+0x12>
   16ee0:	9800      	ldr	r0, [sp, #0]
   16ee2:	b004      	add	sp, #16
   16ee4:	4770      	bx	lr

00016ee6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>:
   16ee6:	b082      	sub	sp, #8
   16ee8:	9001      	str	r0, [sp, #4]
   16eea:	9000      	str	r0, [sp, #0]
   16eec:	e7ff      	b.n	16eee <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE+0x8>
   16eee:	9800      	ldr	r0, [sp, #0]
   16ef0:	fab0 f180 	clz	r1, r0
   16ef4:	0948      	lsrs	r0, r1, #5
   16ef6:	b002      	add	sp, #8
   16ef8:	4770      	bx	lr

00016efa <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   16efa:	b580      	push	{r7, lr}
        (&self).into_iter()
   16efc:	f000 f814 	bl	16f28 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>
   16f00:	e7ff      	b.n	16f02 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E+0x8>
    }
   16f02:	bd80      	pop	{r7, pc}

00016f04 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
    fn fill(mut self, color: Option<C>) -> Self {
   16f04:	b5b0      	push	{r4, r5, r7, lr}
   16f06:	b081      	sub	sp, #4
   16f08:	469c      	mov	ip, r3
   16f0a:	4696      	mov	lr, r2
   16f0c:	f8ad 2000 	strh.w	r2, [sp]
   16f10:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   16f14:	820a      	strh	r2, [r1, #16]
   16f16:	824b      	strh	r3, [r1, #18]
        self
   16f18:	c91c      	ldmia	r1!, {r2, r3, r4}
   16f1a:	c01c      	stmia	r0!, {r2, r3, r4}
   16f1c:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   16f20:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   16f24:	b001      	add	sp, #4
   16f26:	bdb0      	pop	{r4, r5, r7, pc}

00016f28 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   16f28:	b570      	push	{r4, r5, r6, lr}
   16f2a:	b08e      	sub	sp, #56	; 0x38
   16f2c:	910d      	str	r1, [sp, #52]	; 0x34
        RectangleIterator {
            top_left: self.top_left,
   16f2e:	680a      	ldr	r2, [r1, #0]
   16f30:	684b      	ldr	r3, [r1, #4]
            bottom_right: self.bottom_right,
   16f32:	f8d1 c008 	ldr.w	ip, [r1, #8]
   16f36:	f8d1 e00c 	ldr.w	lr, [r1, #12]
            style: self.style,
   16f3a:	8b0c      	ldrh	r4, [r1, #24]
   16f3c:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
   16f40:	690c      	ldr	r4, [r1, #16]
   16f42:	694d      	ldr	r5, [r1, #20]
   16f44:	950b      	str	r5, [sp, #44]	; 0x2c
   16f46:	940a      	str	r4, [sp, #40]	; 0x28
   16f48:	2400      	movs	r4, #0
            x: self.top_left[0],
   16f4a:	9009      	str	r0, [sp, #36]	; 0x24
   16f4c:	4608      	mov	r0, r1
   16f4e:	9108      	str	r1, [sp, #32]
   16f50:	4621      	mov	r1, r4
   16f52:	9207      	str	r2, [sp, #28]
   16f54:	9306      	str	r3, [sp, #24]
   16f56:	f8cd c014 	str.w	ip, [sp, #20]
   16f5a:	f8cd e010 	str.w	lr, [sp, #16]
   16f5e:	f7fb fb29 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16f62:	9003      	str	r0, [sp, #12]
   16f64:	e7ff      	b.n	16f66 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x3e>
   16f66:	9803      	ldr	r0, [sp, #12]
   16f68:	6801      	ldr	r1, [r0, #0]
   16f6a:	2201      	movs	r2, #1
            y: self.top_left[1],
   16f6c:	9808      	ldr	r0, [sp, #32]
   16f6e:	9102      	str	r1, [sp, #8]
   16f70:	4611      	mov	r1, r2
   16f72:	f7fb fb1f 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16f76:	9001      	str	r0, [sp, #4]
   16f78:	e7ff      	b.n	16f7a <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x52>
   16f7a:	9801      	ldr	r0, [sp, #4]
   16f7c:	6801      	ldr	r1, [r0, #0]
        RectangleIterator {
   16f7e:	9a07      	ldr	r2, [sp, #28]
   16f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   16f82:	601a      	str	r2, [r3, #0]
   16f84:	f8dd c018 	ldr.w	ip, [sp, #24]
   16f88:	f8c3 c004 	str.w	ip, [r3, #4]
   16f8c:	f8dd e014 	ldr.w	lr, [sp, #20]
   16f90:	f8c3 e008 	str.w	lr, [r3, #8]
   16f94:	9c04      	ldr	r4, [sp, #16]
   16f96:	60dc      	str	r4, [r3, #12]
   16f98:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   16f9c:	841d      	strh	r5, [r3, #32]
   16f9e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   16fa0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   16fa2:	61de      	str	r6, [r3, #28]
   16fa4:	619d      	str	r5, [r3, #24]
   16fa6:	9d02      	ldr	r5, [sp, #8]
   16fa8:	611d      	str	r5, [r3, #16]
   16faa:	6159      	str	r1, [r3, #20]
        }
    }
   16fac:	b00e      	add	sp, #56	; 0x38
   16fae:	bd70      	pop	{r4, r5, r6, pc}

00016fb0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>:
where
    C: PixelColor,
{
    type Item = Pixel<C>;

    fn next(&mut self) -> Option<Self::Item> {
   16fb0:	b510      	push	{r4, lr}
   16fb2:	b0d2      	sub	sp, #328	; 0x148
   16fb4:	914f      	str	r1, [sp, #316]	; 0x13c
   16fb6:	2200      	movs	r2, #0
        // If entire object is off the top left of the screen or has no border or fill colour,
        // don't render anything
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   16fb8:	902a      	str	r0, [sp, #168]	; 0xa8
   16fba:	4608      	mov	r0, r1
   16fbc:	9129      	str	r1, [sp, #164]	; 0xa4
   16fbe:	4611      	mov	r1, r2
   16fc0:	f7fb faf8 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   16fc4:	9028      	str	r0, [sp, #160]	; 0xa0
   16fc6:	e03c      	b.n	17042 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x92>
   16fc8:	2001      	movs	r0, #1
   16fca:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   16fce:	e009      	b.n	16fe4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
   16fd0:	2000      	movs	r0, #0
   16fd2:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   16fd6:	e005      	b.n	16fe4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   16fd8:	9829      	ldr	r0, [sp, #164]	; 0xa4
   16fda:	301c      	adds	r0, #28
   16fdc:	f7fe fa86 	bl	154ec <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   16fe0:	9027      	str	r0, [sp, #156]	; 0x9c
   16fe2:	e06c      	b.n	170be <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x10e>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   16fe4:	f89d 00af 	ldrb.w	r0, [sp, #175]	; 0xaf
   16fe8:	07c0      	lsls	r0, r0, #31
   16fea:	2800      	cmp	r0, #0
   16fec:	d172      	bne.n	170d4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x124>
   16fee:	e070      	b.n	170d2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x122>
   16ff0:	2001      	movs	r0, #1
   16ff2:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   16ff6:	e00a      	b.n	1700e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
   16ff8:	2000      	movs	r0, #0
   16ffa:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   16ffe:	e006      	b.n	1700e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   17000:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17002:	3008      	adds	r0, #8
   17004:	2100      	movs	r1, #0
   17006:	f7fb fad5 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1700a:	9026      	str	r0, [sp, #152]	; 0x98
   1700c:	e038      	b.n	17080 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xd0>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   1700e:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
   17012:	07c0      	lsls	r0, r0, #31
   17014:	2800      	cmp	r0, #0
   17016:	d1d7      	bne.n	16fc8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   17018:	e7de      	b.n	16fd8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x28>
   1701a:	2001      	movs	r0, #1
   1701c:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   17020:	e009      	b.n	17036 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   17022:	2000      	movs	r0, #0
   17024:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   17028:	e005      	b.n	17036 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   1702a:	2101      	movs	r1, #1
   1702c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1702e:	f7fb fac1 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   17032:	9025      	str	r0, [sp, #148]	; 0x94
   17034:	e00a      	b.n	1704c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x9c>
   17036:	f89d 00b1 	ldrb.w	r0, [sp, #177]	; 0xb1
   1703a:	07c0      	lsls	r0, r0, #31
   1703c:	2800      	cmp	r0, #0
   1703e:	d1df      	bne.n	17000 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x50>
   17040:	e7da      	b.n	16ff8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
   17042:	9828      	ldr	r0, [sp, #160]	; 0xa0
   17044:	6801      	ldr	r1, [r0, #0]
   17046:	2900      	cmp	r1, #0
   17048:	d4e7      	bmi.n	1701a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   1704a:	e7ee      	b.n	1702a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x7a>
   1704c:	9825      	ldr	r0, [sp, #148]	; 0x94
   1704e:	6801      	ldr	r1, [r0, #0]
   17050:	2900      	cmp	r1, #0
   17052:	d4e2      	bmi.n	1701a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   17054:	e7e5      	b.n	17022 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x72>
   17056:	2001      	movs	r0, #1
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   17058:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   1705c:	e00a      	b.n	17074 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   1705e:	2000      	movs	r0, #0
   17060:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   17064:	e006      	b.n	17074 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   17066:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17068:	3008      	adds	r0, #8
   1706a:	2101      	movs	r1, #1
   1706c:	f7fb faa2 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   17070:	9024      	str	r0, [sp, #144]	; 0x90
   17072:	e00a      	b.n	1708a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xda>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   17074:	f89d 00b2 	ldrb.w	r0, [sp, #178]	; 0xb2
   17078:	07c0      	lsls	r0, r0, #31
   1707a:	2800      	cmp	r0, #0
   1707c:	d1b8      	bne.n	16ff0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40>
   1707e:	e7bb      	b.n	16ff8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   17080:	9826      	ldr	r0, [sp, #152]	; 0x98
   17082:	6801      	ldr	r1, [r0, #0]
   17084:	2900      	cmp	r1, #0
   17086:	d4e6      	bmi.n	17056 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   17088:	e7ed      	b.n	17066 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xb6>
   1708a:	9824      	ldr	r0, [sp, #144]	; 0x90
   1708c:	6801      	ldr	r1, [r0, #0]
   1708e:	2900      	cmp	r1, #0
   17090:	d4e1      	bmi.n	17056 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   17092:	e7e4      	b.n	1705e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xae>
   17094:	2001      	movs	r0, #1
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   17096:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   1709a:	e009      	b.n	170b0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   1709c:	2000      	movs	r0, #0
   1709e:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   170a2:	e005      	b.n	170b0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   170a4:	9829      	ldr	r0, [sp, #164]	; 0xa4
   170a6:	3018      	adds	r0, #24
   170a8:	f7fe fa20 	bl	154ec <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   170ac:	9023      	str	r0, [sp, #140]	; 0x8c
   170ae:	e00b      	b.n	170c8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x118>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   170b0:	f89d 00b3 	ldrb.w	r0, [sp, #179]	; 0xb3
   170b4:	07c0      	lsls	r0, r0, #31
   170b6:	2800      	cmp	r0, #0
   170b8:	f47f af86 	bne.w	16fc8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   170bc:	e788      	b.n	16fd0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20>
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   170be:	9827      	ldr	r0, [sp, #156]	; 0x9c
   170c0:	07c1      	lsls	r1, r0, #31
   170c2:	2900      	cmp	r1, #0
   170c4:	d1ee      	bne.n	170a4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xf4>
   170c6:	e7e9      	b.n	1709c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
   170c8:	9823      	ldr	r0, [sp, #140]	; 0x8c
   170ca:	07c1      	lsls	r1, r0, #31
   170cc:	2900      	cmp	r1, #0
   170ce:	d1e1      	bne.n	17094 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xe4>
   170d0:	e7e4      	b.n	1709c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
        {
            return None;
        }

        let pixel = loop {
   170d2:	e012      	b.n	170fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
   170d4:	2000      	movs	r0, #0
            return None;
   170d6:	992a      	ldr	r1, [sp, #168]	; 0xa8
   170d8:	6008      	str	r0, [r1, #0]
   170da:	e7ff      	b.n	170dc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                break out;
            }
        };

        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
    }
   170dc:	b052      	add	sp, #328	; 0x148
   170de:	bd10      	pop	{r4, pc}
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   170e0:	982d      	ldr	r0, [sp, #180]	; 0xb4
   170e2:	992e      	ldr	r1, [sp, #184]	; 0xb8
   170e4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   170e6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   170e8:	934d      	str	r3, [sp, #308]	; 0x134
   170ea:	924c      	str	r2, [sp, #304]	; 0x130
   170ec:	914b      	str	r1, [sp, #300]	; 0x12c
   170ee:	904a      	str	r0, [sp, #296]	; 0x128
   170f0:	a94a      	add	r1, sp, #296	; 0x128
   170f2:	982a      	ldr	r0, [sp, #168]	; 0xa8
   170f4:	f7fe f90c 	bl	15310 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>
   170f8:	e201      	b.n	174fe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x54e>
   170fa:	2000      	movs	r0, #0
            let mut out = None;
   170fc:	9031      	str	r0, [sp, #196]	; 0xc4
            if self.y > self.bottom_right[1] {
   170fe:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17100:	6941      	ldr	r1, [r0, #20]
   17102:	3008      	adds	r0, #8
   17104:	2201      	movs	r2, #1
   17106:	9122      	str	r1, [sp, #136]	; 0x88
   17108:	4611      	mov	r1, r2
   1710a:	f7fb fa53 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1710e:	9021      	str	r0, [sp, #132]	; 0x84
   17110:	e7ff      	b.n	17112 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x162>
   17112:	9821      	ldr	r0, [sp, #132]	; 0x84
   17114:	6801      	ldr	r1, [r0, #0]
   17116:	9a22      	ldr	r2, [sp, #136]	; 0x88
   17118:	428a      	cmp	r2, r1
   1711a:	dc13      	bgt.n	17144 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x194>
   1711c:	e7ff      	b.n	1711e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x16e>
            let border_width = self.style.stroke_width as i32;
   1711e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17120:	f890 1020 	ldrb.w	r1, [r0, #32]
   17124:	460a      	mov	r2, r1
   17126:	9150      	str	r1, [sp, #320]	; 0x140
            let tl = self.top_left;
   17128:	6801      	ldr	r1, [r0, #0]
   1712a:	6843      	ldr	r3, [r0, #4]
   1712c:	9135      	str	r1, [sp, #212]	; 0xd4
   1712e:	9336      	str	r3, [sp, #216]	; 0xd8
            let br = self.bottom_right;
   17130:	6881      	ldr	r1, [r0, #8]
   17132:	68c3      	ldr	r3, [r0, #12]
   17134:	9137      	str	r1, [sp, #220]	; 0xdc
   17136:	9338      	str	r3, [sp, #224]	; 0xe0
            if self.x >= 0 && self.y >= 0 {
   17138:	6901      	ldr	r1, [r0, #16]
   1713a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1713e:	9220      	str	r2, [sp, #128]	; 0x80
   17140:	dc0b      	bgt.n	1715a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1aa>
   17142:	e006      	b.n	17152 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   17144:	2000      	movs	r0, #0
                break None;
   17146:	902d      	str	r0, [sp, #180]	; 0xb4
   17148:	e7ca      	b.n	170e0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
   1714a:	2001      	movs	r0, #1
            if self.x >= 0 && self.y >= 0 {
   1714c:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   17150:	e009      	b.n	17166 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   17152:	2000      	movs	r0, #0
   17154:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   17158:	e005      	b.n	17166 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   1715a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1715c:	6941      	ldr	r1, [r0, #20]
   1715e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   17162:	dcf2      	bgt.n	1714a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x19a>
   17164:	e7f5      	b.n	17152 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   17166:	f89d 00e7 	ldrb.w	r0, [sp, #231]	; 0xe7
   1716a:	07c0      	lsls	r0, r0, #31
   1716c:	2800      	cmp	r0, #0
   1716e:	f000 8182 	beq.w	17476 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
   17172:	e7ff      	b.n	17174 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1c4>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   17174:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17176:	6941      	ldr	r1, [r0, #20]
   17178:	a835      	add	r0, sp, #212	; 0xd4
   1717a:	2201      	movs	r2, #1
   1717c:	911f      	str	r1, [sp, #124]	; 0x7c
   1717e:	4611      	mov	r1, r2
   17180:	f7fb fa18 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   17184:	901e      	str	r0, [sp, #120]	; 0x78
   17186:	e074      	b.n	17272 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2c2>
   17188:	2001      	movs	r0, #1
                if (
   1718a:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   1718e:	e009      	b.n	171a4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
   17190:	2000      	movs	r0, #0
   17192:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   17196:	e005      	b.n	171a4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
                ) && self.style.stroke_color.is_some()
   17198:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1719a:	301c      	adds	r0, #28
   1719c:	f7fe f9d6 	bl	1554c <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   171a0:	901d      	str	r0, [sp, #116]	; 0x74
   171a2:	e104      	b.n	173ae <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3fe>
                if (
   171a4:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
   171a8:	07c0      	lsls	r0, r0, #31
   171aa:	2800      	cmp	r0, #0
   171ac:	f040 810a 	bne.w	173c4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x414>
   171b0:	e103      	b.n	173ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40a>
   171b2:	2001      	movs	r0, #1
   171b4:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   171b8:	e00d      	b.n	171d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
   171ba:	2000      	movs	r0, #0
   171bc:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   171c0:	e009      	b.n	171d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   171c2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   171c4:	6901      	ldr	r1, [r0, #16]
   171c6:	a837      	add	r0, sp, #220	; 0xdc
   171c8:	2200      	movs	r2, #0
   171ca:	911c      	str	r1, [sp, #112]	; 0x70
   171cc:	4611      	mov	r1, r2
   171ce:	f7fb f9f1 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   171d2:	901b      	str	r0, [sp, #108]	; 0x6c
   171d4:	e0d7      	b.n	17386 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3d6>
                if (
   171d6:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
   171da:	07c0      	lsls	r0, r0, #31
   171dc:	2800      	cmp	r0, #0
   171de:	d1db      	bne.n	17198 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e8>
   171e0:	e7d6      	b.n	17190 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
   171e2:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   171e4:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   171e8:	e00d      	b.n	17206 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
   171ea:	2000      	movs	r0, #0
   171ec:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   171f0:	e009      	b.n	17206 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   171f2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   171f4:	6901      	ldr	r1, [r0, #16]
   171f6:	a835      	add	r0, sp, #212	; 0xd4
   171f8:	2200      	movs	r2, #0
   171fa:	911a      	str	r1, [sp, #104]	; 0x68
   171fc:	4611      	mov	r1, r2
   171fe:	f7fb f9d9 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   17202:	9019      	str	r0, [sp, #100]	; 0x64
   17204:	e090      	b.n	17328 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x378>
                if (
   17206:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
   1720a:	07c0      	lsls	r0, r0, #31
   1720c:	2800      	cmp	r0, #0
   1720e:	d1d0      	bne.n	171b2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   17210:	e7d7      	b.n	171c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x212>
   17212:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   17214:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   17218:	e00d      	b.n	17236 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
   1721a:	2000      	movs	r0, #0
   1721c:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   17220:	e009      	b.n	17236 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   17222:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17224:	6941      	ldr	r1, [r0, #20]
   17226:	a837      	add	r0, sp, #220	; 0xdc
   17228:	2201      	movs	r2, #1
   1722a:	9118      	str	r1, [sp, #96]	; 0x60
   1722c:	4611      	mov	r1, r2
   1722e:	f7fb f9c1 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   17232:	9017      	str	r0, [sp, #92]	; 0x5c
   17234:	e04b      	b.n	172ce <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x31e>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   17236:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
   1723a:	07c0      	lsls	r0, r0, #31
   1723c:	2800      	cmp	r0, #0
   1723e:	d1d0      	bne.n	171e2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   17240:	e7d7      	b.n	171f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x242>
   17242:	2001      	movs	r0, #1
   17244:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   17248:	e00d      	b.n	17266 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   1724a:	2000      	movs	r0, #0
   1724c:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   17250:	e009      	b.n	17266 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   17252:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17254:	6941      	ldr	r1, [r0, #20]
   17256:	a835      	add	r0, sp, #212	; 0xd4
   17258:	2201      	movs	r2, #1
   1725a:	9116      	str	r1, [sp, #88]	; 0x58
   1725c:	4611      	mov	r1, r2
   1725e:	f7fb f9a9 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   17262:	9015      	str	r0, [sp, #84]	; 0x54
   17264:	e00b      	b.n	1727e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ce>
   17266:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   1726a:	07c0      	lsls	r0, r0, #31
   1726c:	2800      	cmp	r0, #0
   1726e:	d1d0      	bne.n	17212 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   17270:	e7d7      	b.n	17222 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x272>
   17272:	981e      	ldr	r0, [sp, #120]	; 0x78
   17274:	6801      	ldr	r1, [r0, #0]
   17276:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   17278:	428a      	cmp	r2, r1
   1727a:	daea      	bge.n	17252 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2a2>
   1727c:	e7e5      	b.n	1724a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   1727e:	9815      	ldr	r0, [sp, #84]	; 0x54
   17280:	6801      	ldr	r1, [r0, #0]
   17282:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17284:	188b      	adds	r3, r1, r2
   17286:	469c      	mov	ip, r3
   17288:	428b      	cmp	r3, r1
   1728a:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
   1728e:	f180 8137 	bvs.w	17500 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x550>
   17292:	e7ff      	b.n	17294 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2e4>
   17294:	9816      	ldr	r0, [sp, #88]	; 0x58
   17296:	9914      	ldr	r1, [sp, #80]	; 0x50
   17298:	4288      	cmp	r0, r1
   1729a:	dbd2      	blt.n	17242 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x292>
   1729c:	e7d5      	b.n	1724a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   1729e:	2001      	movs	r0, #1
                || (self.y <= br[1] && self.y > br[1] - border_width)
   172a0:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   172a4:	e00d      	b.n	172c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   172a6:	2000      	movs	r0, #0
   172a8:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   172ac:	e009      	b.n	172c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   172ae:	9829      	ldr	r0, [sp, #164]	; 0xa4
   172b0:	6941      	ldr	r1, [r0, #20]
   172b2:	a837      	add	r0, sp, #220	; 0xdc
   172b4:	2201      	movs	r2, #1
   172b6:	9113      	str	r1, [sp, #76]	; 0x4c
   172b8:	4611      	mov	r1, r2
   172ba:	f7fb f97b 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   172be:	9012      	str	r0, [sp, #72]	; 0x48
   172c0:	e00b      	b.n	172da <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x32a>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   172c2:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   172c6:	07c0      	lsls	r0, r0, #31
   172c8:	2800      	cmp	r0, #0
   172ca:	d1a2      	bne.n	17212 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   172cc:	e7a5      	b.n	1721a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x26a>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   172ce:	9817      	ldr	r0, [sp, #92]	; 0x5c
   172d0:	6801      	ldr	r1, [r0, #0]
   172d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   172d4:	428a      	cmp	r2, r1
   172d6:	ddea      	ble.n	172ae <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2fe>
   172d8:	e7e5      	b.n	172a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   172da:	9812      	ldr	r0, [sp, #72]	; 0x48
   172dc:	6801      	ldr	r1, [r0, #0]
   172de:	9a20      	ldr	r2, [sp, #128]	; 0x80
   172e0:	1a8b      	subs	r3, r1, r2
   172e2:	4291      	cmp	r1, r2
   172e4:	9311      	str	r3, [sp, #68]	; 0x44
   172e6:	f180 8117 	bvs.w	17518 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x568>
   172ea:	e7ff      	b.n	172ec <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x33c>
   172ec:	9813      	ldr	r0, [sp, #76]	; 0x4c
   172ee:	9911      	ldr	r1, [sp, #68]	; 0x44
   172f0:	4288      	cmp	r0, r1
   172f2:	dcd4      	bgt.n	1729e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ee>
   172f4:	e7d7      	b.n	172a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   172f6:	2001      	movs	r0, #1
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   172f8:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   172fc:	e00d      	b.n	1731a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   172fe:	2000      	movs	r0, #0
   17300:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   17304:	e009      	b.n	1731a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   17306:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17308:	6901      	ldr	r1, [r0, #16]
   1730a:	a835      	add	r0, sp, #212	; 0xd4
   1730c:	2200      	movs	r2, #0
   1730e:	9110      	str	r1, [sp, #64]	; 0x40
   17310:	4611      	mov	r1, r2
   17312:	f7fb f94f 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   17316:	900f      	str	r0, [sp, #60]	; 0x3c
   17318:	e00c      	b.n	17334 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x384>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   1731a:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   1731e:	07c0      	lsls	r0, r0, #31
   17320:	2800      	cmp	r0, #0
   17322:	f47f af5e 	bne.w	171e2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   17326:	e760      	b.n	171ea <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x23a>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   17328:	9819      	ldr	r0, [sp, #100]	; 0x64
   1732a:	6801      	ldr	r1, [r0, #0]
   1732c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1732e:	428a      	cmp	r2, r1
   17330:	dae9      	bge.n	17306 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x356>
   17332:	e7e4      	b.n	172fe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   17334:	980f      	ldr	r0, [sp, #60]	; 0x3c
   17336:	6801      	ldr	r1, [r0, #0]
   17338:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1733a:	188b      	adds	r3, r1, r2
   1733c:	469c      	mov	ip, r3
   1733e:	428b      	cmp	r3, r1
   17340:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   17344:	f180 80f4 	bvs.w	17530 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x580>
   17348:	e7ff      	b.n	1734a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x39a>
   1734a:	9810      	ldr	r0, [sp, #64]	; 0x40
   1734c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1734e:	4288      	cmp	r0, r1
   17350:	dbd1      	blt.n	172f6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x346>
   17352:	e7d4      	b.n	172fe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   17354:	2001      	movs	r0, #1
                || (self.x <= br[0] && self.x > br[0] - border_width)
   17356:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   1735a:	e00d      	b.n	17378 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   1735c:	2000      	movs	r0, #0
   1735e:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   17362:	e009      	b.n	17378 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   17364:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17366:	6901      	ldr	r1, [r0, #16]
   17368:	a837      	add	r0, sp, #220	; 0xdc
   1736a:	2200      	movs	r2, #0
   1736c:	910d      	str	r1, [sp, #52]	; 0x34
   1736e:	4611      	mov	r1, r2
   17370:	f7fb f920 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   17374:	900c      	str	r0, [sp, #48]	; 0x30
   17376:	e00c      	b.n	17392 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3e2>
                if (
   17378:	f89d 00ef 	ldrb.w	r0, [sp, #239]	; 0xef
   1737c:	07c0      	lsls	r0, r0, #31
   1737e:	2800      	cmp	r0, #0
   17380:	f47f af17 	bne.w	171b2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   17384:	e719      	b.n	171ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20a>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   17386:	981b      	ldr	r0, [sp, #108]	; 0x6c
   17388:	6801      	ldr	r1, [r0, #0]
   1738a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1738c:	428a      	cmp	r2, r1
   1738e:	dde9      	ble.n	17364 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3b4>
   17390:	e7e4      	b.n	1735c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
   17392:	980c      	ldr	r0, [sp, #48]	; 0x30
   17394:	6801      	ldr	r1, [r0, #0]
   17396:	9a20      	ldr	r2, [sp, #128]	; 0x80
   17398:	1a8b      	subs	r3, r1, r2
   1739a:	4291      	cmp	r1, r2
   1739c:	930b      	str	r3, [sp, #44]	; 0x2c
   1739e:	f180 80d3 	bvs.w	17548 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x598>
   173a2:	e7ff      	b.n	173a4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3f4>
   173a4:	980d      	ldr	r0, [sp, #52]	; 0x34
   173a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   173a8:	4288      	cmp	r0, r1
   173aa:	dcd3      	bgt.n	17354 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3a4>
   173ac:	e7d6      	b.n	1735c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
                if (
   173ae:	981d      	ldr	r0, [sp, #116]	; 0x74
   173b0:	07c1      	lsls	r1, r0, #31
   173b2:	2900      	cmp	r1, #0
   173b4:	f47f aee8 	bne.w	17188 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1d8>
   173b8:	e6ea      	b.n	17190 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
                else if let Some(fill) = self.style.fill_color {
   173ba:	9829      	ldr	r0, [sp, #164]	; 0xa4
   173bc:	8b01      	ldrh	r1, [r0, #24]
   173be:	2901      	cmp	r1, #1
   173c0:	d03b      	beq.n	1743a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48a>
   173c2:	e057      	b.n	17474 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                        self.x,
   173c4:	9829      	ldr	r0, [sp, #164]	; 0xa4
   173c6:	6901      	ldr	r1, [r0, #16]
                        self.y,
   173c8:	6942      	ldr	r2, [r0, #20]
                        self.style.stroke_color.expect("Expected stroke"),
   173ca:	8bc3      	ldrh	r3, [r0, #30]
   173cc:	8b80      	ldrh	r0, [r0, #28]
   173ce:	f248 2c44 	movw	ip, #33348	; 0x8244
   173d2:	f2c0 0c02 	movt	ip, #2
   173d6:	46ee      	mov	lr, sp
   173d8:	f8ce c000 	str.w	ip, [lr]
   173dc:	f248 2c34 	movw	ip, #33332	; 0x8234
   173e0:	f2c0 0c02 	movt	ip, #2
   173e4:	f04f 0e0f 	mov.w	lr, #15
   173e8:	910a      	str	r1, [sp, #40]	; 0x28
   173ea:	4619      	mov	r1, r3
   173ec:	9209      	str	r2, [sp, #36]	; 0x24
   173ee:	4662      	mov	r2, ip
   173f0:	4673      	mov	r3, lr
   173f2:	f7fd ffff 	bl	153f4 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>
   173f6:	9008      	str	r0, [sp, #32]
   173f8:	e7ff      	b.n	173fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x44a>
                    out = Some((
   173fa:	980a      	ldr	r0, [sp, #40]	; 0x28
   173fc:	9040      	str	r0, [sp, #256]	; 0x100
   173fe:	9909      	ldr	r1, [sp, #36]	; 0x24
   17400:	9141      	str	r1, [sp, #260]	; 0x104
   17402:	9a08      	ldr	r2, [sp, #32]
   17404:	f8ad 2108 	strh.w	r2, [sp, #264]	; 0x108
   17408:	9b40      	ldr	r3, [sp, #256]	; 0x100
   1740a:	f8dd c104 	ldr.w	ip, [sp, #260]	; 0x104
   1740e:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
   17412:	f8cd e0fc 	str.w	lr, [sp, #252]	; 0xfc
   17416:	f8cd c0f8 	str.w	ip, [sp, #248]	; 0xf8
   1741a:	933d      	str	r3, [sp, #244]	; 0xf4
   1741c:	2301      	movs	r3, #1
   1741e:	933c      	str	r3, [sp, #240]	; 0xf0
   17420:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   17422:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
   17426:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   1742a:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
   1742c:	9434      	str	r4, [sp, #208]	; 0xd0
   1742e:	f8cd e0cc 	str.w	lr, [sp, #204]	; 0xcc
   17432:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
   17436:	9331      	str	r3, [sp, #196]	; 0xc4
                if (
   17438:	e01c      	b.n	17474 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                else if let Some(fill) = self.style.fill_color {
   1743a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1743c:	8b41      	ldrh	r1, [r0, #26]
   1743e:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
                    out = Some((self.x, self.y, fill));
   17442:	6902      	ldr	r2, [r0, #16]
   17444:	6943      	ldr	r3, [r0, #20]
   17446:	9247      	str	r2, [sp, #284]	; 0x11c
   17448:	9348      	str	r3, [sp, #288]	; 0x120
   1744a:	f8ad 1124 	strh.w	r1, [sp, #292]	; 0x124
   1744e:	9947      	ldr	r1, [sp, #284]	; 0x11c
   17450:	9a48      	ldr	r2, [sp, #288]	; 0x120
   17452:	9b49      	ldr	r3, [sp, #292]	; 0x124
   17454:	9346      	str	r3, [sp, #280]	; 0x118
   17456:	9245      	str	r2, [sp, #276]	; 0x114
   17458:	9144      	str	r1, [sp, #272]	; 0x110
   1745a:	2101      	movs	r1, #1
   1745c:	9143      	str	r1, [sp, #268]	; 0x10c
   1745e:	9943      	ldr	r1, [sp, #268]	; 0x10c
   17460:	9a44      	ldr	r2, [sp, #272]	; 0x110
   17462:	9b45      	ldr	r3, [sp, #276]	; 0x114
   17464:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   17468:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
   1746c:	9333      	str	r3, [sp, #204]	; 0xcc
   1746e:	9232      	str	r2, [sp, #200]	; 0xc8
   17470:	9131      	str	r1, [sp, #196]	; 0xc4
                else if let Some(fill) = self.style.fill_color {
   17472:	e7ff      	b.n	17474 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
            if self.x >= 0 && self.y >= 0 {
   17474:	e7ff      	b.n	17476 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
            self.x += 1;
   17476:	9829      	ldr	r0, [sp, #164]	; 0xa4
   17478:	6901      	ldr	r1, [r0, #16]
   1747a:	1c4a      	adds	r2, r1, #1
   1747c:	4613      	mov	r3, r2
   1747e:	428a      	cmp	r2, r1
   17480:	9307      	str	r3, [sp, #28]
   17482:	d66d      	bvs.n	17560 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5b0>
   17484:	e7ff      	b.n	17486 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4d6>
   17486:	9807      	ldr	r0, [sp, #28]
   17488:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1748a:	6108      	str	r0, [r1, #16]
            if self.x > self.bottom_right[0] {
   1748c:	690a      	ldr	r2, [r1, #16]
   1748e:	f101 0008 	add.w	r0, r1, #8
   17492:	2100      	movs	r1, #0
   17494:	9206      	str	r2, [sp, #24]
   17496:	f7fb f88d 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1749a:	9005      	str	r0, [sp, #20]
   1749c:	e7ff      	b.n	1749e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4ee>
   1749e:	9805      	ldr	r0, [sp, #20]
   174a0:	6801      	ldr	r1, [r0, #0]
   174a2:	9a06      	ldr	r2, [sp, #24]
   174a4:	428a      	cmp	r2, r1
   174a6:	dd16      	ble.n	174d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   174a8:	e7ff      	b.n	174aa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4fa>
   174aa:	2100      	movs	r1, #0
                self.x = self.top_left[0];
   174ac:	9829      	ldr	r0, [sp, #164]	; 0xa4
   174ae:	f7fb f881 	bl	125b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   174b2:	9004      	str	r0, [sp, #16]
   174b4:	e7ff      	b.n	174b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x506>
   174b6:	9804      	ldr	r0, [sp, #16]
   174b8:	6801      	ldr	r1, [r0, #0]
   174ba:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   174bc:	6111      	str	r1, [r2, #16]
                self.y += 1;
   174be:	6951      	ldr	r1, [r2, #20]
   174c0:	1c4b      	adds	r3, r1, #1
   174c2:	469c      	mov	ip, r3
   174c4:	428b      	cmp	r3, r1
   174c6:	f8cd c00c 	str.w	ip, [sp, #12]
   174ca:	d655      	bvs.n	17578 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5c8>
   174cc:	e7ff      	b.n	174ce <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x51e>
   174ce:	9803      	ldr	r0, [sp, #12]
   174d0:	9929      	ldr	r1, [sp, #164]	; 0xa4
   174d2:	6148      	str	r0, [r1, #20]
            if self.x > self.bottom_right[0] {
   174d4:	e7ff      	b.n	174d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   174d6:	a831      	add	r0, sp, #196	; 0xc4
            if out.is_some() {
   174d8:	f7fe f826 	bl	15528 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>
   174dc:	9002      	str	r0, [sp, #8]
   174de:	e7ff      	b.n	174e0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x530>
   174e0:	9802      	ldr	r0, [sp, #8]
   174e2:	07c1      	lsls	r1, r0, #31
   174e4:	2900      	cmp	r1, #0
   174e6:	d101      	bne.n	174ec <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53c>
   174e8:	e7ff      	b.n	174ea <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53a>
        let pixel = loop {
   174ea:	e606      	b.n	170fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
                break out;
   174ec:	9831      	ldr	r0, [sp, #196]	; 0xc4
   174ee:	9932      	ldr	r1, [sp, #200]	; 0xc8
   174f0:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   174f2:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   174f4:	9330      	str	r3, [sp, #192]	; 0xc0
   174f6:	922f      	str	r2, [sp, #188]	; 0xbc
   174f8:	912e      	str	r1, [sp, #184]	; 0xb8
   174fa:	902d      	str	r0, [sp, #180]	; 0xb4
   174fc:	e5f0      	b.n	170e0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
    }
   174fe:	e5ed      	b.n	170dc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   17500:	f248 10c0 	movw	r0, #33216	; 0x81c0
   17504:	f2c0 0002 	movt	r0, #2
   17508:	f248 12ac 	movw	r2, #33196	; 0x81ac
   1750c:	f2c0 0202 	movt	r2, #2
   17510:	211c      	movs	r1, #28
   17512:	f001 f8c3 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17516:	defe      	udf	#254	; 0xfe
                || (self.y <= br[1] && self.y > br[1] - border_width)
   17518:	f248 10f0 	movw	r0, #33264	; 0x81f0
   1751c:	f2c0 0002 	movt	r0, #2
   17520:	f248 12dc 	movw	r2, #33244	; 0x81dc
   17524:	f2c0 0202 	movt	r2, #2
   17528:	2121      	movs	r1, #33	; 0x21
   1752a:	f001 f8b7 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1752e:	defe      	udf	#254	; 0xfe
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   17530:	f248 10c0 	movw	r0, #33216	; 0x81c0
   17534:	f2c0 0002 	movt	r0, #2
   17538:	f248 2214 	movw	r2, #33300	; 0x8214
   1753c:	f2c0 0202 	movt	r2, #2
   17540:	211c      	movs	r1, #28
   17542:	f001 f8ab 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17546:	defe      	udf	#254	; 0xfe
                || (self.x <= br[0] && self.x > br[0] - border_width)
   17548:	f248 10f0 	movw	r0, #33264	; 0x81f0
   1754c:	f2c0 0002 	movt	r0, #2
   17550:	f248 2224 	movw	r2, #33316	; 0x8224
   17554:	f2c0 0202 	movt	r2, #2
   17558:	2121      	movs	r1, #33	; 0x21
   1755a:	f001 f89f 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1755e:	defe      	udf	#254	; 0xfe
            self.x += 1;
   17560:	f248 10c0 	movw	r0, #33216	; 0x81c0
   17564:	f2c0 0002 	movt	r0, #2
   17568:	f248 2254 	movw	r2, #33364	; 0x8254
   1756c:	f2c0 0202 	movt	r2, #2
   17570:	211c      	movs	r1, #28
   17572:	f001 f893 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17576:	defe      	udf	#254	; 0xfe
                self.y += 1;
   17578:	f248 10c0 	movw	r0, #33216	; 0x81c0
   1757c:	f2c0 0002 	movt	r0, #2
   17580:	f248 2264 	movw	r2, #33380	; 0x8264
   17584:	f2c0 0202 	movt	r2, #2
   17588:	211c      	movs	r1, #28
   1758a:	f001 f887 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1758e:	defe      	udf	#254	; 0xfe

00017590 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>:
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   17590:	b580      	push	{r7, lr}
   17592:	b08a      	sub	sp, #40	; 0x28
   17594:	680a      	ldr	r2, [r1, #0]
   17596:	9207      	str	r2, [sp, #28]
   17598:	684b      	ldr	r3, [r1, #4]
   1759a:	9308      	str	r3, [sp, #32]
   1759c:	8909      	ldrh	r1, [r1, #8]
   1759e:	468c      	mov	ip, r1
   175a0:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
   175a4:	9005      	str	r0, [sp, #20]
   175a6:	4610      	mov	r0, r2
   175a8:	4619      	mov	r1, r3
   175aa:	f8cd c010 	str.w	ip, [sp, #16]
   175ae:	f7fa fff8 	bl	125a2 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
   175b2:	9003      	str	r0, [sp, #12]
   175b4:	9102      	str	r1, [sp, #8]
   175b6:	e7ff      	b.n	175b8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x28>
   175b8:	9803      	ldr	r0, [sp, #12]
   175ba:	9902      	ldr	r1, [sp, #8]
   175bc:	f7fb f843 	bl	12646 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>
   175c0:	9001      	str	r0, [sp, #4]
   175c2:	9100      	str	r1, [sp, #0]
   175c4:	e7ff      	b.n	175c6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x36>
   175c6:	9801      	ldr	r0, [sp, #4]
   175c8:	9905      	ldr	r1, [sp, #20]
   175ca:	6008      	str	r0, [r1, #0]
   175cc:	9a00      	ldr	r2, [sp, #0]
   175ce:	604a      	str	r2, [r1, #4]
   175d0:	9b04      	ldr	r3, [sp, #16]
   175d2:	810b      	strh	r3, [r1, #8]
   175d4:	b00a      	add	sp, #40	; 0x28
   175d6:	bd80      	pop	{r7, pc}

000175d8 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   175d8:	b510      	push	{r4, lr}
   175da:	b08c      	sub	sp, #48	; 0x30
   175dc:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   175e0:	9108      	str	r1, [sp, #32]
   175e2:	9209      	str	r2, [sp, #36]	; 0x24
   175e4:	930a      	str	r3, [sp, #40]	; 0x28
   175e6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   175ea:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   175ee:	9004      	str	r0, [sp, #16]
   175f0:	4670      	mov	r0, lr
   175f2:	9303      	str	r3, [sp, #12]
   175f4:	9202      	str	r2, [sp, #8]
   175f6:	9101      	str	r1, [sp, #4]
   175f8:	f8cd c000 	str.w	ip, [sp]
   175fc:	f000 f818 	bl	17630 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   17600:	e7ff      	b.n	17602 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   17602:	9801      	ldr	r0, [sp, #4]
   17604:	9904      	ldr	r1, [sp, #16]
   17606:	6008      	str	r0, [r1, #0]
   17608:	9a02      	ldr	r2, [sp, #8]
   1760a:	604a      	str	r2, [r1, #4]
   1760c:	9b03      	ldr	r3, [sp, #12]
   1760e:	608b      	str	r3, [r1, #8]
   17610:	f8dd c000 	ldr.w	ip, [sp]
   17614:	f8c1 c00c 	str.w	ip, [r1, #12]
   17618:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   1761c:	f8a1 e018 	strh.w	lr, [r1, #24]
   17620:	f8dd e014 	ldr.w	lr, [sp, #20]
   17624:	9c06      	ldr	r4, [sp, #24]
   17626:	614c      	str	r4, [r1, #20]
   17628:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   1762c:	b00c      	add	sp, #48	; 0x30
   1762e:	bd10      	pop	{r4, pc}

00017630 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   17630:	b082      	sub	sp, #8
   17632:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   17634:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   17638:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   1763c:	f8bd 1000 	ldrh.w	r1, [sp]
   17640:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   17644:	8001      	strh	r1, [r0, #0]
   17646:	8042      	strh	r2, [r0, #2]
   17648:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   1764c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   17650:	8081      	strh	r1, [r0, #4]
   17652:	80c2      	strh	r2, [r0, #6]
   17654:	2101      	movs	r1, #1
   17656:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   17658:	b002      	add	sp, #8
   1765a:	4770      	bx	lr

0001765c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>:
   1765c:	b082      	sub	sp, #8
   1765e:	9001      	str	r0, [sp, #4]
   17660:	9000      	str	r0, [sp, #0]
   17662:	9800      	ldr	r0, [sp, #0]
   17664:	b002      	add	sp, #8
   17666:	4770      	bx	lr

00017668 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>:
   17668:	b081      	sub	sp, #4
   1766a:	9000      	str	r0, [sp, #0]
   1766c:	b001      	add	sp, #4
   1766e:	4770      	bx	lr

00017670 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
   17670:	b084      	sub	sp, #16
   17672:	460a      	mov	r2, r1
   17674:	4603      	mov	r3, r0
   17676:	9103      	str	r1, [sp, #12]
   17678:	9002      	str	r0, [sp, #8]
   1767a:	b004      	add	sp, #16
   1767c:	4770      	bx	lr

0001767e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E>:
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
   1767e:	b5f0      	push	{r4, r5, r6, r7, lr}
   17680:	b091      	sub	sp, #68	; 0x44
   17682:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
   17686:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
   1768a:	461c      	mov	r4, r3
   1768c:	4615      	mov	r5, r2
   1768e:	460e      	mov	r6, r1
   17690:	900a      	str	r0, [sp, #40]	; 0x28
   17692:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
   17696:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
   1769a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   1769e:	f8ad e032 	strh.w	lr, [sp, #50]	; 0x32
   176a2:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
   176a4:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
   176a8:	2701      	movs	r7, #1
   176aa:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
   176ae:	466f      	mov	r7, sp
   176b0:	f8c7 e000 	str.w	lr, [r7]
   176b4:	9008      	str	r0, [sp, #32]
   176b6:	f8cd c01c 	str.w	ip, [sp, #28]
   176ba:	9406      	str	r4, [sp, #24]
   176bc:	9505      	str	r5, [sp, #20]
   176be:	9604      	str	r6, [sp, #16]
   176c0:	f7f2 fb84 	bl	9dcc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
   176c4:	9003      	str	r0, [sp, #12]
   176c6:	e7ff      	b.n	176c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x4a>
   176c8:	9803      	ldr	r0, [sp, #12]
   176ca:	f000 0001 	and.w	r0, r0, #1
   176ce:	f7f1 fad1 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   176d2:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   176d6:	e7ff      	b.n	176d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x5a>
   176d8:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   176dc:	07c1      	lsls	r1, r0, #31
   176de:	2900      	cmp	r1, #0
   176e0:	d001      	beq.n	176e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x68>
   176e2:	e7ff      	b.n	176e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x66>
   176e4:	e009      	b.n	176fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x7c>
   176e6:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
   176e8:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   176ec:	9808      	ldr	r0, [sp, #32]
   176ee:	9907      	ldr	r1, [sp, #28]
   176f0:	f000 f848 	bl	17784 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E>
   176f4:	9002      	str	r0, [sp, #8]
   176f6:	e00d      	b.n	17714 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x96>
        self.set_address_window(sx, sy, ex, ey)?;
   176f8:	defe      	udf	#254	; 0xfe
   176fa:	f7fb fb68 	bl	12dce <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   176fe:	e003      	b.n	17708 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x8a>
    }
   17700:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   17704:	b011      	add	sp, #68	; 0x44
   17706:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
   17708:	f7fe fd1e 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1770c:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   17710:	e7ff      	b.n	17712 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x94>
   17712:	e031      	b.n	17778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xfa>
        self.write_pixels(colors) ? ;
   17714:	9802      	ldr	r0, [sp, #8]
   17716:	f000 0001 	and.w	r0, r0, #1
   1771a:	f7f1 faab 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1771e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
   17722:	e7ff      	b.n	17724 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xa6>
   17724:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   17728:	07c1      	lsls	r1, r0, #31
   1772a:	2900      	cmp	r1, #0
   1772c:	d001      	beq.n	17732 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xb4>
   1772e:	e7ff      	b.n	17730 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xb2>
   17730:	e004      	b.n	1773c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xbe>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   17732:	f7fc fd9b 	bl	1426c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   17736:	9001      	str	r0, [sp, #4]
   17738:	e009      	b.n	1774e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xd0>
        self.write_pixels(colors) ? ;
   1773a:	defe      	udf	#254	; 0xfe
   1773c:	f7fb fb47 	bl	12dce <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   17740:	e7ff      	b.n	17742 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xc4>
   17742:	f7fe fd01 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   17746:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   1774a:	e7ff      	b.n	1774c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xce>
   1774c:	e014      	b.n	17778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xfa>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   1774e:	f248 2174 	movw	r1, #33396	; 0x8274
   17752:	f2c0 0102 	movt	r1, #2
   17756:	f248 23d0 	movw	r3, #33488	; 0x82d0
   1775a:	f2c0 0302 	movt	r3, #2
   1775e:	220e      	movs	r2, #14
   17760:	9801      	ldr	r0, [sp, #4]
   17762:	f7f1 fa4e 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   17766:	e7ff      	b.n	17768 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xea>
   17768:	2000      	movs	r0, #0
        Ok(())
   1776a:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    }
   1776e:	e7c7      	b.n	17700 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x82>
   17770:	2000      	movs	r0, #0
   17772:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   17776:	e7c3      	b.n	17700 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x82>
   17778:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   1777c:	07c0      	lsls	r0, r0, #31
   1777e:	2800      	cmp	r0, #0
   17780:	d1f6      	bne.n	17770 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0xf2>
   17782:	e7bd      	b.n	17700 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h91a02d44405617a7E+0x82>

00017784 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
   17784:	b580      	push	{r7, lr}
   17786:	b094      	sub	sp, #80	; 0x50
   17788:	900d      	str	r0, [sp, #52]	; 0x34
   1778a:	910e      	str	r1, [sp, #56]	; 0x38
   1778c:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
   1778e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   17792:	2301      	movs	r3, #1
   17794:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   17798:	232c      	movs	r3, #44	; 0x2c
   1779a:	f88d 301f 	strb.w	r3, [sp, #31]
   1779e:	9209      	str	r2, [sp, #36]	; 0x24
   177a0:	9208      	str	r2, [sp, #32]
   177a2:	9208      	str	r2, [sp, #32]
   177a4:	9a08      	ldr	r2, [sp, #32]
   177a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   177a8:	f89d c01f 	ldrb.w	ip, [sp, #31]
   177ac:	9006      	str	r0, [sp, #24]
   177ae:	9105      	str	r1, [sp, #20]
   177b0:	4661      	mov	r1, ip
   177b2:	f7f2 fa1a 	bl	9bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   177b6:	9004      	str	r0, [sp, #16]
   177b8:	e7ff      	b.n	177ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x36>
   177ba:	9804      	ldr	r0, [sp, #16]
   177bc:	f000 0001 	and.w	r0, r0, #1
   177c0:	f7f1 fa58 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   177c4:	f88d 001e 	strb.w	r0, [sp, #30]
   177c8:	e7ff      	b.n	177ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x46>
   177ca:	f89d 001e 	ldrb.w	r0, [sp, #30]
   177ce:	07c1      	lsls	r1, r0, #31
   177d0:	2900      	cmp	r1, #0
   177d2:	d001      	beq.n	177d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x54>
   177d4:	e7ff      	b.n	177d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x52>
   177d6:	e008      	b.n	177ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x66>
   177d8:	2000      	movs	r0, #0
        for color in colors {
   177da:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   177de:	9805      	ldr	r0, [sp, #20]
   177e0:	f000 f94e 	bl	17a80 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h48c974e346f24094E>
   177e4:	9003      	str	r0, [sp, #12]
   177e6:	e00d      	b.n	17804 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x80>
        self.write_command(Instruction::RAMWR, None)?;
   177e8:	defe      	udf	#254	; 0xfe
   177ea:	f7fb faf0 	bl	12dce <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   177ee:	e003      	b.n	177f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x74>
    }
   177f0:	f89d 001d 	ldrb.w	r0, [sp, #29]
   177f4:	b014      	add	sp, #80	; 0x50
   177f6:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
   177f8:	f7fe fca6 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   177fc:	f88d 001d 	strb.w	r0, [sp, #29]
   17800:	e7ff      	b.n	17802 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x7e>
   17802:	e057      	b.n	178b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x130>
        for color in colors {
   17804:	9803      	ldr	r0, [sp, #12]
   17806:	900a      	str	r0, [sp, #40]	; 0x28
   17808:	e7ff      	b.n	1780a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x86>
   1780a:	a80a      	add	r0, sp, #40	; 0x28
   1780c:	f000 f93c 	bl	17a88 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E>
   17810:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
   17814:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   17818:	e7ff      	b.n	1781a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x96>
   1781a:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   1781e:	4601      	mov	r1, r0
   17820:	2800      	cmp	r0, #0
   17822:	d001      	beq.n	17828 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xa4>
   17824:	e7ff      	b.n	17826 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xa2>
   17826:	e001      	b.n	1782c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xa8>
        }
   17828:	e02b      	b.n	17882 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xfe>
        for color in colors {
   1782a:	defe      	udf	#254	; 0xfe
   1782c:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
   17830:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
   17834:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
   17838:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
            self.write_word(color)?;
   1783c:	9906      	ldr	r1, [sp, #24]
   1783e:	9002      	str	r0, [sp, #8]
   17840:	4608      	mov	r0, r1
   17842:	9902      	ldr	r1, [sp, #8]
   17844:	f7f2 f902 	bl	9a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   17848:	9001      	str	r0, [sp, #4]
   1784a:	e7ff      	b.n	1784c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xc8>
   1784c:	9801      	ldr	r0, [sp, #4]
   1784e:	f000 0001 	and.w	r0, r0, #1
   17852:	f7f1 fa0f 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   17856:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   1785a:	e7ff      	b.n	1785c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xd8>
   1785c:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   17860:	07c1      	lsls	r1, r0, #31
   17862:	2900      	cmp	r1, #0
   17864:	d001      	beq.n	1786a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xe6>
   17866:	e7ff      	b.n	17868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xe4>
   17868:	e001      	b.n	1786e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xea>
        for color in colors {
   1786a:	e7ce      	b.n	1780a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x86>
            self.write_word(color)?;
   1786c:	defe      	udf	#254	; 0xfe
   1786e:	f7fb faae 	bl	12dce <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   17872:	e7ff      	b.n	17874 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xf0>
   17874:	f7fe fc68 	bl	16148 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   17878:	f88d 001d 	strb.w	r0, [sp, #29]
   1787c:	e7ff      	b.n	1787e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xfa>
        }
   1787e:	e7ff      	b.n	17880 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0xfc>
    }
   17880:	e018      	b.n	178b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x130>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   17882:	f7fc fcf3 	bl	1426c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   17886:	9000      	str	r0, [sp, #0]
   17888:	e7ff      	b.n	1788a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x106>
   1788a:	f248 2174 	movw	r1, #33396	; 0x8274
   1788e:	f2c0 0102 	movt	r1, #2
   17892:	f248 23e0 	movw	r3, #33504	; 0x82e0
   17896:	f2c0 0302 	movt	r3, #2
   1789a:	220e      	movs	r2, #14
   1789c:	9800      	ldr	r0, [sp, #0]
   1789e:	f7f1 f9b0 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   178a2:	e7ff      	b.n	178a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x120>
   178a4:	2000      	movs	r0, #0
        Ok(())
   178a6:	f88d 001d 	strb.w	r0, [sp, #29]
    }
   178aa:	e7a1      	b.n	177f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x6c>
   178ac:	2000      	movs	r0, #0
   178ae:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   178b2:	e79d      	b.n	177f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x6c>
   178b4:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   178b8:	07c0      	lsls	r0, r0, #31
   178ba:	2800      	cmp	r0, #0
   178bc:	d1f6      	bne.n	178ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x128>
   178be:	e797      	b.n	177f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hd92ee2ce1d449da4E+0x6c>

000178c0 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE>:
   178c0:	b083      	sub	sp, #12
   178c2:	9002      	str	r0, [sp, #8]
   178c4:	9000      	str	r0, [sp, #0]
   178c6:	e7ff      	b.n	178c8 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x8>
   178c8:	9800      	ldr	r0, [sp, #0]
   178ca:	28ff      	cmp	r0, #255	; 0xff
   178cc:	d807      	bhi.n	178de <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x1e>
   178ce:	e7ff      	b.n	178d0 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x10>
   178d0:	9800      	ldr	r0, [sp, #0]
   178d2:	f88d 0005 	strb.w	r0, [sp, #5]
   178d6:	2100      	movs	r1, #0
   178d8:	f88d 1004 	strb.w	r1, [sp, #4]
   178dc:	e003      	b.n	178e6 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x26>
   178de:	2001      	movs	r0, #1
   178e0:	f88d 0004 	strb.w	r0, [sp, #4]
   178e4:	e7ff      	b.n	178e6 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x26>
   178e6:	f89d 0004 	ldrb.w	r0, [sp, #4]
   178ea:	f89d 1005 	ldrb.w	r1, [sp, #5]
   178ee:	b003      	add	sp, #12
   178f0:	4770      	bx	lr

000178f2 <_ZN4core3cmp3Ord3max17ha8c90ae47563bfdfE>:
   178f2:	b580      	push	{r7, lr}
   178f4:	b084      	sub	sp, #16
   178f6:	460a      	mov	r2, r1
   178f8:	4603      	mov	r3, r0
   178fa:	f88d 000e 	strb.w	r0, [sp, #14]
   178fe:	f88d 100f 	strb.w	r1, [sp, #15]
   17902:	9202      	str	r2, [sp, #8]
   17904:	9301      	str	r3, [sp, #4]
   17906:	f000 f816 	bl	17936 <_ZN4core3cmp6max_by17he1a3e576796f8906E>
   1790a:	9000      	str	r0, [sp, #0]
   1790c:	e7ff      	b.n	1790e <_ZN4core3cmp3Ord3max17ha8c90ae47563bfdfE+0x1c>
   1790e:	9800      	ldr	r0, [sp, #0]
   17910:	b004      	add	sp, #16
   17912:	bd80      	pop	{r7, pc}

00017914 <_ZN4core3cmp3Ord3min17hc89b724701767be9E>:
   17914:	b580      	push	{r7, lr}
   17916:	b084      	sub	sp, #16
   17918:	460a      	mov	r2, r1
   1791a:	4603      	mov	r3, r0
   1791c:	f88d 000e 	strb.w	r0, [sp, #14]
   17920:	f88d 100f 	strb.w	r1, [sp, #15]
   17924:	9202      	str	r2, [sp, #8]
   17926:	9301      	str	r3, [sp, #4]
   17928:	f000 f854 	bl	179d4 <_ZN4core3cmp6min_by17hbd80813895a56a69E>
   1792c:	9000      	str	r0, [sp, #0]
   1792e:	e7ff      	b.n	17930 <_ZN4core3cmp3Ord3min17hc89b724701767be9E+0x1c>
   17930:	9800      	ldr	r0, [sp, #0]
   17932:	b004      	add	sp, #16
   17934:	bd80      	pop	{r7, pc}

00017936 <_ZN4core3cmp6max_by17he1a3e576796f8906E>:
   17936:	b580      	push	{r7, lr}
   17938:	b088      	sub	sp, #32
   1793a:	460a      	mov	r2, r1
   1793c:	4603      	mov	r3, r0
   1793e:	f88d 000c 	strb.w	r0, [sp, #12]
   17942:	f88d 100d 	strb.w	r1, [sp, #13]
   17946:	2000      	movs	r0, #0
   17948:	f88d 001b 	strb.w	r0, [sp, #27]
   1794c:	f88d 001a 	strb.w	r0, [sp, #26]
   17950:	2001      	movs	r0, #1
   17952:	f88d 001b 	strb.w	r0, [sp, #27]
   17956:	f88d 001a 	strb.w	r0, [sp, #26]
   1795a:	a803      	add	r0, sp, #12
   1795c:	9004      	str	r0, [sp, #16]
   1795e:	f10d 000d 	add.w	r0, sp, #13
   17962:	9005      	str	r0, [sp, #20]
   17964:	9804      	ldr	r0, [sp, #16]
   17966:	9905      	ldr	r1, [sp, #20]
   17968:	9202      	str	r2, [sp, #8]
   1796a:	9301      	str	r3, [sp, #4]
   1796c:	f7fa fb11 	bl	11f92 <_ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E>
   17970:	f88d 000f 	strb.w	r0, [sp, #15]
   17974:	e7ff      	b.n	17976 <_ZN4core3cmp6max_by17he1a3e576796f8906E+0x40>
   17976:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   1797a:	1c41      	adds	r1, r0, #1
   1797c:	2902      	cmp	r1, #2
   1797e:	d309      	bcc.n	17994 <_ZN4core3cmp6max_by17he1a3e576796f8906E+0x5e>
   17980:	e7ff      	b.n	17982 <_ZN4core3cmp6max_by17he1a3e576796f8906E+0x4c>
   17982:	2000      	movs	r0, #0
   17984:	f88d 001b 	strb.w	r0, [sp, #27]
   17988:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1798c:	f88d 000e 	strb.w	r0, [sp, #14]
   17990:	e008      	b.n	179a4 <_ZN4core3cmp6max_by17he1a3e576796f8906E+0x6e>
   17992:	defe      	udf	#254	; 0xfe
   17994:	2000      	movs	r0, #0
   17996:	f88d 001a 	strb.w	r0, [sp, #26]
   1799a:	f89d 000d 	ldrb.w	r0, [sp, #13]
   1799e:	f88d 000e 	strb.w	r0, [sp, #14]
   179a2:	e7ff      	b.n	179a4 <_ZN4core3cmp6max_by17he1a3e576796f8906E+0x6e>
   179a4:	f89d 001a 	ldrb.w	r0, [sp, #26]
   179a8:	07c0      	lsls	r0, r0, #31
   179aa:	2800      	cmp	r0, #0
   179ac:	d10a      	bne.n	179c4 <_ZN4core3cmp6max_by17he1a3e576796f8906E+0x8e>
   179ae:	e7ff      	b.n	179b0 <_ZN4core3cmp6max_by17he1a3e576796f8906E+0x7a>
   179b0:	f89d 001b 	ldrb.w	r0, [sp, #27]
   179b4:	07c0      	lsls	r0, r0, #31
   179b6:	2800      	cmp	r0, #0
   179b8:	d108      	bne.n	179cc <_ZN4core3cmp6max_by17he1a3e576796f8906E+0x96>
   179ba:	e7ff      	b.n	179bc <_ZN4core3cmp6max_by17he1a3e576796f8906E+0x86>
   179bc:	f89d 000e 	ldrb.w	r0, [sp, #14]
   179c0:	b008      	add	sp, #32
   179c2:	bd80      	pop	{r7, pc}
   179c4:	2000      	movs	r0, #0
   179c6:	f88d 001a 	strb.w	r0, [sp, #26]
   179ca:	e7f1      	b.n	179b0 <_ZN4core3cmp6max_by17he1a3e576796f8906E+0x7a>
   179cc:	2000      	movs	r0, #0
   179ce:	f88d 001b 	strb.w	r0, [sp, #27]
   179d2:	e7f3      	b.n	179bc <_ZN4core3cmp6max_by17he1a3e576796f8906E+0x86>

000179d4 <_ZN4core3cmp6min_by17hbd80813895a56a69E>:
   179d4:	b580      	push	{r7, lr}
   179d6:	b088      	sub	sp, #32
   179d8:	460a      	mov	r2, r1
   179da:	4603      	mov	r3, r0
   179dc:	f88d 000c 	strb.w	r0, [sp, #12]
   179e0:	f88d 100d 	strb.w	r1, [sp, #13]
   179e4:	2000      	movs	r0, #0
   179e6:	f88d 001b 	strb.w	r0, [sp, #27]
   179ea:	f88d 001a 	strb.w	r0, [sp, #26]
   179ee:	2001      	movs	r0, #1
   179f0:	f88d 001b 	strb.w	r0, [sp, #27]
   179f4:	f88d 001a 	strb.w	r0, [sp, #26]
   179f8:	a803      	add	r0, sp, #12
   179fa:	9004      	str	r0, [sp, #16]
   179fc:	f10d 000d 	add.w	r0, sp, #13
   17a00:	9005      	str	r0, [sp, #20]
   17a02:	9804      	ldr	r0, [sp, #16]
   17a04:	9905      	ldr	r1, [sp, #20]
   17a06:	9202      	str	r2, [sp, #8]
   17a08:	9301      	str	r3, [sp, #4]
   17a0a:	f7fa fac2 	bl	11f92 <_ZN4core3ops8function6FnOnce9call_once17h59e116d6918016e9E>
   17a0e:	f88d 000f 	strb.w	r0, [sp, #15]
   17a12:	e7ff      	b.n	17a14 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x40>
   17a14:	f99d 000f 	ldrsb.w	r0, [sp, #15]
   17a18:	1c41      	adds	r1, r0, #1
   17a1a:	2902      	cmp	r1, #2
   17a1c:	d309      	bcc.n	17a32 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x5e>
   17a1e:	e7ff      	b.n	17a20 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x4c>
   17a20:	2000      	movs	r0, #0
   17a22:	f88d 001a 	strb.w	r0, [sp, #26]
   17a26:	f89d 000d 	ldrb.w	r0, [sp, #13]
   17a2a:	f88d 000e 	strb.w	r0, [sp, #14]
   17a2e:	e008      	b.n	17a42 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x6e>
   17a30:	defe      	udf	#254	; 0xfe
   17a32:	2000      	movs	r0, #0
   17a34:	f88d 001b 	strb.w	r0, [sp, #27]
   17a38:	f89d 000c 	ldrb.w	r0, [sp, #12]
   17a3c:	f88d 000e 	strb.w	r0, [sp, #14]
   17a40:	e7ff      	b.n	17a42 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x6e>
   17a42:	f89d 001a 	ldrb.w	r0, [sp, #26]
   17a46:	07c0      	lsls	r0, r0, #31
   17a48:	2800      	cmp	r0, #0
   17a4a:	d10a      	bne.n	17a62 <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x8e>
   17a4c:	e7ff      	b.n	17a4e <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x7a>
   17a4e:	f89d 001b 	ldrb.w	r0, [sp, #27]
   17a52:	07c0      	lsls	r0, r0, #31
   17a54:	2800      	cmp	r0, #0
   17a56:	d108      	bne.n	17a6a <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x96>
   17a58:	e7ff      	b.n	17a5a <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x86>
   17a5a:	f89d 000e 	ldrb.w	r0, [sp, #14]
   17a5e:	b008      	add	sp, #32
   17a60:	bd80      	pop	{r7, pc}
   17a62:	2000      	movs	r0, #0
   17a64:	f88d 001a 	strb.w	r0, [sp, #26]
   17a68:	e7f1      	b.n	17a4e <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x7a>
   17a6a:	2000      	movs	r0, #0
   17a6c:	f88d 001b 	strb.w	r0, [sp, #27]
   17a70:	e7f3      	b.n	17a5a <_ZN4core3cmp6min_by17hbd80813895a56a69E+0x86>

00017a72 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h8e5f04233c93701aE>:
   17a72:	b081      	sub	sp, #4
   17a74:	4601      	mov	r1, r0
   17a76:	f88d 0003 	strb.w	r0, [sp, #3]
   17a7a:	b2c0      	uxtb	r0, r0
   17a7c:	b001      	add	sp, #4
   17a7e:	4770      	bx	lr

00017a80 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h48c974e346f24094E>:
   17a80:	b081      	sub	sp, #4
   17a82:	9000      	str	r0, [sp, #0]
   17a84:	b001      	add	sp, #4
   17a86:	4770      	bx	lr

00017a88 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E>:
   17a88:	b580      	push	{r7, lr}
   17a8a:	b084      	sub	sp, #16
   17a8c:	9003      	str	r0, [sp, #12]
   17a8e:	6800      	ldr	r0, [r0, #0]
   17a90:	f7f8 fc86 	bl	103a0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab0cef41090d3c7bE>
   17a94:	9002      	str	r0, [sp, #8]
   17a96:	9101      	str	r1, [sp, #4]
   17a98:	e7ff      	b.n	17a9a <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17he3601a500030acd5E+0x12>
   17a9a:	9802      	ldr	r0, [sp, #8]
   17a9c:	9901      	ldr	r1, [sp, #4]
   17a9e:	b004      	add	sp, #16
   17aa0:	bd80      	pop	{r7, pc}

00017aa2 <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E>:
   17aa2:	b580      	push	{r7, lr}
   17aa4:	b08c      	sub	sp, #48	; 0x30
   17aa6:	9005      	str	r0, [sp, #20]
   17aa8:	9106      	str	r1, [sp, #24]
   17aaa:	9207      	str	r2, [sp, #28]
   17aac:	9008      	str	r0, [sp, #32]
   17aae:	9109      	str	r1, [sp, #36]	; 0x24
   17ab0:	2301      	movs	r3, #1
   17ab2:	930b      	str	r3, [sp, #44]	; 0x2c
   17ab4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17ab6:	9204      	str	r2, [sp, #16]
   17ab8:	9103      	str	r1, [sp, #12]
   17aba:	9002      	str	r0, [sp, #8]
   17abc:	9301      	str	r3, [sp, #4]
   17abe:	e7ff      	b.n	17ac0 <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E+0x1e>
   17ac0:	9801      	ldr	r0, [sp, #4]
   17ac2:	9904      	ldr	r1, [sp, #16]
   17ac4:	fb00 f201 	mul.w	r2, r0, r1
   17ac8:	920a      	str	r2, [sp, #40]	; 0x28
   17aca:	9802      	ldr	r0, [sp, #8]
   17acc:	9903      	ldr	r1, [sp, #12]
   17ace:	f000 fc37 	bl	18340 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E>
   17ad2:	e7ff      	b.n	17ad4 <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E+0x32>
   17ad4:	b00c      	add	sp, #48	; 0x30
   17ad6:	bd80      	pop	{r7, pc}

00017ad8 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E>:
   17ad8:	b580      	push	{r7, lr}
   17ada:	b088      	sub	sp, #32
   17adc:	9004      	str	r0, [sp, #16]
   17ade:	9105      	str	r1, [sp, #20]
   17ae0:	2201      	movs	r2, #1
   17ae2:	9207      	str	r2, [sp, #28]
   17ae4:	9a07      	ldr	r2, [sp, #28]
   17ae6:	9103      	str	r1, [sp, #12]
   17ae8:	9002      	str	r0, [sp, #8]
   17aea:	9201      	str	r2, [sp, #4]
   17aec:	e7ff      	b.n	17aee <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x16>
   17aee:	9801      	ldr	r0, [sp, #4]
   17af0:	2820      	cmp	r0, #32
   17af2:	d306      	bcc.n	17b02 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x2a>
   17af4:	e7ff      	b.n	17af6 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x1e>
   17af6:	2201      	movs	r2, #1
   17af8:	9802      	ldr	r0, [sp, #8]
   17afa:	9903      	ldr	r1, [sp, #12]
   17afc:	f7ff ffd1 	bl	17aa2 <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E>
   17b00:	e013      	b.n	17b2a <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x52>
   17b02:	9802      	ldr	r0, [sp, #8]
   17b04:	f000 f814 	bl	17b30 <_ZN4core3ptr4read17h9c6a8e2989f962ccE>
   17b08:	4601      	mov	r1, r0
   17b0a:	f88d 001b 	strb.w	r0, [sp, #27]
   17b0e:	9100      	str	r1, [sp, #0]
   17b10:	e7ff      	b.n	17b12 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x3a>
   17b12:	2201      	movs	r2, #1
   17b14:	9803      	ldr	r0, [sp, #12]
   17b16:	9902      	ldr	r1, [sp, #8]
   17b18:	f7fa fe28 	bl	1276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   17b1c:	e7ff      	b.n	17b1e <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x46>
   17b1e:	9803      	ldr	r0, [sp, #12]
   17b20:	9900      	ldr	r1, [sp, #0]
   17b22:	f7f1 fb41 	bl	91a8 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   17b26:	e7ff      	b.n	17b28 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x50>
   17b28:	e000      	b.n	17b2c <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x54>
   17b2a:	e7ff      	b.n	17b2c <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x54>
   17b2c:	b008      	add	sp, #32
   17b2e:	bd80      	pop	{r7, pc}

00017b30 <_ZN4core3ptr4read17h9c6a8e2989f962ccE>:
   17b30:	b580      	push	{r7, lr}
   17b32:	b088      	sub	sp, #32
   17b34:	9004      	str	r0, [sp, #16]
   17b36:	f89d 1015 	ldrb.w	r1, [sp, #21]
   17b3a:	f88d 100f 	strb.w	r1, [sp, #15]
   17b3e:	9002      	str	r0, [sp, #8]
   17b40:	e7ff      	b.n	17b42 <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x12>
   17b42:	f10d 000f 	add.w	r0, sp, #15
   17b46:	9006      	str	r0, [sp, #24]
   17b48:	9007      	str	r0, [sp, #28]
   17b4a:	e7ff      	b.n	17b4c <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x1c>
   17b4c:	f10d 010f 	add.w	r1, sp, #15
   17b50:	2201      	movs	r2, #1
   17b52:	9802      	ldr	r0, [sp, #8]
   17b54:	f7fa fe0a 	bl	1276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   17b58:	e7ff      	b.n	17b5a <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x2a>
   17b5a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   17b5e:	4601      	mov	r1, r0
   17b60:	f88d 0016 	strb.w	r0, [sp, #22]
   17b64:	f88d 0017 	strb.w	r0, [sp, #23]
   17b68:	9101      	str	r1, [sp, #4]
   17b6a:	e7ff      	b.n	17b6c <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x3c>
   17b6c:	9801      	ldr	r0, [sp, #4]
   17b6e:	b008      	add	sp, #32
   17b70:	bd80      	pop	{r7, pc}

00017b72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   17b72:	b580      	push	{r7, lr}
   17b74:	b088      	sub	sp, #32
   17b76:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   17b78:	1d01      	adds	r1, r0, #4
   17b7a:	9106      	str	r1, [sp, #24]
   17b7c:	9107      	str	r1, [sp, #28]
   17b7e:	9004      	str	r0, [sp, #16]
   17b80:	9103      	str	r1, [sp, #12]
   17b82:	e7ff      	b.n	17b84 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   17b84:	9804      	ldr	r0, [sp, #16]
   17b86:	6801      	ldr	r1, [r0, #0]
   17b88:	9803      	ldr	r0, [sp, #12]
   17b8a:	f7f1 f967 	bl	8e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   17b8e:	9002      	str	r0, [sp, #8]
   17b90:	9101      	str	r1, [sp, #4]
   17b92:	e7ff      	b.n	17b94 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   17b94:	9802      	ldr	r0, [sp, #8]
   17b96:	9901      	ldr	r1, [sp, #4]
   17b98:	b008      	add	sp, #32
   17b9a:	bd80      	pop	{r7, pc}

00017b9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   17b9c:	b580      	push	{r7, lr}
   17b9e:	b088      	sub	sp, #32
   17ba0:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   17ba2:	1d01      	adds	r1, r0, #4
   17ba4:	9106      	str	r1, [sp, #24]
   17ba6:	9107      	str	r1, [sp, #28]
   17ba8:	9004      	str	r0, [sp, #16]
   17baa:	9103      	str	r1, [sp, #12]
   17bac:	e7ff      	b.n	17bae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x12>
   17bae:	9804      	ldr	r0, [sp, #16]
   17bb0:	6801      	ldr	r1, [r0, #0]
   17bb2:	9803      	ldr	r0, [sp, #12]
   17bb4:	f7f1 f952 	bl	8e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   17bb8:	9002      	str	r0, [sp, #8]
   17bba:	9101      	str	r1, [sp, #4]
   17bbc:	e7ff      	b.n	17bbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x22>
    }
   17bbe:	9802      	ldr	r0, [sp, #8]
   17bc0:	9901      	ldr	r1, [sp, #4]
   17bc2:	b008      	add	sp, #32
   17bc4:	bd80      	pop	{r7, pc}

00017bc6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   17bc6:	b580      	push	{r7, lr}
   17bc8:	b08a      	sub	sp, #40	; 0x28
   17bca:	460a      	mov	r2, r1
   17bcc:	9006      	str	r0, [sp, #24]
   17bce:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   17bd2:	1d01      	adds	r1, r0, #4
   17bd4:	9108      	str	r1, [sp, #32]
   17bd6:	9109      	str	r1, [sp, #36]	; 0x24
   17bd8:	9005      	str	r0, [sp, #20]
   17bda:	9204      	str	r2, [sp, #16]
   17bdc:	9103      	str	r1, [sp, #12]
   17bde:	e7ff      	b.n	17be0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   17be0:	9805      	ldr	r0, [sp, #20]
   17be2:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   17be4:	9803      	ldr	r0, [sp, #12]
   17be6:	f7fa ff25 	bl	12a34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   17bea:	9002      	str	r0, [sp, #8]
   17bec:	e7ff      	b.n	17bee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   17bee:	9802      	ldr	r0, [sp, #8]
   17bf0:	9904      	ldr	r1, [sp, #16]
   17bf2:	f000 f994 	bl	17f1e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   17bf6:	e7ff      	b.n	17bf8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   17bf8:	9805      	ldr	r0, [sp, #20]
   17bfa:	6801      	ldr	r1, [r0, #0]
   17bfc:	1c4a      	adds	r2, r1, #1
   17bfe:	4613      	mov	r3, r2
   17c00:	428a      	cmp	r2, r1
   17c02:	9301      	str	r3, [sp, #4]
   17c04:	d305      	bcc.n	17c12 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   17c06:	e7ff      	b.n	17c08 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   17c08:	9801      	ldr	r0, [sp, #4]
   17c0a:	9905      	ldr	r1, [sp, #20]
   17c0c:	6008      	str	r0, [r1, #0]
    }
   17c0e:	b00a      	add	sp, #40	; 0x28
   17c10:	bd80      	pop	{r7, pc}
        self.len += 1;
   17c12:	f248 3060 	movw	r0, #33632	; 0x8360
   17c16:	f2c0 0002 	movt	r0, #2
   17c1a:	f248 3248 	movw	r2, #33608	; 0x8348
   17c1e:	f2c0 0202 	movt	r2, #2
   17c22:	211c      	movs	r1, #28
   17c24:	f000 fd3a 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17c28:	defe      	udf	#254	; 0xfe

00017c2a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   17c2a:	b580      	push	{r7, lr}
   17c2c:	b08a      	sub	sp, #40	; 0x28
   17c2e:	460a      	mov	r2, r1
   17c30:	9006      	str	r0, [sp, #24]
   17c32:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   17c36:	1d01      	adds	r1, r0, #4
   17c38:	9108      	str	r1, [sp, #32]
   17c3a:	9109      	str	r1, [sp, #36]	; 0x24
   17c3c:	9005      	str	r0, [sp, #20]
   17c3e:	9204      	str	r2, [sp, #16]
   17c40:	9103      	str	r1, [sp, #12]
   17c42:	e7ff      	b.n	17c44 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x1a>
            .add(self.len)
   17c44:	9805      	ldr	r0, [sp, #20]
   17c46:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   17c48:	9803      	ldr	r0, [sp, #12]
   17c4a:	f7fa fef3 	bl	12a34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   17c4e:	9002      	str	r0, [sp, #8]
   17c50:	e7ff      	b.n	17c52 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x28>
   17c52:	9802      	ldr	r0, [sp, #8]
   17c54:	9904      	ldr	r1, [sp, #16]
   17c56:	f000 f962 	bl	17f1e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   17c5a:	e7ff      	b.n	17c5c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x32>
        self.len += 1;
   17c5c:	9805      	ldr	r0, [sp, #20]
   17c5e:	6801      	ldr	r1, [r0, #0]
   17c60:	1c4a      	adds	r2, r1, #1
   17c62:	4613      	mov	r3, r2
   17c64:	428a      	cmp	r2, r1
   17c66:	9301      	str	r3, [sp, #4]
   17c68:	d305      	bcc.n	17c76 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x4c>
   17c6a:	e7ff      	b.n	17c6c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x42>
   17c6c:	9801      	ldr	r0, [sp, #4]
   17c6e:	9905      	ldr	r1, [sp, #20]
   17c70:	6008      	str	r0, [r1, #0]
    }
   17c72:	b00a      	add	sp, #40	; 0x28
   17c74:	bd80      	pop	{r7, pc}
        self.len += 1;
   17c76:	f248 3060 	movw	r0, #33632	; 0x8360
   17c7a:	f2c0 0002 	movt	r0, #2
   17c7e:	f248 3248 	movw	r2, #33608	; 0x8348
   17c82:	f2c0 0202 	movt	r2, #2
   17c86:	211c      	movs	r1, #28
   17c88:	f000 fd08 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17c8c:	defe      	udf	#254	; 0xfe

00017c8e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   17c8e:	b580      	push	{r7, lr}
   17c90:	b094      	sub	sp, #80	; 0x50
   17c92:	900e      	str	r0, [sp, #56]	; 0x38
   17c94:	910f      	str	r1, [sp, #60]	; 0x3c
   17c96:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   17c98:	6803      	ldr	r3, [r0, #0]
   17c9a:	9009      	str	r0, [sp, #36]	; 0x24
   17c9c:	4608      	mov	r0, r1
   17c9e:	9108      	str	r1, [sp, #32]
   17ca0:	4611      	mov	r1, r2
   17ca2:	9207      	str	r2, [sp, #28]
   17ca4:	9306      	str	r3, [sp, #24]
   17ca6:	f7fa ff55 	bl	12b54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   17caa:	9005      	str	r0, [sp, #20]
   17cac:	e7ff      	b.n	17cae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x20>
   17cae:	9806      	ldr	r0, [sp, #24]
   17cb0:	9905      	ldr	r1, [sp, #20]
   17cb2:	1842      	adds	r2, r0, r1
   17cb4:	4613      	mov	r3, r2
   17cb6:	4282      	cmp	r2, r0
   17cb8:	9304      	str	r3, [sp, #16]
   17cba:	d33f      	bcc.n	17d3c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xae>
   17cbc:	e7ff      	b.n	17cbe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x30>
   17cbe:	9809      	ldr	r0, [sp, #36]	; 0x24
   17cc0:	f000 f8b7 	bl	17e32 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   17cc4:	9003      	str	r0, [sp, #12]
   17cc6:	e7ff      	b.n	17cc8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x3a>
   17cc8:	9804      	ldr	r0, [sp, #16]
   17cca:	9903      	ldr	r1, [sp, #12]
   17ccc:	4288      	cmp	r0, r1
   17cce:	d807      	bhi.n	17ce0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x52>
   17cd0:	e7ff      	b.n	17cd2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x44>
            for elem in other {
   17cd2:	9808      	ldr	r0, [sp, #32]
   17cd4:	9907      	ldr	r1, [sp, #28]
   17cd6:	f7f1 f9df 	bl	9098 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   17cda:	9002      	str	r0, [sp, #8]
   17cdc:	9101      	str	r1, [sp, #4]
   17cde:	e003      	b.n	17ce8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x5a>
   17ce0:	2001      	movs	r0, #1
            Err(())
   17ce2:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   17ce6:	e025      	b.n	17d34 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   17ce8:	9802      	ldr	r0, [sp, #8]
   17cea:	900b      	str	r0, [sp, #44]	; 0x2c
   17cec:	9901      	ldr	r1, [sp, #4]
   17cee:	910c      	str	r1, [sp, #48]	; 0x30
   17cf0:	e7ff      	b.n	17cf2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
   17cf2:	a80b      	add	r0, sp, #44	; 0x2c
   17cf4:	f7fa fb00 	bl	122f8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   17cf8:	900d      	str	r0, [sp, #52]	; 0x34
   17cfa:	e7ff      	b.n	17cfc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x6e>
   17cfc:	980d      	ldr	r0, [sp, #52]	; 0x34
   17cfe:	2800      	cmp	r0, #0
   17d00:	4601      	mov	r1, r0
   17d02:	bf18      	it	ne
   17d04:	2101      	movne	r1, #1
   17d06:	2800      	cmp	r0, #0
   17d08:	d001      	beq.n	17d0e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x80>
   17d0a:	e7ff      	b.n	17d0c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x7e>
   17d0c:	e004      	b.n	17d18 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x8a>
   17d0e:	2000      	movs	r0, #0
            Ok(())
   17d10:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   17d14:	e00e      	b.n	17d34 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   17d16:	defe      	udf	#254	; 0xfe
   17d18:	980d      	ldr	r0, [sp, #52]	; 0x34
   17d1a:	9011      	str	r0, [sp, #68]	; 0x44
   17d1c:	9012      	str	r0, [sp, #72]	; 0x48
   17d1e:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   17d20:	f000 f909 	bl	17f36 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   17d24:	9000      	str	r0, [sp, #0]
   17d26:	e7ff      	b.n	17d28 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x9a>
   17d28:	9809      	ldr	r0, [sp, #36]	; 0x24
   17d2a:	9900      	ldr	r1, [sp, #0]
   17d2c:	f7ff ff7d 	bl	17c2a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>
   17d30:	e7ff      	b.n	17d32 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa4>
            for elem in other {
   17d32:	e7de      	b.n	17cf2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
    }
   17d34:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   17d38:	b014      	add	sp, #80	; 0x50
   17d3a:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   17d3c:	f248 3060 	movw	r0, #33632	; 0x8360
   17d40:	f2c0 0002 	movt	r0, #2
   17d44:	f248 327c 	movw	r2, #33660	; 0x837c
   17d48:	f2c0 0202 	movt	r2, #2
   17d4c:	211c      	movs	r1, #28
   17d4e:	f000 fca5 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17d52:	defe      	udf	#254	; 0xfe

00017d54 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   17d54:	b580      	push	{r7, lr}
   17d56:	b088      	sub	sp, #32
   17d58:	460a      	mov	r2, r1
   17d5a:	9006      	str	r0, [sp, #24]
   17d5c:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   17d60:	6801      	ldr	r1, [r0, #0]
   17d62:	9004      	str	r0, [sp, #16]
   17d64:	9203      	str	r2, [sp, #12]
   17d66:	9102      	str	r1, [sp, #8]
   17d68:	f000 f859 	bl	17e1e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   17d6c:	9001      	str	r0, [sp, #4]
   17d6e:	e7ff      	b.n	17d70 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   17d70:	9802      	ldr	r0, [sp, #8]
   17d72:	9901      	ldr	r1, [sp, #4]
   17d74:	4288      	cmp	r0, r1
   17d76:	d307      	bcc.n	17d88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   17d78:	e7ff      	b.n	17d7a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   17d7a:	9803      	ldr	r0, [sp, #12]
   17d7c:	f88d 0015 	strb.w	r0, [sp, #21]
   17d80:	2101      	movs	r1, #1
   17d82:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   17d86:	e008      	b.n	17d9a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   17d88:	9804      	ldr	r0, [sp, #16]
   17d8a:	9903      	ldr	r1, [sp, #12]
   17d8c:	f7ff ff1b 	bl	17bc6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   17d90:	e7ff      	b.n	17d92 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   17d92:	2000      	movs	r0, #0
            Ok(())
   17d94:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   17d98:	e7ff      	b.n	17d9a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   17d9a:	f89d 0014 	ldrb.w	r0, [sp, #20]
   17d9e:	f89d 1015 	ldrb.w	r1, [sp, #21]
   17da2:	b008      	add	sp, #32
   17da4:	bd80      	pop	{r7, pc}

00017da6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   17da6:	b580      	push	{r7, lr}
   17da8:	b082      	sub	sp, #8
   17daa:	9001      	str	r0, [sp, #4]
   17dac:	2100      	movs	r1, #0
        self.truncate(0);
   17dae:	f000 f880 	bl	17eb2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   17db2:	e7ff      	b.n	17db4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   17db4:	b002      	add	sp, #8
   17db6:	bd80      	pop	{r7, pc}

00017db8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>:
    pub(crate) fn clear(&mut self) {
   17db8:	b580      	push	{r7, lr}
   17dba:	b082      	sub	sp, #8
   17dbc:	9001      	str	r0, [sp, #4]
   17dbe:	2100      	movs	r1, #0
        self.truncate(0);
   17dc0:	f000 f841 	bl	17e46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>
   17dc4:	e7ff      	b.n	17dc6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E+0xe>
    }
   17dc6:	b002      	add	sp, #8
   17dc8:	bd80      	pop	{r7, pc}

00017dca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   17dca:	b580      	push	{r7, lr}
   17dcc:	b088      	sub	sp, #32
   17dce:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   17dd0:	1d01      	adds	r1, r0, #4
   17dd2:	9106      	str	r1, [sp, #24]
   17dd4:	9107      	str	r1, [sp, #28]
   17dd6:	9004      	str	r0, [sp, #16]
   17dd8:	9103      	str	r1, [sp, #12]
   17dda:	e7ff      	b.n	17ddc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x12>
   17ddc:	9804      	ldr	r0, [sp, #16]
   17dde:	6801      	ldr	r1, [r0, #0]
   17de0:	9803      	ldr	r0, [sp, #12]
   17de2:	f7fb faca 	bl	1337a <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   17de6:	9002      	str	r0, [sp, #8]
   17de8:	9101      	str	r1, [sp, #4]
   17dea:	e7ff      	b.n	17dec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x22>
    }
   17dec:	9802      	ldr	r0, [sp, #8]
   17dee:	9901      	ldr	r1, [sp, #4]
   17df0:	b008      	add	sp, #32
   17df2:	bd80      	pop	{r7, pc}

00017df4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   17df4:	b580      	push	{r7, lr}
   17df6:	b088      	sub	sp, #32
   17df8:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   17dfa:	1d01      	adds	r1, r0, #4
   17dfc:	9106      	str	r1, [sp, #24]
   17dfe:	9107      	str	r1, [sp, #28]
   17e00:	9004      	str	r0, [sp, #16]
   17e02:	9103      	str	r1, [sp, #12]
   17e04:	e7ff      	b.n	17e06 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   17e06:	9804      	ldr	r0, [sp, #16]
   17e08:	6801      	ldr	r1, [r0, #0]
   17e0a:	9803      	ldr	r0, [sp, #12]
   17e0c:	f7fb fab5 	bl	1337a <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   17e10:	9002      	str	r0, [sp, #8]
   17e12:	9101      	str	r1, [sp, #4]
   17e14:	e7ff      	b.n	17e16 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   17e16:	9802      	ldr	r0, [sp, #8]
   17e18:	9901      	ldr	r1, [sp, #4]
   17e1a:	b008      	add	sp, #32
   17e1c:	bd80      	pop	{r7, pc}

00017e1e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   17e1e:	b580      	push	{r7, lr}
   17e20:	b082      	sub	sp, #8
   17e22:	9001      	str	r0, [sp, #4]
        N::to_usize()
   17e24:	f000 f964 	bl	180f0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   17e28:	9000      	str	r0, [sp, #0]
   17e2a:	e7ff      	b.n	17e2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   17e2c:	9800      	ldr	r0, [sp, #0]
   17e2e:	b002      	add	sp, #8
   17e30:	bd80      	pop	{r7, pc}

00017e32 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>:
    pub(crate) fn capacity(&self) -> usize {
   17e32:	b580      	push	{r7, lr}
   17e34:	b082      	sub	sp, #8
   17e36:	9001      	str	r0, [sp, #4]
        N::to_usize()
   17e38:	f000 f8b2 	bl	17fa0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>
   17e3c:	9000      	str	r0, [sp, #0]
   17e3e:	e7ff      	b.n	17e40 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE+0xe>
    }
   17e40:	9800      	ldr	r0, [sp, #0]
   17e42:	b002      	add	sp, #8
   17e44:	bd80      	pop	{r7, pc}

00017e46 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   17e46:	b580      	push	{r7, lr}
   17e48:	b08a      	sub	sp, #40	; 0x28
   17e4a:	9007      	str	r0, [sp, #28]
   17e4c:	9108      	str	r1, [sp, #32]
   17e4e:	9106      	str	r1, [sp, #24]
   17e50:	9005      	str	r0, [sp, #20]
   17e52:	e7ff      	b.n	17e54 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
            while len < self.len {
   17e54:	9805      	ldr	r0, [sp, #20]
   17e56:	6801      	ldr	r1, [r0, #0]
   17e58:	9a06      	ldr	r2, [sp, #24]
   17e5a:	428a      	cmp	r2, r1
   17e5c:	d302      	bcc.n	17e64 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1e>
   17e5e:	e7ff      	b.n	17e60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1a>
    }
   17e60:	b00a      	add	sp, #40	; 0x28
   17e62:	bd80      	pop	{r7, pc}
                self.len -= 1;
   17e64:	9805      	ldr	r0, [sp, #20]
   17e66:	6801      	ldr	r1, [r0, #0]
   17e68:	1e4a      	subs	r2, r1, #1
   17e6a:	2901      	cmp	r1, #1
   17e6c:	9204      	str	r2, [sp, #16]
   17e6e:	d314      	bcc.n	17e9a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x54>
   17e70:	e7ff      	b.n	17e72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x2c>
   17e72:	9804      	ldr	r0, [sp, #16]
   17e74:	9905      	ldr	r1, [sp, #20]
   17e76:	6008      	str	r0, [r1, #0]
                let len = self.len;
   17e78:	680a      	ldr	r2, [r1, #0]
   17e7a:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   17e7c:	4608      	mov	r0, r1
   17e7e:	9203      	str	r2, [sp, #12]
   17e80:	f7ff fe8c 	bl	17b9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>
   17e84:	9002      	str	r0, [sp, #8]
   17e86:	9101      	str	r1, [sp, #4]
   17e88:	e7ff      	b.n	17e8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x44>
   17e8a:	9802      	ldr	r0, [sp, #8]
   17e8c:	9901      	ldr	r1, [sp, #4]
   17e8e:	9a03      	ldr	r2, [sp, #12]
   17e90:	f7fa fe4e 	bl	12b30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   17e94:	e7ff      	b.n	17e96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x50>
   17e96:	e7ff      	b.n	17e98 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x52>
            while len < self.len {
   17e98:	e7dc      	b.n	17e54 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
                self.len -= 1;
   17e9a:	f248 30a0 	movw	r0, #33696	; 0x83a0
   17e9e:	f2c0 0002 	movt	r0, #2
   17ea2:	f248 328c 	movw	r2, #33676	; 0x838c
   17ea6:	f2c0 0202 	movt	r2, #2
   17eaa:	2121      	movs	r1, #33	; 0x21
   17eac:	f000 fbf6 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17eb0:	defe      	udf	#254	; 0xfe

00017eb2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   17eb2:	b580      	push	{r7, lr}
   17eb4:	b08a      	sub	sp, #40	; 0x28
   17eb6:	9007      	str	r0, [sp, #28]
   17eb8:	9108      	str	r1, [sp, #32]
   17eba:	9106      	str	r1, [sp, #24]
   17ebc:	9005      	str	r0, [sp, #20]
   17ebe:	e7ff      	b.n	17ec0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   17ec0:	9805      	ldr	r0, [sp, #20]
   17ec2:	6801      	ldr	r1, [r0, #0]
   17ec4:	9a06      	ldr	r2, [sp, #24]
   17ec6:	428a      	cmp	r2, r1
   17ec8:	d302      	bcc.n	17ed0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   17eca:	e7ff      	b.n	17ecc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   17ecc:	b00a      	add	sp, #40	; 0x28
   17ece:	bd80      	pop	{r7, pc}
                self.len -= 1;
   17ed0:	9805      	ldr	r0, [sp, #20]
   17ed2:	6801      	ldr	r1, [r0, #0]
   17ed4:	1e4a      	subs	r2, r1, #1
   17ed6:	2901      	cmp	r1, #1
   17ed8:	9204      	str	r2, [sp, #16]
   17eda:	d314      	bcc.n	17f06 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   17edc:	e7ff      	b.n	17ede <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   17ede:	9804      	ldr	r0, [sp, #16]
   17ee0:	9905      	ldr	r1, [sp, #20]
   17ee2:	6008      	str	r0, [r1, #0]
                let len = self.len;
   17ee4:	680a      	ldr	r2, [r1, #0]
   17ee6:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   17ee8:	4608      	mov	r0, r1
   17eea:	9203      	str	r2, [sp, #12]
   17eec:	f7ff fe41 	bl	17b72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   17ef0:	9002      	str	r0, [sp, #8]
   17ef2:	9101      	str	r1, [sp, #4]
   17ef4:	e7ff      	b.n	17ef6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   17ef6:	9802      	ldr	r0, [sp, #8]
   17ef8:	9901      	ldr	r1, [sp, #4]
   17efa:	9a03      	ldr	r2, [sp, #12]
   17efc:	f7fa fe18 	bl	12b30 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   17f00:	e7ff      	b.n	17f02 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   17f02:	e7ff      	b.n	17f04 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   17f04:	e7dc      	b.n	17ec0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   17f06:	f248 30a0 	movw	r0, #33696	; 0x83a0
   17f0a:	f2c0 0002 	movt	r0, #2
   17f0e:	f248 328c 	movw	r2, #33676	; 0x838c
   17f12:	f2c0 0202 	movt	r2, #2
   17f16:	2121      	movs	r1, #33	; 0x21
   17f18:	f000 fbc0 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17f1c:	defe      	udf	#254	; 0xfe

00017f1e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   17f1e:	b580      	push	{r7, lr}
   17f20:	b084      	sub	sp, #16
   17f22:	460a      	mov	r2, r1
   17f24:	9002      	str	r0, [sp, #8]
   17f26:	f88d 100f 	strb.w	r1, [sp, #15]
   17f2a:	9201      	str	r2, [sp, #4]
   17f2c:	f7f1 f93c 	bl	91a8 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   17f30:	e7ff      	b.n	17f32 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   17f32:	b004      	add	sp, #16
   17f34:	bd80      	pop	{r7, pc}

00017f36 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   17f36:	b081      	sub	sp, #4
   17f38:	9000      	str	r0, [sp, #0]
   17f3a:	7800      	ldrb	r0, [r0, #0]
   17f3c:	b001      	add	sp, #4
   17f3e:	4770      	bx	lr

00017f40 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    fn to_usize() -> usize {
   17f40:	b580      	push	{r7, lr}
   17f42:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17f44:	f000 fa8a 	bl	1845c <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17f48:	9003      	str	r0, [sp, #12]
   17f4a:	e7ff      	b.n	17f4c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   17f4c:	9803      	ldr	r0, [sp, #12]
   17f4e:	f000 fa8b 	bl	18468 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17f52:	9002      	str	r0, [sp, #8]
   17f54:	e7ff      	b.n	17f56 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   17f56:	f000 f8cb 	bl	180f0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   17f5a:	9001      	str	r0, [sp, #4]
   17f5c:	e7ff      	b.n	17f5e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   17f5e:	9801      	ldr	r0, [sp, #4]
   17f60:	0041      	lsls	r1, r0, #1
   17f62:	9100      	str	r1, [sp, #0]
   17f64:	e7ff      	b.n	17f66 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   17f66:	9802      	ldr	r0, [sp, #8]
   17f68:	9900      	ldr	r1, [sp, #0]
   17f6a:	4308      	orrs	r0, r1
    }
   17f6c:	b004      	add	sp, #16
   17f6e:	bd80      	pop	{r7, pc}

00017f70 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   17f70:	b580      	push	{r7, lr}
   17f72:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17f74:	f000 fa72 	bl	1845c <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17f78:	9003      	str	r0, [sp, #12]
   17f7a:	e7ff      	b.n	17f7c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   17f7c:	9803      	ldr	r0, [sp, #12]
   17f7e:	f000 fa73 	bl	18468 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17f82:	9002      	str	r0, [sp, #8]
   17f84:	e7ff      	b.n	17f86 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   17f86:	f000 f86b 	bl	18060 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   17f8a:	9001      	str	r0, [sp, #4]
   17f8c:	e7ff      	b.n	17f8e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   17f8e:	9801      	ldr	r0, [sp, #4]
   17f90:	0041      	lsls	r1, r0, #1
   17f92:	9100      	str	r1, [sp, #0]
   17f94:	e7ff      	b.n	17f96 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   17f96:	9802      	ldr	r0, [sp, #8]
   17f98:	9900      	ldr	r1, [sp, #0]
   17f9a:	4308      	orrs	r0, r1
    }
   17f9c:	b004      	add	sp, #16
   17f9e:	bd80      	pop	{r7, pc}

00017fa0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>:
    fn to_usize() -> usize {
   17fa0:	b580      	push	{r7, lr}
   17fa2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17fa4:	f000 fa5a 	bl	1845c <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17fa8:	9003      	str	r0, [sp, #12]
   17faa:	e7ff      	b.n	17fac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0xc>
   17fac:	9803      	ldr	r0, [sp, #12]
   17fae:	f000 fa5b 	bl	18468 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17fb2:	9002      	str	r0, [sp, #8]
   17fb4:	e7ff      	b.n	17fb6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x16>
   17fb6:	f000 f8fb 	bl	181b0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>
   17fba:	9001      	str	r0, [sp, #4]
   17fbc:	e7ff      	b.n	17fbe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x1e>
   17fbe:	9801      	ldr	r0, [sp, #4]
   17fc0:	0041      	lsls	r1, r0, #1
   17fc2:	9100      	str	r1, [sp, #0]
   17fc4:	e7ff      	b.n	17fc6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x26>
   17fc6:	9802      	ldr	r0, [sp, #8]
   17fc8:	9900      	ldr	r1, [sp, #0]
   17fca:	4308      	orrs	r0, r1
    }
   17fcc:	b004      	add	sp, #16
   17fce:	bd80      	pop	{r7, pc}

00017fd0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   17fd0:	b580      	push	{r7, lr}
   17fd2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   17fd4:	f000 fa42 	bl	1845c <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   17fd8:	9003      	str	r0, [sp, #12]
   17fda:	e7ff      	b.n	17fdc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   17fdc:	9803      	ldr	r0, [sp, #12]
   17fde:	f000 fa43 	bl	18468 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   17fe2:	9002      	str	r0, [sp, #8]
   17fe4:	e7ff      	b.n	17fe6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   17fe6:	f000 f80b 	bl	18000 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   17fea:	9001      	str	r0, [sp, #4]
   17fec:	e7ff      	b.n	17fee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   17fee:	9801      	ldr	r0, [sp, #4]
   17ff0:	0041      	lsls	r1, r0, #1
   17ff2:	9100      	str	r1, [sp, #0]
   17ff4:	e7ff      	b.n	17ff6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   17ff6:	9802      	ldr	r0, [sp, #8]
   17ff8:	9900      	ldr	r1, [sp, #0]
   17ffa:	4308      	orrs	r0, r1
    }
   17ffc:	b004      	add	sp, #16
   17ffe:	bd80      	pop	{r7, pc}

00018000 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   18000:	b580      	push	{r7, lr}
   18002:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   18004:	f000 fa2a 	bl	1845c <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   18008:	9003      	str	r0, [sp, #12]
   1800a:	e7ff      	b.n	1800c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   1800c:	9803      	ldr	r0, [sp, #12]
   1800e:	f000 fa2b 	bl	18468 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   18012:	9002      	str	r0, [sp, #8]
   18014:	e7ff      	b.n	18016 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   18016:	f000 f89b 	bl	18150 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   1801a:	9001      	str	r0, [sp, #4]
   1801c:	e7ff      	b.n	1801e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   1801e:	9801      	ldr	r0, [sp, #4]
   18020:	0041      	lsls	r1, r0, #1
   18022:	9100      	str	r1, [sp, #0]
   18024:	e7ff      	b.n	18026 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   18026:	9802      	ldr	r0, [sp, #8]
   18028:	9900      	ldr	r1, [sp, #0]
   1802a:	4308      	orrs	r0, r1
    }
   1802c:	b004      	add	sp, #16
   1802e:	bd80      	pop	{r7, pc}

00018030 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   18030:	b580      	push	{r7, lr}
   18032:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   18034:	f000 fa12 	bl	1845c <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   18038:	9003      	str	r0, [sp, #12]
   1803a:	e7ff      	b.n	1803c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   1803c:	9803      	ldr	r0, [sp, #12]
   1803e:	f000 fa13 	bl	18468 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   18042:	9002      	str	r0, [sp, #8]
   18044:	e7ff      	b.n	18046 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   18046:	f7ff ff7b 	bl	17f40 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   1804a:	9001      	str	r0, [sp, #4]
   1804c:	e7ff      	b.n	1804e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   1804e:	9801      	ldr	r0, [sp, #4]
   18050:	0041      	lsls	r1, r0, #1
   18052:	9100      	str	r1, [sp, #0]
   18054:	e7ff      	b.n	18056 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   18056:	9802      	ldr	r0, [sp, #8]
   18058:	9900      	ldr	r1, [sp, #0]
   1805a:	4308      	orrs	r0, r1
    }
   1805c:	b004      	add	sp, #16
   1805e:	bd80      	pop	{r7, pc}

00018060 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   18060:	b580      	push	{r7, lr}
   18062:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   18064:	f000 f9fa 	bl	1845c <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   18068:	9003      	str	r0, [sp, #12]
   1806a:	e7ff      	b.n	1806c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   1806c:	9803      	ldr	r0, [sp, #12]
   1806e:	f000 f9fb 	bl	18468 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   18072:	9002      	str	r0, [sp, #8]
   18074:	e7ff      	b.n	18076 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   18076:	f000 f823 	bl	180c0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   1807a:	9001      	str	r0, [sp, #4]
   1807c:	e7ff      	b.n	1807e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   1807e:	9801      	ldr	r0, [sp, #4]
   18080:	0041      	lsls	r1, r0, #1
   18082:	9100      	str	r1, [sp, #0]
   18084:	e7ff      	b.n	18086 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   18086:	9802      	ldr	r0, [sp, #8]
   18088:	9900      	ldr	r1, [sp, #0]
   1808a:	4308      	orrs	r0, r1
    }
   1808c:	b004      	add	sp, #16
   1808e:	bd80      	pop	{r7, pc}

00018090 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   18090:	b580      	push	{r7, lr}
   18092:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   18094:	f000 f9e2 	bl	1845c <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   18098:	9003      	str	r0, [sp, #12]
   1809a:	e7ff      	b.n	1809c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   1809c:	9803      	ldr	r0, [sp, #12]
   1809e:	f000 f9e3 	bl	18468 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   180a2:	9002      	str	r0, [sp, #8]
   180a4:	e7ff      	b.n	180a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   180a6:	f000 f86b 	bl	18180 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   180aa:	9001      	str	r0, [sp, #4]
   180ac:	e7ff      	b.n	180ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   180ae:	9801      	ldr	r0, [sp, #4]
   180b0:	0041      	lsls	r1, r0, #1
   180b2:	9100      	str	r1, [sp, #0]
   180b4:	e7ff      	b.n	180b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   180b6:	9802      	ldr	r0, [sp, #8]
   180b8:	9900      	ldr	r1, [sp, #0]
   180ba:	4308      	orrs	r0, r1
    }
   180bc:	b004      	add	sp, #16
   180be:	bd80      	pop	{r7, pc}

000180c0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   180c0:	b580      	push	{r7, lr}
   180c2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   180c4:	f000 f9ca 	bl	1845c <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   180c8:	9003      	str	r0, [sp, #12]
   180ca:	e7ff      	b.n	180cc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   180cc:	9803      	ldr	r0, [sp, #12]
   180ce:	f000 f9cb 	bl	18468 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   180d2:	9002      	str	r0, [sp, #8]
   180d4:	e7ff      	b.n	180d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   180d6:	f000 f823 	bl	18120 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   180da:	9001      	str	r0, [sp, #4]
   180dc:	e7ff      	b.n	180de <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   180de:	9801      	ldr	r0, [sp, #4]
   180e0:	0041      	lsls	r1, r0, #1
   180e2:	9100      	str	r1, [sp, #0]
   180e4:	e7ff      	b.n	180e6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   180e6:	9802      	ldr	r0, [sp, #8]
   180e8:	9900      	ldr	r1, [sp, #0]
   180ea:	4308      	orrs	r0, r1
    }
   180ec:	b004      	add	sp, #16
   180ee:	bd80      	pop	{r7, pc}

000180f0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   180f0:	b580      	push	{r7, lr}
   180f2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   180f4:	f000 f9b4 	bl	18460 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   180f8:	9003      	str	r0, [sp, #12]
   180fa:	e7ff      	b.n	180fc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   180fc:	9803      	ldr	r0, [sp, #12]
   180fe:	f000 f9b3 	bl	18468 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   18102:	9002      	str	r0, [sp, #8]
   18104:	e7ff      	b.n	18106 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   18106:	f000 f9ad 	bl	18464 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   1810a:	9001      	str	r0, [sp, #4]
   1810c:	e7ff      	b.n	1810e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   1810e:	9801      	ldr	r0, [sp, #4]
   18110:	0041      	lsls	r1, r0, #1
   18112:	9100      	str	r1, [sp, #0]
   18114:	e7ff      	b.n	18116 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   18116:	9802      	ldr	r0, [sp, #8]
   18118:	9900      	ldr	r1, [sp, #0]
   1811a:	4308      	orrs	r0, r1
    }
   1811c:	b004      	add	sp, #16
   1811e:	bd80      	pop	{r7, pc}

00018120 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   18120:	b580      	push	{r7, lr}
   18122:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   18124:	f000 f99a 	bl	1845c <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   18128:	9003      	str	r0, [sp, #12]
   1812a:	e7ff      	b.n	1812c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   1812c:	9803      	ldr	r0, [sp, #12]
   1812e:	f000 f99b 	bl	18468 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   18132:	9002      	str	r0, [sp, #8]
   18134:	e7ff      	b.n	18136 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   18136:	f7ff ff7b 	bl	18030 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   1813a:	9001      	str	r0, [sp, #4]
   1813c:	e7ff      	b.n	1813e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   1813e:	9801      	ldr	r0, [sp, #4]
   18140:	0041      	lsls	r1, r0, #1
   18142:	9100      	str	r1, [sp, #0]
   18144:	e7ff      	b.n	18146 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   18146:	9802      	ldr	r0, [sp, #8]
   18148:	9900      	ldr	r1, [sp, #0]
   1814a:	4308      	orrs	r0, r1
    }
   1814c:	b004      	add	sp, #16
   1814e:	bd80      	pop	{r7, pc}

00018150 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   18150:	b580      	push	{r7, lr}
   18152:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   18154:	f000 f982 	bl	1845c <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   18158:	9003      	str	r0, [sp, #12]
   1815a:	e7ff      	b.n	1815c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   1815c:	9803      	ldr	r0, [sp, #12]
   1815e:	f000 f983 	bl	18468 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   18162:	9002      	str	r0, [sp, #8]
   18164:	e7ff      	b.n	18166 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   18166:	f7ff ff03 	bl	17f70 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   1816a:	9001      	str	r0, [sp, #4]
   1816c:	e7ff      	b.n	1816e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   1816e:	9801      	ldr	r0, [sp, #4]
   18170:	0041      	lsls	r1, r0, #1
   18172:	9100      	str	r1, [sp, #0]
   18174:	e7ff      	b.n	18176 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   18176:	9802      	ldr	r0, [sp, #8]
   18178:	9900      	ldr	r1, [sp, #0]
   1817a:	4308      	orrs	r0, r1
    }
   1817c:	b004      	add	sp, #16
   1817e:	bd80      	pop	{r7, pc}

00018180 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   18180:	b580      	push	{r7, lr}
   18182:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   18184:	f000 f96a 	bl	1845c <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   18188:	9003      	str	r0, [sp, #12]
   1818a:	e7ff      	b.n	1818c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   1818c:	9803      	ldr	r0, [sp, #12]
   1818e:	f000 f96b 	bl	18468 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   18192:	9002      	str	r0, [sp, #8]
   18194:	e7ff      	b.n	18196 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   18196:	f7ff ff1b 	bl	17fd0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   1819a:	9001      	str	r0, [sp, #4]
   1819c:	e7ff      	b.n	1819e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   1819e:	9801      	ldr	r0, [sp, #4]
   181a0:	0041      	lsls	r1, r0, #1
   181a2:	9100      	str	r1, [sp, #0]
   181a4:	e7ff      	b.n	181a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   181a6:	9802      	ldr	r0, [sp, #8]
   181a8:	9900      	ldr	r1, [sp, #0]
   181aa:	4308      	orrs	r0, r1
    }
   181ac:	b004      	add	sp, #16
   181ae:	bd80      	pop	{r7, pc}

000181b0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>:
    fn to_usize() -> usize {
   181b0:	b580      	push	{r7, lr}
   181b2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   181b4:	f000 f952 	bl	1845c <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   181b8:	9003      	str	r0, [sp, #12]
   181ba:	e7ff      	b.n	181bc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0xc>
   181bc:	9803      	ldr	r0, [sp, #12]
   181be:	f000 f953 	bl	18468 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   181c2:	9002      	str	r0, [sp, #8]
   181c4:	e7ff      	b.n	181c6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x16>
   181c6:	f7ff ff63 	bl	18090 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   181ca:	9001      	str	r0, [sp, #4]
   181cc:	e7ff      	b.n	181ce <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x1e>
   181ce:	9801      	ldr	r0, [sp, #4]
   181d0:	0041      	lsls	r1, r0, #1
   181d2:	9100      	str	r1, [sp, #0]
   181d4:	e7ff      	b.n	181d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x26>
   181d6:	9802      	ldr	r0, [sp, #8]
   181d8:	9900      	ldr	r1, [sp, #0]
   181da:	4308      	orrs	r0, r1
    }
   181dc:	b004      	add	sp, #16
   181de:	bd80      	pop	{r7, pc}

000181e0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   181e0:	2000      	movs	r0, #0
        0
    }
   181e2:	4770      	bx	lr

000181e4 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   181e4:	2001      	movs	r0, #1
        1
    }
   181e6:	4770      	bx	lr

000181e8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>:
   181e8:	b580      	push	{r7, lr}
   181ea:	b084      	sub	sp, #16
   181ec:	9002      	str	r0, [sp, #8]
   181ee:	9103      	str	r1, [sp, #12]
   181f0:	f000 f80f 	bl	18212 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>
   181f4:	9001      	str	r0, [sp, #4]
   181f6:	e7ff      	b.n	181f8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E+0x10>
   181f8:	9801      	ldr	r0, [sp, #4]
   181fa:	b004      	add	sp, #16
   181fc:	bd80      	pop	{r7, pc}

000181fe <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>:
   181fe:	b580      	push	{r7, lr}
   18200:	b082      	sub	sp, #8
   18202:	9001      	str	r0, [sp, #4]
   18204:	f000 f873 	bl	182ee <_ZN4core3ptr4read17h27a035d1812d8297E>
   18208:	9000      	str	r0, [sp, #0]
   1820a:	e7ff      	b.n	1820c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E+0xe>
   1820c:	9800      	ldr	r0, [sp, #0]
   1820e:	b002      	add	sp, #8
   18210:	bd80      	pop	{r7, pc}

00018212 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>:
   18212:	b084      	sub	sp, #16
   18214:	9001      	str	r0, [sp, #4]
   18216:	9102      	str	r1, [sp, #8]
   18218:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   1821c:	9003      	str	r0, [sp, #12]
   1821e:	9803      	ldr	r0, [sp, #12]
   18220:	9000      	str	r0, [sp, #0]
   18222:	e7ff      	b.n	18224 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE+0x12>
   18224:	9800      	ldr	r0, [sp, #0]
   18226:	b004      	add	sp, #16
   18228:	4770      	bx	lr

0001822a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>:
   1822a:	b082      	sub	sp, #8
   1822c:	9001      	str	r0, [sp, #4]
   1822e:	9000      	str	r0, [sp, #0]
   18230:	e7ff      	b.n	18232 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E+0x8>
   18232:	9800      	ldr	r0, [sp, #0]
   18234:	fab0 f180 	clz	r1, r0
   18238:	0948      	lsrs	r0, r1, #5
   1823a:	b002      	add	sp, #8
   1823c:	4770      	bx	lr

0001823e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE>:
   1823e:	b580      	push	{r7, lr}
   18240:	b088      	sub	sp, #32
   18242:	9006      	str	r0, [sp, #24]
   18244:	9107      	str	r1, [sp, #28]
   18246:	9004      	str	r0, [sp, #16]
   18248:	4608      	mov	r0, r1
   1824a:	9103      	str	r1, [sp, #12]
   1824c:	f001 f8c7 	bl	193de <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   18250:	9002      	str	r0, [sp, #8]
   18252:	e7ff      	b.n	18254 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x16>
   18254:	9802      	ldr	r0, [sp, #8]
   18256:	07c1      	lsls	r1, r0, #31
   18258:	2900      	cmp	r1, #0
   1825a:	d105      	bne.n	18268 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x2a>
   1825c:	e7ff      	b.n	1825e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x20>
   1825e:	9803      	ldr	r0, [sp, #12]
   18260:	f001 f8c1 	bl	193e6 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   18264:	9001      	str	r0, [sp, #4]
   18266:	e007      	b.n	18278 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x3a>
   18268:	9804      	ldr	r0, [sp, #16]
   1826a:	9903      	ldr	r1, [sp, #12]
   1826c:	f001 fe23 	bl	19eb6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>
   18270:	f88d 0017 	strb.w	r0, [sp, #23]
   18274:	e7ff      	b.n	18276 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x38>
   18276:	e015      	b.n	182a4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   18278:	9801      	ldr	r0, [sp, #4]
   1827a:	07c1      	lsls	r1, r0, #31
   1827c:	2900      	cmp	r1, #0
   1827e:	d107      	bne.n	18290 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x52>
   18280:	e7ff      	b.n	18282 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x44>
   18282:	9804      	ldr	r0, [sp, #16]
   18284:	9903      	ldr	r1, [sp, #12]
   18286:	f001 ffe7 	bl	1a258 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>
   1828a:	f88d 0017 	strb.w	r0, [sp, #23]
   1828e:	e007      	b.n	182a0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x62>
   18290:	9804      	ldr	r0, [sp, #16]
   18292:	9903      	ldr	r1, [sp, #12]
   18294:	f001 fe6e 	bl	19f74 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>
   18298:	f88d 0017 	strb.w	r0, [sp, #23]
   1829c:	e7ff      	b.n	1829e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x60>
   1829e:	e000      	b.n	182a2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   182a0:	e7ff      	b.n	182a2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   182a2:	e7ff      	b.n	182a4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   182a4:	f89d 0017 	ldrb.w	r0, [sp, #23]
   182a8:	b008      	add	sp, #32
   182aa:	bd80      	pop	{r7, pc}

000182ac <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>:
   182ac:	b081      	sub	sp, #4
   182ae:	4601      	mov	r1, r0
   182b0:	f88d 0003 	strb.w	r0, [sp, #3]
   182b4:	b2c0      	uxtb	r0, r0
   182b6:	b001      	add	sp, #4
   182b8:	4770      	bx	lr

000182ba <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>:
   182ba:	b086      	sub	sp, #24
   182bc:	9004      	str	r0, [sp, #16]
   182be:	9105      	str	r1, [sp, #20]
   182c0:	9002      	str	r0, [sp, #8]
   182c2:	9103      	str	r1, [sp, #12]
   182c4:	9802      	ldr	r0, [sp, #8]
   182c6:	9903      	ldr	r1, [sp, #12]
   182c8:	9000      	str	r0, [sp, #0]
   182ca:	9101      	str	r1, [sp, #4]
   182cc:	9800      	ldr	r0, [sp, #0]
   182ce:	9901      	ldr	r1, [sp, #4]
   182d0:	b006      	add	sp, #24
   182d2:	4770      	bx	lr

000182d4 <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>:
   182d4:	b086      	sub	sp, #24
   182d6:	9004      	str	r0, [sp, #16]
   182d8:	9105      	str	r1, [sp, #20]
   182da:	9002      	str	r0, [sp, #8]
   182dc:	9103      	str	r1, [sp, #12]
   182de:	9802      	ldr	r0, [sp, #8]
   182e0:	9903      	ldr	r1, [sp, #12]
   182e2:	9000      	str	r0, [sp, #0]
   182e4:	9101      	str	r1, [sp, #4]
   182e6:	9800      	ldr	r0, [sp, #0]
   182e8:	9901      	ldr	r1, [sp, #4]
   182ea:	b006      	add	sp, #24
   182ec:	4770      	bx	lr

000182ee <_ZN4core3ptr4read17h27a035d1812d8297E>:
   182ee:	b580      	push	{r7, lr}
   182f0:	b088      	sub	sp, #32
   182f2:	9003      	str	r0, [sp, #12]
   182f4:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   182f8:	f8ad 100a 	strh.w	r1, [sp, #10]
   182fc:	9001      	str	r0, [sp, #4]
   182fe:	e7ff      	b.n	18300 <_ZN4core3ptr4read17h27a035d1812d8297E+0x12>
   18300:	f10d 000a 	add.w	r0, sp, #10
   18304:	9006      	str	r0, [sp, #24]
   18306:	9007      	str	r0, [sp, #28]
   18308:	e7ff      	b.n	1830a <_ZN4core3ptr4read17h27a035d1812d8297E+0x1c>
   1830a:	f10d 010a 	add.w	r1, sp, #10
   1830e:	2201      	movs	r2, #1
   18310:	9801      	ldr	r0, [sp, #4]
   18312:	f000 f8b0 	bl	18476 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>
   18316:	e7ff      	b.n	18318 <_ZN4core3ptr4read17h27a035d1812d8297E+0x2a>
   18318:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1831c:	4601      	mov	r1, r0
   1831e:	f8ad 0014 	strh.w	r0, [sp, #20]
   18322:	f8ad 0016 	strh.w	r0, [sp, #22]
   18326:	9100      	str	r1, [sp, #0]
   18328:	e7ff      	b.n	1832a <_ZN4core3ptr4read17h27a035d1812d8297E+0x3c>
   1832a:	9800      	ldr	r0, [sp, #0]
   1832c:	b008      	add	sp, #32
   1832e:	bd80      	pop	{r7, pc}

00018330 <_ZN4core3ptr5write17h147d4643d861e927E>:
   18330:	b082      	sub	sp, #8
   18332:	460a      	mov	r2, r1
   18334:	9000      	str	r0, [sp, #0]
   18336:	f8ad 1006 	strh.w	r1, [sp, #6]
   1833a:	8001      	strh	r1, [r0, #0]
   1833c:	b002      	add	sp, #8
   1833e:	4770      	bx	lr

00018340 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E>:
   18340:	b5d0      	push	{r4, r6, r7, lr}
   18342:	af02      	add	r7, sp, #8
   18344:	b0b4      	sub	sp, #208	; 0xd0
   18346:	466c      	mov	r4, sp
   18348:	f36f 0404 	bfc	r4, #0, #5
   1834c:	46a5      	mov	sp, r4
   1834e:	9024      	str	r0, [sp, #144]	; 0x90
   18350:	9125      	str	r1, [sp, #148]	; 0x94
   18352:	9226      	str	r2, [sp, #152]	; 0x98
   18354:	2320      	movs	r3, #32
   18356:	932f      	str	r3, [sp, #188]	; 0xbc
   18358:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1835a:	9327      	str	r3, [sp, #156]	; 0x9c
   1835c:	920e      	str	r2, [sp, #56]	; 0x38
   1835e:	910d      	str	r1, [sp, #52]	; 0x34
   18360:	900c      	str	r0, [sp, #48]	; 0x30
   18362:	930b      	str	r3, [sp, #44]	; 0x2c
   18364:	e7ff      	b.n	18366 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x26>
   18366:	2000      	movs	r0, #0
   18368:	900f      	str	r0, [sp, #60]	; 0x3c
   1836a:	e7ff      	b.n	1836c <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x2c>
   1836c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1836e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   18370:	4408      	add	r0, r1
   18372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18374:	4290      	cmp	r0, r2
   18376:	d905      	bls.n	18384 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x44>
   18378:	e7ff      	b.n	1837a <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x3a>
   1837a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1837c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1837e:	4288      	cmp	r0, r1
   18380:	d334      	bcc.n	183ec <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xac>
   18382:	e067      	b.n	18454 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x114>
   18384:	e7ff      	b.n	18386 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x46>
   18386:	a810      	add	r0, sp, #64	; 0x40
   18388:	9032      	str	r0, [sp, #200]	; 0xc8
   1838a:	9033      	str	r0, [sp, #204]	; 0xcc
   1838c:	e7ff      	b.n	1838e <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x4e>
   1838e:	a810      	add	r0, sp, #64	; 0x40
   18390:	4601      	mov	r1, r0
   18392:	9028      	str	r0, [sp, #160]	; 0xa0
   18394:	980f      	ldr	r0, [sp, #60]	; 0x3c
   18396:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   18398:	900a      	str	r0, [sp, #40]	; 0x28
   1839a:	4610      	mov	r0, r2
   1839c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1839e:	9109      	str	r1, [sp, #36]	; 0x24
   183a0:	4619      	mov	r1, r3
   183a2:	f7fa fb47 	bl	12a34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   183a6:	4601      	mov	r1, r0
   183a8:	9029      	str	r0, [sp, #164]	; 0xa4
   183aa:	9108      	str	r1, [sp, #32]
   183ac:	e7ff      	b.n	183ae <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x6e>
   183ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
   183b0:	980d      	ldr	r0, [sp, #52]	; 0x34
   183b2:	f7fa fb3f 	bl	12a34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   183b6:	4601      	mov	r1, r0
   183b8:	902a      	str	r0, [sp, #168]	; 0xa8
   183ba:	9107      	str	r1, [sp, #28]
   183bc:	e7ff      	b.n	183be <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x7e>
   183be:	9808      	ldr	r0, [sp, #32]
   183c0:	9909      	ldr	r1, [sp, #36]	; 0x24
   183c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   183c4:	f7fa f9d2 	bl	1276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   183c8:	e7ff      	b.n	183ca <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x8a>
   183ca:	9807      	ldr	r0, [sp, #28]
   183cc:	9908      	ldr	r1, [sp, #32]
   183ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   183d0:	f7fa f9cc 	bl	1276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   183d4:	e7ff      	b.n	183d6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x96>
   183d6:	9809      	ldr	r0, [sp, #36]	; 0x24
   183d8:	9907      	ldr	r1, [sp, #28]
   183da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   183dc:	f7fa f9c6 	bl	1276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   183e0:	e7ff      	b.n	183e2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xa2>
   183e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   183e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   183e6:	4408      	add	r0, r1
   183e8:	900f      	str	r0, [sp, #60]	; 0x3c
   183ea:	e7bf      	b.n	1836c <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x2c>
   183ec:	e7ff      	b.n	183ee <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xae>
   183ee:	980f      	ldr	r0, [sp, #60]	; 0x3c
   183f0:	990e      	ldr	r1, [sp, #56]	; 0x38
   183f2:	1a08      	subs	r0, r1, r0
   183f4:	4602      	mov	r2, r0
   183f6:	902b      	str	r0, [sp, #172]	; 0xac
   183f8:	a81c      	add	r0, sp, #112	; 0x70
   183fa:	9030      	str	r0, [sp, #192]	; 0xc0
   183fc:	9031      	str	r0, [sp, #196]	; 0xc4
   183fe:	9206      	str	r2, [sp, #24]
   18400:	9005      	str	r0, [sp, #20]
   18402:	e7ff      	b.n	18404 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xc4>
   18404:	9805      	ldr	r0, [sp, #20]
   18406:	9905      	ldr	r1, [sp, #20]
   18408:	912c      	str	r1, [sp, #176]	; 0xb0
   1840a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1840c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1840e:	9004      	str	r0, [sp, #16]
   18410:	4610      	mov	r0, r2
   18412:	f7fa fb0f 	bl	12a34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   18416:	4601      	mov	r1, r0
   18418:	902d      	str	r0, [sp, #180]	; 0xb4
   1841a:	9103      	str	r1, [sp, #12]
   1841c:	e7ff      	b.n	1841e <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xde>
   1841e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   18420:	980d      	ldr	r0, [sp, #52]	; 0x34
   18422:	f7fa fb07 	bl	12a34 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   18426:	4601      	mov	r1, r0
   18428:	902e      	str	r0, [sp, #184]	; 0xb8
   1842a:	9102      	str	r1, [sp, #8]
   1842c:	e7ff      	b.n	1842e <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xee>
   1842e:	9803      	ldr	r0, [sp, #12]
   18430:	9904      	ldr	r1, [sp, #16]
   18432:	9a06      	ldr	r2, [sp, #24]
   18434:	f7fa f99a 	bl	1276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   18438:	e7ff      	b.n	1843a <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xfa>
   1843a:	9802      	ldr	r0, [sp, #8]
   1843c:	9903      	ldr	r1, [sp, #12]
   1843e:	9a06      	ldr	r2, [sp, #24]
   18440:	f7fa f994 	bl	1276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   18444:	e7ff      	b.n	18446 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x106>
   18446:	9804      	ldr	r0, [sp, #16]
   18448:	9902      	ldr	r1, [sp, #8]
   1844a:	9a06      	ldr	r2, [sp, #24]
   1844c:	f7fa f98e 	bl	1276c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   18450:	e7ff      	b.n	18452 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x112>
   18452:	e7ff      	b.n	18454 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x114>
   18454:	f1a7 0408 	sub.w	r4, r7, #8
   18458:	46a5      	mov	sp, r4
   1845a:	bdd0      	pop	{r4, r6, r7, pc}

0001845c <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
    fn to_u8() -> u8 {
   1845c:	2000      	movs	r0, #0
    }
   1845e:	4770      	bx	lr

00018460 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
    fn to_u8() -> u8 {
   18460:	2001      	movs	r0, #1
    }
   18462:	4770      	bx	lr

00018464 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   18464:	2000      	movs	r0, #0
    }
   18466:	4770      	bx	lr

00018468 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   18468:	b081      	sub	sp, #4
   1846a:	4601      	mov	r1, r0
   1846c:	f88d 0003 	strb.w	r0, [sp, #3]
   18470:	b2c0      	uxtb	r0, r0
   18472:	b001      	add	sp, #4
   18474:	4770      	bx	lr

00018476 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>:
   18476:	b580      	push	{r7, lr}
   18478:	b084      	sub	sp, #16
   1847a:	9001      	str	r0, [sp, #4]
   1847c:	9102      	str	r1, [sp, #8]
   1847e:	9203      	str	r2, [sp, #12]
   18480:	0052      	lsls	r2, r2, #1
   18482:	9000      	str	r0, [sp, #0]
   18484:	4608      	mov	r0, r1
   18486:	9900      	ldr	r1, [sp, #0]
   18488:	f006 fcdc 	bl	1ee44 <__aeabi_memcpy>
   1848c:	e7ff      	b.n	1848e <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E+0x18>
   1848e:	b004      	add	sp, #16
   18490:	bd80      	pop	{r7, pc}

00018492 <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   18492:	4770      	bx	lr

00018494 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   18494:	b5b0      	push	{r4, r5, r7, lr}
   18496:	b086      	sub	sp, #24
   18498:	460c      	mov	r4, r1
   1849a:	4605      	mov	r5, r0
   1849c:	f001 fb87 	bl	19bae <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   184a0:	b9a8      	cbnz	r0, 184ce <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   184a2:	f248 33c4 	movw	r3, #33732	; 0x83c4
   184a6:	2200      	movs	r2, #0
   184a8:	f2c0 0302 	movt	r3, #2
   184ac:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   184b0:	9205      	str	r2, [sp, #20]
   184b2:	9304      	str	r3, [sp, #16]
   184b4:	e9cd 2202 	strd	r2, r2, [sp, #8]
   184b8:	2201      	movs	r2, #1
   184ba:	9201      	str	r2, [sp, #4]
   184bc:	f248 4288 	movw	r2, #33928	; 0x8488
   184c0:	f2c0 0202 	movt	r2, #2
   184c4:	9200      	str	r2, [sp, #0]
   184c6:	466a      	mov	r2, sp
   184c8:	f000 fbe0 	bl	18c8c <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   184cc:	b110      	cbz	r0, 184d4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   184ce:	2001      	movs	r0, #1
   184d0:	b006      	add	sp, #24
   184d2:	bdb0      	pop	{r4, r5, r7, pc}
   184d4:	1d28      	adds	r0, r5, #4
   184d6:	4621      	mov	r1, r4
   184d8:	b006      	add	sp, #24
   184da:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   184de:	f001 bb66 	b.w	19bae <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

000184e2 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   184e2:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   184e6:	f243 6134 	movw	r1, #13876	; 0x3634
   184ea:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   184ee:	f6cd 0131 	movt	r1, #55345	; 0xd831
   184f2:	4770      	bx	lr

000184f4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   184f4:	b570      	push	{r4, r5, r6, lr}
   184f6:	460e      	mov	r6, r1
   184f8:	3909      	subs	r1, #9
   184fa:	4604      	mov	r4, r0
   184fc:	291e      	cmp	r1, #30
   184fe:	d818      	bhi.n	18532 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   18500:	2002      	movs	r0, #2
   18502:	2574      	movs	r5, #116	; 0x74
   18504:	e8df f001 	tbb	[pc, r1]
   18508:	1c1c1019 	.word	0x1c1c1019
   1850c:	1c1c1c29 	.word	0x1c1c1c29
   18510:	1c1c1c1c 	.word	0x1c1c1c1c
   18514:	1c1c1c1c 	.word	0x1c1c1c1c
   18518:	1c1c1c1c 	.word	0x1c1c1c1c
   1851c:	1c1c1c1c 	.word	0x1c1c1c1c
   18520:	1c1c171c 	.word	0x1c1c171c
   18524:	00171c1c 	.word	0x00171c1c
   18528:	2002      	movs	r0, #2
   1852a:	256e      	movs	r5, #110	; 0x6e
   1852c:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   18530:	bd70      	pop	{r4, r5, r6, pc}
   18532:	2e5c      	cmp	r6, #92	; 0x5c
   18534:	d104      	bne.n	18540 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   18536:	2002      	movs	r0, #2
   18538:	4635      	mov	r5, r6
   1853a:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   1853e:	bd70      	pop	{r4, r5, r6, pc}
   18540:	2a00      	cmp	r2, #0
   18542:	d040      	beq.n	185c6 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   18544:	f3c6 1083 	ubfx	r0, r6, #6, #4
   18548:	0ab1      	lsrs	r1, r6, #10
   1854a:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   1854e:	d309      	bcc.n	18564 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   18550:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   18554:	d137      	bne.n	185c6 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   18556:	211e      	movs	r1, #30
   18558:	e00b      	b.n	18572 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   1855a:	2002      	movs	r0, #2
   1855c:	2572      	movs	r5, #114	; 0x72
   1855e:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   18562:	bd70      	pop	{r4, r5, r6, pc}
   18564:	f648 62fc 	movw	r2, #36604	; 0x8efc
   18568:	f2c0 0202 	movt	r2, #2
   1856c:	5c51      	ldrb	r1, [r2, r1]
   1856e:	291e      	cmp	r1, #30
   18570:	d842      	bhi.n	185f8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   18572:	f648 7277 	movw	r2, #36727	; 0x8f77
   18576:	f2c0 0202 	movt	r2, #2
   1857a:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   1857e:	5c09      	ldrb	r1, [r1, r0]
   18580:	298b      	cmp	r1, #139	; 0x8b
   18582:	d231      	bcs.n	185e8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   18584:	f249 1068 	movw	r0, #37224	; 0x9168
   18588:	2301      	movs	r3, #1
   1858a:	f2c0 0002 	movt	r0, #2
   1858e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   18592:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   18596:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   1859a:	f8d2 c004 	ldr.w	ip, [r2, #4]
   1859e:	fa03 f501 	lsl.w	r5, r3, r1
   185a2:	f1b1 0220 	subs.w	r2, r1, #32
   185a6:	f1c1 0120 	rsb	r1, r1, #32
   185aa:	bf58      	it	pl
   185ac:	2500      	movpl	r5, #0
   185ae:	2a00      	cmp	r2, #0
   185b0:	ea00 0005 	and.w	r0, r0, r5
   185b4:	fa23 f101 	lsr.w	r1, r3, r1
   185b8:	bf58      	it	pl
   185ba:	fa03 f102 	lslpl.w	r1, r3, r2
   185be:	ea01 010c 	and.w	r1, r1, ip
   185c2:	4308      	orrs	r0, r1
   185c4:	d105      	bne.n	185d2 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   185c6:	4630      	mov	r0, r6
   185c8:	f001 f9a5 	bl	19916 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   185cc:	b108      	cbz	r0, 185d2 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   185ce:	2001      	movs	r0, #1
   185d0:	e7b2      	b.n	18538 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   185d2:	f046 0001 	orr.w	r0, r6, #1
   185d6:	2107      	movs	r1, #7
   185d8:	fab0 f080 	clz	r0, r0
   185dc:	f04f 0e05 	mov.w	lr, #5
   185e0:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   185e4:	2003      	movs	r0, #3
   185e6:	e7a7      	b.n	18538 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   185e8:	f648 60ec 	movw	r0, #36588	; 0x8eec
   185ec:	228b      	movs	r2, #139	; 0x8b
   185ee:	f2c0 0002 	movt	r0, #2
   185f2:	f000 f869 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   185f6:	defe      	udf	#254	; 0xfe
   185f8:	f648 60dc 	movw	r0, #36572	; 0x8edc
   185fc:	221f      	movs	r2, #31
   185fe:	f2c0 0002 	movt	r0, #2
   18602:	f000 f861 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   18606:	defe      	udf	#254	; 0xfe

00018608 <_ZN4core6option13expect_failed17had6579abaad447b4E>:
   18608:	b08a      	sub	sp, #40	; 0x28
   1860a:	e9cd 0100 	strd	r0, r1, [sp]
   1860e:	2001      	movs	r0, #1
   18610:	a908      	add	r1, sp, #32
   18612:	9007      	str	r0, [sp, #28]
   18614:	9106      	str	r1, [sp, #24]
   18616:	2100      	movs	r1, #0
   18618:	9105      	str	r1, [sp, #20]
   1861a:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1861e:	f248 508c 	movw	r0, #34188	; 0x858c
   18622:	f2c0 0002 	movt	r0, #2
   18626:	4611      	mov	r1, r2
   18628:	9002      	str	r0, [sp, #8]
   1862a:	f24a 500b 	movw	r0, #42251	; 0xa50b
   1862e:	f2c0 0001 	movt	r0, #1
   18632:	9009      	str	r0, [sp, #36]	; 0x24
   18634:	4668      	mov	r0, sp
   18636:	9008      	str	r0, [sp, #32]
   18638:	a802      	add	r0, sp, #8
   1863a:	f000 f865 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1863e:	defe      	udf	#254	; 0xfe

00018640 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   18640:	b08e      	sub	sp, #56	; 0x38
   18642:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   18646:	2002      	movs	r0, #2
   18648:	a90a      	add	r1, sp, #40	; 0x28
   1864a:	9009      	str	r0, [sp, #36]	; 0x24
   1864c:	9108      	str	r1, [sp, #32]
   1864e:	2100      	movs	r1, #0
   18650:	9107      	str	r1, [sp, #28]
   18652:	e9cd 0105 	strd	r0, r1, [sp, #20]
   18656:	f248 5098 	movw	r0, #34200	; 0x8598
   1865a:	f2c0 0002 	movt	r0, #2
   1865e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   18662:	9004      	str	r0, [sp, #16]
   18664:	f24a 5001 	movw	r0, #42241	; 0xa501
   18668:	f2c0 0001 	movt	r0, #1
   1866c:	900d      	str	r0, [sp, #52]	; 0x34
   1866e:	a802      	add	r0, sp, #8
   18670:	900c      	str	r0, [sp, #48]	; 0x30
   18672:	f24a 500b 	movw	r0, #42251	; 0xa50b
   18676:	f2c0 0001 	movt	r0, #1
   1867a:	4661      	mov	r1, ip
   1867c:	900b      	str	r0, [sp, #44]	; 0x2c
   1867e:	4668      	mov	r0, sp
   18680:	900a      	str	r0, [sp, #40]	; 0x28
   18682:	a804      	add	r0, sp, #16
   18684:	f000 f840 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18688:	defe      	udf	#254	; 0xfe

0001868a <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   1868a:	68c0      	ldr	r0, [r0, #12]
   1868c:	4770      	bx	lr

0001868e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   1868e:	4770      	bx	lr

00018690 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   18690:	e9d0 2100 	ldrd	r2, r1, [r0]
   18694:	4610      	mov	r0, r2
   18696:	4770      	bx	lr

00018698 <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   18698:	6880      	ldr	r0, [r0, #8]
   1869a:	4770      	bx	lr

0001869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   1869c:	b088      	sub	sp, #32
   1869e:	4694      	mov	ip, r2
   186a0:	f248 32c4 	movw	r2, #33732	; 0x83c4
   186a4:	2300      	movs	r3, #0
   186a6:	f2c0 0202 	movt	r2, #2
   186aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   186ae:	4668      	mov	r0, sp
   186b0:	9305      	str	r3, [sp, #20]
   186b2:	4661      	mov	r1, ip
   186b4:	9204      	str	r2, [sp, #16]
   186b6:	2201      	movs	r2, #1
   186b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   186bc:	9201      	str	r2, [sp, #4]
   186be:	aa06      	add	r2, sp, #24
   186c0:	9200      	str	r2, [sp, #0]
   186c2:	f000 f821 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   186c6:	defe      	udf	#254	; 0xfe

000186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   186c8:	b08c      	sub	sp, #48	; 0x30
   186ca:	4603      	mov	r3, r0
   186cc:	e9cd 1200 	strd	r1, r2, [sp]
   186d0:	2002      	movs	r0, #2
   186d2:	a908      	add	r1, sp, #32
   186d4:	9007      	str	r0, [sp, #28]
   186d6:	9106      	str	r1, [sp, #24]
   186d8:	2100      	movs	r1, #0
   186da:	9105      	str	r1, [sp, #20]
   186dc:	e9cd 0103 	strd	r0, r1, [sp, #12]
   186e0:	f248 50cc 	movw	r0, #34252	; 0x85cc
   186e4:	f2c0 0002 	movt	r0, #2
   186e8:	4669      	mov	r1, sp
   186ea:	9002      	str	r0, [sp, #8]
   186ec:	f24a 401d 	movw	r0, #42013	; 0xa41d
   186f0:	f2c0 0001 	movt	r0, #1
   186f4:	900b      	str	r0, [sp, #44]	; 0x2c
   186f6:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   186fa:	a801      	add	r0, sp, #4
   186fc:	9008      	str	r0, [sp, #32]
   186fe:	a802      	add	r0, sp, #8
   18700:	4619      	mov	r1, r3
   18702:	f000 f801 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   18706:	defe      	udf	#254	; 0xfe

00018708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   18708:	b084      	sub	sp, #16
   1870a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1870e:	f248 50a8 	movw	r0, #34216	; 0x85a8
   18712:	f2c0 0002 	movt	r0, #2
   18716:	9001      	str	r0, [sp, #4]
   18718:	f248 30c4 	movw	r0, #33732	; 0x83c4
   1871c:	f2c0 0002 	movt	r0, #2
   18720:	9000      	str	r0, [sp, #0]
   18722:	4668      	mov	r0, sp
   18724:	f7ef ffd4 	bl	86d0 <rust_begin_unwind>
   18728:	defe      	udf	#254	; 0xfe

0001872a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   1872a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1872e:	b081      	sub	sp, #4
   18730:	2a00      	cmp	r2, #0
   18732:	f000 80fe 	beq.w	18932 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   18736:	4690      	mov	r8, r2
   18738:	468a      	mov	sl, r1
   1873a:	4681      	mov	r9, r0
   1873c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   18740:	7800      	ldrb	r0, [r0, #0]
   18742:	b948      	cbnz	r0, 18758 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   18744:	e014      	b.n	18770 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   18746:	44da      	add	sl, fp
   18748:	2c00      	cmp	r4, #0
   1874a:	46a0      	mov	r8, r4
   1874c:	f000 80f1 	beq.w	18932 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   18750:	f8d9 0008 	ldr.w	r0, [r9, #8]
   18754:	7800      	ldrb	r0, [r0, #0]
   18756:	b158      	cbz	r0, 18770 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   18758:	e9d9 0100 	ldrd	r0, r1, [r9]
   1875c:	2204      	movs	r2, #4
   1875e:	68cb      	ldr	r3, [r1, #12]
   18760:	f248 41e4 	movw	r1, #34020	; 0x84e4
   18764:	f2c0 0102 	movt	r1, #2
   18768:	4798      	blx	r3
   1876a:	2800      	cmp	r0, #0
   1876c:	f040 80e5 	bne.w	1893a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   18770:	f04f 0b00 	mov.w	fp, #0
   18774:	4641      	mov	r1, r8
   18776:	e008      	b.n	1878a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   18778:	ebb8 010b 	subs.w	r1, r8, fp
   1877c:	f04f 0000 	mov.w	r0, #0
   18780:	bf38      	it	cc
   18782:	4601      	movcc	r1, r0
   18784:	45c3      	cmp	fp, r8
   18786:	f200 80a5 	bhi.w	188d4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   1878a:	eb0a 0e0b 	add.w	lr, sl, fp
   1878e:	2000      	movs	r0, #0
   18790:	f01e 0203 	ands.w	r2, lr, #3
   18794:	bf18      	it	ne
   18796:	f1d2 0c04 	rsbsne	ip, r2, #4
   1879a:	d120      	bne.n	187de <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   1879c:	2908      	cmp	r1, #8
   1879e:	d357      	bcc.n	18850 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   187a0:	f1a1 0208 	sub.w	r2, r1, #8
   187a4:	4290      	cmp	r0, r2
   187a6:	d853      	bhi.n	18850 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   187a8:	f85e 3000 	ldr.w	r3, [lr, r0]
   187ac:	eb0e 0700 	add.w	r7, lr, r0
   187b0:	687f      	ldr	r7, [r7, #4]
   187b2:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   187b6:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   187ba:	ea26 0303 	bic.w	r3, r6, r3
   187be:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   187c2:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   187c6:	ea26 0707 	bic.w	r7, r6, r7
   187ca:	433b      	orrs	r3, r7
   187cc:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   187d0:	d102      	bne.n	187d8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   187d2:	3008      	adds	r0, #8
   187d4:	4290      	cmp	r0, r2
   187d6:	d9e7      	bls.n	187a8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   187d8:	4288      	cmp	r0, r1
   187da:	d939      	bls.n	18850 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   187dc:	e0b1      	b.n	18942 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   187de:	458c      	cmp	ip, r1
   187e0:	bf88      	it	hi
   187e2:	468c      	movhi	ip, r1
   187e4:	eb0e 060c 	add.w	r6, lr, ip
   187e8:	2000      	movs	r0, #0
   187ea:	4663      	mov	r3, ip
   187ec:	4677      	mov	r7, lr
   187ee:	b363      	cbz	r3, 1884a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   187f0:	463a      	mov	r2, r7
   187f2:	f812 4b01 	ldrb.w	r4, [r2], #1
   187f6:	f1b4 050a 	subs.w	r5, r4, #10
   187fa:	bf18      	it	ne
   187fc:	2501      	movne	r5, #1
   187fe:	4428      	add	r0, r5
   18800:	2c0a      	cmp	r4, #10
   18802:	d059      	beq.n	188b8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   18804:	42b2      	cmp	r2, r6
   18806:	d020      	beq.n	1884a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   18808:	787a      	ldrb	r2, [r7, #1]
   1880a:	f1b2 040a 	subs.w	r4, r2, #10
   1880e:	bf18      	it	ne
   18810:	2401      	movne	r4, #1
   18812:	4420      	add	r0, r4
   18814:	2a0a      	cmp	r2, #10
   18816:	d04f      	beq.n	188b8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   18818:	1cba      	adds	r2, r7, #2
   1881a:	42b2      	cmp	r2, r6
   1881c:	d015      	beq.n	1884a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   1881e:	78ba      	ldrb	r2, [r7, #2]
   18820:	f1b2 040a 	subs.w	r4, r2, #10
   18824:	bf18      	it	ne
   18826:	2401      	movne	r4, #1
   18828:	4420      	add	r0, r4
   1882a:	2a0a      	cmp	r2, #10
   1882c:	d044      	beq.n	188b8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   1882e:	1cfa      	adds	r2, r7, #3
   18830:	42b2      	cmp	r2, r6
   18832:	d00a      	beq.n	1884a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   18834:	78fa      	ldrb	r2, [r7, #3]
   18836:	3b04      	subs	r3, #4
   18838:	3704      	adds	r7, #4
   1883a:	f1b2 040a 	subs.w	r4, r2, #10
   1883e:	bf18      	it	ne
   18840:	2401      	movne	r4, #1
   18842:	4420      	add	r0, r4
   18844:	2a0a      	cmp	r2, #10
   18846:	d1d2      	bne.n	187ee <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   18848:	e036      	b.n	188b8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   1884a:	4660      	mov	r0, ip
   1884c:	2908      	cmp	r1, #8
   1884e:	d2a7      	bcs.n	187a0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   18850:	eb0e 0700 	add.w	r7, lr, r0
   18854:	eb0e 0201 	add.w	r2, lr, r1
   18858:	1a0e      	subs	r6, r1, r0
   1885a:	2100      	movs	r1, #0
   1885c:	b3ce      	cbz	r6, 188d2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   1885e:	463b      	mov	r3, r7
   18860:	f813 5b01 	ldrb.w	r5, [r3], #1
   18864:	f1b5 040a 	subs.w	r4, r5, #10
   18868:	bf18      	it	ne
   1886a:	2401      	movne	r4, #1
   1886c:	4421      	add	r1, r4
   1886e:	2d0a      	cmp	r5, #10
   18870:	d021      	beq.n	188b6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   18872:	4293      	cmp	r3, r2
   18874:	d02d      	beq.n	188d2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   18876:	787b      	ldrb	r3, [r7, #1]
   18878:	f1b3 050a 	subs.w	r5, r3, #10
   1887c:	bf18      	it	ne
   1887e:	2501      	movne	r5, #1
   18880:	4429      	add	r1, r5
   18882:	2b0a      	cmp	r3, #10
   18884:	d017      	beq.n	188b6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   18886:	1cbb      	adds	r3, r7, #2
   18888:	4293      	cmp	r3, r2
   1888a:	d022      	beq.n	188d2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   1888c:	78bb      	ldrb	r3, [r7, #2]
   1888e:	f1b3 050a 	subs.w	r5, r3, #10
   18892:	bf18      	it	ne
   18894:	2501      	movne	r5, #1
   18896:	4429      	add	r1, r5
   18898:	2b0a      	cmp	r3, #10
   1889a:	d00c      	beq.n	188b6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   1889c:	1cfb      	adds	r3, r7, #3
   1889e:	4293      	cmp	r3, r2
   188a0:	d017      	beq.n	188d2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   188a2:	78fb      	ldrb	r3, [r7, #3]
   188a4:	3e04      	subs	r6, #4
   188a6:	3704      	adds	r7, #4
   188a8:	f1b3 050a 	subs.w	r5, r3, #10
   188ac:	bf18      	it	ne
   188ae:	2501      	movne	r5, #1
   188b0:	4429      	add	r1, r5
   188b2:	2b0a      	cmp	r3, #10
   188b4:	d1d2      	bne.n	1885c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   188b6:	4408      	add	r0, r1
   188b8:	4458      	add	r0, fp
   188ba:	f100 0b01 	add.w	fp, r0, #1
   188be:	4540      	cmp	r0, r8
   188c0:	f4bf af5a 	bcs.w	18778 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   188c4:	f81a 0000 	ldrb.w	r0, [sl, r0]
   188c8:	280a      	cmp	r0, #10
   188ca:	f47f af55 	bne.w	18778 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   188ce:	2001      	movs	r0, #1
   188d0:	e001      	b.n	188d6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   188d2:	2000      	movs	r0, #0
   188d4:	46c3      	mov	fp, r8
   188d6:	f8d9 1008 	ldr.w	r1, [r9, #8]
   188da:	eba8 040b 	sub.w	r4, r8, fp
   188de:	7008      	strb	r0, [r1, #0]
   188e0:	fab4 f084 	clz	r0, r4
   188e4:	0942      	lsrs	r2, r0, #5
   188e6:	fabb f08b 	clz	r0, fp
   188ea:	0943      	lsrs	r3, r0, #5
   188ec:	e9d9 0100 	ldrd	r0, r1, [r9]
   188f0:	ea53 0602 	orrs.w	r6, r3, r2
   188f4:	d106      	bne.n	18904 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   188f6:	45d8      	cmp	r8, fp
   188f8:	d926      	bls.n	18948 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   188fa:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   188fe:	f112 0f41 	cmn.w	r2, #65	; 0x41
   18902:	dd21      	ble.n	18948 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   18904:	68cb      	ldr	r3, [r1, #12]
   18906:	4651      	mov	r1, sl
   18908:	465a      	mov	r2, fp
   1890a:	4798      	blx	r3
   1890c:	b9a8      	cbnz	r0, 1893a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   1890e:	2e00      	cmp	r6, #0
   18910:	f47f af19 	bne.w	18746 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   18914:	45d8      	cmp	r8, fp
   18916:	d905      	bls.n	18924 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   18918:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   1891c:	f110 0f41 	cmn.w	r0, #65	; 0x41
   18920:	f73f af11 	bgt.w	18746 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   18924:	4650      	mov	r0, sl
   18926:	4641      	mov	r1, r8
   18928:	465a      	mov	r2, fp
   1892a:	4643      	mov	r3, r8
   1892c:	f000 fe4d 	bl	195ca <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   18930:	defe      	udf	#254	; 0xfe
   18932:	2000      	movs	r0, #0
   18934:	b001      	add	sp, #4
   18936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1893a:	2001      	movs	r0, #1
   1893c:	b001      	add	sp, #4
   1893e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18942:	f000 fe20 	bl	19586 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18946:	defe      	udf	#254	; 0xfe
   18948:	4650      	mov	r0, sl
   1894a:	4641      	mov	r1, r8
   1894c:	2200      	movs	r2, #0
   1894e:	465b      	mov	r3, fp
   18950:	f000 fe3b 	bl	195ca <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   18954:	defe      	udf	#254	; 0xfe

00018956 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   18956:	b5f0      	push	{r4, r5, r6, r7, lr}
   18958:	b08d      	sub	sp, #52	; 0x34
   1895a:	4604      	mov	r4, r0
   1895c:	7a00      	ldrb	r0, [r0, #8]
   1895e:	b138      	cbz	r0, 18970 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   18960:	2001      	movs	r0, #1
   18962:	6861      	ldr	r1, [r4, #4]
   18964:	7220      	strb	r0, [r4, #8]
   18966:	1c48      	adds	r0, r1, #1
   18968:	6060      	str	r0, [r4, #4]
   1896a:	4620      	mov	r0, r4
   1896c:	b00d      	add	sp, #52	; 0x34
   1896e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18970:	4616      	mov	r6, r2
   18972:	460d      	mov	r5, r1
   18974:	e9d4 1200 	ldrd	r1, r2, [r4]
   18978:	7808      	ldrb	r0, [r1, #0]
   1897a:	0740      	lsls	r0, r0, #29
   1897c:	d419      	bmi.n	189b2 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   1897e:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   18982:	f248 51f6 	movw	r1, #34294	; 0x85f6
   18986:	f248 5cfa 	movw	ip, #34298	; 0x85fa
   1898a:	f2c0 0102 	movt	r1, #2
   1898e:	2a00      	cmp	r2, #0
   18990:	f2c0 0c02 	movt	ip, #2
   18994:	bf08      	it	eq
   18996:	4661      	moveq	r1, ip
   18998:	68db      	ldr	r3, [r3, #12]
   1899a:	f04f 0202 	mov.w	r2, #2
   1899e:	bf08      	it	eq
   189a0:	2201      	moveq	r2, #1
   189a2:	4798      	blx	r3
   189a4:	2800      	cmp	r0, #0
   189a6:	d1db      	bne.n	18960 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   189a8:	68f2      	ldr	r2, [r6, #12]
   189aa:	4628      	mov	r0, r5
   189ac:	6821      	ldr	r1, [r4, #0]
   189ae:	4790      	blx	r2
   189b0:	e7d7      	b.n	18962 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   189b2:	b95a      	cbnz	r2, 189cc <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   189b4:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   189b8:	2202      	movs	r2, #2
   189ba:	68cb      	ldr	r3, [r1, #12]
   189bc:	f248 51f8 	movw	r1, #34296	; 0x85f8
   189c0:	f2c0 0102 	movt	r1, #2
   189c4:	4798      	blx	r3
   189c6:	2800      	cmp	r0, #0
   189c8:	d1ca      	bne.n	18960 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   189ca:	6821      	ldr	r1, [r4, #0]
   189cc:	2001      	movs	r0, #1
   189ce:	f10d 030f 	add.w	r3, sp, #15
   189d2:	f88d 000f 	strb.w	r0, [sp, #15]
   189d6:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   189da:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   189de:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   189e2:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   189e6:	f891 1020 	ldrb.w	r1, [r1, #32]
   189ea:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   189ee:	a904      	add	r1, sp, #16
   189f0:	e9cd 0204 	strd	r0, r2, [sp, #16]
   189f4:	f248 50dc 	movw	r0, #34268	; 0x85dc
   189f8:	f2c0 0002 	movt	r0, #2
   189fc:	68f2      	ldr	r2, [r6, #12]
   189fe:	900b      	str	r0, [sp, #44]	; 0x2c
   18a00:	4668      	mov	r0, sp
   18a02:	900a      	str	r0, [sp, #40]	; 0x28
   18a04:	4628      	mov	r0, r5
   18a06:	e9cd 3708 	strd	r3, r7, [sp, #32]
   18a0a:	e9cd ce06 	strd	ip, lr, [sp, #24]
   18a0e:	4790      	blx	r2
   18a10:	2800      	cmp	r0, #0
   18a12:	d1a5      	bne.n	18960 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   18a14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   18a18:	2202      	movs	r2, #2
   18a1a:	68cb      	ldr	r3, [r1, #12]
   18a1c:	f248 51f4 	movw	r1, #34292	; 0x85f4
   18a20:	f2c0 0102 	movt	r1, #2
   18a24:	4798      	blx	r3
   18a26:	e79c      	b.n	18962 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

00018a28 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   18a28:	b5b0      	push	{r4, r5, r7, lr}
   18a2a:	4604      	mov	r4, r0
   18a2c:	7a05      	ldrb	r5, [r0, #8]
   18a2e:	6840      	ldr	r0, [r0, #4]
   18a30:	b308      	cbz	r0, 18a76 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   18a32:	b10d      	cbz	r5, 18a38 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   18a34:	2501      	movs	r5, #1
   18a36:	e01d      	b.n	18a74 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   18a38:	2801      	cmp	r0, #1
   18a3a:	d110      	bne.n	18a5e <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   18a3c:	7a60      	ldrb	r0, [r4, #9]
   18a3e:	b170      	cbz	r0, 18a5e <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   18a40:	6821      	ldr	r1, [r4, #0]
   18a42:	7808      	ldrb	r0, [r1, #0]
   18a44:	0740      	lsls	r0, r0, #29
   18a46:	d40a      	bmi.n	18a5e <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   18a48:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   18a4c:	2201      	movs	r2, #1
   18a4e:	68cb      	ldr	r3, [r1, #12]
   18a50:	f248 51fb 	movw	r1, #34299	; 0x85fb
   18a54:	f2c0 0102 	movt	r1, #2
   18a58:	2501      	movs	r5, #1
   18a5a:	4798      	blx	r3
   18a5c:	b950      	cbnz	r0, 18a74 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   18a5e:	6821      	ldr	r1, [r4, #0]
   18a60:	2201      	movs	r2, #1
   18a62:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   18a66:	68cb      	ldr	r3, [r1, #12]
   18a68:	f248 51fc 	movw	r1, #34300	; 0x85fc
   18a6c:	f2c0 0102 	movt	r1, #2
   18a70:	4798      	blx	r3
   18a72:	4605      	mov	r5, r0
   18a74:	7225      	strb	r5, [r4, #8]
   18a76:	2d00      	cmp	r5, #0
   18a78:	bf18      	it	ne
   18a7a:	2501      	movne	r5, #1
   18a7c:	4628      	mov	r0, r5
   18a7e:	bdb0      	pop	{r4, r5, r7, pc}

00018a80 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   18a80:	b580      	push	{r7, lr}
   18a82:	b082      	sub	sp, #8
   18a84:	468c      	mov	ip, r1
   18a86:	2100      	movs	r1, #0
   18a88:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   18a8c:	9101      	str	r1, [sp, #4]
   18a8e:	d207      	bcs.n	18aa0 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   18a90:	f88d c004 	strb.w	ip, [sp, #4]
   18a94:	a901      	add	r1, sp, #4
   18a96:	2201      	movs	r2, #1
   18a98:	f7ff fe47 	bl	1872a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   18a9c:	b002      	add	sp, #8
   18a9e:	bd80      	pop	{r7, pc}
   18aa0:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   18aa4:	d210      	bcs.n	18ac8 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   18aa6:	ea4f 119c 	mov.w	r1, ip, lsr #6
   18aaa:	2306      	movs	r3, #6
   18aac:	2202      	movs	r2, #2
   18aae:	f363 115f 	bfi	r1, r3, #5, #27
   18ab2:	f362 1c9f 	bfi	ip, r2, #6, #26
   18ab6:	f88d c005 	strb.w	ip, [sp, #5]
   18aba:	f88d 1004 	strb.w	r1, [sp, #4]
   18abe:	a901      	add	r1, sp, #4
   18ac0:	f7ff fe33 	bl	1872a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   18ac4:	b002      	add	sp, #8
   18ac6:	bd80      	pop	{r7, pc}
   18ac8:	2202      	movs	r2, #2
   18aca:	4663      	mov	r3, ip
   18acc:	a901      	add	r1, sp, #4
   18ace:	f362 139f 	bfi	r3, r2, #6, #26
   18ad2:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   18ad6:	d213      	bcs.n	18b00 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   18ad8:	f88d 3006 	strb.w	r3, [sp, #6]
   18adc:	ea4f 139c 	mov.w	r3, ip, lsr #6
   18ae0:	f362 139f 	bfi	r3, r2, #6, #26
   18ae4:	f88d 3005 	strb.w	r3, [sp, #5]
   18ae8:	ea4f 321c 	mov.w	r2, ip, lsr #12
   18aec:	230e      	movs	r3, #14
   18aee:	f363 121f 	bfi	r2, r3, #4, #28
   18af2:	f88d 2004 	strb.w	r2, [sp, #4]
   18af6:	2203      	movs	r2, #3
   18af8:	f7ff fe17 	bl	1872a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   18afc:	b002      	add	sp, #8
   18afe:	bd80      	pop	{r7, pc}
   18b00:	f88d 3007 	strb.w	r3, [sp, #7]
   18b04:	ea4f 139c 	mov.w	r3, ip, lsr #6
   18b08:	f362 139f 	bfi	r3, r2, #6, #26
   18b0c:	f88d 3006 	strb.w	r3, [sp, #6]
   18b10:	ea4f 331c 	mov.w	r3, ip, lsr #12
   18b14:	f362 139f 	bfi	r3, r2, #6, #26
   18b18:	22f0      	movs	r2, #240	; 0xf0
   18b1a:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   18b1e:	f88d 3005 	strb.w	r3, [sp, #5]
   18b22:	f88d 2004 	strb.w	r2, [sp, #4]
   18b26:	2204      	movs	r2, #4
   18b28:	f7ff fdff 	bl	1872a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   18b2c:	b002      	add	sp, #8
   18b2e:	bd80      	pop	{r7, pc}

00018b30 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   18b30:	b570      	push	{r4, r5, r6, lr}
   18b32:	b088      	sub	sp, #32
   18b34:	9001      	str	r0, [sp, #4]
   18b36:	aa02      	add	r2, sp, #8
   18b38:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   18b3c:	f248 61c8 	movw	r1, #34504	; 0x86c8
   18b40:	4610      	mov	r0, r2
   18b42:	f2c0 0102 	movt	r1, #2
   18b46:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   18b4a:	a801      	add	r0, sp, #4
   18b4c:	f000 f89e 	bl	18c8c <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   18b50:	b008      	add	sp, #32
   18b52:	bd70      	pop	{r4, r5, r6, pc}

00018b54 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   18b54:	6800      	ldr	r0, [r0, #0]
   18b56:	f7ff bde8 	b.w	1872a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

00018b5a <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   18b5a:	6800      	ldr	r0, [r0, #0]
   18b5c:	f7ff bf90 	b.w	18a80 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00018b60 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   18b60:	b570      	push	{r4, r5, r6, lr}
   18b62:	b088      	sub	sp, #32
   18b64:	6800      	ldr	r0, [r0, #0]
   18b66:	aa02      	add	r2, sp, #8
   18b68:	9001      	str	r0, [sp, #4]
   18b6a:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   18b6e:	4610      	mov	r0, r2
   18b70:	f248 61c8 	movw	r1, #34504	; 0x86c8
   18b74:	f2c0 0102 	movt	r1, #2
   18b78:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   18b7c:	a801      	add	r0, sp, #4
   18b7e:	f000 f885 	bl	18c8c <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   18b82:	b008      	add	sp, #32
   18b84:	bd70      	pop	{r4, r5, r6, pc}

00018b86 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   18b86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b8a:	b08d      	sub	sp, #52	; 0x34
   18b8c:	468c      	mov	ip, r1
   18b8e:	6801      	ldr	r1, [r0, #0]
   18b90:	f248 5e1f 	movw	lr, #34079	; 0x851f
   18b94:	f248 50ff 	movw	r0, #34303	; 0x85ff
   18b98:	f242 7810 	movw	r8, #10000	; 0x2710
   18b9c:	4541      	cmp	r1, r8
   18b9e:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   18ba2:	f2c0 0002 	movt	r0, #2
   18ba6:	d337      	bcc.n	18c18 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   18ba8:	f241 7959 	movw	r9, #5977	; 0x1759
   18bac:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   18bb0:	f10d 0b0c 	add.w	fp, sp, #12
   18bb4:	2300      	movs	r3, #0
   18bb6:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   18bba:	f04f 0a64 	mov.w	sl, #100	; 0x64
   18bbe:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   18bc2:	fba1 2409 	umull	r2, r4, r1, r9
   18bc6:	42b9      	cmp	r1, r7
   18bc8:	ea4f 3254 	mov.w	r2, r4, lsr #13
   18bcc:	fb02 1418 	mls	r4, r2, r8, r1
   18bd0:	4611      	mov	r1, r2
   18bd2:	b2a5      	uxth	r5, r4
   18bd4:	fba5 560e 	umull	r5, r6, r5, lr
   18bd8:	ea4f 1556 	mov.w	r5, r6, lsr #5
   18bdc:	eb0b 0603 	add.w	r6, fp, r3
   18be0:	fb05 441a 	mls	r4, r5, sl, r4
   18be4:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   18be8:	f1a3 0304 	sub.w	r3, r3, #4
   18bec:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   18bf0:	b2a4      	uxth	r4, r4
   18bf2:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   18bf6:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   18bfa:	d8e2      	bhi.n	18bc2 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   18bfc:	f103 0427 	add.w	r4, r3, #39	; 0x27
   18c00:	4611      	mov	r1, r2
   18c02:	2963      	cmp	r1, #99	; 0x63
   18c04:	dc0b      	bgt.n	18c1e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   18c06:	460b      	mov	r3, r1
   18c08:	2b0a      	cmp	r3, #10
   18c0a:	db17      	blt.n	18c3c <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   18c0c:	1ea1      	subs	r1, r4, #2
   18c0e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   18c12:	aa03      	add	r2, sp, #12
   18c14:	5250      	strh	r0, [r2, r1]
   18c16:	e016      	b.n	18c46 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   18c18:	2427      	movs	r4, #39	; 0x27
   18c1a:	2963      	cmp	r1, #99	; 0x63
   18c1c:	ddf3      	ble.n	18c06 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   18c1e:	b28a      	uxth	r2, r1
   18c20:	3c02      	subs	r4, #2
   18c22:	fba2 230e 	umull	r2, r3, r2, lr
   18c26:	2264      	movs	r2, #100	; 0x64
   18c28:	095b      	lsrs	r3, r3, #5
   18c2a:	fb03 1112 	mls	r1, r3, r2, r1
   18c2e:	aa03      	add	r2, sp, #12
   18c30:	b289      	uxth	r1, r1
   18c32:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   18c36:	5311      	strh	r1, [r2, r4]
   18c38:	2b0a      	cmp	r3, #10
   18c3a:	dae7      	bge.n	18c0c <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   18c3c:	1e61      	subs	r1, r4, #1
   18c3e:	aa03      	add	r2, sp, #12
   18c40:	f103 0030 	add.w	r0, r3, #48	; 0x30
   18c44:	5450      	strb	r0, [r2, r1]
   18c46:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   18c4a:	aa03      	add	r2, sp, #12
   18c4c:	4411      	add	r1, r2
   18c4e:	f248 32c4 	movw	r2, #33732	; 0x83c4
   18c52:	e9cd 1000 	strd	r1, r0, [sp]
   18c56:	f2c0 0202 	movt	r2, #2
   18c5a:	4660      	mov	r0, ip
   18c5c:	2101      	movs	r1, #1
   18c5e:	2300      	movs	r3, #0
   18c60:	f000 f8f4 	bl	18e4c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18c64:	b00d      	add	sp, #52	; 0x34
   18c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018c6a <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   18c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c6e:	b086      	sub	sp, #24
   18c70:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   18c74:	466a      	mov	r2, sp
   18c76:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   18c7a:	4613      	mov	r3, r2
   18c7c:	4660      	mov	r0, ip
   18c7e:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   18c82:	f000 f803 	bl	18c8c <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   18c86:	b006      	add	sp, #24
   18c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018c8c <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   18c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c90:	b08b      	sub	sp, #44	; 0x2c
   18c92:	2303      	movs	r3, #3
   18c94:	6897      	ldr	r7, [r2, #8]
   18c96:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   18c9a:	2320      	movs	r3, #32
   18c9c:	9303      	str	r3, [sp, #12]
   18c9e:	2300      	movs	r3, #0
   18ca0:	2f00      	cmp	r7, #0
   18ca2:	9302      	str	r3, [sp, #8]
   18ca4:	e9cd 0108 	strd	r0, r1, [sp, #32]
   18ca8:	9306      	str	r3, [sp, #24]
   18caa:	9304      	str	r3, [sp, #16]
   18cac:	d07c      	beq.n	18da8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   18cae:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   18cb2:	e9d2 9400 	ldrd	r9, r4, [r2]
   18cb6:	45a3      	cmp	fp, r4
   18cb8:	bf88      	it	hi
   18cba:	46a3      	movhi	fp, r4
   18cbc:	f1bb 0f00 	cmp.w	fp, #0
   18cc0:	f000 809b 	beq.w	18dfa <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   18cc4:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   18cc8:	68cd      	ldr	r5, [r1, #12]
   18cca:	9201      	str	r2, [sp, #4]
   18ccc:	e9d9 3200 	ldrd	r3, r2, [r9]
   18cd0:	4619      	mov	r1, r3
   18cd2:	47a8      	blx	r5
   18cd4:	2800      	cmp	r0, #0
   18cd6:	f040 809e 	bne.w	18e16 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18cda:	464d      	mov	r5, r9
   18cdc:	f04f 0a01 	mov.w	sl, #1
   18ce0:	f04f 0800 	mov.w	r8, #0
   18ce4:	f04f 0910 	mov.w	r9, #16
   18ce8:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   18cec:	6841      	ldr	r1, [r0, #4]
   18cee:	9103      	str	r1, [sp, #12]
   18cf0:	7f01      	ldrb	r1, [r0, #28]
   18cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   18cf6:	6881      	ldr	r1, [r0, #8]
   18cf8:	9102      	str	r1, [sp, #8]
   18cfa:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   18cfe:	b18a      	cbz	r2, 18d24 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   18d00:	2a02      	cmp	r2, #2
   18d02:	d011      	beq.n	18d28 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   18d04:	9a01      	ldr	r2, [sp, #4]
   18d06:	4291      	cmp	r1, r2
   18d08:	f080 8098 	bcs.w	18e3c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   18d0c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   18d10:	f648 3387 	movw	r3, #35719	; 0x8b87
   18d14:	f2c0 0301 	movt	r3, #1
   18d18:	6852      	ldr	r2, [r2, #4]
   18d1a:	429a      	cmp	r2, r3
   18d1c:	d104      	bne.n	18d28 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   18d1e:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   18d22:	6809      	ldr	r1, [r1, #0]
   18d24:	2201      	movs	r2, #1
   18d26:	e000      	b.n	18d2a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   18d28:	2200      	movs	r2, #0
   18d2a:	e9cd 2104 	strd	r2, r1, [sp, #16]
   18d2e:	f857 1009 	ldr.w	r1, [r7, r9]
   18d32:	68c0      	ldr	r0, [r0, #12]
   18d34:	b180      	cbz	r0, 18d58 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   18d36:	2802      	cmp	r0, #2
   18d38:	d010      	beq.n	18d5c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   18d3a:	9801      	ldr	r0, [sp, #4]
   18d3c:	4281      	cmp	r1, r0
   18d3e:	d27d      	bcs.n	18e3c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   18d40:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   18d44:	f648 3287 	movw	r2, #35719	; 0x8b87
   18d48:	f2c0 0201 	movt	r2, #1
   18d4c:	6840      	ldr	r0, [r0, #4]
   18d4e:	4290      	cmp	r0, r2
   18d50:	d104      	bne.n	18d5c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   18d52:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   18d56:	6801      	ldr	r1, [r0, #0]
   18d58:	2001      	movs	r0, #1
   18d5a:	e000      	b.n	18d5e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   18d5c:	2000      	movs	r0, #0
   18d5e:	eb07 0209 	add.w	r2, r7, r9
   18d62:	e9cd 0106 	strd	r0, r1, [sp, #24]
   18d66:	9801      	ldr	r0, [sp, #4]
   18d68:	f852 1c10 	ldr.w	r1, [r2, #-16]
   18d6c:	4281      	cmp	r1, r0
   18d6e:	d25d      	bcs.n	18e2c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   18d70:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   18d74:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   18d78:	684a      	ldr	r2, [r1, #4]
   18d7a:	a902      	add	r1, sp, #8
   18d7c:	4790      	blx	r2
   18d7e:	2800      	cmp	r0, #0
   18d80:	d149      	bne.n	18e16 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18d82:	45da      	cmp	sl, fp
   18d84:	d24b      	bcs.n	18e1e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   18d86:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   18d8a:	eb05 0208 	add.w	r2, r5, r8
   18d8e:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   18d92:	68db      	ldr	r3, [r3, #12]
   18d94:	4798      	blx	r3
   18d96:	f109 0920 	add.w	r9, r9, #32
   18d9a:	f108 0808 	add.w	r8, r8, #8
   18d9e:	f10a 0a01 	add.w	sl, sl, #1
   18da2:	2800      	cmp	r0, #0
   18da4:	d0a0      	beq.n	18ce8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   18da6:	e036      	b.n	18e16 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18da8:	6956      	ldr	r6, [r2, #20]
   18daa:	e9d2 9400 	ldrd	r9, r4, [r2]
   18dae:	42a6      	cmp	r6, r4
   18db0:	bf88      	it	hi
   18db2:	4626      	movhi	r6, r4
   18db4:	b30e      	cbz	r6, 18dfa <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   18db6:	6917      	ldr	r7, [r2, #16]
   18db8:	e9d9 3200 	ldrd	r3, r2, [r9]
   18dbc:	68cd      	ldr	r5, [r1, #12]
   18dbe:	4619      	mov	r1, r3
   18dc0:	47a8      	blx	r5
   18dc2:	bb40      	cbnz	r0, 18e16 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18dc4:	f10d 0808 	add.w	r8, sp, #8
   18dc8:	2500      	movs	r5, #0
   18dca:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   18dce:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   18dd2:	684a      	ldr	r2, [r1, #4]
   18dd4:	4641      	mov	r1, r8
   18dd6:	4790      	blx	r2
   18dd8:	b9e8      	cbnz	r0, 18e16 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18dda:	f105 0a01 	add.w	sl, r5, #1
   18dde:	45b2      	cmp	sl, r6
   18de0:	d20d      	bcs.n	18dfe <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   18de2:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   18de6:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   18dea:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   18dee:	68db      	ldr	r3, [r3, #12]
   18df0:	4798      	blx	r3
   18df2:	2800      	cmp	r0, #0
   18df4:	4655      	mov	r5, sl
   18df6:	d0e8      	beq.n	18dca <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   18df8:	e00d      	b.n	18e16 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   18dfa:	f04f 0a00 	mov.w	sl, #0
   18dfe:	4554      	cmp	r4, sl
   18e00:	d910      	bls.n	18e24 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   18e02:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   18e06:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   18e0a:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   18e0e:	6852      	ldr	r2, [r2, #4]
   18e10:	68db      	ldr	r3, [r3, #12]
   18e12:	4798      	blx	r3
   18e14:	b130      	cbz	r0, 18e24 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   18e16:	2001      	movs	r0, #1
   18e18:	b00b      	add	sp, #44	; 0x2c
   18e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e1e:	46a9      	mov	r9, r5
   18e20:	4554      	cmp	r4, sl
   18e22:	d8ee      	bhi.n	18e02 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   18e24:	2000      	movs	r0, #0
   18e26:	b00b      	add	sp, #44	; 0x2c
   18e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e2c:	f248 60f8 	movw	r0, #34552	; 0x86f8
   18e30:	f2c0 0002 	movt	r0, #2
   18e34:	9a01      	ldr	r2, [sp, #4]
   18e36:	f7ff fc47 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   18e3a:	defe      	udf	#254	; 0xfe
   18e3c:	f248 7008 	movw	r0, #34568	; 0x8708
   18e40:	f2c0 0002 	movt	r0, #2
   18e44:	9a01      	ldr	r2, [sp, #4]
   18e46:	f7ff fc3f 	bl	186c8 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   18e4a:	defe      	udf	#254	; 0xfe

00018e4c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   18e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e50:	b083      	sub	sp, #12
   18e52:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   18e56:	469a      	mov	sl, r3
   18e58:	4604      	mov	r4, r0
   18e5a:	b1e1      	cbz	r1, 18e96 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   18e5c:	f8d4 e000 	ldr.w	lr, [r4]
   18e60:	f04f 082b 	mov.w	r8, #43	; 0x2b
   18e64:	f01e 0101 	ands.w	r1, lr, #1
   18e68:	bf08      	it	eq
   18e6a:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   18e6e:	eb01 0907 	add.w	r9, r1, r7
   18e72:	ea5f 714e 	movs.w	r1, lr, lsl #29
   18e76:	d517      	bpl.n	18ea8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   18e78:	f1ba 0f00 	cmp.w	sl, #0
   18e7c:	d033      	beq.n	18ee6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   18e7e:	f1aa 0101 	sub.w	r1, sl, #1
   18e82:	f00a 0c03 	and.w	ip, sl, #3
   18e86:	2903      	cmp	r1, #3
   18e88:	d22f      	bcs.n	18eea <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   18e8a:	2100      	movs	r1, #0
   18e8c:	4613      	mov	r3, r2
   18e8e:	f1bc 0f00 	cmp.w	ip, #0
   18e92:	d152      	bne.n	18f3a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   18e94:	e069      	b.n	18f6a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18e96:	f8d4 e000 	ldr.w	lr, [r4]
   18e9a:	f107 0901 	add.w	r9, r7, #1
   18e9e:	f04f 082d 	mov.w	r8, #45	; 0x2d
   18ea2:	ea5f 714e 	movs.w	r1, lr, lsl #29
   18ea6:	d4e7      	bmi.n	18e78 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   18ea8:	f04f 0a00 	mov.w	sl, #0
   18eac:	2200      	movs	r2, #0
   18eae:	68a0      	ldr	r0, [r4, #8]
   18eb0:	2801      	cmp	r0, #1
   18eb2:	d161      	bne.n	18f78 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   18eb4:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   18eb8:	45cb      	cmp	fp, r9
   18eba:	d95d      	bls.n	18f78 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   18ebc:	ea5f 700e 	movs.w	r0, lr, lsl #28
   18ec0:	d46e      	bmi.n	18fa0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   18ec2:	9202      	str	r2, [sp, #8]
   18ec4:	ebab 0109 	sub.w	r1, fp, r9
   18ec8:	f894 2020 	ldrb.w	r2, [r4, #32]
   18ecc:	2000      	movs	r0, #0
   18ece:	46a9      	mov	r9, r5
   18ed0:	460e      	mov	r6, r1
   18ed2:	2a03      	cmp	r2, #3
   18ed4:	bf08      	it	eq
   18ed6:	2201      	moveq	r2, #1
   18ed8:	e8df f002 	tbb	[pc, r2]
   18edc:	02840287 	.word	0x02840287
   18ee0:	2600      	movs	r6, #0
   18ee2:	4608      	mov	r0, r1
   18ee4:	e081      	b.n	18fea <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   18ee6:	2100      	movs	r1, #0
   18ee8:	e03f      	b.n	18f6a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18eea:	ebac 060a 	sub.w	r6, ip, sl
   18eee:	2100      	movs	r1, #0
   18ef0:	4693      	mov	fp, r2
   18ef2:	4613      	mov	r3, r2
   18ef4:	e9cd 7501 	strd	r7, r5, [sp, #4]
   18ef8:	781a      	ldrb	r2, [r3, #0]
   18efa:	785d      	ldrb	r5, [r3, #1]
   18efc:	7898      	ldrb	r0, [r3, #2]
   18efe:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   18f02:	78df      	ldrb	r7, [r3, #3]
   18f04:	2a80      	cmp	r2, #128	; 0x80
   18f06:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   18f0a:	bf08      	it	eq
   18f0c:	3101      	addeq	r1, #1
   18f0e:	2a80      	cmp	r2, #128	; 0x80
   18f10:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   18f14:	bf08      	it	eq
   18f16:	3101      	addeq	r1, #1
   18f18:	2880      	cmp	r0, #128	; 0x80
   18f1a:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   18f1e:	bf08      	it	eq
   18f20:	3101      	addeq	r1, #1
   18f22:	2880      	cmp	r0, #128	; 0x80
   18f24:	bf08      	it	eq
   18f26:	3101      	addeq	r1, #1
   18f28:	3304      	adds	r3, #4
   18f2a:	3604      	adds	r6, #4
   18f2c:	d1e4      	bne.n	18ef8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   18f2e:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   18f32:	465a      	mov	r2, fp
   18f34:	f1bc 0f00 	cmp.w	ip, #0
   18f38:	d017      	beq.n	18f6a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18f3a:	7818      	ldrb	r0, [r3, #0]
   18f3c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   18f40:	2880      	cmp	r0, #128	; 0x80
   18f42:	bf08      	it	eq
   18f44:	3101      	addeq	r1, #1
   18f46:	f1bc 0f01 	cmp.w	ip, #1
   18f4a:	d00e      	beq.n	18f6a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18f4c:	7858      	ldrb	r0, [r3, #1]
   18f4e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   18f52:	2880      	cmp	r0, #128	; 0x80
   18f54:	bf08      	it	eq
   18f56:	3101      	addeq	r1, #1
   18f58:	f1bc 0f02 	cmp.w	ip, #2
   18f5c:	d005      	beq.n	18f6a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   18f5e:	7898      	ldrb	r0, [r3, #2]
   18f60:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   18f64:	2880      	cmp	r0, #128	; 0x80
   18f66:	bf08      	it	eq
   18f68:	3101      	addeq	r1, #1
   18f6a:	eb09 000a 	add.w	r0, r9, sl
   18f6e:	eba0 0901 	sub.w	r9, r0, r1
   18f72:	68a0      	ldr	r0, [r4, #8]
   18f74:	2801      	cmp	r0, #1
   18f76:	d09d      	beq.n	18eb4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   18f78:	4620      	mov	r0, r4
   18f7a:	4641      	mov	r1, r8
   18f7c:	4653      	mov	r3, sl
   18f7e:	f000 f893 	bl	190a8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   18f82:	b120      	cbz	r0, 18f8e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   18f84:	2601      	movs	r6, #1
   18f86:	4630      	mov	r0, r6
   18f88:	b003      	add	sp, #12
   18f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f8e:	69e1      	ldr	r1, [r4, #28]
   18f90:	463a      	mov	r2, r7
   18f92:	69a0      	ldr	r0, [r4, #24]
   18f94:	68cb      	ldr	r3, [r1, #12]
   18f96:	4629      	mov	r1, r5
   18f98:	b003      	add	sp, #12
   18f9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f9e:	4718      	bx	r3
   18fa0:	6860      	ldr	r0, [r4, #4]
   18fa2:	2601      	movs	r6, #1
   18fa4:	9002      	str	r0, [sp, #8]
   18fa6:	2030      	movs	r0, #48	; 0x30
   18fa8:	f894 1020 	ldrb.w	r1, [r4, #32]
   18fac:	4653      	mov	r3, sl
   18fae:	6060      	str	r0, [r4, #4]
   18fb0:	4620      	mov	r0, r4
   18fb2:	9101      	str	r1, [sp, #4]
   18fb4:	4641      	mov	r1, r8
   18fb6:	f884 6020 	strb.w	r6, [r4, #32]
   18fba:	f000 f875 	bl	190a8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   18fbe:	2800      	cmp	r0, #0
   18fc0:	d1e1      	bne.n	18f86 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   18fc2:	f894 2020 	ldrb.w	r2, [r4, #32]
   18fc6:	ebab 0109 	sub.w	r1, fp, r9
   18fca:	2000      	movs	r0, #0
   18fcc:	46a9      	mov	r9, r5
   18fce:	2a03      	cmp	r2, #3
   18fd0:	bf08      	it	eq
   18fd2:	2201      	moveq	r2, #1
   18fd4:	460e      	mov	r6, r1
   18fd6:	e8df f002 	tbb	[pc, r2]
   18fda:	0235      	.short	0x0235
   18fdc:	0232      	.short	0x0232
   18fde:	2600      	movs	r6, #0
   18fe0:	4608      	mov	r0, r1
   18fe2:	e02f      	b.n	19044 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   18fe4:	0848      	lsrs	r0, r1, #1
   18fe6:	3101      	adds	r1, #1
   18fe8:	084e      	lsrs	r6, r1, #1
   18fea:	1c45      	adds	r5, r0, #1
   18fec:	3d01      	subs	r5, #1
   18fee:	d007      	beq.n	19000 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   18ff0:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   18ff4:	6861      	ldr	r1, [r4, #4]
   18ff6:	6912      	ldr	r2, [r2, #16]
   18ff8:	4790      	blx	r2
   18ffa:	2800      	cmp	r0, #0
   18ffc:	d0f6      	beq.n	18fec <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   18ffe:	e7c1      	b.n	18f84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   19000:	9a02      	ldr	r2, [sp, #8]
   19002:	4620      	mov	r0, r4
   19004:	4641      	mov	r1, r8
   19006:	4653      	mov	r3, sl
   19008:	f8d4 b004 	ldr.w	fp, [r4, #4]
   1900c:	f000 f84c 	bl	190a8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   19010:	2800      	cmp	r0, #0
   19012:	d1b7      	bne.n	18f84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   19014:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   19018:	463a      	mov	r2, r7
   1901a:	68cb      	ldr	r3, [r1, #12]
   1901c:	4649      	mov	r1, r9
   1901e:	4798      	blx	r3
   19020:	2800      	cmp	r0, #0
   19022:	d1af      	bne.n	18f84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   19024:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   19028:	1c77      	adds	r7, r6, #1
   1902a:	2601      	movs	r6, #1
   1902c:	3f01      	subs	r7, #1
   1902e:	d02c      	beq.n	1908a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   19030:	6922      	ldr	r2, [r4, #16]
   19032:	4628      	mov	r0, r5
   19034:	4659      	mov	r1, fp
   19036:	4790      	blx	r2
   19038:	2800      	cmp	r0, #0
   1903a:	d0f7      	beq.n	1902c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   1903c:	e7a3      	b.n	18f86 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   1903e:	0848      	lsrs	r0, r1, #1
   19040:	3101      	adds	r1, #1
   19042:	084e      	lsrs	r6, r1, #1
   19044:	1c45      	adds	r5, r0, #1
   19046:	3d01      	subs	r5, #1
   19048:	d007      	beq.n	1905a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   1904a:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   1904e:	6861      	ldr	r1, [r4, #4]
   19050:	6912      	ldr	r2, [r2, #16]
   19052:	4790      	blx	r2
   19054:	2800      	cmp	r0, #0
   19056:	d0f6      	beq.n	19046 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   19058:	e794      	b.n	18f84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   1905a:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   1905e:	463a      	mov	r2, r7
   19060:	68cb      	ldr	r3, [r1, #12]
   19062:	4649      	mov	r1, r9
   19064:	f8d4 8004 	ldr.w	r8, [r4, #4]
   19068:	4798      	blx	r3
   1906a:	2800      	cmp	r0, #0
   1906c:	f47f af8a 	bne.w	18f84 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   19070:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   19074:	1c77      	adds	r7, r6, #1
   19076:	2601      	movs	r6, #1
   19078:	3f01      	subs	r7, #1
   1907a:	d00b      	beq.n	19094 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   1907c:	692a      	ldr	r2, [r5, #16]
   1907e:	4648      	mov	r0, r9
   19080:	4641      	mov	r1, r8
   19082:	4790      	blx	r2
   19084:	2800      	cmp	r0, #0
   19086:	d0f7      	beq.n	19078 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   19088:	e77d      	b.n	18f86 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   1908a:	2600      	movs	r6, #0
   1908c:	4630      	mov	r0, r6
   1908e:	b003      	add	sp, #12
   19090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19094:	9801      	ldr	r0, [sp, #4]
   19096:	2600      	movs	r6, #0
   19098:	f884 0020 	strb.w	r0, [r4, #32]
   1909c:	9802      	ldr	r0, [sp, #8]
   1909e:	6060      	str	r0, [r4, #4]
   190a0:	4630      	mov	r0, r6
   190a2:	b003      	add	sp, #12
   190a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000190a8 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   190a8:	b570      	push	{r4, r5, r6, lr}
   190aa:	461c      	mov	r4, r3
   190ac:	4615      	mov	r5, r2
   190ae:	4606      	mov	r6, r0
   190b0:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   190b4:	d006      	beq.n	190c4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   190b6:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   190ba:	6912      	ldr	r2, [r2, #16]
   190bc:	4790      	blx	r2
   190be:	b108      	cbz	r0, 190c4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   190c0:	2001      	movs	r0, #1
   190c2:	bd70      	pop	{r4, r5, r6, pc}
   190c4:	b13d      	cbz	r5, 190d6 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   190c6:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   190ca:	4622      	mov	r2, r4
   190cc:	68cb      	ldr	r3, [r1, #12]
   190ce:	4629      	mov	r1, r5
   190d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   190d4:	4718      	bx	r3
   190d6:	2000      	movs	r0, #0
   190d8:	bd70      	pop	{r4, r5, r6, pc}
	...

000190dc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   190dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190e0:	b081      	sub	sp, #4
   190e2:	f8d0 e008 	ldr.w	lr, [r0, #8]
   190e6:	4682      	mov	sl, r0
   190e8:	6900      	ldr	r0, [r0, #16]
   190ea:	4691      	mov	r9, r2
   190ec:	4688      	mov	r8, r1
   190ee:	f1be 0f01 	cmp.w	lr, #1
   190f2:	d111      	bne.n	19118 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   190f4:	2801      	cmp	r0, #1
   190f6:	d012      	beq.n	1911e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   190f8:	f1b9 0f00 	cmp.w	r9, #0
   190fc:	f000 80c5 	beq.w	1928a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   19100:	f1a9 0101 	sub.w	r1, r9, #1
   19104:	f009 0003 	and.w	r0, r9, #3
   19108:	2903      	cmp	r1, #3
   1910a:	d267      	bcs.n	191dc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   1910c:	2100      	movs	r1, #0
   1910e:	4642      	mov	r2, r8
   19110:	2800      	cmp	r0, #0
   19112:	f040 8083 	bne.w	1921c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   19116:	e097      	b.n	19248 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   19118:	2801      	cmp	r0, #1
   1911a:	f040 80bd 	bne.w	19298 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   1911e:	f1b9 0f00 	cmp.w	r9, #0
   19122:	d054      	beq.n	191ce <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   19124:	f8da 0014 	ldr.w	r0, [sl, #20]
   19128:	eb08 0109 	add.w	r1, r8, r9
   1912c:	2200      	movs	r2, #0
   1912e:	4647      	mov	r7, r8
   19130:	1c43      	adds	r3, r0, #1
   19132:	4646      	mov	r6, r8
   19134:	463c      	mov	r4, r7
   19136:	f914 5b01 	ldrsb.w	r5, [r4], #1
   1913a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1913e:	b2e8      	uxtb	r0, r5
   19140:	dc2e      	bgt.n	191a0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   19142:	428c      	cmp	r4, r1
   19144:	d01a      	beq.n	1917c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   19146:	787d      	ldrb	r5, [r7, #1]
   19148:	1cbc      	adds	r4, r7, #2
   1914a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   1914e:	4627      	mov	r7, r4
   19150:	f000 0b1f 	and.w	fp, r0, #31
   19154:	28df      	cmp	r0, #223	; 0xdf
   19156:	d917      	bls.n	19188 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   19158:	428f      	cmp	r7, r1
   1915a:	d018      	beq.n	1918e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   1915c:	f817 4b01 	ldrb.w	r4, [r7], #1
   19160:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   19164:	463c      	mov	r4, r7
   19166:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   1916a:	28f0      	cmp	r0, #240	; 0xf0
   1916c:	d316      	bcc.n	1919c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   1916e:	428f      	cmp	r7, r1
   19170:	d020      	beq.n	191b4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   19172:	f817 0b01 	ldrb.w	r0, [r7], #1
   19176:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1917a:	e01d      	b.n	191b8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   1917c:	2500      	movs	r5, #0
   1917e:	460f      	mov	r7, r1
   19180:	f000 0b1f 	and.w	fp, r0, #31
   19184:	28df      	cmp	r0, #223	; 0xdf
   19186:	d8e7      	bhi.n	19158 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   19188:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   1918c:	e008      	b.n	191a0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   1918e:	f04f 0c00 	mov.w	ip, #0
   19192:	460f      	mov	r7, r1
   19194:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   19198:	28f0      	cmp	r0, #240	; 0xf0
   1919a:	d2e8      	bcs.n	1916e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   1919c:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   191a0:	4627      	mov	r7, r4
   191a2:	3b01      	subs	r3, #1
   191a4:	d065      	beq.n	19272 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   191a6:	1b90      	subs	r0, r2, r6
   191a8:	42b9      	cmp	r1, r7
   191aa:	eb00 0207 	add.w	r2, r0, r7
   191ae:	463e      	mov	r6, r7
   191b0:	d1c0      	bne.n	19134 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   191b2:	e061      	b.n	19278 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   191b4:	2000      	movs	r0, #0
   191b6:	4627      	mov	r7, r4
   191b8:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   191bc:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   191c0:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   191c4:	4428      	add	r0, r5
   191c6:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   191ca:	d1ea      	bne.n	191a2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   191cc:	e054      	b.n	19278 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   191ce:	2200      	movs	r2, #0
   191d0:	f1be 0f01 	cmp.w	lr, #1
   191d4:	d054      	beq.n	19280 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   191d6:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   191da:	e062      	b.n	192a2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   191dc:	eba0 0309 	sub.w	r3, r0, r9
   191e0:	2100      	movs	r1, #0
   191e2:	4642      	mov	r2, r8
   191e4:	7817      	ldrb	r7, [r2, #0]
   191e6:	7856      	ldrb	r6, [r2, #1]
   191e8:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   191ec:	7895      	ldrb	r5, [r2, #2]
   191ee:	78d4      	ldrb	r4, [r2, #3]
   191f0:	2f80      	cmp	r7, #128	; 0x80
   191f2:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   191f6:	bf08      	it	eq
   191f8:	3101      	addeq	r1, #1
   191fa:	2f80      	cmp	r7, #128	; 0x80
   191fc:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   19200:	bf08      	it	eq
   19202:	3101      	addeq	r1, #1
   19204:	2f80      	cmp	r7, #128	; 0x80
   19206:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   1920a:	bf08      	it	eq
   1920c:	3101      	addeq	r1, #1
   1920e:	2f80      	cmp	r7, #128	; 0x80
   19210:	bf08      	it	eq
   19212:	3101      	addeq	r1, #1
   19214:	3204      	adds	r2, #4
   19216:	3304      	adds	r3, #4
   19218:	d1e4      	bne.n	191e4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   1921a:	b1a8      	cbz	r0, 19248 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   1921c:	7813      	ldrb	r3, [r2, #0]
   1921e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19222:	2b80      	cmp	r3, #128	; 0x80
   19224:	bf08      	it	eq
   19226:	3101      	addeq	r1, #1
   19228:	2801      	cmp	r0, #1
   1922a:	d00d      	beq.n	19248 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   1922c:	7853      	ldrb	r3, [r2, #1]
   1922e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19232:	2b80      	cmp	r3, #128	; 0x80
   19234:	bf08      	it	eq
   19236:	3101      	addeq	r1, #1
   19238:	2802      	cmp	r0, #2
   1923a:	d005      	beq.n	19248 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   1923c:	7890      	ldrb	r0, [r2, #2]
   1923e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   19242:	2880      	cmp	r0, #128	; 0x80
   19244:	bf08      	it	eq
   19246:	3101      	addeq	r1, #1
   19248:	f8da 000c 	ldr.w	r0, [sl, #12]
   1924c:	eba9 0101 	sub.w	r1, r9, r1
   19250:	4281      	cmp	r1, r0
   19252:	d221      	bcs.n	19298 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   19254:	f1b9 0f00 	cmp.w	r9, #0
   19258:	d029      	beq.n	192ae <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   1925a:	f1a9 0101 	sub.w	r1, r9, #1
   1925e:	f009 0c03 	and.w	ip, r9, #3
   19262:	2903      	cmp	r1, #3
   19264:	d225      	bcs.n	192b2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   19266:	2100      	movs	r1, #0
   19268:	4643      	mov	r3, r8
   1926a:	f1bc 0f00 	cmp.w	ip, #0
   1926e:	d142      	bne.n	192f6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   19270:	e059      	b.n	19326 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   19272:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   19276:	d167      	bne.n	19348 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   19278:	464a      	mov	r2, r9
   1927a:	f1be 0f01 	cmp.w	lr, #1
   1927e:	d1aa      	bne.n	191d6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   19280:	4691      	mov	r9, r2
   19282:	f1b9 0f00 	cmp.w	r9, #0
   19286:	f47f af3b 	bne.w	19100 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   1928a:	2100      	movs	r1, #0
   1928c:	f8da 000c 	ldr.w	r0, [sl, #12]
   19290:	eba9 0101 	sub.w	r1, r9, r1
   19294:	4281      	cmp	r1, r0
   19296:	d3dd      	bcc.n	19254 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   19298:	f8da 101c 	ldr.w	r1, [sl, #28]
   1929c:	464a      	mov	r2, r9
   1929e:	f8da 0018 	ldr.w	r0, [sl, #24]
   192a2:	68cb      	ldr	r3, [r1, #12]
   192a4:	4641      	mov	r1, r8
   192a6:	b001      	add	sp, #4
   192a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192ac:	4718      	bx	r3
   192ae:	2100      	movs	r1, #0
   192b0:	e039      	b.n	19326 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   192b2:	ebac 0709 	sub.w	r7, ip, r9
   192b6:	2100      	movs	r1, #0
   192b8:	4643      	mov	r3, r8
   192ba:	781e      	ldrb	r6, [r3, #0]
   192bc:	785d      	ldrb	r5, [r3, #1]
   192be:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   192c2:	789c      	ldrb	r4, [r3, #2]
   192c4:	78da      	ldrb	r2, [r3, #3]
   192c6:	2e80      	cmp	r6, #128	; 0x80
   192c8:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   192cc:	bf08      	it	eq
   192ce:	3101      	addeq	r1, #1
   192d0:	2e80      	cmp	r6, #128	; 0x80
   192d2:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   192d6:	bf08      	it	eq
   192d8:	3101      	addeq	r1, #1
   192da:	2e80      	cmp	r6, #128	; 0x80
   192dc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   192e0:	bf08      	it	eq
   192e2:	3101      	addeq	r1, #1
   192e4:	2a80      	cmp	r2, #128	; 0x80
   192e6:	bf08      	it	eq
   192e8:	3101      	addeq	r1, #1
   192ea:	3304      	adds	r3, #4
   192ec:	3704      	adds	r7, #4
   192ee:	d1e4      	bne.n	192ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   192f0:	f1bc 0f00 	cmp.w	ip, #0
   192f4:	d017      	beq.n	19326 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   192f6:	781a      	ldrb	r2, [r3, #0]
   192f8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   192fc:	2a80      	cmp	r2, #128	; 0x80
   192fe:	bf08      	it	eq
   19300:	3101      	addeq	r1, #1
   19302:	f1bc 0f01 	cmp.w	ip, #1
   19306:	d00e      	beq.n	19326 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   19308:	785a      	ldrb	r2, [r3, #1]
   1930a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1930e:	2a80      	cmp	r2, #128	; 0x80
   19310:	bf08      	it	eq
   19312:	3101      	addeq	r1, #1
   19314:	f1bc 0f02 	cmp.w	ip, #2
   19318:	d005      	beq.n	19326 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1931a:	789a      	ldrb	r2, [r3, #2]
   1931c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   19320:	2a80      	cmp	r2, #128	; 0x80
   19322:	bf08      	it	eq
   19324:	3101      	addeq	r1, #1
   19326:	f89a 3020 	ldrb.w	r3, [sl, #32]
   1932a:	eba1 0109 	sub.w	r1, r1, r9
   1932e:	4401      	add	r1, r0
   19330:	2000      	movs	r0, #0
   19332:	1eda      	subs	r2, r3, #3
   19334:	bf18      	it	ne
   19336:	461a      	movne	r2, r3
   19338:	460e      	mov	r6, r1
   1933a:	e8df f002 	tbb	[pc, r2]
   1933e:	0216      	.short	0x0216
   19340:	0213      	.short	0x0213
   19342:	2600      	movs	r6, #0
   19344:	4608      	mov	r0, r1
   19346:	e010      	b.n	1936a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   19348:	2a00      	cmp	r2, #0
   1934a:	bf18      	it	ne
   1934c:	454a      	cmpne	r2, r9
   1934e:	d134      	bne.n	193ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   19350:	4640      	mov	r0, r8
   19352:	2800      	cmp	r0, #0
   19354:	bf0c      	ite	eq
   19356:	464a      	moveq	r2, r9
   19358:	4680      	movne	r8, r0
   1935a:	f1be 0f01 	cmp.w	lr, #1
   1935e:	f43f af8f 	beq.w	19280 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   19362:	e738      	b.n	191d6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   19364:	0848      	lsrs	r0, r1, #1
   19366:	3101      	adds	r1, #1
   19368:	084e      	lsrs	r6, r1, #1
   1936a:	1c44      	adds	r4, r0, #1
   1936c:	3c01      	subs	r4, #1
   1936e:	d008      	beq.n	19382 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   19370:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   19374:	f8da 1004 	ldr.w	r1, [sl, #4]
   19378:	6912      	ldr	r2, [r2, #16]
   1937a:	4790      	blx	r2
   1937c:	2800      	cmp	r0, #0
   1937e:	d0f5      	beq.n	1936c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   19380:	e013      	b.n	193aa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   19382:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   19386:	464a      	mov	r2, r9
   19388:	68cb      	ldr	r3, [r1, #12]
   1938a:	4641      	mov	r1, r8
   1938c:	f8da 7004 	ldr.w	r7, [sl, #4]
   19390:	4798      	blx	r3
   19392:	b950      	cbnz	r0, 193aa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   19394:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   19398:	3601      	adds	r6, #1
   1939a:	3e01      	subs	r6, #1
   1939c:	d009      	beq.n	193b2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   1939e:	692a      	ldr	r2, [r5, #16]
   193a0:	4620      	mov	r0, r4
   193a2:	4639      	mov	r1, r7
   193a4:	4790      	blx	r2
   193a6:	2800      	cmp	r0, #0
   193a8:	d0f7      	beq.n	1939a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   193aa:	2001      	movs	r0, #1
   193ac:	b001      	add	sp, #4
   193ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193b2:	2000      	movs	r0, #0
   193b4:	b001      	add	sp, #4
   193b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193ba:	454a      	cmp	r2, r9
   193bc:	d204      	bcs.n	193c8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   193be:	f918 0002 	ldrsb.w	r0, [r8, r2]
   193c2:	f110 0f40 	cmn.w	r0, #64	; 0x40
   193c6:	dac3      	bge.n	19350 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   193c8:	2000      	movs	r0, #0
   193ca:	2200      	movs	r2, #0
   193cc:	2800      	cmp	r0, #0
   193ce:	bf0c      	ite	eq
   193d0:	464a      	moveq	r2, r9
   193d2:	4680      	movne	r8, r0
   193d4:	f1be 0f01 	cmp.w	lr, #1
   193d8:	f43f af52 	beq.w	19280 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   193dc:	e6fb      	b.n	191d6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

000193de <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   193de:	7800      	ldrb	r0, [r0, #0]
   193e0:	f3c0 1000 	ubfx	r0, r0, #4, #1
   193e4:	4770      	bx	lr

000193e6 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   193e6:	7800      	ldrb	r0, [r0, #0]
   193e8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   193ec:	4770      	bx	lr

000193ee <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   193ee:	b570      	push	{r4, r5, r6, lr}
   193f0:	460d      	mov	r5, r1
   193f2:	4606      	mov	r6, r0
   193f4:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   193f8:	461c      	mov	r4, r3
   193fa:	68cb      	ldr	r3, [r1, #12]
   193fc:	4611      	mov	r1, r2
   193fe:	4622      	mov	r2, r4
   19400:	4798      	blx	r3
   19402:	7230      	strb	r0, [r6, #8]
   19404:	fab4 f084 	clz	r0, r4
   19408:	0940      	lsrs	r0, r0, #5
   1940a:	7270      	strb	r0, [r6, #9]
   1940c:	2000      	movs	r0, #0
   1940e:	e9c6 5000 	strd	r5, r0, [r6]
   19412:	bd70      	pop	{r4, r5, r6, pc}

00019414 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   19414:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19418:	b085      	sub	sp, #20
   1941a:	460c      	mov	r4, r1
   1941c:	4605      	mov	r5, r0
   1941e:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   19422:	690a      	ldr	r2, [r1, #16]
   19424:	2127      	movs	r1, #39	; 0x27
   19426:	4790      	blx	r2
   19428:	b118      	cbz	r0, 19432 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   1942a:	2001      	movs	r0, #1
   1942c:	b005      	add	sp, #20
   1942e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   19432:	6829      	ldr	r1, [r5, #0]
   19434:	a801      	add	r0, sp, #4
   19436:	2201      	movs	r2, #1
   19438:	f7ff f85c 	bl	184f4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   1943c:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   19440:	f04f 091c 	mov.w	r9, #28
   19444:	f8dd 800c 	ldr.w	r8, [sp, #12]
   19448:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   1944c:	f89d 6010 	ldrb.w	r6, [sp, #16]
   19450:	d139      	bne.n	194c6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   19452:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   19456:	2f02      	cmp	r7, #2
   19458:	f0c0 806b 	bcc.w	19532 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   1945c:	d00c      	beq.n	19478 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   1945e:	b2f0      	uxtb	r0, r6
   19460:	2604      	movs	r6, #4
   19462:	2703      	movs	r7, #3
   19464:	215c      	movs	r1, #92	; 0x5c
   19466:	e8df f000 	tbb	[pc, r0]
   1946a:	0364      	.short	0x0364
   1946c:	09242010 	.word	0x09242010
   19470:	2600      	movs	r6, #0
   19472:	2703      	movs	r7, #3
   19474:	217d      	movs	r1, #125	; 0x7d
   19476:	e001      	b.n	1947c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   19478:	2701      	movs	r7, #1
   1947a:	215c      	movs	r1, #92	; 0x5c
   1947c:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   19480:	6912      	ldr	r2, [r2, #16]
   19482:	4790      	blx	r2
   19484:	2800      	cmp	r0, #0
   19486:	d0e6      	beq.n	19456 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   19488:	e7cf      	b.n	1942a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   1948a:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   1948e:	2602      	movs	r6, #2
   19490:	2703      	movs	r7, #3
   19492:	f1b8 0f00 	cmp.w	r8, #0
   19496:	fa25 f100 	lsr.w	r1, r5, r0
   1949a:	bf08      	it	eq
   1949c:	2601      	moveq	r6, #1
   1949e:	bf18      	it	ne
   194a0:	f1a8 0801 	subne.w	r8, r8, #1
   194a4:	f367 111f 	bfi	r1, r7, #4, #28
   194a8:	e7e8      	b.n	1947c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   194aa:	2602      	movs	r6, #2
   194ac:	2703      	movs	r7, #3
   194ae:	217b      	movs	r1, #123	; 0x7b
   194b0:	e7e4      	b.n	1947c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   194b2:	2703      	movs	r7, #3
   194b4:	2175      	movs	r1, #117	; 0x75
   194b6:	2603      	movs	r6, #3
   194b8:	e7e0      	b.n	1947c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   194ba:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   194be:	6912      	ldr	r2, [r2, #16]
   194c0:	4790      	blx	r2
   194c2:	2800      	cmp	r0, #0
   194c4:	d1b1      	bne.n	1942a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   194c6:	4638      	mov	r0, r7
   194c8:	2701      	movs	r7, #1
   194ca:	215c      	movs	r1, #92	; 0x5c
   194cc:	e8df f000 	tbb	[pc, r0]
   194d0:	06020331 	.word	0x06020331
   194d4:	e7f1      	b.n	194ba <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   194d6:	2700      	movs	r7, #0
   194d8:	4629      	mov	r1, r5
   194da:	e7ee      	b.n	194ba <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   194dc:	b2f0      	uxtb	r0, r6
   194de:	2604      	movs	r6, #4
   194e0:	2703      	movs	r7, #3
   194e2:	215c      	movs	r1, #92	; 0x5c
   194e4:	e8df f000 	tbb	[pc, r0]
   194e8:	1d080425 	.word	0x1d080425
   194ec:	0321      	.short	0x0321
   194ee:	e7e4      	b.n	194ba <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   194f0:	2600      	movs	r6, #0
   194f2:	2703      	movs	r7, #3
   194f4:	217d      	movs	r1, #125	; 0x7d
   194f6:	e7e0      	b.n	194ba <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   194f8:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   194fc:	2602      	movs	r6, #2
   194fe:	2703      	movs	r7, #3
   19500:	fa25 f000 	lsr.w	r0, r5, r0
   19504:	f000 000f 	and.w	r0, r0, #15
   19508:	f100 0157 	add.w	r1, r0, #87	; 0x57
   1950c:	280a      	cmp	r0, #10
   1950e:	bf38      	it	cc
   19510:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   19514:	f1b8 0f00 	cmp.w	r8, #0
   19518:	bf0c      	ite	eq
   1951a:	2601      	moveq	r6, #1
   1951c:	f1a8 0801 	subne.w	r8, r8, #1
   19520:	e7cb      	b.n	194ba <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   19522:	2602      	movs	r6, #2
   19524:	2703      	movs	r7, #3
   19526:	217b      	movs	r1, #123	; 0x7b
   19528:	e7c7      	b.n	194ba <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1952a:	2703      	movs	r7, #3
   1952c:	2175      	movs	r1, #117	; 0x75
   1952e:	2603      	movs	r6, #3
   19530:	e7c3      	b.n	194ba <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   19532:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   19536:	690a      	ldr	r2, [r1, #16]
   19538:	2127      	movs	r1, #39	; 0x27
   1953a:	b005      	add	sp, #20
   1953c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19540:	4710      	bx	r2

00019542 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   19542:	b08c      	sub	sp, #48	; 0x30
   19544:	e9cd 0100 	strd	r0, r1, [sp]
   19548:	2002      	movs	r0, #2
   1954a:	a908      	add	r1, sp, #32
   1954c:	9007      	str	r0, [sp, #28]
   1954e:	9106      	str	r1, [sp, #24]
   19550:	2100      	movs	r1, #0
   19552:	9105      	str	r1, [sp, #20]
   19554:	e9cd 0103 	strd	r0, r1, [sp, #12]
   19558:	f248 7058 	movw	r0, #34648	; 0x8758
   1955c:	f2c0 0002 	movt	r0, #2
   19560:	a901      	add	r1, sp, #4
   19562:	9002      	str	r0, [sp, #8]
   19564:	f24a 401d 	movw	r0, #42013	; 0xa41d
   19568:	f2c0 0001 	movt	r0, #1
   1956c:	900b      	str	r0, [sp, #44]	; 0x2c
   1956e:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   19572:	4668      	mov	r0, sp
   19574:	f248 7168 	movw	r1, #34664	; 0x8768
   19578:	9008      	str	r0, [sp, #32]
   1957a:	a802      	add	r0, sp, #8
   1957c:	f2c0 0102 	movt	r1, #2
   19580:	f7ff f8c2 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   19584:	defe      	udf	#254	; 0xfe

00019586 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   19586:	b08c      	sub	sp, #48	; 0x30
   19588:	e9cd 0100 	strd	r0, r1, [sp]
   1958c:	2002      	movs	r0, #2
   1958e:	a908      	add	r1, sp, #32
   19590:	9007      	str	r0, [sp, #28]
   19592:	9106      	str	r1, [sp, #24]
   19594:	2100      	movs	r1, #0
   19596:	9105      	str	r1, [sp, #20]
   19598:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1959c:	f248 709c 	movw	r0, #34716	; 0x879c
   195a0:	f2c0 0002 	movt	r0, #2
   195a4:	a901      	add	r1, sp, #4
   195a6:	9002      	str	r0, [sp, #8]
   195a8:	f24a 401d 	movw	r0, #42013	; 0xa41d
   195ac:	f2c0 0001 	movt	r0, #1
   195b0:	900b      	str	r0, [sp, #44]	; 0x2c
   195b2:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   195b6:	4668      	mov	r0, sp
   195b8:	f248 71ac 	movw	r1, #34732	; 0x87ac
   195bc:	9008      	str	r0, [sp, #32]
   195be:	a802      	add	r0, sp, #8
   195c0:	f2c0 0102 	movt	r1, #2
   195c4:	f7ff f8a0 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   195c8:	defe      	udf	#254	; 0xfe

000195ca <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   195ca:	b09a      	sub	sp, #104	; 0x68
   195cc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   195d0:	e9cd 2300 	strd	r2, r3, [sp]
   195d4:	d802      	bhi.n	195dc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   195d6:	2501      	movs	r5, #1
   195d8:	468c      	mov	ip, r1
   195da:	e03e      	b.n	1965a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   195dc:	f1c1 0e00 	rsb	lr, r1, #0
   195e0:	f44f 7c80 	mov.w	ip, #256	; 0x100
   195e4:	458c      	cmp	ip, r1
   195e6:	d205      	bcs.n	195f4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   195e8:	f910 400c 	ldrsb.w	r4, [r0, ip]
   195ec:	f114 0f41 	cmn.w	r4, #65	; 0x41
   195f0:	f300 8108 	bgt.w	19804 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   195f4:	eb0e 040c 	add.w	r4, lr, ip
   195f8:	f1ac 0601 	sub.w	r6, ip, #1
   195fc:	2c01      	cmp	r4, #1
   195fe:	d02a      	beq.n	19656 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   19600:	428e      	cmp	r6, r1
   19602:	d206      	bcs.n	19612 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   19604:	eb00 050c 	add.w	r5, r0, ip
   19608:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   1960c:	f115 0f41 	cmn.w	r5, #65	; 0x41
   19610:	dc21      	bgt.n	19656 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   19612:	f1ac 0602 	sub.w	r6, ip, #2
   19616:	2c02      	cmp	r4, #2
   19618:	d01d      	beq.n	19656 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1961a:	428e      	cmp	r6, r1
   1961c:	d206      	bcs.n	1962c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   1961e:	eb00 050c 	add.w	r5, r0, ip
   19622:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   19626:	f115 0f41 	cmn.w	r5, #65	; 0x41
   1962a:	dc14      	bgt.n	19656 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1962c:	f1ac 0603 	sub.w	r6, ip, #3
   19630:	2c03      	cmp	r4, #3
   19632:	d010      	beq.n	19656 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   19634:	428e      	cmp	r6, r1
   19636:	d206      	bcs.n	19646 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   19638:	eb00 050c 	add.w	r5, r0, ip
   1963c:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   19640:	f115 0f41 	cmn.w	r5, #65	; 0x41
   19644:	dc07      	bgt.n	19656 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   19646:	f1bc 0c04 	subs.w	ip, ip, #4
   1964a:	f04f 0500 	mov.w	r5, #0
   1964e:	d004      	beq.n	1965a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   19650:	2c04      	cmp	r4, #4
   19652:	d1c7      	bne.n	195e4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   19654:	e001      	b.n	1965a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   19656:	2500      	movs	r5, #0
   19658:	46b4      	mov	ip, r6
   1965a:	2605      	movs	r6, #5
   1965c:	2d00      	cmp	r5, #0
   1965e:	f648 057a 	movw	r5, #34938	; 0x887a
   19662:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   19666:	bf18      	it	ne
   19668:	2600      	movne	r6, #0
   1966a:	9605      	str	r6, [sp, #20]
   1966c:	f248 36c4 	movw	r6, #33732	; 0x83c4
   19670:	f2c0 0502 	movt	r5, #2
   19674:	f2c0 0602 	movt	r6, #2
   19678:	bf18      	it	ne
   1967a:	4635      	movne	r5, r6
   1967c:	428a      	cmp	r2, r1
   1967e:	9504      	str	r5, [sp, #16]
   19680:	bf98      	it	ls
   19682:	428b      	cmpls	r3, r1
   19684:	d92a      	bls.n	196dc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   19686:	428a      	cmp	r2, r1
   19688:	f04f 0003 	mov.w	r0, #3
   1968c:	a910      	add	r1, sp, #64	; 0x40
   1968e:	bf88      	it	hi
   19690:	4613      	movhi	r3, r2
   19692:	900f      	str	r0, [sp, #60]	; 0x3c
   19694:	910e      	str	r1, [sp, #56]	; 0x38
   19696:	2100      	movs	r1, #0
   19698:	910d      	str	r1, [sp, #52]	; 0x34
   1969a:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   1969e:	f648 00a0 	movw	r0, #34976	; 0x88a0
   196a2:	f2c0 0002 	movt	r0, #2
   196a6:	a904      	add	r1, sp, #16
   196a8:	900a      	str	r0, [sp, #40]	; 0x28
   196aa:	f24a 500b 	movw	r0, #42251	; 0xa50b
   196ae:	f2c0 0001 	movt	r0, #1
   196b2:	9308      	str	r3, [sp, #32]
   196b4:	9015      	str	r0, [sp, #84]	; 0x54
   196b6:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   196ba:	a802      	add	r0, sp, #8
   196bc:	f648 01b8 	movw	r1, #35000	; 0x88b8
   196c0:	9012      	str	r0, [sp, #72]	; 0x48
   196c2:	f24a 401d 	movw	r0, #42013	; 0xa41d
   196c6:	f2c0 0102 	movt	r1, #2
   196ca:	f2c0 0001 	movt	r0, #1
   196ce:	9011      	str	r0, [sp, #68]	; 0x44
   196d0:	a808      	add	r0, sp, #32
   196d2:	9010      	str	r0, [sp, #64]	; 0x40
   196d4:	a80a      	add	r0, sp, #40	; 0x28
   196d6:	f7ff f817 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   196da:	defe      	udf	#254	; 0xfe
   196dc:	429a      	cmp	r2, r3
   196de:	f200 80f1 	bhi.w	198c4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   196e2:	2a00      	cmp	r2, #0
   196e4:	bf18      	it	ne
   196e6:	4291      	cmpne	r1, r2
   196e8:	d109      	bne.n	196fe <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   196ea:	461a      	mov	r2, r3
   196ec:	2a00      	cmp	r2, #0
   196ee:	9206      	str	r2, [sp, #24]
   196f0:	bf18      	it	ne
   196f2:	428a      	cmpne	r2, r1
   196f4:	d10e      	bne.n	19714 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   196f6:	4613      	mov	r3, r2
   196f8:	428b      	cmp	r3, r1
   196fa:	d047      	beq.n	1978c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   196fc:	e052      	b.n	197a4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   196fe:	d9f5      	bls.n	196ec <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   19700:	5686      	ldrsb	r6, [r0, r2]
   19702:	f116 0f40 	cmn.w	r6, #64	; 0x40
   19706:	bfa8      	it	ge
   19708:	461a      	movge	r2, r3
   1970a:	2a00      	cmp	r2, #0
   1970c:	9206      	str	r2, [sp, #24]
   1970e:	bf18      	it	ne
   19710:	428a      	cmpne	r2, r1
   19712:	d0f0      	beq.n	196f6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   19714:	f1a0 0c01 	sub.w	ip, r0, #1
   19718:	f101 0e02 	add.w	lr, r1, #2
   1971c:	1ccc      	adds	r4, r1, #3
   1971e:	1c4d      	adds	r5, r1, #1
   19720:	1d0e      	adds	r6, r1, #4
   19722:	428a      	cmp	r2, r1
   19724:	d206      	bcs.n	19734 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   19726:	eb0c 0302 	add.w	r3, ip, r2
   1972a:	f993 3001 	ldrsb.w	r3, [r3, #1]
   1972e:	f113 0f41 	cmn.w	r3, #65	; 0x41
   19732:	dce0      	bgt.n	196f6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   19734:	1e53      	subs	r3, r2, #1
   19736:	bf18      	it	ne
   19738:	4295      	cmpne	r5, r2
   1973a:	d025      	beq.n	19788 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1973c:	428b      	cmp	r3, r1
   1973e:	d204      	bcs.n	1974a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   19740:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   19744:	f117 0f41 	cmn.w	r7, #65	; 0x41
   19748:	dc1e      	bgt.n	19788 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1974a:	1e93      	subs	r3, r2, #2
   1974c:	bf18      	it	ne
   1974e:	4596      	cmpne	lr, r2
   19750:	d01a      	beq.n	19788 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   19752:	428b      	cmp	r3, r1
   19754:	d206      	bcs.n	19764 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   19756:	eb0c 0702 	add.w	r7, ip, r2
   1975a:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   1975e:	f117 0f41 	cmn.w	r7, #65	; 0x41
   19762:	dc11      	bgt.n	19788 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   19764:	1ed3      	subs	r3, r2, #3
   19766:	bf18      	it	ne
   19768:	4294      	cmpne	r4, r2
   1976a:	d00d      	beq.n	19788 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1976c:	428b      	cmp	r3, r1
   1976e:	d206      	bcs.n	1977e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   19770:	eb0c 0702 	add.w	r7, ip, r2
   19774:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   19778:	f117 0f41 	cmn.w	r7, #65	; 0x41
   1977c:	dc04      	bgt.n	19788 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1977e:	1f13      	subs	r3, r2, #4
   19780:	d002      	beq.n	19788 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   19782:	4296      	cmp	r6, r2
   19784:	461a      	mov	r2, r3
   19786:	d1cc      	bne.n	19722 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   19788:	428b      	cmp	r3, r1
   1978a:	d10b      	bne.n	197a4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   1978c:	f248 5060 	movw	r0, #34144	; 0x8560
   19790:	f648 1208 	movw	r2, #35080	; 0x8908
   19794:	f2c0 0002 	movt	r0, #2
   19798:	f2c0 0202 	movt	r2, #2
   1979c:	212b      	movs	r1, #43	; 0x2b
   1979e:	f7fe ff7d 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   197a2:	defe      	udf	#254	; 0xfe
   197a4:	18c5      	adds	r5, r0, r3
   197a6:	462e      	mov	r6, r5
   197a8:	f916 4b01 	ldrsb.w	r4, [r6], #1
   197ac:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   197b0:	b2e2      	uxtb	r2, r4
   197b2:	dd02      	ble.n	197ba <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   197b4:	9207      	str	r2, [sp, #28]
   197b6:	2101      	movs	r1, #1
   197b8:	e04d      	b.n	19856 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   197ba:	4408      	add	r0, r1
   197bc:	4286      	cmp	r6, r0
   197be:	d10b      	bne.n	197d8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   197c0:	2500      	movs	r5, #0
   197c2:	4606      	mov	r6, r0
   197c4:	f002 011f 	and.w	r1, r2, #31
   197c8:	2adf      	cmp	r2, #223	; 0xdf
   197ca:	d80d      	bhi.n	197e8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   197cc:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   197d0:	2880      	cmp	r0, #128	; 0x80
   197d2:	9007      	str	r0, [sp, #28]
   197d4:	d333      	bcc.n	1983e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   197d6:	e034      	b.n	19842 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   197d8:	7869      	ldrb	r1, [r5, #1]
   197da:	1cae      	adds	r6, r5, #2
   197dc:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   197e0:	f002 011f 	and.w	r1, r2, #31
   197e4:	2adf      	cmp	r2, #223	; 0xdf
   197e6:	d9f1      	bls.n	197cc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   197e8:	4286      	cmp	r6, r0
   197ea:	d10d      	bne.n	19808 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   197ec:	2400      	movs	r4, #0
   197ee:	4606      	mov	r6, r0
   197f0:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   197f4:	2af0      	cmp	r2, #240	; 0xf0
   197f6:	d20f      	bcs.n	19818 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   197f8:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   197fc:	2880      	cmp	r0, #128	; 0x80
   197fe:	9007      	str	r0, [sp, #28]
   19800:	d31d      	bcc.n	1983e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   19802:	e01e      	b.n	19842 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   19804:	2500      	movs	r5, #0
   19806:	e728      	b.n	1965a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   19808:	f816 4b01 	ldrb.w	r4, [r6], #1
   1980c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   19810:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   19814:	2af0      	cmp	r2, #240	; 0xf0
   19816:	d3ef      	bcc.n	197f8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   19818:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   1981c:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   19820:	4286      	cmp	r6, r0
   19822:	bf1a      	itte	ne
   19824:	7830      	ldrbne	r0, [r6, #0]
   19826:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   1982a:	2000      	moveq	r0, #0
   1982c:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   19830:	4408      	add	r0, r1
   19832:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   19836:	d0a9      	beq.n	1978c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   19838:	2880      	cmp	r0, #128	; 0x80
   1983a:	9007      	str	r0, [sp, #28]
   1983c:	d201      	bcs.n	19842 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   1983e:	2101      	movs	r1, #1
   19840:	e009      	b.n	19856 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   19842:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   19846:	d201      	bcs.n	1984c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   19848:	2102      	movs	r1, #2
   1984a:	e004      	b.n	19856 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   1984c:	2104      	movs	r1, #4
   1984e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   19852:	bf38      	it	cc
   19854:	2103      	movcc	r1, #3
   19856:	4419      	add	r1, r3
   19858:	aa10      	add	r2, sp, #64	; 0x40
   1985a:	a808      	add	r0, sp, #32
   1985c:	e9cd 3108 	strd	r3, r1, [sp, #32]
   19860:	2105      	movs	r1, #5
   19862:	910f      	str	r1, [sp, #60]	; 0x3c
   19864:	920e      	str	r2, [sp, #56]	; 0x38
   19866:	2200      	movs	r2, #0
   19868:	920d      	str	r2, [sp, #52]	; 0x34
   1986a:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   1986e:	f648 1144 	movw	r1, #35140	; 0x8944
   19872:	f2c0 0102 	movt	r1, #2
   19876:	aa04      	add	r2, sp, #16
   19878:	910a      	str	r1, [sp, #40]	; 0x28
   1987a:	f24a 510b 	movw	r1, #42251	; 0xa50b
   1987e:	f2c0 0101 	movt	r1, #1
   19882:	9119      	str	r1, [sp, #100]	; 0x64
   19884:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   19888:	a902      	add	r1, sp, #8
   1988a:	9116      	str	r1, [sp, #88]	; 0x58
   1988c:	f248 4195 	movw	r1, #33941	; 0x8495
   19890:	f2c0 0101 	movt	r1, #1
   19894:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   19898:	f249 4015 	movw	r0, #37909	; 0x9415
   1989c:	f2c0 0001 	movt	r0, #1
   198a0:	f648 116c 	movw	r1, #35180	; 0x896c
   198a4:	9013      	str	r0, [sp, #76]	; 0x4c
   198a6:	a807      	add	r0, sp, #28
   198a8:	9012      	str	r0, [sp, #72]	; 0x48
   198aa:	f24a 401d 	movw	r0, #42013	; 0xa41d
   198ae:	f2c0 0001 	movt	r0, #1
   198b2:	f2c0 0102 	movt	r1, #2
   198b6:	9011      	str	r0, [sp, #68]	; 0x44
   198b8:	a806      	add	r0, sp, #24
   198ba:	9010      	str	r0, [sp, #64]	; 0x40
   198bc:	a80a      	add	r0, sp, #40	; 0x28
   198be:	f7fe ff23 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   198c2:	defe      	udf	#254	; 0xfe
   198c4:	2004      	movs	r0, #4
   198c6:	a910      	add	r1, sp, #64	; 0x40
   198c8:	900f      	str	r0, [sp, #60]	; 0x3c
   198ca:	910e      	str	r1, [sp, #56]	; 0x38
   198cc:	2100      	movs	r1, #0
   198ce:	910d      	str	r1, [sp, #52]	; 0x34
   198d0:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   198d4:	f648 00d8 	movw	r0, #35032	; 0x88d8
   198d8:	f2c0 0002 	movt	r0, #2
   198dc:	a904      	add	r1, sp, #16
   198de:	900a      	str	r0, [sp, #40]	; 0x28
   198e0:	f24a 500b 	movw	r0, #42251	; 0xa50b
   198e4:	f2c0 0001 	movt	r0, #1
   198e8:	9017      	str	r0, [sp, #92]	; 0x5c
   198ea:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   198ee:	a802      	add	r0, sp, #8
   198f0:	9014      	str	r0, [sp, #80]	; 0x50
   198f2:	f24a 401d 	movw	r0, #42013	; 0xa41d
   198f6:	a901      	add	r1, sp, #4
   198f8:	f2c0 0001 	movt	r0, #1
   198fc:	9013      	str	r0, [sp, #76]	; 0x4c
   198fe:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   19902:	f648 01f8 	movw	r1, #35064	; 0x88f8
   19906:	4668      	mov	r0, sp
   19908:	f2c0 0102 	movt	r1, #2
   1990c:	9010      	str	r0, [sp, #64]	; 0x40
   1990e:	a80a      	add	r0, sp, #40	; 0x28
   19910:	f7fe fefa 	bl	18708 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   19914:	defe      	udf	#254	; 0xfe

00019916 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   19916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1991a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1991e:	d270      	bcs.n	19a02 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   19920:	f648 1e8c 	movw	lr, #35212	; 0x898c
   19924:	f648 18de 	movw	r8, #35294	; 0x89de
   19928:	fa1f f980 	uxth.w	r9, r0
   1992c:	f2c0 0e02 	movt	lr, #2
   19930:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   19934:	f04f 0a00 	mov.w	sl, #0
   19938:	f2c0 0802 	movt	r8, #2
   1993c:	4675      	mov	r5, lr
   1993e:	786e      	ldrb	r6, [r5, #1]
   19940:	4652      	mov	r2, sl
   19942:	782b      	ldrb	r3, [r5, #0]
   19944:	3502      	adds	r5, #2
   19946:	44b2      	add	sl, r6
   19948:	4563      	cmp	r3, ip
   1994a:	d129      	bne.n	199a0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   1994c:	4592      	cmp	sl, r2
   1994e:	f0c0 8112 	bcc.w	19b76 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   19952:	ea4f 035a 	mov.w	r3, sl, lsr #1
   19956:	2b92      	cmp	r3, #146	; 0x92
   19958:	f200 8112 	bhi.w	19b80 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   1995c:	eb08 0302 	add.w	r3, r8, r2
   19960:	199a      	adds	r2, r3, r6
   19962:	b31e      	cbz	r6, 199ac <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   19964:	461f      	mov	r7, r3
   19966:	b2c4      	uxtb	r4, r0
   19968:	f817 1b01 	ldrb.w	r1, [r7], #1
   1996c:	42a1      	cmp	r1, r4
   1996e:	f000 80b6 	beq.w	19ade <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   19972:	4297      	cmp	r7, r2
   19974:	d01a      	beq.n	199ac <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   19976:	7859      	ldrb	r1, [r3, #1]
   19978:	42a1      	cmp	r1, r4
   1997a:	f000 80b0 	beq.w	19ade <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   1997e:	1c99      	adds	r1, r3, #2
   19980:	4291      	cmp	r1, r2
   19982:	d013      	beq.n	199ac <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   19984:	7899      	ldrb	r1, [r3, #2]
   19986:	42a1      	cmp	r1, r4
   19988:	f000 80a9 	beq.w	19ade <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   1998c:	1cd9      	adds	r1, r3, #3
   1998e:	4291      	cmp	r1, r2
   19990:	d00c      	beq.n	199ac <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   19992:	1d19      	adds	r1, r3, #4
   19994:	78db      	ldrb	r3, [r3, #3]
   19996:	3e04      	subs	r6, #4
   19998:	42a3      	cmp	r3, r4
   1999a:	460b      	mov	r3, r1
   1999c:	d1e1      	bne.n	19962 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   1999e:	e09e      	b.n	19ade <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   199a0:	d808      	bhi.n	199b4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   199a2:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   199a6:	4295      	cmp	r5, r2
   199a8:	d1c9      	bne.n	1993e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   199aa:	e003      	b.n	199b4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   199ac:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   199b0:	428d      	cmp	r5, r1
   199b2:	d1c4      	bne.n	1993e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   199b4:	f648 3503 	movw	r5, #35587	; 0x8b03
   199b8:	2101      	movs	r1, #1
   199ba:	f2c0 0502 	movt	r5, #2
   199be:	4628      	mov	r0, r5
   199c0:	4602      	mov	r2, r0
   199c2:	f812 7b01 	ldrb.w	r7, [r2], #1
   199c6:	b27e      	sxtb	r6, r7
   199c8:	2e00      	cmp	r6, #0
   199ca:	d404      	bmi.n	199d6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   199cc:	4610      	mov	r0, r2
   199ce:	ebb9 0907 	subs.w	r9, r9, r7
   199d2:	d50f      	bpl.n	199f4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   199d4:	e0bd      	b.n	19b52 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   199d6:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   199da:	429a      	cmp	r2, r3
   199dc:	f000 80db 	beq.w	19b96 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   199e0:	7842      	ldrb	r2, [r0, #1]
   199e2:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   199e6:	3002      	adds	r0, #2
   199e8:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   199ec:	ebb9 0907 	subs.w	r9, r9, r7
   199f0:	f100 80af 	bmi.w	19b52 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   199f4:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   199f8:	f081 0101 	eor.w	r1, r1, #1
   199fc:	4290      	cmp	r0, r2
   199fe:	d1df      	bne.n	199c0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   19a00:	e0a7      	b.n	19b52 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   19a02:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   19a06:	d26f      	bcs.n	19ae8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   19a08:	f648 4e3d 	movw	lr, #35901	; 0x8c3d
   19a0c:	f648 4883 	movw	r8, #35971	; 0x8c83
   19a10:	fa1f f980 	uxth.w	r9, r0
   19a14:	f2c0 0e02 	movt	lr, #2
   19a18:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   19a1c:	f04f 0a00 	mov.w	sl, #0
   19a20:	f2c0 0802 	movt	r8, #2
   19a24:	4675      	mov	r5, lr
   19a26:	786e      	ldrb	r6, [r5, #1]
   19a28:	4652      	mov	r2, sl
   19a2a:	782b      	ldrb	r3, [r5, #0]
   19a2c:	3502      	adds	r5, #2
   19a2e:	44b2      	add	sl, r6
   19a30:	4563      	cmp	r3, ip
   19a32:	d125      	bne.n	19a80 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   19a34:	4592      	cmp	sl, r2
   19a36:	f0c0 809e 	bcc.w	19b76 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   19a3a:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   19a3e:	f200 80a5 	bhi.w	19b8c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   19a42:	eb08 0302 	add.w	r3, r8, r2
   19a46:	199a      	adds	r2, r3, r6
   19a48:	b306      	cbz	r6, 19a8c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   19a4a:	461f      	mov	r7, r3
   19a4c:	b2c4      	uxtb	r4, r0
   19a4e:	f817 1b01 	ldrb.w	r1, [r7], #1
   19a52:	42a1      	cmp	r1, r4
   19a54:	d043      	beq.n	19ade <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   19a56:	4297      	cmp	r7, r2
   19a58:	d018      	beq.n	19a8c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   19a5a:	7859      	ldrb	r1, [r3, #1]
   19a5c:	42a1      	cmp	r1, r4
   19a5e:	d03e      	beq.n	19ade <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   19a60:	1c99      	adds	r1, r3, #2
   19a62:	4291      	cmp	r1, r2
   19a64:	d012      	beq.n	19a8c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   19a66:	7899      	ldrb	r1, [r3, #2]
   19a68:	42a1      	cmp	r1, r4
   19a6a:	d038      	beq.n	19ade <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   19a6c:	1cd9      	adds	r1, r3, #3
   19a6e:	4291      	cmp	r1, r2
   19a70:	d00c      	beq.n	19a8c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   19a72:	1d19      	adds	r1, r3, #4
   19a74:	78db      	ldrb	r3, [r3, #3]
   19a76:	3e04      	subs	r6, #4
   19a78:	42a3      	cmp	r3, r4
   19a7a:	460b      	mov	r3, r1
   19a7c:	d1e4      	bne.n	19a48 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   19a7e:	e02e      	b.n	19ade <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   19a80:	d808      	bhi.n	19a94 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   19a82:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   19a86:	4295      	cmp	r5, r2
   19a88:	d1cd      	bne.n	19a26 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   19a8a:	e003      	b.n	19a94 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   19a8c:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   19a90:	428d      	cmp	r5, r1
   19a92:	d1c8      	bne.n	19a26 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   19a94:	f648 5529 	movw	r5, #36137	; 0x8d29
   19a98:	2101      	movs	r1, #1
   19a9a:	f2c0 0502 	movt	r5, #2
   19a9e:	4628      	mov	r0, r5
   19aa0:	4602      	mov	r2, r0
   19aa2:	f812 7b01 	ldrb.w	r7, [r2], #1
   19aa6:	b27e      	sxtb	r6, r7
   19aa8:	2e00      	cmp	r6, #0
   19aaa:	d40a      	bmi.n	19ac2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   19aac:	4610      	mov	r0, r2
   19aae:	ebb9 0907 	subs.w	r9, r9, r7
   19ab2:	d44e      	bmi.n	19b52 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   19ab4:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   19ab8:	f081 0101 	eor.w	r1, r1, #1
   19abc:	4290      	cmp	r0, r2
   19abe:	d1ef      	bne.n	19aa0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   19ac0:	e047      	b.n	19b52 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   19ac2:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   19ac6:	429a      	cmp	r2, r3
   19ac8:	d065      	beq.n	19b96 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   19aca:	7842      	ldrb	r2, [r0, #1]
   19acc:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   19ad0:	3002      	adds	r0, #2
   19ad2:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   19ad6:	ebb9 0907 	subs.w	r9, r9, r7
   19ada:	d5eb      	bpl.n	19ab4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   19adc:	e039      	b.n	19b52 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   19ade:	2100      	movs	r1, #0
   19ae0:	f001 0001 	and.w	r0, r1, #1
   19ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19ae8:	f240 51e2 	movw	r1, #1506	; 0x5e2
   19aec:	f240 63e2 	movw	r3, #1762	; 0x6e2
   19af0:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   19af4:	1842      	adds	r2, r0, r1
   19af6:	f2c0 030b 	movt	r3, #11
   19afa:	2100      	movs	r1, #0
   19afc:	429a      	cmp	r2, r3
   19afe:	d328      	bcc.n	19b52 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   19b00:	f241 421f 	movw	r2, #5151	; 0x141f
   19b04:	f640 431f 	movw	r3, #3103	; 0xc1f
   19b08:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   19b0c:	4402      	add	r2, r0
   19b0e:	429a      	cmp	r2, r3
   19b10:	bf21      	itttt	cs
   19b12:	f243 125e 	movwcs	r2, #12638	; 0x315e
   19b16:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   19b1a:	4402      	addcs	r2, r0
   19b1c:	2a0e      	cmpcs	r2, #14
   19b1e:	d318      	bcc.n	19b52 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   19b20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   19b24:	f64b 031e 	movw	r3, #47134	; 0xb81e
   19b28:	f2c0 021f 	movt	r2, #31
   19b2c:	f2c0 0302 	movt	r3, #2
   19b30:	4002      	ands	r2, r0
   19b32:	429a      	cmp	r2, r3
   19b34:	d00d      	beq.n	19b52 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   19b36:	f645 1229 	movw	r2, #22825	; 0x5929
   19b3a:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   19b3e:	4402      	add	r2, r0
   19b40:	2a29      	cmp	r2, #41	; 0x29
   19b42:	bf21      	itttt	cs
   19b44:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   19b48:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   19b4c:	4402      	addcs	r2, r0
   19b4e:	2a0b      	cmpcs	r2, #11
   19b50:	d203      	bcs.n	19b5a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   19b52:	f001 0001 	and.w	r0, r1, #1
   19b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19b5a:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   19b5e:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   19b62:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   19b66:	2000      	movs	r0, #0
   19b68:	f2c0 0202 	movt	r2, #2
   19b6c:	4291      	cmp	r1, r2
   19b6e:	bf88      	it	hi
   19b70:	2001      	movhi	r0, #1
   19b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19b76:	4610      	mov	r0, r2
   19b78:	4651      	mov	r1, sl
   19b7a:	f7ff fd04 	bl	19586 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   19b7e:	defe      	udf	#254	; 0xfe
   19b80:	4650      	mov	r0, sl
   19b82:	f240 1125 	movw	r1, #293	; 0x125
   19b86:	f7ff fcdc 	bl	19542 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   19b8a:	defe      	udf	#254	; 0xfe
   19b8c:	4650      	mov	r0, sl
   19b8e:	21a6      	movs	r1, #166	; 0xa6
   19b90:	f7ff fcd7 	bl	19542 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   19b94:	defe      	udf	#254	; 0xfe
   19b96:	f248 5060 	movw	r0, #34144	; 0x8560
   19b9a:	f648 127c 	movw	r2, #35196	; 0x897c
   19b9e:	f2c0 0002 	movt	r0, #2
   19ba2:	f2c0 0202 	movt	r2, #2
   19ba6:	212b      	movs	r1, #43	; 0x2b
   19ba8:	f7fe fd78 	bl	1869c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   19bac:	defe      	udf	#254	; 0xfe

00019bae <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   19bae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bb2:	b0a3      	sub	sp, #140	; 0x8c
   19bb4:	468c      	mov	ip, r1
   19bb6:	6809      	ldr	r1, [r1, #0]
   19bb8:	06ca      	lsls	r2, r1, #27
   19bba:	d44a      	bmi.n	19c52 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   19bbc:	6804      	ldr	r4, [r0, #0]
   19bbe:	0688      	lsls	r0, r1, #26
   19bc0:	f100 8089 	bmi.w	19cd6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   19bc4:	f248 5e1f 	movw	lr, #34079	; 0x851f
   19bc8:	f248 52ff 	movw	r2, #34303	; 0x85ff
   19bcc:	f242 7810 	movw	r8, #10000	; 0x2710
   19bd0:	4544      	cmp	r4, r8
   19bd2:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   19bd6:	f2c0 0202 	movt	r2, #2
   19bda:	f0c0 80e3 	bcc.w	19da4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   19bde:	f241 7959 	movw	r9, #5977	; 0x1759
   19be2:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   19be6:	f10d 0b0c 	add.w	fp, sp, #12
   19bea:	2300      	movs	r3, #0
   19bec:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   19bf0:	f04f 0a64 	mov.w	sl, #100	; 0x64
   19bf4:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   19bf8:	fba4 0109 	umull	r0, r1, r4, r9
   19bfc:	42bc      	cmp	r4, r7
   19bfe:	ea4f 3051 	mov.w	r0, r1, lsr #13
   19c02:	fb00 4118 	mls	r1, r0, r8, r4
   19c06:	4604      	mov	r4, r0
   19c08:	b28d      	uxth	r5, r1
   19c0a:	fba5 560e 	umull	r5, r6, r5, lr
   19c0e:	ea4f 1556 	mov.w	r5, r6, lsr #5
   19c12:	eb0b 0603 	add.w	r6, fp, r3
   19c16:	fb05 111a 	mls	r1, r5, sl, r1
   19c1a:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   19c1e:	f1a3 0304 	sub.w	r3, r3, #4
   19c22:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   19c26:	b289      	uxth	r1, r1
   19c28:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   19c2c:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   19c30:	d8e2      	bhi.n	19bf8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   19c32:	f103 0127 	add.w	r1, r3, #39	; 0x27
   19c36:	4604      	mov	r4, r0
   19c38:	2c63      	cmp	r4, #99	; 0x63
   19c3a:	f300 80b7 	bgt.w	19dac <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   19c3e:	4623      	mov	r3, r4
   19c40:	2b0a      	cmp	r3, #10
   19c42:	f2c0 80c3 	blt.w	19dcc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   19c46:	1e88      	subs	r0, r1, #2
   19c48:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   19c4c:	aa03      	add	r2, sp, #12
   19c4e:	5211      	strh	r1, [r2, r0]
   19c50:	e0c1      	b.n	19dd6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   19c52:	6800      	ldr	r0, [r0, #0]
   19c54:	f10d 0e0c 	add.w	lr, sp, #12
   19c58:	2381      	movs	r3, #129	; 0x81
   19c5a:	2100      	movs	r1, #0
   19c5c:	f000 020f 	and.w	r2, r0, #15
   19c60:	f102 0457 	add.w	r4, r2, #87	; 0x57
   19c64:	2a0a      	cmp	r2, #10
   19c66:	bf38      	it	cc
   19c68:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   19c6c:	eb0e 0203 	add.w	r2, lr, r3
   19c70:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   19c74:	f802 4c02 	strb.w	r4, [r2, #-2]
   19c78:	d071      	beq.n	19d5e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   19c7a:	0904      	lsrs	r4, r0, #4
   19c7c:	f004 040f 	and.w	r4, r4, #15
   19c80:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19c84:	2c0a      	cmp	r4, #10
   19c86:	bf38      	it	cc
   19c88:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19c8c:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   19c90:	f802 5c03 	strb.w	r5, [r2, #-3]
   19c94:	d079      	beq.n	19d8a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   19c96:	0a04      	lsrs	r4, r0, #8
   19c98:	f004 040f 	and.w	r4, r4, #15
   19c9c:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19ca0:	2c0a      	cmp	r4, #10
   19ca2:	bf38      	it	cc
   19ca4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19ca8:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   19cac:	f802 5c04 	strb.w	r5, [r2, #-4]
   19cb0:	d073      	beq.n	19d9a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   19cb2:	0b04      	lsrs	r4, r0, #12
   19cb4:	3b04      	subs	r3, #4
   19cb6:	f004 040f 	and.w	r4, r4, #15
   19cba:	f104 0557 	add.w	r5, r4, #87	; 0x57
   19cbe:	2c0a      	cmp	r4, #10
   19cc0:	bf38      	it	cc
   19cc2:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   19cc6:	f802 5c05 	strb.w	r5, [r2, #-5]
   19cca:	0c02      	lsrs	r2, r0, #16
   19ccc:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   19cd0:	4610      	mov	r0, r2
   19cd2:	d1c3      	bne.n	19c5c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   19cd4:	e03f      	b.n	19d56 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   19cd6:	f10d 0e0c 	add.w	lr, sp, #12
   19cda:	2381      	movs	r3, #129	; 0x81
   19cdc:	2100      	movs	r1, #0
   19cde:	f004 000f 	and.w	r0, r4, #15
   19ce2:	eb0e 0203 	add.w	r2, lr, r3
   19ce6:	f100 0537 	add.w	r5, r0, #55	; 0x37
   19cea:	280a      	cmp	r0, #10
   19cec:	bf38      	it	cc
   19cee:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   19cf2:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   19cf6:	f802 5c02 	strb.w	r5, [r2, #-2]
   19cfa:	d030      	beq.n	19d5e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   19cfc:	0920      	lsrs	r0, r4, #4
   19cfe:	f000 000f 	and.w	r0, r0, #15
   19d02:	f100 0537 	add.w	r5, r0, #55	; 0x37
   19d06:	280a      	cmp	r0, #10
   19d08:	bf38      	it	cc
   19d0a:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   19d0e:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   19d12:	f802 5c03 	strb.w	r5, [r2, #-3]
   19d16:	d038      	beq.n	19d8a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   19d18:	0a20      	lsrs	r0, r4, #8
   19d1a:	f000 000f 	and.w	r0, r0, #15
   19d1e:	f100 0537 	add.w	r5, r0, #55	; 0x37
   19d22:	280a      	cmp	r0, #10
   19d24:	bf38      	it	cc
   19d26:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   19d2a:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   19d2e:	f802 5c04 	strb.w	r5, [r2, #-4]
   19d32:	d032      	beq.n	19d9a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   19d34:	0b20      	lsrs	r0, r4, #12
   19d36:	3b04      	subs	r3, #4
   19d38:	f000 000f 	and.w	r0, r0, #15
   19d3c:	f100 0537 	add.w	r5, r0, #55	; 0x37
   19d40:	280a      	cmp	r0, #10
   19d42:	bf38      	it	cc
   19d44:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   19d48:	0c20      	lsrs	r0, r4, #16
   19d4a:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   19d4e:	4604      	mov	r4, r0
   19d50:	f802 5c05 	strb.w	r5, [r2, #-5]
   19d54:	d1c3      	bne.n	19cde <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   19d56:	1e58      	subs	r0, r3, #1
   19d58:	2881      	cmp	r0, #129	; 0x81
   19d5a:	d305      	bcc.n	19d68 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   19d5c:	e019      	b.n	19d92 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   19d5e:	1e59      	subs	r1, r3, #1
   19d60:	1e98      	subs	r0, r3, #2
   19d62:	460b      	mov	r3, r1
   19d64:	2881      	cmp	r0, #129	; 0x81
   19d66:	d214      	bcs.n	19d92 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   19d68:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   19d6c:	f248 52fd 	movw	r2, #34301	; 0x85fd
   19d70:	4470      	add	r0, lr
   19d72:	f2c0 0202 	movt	r2, #2
   19d76:	e9cd 0100 	strd	r0, r1, [sp]
   19d7a:	4660      	mov	r0, ip
   19d7c:	2101      	movs	r1, #1
   19d7e:	2302      	movs	r3, #2
   19d80:	f7ff f864 	bl	18e4c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19d84:	b023      	add	sp, #140	; 0x8c
   19d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d8a:	1ed8      	subs	r0, r3, #3
   19d8c:	3b02      	subs	r3, #2
   19d8e:	2881      	cmp	r0, #129	; 0x81
   19d90:	d3ea      	bcc.n	19d68 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   19d92:	2180      	movs	r1, #128	; 0x80
   19d94:	f7ff fbf7 	bl	19586 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   19d98:	defe      	udf	#254	; 0xfe
   19d9a:	1f18      	subs	r0, r3, #4
   19d9c:	3b03      	subs	r3, #3
   19d9e:	2881      	cmp	r0, #129	; 0x81
   19da0:	d3e2      	bcc.n	19d68 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   19da2:	e7f6      	b.n	19d92 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   19da4:	2127      	movs	r1, #39	; 0x27
   19da6:	2c63      	cmp	r4, #99	; 0x63
   19da8:	f77f af49 	ble.w	19c3e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   19dac:	b2a0      	uxth	r0, r4
   19dae:	3902      	subs	r1, #2
   19db0:	fba0 030e 	umull	r0, r3, r0, lr
   19db4:	af03      	add	r7, sp, #12
   19db6:	2064      	movs	r0, #100	; 0x64
   19db8:	095b      	lsrs	r3, r3, #5
   19dba:	fb03 4010 	mls	r0, r3, r0, r4
   19dbe:	b280      	uxth	r0, r0
   19dc0:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   19dc4:	5278      	strh	r0, [r7, r1]
   19dc6:	2b0a      	cmp	r3, #10
   19dc8:	f6bf af3d 	bge.w	19c46 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   19dcc:	1e48      	subs	r0, r1, #1
   19dce:	aa03      	add	r2, sp, #12
   19dd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
   19dd4:	5411      	strb	r1, [r2, r0]
   19dd6:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   19dda:	aa03      	add	r2, sp, #12
   19ddc:	4410      	add	r0, r2
   19dde:	f248 32c4 	movw	r2, #33732	; 0x83c4
   19de2:	e9cd 0100 	strd	r0, r1, [sp]
   19de6:	f2c0 0202 	movt	r2, #2
   19dea:	4660      	mov	r0, ip
   19dec:	2101      	movs	r1, #1
   19dee:	2300      	movs	r3, #0
   19df0:	f7ff f82c 	bl	18e4c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19df4:	b023      	add	sp, #140	; 0x8c
   19df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00019dfa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   19dfa:	b580      	push	{r7, lr}
   19dfc:	b0a2      	sub	sp, #136	; 0x88
   19dfe:	7802      	ldrb	r2, [r0, #0]
   19e00:	468c      	mov	ip, r1
   19e02:	f002 030f 	and.w	r3, r2, #15
   19e06:	f103 0057 	add.w	r0, r3, #87	; 0x57
   19e0a:	2b0a      	cmp	r3, #10
   19e0c:	bf38      	it	cc
   19e0e:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   19e12:	2300      	movs	r3, #0
   19e14:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   19e18:	d00b      	beq.n	19e32 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   19e1a:	0913      	lsrs	r3, r2, #4
   19e1c:	f103 0157 	add.w	r1, r3, #87	; 0x57
   19e20:	2aa0      	cmp	r2, #160	; 0xa0
   19e22:	bf38      	it	cc
   19e24:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19e28:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   19e2c:	227e      	movs	r2, #126	; 0x7e
   19e2e:	2302      	movs	r3, #2
   19e30:	e001      	b.n	19e36 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   19e32:	227f      	movs	r2, #127	; 0x7f
   19e34:	2301      	movs	r3, #1
   19e36:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   19e3a:	a802      	add	r0, sp, #8
   19e3c:	4410      	add	r0, r2
   19e3e:	f248 52fd 	movw	r2, #34301	; 0x85fd
   19e42:	e9cd 0300 	strd	r0, r3, [sp]
   19e46:	f2c0 0202 	movt	r2, #2
   19e4a:	4660      	mov	r0, ip
   19e4c:	2101      	movs	r1, #1
   19e4e:	2302      	movs	r3, #2
   19e50:	f7fe fffc 	bl	18e4c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19e54:	b022      	add	sp, #136	; 0x88
   19e56:	bd80      	pop	{r7, pc}

00019e58 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   19e58:	b580      	push	{r7, lr}
   19e5a:	b0a2      	sub	sp, #136	; 0x88
   19e5c:	7802      	ldrb	r2, [r0, #0]
   19e5e:	468c      	mov	ip, r1
   19e60:	f002 030f 	and.w	r3, r2, #15
   19e64:	f103 0037 	add.w	r0, r3, #55	; 0x37
   19e68:	2b0a      	cmp	r3, #10
   19e6a:	bf38      	it	cc
   19e6c:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   19e70:	2300      	movs	r3, #0
   19e72:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   19e76:	d00b      	beq.n	19e90 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   19e78:	0913      	lsrs	r3, r2, #4
   19e7a:	f103 0137 	add.w	r1, r3, #55	; 0x37
   19e7e:	2aa0      	cmp	r2, #160	; 0xa0
   19e80:	bf38      	it	cc
   19e82:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19e86:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   19e8a:	227e      	movs	r2, #126	; 0x7e
   19e8c:	2302      	movs	r3, #2
   19e8e:	e001      	b.n	19e94 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   19e90:	227f      	movs	r2, #127	; 0x7f
   19e92:	2301      	movs	r3, #1
   19e94:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   19e98:	a802      	add	r0, sp, #8
   19e9a:	4410      	add	r0, r2
   19e9c:	f248 52fd 	movw	r2, #34301	; 0x85fd
   19ea0:	e9cd 0300 	strd	r0, r3, [sp]
   19ea4:	f2c0 0202 	movt	r2, #2
   19ea8:	4660      	mov	r0, ip
   19eaa:	2101      	movs	r1, #1
   19eac:	2302      	movs	r3, #2
   19eae:	f7fe ffcd 	bl	18e4c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19eb2:	b022      	add	sp, #136	; 0x88
   19eb4:	bd80      	pop	{r7, pc}

00019eb6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   19eb6:	b580      	push	{r7, lr}
   19eb8:	b0a2      	sub	sp, #136	; 0x88
   19eba:	8800      	ldrh	r0, [r0, #0]
   19ebc:	468c      	mov	ip, r1
   19ebe:	f000 020f 	and.w	r2, r0, #15
   19ec2:	f102 0357 	add.w	r3, r2, #87	; 0x57
   19ec6:	2a0a      	cmp	r2, #10
   19ec8:	bf38      	it	cc
   19eca:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   19ece:	2200      	movs	r2, #0
   19ed0:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   19ed4:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   19ed8:	d02a      	beq.n	19f30 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   19eda:	0903      	lsrs	r3, r0, #4
   19edc:	f003 030f 	and.w	r3, r3, #15
   19ee0:	f103 0157 	add.w	r1, r3, #87	; 0x57
   19ee4:	2b0a      	cmp	r3, #10
   19ee6:	bf38      	it	cc
   19ee8:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19eec:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   19ef0:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   19ef4:	d031      	beq.n	19f5a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   19ef6:	0a01      	lsrs	r1, r0, #8
   19ef8:	f001 010f 	and.w	r1, r1, #15
   19efc:	f101 0257 	add.w	r2, r1, #87	; 0x57
   19f00:	290a      	cmp	r1, #10
   19f02:	bf38      	it	cc
   19f04:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   19f08:	2100      	movs	r1, #0
   19f0a:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   19f0e:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   19f12:	d027      	beq.n	19f64 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   19f14:	0b00      	lsrs	r0, r0, #12
   19f16:	f100 0157 	add.w	r1, r0, #87	; 0x57
   19f1a:	280a      	cmp	r0, #10
   19f1c:	bf38      	it	cc
   19f1e:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   19f22:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   19f26:	227d      	movs	r2, #125	; 0x7d
   19f28:	207c      	movs	r0, #124	; 0x7c
   19f2a:	2881      	cmp	r0, #129	; 0x81
   19f2c:	d304      	bcc.n	19f38 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   19f2e:	e01d      	b.n	19f6c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   19f30:	2280      	movs	r2, #128	; 0x80
   19f32:	207f      	movs	r0, #127	; 0x7f
   19f34:	2881      	cmp	r0, #129	; 0x81
   19f36:	d219      	bcs.n	19f6c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   19f38:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   19f3c:	ab02      	add	r3, sp, #8
   19f3e:	4418      	add	r0, r3
   19f40:	2101      	movs	r1, #1
   19f42:	e9cd 0200 	strd	r0, r2, [sp]
   19f46:	f248 52fd 	movw	r2, #34301	; 0x85fd
   19f4a:	f2c0 0202 	movt	r2, #2
   19f4e:	4660      	mov	r0, ip
   19f50:	2302      	movs	r3, #2
   19f52:	f7fe ff7b 	bl	18e4c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   19f56:	b022      	add	sp, #136	; 0x88
   19f58:	bd80      	pop	{r7, pc}
   19f5a:	207e      	movs	r0, #126	; 0x7e
   19f5c:	227f      	movs	r2, #127	; 0x7f
   19f5e:	2881      	cmp	r0, #129	; 0x81
   19f60:	d3ea      	bcc.n	19f38 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   19f62:	e003      	b.n	19f6c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   19f64:	207d      	movs	r0, #125	; 0x7d
   19f66:	227e      	movs	r2, #126	; 0x7e
   19f68:	2881      	cmp	r0, #129	; 0x81
   19f6a:	d3e5      	bcc.n	19f38 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   19f6c:	2180      	movs	r1, #128	; 0x80
   19f6e:	f7ff fb0a 	bl	19586 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   19f72:	defe      	udf	#254	; 0xfe

00019f74 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>:
   19f74:	b580      	push	{r7, lr}
   19f76:	b0a2      	sub	sp, #136	; 0x88
   19f78:	8800      	ldrh	r0, [r0, #0]
   19f7a:	468c      	mov	ip, r1
   19f7c:	f000 020f 	and.w	r2, r0, #15
   19f80:	f102 0337 	add.w	r3, r2, #55	; 0x37
   19f84:	2a0a      	cmp	r2, #10
   19f86:	bf38      	it	cc
   19f88:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   19f8c:	2200      	movs	r2, #0
   19f8e:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   19f92:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   19f96:	d02a      	beq.n	19fee <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x7a>
   19f98:	0903      	lsrs	r3, r0, #4
   19f9a:	f003 030f 	and.w	r3, r3, #15
   19f9e:	f103 0137 	add.w	r1, r3, #55	; 0x37
   19fa2:	2b0a      	cmp	r3, #10
   19fa4:	bf38      	it	cc
   19fa6:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   19faa:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   19fae:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   19fb2:	d031      	beq.n	1a018 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xa4>
   19fb4:	0a01      	lsrs	r1, r0, #8
   19fb6:	f001 010f 	and.w	r1, r1, #15
   19fba:	f101 0237 	add.w	r2, r1, #55	; 0x37
   19fbe:	290a      	cmp	r1, #10
   19fc0:	bf38      	it	cc
   19fc2:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   19fc6:	2100      	movs	r1, #0
   19fc8:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   19fcc:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   19fd0:	d027      	beq.n	1a022 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xae>
   19fd2:	0b00      	lsrs	r0, r0, #12
   19fd4:	f100 0137 	add.w	r1, r0, #55	; 0x37
   19fd8:	280a      	cmp	r0, #10
   19fda:	bf38      	it	cc
   19fdc:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   19fe0:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   19fe4:	227d      	movs	r2, #125	; 0x7d
   19fe6:	207c      	movs	r0, #124	; 0x7c
   19fe8:	2881      	cmp	r0, #129	; 0x81
   19fea:	d304      	bcc.n	19ff6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   19fec:	e01d      	b.n	1a02a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   19fee:	2280      	movs	r2, #128	; 0x80
   19ff0:	207f      	movs	r0, #127	; 0x7f
   19ff2:	2881      	cmp	r0, #129	; 0x81
   19ff4:	d219      	bcs.n	1a02a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   19ff6:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   19ffa:	ab02      	add	r3, sp, #8
   19ffc:	4418      	add	r0, r3
   19ffe:	2101      	movs	r1, #1
   1a000:	e9cd 0200 	strd	r0, r2, [sp]
   1a004:	f248 52fd 	movw	r2, #34301	; 0x85fd
   1a008:	f2c0 0202 	movt	r2, #2
   1a00c:	4660      	mov	r0, ip
   1a00e:	2302      	movs	r3, #2
   1a010:	f7fe ff1c 	bl	18e4c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1a014:	b022      	add	sp, #136	; 0x88
   1a016:	bd80      	pop	{r7, pc}
   1a018:	207e      	movs	r0, #126	; 0x7e
   1a01a:	227f      	movs	r2, #127	; 0x7f
   1a01c:	2881      	cmp	r0, #129	; 0x81
   1a01e:	d3ea      	bcc.n	19ff6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   1a020:	e003      	b.n	1a02a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   1a022:	207d      	movs	r0, #125	; 0x7d
   1a024:	227e      	movs	r2, #126	; 0x7e
   1a026:	2881      	cmp	r0, #129	; 0x81
   1a028:	d3e5      	bcc.n	19ff6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   1a02a:	2180      	movs	r1, #128	; 0x80
   1a02c:	f7ff faab 	bl	19586 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1a030:	defe      	udf	#254	; 0xfe

0001a032 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   1a032:	b5b0      	push	{r4, r5, r7, lr}
   1a034:	b0a2      	sub	sp, #136	; 0x88
   1a036:	6800      	ldr	r0, [r0, #0]
   1a038:	f10d 0e08 	add.w	lr, sp, #8
   1a03c:	468c      	mov	ip, r1
   1a03e:	2381      	movs	r3, #129	; 0x81
   1a040:	2100      	movs	r1, #0
   1a042:	f000 020f 	and.w	r2, r0, #15
   1a046:	f102 0457 	add.w	r4, r2, #87	; 0x57
   1a04a:	2a0a      	cmp	r2, #10
   1a04c:	bf38      	it	cc
   1a04e:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   1a052:	eb0e 0203 	add.w	r2, lr, r3
   1a056:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   1a05a:	f802 4c02 	strb.w	r4, [r2, #-2]
   1a05e:	d030      	beq.n	1a0c2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   1a060:	0904      	lsrs	r4, r0, #4
   1a062:	f004 040f 	and.w	r4, r4, #15
   1a066:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1a06a:	2c0a      	cmp	r4, #10
   1a06c:	bf38      	it	cc
   1a06e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1a072:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   1a076:	f802 5c03 	strb.w	r5, [r2, #-3]
   1a07a:	d028      	beq.n	1a0ce <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   1a07c:	0a04      	lsrs	r4, r0, #8
   1a07e:	f004 040f 	and.w	r4, r4, #15
   1a082:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1a086:	2c0a      	cmp	r4, #10
   1a088:	bf38      	it	cc
   1a08a:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1a08e:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   1a092:	f802 5c04 	strb.w	r5, [r2, #-4]
   1a096:	d01f      	beq.n	1a0d8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   1a098:	0b04      	lsrs	r4, r0, #12
   1a09a:	3b04      	subs	r3, #4
   1a09c:	f004 040f 	and.w	r4, r4, #15
   1a0a0:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1a0a4:	2c0a      	cmp	r4, #10
   1a0a6:	bf38      	it	cc
   1a0a8:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1a0ac:	f802 5c05 	strb.w	r5, [r2, #-5]
   1a0b0:	0c02      	lsrs	r2, r0, #16
   1a0b2:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   1a0b6:	4610      	mov	r0, r2
   1a0b8:	d1c3      	bne.n	1a042 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   1a0ba:	1e58      	subs	r0, r3, #1
   1a0bc:	2881      	cmp	r0, #129	; 0x81
   1a0be:	d30f      	bcc.n	1a0e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   1a0c0:	e01e      	b.n	1a100 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1a0c2:	1e59      	subs	r1, r3, #1
   1a0c4:	1e98      	subs	r0, r3, #2
   1a0c6:	460b      	mov	r3, r1
   1a0c8:	2881      	cmp	r0, #129	; 0x81
   1a0ca:	d309      	bcc.n	1a0e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   1a0cc:	e018      	b.n	1a100 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1a0ce:	1ed8      	subs	r0, r3, #3
   1a0d0:	3b02      	subs	r3, #2
   1a0d2:	2881      	cmp	r0, #129	; 0x81
   1a0d4:	d304      	bcc.n	1a0e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   1a0d6:	e013      	b.n	1a100 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1a0d8:	1f18      	subs	r0, r3, #4
   1a0da:	3b03      	subs	r3, #3
   1a0dc:	2881      	cmp	r0, #129	; 0x81
   1a0de:	d20f      	bcs.n	1a100 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1a0e0:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   1a0e4:	f248 52fd 	movw	r2, #34301	; 0x85fd
   1a0e8:	4470      	add	r0, lr
   1a0ea:	f2c0 0202 	movt	r2, #2
   1a0ee:	e9cd 0100 	strd	r0, r1, [sp]
   1a0f2:	4660      	mov	r0, ip
   1a0f4:	2101      	movs	r1, #1
   1a0f6:	2302      	movs	r3, #2
   1a0f8:	f7fe fea8 	bl	18e4c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1a0fc:	b022      	add	sp, #136	; 0x88
   1a0fe:	bdb0      	pop	{r4, r5, r7, pc}
   1a100:	2180      	movs	r1, #128	; 0x80
   1a102:	f7ff fa40 	bl	19586 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1a106:	defe      	udf	#254	; 0xfe

0001a108 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   1a108:	b5b0      	push	{r4, r5, r7, lr}
   1a10a:	b0a2      	sub	sp, #136	; 0x88
   1a10c:	6800      	ldr	r0, [r0, #0]
   1a10e:	f10d 0e08 	add.w	lr, sp, #8
   1a112:	468c      	mov	ip, r1
   1a114:	2381      	movs	r3, #129	; 0x81
   1a116:	2100      	movs	r1, #0
   1a118:	f000 020f 	and.w	r2, r0, #15
   1a11c:	f102 0437 	add.w	r4, r2, #55	; 0x37
   1a120:	2a0a      	cmp	r2, #10
   1a122:	bf38      	it	cc
   1a124:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   1a128:	eb0e 0203 	add.w	r2, lr, r3
   1a12c:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   1a130:	f802 4c02 	strb.w	r4, [r2, #-2]
   1a134:	d030      	beq.n	1a198 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   1a136:	0904      	lsrs	r4, r0, #4
   1a138:	f004 040f 	and.w	r4, r4, #15
   1a13c:	f104 0537 	add.w	r5, r4, #55	; 0x37
   1a140:	2c0a      	cmp	r4, #10
   1a142:	bf38      	it	cc
   1a144:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1a148:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   1a14c:	f802 5c03 	strb.w	r5, [r2, #-3]
   1a150:	d028      	beq.n	1a1a4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   1a152:	0a04      	lsrs	r4, r0, #8
   1a154:	f004 040f 	and.w	r4, r4, #15
   1a158:	f104 0537 	add.w	r5, r4, #55	; 0x37
   1a15c:	2c0a      	cmp	r4, #10
   1a15e:	bf38      	it	cc
   1a160:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1a164:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   1a168:	f802 5c04 	strb.w	r5, [r2, #-4]
   1a16c:	d01f      	beq.n	1a1ae <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   1a16e:	0b04      	lsrs	r4, r0, #12
   1a170:	3b04      	subs	r3, #4
   1a172:	f004 040f 	and.w	r4, r4, #15
   1a176:	f104 0537 	add.w	r5, r4, #55	; 0x37
   1a17a:	2c0a      	cmp	r4, #10
   1a17c:	bf38      	it	cc
   1a17e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1a182:	f802 5c05 	strb.w	r5, [r2, #-5]
   1a186:	0c02      	lsrs	r2, r0, #16
   1a188:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   1a18c:	4610      	mov	r0, r2
   1a18e:	d1c3      	bne.n	1a118 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   1a190:	1e58      	subs	r0, r3, #1
   1a192:	2881      	cmp	r0, #129	; 0x81
   1a194:	d30f      	bcc.n	1a1b6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1a196:	e01e      	b.n	1a1d6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1a198:	1e59      	subs	r1, r3, #1
   1a19a:	1e98      	subs	r0, r3, #2
   1a19c:	460b      	mov	r3, r1
   1a19e:	2881      	cmp	r0, #129	; 0x81
   1a1a0:	d309      	bcc.n	1a1b6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1a1a2:	e018      	b.n	1a1d6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1a1a4:	1ed8      	subs	r0, r3, #3
   1a1a6:	3b02      	subs	r3, #2
   1a1a8:	2881      	cmp	r0, #129	; 0x81
   1a1aa:	d304      	bcc.n	1a1b6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1a1ac:	e013      	b.n	1a1d6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1a1ae:	1f18      	subs	r0, r3, #4
   1a1b0:	3b03      	subs	r3, #3
   1a1b2:	2881      	cmp	r0, #129	; 0x81
   1a1b4:	d20f      	bcs.n	1a1d6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1a1b6:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   1a1ba:	f248 52fd 	movw	r2, #34301	; 0x85fd
   1a1be:	4470      	add	r0, lr
   1a1c0:	f2c0 0202 	movt	r2, #2
   1a1c4:	e9cd 0100 	strd	r0, r1, [sp]
   1a1c8:	4660      	mov	r0, ip
   1a1ca:	2101      	movs	r1, #1
   1a1cc:	2302      	movs	r3, #2
   1a1ce:	f7fe fe3d 	bl	18e4c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1a1d2:	b022      	add	sp, #136	; 0x88
   1a1d4:	bdb0      	pop	{r4, r5, r7, pc}
   1a1d6:	2180      	movs	r1, #128	; 0x80
   1a1d8:	f7ff f9d5 	bl	19586 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1a1dc:	defe      	udf	#254	; 0xfe

0001a1de <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   1a1de:	b580      	push	{r7, lr}
   1a1e0:	b08c      	sub	sp, #48	; 0x30
   1a1e2:	7802      	ldrb	r2, [r0, #0]
   1a1e4:	2a64      	cmp	r2, #100	; 0x64
   1a1e6:	d314      	bcc.n	1a212 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   1a1e8:	f248 501f 	movw	r0, #34079	; 0x851f
   1a1ec:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   1a1f0:	fba2 0300 	umull	r0, r3, r2, r0
   1a1f4:	2064      	movs	r0, #100	; 0x64
   1a1f6:	095b      	lsrs	r3, r3, #5
   1a1f8:	fb03 2010 	mls	r0, r3, r0, r2
   1a1fc:	f248 52ff 	movw	r2, #34303	; 0x85ff
   1a200:	f2c0 0202 	movt	r2, #2
   1a204:	b2c0      	uxtb	r0, r0
   1a206:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1a20a:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1a20e:	2024      	movs	r0, #36	; 0x24
   1a210:	e003      	b.n	1a21a <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   1a212:	2a0a      	cmp	r2, #10
   1a214:	d206      	bcs.n	1a224 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   1a216:	2026      	movs	r0, #38	; 0x26
   1a218:	4613      	mov	r3, r2
   1a21a:	f103 0230 	add.w	r2, r3, #48	; 0x30
   1a21e:	ab02      	add	r3, sp, #8
   1a220:	541a      	strb	r2, [r3, r0]
   1a222:	e008      	b.n	1a236 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   1a224:	f248 50ff 	movw	r0, #34303	; 0x85ff
   1a228:	f2c0 0002 	movt	r0, #2
   1a22c:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   1a230:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1a234:	2025      	movs	r0, #37	; 0x25
   1a236:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   1a23a:	ab02      	add	r3, sp, #8
   1a23c:	4418      	add	r0, r3
   1a23e:	2300      	movs	r3, #0
   1a240:	e9cd 0200 	strd	r0, r2, [sp]
   1a244:	f248 32c4 	movw	r2, #33732	; 0x83c4
   1a248:	4608      	mov	r0, r1
   1a24a:	f2c0 0202 	movt	r2, #2
   1a24e:	2101      	movs	r1, #1
   1a250:	f7fe fdfc 	bl	18e4c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1a254:	b00c      	add	sp, #48	; 0x30
   1a256:	bd80      	pop	{r7, pc}

0001a258 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>:
   1a258:	b580      	push	{r7, lr}
   1a25a:	b08c      	sub	sp, #48	; 0x30
   1a25c:	8800      	ldrh	r0, [r0, #0]
   1a25e:	f242 720f 	movw	r2, #9999	; 0x270f
   1a262:	468e      	mov	lr, r1
   1a264:	4290      	cmp	r0, r2
   1a266:	d924      	bls.n	1a2b2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x5a>
   1a268:	f241 7259 	movw	r2, #5977	; 0x1759
   1a26c:	f248 511f 	movw	r1, #34079	; 0x851f
   1a270:	f2cd 12b7 	movt	r2, #53687	; 0xd1b7
   1a274:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   1a278:	fba0 2302 	umull	r2, r3, r0, r2
   1a27c:	0b5a      	lsrs	r2, r3, #13
   1a27e:	f242 7310 	movw	r3, #10000	; 0x2710
   1a282:	fb02 0013 	mls	r0, r2, r3, r0
   1a286:	b283      	uxth	r3, r0
   1a288:	fba3 1301 	umull	r1, r3, r3, r1
   1a28c:	0959      	lsrs	r1, r3, #5
   1a28e:	2364      	movs	r3, #100	; 0x64
   1a290:	fb01 0013 	mls	r0, r1, r3, r0
   1a294:	f248 53ff 	movw	r3, #34303	; 0x85ff
   1a298:	f2c0 0302 	movt	r3, #2
   1a29c:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   1a2a0:	f8ad 102b 	strh.w	r1, [sp, #43]	; 0x2b
   1a2a4:	b280      	uxth	r0, r0
   1a2a6:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1a2aa:	2323      	movs	r3, #35	; 0x23
   1a2ac:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1a2b0:	e024      	b.n	1a2fc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa4>
   1a2b2:	f248 5cff 	movw	ip, #34303	; 0x85ff
   1a2b6:	2863      	cmp	r0, #99	; 0x63
   1a2b8:	f2c0 0c02 	movt	ip, #2
   1a2bc:	d919      	bls.n	1a2f2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x9a>
   1a2be:	f248 511f 	movw	r1, #34079	; 0x851f
   1a2c2:	2325      	movs	r3, #37	; 0x25
   1a2c4:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   1a2c8:	fba0 1201 	umull	r1, r2, r0, r1
   1a2cc:	0951      	lsrs	r1, r2, #5
   1a2ce:	2264      	movs	r2, #100	; 0x64
   1a2d0:	fb01 0012 	mls	r0, r1, r2, r0
   1a2d4:	b280      	uxth	r0, r0
   1a2d6:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
   1a2da:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1a2de:	4608      	mov	r0, r1
   1a2e0:	b282      	uxth	r2, r0
   1a2e2:	2a0a      	cmp	r2, #10
   1a2e4:	d309      	bcc.n	1a2fa <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa2>
   1a2e6:	f83c 1012 	ldrh.w	r1, [ip, r2, lsl #1]
   1a2ea:	1e98      	subs	r0, r3, #2
   1a2ec:	aa02      	add	r2, sp, #8
   1a2ee:	5211      	strh	r1, [r2, r0]
   1a2f0:	e009      	b.n	1a306 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xae>
   1a2f2:	2327      	movs	r3, #39	; 0x27
   1a2f4:	b282      	uxth	r2, r0
   1a2f6:	2a0a      	cmp	r2, #10
   1a2f8:	d2f5      	bcs.n	1a2e6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x8e>
   1a2fa:	4602      	mov	r2, r0
   1a2fc:	1e58      	subs	r0, r3, #1
   1a2fe:	f102 0130 	add.w	r1, r2, #48	; 0x30
   1a302:	aa02      	add	r2, sp, #8
   1a304:	5411      	strb	r1, [r2, r0]
   1a306:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   1a30a:	aa02      	add	r2, sp, #8
   1a30c:	4410      	add	r0, r2
   1a30e:	f248 32c4 	movw	r2, #33732	; 0x83c4
   1a312:	e9cd 0100 	strd	r0, r1, [sp]
   1a316:	f2c0 0202 	movt	r2, #2
   1a31a:	4670      	mov	r0, lr
   1a31c:	2101      	movs	r1, #1
   1a31e:	2300      	movs	r3, #0
   1a320:	f7fe fd94 	bl	18e4c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1a324:	b00c      	add	sp, #48	; 0x30
   1a326:	bd80      	pop	{r7, pc}

0001a328 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   1a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a32c:	b08f      	sub	sp, #60	; 0x3c
   1a32e:	6805      	ldr	r5, [r0, #0]
   1a330:	f248 581f 	movw	r8, #34079	; 0x851f
   1a334:	460e      	mov	r6, r1
   1a336:	f248 51ff 	movw	r1, #34303	; 0x85ff
   1a33a:	2d00      	cmp	r5, #0
   1a33c:	f242 7910 	movw	r9, #10000	; 0x2710
   1a340:	462b      	mov	r3, r5
   1a342:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   1a346:	bf48      	it	mi
   1a348:	426b      	negmi	r3, r5
   1a34a:	454b      	cmp	r3, r9
   1a34c:	f2c0 0102 	movt	r1, #2
   1a350:	d33a      	bcc.n	1a3c8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   1a352:	f241 7a59 	movw	sl, #5977	; 0x1759
   1a356:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   1a35a:	f10d 0e14 	add.w	lr, sp, #20
   1a35e:	2400      	movs	r4, #0
   1a360:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   1a364:	f04f 0b64 	mov.w	fp, #100	; 0x64
   1a368:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   1a36c:	e9cd 5603 	strd	r5, r6, [sp, #12]
   1a370:	fba3 250a 	umull	r2, r5, r3, sl
   1a374:	eb0e 0704 	add.w	r7, lr, r4
   1a378:	3c04      	subs	r4, #4
   1a37a:	4283      	cmp	r3, r0
   1a37c:	ea4f 3255 	mov.w	r2, r5, lsr #13
   1a380:	fb02 3519 	mls	r5, r2, r9, r3
   1a384:	4613      	mov	r3, r2
   1a386:	b2ae      	uxth	r6, r5
   1a388:	fba6 6c08 	umull	r6, ip, r6, r8
   1a38c:	ea4f 165c 	mov.w	r6, ip, lsr #5
   1a390:	fb06 551b 	mls	r5, r6, fp, r5
   1a394:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   1a398:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   1a39c:	b2ad      	uxth	r5, r5
   1a39e:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   1a3a2:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   1a3a6:	d8e3      	bhi.n	1a370 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   1a3a8:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   1a3ac:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1a3b0:	4613      	mov	r3, r2
   1a3b2:	2b63      	cmp	r3, #99	; 0x63
   1a3b4:	dc0b      	bgt.n	1a3ce <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   1a3b6:	461a      	mov	r2, r3
   1a3b8:	2a0a      	cmp	r2, #10
   1a3ba:	db17      	blt.n	1a3ec <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   1a3bc:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   1a3c0:	3802      	subs	r0, #2
   1a3c2:	aa05      	add	r2, sp, #20
   1a3c4:	5211      	strh	r1, [r2, r0]
   1a3c6:	e016      	b.n	1a3f6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   1a3c8:	2027      	movs	r0, #39	; 0x27
   1a3ca:	2b63      	cmp	r3, #99	; 0x63
   1a3cc:	ddf3      	ble.n	1a3b6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   1a3ce:	b29a      	uxth	r2, r3
   1a3d0:	3802      	subs	r0, #2
   1a3d2:	fba2 2708 	umull	r2, r7, r2, r8
   1a3d6:	097a      	lsrs	r2, r7, #5
   1a3d8:	2764      	movs	r7, #100	; 0x64
   1a3da:	fb02 3317 	mls	r3, r2, r7, r3
   1a3de:	af05      	add	r7, sp, #20
   1a3e0:	b29b      	uxth	r3, r3
   1a3e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   1a3e6:	523b      	strh	r3, [r7, r0]
   1a3e8:	2a0a      	cmp	r2, #10
   1a3ea:	dae7      	bge.n	1a3bc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   1a3ec:	3801      	subs	r0, #1
   1a3ee:	f102 0130 	add.w	r1, r2, #48	; 0x30
   1a3f2:	aa05      	add	r2, sp, #20
   1a3f4:	5411      	strb	r1, [r2, r0]
   1a3f6:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   1a3fa:	aa05      	add	r2, sp, #20
   1a3fc:	4410      	add	r0, r2
   1a3fe:	f248 32c4 	movw	r2, #33732	; 0x83c4
   1a402:	e9cd 0100 	strd	r0, r1, [sp]
   1a406:	43e8      	mvns	r0, r5
   1a408:	0fc1      	lsrs	r1, r0, #31
   1a40a:	f2c0 0202 	movt	r2, #2
   1a40e:	4630      	mov	r0, r6
   1a410:	2300      	movs	r3, #0
   1a412:	f7fe fd1b 	bl	18e4c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1a416:	b00f      	add	sp, #60	; 0x3c
   1a418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a41c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   1a41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a420:	b08d      	sub	sp, #52	; 0x34
   1a422:	468c      	mov	ip, r1
   1a424:	6801      	ldr	r1, [r0, #0]
   1a426:	f248 5e1f 	movw	lr, #34079	; 0x851f
   1a42a:	f248 50ff 	movw	r0, #34303	; 0x85ff
   1a42e:	f242 7810 	movw	r8, #10000	; 0x2710
   1a432:	4541      	cmp	r1, r8
   1a434:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   1a438:	f2c0 0002 	movt	r0, #2
   1a43c:	d337      	bcc.n	1a4ae <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   1a43e:	f241 7959 	movw	r9, #5977	; 0x1759
   1a442:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   1a446:	f10d 0b0c 	add.w	fp, sp, #12
   1a44a:	2300      	movs	r3, #0
   1a44c:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   1a450:	f04f 0a64 	mov.w	sl, #100	; 0x64
   1a454:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   1a458:	fba1 2409 	umull	r2, r4, r1, r9
   1a45c:	42b9      	cmp	r1, r7
   1a45e:	ea4f 3254 	mov.w	r2, r4, lsr #13
   1a462:	fb02 1418 	mls	r4, r2, r8, r1
   1a466:	4611      	mov	r1, r2
   1a468:	b2a5      	uxth	r5, r4
   1a46a:	fba5 560e 	umull	r5, r6, r5, lr
   1a46e:	ea4f 1556 	mov.w	r5, r6, lsr #5
   1a472:	eb0b 0603 	add.w	r6, fp, r3
   1a476:	fb05 441a 	mls	r4, r5, sl, r4
   1a47a:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   1a47e:	f1a3 0304 	sub.w	r3, r3, #4
   1a482:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   1a486:	b2a4      	uxth	r4, r4
   1a488:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   1a48c:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   1a490:	d8e2      	bhi.n	1a458 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   1a492:	f103 0427 	add.w	r4, r3, #39	; 0x27
   1a496:	4611      	mov	r1, r2
   1a498:	2963      	cmp	r1, #99	; 0x63
   1a49a:	dc0b      	bgt.n	1a4b4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   1a49c:	460b      	mov	r3, r1
   1a49e:	2b0a      	cmp	r3, #10
   1a4a0:	db17      	blt.n	1a4d2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   1a4a2:	1ea1      	subs	r1, r4, #2
   1a4a4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   1a4a8:	aa03      	add	r2, sp, #12
   1a4aa:	5250      	strh	r0, [r2, r1]
   1a4ac:	e016      	b.n	1a4dc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   1a4ae:	2427      	movs	r4, #39	; 0x27
   1a4b0:	2963      	cmp	r1, #99	; 0x63
   1a4b2:	ddf3      	ble.n	1a49c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   1a4b4:	b28a      	uxth	r2, r1
   1a4b6:	3c02      	subs	r4, #2
   1a4b8:	fba2 230e 	umull	r2, r3, r2, lr
   1a4bc:	2264      	movs	r2, #100	; 0x64
   1a4be:	095b      	lsrs	r3, r3, #5
   1a4c0:	fb03 1112 	mls	r1, r3, r2, r1
   1a4c4:	aa03      	add	r2, sp, #12
   1a4c6:	b289      	uxth	r1, r1
   1a4c8:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   1a4cc:	5311      	strh	r1, [r2, r4]
   1a4ce:	2b0a      	cmp	r3, #10
   1a4d0:	dae7      	bge.n	1a4a2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   1a4d2:	1e61      	subs	r1, r4, #1
   1a4d4:	aa03      	add	r2, sp, #12
   1a4d6:	f103 0030 	add.w	r0, r3, #48	; 0x30
   1a4da:	5450      	strb	r0, [r2, r1]
   1a4dc:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   1a4e0:	aa03      	add	r2, sp, #12
   1a4e2:	4411      	add	r1, r2
   1a4e4:	f248 32c4 	movw	r2, #33732	; 0x83c4
   1a4e8:	e9cd 1000 	strd	r1, r0, [sp]
   1a4ec:	f2c0 0202 	movt	r2, #2
   1a4f0:	4660      	mov	r0, ip
   1a4f2:	2101      	movs	r1, #1
   1a4f4:	2300      	movs	r3, #0
   1a4f6:	f7fe fca9 	bl	18e4c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1a4fa:	b00d      	add	sp, #52	; 0x34
   1a4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a500 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   1a500:	e9d0 2000 	ldrd	r2, r0, [r0]
   1a504:	68c3      	ldr	r3, [r0, #12]
   1a506:	4610      	mov	r0, r2
   1a508:	4718      	bx	r3

0001a50a <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   1a50a:	460b      	mov	r3, r1
   1a50c:	e9d0 1200 	ldrd	r1, r2, [r0]
   1a510:	4618      	mov	r0, r3
   1a512:	f7fe bde3 	b.w	190dc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
	...

0001a518 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   1a518:	4b07      	ldr	r3, [pc, #28]	; (1a538 <__semihost+0x20>)
   1a51a:	781b      	ldrb	r3, [r3, #0]
   1a51c:	b14b      	cbz	r3, 1a532 <__semihost+0x1a>
static int __semihost(int command, void* message) {
   1a51e:	b410      	push	{r4}
   1a520:	4602      	mov	r2, r0
   1a522:	460c      	mov	r4, r1
    __asm( 
   1a524:	4610      	mov	r0, r2
   1a526:	4621      	mov	r1, r4
   1a528:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   1a52a:	2000      	movs	r0, #0
}
   1a52c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a530:	4770      	bx	lr
    if (!log_enabled) return -1;
   1a532:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1a536:	4770      	bx	lr
   1a538:	20000100 	.word	0x20000100

0001a53c <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   1a53c:	4b02      	ldr	r3, [pc, #8]	; (1a548 <debugger_connected+0xc>)
   1a53e:	6818      	ldr	r0, [r3, #0]
}
   1a540:	f000 0001 	and.w	r0, r0, #1
   1a544:	4770      	bx	lr
   1a546:	bf00      	nop
   1a548:	e000edf0 	.word	0xe000edf0

0001a54c <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   1a54c:	b570      	push	{r4, r5, r6, lr}
   1a54e:	b084      	sub	sp, #16
   1a550:	4606      	mov	r6, r0
   1a552:	460d      	mov	r5, r1
   1a554:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   1a556:	f7ff fff1 	bl	1a53c <debugger_connected>
   1a55a:	4603      	mov	r3, r0
   1a55c:	b108      	cbz	r0, 1a562 <semihost_write+0x16>
    if (length == 0) { return 0; }
   1a55e:	b91c      	cbnz	r4, 1a568 <semihost_write+0x1c>
   1a560:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   1a562:	4618      	mov	r0, r3
   1a564:	b004      	add	sp, #16
   1a566:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   1a568:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   1a56a:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   1a56c:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   1a56e:	a901      	add	r1, sp, #4
   1a570:	2005      	movs	r0, #5
   1a572:	f7ff ffd1 	bl	1a518 <__semihost>
   1a576:	4603      	mov	r3, r0
   1a578:	e7f3      	b.n	1a562 <semihost_write+0x16>
	...

0001a57c <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   1a57c:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   1a57e:	4b0e      	ldr	r3, [pc, #56]	; (1a5b8 <console_flush+0x3c>)
   1a580:	781b      	ldrb	r3, [r3, #0]
   1a582:	b1bb      	cbz	r3, 1a5b4 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   1a584:	4b0d      	ldr	r3, [pc, #52]	; (1a5bc <console_flush+0x40>)
   1a586:	681d      	ldr	r5, [r3, #0]
   1a588:	b1a5      	cbz	r5, 1a5b4 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   1a58a:	4b0d      	ldr	r3, [pc, #52]	; (1a5c0 <console_flush+0x44>)
   1a58c:	685b      	ldr	r3, [r3, #4]
   1a58e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   1a592:	b97b      	cbnz	r3, 1a5b4 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   1a594:	4b09      	ldr	r3, [pc, #36]	; (1a5bc <console_flush+0x40>)
   1a596:	2200      	movs	r2, #0
   1a598:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   1a59a:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   1a59c:	e005      	b.n	1a5aa <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   1a59e:	88e2      	ldrh	r2, [r4, #6]
   1a5a0:	6821      	ldr	r1, [r4, #0]
   1a5a2:	2002      	movs	r0, #2
   1a5a4:	f7ff ffd2 	bl	1a54c <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   1a5a8:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   1a5aa:	2c00      	cmp	r4, #0
   1a5ac:	d1f7      	bne.n	1a59e <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   1a5ae:	4628      	mov	r0, r5
   1a5b0:	f001 fbfc 	bl	1bdac <os_mbuf_free_chain>
}
   1a5b4:	bd38      	pop	{r3, r4, r5, pc}
   1a5b6:	bf00      	nop
   1a5b8:	20000100 	.word	0x20000100
   1a5bc:	20006f04 	.word	0x20006f04
   1a5c0:	e000ed00 	.word	0xe000ed00

0001a5c4 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   1a5c4:	b508      	push	{r3, lr}
   1a5c6:	f7ff ffd9 	bl	1a57c <console_flush>
   1a5ca:	bd08      	pop	{r3, pc}

0001a5cc <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   1a5cc:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   1a5ce:	4b12      	ldr	r3, [pc, #72]	; (1a618 <console_buffer+0x4c>)
   1a5d0:	781b      	ldrb	r3, [r3, #0]
   1a5d2:	b903      	cbnz	r3, 1a5d6 <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   1a5d4:	bd38      	pop	{r3, r4, r5, pc}
   1a5d6:	460d      	mov	r5, r1
   1a5d8:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   1a5da:	f7ff ffaf 	bl	1a53c <debugger_connected>
   1a5de:	2800      	cmp	r0, #0
   1a5e0:	d0f8      	beq.n	1a5d4 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   1a5e2:	4b0e      	ldr	r3, [pc, #56]	; (1a61c <console_buffer+0x50>)
   1a5e4:	681b      	ldr	r3, [r3, #0]
   1a5e6:	b173      	cbz	r3, 1a606 <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   1a5e8:	4b0c      	ldr	r3, [pc, #48]	; (1a61c <console_buffer+0x50>)
   1a5ea:	6818      	ldr	r0, [r3, #0]
   1a5ec:	f001 fbf0 	bl	1bdd0 <os_mbuf_len>
   1a5f0:	4428      	add	r0, r5
   1a5f2:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   1a5f6:	d2ed      	bcs.n	1a5d4 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   1a5f8:	b2aa      	uxth	r2, r5
   1a5fa:	4621      	mov	r1, r4
   1a5fc:	4b07      	ldr	r3, [pc, #28]	; (1a61c <console_buffer+0x50>)
   1a5fe:	6818      	ldr	r0, [r3, #0]
   1a600:	f001 fbf0 	bl	1bde4 <os_mbuf_append>
   1a604:	e7e6      	b.n	1a5d4 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   1a606:	2100      	movs	r1, #0
   1a608:	b2a8      	uxth	r0, r5
   1a60a:	f001 fd93 	bl	1c134 <os_msys_get_pkthdr>
   1a60e:	4b03      	ldr	r3, [pc, #12]	; (1a61c <console_buffer+0x50>)
   1a610:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   1a612:	2800      	cmp	r0, #0
   1a614:	d1e8      	bne.n	1a5e8 <console_buffer+0x1c>
   1a616:	e7dd      	b.n	1a5d4 <console_buffer+0x8>
   1a618:	20000100 	.word	0x20000100
   1a61c:	20006f04 	.word	0x20006f04

0001a620 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   1a620:	b500      	push	{lr}
   1a622:	b083      	sub	sp, #12
   1a624:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   1a628:	280d      	cmp	r0, #13
   1a62a:	d004      	beq.n	1a636 <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   1a62c:	2101      	movs	r1, #1
   1a62e:	f10d 0007 	add.w	r0, sp, #7
   1a632:	f7ff ffcb 	bl	1a5cc <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   1a636:	b003      	add	sp, #12
   1a638:	f85d fb04 	ldr.w	pc, [sp], #4

0001a63c <console_printhex>:
void console_printhex(uint8_t v) {
   1a63c:	b510      	push	{r4, lr}
   1a63e:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   1a640:	2310      	movs	r3, #16
    int length = 0;
   1a642:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   1a644:	e005      	b.n	1a652 <console_printhex+0x16>
        v = v % divisor;
   1a646:	fbb0 f1f3 	udiv	r1, r0, r3
   1a64a:	fb03 0011 	mls	r0, r3, r1, r0
   1a64e:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   1a650:	091b      	lsrs	r3, r3, #4
   1a652:	b18b      	cbz	r3, 1a678 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   1a654:	fbb0 f4f3 	udiv	r4, r0, r3
   1a658:	f104 0130 	add.w	r1, r4, #48	; 0x30
   1a65c:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   1a65e:	2939      	cmp	r1, #57	; 0x39
   1a660:	d902      	bls.n	1a668 <console_printhex+0x2c>
   1a662:	f104 0157 	add.w	r1, r4, #87	; 0x57
   1a666:	b2c9      	uxtb	r1, r1
            if (length < size) {
   1a668:	2a02      	cmp	r2, #2
   1a66a:	dcec      	bgt.n	1a646 <console_printhex+0xa>
                buffer[length++] = digit;
   1a66c:	ac02      	add	r4, sp, #8
   1a66e:	4414      	add	r4, r2
   1a670:	f804 1c04 	strb.w	r1, [r4, #-4]
   1a674:	3201      	adds	r2, #1
   1a676:	e7e6      	b.n	1a646 <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   1a678:	b92a      	cbnz	r2, 1a686 <console_printhex+0x4a>
   1a67a:	ab02      	add	r3, sp, #8
   1a67c:	4413      	add	r3, r2
   1a67e:	2130      	movs	r1, #48	; 0x30
   1a680:	f803 1c04 	strb.w	r1, [r3, #-4]
   1a684:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   1a686:	2a02      	cmp	r2, #2
   1a688:	dc04      	bgt.n	1a694 <console_printhex+0x58>
   1a68a:	ab02      	add	r3, sp, #8
   1a68c:	441a      	add	r2, r3
   1a68e:	2300      	movs	r3, #0
   1a690:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   1a694:	2300      	movs	r3, #0
   1a696:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   1a69a:	a801      	add	r0, sp, #4
   1a69c:	f002 fb73 	bl	1cd86 <strlen>
   1a6a0:	4601      	mov	r1, r0
   1a6a2:	a801      	add	r0, sp, #4
   1a6a4:	f7ff ff92 	bl	1a5cc <console_buffer>
}
   1a6a8:	b002      	add	sp, #8
   1a6aa:	bd10      	pop	{r4, pc}

0001a6ac <console_printint>:
void console_printint(int i) {
   1a6ac:	b508      	push	{r3, lr}
    console_printf("%d", i);
   1a6ae:	4601      	mov	r1, r0
   1a6b0:	4801      	ldr	r0, [pc, #4]	; (1a6b8 <console_printint+0xc>)
   1a6b2:	f000 f873 	bl	1a79c <console_printf>
}
   1a6b6:	bd08      	pop	{r3, pc}
   1a6b8:	000295c4 	.word	0x000295c4

0001a6bc <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   1a6bc:	b180      	cbz	r0, 1a6e0 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   1a6be:	b570      	push	{r4, r5, r6, lr}
   1a6c0:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   1a6c2:	b161      	cbz	r1, 1a6de <console_dump+0x22>
   1a6c4:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   1a6c6:	2400      	movs	r4, #0
   1a6c8:	e007      	b.n	1a6da <console_dump+0x1e>
   1a6ca:	5d30      	ldrb	r0, [r6, r4]
   1a6cc:	f7ff ffb6 	bl	1a63c <console_printhex>
   1a6d0:	2101      	movs	r1, #1
   1a6d2:	4804      	ldr	r0, [pc, #16]	; (1a6e4 <console_dump+0x28>)
   1a6d4:	f7ff ff7a 	bl	1a5cc <console_buffer>
   1a6d8:	3401      	adds	r4, #1
   1a6da:	42ac      	cmp	r4, r5
   1a6dc:	d3f5      	bcc.n	1a6ca <console_dump+0xe>
}
   1a6de:	bd70      	pop	{r4, r5, r6, pc}
   1a6e0:	4770      	bx	lr
   1a6e2:	bf00      	nop
   1a6e4:	000295c0 	.word	0x000295c0

0001a6e8 <console_out_nolock>:

int console_out_nolock(int character) {
   1a6e8:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   1a6ea:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   1a6ec:	4b0b      	ldr	r3, [pc, #44]	; (1a71c <console_out_nolock+0x34>)
   1a6ee:	781b      	ldrb	r3, [r3, #0]
   1a6f0:	b953      	cbnz	r3, 1a708 <console_out_nolock+0x20>
   1a6f2:	4604      	mov	r4, r0
    if ('\n' == c) {
   1a6f4:	2d0a      	cmp	r5, #10
   1a6f6:	d009      	beq.n	1a70c <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   1a6f8:	4b09      	ldr	r3, [pc, #36]	; (1a720 <console_out_nolock+0x38>)
   1a6fa:	2201      	movs	r2, #1
   1a6fc:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   1a6fe:	4628      	mov	r0, r5
   1a700:	f7ff ff8e 	bl	1a620 <semihosting_console_write_ch>
    return character;
   1a704:	4620      	mov	r0, r4
}
   1a706:	bd38      	pop	{r3, r4, r5, pc}
   1a708:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   1a70a:	e7fc      	b.n	1a706 <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   1a70c:	200d      	movs	r0, #13
   1a70e:	f7ff ff87 	bl	1a620 <semihosting_console_write_ch>
        console_is_midline = 0;
   1a712:	4b03      	ldr	r3, [pc, #12]	; (1a720 <console_out_nolock+0x38>)
   1a714:	2200      	movs	r2, #0
   1a716:	601a      	str	r2, [r3, #0]
   1a718:	e7f1      	b.n	1a6fe <console_out_nolock+0x16>
   1a71a:	bf00      	nop
   1a71c:	2000ddb4 	.word	0x2000ddb4
   1a720:	2000ddb8 	.word	0x2000ddb8

0001a724 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   1a724:	2000      	movs	r0, #0
   1a726:	4770      	bx	lr

0001a728 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   1a728:	b570      	push	{r4, r5, r6, lr}
   1a72a:	4606      	mov	r6, r0
   1a72c:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   1a72e:	2400      	movs	r4, #0
   1a730:	42ac      	cmp	r4, r5
   1a732:	da07      	bge.n	1a744 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   1a734:	5d30      	ldrb	r0, [r6, r4]
   1a736:	f7ff ffd7 	bl	1a6e8 <console_out_nolock>
   1a73a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1a73e:	d001      	beq.n	1a744 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   1a740:	3401      	adds	r4, #1
   1a742:	e7f5      	b.n	1a730 <console_write+0x8>
    }
}
   1a744:	bd70      	pop	{r4, r5, r6, pc}

0001a746 <console_blocking_mode>:

void console_blocking_mode(void) {
   1a746:	b508      	push	{r3, lr}
    disable_buffer();
   1a748:	f7ff ff3c 	bl	1a5c4 <disable_buffer>
}
   1a74c:	bd08      	pop	{r3, pc}
	...

0001a750 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   1a750:	b510      	push	{r4, lr}
   1a752:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1a754:	4b0d      	ldr	r3, [pc, #52]	; (1a78c <console_pkg_init+0x3c>)
   1a756:	781b      	ldrb	r3, [r3, #0]
   1a758:	b193      	cbz	r3, 1a780 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   1a75a:	480d      	ldr	r0, [pc, #52]	; (1a790 <console_pkg_init+0x40>)
   1a75c:	f001 f9fa 	bl	1bb54 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   1a760:	480c      	ldr	r0, [pc, #48]	; (1a794 <console_pkg_init+0x44>)
   1a762:	f001 fd15 	bl	1c190 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   1a766:	f7ff ffdd 	bl	1a724 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a76a:	b138      	cbz	r0, 1a77c <console_pkg_init+0x2c>
   1a76c:	2000      	movs	r0, #0
   1a76e:	9000      	str	r0, [sp, #0]
   1a770:	4b09      	ldr	r3, [pc, #36]	; (1a798 <console_pkg_init+0x48>)
   1a772:	681c      	ldr	r4, [r3, #0]
   1a774:	4603      	mov	r3, r0
   1a776:	4602      	mov	r2, r0
   1a778:	4601      	mov	r1, r0
   1a77a:	47a0      	blx	r4
}
   1a77c:	b002      	add	sp, #8
   1a77e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1a780:	461a      	mov	r2, r3
   1a782:	4619      	mov	r1, r3
   1a784:	4618      	mov	r0, r3
   1a786:	f000 fed1 	bl	1b52c <__assert_func>
   1a78a:	bf00      	nop
   1a78c:	2000ddbc 	.word	0x2000ddbc
   1a790:	20006f08 	.word	0x20006f08
   1a794:	20006f18 	.word	0x20006f18
   1a798:	20000104 	.word	0x20000104

0001a79c <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   1a79c:	b40f      	push	{r0, r1, r2, r3}
   1a79e:	b510      	push	{r4, lr}
   1a7a0:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   1a7a2:	f000 f81f 	bl	1a7e4 <console_get_ticks>
   1a7a6:	b160      	cbz	r0, 1a7c2 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   1a7a8:	4b0c      	ldr	r3, [pc, #48]	; (1a7dc <console_printf+0x40>)
   1a7aa:	681b      	ldr	r3, [r3, #0]
   1a7ac:	b10b      	cbz	r3, 1a7b2 <console_printf+0x16>
    num_chars = 0;
   1a7ae:	2400      	movs	r4, #0
   1a7b0:	e008      	b.n	1a7c4 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   1a7b2:	f002 f8d9 	bl	1c968 <os_time_get>
   1a7b6:	4601      	mov	r1, r0
   1a7b8:	4809      	ldr	r0, [pc, #36]	; (1a7e0 <console_printf+0x44>)
   1a7ba:	f002 fd97 	bl	1d2ec <printf>
   1a7be:	4604      	mov	r4, r0
   1a7c0:	e000      	b.n	1a7c4 <console_printf+0x28>
    num_chars = 0;
   1a7c2:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   1a7c4:	a905      	add	r1, sp, #20
   1a7c6:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   1a7c8:	9804      	ldr	r0, [sp, #16]
   1a7ca:	f002 fdbf 	bl	1d34c <vprintf>
    va_end(args);

    return num_chars;
}
   1a7ce:	4420      	add	r0, r4
   1a7d0:	b002      	add	sp, #8
   1a7d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a7d6:	b004      	add	sp, #16
   1a7d8:	4770      	bx	lr
   1a7da:	bf00      	nop
   1a7dc:	2000ddb8 	.word	0x2000ddb8
   1a7e0:	000295c8 	.word	0x000295c8

0001a7e4 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   1a7e4:	4b01      	ldr	r3, [pc, #4]	; (1a7ec <console_get_ticks+0x8>)
   1a7e6:	7818      	ldrb	r0, [r3, #0]
   1a7e8:	4770      	bx	lr
   1a7ea:	bf00      	nop
   1a7ec:	20006f24 	.word	0x20006f24

0001a7f0 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   1a7f0:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   1a7f2:	f000 fe9b 	bl	1b52c <__assert_func>
	...

0001a7f8 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   1a7f8:	4b01      	ldr	r3, [pc, #4]	; (1a800 <sysinit_start+0x8>)
   1a7fa:	2201      	movs	r2, #1
   1a7fc:	701a      	strb	r2, [r3, #0]
}
   1a7fe:	4770      	bx	lr
   1a800:	2000ddbc 	.word	0x2000ddbc

0001a804 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   1a804:	4b01      	ldr	r3, [pc, #4]	; (1a80c <sysinit_end+0x8>)
   1a806:	2200      	movs	r2, #0
   1a808:	701a      	strb	r2, [r3, #0]
}
   1a80a:	4770      	bx	lr
   1a80c:	2000ddbc 	.word	0x2000ddbc

0001a810 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   1a810:	4a09      	ldr	r2, [pc, #36]	; (1a838 <NVIC_Relocate+0x28>)
   1a812:	4b0a      	ldr	r3, [pc, #40]	; (1a83c <NVIC_Relocate+0x2c>)
   1a814:	429a      	cmp	r2, r3
   1a816:	d00a      	beq.n	1a82e <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   1a818:	2300      	movs	r3, #0
   1a81a:	e006      	b.n	1a82a <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   1a81c:	4a07      	ldr	r2, [pc, #28]	; (1a83c <NVIC_Relocate+0x2c>)
   1a81e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   1a822:	4a05      	ldr	r2, [pc, #20]	; (1a838 <NVIC_Relocate+0x28>)
   1a824:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   1a828:	3301      	adds	r3, #1
   1a82a:	2b35      	cmp	r3, #53	; 0x35
   1a82c:	ddf6      	ble.n	1a81c <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   1a82e:	4a02      	ldr	r2, [pc, #8]	; (1a838 <NVIC_Relocate+0x28>)
   1a830:	4b03      	ldr	r3, [pc, #12]	; (1a840 <NVIC_Relocate+0x30>)
   1a832:	609a      	str	r2, [r3, #8]
#endif
}
   1a834:	4770      	bx	lr
   1a836:	bf00      	nop
   1a838:	20000000 	.word	0x20000000
   1a83c:	00008020 	.word	0x00008020
   1a840:	e000ed00 	.word	0xe000ed00

0001a844 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   1a844:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1a846:	2400      	movs	r4, #0
   1a848:	e000      	b.n	1a84c <hal_gpio_irq_handler+0x8>
   1a84a:	3401      	adds	r4, #1
   1a84c:	2c07      	cmp	r4, #7
   1a84e:	dc1c      	bgt.n	1a88a <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   1a850:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1a854:	4a0d      	ldr	r2, [pc, #52]	; (1a88c <hal_gpio_irq_handler+0x48>)
   1a856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1a85a:	2b00      	cmp	r3, #0
   1a85c:	d0f5      	beq.n	1a84a <hal_gpio_irq_handler+0x6>
   1a85e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1a862:	2301      	movs	r3, #1
   1a864:	40a3      	lsls	r3, r4
   1a866:	421a      	tst	r2, r3
   1a868:	d0ef      	beq.n	1a84a <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   1a86a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1a86e:	4a07      	ldr	r2, [pc, #28]	; (1a88c <hal_gpio_irq_handler+0x48>)
   1a870:	2100      	movs	r1, #0
   1a872:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   1a876:	4b06      	ldr	r3, [pc, #24]	; (1a890 <hal_gpio_irq_handler+0x4c>)
   1a878:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   1a87c:	2a00      	cmp	r2, #0
   1a87e:	d0e4      	beq.n	1a84a <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   1a880:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1a884:	6858      	ldr	r0, [r3, #4]
   1a886:	4790      	blx	r2
   1a888:	e7df      	b.n	1a84a <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   1a88a:	bd10      	pop	{r4, pc}
   1a88c:	40006000 	.word	0x40006000
   1a890:	20006f28 	.word	0x20006f28

0001a894 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   1a894:	4b06      	ldr	r3, [pc, #24]	; (1a8b0 <hal_gpio_irq_setup+0x1c>)
   1a896:	781b      	ldrb	r3, [r3, #0]
   1a898:	b94b      	cbnz	r3, 1a8ae <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a89a:	4b06      	ldr	r3, [pc, #24]	; (1a8b4 <hal_gpio_irq_setup+0x20>)
   1a89c:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a89e:	4a06      	ldr	r2, [pc, #24]	; (1a8b8 <hal_gpio_irq_setup+0x24>)
   1a8a0:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a8a2:	4b06      	ldr	r3, [pc, #24]	; (1a8bc <hal_gpio_irq_setup+0x28>)
   1a8a4:	2240      	movs	r2, #64	; 0x40
   1a8a6:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   1a8a8:	4b01      	ldr	r3, [pc, #4]	; (1a8b0 <hal_gpio_irq_setup+0x1c>)
   1a8aa:	2201      	movs	r2, #1
   1a8ac:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   1a8ae:	4770      	bx	lr
   1a8b0:	20006f68 	.word	0x20006f68
   1a8b4:	e000ed00 	.word	0xe000ed00
   1a8b8:	0001a845 	.word	0x0001a845
   1a8bc:	e000e100 	.word	0xe000e100

0001a8c0 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1a8c0:	2000      	movs	r0, #0
   1a8c2:	2807      	cmp	r0, #7
   1a8c4:	dc05      	bgt.n	1a8d2 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   1a8c6:	4b04      	ldr	r3, [pc, #16]	; (1a8d8 <hal_gpio_find_empty_slot+0x18>)
   1a8c8:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   1a8cc:	b11b      	cbz	r3, 1a8d6 <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1a8ce:	3001      	adds	r0, #1
   1a8d0:	e7f7      	b.n	1a8c2 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   1a8d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1a8d6:	4770      	bx	lr
   1a8d8:	20006f28 	.word	0x20006f28

0001a8dc <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   1a8dc:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1a8de:	2000      	movs	r0, #0
   1a8e0:	e000      	b.n	1a8e4 <hal_gpio_find_pin+0x8>
   1a8e2:	3001      	adds	r0, #1
   1a8e4:	2807      	cmp	r0, #7
   1a8e6:	dc0e      	bgt.n	1a906 <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   1a8e8:	4b08      	ldr	r3, [pc, #32]	; (1a90c <hal_gpio_find_pin+0x30>)
   1a8ea:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   1a8ee:	2b00      	cmp	r3, #0
   1a8f0:	d0f7      	beq.n	1a8e2 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   1a8f2:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   1a8f6:	4a06      	ldr	r2, [pc, #24]	; (1a910 <hal_gpio_find_pin+0x34>)
   1a8f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1a8fc:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   1a900:	428b      	cmp	r3, r1
   1a902:	d1ee      	bne.n	1a8e2 <hal_gpio_find_pin+0x6>
   1a904:	e001      	b.n	1a90a <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   1a906:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1a90a:	4770      	bx	lr
   1a90c:	20006f28 	.word	0x20006f28
   1a910:	40006000 	.word	0x40006000

0001a914 <hal_gpio_init_in>:
    switch (pull) {
   1a914:	2901      	cmp	r1, #1
   1a916:	d003      	beq.n	1a920 <hal_gpio_init_in+0xc>
   1a918:	2902      	cmp	r1, #2
   1a91a:	d00f      	beq.n	1a93c <hal_gpio_init_in+0x28>
        conf = 0;
   1a91c:	2100      	movs	r1, #0
        break;
   1a91e:	e000      	b.n	1a922 <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   1a920:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   1a922:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1a926:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   1a92a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   1a92e:	2301      	movs	r3, #1
   1a930:	fa03 f000 	lsl.w	r0, r3, r0
   1a934:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   1a938:	2000      	movs	r0, #0
   1a93a:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   1a93c:	2104      	movs	r1, #4
   1a93e:	e7f0      	b.n	1a922 <hal_gpio_init_in+0xe>

0001a940 <hal_gpio_init_out>:
    if (val) {
   1a940:	b999      	cbnz	r1, 1a96a <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   1a942:	2301      	movs	r3, #1
   1a944:	4083      	lsls	r3, r0
   1a946:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1a94a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   1a94e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1a952:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   1a956:	2103      	movs	r1, #3
   1a958:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   1a95c:	2301      	movs	r3, #1
   1a95e:	fa03 f000 	lsl.w	r0, r3, r0
   1a962:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   1a966:	2000      	movs	r0, #0
   1a968:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1a96a:	2301      	movs	r3, #1
   1a96c:	4083      	lsls	r3, r0
   1a96e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1a972:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1a976:	e7ea      	b.n	1a94e <hal_gpio_init_out+0xe>

0001a978 <hal_gpio_write>:
    if (val) {
   1a978:	b939      	cbnz	r1, 1a98a <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   1a97a:	2301      	movs	r3, #1
   1a97c:	fa03 f000 	lsl.w	r0, r3, r0
   1a980:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a984:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1a988:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1a98a:	2301      	movs	r3, #1
   1a98c:	fa03 f000 	lsl.w	r0, r3, r0
   1a990:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a994:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   1a998:	4770      	bx	lr

0001a99a <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   1a99a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a99e:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   1a9a2:	2301      	movs	r3, #1
   1a9a4:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   1a9a6:	421a      	tst	r2, r3
   1a9a8:	d108      	bne.n	1a9bc <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   1a9aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a9ae:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   1a9b2:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   1a9b6:	f000 0001 	and.w	r0, r0, #1
}
   1a9ba:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   1a9bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a9c0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   1a9c4:	fa23 f000 	lsr.w	r0, r3, r0
   1a9c8:	f000 0001 	and.w	r0, r0, #1
   1a9cc:	4770      	bx	lr
	...

0001a9d0 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   1a9d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9d4:	4680      	mov	r8, r0
   1a9d6:	460f      	mov	r7, r1
   1a9d8:	4616      	mov	r6, r2
   1a9da:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   1a9dc:	f7ff ff5a 	bl	1a894 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   1a9e0:	f7ff ff6e 	bl	1a8c0 <hal_gpio_find_empty_slot>
    if (i < 0) {
   1a9e4:	1e05      	subs	r5, r0, #0
   1a9e6:	db27      	blt.n	1aa38 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   1a9e8:	f89d 1018 	ldrb.w	r1, [sp, #24]
   1a9ec:	4640      	mov	r0, r8
   1a9ee:	f7ff ff91 	bl	1a914 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   1a9f2:	2c02      	cmp	r4, #2
   1a9f4:	d01d      	beq.n	1aa32 <hal_gpio_irq_init+0x62>
   1a9f6:	2c03      	cmp	r4, #3
   1a9f8:	d018      	beq.n	1aa2c <hal_gpio_irq_init+0x5c>
   1a9fa:	2c01      	cmp	r4, #1
   1a9fc:	d002      	beq.n	1aa04 <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   1a9fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aa02:	e011      	b.n	1aa28 <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   1aa04:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   1aa08:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   1aa0c:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   1aa10:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   1aa14:	4b0a      	ldr	r3, [pc, #40]	; (1aa40 <hal_gpio_irq_init+0x70>)
   1aa16:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   1aa1a:	4b0a      	ldr	r3, [pc, #40]	; (1aa44 <hal_gpio_irq_init+0x74>)
   1aa1c:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   1aa20:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   1aa24:	605e      	str	r6, [r3, #4]

    return 0;
   1aa26:	2000      	movs	r0, #0
}
   1aa28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   1aa2c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   1aa30:	e7ea      	b.n	1aa08 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   1aa32:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   1aa36:	e7e7      	b.n	1aa08 <hal_gpio_irq_init+0x38>
        return -1;
   1aa38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aa3c:	e7f4      	b.n	1aa28 <hal_gpio_irq_init+0x58>
   1aa3e:	bf00      	nop
   1aa40:	40006000 	.word	0x40006000
   1aa44:	20006f28 	.word	0x20006f28

0001aa48 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   1aa48:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   1aa4a:	f7ff ff47 	bl	1a8dc <hal_gpio_find_pin>
    if (i < 0) {
   1aa4e:	2800      	cmp	r0, #0
   1aa50:	db0a      	blt.n	1aa68 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   1aa52:	4a06      	ldr	r2, [pc, #24]	; (1aa6c <hal_gpio_irq_enable+0x24>)
   1aa54:	f100 0340 	add.w	r3, r0, #64	; 0x40
   1aa58:	2100      	movs	r1, #0
   1aa5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   1aa5e:	2301      	movs	r3, #1
   1aa60:	fa03 f000 	lsl.w	r0, r3, r0
   1aa64:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   1aa68:	bd08      	pop	{r3, pc}
   1aa6a:	bf00      	nop
   1aa6c:	40006000 	.word	0x40006000

0001aa70 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   1aa70:	3801      	subs	r0, #1
   1aa72:	bf00      	nop
   1aa74:	bf00      	nop
   1aa76:	bf00      	nop
   1aa78:	bf00      	nop
   1aa7a:	bf00      	nop
   1aa7c:	bf00      	nop
   1aa7e:	bf00      	nop
   1aa80:	bf00      	nop
   1aa82:	bf00      	nop
   1aa84:	bf00      	nop
   1aa86:	bf00      	nop
   1aa88:	bf00      	nop
   1aa8a:	bf00      	nop
   1aa8c:	bf00      	nop
   1aa8e:	bf00      	nop
   1aa90:	bf00      	nop
   1aa92:	bf00      	nop
   1aa94:	bf00      	nop
   1aa96:	bf00      	nop
   1aa98:	bf00      	nop
   1aa9a:	bf00      	nop
   1aa9c:	bf00      	nop
   1aa9e:	bf00      	nop
   1aaa0:	bf00      	nop
   1aaa2:	bf00      	nop
   1aaa4:	bf00      	nop
   1aaa6:	bf00      	nop
   1aaa8:	bf00      	nop
   1aaaa:	bf00      	nop
   1aaac:	bf00      	nop
   1aaae:	bf00      	nop
   1aab0:	bf00      	nop
   1aab2:	bf00      	nop
   1aab4:	bf00      	nop
   1aab6:	bf00      	nop
   1aab8:	bf00      	nop
   1aaba:	bf00      	nop
   1aabc:	bf00      	nop
   1aabe:	bf00      	nop
   1aac0:	bf00      	nop
   1aac2:	bf00      	nop
   1aac4:	bf00      	nop
   1aac6:	bf00      	nop
   1aac8:	bf00      	nop
   1aaca:	bf00      	nop
   1aacc:	bf00      	nop
   1aace:	bf00      	nop
   1aad0:	bf00      	nop
   1aad2:	bf00      	nop
   1aad4:	bf00      	nop
   1aad6:	bf00      	nop
   1aad8:	bf00      	nop
   1aada:	bf00      	nop
   1aadc:	bf00      	nop
   1aade:	bf00      	nop
   1aae0:	bf00      	nop
   1aae2:	bf00      	nop
   1aae4:	bf00      	nop
   1aae6:	d1c3      	bne.n	1aa70 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   1aae8:	4770      	bx	lr
	...

0001aaec <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   1aaec:	2801      	cmp	r0, #1
   1aaee:	d806      	bhi.n	1aafe <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   1aaf0:	4b06      	ldr	r3, [pc, #24]	; (1ab0c <hal_i2c_resolve+0x20>)
   1aaf2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1aaf6:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   1aaf8:	b12b      	cbz	r3, 1ab06 <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   1aafa:	2000      	movs	r0, #0
}
   1aafc:	4770      	bx	lr
        *out_i2c = NULL;
   1aafe:	2300      	movs	r3, #0
   1ab00:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   1ab02:	2002      	movs	r0, #2
   1ab04:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   1ab06:	2002      	movs	r0, #2
   1ab08:	4770      	bx	lr
   1ab0a:	bf00      	nop
   1ab0c:	000295d0 	.word	0x000295d0

0001ab10 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   1ab10:	b148      	cbz	r0, 1ab26 <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   1ab12:	f010 0f04 	tst.w	r0, #4
   1ab16:	d107      	bne.n	1ab28 <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   1ab18:	f010 0f02 	tst.w	r0, #2
   1ab1c:	d101      	bne.n	1ab22 <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   1ab1e:	2001      	movs	r0, #1
    }
}
   1ab20:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   1ab22:	2004      	movs	r0, #4
   1ab24:	4770      	bx	lr
   1ab26:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   1ab28:	2005      	movs	r0, #5
   1ab2a:	4770      	bx	lr

0001ab2c <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   1ab2c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1ab30:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   1ab34:	fa23 f000 	lsr.w	r0, r3, r0
}
   1ab38:	f000 0001 	and.w	r0, r0, #1
   1ab3c:	4770      	bx	lr

0001ab3e <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   1ab3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab42:	4605      	mov	r5, r0
   1ab44:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   1ab46:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1ab4a:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   1ab4e:	f240 630c 	movw	r3, #1548	; 0x60c
   1ab52:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   1ab56:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   1ab5a:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   1ab5e:	2101      	movs	r1, #1
   1ab60:	f7ff ff0a 	bl	1a978 <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   1ab64:	2101      	movs	r1, #1
   1ab66:	4630      	mov	r0, r6
   1ab68:	f7ff ff06 	bl	1a978 <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   1ab6c:	f240 630d 	movw	r3, #1549	; 0x60d
   1ab70:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   1ab74:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   1ab78:	2004      	movs	r0, #4
   1ab7a:	f7ff ff79 	bl	1aa70 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   1ab7e:	2400      	movs	r4, #0
   1ab80:	2c08      	cmp	r4, #8
   1ab82:	dc14      	bgt.n	1abae <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   1ab84:	4630      	mov	r0, r6
   1ab86:	f7ff ffd1 	bl	1ab2c <read_gpio_inbuffer>
   1ab8a:	b978      	cbnz	r0, 1abac <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   1ab8c:	2100      	movs	r1, #0
   1ab8e:	4628      	mov	r0, r5
   1ab90:	f7ff fef2 	bl	1a978 <hal_gpio_write>
        hal_i2c_delay_us(4);
   1ab94:	2004      	movs	r0, #4
   1ab96:	f7ff ff6b 	bl	1aa70 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   1ab9a:	2101      	movs	r1, #1
   1ab9c:	4628      	mov	r0, r5
   1ab9e:	f7ff feeb 	bl	1a978 <hal_gpio_write>
        hal_i2c_delay_us(4);
   1aba2:	2004      	movs	r0, #4
   1aba4:	f7ff ff64 	bl	1aa70 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   1aba8:	3401      	adds	r4, #1
   1abaa:	e7e9      	b.n	1ab80 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   1abac:	b154      	cbz	r4, 1abc4 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   1abae:	2100      	movs	r1, #0
   1abb0:	4630      	mov	r0, r6
   1abb2:	f7ff fee1 	bl	1a978 <hal_gpio_write>
    hal_i2c_delay_us(4);
   1abb6:	2004      	movs	r0, #4
   1abb8:	f7ff ff5a 	bl	1aa70 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   1abbc:	2101      	movs	r1, #1
   1abbe:	4630      	mov	r0, r6
   1abc0:	f7ff feda 	bl	1a978 <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   1abc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1abc8:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1abcc:	f240 620c 	movw	r2, #1548	; 0x60c
   1abd0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   1abd4:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1abd8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1abdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001abe0 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   1abe0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1abe2:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   1abe4:	b1a1      	cbz	r1, 1ac10 <hal_i2c_init+0x30>
   1abe6:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1abe8:	a901      	add	r1, sp, #4
   1abea:	f7ff ff7f 	bl	1aaec <hal_i2c_resolve>
    if (rc != 0) {
   1abee:	4606      	mov	r6, r0
   1abf0:	bba8      	cbnz	r0, 1ac5e <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   1abf2:	9b01      	ldr	r3, [sp, #4]
   1abf4:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   1abf6:	68a3      	ldr	r3, [r4, #8]
   1abf8:	2bfa      	cmp	r3, #250	; 0xfa
   1abfa:	d035      	beq.n	1ac68 <hal_i2c_init+0x88>
   1abfc:	d90e      	bls.n	1ac1c <hal_i2c_init+0x3c>
   1abfe:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   1ac02:	d02f      	beq.n	1ac64 <hal_i2c_init+0x84>
   1ac04:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   1ac08:	d131      	bne.n	1ac6e <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   1ac0a:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   1ac0e:	e009      	b.n	1ac24 <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   1ac10:	2300      	movs	r3, #0
   1ac12:	461a      	mov	r2, r3
   1ac14:	4619      	mov	r1, r3
   1ac16:	4618      	mov	r0, r3
   1ac18:	f000 fc88 	bl	1b52c <__assert_func>
    switch (cfg->i2c_frequency) {
   1ac1c:	2b64      	cmp	r3, #100	; 0x64
   1ac1e:	d126      	bne.n	1ac6e <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   1ac20:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   1ac24:	6861      	ldr	r1, [r4, #4]
   1ac26:	6820      	ldr	r0, [r4, #0]
   1ac28:	f7ff ff89 	bl	1ab3e <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   1ac2c:	6823      	ldr	r3, [r4, #0]
   1ac2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1ac32:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ac36:	f240 610c 	movw	r1, #1548	; 0x60c
   1ac3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   1ac3e:	6863      	ldr	r3, [r4, #4]
   1ac40:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ac44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   1ac48:	6823      	ldr	r3, [r4, #0]
   1ac4a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   1ac4e:	6863      	ldr	r3, [r4, #4]
   1ac50:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   1ac54:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1ac58:	2305      	movs	r3, #5
   1ac5a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   1ac5e:	4630      	mov	r0, r6
   1ac60:	b003      	add	sp, #12
   1ac62:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   1ac64:	4f03      	ldr	r7, [pc, #12]	; (1ac74 <hal_i2c_init+0x94>)
        break;
   1ac66:	e7dd      	b.n	1ac24 <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   1ac68:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   1ac6c:	e7da      	b.n	1ac24 <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   1ac6e:	2602      	movs	r6, #2
   1ac70:	e7f5      	b.n	1ac5e <hal_i2c_init+0x7e>
   1ac72:	bf00      	nop
   1ac74:	06147ae9 	.word	0x06147ae9

0001ac78 <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   1ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac7c:	b083      	sub	sp, #12
   1ac7e:	4688      	mov	r8, r1
   1ac80:	4615      	mov	r5, r2
   1ac82:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1ac84:	a901      	add	r1, sp, #4
   1ac86:	f7ff ff31 	bl	1aaec <hal_i2c_resolve>
    if (rc != 0) {
   1ac8a:	4681      	mov	r9, r0
   1ac8c:	b118      	cbz	r0, 1ac96 <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   1ac8e:	4648      	mov	r0, r9
   1ac90:	b003      	add	sp, #12
   1ac92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   1ac96:	9b01      	ldr	r3, [sp, #4]
   1ac98:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   1ac9a:	f898 3000 	ldrb.w	r3, [r8]
   1ac9e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   1aca2:	2300      	movs	r3, #0
   1aca4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   1aca8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   1acac:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   1acb0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   1acb4:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   1acb8:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   1acbc:	2300      	movs	r3, #0
   1acbe:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1acc2:	2301      	movs	r3, #1
   1acc4:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   1acc6:	f000 fe61 	bl	1b98c <os_cputime_get32>
   1acca:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   1acce:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1acd2:	f7ff fe62 	bl	1a99a <hal_gpio_read>
   1acd6:	b1b0      	cbz	r0, 1ad06 <hal_i2c_master_write+0x8e>
   1acd8:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1acdc:	b99b      	cbnz	r3, 1ad06 <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1acde:	f000 fe55 	bl	1b98c <os_cputime_get32>
   1ace2:	1b80      	subs	r0, r0, r6
   1ace4:	2800      	cmp	r0, #0
   1ace6:	dbf2      	blt.n	1acce <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   1ace8:	2300      	movs	r3, #0
   1acea:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1acee:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1acf2:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1acf6:	f7ff ff22 	bl	1ab3e <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1acfa:	2305      	movs	r3, #5
   1acfc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   1ad00:	f1bb 0b01 	subs.w	fp, fp, #1
   1ad04:	d1da      	bne.n	1acbc <hal_i2c_master_write+0x44>
    start = os_time_get();
   1ad06:	f001 fe2f 	bl	1c968 <os_time_get>
   1ad0a:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   1ad0c:	464f      	mov	r7, r9
   1ad0e:	e003      	b.n	1ad18 <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   1ad10:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ad14:	b9db      	cbnz	r3, 1ad4e <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   1ad16:	3701      	adds	r7, #1
   1ad18:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   1ad1c:	42bb      	cmp	r3, r7
   1ad1e:	dd24      	ble.n	1ad6a <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   1ad20:	2300      	movs	r3, #0
   1ad22:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   1ad26:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1ad2a:	5ddb      	ldrb	r3, [r3, r7]
   1ad2c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   1ad30:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1ad34:	2b00      	cmp	r3, #0
   1ad36:	d1eb      	bne.n	1ad10 <hal_i2c_master_write+0x98>
   1ad38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ad3c:	2b00      	cmp	r3, #0
   1ad3e:	d1e7      	bne.n	1ad10 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   1ad40:	f001 fe12 	bl	1c968 <os_time_get>
   1ad44:	1b80      	subs	r0, r0, r6
   1ad46:	42a8      	cmp	r0, r5
   1ad48:	d9f2      	bls.n	1ad30 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   1ad4a:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1ad4e:	2301      	movs	r3, #1
   1ad50:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   1ad52:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ad56:	2b00      	cmp	r3, #0
   1ad58:	d099      	beq.n	1ac8e <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   1ad5a:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   1ad5e:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1ad62:	f7ff fed5 	bl	1ab10 <hal_i2c_convert_status>
   1ad66:	4681      	mov	r9, r0
   1ad68:	e791      	b.n	1ac8e <hal_i2c_master_write+0x16>
    if (last_op) {
   1ad6a:	f1ba 0f00 	cmp.w	sl, #0
   1ad6e:	d08e      	beq.n	1ac8e <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   1ad70:	2300      	movs	r3, #0
   1ad72:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   1ad76:	2301      	movs	r3, #1
   1ad78:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   1ad7a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   1ad7e:	b953      	cbnz	r3, 1ad96 <hal_i2c_master_write+0x11e>
   1ad80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ad84:	b93b      	cbnz	r3, 1ad96 <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   1ad86:	f001 fdef 	bl	1c968 <os_time_get>
   1ad8a:	1b80      	subs	r0, r0, r6
   1ad8c:	42a8      	cmp	r0, r5
   1ad8e:	d9f4      	bls.n	1ad7a <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   1ad90:	f04f 0903 	mov.w	r9, #3
   1ad94:	e7db      	b.n	1ad4e <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   1ad96:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ad9a:	2b00      	cmp	r3, #0
   1ad9c:	d1d7      	bne.n	1ad4e <hal_i2c_master_write+0xd6>
   1ad9e:	e776      	b.n	1ac8e <hal_i2c_master_write+0x16>

0001ada0 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   1ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ada4:	b085      	sub	sp, #20
   1ada6:	460f      	mov	r7, r1
   1ada8:	4615      	mov	r5, r2
   1adaa:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1adac:	a903      	add	r1, sp, #12
   1adae:	f7ff fe9d 	bl	1aaec <hal_i2c_resolve>
    if (rc != 0) {
   1adb2:	4681      	mov	r9, r0
   1adb4:	b118      	cbz	r0, 1adbe <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   1adb6:	4648      	mov	r0, r9
   1adb8:	b005      	add	sp, #20
   1adba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   1adbe:	9b03      	ldr	r3, [sp, #12]
   1adc0:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   1adc2:	f001 fdd1 	bl	1c968 <os_time_get>
   1adc6:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   1adc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1adcc:	b11b      	cbz	r3, 1add6 <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   1adce:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   1add2:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   1add6:	2300      	movs	r3, #0
   1add8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   1addc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   1ade0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   1ade4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   1ade8:	783b      	ldrb	r3, [r7, #0]
   1adea:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   1adee:	887b      	ldrh	r3, [r7, #2]
   1adf0:	2b01      	cmp	r3, #1
   1adf2:	d02e      	beq.n	1ae52 <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   1adf4:	2301      	movs	r3, #1
   1adf6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   1adfa:	46a2      	mov	sl, r4
    int retry = 2;
   1adfc:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   1ae00:	2300      	movs	r3, #0
   1ae02:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1ae06:	2301      	movs	r3, #1
   1ae08:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   1ae0c:	f000 fdbe 	bl	1b98c <os_cputime_get32>
   1ae10:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   1ae14:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1ae18:	f7ff fdbf 	bl	1a99a <hal_gpio_read>
   1ae1c:	b1b8      	cbz	r0, 1ae4e <hal_i2c_master_read+0xae>
   1ae1e:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1ae22:	b9a3      	cbnz	r3, 1ae4e <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1ae24:	f000 fdb2 	bl	1b98c <os_cputime_get32>
   1ae28:	eba0 0008 	sub.w	r0, r0, r8
   1ae2c:	2800      	cmp	r0, #0
   1ae2e:	dbf1      	blt.n	1ae14 <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   1ae30:	2300      	movs	r3, #0
   1ae32:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1ae36:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1ae3a:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1ae3e:	f7ff fe7e 	bl	1ab3e <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1ae42:	2305      	movs	r3, #5
   1ae44:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   1ae48:	f1bb 0b01 	subs.w	fp, fp, #1
   1ae4c:	d1d8      	bne.n	1ae00 <hal_i2c_master_read+0x60>
    int retry = 2;
   1ae4e:	46c8      	mov	r8, r9
   1ae50:	e017      	b.n	1ae82 <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   1ae52:	9b01      	ldr	r3, [sp, #4]
   1ae54:	2b00      	cmp	r3, #0
   1ae56:	d0cd      	beq.n	1adf4 <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   1ae58:	2302      	movs	r3, #2
   1ae5a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1ae5e:	e7cc      	b.n	1adfa <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   1ae60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ae64:	bb0b      	cbnz	r3, 1aeaa <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   1ae66:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   1ae6a:	687b      	ldr	r3, [r7, #4]
   1ae6c:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   1ae70:	887b      	ldrh	r3, [r7, #2]
   1ae72:	3b02      	subs	r3, #2
   1ae74:	4543      	cmp	r3, r8
   1ae76:	d02a      	beq.n	1aece <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   1ae78:	2300      	movs	r3, #0
   1ae7a:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   1ae7e:	f108 0801 	add.w	r8, r8, #1
   1ae82:	887b      	ldrh	r3, [r7, #2]
   1ae84:	4543      	cmp	r3, r8
   1ae86:	dd96      	ble.n	1adb6 <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   1ae88:	2301      	movs	r3, #1
   1ae8a:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   1ae8c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ae90:	2b00      	cmp	r3, #0
   1ae92:	d1e5      	bne.n	1ae60 <hal_i2c_master_read+0xc0>
   1ae94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1ae98:	2b00      	cmp	r3, #0
   1ae9a:	d1e1      	bne.n	1ae60 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   1ae9c:	f001 fd64 	bl	1c968 <os_time_get>
   1aea0:	1b80      	subs	r0, r0, r6
   1aea2:	42a8      	cmp	r0, r5
   1aea4:	d9f2      	bls.n	1ae8c <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   1aea6:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1aeaa:	2301      	movs	r3, #1
   1aeac:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   1aeae:	2300      	movs	r3, #0
   1aeb0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   1aeb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1aeb8:	2b00      	cmp	r3, #0
   1aeba:	f43f af7c 	beq.w	1adb6 <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   1aebe:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   1aec2:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1aec6:	f7ff fe23 	bl	1ab10 <hal_i2c_convert_status>
   1aeca:	4681      	mov	r9, r0
   1aecc:	e773      	b.n	1adb6 <hal_i2c_master_read+0x16>
            if (last_op) {
   1aece:	9b01      	ldr	r3, [sp, #4]
   1aed0:	2b00      	cmp	r3, #0
   1aed2:	d0d1      	beq.n	1ae78 <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   1aed4:	2302      	movs	r3, #2
   1aed6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1aeda:	e7cd      	b.n	1ae78 <hal_i2c_master_read+0xd8>

0001aedc <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   1aedc:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   1aede:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   1aee0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1aee4:	b32b      	cbz	r3, 1af32 <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   1aee6:	2300      	movs	r3, #0
   1aee8:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   1aeec:	7843      	ldrb	r3, [r0, #1]
   1aeee:	b303      	cbz	r3, 1af32 <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   1aef0:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   1aef4:	88c3      	ldrh	r3, [r0, #6]
   1aef6:	fa13 f382 	uxtah	r3, r3, r2
   1aefa:	b29b      	uxth	r3, r3
   1aefc:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   1aefe:	8881      	ldrh	r1, [r0, #4]
   1af00:	428b      	cmp	r3, r1
   1af02:	d217      	bcs.n	1af34 <nrf52_irqm_handler+0x58>
   1af04:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   1af06:	6984      	ldr	r4, [r0, #24]
   1af08:	4414      	add	r4, r2
   1af0a:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   1af0c:	1acb      	subs	r3, r1, r3
   1af0e:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   1af10:	2bff      	cmp	r3, #255	; 0xff
   1af12:	bf28      	it	cs
   1af14:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1af16:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1af1a:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   1af1e:	69c1      	ldr	r1, [r0, #28]
   1af20:	b129      	cbz	r1, 1af2e <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   1af22:	440a      	add	r2, r1
   1af24:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1af26:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   1af2a:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   1af2e:	2301      	movs	r3, #1
   1af30:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   1af32:	bd38      	pop	{r3, r4, r5, pc}
   1af34:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   1af36:	6a03      	ldr	r3, [r0, #32]
   1af38:	b10b      	cbz	r3, 1af3e <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1af3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1af3c:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   1af3e:	2300      	movs	r3, #0
   1af40:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   1af42:	2340      	movs	r3, #64	; 0x40
   1af44:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1af48:	e7f3      	b.n	1af32 <nrf52_irqm_handler+0x56>
	...

0001af4c <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   1af4c:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   1af4e:	4b04      	ldr	r3, [pc, #16]	; (1af60 <nrf52_spi0_irq_handler+0x14>)
   1af50:	781b      	ldrb	r3, [r3, #0]
   1af52:	b103      	cbz	r3, 1af56 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   1af54:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   1af56:	4802      	ldr	r0, [pc, #8]	; (1af60 <nrf52_spi0_irq_handler+0x14>)
   1af58:	f7ff ffc0 	bl	1aedc <nrf52_irqm_handler>
}
   1af5c:	e7fa      	b.n	1af54 <nrf52_spi0_irq_handler+0x8>
   1af5e:	bf00      	nop
   1af60:	2000ddc0 	.word	0x2000ddc0

0001af64 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   1af64:	2301      	movs	r3, #1
   1af66:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   1af68:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   1af6c:	2b00      	cmp	r3, #0
   1af6e:	d0fb      	beq.n	1af68 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   1af70:	2300      	movs	r3, #0
   1af72:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1af76:	4770      	bx	lr

0001af78 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   1af78:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   1af7a:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   1af7c:	780b      	ldrb	r3, [r1, #0]
   1af7e:	2b03      	cmp	r3, #3
   1af80:	d80c      	bhi.n	1af9c <hal_spi_config_slave+0x24>
   1af82:	e8df f003 	tbb	[pc, r3]
   1af86:	0e02      	.short	0x0e02
   1af88:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1af8a:	2300      	movs	r3, #0
    rc = 0;
   1af8c:	4618      	mov	r0, r3
   1af8e:	e00a      	b.n	1afa6 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1af90:	2304      	movs	r3, #4
    rc = 0;
   1af92:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   1af94:	e007      	b.n	1afa6 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1af96:	2306      	movs	r3, #6
    rc = 0;
   1af98:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   1af9a:	e004      	b.n	1afa6 <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   1af9c:	2300      	movs	r3, #0
            rc = EINVAL;
   1af9e:	2016      	movs	r0, #22
            break;
   1afa0:	e001      	b.n	1afa6 <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1afa2:	2302      	movs	r3, #2
    rc = 0;
   1afa4:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1afa6:	784c      	ldrb	r4, [r1, #1]
   1afa8:	2c01      	cmp	r4, #1
   1afaa:	d006      	beq.n	1afba <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   1afac:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   1afb0:	788b      	ldrb	r3, [r1, #2]
   1afb2:	b92b      	cbnz	r3, 1afc0 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   1afb4:	f85d 4b04 	ldr.w	r4, [sp], #4
   1afb8:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   1afba:	f043 0301 	orr.w	r3, r3, #1
   1afbe:	e7f5      	b.n	1afac <hal_spi_config_slave+0x34>
            rc = EINVAL;
   1afc0:	2016      	movs	r0, #22
    return rc;
   1afc2:	e7f7      	b.n	1afb4 <hal_spi_config_slave+0x3c>

0001afc4 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   1afc4:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   1afc6:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   1afc8:	2501      	movs	r5, #1
   1afca:	409d      	lsls	r5, r3
   1afcc:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1afd0:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   1afd4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1afd8:	2503      	movs	r5, #3
   1afda:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   1afde:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   1afe0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1afe4:	2500      	movs	r5, #0
   1afe6:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1afea:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   1afec:	780c      	ldrb	r4, [r1, #0]
   1afee:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   1aff2:	784c      	ldrb	r4, [r1, #1]
   1aff4:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   1aff8:	7889      	ldrb	r1, [r1, #2]
   1affa:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1affe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b002:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1b006:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1b00a:	4919      	ldr	r1, [pc, #100]	; (1b070 <hal_spi_init_master+0xac>)
   1b00c:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1b00e:	3310      	adds	r3, #16
   1b010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   1b014:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1b018:	42ab      	cmp	r3, r5
   1b01a:	db22      	blt.n	1b062 <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b01c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1b020:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1b024:	22e0      	movs	r2, #224	; 0xe0
   1b026:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   1b02a:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1b02e:	2b00      	cmp	r3, #0
   1b030:	db08      	blt.n	1b044 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b032:	f003 011f 	and.w	r1, r3, #31
   1b036:	095b      	lsrs	r3, r3, #5
   1b038:	2201      	movs	r2, #1
   1b03a:	408a      	lsls	r2, r1
   1b03c:	3360      	adds	r3, #96	; 0x60
   1b03e:	490d      	ldr	r1, [pc, #52]	; (1b074 <hal_spi_init_master+0xb0>)
   1b040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   1b044:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1b048:	2b00      	cmp	r3, #0
   1b04a:	db07      	blt.n	1b05c <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b04c:	f003 011f 	and.w	r1, r3, #31
   1b050:	095b      	lsrs	r3, r3, #5
   1b052:	2201      	movs	r2, #1
   1b054:	408a      	lsls	r2, r1
   1b056:	4907      	ldr	r1, [pc, #28]	; (1b074 <hal_spi_init_master+0xb0>)
   1b058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   1b05c:	2000      	movs	r0, #0
   1b05e:	bc30      	pop	{r4, r5}
   1b060:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b062:	f003 030f 	and.w	r3, r3, #15
   1b066:	4a04      	ldr	r2, [pc, #16]	; (1b078 <hal_spi_init_master+0xb4>)
   1b068:	441a      	add	r2, r3
   1b06a:	23e0      	movs	r3, #224	; 0xe0
   1b06c:	7613      	strb	r3, [r2, #24]
   1b06e:	e7dc      	b.n	1b02a <hal_spi_init_master+0x66>
   1b070:	e000ed00 	.word	0xe000ed00
   1b074:	e000e100 	.word	0xe000e100
   1b078:	e000ecfc 	.word	0xe000ecfc

0001b07c <hal_spi_config_master>:
{
   1b07c:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   1b07e:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   1b080:	680c      	ldr	r4, [r1, #0]
   1b082:	684b      	ldr	r3, [r1, #4]
   1b084:	6084      	str	r4, [r0, #8]
   1b086:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1b088:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   1b08c:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   1b090:	7808      	ldrb	r0, [r1, #0]
   1b092:	2801      	cmp	r0, #1
   1b094:	d916      	bls.n	1b0c4 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1b096:	2001      	movs	r0, #1
   1b098:	4098      	lsls	r0, r3
   1b09a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1b09e:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   1b0a2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b0a6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1b0aa:	2403      	movs	r4, #3
   1b0ac:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   1b0b0:	788b      	ldrb	r3, [r1, #2]
   1b0b2:	b973      	cbnz	r3, 1b0d2 <hal_spi_config_master+0x56>
    rc = 0;
   1b0b4:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   1b0b6:	780b      	ldrb	r3, [r1, #0]
   1b0b8:	2b03      	cmp	r3, #3
   1b0ba:	d812      	bhi.n	1b0e2 <hal_spi_config_master+0x66>
   1b0bc:	e8df f003 	tbb	[pc, r3]
   1b0c0:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   1b0c4:	2001      	movs	r0, #1
   1b0c6:	4098      	lsls	r0, r3
   1b0c8:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1b0cc:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   1b0d0:	e7e7      	b.n	1b0a2 <hal_spi_config_master+0x26>
            rc = EINVAL;
   1b0d2:	2016      	movs	r0, #22
   1b0d4:	e7ef      	b.n	1b0b6 <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1b0d6:	2300      	movs	r3, #0
   1b0d8:	e007      	b.n	1b0ea <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1b0da:	2304      	movs	r3, #4
            break;
   1b0dc:	e005      	b.n	1b0ea <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1b0de:	2306      	movs	r3, #6
            break;
   1b0e0:	e003      	b.n	1b0ea <hal_spi_config_master+0x6e>
            nrf_config = 0;
   1b0e2:	2300      	movs	r3, #0
            rc = EINVAL;
   1b0e4:	2016      	movs	r0, #22
            break;
   1b0e6:	e000      	b.n	1b0ea <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1b0e8:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1b0ea:	784c      	ldrb	r4, [r1, #1]
   1b0ec:	2c01      	cmp	r4, #1
   1b0ee:	d010      	beq.n	1b112 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   1b0f0:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   1b0f4:	684b      	ldr	r3, [r1, #4]
   1b0f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1b0fa:	d023      	beq.n	1b144 <hal_spi_config_master+0xc8>
   1b0fc:	d80c      	bhi.n	1b118 <hal_spi_config_master+0x9c>
   1b0fe:	2bfa      	cmp	r3, #250	; 0xfa
   1b100:	d029      	beq.n	1b156 <hal_spi_config_master+0xda>
   1b102:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1b106:	d01a      	beq.n	1b13e <hal_spi_config_master+0xc2>
   1b108:	2b7d      	cmp	r3, #125	; 0x7d
   1b10a:	d011      	beq.n	1b130 <hal_spi_config_master+0xb4>
            frequency = 0;
   1b10c:	2300      	movs	r3, #0
            rc = EINVAL;
   1b10e:	2016      	movs	r0, #22
            break;
   1b110:	e010      	b.n	1b134 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   1b112:	f043 0301 	orr.w	r3, r3, #1
   1b116:	e7eb      	b.n	1b0f0 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   1b118:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   1b11c:	d015      	beq.n	1b14a <hal_spi_config_master+0xce>
   1b11e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   1b122:	d015      	beq.n	1b150 <hal_spi_config_master+0xd4>
   1b124:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1b128:	d1f0      	bne.n	1b10c <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   1b12a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   1b12e:	e001      	b.n	1b134 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   1b130:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   1b134:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   1b138:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b13c:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   1b13e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   1b142:	e7f7      	b.n	1b134 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   1b144:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   1b148:	e7f4      	b.n	1b134 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   1b14a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   1b14e:	e7f1      	b.n	1b134 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   1b150:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   1b154:	e7ee      	b.n	1b134 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   1b156:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1b15a:	e7eb      	b.n	1b134 <hal_spi_config_master+0xb8>

0001b15c <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b15c:	2802      	cmp	r0, #2
   1b15e:	dc10      	bgt.n	1b182 <hal_spi_config+0x26>
{
   1b160:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b162:	4b0b      	ldr	r3, [pc, #44]	; (1b190 <hal_spi_config+0x34>)
   1b164:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1b168:	b168      	cbz	r0, 1b186 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1b16a:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   1b16c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   1b170:	b95b      	cbnz	r3, 1b18a <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1b172:	7803      	ldrb	r3, [r0, #0]
   1b174:	b113      	cbz	r3, 1b17c <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   1b176:	f7ff feff 	bl	1af78 <hal_spi_config_slave>
    }

err:
    return (rc);
}
   1b17a:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   1b17c:	f7ff ff7e 	bl	1b07c <hal_spi_config_master>
   1b180:	e7fb      	b.n	1b17a <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b182:	2016      	movs	r0, #22
}
   1b184:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b186:	2016      	movs	r0, #22
   1b188:	e7f7      	b.n	1b17a <hal_spi_config+0x1e>
        return -1;
   1b18a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b18e:	e7f4      	b.n	1b17a <hal_spi_config+0x1e>
   1b190:	000295d8 	.word	0x000295d8

0001b194 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b194:	2802      	cmp	r0, #2
   1b196:	dc1b      	bgt.n	1b1d0 <hal_spi_enable+0x3c>
   1b198:	4b10      	ldr	r3, [pc, #64]	; (1b1dc <hal_spi_enable+0x48>)
   1b19a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b19e:	b1cb      	cbz	r3, 1b1d4 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1b1a0:	781a      	ldrb	r2, [r3, #0]
   1b1a2:	b17a      	cbz	r2, 1b1c4 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   1b1a4:	6a1a      	ldr	r2, [r3, #32]
   1b1a6:	b1ba      	cbz	r2, 1b1d8 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   1b1a8:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   1b1aa:	2000      	movs	r0, #0
   1b1ac:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1b1b0:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   1b1b4:	f240 4202 	movw	r2, #1026	; 0x402
   1b1b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   1b1bc:	2202      	movs	r2, #2
   1b1be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1b1c2:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   1b1c4:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1b1c6:	2201      	movs	r2, #1
   1b1c8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   1b1cc:	2000      	movs	r0, #0
   1b1ce:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b1d0:	2016      	movs	r0, #22
   1b1d2:	4770      	bx	lr
   1b1d4:	2016      	movs	r0, #22
   1b1d6:	4770      	bx	lr
            rc = EINVAL;
   1b1d8:	2016      	movs	r0, #22

err:
    return rc;
}
   1b1da:	4770      	bx	lr
   1b1dc:	000295d8 	.word	0x000295d8

0001b1e0 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b1e0:	2802      	cmp	r0, #2
   1b1e2:	dc2a      	bgt.n	1b23a <hal_spi_disable+0x5a>
{
   1b1e4:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b1e6:	4b17      	ldr	r3, [pc, #92]	; (1b244 <hal_spi_disable+0x64>)
   1b1e8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1b1ec:	b33c      	cbz	r4, 1b23e <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1b1ee:	7823      	ldrb	r3, [r4, #0]
   1b1f0:	b9ab      	cbnz	r3, 1b21e <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   1b1f2:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1b1f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b1f8:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   1b1fc:	7863      	ldrb	r3, [r4, #1]
   1b1fe:	b943      	cbnz	r3, 1b212 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   1b200:	2300      	movs	r3, #0
   1b202:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1b206:	2000      	movs	r0, #0
   1b208:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   1b20a:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   1b20c:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   1b20e:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   1b210:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   1b212:	4628      	mov	r0, r5
   1b214:	f7ff fea6 	bl	1af64 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   1b218:	2300      	movs	r3, #0
   1b21a:	7063      	strb	r3, [r4, #1]
   1b21c:	e7f0      	b.n	1b200 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   1b21e:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1b220:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b224:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   1b228:	2300      	movs	r3, #0
   1b22a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1b22e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   1b232:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1b236:	70e3      	strb	r3, [r4, #3]
   1b238:	e7e5      	b.n	1b206 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b23a:	2016      	movs	r0, #22
}
   1b23c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b23e:	2016      	movs	r0, #22
    return rc;
   1b240:	e7e6      	b.n	1b210 <hal_spi_disable+0x30>
   1b242:	bf00      	nop
   1b244:	000295d8 	.word	0x000295d8

0001b248 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b248:	2802      	cmp	r0, #2
   1b24a:	dc1d      	bgt.n	1b288 <hal_spi_init+0x40>
{
   1b24c:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b24e:	4b13      	ldr	r3, [pc, #76]	; (1b29c <hal_spi_init+0x54>)
   1b250:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1b254:	b1d4      	cbz	r4, 1b28c <hal_spi_init+0x44>
    if (cfg == NULL) {
   1b256:	b1d9      	cbz	r1, 1b290 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   1b258:	2a01      	cmp	r2, #1
   1b25a:	d81b      	bhi.n	1b294 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   1b25c:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   1b25e:	b9d8      	cbnz	r0, 1b298 <hal_spi_init+0x50>
   1b260:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   1b262:	2303      	movs	r3, #3
   1b264:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1b266:	b94a      	cbnz	r2, 1b27c <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   1b268:	4b0d      	ldr	r3, [pc, #52]	; (1b2a0 <hal_spi_init+0x58>)
   1b26a:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   1b26c:	f7ff ffb8 	bl	1b1e0 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   1b270:	4a0c      	ldr	r2, [pc, #48]	; (1b2a4 <hal_spi_init+0x5c>)
   1b272:	4629      	mov	r1, r5
   1b274:	4620      	mov	r0, r4
   1b276:	f7ff fea5 	bl	1afc4 <hal_spi_init_master>
   1b27a:	e00c      	b.n	1b296 <hal_spi_init+0x4e>
            assert(0);
   1b27c:	2300      	movs	r3, #0
   1b27e:	461a      	mov	r2, r3
   1b280:	4619      	mov	r1, r3
   1b282:	4618      	mov	r0, r3
   1b284:	f000 f952 	bl	1b52c <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b288:	2016      	movs	r0, #22
}
   1b28a:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b28c:	2016      	movs	r0, #22
   1b28e:	e002      	b.n	1b296 <hal_spi_init+0x4e>
    rc = EINVAL;
   1b290:	2016      	movs	r0, #22
   1b292:	e000      	b.n	1b296 <hal_spi_init+0x4e>
   1b294:	2016      	movs	r0, #22
}
   1b296:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   1b298:	2016      	movs	r0, #22
    return (rc);
   1b29a:	e7fc      	b.n	1b296 <hal_spi_init+0x4e>
   1b29c:	000295d8 	.word	0x000295d8
   1b2a0:	40003000 	.word	0x40003000
   1b2a4:	0001af4d 	.word	0x0001af4d

0001b2a8 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b2a8:	2802      	cmp	r0, #2
   1b2aa:	dc0a      	bgt.n	1b2c2 <hal_spi_set_txrx_cb+0x1a>
   1b2ac:	4b08      	ldr	r3, [pc, #32]	; (1b2d0 <hal_spi_set_txrx_cb+0x28>)
   1b2ae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b2b2:	b143      	cbz	r3, 1b2c6 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1b2b4:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1b2b6:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   1b2ba:	b930      	cbnz	r0, 1b2ca <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   1b2bc:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   1b2be:	625a      	str	r2, [r3, #36]	; 0x24
   1b2c0:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b2c2:	2016      	movs	r0, #22
   1b2c4:	4770      	bx	lr
   1b2c6:	2016      	movs	r0, #22
   1b2c8:	4770      	bx	lr
        rc = -1;
   1b2ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   1b2ce:	4770      	bx	lr
   1b2d0:	000295d8 	.word	0x000295d8

0001b2d4 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   1b2d4:	2b00      	cmp	r3, #0
   1b2d6:	d046      	beq.n	1b366 <hal_spi_txrx+0x92>
{
   1b2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b2da:	460d      	mov	r5, r1
   1b2dc:	4617      	mov	r7, r2
   1b2de:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   1b2e0:	2802      	cmp	r0, #2
   1b2e2:	dc42      	bgt.n	1b36a <hal_spi_txrx+0x96>
   1b2e4:	4b25      	ldr	r3, [pc, #148]	; (1b37c <hal_spi_txrx+0xa8>)
   1b2e6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b2ea:	2b00      	cmp	r3, #0
   1b2ec:	d03f      	beq.n	1b36e <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1b2ee:	781a      	ldrb	r2, [r3, #0]
   1b2f0:	2a00      	cmp	r2, #0
   1b2f2:	d13e      	bne.n	1b372 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1b2f4:	2900      	cmp	r1, #0
   1b2f6:	d03e      	beq.n	1b376 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   1b2f8:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   1b2fa:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   1b2fe:	2b07      	cmp	r3, #7
   1b300:	d004      	beq.n	1b30c <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   1b302:	b95b      	cbnz	r3, 1b31c <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1b304:	2301      	movs	r3, #1
   1b306:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1b30a:	e007      	b.n	1b31c <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   1b30c:	f7ff ff68 	bl	1b1e0 <hal_spi_disable>
   1b310:	e7f8      	b.n	1b304 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   1b312:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1b316:	2300      	movs	r3, #0
   1b318:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   1b31c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1b320:	2b00      	cmp	r3, #0
   1b322:	d1f6      	bne.n	1b312 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   1b324:	782b      	ldrb	r3, [r5, #0]
   1b326:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   1b32a:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   1b32c:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   1b32e:	2200      	movs	r2, #0
   1b330:	e00d      	b.n	1b34e <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   1b332:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1b336:	2b00      	cmp	r3, #0
   1b338:	d0fb      	beq.n	1b332 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   1b33a:	2300      	movs	r3, #0
   1b33c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   1b340:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   1b344:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1b346:	b10f      	cbz	r7, 1b34c <hal_spi_txrx+0x78>
                *rxd = rxval;
   1b348:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   1b34c:	3201      	adds	r2, #1
   1b34e:	42b2      	cmp	r2, r6
   1b350:	da07      	bge.n	1b362 <hal_spi_txrx+0x8e>
            if (txcnt) {
   1b352:	2900      	cmp	r1, #0
   1b354:	d0ed      	beq.n	1b332 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   1b356:	786b      	ldrb	r3, [r5, #1]
   1b358:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   1b35c:	3901      	subs	r1, #1
                ++txd;
   1b35e:	3501      	adds	r5, #1
   1b360:	e7e7      	b.n	1b332 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   1b362:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   1b364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   1b366:	2016      	movs	r0, #22
}
   1b368:	4770      	bx	lr
    return rc;
   1b36a:	2016      	movs	r0, #22
   1b36c:	e7fa      	b.n	1b364 <hal_spi_txrx+0x90>
   1b36e:	2016      	movs	r0, #22
   1b370:	e7f8      	b.n	1b364 <hal_spi_txrx+0x90>
   1b372:	2016      	movs	r0, #22
   1b374:	e7f6      	b.n	1b364 <hal_spi_txrx+0x90>
   1b376:	2016      	movs	r0, #22
   1b378:	e7f4      	b.n	1b364 <hal_spi_txrx+0x90>
   1b37a:	bf00      	nop
   1b37c:	000295d8 	.word	0x000295d8

0001b380 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b380:	2802      	cmp	r0, #2
   1b382:	dc57      	bgt.n	1b434 <hal_spi_txrx_noblock+0xb4>
{
   1b384:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b386:	4c35      	ldr	r4, [pc, #212]	; (1b45c <hal_spi_txrx_noblock+0xdc>)
   1b388:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   1b38c:	2800      	cmp	r0, #0
   1b38e:	d053      	beq.n	1b438 <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   1b390:	6a04      	ldr	r4, [r0, #32]
   1b392:	2c00      	cmp	r4, #0
   1b394:	d052      	beq.n	1b43c <hal_spi_txrx_noblock+0xbc>
   1b396:	2b00      	cmp	r3, #0
   1b398:	d052      	beq.n	1b440 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1b39a:	7804      	ldrb	r4, [r0, #0]
   1b39c:	2c00      	cmp	r4, #0
   1b39e:	d137      	bne.n	1b410 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1b3a0:	2900      	cmp	r1, #0
   1b3a2:	d050      	beq.n	1b446 <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   1b3a4:	7844      	ldrb	r4, [r0, #1]
   1b3a6:	2c00      	cmp	r4, #0
   1b3a8:	d14f      	bne.n	1b44a <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   1b3aa:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   1b3ac:	2540      	movs	r5, #64	; 0x40
   1b3ae:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   1b3b2:	2501      	movs	r5, #1
   1b3b4:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   1b3b6:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   1b3ba:	2d07      	cmp	r5, #7
   1b3bc:	d005      	beq.n	1b3ca <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   1b3be:	2500      	movs	r5, #0
   1b3c0:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   1b3c4:	2507      	movs	r5, #7
   1b3c6:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   1b3ca:	2500      	movs	r5, #0
   1b3cc:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   1b3ce:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   1b3d0:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   1b3d2:	2bff      	cmp	r3, #255	; 0xff
   1b3d4:	bfa8      	it	ge
   1b3d6:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   1b3d8:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   1b3dc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   1b3e0:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   1b3e2:	b172      	cbz	r2, 1b402 <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   1b3e4:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   1b3e8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   1b3ec:	2000      	movs	r0, #0
   1b3ee:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   1b3f2:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   1b3f6:	2301      	movs	r3, #1
   1b3f8:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   1b3fa:	2340      	movs	r3, #64	; 0x40
   1b3fc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   1b400:	e01f      	b.n	1b442 <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   1b402:	3002      	adds	r0, #2
   1b404:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   1b408:	2301      	movs	r3, #1
   1b40a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   1b40e:	e7ed      	b.n	1b3ec <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1b410:	b161      	cbz	r1, 1b42c <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   1b412:	2bff      	cmp	r3, #255	; 0xff
   1b414:	dc1c      	bgt.n	1b450 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   1b416:	78c4      	ldrb	r4, [r0, #3]
   1b418:	b9e4      	cbnz	r4, 1b454 <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   1b41a:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   1b41c:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   1b41e:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   1b420:	2301      	movs	r3, #1
   1b422:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1b424:	6902      	ldr	r2, [r0, #16]
   1b426:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   1b428:	2000      	movs	r0, #0
   1b42a:	e00a      	b.n	1b442 <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   1b42c:	2a00      	cmp	r2, #0
   1b42e:	d1f0      	bne.n	1b412 <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   1b430:	2016      	movs	r0, #22
   1b432:	e006      	b.n	1b442 <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b434:	2016      	movs	r0, #22

err:
    return rc;
}
   1b436:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1b438:	2016      	movs	r0, #22
   1b43a:	e002      	b.n	1b442 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   1b43c:	2016      	movs	r0, #22
   1b43e:	e000      	b.n	1b442 <hal_spi_txrx_noblock+0xc2>
   1b440:	2016      	movs	r0, #22
}
   1b442:	bc30      	pop	{r4, r5}
   1b444:	4770      	bx	lr
    rc = EINVAL;
   1b446:	2016      	movs	r0, #22
   1b448:	e7fb      	b.n	1b442 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1b44a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b44e:	e7f8      	b.n	1b442 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   1b450:	2016      	movs	r0, #22
   1b452:	e7f6      	b.n	1b442 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1b454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b458:	e7f3      	b.n	1b442 <hal_spi_txrx_noblock+0xc2>
   1b45a:	bf00      	nop
   1b45c:	000295d8 	.word	0x000295d8

0001b460 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   1b460:	b508      	push	{r3, lr}
    assert(0);
   1b462:	2300      	movs	r3, #0
   1b464:	461a      	mov	r2, r3
   1b466:	4619      	mov	r1, r3
   1b468:	4618      	mov	r0, r3
   1b46a:	f000 f85f 	bl	1b52c <__assert_func>
	...

0001b470 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   1b470:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1b472:	4b06      	ldr	r3, [pc, #24]	; (1b48c <nrf52_wdt_irq_handler+0x1c>)
   1b474:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   1b478:	f013 0f01 	tst.w	r3, #1
   1b47c:	d100      	bne.n	1b480 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   1b47e:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   1b480:	4b02      	ldr	r3, [pc, #8]	; (1b48c <nrf52_wdt_irq_handler+0x1c>)
   1b482:	2200      	movs	r2, #0
   1b484:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   1b488:	f7ff ffea 	bl	1b460 <nrf52_hal_wdt_default_handler>
   1b48c:	40010000 	.word	0x40010000

0001b490 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   1b490:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1b492:	4b17      	ldr	r3, [pc, #92]	; (1b4f0 <hal_watchdog_init+0x60>)
   1b494:	2201      	movs	r2, #1
   1b496:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1b49a:	4b16      	ldr	r3, [pc, #88]	; (1b4f4 <hal_watchdog_init+0x64>)
   1b49c:	4298      	cmp	r0, r3
   1b49e:	d821      	bhi.n	1b4e4 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   1b4a0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1b4a4:	0153      	lsls	r3, r2, #5
   1b4a6:	4a14      	ldr	r2, [pc, #80]	; (1b4f8 <hal_watchdog_init+0x68>)
   1b4a8:	fba2 2303 	umull	r2, r3, r2, r3
   1b4ac:	08db      	lsrs	r3, r3, #3
   1b4ae:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1b4b2:	4b0f      	ldr	r3, [pc, #60]	; (1b4f0 <hal_watchdog_init+0x60>)
   1b4b4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1b4b8:	4a10      	ldr	r2, [pc, #64]	; (1b4fc <hal_watchdog_init+0x6c>)
   1b4ba:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1b4bc:	4910      	ldr	r1, [pc, #64]	; (1b500 <hal_watchdog_init+0x70>)
   1b4be:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b4c2:	4a10      	ldr	r2, [pc, #64]	; (1b504 <hal_watchdog_init+0x74>)
   1b4c4:	21e0      	movs	r1, #224	; 0xe0
   1b4c6:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b4ca:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1b4ce:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b4d2:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   1b4d4:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   1b4d8:	f042 0201 	orr.w	r2, r2, #1
   1b4dc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   1b4e0:	2000      	movs	r0, #0
   1b4e2:	bd08      	pop	{r3, pc}
        assert(0);
   1b4e4:	2300      	movs	r3, #0
   1b4e6:	461a      	mov	r2, r3
   1b4e8:	4619      	mov	r1, r3
   1b4ea:	4618      	mov	r0, r3
   1b4ec:	f000 f81e 	bl	1b52c <__assert_func>
   1b4f0:	40010000 	.word	0x40010000
   1b4f4:	02aaaaaa 	.word	0x02aaaaaa
   1b4f8:	10624dd3 	.word	0x10624dd3
   1b4fc:	e000ed00 	.word	0xe000ed00
   1b500:	0001b471 	.word	0x0001b471
   1b504:	e000e100 	.word	0xe000e100

0001b508 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   1b508:	4b02      	ldr	r3, [pc, #8]	; (1b514 <hal_watchdog_enable+0xc>)
   1b50a:	2201      	movs	r2, #1
   1b50c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   1b510:	601a      	str	r2, [r3, #0]
}
   1b512:	4770      	bx	lr
   1b514:	40010000 	.word	0x40010000

0001b518 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   1b518:	4b02      	ldr	r3, [pc, #8]	; (1b524 <hal_watchdog_tickle+0xc>)
   1b51a:	4a03      	ldr	r2, [pc, #12]	; (1b528 <hal_watchdog_tickle+0x10>)
   1b51c:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   1b520:	4770      	bx	lr
   1b522:	bf00      	nop
   1b524:	40010000 	.word	0x40010000
   1b528:	6e524635 	.word	0x6e524635

0001b52c <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   1b52c:	b508      	push	{r3, lr}
   1b52e:	4675      	mov	r5, lr
   1b530:	4604      	mov	r4, r0
   1b532:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   1b534:	f001 fa90 	bl	1ca58 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   1b538:	f7ff f905 	bl	1a746 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   1b53c:	b18c      	cbz	r4, 1b562 <__assert_func+0x36>
   1b53e:	4633      	mov	r3, r6
   1b540:	4622      	mov	r2, r4
   1b542:	4629      	mov	r1, r5
   1b544:	4809      	ldr	r0, [pc, #36]	; (1b56c <__assert_func+0x40>)
   1b546:	f7ff f929 	bl	1a79c <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   1b54a:	f7ec fe1b 	bl	8184 <hal_debugger_connected>
   1b54e:	b100      	cbz	r0, 1b552 <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   1b550:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   1b552:	4b07      	ldr	r3, [pc, #28]	; (1b570 <__assert_func+0x44>)
   1b554:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1b558:	605a      	str	r2, [r3, #4]
    asm("isb");
   1b55a:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   1b55e:	f7ec fe19 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   1b562:	4629      	mov	r1, r5
   1b564:	4803      	ldr	r0, [pc, #12]	; (1b574 <__assert_func+0x48>)
   1b566:	f7ff f919 	bl	1a79c <console_printf>
   1b56a:	e7ee      	b.n	1b54a <__assert_func+0x1e>
   1b56c:	000295f4 	.word	0x000295f4
   1b570:	e000ed00 	.word	0xe000ed00
   1b574:	000295e4 	.word	0x000295e4

0001b578 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   1b578:	b500      	push	{lr}
   1b57a:	b083      	sub	sp, #12
   1b57c:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   1b57e:	f7ff f8e2 	bl	1a746 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   1b582:	4d1b      	ldr	r5, [pc, #108]	; (1b5f0 <os_default_irq+0x78>)
   1b584:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   1b586:	6822      	ldr	r2, [r4, #0]
   1b588:	f3c1 0108 	ubfx	r1, r1, #0, #9
   1b58c:	4819      	ldr	r0, [pc, #100]	; (1b5f4 <os_default_irq+0x7c>)
   1b58e:	f7ff f905 	bl	1a79c <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   1b592:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   1b594:	6883      	ldr	r3, [r0, #8]
   1b596:	6842      	ldr	r2, [r0, #4]
   1b598:	6801      	ldr	r1, [r0, #0]
   1b59a:	68c0      	ldr	r0, [r0, #12]
   1b59c:	9000      	str	r0, [sp, #0]
   1b59e:	4816      	ldr	r0, [pc, #88]	; (1b5f8 <os_default_irq+0x80>)
   1b5a0:	f7ff f8fc 	bl	1a79c <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   1b5a4:	6923      	ldr	r3, [r4, #16]
   1b5a6:	9300      	str	r3, [sp, #0]
   1b5a8:	68e3      	ldr	r3, [r4, #12]
   1b5aa:	68a2      	ldr	r2, [r4, #8]
   1b5ac:	6861      	ldr	r1, [r4, #4]
   1b5ae:	4813      	ldr	r0, [pc, #76]	; (1b5fc <os_default_irq+0x84>)
   1b5b0:	f7ff f8f4 	bl	1a79c <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   1b5b4:	6a23      	ldr	r3, [r4, #32]
   1b5b6:	9300      	str	r3, [sp, #0]
   1b5b8:	69e3      	ldr	r3, [r4, #28]
   1b5ba:	69a2      	ldr	r2, [r4, #24]
   1b5bc:	6961      	ldr	r1, [r4, #20]
   1b5be:	4810      	ldr	r0, [pc, #64]	; (1b600 <os_default_irq+0x88>)
   1b5c0:	f7ff f8ec 	bl	1a79c <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   1b5c4:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   1b5c6:	6983      	ldr	r3, [r0, #24]
   1b5c8:	6942      	ldr	r2, [r0, #20]
   1b5ca:	6901      	ldr	r1, [r0, #16]
   1b5cc:	69c0      	ldr	r0, [r0, #28]
   1b5ce:	9000      	str	r0, [sp, #0]
   1b5d0:	480c      	ldr	r0, [pc, #48]	; (1b604 <os_default_irq+0x8c>)
   1b5d2:	f7ff f8e3 	bl	1a79c <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   1b5d6:	6869      	ldr	r1, [r5, #4]
   1b5d8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1b5da:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b5dc:	480a      	ldr	r0, [pc, #40]	; (1b608 <os_default_irq+0x90>)
   1b5de:	f7ff f8dd 	bl	1a79c <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   1b5e2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1b5e4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1b5e6:	4809      	ldr	r0, [pc, #36]	; (1b60c <os_default_irq+0x94>)
   1b5e8:	f7ff f8d8 	bl	1a79c <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   1b5ec:	f7ec fdd2 	bl	8194 <hal_system_reset>
   1b5f0:	e000ed00 	.word	0xe000ed00
   1b5f4:	0002960c 	.word	0x0002960c
   1b5f8:	00029640 	.word	0x00029640
   1b5fc:	00029674 	.word	0x00029674
   1b600:	000296a8 	.word	0x000296a8
   1b604:	000296dc 	.word	0x000296dc
   1b608:	00029710 	.word	0x00029710
   1b60c:	00029738 	.word	0x00029738

0001b610 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   1b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   1b612:	f7ff ff81 	bl	1b518 <hal_watchdog_tickle>
    sanity_last = 0;
   1b616:	2500      	movs	r5, #0
   1b618:	e00b      	b.n	1b632 <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   1b61a:	f000 fec7 	bl	1c3ac <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   1b61e:	f7ff ff7b 	bl	1b518 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   1b622:	4625      	mov	r5, r4
   1b624:	e011      	b.n	1b64a <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   1b626:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   1b628:	f002 f842 	bl	1d6b0 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   1b62c:	4638      	mov	r0, r7
   1b62e:	f001 fa19 	bl	1ca64 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   1b632:	4a14      	ldr	r2, [pc, #80]	; (1b684 <os_idle_task+0x74>)
   1b634:	6813      	ldr	r3, [r2, #0]
   1b636:	3301      	adds	r3, #1
   1b638:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   1b63a:	f001 f995 	bl	1c968 <os_time_get>
   1b63e:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   1b640:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1b644:	1ac3      	subs	r3, r0, r3
   1b646:	2b00      	cmp	r3, #0
   1b648:	dce7      	bgt.n	1b61a <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   1b64a:	f001 fa05 	bl	1ca58 <os_arch_save_sr>
   1b64e:	4607      	mov	r7, r0
        now = os_time_get();
   1b650:	f001 f98a 	bl	1c968 <os_time_get>
   1b654:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   1b656:	f000 ffd7 	bl	1c608 <os_sched_wakeup_ticks>
   1b65a:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   1b65c:	4630      	mov	r0, r6
   1b65e:	f000 f975 	bl	1b94c <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   1b662:	42a0      	cmp	r0, r4
   1b664:	bf28      	it	cs
   1b666:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   1b668:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   1b66c:	1b9b      	subs	r3, r3, r6
   1b66e:	4298      	cmp	r0, r3
   1b670:	bf28      	it	cs
   1b672:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   1b674:	280b      	cmp	r0, #11
   1b676:	d9d6      	bls.n	1b626 <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   1b678:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   1b67c:	d9d4      	bls.n	1b628 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   1b67e:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   1b682:	e7d1      	b.n	1b628 <os_idle_task+0x18>
   1b684:	2000de8c 	.word	0x2000de8c

0001b688 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   1b688:	b508      	push	{r3, lr}
   1b68a:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   1b68c:	2100      	movs	r1, #0
   1b68e:	4608      	mov	r0, r1
   1b690:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   1b692:	2300      	movs	r3, #0
   1b694:	461a      	mov	r2, r3
   1b696:	4619      	mov	r1, r3
   1b698:	4618      	mov	r0, r3
   1b69a:	f7ff ff47 	bl	1b52c <__assert_func>
	...

0001b6a0 <os_started>:
}
   1b6a0:	4b01      	ldr	r3, [pc, #4]	; (1b6a8 <os_started+0x8>)
   1b6a2:	6818      	ldr	r0, [r3, #0]
   1b6a4:	4770      	bx	lr
   1b6a6:	bf00      	nop
   1b6a8:	2000de88 	.word	0x2000de88

0001b6ac <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   1b6ac:	b500      	push	{lr}
   1b6ae:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   1b6b0:	2340      	movs	r3, #64	; 0x40
   1b6b2:	9303      	str	r3, [sp, #12]
   1b6b4:	4b15      	ldr	r3, [pc, #84]	; (1b70c <os_init_idle_task+0x60>)
   1b6b6:	9302      	str	r3, [sp, #8]
   1b6b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b6bc:	9301      	str	r3, [sp, #4]
   1b6be:	23ff      	movs	r3, #255	; 0xff
   1b6c0:	9300      	str	r3, [sp, #0]
   1b6c2:	2300      	movs	r3, #0
   1b6c4:	4a12      	ldr	r2, [pc, #72]	; (1b710 <os_init_idle_task+0x64>)
   1b6c6:	4913      	ldr	r1, [pc, #76]	; (1b714 <os_init_idle_task+0x68>)
   1b6c8:	4813      	ldr	r0, [pc, #76]	; (1b718 <os_init_idle_task+0x6c>)
   1b6ca:	f001 f88d 	bl	1c7e8 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   1b6ce:	b950      	cbnz	r0, 1b6e6 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   1b6d0:	f000 fea2 	bl	1c418 <os_sanity_init>
    assert(rc == 0);
   1b6d4:	b968      	cbnz	r0, 1b6f2 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   1b6d6:	f247 5030 	movw	r0, #30000	; 0x7530
   1b6da:	f7ff fed9 	bl	1b490 <hal_watchdog_init>
    assert(rc == 0);
   1b6de:	b970      	cbnz	r0, 1b6fe <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   1b6e0:	b005      	add	sp, #20
   1b6e2:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   1b6e6:	2300      	movs	r3, #0
   1b6e8:	461a      	mov	r2, r3
   1b6ea:	4619      	mov	r1, r3
   1b6ec:	4618      	mov	r0, r3
   1b6ee:	f7ff ff1d 	bl	1b52c <__assert_func>
    assert(rc == 0);
   1b6f2:	2300      	movs	r3, #0
   1b6f4:	461a      	mov	r2, r3
   1b6f6:	4619      	mov	r1, r3
   1b6f8:	4618      	mov	r0, r3
   1b6fa:	f7ff ff17 	bl	1b52c <__assert_func>
    assert(rc == 0);
   1b6fe:	2300      	movs	r3, #0
   1b700:	461a      	mov	r2, r3
   1b702:	4619      	mov	r1, r3
   1b704:	4618      	mov	r0, r3
   1b706:	f7ff ff11 	bl	1b52c <__assert_func>
   1b70a:	bf00      	nop
   1b70c:	20006f70 	.word	0x20006f70
   1b710:	0001b611 	.word	0x0001b611
   1b714:	0002975c 	.word	0x0002975c
   1b718:	2000dde8 	.word	0x2000dde8

0001b71c <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   1b71c:	b510      	push	{r4, lr}
   1b71e:	b084      	sub	sp, #16
   1b720:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   1b722:	4b24      	ldr	r3, [pc, #144]	; (1b7b4 <os_init+0x98>)
   1b724:	2200      	movs	r2, #0
   1b726:	601a      	str	r2, [r3, #0]
   1b728:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   1b72a:	4b23      	ldr	r3, [pc, #140]	; (1b7b8 <os_init+0x9c>)
   1b72c:	601a      	str	r2, [r3, #0]
   1b72e:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   1b730:	f000 faba 	bl	1bca8 <os_eventq_dflt_get>
   1b734:	f000 fa0e 	bl	1bb54 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   1b738:	f000 fa04 	bl	1bb44 <os_dev_reset>

    err = os_arch_os_init();
   1b73c:	f001 f9c6 	bl	1cacc <os_arch_os_init>
    assert(err == OS_OK);
   1b740:	bb00      	cbnz	r0, 1b784 <os_init+0x68>

    if (main_fn) {
   1b742:	b18c      	cbz	r4, 1b768 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   1b744:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1b748:	9303      	str	r3, [sp, #12]
   1b74a:	4b1c      	ldr	r3, [pc, #112]	; (1b7bc <os_init+0xa0>)
   1b74c:	9302      	str	r3, [sp, #8]
   1b74e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b752:	9301      	str	r3, [sp, #4]
   1b754:	237f      	movs	r3, #127	; 0x7f
   1b756:	9300      	str	r3, [sp, #0]
   1b758:	4623      	mov	r3, r4
   1b75a:	4a19      	ldr	r2, [pc, #100]	; (1b7c0 <os_init+0xa4>)
   1b75c:	4919      	ldr	r1, [pc, #100]	; (1b7c4 <os_init+0xa8>)
   1b75e:	481a      	ldr	r0, [pc, #104]	; (1b7c8 <os_init+0xac>)
   1b760:	f001 f842 	bl	1c7e8 <os_task_init>
   1b764:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   1b766:	b998      	cbnz	r0, 1b790 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   1b768:	f001 fe72 	bl	1d450 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   1b76c:	2001      	movs	r0, #1
   1b76e:	f000 f985 	bl	1ba7c <os_dev_initialize_all>
   1b772:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1b774:	b990      	cbnz	r0, 1b79c <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   1b776:	2002      	movs	r0, #2
   1b778:	f000 f980 	bl	1ba7c <os_dev_initialize_all>
   1b77c:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1b77e:	b998      	cbnz	r0, 1b7a8 <os_init+0x8c>
}
   1b780:	b004      	add	sp, #16
   1b782:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   1b784:	2300      	movs	r3, #0
   1b786:	461a      	mov	r2, r3
   1b788:	4619      	mov	r1, r3
   1b78a:	4618      	mov	r0, r3
   1b78c:	f7ff fece 	bl	1b52c <__assert_func>
        assert(err == 0);
   1b790:	2300      	movs	r3, #0
   1b792:	461a      	mov	r2, r3
   1b794:	4619      	mov	r1, r3
   1b796:	4618      	mov	r0, r3
   1b798:	f7ff fec8 	bl	1b52c <__assert_func>
    assert(err == OS_OK);
   1b79c:	2300      	movs	r3, #0
   1b79e:	461a      	mov	r2, r3
   1b7a0:	4619      	mov	r1, r3
   1b7a2:	4618      	mov	r0, r3
   1b7a4:	f7ff fec2 	bl	1b52c <__assert_func>
    assert(err == OS_OK);
   1b7a8:	2300      	movs	r3, #0
   1b7aa:	461a      	mov	r2, r3
   1b7ac:	4619      	mov	r1, r3
   1b7ae:	4618      	mov	r0, r3
   1b7b0:	f7ff febc 	bl	1b52c <__assert_func>
   1b7b4:	2000de90 	.word	0x2000de90
   1b7b8:	2000deb8 	.word	0x2000deb8
   1b7bc:	20007070 	.word	0x20007070
   1b7c0:	0001b689 	.word	0x0001b689
   1b7c4:	00029754 	.word	0x00029754
   1b7c8:	2000de38 	.word	0x2000de38

0001b7cc <os_start>:

void
os_start(void)
{
   1b7cc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   1b7ce:	f7ff fe9b 	bl	1b508 <hal_watchdog_enable>

    err = os_arch_os_start();
   1b7d2:	f001 f9db 	bl	1cb8c <os_arch_os_start>
    assert(err == OS_OK);
   1b7d6:	b900      	cbnz	r0, 1b7da <os_start+0xe>
#else
    assert(0);
#endif
}
   1b7d8:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   1b7da:	2300      	movs	r3, #0
   1b7dc:	461a      	mov	r2, r3
   1b7de:	4619      	mov	r1, r3
   1b7e0:	4618      	mov	r0, r3
   1b7e2:	f7ff fea3 	bl	1b52c <__assert_func>
	...

0001b7e8 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   1b7e8:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b7ea:	4b0c      	ldr	r3, [pc, #48]	; (1b81c <os_pkg_init+0x34>)
   1b7ec:	781b      	ldrb	r3, [r3, #0]
   1b7ee:	b14b      	cbz	r3, 1b804 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   1b7f0:	2003      	movs	r0, #3
   1b7f2:	f000 f943 	bl	1ba7c <os_dev_initialize_all>
   1b7f6:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1b7f8:	b948      	cbnz	r0, 1b80e <os_pkg_init+0x26>

    os_mempool_module_init();
   1b7fa:	f000 fc25 	bl	1c048 <os_mempool_module_init>
    os_msys_init();
   1b7fe:	f000 fcad 	bl	1c15c <os_msys_init>
}
   1b802:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b804:	461a      	mov	r2, r3
   1b806:	4619      	mov	r1, r3
   1b808:	4618      	mov	r0, r3
   1b80a:	f7ff fe8f 	bl	1b52c <__assert_func>
    assert(err == OS_OK);
   1b80e:	2300      	movs	r3, #0
   1b810:	461a      	mov	r2, r3
   1b812:	4619      	mov	r1, r3
   1b814:	4618      	mov	r0, r3
   1b816:	f7ff fe89 	bl	1b52c <__assert_func>
   1b81a:	bf00      	nop
   1b81c:	2000ddbc 	.word	0x2000ddbc

0001b820 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   1b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b822:	4604      	mov	r4, r0
   1b824:	460d      	mov	r5, r1
   1b826:	4617      	mov	r7, r2
   1b828:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   1b82a:	2220      	movs	r2, #32
   1b82c:	2100      	movs	r1, #0
   1b82e:	f001 fa80 	bl	1cd32 <memset>
    c->c_ev.ev_cb = ev_cb;
   1b832:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   1b834:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   1b836:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   1b838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001b83c <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   1b83c:	b538      	push	{r3, r4, r5, lr}
   1b83e:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   1b840:	f001 f90a 	bl	1ca58 <os_arch_save_sr>
   1b844:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   1b846:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   1b848:	b13b      	cbz	r3, 1b85a <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1b84a:	69a2      	ldr	r2, [r4, #24]
   1b84c:	b172      	cbz	r2, 1b86c <os_callout_stop+0x30>
   1b84e:	61d3      	str	r3, [r2, #28]
   1b850:	69e3      	ldr	r3, [r4, #28]
   1b852:	69a2      	ldr	r2, [r4, #24]
   1b854:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   1b856:	2300      	movs	r3, #0
   1b858:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   1b85a:	6920      	ldr	r0, [r4, #16]
   1b85c:	b110      	cbz	r0, 1b864 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   1b85e:	4621      	mov	r1, r4
   1b860:	f000 fa02 	bl	1bc68 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   1b864:	4628      	mov	r0, r5
   1b866:	f001 f8fd 	bl	1ca64 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   1b86a:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1b86c:	4a01      	ldr	r2, [pc, #4]	; (1b874 <os_callout_stop+0x38>)
   1b86e:	6053      	str	r3, [r2, #4]
   1b870:	e7ee      	b.n	1b850 <os_callout_stop+0x14>
   1b872:	bf00      	nop
   1b874:	2000de90 	.word	0x2000de90

0001b878 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   1b878:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   1b87a:	6903      	ldr	r3, [r0, #16]
   1b87c:	b1c3      	cbz	r3, 1b8b0 <os_callout_reset+0x38>
   1b87e:	4605      	mov	r5, r0
   1b880:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   1b882:	2900      	cmp	r1, #0
   1b884:	db2f      	blt.n	1b8e6 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   1b886:	f001 f8e7 	bl	1ca58 <os_arch_save_sr>
   1b88a:	4606      	mov	r6, r0

    os_callout_stop(c);
   1b88c:	4628      	mov	r0, r5
   1b88e:	f7ff ffd5 	bl	1b83c <os_callout_stop>

    if (ticks == 0) {
   1b892:	b904      	cbnz	r4, 1b896 <os_callout_reset+0x1e>
        ticks = 1;
   1b894:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   1b896:	f001 f867 	bl	1c968 <os_time_get>
   1b89a:	4420      	add	r0, r4
   1b89c:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1b89e:	4b13      	ldr	r3, [pc, #76]	; (1b8ec <os_callout_reset+0x74>)
   1b8a0:	681b      	ldr	r3, [r3, #0]
   1b8a2:	b153      	cbz	r3, 1b8ba <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   1b8a4:	695a      	ldr	r2, [r3, #20]
   1b8a6:	1a82      	subs	r2, r0, r2
   1b8a8:	2a00      	cmp	r2, #0
   1b8aa:	db06      	blt.n	1b8ba <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1b8ac:	699b      	ldr	r3, [r3, #24]
   1b8ae:	e7f8      	b.n	1b8a2 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   1b8b0:	461a      	mov	r2, r3
   1b8b2:	4619      	mov	r1, r3
   1b8b4:	4618      	mov	r0, r3
   1b8b6:	f7ff fe39 	bl	1b52c <__assert_func>
            break;
        }
    }

    if (entry) {
   1b8ba:	b15b      	cbz	r3, 1b8d4 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   1b8bc:	69da      	ldr	r2, [r3, #28]
   1b8be:	61ea      	str	r2, [r5, #28]
   1b8c0:	61ab      	str	r3, [r5, #24]
   1b8c2:	69da      	ldr	r2, [r3, #28]
   1b8c4:	6015      	str	r5, [r2, #0]
   1b8c6:	3518      	adds	r5, #24
   1b8c8:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   1b8ca:	4630      	mov	r0, r6
   1b8cc:	f001 f8ca 	bl	1ca64 <os_arch_restore_sr>

    ret = OS_OK;
   1b8d0:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   1b8d2:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   1b8d4:	2300      	movs	r3, #0
   1b8d6:	61ab      	str	r3, [r5, #24]
   1b8d8:	4b04      	ldr	r3, [pc, #16]	; (1b8ec <os_callout_reset+0x74>)
   1b8da:	685a      	ldr	r2, [r3, #4]
   1b8dc:	61ea      	str	r2, [r5, #28]
   1b8de:	6015      	str	r5, [r2, #0]
   1b8e0:	3518      	adds	r5, #24
   1b8e2:	605d      	str	r5, [r3, #4]
   1b8e4:	e7f1      	b.n	1b8ca <os_callout_reset+0x52>
        ret = OS_EINVAL;
   1b8e6:	2002      	movs	r0, #2
    return ret;
   1b8e8:	e7f3      	b.n	1b8d2 <os_callout_reset+0x5a>
   1b8ea:	bf00      	nop
   1b8ec:	2000de90 	.word	0x2000de90

0001b8f0 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   1b8f0:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   1b8f2:	f001 f839 	bl	1c968 <os_time_get>
   1b8f6:	4605      	mov	r5, r0
   1b8f8:	e00f      	b.n	1b91a <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1b8fa:	69e2      	ldr	r2, [r4, #28]
   1b8fc:	4b12      	ldr	r3, [pc, #72]	; (1b948 <os_callout_tick+0x58>)
   1b8fe:	605a      	str	r2, [r3, #4]
   1b900:	69e3      	ldr	r3, [r4, #28]
   1b902:	69a2      	ldr	r2, [r4, #24]
   1b904:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   1b906:	2300      	movs	r3, #0
   1b908:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   1b90a:	f001 f8ab 	bl	1ca64 <os_arch_restore_sr>

        if (c) {
   1b90e:	b1d4      	cbz	r4, 1b946 <os_callout_tick+0x56>
            if (c->c_evq) {
   1b910:	6920      	ldr	r0, [r4, #16]
   1b912:	b9a0      	cbnz	r0, 1b93e <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   1b914:	6863      	ldr	r3, [r4, #4]
   1b916:	4620      	mov	r0, r4
   1b918:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   1b91a:	f001 f89d 	bl	1ca58 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   1b91e:	4b0a      	ldr	r3, [pc, #40]	; (1b948 <os_callout_tick+0x58>)
   1b920:	681c      	ldr	r4, [r3, #0]
        if (c) {
   1b922:	2c00      	cmp	r4, #0
   1b924:	d0f1      	beq.n	1b90a <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   1b926:	6963      	ldr	r3, [r4, #20]
   1b928:	1aeb      	subs	r3, r5, r3
   1b92a:	2b00      	cmp	r3, #0
   1b92c:	db05      	blt.n	1b93a <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1b92e:	69a3      	ldr	r3, [r4, #24]
   1b930:	2b00      	cmp	r3, #0
   1b932:	d0e2      	beq.n	1b8fa <os_callout_tick+0xa>
   1b934:	69e2      	ldr	r2, [r4, #28]
   1b936:	61da      	str	r2, [r3, #28]
   1b938:	e7e2      	b.n	1b900 <os_callout_tick+0x10>
                c = NULL;
   1b93a:	2400      	movs	r4, #0
   1b93c:	e7e5      	b.n	1b90a <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   1b93e:	4621      	mov	r1, r4
   1b940:	f000 f915 	bl	1bb6e <os_eventq_put>
   1b944:	e7e9      	b.n	1b91a <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   1b946:	bd38      	pop	{r3, r4, r5, pc}
   1b948:	2000de90 	.word	0x2000de90

0001b94c <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   1b94c:	b510      	push	{r4, lr}
   1b94e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   1b950:	f001 f88b 	bl	1ca6a <os_arch_in_critical>
   1b954:	b130      	cbz	r0, 1b964 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   1b956:	4b09      	ldr	r3, [pc, #36]	; (1b97c <os_callout_wakeup_ticks+0x30>)
   1b958:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   1b95a:	b15b      	cbz	r3, 1b974 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   1b95c:	6958      	ldr	r0, [r3, #20]
   1b95e:	1b00      	subs	r0, r0, r4
   1b960:	d406      	bmi.n	1b970 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   1b962:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1b964:	2300      	movs	r3, #0
   1b966:	461a      	mov	r2, r3
   1b968:	4619      	mov	r1, r3
   1b96a:	4618      	mov	r0, r3
   1b96c:	f7ff fdde 	bl	1b52c <__assert_func>
            rt = 0;     /* callout time is in the past */
   1b970:	2000      	movs	r0, #0
   1b972:	e7f6      	b.n	1b962 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   1b974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1b978:	e7f3      	b.n	1b962 <os_callout_wakeup_ticks+0x16>
   1b97a:	bf00      	nop
   1b97c:	2000de90 	.word	0x2000de90

0001b980 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   1b980:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   1b982:	4601      	mov	r1, r0
   1b984:	2000      	movs	r0, #0
   1b986:	f002 f84d 	bl	1da24 <hal_timer_config>
    return rc;
}
   1b98a:	bd08      	pop	{r3, pc}

0001b98c <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   1b98c:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   1b98e:	2000      	movs	r0, #0
   1b990:	f002 f8c4 	bl	1db1c <hal_timer_read>
    return cpu_time;
}
   1b994:	bd08      	pop	{r3, pc}
	...

0001b998 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   1b998:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   1b99a:	4b15      	ldr	r3, [pc, #84]	; (1b9f0 <os_dev_add+0x58>)
   1b99c:	681d      	ldr	r5, [r3, #0]
   1b99e:	b115      	cbz	r5, 1b9a6 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1b9a0:	462b      	mov	r3, r5
    prev_dev = NULL;
   1b9a2:	2400      	movs	r4, #0
   1b9a4:	e008      	b.n	1b9b8 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1b9a6:	4603      	mov	r3, r0
   1b9a8:	f843 5f20 	str.w	r5, [r3, #32]!
   1b9ac:	4a10      	ldr	r2, [pc, #64]	; (1b9f0 <os_dev_add+0x58>)
   1b9ae:	6053      	str	r3, [r2, #4]
   1b9b0:	6010      	str	r0, [r2, #0]
        return (0);
   1b9b2:	e010      	b.n	1b9d6 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   1b9b4:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1b9b6:	6a1b      	ldr	r3, [r3, #32]
   1b9b8:	b143      	cbz	r3, 1b9cc <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   1b9ba:	7e01      	ldrb	r1, [r0, #24]
   1b9bc:	7e1a      	ldrb	r2, [r3, #24]
   1b9be:	4291      	cmp	r1, r2
   1b9c0:	d304      	bcc.n	1b9cc <os_dev_add+0x34>
   1b9c2:	d1f7      	bne.n	1b9b4 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   1b9c4:	7e41      	ldrb	r1, [r0, #25]
   1b9c6:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   1b9c8:	4291      	cmp	r1, r2
   1b9ca:	d2f3      	bcs.n	1b9b4 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   1b9cc:	b15c      	cbz	r4, 1b9e6 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1b9ce:	6a23      	ldr	r3, [r4, #32]
   1b9d0:	6203      	str	r3, [r0, #32]
   1b9d2:	b11b      	cbz	r3, 1b9dc <os_dev_add+0x44>
   1b9d4:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   1b9d6:	2000      	movs	r0, #0
   1b9d8:	bc30      	pop	{r4, r5}
   1b9da:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1b9dc:	f100 0320 	add.w	r3, r0, #32
   1b9e0:	4a03      	ldr	r2, [pc, #12]	; (1b9f0 <os_dev_add+0x58>)
   1b9e2:	6053      	str	r3, [r2, #4]
   1b9e4:	e7f6      	b.n	1b9d4 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1b9e6:	6205      	str	r5, [r0, #32]
   1b9e8:	4b01      	ldr	r3, [pc, #4]	; (1b9f0 <os_dev_add+0x58>)
   1b9ea:	6018      	str	r0, [r3, #0]
   1b9ec:	e7f3      	b.n	1b9d6 <os_dev_add+0x3e>
   1b9ee:	bf00      	nop
   1b9f0:	20009070 	.word	0x20009070

0001b9f4 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   1b9f4:	b510      	push	{r4, lr}
   1b9f6:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   1b9f8:	6903      	ldr	r3, [r0, #16]
   1b9fa:	6941      	ldr	r1, [r0, #20]
   1b9fc:	4798      	blx	r3
    if (rc != 0) {
   1b9fe:	4603      	mov	r3, r0
   1ba00:	b128      	cbz	r0, 1ba0e <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   1ba02:	7ee2      	ldrb	r2, [r4, #27]
   1ba04:	f012 0f08 	tst.w	r2, #8
   1ba08:	d105      	bne.n	1ba16 <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   1ba0a:	2300      	movs	r3, #0
   1ba0c:	e003      	b.n	1ba16 <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   1ba0e:	7ee2      	ldrb	r2, [r4, #27]
   1ba10:	f042 0201 	orr.w	r2, r2, #1
   1ba14:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   1ba16:	4618      	mov	r0, r3
   1ba18:	bd10      	pop	{r4, pc}

0001ba1a <os_dev_init>:
    dev->od_name = name;
   1ba1a:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   1ba1c:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   1ba1e:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   1ba20:	2300      	movs	r3, #0
   1ba22:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   1ba24:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   1ba26:	9a00      	ldr	r2, [sp, #0]
   1ba28:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   1ba2a:	9a01      	ldr	r2, [sp, #4]
   1ba2c:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   1ba2e:	6003      	str	r3, [r0, #0]
   1ba30:	6043      	str	r3, [r0, #4]
   1ba32:	6083      	str	r3, [r0, #8]
   1ba34:	60c3      	str	r3, [r0, #12]
}
   1ba36:	4618      	mov	r0, r3
   1ba38:	4770      	bx	lr
	...

0001ba3c <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   1ba3c:	b530      	push	{r4, r5, lr}
   1ba3e:	b083      	sub	sp, #12
   1ba40:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   1ba42:	9c07      	ldr	r4, [sp, #28]
   1ba44:	9401      	str	r4, [sp, #4]
   1ba46:	9c06      	ldr	r4, [sp, #24]
   1ba48:	9400      	str	r4, [sp, #0]
   1ba4a:	f7ff ffe6 	bl	1ba1a <os_dev_init>
    if (rc != 0) {
   1ba4e:	4603      	mov	r3, r0
   1ba50:	b110      	cbz	r0, 1ba58 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   1ba52:	4618      	mov	r0, r3
   1ba54:	b003      	add	sp, #12
   1ba56:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   1ba58:	4628      	mov	r0, r5
   1ba5a:	f7ff ff9d 	bl	1b998 <os_dev_add>
    if (rc != 0) {
   1ba5e:	4603      	mov	r3, r0
   1ba60:	2800      	cmp	r0, #0
   1ba62:	d1f6      	bne.n	1ba52 <os_dev_create+0x16>
    if (g_os_started) {
   1ba64:	4a04      	ldr	r2, [pc, #16]	; (1ba78 <os_dev_create+0x3c>)
   1ba66:	6812      	ldr	r2, [r2, #0]
   1ba68:	2a00      	cmp	r2, #0
   1ba6a:	d0f2      	beq.n	1ba52 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   1ba6c:	4628      	mov	r0, r5
   1ba6e:	f7ff ffc1 	bl	1b9f4 <os_dev_initialize>
   1ba72:	4603      	mov	r3, r0
    return (rc);
   1ba74:	e7ed      	b.n	1ba52 <os_dev_create+0x16>
   1ba76:	bf00      	nop
   1ba78:	2000de88 	.word	0x2000de88

0001ba7c <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   1ba7c:	b538      	push	{r3, r4, r5, lr}
   1ba7e:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1ba80:	4b08      	ldr	r3, [pc, #32]	; (1baa4 <os_dev_initialize_all+0x28>)
   1ba82:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   1ba84:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1ba86:	e000      	b.n	1ba8a <os_dev_initialize_all+0xe>
   1ba88:	6a24      	ldr	r4, [r4, #32]
   1ba8a:	b144      	cbz	r4, 1ba9e <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   1ba8c:	7e23      	ldrb	r3, [r4, #24]
   1ba8e:	42ab      	cmp	r3, r5
   1ba90:	d1fa      	bne.n	1ba88 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   1ba92:	4620      	mov	r0, r4
   1ba94:	f7ff ffae 	bl	1b9f4 <os_dev_initialize>
            if (rc) {
   1ba98:	4602      	mov	r2, r0
   1ba9a:	2800      	cmp	r0, #0
   1ba9c:	d0f4      	beq.n	1ba88 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   1ba9e:	4610      	mov	r0, r2
   1baa0:	bd38      	pop	{r3, r4, r5, pc}
   1baa2:	bf00      	nop
   1baa4:	20009070 	.word	0x20009070

0001baa8 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   1baa8:	b538      	push	{r3, r4, r5, lr}
   1baaa:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1baac:	4b05      	ldr	r3, [pc, #20]	; (1bac4 <os_dev_lookup+0x1c>)
   1baae:	681c      	ldr	r4, [r3, #0]
   1bab0:	b134      	cbz	r4, 1bac0 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   1bab2:	4629      	mov	r1, r5
   1bab4:	69e0      	ldr	r0, [r4, #28]
   1bab6:	f001 f958 	bl	1cd6a <strcmp>
   1baba:	b108      	cbz	r0, 1bac0 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1babc:	6a24      	ldr	r4, [r4, #32]
   1babe:	e7f7      	b.n	1bab0 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   1bac0:	4620      	mov	r0, r4
   1bac2:	bd38      	pop	{r3, r4, r5, pc}
   1bac4:	20009070 	.word	0x20009070

0001bac8 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   1bac8:	b570      	push	{r4, r5, r6, lr}
   1baca:	460d      	mov	r5, r1
   1bacc:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   1bace:	f7ff ffeb 	bl	1baa8 <os_dev_lookup>
    if (dev == NULL) {
   1bad2:	4604      	mov	r4, r0
   1bad4:	b1a0      	cbz	r0, 1bb00 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   1bad6:	7ec3      	ldrb	r3, [r0, #27]
   1bad8:	f013 0f01 	tst.w	r3, #1
   1badc:	d012      	beq.n	1bb04 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   1bade:	6803      	ldr	r3, [r0, #0]
   1bae0:	b11b      	cbz	r3, 1baea <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   1bae2:	4632      	mov	r2, r6
   1bae4:	4629      	mov	r1, r5
   1bae6:	4798      	blx	r3
        if (rc != 0) {
   1bae8:	b970      	cbnz	r0, 1bb08 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1baea:	f000 ffb5 	bl	1ca58 <os_arch_save_sr>
    ++dev->od_open_ref;
   1baee:	7ea3      	ldrb	r3, [r4, #26]
   1baf0:	3301      	adds	r3, #1
   1baf2:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   1baf4:	7ee3      	ldrb	r3, [r4, #27]
   1baf6:	f043 0302 	orr.w	r3, r3, #2
   1bafa:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   1bafc:	f000 ffb2 	bl	1ca64 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   1bb00:	4620      	mov	r0, r4
   1bb02:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   1bb04:	2400      	movs	r4, #0
   1bb06:	e7fb      	b.n	1bb00 <os_dev_open+0x38>
    return (NULL);
   1bb08:	2400      	movs	r4, #0
   1bb0a:	e7f9      	b.n	1bb00 <os_dev_open+0x38>

0001bb0c <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   1bb0c:	b1b0      	cbz	r0, 1bb3c <os_dev_close+0x30>
{
   1bb0e:	b510      	push	{r4, lr}
   1bb10:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   1bb12:	68c3      	ldr	r3, [r0, #12]
   1bb14:	b113      	cbz	r3, 1bb1c <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   1bb16:	4798      	blx	r3
        if (rc != 0) {
   1bb18:	4603      	mov	r3, r0
   1bb1a:	b968      	cbnz	r0, 1bb38 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1bb1c:	f000 ff9c 	bl	1ca58 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   1bb20:	7ea3      	ldrb	r3, [r4, #26]
   1bb22:	3b01      	subs	r3, #1
   1bb24:	b2db      	uxtb	r3, r3
   1bb26:	76a3      	strb	r3, [r4, #26]
   1bb28:	b91b      	cbnz	r3, 1bb32 <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   1bb2a:	7ee3      	ldrb	r3, [r4, #27]
   1bb2c:	f023 0306 	bic.w	r3, r3, #6
   1bb30:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   1bb32:	f000 ff97 	bl	1ca64 <os_arch_restore_sr>

    return (0);
   1bb36:	2300      	movs	r3, #0
err:
    return (rc);
}
   1bb38:	4618      	mov	r0, r3
   1bb3a:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   1bb3c:	2302      	movs	r3, #2
}
   1bb3e:	4618      	mov	r0, r3
   1bb40:	4770      	bx	lr
	...

0001bb44 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   1bb44:	4b02      	ldr	r3, [pc, #8]	; (1bb50 <os_dev_reset+0xc>)
   1bb46:	2200      	movs	r2, #0
   1bb48:	601a      	str	r2, [r3, #0]
   1bb4a:	605b      	str	r3, [r3, #4]
}
   1bb4c:	4770      	bx	lr
   1bb4e:	bf00      	nop
   1bb50:	20009070 	.word	0x20009070

0001bb54 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   1bb54:	2200      	movs	r2, #0
   1bb56:	6002      	str	r2, [r0, #0]
   1bb58:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   1bb5a:	4603      	mov	r3, r0
   1bb5c:	f843 2f08 	str.w	r2, [r3, #8]!
   1bb60:	60c3      	str	r3, [r0, #12]
}
   1bb62:	4770      	bx	lr

0001bb64 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   1bb64:	68c0      	ldr	r0, [r0, #12]
}
   1bb66:	3000      	adds	r0, #0
   1bb68:	bf18      	it	ne
   1bb6a:	2001      	movne	r0, #1
   1bb6c:	4770      	bx	lr

0001bb6e <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   1bb6e:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   1bb70:	b1f0      	cbz	r0, 1bbb0 <os_eventq_put+0x42>
   1bb72:	460c      	mov	r4, r1
   1bb74:	4605      	mov	r5, r0
   1bb76:	f7ff fff5 	bl	1bb64 <os_eventq_inited>
   1bb7a:	b1c8      	cbz	r0, 1bbb0 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1bb7c:	f000 ff6c 	bl	1ca58 <os_arch_save_sr>
   1bb80:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   1bb82:	7823      	ldrb	r3, [r4, #0]
   1bb84:	b9d3      	cbnz	r3, 1bbbc <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   1bb86:	2301      	movs	r3, #1
   1bb88:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   1bb8a:	2300      	movs	r3, #0
   1bb8c:	60e3      	str	r3, [r4, #12]
   1bb8e:	68eb      	ldr	r3, [r5, #12]
   1bb90:	601c      	str	r4, [r3, #0]
   1bb92:	340c      	adds	r4, #12
   1bb94:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   1bb96:	6868      	ldr	r0, [r5, #4]
   1bb98:	b1b8      	cbz	r0, 1bbca <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   1bb9a:	7b03      	ldrb	r3, [r0, #12]
   1bb9c:	2b02      	cmp	r3, #2
   1bb9e:	d010      	beq.n	1bbc2 <os_eventq_put+0x54>
    resched = 0;
   1bba0:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   1bba2:	2300      	movs	r3, #0
   1bba4:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   1bba6:	4630      	mov	r0, r6
   1bba8:	f000 ff5c 	bl	1ca64 <os_arch_restore_sr>

    if (resched) {
   1bbac:	b97c      	cbnz	r4, 1bbce <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   1bbae:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   1bbb0:	2300      	movs	r3, #0
   1bbb2:	461a      	mov	r2, r3
   1bbb4:	4619      	mov	r1, r3
   1bbb6:	4618      	mov	r0, r3
   1bbb8:	f7ff fcb8 	bl	1b52c <__assert_func>
        OS_EXIT_CRITICAL(sr);
   1bbbc:	f000 ff52 	bl	1ca64 <os_arch_restore_sr>
   1bbc0:	e7f5      	b.n	1bbae <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   1bbc2:	f000 fcc7 	bl	1c554 <os_sched_wakeup>
            resched = 1;
   1bbc6:	2401      	movs	r4, #1
   1bbc8:	e7eb      	b.n	1bba2 <os_eventq_put+0x34>
    resched = 0;
   1bbca:	2400      	movs	r4, #0
   1bbcc:	e7eb      	b.n	1bba6 <os_eventq_put+0x38>
        os_sched(NULL);
   1bbce:	2000      	movs	r0, #0
   1bbd0:	f000 fd40 	bl	1c654 <os_sched>
   1bbd4:	e7eb      	b.n	1bbae <os_eventq_put+0x40>

0001bbd6 <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   1bbd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bbd8:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   1bbda:	f000 fc67 	bl	1c4ac <os_sched_get_current_task>
   1bbde:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   1bbe0:	682b      	ldr	r3, [r5, #0]
   1bbe2:	4283      	cmp	r3, r0
   1bbe4:	d001      	beq.n	1bbea <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   1bbe6:	b9db      	cbnz	r3, 1bc20 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   1bbe8:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   1bbea:	f000 ff35 	bl	1ca58 <os_arch_save_sr>
   1bbee:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   1bbf0:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   1bbf2:	b9de      	cbnz	r6, 1bc2c <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   1bbf4:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   1bbf6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bbfa:	4620      	mov	r0, r4
   1bbfc:	f000 fc62 	bl	1c4c4 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   1bc00:	7b63      	ldrb	r3, [r4, #13]
   1bc02:	f043 0308 	orr.w	r3, r3, #8
   1bc06:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   1bc08:	4638      	mov	r0, r7
   1bc0a:	f000 ff2b 	bl	1ca64 <os_arch_restore_sr>

        os_sched(NULL);
   1bc0e:	2000      	movs	r0, #0
   1bc10:	f000 fd20 	bl	1c654 <os_sched>

        OS_ENTER_CRITICAL(sr);
   1bc14:	f000 ff20 	bl	1ca58 <os_arch_save_sr>
   1bc18:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   1bc1a:	2300      	movs	r3, #0
   1bc1c:	606b      	str	r3, [r5, #4]
        goto pull_one;
   1bc1e:	e7e7      	b.n	1bbf0 <os_eventq_get+0x1a>
            assert(0);
   1bc20:	2300      	movs	r3, #0
   1bc22:	461a      	mov	r2, r3
   1bc24:	4619      	mov	r1, r3
   1bc26:	4618      	mov	r0, r3
   1bc28:	f7ff fc80 	bl	1b52c <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1bc2c:	68f3      	ldr	r3, [r6, #12]
   1bc2e:	60ab      	str	r3, [r5, #8]
   1bc30:	b153      	cbz	r3, 1bc48 <os_eventq_get+0x72>
        ev->ev_queued = 0;
   1bc32:	2300      	movs	r3, #0
   1bc34:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   1bc36:	7b63      	ldrb	r3, [r4, #13]
   1bc38:	f023 0308 	bic.w	r3, r3, #8
   1bc3c:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   1bc3e:	4638      	mov	r0, r7
   1bc40:	f000 ff10 	bl	1ca64 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   1bc44:	4630      	mov	r0, r6
   1bc46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1bc48:	f105 0308 	add.w	r3, r5, #8
   1bc4c:	60eb      	str	r3, [r5, #12]
   1bc4e:	e7f0      	b.n	1bc32 <os_eventq_get+0x5c>

0001bc50 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   1bc50:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   1bc52:	f7ff ffc0 	bl	1bbd6 <os_eventq_get>
    assert(ev->ev_cb != NULL);
   1bc56:	6843      	ldr	r3, [r0, #4]
   1bc58:	b10b      	cbz	r3, 1bc5e <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   1bc5a:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   1bc5c:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   1bc5e:	461a      	mov	r2, r3
   1bc60:	4619      	mov	r1, r3
   1bc62:	4618      	mov	r0, r3
   1bc64:	f7ff fc62 	bl	1b52c <__assert_func>

0001bc68 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   1bc68:	b538      	push	{r3, r4, r5, lr}
   1bc6a:	4605      	mov	r5, r0
   1bc6c:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1bc6e:	f000 fef3 	bl	1ca58 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   1bc72:	7823      	ldrb	r3, [r4, #0]
   1bc74:	b183      	cbz	r3, 1bc98 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1bc76:	68aa      	ldr	r2, [r5, #8]
   1bc78:	42a2      	cmp	r2, r4
   1bc7a:	d107      	bne.n	1bc8c <os_eventq_remove+0x24>
   1bc7c:	68d3      	ldr	r3, [r2, #12]
   1bc7e:	60ab      	str	r3, [r5, #8]
   1bc80:	b953      	cbnz	r3, 1bc98 <os_eventq_remove+0x30>
   1bc82:	f105 0308 	add.w	r3, r5, #8
   1bc86:	60eb      	str	r3, [r5, #12]
   1bc88:	e006      	b.n	1bc98 <os_eventq_remove+0x30>
   1bc8a:	461a      	mov	r2, r3
   1bc8c:	68d3      	ldr	r3, [r2, #12]
   1bc8e:	42a3      	cmp	r3, r4
   1bc90:	d1fb      	bne.n	1bc8a <os_eventq_remove+0x22>
   1bc92:	68db      	ldr	r3, [r3, #12]
   1bc94:	60d3      	str	r3, [r2, #12]
   1bc96:	b123      	cbz	r3, 1bca2 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   1bc98:	2300      	movs	r3, #0
   1bc9a:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   1bc9c:	f000 fee2 	bl	1ca64 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   1bca0:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1bca2:	320c      	adds	r2, #12
   1bca4:	60ea      	str	r2, [r5, #12]
   1bca6:	e7f7      	b.n	1bc98 <os_eventq_remove+0x30>

0001bca8 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   1bca8:	4800      	ldr	r0, [pc, #0]	; (1bcac <os_eventq_dflt_get+0x4>)
   1bcaa:	4770      	bx	lr
   1bcac:	20009078 	.word	0x20009078

0001bcb0 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   1bcb0:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   1bcb2:	2000      	movs	r0, #0
   1bcb4:	6018      	str	r0, [r3, #0]
   1bcb6:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   1bcb8:	6098      	str	r0, [r3, #8]
   1bcba:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   1bcbc:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   1bcbe:	611a      	str	r2, [r3, #16]

    return (0);
}
   1bcc0:	4770      	bx	lr

0001bcc2 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   1bcc2:	b538      	push	{r3, r4, r5, lr}
   1bcc4:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1bcc6:	f000 fec7 	bl	1ca58 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   1bcca:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   1bccc:	b114      	cbz	r4, 1bcd4 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1bcce:	6863      	ldr	r3, [r4, #4]
   1bcd0:	602b      	str	r3, [r5, #0]
   1bcd2:	b12b      	cbz	r3, 1bce0 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   1bcd4:	f000 fec6 	bl	1ca64 <os_arch_restore_sr>

    if (mp) {
   1bcd8:	b124      	cbz	r4, 1bce4 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   1bcda:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   1bcde:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1bce0:	606d      	str	r5, [r5, #4]
   1bce2:	e7f7      	b.n	1bcd4 <os_mqueue_get+0x12>
        m = NULL;
   1bce4:	2000      	movs	r0, #0
    return (m);
   1bce6:	e7fa      	b.n	1bcde <os_mqueue_get+0x1c>

0001bce8 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   1bce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   1bcea:	7953      	ldrb	r3, [r2, #5]
   1bcec:	2b07      	cmp	r3, #7
   1bcee:	d916      	bls.n	1bd1e <os_mqueue_put+0x36>
   1bcf0:	4614      	mov	r4, r2
   1bcf2:	460e      	mov	r6, r1
   1bcf4:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   1bcf6:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1bcfa:	f000 fead 	bl	1ca58 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   1bcfe:	2300      	movs	r3, #0
   1bd00:	f844 3f14 	str.w	r3, [r4, #20]!
   1bd04:	686b      	ldr	r3, [r5, #4]
   1bd06:	601f      	str	r7, [r3, #0]
   1bd08:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1bd0a:	f000 feab 	bl	1ca64 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   1bd0e:	b146      	cbz	r6, 1bd22 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   1bd10:	f105 0108 	add.w	r1, r5, #8
   1bd14:	4630      	mov	r0, r6
   1bd16:	f7ff ff2a 	bl	1bb6e <os_eventq_put>
    }

    return (0);
   1bd1a:	2000      	movs	r0, #0
   1bd1c:	e000      	b.n	1bd20 <os_mqueue_put+0x38>
err:
    return (rc);
   1bd1e:	2002      	movs	r0, #2
}
   1bd20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   1bd22:	2000      	movs	r0, #0
   1bd24:	e7fc      	b.n	1bd20 <os_mqueue_put+0x38>

0001bd26 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   1bd26:	3a10      	subs	r2, #16
   1bd28:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1bd2a:	6041      	str	r1, [r0, #4]

    return (0);
}
   1bd2c:	2000      	movs	r0, #0
   1bd2e:	4770      	bx	lr

0001bd30 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   1bd30:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   1bd32:	8803      	ldrh	r3, [r0, #0]
   1bd34:	428b      	cmp	r3, r1
   1bd36:	d312      	bcc.n	1bd5e <os_mbuf_get+0x2e>
   1bd38:	460d      	mov	r5, r1
   1bd3a:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   1bd3c:	6840      	ldr	r0, [r0, #4]
   1bd3e:	f000 f947 	bl	1bfd0 <os_memblock_get>
    if (!om) {
   1bd42:	4603      	mov	r3, r0
   1bd44:	b148      	cbz	r0, 1bd5a <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   1bd46:	2200      	movs	r2, #0
   1bd48:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   1bd4a:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   1bd4c:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   1bd4e:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   1bd50:	f100 0110 	add.w	r1, r0, #16
   1bd54:	4429      	add	r1, r5
   1bd56:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   1bd58:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   1bd5a:	4618      	mov	r0, r3
   1bd5c:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1bd5e:	2300      	movs	r3, #0
    return om;
   1bd60:	e7fb      	b.n	1bd5a <os_mbuf_get+0x2a>

0001bd62 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   1bd62:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   1bd64:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   1bd68:	8803      	ldrh	r3, [r0, #0]
   1bd6a:	42ab      	cmp	r3, r5
   1bd6c:	d310      	bcc.n	1bd90 <os_mbuf_get_pkthdr+0x2e>
   1bd6e:	2dff      	cmp	r5, #255	; 0xff
   1bd70:	d810      	bhi.n	1bd94 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   1bd72:	2100      	movs	r1, #0
   1bd74:	f7ff ffdc 	bl	1bd30 <os_mbuf_get>
    if (om) {
   1bd78:	4603      	mov	r3, r0
   1bd7a:	b138      	cbz	r0, 1bd8c <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   1bd7c:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   1bd7e:	6802      	ldr	r2, [r0, #0]
   1bd80:	4415      	add	r5, r2
   1bd82:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   1bd84:	2200      	movs	r2, #0
   1bd86:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   1bd88:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   1bd8a:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   1bd8c:	4618      	mov	r0, r3
   1bd8e:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1bd90:	2300      	movs	r3, #0
   1bd92:	e7fb      	b.n	1bd8c <os_mbuf_get_pkthdr+0x2a>
   1bd94:	2300      	movs	r3, #0
    return om;
   1bd96:	e7f9      	b.n	1bd8c <os_mbuf_get_pkthdr+0x2a>

0001bd98 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   1bd98:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   1bd9a:	6883      	ldr	r3, [r0, #8]
   1bd9c:	b123      	cbz	r3, 1bda8 <os_mbuf_free+0x10>
   1bd9e:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   1bda0:	6858      	ldr	r0, [r3, #4]
   1bda2:	f000 f93d 	bl	1c020 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   1bda6:	bd08      	pop	{r3, pc}
    rc = 0;
   1bda8:	2000      	movs	r0, #0
    return (rc);
   1bdaa:	e7fc      	b.n	1bda6 <os_mbuf_free+0xe>

0001bdac <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   1bdac:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   1bdae:	b160      	cbz	r0, 1bdca <os_mbuf_free_chain+0x1e>
{
   1bdb0:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   1bdb2:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   1bdb4:	4618      	mov	r0, r3
   1bdb6:	f7ff ffef 	bl	1bd98 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   1bdba:	4623      	mov	r3, r4
        if (rc != 0) {
   1bdbc:	4602      	mov	r2, r0
   1bdbe:	b910      	cbnz	r0, 1bdc6 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   1bdc0:	2c00      	cmp	r4, #0
   1bdc2:	d1f6      	bne.n	1bdb2 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   1bdc4:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1bdc6:	4610      	mov	r0, r2
   1bdc8:	bd10      	pop	{r4, pc}
    rc = 0;
   1bdca:	2200      	movs	r2, #0
}
   1bdcc:	4610      	mov	r0, r2
   1bdce:	4770      	bx	lr

0001bdd0 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   1bdd0:	2300      	movs	r3, #0
    while (om != NULL) {
   1bdd2:	e003      	b.n	1bddc <os_mbuf_len+0xc>
        len += om->om_len;
   1bdd4:	88c2      	ldrh	r2, [r0, #6]
   1bdd6:	4413      	add	r3, r2
   1bdd8:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1bdda:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   1bddc:	2800      	cmp	r0, #0
   1bdde:	d1f9      	bne.n	1bdd4 <os_mbuf_len+0x4>
    }

    return len;
}
   1bde0:	4618      	mov	r0, r3
   1bde2:	4770      	bx	lr

0001bde4 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   1bde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1bde8:	2800      	cmp	r0, #0
   1bdea:	d04d      	beq.n	1be88 <os_mbuf_append+0xa4>
   1bdec:	460f      	mov	r7, r1
   1bdee:	4691      	mov	r9, r2
   1bdf0:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   1bdf2:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1bdf6:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1bdf8:	e000      	b.n	1bdfc <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1bdfa:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   1bdfc:	68eb      	ldr	r3, [r5, #12]
   1bdfe:	2b00      	cmp	r3, #0
   1be00:	d1fb      	bne.n	1bdfa <os_mbuf_append+0x16>
    }

    remainder = len;
   1be02:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   1be04:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1be06:	f105 0410 	add.w	r4, r5, #16
   1be0a:	881b      	ldrh	r3, [r3, #0]
   1be0c:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   1be0e:	6828      	ldr	r0, [r5, #0]
   1be10:	88eb      	ldrh	r3, [r5, #6]
   1be12:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1be14:	1a24      	subs	r4, r4, r0
   1be16:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   1be18:	b164      	cbz	r4, 1be34 <os_mbuf_append+0x50>
        if (space > remainder) {
   1be1a:	454c      	cmp	r4, r9
   1be1c:	dd00      	ble.n	1be20 <os_mbuf_append+0x3c>
            space = remainder;
   1be1e:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   1be20:	4622      	mov	r2, r4
   1be22:	4639      	mov	r1, r7
   1be24:	f000 ff78 	bl	1cd18 <memcpy>

        last->om_len += space;
   1be28:	88eb      	ldrh	r3, [r5, #6]
   1be2a:	4423      	add	r3, r4
   1be2c:	80eb      	strh	r3, [r5, #6]
        data += space;
   1be2e:	4427      	add	r7, r4
        remainder -= space;
   1be30:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   1be34:	2e00      	cmp	r6, #0
   1be36:	dd16      	ble.n	1be66 <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   1be38:	2100      	movs	r1, #0
   1be3a:	4640      	mov	r0, r8
   1be3c:	f7ff ff78 	bl	1bd30 <os_mbuf_get>
        if (!new) {
   1be40:	4604      	mov	r4, r0
   1be42:	b180      	cbz	r0, 1be66 <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   1be44:	f8b8 2000 	ldrh.w	r2, [r8]
   1be48:	42b2      	cmp	r2, r6
   1be4a:	bfa8      	it	ge
   1be4c:	4632      	movge	r2, r6
   1be4e:	b292      	uxth	r2, r2
   1be50:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   1be52:	4639      	mov	r1, r7
   1be54:	6800      	ldr	r0, [r0, #0]
   1be56:	f000 ff5f 	bl	1cd18 <memcpy>
        data += new->om_len;
   1be5a:	88e3      	ldrh	r3, [r4, #6]
   1be5c:	441f      	add	r7, r3
        remainder -= new->om_len;
   1be5e:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   1be60:	60ec      	str	r4, [r5, #12]
        last = new;
   1be62:	4625      	mov	r5, r4
   1be64:	e7e6      	b.n	1be34 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1be66:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1be6a:	2b07      	cmp	r3, #7
   1be6c:	d907      	bls.n	1be7e <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   1be6e:	eba9 0906 	sub.w	r9, r9, r6
   1be72:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1be76:	fa13 f989 	uxtah	r9, r3, r9
   1be7a:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   1be7e:	b106      	cbz	r6, 1be82 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   1be80:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   1be82:	4630      	mov	r0, r6
   1be84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1be88:	2602      	movs	r6, #2
   1be8a:	e7fa      	b.n	1be82 <os_mbuf_append+0x9e>

0001be8c <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   1be8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1be90:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   1be92:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   1be96:	2700      	movs	r7, #0
    head = NULL;
   1be98:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1be9a:	e017      	b.n	1becc <os_mbuf_dup+0x40>
    startoff = 0;
   1be9c:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1be9e:	4623      	mov	r3, r4
   1bea0:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1bea4:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1bea6:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   1bea8:	b299      	uxth	r1, r3
   1beaa:	4640      	mov	r0, r8
   1beac:	f7ff ff40 	bl	1bd30 <os_mbuf_get>
   1beb0:	4605      	mov	r5, r0
   1beb2:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   1beb4:	b188      	cbz	r0, 1beda <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   1beb6:	7923      	ldrb	r3, [r4, #4]
   1beb8:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   1beba:	88e3      	ldrh	r3, [r4, #6]
   1bebc:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   1bebe:	88e2      	ldrh	r2, [r4, #6]
   1bec0:	6821      	ldr	r1, [r4, #0]
   1bec2:	6828      	ldr	r0, [r5, #0]
   1bec4:	f000 ff28 	bl	1cd18 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1bec8:	68e4      	ldr	r4, [r4, #12]
   1beca:	462f      	mov	r7, r5
   1becc:	b14c      	cbz	r4, 1bee2 <os_mbuf_dup+0x56>
        if (head) {
   1bece:	b15e      	cbz	r6, 1bee8 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   1bed0:	7963      	ldrb	r3, [r4, #5]
   1bed2:	2b07      	cmp	r3, #7
   1bed4:	d9e2      	bls.n	1be9c <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   1bed6:	b299      	uxth	r1, r3
   1bed8:	e7e1      	b.n	1be9e <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1beda:	4630      	mov	r0, r6
   1bedc:	f7ff ff66 	bl	1bdac <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   1bee0:	462e      	mov	r6, r5
}
   1bee2:	4630      	mov	r0, r6
   1bee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1bee8:	7963      	ldrb	r3, [r4, #5]
   1beea:	2b07      	cmp	r3, #7
   1beec:	d911      	bls.n	1bf12 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   1beee:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1bef0:	4623      	mov	r3, r4
   1bef2:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1bef6:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1bef8:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1befa:	b299      	uxth	r1, r3
   1befc:	4640      	mov	r0, r8
   1befe:	f7ff ff17 	bl	1bd30 <os_mbuf_get>
            if (!head) {
   1bf02:	4606      	mov	r6, r0
   1bf04:	2800      	cmp	r0, #0
   1bf06:	d0ec      	beq.n	1bee2 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   1bf08:	7963      	ldrb	r3, [r4, #5]
   1bf0a:	2b07      	cmp	r3, #7
   1bf0c:	d803      	bhi.n	1bf16 <os_mbuf_dup+0x8a>
            copy = head;
   1bf0e:	4605      	mov	r5, r0
   1bf10:	e7d1      	b.n	1beb6 <os_mbuf_dup+0x2a>
    startoff = 0;
   1bf12:	2100      	movs	r1, #0
   1bf14:	e7ec      	b.n	1bef0 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   1bf16:	88c3      	ldrh	r3, [r0, #6]
   1bf18:	b973      	cbnz	r3, 1bf38 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1bf1a:	f100 0510 	add.w	r5, r0, #16
   1bf1e:	7962      	ldrb	r2, [r4, #5]
   1bf20:	f104 0110 	add.w	r1, r4, #16
   1bf24:	4628      	mov	r0, r5
   1bf26:	f000 fef7 	bl	1cd18 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1bf2a:	7963      	ldrb	r3, [r4, #5]
   1bf2c:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   1bf2e:	7963      	ldrb	r3, [r4, #5]
   1bf30:	441d      	add	r5, r3
   1bf32:	6035      	str	r5, [r6, #0]
            copy = head;
   1bf34:	4635      	mov	r5, r6
   1bf36:	e7be      	b.n	1beb6 <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   1bf38:	2300      	movs	r3, #0
   1bf3a:	461a      	mov	r2, r3
   1bf3c:	4619      	mov	r1, r3
   1bf3e:	4618      	mov	r0, r3
   1bf40:	f7ff faf4 	bl	1b52c <__assert_func>

0001bf44 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   1bf44:	2800      	cmp	r0, #0
   1bf46:	d031      	beq.n	1bfac <os_mempool_init_internal+0x68>
{
   1bf48:	b430      	push	{r4, r5}
   1bf4a:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   1bf4c:	2a00      	cmp	r2, #0
   1bf4e:	d02f      	beq.n	1bfb0 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   1bf50:	b1bb      	cbz	r3, 1bf82 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   1bf52:	b113      	cbz	r3, 1bf5a <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   1bf54:	f013 0f03 	tst.w	r3, #3
   1bf58:	d12c      	bne.n	1bfb4 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1bf5a:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   1bf5c:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   1bf5e:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   1bf60:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1bf64:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   1bf66:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   1bf68:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   1bf6a:	9802      	ldr	r0, [sp, #8]
   1bf6c:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   1bf6e:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   1bf70:	b199      	cbz	r1, 1bf9a <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   1bf72:	f012 0f03 	tst.w	r2, #3
   1bf76:	d002      	beq.n	1bf7e <os_mempool_init_internal+0x3a>
   1bf78:	f022 0203 	bic.w	r2, r2, #3
   1bf7c:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   1bf7e:	2001      	movs	r0, #1
   1bf80:	e007      	b.n	1bf92 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   1bf82:	2900      	cmp	r1, #0
   1bf84:	d0e5      	beq.n	1bf52 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   1bf86:	2003      	movs	r0, #3
   1bf88:	e00e      	b.n	1bfa8 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   1bf8a:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   1bf8c:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   1bf8e:	3001      	adds	r0, #1
            block_addr += true_block_size;
   1bf90:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   1bf92:	4281      	cmp	r1, r0
   1bf94:	dcf9      	bgt.n	1bf8a <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   1bf96:	2200      	movs	r2, #0
   1bf98:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   1bf9a:	2000      	movs	r0, #0
   1bf9c:	6120      	str	r0, [r4, #16]
   1bf9e:	4b06      	ldr	r3, [pc, #24]	; (1bfb8 <os_mempool_init_internal+0x74>)
   1bfa0:	685a      	ldr	r2, [r3, #4]
   1bfa2:	6014      	str	r4, [r2, #0]
   1bfa4:	3410      	adds	r4, #16
   1bfa6:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   1bfa8:	bc30      	pop	{r4, r5}
   1bfaa:	4770      	bx	lr
        return OS_INVALID_PARM;
   1bfac:	2003      	movs	r0, #3
}
   1bfae:	4770      	bx	lr
        return OS_INVALID_PARM;
   1bfb0:	2003      	movs	r0, #3
   1bfb2:	e7f9      	b.n	1bfa8 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   1bfb4:	2004      	movs	r0, #4
   1bfb6:	e7f7      	b.n	1bfa8 <os_mempool_init_internal+0x64>
   1bfb8:	2000de98 	.word	0x2000de98

0001bfbc <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   1bfbc:	b510      	push	{r4, lr}
   1bfbe:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   1bfc0:	2400      	movs	r4, #0
   1bfc2:	9401      	str	r4, [sp, #4]
   1bfc4:	9c04      	ldr	r4, [sp, #16]
   1bfc6:	9400      	str	r4, [sp, #0]
   1bfc8:	f7ff ffbc 	bl	1bf44 <os_mempool_init_internal>
}
   1bfcc:	b002      	add	sp, #8
   1bfce:	bd10      	pop	{r4, pc}

0001bfd0 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   1bfd0:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   1bfd2:	b1a0      	cbz	r0, 1bffe <os_memblock_get+0x2e>
   1bfd4:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1bfd6:	f000 fd3f 	bl	1ca58 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1bfda:	88e3      	ldrh	r3, [r4, #6]
   1bfdc:	b153      	cbz	r3, 1bff4 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   1bfde:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   1bfe0:	682a      	ldr	r2, [r5, #0]
   1bfe2:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   1bfe4:	3b01      	subs	r3, #1
   1bfe6:	b29b      	uxth	r3, r3
   1bfe8:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1bfea:	8922      	ldrh	r2, [r4, #8]
   1bfec:	4293      	cmp	r3, r2
   1bfee:	d202      	bcs.n	1bff6 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   1bff0:	8123      	strh	r3, [r4, #8]
   1bff2:	e000      	b.n	1bff6 <os_memblock_get+0x26>
    block = NULL;
   1bff4:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1bff6:	f000 fd35 	bl	1ca64 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1bffa:	4628      	mov	r0, r5
   1bffc:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   1bffe:	2500      	movs	r5, #0
    return (void *)block;
   1c000:	e7fb      	b.n	1bffa <os_memblock_get+0x2a>

0001c002 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   1c002:	b538      	push	{r3, r4, r5, lr}
   1c004:	4604      	mov	r4, r0
   1c006:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   1c008:	f000 fd26 	bl	1ca58 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   1c00c:	6963      	ldr	r3, [r4, #20]
   1c00e:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   1c010:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   1c012:	88e3      	ldrh	r3, [r4, #6]
   1c014:	3301      	adds	r3, #1
   1c016:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   1c018:	f000 fd24 	bl	1ca64 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   1c01c:	2000      	movs	r0, #0
   1c01e:	bd38      	pop	{r3, r4, r5, pc}

0001c020 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   1c020:	b168      	cbz	r0, 1c03e <os_memblock_put+0x1e>
{
   1c022:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   1c024:	b169      	cbz	r1, 1c042 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   1c026:	7a83      	ldrb	r3, [r0, #10]
   1c028:	f013 0f01 	tst.w	r3, #1
   1c02c:	d004      	beq.n	1c038 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   1c02e:	69c3      	ldr	r3, [r0, #28]
   1c030:	b113      	cbz	r3, 1c038 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   1c032:	6a02      	ldr	r2, [r0, #32]
   1c034:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   1c036:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   1c038:	f7ff ffe3 	bl	1c002 <os_memblock_put_from_cb>
   1c03c:	e7fb      	b.n	1c036 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   1c03e:	2003      	movs	r0, #3
}
   1c040:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1c042:	2003      	movs	r0, #3
   1c044:	e7f7      	b.n	1c036 <os_memblock_put+0x16>
	...

0001c048 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   1c048:	4b02      	ldr	r3, [pc, #8]	; (1c054 <os_mempool_module_init+0xc>)
   1c04a:	2200      	movs	r2, #0
   1c04c:	601a      	str	r2, [r3, #0]
   1c04e:	605b      	str	r3, [r3, #4]
}
   1c050:	4770      	bx	lr
   1c052:	bf00      	nop
   1c054:	2000de98 	.word	0x2000de98

0001c058 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1c058:	4b02      	ldr	r3, [pc, #8]	; (1c064 <os_msys_find_biggest_pool+0xc>)
   1c05a:	6818      	ldr	r0, [r3, #0]
   1c05c:	b108      	cbz	r0, 1c062 <os_msys_find_biggest_pool+0xa>
   1c05e:	6858      	ldr	r0, [r3, #4]
   1c060:	3808      	subs	r0, #8
}
   1c062:	4770      	bx	lr
   1c064:	2000010c 	.word	0x2000010c

0001c068 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1c068:	4b09      	ldr	r3, [pc, #36]	; (1c090 <os_msys_find_pool+0x28>)
   1c06a:	6819      	ldr	r1, [r3, #0]
   1c06c:	460b      	mov	r3, r1
   1c06e:	b123      	cbz	r3, 1c07a <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   1c070:	881a      	ldrh	r2, [r3, #0]
   1c072:	4282      	cmp	r2, r0
   1c074:	d201      	bcs.n	1c07a <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1c076:	689b      	ldr	r3, [r3, #8]
   1c078:	e7f9      	b.n	1c06e <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   1c07a:	b10b      	cbz	r3, 1c080 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   1c07c:	4618      	mov	r0, r3
   1c07e:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1c080:	b119      	cbz	r1, 1c08a <os_msys_find_pool+0x22>
   1c082:	4b03      	ldr	r3, [pc, #12]	; (1c090 <os_msys_find_pool+0x28>)
   1c084:	685b      	ldr	r3, [r3, #4]
   1c086:	3b08      	subs	r3, #8
   1c088:	e7f8      	b.n	1c07c <os_msys_find_pool+0x14>
   1c08a:	460b      	mov	r3, r1
    return (pool);
   1c08c:	e7f6      	b.n	1c07c <os_msys_find_pool+0x14>
   1c08e:	bf00      	nop
   1c090:	2000010c 	.word	0x2000010c

0001c094 <os_msys_register>:
{
   1c094:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1c096:	4b11      	ldr	r3, [pc, #68]	; (1c0dc <os_msys_register+0x48>)
   1c098:	681d      	ldr	r5, [r3, #0]
   1c09a:	462b      	mov	r3, r5
    prev = NULL;
   1c09c:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1c09e:	b133      	cbz	r3, 1c0ae <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   1c0a0:	8801      	ldrh	r1, [r0, #0]
   1c0a2:	881a      	ldrh	r2, [r3, #0]
   1c0a4:	4291      	cmp	r1, r2
   1c0a6:	d302      	bcc.n	1c0ae <os_msys_register+0x1a>
        prev = pool;
   1c0a8:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1c0aa:	689b      	ldr	r3, [r3, #8]
   1c0ac:	e7f7      	b.n	1c09e <os_msys_register+0xa>
    if (prev) {
   1c0ae:	b15c      	cbz	r4, 1c0c8 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1c0b0:	68a3      	ldr	r3, [r4, #8]
   1c0b2:	6083      	str	r3, [r0, #8]
   1c0b4:	b11b      	cbz	r3, 1c0be <os_msys_register+0x2a>
   1c0b6:	60a0      	str	r0, [r4, #8]
}
   1c0b8:	2000      	movs	r0, #0
   1c0ba:	bc30      	pop	{r4, r5}
   1c0bc:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1c0be:	f100 0308 	add.w	r3, r0, #8
   1c0c2:	4a06      	ldr	r2, [pc, #24]	; (1c0dc <os_msys_register+0x48>)
   1c0c4:	6053      	str	r3, [r2, #4]
   1c0c6:	e7f6      	b.n	1c0b6 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1c0c8:	6085      	str	r5, [r0, #8]
   1c0ca:	b115      	cbz	r5, 1c0d2 <os_msys_register+0x3e>
   1c0cc:	4b03      	ldr	r3, [pc, #12]	; (1c0dc <os_msys_register+0x48>)
   1c0ce:	6018      	str	r0, [r3, #0]
   1c0d0:	e7f2      	b.n	1c0b8 <os_msys_register+0x24>
   1c0d2:	f100 0308 	add.w	r3, r0, #8
   1c0d6:	4a01      	ldr	r2, [pc, #4]	; (1c0dc <os_msys_register+0x48>)
   1c0d8:	6053      	str	r3, [r2, #4]
   1c0da:	e7f7      	b.n	1c0cc <os_msys_register+0x38>
   1c0dc:	2000010c 	.word	0x2000010c

0001c0e0 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   1c0e0:	b530      	push	{r4, r5, lr}
   1c0e2:	b083      	sub	sp, #12
   1c0e4:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1c0e6:	9d07      	ldr	r5, [sp, #28]
   1c0e8:	9501      	str	r5, [sp, #4]
   1c0ea:	9d06      	ldr	r5, [sp, #24]
   1c0ec:	9500      	str	r5, [sp, #0]
   1c0ee:	f001 f96d 	bl	1d3cc <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c0f2:	b138      	cbz	r0, 1c104 <os_msys_init_once+0x24>
   1c0f4:	2000      	movs	r0, #0
   1c0f6:	9000      	str	r0, [sp, #0]
   1c0f8:	4b09      	ldr	r3, [pc, #36]	; (1c120 <os_msys_init_once+0x40>)
   1c0fa:	681d      	ldr	r5, [r3, #0]
   1c0fc:	4603      	mov	r3, r0
   1c0fe:	4602      	mov	r2, r0
   1c100:	4601      	mov	r1, r0
   1c102:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   1c104:	4620      	mov	r0, r4
   1c106:	f7ff ffc5 	bl	1c094 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1c10a:	b138      	cbz	r0, 1c11c <os_msys_init_once+0x3c>
   1c10c:	2000      	movs	r0, #0
   1c10e:	9000      	str	r0, [sp, #0]
   1c110:	4b03      	ldr	r3, [pc, #12]	; (1c120 <os_msys_init_once+0x40>)
   1c112:	681c      	ldr	r4, [r3, #0]
   1c114:	4603      	mov	r3, r0
   1c116:	4602      	mov	r2, r0
   1c118:	4601      	mov	r1, r0
   1c11a:	47a0      	blx	r4
}
   1c11c:	b003      	add	sp, #12
   1c11e:	bd30      	pop	{r4, r5, pc}
   1c120:	20000104 	.word	0x20000104

0001c124 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   1c124:	4b02      	ldr	r3, [pc, #8]	; (1c130 <os_msys_reset+0xc>)
   1c126:	2200      	movs	r2, #0
   1c128:	601a      	str	r2, [r3, #0]
   1c12a:	605b      	str	r3, [r3, #4]
}
   1c12c:	4770      	bx	lr
   1c12e:	bf00      	nop
   1c130:	2000010c 	.word	0x2000010c

0001c134 <os_msys_get_pkthdr>:
{
   1c134:	b510      	push	{r4, lr}
   1c136:	460c      	mov	r4, r1
    if (dsize == 0) {
   1c138:	b930      	cbnz	r0, 1c148 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1c13a:	f7ff ff8d 	bl	1c058 <os_msys_find_biggest_pool>
    if (!pool) {
   1c13e:	b158      	cbz	r0, 1c158 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   1c140:	b2e1      	uxtb	r1, r4
   1c142:	f7ff fe0e 	bl	1bd62 <os_mbuf_get_pkthdr>
}
   1c146:	bd10      	pop	{r4, pc}
   1c148:	f101 0308 	add.w	r3, r1, #8
   1c14c:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   1c14e:	4403      	add	r3, r0
   1c150:	b298      	uxth	r0, r3
   1c152:	f7ff ff89 	bl	1c068 <os_msys_find_pool>
   1c156:	e7f2      	b.n	1c13e <os_msys_get_pkthdr+0xa>
    return (NULL);
   1c158:	2000      	movs	r0, #0
   1c15a:	e7f4      	b.n	1c146 <os_msys_get_pkthdr+0x12>

0001c15c <os_msys_init>:

void
os_msys_init(void)
{
   1c15c:	b500      	push	{lr}
   1c15e:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   1c160:	f7ff ffe0 	bl	1c124 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   1c164:	4b06      	ldr	r3, [pc, #24]	; (1c180 <os_msys_init+0x24>)
   1c166:	9301      	str	r3, [sp, #4]
   1c168:	f44f 7392 	mov.w	r3, #292	; 0x124
   1c16c:	9300      	str	r3, [sp, #0]
   1c16e:	2340      	movs	r3, #64	; 0x40
   1c170:	4a04      	ldr	r2, [pc, #16]	; (1c184 <os_msys_init+0x28>)
   1c172:	4905      	ldr	r1, [pc, #20]	; (1c188 <os_msys_init+0x2c>)
   1c174:	4805      	ldr	r0, [pc, #20]	; (1c18c <os_msys_init+0x30>)
   1c176:	f7ff ffb3 	bl	1c0e0 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1c17a:	b003      	add	sp, #12
   1c17c:	f85d fb04 	ldr.w	pc, [sp], #4
   1c180:	00029764 	.word	0x00029764
   1c184:	2000d988 	.word	0x2000d988
   1c188:	2000d994 	.word	0x2000d994
   1c18c:	20009088 	.word	0x20009088

0001c190 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   1c190:	4603      	mov	r3, r0
   1c192:	b128      	cbz	r0, 1c1a0 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1c194:	2000      	movs	r0, #0
   1c196:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1c198:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1c19a:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   1c19c:	6018      	str	r0, [r3, #0]
   1c19e:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1c1a0:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1c1a2:	4770      	bx	lr

0001c1a4 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1c1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1c1a6:	4b2c      	ldr	r3, [pc, #176]	; (1c258 <os_mutex_release+0xb4>)
   1c1a8:	681b      	ldr	r3, [r3, #0]
   1c1aa:	2b00      	cmp	r3, #0
   1c1ac:	d04d      	beq.n	1c24a <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1c1ae:	2800      	cmp	r0, #0
   1c1b0:	d04d      	beq.n	1c24e <os_mutex_release+0xaa>
   1c1b2:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1c1b4:	f000 f97a 	bl	1c4ac <os_sched_get_current_task>
   1c1b8:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1c1ba:	88e3      	ldrh	r3, [r4, #6]
   1c1bc:	2b00      	cmp	r3, #0
   1c1be:	d048      	beq.n	1c252 <os_mutex_release+0xae>
   1c1c0:	68a2      	ldr	r2, [r4, #8]
   1c1c2:	4282      	cmp	r2, r0
   1c1c4:	d001      	beq.n	1c1ca <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1c1c6:	2005      	movs	r0, #5
   1c1c8:	e040      	b.n	1c24c <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1c1ca:	2b01      	cmp	r3, #1
   1c1cc:	d003      	beq.n	1c1d6 <os_mutex_release+0x32>
        --mu->mu_level;
   1c1ce:	3b01      	subs	r3, #1
   1c1d0:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1c1d2:	2000      	movs	r0, #0
        goto done;
   1c1d4:	e03a      	b.n	1c24c <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   1c1d6:	f000 fc3f 	bl	1ca58 <os_arch_save_sr>
   1c1da:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   1c1dc:	88e3      	ldrh	r3, [r4, #6]
   1c1de:	3b01      	subs	r3, #1
   1c1e0:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   1c1e2:	7aea      	ldrb	r2, [r5, #11]
   1c1e4:	7963      	ldrb	r3, [r4, #5]
   1c1e6:	429a      	cmp	r2, r3
   1c1e8:	d11e      	bne.n	1c228 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1c1ea:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   1c1ec:	b146      	cbz	r6, 1c200 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   1c1ee:	69f3      	ldr	r3, [r6, #28]
   1c1f0:	b1fb      	cbz	r3, 1c232 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   1c1f2:	4630      	mov	r0, r6
   1c1f4:	f000 f9ae 	bl	1c554 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1c1f8:	2301      	movs	r3, #1
   1c1fa:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1c1fc:	7af3      	ldrb	r3, [r6, #11]
   1c1fe:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   1c200:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1c202:	b116      	cbz	r6, 1c20a <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   1c204:	7bb3      	ldrb	r3, [r6, #14]
   1c206:	3301      	adds	r3, #1
   1c208:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1c20a:	7bab      	ldrb	r3, [r5, #14]
   1c20c:	3b01      	subs	r3, #1
   1c20e:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   1c210:	f000 fa1a 	bl	1c648 <os_sched_next_task>
   1c214:	4604      	mov	r4, r0
    if (rdy != current) {
   1c216:	4285      	cmp	r5, r0
   1c218:	d010      	beq.n	1c23c <os_mutex_release+0x98>
        resched = 1;
   1c21a:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   1c21c:	4638      	mov	r0, r7
   1c21e:	f000 fc21 	bl	1ca64 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1c222:	b96d      	cbnz	r5, 1c240 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   1c224:	2000      	movs	r0, #0
   1c226:	e011      	b.n	1c24c <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   1c228:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1c22a:	4628      	mov	r0, r5
   1c22c:	f000 fa24 	bl	1c678 <os_sched_resort>
   1c230:	e7db      	b.n	1c1ea <os_mutex_release+0x46>
        assert(rdy->t_obj);
   1c232:	461a      	mov	r2, r3
   1c234:	4619      	mov	r1, r3
   1c236:	4618      	mov	r0, r3
   1c238:	f7ff f978 	bl	1b52c <__assert_func>
    resched = 0;
   1c23c:	2500      	movs	r5, #0
   1c23e:	e7ed      	b.n	1c21c <os_mutex_release+0x78>
        os_sched(rdy);
   1c240:	4620      	mov	r0, r4
   1c242:	f000 fa07 	bl	1c654 <os_sched>
    ret = OS_OK;
   1c246:	2000      	movs	r0, #0
   1c248:	e000      	b.n	1c24c <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   1c24a:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1c24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1c24e:	2003      	movs	r0, #3
   1c250:	e7fc      	b.n	1c24c <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   1c252:	2005      	movs	r0, #5
   1c254:	e7fa      	b.n	1c24c <os_mutex_release+0xa8>
   1c256:	bf00      	nop
   1c258:	2000de88 	.word	0x2000de88

0001c25c <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1c25c:	4b36      	ldr	r3, [pc, #216]	; (1c338 <os_mutex_pend+0xdc>)
   1c25e:	681b      	ldr	r3, [r3, #0]
   1c260:	2b00      	cmp	r3, #0
   1c262:	d065      	beq.n	1c330 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1c264:	2800      	cmp	r0, #0
   1c266:	d065      	beq.n	1c334 <os_mutex_pend+0xd8>
{
   1c268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c26c:	460f      	mov	r7, r1
   1c26e:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1c270:	f000 fbf2 	bl	1ca58 <os_arch_save_sr>
   1c274:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1c276:	f000 f919 	bl	1c4ac <os_sched_get_current_task>
   1c27a:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   1c27c:	88e3      	ldrh	r3, [r4, #6]
   1c27e:	b19b      	cbz	r3, 1c2a8 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1c280:	68a2      	ldr	r2, [r4, #8]
   1c282:	4282      	cmp	r2, r0
   1c284:	d01e      	beq.n	1c2c4 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1c286:	b327      	cbz	r7, 1c2d2 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1c288:	7ad1      	ldrb	r1, [r2, #11]
   1c28a:	7ac3      	ldrb	r3, [r0, #11]
   1c28c:	4299      	cmp	r1, r3
   1c28e:	d825      	bhi.n	1c2dc <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   1c290:	6821      	ldr	r1, [r4, #0]
   1c292:	b369      	cbz	r1, 1c2f0 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1c294:	460b      	mov	r3, r1
    last = NULL;
   1c296:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1c298:	b32b      	cbz	r3, 1c2e6 <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   1c29a:	7ae8      	ldrb	r0, [r5, #11]
   1c29c:	7ada      	ldrb	r2, [r3, #11]
   1c29e:	4290      	cmp	r0, r2
   1c2a0:	d321      	bcc.n	1c2e6 <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   1c2a2:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1c2a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c2a6:	e7f7      	b.n	1c298 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1c2a8:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   1c2aa:	7ac3      	ldrb	r3, [r0, #11]
   1c2ac:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   1c2ae:	7b83      	ldrb	r3, [r0, #14]
   1c2b0:	3301      	adds	r3, #1
   1c2b2:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   1c2b4:	2301      	movs	r3, #1
   1c2b6:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1c2b8:	4640      	mov	r0, r8
   1c2ba:	f000 fbd3 	bl	1ca64 <os_arch_restore_sr>
        ret = OS_OK;
   1c2be:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1c2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   1c2c4:	3301      	adds	r3, #1
   1c2c6:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1c2c8:	4640      	mov	r0, r8
   1c2ca:	f000 fbcb 	bl	1ca64 <os_arch_restore_sr>
        ret = OS_OK;
   1c2ce:	2000      	movs	r0, #0
        goto done;
   1c2d0:	e7f6      	b.n	1c2c0 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   1c2d2:	4640      	mov	r0, r8
   1c2d4:	f000 fbc6 	bl	1ca64 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1c2d8:	2006      	movs	r0, #6
        goto done;
   1c2da:	e7f1      	b.n	1c2c0 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   1c2dc:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   1c2de:	68a0      	ldr	r0, [r4, #8]
   1c2e0:	f000 f9ca 	bl	1c678 <os_sched_resort>
   1c2e4:	e7d4      	b.n	1c290 <os_mutex_pend+0x34>
    if (last) {
   1c2e6:	b11e      	cbz	r6, 1c2f0 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1c2e8:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   1c2ea:	64eb      	str	r3, [r5, #76]	; 0x4c
   1c2ec:	64f5      	str	r5, [r6, #76]	; 0x4c
   1c2ee:	e001      	b.n	1c2f4 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1c2f0:	64e9      	str	r1, [r5, #76]	; 0x4c
   1c2f2:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   1c2f4:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1c2f6:	7b6b      	ldrb	r3, [r5, #13]
   1c2f8:	f043 0304 	orr.w	r3, r3, #4
   1c2fc:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   1c2fe:	4639      	mov	r1, r7
   1c300:	4628      	mov	r0, r5
   1c302:	f000 f8df 	bl	1c4c4 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1c306:	4640      	mov	r0, r8
   1c308:	f000 fbac 	bl	1ca64 <os_arch_restore_sr>
    os_sched(NULL);
   1c30c:	2000      	movs	r0, #0
   1c30e:	f000 f9a1 	bl	1c654 <os_sched>
    OS_ENTER_CRITICAL(sr);
   1c312:	f000 fba1 	bl	1ca58 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1c316:	7b6b      	ldrb	r3, [r5, #13]
   1c318:	f023 0304 	bic.w	r3, r3, #4
   1c31c:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   1c31e:	f000 fba1 	bl	1ca64 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   1c322:	68a3      	ldr	r3, [r4, #8]
   1c324:	42ab      	cmp	r3, r5
   1c326:	d001      	beq.n	1c32c <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   1c328:	2006      	movs	r0, #6
   1c32a:	e7c9      	b.n	1c2c0 <os_mutex_pend+0x64>
        ret = OS_OK;
   1c32c:	2000      	movs	r0, #0
   1c32e:	e7c7      	b.n	1c2c0 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   1c330:	2009      	movs	r0, #9
   1c332:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1c334:	2003      	movs	r0, #3
}
   1c336:	4770      	bx	lr
   1c338:	2000de88 	.word	0x2000de88

0001c33c <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   1c33c:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1c33e:	4b05      	ldr	r3, [pc, #20]	; (1c354 <os_sanity_check_list_lock+0x18>)
   1c340:	6818      	ldr	r0, [r3, #0]
   1c342:	b900      	cbnz	r0, 1c346 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1c344:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1c346:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c34a:	4803      	ldr	r0, [pc, #12]	; (1c358 <os_sanity_check_list_lock+0x1c>)
   1c34c:	f7ff ff86 	bl	1c25c <os_mutex_pend>
err:
   1c350:	e7f8      	b.n	1c344 <os_sanity_check_list_lock+0x8>
   1c352:	bf00      	nop
   1c354:	2000de88 	.word	0x2000de88
   1c358:	2000dea0 	.word	0x2000dea0

0001c35c <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   1c35c:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1c35e:	4b04      	ldr	r3, [pc, #16]	; (1c370 <os_sanity_check_list_unlock+0x14>)
   1c360:	6818      	ldr	r0, [r3, #0]
   1c362:	b900      	cbnz	r0, 1c366 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1c364:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1c366:	4803      	ldr	r0, [pc, #12]	; (1c374 <os_sanity_check_list_unlock+0x18>)
   1c368:	f7ff ff1c 	bl	1c1a4 <os_mutex_release>
err:
   1c36c:	e7fa      	b.n	1c364 <os_sanity_check_list_unlock+0x8>
   1c36e:	bf00      	nop
   1c370:	2000de88 	.word	0x2000de88
   1c374:	2000dea0 	.word	0x2000dea0

0001c378 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   1c378:	2300      	movs	r3, #0
   1c37a:	6003      	str	r3, [r0, #0]
   1c37c:	6043      	str	r3, [r0, #4]
   1c37e:	6083      	str	r3, [r0, #8]
   1c380:	60c3      	str	r3, [r0, #12]
   1c382:	6103      	str	r3, [r0, #16]
}
   1c384:	4618      	mov	r0, r3
   1c386:	4770      	bx	lr

0001c388 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   1c388:	b510      	push	{r4, lr}
   1c38a:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1c38c:	f7ff ffd6 	bl	1c33c <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1c390:	4603      	mov	r3, r0
   1c392:	b108      	cbz	r0, 1c398 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   1c394:	4618      	mov	r0, r3
   1c396:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   1c398:	4b03      	ldr	r3, [pc, #12]	; (1c3a8 <os_sanity_check_register+0x20>)
   1c39a:	681a      	ldr	r2, [r3, #0]
   1c39c:	6122      	str	r2, [r4, #16]
   1c39e:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1c3a0:	f7ff ffdc 	bl	1c35c <os_sanity_check_list_unlock>
   1c3a4:	4603      	mov	r3, r0
err:
   1c3a6:	e7f5      	b.n	1c394 <os_sanity_check_register+0xc>
   1c3a8:	2000d9b0 	.word	0x2000d9b0

0001c3ac <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1c3ac:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1c3ae:	f7ff ffc5 	bl	1c33c <os_sanity_check_list_lock>
    if (rc != 0) {
   1c3b2:	b910      	cbnz	r0, 1c3ba <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1c3b4:	4b17      	ldr	r3, [pc, #92]	; (1c414 <os_sanity_run+0x68>)
   1c3b6:	681c      	ldr	r4, [r3, #0]
   1c3b8:	e00e      	b.n	1c3d8 <os_sanity_run+0x2c>
        assert(0);
   1c3ba:	2300      	movs	r3, #0
   1c3bc:	461a      	mov	r2, r3
   1c3be:	4619      	mov	r1, r3
   1c3c0:	4618      	mov	r0, r3
   1c3c2:	f7ff f8b3 	bl	1b52c <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1c3c6:	f000 facf 	bl	1c968 <os_time_get>
   1c3ca:	6823      	ldr	r3, [r4, #0]
   1c3cc:	6862      	ldr	r2, [r4, #4]
   1c3ce:	4413      	add	r3, r2
   1c3d0:	1ac3      	subs	r3, r0, r3
   1c3d2:	2b00      	cmp	r3, #0
   1c3d4:	dc0d      	bgt.n	1c3f2 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1c3d6:	6924      	ldr	r4, [r4, #16]
   1c3d8:	b18c      	cbz	r4, 1c3fe <os_sanity_run+0x52>
        if (sc->sc_func) {
   1c3da:	68a3      	ldr	r3, [r4, #8]
   1c3dc:	2b00      	cmp	r3, #0
   1c3de:	d0f2      	beq.n	1c3c6 <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   1c3e0:	68e1      	ldr	r1, [r4, #12]
   1c3e2:	4620      	mov	r0, r4
   1c3e4:	4798      	blx	r3
            if (rc == OS_OK) {
   1c3e6:	2800      	cmp	r0, #0
   1c3e8:	d1ed      	bne.n	1c3c6 <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   1c3ea:	f000 fabd 	bl	1c968 <os_time_get>
   1c3ee:	6020      	str	r0, [r4, #0]
                continue;
   1c3f0:	e7f1      	b.n	1c3d6 <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1c3f2:	2300      	movs	r3, #0
   1c3f4:	461a      	mov	r2, r3
   1c3f6:	4619      	mov	r1, r3
   1c3f8:	4618      	mov	r0, r3
   1c3fa:	f7ff f897 	bl	1b52c <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1c3fe:	f7ff ffad 	bl	1c35c <os_sanity_check_list_unlock>
    if (rc != 0) {
   1c402:	b900      	cbnz	r0, 1c406 <os_sanity_run+0x5a>
        assert(0);
    }
}
   1c404:	bd10      	pop	{r4, pc}
        assert(0);
   1c406:	2300      	movs	r3, #0
   1c408:	461a      	mov	r2, r3
   1c40a:	4619      	mov	r1, r3
   1c40c:	4618      	mov	r0, r3
   1c40e:	f7ff f88d 	bl	1b52c <__assert_func>
   1c412:	bf00      	nop
   1c414:	2000d9b0 	.word	0x2000d9b0

0001c418 <os_sanity_init>:

int
os_sanity_init(void)
{
   1c418:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1c41a:	4802      	ldr	r0, [pc, #8]	; (1c424 <os_sanity_init+0xc>)
   1c41c:	f7ff feb8 	bl	1c190 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   1c420:	bd08      	pop	{r3, pc}
   1c422:	bf00      	nop
   1c424:	2000dea0 	.word	0x2000dea0

0001c428 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   1c428:	7b03      	ldrb	r3, [r0, #12]
   1c42a:	2b01      	cmp	r3, #1
   1c42c:	d001      	beq.n	1c432 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1c42e:	2002      	movs	r0, #2
}
   1c430:	4770      	bx	lr
{
   1c432:	b510      	push	{r4, lr}
   1c434:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1c436:	f000 fb0f 	bl	1ca58 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1c43a:	4b0f      	ldr	r3, [pc, #60]	; (1c478 <os_sched_insert+0x50>)
   1c43c:	681b      	ldr	r3, [r3, #0]
   1c43e:	b12b      	cbz	r3, 1c44c <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   1c440:	7ae1      	ldrb	r1, [r4, #11]
   1c442:	7ada      	ldrb	r2, [r3, #11]
   1c444:	4291      	cmp	r1, r2
   1c446:	d301      	bcc.n	1c44c <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1c448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c44a:	e7f8      	b.n	1c43e <os_sched_insert+0x16>
    if (entry) {
   1c44c:	b153      	cbz	r3, 1c464 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1c44e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c450:	64a2      	str	r2, [r4, #72]	; 0x48
   1c452:	6463      	str	r3, [r4, #68]	; 0x44
   1c454:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c456:	6014      	str	r4, [r2, #0]
   1c458:	3444      	adds	r4, #68	; 0x44
   1c45a:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1c45c:	f000 fb02 	bl	1ca64 <os_arch_restore_sr>
    return (0);
   1c460:	2000      	movs	r0, #0
}
   1c462:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1c464:	2300      	movs	r3, #0
   1c466:	6463      	str	r3, [r4, #68]	; 0x44
   1c468:	4b03      	ldr	r3, [pc, #12]	; (1c478 <os_sched_insert+0x50>)
   1c46a:	685a      	ldr	r2, [r3, #4]
   1c46c:	64a2      	str	r2, [r4, #72]	; 0x48
   1c46e:	6014      	str	r4, [r2, #0]
   1c470:	3444      	adds	r4, #68	; 0x44
   1c472:	605c      	str	r4, [r3, #4]
   1c474:	e7f2      	b.n	1c45c <os_sched_insert+0x34>
   1c476:	bf00      	nop
   1c478:	20000114 	.word	0x20000114

0001c47c <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1c47c:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1c47e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1c480:	3301      	adds	r3, #1
   1c482:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   1c484:	4b06      	ldr	r3, [pc, #24]	; (1c4a0 <os_sched_ctx_sw_hook+0x24>)
   1c486:	681c      	ldr	r4, [r3, #0]
   1c488:	4b06      	ldr	r3, [pc, #24]	; (1c4a4 <os_sched_ctx_sw_hook+0x28>)
   1c48a:	6818      	ldr	r0, [r3, #0]
   1c48c:	4906      	ldr	r1, [pc, #24]	; (1c4a8 <os_sched_ctx_sw_hook+0x2c>)
   1c48e:	680b      	ldr	r3, [r1, #0]
   1c490:	1ac2      	subs	r2, r0, r3
   1c492:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c494:	4413      	add	r3, r2
   1c496:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   1c498:	6008      	str	r0, [r1, #0]
}
   1c49a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c49e:	4770      	bx	lr
   1c4a0:	2000deb0 	.word	0x2000deb0
   1c4a4:	2000dec0 	.word	0x2000dec0
   1c4a8:	2000deac 	.word	0x2000deac

0001c4ac <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1c4ac:	4b01      	ldr	r3, [pc, #4]	; (1c4b4 <os_sched_get_current_task+0x8>)
   1c4ae:	6818      	ldr	r0, [r3, #0]
   1c4b0:	4770      	bx	lr
   1c4b2:	bf00      	nop
   1c4b4:	2000deb0 	.word	0x2000deb0

0001c4b8 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1c4b8:	4b01      	ldr	r3, [pc, #4]	; (1c4c0 <os_sched_set_current_task+0x8>)
   1c4ba:	6018      	str	r0, [r3, #0]
}
   1c4bc:	4770      	bx	lr
   1c4be:	bf00      	nop
   1c4c0:	2000deb0 	.word	0x2000deb0

0001c4c4 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1c4c4:	b538      	push	{r3, r4, r5, lr}
   1c4c6:	4604      	mov	r4, r0
   1c4c8:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1c4ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1c4cc:	b1d3      	cbz	r3, 1c504 <os_sched_sleep+0x40>
   1c4ce:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1c4d0:	649a      	str	r2, [r3, #72]	; 0x48
   1c4d2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1c4d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1c4d6:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1c4d8:	2302      	movs	r3, #2
   1c4da:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1c4dc:	f000 fa44 	bl	1c968 <os_time_get>
   1c4e0:	4428      	add	r0, r5
   1c4e2:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1c4e4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1c4e8:	d010      	beq.n	1c50c <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1c4ea:	4b18      	ldr	r3, [pc, #96]	; (1c54c <os_sched_sleep+0x88>)
   1c4ec:	681b      	ldr	r3, [r3, #0]
   1c4ee:	b1d3      	cbz	r3, 1c526 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1c4f0:	7b5a      	ldrb	r2, [r3, #13]
   1c4f2:	f012 0f01 	tst.w	r2, #1
   1c4f6:	d116      	bne.n	1c526 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1c4f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1c4fa:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1c4fc:	2a00      	cmp	r2, #0
   1c4fe:	dc12      	bgt.n	1c526 <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1c500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1c502:	e7f4      	b.n	1c4ee <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1c504:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1c506:	4b12      	ldr	r3, [pc, #72]	; (1c550 <os_sched_sleep+0x8c>)
   1c508:	605a      	str	r2, [r3, #4]
   1c50a:	e7e2      	b.n	1c4d2 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1c50c:	7b63      	ldrb	r3, [r4, #13]
   1c50e:	f043 0301 	orr.w	r3, r3, #1
   1c512:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1c514:	2300      	movs	r3, #0
   1c516:	6463      	str	r3, [r4, #68]	; 0x44
   1c518:	4b0c      	ldr	r3, [pc, #48]	; (1c54c <os_sched_sleep+0x88>)
   1c51a:	685a      	ldr	r2, [r3, #4]
   1c51c:	64a2      	str	r2, [r4, #72]	; 0x48
   1c51e:	6014      	str	r4, [r2, #0]
   1c520:	3444      	adds	r4, #68	; 0x44
   1c522:	605c      	str	r4, [r3, #4]
   1c524:	e007      	b.n	1c536 <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   1c526:	b143      	cbz	r3, 1c53a <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   1c528:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c52a:	64a2      	str	r2, [r4, #72]	; 0x48
   1c52c:	6463      	str	r3, [r4, #68]	; 0x44
   1c52e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1c530:	6014      	str	r4, [r2, #0]
   1c532:	3444      	adds	r4, #68	; 0x44
   1c534:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   1c536:	2000      	movs	r0, #0
   1c538:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1c53a:	2300      	movs	r3, #0
   1c53c:	6463      	str	r3, [r4, #68]	; 0x44
   1c53e:	4b03      	ldr	r3, [pc, #12]	; (1c54c <os_sched_sleep+0x88>)
   1c540:	685a      	ldr	r2, [r3, #4]
   1c542:	64a2      	str	r2, [r4, #72]	; 0x48
   1c544:	6014      	str	r4, [r2, #0]
   1c546:	3444      	adds	r4, #68	; 0x44
   1c548:	605c      	str	r4, [r3, #4]
   1c54a:	e7f4      	b.n	1c536 <os_sched_sleep+0x72>
   1c54c:	2000011c 	.word	0x2000011c
   1c550:	20000114 	.word	0x20000114

0001c554 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   1c554:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1c556:	7b03      	ldrb	r3, [r0, #12]
   1c558:	2b02      	cmp	r3, #2
   1c55a:	d108      	bne.n	1c56e <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1c55c:	69c3      	ldr	r3, [r0, #28]
   1c55e:	b1db      	cbz	r3, 1c598 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1c560:	681a      	ldr	r2, [r3, #0]
   1c562:	b152      	cbz	r2, 1c57a <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1c564:	4282      	cmp	r2, r0
   1c566:	d10f      	bne.n	1c588 <os_sched_wakeup+0x34>
   1c568:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1c56a:	601a      	str	r2, [r3, #0]
   1c56c:	e011      	b.n	1c592 <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   1c56e:	2300      	movs	r3, #0
   1c570:	461a      	mov	r2, r3
   1c572:	4619      	mov	r1, r3
   1c574:	4618      	mov	r0, r3
   1c576:	f7fe ffd9 	bl	1b52c <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1c57a:	2300      	movs	r3, #0
   1c57c:	461a      	mov	r2, r3
   1c57e:	4619      	mov	r1, r3
   1c580:	4618      	mov	r0, r3
   1c582:	f7fe ffd3 	bl	1b52c <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1c586:	461a      	mov	r2, r3
   1c588:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1c58a:	4283      	cmp	r3, r0
   1c58c:	d1fb      	bne.n	1c586 <os_sched_wakeup+0x32>
   1c58e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c590:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1c592:	2300      	movs	r3, #0
   1c594:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1c596:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1c598:	2301      	movs	r3, #1
   1c59a:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1c59c:	2300      	movs	r3, #0
   1c59e:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1c5a0:	7b43      	ldrb	r3, [r0, #13]
   1c5a2:	f023 0301 	bic.w	r3, r3, #1
   1c5a6:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1c5a8:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1c5aa:	b143      	cbz	r3, 1c5be <os_sched_wakeup+0x6a>
   1c5ac:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1c5ae:	649a      	str	r2, [r3, #72]	; 0x48
   1c5b0:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1c5b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1c5b4:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1c5b6:	f7ff ff37 	bl	1c428 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1c5ba:	2000      	movs	r0, #0
   1c5bc:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1c5be:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1c5c0:	4b01      	ldr	r3, [pc, #4]	; (1c5c8 <os_sched_wakeup+0x74>)
   1c5c2:	605a      	str	r2, [r3, #4]
   1c5c4:	e7f4      	b.n	1c5b0 <os_sched_wakeup+0x5c>
   1c5c6:	bf00      	nop
   1c5c8:	2000011c 	.word	0x2000011c

0001c5cc <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1c5cc:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1c5ce:	f000 f9cb 	bl	1c968 <os_time_get>
   1c5d2:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1c5d4:	f000 fa40 	bl	1ca58 <os_arch_save_sr>
   1c5d8:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1c5da:	4b0a      	ldr	r3, [pc, #40]	; (1c604 <os_sched_os_timer_exp+0x38>)
   1c5dc:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1c5de:	b160      	cbz	r0, 1c5fa <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1c5e0:	7b43      	ldrb	r3, [r0, #13]
   1c5e2:	f013 0f01 	tst.w	r3, #1
   1c5e6:	d108      	bne.n	1c5fa <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   1c5e8:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1c5ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1c5ec:	1aeb      	subs	r3, r5, r3
   1c5ee:	2b00      	cmp	r3, #0
   1c5f0:	db03      	blt.n	1c5fa <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   1c5f2:	f7ff ffaf 	bl	1c554 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1c5f6:	4620      	mov	r0, r4
   1c5f8:	e7f1      	b.n	1c5de <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   1c5fa:	4630      	mov	r0, r6
   1c5fc:	f000 fa32 	bl	1ca64 <os_arch_restore_sr>
}
   1c600:	bd70      	pop	{r4, r5, r6, pc}
   1c602:	bf00      	nop
   1c604:	2000011c 	.word	0x2000011c

0001c608 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   1c608:	b510      	push	{r4, lr}
   1c60a:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   1c60c:	f000 fa2d 	bl	1ca6a <os_arch_in_critical>
   1c610:	b150      	cbz	r0, 1c628 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   1c612:	4b0c      	ldr	r3, [pc, #48]	; (1c644 <os_sched_wakeup_ticks+0x3c>)
   1c614:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   1c616:	b17b      	cbz	r3, 1c638 <os_sched_wakeup_ticks+0x30>
   1c618:	7b5a      	ldrb	r2, [r3, #13]
   1c61a:	f012 0f01 	tst.w	r2, #1
   1c61e:	d10e      	bne.n	1c63e <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   1c620:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1c622:	1b00      	subs	r0, r0, r4
   1c624:	d406      	bmi.n	1c634 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   1c626:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1c628:	2300      	movs	r3, #0
   1c62a:	461a      	mov	r2, r3
   1c62c:	4619      	mov	r1, r3
   1c62e:	4618      	mov	r0, r3
   1c630:	f7fe ff7c 	bl	1b52c <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1c634:	2000      	movs	r0, #0
   1c636:	e7f6      	b.n	1c626 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   1c638:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c63c:	e7f3      	b.n	1c626 <os_sched_wakeup_ticks+0x1e>
   1c63e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1c642:	e7f0      	b.n	1c626 <os_sched_wakeup_ticks+0x1e>
   1c644:	2000011c 	.word	0x2000011c

0001c648 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   1c648:	4b01      	ldr	r3, [pc, #4]	; (1c650 <os_sched_next_task+0x8>)
   1c64a:	6818      	ldr	r0, [r3, #0]
   1c64c:	4770      	bx	lr
   1c64e:	bf00      	nop
   1c650:	20000114 	.word	0x20000114

0001c654 <os_sched>:
{
   1c654:	b538      	push	{r3, r4, r5, lr}
   1c656:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1c658:	f000 f9fe 	bl	1ca58 <os_arch_save_sr>
   1c65c:	4605      	mov	r5, r0
    if (!next_t) {
   1c65e:	b134      	cbz	r4, 1c66e <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1c660:	4620      	mov	r0, r4
   1c662:	f000 f9ef 	bl	1ca44 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1c666:	4628      	mov	r0, r5
   1c668:	f000 f9fc 	bl	1ca64 <os_arch_restore_sr>
}
   1c66c:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1c66e:	f7ff ffeb 	bl	1c648 <os_sched_next_task>
   1c672:	4604      	mov	r4, r0
   1c674:	e7f4      	b.n	1c660 <os_sched+0xc>
	...

0001c678 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   1c678:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1c67a:	7b03      	ldrb	r3, [r0, #12]
   1c67c:	2b01      	cmp	r3, #1
   1c67e:	d000      	beq.n	1c682 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1c680:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1c682:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1c684:	b13b      	cbz	r3, 1c696 <os_sched_resort+0x1e>
   1c686:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1c688:	649a      	str	r2, [r3, #72]	; 0x48
   1c68a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1c68c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1c68e:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1c690:	f7ff feca 	bl	1c428 <os_sched_insert>
}
   1c694:	e7f4      	b.n	1c680 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1c696:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1c698:	4b01      	ldr	r3, [pc, #4]	; (1c6a0 <os_sched_resort+0x28>)
   1c69a:	605a      	str	r2, [r3, #4]
   1c69c:	e7f5      	b.n	1c68a <os_sched_resort+0x12>
   1c69e:	bf00      	nop
   1c6a0:	20000114 	.word	0x20000114

0001c6a4 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1c6a4:	4603      	mov	r3, r0
   1c6a6:	b118      	cbz	r0, 1c6b0 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1c6a8:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1c6aa:	2000      	movs	r0, #0
   1c6ac:	6018      	str	r0, [r3, #0]
   1c6ae:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1c6b0:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1c6b2:	4770      	bx	lr

0001c6b4 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1c6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1c6b6:	4b17      	ldr	r3, [pc, #92]	; (1c714 <os_sem_release+0x60>)
   1c6b8:	681b      	ldr	r3, [r3, #0]
   1c6ba:	b33b      	cbz	r3, 1c70c <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1c6bc:	b340      	cbz	r0, 1c710 <os_sem_release+0x5c>
   1c6be:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1c6c0:	f7ff fef4 	bl	1c4ac <os_sched_get_current_task>
   1c6c4:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1c6c6:	f000 f9c7 	bl	1ca58 <os_arch_save_sr>
   1c6ca:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1c6cc:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1c6ce:	b165      	cbz	r5, 1c6ea <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1c6d0:	7b6b      	ldrb	r3, [r5, #13]
   1c6d2:	f023 0302 	bic.w	r3, r3, #2
   1c6d6:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1c6d8:	4628      	mov	r0, r5
   1c6da:	f7ff ff3b 	bl	1c554 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1c6de:	7afa      	ldrb	r2, [r7, #11]
   1c6e0:	7aeb      	ldrb	r3, [r5, #11]
   1c6e2:	429a      	cmp	r2, r3
   1c6e4:	d80b      	bhi.n	1c6fe <os_sem_release+0x4a>
    resched = 0;
   1c6e6:	2400      	movs	r4, #0
   1c6e8:	e003      	b.n	1c6f2 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1c6ea:	88e3      	ldrh	r3, [r4, #6]
   1c6ec:	3301      	adds	r3, #1
   1c6ee:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1c6f0:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1c6f2:	4630      	mov	r0, r6
   1c6f4:	f000 f9b6 	bl	1ca64 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1c6f8:	b91c      	cbnz	r4, 1c702 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1c6fa:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1c6fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1c6fe:	2401      	movs	r4, #1
   1c700:	e7f7      	b.n	1c6f2 <os_sem_release+0x3e>
        os_sched(rdy);
   1c702:	4628      	mov	r0, r5
   1c704:	f7ff ffa6 	bl	1c654 <os_sched>
    ret = OS_OK;
   1c708:	2000      	movs	r0, #0
   1c70a:	e7f7      	b.n	1c6fc <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1c70c:	2009      	movs	r0, #9
   1c70e:	e7f5      	b.n	1c6fc <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1c710:	2003      	movs	r0, #3
   1c712:	e7f3      	b.n	1c6fc <os_sem_release+0x48>
   1c714:	2000de88 	.word	0x2000de88

0001c718 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1c718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1c71a:	4b2c      	ldr	r3, [pc, #176]	; (1c7cc <os_sem_pend+0xb4>)
   1c71c:	681b      	ldr	r3, [r3, #0]
   1c71e:	2b00      	cmp	r3, #0
   1c720:	d04f      	beq.n	1c7c2 <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1c722:	2800      	cmp	r0, #0
   1c724:	d04f      	beq.n	1c7c6 <os_sem_pend+0xae>
   1c726:	460d      	mov	r5, r1
   1c728:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1c72a:	f7ff febf 	bl	1c4ac <os_sched_get_current_task>
   1c72e:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   1c730:	f000 f992 	bl	1ca58 <os_arch_save_sr>
   1c734:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1c736:	88e3      	ldrh	r3, [r4, #6]
   1c738:	b14b      	cbz	r3, 1c74e <os_sem_pend+0x36>
        sem->sem_tokens--;
   1c73a:	3b01      	subs	r3, #1
   1c73c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1c73e:	2400      	movs	r4, #0
    sched = 0;
   1c740:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1c742:	4638      	mov	r0, r7
   1c744:	f000 f98e 	bl	1ca64 <os_arch_restore_sr>

    if (sched) {
   1c748:	bb45      	cbnz	r5, 1c79c <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1c74a:	4620      	mov	r0, r4
   1c74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1c74e:	b315      	cbz	r5, 1c796 <os_sem_pend+0x7e>
        current->t_obj = sem;
   1c750:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1c752:	7b73      	ldrb	r3, [r6, #13]
   1c754:	f043 0302 	orr.w	r3, r3, #2
   1c758:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1c75a:	f8d4 c000 	ldr.w	ip, [r4]
   1c75e:	f1bc 0f00 	cmp.w	ip, #0
   1c762:	d00e      	beq.n	1c782 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1c764:	4663      	mov	r3, ip
        last = NULL;
   1c766:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1c768:	b133      	cbz	r3, 1c778 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1c76a:	7af1      	ldrb	r1, [r6, #11]
   1c76c:	7ada      	ldrb	r2, [r3, #11]
   1c76e:	4291      	cmp	r1, r2
   1c770:	d302      	bcc.n	1c778 <os_sem_pend+0x60>
                last = entry;
   1c772:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1c774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1c776:	e7f7      	b.n	1c768 <os_sem_pend+0x50>
        if (last) {
   1c778:	b118      	cbz	r0, 1c782 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1c77a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1c77c:	64f3      	str	r3, [r6, #76]	; 0x4c
   1c77e:	64c6      	str	r6, [r0, #76]	; 0x4c
   1c780:	e002      	b.n	1c788 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1c782:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1c786:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1c788:	4629      	mov	r1, r5
   1c78a:	4630      	mov	r0, r6
   1c78c:	f7ff fe9a 	bl	1c4c4 <os_sched_sleep>
        ret = OS_OK;
   1c790:	2400      	movs	r4, #0
        sched = 1;
   1c792:	2501      	movs	r5, #1
   1c794:	e7d5      	b.n	1c742 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1c796:	2406      	movs	r4, #6
    sched = 0;
   1c798:	2500      	movs	r5, #0
   1c79a:	e7d2      	b.n	1c742 <os_sem_pend+0x2a>
        os_sched(NULL);
   1c79c:	2000      	movs	r0, #0
   1c79e:	f7ff ff59 	bl	1c654 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1c7a2:	7b73      	ldrb	r3, [r6, #13]
   1c7a4:	f013 0f02 	tst.w	r3, #2
   1c7a8:	d101      	bne.n	1c7ae <os_sem_pend+0x96>
            ret = OS_OK;
   1c7aa:	2400      	movs	r4, #0
   1c7ac:	e7cd      	b.n	1c74a <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1c7ae:	f000 f953 	bl	1ca58 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1c7b2:	7b73      	ldrb	r3, [r6, #13]
   1c7b4:	f023 0302 	bic.w	r3, r3, #2
   1c7b8:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1c7ba:	f000 f953 	bl	1ca64 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1c7be:	2406      	movs	r4, #6
   1c7c0:	e7c3      	b.n	1c74a <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1c7c2:	2409      	movs	r4, #9
   1c7c4:	e7c1      	b.n	1c74a <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1c7c6:	2403      	movs	r4, #3
   1c7c8:	e7bf      	b.n	1c74a <os_sem_pend+0x32>
   1c7ca:	bf00      	nop
   1c7cc:	2000de88 	.word	0x2000de88

0001c7d0 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1c7d0:	2300      	movs	r3, #0
   1c7d2:	e003      	b.n	1c7dc <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   1c7d4:	4a03      	ldr	r2, [pc, #12]	; (1c7e4 <_clear_stack+0x14>)
   1c7d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1c7da:	3301      	adds	r3, #1
   1c7dc:	428b      	cmp	r3, r1
   1c7de:	dbf9      	blt.n	1c7d4 <_clear_stack+0x4>
    }
}
   1c7e0:	4770      	bx	lr
   1c7e2:	bf00      	nop
   1c7e4:	deadbeef 	.word	0xdeadbeef

0001c7e8 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   1c7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c7ec:	4604      	mov	r4, r0
   1c7ee:	460f      	mov	r7, r1
   1c7f0:	4690      	mov	r8, r2
   1c7f2:	461d      	mov	r5, r3
   1c7f4:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   1c7f8:	2250      	movs	r2, #80	; 0x50
   1c7fa:	2100      	movs	r1, #0
   1c7fc:	f000 fa99 	bl	1cd32 <memset>

    t->t_func = func;
   1c800:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   1c804:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1c806:	f000 f927 	bl	1ca58 <os_arch_save_sr>
    rc = g_task_id;
   1c80a:	4b2b      	ldr	r3, [pc, #172]	; (1c8b8 <os_task_init+0xd0>)
   1c80c:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   1c80e:	1c6a      	adds	r2, r5, #1
   1c810:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1c812:	f000 f927 	bl	1ca64 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   1c816:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   1c818:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1c81c:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   1c81e:	2301      	movs	r3, #1
   1c820:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   1c822:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   1c824:	2300      	movs	r3, #0
   1c826:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   1c828:	f104 0720 	add.w	r7, r4, #32
   1c82c:	4638      	mov	r0, r7
   1c82e:	f7ff fda3 	bl	1c378 <os_sanity_check_init>
    if (rc != OS_OK) {
   1c832:	4605      	mov	r5, r0
   1c834:	2800      	cmp	r0, #0
   1c836:	d132      	bne.n	1c89e <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   1c838:	9b07      	ldr	r3, [sp, #28]
   1c83a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1c83e:	d005      	beq.n	1c84c <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   1c840:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   1c842:	4638      	mov	r0, r7
   1c844:	f7ff fda0 	bl	1c388 <os_sanity_check_register>
        if (rc != OS_OK) {
   1c848:	4605      	mov	r5, r0
   1c84a:	bb40      	cbnz	r0, 1c89e <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   1c84c:	4631      	mov	r1, r6
   1c84e:	9808      	ldr	r0, [sp, #32]
   1c850:	f7ff ffbe 	bl	1c7d0 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   1c854:	9b08      	ldr	r3, [sp, #32]
   1c856:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1c85a:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   1c85c:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   1c85e:	4632      	mov	r2, r6
   1c860:	4620      	mov	r0, r4
   1c862:	f000 f907 	bl	1ca74 <os_arch_task_stack_init>
   1c866:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1c868:	4b14      	ldr	r3, [pc, #80]	; (1c8bc <os_task_init+0xd4>)
   1c86a:	681b      	ldr	r3, [r3, #0]
   1c86c:	b15b      	cbz	r3, 1c886 <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   1c86e:	7ae1      	ldrb	r1, [r4, #11]
   1c870:	7ada      	ldrb	r2, [r3, #11]
   1c872:	4291      	cmp	r1, r2
   1c874:	d001      	beq.n	1c87a <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1c876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c878:	e7f8      	b.n	1c86c <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1c87a:	2300      	movs	r3, #0
   1c87c:	461a      	mov	r2, r3
   1c87e:	4619      	mov	r1, r3
   1c880:	4618      	mov	r0, r3
   1c882:	f7fe fe53 	bl	1b52c <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1c886:	6423      	str	r3, [r4, #64]	; 0x40
   1c888:	4b0c      	ldr	r3, [pc, #48]	; (1c8bc <os_task_init+0xd4>)
   1c88a:	685a      	ldr	r2, [r3, #4]
   1c88c:	6014      	str	r4, [r2, #0]
   1c88e:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1c892:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   1c894:	4620      	mov	r0, r4
   1c896:	f7ff fdc7 	bl	1c428 <os_sched_insert>
   1c89a:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1c89c:	b110      	cbz	r0, 1c8a4 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   1c89e:	4628      	mov	r0, r5
   1c8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   1c8a4:	f7fe fefc 	bl	1b6a0 <os_started>
   1c8a8:	b908      	cbnz	r0, 1c8ae <os_task_init+0xc6>
    return (0);
   1c8aa:	4605      	mov	r5, r0
   1c8ac:	e7f7      	b.n	1c89e <os_task_init+0xb6>
        os_sched(NULL);
   1c8ae:	2000      	movs	r0, #0
   1c8b0:	f7ff fed0 	bl	1c654 <os_sched>
   1c8b4:	e7f3      	b.n	1c89e <os_task_init+0xb6>
   1c8b6:	bf00      	nop
   1c8b8:	2000deb4 	.word	0x2000deb4
   1c8bc:	2000deb8 	.word	0x2000deb8

0001c8c0 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1c8c0:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1c8c4:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1c8c6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1c8ca:	e9d1 4500 	ldrd	r4, r5, [r1]
   1c8ce:	eb14 0b03 	adds.w	fp, r4, r3
   1c8d2:	f145 0c00 	adc.w	ip, r5, #0
   1c8d6:	e9c2 bc00 	strd	fp, ip, [r2]
   1c8da:	688b      	ldr	r3, [r1, #8]
   1c8dc:	f641 6184 	movw	r1, #7812	; 0x1e84
   1c8e0:	fb01 3000 	mla	r0, r1, r0, r3
   1c8e4:	6090      	str	r0, [r2, #8]
   1c8e6:	4b08      	ldr	r3, [pc, #32]	; (1c908 <os_deltatime+0x48>)
   1c8e8:	4298      	cmp	r0, r3
   1c8ea:	dd0a      	ble.n	1c902 <os_deltatime+0x42>
   1c8ec:	f11b 0401 	adds.w	r4, fp, #1
   1c8f0:	f14c 0500 	adc.w	r5, ip, #0
   1c8f4:	e9c2 4500 	strd	r4, r5, [r2]
   1c8f8:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1c8fc:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1c900:	6090      	str	r0, [r2, #8]
}
   1c902:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1c906:	4770      	bx	lr
   1c908:	000f423f 	.word	0x000f423f

0001c90c <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   1c90c:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1c90e:	1e04      	subs	r4, r0, #0
   1c910:	db0d      	blt.n	1c92e <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   1c912:	f000 f8a1 	bl	1ca58 <os_arch_save_sr>
   1c916:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1c918:	4a11      	ldr	r2, [pc, #68]	; (1c960 <os_time_tick+0x54>)
   1c91a:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   1c91c:	18e0      	adds	r0, r4, r3
   1c91e:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   1c920:	ea90 0f03 	teq	r0, r3
   1c924:	d409      	bmi.n	1c93a <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   1c926:	4628      	mov	r0, r5
   1c928:	f000 f89c 	bl	1ca64 <os_arch_restore_sr>
}
   1c92c:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1c92e:	2300      	movs	r3, #0
   1c930:	461a      	mov	r2, r3
   1c932:	4619      	mov	r1, r3
   1c934:	4618      	mov	r0, r3
   1c936:	f7fe fdf9 	bl	1b52c <__assert_func>
        delta = g_os_time - basetod.ostime;
   1c93a:	4e0a      	ldr	r6, [pc, #40]	; (1c964 <os_time_tick+0x58>)
   1c93c:	4631      	mov	r1, r6
   1c93e:	f851 4b08 	ldr.w	r4, [r1], #8
   1c942:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1c944:	460a      	mov	r2, r1
   1c946:	4620      	mov	r0, r4
   1c948:	f7ff ffba 	bl	1c8c0 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1c94c:	f106 0118 	add.w	r1, r6, #24
   1c950:	460a      	mov	r2, r1
   1c952:	4620      	mov	r0, r4
   1c954:	f7ff ffb4 	bl	1c8c0 <os_deltatime>
        basetod.ostime = g_os_time;
   1c958:	4b01      	ldr	r3, [pc, #4]	; (1c960 <os_time_tick+0x54>)
   1c95a:	681b      	ldr	r3, [r3, #0]
   1c95c:	6033      	str	r3, [r6, #0]
   1c95e:	e7e2      	b.n	1c926 <os_time_tick+0x1a>
   1c960:	2000dec0 	.word	0x2000dec0
   1c964:	2000d9b8 	.word	0x2000d9b8

0001c968 <os_time_get>:
}
   1c968:	4b01      	ldr	r3, [pc, #4]	; (1c970 <os_time_get+0x8>)
   1c96a:	6818      	ldr	r0, [r3, #0]
   1c96c:	4770      	bx	lr
   1c96e:	bf00      	nop
   1c970:	2000dec0 	.word	0x2000dec0

0001c974 <os_time_advance>:

void
os_time_advance(int ticks)
{
   1c974:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1c976:	1e04      	subs	r4, r0, #0
   1c978:	db09      	blt.n	1c98e <os_time_advance+0x1a>

    if (ticks > 0) {
   1c97a:	2c00      	cmp	r4, #0
   1c97c:	dd06      	ble.n	1c98c <os_time_advance+0x18>
        if (!os_started()) {
   1c97e:	f7fe fe8f 	bl	1b6a0 <os_started>
   1c982:	b950      	cbnz	r0, 1c99a <os_time_advance+0x26>
            g_os_time += ticks;
   1c984:	4a0a      	ldr	r2, [pc, #40]	; (1c9b0 <os_time_advance+0x3c>)
   1c986:	6813      	ldr	r3, [r2, #0]
   1c988:	441c      	add	r4, r3
   1c98a:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   1c98c:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1c98e:	2300      	movs	r3, #0
   1c990:	461a      	mov	r2, r3
   1c992:	4619      	mov	r1, r3
   1c994:	4618      	mov	r0, r3
   1c996:	f7fe fdc9 	bl	1b52c <__assert_func>
            os_time_tick(ticks);
   1c99a:	4620      	mov	r0, r4
   1c99c:	f7ff ffb6 	bl	1c90c <os_time_tick>
            os_callout_tick();
   1c9a0:	f7fe ffa6 	bl	1b8f0 <os_callout_tick>
            os_sched_os_timer_exp();
   1c9a4:	f7ff fe12 	bl	1c5cc <os_sched_os_timer_exp>
            os_sched(NULL);
   1c9a8:	2000      	movs	r0, #0
   1c9aa:	f7ff fe53 	bl	1c654 <os_sched>
}
   1c9ae:	e7ed      	b.n	1c98c <os_time_advance+0x18>
   1c9b0:	2000dec0 	.word	0x2000dec0

0001c9b4 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   1c9b4:	b900      	cbnz	r0, 1c9b8 <os_time_delay+0x4>
   1c9b6:	4770      	bx	lr
{
   1c9b8:	b538      	push	{r3, r4, r5, lr}
   1c9ba:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1c9bc:	f000 f84c 	bl	1ca58 <os_arch_save_sr>
   1c9c0:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1c9c2:	f7ff fd73 	bl	1c4ac <os_sched_get_current_task>
   1c9c6:	4621      	mov	r1, r4
   1c9c8:	f7ff fd7c 	bl	1c4c4 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1c9cc:	4628      	mov	r0, r5
   1c9ce:	f000 f849 	bl	1ca64 <os_arch_restore_sr>
        os_sched(NULL);
   1c9d2:	2000      	movs	r0, #0
   1c9d4:	f7ff fe3e 	bl	1c654 <os_sched>
    }
}
   1c9d8:	bd38      	pop	{r3, r4, r5, pc}
	...

0001c9dc <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1c9dc:	b570      	push	{r4, r5, r6, lr}
   1c9de:	4605      	mov	r5, r0
   1c9e0:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1c9e2:	f000 f839 	bl	1ca58 <os_arch_save_sr>
   1c9e6:	4606      	mov	r6, r0
    if (tv != NULL) {
   1c9e8:	b145      	cbz	r5, 1c9fc <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1c9ea:	f7ff ffbd 	bl	1c968 <os_time_get>
   1c9ee:	4908      	ldr	r1, [pc, #32]	; (1ca10 <os_gettimeofday+0x34>)
   1c9f0:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   1c9f4:	462a      	mov	r2, r5
   1c9f6:	1ac0      	subs	r0, r0, r3
   1c9f8:	f7ff ff62 	bl	1c8c0 <os_deltatime>
    }

    if (tz != NULL) {
   1c9fc:	b114      	cbz	r4, 1ca04 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1c9fe:	4b04      	ldr	r3, [pc, #16]	; (1ca10 <os_gettimeofday+0x34>)
   1ca00:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1ca02:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   1ca04:	4630      	mov	r0, r6
   1ca06:	f000 f82d 	bl	1ca64 <os_arch_restore_sr>

    return (0);
}
   1ca0a:	2000      	movs	r0, #0
   1ca0c:	bd70      	pop	{r4, r5, r6, pc}
   1ca0e:	bf00      	nop
   1ca10:	2000d9b8 	.word	0x2000d9b8

0001ca14 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   1ca14:	b538      	push	{r3, r4, r5, lr}
   1ca16:	4604      	mov	r4, r0
   1ca18:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1ca1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ca1e:	2300      	movs	r3, #0
   1ca20:	01c0      	lsls	r0, r0, #7
   1ca22:	0e61      	lsrs	r1, r4, #25
   1ca24:	f002 f88a 	bl	1eb3c <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   1ca28:	2901      	cmp	r1, #1
   1ca2a:	bf08      	it	eq
   1ca2c:	2800      	cmpeq	r0, #0
   1ca2e:	d202      	bcs.n	1ca36 <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   1ca30:	6028      	str	r0, [r5, #0]
    return 0;
   1ca32:	2000      	movs	r0, #0
}
   1ca34:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   1ca36:	2002      	movs	r0, #2
   1ca38:	e7fc      	b.n	1ca34 <os_time_ms_to_ticks+0x20>

0001ca3a <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   1ca3a:	b508      	push	{r3, lr}
    os_time_advance(1);
   1ca3c:	2001      	movs	r0, #1
   1ca3e:	f7ff ff99 	bl	1c974 <os_time_advance>
}
   1ca42:	bd08      	pop	{r3, pc}

0001ca44 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   1ca44:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1ca46:	f7ff fd19 	bl	1c47c <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1ca4a:	4b02      	ldr	r3, [pc, #8]	; (1ca54 <os_arch_ctx_sw+0x10>)
   1ca4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ca50:	605a      	str	r2, [r3, #4]
}
   1ca52:	bd08      	pop	{r3, pc}
   1ca54:	e000ed00 	.word	0xe000ed00

0001ca58 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1ca58:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1ca5c:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1ca5e:	f000 0001 	and.w	r0, r0, #1
   1ca62:	4770      	bx	lr

0001ca64 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   1ca64:	b900      	cbnz	r0, 1ca68 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1ca66:	b662      	cpsie	i
        __enable_irq();
    }
}
   1ca68:	4770      	bx	lr

0001ca6a <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1ca6a:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1ca6e:	f000 0001 	and.w	r0, r0, #1
   1ca72:	4770      	bx	lr

0001ca74 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   1ca74:	b570      	push	{r4, r5, r6, lr}
   1ca76:	4606      	mov	r6, r0
   1ca78:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1ca7a:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   1ca7e:	2309      	movs	r3, #9
   1ca80:	e003      	b.n	1ca8a <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1ca82:	2200      	movs	r2, #0
   1ca84:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   1ca88:	3301      	adds	r3, #1
   1ca8a:	2b0d      	cmp	r3, #13
   1ca8c:	ddf9      	ble.n	1ca82 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1ca8e:	4620      	mov	r0, r4
   1ca90:	f000 f8b6 	bl	1cc00 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   1ca94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1ca98:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   1ca9c:	6973      	ldr	r3, [r6, #20]
   1ca9e:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1caa2:	69b3      	ldr	r3, [r6, #24]
   1caa4:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   1caa8:	f06f 0302 	mvn.w	r3, #2
   1caac:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   1cab0:	4620      	mov	r0, r4
   1cab2:	bd70      	pop	{r4, r5, r6, pc}

0001cab4 <os_arch_init>:

void
os_arch_init(void)
{
   1cab4:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1cab6:	4a04      	ldr	r2, [pc, #16]	; (1cac8 <os_arch_init+0x14>)
   1cab8:	6953      	ldr	r3, [r2, #20]
   1caba:	f043 0310 	orr.w	r3, r3, #16
   1cabe:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1cac0:	f7fe fdf4 	bl	1b6ac <os_init_idle_task>
}
   1cac4:	bd08      	pop	{r3, pc}
   1cac6:	bf00      	nop
   1cac8:	e000ed00 	.word	0xe000ed00

0001cacc <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1cacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1cace:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1cad2:	b90c      	cbnz	r4, 1cad8 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1cad4:	2400      	movs	r4, #0
   1cad6:	e009      	b.n	1caec <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1cad8:	2007      	movs	r0, #7
   1cada:	e02e      	b.n	1cb3a <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1cadc:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1cae0:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1cae4:	26ff      	movs	r6, #255	; 0xff
   1cae6:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1caea:	3401      	adds	r4, #1
   1caec:	2cef      	cmp	r4, #239	; 0xef
   1caee:	d9f5      	bls.n	1cadc <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1caf0:	f06f 040d 	mvn.w	r4, #13
   1caf4:	e007      	b.n	1cb06 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1caf6:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1caf8:	4e12      	ldr	r6, [pc, #72]	; (1cb44 <os_arch_os_init+0x78>)
   1cafa:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1cafc:	3510      	adds	r5, #16
   1cafe:	4f12      	ldr	r7, [pc, #72]	; (1cb48 <os_arch_os_init+0x7c>)
   1cb00:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   1cb04:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1cb06:	2c25      	cmp	r4, #37	; 0x25
   1cb08:	ddf5      	ble.n	1caf6 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1cb0a:	4c0e      	ldr	r4, [pc, #56]	; (1cb44 <os_arch_os_init+0x78>)
   1cb0c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1cb0e:	4e0f      	ldr	r6, [pc, #60]	; (1cb4c <os_arch_os_init+0x80>)
   1cb10:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1cb12:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1cb14:	4e0e      	ldr	r6, [pc, #56]	; (1cb50 <os_arch_os_init+0x84>)
   1cb16:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1cb18:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1cb1a:	4e0e      	ldr	r6, [pc, #56]	; (1cb54 <os_arch_os_init+0x88>)
   1cb1c:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1cb1e:	25e0      	movs	r5, #224	; 0xe0
   1cb20:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1cb24:	2520      	movs	r5, #32
   1cb26:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1cb28:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1cb2c:	f014 0f01 	tst.w	r4, #1
   1cb30:	d004      	beq.n	1cb3c <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1cb32:	f8df c024 	ldr.w	ip, [pc, #36]	; 1cb58 <os_arch_os_init+0x8c>
   1cb36:	df00      	svc	0
        err = OS_OK;
   1cb38:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1cb3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1cb3c:	f7ff ffba 	bl	1cab4 <os_arch_init>
        err = OS_OK;
   1cb40:	2000      	movs	r0, #0
   1cb42:	e7fa      	b.n	1cb3a <os_arch_os_init+0x6e>
   1cb44:	e000ed00 	.word	0xe000ed00
   1cb48:	0001cc9f 	.word	0x0001cc9f
   1cb4c:	0001cc07 	.word	0x0001cc07
   1cb50:	0001cc4d 	.word	0x0001cc4d
   1cb54:	0001cc93 	.word	0x0001cc93
   1cb58:	0001cab5 	.word	0x0001cab5

0001cb5c <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1cb5c:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1cb5e:	f7ff fd73 	bl	1c648 <os_sched_next_task>
   1cb62:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1cb64:	f7ff fca8 	bl	1c4b8 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1cb68:	6823      	ldr	r3, [r4, #0]
   1cb6a:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1cb6c:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1cb70:	2106      	movs	r1, #6
   1cb72:	2080      	movs	r0, #128	; 0x80
   1cb74:	f000 fde8 	bl	1d748 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1cb78:	4b03      	ldr	r3, [pc, #12]	; (1cb88 <os_arch_start+0x2c>)
   1cb7a:	2201      	movs	r2, #1
   1cb7c:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1cb7e:	4620      	mov	r0, r4
   1cb80:	f7ff ff60 	bl	1ca44 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1cb84:	69a0      	ldr	r0, [r4, #24]
   1cb86:	bd10      	pop	{r4, pc}
   1cb88:	2000de88 	.word	0x2000de88

0001cb8c <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1cb8c:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1cb8e:	4814      	ldr	r0, [pc, #80]	; (1cbe0 <os_arch_os_start+0x54>)
   1cb90:	6800      	ldr	r0, [r0, #0]
   1cb92:	3804      	subs	r0, #4
   1cb94:	f000 f82a 	bl	1cbec <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1cb98:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1cb9c:	b9d4      	cbnz	r4, 1cbd4 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1cb9e:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1cba2:	f004 0403 	and.w	r4, r4, #3
   1cba6:	2c03      	cmp	r4, #3
   1cba8:	d808      	bhi.n	1cbbc <os_arch_os_start+0x30>
   1cbaa:	e8df f004 	tbb	[pc, r4]
   1cbae:	1515      	.short	0x1515
   1cbb0:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1cbb2:	4c0c      	ldr	r4, [pc, #48]	; (1cbe4 <os_arch_os_start+0x58>)
   1cbb4:	6824      	ldr	r4, [r4, #0]
   1cbb6:	f014 0f01 	tst.w	r4, #1
   1cbba:	d10f      	bne.n	1cbdc <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   1cbbc:	f8df c028 	ldr.w	ip, [pc, #40]	; 1cbe8 <os_arch_os_start+0x5c>
   1cbc0:	df00      	svc	0
   1cbc2:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   1cbc4:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1cbc6:	4c07      	ldr	r4, [pc, #28]	; (1cbe4 <os_arch_os_start+0x58>)
   1cbc8:	6824      	ldr	r4, [r4, #0]
   1cbca:	f014 0f01 	tst.w	r4, #1
   1cbce:	d1f5      	bne.n	1cbbc <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   1cbd0:	2008      	movs	r0, #8
   1cbd2:	e7f7      	b.n	1cbc4 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   1cbd4:	2007      	movs	r0, #7
   1cbd6:	e7f5      	b.n	1cbc4 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   1cbd8:	2008      	movs	r0, #8
   1cbda:	e7f3      	b.n	1cbc4 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   1cbdc:	2008      	movs	r0, #8
   1cbde:	e7f1      	b.n	1cbc4 <os_arch_os_start+0x38>
   1cbe0:	2000dde8 	.word	0x2000dde8
   1cbe4:	2000d9e8 	.word	0x2000d9e8
   1cbe8:	0001cb5d 	.word	0x0001cb5d

0001cbec <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   1cbec:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   1cbf0:	4832      	ldr	r0, [pc, #200]	; (1ccbc <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1cbf2:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1cbf4:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1cbf6:	f380 8814 	msr	CONTROL, r0
        ISB
   1cbfa:	f3bf 8f6f 	isb	sy
        BX      LR
   1cbfe:	4770      	bx	lr

0001cc00 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   1cc00:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   1cc04:	4770      	bx	lr

0001cc06 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   1cc06:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1cc0a:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   1cc0c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   1cc10:	b951      	cbnz	r1, 1cc28 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1cc12:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1cc16:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   1cc18:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1cc1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   1cc1e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   1cc22:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   1cc26:	4770      	bx	lr

0001cc28 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1cc28:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   1cc2a:	4a25      	ldr	r2, [pc, #148]	; (1ccc0 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   1cc2c:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   1cc2e:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   1cc30:	d809      	bhi.n	1cc46 <SVC_Done>

        LDR     R4,=SVC_Table-4
   1cc32:	4c24      	ldr	r4, [pc, #144]	; (1ccc4 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   1cc34:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1cc38:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   1cc3c:	47a0      	blx	r4

        MRS     R12,PSP
   1cc3e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   1cc42:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0001cc46 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1cc46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   1cc4a:	4770      	bx	lr

0001cc4c <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1cc4c:	4b1e      	ldr	r3, [pc, #120]	; (1ccc8 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   1cc4e:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   1cc50:	4b1e      	ldr	r3, [pc, #120]	; (1cccc <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1cc52:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1cc54:	4291      	cmp	r1, r2
        IT      EQ
   1cc56:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   1cc58:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   1cc5a:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1cc5e:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   1cc62:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   1cc64:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   1cc68:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1cc6c:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1cc70:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   1cc72:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   1cc76:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   1cc7a:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   1cc7e:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   1cc80:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   1cc84:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1cc88:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   1cc8c:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1cc90:	4770      	bx	lr

0001cc92 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1cc92:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   1cc94:	f7ff fed1 	bl	1ca3a <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1cc98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   1cc9c:	4770      	bx	lr

0001cc9e <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1cc9e:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1cca2:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   1cca4:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   1cca8:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   1ccac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1ccb0:	4668      	mov	r0, sp
        BL      os_default_irq
   1ccb2:	f7fe fc61 	bl	1b578 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   1ccb6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   1ccba:	4770      	bx	lr
        LDR     R0,=os_flags
   1ccbc:	2000d9e8 	.word	0x2000d9e8
        LDR     R2,=SVC_Count
   1ccc0:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   1ccc4:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1ccc8:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   1cccc:	2000deb0 	.word	0x2000deb0

0001ccd0 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   1ccd0:	b470      	push	{r4, r5, r6}
   1ccd2:	f04f 0500 	mov.w	r5, #0
   1ccd6:	f022 0603 	bic.w	r6, r2, #3
   1ccda:	e005      	b.n	1cce8 <test1>

0001ccdc <loop1>:
   1ccdc:	5943      	ldr	r3, [r0, r5]
   1ccde:	594c      	ldr	r4, [r1, r5]
   1cce0:	42a3      	cmp	r3, r4
   1cce2:	d104      	bne.n	1ccee <res1>
   1cce4:	f105 0504 	add.w	r5, r5, #4

0001cce8 <test1>:
   1cce8:	42b5      	cmp	r5, r6
   1ccea:	d1f7      	bne.n	1ccdc <loop1>
   1ccec:	e00d      	b.n	1cd0a <test2>

0001ccee <res1>:
   1ccee:	ba1b      	rev	r3, r3
   1ccf0:	ba24      	rev	r4, r4
   1ccf2:	1b1b      	subs	r3, r3, r4
   1ccf4:	bf8c      	ite	hi
   1ccf6:	2301      	movhi	r3, #1
   1ccf8:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1ccfc:	e009      	b.n	1cd12 <done>

0001ccfe <loop2>:
   1ccfe:	5d43      	ldrb	r3, [r0, r5]
   1cd00:	5d4c      	ldrb	r4, [r1, r5]
   1cd02:	1b1b      	subs	r3, r3, r4
   1cd04:	d105      	bne.n	1cd12 <done>
   1cd06:	f105 0501 	add.w	r5, r5, #1

0001cd0a <test2>:
   1cd0a:	4295      	cmp	r5, r2
   1cd0c:	d1f7      	bne.n	1ccfe <loop2>
   1cd0e:	f04f 0300 	mov.w	r3, #0

0001cd12 <done>:
   1cd12:	4618      	mov	r0, r3
   1cd14:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1cd16:	4770      	bx	lr

0001cd18 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1cd18:	e001      	b.n	1cd1e <test1>

0001cd1a <loop1>:
   1cd1a:	588b      	ldr	r3, [r1, r2]
   1cd1c:	5083      	str	r3, [r0, r2]

0001cd1e <test1>:
   1cd1e:	3a04      	subs	r2, #4
   1cd20:	d5fb      	bpl.n	1cd1a <loop1>
   1cd22:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1cd26:	e001      	b.n	1cd2c <test2>

0001cd28 <loop2>:
   1cd28:	5c8b      	ldrb	r3, [r1, r2]
   1cd2a:	5483      	strb	r3, [r0, r2]

0001cd2c <test2>:
   1cd2c:	3a01      	subs	r2, #1
   1cd2e:	d5fb      	bpl.n	1cd28 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1cd30:	4770      	bx	lr

0001cd32 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1cd32:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1cd34:	4605      	mov	r5, r0
   1cd36:	b2c9      	uxtb	r1, r1
   1cd38:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1cd3c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1cd40:	18ab      	adds	r3, r5, r2
   1cd42:	2403      	movs	r4, #3
   1cd44:	4023      	ands	r3, r4
   1cd46:	1ad3      	subs	r3, r2, r3
   1cd48:	d40b      	bmi.n	1cd62 <memset+0x30>
   1cd4a:	e001      	b.n	1cd50 <memset+0x1e>
   1cd4c:	3a01      	subs	r2, #1
   1cd4e:	54a9      	strb	r1, [r5, r2]
   1cd50:	429a      	cmp	r2, r3
   1cd52:	d1fb      	bne.n	1cd4c <memset+0x1a>
   1cd54:	e000      	b.n	1cd58 <memset+0x26>
   1cd56:	50a9      	str	r1, [r5, r2]
   1cd58:	3a04      	subs	r2, #4
   1cd5a:	d5fc      	bpl.n	1cd56 <memset+0x24>
   1cd5c:	3204      	adds	r2, #4
   1cd5e:	e000      	b.n	1cd62 <memset+0x30>
   1cd60:	54a9      	strb	r1, [r5, r2]
   1cd62:	3a01      	subs	r2, #1
   1cd64:	d5fc      	bpl.n	1cd60 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1cd66:	bc30      	pop	{r4, r5}
   1cd68:	4770      	bx	lr

0001cd6a <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1cd6a:	b430      	push	{r4, r5}
   1cd6c:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1cd6e:	1c55      	adds	r5, r2, #1
   1cd70:	7813      	ldrb	r3, [r2, #0]
   1cd72:	1c4c      	adds	r4, r1, #1
   1cd74:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   1cd76:	1a18      	subs	r0, r3, r0
   1cd78:	d103      	bne.n	1cd82 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   1cd7a:	462a      	mov	r2, r5
   1cd7c:	4621      	mov	r1, r4
		if (d || !ch)
   1cd7e:	2b00      	cmp	r3, #0
   1cd80:	d1f5      	bne.n	1cd6e <strcmp+0x4>
			break;
	}

	return d;
}
   1cd82:	bc30      	pop	{r4, r5}
   1cd84:	4770      	bx	lr

0001cd86 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1cd86:	4603      	mov	r3, r0
	while (*ss)
   1cd88:	e000      	b.n	1cd8c <strlen+0x6>
		ss++;
   1cd8a:	3301      	adds	r3, #1
	while (*ss)
   1cd8c:	781a      	ldrb	r2, [r3, #0]
   1cd8e:	2a00      	cmp	r2, #0
   1cd90:	d1fb      	bne.n	1cd8a <strlen+0x4>
	return ss - s;
}
   1cd92:	1a18      	subs	r0, r3, r0
   1cd94:	4770      	bx	lr

0001cd96 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1cd96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cd9a:	b082      	sub	sp, #8
   1cd9c:	e9cd 0100 	strd	r0, r1, [sp]
   1cda0:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1cda2:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   1cda6:	2401      	movs	r4, #1
   1cda8:	2500      	movs	r5, #0
    while (num / d >= p->base)
   1cdaa:	e004      	b.n	1cdb6 <ui2a+0x20>
        d *= p->base;
   1cdac:	fb06 f305 	mul.w	r3, r6, r5
   1cdb0:	fba4 4506 	umull	r4, r5, r4, r6
   1cdb4:	441d      	add	r5, r3
    while (num / d >= p->base)
   1cdb6:	4622      	mov	r2, r4
   1cdb8:	462b      	mov	r3, r5
   1cdba:	e9dd 0100 	ldrd	r0, r1, [sp]
   1cdbe:	f001 febd 	bl	1eb3c <__aeabi_uldivmod>
   1cdc2:	f899 6003 	ldrb.w	r6, [r9, #3]
   1cdc6:	2700      	movs	r7, #0
   1cdc8:	42b9      	cmp	r1, r7
   1cdca:	bf08      	it	eq
   1cdcc:	42b0      	cmpeq	r0, r6
   1cdce:	d2ed      	bcs.n	1cdac <ui2a+0x16>
    int n = 0;
   1cdd0:	f04f 0a00 	mov.w	sl, #0
   1cdd4:	e007      	b.n	1cde6 <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1cdd6:	2330      	movs	r3, #48	; 0x30
   1cdd8:	441e      	add	r6, r3
   1cdda:	f888 6000 	strb.w	r6, [r8]
            ++n;
   1cdde:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1cde2:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   1cde6:	ea54 0305 	orrs.w	r3, r4, r5
   1cdea:	d02e      	beq.n	1ce4a <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   1cdec:	4622      	mov	r2, r4
   1cdee:	462b      	mov	r3, r5
   1cdf0:	e9dd 0100 	ldrd	r0, r1, [sp]
   1cdf4:	f001 fea2 	bl	1eb3c <__aeabi_uldivmod>
   1cdf8:	4606      	mov	r6, r0
   1cdfa:	460f      	mov	r7, r1
        num %= d;
   1cdfc:	4622      	mov	r2, r4
   1cdfe:	462b      	mov	r3, r5
   1ce00:	e9dd 0100 	ldrd	r0, r1, [sp]
   1ce04:	f001 fe9a 	bl	1eb3c <__aeabi_uldivmod>
   1ce08:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   1ce0c:	f899 2003 	ldrb.w	r2, [r9, #3]
   1ce10:	2300      	movs	r3, #0
   1ce12:	4620      	mov	r0, r4
   1ce14:	4629      	mov	r1, r5
   1ce16:	f001 fe91 	bl	1eb3c <__aeabi_uldivmod>
   1ce1a:	4604      	mov	r4, r0
   1ce1c:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   1ce1e:	f1ba 0f00 	cmp.w	sl, #0
   1ce22:	d105      	bne.n	1ce30 <ui2a+0x9a>
   1ce24:	ea56 0307 	orrs.w	r3, r6, r7
   1ce28:	d102      	bne.n	1ce30 <ui2a+0x9a>
   1ce2a:	ea54 0305 	orrs.w	r3, r4, r5
   1ce2e:	d1da      	bne.n	1cde6 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1ce30:	2f00      	cmp	r7, #0
   1ce32:	bf08      	it	eq
   1ce34:	2e0a      	cmpeq	r6, #10
   1ce36:	d3ce      	bcc.n	1cdd6 <ui2a+0x40>
   1ce38:	f899 3002 	ldrb.w	r3, [r9, #2]
   1ce3c:	f013 0f04 	tst.w	r3, #4
   1ce40:	d001      	beq.n	1ce46 <ui2a+0xb0>
   1ce42:	2337      	movs	r3, #55	; 0x37
   1ce44:	e7c8      	b.n	1cdd8 <ui2a+0x42>
   1ce46:	2357      	movs	r3, #87	; 0x57
   1ce48:	e7c6      	b.n	1cdd8 <ui2a+0x42>
        }
    }
    *bf = 0;
   1ce4a:	2300      	movs	r3, #0
   1ce4c:	f888 3000 	strb.w	r3, [r8]
}
   1ce50:	b002      	add	sp, #8
   1ce52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001ce56 <i2a>:

static void i2a(long long int num, struct param *p)
{
   1ce56:	b508      	push	{r3, lr}
    if (num < 0) {
   1ce58:	2800      	cmp	r0, #0
   1ce5a:	f171 0300 	sbcs.w	r3, r1, #0
   1ce5e:	db02      	blt.n	1ce66 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1ce60:	f7ff ff99 	bl	1cd96 <ui2a>
}
   1ce64:	bd08      	pop	{r3, pc}
        num = -num;
   1ce66:	4240      	negs	r0, r0
   1ce68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1ce6c:	7893      	ldrb	r3, [r2, #2]
   1ce6e:	f043 0301 	orr.w	r3, r3, #1
   1ce72:	7093      	strb	r3, [r2, #2]
   1ce74:	e7f4      	b.n	1ce60 <i2a+0xa>

0001ce76 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1ce76:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1ce7a:	b2db      	uxtb	r3, r3
   1ce7c:	2b09      	cmp	r3, #9
   1ce7e:	d90b      	bls.n	1ce98 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1ce80:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1ce84:	b2db      	uxtb	r3, r3
   1ce86:	2b05      	cmp	r3, #5
   1ce88:	d908      	bls.n	1ce9c <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1ce8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1ce8e:	b2db      	uxtb	r3, r3
   1ce90:	2b05      	cmp	r3, #5
   1ce92:	d805      	bhi.n	1cea0 <a2d+0x2a>
        return ch - 'A' + 10;
   1ce94:	3837      	subs	r0, #55	; 0x37
   1ce96:	4770      	bx	lr
        return ch - '0';
   1ce98:	3830      	subs	r0, #48	; 0x30
   1ce9a:	4770      	bx	lr
        return ch - 'a' + 10;
   1ce9c:	3857      	subs	r0, #87	; 0x57
   1ce9e:	4770      	bx	lr
    else
        return -1;
   1cea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1cea4:	4770      	bx	lr

0001cea6 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1cea6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ceaa:	4605      	mov	r5, r0
   1ceac:	4688      	mov	r8, r1
   1ceae:	4617      	mov	r7, r2
   1ceb0:	4699      	mov	r9, r3
    const char *p = *src;
   1ceb2:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1ceb4:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1ceb6:	4628      	mov	r0, r5
   1ceb8:	f7ff ffdd 	bl	1ce76 <a2d>
   1cebc:	2800      	cmp	r0, #0
   1cebe:	db06      	blt.n	1cece <a2i+0x28>
        if (digit > base)
   1cec0:	42b8      	cmp	r0, r7
   1cec2:	dc04      	bgt.n	1cece <a2i+0x28>
            break;
        num = num * base + digit;
   1cec4:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   1cec8:	7825      	ldrb	r5, [r4, #0]
   1ceca:	3401      	adds	r4, #1
   1cecc:	e7f3      	b.n	1ceb6 <a2i+0x10>
    }
    *src = p;
   1cece:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1ced2:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   1ced6:	4628      	mov	r0, r5
   1ced8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001cedc <putf>:

static int putf(FILE *putp, char c)
{
   1cedc:	b500      	push	{lr}
   1cede:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1cee0:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1cee4:	6803      	ldr	r3, [r0, #0]
   1cee6:	681b      	ldr	r3, [r3, #0]
   1cee8:	b14b      	cbz	r3, 1cefe <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1ceea:	2201      	movs	r2, #1
   1ceec:	f10d 0107 	add.w	r1, sp, #7
   1cef0:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1cef2:	2801      	cmp	r0, #1
   1cef4:	d005      	beq.n	1cf02 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1cef6:	2000      	movs	r0, #0
    else
        return 1;
}
   1cef8:	b003      	add	sp, #12
   1cefa:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1cefe:	2000      	movs	r0, #0
   1cf00:	e7fa      	b.n	1cef8 <putf+0x1c>
        return 1;
   1cf02:	2001      	movs	r0, #1
   1cf04:	e7f8      	b.n	1cef8 <putf+0x1c>
	...

0001cf08 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1cf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf0c:	4606      	mov	r6, r0
   1cf0e:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1cf10:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1cf12:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1cf14:	e001      	b.n	1cf1a <putchw+0x12>
        n--;
   1cf16:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   1cf18:	4613      	mov	r3, r2
   1cf1a:	1c5a      	adds	r2, r3, #1
   1cf1c:	781b      	ldrb	r3, [r3, #0]
   1cf1e:	b10b      	cbz	r3, 1cf24 <putchw+0x1c>
   1cf20:	2c00      	cmp	r4, #0
   1cf22:	dcf8      	bgt.n	1cf16 <putchw+0xe>
    if (p->sign)
   1cf24:	78bb      	ldrb	r3, [r7, #2]
   1cf26:	f013 0f01 	tst.w	r3, #1
   1cf2a:	d000      	beq.n	1cf2e <putchw+0x26>
        n--;
   1cf2c:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1cf2e:	887b      	ldrh	r3, [r7, #2]
   1cf30:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1cf34:	b29b      	uxth	r3, r3
   1cf36:	f241 0202 	movw	r2, #4098	; 0x1002
   1cf3a:	4293      	cmp	r3, r2
   1cf3c:	d01c      	beq.n	1cf78 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   1cf3e:	f640 0202 	movw	r2, #2050	; 0x802
   1cf42:	4293      	cmp	r3, r2
   1cf44:	d01a      	beq.n	1cf7c <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1cf46:	683b      	ldr	r3, [r7, #0]
   1cf48:	4d35      	ldr	r5, [pc, #212]	; (1d020 <putchw+0x118>)
   1cf4a:	401d      	ands	r5, r3
   1cf4c:	b1f5      	cbz	r5, 1cf8c <putchw+0x84>
    unsigned written = 0;
   1cf4e:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1cf50:	78bb      	ldrb	r3, [r7, #2]
   1cf52:	f013 0f01 	tst.w	r3, #1
   1cf56:	d11f      	bne.n	1cf98 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1cf58:	887b      	ldrh	r3, [r7, #2]
   1cf5a:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1cf5e:	b29b      	uxth	r3, r3
   1cf60:	f241 0202 	movw	r2, #4098	; 0x1002
   1cf64:	4293      	cmp	r3, r2
   1cf66:	d01d      	beq.n	1cfa4 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1cf68:	f640 0202 	movw	r2, #2050	; 0x802
   1cf6c:	4293      	cmp	r3, r2
   1cf6e:	d02a      	beq.n	1cfc6 <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1cf70:	787b      	ldrb	r3, [r7, #1]
   1cf72:	bba3      	cbnz	r3, 1cfde <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1cf74:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1cf76:	e03d      	b.n	1cff4 <putchw+0xec>
        n -= 2;
   1cf78:	3c02      	subs	r4, #2
   1cf7a:	e7e4      	b.n	1cf46 <putchw+0x3e>
        n--;
   1cf7c:	3c01      	subs	r4, #1
   1cf7e:	e7e2      	b.n	1cf46 <putchw+0x3e>
            written += putf(putp, ' ');
   1cf80:	2120      	movs	r1, #32
   1cf82:	4630      	mov	r0, r6
   1cf84:	f7ff ffaa 	bl	1cedc <putf>
   1cf88:	4405      	add	r5, r0
        while (n-- > 0)
   1cf8a:	4644      	mov	r4, r8
   1cf8c:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1cf90:	2c00      	cmp	r4, #0
   1cf92:	dcf5      	bgt.n	1cf80 <putchw+0x78>
   1cf94:	4644      	mov	r4, r8
   1cf96:	e7db      	b.n	1cf50 <putchw+0x48>
        written += putf(putp, '-');
   1cf98:	212d      	movs	r1, #45	; 0x2d
   1cf9a:	4630      	mov	r0, r6
   1cf9c:	f7ff ff9e 	bl	1cedc <putf>
   1cfa0:	4405      	add	r5, r0
   1cfa2:	e7d9      	b.n	1cf58 <putchw+0x50>
        written += putf(putp, '0');
   1cfa4:	2130      	movs	r1, #48	; 0x30
   1cfa6:	4630      	mov	r0, r6
   1cfa8:	f7ff ff98 	bl	1cedc <putf>
   1cfac:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1cfae:	78bb      	ldrb	r3, [r7, #2]
   1cfb0:	f013 0f04 	tst.w	r3, #4
   1cfb4:	d005      	beq.n	1cfc2 <putchw+0xba>
   1cfb6:	2158      	movs	r1, #88	; 0x58
   1cfb8:	4630      	mov	r0, r6
   1cfba:	f7ff ff8f 	bl	1cedc <putf>
   1cfbe:	4405      	add	r5, r0
   1cfc0:	e7d6      	b.n	1cf70 <putchw+0x68>
   1cfc2:	2178      	movs	r1, #120	; 0x78
   1cfc4:	e7f8      	b.n	1cfb8 <putchw+0xb0>
        written += putf(putp, '0');
   1cfc6:	2130      	movs	r1, #48	; 0x30
   1cfc8:	4630      	mov	r0, r6
   1cfca:	f7ff ff87 	bl	1cedc <putf>
   1cfce:	4405      	add	r5, r0
   1cfd0:	e7ce      	b.n	1cf70 <putchw+0x68>
            written += putf(putp, '0');
   1cfd2:	2130      	movs	r1, #48	; 0x30
   1cfd4:	4630      	mov	r0, r6
   1cfd6:	f7ff ff81 	bl	1cedc <putf>
   1cfda:	4405      	add	r5, r0
        while (n-- > 0)
   1cfdc:	4644      	mov	r4, r8
   1cfde:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1cfe2:	2c00      	cmp	r4, #0
   1cfe4:	dcf5      	bgt.n	1cfd2 <putchw+0xca>
   1cfe6:	4644      	mov	r4, r8
   1cfe8:	e7c4      	b.n	1cf74 <putchw+0x6c>
        written += putf(putp, ch);
   1cfea:	4630      	mov	r0, r6
   1cfec:	f7ff ff76 	bl	1cedc <putf>
   1cff0:	4405      	add	r5, r0
    while ((ch = *bf++))
   1cff2:	4643      	mov	r3, r8
   1cff4:	f103 0801 	add.w	r8, r3, #1
   1cff8:	7819      	ldrb	r1, [r3, #0]
   1cffa:	2900      	cmp	r1, #0
   1cffc:	d1f5      	bne.n	1cfea <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1cffe:	78bb      	ldrb	r3, [r7, #2]
   1d000:	f013 0f08 	tst.w	r3, #8
   1d004:	d106      	bne.n	1d014 <putchw+0x10c>
   1d006:	e008      	b.n	1d01a <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   1d008:	2120      	movs	r1, #32
   1d00a:	4630      	mov	r0, r6
   1d00c:	f7ff ff66 	bl	1cedc <putf>
   1d010:	4405      	add	r5, r0
        while (n-- > 0)
   1d012:	463c      	mov	r4, r7
   1d014:	1e67      	subs	r7, r4, #1
   1d016:	2c00      	cmp	r4, #0
   1d018:	dcf6      	bgt.n	1d008 <putchw+0x100>
    }
    
    return written;
}
   1d01a:	4628      	mov	r0, r5
   1d01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d020:	0008ff00 	.word	0x0008ff00

0001d024 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1d024:	b160      	cbz	r0, 1d040 <intarg+0x1c>
   1d026:	2801      	cmp	r0, #1
   1d028:	d017      	beq.n	1d05a <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1d02a:	bb19      	cbnz	r1, 1d074 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   1d02c:	6813      	ldr	r3, [r2, #0]
   1d02e:	3307      	adds	r3, #7
   1d030:	f023 0307 	bic.w	r3, r3, #7
   1d034:	f103 0108 	add.w	r1, r3, #8
   1d038:	6011      	str	r1, [r2, #0]
   1d03a:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1d03e:	4770      	bx	lr
        if (sign) {
   1d040:	b129      	cbz	r1, 1d04e <intarg+0x2a>
            val = va_arg(*va, int);
   1d042:	6813      	ldr	r3, [r2, #0]
   1d044:	1d19      	adds	r1, r3, #4
   1d046:	6011      	str	r1, [r2, #0]
   1d048:	6818      	ldr	r0, [r3, #0]
   1d04a:	17c1      	asrs	r1, r0, #31
   1d04c:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1d04e:	6813      	ldr	r3, [r2, #0]
   1d050:	1d19      	adds	r1, r3, #4
   1d052:	6011      	str	r1, [r2, #0]
   1d054:	6818      	ldr	r0, [r3, #0]
   1d056:	2100      	movs	r1, #0
   1d058:	4770      	bx	lr
        if (sign) {
   1d05a:	b129      	cbz	r1, 1d068 <intarg+0x44>
            val = va_arg(*va, long);
   1d05c:	6813      	ldr	r3, [r2, #0]
   1d05e:	1d19      	adds	r1, r3, #4
   1d060:	6011      	str	r1, [r2, #0]
   1d062:	6818      	ldr	r0, [r3, #0]
   1d064:	17c1      	asrs	r1, r0, #31
   1d066:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1d068:	6813      	ldr	r3, [r2, #0]
   1d06a:	1d19      	adds	r1, r3, #4
   1d06c:	6011      	str	r1, [r2, #0]
   1d06e:	6818      	ldr	r0, [r3, #0]
   1d070:	2100      	movs	r1, #0
   1d072:	4770      	bx	lr
            val = va_arg(*va, long long);
   1d074:	6813      	ldr	r3, [r2, #0]
   1d076:	3307      	adds	r3, #7
   1d078:	f023 0307 	bic.w	r3, r3, #7
   1d07c:	f103 0108 	add.w	r1, r3, #8
   1d080:	6011      	str	r1, [r2, #0]
   1d082:	e9d3 0100 	ldrd	r0, r1, [r3]
   1d086:	4770      	bx	lr

0001d088 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1d088:	b570      	push	{r4, r5, r6, lr}
   1d08a:	b08a      	sub	sp, #40	; 0x28
   1d08c:	4605      	mov	r5, r0
   1d08e:	9101      	str	r1, [sp, #4]
   1d090:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1d092:	ab02      	add	r3, sp, #8
   1d094:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1d096:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   1d098:	9b01      	ldr	r3, [sp, #4]
   1d09a:	1c5a      	adds	r2, r3, #1
   1d09c:	9201      	str	r2, [sp, #4]
   1d09e:	7819      	ldrb	r1, [r3, #0]
   1d0a0:	2900      	cmp	r1, #0
   1d0a2:	f000 811c 	beq.w	1d2de <tfp_format+0x256>
        if (ch != '%') {
   1d0a6:	2925      	cmp	r1, #37	; 0x25
   1d0a8:	d004      	beq.n	1d0b4 <tfp_format+0x2c>
            written += putf(putp, ch);
   1d0aa:	4628      	mov	r0, r5
   1d0ac:	f7ff ff16 	bl	1cedc <putf>
   1d0b0:	4404      	add	r4, r0
   1d0b2:	e7f1      	b.n	1d098 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1d0b4:	2200      	movs	r2, #0
   1d0b6:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1d0ba:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1d0be:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   1d0c2:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   1d0c6:	f362 0382 	bfi	r3, r2, #2, #1
   1d0ca:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1d0ce:	9b01      	ldr	r3, [sp, #4]
   1d0d0:	1c5a      	adds	r2, r3, #1
   1d0d2:	9201      	str	r2, [sp, #4]
   1d0d4:	7818      	ldrb	r0, [r3, #0]
   1d0d6:	b128      	cbz	r0, 1d0e4 <tfp_format+0x5c>
                switch (ch) {
   1d0d8:	282d      	cmp	r0, #45	; 0x2d
   1d0da:	d04e      	beq.n	1d17a <tfp_format+0xf2>
   1d0dc:	2830      	cmp	r0, #48	; 0x30
   1d0de:	d03c      	beq.n	1d15a <tfp_format+0xd2>
   1d0e0:	2823      	cmp	r0, #35	; 0x23
   1d0e2:	d043      	beq.n	1d16c <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1d0e4:	282a      	cmp	r0, #42	; 0x2a
   1d0e6:	d052      	beq.n	1d18e <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1d0e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1d0ec:	b2db      	uxtb	r3, r3
   1d0ee:	2b09      	cmp	r3, #9
   1d0f0:	d961      	bls.n	1d1b6 <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1d0f2:	286c      	cmp	r0, #108	; 0x6c
   1d0f4:	d065      	beq.n	1d1c2 <tfp_format+0x13a>
            lng = 0;
   1d0f6:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   1d0f8:	287a      	cmp	r0, #122	; 0x7a
   1d0fa:	d06f      	beq.n	1d1dc <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   1d0fc:	2869      	cmp	r0, #105	; 0x69
   1d0fe:	f000 808e 	beq.w	1d21e <tfp_format+0x196>
   1d102:	d970      	bls.n	1d1e6 <tfp_format+0x15e>
   1d104:	2873      	cmp	r0, #115	; 0x73
   1d106:	f000 80dd 	beq.w	1d2c4 <tfp_format+0x23c>
   1d10a:	f200 8099 	bhi.w	1d240 <tfp_format+0x1b8>
   1d10e:	286f      	cmp	r0, #111	; 0x6f
   1d110:	f000 80c7 	beq.w	1d2a2 <tfp_format+0x21a>
   1d114:	2870      	cmp	r0, #112	; 0x70
   1d116:	d1bf      	bne.n	1d098 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   1d118:	9b00      	ldr	r3, [sp, #0]
   1d11a:	1d1a      	adds	r2, r3, #4
   1d11c:	9200      	str	r2, [sp, #0]
   1d11e:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1d120:	2310      	movs	r3, #16
   1d122:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1d126:	aa08      	add	r2, sp, #32
   1d128:	2100      	movs	r1, #0
   1d12a:	f7ff fe34 	bl	1cd96 <ui2a>
                p.width = 2 * sizeof(void*);
   1d12e:	2308      	movs	r3, #8
   1d130:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1d134:	2301      	movs	r3, #1
   1d136:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1d13a:	2130      	movs	r1, #48	; 0x30
   1d13c:	4628      	mov	r0, r5
   1d13e:	f7ff fecd 	bl	1cedc <putf>
   1d142:	4404      	add	r4, r0
                written += putf(putp, 'x');
   1d144:	2178      	movs	r1, #120	; 0x78
   1d146:	4628      	mov	r0, r5
   1d148:	f7ff fec8 	bl	1cedc <putf>
   1d14c:	4404      	add	r4, r0
                written += putchw(putp, &p);
   1d14e:	a908      	add	r1, sp, #32
   1d150:	4628      	mov	r0, r5
   1d152:	f7ff fed9 	bl	1cf08 <putchw>
   1d156:	4404      	add	r4, r0
                break;
   1d158:	e79e      	b.n	1d098 <tfp_format+0x10>
                    if (!p.left) {
   1d15a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1d15e:	f013 0f08 	tst.w	r3, #8
   1d162:	d1b4      	bne.n	1d0ce <tfp_format+0x46>
                        p.lz = 1;
   1d164:	2301      	movs	r3, #1
   1d166:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1d16a:	e7b0      	b.n	1d0ce <tfp_format+0x46>
                    p.alt = 1;
   1d16c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1d170:	f043 0302 	orr.w	r3, r3, #2
   1d174:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1d178:	e7a9      	b.n	1d0ce <tfp_format+0x46>
                    p.left = 1;
   1d17a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1d17e:	f043 0308 	orr.w	r3, r3, #8
   1d182:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1d186:	2300      	movs	r3, #0
   1d188:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1d18c:	e79f      	b.n	1d0ce <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1d18e:	466a      	mov	r2, sp
   1d190:	2101      	movs	r1, #1
   1d192:	2000      	movs	r0, #0
   1d194:	f7ff ff46 	bl	1d024 <intarg>
                if (i > UCHAR_MAX) {
   1d198:	28ff      	cmp	r0, #255	; 0xff
   1d19a:	dd07      	ble.n	1d1ac <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   1d19c:	23ff      	movs	r3, #255	; 0xff
   1d19e:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1d1a2:	9b01      	ldr	r3, [sp, #4]
   1d1a4:	1c5a      	adds	r2, r3, #1
   1d1a6:	9201      	str	r2, [sp, #4]
   1d1a8:	7818      	ldrb	r0, [r3, #0]
   1d1aa:	e7a2      	b.n	1d0f2 <tfp_format+0x6a>
                } else if (i > 0) {
   1d1ac:	2800      	cmp	r0, #0
   1d1ae:	ddf8      	ble.n	1d1a2 <tfp_format+0x11a>
                    p.width = i;
   1d1b0:	f88d 0020 	strb.w	r0, [sp, #32]
   1d1b4:	e7f5      	b.n	1d1a2 <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1d1b6:	ab08      	add	r3, sp, #32
   1d1b8:	220a      	movs	r2, #10
   1d1ba:	a901      	add	r1, sp, #4
   1d1bc:	f7ff fe73 	bl	1cea6 <a2i>
   1d1c0:	e797      	b.n	1d0f2 <tfp_format+0x6a>
                ch = *(fmt++);
   1d1c2:	9b01      	ldr	r3, [sp, #4]
   1d1c4:	1c5a      	adds	r2, r3, #1
   1d1c6:	9201      	str	r2, [sp, #4]
   1d1c8:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   1d1ca:	286c      	cmp	r0, #108	; 0x6c
   1d1cc:	d001      	beq.n	1d1d2 <tfp_format+0x14a>
                lng = 1;
   1d1ce:	2601      	movs	r6, #1
   1d1d0:	e792      	b.n	1d0f8 <tfp_format+0x70>
                    ch = *(fmt++);
   1d1d2:	1c9a      	adds	r2, r3, #2
   1d1d4:	9201      	str	r2, [sp, #4]
   1d1d6:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   1d1d8:	2602      	movs	r6, #2
   1d1da:	e78d      	b.n	1d0f8 <tfp_format+0x70>
                ch = *(fmt++);
   1d1dc:	9b01      	ldr	r3, [sp, #4]
   1d1de:	1c5a      	adds	r2, r3, #1
   1d1e0:	9201      	str	r2, [sp, #4]
   1d1e2:	7818      	ldrb	r0, [r3, #0]
   1d1e4:	e78a      	b.n	1d0fc <tfp_format+0x74>
            switch (ch) {
   1d1e6:	2858      	cmp	r0, #88	; 0x58
   1d1e8:	d040      	beq.n	1d26c <tfp_format+0x1e4>
   1d1ea:	d80a      	bhi.n	1d202 <tfp_format+0x17a>
   1d1ec:	2800      	cmp	r0, #0
   1d1ee:	d076      	beq.n	1d2de <tfp_format+0x256>
   1d1f0:	2825      	cmp	r0, #37	; 0x25
   1d1f2:	f47f af51 	bne.w	1d098 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1d1f6:	4601      	mov	r1, r0
   1d1f8:	4628      	mov	r0, r5
   1d1fa:	f7ff fe6f 	bl	1cedc <putf>
   1d1fe:	4404      	add	r4, r0
                break;
   1d200:	e74a      	b.n	1d098 <tfp_format+0x10>
            switch (ch) {
   1d202:	2863      	cmp	r0, #99	; 0x63
   1d204:	d108      	bne.n	1d218 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   1d206:	9b00      	ldr	r3, [sp, #0]
   1d208:	1d1a      	adds	r2, r3, #4
   1d20a:	9200      	str	r2, [sp, #0]
   1d20c:	7819      	ldrb	r1, [r3, #0]
   1d20e:	4628      	mov	r0, r5
   1d210:	f7ff fe64 	bl	1cedc <putf>
   1d214:	4404      	add	r4, r0
                break;
   1d216:	e73f      	b.n	1d098 <tfp_format+0x10>
            switch (ch) {
   1d218:	2864      	cmp	r0, #100	; 0x64
   1d21a:	f47f af3d 	bne.w	1d098 <tfp_format+0x10>
                p.base = 10;
   1d21e:	230a      	movs	r3, #10
   1d220:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1d224:	466a      	mov	r2, sp
   1d226:	2101      	movs	r1, #1
   1d228:	4630      	mov	r0, r6
   1d22a:	f7ff fefb 	bl	1d024 <intarg>
   1d22e:	aa08      	add	r2, sp, #32
   1d230:	f7ff fe11 	bl	1ce56 <i2a>
                written += putchw(putp, &p);
   1d234:	a908      	add	r1, sp, #32
   1d236:	4628      	mov	r0, r5
   1d238:	f7ff fe66 	bl	1cf08 <putchw>
   1d23c:	4404      	add	r4, r0
                break;
   1d23e:	e72b      	b.n	1d098 <tfp_format+0x10>
            switch (ch) {
   1d240:	2875      	cmp	r0, #117	; 0x75
   1d242:	d110      	bne.n	1d266 <tfp_format+0x1de>
                p.base = 10;
   1d244:	230a      	movs	r3, #10
   1d246:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1d24a:	466a      	mov	r2, sp
   1d24c:	2100      	movs	r1, #0
   1d24e:	4630      	mov	r0, r6
   1d250:	f7ff fee8 	bl	1d024 <intarg>
   1d254:	aa08      	add	r2, sp, #32
   1d256:	f7ff fd9e 	bl	1cd96 <ui2a>
                written += putchw(putp, &p);
   1d25a:	a908      	add	r1, sp, #32
   1d25c:	4628      	mov	r0, r5
   1d25e:	f7ff fe53 	bl	1cf08 <putchw>
   1d262:	4404      	add	r4, r0
                break;
   1d264:	e718      	b.n	1d098 <tfp_format+0x10>
            switch (ch) {
   1d266:	2878      	cmp	r0, #120	; 0x78
   1d268:	f47f af16 	bne.w	1d098 <tfp_format+0x10>
                p.base = 16;
   1d26c:	2310      	movs	r3, #16
   1d26e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1d272:	2858      	cmp	r0, #88	; 0x58
   1d274:	bf14      	ite	ne
   1d276:	2300      	movne	r3, #0
   1d278:	2301      	moveq	r3, #1
   1d27a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1d27e:	f363 0282 	bfi	r2, r3, #2, #1
   1d282:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1d286:	466a      	mov	r2, sp
   1d288:	2100      	movs	r1, #0
   1d28a:	4630      	mov	r0, r6
   1d28c:	f7ff feca 	bl	1d024 <intarg>
   1d290:	aa08      	add	r2, sp, #32
   1d292:	f7ff fd80 	bl	1cd96 <ui2a>
                written += putchw(putp, &p);
   1d296:	a908      	add	r1, sp, #32
   1d298:	4628      	mov	r0, r5
   1d29a:	f7ff fe35 	bl	1cf08 <putchw>
   1d29e:	4404      	add	r4, r0
                break;
   1d2a0:	e6fa      	b.n	1d098 <tfp_format+0x10>
                p.base = 8;
   1d2a2:	2308      	movs	r3, #8
   1d2a4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1d2a8:	466a      	mov	r2, sp
   1d2aa:	2100      	movs	r1, #0
   1d2ac:	4630      	mov	r0, r6
   1d2ae:	f7ff feb9 	bl	1d024 <intarg>
   1d2b2:	aa08      	add	r2, sp, #32
   1d2b4:	f7ff fd6f 	bl	1cd96 <ui2a>
                written += putchw(putp, &p);
   1d2b8:	a908      	add	r1, sp, #32
   1d2ba:	4628      	mov	r0, r5
   1d2bc:	f7ff fe24 	bl	1cf08 <putchw>
   1d2c0:	4404      	add	r4, r0
                break;
   1d2c2:	e6e9      	b.n	1d098 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1d2c4:	9b00      	ldr	r3, [sp, #0]
   1d2c6:	1d1a      	adds	r2, r3, #4
   1d2c8:	9200      	str	r2, [sp, #0]
   1d2ca:	681b      	ldr	r3, [r3, #0]
   1d2cc:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1d2ce:	a908      	add	r1, sp, #32
   1d2d0:	4628      	mov	r0, r5
   1d2d2:	f7ff fe19 	bl	1cf08 <putchw>
   1d2d6:	4404      	add	r4, r0
                p.bf = bf;
   1d2d8:	ab02      	add	r3, sp, #8
   1d2da:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1d2dc:	e6dc      	b.n	1d098 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1d2de:	4620      	mov	r0, r4
   1d2e0:	b00a      	add	sp, #40	; 0x28
   1d2e2:	bd70      	pop	{r4, r5, r6, pc}

0001d2e4 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1d2e4:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1d2e6:	f7ff fecf 	bl	1d088 <tfp_format>
}
   1d2ea:	bd08      	pop	{r3, pc}

0001d2ec <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1d2ec:	b40f      	push	{r0, r1, r2, r3}
   1d2ee:	b500      	push	{lr}
   1d2f0:	b083      	sub	sp, #12
   1d2f2:	aa04      	add	r2, sp, #16
   1d2f4:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1d2f8:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1d2fa:	4b04      	ldr	r3, [pc, #16]	; (1d30c <printf+0x20>)
   1d2fc:	6818      	ldr	r0, [r3, #0]
   1d2fe:	f7ff fff1 	bl	1d2e4 <vfprintf>
    va_end(va);
    return rv;
}
   1d302:	b003      	add	sp, #12
   1d304:	f85d eb04 	ldr.w	lr, [sp], #4
   1d308:	b004      	add	sp, #16
   1d30a:	4770      	bx	lr
   1d30c:	00029774 	.word	0x00029774

0001d310 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1d310:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d312:	b085      	sub	sp, #20
   1d314:	4605      	mov	r5, r0
   1d316:	460c      	mov	r4, r1
   1d318:	4616      	mov	r6, r2
   1d31a:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1d31c:	460a      	mov	r2, r1
   1d31e:	4601      	mov	r1, r0
   1d320:	4668      	mov	r0, sp
   1d322:	f000 f835 	bl	1d390 <fmemopen_w>
    tfp_format(f, fmt, va);
   1d326:	463a      	mov	r2, r7
   1d328:	4631      	mov	r1, r6
   1d32a:	f7ff fead 	bl	1d088 <tfp_format>
    if (size > 0) {
   1d32e:	b12c      	cbz	r4, 1d33c <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1d330:	9b02      	ldr	r3, [sp, #8]
   1d332:	42a3      	cmp	r3, r4
   1d334:	d305      	bcc.n	1d342 <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   1d336:	3c01      	subs	r4, #1
   1d338:	2300      	movs	r3, #0
   1d33a:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   1d33c:	9802      	ldr	r0, [sp, #8]
   1d33e:	b005      	add	sp, #20
   1d340:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   1d342:	9b01      	ldr	r3, [sp, #4]
   1d344:	2200      	movs	r2, #0
   1d346:	701a      	strb	r2, [r3, #0]
   1d348:	e7f8      	b.n	1d33c <vsnprintf+0x2c>
	...

0001d34c <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1d34c:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   1d34e:	460a      	mov	r2, r1
   1d350:	4601      	mov	r1, r0
   1d352:	4b02      	ldr	r3, [pc, #8]	; (1d35c <vprintf+0x10>)
   1d354:	6818      	ldr	r0, [r3, #0]
   1d356:	f7ff ffc5 	bl	1d2e4 <vfprintf>
}
   1d35a:	bd08      	pop	{r3, pc}
   1d35c:	00029774 	.word	0x00029774

0001d360 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1d360:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1d362:	2500      	movs	r5, #0
    
    while (n--)
   1d364:	e000      	b.n	1d368 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1d366:	4622      	mov	r2, r4
    while (n--)
   1d368:	1e54      	subs	r4, r2, #1
   1d36a:	b16a      	cbz	r2, 1d388 <memfile_write+0x28>
        f->bytes_written++;
   1d36c:	6883      	ldr	r3, [r0, #8]
   1d36e:	3301      	adds	r3, #1
   1d370:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1d372:	68c2      	ldr	r2, [r0, #12]
   1d374:	4293      	cmp	r3, r2
   1d376:	d8f6      	bhi.n	1d366 <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1d378:	6843      	ldr	r3, [r0, #4]
   1d37a:	1c5a      	adds	r2, r3, #1
   1d37c:	6042      	str	r2, [r0, #4]
   1d37e:	780a      	ldrb	r2, [r1, #0]
   1d380:	701a      	strb	r2, [r3, #0]
            i++;
   1d382:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1d384:	3101      	adds	r1, #1
   1d386:	e7ee      	b.n	1d366 <memfile_write+0x6>
        }
    }
    
    return i;
}
   1d388:	4628      	mov	r0, r5
   1d38a:	bc30      	pop	{r4, r5}
   1d38c:	4770      	bx	lr
	...

0001d390 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1d390:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1d392:	4c04      	ldr	r4, [pc, #16]	; (1d3a4 <fmemopen_w+0x14>)
   1d394:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1d396:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1d398:	2100      	movs	r1, #0
   1d39a:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1d39c:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1d39e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1d3a2:	4770      	bx	lr
   1d3a4:	0002976c 	.word	0x0002976c

0001d3a8 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1d3a8:	2000      	movs	r0, #0
   1d3aa:	4770      	bx	lr

0001d3ac <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1d3ac:	b510      	push	{r4, lr}
   1d3ae:	4608      	mov	r0, r1
   1d3b0:	4614      	mov	r4, r2
    console_write(bp, n);
   1d3b2:	4611      	mov	r1, r2
   1d3b4:	f7fd f9b8 	bl	1a728 <console_write>
    return n;
}
   1d3b8:	4620      	mov	r0, r4
   1d3ba:	bd10      	pop	{r4, pc}

0001d3bc <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1d3bc:	b508      	push	{r3, lr}
    sysinit();
   1d3be:	f7fd fa1b 	bl	1a7f8 <sysinit_start>
   1d3c2:	f000 f81b 	bl	1d3fc <sysinit_app>
   1d3c6:	f7fd fa1d 	bl	1a804 <sysinit_end>
}
   1d3ca:	bd08      	pop	{r3, pc}

0001d3cc <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1d3cc:	b570      	push	{r4, r5, r6, lr}
   1d3ce:	b082      	sub	sp, #8
   1d3d0:	460c      	mov	r4, r1
   1d3d2:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1d3d4:	b29d      	uxth	r5, r3
   1d3d6:	9b07      	ldr	r3, [sp, #28]
   1d3d8:	9300      	str	r3, [sp, #0]
   1d3da:	4603      	mov	r3, r0
   1d3dc:	9a06      	ldr	r2, [sp, #24]
   1d3de:	4629      	mov	r1, r5
   1d3e0:	4620      	mov	r0, r4
   1d3e2:	f7fe fdeb 	bl	1bfbc <os_mempool_init>
    if (rc != 0) {
   1d3e6:	b108      	cbz	r0, 1d3ec <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1d3e8:	b002      	add	sp, #8
   1d3ea:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1d3ec:	462b      	mov	r3, r5
   1d3ee:	9a06      	ldr	r2, [sp, #24]
   1d3f0:	b292      	uxth	r2, r2
   1d3f2:	4621      	mov	r1, r4
   1d3f4:	4630      	mov	r0, r6
   1d3f6:	f7fe fc96 	bl	1bd26 <os_mbuf_pool_init>
   1d3fa:	e7f5      	b.n	1d3e8 <mem_init_mbuf_pool+0x1c>

0001d3fc <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1d3fc:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1d3fe:	f7fe f9f3 	bl	1b7e8 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1d402:	f001 f985 	bl	1e710 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1d406:	f7fd f9a3 	bl	1a750 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1d40a:	f001 fac7 	bl	1e99c <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1d40e:	f001 f9b7 	bl	1e780 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1d412:	f001 f8e1 	bl	1e5d8 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1d416:	f001 f8f1 	bl	1e5fc <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1d41a:	f001 f8f0 	bl	1e5fe <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1d41e:	f001 f8ef 	bl	1e600 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1d422:	f001 f8ee 	bl	1e602 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1d426:	f001 f8ed 	bl	1e604 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1d42a:	f000 fbd1 	bl	1dbd0 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1d42e:	f000 fd1f 	bl	1de70 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1d432:	f000 ff3d 	bl	1e2b0 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1d436:	f000 feb3 	bl	1e1a0 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1d43a:	f000 fe3d 	bl	1e0b8 <init_sensor_coap>
}
   1d43e:	bd08      	pop	{r3, pc}

0001d440 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1d440:	b908      	cbnz	r0, 1d446 <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1d442:	4802      	ldr	r0, [pc, #8]	; (1d44c <hal_bsp_flash_dev+0xc>)
   1d444:	4770      	bx	lr
    }

    return NULL;
   1d446:	2000      	movs	r0, #0
}
   1d448:	4770      	bx	lr
   1d44a:	bf00      	nop
   1d44c:	00029778 	.word	0x00029778

0001d450 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1d450:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1d452:	f7ea feb5 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1d456:	f000 fbb3 	bl	1dbc0 <nrf52_periph_create>
}
   1d45a:	bd08      	pop	{r3, pc}

0001d45c <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1d45c:	2300      	movs	r3, #0
   1d45e:	4a07      	ldr	r2, [pc, #28]	; (1d47c <nrf52k_flash_wait_ready+0x20>)
   1d460:	4293      	cmp	r3, r2
   1d462:	dc06      	bgt.n	1d472 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1d464:	4a06      	ldr	r2, [pc, #24]	; (1d480 <nrf52k_flash_wait_ready+0x24>)
   1d466:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1d46a:	2a01      	cmp	r2, #1
   1d46c:	d004      	beq.n	1d478 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1d46e:	3301      	adds	r3, #1
   1d470:	e7f5      	b.n	1d45e <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1d472:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d476:	4770      	bx	lr
            return 0;
   1d478:	2000      	movs	r0, #0
}
   1d47a:	4770      	bx	lr
   1d47c:	0001869f 	.word	0x0001869f
   1d480:	4001e000 	.word	0x4001e000

0001d484 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1d484:	b538      	push	{r3, r4, r5, lr}
   1d486:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1d488:	f7ff ffe8 	bl	1d45c <nrf52k_flash_wait_ready>
   1d48c:	b9f0      	cbnz	r0, 1d4cc <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1d48e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d492:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1d494:	4b0f      	ldr	r3, [pc, #60]	; (1d4d4 <nrf52k_flash_erase_sector+0x50>)
   1d496:	2202      	movs	r2, #2
   1d498:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1d49c:	f7ff ffde 	bl	1d45c <nrf52k_flash_wait_ready>
   1d4a0:	b148      	cbz	r0, 1d4b6 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1d4a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1d4a6:	4a0b      	ldr	r2, [pc, #44]	; (1d4d4 <nrf52k_flash_erase_sector+0x50>)
   1d4a8:	2100      	movs	r1, #0
   1d4aa:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1d4ae:	b904      	cbnz	r4, 1d4b2 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1d4b0:	b662      	cpsie	i
    return rc;
}
   1d4b2:	4618      	mov	r0, r3
   1d4b4:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1d4b6:	4b07      	ldr	r3, [pc, #28]	; (1d4d4 <nrf52k_flash_erase_sector+0x50>)
   1d4b8:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1d4bc:	f7ff ffce 	bl	1d45c <nrf52k_flash_wait_ready>
   1d4c0:	4603      	mov	r3, r0
   1d4c2:	2800      	cmp	r0, #0
   1d4c4:	d0ef      	beq.n	1d4a6 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1d4c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d4ca:	e7ec      	b.n	1d4a6 <nrf52k_flash_erase_sector+0x22>
        return -1;
   1d4cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d4d0:	e7ef      	b.n	1d4b2 <nrf52k_flash_erase_sector+0x2e>
   1d4d2:	bf00      	nop
   1d4d4:	4001e000 	.word	0x4001e000

0001d4d8 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1d4d8:	2000      	movs	r0, #0
   1d4da:	4770      	bx	lr

0001d4dc <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1d4dc:	297f      	cmp	r1, #127	; 0x7f
   1d4de:	dc06      	bgt.n	1d4ee <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1d4e0:	0309      	lsls	r1, r1, #12
   1d4e2:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1d4e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1d4e8:	601a      	str	r2, [r3, #0]
}
   1d4ea:	2000      	movs	r0, #0
   1d4ec:	4770      	bx	lr
{
   1d4ee:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1d4f0:	2300      	movs	r3, #0
   1d4f2:	461a      	mov	r2, r3
   1d4f4:	4619      	mov	r1, r3
   1d4f6:	4618      	mov	r0, r3
   1d4f8:	f7fe f818 	bl	1b52c <__assert_func>

0001d4fc <nrf52k_flash_write>:
{
   1d4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d500:	b082      	sub	sp, #8
   1d502:	460d      	mov	r5, r1
   1d504:	4616      	mov	r6, r2
   1d506:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1d508:	f7ff ffa8 	bl	1d45c <nrf52k_flash_wait_ready>
   1d50c:	2800      	cmp	r0, #0
   1d50e:	d158      	bne.n	1d5c2 <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1d510:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d514:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1d516:	4b2c      	ldr	r3, [pc, #176]	; (1d5c8 <nrf52k_flash_write+0xcc>)
   1d518:	2201      	movs	r2, #1
   1d51a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1d51e:	f015 0803 	ands.w	r8, r5, #3
   1d522:	d10b      	bne.n	1d53c <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1d524:	2c03      	cmp	r4, #3
   1d526:	d925      	bls.n	1d574 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1d528:	f7ff ff98 	bl	1d45c <nrf52k_flash_wait_ready>
   1d52c:	2800      	cmp	r0, #0
   1d52e:	d139      	bne.n	1d5a4 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1d530:	f856 3b04 	ldr.w	r3, [r6], #4
   1d534:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1d538:	3c04      	subs	r4, #4
   1d53a:	e7f3      	b.n	1d524 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1d53c:	f7ff ff8e 	bl	1d45c <nrf52k_flash_wait_ready>
   1d540:	bb68      	cbnz	r0, 1d59e <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1d542:	f025 0a03 	bic.w	sl, r5, #3
   1d546:	f8da 3000 	ldr.w	r3, [sl]
   1d54a:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1d54c:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1d550:	45a1      	cmp	r9, r4
   1d552:	d900      	bls.n	1d556 <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1d554:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1d556:	464a      	mov	r2, r9
   1d558:	4631      	mov	r1, r6
   1d55a:	ab01      	add	r3, sp, #4
   1d55c:	eb03 0008 	add.w	r0, r3, r8
   1d560:	f7ff fbda 	bl	1cd18 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1d564:	9b01      	ldr	r3, [sp, #4]
   1d566:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1d56a:	444d      	add	r5, r9
        num_bytes -= cnt;
   1d56c:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1d570:	444e      	add	r6, r9
   1d572:	e7d7      	b.n	1d524 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1d574:	b164      	cbz	r4, 1d590 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1d576:	682b      	ldr	r3, [r5, #0]
   1d578:	a802      	add	r0, sp, #8
   1d57a:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1d57e:	4622      	mov	r2, r4
   1d580:	4631      	mov	r1, r6
   1d582:	f7ff fbc9 	bl	1cd18 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1d586:	f7ff ff69 	bl	1d45c <nrf52k_flash_wait_ready>
   1d58a:	b9b8      	cbnz	r0, 1d5bc <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1d58c:	9b01      	ldr	r3, [sp, #4]
   1d58e:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1d590:	f7ff ff64 	bl	1d45c <nrf52k_flash_wait_ready>
   1d594:	4603      	mov	r3, r0
   1d596:	b138      	cbz	r0, 1d5a8 <nrf52k_flash_write+0xac>
        rc = -1;
   1d598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d59c:	e004      	b.n	1d5a8 <nrf52k_flash_write+0xac>
    int rc = -1;
   1d59e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d5a2:	e001      	b.n	1d5a8 <nrf52k_flash_write+0xac>
   1d5a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1d5a8:	4a07      	ldr	r2, [pc, #28]	; (1d5c8 <nrf52k_flash_write+0xcc>)
   1d5aa:	2100      	movs	r1, #0
   1d5ac:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1d5b0:	b907      	cbnz	r7, 1d5b4 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1d5b2:	b662      	cpsie	i
}
   1d5b4:	4618      	mov	r0, r3
   1d5b6:	b002      	add	sp, #8
   1d5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1d5bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d5c0:	e7f2      	b.n	1d5a8 <nrf52k_flash_write+0xac>
        return -1;
   1d5c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d5c6:	e7f5      	b.n	1d5b4 <nrf52k_flash_write+0xb8>
   1d5c8:	4001e000 	.word	0x4001e000

0001d5cc <nrf52k_flash_read>:
{
   1d5cc:	b508      	push	{r3, lr}
   1d5ce:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1d5d0:	461a      	mov	r2, r3
   1d5d2:	f7ff fba1 	bl	1cd18 <memcpy>
}
   1d5d6:	2000      	movs	r0, #0
   1d5d8:	bd08      	pop	{r3, pc}
	...

0001d5dc <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1d5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1d5de:	f7ff fa3b 	bl	1ca58 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1d5e2:	4b31      	ldr	r3, [pc, #196]	; (1d6a8 <nrf52_timer_handler+0xcc>)
   1d5e4:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1d5e8:	4b30      	ldr	r3, [pc, #192]	; (1d6ac <nrf52_timer_handler+0xd0>)
   1d5ea:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1d5ec:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1d5f0:	d225      	bcs.n	1d63e <nrf52_timer_handler+0x62>
   1d5f2:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1d5f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1d5f8:	d227      	bcs.n	1d64a <nrf52_timer_handler+0x6e>
    result = x - y;
   1d5fa:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1d5fc:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1d600:	d129      	bne.n	1d656 <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1d602:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1d606:	4f29      	ldr	r7, [pc, #164]	; (1d6ac <nrf52_timer_handler+0xd0>)
   1d608:	683c      	ldr	r4, [r7, #0]
   1d60a:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1d60e:	4628      	mov	r0, r5
   1d610:	f7ff f9b0 	bl	1c974 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1d614:	4b24      	ldr	r3, [pc, #144]	; (1d6a8 <nrf52_timer_handler+0xcc>)
   1d616:	2200      	movs	r2, #0
   1d618:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1d61c:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1d61e:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1d620:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1d624:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1d628:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1d62a:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1d62c:	f7ff fa1d 	bl	1ca6a <os_arch_in_critical>
   1d630:	bb28      	cbnz	r0, 1d67e <nrf52_timer_handler+0xa2>
   1d632:	2300      	movs	r3, #0
   1d634:	461a      	mov	r2, r3
   1d636:	4619      	mov	r1, r3
   1d638:	4618      	mov	r0, r3
   1d63a:	f7fd ff77 	bl	1b52c <__assert_func>
    assert(x <= 0xffffff);
   1d63e:	2300      	movs	r3, #0
   1d640:	461a      	mov	r2, r3
   1d642:	4619      	mov	r1, r3
   1d644:	4618      	mov	r0, r3
   1d646:	f7fd ff71 	bl	1b52c <__assert_func>
    assert(y <= 0xffffff);
   1d64a:	2300      	movs	r3, #0
   1d64c:	461a      	mov	r2, r3
   1d64e:	4619      	mov	r1, r3
   1d650:	4618      	mov	r0, r3
   1d652:	f7fd ff6b 	bl	1b52c <__assert_func>
        return (result | 0xff800000);
   1d656:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1d65a:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1d65e:	e7d2      	b.n	1d606 <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1d660:	2300      	movs	r3, #0
   1d662:	461a      	mov	r2, r3
   1d664:	4619      	mov	r1, r3
   1d666:	4618      	mov	r0, r3
   1d668:	f7fd ff60 	bl	1b52c <__assert_func>
        return (result | 0xff800000);
   1d66c:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1d670:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1d674:	2a02      	cmp	r2, #2
   1d676:	dc13      	bgt.n	1d6a0 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1d678:	4a0c      	ldr	r2, [pc, #48]	; (1d6ac <nrf52_timer_handler+0xd0>)
   1d67a:	6814      	ldr	r4, [r2, #0]
   1d67c:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1d67e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1d682:	4a09      	ldr	r2, [pc, #36]	; (1d6a8 <nrf52_timer_handler+0xcc>)
   1d684:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1d688:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1d68c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1d690:	d2e6      	bcs.n	1d660 <nrf52_timer_handler+0x84>
    result = x - y;
   1d692:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1d694:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1d698:	d1e8      	bne.n	1d66c <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1d69a:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1d69e:	e7e9      	b.n	1d674 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1d6a0:	4630      	mov	r0, r6
   1d6a2:	f7ff f9df 	bl	1ca64 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1d6a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d6a8:	40011000 	.word	0x40011000
   1d6ac:	2000dec4 	.word	0x2000dec4

0001d6b0 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1d6b0:	b538      	push	{r3, r4, r5, lr}
   1d6b2:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1d6b4:	f7ff f9d9 	bl	1ca6a <os_arch_in_critical>
   1d6b8:	b1a0      	cbz	r0, 1d6e4 <os_tick_idle+0x34>

    if (ticks > 0) {
   1d6ba:	2d00      	cmp	r5, #0
   1d6bc:	d038      	beq.n	1d730 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1d6be:	4b20      	ldr	r3, [pc, #128]	; (1d740 <os_tick_idle+0x90>)
   1d6c0:	685b      	ldr	r3, [r3, #4]
   1d6c2:	42ab      	cmp	r3, r5
   1d6c4:	d200      	bcs.n	1d6c8 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1d6c6:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1d6c8:	4b1d      	ldr	r3, [pc, #116]	; (1d740 <os_tick_idle+0x90>)
   1d6ca:	689c      	ldr	r4, [r3, #8]
   1d6cc:	681a      	ldr	r2, [r3, #0]
   1d6ce:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1d6d2:	f7ff f9ca 	bl	1ca6a <os_arch_in_critical>
   1d6d6:	b9d0      	cbnz	r0, 1d70e <os_tick_idle+0x5e>
   1d6d8:	2300      	movs	r3, #0
   1d6da:	461a      	mov	r2, r3
   1d6dc:	4619      	mov	r1, r3
   1d6de:	4618      	mov	r0, r3
   1d6e0:	f7fd ff24 	bl	1b52c <__assert_func>
    OS_ASSERT_CRITICAL();
   1d6e4:	2300      	movs	r3, #0
   1d6e6:	461a      	mov	r2, r3
   1d6e8:	4619      	mov	r1, r3
   1d6ea:	4618      	mov	r0, r3
   1d6ec:	f7fd ff1e 	bl	1b52c <__assert_func>
    assert(y <= 0xffffff);
   1d6f0:	2300      	movs	r3, #0
   1d6f2:	461a      	mov	r2, r3
   1d6f4:	4619      	mov	r1, r3
   1d6f6:	4618      	mov	r0, r3
   1d6f8:	f7fd ff18 	bl	1b52c <__assert_func>
        return (result | 0xff800000);
   1d6fc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1d700:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1d704:	2b02      	cmp	r3, #2
   1d706:	dc13      	bgt.n	1d730 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1d708:	4b0d      	ldr	r3, [pc, #52]	; (1d740 <os_tick_idle+0x90>)
   1d70a:	681c      	ldr	r4, [r3, #0]
   1d70c:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1d70e:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1d712:	4b0c      	ldr	r3, [pc, #48]	; (1d744 <os_tick_idle+0x94>)
   1d714:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1d718:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1d71c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1d720:	d2e6      	bcs.n	1d6f0 <os_tick_idle+0x40>
    result = x - y;
   1d722:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1d724:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1d728:	d1e8      	bne.n	1d6fc <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1d72a:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1d72e:	e7e9      	b.n	1d704 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1d730:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1d734:	bf30      	wfi

    if (ticks > 0) {
   1d736:	b905      	cbnz	r5, 1d73a <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1d738:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1d73a:	f7ff ff4f 	bl	1d5dc <nrf52_timer_handler>
}
   1d73e:	e7fb      	b.n	1d738 <os_tick_idle+0x88>
   1d740:	2000dec4 	.word	0x2000dec4
   1d744:	40011000 	.word	0x40011000

0001d748 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1d748:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1d74a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1d74e:	fbb3 f3f0 	udiv	r3, r3, r0
   1d752:	fb00 f303 	mul.w	r3, r0, r3
   1d756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1d75a:	d136      	bne.n	1d7ca <os_tick_init+0x82>
   1d75c:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1d75e:	4d1e      	ldr	r5, [pc, #120]	; (1d7d8 <os_tick_init+0x90>)
   1d760:	2600      	movs	r6, #0
   1d762:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1d764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1d768:	fbb3 f0f0 	udiv	r0, r3, r0
   1d76c:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1d76e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1d772:	fbb3 f0f0 	udiv	r0, r3, r0
   1d776:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1d778:	f7ff f96e 	bl	1ca58 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1d77c:	0164      	lsls	r4, r4, #5
   1d77e:	b2e4      	uxtb	r4, r4
   1d780:	4b16      	ldr	r3, [pc, #88]	; (1d7dc <os_tick_init+0x94>)
   1d782:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1d786:	4a16      	ldr	r2, [pc, #88]	; (1d7e0 <os_tick_init+0x98>)
   1d788:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1d78a:	4916      	ldr	r1, [pc, #88]	; (1d7e4 <os_tick_init+0x9c>)
   1d78c:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d790:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1d794:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1d796:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1d79a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1d79e:	2201      	movs	r2, #1
   1d7a0:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1d7a2:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1d7a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d7a8:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1d7ac:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1d7b0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1d7b4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1d7b8:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1d7bc:	6829      	ldr	r1, [r5, #0]
   1d7be:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1d7c2:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1d7c4:	f7ff f94e 	bl	1ca64 <os_arch_restore_sr>
}
   1d7c8:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1d7ca:	2300      	movs	r3, #0
   1d7cc:	461a      	mov	r2, r3
   1d7ce:	4619      	mov	r1, r3
   1d7d0:	4618      	mov	r0, r3
   1d7d2:	f7fd feab 	bl	1b52c <__assert_func>
   1d7d6:	bf00      	nop
   1d7d8:	2000dec4 	.word	0x2000dec4
   1d7dc:	e000e100 	.word	0xe000e100
   1d7e0:	e000ed00 	.word	0xe000ed00
   1d7e4:	0001d5dd 	.word	0x0001d5dd

0001d7e8 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1d7e8:	2301      	movs	r3, #1
   1d7ea:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1d7ec:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1d7f0:	4770      	bx	lr
	...

0001d7f4 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1d7f4:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1d7f6:	7883      	ldrb	r3, [r0, #2]
   1d7f8:	b393      	cbz	r3, 1d860 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1d7fa:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1d7fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1d800:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1d804:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1d806:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1d80a:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1d80e:	b11d      	cbz	r5, 1d818 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1d810:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1d814:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1d818:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1d81a:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1d81c:	2b02      	cmp	r3, #2
   1d81e:	dc0e      	bgt.n	1d83e <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1d820:	7842      	ldrb	r2, [r0, #1]
   1d822:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1d824:	2b00      	cmp	r3, #0
   1d826:	db15      	blt.n	1d854 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d828:	f002 021f 	and.w	r2, r2, #31
   1d82c:	095b      	lsrs	r3, r3, #5
   1d82e:	2101      	movs	r1, #1
   1d830:	fa01 f202 	lsl.w	r2, r1, r2
   1d834:	3340      	adds	r3, #64	; 0x40
   1d836:	491b      	ldr	r1, [pc, #108]	; (1d8a4 <nrf_timer_set_ocmp+0xb0>)
   1d838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1d83c:	e00a      	b.n	1d854 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1d83e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1d842:	d208      	bcs.n	1d856 <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1d844:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1d848:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1d84c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1d850:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1d854:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1d856:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1d85a:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1d85e:	e7f5      	b.n	1d84c <nrf_timer_set_ocmp+0x58>
   1d860:	460d      	mov	r5, r1
   1d862:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1d864:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1d866:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1d86a:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1d86e:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1d872:	2200      	movs	r2, #0
   1d874:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1d878:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1d87c:	f7ff ffb4 	bl	1d7e8 <nrf_read_timer_cntr>
   1d880:	1b40      	subs	r0, r0, r5
   1d882:	2800      	cmp	r0, #0
   1d884:	dbe6      	blt.n	1d854 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1d886:	7862      	ldrb	r2, [r4, #1]
   1d888:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1d88a:	2b00      	cmp	r3, #0
   1d88c:	dbe2      	blt.n	1d854 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d88e:	f002 021f 	and.w	r2, r2, #31
   1d892:	095b      	lsrs	r3, r3, #5
   1d894:	2101      	movs	r1, #1
   1d896:	fa01 f202 	lsl.w	r2, r1, r2
   1d89a:	3340      	adds	r3, #64	; 0x40
   1d89c:	4901      	ldr	r1, [pc, #4]	; (1d8a4 <nrf_timer_set_ocmp+0xb0>)
   1d89e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1d8a2:	e7d7      	b.n	1d854 <nrf_timer_set_ocmp+0x60>
   1d8a4:	e000e100 	.word	0xe000e100

0001d8a8 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1d8a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1d8ac:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1d8b0:	4770      	bx	lr

0001d8b2 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1d8b2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1d8b6:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1d8ba:	4770      	bx	lr

0001d8bc <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1d8bc:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1d8be:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1d8c0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d8c4:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1d8c6:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1d8c8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1d8cc:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1d8d0:	b1ad      	cbz	r5, 1d8fe <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1d8d2:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1d8d6:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1d8d8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1d8dc:	2500      	movs	r5, #0
   1d8de:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1d8e2:	7840      	ldrb	r0, [r0, #1]
   1d8e4:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1d8e6:	42aa      	cmp	r2, r5
   1d8e8:	db09      	blt.n	1d8fe <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d8ea:	f000 001f 	and.w	r0, r0, #31
   1d8ee:	0952      	lsrs	r2, r2, #5
   1d8f0:	2501      	movs	r5, #1
   1d8f2:	fa05 f000 	lsl.w	r0, r5, r0
   1d8f6:	3240      	adds	r2, #64	; 0x40
   1d8f8:	4d04      	ldr	r5, [pc, #16]	; (1d90c <hal_timer_read_bsptimer+0x50>)
   1d8fa:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1d8fe:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1d902:	b904      	cbnz	r4, 1d906 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1d904:	b662      	cpsie	i

    return tcntr;
}
   1d906:	bc30      	pop	{r4, r5}
   1d908:	4770      	bx	lr
   1d90a:	bf00      	nop
   1d90c:	e000e100 	.word	0xe000e100

0001d910 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1d910:	b570      	push	{r4, r5, r6, lr}
   1d912:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1d914:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1d918:	b672      	cpsid	i
   1d91a:	e013      	b.n	1d944 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1d91c:	6928      	ldr	r0, [r5, #16]
   1d91e:	f7ff ff63 	bl	1d7e8 <nrf_read_timer_cntr>
            delta = 0;
   1d922:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1d924:	68e3      	ldr	r3, [r4, #12]
   1d926:	1ac0      	subs	r0, r0, r3
   1d928:	4290      	cmp	r0, r2
   1d92a:	db19      	blt.n	1d960 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1d92c:	6923      	ldr	r3, [r4, #16]
   1d92e:	b1a3      	cbz	r3, 1d95a <hal_timer_chk_queue+0x4a>
   1d930:	6962      	ldr	r2, [r4, #20]
   1d932:	615a      	str	r2, [r3, #20]
   1d934:	6963      	ldr	r3, [r4, #20]
   1d936:	6922      	ldr	r2, [r4, #16]
   1d938:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1d93a:	2300      	movs	r3, #0
   1d93c:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1d93e:	6863      	ldr	r3, [r4, #4]
   1d940:	68a0      	ldr	r0, [r4, #8]
   1d942:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1d944:	696c      	ldr	r4, [r5, #20]
   1d946:	b15c      	cbz	r4, 1d960 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1d948:	78ab      	ldrb	r3, [r5, #2]
   1d94a:	2b00      	cmp	r3, #0
   1d94c:	d0e6      	beq.n	1d91c <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1d94e:	4628      	mov	r0, r5
   1d950:	f7ff ffb4 	bl	1d8bc <hal_timer_read_bsptimer>
            delta = -3;
   1d954:	f06f 0202 	mvn.w	r2, #2
   1d958:	e7e4      	b.n	1d924 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1d95a:	6963      	ldr	r3, [r4, #20]
   1d95c:	61ab      	str	r3, [r5, #24]
   1d95e:	e7e9      	b.n	1d934 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1d960:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1d962:	b133      	cbz	r3, 1d972 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1d964:	68d9      	ldr	r1, [r3, #12]
   1d966:	4628      	mov	r0, r5
   1d968:	f7ff ff44 	bl	1d7f4 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1d96c:	b906      	cbnz	r6, 1d970 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1d96e:	b662      	cpsie	i
}
   1d970:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1d972:	78ab      	ldrb	r3, [r5, #2]
   1d974:	b11b      	cbz	r3, 1d97e <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1d976:	6928      	ldr	r0, [r5, #16]
   1d978:	f7ff ff9b 	bl	1d8b2 <nrf_rtc_disable_ocmp>
   1d97c:	e7f6      	b.n	1d96c <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1d97e:	6928      	ldr	r0, [r5, #16]
   1d980:	f7ff ff92 	bl	1d8a8 <nrf_timer_disable_ocmp>
   1d984:	e7f2      	b.n	1d96c <hal_timer_chk_queue+0x5c>

0001d986 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1d986:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1d988:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1d98a:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1d98e:	b113      	cbz	r3, 1d996 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1d990:	2300      	movs	r3, #0
   1d992:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1d996:	6883      	ldr	r3, [r0, #8]
   1d998:	3301      	adds	r3, #1
   1d99a:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1d99c:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1d9a0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1d9a4:	d100      	bne.n	1d9a8 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1d9a6:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1d9a8:	f7ff ffb2 	bl	1d910 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1d9ac:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1d9b0:	e7f9      	b.n	1d9a6 <hal_timer_irq_handler+0x20>
	...

0001d9b4 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1d9b4:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1d9b6:	4802      	ldr	r0, [pc, #8]	; (1d9c0 <nrf52_timer0_irq_handler+0xc>)
   1d9b8:	f7ff ffe5 	bl	1d986 <hal_timer_irq_handler>
}
   1d9bc:	bd08      	pop	{r3, pc}
   1d9be:	bf00      	nop
   1d9c0:	2000ded0 	.word	0x2000ded0

0001d9c4 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1d9c4:	2805      	cmp	r0, #5
   1d9c6:	dc1c      	bgt.n	1da02 <hal_timer_init+0x3e>
   1d9c8:	4b12      	ldr	r3, [pc, #72]	; (1da14 <hal_timer_init+0x50>)
   1d9ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1d9ce:	b1d3      	cbz	r3, 1da06 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1d9d0:	781a      	ldrb	r2, [r3, #0]
   1d9d2:	b9d2      	cbnz	r2, 1da0a <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1d9d4:	b9d8      	cbnz	r0, 1da0e <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1d9d6:	4a10      	ldr	r2, [pc, #64]	; (1da18 <hal_timer_init+0x54>)
   1d9d8:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1d9da:	2208      	movs	r2, #8
   1d9dc:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d9de:	4b0f      	ldr	r3, [pc, #60]	; (1da1c <hal_timer_init+0x58>)
   1d9e0:	f44f 7280 	mov.w	r2, #256	; 0x100
   1d9e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1d9e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1d9ec:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1d9f0:	22e0      	movs	r2, #224	; 0xe0
   1d9f2:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1d9f6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1d9fa:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1d9fc:	4a08      	ldr	r2, [pc, #32]	; (1da20 <hal_timer_init+0x5c>)
   1d9fe:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1da00:	4770      	bx	lr

err:
    return rc;
   1da02:	2016      	movs	r0, #22
   1da04:	4770      	bx	lr
   1da06:	2016      	movs	r0, #22
   1da08:	4770      	bx	lr
   1da0a:	2016      	movs	r0, #22
   1da0c:	4770      	bx	lr
   1da0e:	2016      	movs	r0, #22
}
   1da10:	4770      	bx	lr
   1da12:	bf00      	nop
   1da14:	000297ac 	.word	0x000297ac
   1da18:	40008000 	.word	0x40008000
   1da1c:	e000e100 	.word	0xe000e100
   1da20:	0001d9b5 	.word	0x0001d9b5

0001da24 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1da24:	2805      	cmp	r0, #5
   1da26:	dc65      	bgt.n	1daf4 <hal_timer_config+0xd0>
   1da28:	4b39      	ldr	r3, [pc, #228]	; (1db10 <hal_timer_config+0xec>)
   1da2a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1da2e:	2800      	cmp	r0, #0
   1da30:	d062      	beq.n	1daf8 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1da32:	4b38      	ldr	r3, [pc, #224]	; (1db14 <hal_timer_config+0xf0>)
   1da34:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1da38:	7803      	ldrb	r3, [r0, #0]
   1da3a:	2b00      	cmp	r3, #0
   1da3c:	d15e      	bne.n	1dafc <hal_timer_config+0xd8>
   1da3e:	2900      	cmp	r1, #0
   1da40:	d05e      	beq.n	1db00 <hal_timer_config+0xdc>
   1da42:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1da46:	d85d      	bhi.n	1db04 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1da48:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1da4a:	2a00      	cmp	r2, #0
   1da4c:	d05c      	beq.n	1db08 <hal_timer_config+0xe4>
{
   1da4e:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1da50:	2901      	cmp	r1, #1
   1da52:	d013      	beq.n	1da7c <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1da54:	2301      	movs	r3, #1
   1da56:	2b09      	cmp	r3, #9
   1da58:	d810      	bhi.n	1da7c <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1da5a:	2201      	movs	r2, #1
   1da5c:	409a      	lsls	r2, r3
   1da5e:	428a      	cmp	r2, r1
   1da60:	d202      	bcs.n	1da68 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1da62:	3301      	adds	r3, #1
   1da64:	b2db      	uxtb	r3, r3
   1da66:	e7f6      	b.n	1da56 <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1da68:	1e5c      	subs	r4, r3, #1
   1da6a:	2501      	movs	r5, #1
   1da6c:	fa05 f404 	lsl.w	r4, r5, r4
   1da70:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1da72:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1da74:	428c      	cmp	r4, r1
   1da76:	d201      	bcs.n	1da7c <hal_timer_config+0x58>
                    prescaler -= 1;
   1da78:	3b01      	subs	r3, #1
   1da7a:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1da7c:	4a25      	ldr	r2, [pc, #148]	; (1db14 <hal_timer_config+0xf0>)
   1da7e:	411a      	asrs	r2, r3
   1da80:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1da82:	2201      	movs	r2, #1
   1da84:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1da86:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1da8a:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1da8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1da90:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1da94:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1da98:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1da9c:	d00c      	beq.n	1dab8 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1da9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1daa2:	2100      	movs	r1, #0
   1daa4:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1daa8:	2101      	movs	r1, #1
   1daaa:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1daac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1dab0:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1dab4:	2a00      	cmp	r2, #0
   1dab6:	d0f9      	beq.n	1daac <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1dab8:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1daba:	2101      	movs	r1, #1
   1dabc:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1dabe:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1dac0:	2500      	movs	r5, #0
   1dac2:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1dac6:	2503      	movs	r5, #3
   1dac8:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1dacc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1dad0:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1dad2:	7842      	ldrb	r2, [r0, #1]
   1dad4:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1dad6:	2b00      	cmp	r3, #0
   1dad8:	db07      	blt.n	1daea <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1dada:	f002 021f 	and.w	r2, r2, #31
   1dade:	095b      	lsrs	r3, r3, #5
   1dae0:	fa01 f202 	lsl.w	r2, r1, r2
   1dae4:	490c      	ldr	r1, [pc, #48]	; (1db18 <hal_timer_config+0xf4>)
   1dae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1daea:	b97c      	cbnz	r4, 1db0c <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1daec:	b662      	cpsie	i

    return 0;
   1daee:	2000      	movs	r0, #0

err:
    return rc;
}
   1daf0:	bc30      	pop	{r4, r5}
   1daf2:	4770      	bx	lr
    return rc;
   1daf4:	2016      	movs	r0, #22
   1daf6:	4770      	bx	lr
   1daf8:	2016      	movs	r0, #22
   1dafa:	4770      	bx	lr
   1dafc:	2016      	movs	r0, #22
   1dafe:	4770      	bx	lr
   1db00:	2016      	movs	r0, #22
   1db02:	4770      	bx	lr
   1db04:	2016      	movs	r0, #22
   1db06:	4770      	bx	lr
   1db08:	2016      	movs	r0, #22
}
   1db0a:	4770      	bx	lr
    return 0;
   1db0c:	2000      	movs	r0, #0
   1db0e:	e7ef      	b.n	1daf0 <hal_timer_config+0xcc>
   1db10:	000297ac 	.word	0x000297ac
   1db14:	00f42400 	.word	0x00f42400
   1db18:	e000e100 	.word	0xe000e100

0001db1c <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1db1c:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1db1e:	2805      	cmp	r0, #5
   1db20:	dc0c      	bgt.n	1db3c <hal_timer_read+0x20>
   1db22:	4b09      	ldr	r3, [pc, #36]	; (1db48 <hal_timer_read+0x2c>)
   1db24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1db28:	b140      	cbz	r0, 1db3c <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1db2a:	7883      	ldrb	r3, [r0, #2]
   1db2c:	b91b      	cbnz	r3, 1db36 <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1db2e:	6900      	ldr	r0, [r0, #16]
   1db30:	f7ff fe5a 	bl	1d7e8 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1db34:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1db36:	f7ff fec1 	bl	1d8bc <hal_timer_read_bsptimer>
   1db3a:	e7fb      	b.n	1db34 <hal_timer_read+0x18>
    assert(0);
   1db3c:	2300      	movs	r3, #0
   1db3e:	461a      	mov	r2, r3
   1db40:	4619      	mov	r1, r3
   1db42:	4618      	mov	r0, r3
   1db44:	f7fd fcf2 	bl	1b52c <__assert_func>
   1db48:	000297ac 	.word	0x000297ac

0001db4c <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1db4c:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1db4e:	2100      	movs	r1, #0
   1db50:	4608      	mov	r0, r1
   1db52:	f7ff ff37 	bl	1d9c4 <hal_timer_init>
    assert(rc == 0);
   1db56:	b920      	cbnz	r0, 1db62 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1db58:	4808      	ldr	r0, [pc, #32]	; (1db7c <nrf52_periph_create_timers+0x30>)
   1db5a:	f7fd ff11 	bl	1b980 <os_cputime_init>
    assert(rc == 0);
   1db5e:	b930      	cbnz	r0, 1db6e <nrf52_periph_create_timers+0x22>
#endif
}
   1db60:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1db62:	2300      	movs	r3, #0
   1db64:	461a      	mov	r2, r3
   1db66:	4619      	mov	r1, r3
   1db68:	4618      	mov	r0, r3
   1db6a:	f7fd fcdf 	bl	1b52c <__assert_func>
    assert(rc == 0);
   1db6e:	2300      	movs	r3, #0
   1db70:	461a      	mov	r2, r3
   1db72:	4619      	mov	r1, r3
   1db74:	4618      	mov	r0, r3
   1db76:	f7fd fcd9 	bl	1b52c <__assert_func>
   1db7a:	bf00      	nop
   1db7c:	000f4240 	.word	0x000f4240

0001db80 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1db80:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1db82:	4906      	ldr	r1, [pc, #24]	; (1db9c <nrf52_periph_create_i2c+0x1c>)
   1db84:	2001      	movs	r0, #1
   1db86:	f7fd f82b 	bl	1abe0 <hal_i2c_init>
    assert(rc == 0);
   1db8a:	b900      	cbnz	r0, 1db8e <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1db8c:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1db8e:	2300      	movs	r3, #0
   1db90:	461a      	mov	r2, r3
   1db92:	4619      	mov	r1, r3
   1db94:	4618      	mov	r0, r3
   1db96:	f7fd fcc9 	bl	1b52c <__assert_func>
   1db9a:	bf00      	nop
   1db9c:	000297c4 	.word	0x000297c4

0001dba0 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1dba0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1dba2:	2200      	movs	r2, #0
   1dba4:	4905      	ldr	r1, [pc, #20]	; (1dbbc <nrf52_periph_create_spi+0x1c>)
   1dba6:	4610      	mov	r0, r2
   1dba8:	f7fd fb4e 	bl	1b248 <hal_spi_init>
    assert(rc == 0);
   1dbac:	b900      	cbnz	r0, 1dbb0 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1dbae:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1dbb0:	2300      	movs	r3, #0
   1dbb2:	461a      	mov	r2, r3
   1dbb4:	4619      	mov	r1, r3
   1dbb6:	4618      	mov	r0, r3
   1dbb8:	f7fd fcb8 	bl	1b52c <__assert_func>
   1dbbc:	000297d0 	.word	0x000297d0

0001dbc0 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1dbc0:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1dbc2:	f7ff ffc3 	bl	1db4c <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1dbc6:	f7ff ffdb 	bl	1db80 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1dbca:	f7ff ffe9 	bl	1dba0 <nrf52_periph_create_spi>
}
   1dbce:	bd08      	pop	{r3, pc}

0001dbd0 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1dbd0:	4770      	bx	lr
	...

0001dbd4 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1dbd4:	4b08      	ldr	r3, [pc, #32]	; (1dbf8 <sensor_mgr_remove+0x24>)
   1dbd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1dbd8:	4282      	cmp	r2, r0
   1dbda:	d104      	bne.n	1dbe6 <sensor_mgr_remove+0x12>
   1dbdc:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1dbe0:	631a      	str	r2, [r3, #48]	; 0x30
   1dbe2:	4770      	bx	lr
   1dbe4:	461a      	mov	r2, r3
   1dbe6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1dbea:	4283      	cmp	r3, r0
   1dbec:	d1fa      	bne.n	1dbe4 <sensor_mgr_remove+0x10>
   1dbee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1dbf2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1dbf6:	4770      	bx	lr
   1dbf8:	2000def0 	.word	0x2000def0

0001dbfc <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1dbfc:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1dbfe:	6a03      	ldr	r3, [r0, #32]
   1dc00:	b993      	cbnz	r3, 1dc28 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1dc02:	4b15      	ldr	r3, [pc, #84]	; (1dc58 <sensor_mgr_insert+0x5c>)
   1dc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1dc06:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1dc08:	e002      	b.n	1dc10 <sensor_mgr_insert+0x14>
            prev = cursor;
   1dc0a:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1dc0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1dc10:	2b00      	cmp	r3, #0
   1dc12:	d1fa      	bne.n	1dc0a <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1dc14:	b1c9      	cbz	r1, 1dc4a <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1dc16:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1dc1a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1dc1e:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1dc22:	f85d 4b04 	ldr.w	r4, [sp], #4
   1dc26:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1dc28:	4b0b      	ldr	r3, [pc, #44]	; (1dc58 <sensor_mgr_insert+0x5c>)
   1dc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1dc2c:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1dc2e:	2b00      	cmp	r3, #0
   1dc30:	d0f0      	beq.n	1dc14 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1dc32:	6a1a      	ldr	r2, [r3, #32]
   1dc34:	2a00      	cmp	r2, #0
   1dc36:	d0ed      	beq.n	1dc14 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1dc38:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1dc3a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1dc3c:	1b12      	subs	r2, r2, r4
   1dc3e:	2a00      	cmp	r2, #0
   1dc40:	dbe8      	blt.n	1dc14 <sensor_mgr_insert+0x18>
        prev = cursor;
   1dc42:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1dc44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1dc48:	e7f1      	b.n	1dc2e <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1dc4a:	4b03      	ldr	r3, [pc, #12]	; (1dc58 <sensor_mgr_insert+0x5c>)
   1dc4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1dc4e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1dc52:	6318      	str	r0, [r3, #48]	; 0x30
   1dc54:	e7e5      	b.n	1dc22 <sensor_mgr_insert+0x26>
   1dc56:	bf00      	nop
   1dc58:	2000def0 	.word	0x2000def0

0001dc5c <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1dc5c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1dc5e:	fab0 f080 	clz	r0, r0
   1dc62:	0940      	lsrs	r0, r0, #5
   1dc64:	4770      	bx	lr
	...

0001dc68 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1dc68:	4b01      	ldr	r3, [pc, #4]	; (1dc70 <sensor_mgr_evq_set+0x8>)
   1dc6a:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1dc6c:	4770      	bx	lr
   1dc6e:	bf00      	nop
   1dc70:	2000def0 	.word	0x2000def0

0001dc74 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1dc74:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1dc78:	e9d1 2300 	ldrd	r2, r3, [r1]
   1dc7c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1dc80:	ea02 0b04 	and.w	fp, r2, r4
   1dc84:	ea03 0c05 	and.w	ip, r3, r5
   1dc88:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1dc8c:	ea0b 0200 	and.w	r2, fp, r0
   1dc90:	ea0c 0301 	and.w	r3, ip, r1
   1dc94:	4313      	orrs	r3, r2
}
   1dc96:	bf14      	ite	ne
   1dc98:	2001      	movne	r0, #1
   1dc9a:	2000      	moveq	r0, #0
   1dc9c:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1dca0:	4770      	bx	lr

0001dca2 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1dca2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1dca6:	b083      	sub	sp, #12
   1dca8:	4605      	mov	r5, r0
   1dcaa:	4689      	mov	r9, r1
   1dcac:	4690      	mov	r8, r2
   1dcae:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1dcb2:	790b      	ldrb	r3, [r1, #4]
   1dcb4:	2b01      	cmp	r3, #1
   1dcb6:	d013      	beq.n	1dce0 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1dcb8:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1dcba:	e000      	b.n	1dcbe <sensor_read_data_func+0x1c>
   1dcbc:	6924      	ldr	r4, [r4, #16]
   1dcbe:	b17c      	cbz	r4, 1dce0 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1dcc0:	e9d4 0100 	ldrd	r0, r1, [r4]
   1dcc4:	ea00 0206 	and.w	r2, r0, r6
   1dcc8:	ea01 0307 	and.w	r3, r1, r7
   1dccc:	4313      	orrs	r3, r2
   1dcce:	d0f5      	beq.n	1dcbc <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1dcd0:	68a3      	ldr	r3, [r4, #8]
   1dcd2:	68e1      	ldr	r1, [r4, #12]
   1dcd4:	e9cd 6700 	strd	r6, r7, [sp]
   1dcd8:	4642      	mov	r2, r8
   1dcda:	4628      	mov	r0, r5
   1dcdc:	4798      	blx	r3
   1dcde:	e7ed      	b.n	1dcbc <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1dce0:	f8d9 3000 	ldr.w	r3, [r9]
   1dce4:	b14b      	cbz	r3, 1dcfa <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1dce6:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1dcea:	e9cd 6700 	strd	r6, r7, [sp]
   1dcee:	4642      	mov	r2, r8
   1dcf0:	4628      	mov	r0, r5
   1dcf2:	4798      	blx	r3
    }

    return (0);
}
   1dcf4:	b003      	add	sp, #12
   1dcf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1dcfa:	2000      	movs	r0, #0
   1dcfc:	e7fa      	b.n	1dcf4 <sensor_read_data_func+0x52>
	...

0001dd00 <sensor_base_ts_update_event>:
{
   1dd00:	b530      	push	{r4, r5, lr}
   1dd02:	b087      	sub	sp, #28
    ticks = os_time_get();
   1dd04:	f7fe fe30 	bl	1c968 <os_time_get>
   1dd08:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1dd0a:	a901      	add	r1, sp, #4
   1dd0c:	a802      	add	r0, sp, #8
   1dd0e:	f7fe fe65 	bl	1c9dc <os_gettimeofday>
    if (rc) {
   1dd12:	b138      	cbz	r0, 1dd24 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1dd14:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1dd18:	4621      	mov	r1, r4
   1dd1a:	4809      	ldr	r0, [pc, #36]	; (1dd40 <sensor_base_ts_update_event+0x40>)
   1dd1c:	f7fd fdac 	bl	1b878 <os_callout_reset>
}
   1dd20:	b007      	add	sp, #28
   1dd22:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1dd24:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1dd28:	4d06      	ldr	r5, [pc, #24]	; (1dd44 <sensor_base_ts_update_event+0x44>)
   1dd2a:	ab06      	add	r3, sp, #24
   1dd2c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1dd30:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1dd34:	9b01      	ldr	r3, [sp, #4]
   1dd36:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1dd38:	f7fd fe28 	bl	1b98c <os_cputime_get32>
   1dd3c:	6168      	str	r0, [r5, #20]
   1dd3e:	e7eb      	b.n	1dd18 <sensor_base_ts_update_event+0x18>
   1dd40:	2000df24 	.word	0x2000df24
   1dd44:	2000df48 	.word	0x2000df48

0001dd48 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1dd48:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1dd4c:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1dd4e:	f7fd fe1d 	bl	1b98c <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1dd52:	4a0e      	ldr	r2, [pc, #56]	; (1dd8c <sensor_up_timestamp+0x44>)
   1dd54:	6955      	ldr	r5, [r2, #20]
   1dd56:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1dd58:	6460      	str	r0, [r4, #68]	; 0x44
   1dd5a:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1dd5c:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1dd60:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1dd62:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1dd64:	4b0a      	ldr	r3, [pc, #40]	; (1dd90 <sensor_up_timestamp+0x48>)
   1dd66:	fba3 c305 	umull	ip, r3, r3, r5
   1dd6a:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1dd6c:	eb10 0b03 	adds.w	fp, r0, r3
   1dd70:	f141 0c00 	adc.w	ip, r1, #0
   1dd74:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1dd78:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1dd7c:	4905      	ldr	r1, [pc, #20]	; (1dd94 <sensor_up_timestamp+0x4c>)
   1dd7e:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1dd82:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1dd84:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1dd86:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1dd8a:	bf00      	nop
   1dd8c:	2000df48 	.word	0x2000df48
   1dd90:	431bde83 	.word	0x431bde83
   1dd94:	000f4240 	.word	0x000f4240

0001dd98 <sensor_mgr_lock>:
{
   1dd98:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1dd9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dd9e:	4804      	ldr	r0, [pc, #16]	; (1ddb0 <sensor_mgr_lock+0x18>)
   1dda0:	f7fe fa5c 	bl	1c25c <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1dda4:	b108      	cbz	r0, 1ddaa <sensor_mgr_lock+0x12>
   1dda6:	2809      	cmp	r0, #9
   1dda8:	d000      	beq.n	1ddac <sensor_mgr_lock+0x14>
}
   1ddaa:	bd08      	pop	{r3, pc}
        return (0);
   1ddac:	2000      	movs	r0, #0
   1ddae:	e7fc      	b.n	1ddaa <sensor_mgr_lock+0x12>
   1ddb0:	2000def0 	.word	0x2000def0

0001ddb4 <sensor_mgr_unlock>:
{
   1ddb4:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1ddb6:	4802      	ldr	r0, [pc, #8]	; (1ddc0 <sensor_mgr_unlock+0xc>)
   1ddb8:	f7fe f9f4 	bl	1c1a4 <os_mutex_release>
}
   1ddbc:	bd08      	pop	{r3, pc}
   1ddbe:	bf00      	nop
   1ddc0:	2000def0 	.word	0x2000def0

0001ddc4 <sensor_mgr_evq_get>:
}
   1ddc4:	4b01      	ldr	r3, [pc, #4]	; (1ddcc <sensor_mgr_evq_get+0x8>)
   1ddc6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1ddc8:	4770      	bx	lr
   1ddca:	bf00      	nop
   1ddcc:	2000def0 	.word	0x2000def0

0001ddd0 <sensor_mgr_init>:
{
   1ddd0:	b570      	push	{r4, r5, r6, lr}
   1ddd2:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1ddd4:	f7fd ff68 	bl	1bca8 <os_eventq_dflt_get>
   1ddd8:	f7ff ff46 	bl	1dc68 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1dddc:	4b1c      	ldr	r3, [pc, #112]	; (1de50 <sensor_mgr_init+0x80>)
   1ddde:	9300      	str	r3, [sp, #0]
   1dde0:	4b1c      	ldr	r3, [pc, #112]	; (1de54 <sensor_mgr_init+0x84>)
   1dde2:	2218      	movs	r2, #24
   1dde4:	2105      	movs	r1, #5
   1dde6:	481c      	ldr	r0, [pc, #112]	; (1de58 <sensor_mgr_init+0x88>)
   1dde8:	f7fe f8e8 	bl	1bfbc <os_mempool_init>
    assert(rc == OS_OK);
   1ddec:	bb50      	cbnz	r0, 1de44 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1ddee:	f7ff ffe9 	bl	1ddc4 <sensor_mgr_evq_get>
   1ddf2:	4e1a      	ldr	r6, [pc, #104]	; (1de5c <sensor_mgr_init+0x8c>)
   1ddf4:	2300      	movs	r3, #0
   1ddf6:	4a1a      	ldr	r2, [pc, #104]	; (1de60 <sensor_mgr_init+0x90>)
   1ddf8:	4601      	mov	r1, r0
   1ddfa:	4630      	mov	r0, r6
   1ddfc:	f7fd fd10 	bl	1b820 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1de00:	ad04      	add	r5, sp, #16
   1de02:	a903      	add	r1, sp, #12
   1de04:	4628      	mov	r0, r5
   1de06:	f7fe fde9 	bl	1c9dc <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1de0a:	4c16      	ldr	r4, [pc, #88]	; (1de64 <sensor_mgr_init+0x94>)
   1de0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1de10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1de14:	9b03      	ldr	r3, [sp, #12]
   1de16:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1de18:	f7fd fdb8 	bl	1b98c <os_cputime_get32>
   1de1c:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1de1e:	f7ff ffd1 	bl	1ddc4 <sensor_mgr_evq_get>
   1de22:	4c11      	ldr	r4, [pc, #68]	; (1de68 <sensor_mgr_init+0x98>)
   1de24:	2300      	movs	r3, #0
   1de26:	4a11      	ldr	r2, [pc, #68]	; (1de6c <sensor_mgr_init+0x9c>)
   1de28:	4601      	mov	r1, r0
   1de2a:	4620      	mov	r0, r4
   1de2c:	f7fd fcf8 	bl	1b820 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1de30:	2180      	movs	r1, #128	; 0x80
   1de32:	4620      	mov	r0, r4
   1de34:	f7fd fd20 	bl	1b878 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1de38:	f1a6 000c 	sub.w	r0, r6, #12
   1de3c:	f7fe f9a8 	bl	1c190 <os_mutex_init>
}
   1de40:	b008      	add	sp, #32
   1de42:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1de44:	2300      	movs	r3, #0
   1de46:	461a      	mov	r2, r3
   1de48:	4619      	mov	r1, r3
   1de4a:	4618      	mov	r0, r3
   1de4c:	f7fd fb6e 	bl	1b52c <__assert_func>
   1de50:	000297d4 	.word	0x000297d4
   1de54:	2000d9ec 	.word	0x2000d9ec
   1de58:	2000da64 	.word	0x2000da64
   1de5c:	2000defc 	.word	0x2000defc
   1de60:	0001e03d 	.word	0x0001e03d
   1de64:	2000df48 	.word	0x2000df48
   1de68:	2000df24 	.word	0x2000df24
   1de6c:	0001dd01 	.word	0x0001dd01

0001de70 <sensor_pkg_init>:
{
   1de70:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1de72:	f7ff ffad 	bl	1ddd0 <sensor_mgr_init>
}
   1de76:	bd08      	pop	{r3, pc}

0001de78 <sensor_lock>:
{
   1de78:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1de7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1de7e:	3004      	adds	r0, #4
   1de80:	f7fe f9ec 	bl	1c25c <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1de84:	b108      	cbz	r0, 1de8a <sensor_lock+0x12>
   1de86:	2809      	cmp	r0, #9
   1de88:	d000      	beq.n	1de8c <sensor_lock+0x14>
}
   1de8a:	bd08      	pop	{r3, pc}
        return (0);
   1de8c:	2000      	movs	r0, #0
   1de8e:	e7fc      	b.n	1de8a <sensor_lock+0x12>

0001de90 <sensor_unlock>:
{
   1de90:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1de92:	3004      	adds	r0, #4
   1de94:	f7fe f986 	bl	1c1a4 <os_mutex_release>
}
   1de98:	bd08      	pop	{r3, pc}

0001de9a <sensor_update_nextrun>:
{
   1de9a:	b530      	push	{r4, r5, lr}
   1de9c:	b083      	sub	sp, #12
   1de9e:	4604      	mov	r4, r0
   1dea0:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1dea2:	a901      	add	r1, sp, #4
   1dea4:	6a00      	ldr	r0, [r0, #32]
   1dea6:	f7fe fdb5 	bl	1ca14 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1deaa:	4620      	mov	r0, r4
   1deac:	f7ff ffe4 	bl	1de78 <sensor_lock>
    sensor_mgr_remove(sensor);
   1deb0:	4620      	mov	r0, r4
   1deb2:	f7ff fe8f 	bl	1dbd4 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1deb6:	9b01      	ldr	r3, [sp, #4]
   1deb8:	441d      	add	r5, r3
   1deba:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1debc:	4620      	mov	r0, r4
   1debe:	f7ff fe9d 	bl	1dbfc <sensor_mgr_insert>
    sensor_unlock(sensor);
   1dec2:	4620      	mov	r0, r4
   1dec4:	f7ff ffe4 	bl	1de90 <sensor_unlock>
}
   1dec8:	b003      	add	sp, #12
   1deca:	bd30      	pop	{r4, r5, pc}

0001decc <sensor_calc_nextrun_delta>:
{
   1decc:	b538      	push	{r3, r4, r5, lr}
   1dece:	4605      	mov	r5, r0
   1ded0:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1ded2:	f7ff ffd1 	bl	1de78 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1ded6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1ded8:	1b0c      	subs	r4, r1, r4
   1deda:	d404      	bmi.n	1dee6 <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1dedc:	4628      	mov	r0, r5
   1dede:	f7ff ffd7 	bl	1de90 <sensor_unlock>
}
   1dee2:	4620      	mov	r0, r4
   1dee4:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1dee6:	2400      	movs	r4, #0
   1dee8:	e7f8      	b.n	1dedc <sensor_calc_nextrun_delta+0x10>
	...

0001deec <sensor_find_min_nextrun_sensor>:
{
   1deec:	b570      	push	{r4, r5, r6, lr}
   1deee:	4606      	mov	r6, r0
   1def0:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1def2:	f7ff ff51 	bl	1dd98 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1def6:	4b05      	ldr	r3, [pc, #20]	; (1df0c <sensor_find_min_nextrun_sensor+0x20>)
   1def8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1defa:	4631      	mov	r1, r6
   1defc:	4620      	mov	r0, r4
   1defe:	f7ff ffe5 	bl	1decc <sensor_calc_nextrun_delta>
   1df02:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1df04:	f7ff ff56 	bl	1ddb4 <sensor_mgr_unlock>
}
   1df08:	4620      	mov	r0, r4
   1df0a:	bd70      	pop	{r4, r5, r6, pc}
   1df0c:	2000def0 	.word	0x2000def0

0001df10 <sensor_mgr_register>:
{
   1df10:	b538      	push	{r3, r4, r5, lr}
   1df12:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1df14:	f7ff ff40 	bl	1dd98 <sensor_mgr_lock>
    if (rc != 0) {
   1df18:	4604      	mov	r4, r0
   1df1a:	b108      	cbz	r0, 1df20 <sensor_mgr_register+0x10>
}
   1df1c:	4620      	mov	r0, r4
   1df1e:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1df20:	4628      	mov	r0, r5
   1df22:	f7ff ffa9 	bl	1de78 <sensor_lock>
    if (rc != 0) {
   1df26:	4604      	mov	r4, r0
   1df28:	2800      	cmp	r0, #0
   1df2a:	d1f7      	bne.n	1df1c <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1df2c:	4628      	mov	r0, r5
   1df2e:	f7ff fe65 	bl	1dbfc <sensor_mgr_insert>
    sensor_unlock(sensor);
   1df32:	4628      	mov	r0, r5
   1df34:	f7ff ffac 	bl	1de90 <sensor_unlock>
    sensor_mgr_unlock();
   1df38:	f7ff ff3c 	bl	1ddb4 <sensor_mgr_unlock>
    return (0);
   1df3c:	e7ee      	b.n	1df1c <sensor_mgr_register+0xc>

0001df3e <sensor_init>:
{
   1df3e:	b538      	push	{r3, r4, r5, lr}
   1df40:	4604      	mov	r4, r0
   1df42:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1df44:	2288      	movs	r2, #136	; 0x88
   1df46:	2100      	movs	r1, #0
   1df48:	f7fe fef3 	bl	1cd32 <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1df4c:	1d20      	adds	r0, r4, #4
   1df4e:	f7fe f91f 	bl	1c190 <os_mutex_init>
    if (rc != 0) {
   1df52:	4603      	mov	r3, r0
   1df54:	b900      	cbnz	r0, 1df58 <sensor_init+0x1a>
    sensor->s_dev = dev;
   1df56:	6025      	str	r5, [r4, #0]
}
   1df58:	4618      	mov	r0, r3
   1df5a:	bd38      	pop	{r3, r4, r5, pc}

0001df5c <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1df5c:	b530      	push	{r4, r5, lr}
   1df5e:	b089      	sub	sp, #36	; 0x24
   1df60:	4604      	mov	r4, r0
   1df62:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1df66:	f7ff ff87 	bl	1de78 <sensor_lock>
    if (rc) {
   1df6a:	4605      	mov	r5, r0
   1df6c:	b9f8      	cbnz	r0, 1dfae <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1df6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1df70:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1df72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1df74:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1df76:	a904      	add	r1, sp, #16
   1df78:	4620      	mov	r0, r4
   1df7a:	f7ff fe7b 	bl	1dc74 <sensor_mgr_match_bytype>
   1df7e:	b1e0      	cbz	r0, 1dfba <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1df80:	4620      	mov	r0, r4
   1df82:	f7ff fee1 	bl	1dd48 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1df86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1df88:	6819      	ldr	r1, [r3, #0]
   1df8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1df8c:	9302      	str	r3, [sp, #8]
   1df8e:	ab06      	add	r3, sp, #24
   1df90:	9301      	str	r3, [sp, #4]
   1df92:	4b0b      	ldr	r3, [pc, #44]	; (1dfc0 <sensor_read+0x64>)
   1df94:	9300      	str	r3, [sp, #0]
   1df96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1df9a:	4620      	mov	r0, r4
   1df9c:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1df9e:	4605      	mov	r5, r0
   1dfa0:	b128      	cbz	r0, 1dfae <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1dfa2:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1dfa4:	b11b      	cbz	r3, 1dfae <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1dfa6:	4602      	mov	r2, r0
   1dfa8:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1dfaa:	4620      	mov	r0, r4
   1dfac:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1dfae:	4620      	mov	r0, r4
   1dfb0:	f7ff ff6e 	bl	1de90 <sensor_unlock>
    return (rc);
}
   1dfb4:	4628      	mov	r0, r5
   1dfb6:	b009      	add	sp, #36	; 0x24
   1dfb8:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1dfba:	f06f 0503 	mvn.w	r5, #3
   1dfbe:	e7f6      	b.n	1dfae <sensor_read+0x52>
   1dfc0:	0001dca3 	.word	0x0001dca3

0001dfc4 <sensor_mgr_poll_bytype>:
{
   1dfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dfc6:	b085      	sub	sp, #20
   1dfc8:	4616      	mov	r6, r2
   1dfca:	461f      	mov	r7, r3
   1dfcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1dfce:	b10c      	cbz	r4, 1dfd4 <sensor_mgr_poll_bytype+0x10>
   1dfd0:	8aa3      	ldrh	r3, [r4, #20]
   1dfd2:	b9cb      	cbnz	r3, 1e008 <sensor_mgr_poll_bytype+0x44>
   1dfd4:	4632      	mov	r2, r6
   1dfd6:	463b      	mov	r3, r7
   1dfd8:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1dfda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dfde:	9102      	str	r1, [sp, #8]
   1dfe0:	2100      	movs	r1, #0
   1dfe2:	9101      	str	r1, [sp, #4]
   1dfe4:	9100      	str	r1, [sp, #0]
   1dfe6:	f7ff ffb9 	bl	1df5c <sensor_read>
        sensor_lock(sensor);
   1dfea:	4628      	mov	r0, r5
   1dfec:	f7ff ff44 	bl	1de78 <sensor_lock>
        if (stt) {
   1dff0:	b12c      	cbz	r4, 1dffe <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1dff2:	8aa3      	ldrh	r3, [r4, #20]
   1dff4:	b91b      	cbnz	r3, 1dffe <sensor_mgr_poll_bytype+0x3a>
   1dff6:	8a63      	ldrh	r3, [r4, #18]
   1dff8:	b10b      	cbz	r3, 1dffe <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1dffa:	3b01      	subs	r3, #1
   1dffc:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1dffe:	4628      	mov	r0, r5
   1e000:	f7ff ff46 	bl	1de90 <sensor_unlock>
}
   1e004:	b005      	add	sp, #20
   1e006:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1e008:	3b01      	subs	r3, #1
   1e00a:	82a3      	strh	r3, [r4, #20]
}
   1e00c:	e7fa      	b.n	1e004 <sensor_mgr_poll_bytype+0x40>

0001e00e <sensor_poll_per_type_trait>:
{
   1e00e:	b570      	push	{r4, r5, r6, lr}
   1e010:	b082      	sub	sp, #8
   1e012:	4605      	mov	r5, r0
   1e014:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1e016:	f7ff ff2f 	bl	1de78 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1e01a:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1e01c:	e007      	b.n	1e02e <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1e01e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1e022:	9601      	str	r6, [sp, #4]
   1e024:	9400      	str	r4, [sp, #0]
   1e026:	4628      	mov	r0, r5
   1e028:	f7ff ffcc 	bl	1dfc4 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1e02c:	6a24      	ldr	r4, [r4, #32]
   1e02e:	2c00      	cmp	r4, #0
   1e030:	d1f5      	bne.n	1e01e <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1e032:	4628      	mov	r0, r5
   1e034:	f7ff ff2c 	bl	1de90 <sensor_unlock>
}
   1e038:	b002      	add	sp, #8
   1e03a:	bd70      	pop	{r4, r5, r6, pc}

0001e03c <sensor_mgr_wakeup_event>:
{
   1e03c:	b570      	push	{r4, r5, r6, lr}
   1e03e:	b084      	sub	sp, #16
    now = os_time_get();
   1e040:	f7fe fc92 	bl	1c968 <os_time_get>
   1e044:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1e046:	f7ff fea7 	bl	1dd98 <sensor_mgr_lock>
   1e04a:	e012      	b.n	1e072 <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1e04c:	4620      	mov	r0, r4
   1e04e:	f7ff ff1f 	bl	1de90 <sensor_unlock>
            sensor_mgr_unlock();
   1e052:	f7ff feaf 	bl	1ddb4 <sensor_mgr_unlock>
}
   1e056:	b004      	add	sp, #16
   1e058:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1e05a:	4632      	mov	r2, r6
   1e05c:	4629      	mov	r1, r5
   1e05e:	4620      	mov	r0, r4
   1e060:	f7ff ffd5 	bl	1e00e <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1e064:	4629      	mov	r1, r5
   1e066:	4620      	mov	r0, r4
   1e068:	f7ff ff17 	bl	1de9a <sensor_update_nextrun>
        sensor_unlock(cursor);
   1e06c:	4620      	mov	r0, r4
   1e06e:	f7ff ff0f 	bl	1de90 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1e072:	a903      	add	r1, sp, #12
   1e074:	4628      	mov	r0, r5
   1e076:	f7ff ff39 	bl	1deec <sensor_find_min_nextrun_sensor>
   1e07a:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1e07c:	f7ff fefc 	bl	1de78 <sensor_lock>
        if (!cursor->s_poll_rate) {
   1e080:	6a23      	ldr	r3, [r4, #32]
   1e082:	2b00      	cmp	r3, #0
   1e084:	d0e2      	beq.n	1e04c <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1e086:	9e03      	ldr	r6, [sp, #12]
   1e088:	b96e      	cbnz	r6, 1e0a6 <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1e08a:	4620      	mov	r0, r4
   1e08c:	f7ff fde6 	bl	1dc5c <sensor_type_traits_empty>
   1e090:	2800      	cmp	r0, #0
   1e092:	d0e2      	beq.n	1e05a <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1e094:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1e098:	9501      	str	r5, [sp, #4]
   1e09a:	2100      	movs	r1, #0
   1e09c:	9100      	str	r1, [sp, #0]
   1e09e:	4620      	mov	r0, r4
   1e0a0:	f7ff ff90 	bl	1dfc4 <sensor_mgr_poll_bytype>
   1e0a4:	e7de      	b.n	1e064 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1e0a6:	f7ff fe85 	bl	1ddb4 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1e0aa:	9903      	ldr	r1, [sp, #12]
   1e0ac:	4801      	ldr	r0, [pc, #4]	; (1e0b4 <sensor_mgr_wakeup_event+0x78>)
   1e0ae:	f7fd fbe3 	bl	1b878 <os_callout_reset>
   1e0b2:	e7d0      	b.n	1e056 <sensor_mgr_wakeup_event+0x1a>
   1e0b4:	2000defc 	.word	0x2000defc

0001e0b8 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1e0b8:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1e0ba:	2101      	movs	r1, #1
   1e0bc:	4806      	ldr	r0, [pc, #24]	; (1e0d8 <init_sensor_coap+0x20>)
   1e0be:	f7fe faf1 	bl	1c6a4 <os_sem_init>
    assert(rc == OS_OK);
   1e0c2:	b918      	cbnz	r0, 1e0cc <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1e0c4:	4b05      	ldr	r3, [pc, #20]	; (1e0dc <init_sensor_coap+0x24>)
   1e0c6:	2201      	movs	r2, #1
   1e0c8:	701a      	strb	r2, [r3, #0]
}
   1e0ca:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1e0cc:	2300      	movs	r3, #0
   1e0ce:	461a      	mov	r2, r3
   1e0d0:	4619      	mov	r1, r3
   1e0d2:	4618      	mov	r0, r3
   1e0d4:	f7fd fa2a 	bl	1b52c <__assert_func>
   1e0d8:	2000da80 	.word	0x2000da80
   1e0dc:	2000da88 	.word	0x2000da88

0001e0e0 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1e0e0:	4b04      	ldr	r3, [pc, #16]	; (1e0f4 <is_sensor_node+0x14>)
   1e0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e0e6:	4313      	orrs	r3, r2
   1e0e8:	d101      	bne.n	1e0ee <is_sensor_node+0xe>
    return false;
   1e0ea:	2000      	movs	r0, #0
}
   1e0ec:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1e0ee:	2001      	movs	r0, #1
   1e0f0:	4770      	bx	lr
   1e0f2:	bf00      	nop
   1e0f4:	2000daa0 	.word	0x2000daa0

0001e0f8 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1e0f8:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1e0fa:	4b16      	ldr	r3, [pc, #88]	; (1e154 <get_hardware_id+0x5c>)
   1e0fc:	681b      	ldr	r3, [r3, #0]
   1e0fe:	b10b      	cbz	r3, 1e104 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1e100:	4815      	ldr	r0, [pc, #84]	; (1e158 <get_hardware_id+0x60>)
   1e102:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1e104:	f000 fcee 	bl	1eae4 <hal_bsp_hw_id_len>
   1e108:	4b12      	ldr	r3, [pc, #72]	; (1e154 <get_hardware_id+0x5c>)
   1e10a:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1e10c:	280b      	cmp	r0, #11
   1e10e:	d914      	bls.n	1e13a <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1e110:	210c      	movs	r1, #12
   1e112:	4811      	ldr	r0, [pc, #68]	; (1e158 <get_hardware_id+0x60>)
   1e114:	f000 fce8 	bl	1eae8 <hal_bsp_hw_id>
   1e118:	4b0e      	ldr	r3, [pc, #56]	; (1e154 <get_hardware_id+0x5c>)
   1e11a:	6018      	str	r0, [r3, #0]
   1e11c:	2800      	cmp	r0, #0
   1e11e:	dd12      	ble.n	1e146 <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1e120:	490e      	ldr	r1, [pc, #56]	; (1e15c <get_hardware_id+0x64>)
   1e122:	480f      	ldr	r0, [pc, #60]	; (1e160 <get_hardware_id+0x68>)
   1e124:	f7fc fb3a 	bl	1a79c <console_printf>
   1e128:	4b0a      	ldr	r3, [pc, #40]	; (1e154 <get_hardware_id+0x5c>)
   1e12a:	6819      	ldr	r1, [r3, #0]
   1e12c:	480a      	ldr	r0, [pc, #40]	; (1e158 <get_hardware_id+0x60>)
   1e12e:	f7fc fac5 	bl	1a6bc <console_dump>
   1e132:	480c      	ldr	r0, [pc, #48]	; (1e164 <get_hardware_id+0x6c>)
   1e134:	f7fc fb32 	bl	1a79c <console_printf>
   1e138:	e7e2      	b.n	1e100 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1e13a:	2300      	movs	r3, #0
   1e13c:	461a      	mov	r2, r3
   1e13e:	4619      	mov	r1, r3
   1e140:	4618      	mov	r0, r3
   1e142:	f7fd f9f3 	bl	1b52c <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1e146:	2300      	movs	r3, #0
   1e148:	461a      	mov	r2, r3
   1e14a:	4619      	mov	r1, r3
   1e14c:	4618      	mov	r0, r3
   1e14e:	f7fd f9ed 	bl	1b52c <__assert_func>
   1e152:	bf00      	nop
   1e154:	2000da98 	.word	0x2000da98
   1e158:	2000da8c 	.word	0x2000da8c
   1e15c:	00029878 	.word	0x00029878
   1e160:	00029830 	.word	0x00029830
   1e164:	00029990 	.word	0x00029990

0001e168 <is_collector_node>:
bool is_collector_node(void) {
   1e168:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1e16a:	f7ff ffc5 	bl	1e0f8 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1e16e:	220c      	movs	r2, #12
   1e170:	4903      	ldr	r1, [pc, #12]	; (1e180 <is_collector_node+0x18>)
   1e172:	f7fe fdad 	bl	1ccd0 <memcmp>
   1e176:	b108      	cbz	r0, 1e17c <is_collector_node+0x14>
    return false; 
   1e178:	2000      	movs	r0, #0
}
   1e17a:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1e17c:	2001      	movs	r0, #1
   1e17e:	e7fc      	b.n	1e17a <is_collector_node+0x12>
   1e180:	000297e8 	.word	0x000297e8

0001e184 <is_standalone_node>:
bool is_standalone_node(void) {
   1e184:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1e186:	f7ff ffef 	bl	1e168 <is_collector_node>
   1e18a:	b928      	cbnz	r0, 1e198 <is_standalone_node+0x14>
   1e18c:	4604      	mov	r4, r0
   1e18e:	f7ff ffa7 	bl	1e0e0 <is_sensor_node>
   1e192:	b910      	cbnz	r0, 1e19a <is_standalone_node+0x16>
   1e194:	2401      	movs	r4, #1
   1e196:	e000      	b.n	1e19a <is_standalone_node+0x16>
    return false;
   1e198:	2400      	movs	r4, #0
}
   1e19a:	4620      	mov	r0, r4
   1e19c:	bd10      	pop	{r4, pc}
	...

0001e1a0 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1e1a0:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1e1a2:	2400      	movs	r4, #0
   1e1a4:	2c04      	cmp	r4, #4
   1e1a6:	dc15      	bgt.n	1e1d4 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1e1a8:	4b23      	ldr	r3, [pc, #140]	; (1e238 <sensor_network_init+0x98>)
   1e1aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1e1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   1e1b2:	4922      	ldr	r1, [pc, #136]	; (1e23c <sensor_network_init+0x9c>)
   1e1b4:	4822      	ldr	r0, [pc, #136]	; (1e240 <sensor_network_init+0xa0>)
   1e1b6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1e1ba:	f000 fcaf 	bl	1eb1c <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1e1be:	3001      	adds	r0, #1
   1e1c0:	280b      	cmp	r0, #11
   1e1c2:	dc01      	bgt.n	1e1c8 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1e1c4:	3401      	adds	r4, #1
   1e1c6:	e7ed      	b.n	1e1a4 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1e1c8:	2300      	movs	r3, #0
   1e1ca:	461a      	mov	r2, r3
   1e1cc:	4619      	mov	r1, r3
   1e1ce:	4618      	mov	r0, r3
   1e1d0:	f7fd f9ac 	bl	1b52c <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1e1d4:	f7ff ff90 	bl	1e0f8 <get_hardware_id>
   1e1d8:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1e1da:	2400      	movs	r4, #0
   1e1dc:	2c04      	cmp	r4, #4
   1e1de:	dc19      	bgt.n	1e214 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1e1e0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1e1e4:	0093      	lsls	r3, r2, #2
   1e1e6:	220c      	movs	r2, #12
   1e1e8:	4916      	ldr	r1, [pc, #88]	; (1e244 <sensor_network_init+0xa4>)
   1e1ea:	4419      	add	r1, r3
   1e1ec:	4628      	mov	r0, r5
   1e1ee:	f7fe fd6f 	bl	1ccd0 <memcmp>
   1e1f2:	b108      	cbz	r0, 1e1f8 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1e1f4:	3401      	adds	r4, #1
   1e1f6:	e7f1      	b.n	1e1dc <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1e1f8:	4b0f      	ldr	r3, [pc, #60]	; (1e238 <sensor_network_init+0x98>)
   1e1fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1e1fe:	e9d3 0100 	ldrd	r0, r1, [r3]
   1e202:	4b11      	ldr	r3, [pc, #68]	; (1e248 <sensor_network_init+0xa8>)
   1e204:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1e208:	1c63      	adds	r3, r4, #1
   1e20a:	4a10      	ldr	r2, [pc, #64]	; (1e24c <sensor_network_init+0xac>)
   1e20c:	4910      	ldr	r1, [pc, #64]	; (1e250 <sensor_network_init+0xb0>)
   1e20e:	4811      	ldr	r0, [pc, #68]	; (1e254 <sensor_network_init+0xb4>)
   1e210:	f7fc fac4 	bl	1a79c <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1e214:	f7ff ffa8 	bl	1e168 <is_collector_node>
   1e218:	b940      	cbnz	r0, 1e22c <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1e21a:	f7ff ffb3 	bl	1e184 <is_standalone_node>
   1e21e:	b150      	cbz	r0, 1e236 <sensor_network_init+0x96>
   1e220:	4a0a      	ldr	r2, [pc, #40]	; (1e24c <sensor_network_init+0xac>)
   1e222:	490b      	ldr	r1, [pc, #44]	; (1e250 <sensor_network_init+0xb0>)
   1e224:	480c      	ldr	r0, [pc, #48]	; (1e258 <sensor_network_init+0xb8>)
   1e226:	f7fc fab9 	bl	1a79c <console_printf>
}
   1e22a:	e004      	b.n	1e236 <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1e22c:	4a07      	ldr	r2, [pc, #28]	; (1e24c <sensor_network_init+0xac>)
   1e22e:	4908      	ldr	r1, [pc, #32]	; (1e250 <sensor_network_init+0xb0>)
   1e230:	480a      	ldr	r0, [pc, #40]	; (1e25c <sensor_network_init+0xbc>)
   1e232:	f7fc fab3 	bl	1a79c <console_printf>
}
   1e236:	bd38      	pop	{r3, r4, r5, pc}
   1e238:	00029890 	.word	0x00029890
   1e23c:	00029838 	.word	0x00029838
   1e240:	20000130 	.word	0x20000130
   1e244:	000297f4 	.word	0x000297f4
   1e248:	2000daa0 	.word	0x2000daa0
   1e24c:	00029840 	.word	0x00029840
   1e250:	00029878 	.word	0x00029878
   1e254:	00029848 	.word	0x00029848
   1e258:	00029868 	.word	0x00029868
   1e25c:	00029858 	.word	0x00029858

0001e260 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1e260:	b530      	push	{r4, r5, lr}
   1e262:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1e264:	2200      	movs	r2, #0
   1e266:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e26a:	4810      	ldr	r0, [pc, #64]	; (1e2ac <config_device+0x4c>)
   1e26c:	f7fd fc2c 	bl	1bac8 <os_dev_open>
    assert(dev != NULL);
   1e270:	b178      	cbz	r0, 1e292 <config_device+0x32>
   1e272:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1e274:	4668      	mov	r0, sp
   1e276:	f000 f86c 	bl	1e352 <temp_stub_default_cfg>
    assert(rc == 0);
   1e27a:	b980      	cbnz	r0, 1e29e <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1e27c:	4669      	mov	r1, sp
   1e27e:	4620      	mov	r0, r4
   1e280:	f000 f900 	bl	1e484 <temp_stub_config>
   1e284:	4605      	mov	r5, r0
    os_dev_close(dev);
   1e286:	4620      	mov	r0, r4
   1e288:	f7fd fc40 	bl	1bb0c <os_dev_close>
    return rc;
}
   1e28c:	4628      	mov	r0, r5
   1e28e:	b003      	add	sp, #12
   1e290:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1e292:	2300      	movs	r3, #0
   1e294:	461a      	mov	r2, r3
   1e296:	4619      	mov	r1, r3
   1e298:	4618      	mov	r0, r3
   1e29a:	f7fd f947 	bl	1b52c <__assert_func>
    assert(rc == 0);
   1e29e:	2300      	movs	r3, #0
   1e2a0:	461a      	mov	r2, r3
   1e2a2:	4619      	mov	r1, r3
   1e2a4:	4618      	mov	r0, r3
   1e2a6:	f7fd f941 	bl	1b52c <__assert_func>
   1e2aa:	bf00      	nop
   1e2ac:	000298b8 	.word	0x000298b8

0001e2b0 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1e2b0:	b510      	push	{r4, lr}
   1e2b2:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1e2b4:	4c10      	ldr	r4, [pc, #64]	; (1e2f8 <temp_stub_create+0x48>)
   1e2b6:	4621      	mov	r1, r4
   1e2b8:	4810      	ldr	r0, [pc, #64]	; (1e2fc <temp_stub_create+0x4c>)
   1e2ba:	f7fc fa6f 	bl	1a79c <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1e2be:	4b10      	ldr	r3, [pc, #64]	; (1e300 <temp_stub_create+0x50>)
   1e2c0:	9301      	str	r3, [sp, #4]
   1e2c2:	4b10      	ldr	r3, [pc, #64]	; (1e304 <temp_stub_create+0x54>)
   1e2c4:	9300      	str	r3, [sp, #0]
   1e2c6:	2300      	movs	r3, #0
   1e2c8:	2201      	movs	r2, #1
   1e2ca:	4621      	mov	r1, r4
   1e2cc:	480e      	ldr	r0, [pc, #56]	; (1e308 <temp_stub_create+0x58>)
   1e2ce:	f7fd fbb5 	bl	1ba3c <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1e2d2:	b920      	cbnz	r0, 1e2de <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1e2d4:	f7ff ffc4 	bl	1e260 <config_device>
    assert(rc == 0);
   1e2d8:	b938      	cbnz	r0, 1e2ea <temp_stub_create+0x3a>
}
   1e2da:	b002      	add	sp, #8
   1e2dc:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1e2de:	2300      	movs	r3, #0
   1e2e0:	461a      	mov	r2, r3
   1e2e2:	4619      	mov	r1, r3
   1e2e4:	4618      	mov	r0, r3
   1e2e6:	f7fd f921 	bl	1b52c <__assert_func>
    assert(rc == 0);
   1e2ea:	2300      	movs	r3, #0
   1e2ec:	461a      	mov	r2, r3
   1e2ee:	4619      	mov	r1, r3
   1e2f0:	4618      	mov	r0, r3
   1e2f2:	f7fd f91b 	bl	1b52c <__assert_func>
   1e2f6:	bf00      	nop
   1e2f8:	000298b8 	.word	0x000298b8
   1e2fc:	000298c4 	.word	0x000298c4
   1e300:	2000dae0 	.word	0x2000dae0
   1e304:	0001e361 	.word	0x0001e361
   1e308:	2000daf8 	.word	0x2000daf8

0001e30c <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1e30c:	2000      	movs	r0, #0
   1e30e:	4770      	bx	lr

0001e310 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1e310:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1e314:	2100      	movs	r1, #0
   1e316:	ea50 0301 	orrs.w	r3, r0, r1
   1e31a:	d004      	beq.n	1e326 <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1e31c:	9b00      	ldr	r3, [sp, #0]
   1e31e:	2201      	movs	r2, #1
   1e320:	701a      	strb	r2, [r3, #0]
    return (0);
   1e322:	2000      	movs	r0, #0
   1e324:	4770      	bx	lr
err:
    return (rc);
   1e326:	f06f 0001 	mvn.w	r0, #1
}
   1e32a:	4770      	bx	lr

0001e32c <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1e32c:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1e32e:	b120      	cbz	r0, 1e33a <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1e330:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1e334:	d007      	beq.n	1e346 <temp_stub_open+0x1a>
}
   1e336:	2000      	movs	r0, #0
   1e338:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1e33a:	2300      	movs	r3, #0
   1e33c:	461a      	mov	r2, r3
   1e33e:	4619      	mov	r1, r3
   1e340:	4618      	mov	r0, r3
   1e342:	f7fd f8f3 	bl	1b52c <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1e346:	2300      	movs	r3, #0
   1e348:	461a      	mov	r2, r3
   1e34a:	4619      	mov	r1, r3
   1e34c:	4618      	mov	r0, r3
   1e34e:	f7fd f8ed 	bl	1b52c <__assert_func>

0001e352 <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1e352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e356:	2300      	movs	r3, #0
   1e358:	e9c0 2300 	strd	r2, r3, [r0]
}
   1e35c:	2000      	movs	r0, #0
   1e35e:	4770      	bx	lr

0001e360 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1e360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1e362:	b379      	cbz	r1, 1e3c4 <temp_stub_init+0x64>
   1e364:	460d      	mov	r5, r1
   1e366:	b380      	cbz	r0, 1e3ca <temp_stub_init+0x6a>
   1e368:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1e36a:	30b0      	adds	r0, #176	; 0xb0
   1e36c:	f7ff fff1 	bl	1e352 <temp_stub_default_cfg>
    if (rc) { goto err; }
   1e370:	4603      	mov	r3, r0
   1e372:	b108      	cbz	r0, 1e378 <temp_stub_init+0x18>
}
   1e374:	4618      	mov	r0, r3
   1e376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1e378:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1e37c:	4621      	mov	r1, r4
   1e37e:	4630      	mov	r0, r6
   1e380:	f7ff fddd 	bl	1df3e <sensor_init>
    if (rc != 0) { goto err; }
   1e384:	4603      	mov	r3, r0
   1e386:	2800      	cmp	r0, #0
   1e388:	d1f4      	bne.n	1e374 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1e38a:	4b11      	ldr	r3, [pc, #68]	; (1e3d0 <temp_stub_init+0x70>)
   1e38c:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1e38e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1e392:	2300      	movs	r3, #0
   1e394:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1e398:	682a      	ldr	r2, [r5, #0]
   1e39a:	686f      	ldr	r7, [r5, #4]
   1e39c:	68a8      	ldr	r0, [r5, #8]
   1e39e:	68e9      	ldr	r1, [r5, #12]
   1e3a0:	6722      	str	r2, [r4, #112]	; 0x70
   1e3a2:	6767      	str	r7, [r4, #116]	; 0x74
   1e3a4:	67a0      	str	r0, [r4, #120]	; 0x78
   1e3a6:	67e1      	str	r1, [r4, #124]	; 0x7c
   1e3a8:	692a      	ldr	r2, [r5, #16]
   1e3aa:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1e3ae:	4630      	mov	r0, r6
   1e3b0:	f7ff fdae 	bl	1df10 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1e3b4:	4603      	mov	r3, r0
   1e3b6:	2800      	cmp	r0, #0
   1e3b8:	d1dc      	bne.n	1e374 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1e3ba:	4a06      	ldr	r2, [pc, #24]	; (1e3d4 <temp_stub_init+0x74>)
   1e3bc:	6022      	str	r2, [r4, #0]
   1e3be:	4a06      	ldr	r2, [pc, #24]	; (1e3d8 <temp_stub_init+0x78>)
   1e3c0:	60e2      	str	r2, [r4, #12]
    return (0);
   1e3c2:	e7d7      	b.n	1e374 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1e3c4:	f06f 0308 	mvn.w	r3, #8
   1e3c8:	e7d4      	b.n	1e374 <temp_stub_init+0x14>
   1e3ca:	f06f 0308 	mvn.w	r3, #8
   1e3ce:	e7d1      	b.n	1e374 <temp_stub_init+0x14>
   1e3d0:	000298d4 	.word	0x000298d4
   1e3d4:	0001e32d 	.word	0x0001e32d
   1e3d8:	0001e30d 	.word	0x0001e30d

0001e3dc <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1e3dc:	b538      	push	{r3, r4, r5, lr}
   1e3de:	460d      	mov	r5, r1
   1e3e0:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1e3e2:	4808      	ldr	r0, [pc, #32]	; (1e404 <temp_stub_get_raw_temperature+0x28>)
   1e3e4:	f7fc f9da 	bl	1a79c <console_printf>
    assert(temp_sum);
   1e3e8:	b134      	cbz	r4, 1e3f8 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1e3ea:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1e3ee:	fb01 f105 	mul.w	r1, r1, r5
   1e3f2:	6021      	str	r1, [r4, #0]
}
   1e3f4:	2000      	movs	r0, #0
   1e3f6:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1e3f8:	2300      	movs	r3, #0
   1e3fa:	461a      	mov	r2, r3
   1e3fc:	4619      	mov	r1, r3
   1e3fe:	4618      	mov	r0, r3
   1e400:	f7fd f894 	bl	1b52c <__assert_func>
   1e404:	000298fc 	.word	0x000298fc

0001e408 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1e408:	b530      	push	{r4, r5, lr}
   1e40a:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1e40c:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1e410:	2500      	movs	r5, #0
   1e412:	ea54 0305 	orrs.w	r3, r4, r5
   1e416:	d032      	beq.n	1e47e <temp_stub_sensor_read+0x76>
   1e418:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1e41a:	6805      	ldr	r5, [r0, #0]
   1e41c:	b165      	cbz	r5, 1e438 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1e41e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e422:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1e424:	2200      	movs	r2, #0
   1e426:	4611      	mov	r1, r2
   1e428:	4628      	mov	r0, r5
   1e42a:	f7ff ff7f 	bl	1e32c <temp_stub_open>
        if (rc) { goto err; }
   1e42e:	4603      	mov	r3, r0
   1e430:	b140      	cbz	r0, 1e444 <temp_stub_sensor_read+0x3c>
}
   1e432:	4618      	mov	r0, r3
   1e434:	b007      	add	sp, #28
   1e436:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1e438:	2300      	movs	r3, #0
   1e43a:	461a      	mov	r2, r3
   1e43c:	4619      	mov	r1, r3
   1e43e:	4618      	mov	r0, r3
   1e440:	f7fd f874 	bl	1b52c <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1e444:	2300      	movs	r3, #0
   1e446:	aa03      	add	r2, sp, #12
   1e448:	2101      	movs	r1, #1
   1e44a:	4628      	mov	r0, r5
   1e44c:	f7ff ffc6 	bl	1e3dc <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1e450:	4603      	mov	r3, r0
   1e452:	2800      	cmp	r0, #0
   1e454:	d1ed      	bne.n	1e432 <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1e456:	9a03      	ldr	r2, [sp, #12]
   1e458:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1e45a:	2201      	movs	r2, #1
   1e45c:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1e460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1e462:	2a00      	cmp	r2, #0
   1e464:	d0e5      	beq.n	1e432 <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1e466:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1e46a:	2300      	movs	r3, #0
   1e46c:	e9cd 2300 	strd	r2, r3, [sp]
   1e470:	aa04      	add	r2, sp, #16
   1e472:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1e474:	4620      	mov	r0, r4
   1e476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1e478:	4798      	blx	r3
   1e47a:	4603      	mov	r3, r0
   1e47c:	e7d9      	b.n	1e432 <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1e47e:	f06f 0301 	mvn.w	r3, #1
   1e482:	e7d6      	b.n	1e432 <temp_stub_sensor_read+0x2a>

0001e484 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1e484:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1e486:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1e48a:	d009      	beq.n	1e4a0 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1e48c:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1e490:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1e494:	e9d1 2300 	ldrd	r2, r3, [r1]
   1e498:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1e49c:	2000      	movs	r0, #0
   1e49e:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1e4a0:	2300      	movs	r3, #0
   1e4a2:	461a      	mov	r2, r3
   1e4a4:	4619      	mov	r1, r3
   1e4a6:	4618      	mov	r0, r3
   1e4a8:	f7fd f840 	bl	1b52c <__assert_func>

0001e4ac <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1e4ac:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1e4ae:	e002      	b.n	1e4b6 <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1e4b0:	4618      	mov	r0, r3
   1e4b2:	f000 f85b 	bl	1e56c <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1e4b6:	4808      	ldr	r0, [pc, #32]	; (1e4d8 <oc_buffer_tx+0x2c>)
   1e4b8:	f7fd fc03 	bl	1bcc2 <os_mqueue_get>
   1e4bc:	4603      	mov	r3, r0
   1e4be:	b148      	cbz	r0, 1e4d4 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1e4c0:	2200      	movs	r2, #0
   1e4c2:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1e4c4:	7e1a      	ldrb	r2, [r3, #24]
   1e4c6:	f012 0f08 	tst.w	r2, #8
   1e4ca:	d0f1      	beq.n	1e4b0 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1e4cc:	4618      	mov	r0, r3
   1e4ce:	f000 f85d 	bl	1e58c <oc_send_multicast_message>
   1e4d2:	e7f0      	b.n	1e4b6 <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1e4d4:	bd08      	pop	{r3, pc}
   1e4d6:	bf00      	nop
   1e4d8:	2000dbd0 	.word	0x2000dbd0

0001e4dc <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1e4dc:	b500      	push	{lr}
   1e4de:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1e4e0:	4808      	ldr	r0, [pc, #32]	; (1e504 <oc_buffer_rx+0x28>)
   1e4e2:	f7fd fbee 	bl	1bcc2 <os_mqueue_get>
   1e4e6:	9001      	str	r0, [sp, #4]
   1e4e8:	b140      	cbz	r0, 1e4fc <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1e4ea:	a801      	add	r0, sp, #4
   1e4ec:	f000 faa2 	bl	1ea34 <__wrap_coap_receive>
#endif
        if (m) {
   1e4f0:	9801      	ldr	r0, [sp, #4]
   1e4f2:	2800      	cmp	r0, #0
   1e4f4:	d0f4      	beq.n	1e4e0 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1e4f6:	f7fd fc59 	bl	1bdac <os_mbuf_free_chain>
   1e4fa:	e7f1      	b.n	1e4e0 <oc_buffer_rx+0x4>
        }
    }
}
   1e4fc:	b003      	add	sp, #12
   1e4fe:	f85d fb04 	ldr.w	pc, [sp], #4
   1e502:	bf00      	nop
   1e504:	2000dbb8 	.word	0x2000dbb8

0001e508 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1e508:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1e50a:	2200      	movs	r2, #0
   1e50c:	4904      	ldr	r1, [pc, #16]	; (1e520 <oc_buffer_init+0x18>)
   1e50e:	4805      	ldr	r0, [pc, #20]	; (1e524 <oc_buffer_init+0x1c>)
   1e510:	f7fd fbce 	bl	1bcb0 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1e514:	2200      	movs	r2, #0
   1e516:	4904      	ldr	r1, [pc, #16]	; (1e528 <oc_buffer_init+0x20>)
   1e518:	4804      	ldr	r0, [pc, #16]	; (1e52c <oc_buffer_init+0x24>)
   1e51a:	f7fd fbc9 	bl	1bcb0 <os_mqueue_init>
}
   1e51e:	bd08      	pop	{r3, pc}
   1e520:	0001e4dd 	.word	0x0001e4dd
   1e524:	2000dbb8 	.word	0x2000dbb8
   1e528:	0001e4ad 	.word	0x0001e4ad
   1e52c:	2000dbd0 	.word	0x2000dbd0

0001e530 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1e530:	b500      	push	{lr}
   1e532:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1e534:	4b07      	ldr	r3, [pc, #28]	; (1e554 <oc_ri_mem_init+0x24>)
   1e536:	9300      	str	r3, [sp, #0]
   1e538:	4b07      	ldr	r3, [pc, #28]	; (1e558 <oc_ri_mem_init+0x28>)
   1e53a:	2264      	movs	r2, #100	; 0x64
   1e53c:	2102      	movs	r1, #2
   1e53e:	4807      	ldr	r0, [pc, #28]	; (1e55c <oc_ri_mem_init+0x2c>)
   1e540:	f7fd fd3c 	bl	1bfbc <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1e544:	f000 f860 	bl	1e608 <oc_rep_init>
#endif
    oc_buffer_init();
   1e548:	f7ff ffde 	bl	1e508 <oc_buffer_init>
}
   1e54c:	b003      	add	sp, #12
   1e54e:	f85d fb04 	ldr.w	pc, [sp], #4
   1e552:	bf00      	nop
   1e554:	00029914 	.word	0x00029914
   1e558:	2000dbe8 	.word	0x2000dbe8
   1e55c:	2000dcb0 	.word	0x2000dcb0

0001e560 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1e560:	4b01      	ldr	r3, [pc, #4]	; (1e568 <oc_evq_set+0x8>)
   1e562:	6018      	str	r0, [r3, #0]
}
   1e564:	4770      	bx	lr
   1e566:	bf00      	nop
   1e568:	2000dccc 	.word	0x2000dccc

0001e56c <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1e56c:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1e56e:	7e03      	ldrb	r3, [r0, #24]
   1e570:	f003 0307 	and.w	r3, r3, #7
   1e574:	4a04      	ldr	r2, [pc, #16]	; (1e588 <oc_send_buffer+0x1c>)
   1e576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1e57a:	b113      	cbz	r3, 1e582 <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1e57c:	68db      	ldr	r3, [r3, #12]
   1e57e:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1e580:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1e582:	f7fd fc13 	bl	1bdac <os_mbuf_free_chain>
}
   1e586:	e7fb      	b.n	1e580 <oc_send_buffer+0x14>
   1e588:	2000df60 	.word	0x2000df60

0001e58c <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1e58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e590:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1e592:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1e594:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1e596:	e002      	b.n	1e59e <oc_send_multicast_message+0x12>
   1e598:	4635      	mov	r5, r6
   1e59a:	3401      	adds	r4, #1
   1e59c:	462e      	mov	r6, r5
   1e59e:	2c07      	cmp	r4, #7
   1e5a0:	dc12      	bgt.n	1e5c8 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1e5a2:	4b0c      	ldr	r3, [pc, #48]	; (1e5d4 <oc_send_multicast_message+0x48>)
   1e5a4:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1e5a8:	2d00      	cmp	r5, #0
   1e5aa:	d0f5      	beq.n	1e598 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1e5ac:	2e00      	cmp	r6, #0
   1e5ae:	d0f4      	beq.n	1e59a <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1e5b0:	4638      	mov	r0, r7
   1e5b2:	f7fd fc6b 	bl	1be8c <os_mbuf_dup>
   1e5b6:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1e5b8:	6933      	ldr	r3, [r6, #16]
   1e5ba:	4638      	mov	r0, r7
   1e5bc:	4798      	blx	r3
            if (!n) {
   1e5be:	f1b8 0f00 	cmp.w	r8, #0
   1e5c2:	d005      	beq.n	1e5d0 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1e5c4:	4647      	mov	r7, r8
   1e5c6:	e7e8      	b.n	1e59a <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1e5c8:	b116      	cbz	r6, 1e5d0 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1e5ca:	6933      	ldr	r3, [r6, #16]
   1e5cc:	4638      	mov	r0, r7
   1e5ce:	4798      	blx	r3
    }
}
   1e5d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e5d4:	2000df60 	.word	0x2000df60

0001e5d8 <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1e5d8:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1e5da:	4b07      	ldr	r3, [pc, #28]	; (1e5f8 <oc_init+0x20>)
   1e5dc:	781b      	ldrb	r3, [r3, #0]
   1e5de:	b133      	cbz	r3, 1e5ee <oc_init+0x16>
    oc_ri_mem_init();
   1e5e0:	f7ff ffa6 	bl	1e530 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1e5e4:	f7fd fb60 	bl	1bca8 <os_eventq_dflt_get>
   1e5e8:	f7ff ffba 	bl	1e560 <oc_evq_set>
}
   1e5ec:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1e5ee:	461a      	mov	r2, r3
   1e5f0:	4619      	mov	r1, r3
   1e5f2:	4618      	mov	r0, r3
   1e5f4:	f7fc ff9a 	bl	1b52c <__assert_func>
   1e5f8:	2000ddbc 	.word	0x2000ddbc

0001e5fc <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1e5fc:	4770      	bx	lr

0001e5fe <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1e5fe:	4770      	bx	lr

0001e600 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1e600:	4770      	bx	lr

0001e602 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1e602:	4770      	bx	lr

0001e604 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1e604:	4770      	bx	lr
	...

0001e608 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1e608:	b500      	push	{lr}
   1e60a:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1e60c:	4b05      	ldr	r3, [pc, #20]	; (1e624 <oc_rep_init+0x1c>)
   1e60e:	9300      	str	r3, [sp, #0]
   1e610:	4b05      	ldr	r3, [pc, #20]	; (1e628 <oc_rep_init+0x20>)
   1e612:	2218      	movs	r2, #24
   1e614:	2102      	movs	r1, #2
   1e616:	4805      	ldr	r0, [pc, #20]	; (1e62c <oc_rep_init+0x24>)
   1e618:	f7fd fcd0 	bl	1bfbc <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1e61c:	b003      	add	sp, #12
   1e61e:	f85d fb04 	ldr.w	pc, [sp], #4
   1e622:	bf00      	nop
   1e624:	00029920 	.word	0x00029920
   1e628:	2000dcec 	.word	0x2000dcec
   1e62c:	2000dcd0 	.word	0x2000dcd0

0001e630 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1e630:	b570      	push	{r4, r5, r6, lr}
   1e632:	b086      	sub	sp, #24
   1e634:	4605      	mov	r5, r0
   1e636:	460e      	mov	r6, r1
   1e638:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1e63a:	2300      	movs	r3, #0
   1e63c:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1e63e:	f000 f9ad 	bl	1e99c <mfg_init>

    mfg_open(&reader);
   1e642:	a801      	add	r0, sp, #4
   1e644:	f000 f9c6 	bl	1e9d4 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1e648:	6823      	ldr	r3, [r4, #0]
   1e64a:	42ab      	cmp	r3, r5
   1e64c:	da29      	bge.n	1e6a2 <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1e64e:	2102      	movs	r1, #2
   1e650:	a801      	add	r0, sp, #4
   1e652:	f000 f98c 	bl	1e96e <mfg_seek_next_with_type>
   1e656:	4603      	mov	r3, r0
        switch (rc) {
   1e658:	f110 0f0f 	cmn.w	r0, #15
   1e65c:	d003      	beq.n	1e666 <flash_map_read_mfg+0x36>
   1e65e:	b120      	cbz	r0, 1e66a <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1e660:	4618      	mov	r0, r3
   1e662:	b006      	add	sp, #24
   1e664:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1e666:	2300      	movs	r3, #0
   1e668:	e7fa      	b.n	1e660 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1e66a:	a903      	add	r1, sp, #12
   1e66c:	a801      	add	r0, sp, #4
   1e66e:	f000 f98b 	bl	1e988 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1e672:	4603      	mov	r3, r0
   1e674:	2800      	cmp	r0, #0
   1e676:	d1f3      	bne.n	1e660 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1e678:	6823      	ldr	r3, [r4, #0]
   1e67a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e67e:	009a      	lsls	r2, r3, #2
   1e680:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1e682:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1e686:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1e688:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1e68c:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1e68e:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1e692:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1e694:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1e698:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1e69a:	6823      	ldr	r3, [r4, #0]
   1e69c:	3301      	adds	r3, #1
   1e69e:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1e6a0:	e7d2      	b.n	1e648 <flash_map_read_mfg+0x18>
            return -1;
   1e6a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e6a6:	e7db      	b.n	1e660 <flash_map_read_mfg+0x30>

0001e6a8 <flash_area_open>:
{
   1e6a8:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1e6aa:	4b0d      	ldr	r3, [pc, #52]	; (1e6e0 <flash_area_open+0x38>)
   1e6ac:	681d      	ldr	r5, [r3, #0]
   1e6ae:	b1a5      	cbz	r5, 1e6da <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1e6b0:	2300      	movs	r3, #0
   1e6b2:	4a0c      	ldr	r2, [pc, #48]	; (1e6e4 <flash_area_open+0x3c>)
   1e6b4:	6812      	ldr	r2, [r2, #0]
   1e6b6:	429a      	cmp	r2, r3
   1e6b8:	dd0b      	ble.n	1e6d2 <flash_area_open+0x2a>
        area = flash_map + i;
   1e6ba:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1e6be:	00a2      	lsls	r2, r4, #2
   1e6c0:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1e6c2:	5caa      	ldrb	r2, [r5, r2]
   1e6c4:	4282      	cmp	r2, r0
   1e6c6:	d001      	beq.n	1e6cc <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1e6c8:	3301      	adds	r3, #1
   1e6ca:	e7f2      	b.n	1e6b2 <flash_area_open+0xa>
            *fap = area;
   1e6cc:	600c      	str	r4, [r1, #0]
            return 0;
   1e6ce:	2000      	movs	r0, #0
   1e6d0:	e001      	b.n	1e6d6 <flash_area_open+0x2e>
    return SYS_ENOENT;
   1e6d2:	f06f 0003 	mvn.w	r0, #3
}
   1e6d6:	bc30      	pop	{r4, r5}
   1e6d8:	4770      	bx	lr
        return SYS_EACCES;
   1e6da:	f06f 0006 	mvn.w	r0, #6
   1e6de:	e7fa      	b.n	1e6d6 <flash_area_open+0x2e>
   1e6e0:	2000df84 	.word	0x2000df84
   1e6e4:	2000df80 	.word	0x2000df80

0001e6e8 <flash_area_read>:
{
   1e6e8:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1e6ea:	6884      	ldr	r4, [r0, #8]
   1e6ec:	428c      	cmp	r4, r1
   1e6ee:	d308      	bcc.n	1e702 <flash_area_read+0x1a>
   1e6f0:	18cd      	adds	r5, r1, r3
   1e6f2:	42ac      	cmp	r4, r5
   1e6f4:	d308      	bcc.n	1e708 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1e6f6:	6844      	ldr	r4, [r0, #4]
   1e6f8:	4421      	add	r1, r4
   1e6fa:	7840      	ldrb	r0, [r0, #1]
   1e6fc:	f000 f9c8 	bl	1ea90 <hal_flash_read>
}
   1e700:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1e702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e706:	e7fb      	b.n	1e700 <flash_area_read+0x18>
   1e708:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e70c:	e7f8      	b.n	1e700 <flash_area_read+0x18>
	...

0001e710 <flash_map_init>:

void
flash_map_init(void)
{
   1e710:	b510      	push	{r4, lr}
   1e712:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1e714:	4b14      	ldr	r3, [pc, #80]	; (1e768 <flash_map_init+0x58>)
   1e716:	781b      	ldrb	r3, [r3, #0]
   1e718:	b303      	cbz	r3, 1e75c <flash_map_init+0x4c>

    rc = hal_flash_init();
   1e71a:	f000 f9a5 	bl	1ea68 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1e71e:	b138      	cbz	r0, 1e730 <flash_map_init+0x20>
   1e720:	2000      	movs	r0, #0
   1e722:	9000      	str	r0, [sp, #0]
   1e724:	4b11      	ldr	r3, [pc, #68]	; (1e76c <flash_map_init+0x5c>)
   1e726:	681c      	ldr	r4, [r3, #0]
   1e728:	4603      	mov	r3, r0
   1e72a:	4602      	mov	r2, r0
   1e72c:	4601      	mov	r1, r0
   1e72e:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1e730:	4b0f      	ldr	r3, [pc, #60]	; (1e770 <flash_map_init+0x60>)
   1e732:	4a10      	ldr	r2, [pc, #64]	; (1e774 <flash_map_init+0x64>)
   1e734:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1e736:	4b10      	ldr	r3, [pc, #64]	; (1e778 <flash_map_init+0x68>)
   1e738:	2206      	movs	r2, #6
   1e73a:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1e73c:	aa03      	add	r2, sp, #12
   1e73e:	490f      	ldr	r1, [pc, #60]	; (1e77c <flash_map_init+0x6c>)
   1e740:	200a      	movs	r0, #10
   1e742:	f7ff ff75 	bl	1e630 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1e746:	b938      	cbnz	r0, 1e758 <flash_map_init+0x48>
   1e748:	9b03      	ldr	r3, [sp, #12]
   1e74a:	2b00      	cmp	r3, #0
   1e74c:	dd04      	ble.n	1e758 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1e74e:	4a08      	ldr	r2, [pc, #32]	; (1e770 <flash_map_init+0x60>)
   1e750:	490a      	ldr	r1, [pc, #40]	; (1e77c <flash_map_init+0x6c>)
   1e752:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1e754:	4a08      	ldr	r2, [pc, #32]	; (1e778 <flash_map_init+0x68>)
   1e756:	6013      	str	r3, [r2, #0]
    }
}
   1e758:	b004      	add	sp, #16
   1e75a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1e75c:	461a      	mov	r2, r3
   1e75e:	4619      	mov	r1, r3
   1e760:	4618      	mov	r0, r3
   1e762:	f7fc fee3 	bl	1b52c <__assert_func>
   1e766:	bf00      	nop
   1e768:	2000ddbc 	.word	0x2000ddbc
   1e76c:	20000104 	.word	0x20000104
   1e770:	2000df84 	.word	0x2000df84
   1e774:	0002992c 	.word	0x0002992c
   1e778:	2000df80 	.word	0x2000df80
   1e77c:	2000dd1c 	.word	0x2000dd1c

0001e780 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1e780:	4770      	bx	lr
	...

0001e784 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1e784:	b530      	push	{r4, r5, lr}
   1e786:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1e788:	7885      	ldrb	r5, [r0, #2]
   1e78a:	4b21      	ldr	r3, [pc, #132]	; (1e810 <mfg_seek_next_aux+0x8c>)
   1e78c:	681b      	ldr	r3, [r3, #0]
   1e78e:	429d      	cmp	r5, r3
   1e790:	da32      	bge.n	1e7f8 <mfg_seek_next_aux+0x74>
   1e792:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1e794:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1e798:	0093      	lsls	r3, r2, #2
   1e79a:	a901      	add	r1, sp, #4
   1e79c:	4a1d      	ldr	r2, [pc, #116]	; (1e814 <mfg_seek_next_aux+0x90>)
   1e79e:	5cd0      	ldrb	r0, [r2, r3]
   1e7a0:	f7ff ff82 	bl	1e6a8 <flash_area_open>
    if (rc != 0) {
   1e7a4:	bb58      	cbnz	r0, 1e7fe <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1e7a6:	6862      	ldr	r2, [r4, #4]
   1e7a8:	b9c2      	cbnz	r2, 1e7dc <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1e7aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1e7ae:	00aa      	lsls	r2, r5, #2
   1e7b0:	4b18      	ldr	r3, [pc, #96]	; (1e814 <mfg_seek_next_aux+0x90>)
   1e7b2:	4413      	add	r3, r2
   1e7b4:	685b      	ldr	r3, [r3, #4]
   1e7b6:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1e7b8:	6861      	ldr	r1, [r4, #4]
   1e7ba:	9801      	ldr	r0, [sp, #4]
   1e7bc:	6883      	ldr	r3, [r0, #8]
   1e7be:	3b08      	subs	r3, #8
   1e7c0:	4299      	cmp	r1, r3
   1e7c2:	d310      	bcc.n	1e7e6 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1e7c4:	78a3      	ldrb	r3, [r4, #2]
   1e7c6:	1c59      	adds	r1, r3, #1
   1e7c8:	4a11      	ldr	r2, [pc, #68]	; (1e810 <mfg_seek_next_aux+0x8c>)
   1e7ca:	6812      	ldr	r2, [r2, #0]
   1e7cc:	4291      	cmp	r1, r2
   1e7ce:	da19      	bge.n	1e804 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1e7d0:	2200      	movs	r2, #0
   1e7d2:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1e7d4:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1e7d6:	f06f 0305 	mvn.w	r3, #5
   1e7da:	e015      	b.n	1e808 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1e7dc:	7863      	ldrb	r3, [r4, #1]
   1e7de:	4413      	add	r3, r2
   1e7e0:	3302      	adds	r3, #2
   1e7e2:	6063      	str	r3, [r4, #4]
   1e7e4:	e7e8      	b.n	1e7b8 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1e7e6:	2302      	movs	r3, #2
   1e7e8:	4622      	mov	r2, r4
   1e7ea:	f7ff ff7d 	bl	1e6e8 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1e7ee:	4603      	mov	r3, r0
   1e7f0:	b150      	cbz	r0, 1e808 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1e7f2:	f06f 0304 	mvn.w	r3, #4
   1e7f6:	e007      	b.n	1e808 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1e7f8:	f06f 0301 	mvn.w	r3, #1
   1e7fc:	e004      	b.n	1e808 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1e7fe:	f06f 0304 	mvn.w	r3, #4
   1e802:	e001      	b.n	1e808 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1e804:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1e808:	4618      	mov	r0, r3
   1e80a:	b003      	add	sp, #12
   1e80c:	bd30      	pop	{r4, r5, pc}
   1e80e:	bf00      	nop
   1e810:	2000ddb0 	.word	0x2000ddb0
   1e814:	2000dd98 	.word	0x2000dd98

0001e818 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1e818:	b530      	push	{r4, r5, lr}
   1e81a:	b085      	sub	sp, #20
   1e81c:	4605      	mov	r5, r0
   1e81e:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1e820:	a903      	add	r1, sp, #12
   1e822:	f7ff ff41 	bl	1e6a8 <flash_area_open>
    if (rc != 0) {
   1e826:	b9e8      	cbnz	r0, 1e864 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1e828:	9803      	ldr	r0, [sp, #12]
   1e82a:	6881      	ldr	r1, [r0, #8]
   1e82c:	2308      	movs	r3, #8
   1e82e:	aa01      	add	r2, sp, #4
   1e830:	3908      	subs	r1, #8
   1e832:	f7ff ff59 	bl	1e6e8 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1e836:	4601      	mov	r1, r0
   1e838:	b9b8      	cbnz	r0, 1e86a <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1e83a:	9a02      	ldr	r2, [sp, #8]
   1e83c:	4b11      	ldr	r3, [pc, #68]	; (1e884 <mfg_read_mmr+0x6c>)
   1e83e:	429a      	cmp	r2, r3
   1e840:	d116      	bne.n	1e870 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1e842:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1e846:	2b02      	cmp	r3, #2
   1e848:	d115      	bne.n	1e876 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1e84a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1e84e:	9b03      	ldr	r3, [sp, #12]
   1e850:	689b      	ldr	r3, [r3, #8]
   1e852:	429a      	cmp	r2, r3
   1e854:	d812      	bhi.n	1e87c <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1e856:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1e858:	7025      	strb	r5, [r4, #0]
   1e85a:	6063      	str	r3, [r4, #4]
   1e85c:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1e85e:	4608      	mov	r0, r1
   1e860:	b005      	add	sp, #20
   1e862:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1e864:	f06f 0104 	mvn.w	r1, #4
   1e868:	e7f9      	b.n	1e85e <mfg_read_mmr+0x46>
        return SYS_EIO;
   1e86a:	f06f 0104 	mvn.w	r1, #4
   1e86e:	e7f6      	b.n	1e85e <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1e870:	f06f 0108 	mvn.w	r1, #8
   1e874:	e7f3      	b.n	1e85e <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1e876:	f06f 010b 	mvn.w	r1, #11
   1e87a:	e7f0      	b.n	1e85e <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1e87c:	f06f 0108 	mvn.w	r1, #8
   1e880:	e7ed      	b.n	1e85e <mfg_read_mmr+0x46>
   1e882:	bf00      	nop
   1e884:	3bb2a269 	.word	0x3bb2a269

0001e888 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1e888:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1e88a:	2300      	movs	r3, #0
   1e88c:	4a11      	ldr	r2, [pc, #68]	; (1e8d4 <mfg_read_next_mmr+0x4c>)
   1e88e:	6812      	ldr	r2, [r2, #0]
   1e890:	429a      	cmp	r2, r3
   1e892:	dd08      	ble.n	1e8a6 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1e894:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1e898:	008a      	lsls	r2, r1, #2
   1e89a:	490f      	ldr	r1, [pc, #60]	; (1e8d8 <mfg_read_next_mmr+0x50>)
   1e89c:	5c8a      	ldrb	r2, [r1, r2]
   1e89e:	4282      	cmp	r2, r0
   1e8a0:	d011      	beq.n	1e8c6 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1e8a2:	3301      	adds	r3, #1
   1e8a4:	e7f2      	b.n	1e88c <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1e8a6:	2a01      	cmp	r2, #1
   1e8a8:	dc11      	bgt.n	1e8ce <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1e8aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1e8ae:	0093      	lsls	r3, r2, #2
   1e8b0:	4909      	ldr	r1, [pc, #36]	; (1e8d8 <mfg_read_next_mmr+0x50>)
   1e8b2:	4419      	add	r1, r3
   1e8b4:	f7ff ffb0 	bl	1e818 <mfg_read_mmr>
    if (rc != 0) {
   1e8b8:	4603      	mov	r3, r0
   1e8ba:	b930      	cbnz	r0, 1e8ca <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1e8bc:	4905      	ldr	r1, [pc, #20]	; (1e8d4 <mfg_read_next_mmr+0x4c>)
   1e8be:	680a      	ldr	r2, [r1, #0]
   1e8c0:	3201      	adds	r2, #1
   1e8c2:	600a      	str	r2, [r1, #0]
    return 0;
   1e8c4:	e001      	b.n	1e8ca <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1e8c6:	f06f 030a 	mvn.w	r3, #10
}
   1e8ca:	4618      	mov	r0, r3
   1e8cc:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1e8ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e8d2:	e7fa      	b.n	1e8ca <mfg_read_next_mmr+0x42>
   1e8d4:	2000ddb0 	.word	0x2000ddb0
   1e8d8:	2000dd98 	.word	0x2000dd98

0001e8dc <mfg_open_flash_area>:
{
   1e8dc:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1e8de:	7883      	ldrb	r3, [r0, #2]
   1e8e0:	4a0b      	ldr	r2, [pc, #44]	; (1e910 <mfg_open_flash_area+0x34>)
   1e8e2:	6812      	ldr	r2, [r2, #0]
   1e8e4:	4293      	cmp	r3, r2
   1e8e6:	da0a      	bge.n	1e8fe <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1e8e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1e8ec:	009a      	lsls	r2, r3, #2
   1e8ee:	4b09      	ldr	r3, [pc, #36]	; (1e914 <mfg_open_flash_area+0x38>)
   1e8f0:	5c98      	ldrb	r0, [r3, r2]
   1e8f2:	f7ff fed9 	bl	1e6a8 <flash_area_open>
    if (rc != 0) {
   1e8f6:	4603      	mov	r3, r0
   1e8f8:	b938      	cbnz	r0, 1e90a <mfg_open_flash_area+0x2e>
}
   1e8fa:	4618      	mov	r0, r3
   1e8fc:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1e8fe:	2300      	movs	r3, #0
   1e900:	461a      	mov	r2, r3
   1e902:	4619      	mov	r1, r3
   1e904:	4618      	mov	r0, r3
   1e906:	f7fc fe11 	bl	1b52c <__assert_func>
        return SYS_EIO;
   1e90a:	f06f 0304 	mvn.w	r3, #4
   1e90e:	e7f4      	b.n	1e8fa <mfg_open_flash_area+0x1e>
   1e910:	2000ddb0 	.word	0x2000ddb0
   1e914:	2000dd98 	.word	0x2000dd98

0001e918 <mfg_read_tlv_body>:
{
   1e918:	b570      	push	{r4, r5, r6, lr}
   1e91a:	b082      	sub	sp, #8
   1e91c:	4606      	mov	r6, r0
   1e91e:	460c      	mov	r4, r1
   1e920:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1e922:	a901      	add	r1, sp, #4
   1e924:	f7ff ffda 	bl	1e8dc <mfg_open_flash_area>
    if (rc != 0) {
   1e928:	4603      	mov	r3, r0
   1e92a:	b110      	cbz	r0, 1e932 <mfg_read_tlv_body+0x1a>
}
   1e92c:	4618      	mov	r0, r3
   1e92e:	b002      	add	sp, #8
   1e930:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1e932:	462a      	mov	r2, r5
   1e934:	2100      	movs	r1, #0
   1e936:	4620      	mov	r0, r4
   1e938:	f7fe f9fb 	bl	1cd32 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1e93c:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1e93e:	6871      	ldr	r1, [r6, #4]
   1e940:	42ab      	cmp	r3, r5
   1e942:	bfa8      	it	ge
   1e944:	462b      	movge	r3, r5
   1e946:	4622      	mov	r2, r4
   1e948:	3102      	adds	r1, #2
   1e94a:	9801      	ldr	r0, [sp, #4]
   1e94c:	f7ff fecc 	bl	1e6e8 <flash_area_read>
    if (rc != 0) {
   1e950:	4603      	mov	r3, r0
   1e952:	2800      	cmp	r0, #0
   1e954:	d0ea      	beq.n	1e92c <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1e956:	f06f 0304 	mvn.w	r3, #4
   1e95a:	e7e7      	b.n	1e92c <mfg_read_tlv_body+0x14>

0001e95c <mfg_seek_next>:
{
   1e95c:	b510      	push	{r4, lr}
   1e95e:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1e960:	4620      	mov	r0, r4
   1e962:	f7ff ff0f 	bl	1e784 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1e966:	f110 0f06 	cmn.w	r0, #6
   1e96a:	d0f9      	beq.n	1e960 <mfg_seek_next+0x4>
}
   1e96c:	bd10      	pop	{r4, pc}

0001e96e <mfg_seek_next_with_type>:
{
   1e96e:	b538      	push	{r3, r4, r5, lr}
   1e970:	4604      	mov	r4, r0
   1e972:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1e974:	4620      	mov	r0, r4
   1e976:	f7ff fff1 	bl	1e95c <mfg_seek_next>
        if (rc != 0) {
   1e97a:	4602      	mov	r2, r0
   1e97c:	b910      	cbnz	r0, 1e984 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1e97e:	7823      	ldrb	r3, [r4, #0]
   1e980:	42ab      	cmp	r3, r5
   1e982:	d1f7      	bne.n	1e974 <mfg_seek_next_with_type+0x6>
}
   1e984:	4610      	mov	r0, r2
   1e986:	bd38      	pop	{r3, r4, r5, pc}

0001e988 <mfg_read_tlv_flash_area>:
{
   1e988:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1e98a:	220a      	movs	r2, #10
   1e98c:	f7ff ffc4 	bl	1e918 <mfg_read_tlv_body>
}
   1e990:	bd08      	pop	{r3, pc}

0001e992 <mfg_read_tlv_mmr_ref>:
{
   1e992:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1e994:	2201      	movs	r2, #1
   1e996:	f7ff ffbf 	bl	1e918 <mfg_read_tlv_body>
}
   1e99a:	bd08      	pop	{r3, pc}

0001e99c <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1e99c:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1e99e:	4b0b      	ldr	r3, [pc, #44]	; (1e9cc <mfg_init+0x30>)
   1e9a0:	781b      	ldrb	r3, [r3, #0]
   1e9a2:	b94b      	cbnz	r3, 1e9b8 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1e9a4:	4b09      	ldr	r3, [pc, #36]	; (1e9cc <mfg_init+0x30>)
   1e9a6:	2201      	movs	r2, #1
   1e9a8:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1e9aa:	4b09      	ldr	r3, [pc, #36]	; (1e9d0 <mfg_init+0x34>)
   1e9ac:	781b      	ldrb	r3, [r3, #0]
   1e9ae:	b123      	cbz	r3, 1e9ba <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1e9b0:	2000      	movs	r0, #0
   1e9b2:	f7ff ff69 	bl	1e888 <mfg_read_next_mmr>
    if (rc != 0) {
   1e9b6:	b128      	cbz	r0, 1e9c4 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1e9b8:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1e9ba:	461a      	mov	r2, r3
   1e9bc:	4619      	mov	r1, r3
   1e9be:	4618      	mov	r0, r3
   1e9c0:	f7fc fdb4 	bl	1b52c <__assert_func>
    rc = mfg_read_mmr_refs();
   1e9c4:	f000 f80e 	bl	1e9e4 <mfg_read_mmr_refs>
err:
   1e9c8:	e7f6      	b.n	1e9b8 <mfg_init+0x1c>
   1e9ca:	bf00      	nop
   1e9cc:	2000dd94 	.word	0x2000dd94
   1e9d0:	2000ddbc 	.word	0x2000ddbc

0001e9d4 <mfg_open>:
{
   1e9d4:	b510      	push	{r4, lr}
   1e9d6:	4604      	mov	r4, r0
    mfg_init();
   1e9d8:	f7ff ffe0 	bl	1e99c <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1e9dc:	2300      	movs	r3, #0
   1e9de:	6023      	str	r3, [r4, #0]
   1e9e0:	6063      	str	r3, [r4, #4]
}
   1e9e2:	bd10      	pop	{r4, pc}

0001e9e4 <mfg_read_mmr_refs>:
{
   1e9e4:	b500      	push	{lr}
   1e9e6:	b085      	sub	sp, #20
    mfg_open(&reader);
   1e9e8:	a801      	add	r0, sp, #4
   1e9ea:	f7ff fff3 	bl	1e9d4 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1e9ee:	2104      	movs	r1, #4
   1e9f0:	eb0d 0001 	add.w	r0, sp, r1
   1e9f4:	f7ff ffbb 	bl	1e96e <mfg_seek_next_with_type>
   1e9f8:	4603      	mov	r3, r0
        switch (rc) {
   1e9fa:	f110 0f0f 	cmn.w	r0, #15
   1e9fe:	d004      	beq.n	1ea0a <mfg_read_mmr_refs+0x26>
   1ea00:	b128      	cbz	r0, 1ea0e <mfg_read_mmr_refs+0x2a>
}
   1ea02:	4618      	mov	r0, r3
   1ea04:	b005      	add	sp, #20
   1ea06:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1ea0a:	2300      	movs	r3, #0
   1ea0c:	e7f9      	b.n	1ea02 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1ea0e:	a903      	add	r1, sp, #12
   1ea10:	a801      	add	r0, sp, #4
   1ea12:	f7ff ffbe 	bl	1e992 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1ea16:	4603      	mov	r3, r0
   1ea18:	2800      	cmp	r0, #0
   1ea1a:	d1f2      	bne.n	1ea02 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1ea1c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1ea20:	f7ff ff32 	bl	1e888 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1ea24:	4603      	mov	r3, r0
   1ea26:	2800      	cmp	r0, #0
   1ea28:	d0e1      	beq.n	1e9ee <mfg_read_mmr_refs+0xa>
   1ea2a:	f110 0f0b 	cmn.w	r0, #11
   1ea2e:	d0de      	beq.n	1e9ee <mfg_read_mmr_refs+0xa>
   1ea30:	e7e7      	b.n	1ea02 <mfg_read_mmr_refs+0x1e>
	...

0001ea34 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1ea34:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1ea36:	4803      	ldr	r0, [pc, #12]	; (1ea44 <__wrap_coap_receive+0x10>)
   1ea38:	f7fb feb0 	bl	1a79c <console_printf>
    return -1;
}
   1ea3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ea40:	bd08      	pop	{r3, pc}
   1ea42:	bf00      	nop
   1ea44:	00029974 	.word	0x00029974

0001ea48 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1ea48:	4770      	bx	lr

0001ea4a <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1ea4a:	6843      	ldr	r3, [r0, #4]
   1ea4c:	428b      	cmp	r3, r1
   1ea4e:	d808      	bhi.n	1ea62 <hal_flash_check_addr+0x18>
   1ea50:	6882      	ldr	r2, [r0, #8]
   1ea52:	4413      	add	r3, r2
   1ea54:	428b      	cmp	r3, r1
   1ea56:	d301      	bcc.n	1ea5c <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1ea58:	2000      	movs	r0, #0
}
   1ea5a:	4770      	bx	lr
        return SYS_EINVAL;
   1ea5c:	f06f 0001 	mvn.w	r0, #1
   1ea60:	4770      	bx	lr
   1ea62:	f06f 0001 	mvn.w	r0, #1
   1ea66:	4770      	bx	lr

0001ea68 <hal_flash_init>:
{
   1ea68:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1ea6a:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1ea6c:	462c      	mov	r4, r5
   1ea6e:	e001      	b.n	1ea74 <hal_flash_init+0xc>
   1ea70:	3401      	adds	r4, #1
   1ea72:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1ea74:	4620      	mov	r0, r4
   1ea76:	f7fe fce3 	bl	1d440 <hal_bsp_flash_dev>
        if (!hf) {
   1ea7a:	b138      	cbz	r0, 1ea8c <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1ea7c:	6802      	ldr	r2, [r0, #0]
   1ea7e:	6952      	ldr	r2, [r2, #20]
   1ea80:	4790      	blx	r2
   1ea82:	2800      	cmp	r0, #0
   1ea84:	d0f4      	beq.n	1ea70 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1ea86:	f06f 0504 	mvn.w	r5, #4
   1ea8a:	e7f1      	b.n	1ea70 <hal_flash_init+0x8>
}
   1ea8c:	4628      	mov	r0, r5
   1ea8e:	bd38      	pop	{r3, r4, r5, pc}

0001ea90 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1ea90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea94:	460d      	mov	r5, r1
   1ea96:	4690      	mov	r8, r2
   1ea98:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1ea9a:	f7fe fcd1 	bl	1d440 <hal_bsp_flash_dev>
    if (!hf) {
   1ea9e:	b1c0      	cbz	r0, 1ead2 <hal_flash_read+0x42>
   1eaa0:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1eaa2:	4629      	mov	r1, r5
   1eaa4:	f7ff ffd1 	bl	1ea4a <hal_flash_check_addr>
   1eaa8:	b9b0      	cbnz	r0, 1ead8 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1eaaa:	19a9      	adds	r1, r5, r6
   1eaac:	4620      	mov	r0, r4
   1eaae:	f7ff ffcc 	bl	1ea4a <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1eab2:	b9a0      	cbnz	r0, 1eade <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1eab4:	6823      	ldr	r3, [r4, #0]
   1eab6:	681f      	ldr	r7, [r3, #0]
   1eab8:	4633      	mov	r3, r6
   1eaba:	4642      	mov	r2, r8
   1eabc:	4629      	mov	r1, r5
   1eabe:	4620      	mov	r0, r4
   1eac0:	47b8      	blx	r7
    if (rc != 0) {
   1eac2:	4603      	mov	r3, r0
   1eac4:	b910      	cbnz	r0, 1eacc <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1eac6:	4618      	mov	r0, r3
   1eac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1eacc:	f06f 0304 	mvn.w	r3, #4
   1ead0:	e7f9      	b.n	1eac6 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1ead2:	f06f 0301 	mvn.w	r3, #1
   1ead6:	e7f6      	b.n	1eac6 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1ead8:	f06f 0301 	mvn.w	r3, #1
   1eadc:	e7f3      	b.n	1eac6 <hal_flash_read+0x36>
   1eade:	f06f 0301 	mvn.w	r3, #1
   1eae2:	e7f0      	b.n	1eac6 <hal_flash_read+0x36>

0001eae4 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1eae4:	2010      	movs	r0, #16
   1eae6:	4770      	bx	lr

0001eae8 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1eae8:	b570      	push	{r4, r5, r6, lr}
   1eaea:	4606      	mov	r6, r0
   1eaec:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1eaee:	460d      	mov	r5, r1
   1eaf0:	2908      	cmp	r1, #8
   1eaf2:	bf28      	it	cs
   1eaf4:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1eaf6:	462a      	mov	r2, r5
   1eaf8:	4906      	ldr	r1, [pc, #24]	; (1eb14 <hal_bsp_hw_id+0x2c>)
   1eafa:	f7fe f90d 	bl	1cd18 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1eafe:	1b64      	subs	r4, r4, r5
   1eb00:	2c08      	cmp	r4, #8
   1eb02:	bf28      	it	cs
   1eb04:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1eb06:	4622      	mov	r2, r4
   1eb08:	4903      	ldr	r1, [pc, #12]	; (1eb18 <hal_bsp_hw_id+0x30>)
   1eb0a:	1970      	adds	r0, r6, r5
   1eb0c:	f7fe f904 	bl	1cd18 <memcpy>

    return len + cnt;
}
   1eb10:	1928      	adds	r0, r5, r4
   1eb12:	bd70      	pop	{r4, r5, r6, pc}
   1eb14:	10000060 	.word	0x10000060
   1eb18:	100000a4 	.word	0x100000a4

0001eb1c <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1eb1c:	b40e      	push	{r1, r2, r3}
   1eb1e:	b500      	push	{lr}
   1eb20:	b082      	sub	sp, #8
   1eb22:	ab03      	add	r3, sp, #12
   1eb24:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1eb28:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1eb2a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1eb2e:	f7fe fbef 	bl	1d310 <vsnprintf>
	va_end(ap);

	return rv;
}
   1eb32:	b002      	add	sp, #8
   1eb34:	f85d eb04 	ldr.w	lr, [sp], #4
   1eb38:	b003      	add	sp, #12
   1eb3a:	4770      	bx	lr

0001eb3c <__aeabi_uldivmod>:
   1eb3c:	b953      	cbnz	r3, 1eb54 <__aeabi_uldivmod+0x18>
   1eb3e:	b94a      	cbnz	r2, 1eb54 <__aeabi_uldivmod+0x18>
   1eb40:	2900      	cmp	r1, #0
   1eb42:	bf08      	it	eq
   1eb44:	2800      	cmpeq	r0, #0
   1eb46:	bf1c      	itt	ne
   1eb48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1eb4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1eb50:	f000 b972 	b.w	1ee38 <__aeabi_idiv0>
   1eb54:	f1ad 0c08 	sub.w	ip, sp, #8
   1eb58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1eb5c:	f000 f806 	bl	1eb6c <__udivmoddi4>
   1eb60:	f8dd e004 	ldr.w	lr, [sp, #4]
   1eb64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1eb68:	b004      	add	sp, #16
   1eb6a:	4770      	bx	lr

0001eb6c <__udivmoddi4>:
   1eb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1eb70:	9e08      	ldr	r6, [sp, #32]
   1eb72:	4604      	mov	r4, r0
   1eb74:	4688      	mov	r8, r1
   1eb76:	2b00      	cmp	r3, #0
   1eb78:	d14b      	bne.n	1ec12 <__udivmoddi4+0xa6>
   1eb7a:	428a      	cmp	r2, r1
   1eb7c:	4615      	mov	r5, r2
   1eb7e:	d967      	bls.n	1ec50 <__udivmoddi4+0xe4>
   1eb80:	fab2 f282 	clz	r2, r2
   1eb84:	b14a      	cbz	r2, 1eb9a <__udivmoddi4+0x2e>
   1eb86:	f1c2 0720 	rsb	r7, r2, #32
   1eb8a:	fa01 f302 	lsl.w	r3, r1, r2
   1eb8e:	fa20 f707 	lsr.w	r7, r0, r7
   1eb92:	4095      	lsls	r5, r2
   1eb94:	ea47 0803 	orr.w	r8, r7, r3
   1eb98:	4094      	lsls	r4, r2
   1eb9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1eb9e:	0c23      	lsrs	r3, r4, #16
   1eba0:	fbb8 f7fe 	udiv	r7, r8, lr
   1eba4:	fa1f fc85 	uxth.w	ip, r5
   1eba8:	fb0e 8817 	mls	r8, lr, r7, r8
   1ebac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1ebb0:	fb07 f10c 	mul.w	r1, r7, ip
   1ebb4:	4299      	cmp	r1, r3
   1ebb6:	d909      	bls.n	1ebcc <__udivmoddi4+0x60>
   1ebb8:	18eb      	adds	r3, r5, r3
   1ebba:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1ebbe:	f080 811b 	bcs.w	1edf8 <__udivmoddi4+0x28c>
   1ebc2:	4299      	cmp	r1, r3
   1ebc4:	f240 8118 	bls.w	1edf8 <__udivmoddi4+0x28c>
   1ebc8:	3f02      	subs	r7, #2
   1ebca:	442b      	add	r3, r5
   1ebcc:	1a5b      	subs	r3, r3, r1
   1ebce:	b2a4      	uxth	r4, r4
   1ebd0:	fbb3 f0fe 	udiv	r0, r3, lr
   1ebd4:	fb0e 3310 	mls	r3, lr, r0, r3
   1ebd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1ebdc:	fb00 fc0c 	mul.w	ip, r0, ip
   1ebe0:	45a4      	cmp	ip, r4
   1ebe2:	d909      	bls.n	1ebf8 <__udivmoddi4+0x8c>
   1ebe4:	192c      	adds	r4, r5, r4
   1ebe6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1ebea:	f080 8107 	bcs.w	1edfc <__udivmoddi4+0x290>
   1ebee:	45a4      	cmp	ip, r4
   1ebf0:	f240 8104 	bls.w	1edfc <__udivmoddi4+0x290>
   1ebf4:	3802      	subs	r0, #2
   1ebf6:	442c      	add	r4, r5
   1ebf8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1ebfc:	eba4 040c 	sub.w	r4, r4, ip
   1ec00:	2700      	movs	r7, #0
   1ec02:	b11e      	cbz	r6, 1ec0c <__udivmoddi4+0xa0>
   1ec04:	40d4      	lsrs	r4, r2
   1ec06:	2300      	movs	r3, #0
   1ec08:	e9c6 4300 	strd	r4, r3, [r6]
   1ec0c:	4639      	mov	r1, r7
   1ec0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ec12:	428b      	cmp	r3, r1
   1ec14:	d909      	bls.n	1ec2a <__udivmoddi4+0xbe>
   1ec16:	2e00      	cmp	r6, #0
   1ec18:	f000 80eb 	beq.w	1edf2 <__udivmoddi4+0x286>
   1ec1c:	2700      	movs	r7, #0
   1ec1e:	e9c6 0100 	strd	r0, r1, [r6]
   1ec22:	4638      	mov	r0, r7
   1ec24:	4639      	mov	r1, r7
   1ec26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ec2a:	fab3 f783 	clz	r7, r3
   1ec2e:	2f00      	cmp	r7, #0
   1ec30:	d147      	bne.n	1ecc2 <__udivmoddi4+0x156>
   1ec32:	428b      	cmp	r3, r1
   1ec34:	d302      	bcc.n	1ec3c <__udivmoddi4+0xd0>
   1ec36:	4282      	cmp	r2, r0
   1ec38:	f200 80fa 	bhi.w	1ee30 <__udivmoddi4+0x2c4>
   1ec3c:	1a84      	subs	r4, r0, r2
   1ec3e:	eb61 0303 	sbc.w	r3, r1, r3
   1ec42:	2001      	movs	r0, #1
   1ec44:	4698      	mov	r8, r3
   1ec46:	2e00      	cmp	r6, #0
   1ec48:	d0e0      	beq.n	1ec0c <__udivmoddi4+0xa0>
   1ec4a:	e9c6 4800 	strd	r4, r8, [r6]
   1ec4e:	e7dd      	b.n	1ec0c <__udivmoddi4+0xa0>
   1ec50:	b902      	cbnz	r2, 1ec54 <__udivmoddi4+0xe8>
   1ec52:	deff      	udf	#255	; 0xff
   1ec54:	fab2 f282 	clz	r2, r2
   1ec58:	2a00      	cmp	r2, #0
   1ec5a:	f040 808f 	bne.w	1ed7c <__udivmoddi4+0x210>
   1ec5e:	1b49      	subs	r1, r1, r5
   1ec60:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1ec64:	fa1f f885 	uxth.w	r8, r5
   1ec68:	2701      	movs	r7, #1
   1ec6a:	fbb1 fcfe 	udiv	ip, r1, lr
   1ec6e:	0c23      	lsrs	r3, r4, #16
   1ec70:	fb0e 111c 	mls	r1, lr, ip, r1
   1ec74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1ec78:	fb08 f10c 	mul.w	r1, r8, ip
   1ec7c:	4299      	cmp	r1, r3
   1ec7e:	d907      	bls.n	1ec90 <__udivmoddi4+0x124>
   1ec80:	18eb      	adds	r3, r5, r3
   1ec82:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1ec86:	d202      	bcs.n	1ec8e <__udivmoddi4+0x122>
   1ec88:	4299      	cmp	r1, r3
   1ec8a:	f200 80cd 	bhi.w	1ee28 <__udivmoddi4+0x2bc>
   1ec8e:	4684      	mov	ip, r0
   1ec90:	1a59      	subs	r1, r3, r1
   1ec92:	b2a3      	uxth	r3, r4
   1ec94:	fbb1 f0fe 	udiv	r0, r1, lr
   1ec98:	fb0e 1410 	mls	r4, lr, r0, r1
   1ec9c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1eca0:	fb08 f800 	mul.w	r8, r8, r0
   1eca4:	45a0      	cmp	r8, r4
   1eca6:	d907      	bls.n	1ecb8 <__udivmoddi4+0x14c>
   1eca8:	192c      	adds	r4, r5, r4
   1ecaa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1ecae:	d202      	bcs.n	1ecb6 <__udivmoddi4+0x14a>
   1ecb0:	45a0      	cmp	r8, r4
   1ecb2:	f200 80b6 	bhi.w	1ee22 <__udivmoddi4+0x2b6>
   1ecb6:	4618      	mov	r0, r3
   1ecb8:	eba4 0408 	sub.w	r4, r4, r8
   1ecbc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1ecc0:	e79f      	b.n	1ec02 <__udivmoddi4+0x96>
   1ecc2:	f1c7 0c20 	rsb	ip, r7, #32
   1ecc6:	40bb      	lsls	r3, r7
   1ecc8:	fa22 fe0c 	lsr.w	lr, r2, ip
   1eccc:	ea4e 0e03 	orr.w	lr, lr, r3
   1ecd0:	fa01 f407 	lsl.w	r4, r1, r7
   1ecd4:	fa20 f50c 	lsr.w	r5, r0, ip
   1ecd8:	fa21 f30c 	lsr.w	r3, r1, ip
   1ecdc:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1ece0:	4325      	orrs	r5, r4
   1ece2:	fbb3 f9f8 	udiv	r9, r3, r8
   1ece6:	0c2c      	lsrs	r4, r5, #16
   1ece8:	fb08 3319 	mls	r3, r8, r9, r3
   1ecec:	fa1f fa8e 	uxth.w	sl, lr
   1ecf0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1ecf4:	fb09 f40a 	mul.w	r4, r9, sl
   1ecf8:	429c      	cmp	r4, r3
   1ecfa:	fa02 f207 	lsl.w	r2, r2, r7
   1ecfe:	fa00 f107 	lsl.w	r1, r0, r7
   1ed02:	d90b      	bls.n	1ed1c <__udivmoddi4+0x1b0>
   1ed04:	eb1e 0303 	adds.w	r3, lr, r3
   1ed08:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1ed0c:	f080 8087 	bcs.w	1ee1e <__udivmoddi4+0x2b2>
   1ed10:	429c      	cmp	r4, r3
   1ed12:	f240 8084 	bls.w	1ee1e <__udivmoddi4+0x2b2>
   1ed16:	f1a9 0902 	sub.w	r9, r9, #2
   1ed1a:	4473      	add	r3, lr
   1ed1c:	1b1b      	subs	r3, r3, r4
   1ed1e:	b2ad      	uxth	r5, r5
   1ed20:	fbb3 f0f8 	udiv	r0, r3, r8
   1ed24:	fb08 3310 	mls	r3, r8, r0, r3
   1ed28:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1ed2c:	fb00 fa0a 	mul.w	sl, r0, sl
   1ed30:	45a2      	cmp	sl, r4
   1ed32:	d908      	bls.n	1ed46 <__udivmoddi4+0x1da>
   1ed34:	eb1e 0404 	adds.w	r4, lr, r4
   1ed38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1ed3c:	d26b      	bcs.n	1ee16 <__udivmoddi4+0x2aa>
   1ed3e:	45a2      	cmp	sl, r4
   1ed40:	d969      	bls.n	1ee16 <__udivmoddi4+0x2aa>
   1ed42:	3802      	subs	r0, #2
   1ed44:	4474      	add	r4, lr
   1ed46:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1ed4a:	fba0 8902 	umull	r8, r9, r0, r2
   1ed4e:	eba4 040a 	sub.w	r4, r4, sl
   1ed52:	454c      	cmp	r4, r9
   1ed54:	46c2      	mov	sl, r8
   1ed56:	464b      	mov	r3, r9
   1ed58:	d354      	bcc.n	1ee04 <__udivmoddi4+0x298>
   1ed5a:	d051      	beq.n	1ee00 <__udivmoddi4+0x294>
   1ed5c:	2e00      	cmp	r6, #0
   1ed5e:	d069      	beq.n	1ee34 <__udivmoddi4+0x2c8>
   1ed60:	ebb1 050a 	subs.w	r5, r1, sl
   1ed64:	eb64 0403 	sbc.w	r4, r4, r3
   1ed68:	fa04 fc0c 	lsl.w	ip, r4, ip
   1ed6c:	40fd      	lsrs	r5, r7
   1ed6e:	40fc      	lsrs	r4, r7
   1ed70:	ea4c 0505 	orr.w	r5, ip, r5
   1ed74:	e9c6 5400 	strd	r5, r4, [r6]
   1ed78:	2700      	movs	r7, #0
   1ed7a:	e747      	b.n	1ec0c <__udivmoddi4+0xa0>
   1ed7c:	f1c2 0320 	rsb	r3, r2, #32
   1ed80:	fa20 f703 	lsr.w	r7, r0, r3
   1ed84:	4095      	lsls	r5, r2
   1ed86:	fa01 f002 	lsl.w	r0, r1, r2
   1ed8a:	fa21 f303 	lsr.w	r3, r1, r3
   1ed8e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1ed92:	4338      	orrs	r0, r7
   1ed94:	0c01      	lsrs	r1, r0, #16
   1ed96:	fbb3 f7fe 	udiv	r7, r3, lr
   1ed9a:	fa1f f885 	uxth.w	r8, r5
   1ed9e:	fb0e 3317 	mls	r3, lr, r7, r3
   1eda2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1eda6:	fb07 f308 	mul.w	r3, r7, r8
   1edaa:	428b      	cmp	r3, r1
   1edac:	fa04 f402 	lsl.w	r4, r4, r2
   1edb0:	d907      	bls.n	1edc2 <__udivmoddi4+0x256>
   1edb2:	1869      	adds	r1, r5, r1
   1edb4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1edb8:	d22f      	bcs.n	1ee1a <__udivmoddi4+0x2ae>
   1edba:	428b      	cmp	r3, r1
   1edbc:	d92d      	bls.n	1ee1a <__udivmoddi4+0x2ae>
   1edbe:	3f02      	subs	r7, #2
   1edc0:	4429      	add	r1, r5
   1edc2:	1acb      	subs	r3, r1, r3
   1edc4:	b281      	uxth	r1, r0
   1edc6:	fbb3 f0fe 	udiv	r0, r3, lr
   1edca:	fb0e 3310 	mls	r3, lr, r0, r3
   1edce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1edd2:	fb00 f308 	mul.w	r3, r0, r8
   1edd6:	428b      	cmp	r3, r1
   1edd8:	d907      	bls.n	1edea <__udivmoddi4+0x27e>
   1edda:	1869      	adds	r1, r5, r1
   1eddc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1ede0:	d217      	bcs.n	1ee12 <__udivmoddi4+0x2a6>
   1ede2:	428b      	cmp	r3, r1
   1ede4:	d915      	bls.n	1ee12 <__udivmoddi4+0x2a6>
   1ede6:	3802      	subs	r0, #2
   1ede8:	4429      	add	r1, r5
   1edea:	1ac9      	subs	r1, r1, r3
   1edec:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1edf0:	e73b      	b.n	1ec6a <__udivmoddi4+0xfe>
   1edf2:	4637      	mov	r7, r6
   1edf4:	4630      	mov	r0, r6
   1edf6:	e709      	b.n	1ec0c <__udivmoddi4+0xa0>
   1edf8:	4607      	mov	r7, r0
   1edfa:	e6e7      	b.n	1ebcc <__udivmoddi4+0x60>
   1edfc:	4618      	mov	r0, r3
   1edfe:	e6fb      	b.n	1ebf8 <__udivmoddi4+0x8c>
   1ee00:	4541      	cmp	r1, r8
   1ee02:	d2ab      	bcs.n	1ed5c <__udivmoddi4+0x1f0>
   1ee04:	ebb8 0a02 	subs.w	sl, r8, r2
   1ee08:	eb69 020e 	sbc.w	r2, r9, lr
   1ee0c:	3801      	subs	r0, #1
   1ee0e:	4613      	mov	r3, r2
   1ee10:	e7a4      	b.n	1ed5c <__udivmoddi4+0x1f0>
   1ee12:	4660      	mov	r0, ip
   1ee14:	e7e9      	b.n	1edea <__udivmoddi4+0x27e>
   1ee16:	4618      	mov	r0, r3
   1ee18:	e795      	b.n	1ed46 <__udivmoddi4+0x1da>
   1ee1a:	4667      	mov	r7, ip
   1ee1c:	e7d1      	b.n	1edc2 <__udivmoddi4+0x256>
   1ee1e:	4681      	mov	r9, r0
   1ee20:	e77c      	b.n	1ed1c <__udivmoddi4+0x1b0>
   1ee22:	3802      	subs	r0, #2
   1ee24:	442c      	add	r4, r5
   1ee26:	e747      	b.n	1ecb8 <__udivmoddi4+0x14c>
   1ee28:	f1ac 0c02 	sub.w	ip, ip, #2
   1ee2c:	442b      	add	r3, r5
   1ee2e:	e72f      	b.n	1ec90 <__udivmoddi4+0x124>
   1ee30:	4638      	mov	r0, r7
   1ee32:	e708      	b.n	1ec46 <__udivmoddi4+0xda>
   1ee34:	4637      	mov	r7, r6
   1ee36:	e6e9      	b.n	1ec0c <__udivmoddi4+0xa0>

0001ee38 <__aeabi_idiv0>:
   1ee38:	4770      	bx	lr
   1ee3a:	bf00      	nop

0001ee3c <__aeabi_memclr>:
   1ee3c:	2200      	movs	r2, #0
   1ee3e:	f000 b803 	b.w	1ee48 <__aeabi_memset>
   1ee42:	bf00      	nop

0001ee44 <__aeabi_memcpy>:
   1ee44:	f7fd bf68 	b.w	1cd18 <memcpy>

0001ee48 <__aeabi_memset>:
   1ee48:	b470      	push	{r4, r5, r6}
   1ee4a:	0784      	lsls	r4, r0, #30
   1ee4c:	d046      	beq.n	1eedc <__aeabi_memset+0x94>
   1ee4e:	1e4c      	subs	r4, r1, #1
   1ee50:	2900      	cmp	r1, #0
   1ee52:	d041      	beq.n	1eed8 <__aeabi_memset+0x90>
   1ee54:	b2d5      	uxtb	r5, r2
   1ee56:	4603      	mov	r3, r0
   1ee58:	e002      	b.n	1ee60 <__aeabi_memset+0x18>
   1ee5a:	1e61      	subs	r1, r4, #1
   1ee5c:	b3e4      	cbz	r4, 1eed8 <__aeabi_memset+0x90>
   1ee5e:	460c      	mov	r4, r1
   1ee60:	f803 5b01 	strb.w	r5, [r3], #1
   1ee64:	0799      	lsls	r1, r3, #30
   1ee66:	d1f8      	bne.n	1ee5a <__aeabi_memset+0x12>
   1ee68:	2c03      	cmp	r4, #3
   1ee6a:	d92e      	bls.n	1eeca <__aeabi_memset+0x82>
   1ee6c:	b2d5      	uxtb	r5, r2
   1ee6e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1ee72:	2c0f      	cmp	r4, #15
   1ee74:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1ee78:	d919      	bls.n	1eeae <__aeabi_memset+0x66>
   1ee7a:	4626      	mov	r6, r4
   1ee7c:	f103 0110 	add.w	r1, r3, #16
   1ee80:	3e10      	subs	r6, #16
   1ee82:	2e0f      	cmp	r6, #15
   1ee84:	f841 5c10 	str.w	r5, [r1, #-16]
   1ee88:	f841 5c0c 	str.w	r5, [r1, #-12]
   1ee8c:	f841 5c08 	str.w	r5, [r1, #-8]
   1ee90:	f841 5c04 	str.w	r5, [r1, #-4]
   1ee94:	f101 0110 	add.w	r1, r1, #16
   1ee98:	d8f2      	bhi.n	1ee80 <__aeabi_memset+0x38>
   1ee9a:	f1a4 0110 	sub.w	r1, r4, #16
   1ee9e:	f021 010f 	bic.w	r1, r1, #15
   1eea2:	f004 040f 	and.w	r4, r4, #15
   1eea6:	3110      	adds	r1, #16
   1eea8:	2c03      	cmp	r4, #3
   1eeaa:	440b      	add	r3, r1
   1eeac:	d90d      	bls.n	1eeca <__aeabi_memset+0x82>
   1eeae:	461e      	mov	r6, r3
   1eeb0:	4621      	mov	r1, r4
   1eeb2:	3904      	subs	r1, #4
   1eeb4:	2903      	cmp	r1, #3
   1eeb6:	f846 5b04 	str.w	r5, [r6], #4
   1eeba:	d8fa      	bhi.n	1eeb2 <__aeabi_memset+0x6a>
   1eebc:	1f21      	subs	r1, r4, #4
   1eebe:	f021 0103 	bic.w	r1, r1, #3
   1eec2:	3104      	adds	r1, #4
   1eec4:	440b      	add	r3, r1
   1eec6:	f004 0403 	and.w	r4, r4, #3
   1eeca:	b12c      	cbz	r4, 1eed8 <__aeabi_memset+0x90>
   1eecc:	b2d2      	uxtb	r2, r2
   1eece:	441c      	add	r4, r3
   1eed0:	f803 2b01 	strb.w	r2, [r3], #1
   1eed4:	42a3      	cmp	r3, r4
   1eed6:	d1fb      	bne.n	1eed0 <__aeabi_memset+0x88>
   1eed8:	bc70      	pop	{r4, r5, r6}
   1eeda:	4770      	bx	lr
   1eedc:	460c      	mov	r4, r1
   1eede:	4603      	mov	r3, r0
   1eee0:	e7c2      	b.n	1ee68 <__aeabi_memset+0x20>
   1eee2:	5344      	.short	0x5344
   1eee4:	61662050 	.word	0x61662050
   1eee8:	43546c69 	.word	0x43546c69
   1eeec:	61662048 	.word	0x61662048
   1eef0:	45476c69 	.word	0x45476c69
   1eef4:	61662054 	.word	0x61662054
   1eef8:	55526c69 	.word	0x55526c69
   1eefc:	6166204e 	.word	0x6166204e
   1ef00:	6c69      	.short	0x6c69
   1ef02:	7572      	.short	0x7572
   1ef04:	612f7473 	.word	0x612f7473
   1ef08:	732f7070 	.word	0x732f7070
   1ef0c:	6c2f6372 	.word	0x6c2f6372
   1ef10:	722e6269 	.word	0x722e6269
   1ef14:	00000073 	.word	0x00000073
   1ef18:	0001ef02 	.word	0x0001ef02
   1ef1c:	00000013 	.word	0x00000013
   1ef20:	0000005c 	.word	0x0000005c
   1ef24:	00000005 	.word	0x00000005
   1ef28:	0001ef02 	.word	0x0001ef02
   1ef2c:	00000013 	.word	0x00000013
   1ef30:	00000065 	.word	0x00000065
   1ef34:	00000005 	.word	0x00000005
   1ef38:	50494843 	.word	0x50494843
   1ef3c:	61662038 	.word	0x61662038
   1ef40:	00006c69 	.word	0x00006c69
   1ef44:	0001ef02 	.word	0x0001ef02
   1ef48:	00000013 	.word	0x00000013
   1ef4c:	00000077 	.word	0x00000077
   1ef50:	00000005 	.word	0x00000005
   1ef54:	0001ef02 	.word	0x0001ef02
   1ef58:	00000013 	.word	0x00000013
   1ef5c:	0000007d 	.word	0x0000007d
   1ef60:	0000000d 	.word	0x0000000d
   1ef64:	0001ef02 	.word	0x0001ef02
   1ef68:	00000013 	.word	0x00000013
   1ef6c:	0000007c 	.word	0x0000007c
   1ef70:	00000009 	.word	0x00000009
   1ef74:	696e6170 	.word	0x696e6170
   1ef78:	2063      	.short	0x2063
   1ef7a:	6f6e      	.short	0x6f6e
   1ef7c:	636f6c20 	.word	0x636f6c20
   1ef80:	0a          	.byte	0x0a
   1ef81:	61          	.byte	0x61
   1ef82:	2074      	.short	0x2074
   1ef84:	6e696c20 	.word	0x6e696c20
   1ef88:	2065      	.short	0x2065
   1ef8a:	000a      	.short	0x000a
   1ef8c:	0001ef02 	.word	0x0001ef02
   1ef90:	00000013 	.word	0x00000013
   1ef94:	00000095 	.word	0x00000095
   1ef98:	00000014 	.word	0x00000014
   1ef9c:	6c6c6163 	.word	0x6c6c6163
   1efa0:	60206465 	.word	0x60206465
   1efa4:	6974704f 	.word	0x6974704f
   1efa8:	3a3a6e6f 	.word	0x3a3a6e6f
   1efac:	72776e75 	.word	0x72776e75
   1efb0:	29287061 	.word	0x29287061
   1efb4:	6e6f2060 	.word	0x6e6f2060
   1efb8:	60206120 	.word	0x60206120
   1efbc:	656e6f4e 	.word	0x656e6f4e
   1efc0:	61762060 	.word	0x61762060
   1efc4:	756c      	.short	0x756c
   1efc6:	65          	.byte	0x65
   1efc7:	00          	.byte	0x00
   1efc8:	0001efc7 	.word	0x0001efc7
   1efcc:	0001efc8 	.word	0x0001efc8
   1efd0:	65737361 	.word	0x65737361
   1efd4:	6f697472 	.word	0x6f697472
   1efd8:	6166206e 	.word	0x6166206e
   1efdc:	64656c69 	.word	0x64656c69
   1efe0:	2860203a 	.word	0x2860203a
   1efe4:	7466656c 	.word	0x7466656c
   1efe8:	203d3d20 	.word	0x203d3d20
   1efec:	68676972 	.word	0x68676972
   1eff0:	0a602974 	.word	0x0a602974
   1eff4:	656c2020 	.word	0x656c2020
   1eff8:	203a7466 	.word	0x203a7466
   1effc:	60          	.byte	0x60
   1effd:	60          	.byte	0x60
   1effe:	0a2c      	.short	0x0a2c
   1f000:	67697220 	.word	0x67697220
   1f004:	203a7468 	.word	0x203a7468
   1f008:	60          	.byte	0x60
   1f009:	60          	.byte	0x60
   1f00a:	203a      	.short	0x203a
   1f00c:	0001efd0 	.word	0x0001efd0
   1f010:	0000002d 	.word	0x0000002d
   1f014:	0001effd 	.word	0x0001effd
   1f018:	0000000c 	.word	0x0000000c
   1f01c:	0001f009 	.word	0x0001f009
   1f020:	00000003 	.word	0x00000003
   1f024:	0001f00c 	.word	0x0001f00c
   1f028:	6e206f6e 	.word	0x6e206f6e
   1f02c:	006c6c75 	.word	0x006c6c75
   1f030:	0001f028 	.word	0x0001f028
   1f034:	00000007 	.word	0x00000007
   1f038:	0001f030 	.word	0x0001f030
   1f03c:	0001f03c 	.word	0x0001f03c
   1f040:	74737572 	.word	0x74737572
   1f044:	6e796d2f 	.word	0x6e796d2f
   1f048:	2f747765 	.word	0x2f747765
   1f04c:	2f637273 	.word	0x2f637273
   1f050:	2e62696c 	.word	0x2e62696c
   1f054:	00007372 	.word	0x00007372
   1f058:	0001f040 	.word	0x0001f040
   1f05c:	00000016 	.word	0x00000016
   1f060:	000000db 	.word	0x000000db
   1f064:	00000011 	.word	0x00000011
   1f068:	00008e55 	.word	0x00008e55
   1f06c:	00000004 	.word	0x00000004
   1f070:	00000004 	.word	0x00000004
   1f074:	000133cb 	.word	0x000133cb
   1f078:	65737361 	.word	0x65737361
   1f07c:	6f697472 	.word	0x6f697472
   1f080:	6166206e 	.word	0x6166206e
   1f084:	64656c69 	.word	0x64656c69
   1f088:	2860203a 	.word	0x2860203a
   1f08c:	7466656c 	.word	0x7466656c
   1f090:	203d3d20 	.word	0x203d3d20
   1f094:	68676972 	.word	0x68676972
   1f098:	0a602974 	.word	0x0a602974
   1f09c:	656c2020 	.word	0x656c2020
   1f0a0:	203a7466 	.word	0x203a7466
   1f0a4:	60          	.byte	0x60
   1f0a5:	60          	.byte	0x60
   1f0a6:	0a2c      	.short	0x0a2c
   1f0a8:	67697220 	.word	0x67697220
   1f0ac:	203a7468 	.word	0x203a7468
   1f0b0:	60          	.byte	0x60
   1f0b1:	60          	.byte	0x60
   1f0b2:	203a      	.short	0x203a
   1f0b4:	0001f078 	.word	0x0001f078
   1f0b8:	0000002d 	.word	0x0000002d
   1f0bc:	0001f0a5 	.word	0x0001f0a5
   1f0c0:	0000000c 	.word	0x0000000c
   1f0c4:	0001f0b1 	.word	0x0001f0b1
   1f0c8:	00000003 	.word	0x00000003
   1f0cc:	0001f0b4 	.word	0x0001f0b4
   1f0d0:	74736564 	.word	0x74736564
   1f0d4:	74616e69 	.word	0x74616e69
   1f0d8:	206e6f69 	.word	0x206e6f69
   1f0dc:	20646e61 	.word	0x20646e61
   1f0e0:	72756f73 	.word	0x72756f73
   1f0e4:	73206563 	.word	0x73206563
   1f0e8:	6563696c 	.word	0x6563696c
   1f0ec:	61682073 	.word	0x61682073
   1f0f0:	64206576 	.word	0x64206576
   1f0f4:	65666669 	.word	0x65666669
   1f0f8:	746e6572 	.word	0x746e6572
   1f0fc:	6e656c20 	.word	0x6e656c20
   1f100:	73687467 	.word	0x73687467
   1f104:	0001f0d0 	.word	0x0001f0d0
   1f108:	00000034 	.word	0x00000034
   1f10c:	0001f104 	.word	0x0001f104
   1f110:	0001f110 	.word	0x0001f110
   1f114:	7375722f 	.word	0x7375722f
   1f118:	352f6374 	.word	0x352f6374
   1f11c:	66613765 	.word	0x66613765
   1f120:	39363634 	.word	0x39363634
   1f124:	65303866 	.word	0x65303866
   1f128:	38366635 	.word	0x38366635
   1f12c:	31343132 	.word	0x31343132
   1f130:	30353066 	.word	0x30353066
   1f134:	61333931 	.word	0x61333931
   1f138:	39373662 	.word	0x39373662
   1f13c:	62646661 	.word	0x62646661
   1f140:	2f316234 	.word	0x2f316234
   1f144:	2f637273 	.word	0x2f637273
   1f148:	6362696c 	.word	0x6362696c
   1f14c:	2f65726f 	.word	0x2f65726f
   1f150:	7263616d 	.word	0x7263616d
   1f154:	6d2f736f 	.word	0x6d2f736f
   1f158:	722e646f 	.word	0x722e646f
   1f15c:	00000073 	.word	0x00000073
   1f160:	0001f114 	.word	0x0001f114
   1f164:	00000049 	.word	0x00000049
   1f168:	00000012 	.word	0x00000012
   1f16c:	0000000d 	.word	0x0000000d
   1f170:	656d6f53 	.word	0x656d6f53
   1f174:	656e6f4e 	.word	0x656e6f4e
   1f178:	00008e4d 	.word	0x00008e4d
   1f17c:	00000004 	.word	0x00000004
   1f180:	00000004 	.word	0x00000004
   1f184:	0000942b 	.word	0x0000942b
   1f188:	00000060 	.word	0x00000060
   1f18c:	0001f188 	.word	0x0001f188
   1f190:	20697073 	.word	0x20697073
   1f194:	73756c66 	.word	0x73756c66
   1f198:	61662068 	.word	0x61662068
   1f19c:	6c69      	.short	0x6c69
   1f19e:	552f      	.short	0x552f
   1f1a0:	73726573 	.word	0x73726573
   1f1a4:	70754c2f 	.word	0x70754c2f
   1f1a8:	502f7970 	.word	0x502f7970
   1f1ac:	54656e69 	.word	0x54656e69
   1f1b0:	2f656d69 	.word	0x2f656d69
   1f1b4:	656e6970 	.word	0x656e6970
   1f1b8:	656d6974 	.word	0x656d6974
   1f1bc:	7375722d 	.word	0x7375722d
   1f1c0:	796d2d74 	.word	0x796d2d74
   1f1c4:	7477656e 	.word	0x7477656e
   1f1c8:	7375722f 	.word	0x7375722f
   1f1cc:	74732f74 	.word	0x74732f74
   1f1d0:	35333737 	.word	0x35333737
   1f1d4:	64636c2d 	.word	0x64636c2d
   1f1d8:	7461622d 	.word	0x7461622d
   1f1dc:	722d6863 	.word	0x722d6863
   1f1e0:	72732f73 	.word	0x72732f73
   1f1e4:	696c2f63 	.word	0x696c2f63
   1f1e8:	73722e62 	.word	0x73722e62
   1f1ec:	0001f19e 	.word	0x0001f19e
   1f1f0:	0000004e 	.word	0x0000004e
   1f1f4:	000000fe 	.word	0x000000fe
   1f1f8:	00000009 	.word	0x00000009
   1f1fc:	20697073 	.word	0x20697073
   1f200:	61746164 	.word	0x61746164
   1f204:	69616620 	.word	0x69616620
   1f208:	0000006c 	.word	0x0000006c
   1f20c:	0001f19e 	.word	0x0001f19e
   1f210:	0000004e 	.word	0x0000004e
   1f214:	000000b0 	.word	0x000000b0
   1f218:	00000009 	.word	0x00000009
   1f21c:	0001f19e 	.word	0x0001f19e
   1f220:	0000004e 	.word	0x0000004e
   1f224:	000000f3 	.word	0x000000f3
   1f228:	00000009 	.word	0x00000009
   1f22c:	0001f19e 	.word	0x0001f19e
   1f230:	0000004e 	.word	0x0000004e
   1f234:	00000098 	.word	0x00000098
   1f238:	0000000d 	.word	0x0000000d
   1f23c:	20697073 	.word	0x20697073
   1f240:	20646d63 	.word	0x20646d63
   1f244:	6c696166 	.word	0x6c696166
   1f248:	0001f19e 	.word	0x0001f19e
   1f24c:	0000004e 	.word	0x0000004e
   1f250:	00000097 	.word	0x00000097
   1f254:	00000009 	.word	0x00000009
   1f258:	0001f19e 	.word	0x0001f19e
   1f25c:	0000004e 	.word	0x0000004e
   1f260:	0000009d 	.word	0x0000009d
   1f264:	00000011 	.word	0x00000011
   1f268:	0001f19e 	.word	0x0001f19e
   1f26c:	0000004e 	.word	0x0000004e
   1f270:	0000009c 	.word	0x0000009c
   1f274:	0000000d 	.word	0x0000000d
   1f278:	0001f19e 	.word	0x0001f19e
   1f27c:	0000004e 	.word	0x0000004e
   1f280:	000000c5 	.word	0x000000c5
   1f284:	0000002d 	.word	0x0000002d
   1f288:	0001f19e 	.word	0x0001f19e
   1f28c:	0000004e 	.word	0x0000004e
   1f290:	000000c9 	.word	0x000000c9
   1f294:	0000002d 	.word	0x0000002d
   1f298:	0001f19e 	.word	0x0001f19e
   1f29c:	0000004e 	.word	0x0000004e
   1f2a0:	000000d8 	.word	0x000000d8
   1f2a4:	00000019 	.word	0x00000019
	...

0001f2b0 <str.0>:
   1f2b0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f2c0:	20687469 7265766f 776f6c66 0001f19e     ith overflow....
   1f2d0:	0000004e 000000d9 00000019 0001f19e     N...............
   1f2e0:	0000004e 000000db 00000019 0001f19e     N...............
   1f2f0:	0000004e 000000dc 00000019 20697073     N...........spi 
   1f300:	74696e69 69616620 0000006c 0001f19e     init fail.......
   1f310:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1f320:	0001f31c 012d2c01 00002d2c 0001f324     .....,-.,-..$...
   1f330:	00000007 0001f330 008402a2 0001f338     ....0.......8...
   1f340:	000000c5 0001f340 0000000a 0001f348     ....@.......H...
   1f350:	00002a8a 0001f350 0000ee8a 0001f358     .*..P.......X...
   1f360:	0000000e 0001f360 00000000 0001f368     ....`.......h...
   1f370:	00000008 0001f370 00000005 0001f378     ....p.......x...
   1f380:	0001f19e 0000004e 00000088 00000009     ....N...........
   1f390:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   1f3a0:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   1f3b0:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   1f3c0:	39393236 65396264 33323863 62696c2f     6299db9ec823/lib
   1f3d0:	70696863 2e302d38 2f322e31 2f637273     chip8-0.1.2/src/
   1f3e0:	2e62696c 00007372 0001f390 00000056     lib.rs......V...
   1f3f0:	0000009d 00000014 0001f390 00000056     ............V...
   1f400:	000000d4 00000011 0001f390 00000056     ............V...
   1f410:	000000d5 0000001a 00000000 00000000     ................

0001f420 <str.0>:
   1f420:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f430:	20687469 7265766f 776f6c66 0001f390     ith overflow....
   1f440:	00000056 000000d5 00000011 00000005     V...............
   1f450:	0001f44c 4c205d5b 78562044 495b202c     L...[] LD Vx, [I
   1f460:	0000005d 0001f454 00000001 0001f455     ]...T.......U...
   1f470:	0000000c 0001f464 00000000 00000020     ....d....... ...
   1f480:	00000008 00000002 00000000 00000000     ................
   1f490:	00000004 00000003 0001f478 6362696c     ........x...libc
   1f4a0:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1f4b0:	6e6e6e20 00000040 00000020 0001f49c      nnn@... .......
   1f4c0:	00000008 0001f49c 00000008 0001f390     ................
   1f4d0:	00000056 000001a1 0001f4bc 0001f390     V...............
   1f4e0:	00000056 000001a3 0000001d 0001f390     V...............
   1f4f0:	00000056 000001a4 0000002a 0001f390     V.......*.......
   1f500:	00000056 000001a4 00000021 0001f390     V.......!.......
   1f510:	00000056 000001a4 00000015 444c205d     V...........] LD
   1f520:	5d495b20 7856202c 0001f454 00000001      [I], VxT.......
   1f530:	0001f51c 0000000c 0001f528 0001f49c     ........(.......
   1f540:	00000008 0001f49c 00000008 0001f390     ................
   1f550:	00000056 0000019a 0001f53c 0001f390     V.......<.......
   1f560:	00000056 0000019c 0000001d 0001f390     V...............
   1f570:	00000056 0000019d 00000035 0001f390     V.......5.......
   1f580:	00000056 0000019d 0000001e 0001f390     V...............
   1f590:	00000056 0000019d 00000015 444c205d     V...........] LD
   1f5a0:	202c4220 00007856 0001f454 00000001      B, Vx..T.......
   1f5b0:	0001f59c 0000000a 0001f5a8 0001f49c     ................
   1f5c0:	00000008 0001f49c 00000008 0001f390     ................
   1f5d0:	00000056 00000193 0001f5bc 0001f390     V...............
   1f5e0:	00000056 00000194 0000001b 0001f390     V...............
   1f5f0:	00000056 00000195 00000011 0001f390     V...............
   1f600:	00000056 00000196 0000001a 0001f390     V...............
   1f610:	00000056 00000196 00000011 0001f390     V...............
   1f620:	00000056 00000197 0000001a 0001f390     V...............
   1f630:	00000056 00000197 00000011 444c205d     V...........] LD
   1f640:	202c4620 00007856 0001f454 00000001      F, Vx..T.......
   1f650:	0001f63c 0000000a 0001f648 0001f49c     <.......H.......
   1f660:	00000008 0001f49c 00000008 0001f390     ................
   1f670:	00000056 0000018f 0001f65c 0001f390     V.......\.......
   1f680:	00000056 00000190 0000001b 0001f390     V...............
   1f690:	00000056 00000190 0000001a 00000000     V...............

0001f6a0 <str.1>:
   1f6a0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f6b0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f6c0:	41205d77 49204444 7856202c 0001f454     w] ADD I, VxT...
   1f6d0:	00000001 0001f6c1 0000000b 0001f6cc     ................
   1f6e0:	0001f49c 00000008 0001f49c 00000008     ................
   1f6f0:	0001f390 00000056 0000018b 0001f6e0     ....V...........
   1f700:	0001f390 00000056 0000018c 0000002e     ....V...........
   1f710:	444c205d 2c545320 00785620 0001f454     ] LD ST, Vx.T...
   1f720:	00000001 0001f710 0000000b 0001f71c     ................
   1f730:	0001f49c 00000008 0001f49c 00000008     ................
   1f740:	0001f390 00000056 00000187 0001f730     ....V.......0...
   1f750:	0001f390 00000056 00000188 0000001b     ....V...........
   1f760:	444c205d 2c544420 00785620 0001f454     ] LD DT, Vx.T...
   1f770:	00000001 0001f760 0000000b 0001f76c     ....`.......l...
   1f780:	0001f49c 00000008 0001f49c 00000008     ................
   1f790:	0001f390 00000056 00000183 0001f780     ....V...........
   1f7a0:	0001f390 00000056 00000184 0000001b     ....V...........
   1f7b0:	444c205d 2c785620 00004b20 0001f454     ] LD Vx, K..T...
   1f7c0:	00000001 0001f7b0 0000000a 0001f7bc     ................
   1f7d0:	0001f49c 00000008 0001f49c 00000008     ................
   1f7e0:	0001f390 00000056 0000017f 0001f7d0     ....V...........
   1f7f0:	0001f390 00000056 00000180 00000011     ....V...........
   1f800:	444c205d 2c785620 00544420 0001f454     ] LD Vx, DT.T...
   1f810:	00000001 0001f800 0000000b 0001f80c     ................
   1f820:	0001f49c 00000008 0001f49c 00000008     ................
   1f830:	0001f390 00000056 0000017b 0001f820     ....V...{... ...
   1f840:	0001f390 00000056 0000017c 00000011     ....V...|.......
   1f850:	4b53205d 5620504e 00000078 0001f454     ] SKNP Vx...T...
   1f860:	00000001 0001f850 00000009 0001f85c     ....P.......\...
   1f870:	0001f49c 00000008 0001f49c 00000008     ................
   1f880:	0001f390 00000056 00000175 0001f870     ....V...u...p...
   1f890:	0001f390 00000056 00000176 00000021     ....V...v...!...
   1f8a0:	0001f454 00000001 0001f4a4 00000008     T...............
   1f8b0:	0001f8a0 0001f49c 00000008 0001f49c     ................
   1f8c0:	00000008 0001f390 00000056 0000016f     ........V...o...
   1f8d0:	0001f8b4 0001f390 00000056 00000170     ........V...p...
   1f8e0:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1f8f0:	006e202c 0001f454 00000001 0001f8e4     , n.T...........
   1f900:	0000000f 0001f8f4 0001f49c 00000008     ................
   1f910:	0001f49c 00000008 0001f390 00000056     ............V...
   1f920:	00000156 0001f908 0001f390 00000056     V...........V...
   1f930:	00000157 0000001d 0001f390 00000056     W...........V...
   1f940:	00000158 0000001d 0001f390 00000056     X...........V...
   1f950:	0000015e 00000026 0001f390 00000056     ^...&.......V...
   1f960:	0000015e 0000001d 0001f390 00000056     ^...........V...
   1f970:	00000160 00000021 00000000 00000000     `...!...........

0001f980 <str.2>:
   1f980:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1f990:	6574616c 65687420 6d657220 646e6961     late the remaind
   1f9a0:	77207265 20687469 69642061 6f736976     er with a diviso
   1f9b0:	666f2072 72657a20 0000006f 0001f390     r of zero.......
   1f9c0:	00000056 00000163 00000025 0001f390     V...c...%.......
   1f9d0:	00000056 00000165 0000002d 00000000     V...e...-.......

0001f9e0 <str.3>:
   1f9e0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f9f0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1fa00:	00000077 0001f390 00000056 00000165     w.......V...e...
   1fa10:	00000028 00000000 00000000 00000000     (...............

0001fa20 <str.4>:
   1fa20:	65747461 2074706d 73206f74 74666968     attempt to shift
   1fa30:	66656c20 69772074 6f206874 66726576      left with overf
   1fa40:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1fa50:	0001f454 00000001 0001fa43 0000000c     T.......C.......
   1fa60:	0001fa50 0001f49c 00000008 0001f49c     P...............
   1fa70:	00000008 0001f390 00000056 00000152     ........V...R...
   1fa80:	0001fa64 0001f390 00000056 00000153     d.......V...S...
   1fa90:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1faa0:	0001f454 00000001 0001fa94 0000000c     T...............
   1fab0:	0001faa0 0001f49c 00000008 0001f49c     ................
   1fac0:	00000008 0001f390 00000056 0000014e     ........V...N...
   1fad0:	0001fab4 444c205d 202c4920 006e6e6e     ....] LD I, nnn.
   1fae0:	0001f454 00000001 0001fad4 0000000b     T...............
   1faf0:	0001fae0 0001f49c 00000008 0001f49c     ................
   1fb00:	00000008 0001f390 00000056 0000014a     ........V...J...
   1fb10:	0001faf4 4e53205d 78562045 7956202c     ....] SNE Vx, Vy
   1fb20:	0001f454 00000001 0001fb14 0000000c     T...............
   1fb30:	0001fb20 0001f49c 00000008 0001f49c      ...............
   1fb40:	00000008 0001f390 00000056 00000144     ........V...D...
   1fb50:	0001fb34 0001f390 00000056 00000145     4.......V...E...
   1fb60:	00000014 0001f390 00000056 00000145     ........V...E...
   1fb70:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1fb80:	0001f454 00000001 0001fb74 0000000c     T.......t.......
   1fb90:	0001fb80 0001f49c 00000008 0001f49c     ................
   1fba0:	00000008 0001f390 00000056 0000013f     ........V...?...
   1fbb0:	0001fb94 0001f390 00000056 00000140     ........V...@...
   1fbc0:	00000020 0001f390 00000056 00000141      .......V...A...
   1fbd0:	0000001d 0001f390 00000056 00000141     ........V...A...
   1fbe0:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1fbf0:	00000079 0001f454 00000001 0001fbe4     y...T...........
   1fc00:	0000000d 0001fbf4 0001f49c 00000008     ................
   1fc10:	0001f49c 00000008 0001f390 00000056     ............V...
   1fc20:	00000139 0001fc08 0001f390 00000056     9...........V...
   1fc30:	0000013a 0000001e 0001f390 00000056     :...........V...
   1fc40:	0000013a 00000038 0001f390 00000056     :...8.......V...
   1fc50:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1fc60:	7956202c 0001f454 00000001 0001fc58     , VyT.......X...
   1fc70:	0000000c 0001fc64 0001f49c 00000008     ....d...........
   1fc80:	0001f49c 00000008 0001f390 00000056     ............V...
   1fc90:	00000134 0001fc78 0001f390 00000056     4...x.......V...
   1fca0:	00000135 0000001f 0001f390 00000056     5...........V...
   1fcb0:	00000136 0000001d 0001f390 00000056     6...........V...
   1fcc0:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1fcd0:	7956202c 0001f454 00000001 0001fcc8     , VyT...........
   1fce0:	0000000c 0001fcd4 0001f49c 00000008     ................
   1fcf0:	0001f49c 00000008 0001f390 00000056     ............V...
   1fd00:	0000012e 0001fce8 0001f390 00000056     ............V...
   1fd10:	0000012f 0000001e 0001f390 00000056     /...........V...
   1fd20:	0000012f 00000038 0001f390 00000056     /...8.......V...
   1fd30:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1fd40:	7956202c 0001f454 00000001 0001fd38     , VyT.......8...
   1fd50:	0000000c 0001fd44 0001f49c 00000008     ....D...........
   1fd60:	0001f49c 00000008 0001f390 00000056     ............V...
   1fd70:	00000128 0001fd58 0001f390 00000056     (...X.......V...
   1fd80:	00000129 0000001e 0001f390 00000056     )...........V...
   1fd90:	00000129 00000038 0001f390 00000056     )...8.......V...
   1fda0:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1fdb0:	7956202c 0001f454 00000001 0001fda8     , VyT...........
   1fdc0:	0000000c 0001fdb4 0001f49c 00000008     ................
   1fdd0:	0001f49c 00000008 0001f390 00000056     ............V...
   1fde0:	00000124 0001fdc8 0001f390 00000056     $...........V...
   1fdf0:	00000125 0000001e 0001f390 00000056     %...........V...
   1fe00:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1fe10:	7956202c 0001f454 00000001 0001fe08     , VyT...........
   1fe20:	0000000c 0001fe14 0001f49c 00000008     ................
   1fe30:	0001f49c 00000008 0001f390 00000056     ............V...
   1fe40:	00000120 0001fe28 0001f390 00000056      ...(.......V...
   1fe50:	00000121 0000001e 0001f390 00000056     !...........V...
   1fe60:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1fe70:	00795620 0001f454 00000001 0001fe68      Vy.T.......h...
   1fe80:	0000000b 0001fe74 0001f49c 00000008     ....t...........
   1fe90:	0001f49c 00000008 0001f390 00000056     ............V...
   1fea0:	0000011c 0001fe88 0001f390 00000056     ............V...
   1feb0:	0000011d 0000001e 0001f390 00000056     ............V...
   1fec0:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1fed0:	00795620 0001f454 00000001 0001fec8      Vy.T...........
   1fee0:	0000000b 0001fed4 0001f49c 00000008     ................
   1fef0:	0001f49c 00000008 0001f390 00000056     ............V...
   1ff00:	00000118 0001fee8 0001f390 00000056     ............V...
   1ff10:	00000119 0000001d 0001f390 00000056     ............V...
   1ff20:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1ff30:	6b6b202c 0001f454 00000001 0001ff28     , kkT.......(...
   1ff40:	0000000c 0001ff34 0001f49c 00000008     ....4...........
   1ff50:	0001f49c 00000008 0001f390 00000056     ............V...
   1ff60:	00000114 0001ff48 0001f390 00000056     ....H.......V...
   1ff70:	00000115 0000001d 0001f390 00000056     ............V...
   1ff80:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1ff90:	006b6b20 0001f454 00000001 0001ff88      kk.T...........
   1ffa0:	0000000b 0001ff94 0001f49c 00000008     ................
   1ffb0:	0001f49c 00000008 0001f390 00000056     ............V...
   1ffc0:	00000110 0001ffa8 0001f390 00000056     ............V...
   1ffd0:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1ffe0:	706f2064 0000203a 0001f454 00000001     d op: ..T.......
   1fff0:	0001ffd8 0000000e 0001ffe8 00000000     ................
   20000:	00000020 00000008 00000002 00000000      ...............
   20010:	00000000 00000004 00000003 00000001     ................
   20020:	00000020 00000008 00000002 00000000      ...............
   20030:	00000000 00000004 00000003 0001fffc     ................
   20040:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   20050:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   20060:	00020040 0000001e 00000005 00000032     @...........2...
   20070:	4553205d 2c785620 00795620 0001f454     ] SE Vx, Vy.T...
   20080:	00000001 00020070 0000000b 0002007c     ....p.......|...
   20090:	0001f49c 00000008 0001f49c 00000008     ................
   200a0:	0001f390 00000056 0000010a 00020090     ....V...........
   200b0:	0001f390 00000056 0000010b 00000014     ....V...........
   200c0:	0001f390 00000056 0000010b 00000021     ....V.......!...
   200d0:	4e53205d 78562045 6b6b202c 0001f454     ] SNE Vx, kkT...
   200e0:	00000001 000200d0 0000000c 000200dc     ................
   200f0:	0001f49c 00000008 0001f49c 00000008     ................
   20100:	0001f390 00000056 00000104 000200f0     ....V...........
   20110:	0001f390 00000056 00000105 00000014     ....V...........
   20120:	4553205d 20785620 00006b6b 0001f454     ] SE Vx kk..T...
   20130:	00000001 00020120 0000000a 0002012c     .... .......,...
   20140:	0001f49c 00000008 0001f49c 00000008     ................
   20150:	0001f390 00000056 000000fe 00020140     ....V.......@...
   20160:	0001f390 00000056 000000ff 00000014     ....V...........
   20170:	4143205d 6e204c4c 00006e6e 0001f454     ] CALL nnn..T...
   20180:	00000001 00020170 0000000a 0002017c     ....p.......|...
   20190:	0001f49c 00000008 0001f49c 00000008     ................
   201a0:	0001f390 00000056 000000f9 00020190     ....V...........
   201b0:	0001f454 00000001 0001f4ac 00000008     T...............
   201c0:	000201b0 0001f49c 00000008 0001f49c     ................
   201d0:	00000008 0001f390 00000056 000000f5     ........V.......
   201e0:	000201c4 5953205d 6e6e2053 0000006e     ....] SYS nnn...
   201f0:	0001f454 00000001 000201e4 00000009     T...............
   20200:	000201f0 0001f49c 00000008 0001f49c     ................
   20210:	00000008 0001f390 00000056 000000f1     ........V.......
   20220:	00020204 20746f6e 6c706d69 6e656d65     ....not implemen
   20230:	00646574 00020040 0000001e 00000002     ted.@...........
   20240:	00000002 4552205d 00000054 0001f454     ....] RET...T...
   20250:	00000001 00020244 00000005 0002024c     ....D.......L...
   20260:	0001f49c 00000008 0001f49c 00000008     ................
   20270:	0001f390 00000056 000000ec 00020260     ....V.......`...
   20280:	4c43205d 00000053 0001f454 00000001     ] CLS...T.......
   20290:	00020280 00000005 00020288 0001f49c     ................
   202a0:	00000008 0001f49c 00000008 0001f390     ................
   202b0:	00000056 000000e5 0002029c 0001f390     V...............
   202c0:	00000056 00000093 0000001b 0001f390     V...............
   202d0:	00000056 00000097 00000009 0001f390     V...............
   202e0:	00000056 000000bb 0000000d 0001f390     V...............
   202f0:	00000056 000000be 0000000d 00011fad     V...............
   20300:	00000004 00000004 000133cb 74737552     .........3..Rust
   20310:	49484320 630a3850 38706968 00000000      CHIP8.chip8....
   20320:	00000000 00020317 00000006 00020320     ............ ...
   20330:	50494843 74732038 65747261 25120a64     CHIP8 started..%
   20340:	43415053 4e492045 45444156 30205352     SPACE INVADERS 0
   20350:	2031392e 44207942 64697661 4e495720     .91 By David WIN
   20360:	60524554 62006100 d0dda308 f2087118     TER`.a.b.....q..
   20370:	1220311e 6108702d 12403000 6c05692d     .1 .-p.a.0@.-i.l
   20380:	23006e15 f00a6091 3007f015 234b1200     .n.#.`.....0..K#
   20390:	12017e91 68006645 6a00691c 6c0a6b04     .~..Ef.h.i.j.k.l
   203a0:	6e3c6d04 23e0000f fd512375 e0046015     .m<n...#u#Q..`..
   203b0:	237d129e 78003875 607523ff 129ee006     ..}#u8.x.#u`....
   203c0:	3875238b 23017839 12003675 e005609f     .#u89x.#u6...`..
   203d0:	66e9129e 841b6501 d4d9a380 d4d9a351     ...f.e......Q...
   203e0:	35ff7551 66ad12ff d4e91200 12013f51     Qu.5...f....Q?..
   203f0:	6651d4e9 73408300 62b58303 622283f8     ..Qf..@s...b.."b
   20400:	12003308 827d23c9 12084306 121033d3     .3...#}..C...3..
   20410:	827d23d5 12183306 827d23dd 12204306     .#}..3...#}..C .
   20420:	122833e7 3e7d23e9 79071300 69184906     .3(..#}>...y.I.i
   20430:	6b046a00 7d046c0a 000f6ef4 235123e0     .j.k.l.}.n...#Q#
   20440:	1215fd75 3707f76f fd6f1200 8b512315     u...o..7..o..#Q.
   20450:	13123ba4 6a027c1b 13023bfc 6a027c23     .;...|.j.;..#|.j
   20460:	3c512304 006f1218 60dda4e0 62086114     .#Q<..o....`.a.b
   20470:	701fd00f 301ef208 6033132c f015f0ff     ...p...0,.3`....
   20480:	13003007 000af041 fe06a7e0 a3251265     .0..A.......e.%.
   20490:	611ef9c1 81692308 81692306 81692306     ...a.#i..#i..#i.
   204a0:	7b692306 80ee00d0 301280e0 7bc6db00     .#i{.......0...{
   204b0:	a3ee000c d81c60d9 23ee0004 23238e51     .....`.....#Q.##
   204c0:	f0056051 f015f018 13003007 6aee0089     Q`.......0.....j
   204d0:	6be08d00 12a1e904 fd0ca657 3065f01e     ...k....W.....e0
   204e0:	6aaf13ff 6d046b00 13016e01 f00aa597     ...j.k.m.n......
   204f0:	7bc6db1e 7a017d08 13073a01 3cee0097     ...{.}.z.:.....<
   20500:	99ffff7e ffff7e99 7ee72424 7e3c3cff     ~....~..$$.~.<<~
   20510:	3c4281db 10dbff7e 00fe7c38 3f007f00     ..B<~...8|.....?
   20520:	00007f00 01010100 03030303 203f0000     ..............? 
   20530:	20202020 3f202020 00ff0808 fc00fe00            ?........
   20540:	0000fe00 42427e00 62626262 00ff0000     .....~BBbbbb....
   20550:	00000000 ff000000 00ff0000 7d41007d     ............}.A}
   20560:	007d7d05 c6c2c200 38286c44 00ff0000     .}}.....Dl(8....
   20570:	00000000 ff000000 00ff0000 f71410f7     ................
   20580:	000404f7 fe447c00 c2c2c2c2 00ff0000     .....|D.........
   20590:	00000000 ff000000 00ff0000 e82820ef     ............. (.
   205a0:	002f2fe8 c585f900 f9c5c5c5 00ff0000     .//.............
   205b0:	00000000 ff000000 00ff0000 302000be     .............. 0
   205c0:	00bebe20 e704f700 f4848585 00ff0000      ...............
   205d0:	00000000 ff000000 00ff0000 3f007f00     ...............?
   205e0:	00007f00 ef28ef00 6f60e000 00ff0000     ......(...`o....
   205f0:	00000000 ff000000 00ff0000 fc00fe00     ................
   20600:	0000fe00 c000c000 c0c0c0c0 04fc0000     ................
   20610:	04040404 fc040404 f9ff1010 9a8bb981     ................
   20620:	fa00fa9a 9b9a9a8a 25e6f899 3434f425     ...........%%.44
   20630:	14170034 26363734 5050dfc7 dfd8d85c     4...476&..PP\...
   20640:	1f11df00 d9191b12 86fe447c 84fc8686     ........|D......
   20650:	fe8282fe c0c080fe 82fcfec0 fcc2c2c2     ................
   20660:	c0f880fe 80fefec0 c0c0c0f0 86be80fe     ................
   20670:	8686fe86 868686fe 10101010 18181010     ................
   20680:	78484818 c0b0909c 80809cb0 fec0c0c0     .HHx............
   20690:	869292ee 82fe8686 86868686 8686827c     ............|...
   206a0:	82fe7c86 c0c0c0fe cac2827c 86fe7ac4     .|......|....z..
   206b0:	849c90fe 02fec0fe 10fefe02 30303030     ............0000
   206c0:	c2c28282 8282fec2 1038ee82 92968686     ..........8.....
   206d0:	4482ee92 82443838 30fe8282 02fe3030     ...D88D....000..
   206e0:	fe80f01e 00000000 00000606 c0606000     .............``.
   206f0:	00000000 18180000 18001818 180cc67c     ............|...
   20700:	00001800 0000fefe 868682fe 0808fe86     ................
   20710:	18181808 c0fe02fe 02fefec0 fe06061e     ................
   20720:	fec4c484 80fe0404 fe0606fe fec0c0c0     ................
   20730:	02fefe82 06060602 86fe447c 82fefe86     ........|D......
   20740:	060606fe 4444fe44 a8a844fe a8a8a8a8     ....D.DD.D......
   20750:	005a6ca8 30a8180c 12007e4e a86c6618     .lZ....0N~...fl.
   20760:	2454665a 48480066 06a81218 0012a890     ZfT$f.HH........
   20770:	a812307e 724e3084 a8a86618 a8a8a8a8     ~0...0Nr.f......
   20780:	a8785490 726c7848 6c1812a8 90546672     .Tx.Hxlr...lrfT.
   20790:	182a72a8 7e4e30a8 66181200 5472a86c     .r*..0N~...fl.rT
   207a0:	18665aa8 724e187e 182a72a8 30a86630     .Zf.~.Nr.r*.0f.0
   207b0:	6c007e4e 9c4e5430 a8a8a8a8 48a8a8a8     N~.l0TN........H
   207c0:	a8187e54 66785490 302a6ca8 3084a85a     T~...Txf.l*0Z..0
   207d0:	d8a82a72 124e00a8 a8a2e4a8 a8124e00     r*....N......N..
   207e0:	54542a6c 3084a872 dea82a72 2a72a89c     l*TTr..0r*....r*
   207f0:	540ca818 72785a48 66a86618 66545a18     ...THZxr.f.f.ZTf
   20800:	72a86c72 a872002a a8182a72 007e4e30     rl.r*.r.r*..0N~.
   20810:	6c661812 186600a8 0c4e30a8 6c001866     ..fl..f..0N.f..l
   20820:	a8244e30 30182a72 541ea866 9c180c66     0N$.r*.0f..Tf...
   20830:	545424a8 7842a812 aea83c0c a8a8a8a8     .$TT..Bx.<......
   20840:	ffa8a8a8 00000000 00000000 00000000     ................
   20850:	43000000 38504948 6e6f6420 48430a65     ...CHIP8 done.CH
   20860:	20385049 756f6873 6e20646c 6520746f     IP8 should not e
   20870:	7572646e 612f7473 732f7070 632f6372     ndrust/app/src/c
   20880:	38706968 0073722e 00020872 00000015     hip8.rs.r.......
   20890:	00000061 00000005 0a79656b 766f2078     a.......key.x ov
   208a0:	6c667265 0000776f 00020872 00000015     erflow..r.......
   208b0:	000000ac 00000009 766f2079 6c667265     ........y overfl
   208c0:	0000776f 00020872 00000015 000000ad     ow..r...........
   208d0:	00000009 00020872 00000015 000000ae     ....r...........
   208e0:	00000015 00000000 00000000 00000000     ................

000208f0 <str.0>:
   208f0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   20900:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   20910:	00000077 00020872 00000015 000000ae     w...r...........
   20920:	00000011 00000000 00000000 00000000     ................

00020930 <str.1>:
   20930:	65747461 2074706d 61206f74 77206464     attempt to add w
   20940:	20687469 7265766f 776f6c66 00020872     ith overflowr...
   20950:	00000015 000000af 00000012 00020872     ............r...
   20960:	00000015 000000cb 00000009 00020872     ............r...
   20970:	00000015 000000cc 00000009 00020872     ............r...
   20980:	00000015 000000cd 00000015 00020872     ............r...
   20990:	00000015 000000cd 00000011 00020872     ............r...
   209a0:	00000015 000000ce 00000012 20646162     ............bad 
   209b0:	657a6973 73746573 20657a69 7265766f     sizesetsize over
   209c0:	776f6c66 666f5f78 74657366 666f5f79     flowx_offsety_of
   209d0:	74657366 00020872 00000015 000000d4     fsetr...........
   209e0:	00000009 000a202c 00020872 00000015     ...., ..r.......
   209f0:	000000df 00000012 00020872 00000015     ........r.......
   20a00:	00000113 0000001c 00000000 00000000     ................

00020a10 <str.2>:
   20a10:	65747461 2074706d 73206f74 72746275     attempt to subtr
   20a20:	20746361 68746977 65766f20 6f6c6672     act with overflo
   20a30:	00000077 00020872 00000015 00000113     w...r...........
   20a40:	0000001b 00020872 00000015 00000114     ....r...........
   20a50:	0000001c 00020872 00000015 00000114     ....r...........
   20a60:	0000001b 00020872 00000015 00000116     ....r...........
   20a70:	00000008 00020872 00000015 0000011d     ....r...........
   20a80:	00000021 00020872 00000015 0000011d     !...r...........
   20a90:	00000020 00020872 00000015 0000011e      ...r...........
   20aa0:	00000021 00020872 00000015 0000011e     !...r...........
   20ab0:	00000020 00020872 00000015 00000121      ...r.......!...
   20ac0:	00000025 00020872 00000015 00000121     %...r.......!...
   20ad0:	00000024 00020872 00000015 00000122     $...r......."...
   20ae0:	00000025 00020872 00000015 00000122     %...r......."...
   20af0:	00000024 00020872 00000015 00000128     $...r.......(...
   20b00:	0000000d 00020872 00000015 0000012b     ....r.......+...
   20b10:	00000011 20746573 65786970 6620736c     ....set pixels f
   20b20:	656c6961 00000064 00020872 00000015     ailed...r.......
   20b30:	0000013c 00000005 6f6c6f63 766f2072     <.......color ov
   20b40:	6c667265 0000776f 00020872 00000015     erflow..r.......
   20b50:	0000018e 00000009 00020872 00000015     ........r.......
   20b60:	0000018f 00000023 00020872 00000015     ....#...r.......
   20b70:	0000018f 00000011 00020872 00000015     ........r.......
   20b80:	00000190 0000002c 00020872 00000015     ....,...r.......
   20b90:	00000192 00000036 00020872 00000015     ....6...r.......
   20ba0:	00000192 00000016 00020872 00000015     ........r.......
   20bb0:	000001cd 00000009 00020872 00000015     ........r.......
   20bc0:	000001ce 00000009 00020872 00000015     ........r.......
   20bd0:	000001d5 0000000d 00020872 00000015     ........r.......
   20be0:	000001e2 00000009 00020872 00000015     ........r.......
   20bf0:	000001e6 0000000d 00020872 00000015     ........r.......
   20c00:	000001f2 00000024 00020872 00000015     ....$...r.......
   20c10:	000001f2 00000036 00020872 00000015     ....6...r.......
   20c20:	000001fa 00000016 50494843 6f742038     ........CHIP8 to
   20c30:	20686375 20746f6e 646e6168 0a64656c     uch not handled.
   20c40:	00020872 00000015 00000222 00000005     r.......".......
   20c50:	00020872 00000015 0000023c 00000015     r.......<.......
   20c60:	00020872 00000015 0000023d 00000015     r.......=.......
   20c70:	00020872 00000015 0000023f 00000015     r.......?.......
   20c80:	00020872 00000015 00000240 00000015     r.......@.......
   20c90:	00020872 00000015 00000243 00000015     r.......C.......
   20ca0:	00020872 00000015 00000244 00000015     r.......D.......
   20cb0:	00020872 00000015 00000246 00000015     r.......F.......
   20cc0:	00020872 00000015 00000247 00000015     r.......G.......
   20cd0:	00020872 00000015 00000260 00000015     r.......`.......
   20ce0:	00020872 00000015 00000261 00000015     r.......a.......
   20cf0:	00020872 00000015 00000263 00000015     r.......c.......
   20d00:	00020872 00000015 00000264 00000015     r.......d.......
   20d10:	00020872 00000015 00000267 00000015     r.......g.......
   20d20:	00020872 00000015 00000268 00000015     r.......h.......
   20d30:	00020872 00000015 0000026a 00000015     r.......j.......
   20d40:	00020872 00000015 0000026b 00000015     r.......k.......
   20d50:	00020872 00000015 0000026d 00000015     r.......m.......
   20d60:	00020872 00000015 0000026e 00000015     r.......n.......
   20d70:	00020872 00000015 00000270 00000015     r.......p.......
   20d80:	00020872 00000015 00000271 00000015     r.......q.......
   20d90:	70696c66 72726520 0000726f 00020872     flip error..r...
   20da0:	00000015 00000281 00000005 00020872     ............r...
   20db0:	00000015 0000028a 00000019 00020872     ............r...
   20dc0:	00000015 00000293 00000018 00000000     ................
   20dd0:	00000000 00010000 00010001 00020001     ................
   20de0:	00020002 00030002 00030003 00040003     ................
   20df0:	00040004 00050004 00050005 00060005     ................
   20e00:	00060006 00070006 00070007 00080007     ................
   20e10:	00080008 00090009 00090009 000a000a     ................
   20e20:	000a000a 000b000b 000c000b 000c000c     ................
   20e30:	000d000c 000d000d 000e000e 000e000e     ................
   20e40:	000f000f 0010000f 00100010 00110011     ................
   20e50:	00110011 00120012 00130012 00130013     ................
   20e60:	00140014 00140014 00150015 00160015     ................
   20e70:	00160016 00170017 00170017 00180018     ................
   20e80:	00190018 00190019 001a0019 001a001a     ................
   20e90:	001b001b 001c001b 001c001c 001d001c     ................
   20ea0:	001d001d 001e001e 001f001e 001f001f     ................
   20eb0:	0020001f 00200020 00200020 00000000     .. . . . . .....
   20ec0:	00000000 00010000 00010001 00020001     ................
   20ed0:	00020002 00030002 00030003 00040003     ................
   20ee0:	00040004 00050004 00050005 00060005     ................
   20ef0:	00060006 00070006 00070007 00080007     ................
   20f00:	00080008 00090009 00090009 000a000a     ................
   20f10:	000a000a 000b000b 000b000b 000c000c     ................
   20f20:	000d000c 000d000d 000e000d 000e000e     ................
   20f30:	000f000e 000f000f 00100010 00100010     ................
   20f40:	00110011 00120011 00120012 00130012     ................
   20f50:	00130013 00140013 00140014 00150015     ................
   20f60:	00160015 00160016 00170016 00170017     ................
   20f70:	00180018 00190018 00190019 001a001a     ................
   20f80:	001b001a 001b001b 001c001c 001d001c     ................
   20f90:	001d001d 001e001e 001e001e 001f001f     ................
   20fa0:	0020001f 00200020 00200020 00000000     .. . . . . .....
   20fb0:	00000000 00010000 00010001 00020001     ................
   20fc0:	00020002 00030002 00030003 00040003     ................
   20fd0:	00040004 00050004 00050005 00060005     ................
   20fe0:	00060006 00070006 00070007 00080007     ................
   20ff0:	00080008 00090009 00090009 000a000a     ................
   21000:	000a000a 000b000b 000b000b 000c000c     ................
   21010:	000d000c 000d000d 000e000d 000e000e     ................
   21020:	000f000f 000f000f 00100010 00100010     ................
   21030:	00110011 00120011 00120012 00130012     ................
   21040:	00130013 00140013 00140014 00150015     ................
   21050:	00160015 00160016 00170016 00170017     ................
   21060:	00180018 00190018 00190019 001a001a     ................
   21070:	001b001a 001b001b 001c001c 001d001c     ................
   21080:	001d001d 001e001e 001e001e 001f001f     ................
   21090:	0020001f 00200020 00200020 00000000     .. . . . . .....
   210a0:	00000000 00010000 00010001 00020001     ................
   210b0:	00020002 00030002 00030003 00040003     ................
   210c0:	00040004 00050004 00050005 00060005     ................
   210d0:	00060006 00070006 00070007 00080008     ................
   210e0:	00080008 00090009 00090009 000a000a     ................
   210f0:	000a000a 000b000b 000b000b 000c000c     ................
   21100:	000d000c 000d000d 000e000d 000e000e     ................
   21110:	000f000f 000f000f 00100010 00100010     ................
   21120:	00110011 00120011 00120012 00130012     ................
   21130:	00130013 00140014 00140014 00150015     ................
   21140:	00160015 00160016 00170017 00170017     ................
   21150:	00180018 00190018 00190019 001a001a     ................
   21160:	001b001a 001b001b 001c001c 001d001c     ................
   21170:	001d001d 001e001e 001e001e 001f001f     ................
   21180:	0020001f 00200020 00200020 00000000     .. . . . . .....
   21190:	00000000 00010000 00010001 00020001     ................
   211a0:	00020002 00030002 00030003 00040003     ................
   211b0:	00040004 00050004 00050005 00060005     ................
   211c0:	00060006 00070006 00070007 00080008     ................
   211d0:	00080008 00090009 00090009 000a000a     ................
   211e0:	000a000a 000b000b 000b000b 000c000c     ................
   211f0:	000d000c 000d000d 000e000d 000e000e     ................
   21200:	000f000f 000f000f 00100010 00100010     ................
   21210:	00110011 00120011 00120012 00130012     ................
   21220:	00130013 00140014 00140014 00150015     ................
   21230:	00160015 00160016 00170017 00170017     ................
   21240:	00180018 00190018 00190019 001a001a     ................
   21250:	001b001a 001b001b 001c001c 001d001c     ................
   21260:	001d001d 001e001e 001f001e 001f001f     ................
   21270:	0020001f 00200020 00200020 00000000     .. . . . . .....
   21280:	00000000 00010000 00010001 00020001     ................
   21290:	00020002 00030002 00030003 00040003     ................
   212a0:	00040004 00050004 00050005 00060005     ................
   212b0:	00060006 00070006 00070007 00080008     ................
   212c0:	00080008 00090009 00090009 000a000a     ................
   212d0:	000a000a 000b000b 000c000b 000c000c     ................
   212e0:	000d000c 000d000d 000e000d 000e000e     ................
   212f0:	000f000f 000f000f 00100010 00110010     ................
   21300:	00110011 00120011 00120012 00130012     ................
   21310:	00130013 00140014 00140014 00150015     ................
   21320:	00160015 00160016 00170017 00170017     ................
   21330:	00180018 00190018 00190019 001a001a     ................
   21340:	001b001a 001b001b 011c001c 011d011c     ................
   21350:	011d011d 011e011e 011f011e 011f011f     ................
   21360:	0120011f 01200120 01200120 00000000     .. . . . . .....
   21370:	00000000 00010000 00010001 00020001     ................
   21380:	00020002 00030002 00030003 00040003     ................
   21390:	00040004 00050004 00050005 00060005     ................
   213a0:	00060006 00070007 00070007 00080008     ................
   213b0:	00080008 00090009 00090009 000a000a     ................
   213c0:	000a000a 000b000b 000c000b 000c000c     ................
   213d0:	000d000c 000d000d 000e000d 000e000e     ................
   213e0:	000f000f 000f000f 00100010 00110010     ................
   213f0:	00110011 00120011 00120012 00130012     ................
   21400:	00130013 00140014 00140014 00150015     ................
   21410:	00160015 01160116 01170117 01180117     ................
   21420:	01180118 01190118 01190119 011a011a     ................
   21430:	011b011a 011b011b 011c011c 011d011c     ................
   21440:	011d011d 011e011e 011f011e 011f011f     ................
   21450:	0120011f 01200120 01200120 01000100     .. . . . . .....
   21460:	01000100 01010100 01010101 01020101     ................
   21470:	01020102 01030102 01030103 01040103     ................
   21480:	01040104 01050104 01050105 01060105     ................
   21490:	01060106 01070107 01070107 01080108     ................
   214a0:	01080108 01090109 01090109 010a010a     ................
   214b0:	010a010a 010b010b 010c010b 010c010c     ................
   214c0:	010d010c 010d010d 010e010d 010e010e     ................
   214d0:	010f010f 010f010f 01100110 01110110     ................
   214e0:	01110111 01120111 01120112 01130112     ................
   214f0:	01130113 01140114 01140114 01150115     ................
   21500:	01160115 01160116 01170117 01180117     ................
   21510:	01180118 01190118 01190119 011a011a     ................
   21520:	011b011a 011b011b 011c011c 011d011c     ................
   21530:	011d011d 011e011e 011f011e 011f011f     ................
   21540:	01200120 01200120 01200120 01000100      . . . . . .....
   21550:	01000100 01010100 01010101 01020101     ................
   21560:	01020102 01030102 01030103 01040103     ................
   21570:	01040104 01050104 01050105 01060105     ................
   21580:	01060106 01070107 01070107 01080108     ................
   21590:	01080108 01090109 01090109 010a010a     ................
   215a0:	010a010a 010b010b 010c010b 010c010c     ................
   215b0:	010d010c 010d010d 010e010e 010e010e     ................
   215c0:	010f010f 010f010f 01100110 01110110     ................
   215d0:	01110111 01120111 01120112 01130113     ................
   215e0:	01130113 01140114 01140114 01150115     ................
   215f0:	01160115 01160116 01170117 01180117     ................
   21600:	01180118 01190119 01190119 011a011a     ................
   21610:	011b011a 011b011b 011c011c 011d011c     ................
   21620:	011d011d 011e011e 011f011e 011f011f     ................
   21630:	01200120 01200120 01200120 01000100      . . . . . .....
   21640:	01000100 01010100 01010101 01020101     ................
   21650:	01020102 01030102 01030103 01040103     ................
   21660:	01040104 01050104 01050105 01060106     ................
   21670:	01060106 01070107 01070107 01080108     ................
   21680:	01080108 01090109 01090109 010a010a     ................
   21690:	010a010a 010b010b 010c010b 010c010c     ................
   216a0:	010d010c 010d010d 010e010e 010e010e     ................
   216b0:	010f010f 010f010f 01100110 01110110     ................
   216c0:	01110111 01120111 01120112 01130113     ................
   216d0:	01130113 01140114 01140114 01150115     ................
   216e0:	01160115 01160116 01170117 01180117     ................
   216f0:	01180118 01190119 01190119 011a011a     ................
   21700:	011b011a 011b011b 011c011c 011d011c     ................
   21710:	011d011d 011e011e 011f011e 011f011f     ................
   21720:	01200120 01200120 01200120 01000100      . . . . . .....
   21730:	01000100 01010100 01010101 01020101     ................
   21740:	01020102 01030102 01030103 01040103     ................
   21750:	01040104 01050104 01050105 01060106     ................
   21760:	01060106 01070107 01070107 01080108     ................
   21770:	01080108 01090109 01090109 010a010a     ................
   21780:	010a010a 010b010b 010c010b 010c010c     ................
   21790:	010d010c 010d010d 010e010e 010e010e     ................
   217a0:	010f010f 010f010f 01100110 01110110     ................
   217b0:	01110111 01120111 01120112 01130113     ................
   217c0:	01130113 01140114 01150114 01150115     ................
   217d0:	01160115 01160116 01170117 01180117     ................
   217e0:	01180118 01190119 011a0119 011a011a     ................
   217f0:	011b011a 021b021b 021c021c 021d021c     ................
   21800:	021d021d 021e021e 021f021e 021f021f     ................
   21810:	02200220 02200220 02200220 01000100      . . . . . .....
   21820:	01000100 01010100 01010101 01020101     ................
   21830:	01020102 01030102 01030103 01040103     ................
   21840:	01040104 01050104 01050105 01060106     ................
   21850:	01060106 01070107 01070107 01080108     ................
   21860:	01080108 01090109 01090109 010a010a     ................
   21870:	010b010a 010b010b 010c010b 010c010c     ................
   21880:	010d010c 010d010d 010e010e 010e010e     ................
   21890:	010f010f 0110010f 01100110 01110110     ................
   218a0:	01110111 01120111 01120112 01130113     ................
   218b0:	01130113 01140114 01150114 01150115     ................
   218c0:	01160115 01160116 02170117 02180217     ................
   218d0:	02180218 02190219 021a0219 021a021a     ................
   218e0:	021b021a 021b021b 021c021c 021d021c     ................
   218f0:	021d021d 021e021e 021f021e 021f021f     ................
   21900:	02200220 02200220 02200220 01000100      . . . . . .....
   21910:	01000100 01010100 01010101 01020101     ................
   21920:	01020102 01030102 01030103 01040103     ................
   21930:	01040104 01050104 01050105 01060106     ................
   21940:	01060106 01070107 01070107 01080108     ................
   21950:	01080108 01090109 01090109 010a010a     ................
   21960:	010b010a 010b010b 010c010b 010c010c     ................
   21970:	010d010c 020d010d 020e020e 020e020e     ................
   21980:	020f020f 0210020f 02100210 02110210     ................
   21990:	02110211 02120211 02120212 02130213     ................
   219a0:	02130213 02140214 02150214 02150215     ................
   219b0:	02160215 02160216 02170217 02180217     ................
   219c0:	02180218 02190219 021a0219 021a021a     ................
   219d0:	021b021a 021b021b 021c021c 021d021c     ................
   219e0:	021d021d 021e021e 021f021e 021f021f     ................
   219f0:	02200220 02200220 02200220 02000200      . . . . . .....
   21a00:	02000200 02010200 02010201 02020201     ................
   21a10:	02020202 02030202 02030203 02040203     ................
   21a20:	02040204 02050204 02050205 02060206     ................
   21a30:	02060206 02070207 02070207 02080208     ................
   21a40:	02080208 02090209 02090209 020a020a     ................
   21a50:	020b020a 020b020b 020c020b 020c020c     ................
   21a60:	020d020c 020d020d 020e020e 020e020e     ................
   21a70:	020f020f 0210020f 02100210 02110210     ................
   21a80:	02110211 02120211 02120212 02130213     ................
   21a90:	02130213 02140214 02150214 02150215     ................
   21aa0:	02160215 02160216 02170217 02180217     ................
   21ab0:	02180218 02190219 021a0219 021a021a     ................
   21ac0:	021b021b 021b021b 021c021c 021d021c     ................
   21ad0:	021d021d 021e021e 021f021e 021f021f     ................
   21ae0:	02200220 02200220 02200220 02000200      . . . . . .....
   21af0:	02000200 02010200 02010201 02020201     ................
   21b00:	02020202 02030202 02030203 02040203     ................
   21b10:	02040204 02050204 02050205 02060206     ................
   21b20:	02060206 02070207 02070207 02080208     ................
   21b30:	02080208 02090209 02090209 020a020a     ................
   21b40:	020b020a 020b020b 020c020b 020c020c     ................
   21b50:	020d020c 020d020d 020e020e 020e020e     ................
   21b60:	020f020f 0210020f 02100210 02110210     ................
   21b70:	02110211 02120212 02120212 02130213     ................
   21b80:	02130213 02140214 02150214 02150215     ................
   21b90:	02160215 02160216 02170217 02180217     ................
   21ba0:	02180218 02190219 021a0219 021a021a     ................
   21bb0:	021b021b 021b021b 021c021c 021d021c     ................
   21bc0:	021d021d 021e021e 031f021e 031f031f     ................
   21bd0:	03200320 03200320 02200320 02000200      . . . . . .....
   21be0:	02000200 02010200 02010201 02020201     ................
   21bf0:	02020202 02030202 02030203 02040203     ................
   21c00:	02040204 02050205 02050205 02060206     ................
   21c10:	02060206 02070207 02070207 02080208     ................
   21c20:	02080208 02090209 020a0209 020a020a     ................
   21c30:	020b020a 020b020b 020c020b 020c020c     ................
   21c40:	020d020d 020d020d 020e020e 020e020e     ................
   21c50:	020f020f 0210020f 02100210 02110210     ................
   21c60:	02110211 02120212 02120212 02130213     ................
   21c70:	02130213 02140214 02150214 02150215     ................
   21c80:	02160216 02160216 02170217 02180217     ................
   21c90:	02180218 02190219 021a0219 021a021a     ................
   21ca0:	031b021b 031b031b 031c031c 031d031c     ................
   21cb0:	031d031d 031e031e 031f031e 031f031f     ................
   21cc0:	03200320 03200320 03200320 02000200      . . . . . .....
   21cd0:	02000200 02010200 02010201 02020201     ................
   21ce0:	02020202 02030202 02030203 02040203     ................
   21cf0:	02040204 02050205 02050205 02060206     ................
   21d00:	02060206 02070207 02070207 02080208     ................
   21d10:	02080208 02090209 020a0209 020a020a     ................
   21d20:	020b020a 020b020b 020c020b 020c020c     ................
   21d30:	020d020d 020d020d 020e020e 020e020e     ................
   21d40:	020f020f 0210020f 02100210 02110210     ................
   21d50:	02110211 02120212 02120212 02130213     ................
   21d60:	02130213 02140214 02150214 02150215     ................
   21d70:	02160216 02160216 02170217 03180217     ................
   21d80:	03180318 03190319 031a0319 031a031a     ................
   21d90:	031b031b 031c031b 031c031c 031d031c     ................
   21da0:	031d031d 031e031e 031f031e 031f031f     ................
   21db0:	03200320 03200320 03200320 02000200      . . . . . .....
   21dc0:	02000200 02010200 02010201 02020201     ................
   21dd0:	02020202 02030202 02030203 02040203     ................
   21de0:	02040204 02050205 02050205 02060206     ................
   21df0:	02060206 02070207 02070207 02080208     ................
   21e00:	02080208 02090209 020a0209 020a020a     ................
   21e10:	020b020a 020b020b 020c020b 020c020c     ................
   21e20:	020d020d 020d020d 020e020e 020e020e     ................
   21e30:	020f020f 0210020f 02100210 02110210     ................
   21e40:	02110211 02120212 02120212 02130213     ................
   21e50:	02140213 02140214 03150314 03150315     ................
   21e60:	03160316 03160316 03170317 03180317     ................
   21e70:	03180318 03190319 031a0319 031a031a     ................
   21e80:	031b031b 031c031b 031c031c 031d031c     ................
   21e90:	031d031d 031e031e 031f031e 031f031f     ................
   21ea0:	03200320 03200320 03200320 02000200      . . . . . .....
   21eb0:	02000200 02010200 02010201 02020201     ................
   21ec0:	02020202 02030202 02030203 02040203     ................
   21ed0:	02040204 02050205 02050205 02060206     ................
   21ee0:	02060206 02070207 02070207 02080208     ................
   21ef0:	02080208 02090209 020a0209 020a020a     ................
   21f00:	020b020a 020b020b 020c020b 020c020c     ................
   21f10:	020d020d 030d030d 030e030e 030f030e     ................
   21f20:	030f030f 0310030f 03100310 03110310     ................
   21f30:	03110311 03120312 03120312 03130313     ................
   21f40:	03140313 03140314 03150314 03150315     ................
   21f50:	03160316 03160316 03170317 03180317     ................
   21f60:	03180318 03190319 031a0319 031a031a     ................
   21f70:	031b031b 031c031b 031c031c 031d031c     ................
   21f80:	031d031d 031e031e 031f031e 031f031f     ................
   21f90:	03200320 03200320 03200320 02000200      . . . . . .....
   21fa0:	02000200 03010200 03010301 03020301     ................
   21fb0:	03020302 03030302 03030303 03040303     ................
   21fc0:	03040304 03050305 03050305 03060306     ................
   21fd0:	03060306 03070307 03070307 03080308     ................
   21fe0:	03090308 03090309 030a0309 030a030a     ................
   21ff0:	030b030a 030b030b 030c030b 030c030c     ................
   22000:	030d030d 030d030d 030e030e 030f030e     ................
   22010:	030f030f 0310030f 03100310 03110310     ................
   22020:	03110311 03120312 03120312 03130313     ................
   22030:	03140313 03140314 03150314 03150315     ................
   22040:	03160316 03170316 03170317 03180317     ................
   22050:	03180318 03190319 031a0319 031a031a     ................
   22060:	031b031b 031c031b 031c031c 031d031d     ................
   22070:	031d031d 041e041e 041f041e 041f041f     ................
   22080:	04200420 04200420 04200420 03000300      . . . . . .....
   22090:	03000300 03010300 03010301 03020301     ................
   220a0:	03020302 03030302 03030303 03040303     ................
   220b0:	03040304 03050305 03050305 03060306     ................
   220c0:	03060306 03070307 03070307 03080308     ................
   220d0:	03090308 03090309 030a0309 030a030a     ................
   220e0:	030b030a 030b030b 030c030b 030c030c     ................
   220f0:	030d030d 030d030d 030e030e 030f030e     ................
   22100:	030f030f 0310030f 03100310 03110311     ................
   22110:	03110311 03120312 03120312 03130313     ................
   22120:	03140313 03140314 03150314 03150315     ................
   22130:	03160316 03170316 03170317 03180317     ................
   22140:	03180318 03190319 031a0319 031a031a     ................
   22150:	041b031b 041c041b 041c041c 041d041d     ................
   22160:	041d041d 041e041e 041f041e 041f041f     ................
   22170:	04200420 04200420 04200420 03000300      . . . . . .....
   22180:	03000300 03010300 03010301 03020301     ................
   22190:	03020302 03030302 03030303 03040303     ................
   221a0:	03040304 03050305 03050305 03060306     ................
   221b0:	03060306 03070307 03070307 03080308     ................
   221c0:	03090308 03090309 030a0309 030a030a     ................
   221d0:	030b030a 030b030b 030c030c 030c030c     ................
   221e0:	030d030d 030d030d 030e030e 030f030e     ................
   221f0:	030f030f 0310030f 03100310 03110311     ................
   22200:	03110311 03120312 03120312 03130313     ................
   22210:	03140313 03140314 03150314 03150315     ................
   22220:	03160316 03170316 03170317 03180318     ................
   22230:	04180418 04190419 041a0419 041a041a     ................
   22240:	041b041b 041c041b 041c041c 041d041d     ................
   22250:	041e041d 041e041e 041f041e 041f041f     ................
   22260:	04200420 04200420 04200420 03000300      . . . . . .....
   22270:	03000300 03010300 03010301 03020301     ................
   22280:	03020302 03030302 03030303 03040303     ................
   22290:	03040304 03050305 03050305 03060306     ................
   222a0:	03060306 03070307 03070307 03080308     ................
   222b0:	03090308 03090309 030a0309 030a030a     ................
   222c0:	030b030a 030b030b 030c030c 030c030c     ................
   222d0:	030d030d 030d030d 030e030e 030f030e     ................
   222e0:	030f030f 0310030f 03100310 03110311     ................
   222f0:	03110311 03120312 03120312 03130313     ................
   22300:	03140313 03140314 03150314 03150315     ................
   22310:	04160316 04170416 04170417 04180418     ................
   22320:	04190418 04190419 041a0419 041a041a     ................
   22330:	041b041b 041c041b 041c041c 041d041d     ................
   22340:	041e041d 041e041e 041f041e 041f041f     ................
   22350:	04200420 04200420 04200420 03000300      . . . . . .....
   22360:	03000300 03010300 03010301 03020301     ................
   22370:	03020302 03030302 03030303 03040303     ................
   22380:	03040304 03050305 03050305 03060306     ................
   22390:	03060306 03070307 03070307 03080308     ................
   223a0:	03090308 03090309 030a0309 030a030a     ................
   223b0:	030b030a 030b030b 030c030c 030c030c     ................
   223c0:	030d030d 030d030d 030e030e 030f030e     ................
   223d0:	030f030f 0310030f 03100310 03110311     ................
   223e0:	03110311 04120412 04130412 04130413     ................
   223f0:	04140413 04140414 04150414 04150415     ................
   22400:	04160416 04170416 04170417 04180418     ................
   22410:	04190418 04190419 041a041a 041a041a     ................
   22420:	041b041b 041c041b 041c041c 041d041d     ................
   22430:	041e041d 041e041e 041f041e 041f041f     ................
   22440:	04200420 04200420 04200420 03000300      . . . . . .....
   22450:	03000300 03010300 03010301 03020301     ................
   22460:	03020302 03030302 03030303 03040304     ................
   22470:	03040304 03050305 03050305 03060306     ................
   22480:	03060306 03070307 03080307 03080308     ................
   22490:	03090308 03090309 030a0309 030a030a     ................
   224a0:	030b030a 030b030b 030c030c 030c030c     ................
   224b0:	030d030d 040e040d 040e040e 040f040e     ................
   224c0:	040f040f 0410040f 04100410 04110411     ................
   224d0:	04110411 04120412 04130412 04130413     ................
   224e0:	04140413 04140414 04150414 04150415     ................
   224f0:	04160416 04170416 04170417 04180418     ................
   22500:	04190418 04190419 041a041a 041b041a     ................
   22510:	041b041b 041c041b 041c041c 041d041d     ................
   22520:	051e051d 051e051e 051f051f 051f051f     ................
   22530:	05200520 05200520 05200520 03000300      . . . . . .....
   22540:	03000300 03010300 03010301 03020301     ................
   22550:	03020302 03030302 03030303 03040304     ................
   22560:	03040304 03050305 03050305 04060306     ................
   22570:	04060406 04070407 04080407 04080408     ................
   22580:	04090408 04090409 040a0409 040a040a     ................
   22590:	040b040a 040b040b 040c040c 040c040c     ................
   225a0:	040d040d 040e040d 040e040e 040f040e     ................
   225b0:	040f040f 0410040f 04100410 04110411     ................
   225c0:	04110411 04120412 04130412 04130413     ................
   225d0:	04140413 04140414 04150415 04150415     ................
   225e0:	04160416 04170416 04170417 04180418     ................
   225f0:	04190418 04190419 041a041a 041b041a     ................
   22600:	051b051b 051c051c 051c051c 051d051d     ................
   22610:	051e051d 051e051e 051f051f 051f051f     ................
   22620:	05200520 05200520 05200520 04000400      . . . . . .....
   22630:	04000400 04010400 04010401 04020401     ................
   22640:	04020402 04030402 04030403 04040404     ................
   22650:	04040404 04050405 04050405 04060406     ................
   22660:	04060406 04070407 04080407 04080408     ................
   22670:	04090408 04090409 040a0409 040a040a     ................
   22680:	040b040a 040b040b 040c040c 040c040c     ................
   22690:	040d040d 040e040d 040e040e 040f040e     ................
   226a0:	040f040f 04100410 04100410 04110411     ................
   226b0:	04110411 04120412 04130412 04130413     ................
   226c0:	04140413 04140414 04150415 04150415     ................
   226d0:	04160416 04170416 04170417 04180418     ................
   226e0:	05190418 05190519 051a051a 051b051a     ................
   226f0:	051b051b 051c051c 051c051c 051d051d     ................
   22700:	051e051d 051e051e 051f051f 0520051f     .............. .
   22710:	05200520 05200520 05200520 04000400      . . . . . .....
   22720:	04000400 04010400 04010401 04020401     ................
   22730:	04020402 04030402 04030403 04040404     ................
   22740:	04040404 04050405 04050405 04060406     ................
   22750:	04060406 04070407 04080407 04080408     ................
   22760:	04090408 04090409 040a0409 040a040a     ................
   22770:	040b040b 040b040b 040c040c 040c040c     ................
   22780:	040d040d 040e040d 040e040e 040f040e     ................
   22790:	040f040f 04100410 04100410 04110411     ................
   227a0:	04110411 04120412 04130412 04130413     ................
   227b0:	04140413 04140414 04150415 04150415     ................
   227c0:	04160416 05170516 05170517 05180518     ................
   227d0:	05190518 05190519 051a051a 051b051a     ................
   227e0:	051b051b 051c051c 051d051c 051d051d     ................
   227f0:	051e051d 051e051e 051f051f 0520051f     .............. .
   22800:	05200520 05200520 05200520 04000400      . . . . . .....
   22810:	04000400 04010400 04010401 04020401     ................
   22820:	04020402 04030402 04030403 04040404     ................
   22830:	04040404 04050405 04050405 04060406     ................
   22840:	04060406 04070407 04080407 04080408     ................
   22850:	04090408 04090409 040a0409 040a040a     ................
   22860:	040b040b 040b040b 040c040c 040c040c     ................
   22870:	040d040d 040e040d 040e040e 040f040e     ................
   22880:	040f040f 04100410 04100410 04110411     ................
   22890:	04120411 04120412 04130412 04130413     ................
   228a0:	04140413 05140414 05150515 05150515     ................
   228b0:	05160516 05170516 05170517 05180518     ................
   228c0:	05190518 05190519 051a051a 051b051a     ................
   228d0:	051b051b 051c051c 051d051c 051d051d     ................
   228e0:	051e051e 051e051e 051f051f 0520061f     .............. .
   228f0:	05200520 05200520 05200520 04000400      . . . . . .....
   22900:	04000400 04010400 04010401 04020401     ................
   22910:	04020402 04030402 04030403 04040404     ................
   22920:	04040404 04050405 04050405 04060406     ................
   22930:	04070406 04070407 04080407 04080408     ................
   22940:	04090408 04090409 040a0409 040a040a     ................
   22950:	040b040b 040b040b 040c040c 040d040c     ................
   22960:	040d040d 040e040d 040e040e 040f040e     ................
   22970:	040f040f 04100410 04100410 04110411     ................
   22980:	05120511 05120512 05130512 05130513     ................
   22990:	05140513 05140514 05150515 05160515     ................
   229a0:	05160516 05170517 05180517 05180518     ................
   229b0:	05190519 051a0519 051a051a 051b051a     ................
   229c0:	051b051b 051c051c 051d051c 061d061d     ................
   229d0:	061e061e 061f061e 061f061f 06200620     ............ . .
   229e0:	06200620 05200620 05200520 04000400      . . . . . .....
   229f0:	04000400 04010400 04010401 04020401     ................
   22a00:	04020402 04030402 04030403 04040404     ................
   22a10:	04040404 04050405 04050405 04060406     ................
   22a20:	04070406 04070407 04080407 04080408     ................
   22a30:	04090408 04090409 040a0409 040a040a     ................
   22a40:	040b040b 040b040b 040c040c 040d040c     ................
   22a50:	040d040d 050e040d 050e050e 050f050f     ................
   22a60:	050f050f 05100510 05100510 05110511     ................
   22a70:	05120511 05120512 05130512 05130513     ................
   22a80:	05140514 05140514 05150515 05160515     ................
   22a90:	05160516 05170517 05180517 05180518     ................
   22aa0:	05190519 051a0519 051a051a 061b051b     ................
   22ab0:	061b061b 061c061c 061d061c 061d061d     ................
   22ac0:	061e061e 061f061e 061f061f 06200620     ............ . .
   22ad0:	06200620 06200620 06200620 04000400      . . . . . .....
   22ae0:	04000400 04010400 04010401 04020401     ................
   22af0:	04020402 04030402 04030403 04040404     ................
   22b00:	04040404 04050405 04050405 04060406     ................
   22b10:	04070406 04070407 04080407 04080408     ................
   22b20:	04090408 04090409 050a0509 050a050a     ................
   22b30:	050b050b 050b050b 050c050c 050d050c     ................
   22b40:	050d050d 050e050d 050e050e 050f050f     ................
   22b50:	050f050f 05100510 05110510 05110511     ................
   22b60:	05120511 05120512 05130512 05130513     ................
   22b70:	05140514 05140514 05150515 05160515     ................
   22b80:	05160516 05170517 05180517 05180518     ................
   22b90:	06190519 061a0619 061a061a 061b061b     ................
   22ba0:	061c061b 061c061c 061d061d 061d061d     ................
   22bb0:	061e061e 061f061e 061f061f 06200620     ............ . .
   22bc0:	06200620 06200620 06200620 05000500      . . . . . .....
   22bd0:	05000500 05010500 05010501 05020501     ................
   22be0:	05020502 05030502 05030503 05040504     ................
   22bf0:	05040504 05050505 05050505 05060506     ................
   22c00:	05070506 05070507 05080507 05080508     ................
   22c10:	05090508 05090509 050a0509 050a050a     ................
   22c20:	050b050b 050b050b 050c050c 050d050c     ................
   22c30:	050d050d 050e050d 050e050e 050f050f     ................
   22c40:	050f050f 05100510 05110510 05110511     ................
   22c50:	05120511 05120512 05130512 05130513     ................
   22c60:	05140514 05140514 05150515 05160515     ................
   22c70:	05160516 06170517 06180617 06180618     ................
   22c80:	06190619 061a0619 061a061a 061b061b     ................
   22c90:	061c061b 061c061c 061d061d 061e061d     ................
   22ca0:	061e061e 061f061f 0620061f 06200620     .......... . . .
   22cb0:	06200620 06200620 06200620 05000500      . . . . . .....
   22cc0:	05000500 05010500 05010501 05020501     ................
   22cd0:	05020502 05030503 05030503 05040504     ................
   22ce0:	05040504 05050505 05050505 05060506     ................
   22cf0:	05070506 05070507 05080507 05080508     ................
   22d00:	05090508 05090509 050a050a 050a050a     ................
   22d10:	050b050b 050b050b 050c050c 050d050c     ................
   22d20:	050d050d 050e050d 050e050e 050f050f     ................
   22d30:	050f050f 05100510 05110510 05110511     ................
   22d40:	05120511 05120512 05130513 05130513     ................
   22d50:	05140514 05140514 05150515 06160515     ................
   22d60:	06160616 06170617 06180617 06180618     ................
   22d70:	06190619 061a0619 061a061a 061b061b     ................
   22d80:	061c061b 061c061c 061d061d 061e061d     ................
   22d90:	061e061e 061f061f 0720071f 06200620     .......... . . .
   22da0:	06200620 06200620 06200620 05000500      . . . . . .....
   22db0:	05000500 05010500 05010501 05020501     ................
   22dc0:	05020502 05030503 05030503 05040504     ................
   22dd0:	05040504 05050505 05060505 05060506     ................
   22de0:	05070506 05070507 05080507 05080508     ................
   22df0:	05090508 05090509 050a050a 050a050a     ................
   22e00:	050b050b 050c050b 050c050c 050d050c     ................
   22e10:	050d050d 050e050e 050e050e 050f050f     ................
   22e20:	050f050f 05100510 05110510 05110511     ................
   22e30:	05120511 05120512 05130513 05130513     ................
   22e40:	05140514 06150514 06150615 06160616     ................
   22e50:	06170616 06170617 06180618 06190618     ................
   22e60:	06190619 061a061a 061b061a 061b061b     ................
   22e70:	061c061b 061c061c 071d061d 071e071d     ................
   22e80:	071e071e 071f071f 0720071f 07200720     .......... . . .
   22e90:	06200720 06200620 06200620 05000500      . . . . . .....
   22ea0:	05000500 05010500 05010501 05020501     ................
   22eb0:	05020502 05030503 05030503 05040504     ................
   22ec0:	05040504 05050505 05060505 05060506     ................
   22ed0:	05070506 05070507 05080507 05080508     ................
   22ee0:	05090509 05090509 050a050a 050a050a     ................
   22ef0:	050b050b 050c050b 050c050c 050d050c     ................
   22f00:	050d050d 050e050e 050e050e 050f050f     ................
   22f10:	0510050f 05100510 05110510 05110511     ................
   22f20:	06120511 06120612 06130613 06130613     ................
   22f30:	06140614 06150614 06150615 06160616     ................
   22f40:	06170616 06170617 06180618 06190618     ................
   22f50:	06190619 061a061a 061b061a 071b071b     ................
   22f60:	071c071c 071d071c 071d071d 071e071e     ................
   22f70:	071f071e 071f071f 0720071f 07200720     .......... . . .
   22f80:	07200720 07200720 06200720 05000500      . . . . . .....
   22f90:	05000500 05010500 05010501 05020501     ................
   22fa0:	05020502 05030503 05030503 05040504     ................
   22fb0:	05040504 05050505 05060505 05060506     ................
   22fc0:	05070506 05070507 05080507 05080508     ................
   22fd0:	05090509 05090509 050a050a 050a050a     ................
   22fe0:	050b050b 050c050b 050c050c 050d050c     ................
   22ff0:	050d050d 050e050e 060e060e 060f060f     ................
   23000:	0610060f 06100610 06110610 06110611     ................
   23010:	06120612 06120612 06130613 06140613     ................
   23020:	06140614 06150614 06150615 06160616     ................
   23030:	06170616 06170617 06180618 06190618     ................
   23040:	07190619 071a071a 071b071a 071b071b     ................
   23050:	071c071c 071d071c 071d071d 071e071e     ................
   23060:	071f071e 071f071f 07200720 07200720     ........ . . . .
   23070:	07200720 07200720 07200720 05000500      . . . . . .....
   23080:	05000500 05010500 05010501 05020501     ................
   23090:	05020502 05030503 05030503 05040504     ................
   230a0:	05040504 05050505 05060505 05060506     ................
   230b0:	05070506 05070507 05080507 05080508     ................
   230c0:	05090509 06090509 060a060a 060a060a     ................
   230d0:	060b060b 060c060b 060c060c 060d060c     ................
   230e0:	060d060d 060e060e 060e060e 060f060f     ................
   230f0:	0610060f 06100610 06110610 06110611     ................
   23100:	06120612 06120612 06130613 06140613     ................
   23110:	06140614 06150614 06150615 06160616     ................
   23120:	06170616 06170617 07180618 07190718     ................
   23130:	07190719 071a071a 071b071a 071b071b     ................
   23140:	071c071c 071d071c 071d071d 071e071e     ................
   23150:	071f071e 071f071f 07200720 07200720     ........ . . . .
   23160:	07200720 07200720 07200720 06000600      . . . . . .....
   23170:	06000600 06010600 06010601 06020601     ................
   23180:	06020602 06030603 06030603 06040604     ................
   23190:	06040604 06050605 06060605 06060606     ................
   231a0:	06070606 06070607 06080607 06080608     ................
   231b0:	06090609 06090609 060a060a 060b060a     ................
   231c0:	060b060b 060c060b 060c060c 060d060d     ................
   231d0:	060d060d 060e060e 060e060e 060f060f     ................
   231e0:	0610060f 06100610 06110610 06110611     ................
   231f0:	06120612 06120612 06130613 06140613     ................
   23200:	06140614 06150615 06150615 06160616     ................
   23210:	06170616 07170717 07180718 07190719     ................
   23220:	071a0719 071a071a 071b071b 071c071b     ................
   23230:	071c071c 071d071d 071e071d 071e071e     ................
   23240:	071f071e 081f081f 07200820 07200720     ........ . . . .
   23250:	07200720 07200720 07200720 06000600      . . . . . .....
   23260:	06000600 06010600 06010601 06020601     ................
   23270:	06020602 06030603 06030603 06040604     ................
   23280:	06040604 06050605 06060605 06060606     ................
   23290:	06070606 06070607 06080608 06080608     ................
   232a0:	06090609 06090609 060a060a 060b060a     ................
   232b0:	060b060b 060c060b 060c060c 060d060d     ................
   232c0:	060d060d 060e060e 060f060e 060f060f     ................
   232d0:	0610060f 06100610 06110611 06110611     ................
   232e0:	06120612 06130612 06130613 06140613     ................
   232f0:	06140614 06150615 06160615 07160616     ................
   23300:	07170717 07180717 07180718 07190719     ................
   23310:	071a0719 071a071a 071b071b 071c071b     ................
   23320:	071c071c 081d071d 081e081d 081e081e     ................
   23330:	081f081f 0820081f 08200820 08200820     ...... . . . . .
   23340:	07200720 07200720 07200720 06000600      . . . . . .....
   23350:	06000600 06010600 06010601 06020601     ................
   23360:	06020602 06030603 06030603 06040604     ................
   23370:	06050604 06050605 06060605 06060606     ................
   23380:	06070606 06070607 06080608 06080608     ................
   23390:	06090609 06090609 060a060a 060b060a     ................
   233a0:	060b060b 060c060b 060c060c 060d060d     ................
   233b0:	060d060d 060e060e 060f060e 060f060f     ................
   233c0:	0610060f 06100610 06110611 06110611     ................
   233d0:	06120612 06130612 06130613 06140613     ................
   233e0:	06140614 07150615 07160715 07160716     ................
   233f0:	07170717 07180717 07180718 07190719     ................
   23400:	071a0719 071a071a 071b071b 081c081b     ................
   23410:	081c081c 081d081d 081e081d 081e081e     ................
   23420:	081f081f 0820081f 08200820 08200820     ...... . . . . .
   23430:	08200820 07200820 07200720 06000600      . . . . . .....
   23440:	06000600 06010600 06010601 06020601     ................
   23450:	06020602 06030603 06030603 06040604     ................
   23460:	06050604 06050605 06060605 06060606     ................
   23470:	06070606 06070607 06080608 06080608     ................
   23480:	06090609 060a0609 060a060a 060b060a     ................
   23490:	060b060b 060c060b 060c060c 060d060d     ................
   234a0:	060d060d 060e060e 060f060e 060f060f     ................
   234b0:	0610060f 06100610 06110611 06110611     ................
   234c0:	06120612 06130612 07130713 07140713     ................
   234d0:	07140714 07150715 07160715 07160716     ................
   234e0:	07170717 07180717 07180718 07190719     ................
   234f0:	071a0719 081a071a 081b081b 081c081b     ................
   23500:	081c081c 081d081d 081e081d 081e081e     ................
   23510:	081f081f 0820081f 08200820 08200820     ...... . . . . .
   23520:	08200820 08200820 08200820 06000600      . . . . . .....
   23530:	06000600 06010600 06010601 06020601     ................
   23540:	06020602 06030603 06030603 06040604     ................
   23550:	06050604 06050605 06060605 06060606     ................
   23560:	06070606 06070607 06080608 06080608     ................
   23570:	06090609 060a0609 060a060a 060b060a     ................
   23580:	060b060b 060c060c 060c060c 060d060d     ................
   23590:	060e060d 060e060e 060f060e 070f060f     ................
   235a0:	07100710 07100710 07110711 07120711     ................
   235b0:	07120712 07130712 07130713 07140714     ................
   235c0:	07140714 07150715 07160715 07160716     ................
   235d0:	07170717 07180717 07180718 08190719     ................
   235e0:	081a0819 081b081a 081b081b 081c081c     ................
   235f0:	081d081c 081d081d 081e081e 081f081e     ................
   23600:	081f081f 08200820 08200820 08200820     .... . . . . . .
   23610:	08200820 08200820 08200820 06000600      . . . . . .....
   23620:	06000600 06010600 06010601 06020601     ................
   23630:	06020602 06030603 06030603 06040604     ................
   23640:	06050604 06050605 06060605 06060606     ................
   23650:	06070607 06070607 06080608 07080608     ................
   23660:	07090709 070a0709 070a070a 070b070a     ................
   23670:	070b070b 070c070c 070c070c 070d070d     ................
   23680:	070e070d 070e070e 070f070e 070f070f     ................
   23690:	07100710 07100710 07110711 07120711     ................
   236a0:	07120712 07130712 07130713 07140714     ................
   236b0:	07150714 07150715 07160715 07160716     ................
   236c0:	07170717 07180717 08190818 08190819     ................
   236d0:	081a081a 081b081a 081b081b 081c081c     ................
   236e0:	081d081c 081d081d 081e081e 091f081e     ................
   236f0:	091f091f 09200920 08200820 08200820     .... . . . . . .
   23700:	08200820 08200820 08200820 06000600      . . . . . .....
   23710:	06000600 07010600 07010701 07020701     ................
   23720:	07020702 07030703 07030703 07040704     ................
   23730:	07050704 07050705 07060705 07060706     ................
   23740:	07070707 07070707 07080708 07090708     ................
   23750:	07090709 070a0709 070a070a 070b070a     ................
   23760:	070b070b 070c070c 070c070c 070d070d     ................
   23770:	070e070d 070e070e 070f070e 070f070f     ................
   23780:	07100710 07100710 07110711 07120711     ................
   23790:	07120712 07130712 07130713 07140714     ................
   237a0:	07150714 07150715 07160716 07170716     ................
   237b0:	08170717 08180818 08190818 08190819     ................
   237c0:	081a081a 081b081a 081b081b 081c081c     ................
   237d0:	081d081c 091d081d 091e091e 091f091e     ................
   237e0:	091f091f 09200920 09200920 08200920     .... . . . . . .
   237f0:	08200820 08200820 08200820 07000700      . . . . . .....
   23800:	07000700 07010700 07010701 07020702     ................
   23810:	07020702 07030703 07030703 07040704     ................
   23820:	07050704 07050705 07060705 07060706     ................
   23830:	07070707 07070707 07080708 07090708     ................
   23840:	07090709 070a0709 070a070a 070b070b     ................
   23850:	070b070b 070c070c 070d070c 070d070d     ................
   23860:	070e070d 070e070e 070f070f 070f070f     ................
   23870:	07100710 07110710 07110711 07120711     ................
   23880:	07120712 07130713 07130713 07140714     ................
   23890:	07150714 07150715 07160716 08170716     ................
   238a0:	08170817 08180818 08190818 08190819     ................
   238b0:	081a081a 081b081a 081b081b 091c081c     ................
   238c0:	091d091c 091e091d 091e091e 091f091f     ................
   238d0:	0920091f 09200920 09200920 09200920     .. . . . . . . .
   238e0:	09200920 08200820 08200820 07000700      . . . . . .....
   238f0:	07000700 07010700 07010701 07020702     ................
   23900:	07020702 07030703 07030703 07040704     ................
   23910:	07050704 07050705 07060705 07060706     ................
   23920:	07070707 07070707 07080708 07090708     ................
   23930:	07090709 070a0709 070a070a 070b070b     ................
   23940:	070b070b 070c070c 070d070c 070d070d     ................
   23950:	070e070d 070e070e 070f070f 070f070f     ................
   23960:	07100710 07110710 07110711 07120711     ................
   23970:	07120712 07130713 07130713 07140714     ................
   23980:	07150714 08150715 08160816 08170816     ................
   23990:	08170817 08180818 08190818 08190819     ................
   239a0:	081a081a 081b081b 091c091b 091c091c     ................
   239b0:	091d091d 091e091d 091e091e 091f091f     ................
   239c0:	0920091f 09200920 09200920 09200920     .. . . . . . . .
   239d0:	09200920 09200920 08200920 07000700      . . . . . .....
   239e0:	07000700 07010700 07010701 07020702     ................
   239f0:	07020702 07030703 07040703 07040704     ................
   23a00:	07050704 07050705 07060705 07060706     ................
   23a10:	07070707 07070707 07080708 07090708     ................
   23a20:	07090709 070a0709 070a070a 070b070b     ................
   23a30:	070b070b 070c070c 070d070c 070d070d     ................
   23a40:	070e070d 070e070e 070f070f 070f070f     ................
   23a50:	07100710 07110710 07110711 07120711     ................
   23a60:	07120712 07130713 07140713 08140814     ................
   23a70:	08150814 08150815 08160816 08170816     ................
   23a80:	08170817 08180818 08190818 081a0819     ................
   23a90:	091a081a 091b091b 091c091b 091c091c     ................
   23aa0:	091d091d 091e091d 091e091e 091f091f     ................
   23ab0:	0920091f 09200920 09200920 09200920     .. . . . . . . .
   23ac0:	09200920 09200920 09200920 07000700      . . . . . .....
   23ad0:	07000700 07010700 07010701 07020702     ................
   23ae0:	07020702 07030703 07040703 07040704     ................
   23af0:	07050704 07050705 07060706 07060706     ................
   23b00:	07070707 07070707 07080708 07090708     ................
   23b10:	07090709 070a0709 070a070a 070b070b     ................
   23b20:	070b070b 070c070c 070d070c 070d070d     ................
   23b30:	070e070d 070e070e 070f070f 0710070f     ................
   23b40:	07100710 08110810 08110811 08120812     ................
   23b50:	08120812 08130813 08140813 08140814     ................
   23b60:	08150814 08150815 08160816 08170816     ................
   23b70:	08170817 08180818 08190819 091a0919     ................
   23b80:	091a091a 091b091b 091c091b 091c091c     ................
   23b90:	091d091d 091e091d 091e091e 0a1f0a1f     ................
   23ba0:	0a200a1f 09200920 09200920 09200920     .. . . . . . . .
   23bb0:	09200920 09200920 09200920 07000700      . . . . . .....
   23bc0:	07000700 07010700 07010701 07020702     ................
   23bd0:	07020702 07030703 07040703 07040704     ................
   23be0:	07050704 07050705 07060706 07060706     ................
   23bf0:	07070707 07080707 08080808 08090808     ................
   23c00:	08090809 080a080a 080a080a 080b080b     ................
   23c10:	080c080b 080c080c 080d080c 080d080d     ................
   23c20:	080e080e 080e080e 080f080f 0810080f     ................
   23c30:	08100810 08110810 08110811 08120812     ................
   23c40:	08120812 08130813 08140813 08140814     ................
   23c50:	08150815 08150815 08160816 08170816     ................
   23c60:	08180817 09180818 09190919 091a0919     ................
   23c70:	091a091a 091b091b 091c091b 091d091c     ................
   23c80:	091d091d 0a1e0a1e 0a1f0a1e 0a1f0a1f     ................
   23c90:	0a200a20 0a200a20 0a200a20 09200920      . . . . . . . .
   23ca0:	09200920 09200920 09200920 07000700      . . . . . .....
   23cb0:	07000700 07010700 07010701 08020802     ................
   23cc0:	08020802 08030803 08040803 08040804     ................
   23cd0:	08050804 08050805 08060806 08060806     ................
   23ce0:	08070807 08080807 08080808 08090808     ................
   23cf0:	08090809 080a080a 080a080a 080b080b     ................
   23d00:	080c080b 080c080c 080d080c 080d080d     ................
   23d10:	080e080e 080e080e 080f080f 0810080f     ................
   23d20:	08100810 08110810 08110811 08120812     ................
   23d30:	08120812 08130813 08140813 08140814     ................
   23d40:	08150815 08160815 08160816 08170817     ................
   23d50:	09180817 09180918 09190919 091a0919     ................
   23d60:	091b091a 091b091b 091c091c 0a1d091c     ................
   23d70:	0a1d0a1d 0a1e0a1e 0a1f0a1e 0a1f0a1f     ................
   23d80:	0a200a20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   23d90:	09200a20 09200920 09200920 08000800      . . . . . .....
   23da0:	08000800 08010800 08010801 08020802     ................
   23db0:	08020802 08030803 08040803 08040804     ................
   23dc0:	08050804 08050805 08060806 08060806     ................
   23dd0:	08070807 08080807 08080808 08090808     ................
   23de0:	08090809 080a080a 080a080a 080b080b     ................
   23df0:	080c080b 080c080c 080d080c 080d080d     ................
   23e00:	080e080e 080e080e 080f080f 0810080f     ................
   23e10:	08100810 08110810 08110811 08120812     ................
   23e20:	08130812 08130813 08140813 08140814     ................
   23e30:	08150815 08160815 08160816 09170917     ................
   23e40:	09180917 09180918 09190919 091a091a     ................
   23e50:	091b091a 091b091b 0a1c0a1c 0a1d0a1c     ................
   23e60:	0a1d0a1d 0a1e0a1e 0a1f0a1e 0a1f0a1f     ................
   23e70:	0a200a20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   23e80:	0a200a20 0a200a20 09200920 08000800      . . . . . .....
   23e90:	08000800 08010800 08010801 08020802     ................
   23ea0:	08020802 08030803 08040803 08040804     ................
   23eb0:	08050804 08050805 08060806 08060806     ................
   23ec0:	08070807 08080807 08080808 08090808     ................
   23ed0:	08090809 080a080a 080a080a 080b080b     ................
   23ee0:	080c080b 080c080c 080d080c 080d080d     ................
   23ef0:	080e080e 080f080e 080f080f 0810080f     ................
   23f00:	08100810 08110811 08110811 08120812     ................
   23f10:	08130812 08130813 08140813 08140814     ................
   23f20:	08150815 08160815 09160916 09170917     ................
   23f30:	09180917 09190918 09190919 091a091a     ................
   23f40:	0a1b091a 0a1b0a1b 0a1c0a1c 0a1d0a1c     ................
   23f50:	0a1e0a1d 0a1e0a1e 0a1f0a1f 0a200a1f     .............. .
   23f60:	0a200a20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   23f70:	0a200a20 0a200a20 0a200a20 08000800      . . . . . .....
   23f80:	08000800 08010800 08010801 08020802     ................
   23f90:	08020802 08030803 08040803 08040804     ................
   23fa0:	08050804 08050805 08060806 08060806     ................
   23fb0:	08070807 08080807 08080808 08090808     ................
   23fc0:	08090809 080a080a 080b080a 080b080b     ................
   23fd0:	080c080b 080c080c 080d080d 080d080d     ................
   23fe0:	080e080e 080f080e 080f080f 0810080f     ................
   23ff0:	08100810 08110811 08110811 08120812     ................
   24000:	08130812 08130813 08140813 08140814     ................
   24010:	09150915 09160915 09160916 09170917     ................
   24020:	09180917 09190918 09190919 0a1a091a     ................
   24030:	0a1b0a1a 0a1c0a1b 0a1c0a1c 0a1d0a1d     ................
   24040:	0a1e0a1d 0a1e0a1e 0b1f0a1f 0b200b1f     .............. .
   24050:	0a200a20 0a200a20 0a200a20 0a200a20      . . . . . . . .
   24060:	0a200a20 0a200a20 0a200a20 08000800      . . . . . .....
   24070:	08000800 08010800 08010801 08020802     ................
   24080:	08020802 08030803 08040803 08040804     ................
   24090:	08050804 08050805 08060806 08070806     ................
   240a0:	08070807 08080807 08080808 08090809     ................
   240b0:	08090809 080a080a 080b080a 080b080b     ................
   240c0:	080c080b 080c080c 080d080d 080d080d     ................
   240d0:	080e080e 080f080e 080f080f 0810080f     ................
   240e0:	08100810 08110811 08110811 09120812     ................
   240f0:	09130912 09130913 09140914 09140914     ................
   24100:	09150915 09160915 09160916 09170917     ................
   24110:	09180918 09190918 0a190a19 0a1a0a1a     ................
   24120:	0a1b0a1b 0a1c0a1b 0a1c0a1c 0a1d0a1d     ................
   24130:	0a1e0a1d 0b1e0b1e 0b1f0b1f 0b200b20     ............ . .
   24140:	0b200b20 0a200b20 0a200a20 0a200a20      . . . . . . . .
   24150:	0a200a20 0a200a20 0a200a20 08000800      . . . . . .....
   24160:	08000800 08010800 08010801 08020802     ................
   24170:	08020802 08030803 08040803 08040804     ................
   24180:	08050804 08050805 08060806 08070806     ................
   24190:	08070807 09080807 09080908 09090909     ................
   241a0:	09090909 090a090a 090b090a 090b090b     ................
   241b0:	090c090b 090c090c 090d090d 090e090d     ................
   241c0:	090e090e 090f090e 090f090f 09100910     ................
   241d0:	09100910 09110911 09120911 09120912     ................
   241e0:	09130912 09130913 09140914 09150914     ................
   241f0:	09150915 09160915 09170916 09170917     ................
   24200:	09180918 0a190a18 0a1a0a19 0a1a0a1a     ................
   24210:	0a1b0a1b 0a1c0a1b 0a1c0a1c 0b1d0a1d     ................
   24220:	0b1e0b1e 0b1f0b1e 0b1f0b1f 0b200b20     ............ . .
   24230:	0b200b20 0b200b20 0a200b20 0a200a20      . . . . . . . .
   24240:	0a200a20 0a200a20 0a200a20 08000800      . . . . . .....
   24250:	08000800 08010800 08010801 08020802     ................
   24260:	09020902 09030903 09040903 09040904     ................
   24270:	09050905 09050905 09060906 09070906     ................
   24280:	09070907 09080907 09080908 09090909     ................
   24290:	09090909 090a090a 090b090a 090b090b     ................
   242a0:	090c090b 090c090c 090d090d 090e090d     ................
   242b0:	090e090e 090f090e 090f090f 09100910     ................
   242c0:	09100910 09110911 09120911 09120912     ................
   242d0:	09130912 09130913 09140914 09150914     ................
   242e0:	09150915 09160916 09170916 09170917     ................
   242f0:	0a180a18 0a190a19 0a1a0a19 0a1a0a1a     ................
   24300:	0a1b0a1b 0a1c0a1b 0b1d0b1c 0b1d0b1d     ................
   24310:	0b1e0b1e 0b1f0b1e 0b200b1f 0b200b20     .......... . . .
   24320:	0b200b20 0b200b20 0b200b20 0a200b20      . . . . . . . .
   24330:	0a200a20 0a200a20 0a200a20 09000900      . . . . . .....
   24340:	09000900 09010900 09010901 09020902     ................
   24350:	09020902 09030903 09040903 09040904     ................
   24360:	09050905 09050905 09060906 09070906     ................
   24370:	09070907 09080907 09080908 09090909     ................
   24380:	09090909 090a090a 090b090a 090b090b     ................
   24390:	090c090c 090c090c 090d090d 090e090d     ................
   243a0:	090e090e 090f090e 090f090f 09100910     ................
   243b0:	09110910 09110911 09120911 09120912     ................
   243c0:	09130913 09130913 09140914 09150914     ................
   243d0:	09150915 09160916 09170916 0a170a17     ................
   243e0:	0a180a18 0a190a19 0a1a0a19 0a1a0a1a     ................
   243f0:	0b1b0a1b 0b1c0b1c 0b1d0b1c 0b1d0b1d     ................
   24400:	0b1e0b1e 0b1f0b1f 0b200b1f 0b200b20     .......... . . .
   24410:	0b200b20 0b200b20 0b200b20 0b200b20      . . . . . . . .
   24420:	0b200b20 0a200a20 0a200a20 09000900      . . . . . .....
   24430:	09000900 09010900 09010901 09020902     ................
   24440:	09020902 09030903 09040903 09040904     ................
   24450:	09050905 09050905 09060906 09070906     ................
   24460:	09070907 09080907 09080908 09090909     ................
   24470:	090a0909 090a090a 090b090a 090b090b     ................
   24480:	090c090c 090c090c 090d090d 090e090d     ................
   24490:	090e090e 090f090f 090f090f 09100910     ................
   244a0:	09110910 09110911 09120911 09120912     ................
   244b0:	09130913 09130913 09140914 09150914     ................
   244c0:	09150915 09160916 0a170a16 0a180a17     ................
   244d0:	0a180a18 0a190a19 0a1a0a19 0b1b0a1a     ................
   244e0:	0b1b0b1b 0b1c0b1c 0b1d0b1c 0b1e0b1d     ................
   244f0:	0b1e0b1e 0c1f0b1f 0c200c1f 0b200c20     .......... . . .
   24500:	0b200b20 0b200b20 0b200b20 0b200b20      . . . . . . . .
   24510:	0b200b20 0b200b20 0a200a20 09000900      . . . . . .....
   24520:	09000900 09010900 09010901 09020902     ................
   24530:	09020902 09030903 09040903 09040904     ................
   24540:	09050905 09050905 09060906 09070906     ................
   24550:	09070907 09080908 09080908 09090909     ................
   24560:	090a0909 090a090a 090b090a 090b090b     ................
   24570:	090c090c 090d090c 090d090d 090e090d     ................
   24580:	090e090e 090f090f 090f090f 09100910     ................
   24590:	09110910 09110911 09120911 09120912     ................
   245a0:	09130913 09130913 09140914 09150914     ................
   245b0:	09150915 0a160a16 0a170a16 0a180a17     ................
   245c0:	0a180a18 0a190a19 0b1a0b1a 0b1b0b1a     ................
   245d0:	0b1b0b1b 0b1c0b1c 0b1d0b1d 0b1e0b1d     ................
   245e0:	0c1e0c1e 0c1f0c1f 0c200c20 0c200c20     ........ . . . .
   245f0:	0b200c20 0b200b20 0b200b20 0b200b20      . . . . . . . .
   24600:	0b200b20 0b200b20 0b200b20 09000900      . . . . . .....
   24610:	09000900 09010900 09010901 09020902     ................
   24620:	09020902 09030903 09040903 09040904     ................
   24630:	09050905 09050905 09060906 09070906     ................
   24640:	09070907 09080908 09080908 09090909     ................
   24650:	090a0909 090a090a 090b090a 090b090b     ................
   24660:	090c090c 090d090c 090d090d 090e090d     ................
   24670:	090e090e 090f090f 0a100a0f 0a100a10     ................
   24680:	0a110a10 0a110a11 0a120a12 09120912     ................
   24690:	09130913 09140913 09140914 0a150a14     ................
   246a0:	0a150a15 0a160a16 0a170a17 0a180a17     ................
   246b0:	0a190a18 0b190b19 0b1a0b1a 0b1b0b1a     ................
   246c0:	0b1c0b1b 0b1c0b1c 0c1d0b1d 0c1e0c1e     ................
   246d0:	0c1f0c1e 0c1f0c1f 0c200c20 0c200c20     ........ . . . .
   246e0:	0c200c20 0b200c20 0b200b20 0b200b20      . . . . . . . .
   246f0:	0b200b20 0b200b20 0b200b20 09000900      . . . . . .....
   24700:	09000900 09010900 09010901 09020902     ................
   24710:	09030902 09030903 09040903 09040904     ................
   24720:	09050905 09060905 09060906 09070906     ................
   24730:	0a070907 0a080a08 0a080a08 0a090a09     ................
   24740:	0a0a0a09 0a0a0a0a 0a0b0a0b 0a0b0a0b     ................
   24750:	0a0c0a0c 0a0d0a0c 0a0d0a0d 0a0e0a0e     ................
   24760:	0a0e0a0e 0a0f0a0f 0a100a0f 0a100a10     ................
   24770:	0a110a10 0a110a11 0a120a12 0a120a12     ................
   24780:	0a130a13 0a140a13 0a140a14 0a150a14     ................
   24790:	0a150a15 0a160a16 0a170a17 0a180a17     ................
   247a0:	0b190b18 0b190b19 0b1a0b1a 0b1b0b1b     ................
   247b0:	0b1c0b1b 0c1d0b1c 0c1d0c1d 0c1e0c1e     ................
   247c0:	0c1f0c1e 0c200c1f 0c200c20 0c200c20     ...... . . . . .
   247d0:	0c200c20 0c200c20 0c200c20 0b200b20      . . . . . . . .
   247e0:	0b200b20 0b200b20 0b200b20 09000900      . . . . . .....
   247f0:	09000900 09010900 09010901 09020902     ................
   24800:	0a030902 0a030a03 0a040a03 0a040a04     ................
   24810:	0a050a05 0a060a05 0a060a06 0a070a06     ................
   24820:	0a070a07 0a080a08 0a080a08 0a090a09     ................
   24830:	0a0a0a09 0a0a0a0a 0a0b0a0b 0a0b0a0b     ................
   24840:	0a0c0a0c 0a0d0a0c 0a0d0a0d 0a0e0a0e     ................
   24850:	0a0f0a0e 0a0f0a0f 0a100a0f 0a100a10     ................
   24860:	0a110a11 0a110a11 0a120a12 0a130a12     ................
   24870:	0a130a13 0a140a13 0a140a14 0a150a14     ................
   24880:	0a160a15 0a160a16 0a170a17 0b180b18     ................
   24890:	0b190b18 0b1a0b19 0b1a0b1a 0b1b0b1b     ................
   248a0:	0c1c0c1b 0c1d0c1c 0c1d0c1d 0c1e0c1e     ................
   248b0:	0c1f0c1f 0c200c1f 0c200c20 0c200c20     ...... . . . . .
   248c0:	0c200c20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   248d0:	0b200b20 0b200b20 0b200b20 0a000a00      . . . . . .....
   248e0:	0a000a00 0a010a00 0a010a01 0a020a02     ................
   248f0:	0a030a02 0a030a03 0a040a03 0a040a04     ................
   24900:	0a050a05 0a060a05 0a060a06 0a070a06     ................
   24910:	0a070a07 0a080a08 0a090a08 0a090a09     ................
   24920:	0a0a0a09 0a0a0a0a 0a0b0a0b 0a0c0a0b     ................
   24930:	0a0c0a0c 0a0d0a0c 0a0d0a0d 0a0e0a0e     ................
   24940:	0a0f0a0e 0a0f0a0f 0a100a0f 0a100a10     ................
   24950:	0a110a11 0a110a11 0a120a12 0a130a12     ................
   24960:	0a130a13 0a140a13 0a140a14 0a150a15     ................
   24970:	0a160a15 0a160a16 0b170b17 0b180b18     ................
   24980:	0b190b18 0b1a0b19 0b1a0b1a 0c1b0c1b     ................
   24990:	0c1c0c1c 0c1d0c1c 0c1e0c1d 0c1e0c1e     ................
   249a0:	0d1f0d1f 0d200d20 0c200d20 0c200c20     .... . . . . . .
   249b0:	0c200c20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   249c0:	0c200c20 0b200b20 0b200b20 0a000a00      . . . . . .....
   249d0:	0a000a00 0a010a00 0a010a01 0a020a02     ................
   249e0:	0a030a02 0a030a03 0a040a03 0a040a04     ................
   249f0:	0a050a05 0a060a05 0a060a06 0a070a06     ................
   24a00:	0a070a07 0a080a08 0a090a08 0a090a09     ................
   24a10:	0a0a0a09 0a0a0a0a 0a0b0a0b 0a0c0a0b     ................
   24a20:	0a0c0a0c 0a0d0a0d 0a0d0a0d 0a0e0a0e     ................
   24a30:	0a0f0a0e 0a0f0a0f 0a100a10 0a100a10     ................
   24a40:	0a110a11 0a120a11 0a120a12 0a130a12     ................
   24a50:	0a130a13 0a140a14 0a140a14 0a150a15     ................
   24a60:	0a160a15 0b170a16 0b170b17 0b180b18     ................
   24a70:	0b190b19 0b1a0b19 0c1b0c1a 0c1b0c1b     ................
   24a80:	0c1c0c1c 0c1d0c1d 0c1e0c1d 0d1f0d1e     ................
   24a90:	0d1f0d1f 0d200d20 0d200d20 0d200d20     .... . . . . . .
   24aa0:	0c200c20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   24ab0:	0c200c20 0c200c20 0b200c20 0a000a00      . . . . . .....
   24ac0:	0a000a00 0a010a00 0a010a01 0a020a02     ................
   24ad0:	0a030a02 0a030a03 0a040a03 0a040a04     ................
   24ae0:	0a050a05 0a060a05 0a060a06 0a070a07     ................
   24af0:	0a070a07 0a080a08 0a090a08 0a090a09     ................
   24b00:	0a0a0a09 0a0a0a0a 0a0b0a0b 0a0c0a0b     ................
   24b10:	0a0c0a0c 0a0d0a0d 0a0e0a0d 0a0e0a0e     ................
   24b20:	0a0f0a0e 0a0f0a0f 0a100a10 0a110a10     ................
   24b30:	0a110a11 0a120a11 0a120a12 0a130a12     ................
   24b40:	0a130a13 0a140a14 0a140a14 0a150a15     ................
   24b50:	0b160a15 0b170b16 0b170b17 0b180b18     ................
   24b60:	0b190b19 0c1a0c1a 0c1b0c1a 0c1c0c1b     ................
   24b70:	0c1c0c1c 0d1d0c1d 0d1e0d1e 0d1f0d1e     ................
   24b80:	0d200d1f 0d200d20 0d200d20 0d200d20     .. . . . . . . .
   24b90:	0d200d20 0c200c20 0c200c20 0c200c20      . . . . . . . .
   24ba0:	0c200c20 0c200c20 0c200c20 0a000a00      . . . . . .....
   24bb0:	0a000a00 0a010a00 0a010a01 0a020a02     ................
   24bc0:	0a030a02 0a030a03 0a040a04 0a040a04     ................
   24bd0:	0a050a05 0a060a05 0a060a06 0a070a07     ................
   24be0:	0a070a07 0a080a08 0a090a08 0a090a09     ................
   24bf0:	0a0a0a0a 0a0a0a0a 0b0b0b0b 0b0c0b0b     ................
   24c00:	0b0c0b0c 0b0d0b0d 0b0e0b0d 0b0e0b0e     ................
   24c10:	0b0f0b0f 0b0f0b0f 0b100b10 0b110b10     ................
   24c20:	0b110b11 0b120b11 0b120b12 0b130b13     ................
   24c30:	0b130b13 0b140b14 0b150b14 0b150b15     ................
   24c40:	0b160b16 0b170b16 0b180b17 0c180b18     ................
   24c50:	0c190c19 0c1a0c1a 0c1b0c1a 0c1c0c1b     ................
   24c60:	0d1c0c1c 0d1d0d1d 0d1e0d1e 0d1f0d1e     ................
   24c70:	0d200d1f 0d200d20 0d200d20 0d200d20     .. . . . . . . .
   24c80:	0d200d20 0d200d20 0c200c20 0c200c20      . . . . . . . .
   24c90:	0c200c20 0c200c20 0c200c20 0a000a00      . . . . . .....
   24ca0:	0a000a00 0a010a00 0a010a01 0a020a02     ................
   24cb0:	0a030a02 0a030a03 0a040a04 0a040a04     ................
   24cc0:	0a050a05 0a060a05 0b060b06 0b070b07     ................
   24cd0:	0b080b07 0b080b08 0b090b08 0b090b09     ................
   24ce0:	0b0a0b0a 0b0b0b0a 0b0b0b0b 0b0c0b0c     ................
   24cf0:	0b0c0b0c 0b0d0b0d 0b0e0b0d 0b0e0b0e     ................
   24d00:	0b0f0b0f 0b100b0f 0b100b10 0b110b10     ................
   24d10:	0b110b11 0b120b12 0b120b12 0b130b13     ................
   24d20:	0b140b13 0b140b14 0b150b14 0b150b15     ................
   24d30:	0b160b16 0b170b17 0c180b17 0c190c18     ................
   24d40:	0c190c19 0c1a0c1a 0c1b0c1b 0d1c0c1b     ................
   24d50:	0d1d0d1c 0d1d0d1d 0d1e0d1e 0d1f0d1f     ................
   24d60:	0d200e1f 0d200d20 0d200d20 0d200d20     .. . . . . . . .
   24d70:	0d200d20 0d200d20 0d200d20 0c200c20      . . . . . . . .
   24d80:	0c200c20 0c200c20 0c200c20 0a000a00      . . . . . .....
   24d90:	0a000a00 0a010a00 0a010a01 0b020a02     ................
   24da0:	0b030b02 0b030b03 0b040b04 0b040b04     ................
   24db0:	0b050b05 0b060b05 0b060b06 0b070b07     ................
   24dc0:	0b080b07 0b080b08 0b090b08 0b090b09     ................
   24dd0:	0b0a0b0a 0b0b0b0a 0b0b0b0b 0b0c0b0c     ................
   24de0:	0b0d0b0c 0b0d0b0d 0b0e0b0d 0b0e0b0e     ................
   24df0:	0b0f0b0f 0b100b0f 0b100b10 0b110b11     ................
   24e00:	0b110b11 0b120b12 0b130b12 0b130b13     ................
   24e10:	0b140b13 0b140b14 0b150b15 0b160b15     ................
   24e20:	0b160b16 0c170b17 0c180c18 0c190c18     ................
   24e30:	0c1a0c19 0c1a0c1a 0d1b0d1b 0d1c0d1c     ................
   24e40:	0d1d0d1c 0d1e0d1d 0d1e0d1e 0e1f0e1f     ................
   24e50:	0e200e20 0e200e20 0d200d20 0d200d20      . . . . . . . .
   24e60:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   24e70:	0c200d20 0c200c20 0c200c20 0b000b00      . . . . . .....
   24e80:	0b000b00 0b010b00 0b010b01 0b020b02     ................
   24e90:	0b030b02 0b030b03 0b040b04 0b050b04     ................
   24ea0:	0b050b05 0b060b05 0b060b06 0b070b07     ................
   24eb0:	0b080b07 0b080b08 0b090b09 0b090b09     ................
   24ec0:	0b0a0b0a 0b0b0b0a 0b0b0b0b 0b0c0b0c     ................
   24ed0:	0b0d0b0c 0b0d0b0d 0b0e0b0e 0b0e0b0e     ................
   24ee0:	0b0f0b0f 0b100b0f 0b100b10 0b110b11     ................
   24ef0:	0b110b11 0b120b12 0b130b12 0b130b13     ................
   24f00:	0b140b13 0b140b14 0b150b15 0b160b15     ................
   24f10:	0c170c16 0c170c17 0c180c18 0c190c19     ................
   24f20:	0c1a0c19 0d1b0d1a 0d1b0d1b 0d1c0d1c     ................
   24f30:	0d1d0d1d 0e1e0d1d 0e1f0e1e 0e1f0e1f     ................
   24f40:	0e200e20 0e200e20 0e200e20 0d200d20      . . . . . . . .
   24f50:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   24f60:	0d200d20 0c200d20 0c200c20 0b000b00      . . . . . .....
   24f70:	0b000b00 0b010b00 0b010b01 0b020b02     ................
   24f80:	0b030b02 0b030b03 0b040b04 0b050b04     ................
   24f90:	0b050b05 0b060b05 0b060b06 0b070b07     ................
   24fa0:	0b080b07 0b080b08 0b090b09 0b0a0b09     ................
   24fb0:	0b0a0b0a 0b0b0b0a 0b0b0b0b 0b0c0b0c     ................
   24fc0:	0b0d0b0c 0b0d0b0d 0b0e0b0e 0b0f0b0e     ................
   24fd0:	0b0f0b0f 0b100b10 0b100b10 0b110b11     ................
   24fe0:	0b120b11 0b120b12 0b130b12 0b130b13     ................
   24ff0:	0b140b14 0c150b14 0c150c15 0c160c16     ................
   25000:	0c170c16 0c180c17 0c180c18 0d190c19     ................
   25010:	0d1a0d1a 0d1b0d1a 0d1c0d1b 0d1c0d1c     ................
   25020:	0e1d0d1d 0e1e0e1e 0e1f0e1e 0e200e1f     .............. .
   25030:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   25040:	0d200d20 0d200d20 0d200d20 0d200d20      . . . . . . . .
   25050:	0d200d20 0d200d20 0c200d20 0b000b00      . . . . . .....
   25060:	0b000b00 0b010b00 0b010b01 0b020b02     ................
   25070:	0b030b02 0b030b03 0b040b04 0b050b04     ................
   25080:	0b050b05 0b060b06 0b060b06 0b070b07     ................
   25090:	0b080b07 0b080b08 0b090b09 0b0a0b09     ................
   250a0:	0b0a0b0a 0b0b0b0b 0c0c0b0b 0c0c0c0c     ................
   250b0:	0c0d0c0c 0c0d0c0d 0c0e0c0e 0c0f0c0e     ................
   250c0:	0c0f0c0f 0c100c10 0c110c10 0c110c11     ................
   250d0:	0c120c11 0c120c12 0c130c13 0c130c13     ................
   250e0:	0c140c14 0c150c14 0c150c15 0c160c16     ................
   250f0:	0c170c17 0c180c17 0d190c18 0d190d19     ................
   25100:	0d1a0d1a 0d1b0d1b 0d1c0d1b 0e1d0e1c     ................
   25110:	0e1d0e1d 0e1e0e1e 0e1f0e1f 0e200e1f     .............. .
   25120:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   25130:	0e200e20 0d200e20 0d200d20 0d200d20      . . . . . . . .
   25140:	0d200d20 0d200d20 0d200d20 0b000b00      . . . . . .....
   25150:	0b000b00 0b010b00 0b010b01 0b020b02     ................
   25160:	0b030b02 0b030b03 0b040b04 0b050b04     ................
   25170:	0b050b05 0b060b06 0b070b06 0b070b07     ................
   25180:	0b080b07 0c080b08 0c090c09 0c0a0c09     ................
   25190:	0c0a0c0a 0c0b0c0b 0c0c0c0b 0c0c0c0c     ................
   251a0:	0c0d0c0d 0c0e0c0d 0c0e0c0e 0c0f0c0e     ................
   251b0:	0c0f0c0f 0c100c10 0c110c10 0c110c11     ................
   251c0:	0c120c12 0c120c12 0c130c13 0c140c13     ................
   251d0:	0c140c14 0c150c15 0c160c15 0c160c16     ................
   251e0:	0c170c17 0d180d18 0d190d18 0d1a0d19     ................
   251f0:	0d1a0d1a 0d1b0d1b 0e1c0e1c 0e1d0e1c     ................
   25200:	0e1e0e1d 0e1e0e1e 0f1f0e1f 0f200f20     ............ . .
   25210:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   25220:	0e200e20 0e200e20 0d200e20 0d200d20      . . . . . . . .
   25230:	0d200d20 0d200d20 0d200d20 0b000b00      . . . . . .....
   25240:	0b000b00 0b010b01 0b010b01 0b020b02     ................
   25250:	0b030b02 0b030b03 0c040c04 0c050c04     ................
   25260:	0c050c05 0c060c06 0c070c06 0c070c07     ................
   25270:	0c080c08 0c080c08 0c090c09 0c0a0c09     ................
   25280:	0c0a0c0a 0c0b0c0b 0c0c0c0b 0c0c0c0c     ................
   25290:	0c0d0c0d 0c0e0c0d 0c0e0c0e 0c0f0c0f     ................
   252a0:	0c100c0f 0c100c10 0c110c10 0c110c11     ................
   252b0:	0c120c12 0c130c12 0c130c13 0c140c13     ................
   252c0:	0c140c14 0c150c15 0c160c15 0d170c16     ................
   252d0:	0d170d17 0d180d18 0d190d19 0d1a0d19     ................
   252e0:	0e1b0d1a 0e1b0e1b 0e1c0e1c 0e1d0e1d     ................
   252f0:	0e1e0e1d 0f1f0e1e 0f1f0f1f 0f200f20     ............ . .
   25300:	0f200f20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   25310:	0e200e20 0e200e20 0e200e20 0d200e20      . . . . . . . .
   25320:	0d200d20 0d200d20 0d200d20 0c000c00      . . . . . .....
   25330:	0c000c00 0c010c01 0c010c01 0c020c02     ................
   25340:	0c030c02 0c030c03 0c040c04 0c050c04     ................
   25350:	0c050c05 0c060c06 0c070c06 0c070c07     ................
   25360:	0c080c08 0c090c08 0c090c09 0c0a0c09     ................
   25370:	0c0a0c0a 0c0b0c0b 0c0c0c0b 0c0c0c0c     ................
   25380:	0c0d0c0d 0c0e0c0d 0c0e0c0e 0c0f0c0f     ................
   25390:	0c100c0f 0c100c10 0c110c11 0c110c11     ................
   253a0:	0c120c12 0c130c12 0c130c13 0c140c14     ................
   253b0:	0c150c14 0d150c15 0d160d16 0d170d16     ................
   253c0:	0d180d17 0d180d18 0d190d19 0e1a0e19     ................
   253d0:	0e1b0e1a 0e1b0e1b 0e1c0e1c 0e1d0e1d     ................
   253e0:	0f1e0f1d 0f1f0f1e 0f1f0f1f 0f200f20     ............ . .
   253f0:	0f200f20 0f200f20 0e200f20 0e200e20      . . . . . . . .
   25400:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   25410:	0d200e20 0d200d20 0d200d20 0c000c00      . . . . . .....
   25420:	0c000c00 0c010c01 0c020c01 0c020c02     ................
   25430:	0c030c02 0c030c03 0c040c04 0c050c04     ................
   25440:	0c050c05 0c060c06 0c070c06 0c070c07     ................
   25450:	0c080c08 0c090c08 0c090c09 0c0a0c0a     ................
   25460:	0c0b0c0a 0c0b0c0b 0c0c0c0c 0c0d0c0c     ................
   25470:	0c0d0c0d 0c0e0c0e 0c0e0c0e 0c0f0c0f     ................
   25480:	0c100c0f 0d100c10 0d110d11 0d120d11     ................
   25490:	0d120d12 0d130d13 0d130d13 0d140d14     ................
   254a0:	0d150d14 0d150d15 0d160d16 0d170d17     ................
   254b0:	0d180d17 0d180d18 0e190e19 0e1a0e1a     ................
   254c0:	0e1b0e1a 0e1c0e1b 0e1c0e1c 0f1d0f1d     ................
   254d0:	0f1e0f1e 0f1f0f1e 0f200f1f 0f200f20     .......... . . .
   254e0:	0f200f20 0f200f20 0f200f20 0e200f20      . . . . . . . .
   254f0:	0e200e20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   25500:	0e200e20 0e200e20 0d200d20 0c000c00      . . . . . .....
   25510:	0c000c00 0c010c01 0c020c01 0c020c02     ................
   25520:	0c030c02 0c030c03 0c040c04 0c050c04     ................
   25530:	0c050c05 0c060c06 0c070c06 0c070c07     ................
   25540:	0c080c08 0c090c08 0c090c09 0c0a0c0a     ................
   25550:	0c0b0c0a 0c0b0c0b 0c0c0c0c 0d0d0d0c     ................
   25560:	0d0d0d0d 0d0e0d0e 0d0f0d0e 0d0f0d0f     ................
   25570:	0d100d10 0d100d10 0d110d11 0d120d11     ................
   25580:	0d120d12 0d130d13 0d140d13 0d140d14     ................
   25590:	0d150d15 0d160d15 0d160d16 0d170d17     ................
   255a0:	0e180d17 0e190e18 0e190e19 0e1a0e1a     ................
   255b0:	0e1b0e1b 0f1c0e1b 0f1d0f1c 0f1d0f1d     ................
   255c0:	0f1e0f1e 0f1f0f1f 0f200f1f 0f200f20     .......... . . .
   255d0:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   255e0:	0e200f20 0e200e20 0e200e20 0e200e20      . . . . . . . .
   255f0:	0e200e20 0e200e20 0e200e20 0c000c00      . . . . . .....
   25600:	0c000c00 0c010c01 0c020c01 0c020c02     ................
   25610:	0c030c03 0c040c03 0c040c04 0c050c04     ................
   25620:	0c050c05 0c060c06 0c070c06 0c070c07     ................
   25630:	0c080c08 0c090c08 0c090c09 0d0a0d0a     ................
   25640:	0d0b0d0a 0d0b0d0b 0d0c0d0c 0d0d0d0c     ................
   25650:	0d0d0d0d 0d0e0d0e 0d0f0d0e 0d0f0d0f     ................
   25660:	0d100d10 0d110d10 0d110d11 0d120d12     ................
   25670:	0d120d12 0d130d13 0d140d13 0d140d14     ................
   25680:	0d150d15 0d160d15 0d160d16 0e170e17     ................
   25690:	0e180e18 0e190e18 0e1a0e19 0e1a0e1a     ................
   256a0:	0f1b0f1b 0f1c0f1c 0f1d0f1c 0f1e0f1d     ................
   256b0:	0f1e0f1e 101f101f 1020101f 0f200f20     .......... . . .
   256c0:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   256d0:	0f200f20 0e200f20 0e200e20 0e200e20      . . . . . . . .
   256e0:	0e200e20 0e200e20 0e200e20 0c000c00      . . . . . .....
   256f0:	0c000c00 0c010c01 0c020c01 0c020c02     ................
   25700:	0c030c03 0c040c03 0c040c04 0c050c05     ................
   25710:	0d060c05 0d060d06 0d070d06 0d070d07     ................
   25720:	0d080d08 0d090d08 0d090d09 0d0a0d0a     ................
   25730:	0d0b0d0a 0d0b0d0b 0d0c0d0c 0d0d0d0c     ................
   25740:	0d0d0d0d 0d0e0d0e 0d0f0d0e 0d0f0d0f     ................
   25750:	0d100d10 0d110d10 0d110d11 0d120d12     ................
   25760:	0d130d12 0d130d13 0d140d14 0d150d14     ................
   25770:	0d150d15 0e160d16 0e170e16 0e170e17     ................
   25780:	0e180e18 0e190e19 0e1a0e19 0f1b0f1a     ................
   25790:	0f1b0f1b 0f1c0f1c 0f1d0f1d 0f1e0f1d     ................
   257a0:	101e101e 101f101f 1020101f 10201020     .......... . . .
   257b0:	0f201020 0f200f20 0f200f20 0f200f20      . . . . . . . .
   257c0:	0f200f20 0f200f20 0f200f20 0e200e20      . . . . . . . .
   257d0:	0e200e20 0e200e20 0e200e20 0c000c00      . . . . . .....
   257e0:	0d000c00 0d010d01 0d020d01 0d020d02     ................
   257f0:	0d030d03 0d040d03 0d040d04 0d050d05     ................
   25800:	0d060d05 0d060d06 0d070d07 0d080d07     ................
   25810:	0d080d08 0d090d08 0d090d09 0d0a0d0a     ................
   25820:	0d0b0d0a 0d0b0d0b 0d0c0d0c 0d0d0d0d     ................
   25830:	0d0e0d0d 0d0e0d0e 0d0f0d0f 0d100d0f     ................
   25840:	0d100d10 0d110d11 0d110d11 0d120d12     ................
   25850:	0d130d12 0d130d13 0d140d14 0e150e14     ................
   25860:	0e150e15 0e160e16 0e170e16 0e180e17     ................
   25870:	0e180e18 0f190e19 0f1a0f1a 0f1b0f1a     ................
   25880:	0f1c0f1b 0f1c0f1c 101d0f1d 101e101d     ................
   25890:	101e101e 101f101f 101f101f 10201020     ............ . .
   258a0:	10201020 0f201020 0f200f20 0f200f20      . . . . . . . .
   258b0:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   258c0:	0e200e20 0e200e20 0e200e20 0d000d00      . . . . . .....
   258d0:	0d000d00 0d010d01 0d020d01 0d020d02     ................
   258e0:	0d030d03 0d040d03 0d040d04 0d050d05     ................
   258f0:	0d060d05 0d060d06 0d070d07 0d080d07     ................
   25900:	0d080d08 0d090d09 0d0a0d09 0d0a0d0a     ................
   25910:	0d0b0d0b 0d0c0d0b 0d0c0d0c 0d0d0d0d     ................
   25920:	0d0e0d0d 0d0e0d0e 0d0f0d0f 0d100d0f     ................
   25930:	0e100e10 0e110e11 0e120e11 0e120e12     ................
   25940:	0e130e13 0e140e13 0e140e14 0e150e14     ................
   25950:	0e160e15 0e160e16 0e170e17 0e180e17     ................
   25960:	0f190f18 0f190f19 0f1a0f1a 0f1b0f1b     ................
   25970:	0f1c0f1b 101c101c 101d101d 101e101d     ................
   25980:	101e101e 101f101e 101f101f 10201020     ............ . .
   25990:	10201020 10201020 0f201020 0f200f20      . . . . . . . .
   259a0:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   259b0:	0f200f20 0e200e20 0e200e20 0d000d00      . . . . . .....
   259c0:	0d000d00 0d010d01 0d020d01 0d020d02     ................
   259d0:	0d030d03 0d040d03 0d040d04 0d050d05     ................
   259e0:	0d060d05 0d060d06 0d070d07 0d080d07     ................
   259f0:	0d080d08 0d090d09 0d0a0d09 0d0a0d0a     ................
   25a00:	0d0b0d0b 0d0c0d0b 0d0c0d0c 0e0d0d0d     ................
   25a10:	0e0e0e0d 0e0e0e0e 0e0f0e0f 0e100e0f     ................
   25a20:	0e100e10 0e110e11 0e120e11 0e120e12     ................
   25a30:	0e130e13 0e140e13 0e140e14 0e150e15     ................
   25a40:	0e160e15 0e160e16 0f170e17 0f180f18     ................
   25a50:	0f190f18 0f1a0f19 0f1a0f1a 101b0f1b     ................
   25a60:	101c101b 101c101c 101d101d 101e101d     ................
   25a70:	101e101e 101f101e 101f101f 10201020     ............ . .
   25a80:	10201020 10201020 10201020 10201020      . . . . . . . .
   25a90:	0f200f20 0f200f20 0f200f20 0f200f20      . . . . . . . .
   25aa0:	0f200f20 0f200f20 0e200e20 0d000d00      . . . . . .....
   25ab0:	0d000d00 0d010d01 0d020d01 0d020d02     ................
   25ac0:	0d030d03 0d040d03 0d040d04 0d050d05     ................
   25ad0:	0d060d05 0d060d06 0d070d07 0d080d07     ................
   25ae0:	0d080d08 0d090d09 0d0a0d09 0d0a0d0a     ................
   25af0:	0e0b0d0b 0e0c0e0b 0e0c0e0c 0e0d0e0d     ................
   25b00:	0e0e0e0d 0e0e0e0e 0e0f0e0f 0e100e0f     ................
   25b10:	0e110e10 0e110e11 0e120e12 0e120e12     ................
   25b20:	0e130e13 0e140e13 0e140e14 0e150e15     ................
   25b30:	0e160e15 0f170e16 0f170f17 0f180f18     ................
   25b40:	0f190f19 0f1a0f19 101b0f1a 101b101b     ................
   25b50:	101c101b 101c101c 101d101d 101d101d     ................
   25b60:	101e101e 101f101e 101f101f 1020101f     .............. .
   25b70:	10201020 10201020 10201020 10201020      . . . . . . . .
   25b80:	10201020 0f200f20 0f200f20 0f200f20      . . . . . . . .
   25b90:	0f200f20 0f200f20 0f200f20 0d000d00      . . . . . .....
   25ba0:	0d000d00 0d010d01 0d020d01 0d020d02     ................
   25bb0:	0d030d03 0d040d03 0d040d04 0d050d05     ................
   25bc0:	0d060d05 0d060d06 0e070d07 0e080e07     ................
   25bd0:	0e080e08 0e090e09 0e0a0e09 0e0a0e0a     ................
   25be0:	0e0b0e0b 0e0c0e0b 0e0c0e0c 0e0d0e0d     ................
   25bf0:	0e0e0e0e 0e0f0e0e 0e0f0e0f 0e100e10     ................
   25c00:	0e110e10 0e110e11 0e120e12 0e130e12     ................
   25c10:	0e130e13 0e140e14 0e150e14 0f150e15     ................
   25c20:	0f160f16 0f170f16 0f180f17 0f180f18     ................
   25c30:	0f190f19 101a101a 101a101a 101b101b     ................
   25c40:	101c101b 101c101c 101d101c 101d101d     ................
   25c50:	101e101e 101e101e 101f101f 1020101f     .............. .
   25c60:	10201020 10201020 10201020 10201020      . . . . . . . .
   25c70:	10201020 10201020 0f200f20 0f200f20      . . . . . . . .
   25c80:	0f200f20 0f200f20 0f200f20 0d000d00      . . . . . .....
   25c90:	0d000d00 0d010d01 0e020d01 0e020e02     ................
   25ca0:	0e030e03 0e040e03 0e040e04 0e050e05     ................
   25cb0:	0e060e05 0e060e06 0e070e07 0e080e07     ................
   25cc0:	0e080e08 0e090e09 0e0a0e09 0e0a0e0a     ................
   25cd0:	0e0b0e0b 0e0c0e0b 0e0d0e0c 0e0d0e0d     ................
   25ce0:	0e0e0e0e 0e0f0e0e 0e0f0e0f 0e100e10     ................
   25cf0:	0e110e10 0e110e11 0e120e12 0f130e12     ................
   25d00:	0f130f13 0f140f14 0f150f14 0f150f15     ................
   25d10:	0f160f16 0f170f17 0f180f17 10190f18     ................
   25d20:	10191019 101a1019 101a101a 101b101b     ................
   25d30:	101b101b 101c101c 101d101c 101d101d     ................
   25d40:	101e101d 101e101e 101f101f 1020101f     .............. .
   25d50:	10201020 10201020 10201020 10201020      . . . . . . . .
   25d60:	10201020 10201020 10201020 0f200f20      . . . . . . . .
   25d70:	0f200f20 0f200f20 0f200f20 0e000e00      . . . . . .....
   25d80:	0e000e00 0e010e01 0e020e01 0e020e02     ................
   25d90:	0e030e03 0e040e03 0e040e04 0e050e05     ................
   25da0:	0e060e05 0e060e06 0e070e07 0e080e07     ................
   25db0:	0e090e08 0e090e09 0e0a0e0a 0e0b0e0a     ................
   25dc0:	0e0b0e0b 0e0c0e0c 0e0d0e0c 0e0d0e0d     ................
   25dd0:	0e0e0e0e 0e0f0e0e 0e0f0e0f 0f100e10     ................
   25de0:	0f110f10 0f110f11 0f120f12 0f130f13     ................
   25df0:	0f140f13 0f140f14 0f150f15 0f160f15     ................
   25e00:	0f160f16 0f170f17 10180f18 10181018     ................
   25e10:	10191019 101a1019 101a101a 101b101a     ................
   25e20:	101b101b 101c101c 101d101c 101d101d     ................
   25e30:	101e101d 101e101e 101f101f 101f101f     ................
   25e40:	10201020 10201020 10201020 10201020      . . . . . . . .
   25e50:	10201020 10201020 10201020 10201020      . . . . . . . .
   25e60:	0f201020 0f200f20 0f200f20 0e000e00      . . . . . .....
   25e70:	0e000e00 0e010e01 0e020e01 0e020e02     ................
   25e80:	0e030e03 0e040e03 0e040e04 0e050e05     ................
   25e90:	0e060e05 0e070e06 0e070e07 0e080e08     ................
   25ea0:	0e090e08 0e090e09 0e0a0e0a 0e0b0e0a     ................
   25eb0:	0e0b0e0b 0e0c0e0c 0e0d0e0c 0e0d0e0d     ................
   25ec0:	0f0e0e0e 0f0f0f0e 0f100f0f 0f100f10     ................
   25ed0:	0f110f11 0f120f11 0f120f12 0f130f13     ................
   25ee0:	0f140f13 0f140f14 0f150f15 0f160f15     ................
   25ef0:	0f170f16 10171017 10181017 10181018     ................
   25f00:	10191019 10191019 101a101a 101b101a     ................
   25f10:	101b101b 101c101c 101c101c 101d101d     ................
   25f20:	101e101d 101e101e 101f101e 101f101f     ................
   25f30:	10201020 10201020 10201020 10201020      . . . . . . . .
   25f40:	10201020 10201020 10201020 10201020      . . . . . . . .
   25f50:	10201020 0f201020 0f200f20 0e000e00      . . . . . .....
   25f60:	0e000e00 0e010e01 0e020e01 0e020e02     ................
   25f70:	0e030e03 0e040e03 0e040e04 0e050e05     ................
   25f80:	0e060e06 0e070e06 0e070e07 0e080e08     ................
   25f90:	0e090e08 0e090e09 0e0a0e0a 0e0b0e0a     ................
   25fa0:	0e0b0e0b 0f0c0f0c 0f0d0f0c 0f0d0f0d     ................
   25fb0:	0f0e0f0e 0f0f0f0f 0f100f0f 0f100f10     ................
   25fc0:	0f110f11 0f120f11 0f120f12 0f130f13     ................
   25fd0:	0f140f13 0f140f14 0f150f15 10160f16     ................
   25fe0:	10161016 10171017 10181017 10181018     ................
   25ff0:	10191019 10191019 101a101a 101b101a     ................
   26000:	101b101b 101c101b 101c101c 101d101d     ................
   26010:	101d101d 101e101e 101f101e 101f101f     ................
   26020:	1020101f 10201020 10201020 10201020     .. . . . . . . .
   26030:	10201020 10201020 10201020 10201020      . . . . . . . .
   26040:	10201020 10201020 0f201020 0e000e00      . . . . . .....
   26050:	0e000e00 0e010e01 0e020e01 0e020e02     ................
   26060:	0e030e03 0e040e03 0e040e04 0e050e05     ................
   26070:	0e060e06 0e070e06 0e070e07 0e080e08     ................
   26080:	0e090e08 0f090f09 0f0a0f0a 0f0b0f0a     ................
   26090:	0f0b0f0b 0f0c0f0c 0f0d0f0c 0f0e0f0d     ................
   260a0:	0f0e0f0e 0f0f0f0f 0f100f0f 0f100f10     ................
   260b0:	0f110f11 0f120f11 0f120f12 0f130f13     ................
   260c0:	0f140f14 0f150f14 10151015 10161016     ................
   260d0:	10161016 10171017 10181017 10181018     ................
   260e0:	10191018 10191019 101a101a 101a101a     ................
   260f0:	101b101b 101c101b 101c101c 101d101c     ................
   26100:	101d101d 101e101e 101f101e 101f101f     ................
   26110:	1020101f 10201020 10201020 10201020     .. . . . . . . .
   26120:	10201020 10201020 10201020 10201020      . . . . . . . .
   26130:	10201020 10201020 10201020 0e000e00      . . . . . .....
   26140:	0e000e00 0e010e01 0e020e01 0e020e02     ................
   26150:	0f030e03 0f040f03 0f050f04 0f050f05     ................
   26160:	0f060f06 0f070f06 0f070f07 0f080f08     ................
   26170:	0f090f08 0f090f09 0f0a0f0a 0f0b0f0a     ................
   26180:	0f0c0f0b 0f0c0f0c 0f0d0f0d 0f0e0f0d     ................
   26190:	0f0e0f0e 0f0f0f0f 0f100f0f 0f100f10     ................
   261a0:	0f110f11 0f120f11 0f130f12 10131013     ................
   261b0:	10141014 10151014 10151015 10161015     ................
   261c0:	10161016 10171017 10171017 10181018     ................
   261d0:	10191018 10191019 101a1019 101a101a     ................
   261e0:	101b101b 101c101b 101c101c 101d101c     ................
   261f0:	101d101d 101e101e 101e101e 101f101f     ................
   26200:	1020101f 10201020 10201020 10201020     .. . . . . . . .
   26210:	10201020 10201020 10201020 10201020      . . . . . . . .
   26220:	10201020 10201020 10201020 0f000f00      . . . . . .....
   26230:	0f000f00 0f010f01 0f020f01 0f020f02     ................
   26240:	0f030f03 0f040f03 0f050f04 0f050f05     ................
   26250:	0f060f06 0f070f06 0f070f07 0f080f08     ................
   26260:	0f090f08 0f090f09 0f0a0f0a 0f0b0f0b     ................
   26270:	0f0c0f0b 0f0c0f0c 0f0d0f0d 0f0e0f0d     ................
   26280:	0f0e0f0e 0f0f0f0f 0f100f0f 0f110f10     ................
   26290:	10111011 10121012 10131012 10131013     ................
   262a0:	10141014 10141014 10151015 10161015     ................
   262b0:	10161016 10171016 10171017 10181018     ................
   262c0:	10181018 10191019 101a1019 101a101a     ................
   262d0:	101b101b 101b101b 101c101c 101d101c     ................
   262e0:	101d101d 101e101d 101e101e 101f101f     ................
   262f0:	101f101f 10201020 10201020 10201020     .... . . . . . .
   26300:	10201020 10201020 10201020 10201020      . . . . . . . .
   26310:	10201020 10201020 10201020 0f000f00      . . . . . .....
   26320:	0f000f00 0f010f01 0f020f01 0f020f02     ................
   26330:	0f030f03 0f040f03 0f050f04 0f050f05     ................
   26340:	0f060f06 0f070f06 0f070f07 0f080f08     ................
   26350:	0f090f08 0f0a0f09 0f0a0f0a 0f0b0f0b     ................
   26360:	0f0c0f0b 0f0c0f0c 0f0d0f0d 0f0e0f0d     ................
   26370:	0f0e0f0e 100f100f 1010100f 10101010     ................
   26380:	10111011 10121011 10121012 10131013     ................
   26390:	10141013 10141014 10151015 10151015     ................
   263a0:	10161016 10171016 10171017 10181018     ................
   263b0:	10181018 10191019 101a1019 101a101a     ................
   263c0:	101b101a 101b101b 101c101c 101c101c     ................
   263d0:	101d101d 101e101d 101e101e 101f101e     ................
   263e0:	101f101f 10201020 10201020 10201020     .... . . . . . .
   263f0:	10201020 10201020 10201020 10201020      . . . . . . . .
   26400:	10201020 10201020 10201020 0f000f00      . . . . . .....
   26410:	0f000f00 0f010f01 0f020f01 0f020f02     ................
   26420:	0f030f03 0f040f03 0f050f04 0f050f05     ................
   26430:	0f060f06 0f070f06 0f070f07 0f080f08     ................
   26440:	0f090f09 0f0a0f09 0f0a0f0a 0f0b0f0b     ................
   26450:	0f0c0f0b 0f0c0f0c 100d100d 100e100d     ................
   26460:	100e100e 100f100f 1010100f 10101010     ................
   26470:	10111011 10121011 10121012 10131013     ................
   26480:	10141013 10141014 10151015 10151015     ................
   26490:	10161016 10171016 10171017 10181017     ................
   264a0:	10181018 10191019 10191019 101a101a     ................
   264b0:	101b101a 101b101b 101c101b 101c101c     ................
   264c0:	101d101d 101e101d 101e101e 101f101e     ................
   264d0:	101f101f 10201020 10201020 10201020     .... . . . . . .
   264e0:	10201020 10201020 10201020 10201020      . . . . . . . .
   264f0:	10201020 10201020 10201020 0f000f00      . . . . . .....
   26500:	0f000f00 0f010f01 0f020f01 0f020f02     ................
   26510:	0f030f03 0f040f03 0f050f04 0f050f05     ................
   26520:	0f060f06 0f070f06 0f070f07 0f080f08     ................
   26530:	0f090f09 0f0a0f09 0f0a0f0a 100b100b     ................
   26540:	100c100b 100c100c 100d100d 100e100d     ................
   26550:	100e100e 100f100f 1010100f 10101010     ................
   26560:	10111011 10121011 10121012 10131013     ................
   26570:	10141013 10141014 10151015 10151015     ................
   26580:	10161016 10161016 10171017 10181017     ................
   26590:	10181018 10191018 10191019 101a101a     ................
   265a0:	101a101a 101b101b 101c101b 101c101c     ................
   265b0:	101d101d 101d101d 101e101e 101f101e     ................
   265c0:	101f101f 1020101f 10201020 10201020     ...... . . . . .
   265d0:	10201020 10201020 10201020 10201020      . . . . . . . .
   265e0:	10201020 10201020 10201020 0f000f00      . . . . . .....
   265f0:	0f000f00 0f010f01 0f020f01 0f020f02     ................
   26600:	0f030f03 0f040f03 0f050f04 10051005     ................
   26610:	10061006 10071006 10071007 10081008     ................
   26620:	10091009 100a1009 100a100a 100b100b     ................
   26630:	100c100b 100c100c 100d100d 100e100d     ................
   26640:	100e100e 100f100f 1010100f 10101010     ................
   26650:	10111011 10121011 10121012 10131013     ................
   26660:	10141013 10141014 10151015 10151015     ................
   26670:	10161015 10161016 10171017 10171017     ................
   26680:	10181018 10191018 10191019 101a101a     ................
   26690:	101a101a 101b101b 101c101b 101c101c     ................
   266a0:	101d101c 101d101d 101e101e 101e101e     ................
   266b0:	101f101f 1020101f 10201020 10201020     ...... . . . . .
   266c0:	10201020 10201020 10201020 10201020      . . . . . . . .
   266d0:	10201020 10201020 10201020 10001000      . . . . . .....
   266e0:	10001000 10011001 10021001 10021002     ................
   266f0:	10031003 10041003 10051004 10051005     ................
   26700:	10061006 10071006 10071007 10081008     ................
   26710:	10091009 100a1009 100a100a 100b100b     ................
   26720:	100c100b 100c100c 100d100d 100e100d     ................
   26730:	100e100e 100f100f 1010100f 10101010     ................
   26740:	10111011 10121011 10121012 10131013     ................
   26750:	10141013 10141014 10151015 10151015     ................
   26760:	10161015 10161016 10171017 10171017     ................
   26770:	10181018 10191018 10191019 101a1019     ................
   26780:	101a101a 101b101b 101b101b 101c101c     ................
   26790:	101d101c 101d101d 101e101d 101e101e     ................
   267a0:	101f101f 1020101f 10201020 10201020     ...... . . . . .
   267b0:	10201020 10201020 10201020 10201020      . . . . . . . .
   267c0:	10201020 10201020 10201020 10001000      . . . . . .....
   267d0:	10001000 10011001 10021001 10021002     ................
   267e0:	10031003 10041003 10051004 10051005     ................
   267f0:	10061006 10071006 10071007 10081008     ................
   26800:	10091009 100a1009 100a100a 100b100b     ................
   26810:	100c100b 100c100c 100d100d 100e100d     ................
   26820:	100e100e 100f100f 1010100f 10101010     ................
   26830:	10111011 10121011 10121012 10131013     ................
   26840:	10141013 10141014 10151015 10151015     ................
   26850:	10161015 10161016 10171016 10171017     ................
   26860:	10181018 10181018 10191019 101a1019     ................
   26870:	101a101a 101b101a 101b101b 101c101c     ................
   26880:	101d101c 101d101d 101e101d 101e101e     ................
   26890:	101f101f 101f101f 10201020 10201020     ........ . . . .
   268a0:	10201020 10201020 10201020 10201020      . . . . . . . .
   268b0:	10201020 10201020 10201020 10001000      . . . . . .....
   268c0:	10001000 10011001 10021001 10021002     ................
   268d0:	10031003 10041003 10051004 10051005     ................
   268e0:	10061006 10071006 10071007 10081008     ................
   268f0:	10091009 100a1009 100a100a 100b100b     ................
   26900:	100c100b 100c100c 100d100c 100d100d     ................
   26910:	100e100e 100f100e 100f100f 10101010     ................
   26920:	10111010 10111011 10121012 10131012     ................
   26930:	10131013 10141014 10151014 10151015     ................
   26940:	10151015 10161016 10171016 10171017     ................
   26950:	10181017 10181018 10191019 10191019     ................
   26960:	101a101a 101b101a 101b101b 101c101c     ................
   26970:	101c101c 101d101d 101e101d 101e101e     ................
   26980:	101f101e 101f101f 10201020 10201020     ........ . . . .
   26990:	10201020 10201020 10201020 10201020      . . . . . . . .
   269a0:	10201020 10201020 10201020 10001000      . . . . . .....
   269b0:	10001000 10011001 10021001 10021002     ................
   269c0:	10031003 10041003 10051004 10051005     ................
   269d0:	10061006 10071006 10071007 10081008     ................
   269e0:	10091008 100a1009 100a100a 100b100a     ................
   269f0:	100b100b 100c100c 100d100c 100d100d     ................
   26a00:	100e100e 100f100e 100f100f 10101010     ................
   26a10:	10111010 10111011 10121012 10131012     ................
   26a20:	10131013 10141014 10151014 10151015     ................
   26a30:	10151015 10161016 10161016 10171017     ................
   26a40:	10181017 10181018 10191019 10191019     ................
   26a50:	101a101a 101b101a 101b101b 101c101b     ................
   26a60:	101c101c 101d101d 101d101d 101e101e     ................
   26a70:	101f101e 101f101f 1020101f 10201020     .......... . . .
   26a80:	10201020 10201020 10201020 10201020      . . . . . . . .
   26a90:	10201020 10201020 10201020 10001000      . . . . . .....
   26aa0:	10001000 10011000 10021001 10021002     ................
   26ab0:	10031003 10041003 10041004 10051005     ................
   26ac0:	10061006 10071006 10071007 10081008     ................
   26ad0:	10091008 100a1009 100a100a 100b100a     ................
   26ae0:	100b100b 100c100c 100d100c 100d100d     ................
   26af0:	100e100e 100f100e 100f100f 10101010     ................
   26b00:	10111010 10111011 10121012 10131012     ................
   26b10:	10131013 10141014 10151014 10151015     ................
   26b20:	10151015 10161015 10161016 10171017     ................
   26b30:	10181017 10181018 10191018 10191019     ................
   26b40:	101a101a 101a101a 101b101b 101c101b     ................
   26b50:	101c101c 101d101c 101d101d 101e101e     ................
   26b60:	101f101e 101f101f 1020101f 10201020     .......... . . .
   26b70:	10201020 10201020 10201020 10201020      . . . . . . . .
   26b80:	10201020 10201020 10201020               . . . . . .

00026b8c <_ZN3app5chip823PHYSICAL_TO_VIRTUAL_MAP17h5b1a7b084f35e873E>:
   26b8c:	00020dcc 06040000 06080005 060c0009     ................
   26b9c:	0610000d 06150011 06190016 061d001a     ................
   26bac:	0621001d 06240021 06280025 062d002a     ..!.!.$.%.(.*.-.
   26bbc:	0631002e 06340031 06380035 063c0038     ..1.1.4.5.8.8.<.
   26bcc:	0640003c 06440040 06470043 064b0047     <.@.@.D.C.G.G.K.
   26bdc:	064f004a 0652004d 06560051 065a0055     J.O.M.R.Q.V.U.Z.
   26bec:	055d0058 0560005c 0563005f 05660063     X.].\.`._.c.c.f.
   26bfc:	056a0066 056d006a 0470006e 04740071     f.j.j.m.n.p.q.t.
   26c0c:	04770074 0c040700 0c080705 0c0c0709     t.w.............
   26c1c:	0c10070d 0c150711 0c190716 0c1c0719     ................
   26c2c:	0c20071d 0c240721 0c280725 0c2d072a     .. .!.$.%.(.*.-.
   26c3c:	0c30072d 0c340731 0c380735 0b3b0738     -.0.1.4.5.8.8.;.
   26c4c:	0b40073c 0b430740 0b470744 0b4b0748     <.@.@.C.D.G.H.K.
   26c5c:	0b4e074b 0b52074f 0b560752 0b590657     K.N.O.R.R.V.W.Y.
   26c6c:	0b5c065a 0a60065d 0a630660 0a660663     Z.\.].`.`.c.c.f.
   26c7c:	0a6a0667 096d056b 0970056e 09730571     g.j.k.m.n.p.q.s.
   26c8c:	09770574 13040d00 12080d05 120c0d09     t.w.............
   26c9c:	12100d0d 12150d11 12180d15 121c0d19     ................
   26cac:	12200d1d 12240d21 12280d25 122c0d28     .. .!.$.%.(.(.,.
   26cbc:	12300d2d 12340d31 12370c34 113b0c38     -.0.1.4.4.7.8.;.
   26ccc:	113f0c3c 11430c40 11470c44 114a0c47     <.?.@.C.D.G.G.J.
   26cdc:	114e0c4b 11510c4e 10560c52 10590c56     K.N.N.Q.R.V.V.Y.
   26cec:	105c0b5a 0f5f0b5d 0f620b60 0f660b63     Z.\.]._.`.b.c.f.
   26cfc:	0f6a0a66 0e6d0a6b 0e700a6e 0e730a71     f.j.k.m.n.p.q.s.
   26d0c:	0d760a74 1a041500 1a081305 1a0c1309     t.v.............
   26d1c:	1a10130d 1a131310 1a181315 1a1c1319     ................
   26d2c:	1920131d 19231320 19271324 192c1328     .. . .#.$.'.(.,.
   26d3c:	1930132d 19331330 19371234 183a1238     -.0.0.3.4.7.8.:.
   26d4c:	183f123b 18431240 18461243 174a1247     ;.?.@.C.C.F.G.J.
   26d5c:	174d124b 1751114e 17551152 17591156     K.M.N.Q.R.U.V.Y.
   26d6c:	165c1159 165f105c 15621060 15651063     Y.\.\._.`.b.c.e.
   26d7c:	156a0f66 136d0f6a 13700f6d 12730f71     f.j.j.m.m.p.q.s.
   26d8c:	12760e74 20041b00 20081b05 200c1b09     t.v.... ... ... 
   26d9c:	200f1b0d 20131b10 20181b15 201c1a19     ... ... ... ... 
   26dac:	201f1a1c 20231a20 20271a24 1f2c1a28     ...  .# $.' (.,.
   26dbc:	1f2f1a2c 1f331a30 1f361933 1e3a1937     ,./.0.3.3.6.7.:.
   26dcc:	1e3f193b 1e42193f 1e461943 1d491846     ;.?.?.B.C.F.F.I.
   26ddc:	1d4d184a 1d51184e 1c551851 1c581756     J.M.N.Q.Q.U.V.X.
   26dec:	1b5b1759 1b5f165c 1a62165f 1a651662     Y.[.\._._.b.b.e.
   26dfc:	1a691565 196c156a 1970156d 18731370     e.i.j.l.m.p.p.s.
   26e0c:	18761374 26042100 26082105 260c2109     t.v..!.&.!.&.!.&
   26e1c:	260f210c 26132110 26182115 261b2118     .!.&.!.&.!.&.!.&
   26e2c:	261f211c 26232120 26272023 252b2027     .!.& !#&# '&' +%
   26e3c:	252f202c 2532202f 25362033 25391f36     , /%/ 2%3 6%6.9%
   26e4c:	243d1f3a 24421f3d 24451e42 23491e46     :.=$=.B$B.E$F.I#
   26e5c:	234d1e49 23501d4d 22551d51 21581c55     I.M#M.P#Q.U"U.X!
   26e6c:	215b1c58 205e1c5b 20611b5e 1f641b61     X.[![.^ ^.a a.d.
   26e7c:	1f671a64 1e6c1a69 1e6f196c 1d72196f     d.g.i.l.l.o.o.r.
   26e8c:	1d761973 2e042700 2d082705 2d0b2709     s.v..'...'.-.'.-
   26e9c:	2d0f270c 2d132710 2d172713 2d1b2718     .'.-.'.-.'.-.'.-
   26eac:	2d1f271b 2d22271f 2c262623 2c2b2626     .'.-.'"-#&&,&&+,
   26ebc:	2c2e262b 2c32262e 2c352632 2c392535     +&.,.&2,2&5,5%9,
   26ecc:	2c3c2539 2b41253d 2b442541 2b482445     9%<,=%A+A%D+E$H+
   26edc:	2b4c2448 2a4f244c 2a52234f 28572252     H$L+L$O*O#R*R"W(
   26eec:	275a2157 265d215a 2560205d 24632060     W!Z'Z!]&] `%` c$
   26efc:	24671f63 236b1f67 236e1e6b 22711e6e     c.g$g.k#k.n#n.q"
   26f0c:	22751d71 34042f00 34082e05 330b2e08     q.u"./.4...4...3
   26f1c:	330f2e0c 33122e0f 33172e13 331a2e17     ...3...3...3...3
   26f2c:	331e2e1b 33222d1e 32252d22 322a2d26     ...3.-"3"-%2&-*2
   26f3c:	322d2d2a 32312d2e 32342d31 32382d35     *--2.-121-425-82
   26f4c:	323b2c38 32402c3b 31432c40 31472c44     8,;2;,@2@,C1D,G1
   26f5c:	314b2b47 314e2b4a 30512a4e 2f552851     G+K1J+N1N*Q0Q(U/
   26f6c:	2e592755 2d5c2659 2c5f255c 2b62255f     U'Y.Y&\-\%_,_%b+
   26f7c:	2a652462 28692465 286d2369 2770236c     b$e*e$i(i#m(l#p'
   26f8c:	27732270 3a043500 3a073505 3a0b3408     p"s'.5.:.5.:.4.:
   26f9c:	390e340c 3912340f 39163413 391a3417     .4.9.4.9.4.9.4.9
   26fac:	391d341a 3821331e 38243321 38283325     .4.9.3!8!3$8%3(8
   26fbc:	382c3328 3830332d 38333330 38373334     (3,8-30803384378
   26fcc:	383a3337 383f323b 3842323f 38463243     73:8;2?8?2B8C2F8
   26fdc:	37493246 374d314a 3650304d 36543050     F2I7J1M7M0P6P0T6
   26fec:	34572e54 335a2d57 325e2c5a 31612b5d     T.W4W-Z3Z,^2]+a1
   26ffc:	30642a60 2f672a64 2e6b2867 2d6e286b     `*d0d*g/g(k.k(n-
   2700c:	2c72276e 41043b00 41073b05 410b3a08     n'r,.;.A.;.A.:.A
   2701c:	400e3a0b 40113a0f 40163a12 40193a16     .:.@.:.@.:.@.:.@
   2702c:	401d3a1a 3f20391d 3f243921 3f273924     .:.@.9 ?!9$?$9'?
   2703c:	3f2c3928 3f2f392c 3f32392f 3f363933     (9,?,9/?/92?396?
   2704c:	3f393936 3d3d393a 3d41393d 3f453842     699?:9===9A=B8E?
   2705c:	3f483845 3f4c3848 3d4f374c 3c52364f     E8H?H8L?L7O=O6R<
   2706c:	3b563552 39593356 385c3259 375f315c     R5V;V3Y9Y2\8\1_7
   2707c:	3562305f 34662f62 336a2e65 326d2e6a     _0b5b/f4e.j3j.m2
   2708c:	31702d6d 47044200 47074205 470a4208     m-p1.B.G.B.G.B.G
   2709c:	460e410b 4611410e 46154112 46194116     .A.F.A.F.A.F.A.F
   270ac:	451c4019 4520401d 45234020 45264023     .@.E.@ E @#E#@&E
   270bc:	442b4027 442e402b 4431402e 44354031     '@+D+@.D.@1D1@5D
   270cc:	44383f35 443c3f38 44403f3b 44443f40     5?8D8?<D;?@D@?DD
   270dc:	44474044 444b3f47 444e3f4b 43513c4e     D@GDG?KDK?NDN<QC
   270ec:	41553b51 40583955 3f5b3857 3c5e375b     Q;UAU9X@W8[?[7^<
   270fc:	3b61365e 3a643561 39673464 386b3367     ^6a;a5d:d4g9g3k8
   2710c:	376f326b 4c044800 4c074804 4c0a4708     k2o7.H.L.H.L.G.L
   2711c:	4c0d470b 4b11470e 4b154711 4b184615     .G.L.G.K.G.K.F.K
   2712c:	4b1b4618 4b1f461c 4a22461f 4a254622     .F.K.F.K.F"J"F%J
   2713c:	4a2a4525 492d452a 4930452d 49334530     %E*J*E-I-E0I0E3I
   2714c:	49374533 493a4536 493f453a 4942453d     3E7I6E:I:E?I=EBI
   2715c:	49464542 49494545 484c4549 484f444c     BEFIEEIIIELHLDOH
   2716c:	4752424f 45564052 44593f56 435c3d59     OBRGR@VEV?YDY=\C
   2717c:	415f3b5c 40623a5f 3f653962 3d6a3865     \;_A_:b@b9e?e8j=
   2718c:	3c6d3769 52034d00 51074d04 510a4d07     i7m<.M.R.M.Q.M.Q
   2719c:	510d4d0a 51104c0d 51134c10 50174c15     .M.Q.L.Q.L.Q.L.P
   271ac:	501a4c18 501e4b1b 50214b1e 4f244b21     .L.P.K.P.K!P!K$O
   271bc:	4f274b24 4f2c4a27 4e2f4a2b 4e324a2e     $K'O'J,O+J/N.J2N
   271cc:	4e354a32 4e384a35 4d3c4a38 4d404a3c     2J5N5J8N8J<M<J@M
   271dc:	4d444a40 4d474a43 4d4a4946 4c4d484a     @JDMCJGMFIJMJHML
   271ec:	4b50474d 4a554550 49574554 485a4357     MGPKPEUJTEWIWCZH
   271fc:	465e415a 4560415d 44633f60 43673d63     ZA^F]A`E`?cDc=gC
   2720c:	416b3c66 58035200 58065204 57095207     f<kA.R.X.R.X.R.W
   2721c:	570c520a 570f520d 57125210 57175113     .R.W.R.W.R.W.Q.W
   2722c:	571a5117 561d511a 5620511d 56235020     .Q.W.Q.V.Q V P#V
   2723c:	56265023 552a4f26 552d4f2a 54304f2d     #P&V&O*U*O-U-O0T
   2724c:	54334f30 54374e33 523a4e36 523d4e3a     0O3T3N7T6N:R:N=R
   2725c:	52424e3d 52454e41 51484d44 514b4d47     =NBRANERDMHQGMKQ
   2726c:	4f4e4c4b 4e514b4e 4d554951 4c584855     KLNONKQNQIUMUHXL
   2727c:	4b5b4758 4a5f455b 4961445e 47644361     XG[K[E_J^DaIaCdG
   2728c:	46674264 5d035900 5d065904 5d095807     dBgF.Y.].Y.].X.]
   2729c:	5d0c580a 5c0f580d 5c125810 5c165812     .X.].X.\.X.\.X.\
   272ac:	5c195716 5c1c5719 5c1f571c 5b22571f     .W.\.W.\.W.\.W"[
   272bc:	5b255622 5a285625 5a2c5528 5a2f552c     "V%[%V(Z(U,Z,U/Z
   272cc:	5932552f 59355432 58385435 583b5438     /U2Y2T5Y5T8X8T;X
   272dc:	573f543b 5743523f 57465242 56495146     ;T?W?RCWBRFWFQIV
   272ec:	554c5049 544f4f4c 52544d4f 51564d52     IPLULOOTOMTRRMVQ
   272fc:	4f594c56 4e5c4a59 4d5f495c 4c62485f     VLYOYJ\N\I_M_HbL
   2730c:	4b664662 62035e00 62065e04 62095e07     bFfK.^.b.^.b.^.b
   2731c:	620c5d0a 620e5d0d 62115d0f 61155d12     .].b.].b.].b.].a
   2732c:	61185d16 611b5d19 611e5c1b 61215c1e     .].a.].a.\.a.\!a
   2733c:	60245c21 60275b24 5f2b5b27 5f2e5a2b     !\$`$['`'[+_+Z._
   2734c:	5e305a2e 5e345931 5e375933 5d395937     .Z0^1Y4^3Y7^7Y9]
   2735c:	5d3d5839 5c41583c 5c445740 5b475743     9X=]<XA\@WD\CWG[
   2736c:	5a4a5546 594d5449 5750524d 56545150     FUJZITMYMRPWPQTV
   2737c:	55575054 545a4f57 525e4d5a 51604d5d     TPWUWOZTZM^R]M`Q
   2738c:	4f634b60                                `KcO

00027390 <_ZN3app5chip823VIRTUAL_TO_PHYSICAL_MAP17h0c964d4301637332E>:
   27390:	00026b90 74737552 756f7420 73206863     .k..Rust touch s
   273a0:	6f736e65 00000a72 00000000 000273a8     ensor........s..
   273b0:	65737361 6f697472 6166206e 64656c69     assertion failed
   273c0:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   273d0:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   273e0:	67697220 203a7468 203a6060 000273b0      right: ``: .s..
   273f0:	0000002d 000273dd 0000000c 000273e9     -....s.......s..
   27400:	00000003 000273ec 20515249 74696e69     .....s..IRQ init
   27410:	69616620 0000006c 00027408 0000000d      fail....t......
   27420:	00027418 00027424 74737572 7070612f     .t..$t..rust/app
   27430:	6372732f 756f742f 735f6863 6f736e65     /src/touch_senso
   27440:	73722e72 00027428 0000001c 0000003f     r.rs(t......?...
   27450:	00000005 20633269 72646461 00027428     ....i2c addr(t..
   27460:	0000001c 0000004b 00000011 63756f74     ....K.......touc
   27470:	74616468 61662061 00006c69 00027428     hdata fail..(t..
   27480:	0000001c 00000056 00000009 00027428     ....V.......(t..
   27490:	0000001c 0000005a 00000031 64616572     ....Z...1...read
   274a0:	756f7420 61646863 66206174 006c6961      touchdata fail.
   274b0:	00027428 0000001c 00000089 00000005     (t..............
   274c0:	00027428 0000001c 00000095 00000037     (t..........7...

000274d0 <str.0>:
   274d0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   274e0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   274f0:	00000077 00027428 0000001c 00000095     w...(t..........
   27500:	00000024 00000000 00000000 00000000     $...............

00027510 <str.1>:
   27510:	65747461 2074706d 61206f74 77206464     attempt to add w
   27520:	20687469 7265766f 776f6c66 00027428     ith overflow(t..
   27530:	0000001c 00000095 00000020 00027428     ........ ...(t..
   27540:	0000001c 00000099 00000009 00027428     ............(t..
   27550:	0000001c 0000009a 00000037 00027428     ........7...(t..
   27560:	0000001c 0000009a 00000023 00027428     ........#...(t..
   27570:	0000001c 0000009a 0000001f 00027428     ............(t..
   27580:	0000001c 0000009b 00000037 00027428     ........7...(t..
   27590:	0000001c 0000009b 00000023 00027428     ........#...(t..
   275a0:	0000001c 0000009b 0000001f 00027428     ............(t..
   275b0:	0000001c 0000009c 00000009 00027428     ............(t..
   275c0:	0000001c 0000009e 00000037 00027428     ........7...(t..
   275d0:	0000001c 0000009e 00000023 00027428     ........#...(t..
   275e0:	0000001c 0000009e 0000001f 00027428     ............(t..
   275f0:	0000001c 0000009f 00000037 00027428     ........7...(t..
   27600:	0000001c 0000009f 00000023 00027428     ........#...(t..
   27610:	0000001c 0000009f 0000001f 00027428     ............(t..
   27620:	0000001c 000000a0 00000009 00027428     ............(t..
   27630:	0000001c 000000a4 00000030 00027428     ........0...(t..
   27640:	0000001c 000000a4 0000001a 00027428     ............(t..
   27650:	0000001c 000000a4 00000016 00027428     ............(t..
   27660:	0000001c 000000a3 00000009 00027428     ............(t..
   27670:	0000001c 000000a6 00000030 00027428     ........0...(t..
   27680:	0000001c 000000a6 0000001a 00027428     ............(t..
   27690:	0000001c 000000a6 00000016 00027428     ............(t..
   276a0:	0000001c 000000a5 00000009 00027428     ............(t..
   276b0:	0000001c 000000aa 0000002d 00027428     ........-...(t..
   276c0:	0000001c 000000aa 0000001a 00027428     ............(t..
   276d0:	0000001c 000000aa 00000016 00027428     ............(t..
   276e0:	0000001c 000000a9 00000009 00027428     ............(t..
   276f0:	0000001c 000000ac 0000002d 00027428     ........-...(t..
   27700:	0000001c 000000ac 0000001a 00027428     ............(t..
   27710:	0000001c 000000ac 00000016 00027428     ............(t..
   27720:	0000001c 000000ab 00000009 00027428     ............(t..
   27730:	0000001c 000000af 0000000d 00027428     ............(t..
   27740:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   27750:	00667562 00027428 0000001c 000000f1     buf.(t..........
   27760:	00000005 00027428 0000001c 000000f2     ....(t..........
   27770:	0000000d 00027428 0000001c 000000f2     ....(t..........
   27780:	00000005 20633269 6c696166 73552f0a     ....i2c fail./Us
   27790:	2f737265 7070754c 632e2f79 6f677261     ers/Luppy/.cargo
   277a0:	6765722f 72747369 72732f79 69672f63     /registry/src/gi
   277b0:	62756874 6d6f632e 6365312d 39323663     thub.com-1ecc629
   277c0:	39626439 32386365 6d652f33 64646562     9db9ec823/embedd
   277d0:	672d6465 68706172 2d736369 2e352e30     ed-graphics-0.5.
   277e0:	72732f32 6f632f63 2e64726f 6e557372     2/src/coord.rsUn
   277f0:	63616572 6c626168 6e692065 20786564     reachable index 
   27800:	000277ee 00000012 00027800 0002778d     .w.......x...w..
   27810:	00000061 00000070 00000016              a...p.......

0002781c <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   2781c:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   2782c:	f010f010 10f09090 f080f010 80f0f010     ................
   2783c:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   2784c:	90f0f010 e09090f0 e090e090 808080f0     ................
   2785c:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   2786c:	72656874 73692065 206f6e20 68637573     there is no such
   2787c:	69687420 6120676e 6e612073 71636120      thing as an acq
   2788c:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   2789c:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   278ac:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   278bc:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   278cc:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   278dc:	2f736f72 2e646f6d 00007372 0002789d     ros/mod.rs...x..
   278ec:	00000049 0000000a 00000009 72656874     I...........ther
   278fc:	73692065 206f6e20 68637573 69687420     e is no such thi
   2790c:	6120676e 20612073 656c6572 20657361     ng as a release 
   2791c:	64616f6c 00012c55 00000000 00000001     loadU,..........
   2792c:	00013015 00013021 0001302b 00027920     .0..!0..+0.. y..
   2793c:	00012c55 00000000 00000001 00013015     U,...........0..
   2794c:	00013021 0001302b                       !0..+0..

00027954 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   27954:	00697073 000273a8 65737361 6f697472     spi..s..assertio
   27964:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   27974:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   27984:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   27994:	203a6060 0002795c 0000002d 00027989     ``: \y..-....y..
   279a4:	0000000c 00027995 00000003 00027998     .....y.......y..
   279b4:	20697073 666e6f63 66206769 006c6961     spi config fail.
   279c4:	000279b4 0000000f 000279c4 000279d0     .y.......y...y..
   279d4:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   279e4:	2e697073 00007372 000279d4 00000016     spi.rs...y......
   279f4:	00000050 0000004a 20697073 66206263     P...J...spi cb f
   27a04:	006c6961 000279fc 0000000b 00027a08     ail..y.......z..
   27a14:	000279d4 00000016 00000057 00000005     .y......W.......
   27a24:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   27a34:	00027a24 0000000f 00027a34 000279d4     $z......4z...y..
   27a44:	00000016 0000005a 00000037 6f697067     ....Z...7...gpio
   27a54:	69616620 0000006c 00027a50 00000009      fail...Pz......
   27a64:	00027a5c 000279d4 00000016 0000005b     \z...y......[...
   27a74:	00000040 000279d4 00000016 0000005c     @....y......\...
   27a84:	00000040 6575716d 66206575 006c6961     @...mqueue fail.
   27a94:	00027a88 0000000b 00027a94 000279d4     .z.......z...y..
   27aa4:	00000016 00000065 00000005 206d6573     ....e.......sem 
   27ab4:	6c696166 20697073 6c696166 00027ab0     failspi fail.z..
   27ac4:	00000008 00027ac0 000279d4 00000016     .....z...y......
   27ad4:	00000069 00000005 000279d4 00000016     i........y......
   27ae4:	0000006d 00000005 00000000 00027954     m...........Ty..
   27af4:	00000004 00027aec 6e657665 66207174     .....z..eventq f
   27b04:	006c6961 000279d4 00000016 00000081     ail..y..........
   27b14:	00000009 63206f6e 6220646d 00657479     ....no cmd byte.
   27b24:	000279d4 00000016 00000097 00000005     .y..............
   27b34:	000279d4 00000016 00000099 00000016     .y..............
	...

00027b50 <str.0>:
   27b50:	65747461 2074706d 61206f74 77206464     attempt to add w
   27b60:	20687469 7265766f 776f6c66 20697073     ith overflowspi 
   27b70:	7265766f 776f6c66 000279d4 00000016     overflow.y......
   27b80:	00000099 00000005 000279d4 00000016     .........y......
   27b90:	000000a8 00000012 000279d4 00000016     .........y......
   27ba0:	000000c1 00000035 00000000 00000000     ....5...........

00027bb0 <str.1>:
   27bb0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   27bc0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   27bd0:	00000077 000279d4 00000016 000000c4     w....y..........
   27be0:	0000000f 20746e69 20697073 6c696166     ....int spi fail
   27bf0:	000279d4 00000016 00000101 00000011     .y..............
   27c00:	000279d4 00000016 00000111 00000015     .y..............

00027c10 <str.2>:
   27c10:	65747461 2074706d 73206f74 72746275     attempt to subtr
   27c20:	20746361 68746977 65766f20 6f6c6672     act with overflo
   27c30:	00000077 000279d4 00000016 0000010f     w....y..........
   27c40:	00000011 000279d4 00000016 00000117     .....y..........
   27c50:	00000011 000279d4 00000016 00000124     .....y......$...
   27c60:	00000009 20646162 20697073 006e656c     ....bad spi len.
   27c70:	000279d4 00000016 0000012b 00000005     .y......+.......
   27c80:	00027ab8 00000008 00027c80 000279d4     .z.......|...y..
   27c90:	00000016 00000141 00000009 000279d4     ....A........y..
   27ca0:	00000016 0000014a 00000009 000279d4     ....J........y..
   27cb0:	00000016 0000014e 00000030 000279d4     ....N...0....y..
   27cc0:	00000016 0000015a 00000005 000279d4     ....Z........y..
   27cd0:	00000016 0000015f 00000017 000273a8     ...._........s..
   27ce0:	65737361 6f697472 6166206e 64656c69     assertion failed
   27cf0:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   27d00:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   27d10:	67697220 203a7468 203a6060 00027ce0      right: ``: .|..
   27d20:	0000002d 00027d0d 0000000c 00027d19     -....}.......}..
   27d30:	00000003 00027d1c 20697073 666e6f63     .....}..spi conf
   27d40:	66206769 006c6961 00027d38 0000000f     ig fail.8}......
   27d50:	00027d48 00027d54 74737572 6e796d2f     H}..T}..rust/myn
   27d60:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   27d70:	00027d58 00000016 00000016 00000009     X}..............
   27d80:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   27d90:	00027d80 0000000f 00027d90 00027d58     .}.......}..X}..
   27da0:	00000016 00000019 00000009 20697073     ............spi 
   27db0:	74696e69 69616620 0000006c 00027dac     init fail....}..
   27dc0:	0000000d 00027dbc 00027d58 00000016     .....}..X}......
   27dd0:	0000001c 00000009 6f697067 69616620     ........gpio fai
   27de0:	0000006c 00027dd8 00000009 00027de4     l....}.......}..
   27df0:	00027d58 00000016 00000045 00000009     X}......E.......
   27e00:	00027d58 00000016 0000006c 0000001b     X}......l.......

00027e10 <str.0>:
   27e10:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   27e20:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   27e30:	6c616377 2064656c 74704f60 3a6e6f69     wcalled `Option:
   27e40:	776e753a 28706172 6f206029 2061206e     :unwrap()` on a 
   27e50:	6e6f4e60 76206065 65756c61 6573552f     `None` value/Use
   27e60:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   27e70:	69676572 79727473 6372732f 7469672f     registry/src/git
   27e80:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   27e90:	65396264 33323863 6165682f 73656c70     db9ec823/heaples
   27ea0:	2e302d73 2f312e35 2f637273 2e636576     s-0.5.1/src/vec.
   27eb0:	00007372 00027e5c 00000056 000001e8     rs..\~..V.......
   27ec0:	0000000d 00000000 00000000 00000000     ................

00027ed0 <str.0>:
   27ed0:	65747461 2074706d 61206f74 77206464     attempt to add w
   27ee0:	20687469 7265766f 776f6c66 552f2928     ith overflow()/U
   27ef0:	73726573 70754c2f 2e2f7970 67726163     sers/Luppy/.carg
   27f00:	65722f6f 74736967 732f7972 672f6372     o/registry/src/g
   27f10:	75687469 6f632e62 65312d6d 32366363     ithub.com-1ecc62
   27f20:	62643939 38636539 682f3332 6c706165     99db9ec823/heapl
   27f30:	2d737365 2e352e30 72732f31 65762f63     ess-0.5.1/src/ve
   27f40:	73722e63 00000000 00000000 00000000     c.rs............

00027f50 <str.0>:
   27f50:	65747461 2074706d 73206f74 72746275     attempt to subtr
   27f60:	20746361 68746977 65766f20 6f6c6672     act with overflo
   27f70:	00000077 00027eee 00000056 00000066     w....~..V...f...
   27f80:	00000009 00000000 00000000 00000000     ................

00027f90 <str.1>:
   27f90:	65747461 2074706d 61206f74 77206464     attempt to add w
   27fa0:	20687469 7265766f 776f6c66 00027eee     ith overflow.~..
   27fb0:	00000056 0000003e 0000000c 00027eee     V...>........~..
   27fc0:	00000056 0000002d 00000009 00027eee     V...-........~..
   27fd0:	00000056 0000007e 00000011 0000a8c9     V...~...........
   27fe0:	00000000 00000001 0001588b 0000a80d     .........X......
   27ff0:	00000002 00000002 0001823f 6c6c6163     ........?...call
   28000:	60206465 75736552 3a3a746c 72776e75     ed `Result::unwr
   28010:	29287061 6e6f2060 206e6120 72724560     ap()` on an `Err
   28020:	61762060 6465756c 20776172 636f6c62     ` valuedraw bloc
   28030:	6620736b 726c6961 2f747375 74656970     ks failrust/piet
   28040:	626d652d 65646465 69702f64 652d7465     -embedded/piet-e
   28050:	6465626d 2d646564 70617267 73636968     mbedded-graphics
   28060:	6372732f 7369642f 79616c70 0073722e     /src/display.rs.
   28070:	00028037 00000038 00000080 00000005     7...8...........
   28080:	6576656e 73757272 69702f74 652d7465     neverrust/piet-e
   28090:	6465626d 2f646564 74656970 626d652d     mbedded/piet-emb
   280a0:	65646465 72672d64 69687061 732f7363     edded-graphics/s
   280b0:	622f6372 68637461 0073722e 00028085     rc/batch.rs.....
   280c0:	00000036 000000be 00000019 00028085     6...............
   280d0:	00000036 000000c3 0000001d 00000000     6...............

000280e0 <str.0>:
   280e0:	65747461 2074706d 61206f74 77206464     attempt to add w
   280f0:	20687469 7265766f 776f6c66 00028085     ith overflow....
   28100:	00000036 000000d5 00000015 00028085     6...............
   28110:	00000036 00000104 00000019 00028085     6...............
   28120:	00000036 00000109 0000001d 00028085     6...............
   28130:	00000036 0000011d 00000015 6573552f     6.........../Use
   28140:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   28150:	69676572 79727473 6372732f 7469672f     registry/src/git
   28160:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   28170:	65396264 33323863 626d652f 65646465     db9ec823/embedde
   28180:	72672d64 69687061 302d7363 322e352e     d-graphics-0.5.2
   28190:	6372732f 6972702f 6974696d 2f736576     /src/primitives/
   281a0:	74636572 6c676e61 73722e65 0002813c     rectangle.rs<...
   281b0:	00000070 000000c0 00000032 00000000     p.......2.......

000281c0 <str.0>:
   281c0:	65747461 2074706d 61206f74 77206464     attempt to add w
   281d0:	20687469 7265766f 776f6c66 0002813c     ith overflow<...
   281e0:	00000070 000000c2 00000031 00000000     p.......1.......

000281f0 <str.1>:
   281f0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   28200:	20746361 68746977 65766f20 6f6c6672     act with overflo
   28210:	00000077 0002813c 00000070 000000c4     w...<...p.......
   28220:	00000031 0002813c 00000070 000000c6     1...<...p.......
   28230:	00000031 65707845 64657463 72747320     1...Expected str
   28240:	00656b6f 0002813c 00000070 000000cc     oke.<...p.......
   28250:	00000019 0002813c 00000070 000000d5     ....<...p.......
   28260:	0000000d 0002813c 00000070 000000da     ....<...p.......
   28270:	00000011 20697073 73756c66 61662068     ....spi flush fa
   28280:	552f6c69 73726573 70754c2f 502f7970     il/Users/Luppy/P
   28290:	54656e69 2f656d69 656e6970 656d6974     ineTime/pinetime
   282a0:	7375722d 796d2d74 7477656e 7375722f     -rust-mynewt/rus
   282b0:	74732f74 35333737 64636c2d 7461622d     t/st7735-lcd-bat
   282c0:	722d6863 72732f73 696c2f63 73722e62     ch-rs/src/lib.rs
   282d0:	00028282 0000004e 000000fe 00000009     ....N...........
   282e0:	00028282 0000004e 000000f3 00000009     ....N...........
   282f0:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   28300:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   28310:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   28320:	39393236 65396264 33323863 6165682f     6299db9ec823/hea
   28330:	73656c70 2e302d73 2f312e35 2f637273     pless-0.5.1/src/
   28340:	2e636576 00007372 000282f0 00000056     vec.rs......V...
   28350:	00000066 00000009 00000000 00000000     f...............

00028360 <str.0>:
   28360:	65747461 2074706d 61206f74 77206464     attempt to add w
   28370:	20687469 7265766f 776f6c66 000282f0     ith overflow....
   28380:	00000056 0000003e 0000000c 000282f0     V...>...........
   28390:	00000056 0000007e 00000011 00000000     V...~...........

000283a0 <str.1>:
   283a0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   283b0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   283c0:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   283d0:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   283e0:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   283f0:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   28400:	20736920 00000000 00000020 00000008      is .... .......
   28410:	00000002 00000000 00000000 00000002     ................
   28420:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   28430:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   28440:	73722e65 00000000 00000020 00000004     e.rs.... .......
   28450:	00000002 00000000 00000002 00000000     ................
   28460:	00000003 00000000 00000020 00000008     ........ .......
   28470:	00000002 00000000 00000001 00000001     ................
   28480:	00000003 002e2e60 00028485 00000002     ....`...........
   28490:	65726c61 20796461 72726f62 6465776f     already borrowed
   284a0:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   284b0:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   284c0:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

000284d0 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   284d0:	00010201 00000000 00000000 00000000     ................
   284e0:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   284f0:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   28500:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   28510:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   28520:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   28530:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   28540:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   28550:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   28560:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   28570:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   28580:	656e6f4e 61762060 0065756c 000283c4     None` value.....
   28590:	00000000 0000203a 000283c4 00000000     ....: ..........
   285a0:	00028594 00000002 00018493 00000000     ................
   285b0:	00000001 000184e3 74756220 65687420     ........ but the
   285c0:	646e6920 69207865 00002073 000283e4      index is ......
   285d0:	00000020 000285b8 00000012 00018493      ...............
   285e0:	0000000c 00000004 0001872b 00018a81     ........+.......
   285f0:	00018b31 202c0a2c 2c280a28 30783029     1...,., (.(,)0x0
   28600:	30313030 30333032 30353034 30373036     0010203040506070
   28610:	31393038 31313130 31333132 31353134     8091011121314151
   28620:	31373136 32393138 32313230 32333232     6171819202122232
   28630:	32353234 32373236 33393238 33313330     4252627282930313
   28640:	33333332 33353334 33373336 34393338     2333435363738394
   28650:	34313430 34333432 34353434 34373436     0414243444546474
   28660:	35393438 35313530 35333532 35353534     8495051525354555
   28670:	35373536 36393538 36313630 36333632     6575859606162636
   28680:	36353634 36373636 37393638 37313730     4656667686970717
   28690:	37333732 37353734 37373736 38393738     2737475767778798
   286a0:	38313830 38333832 38353834 38373836     0818283848586878
   286b0:	39393838 39313930 39333932 39353934     8899091929394959
   286c0:	39373936 00393938 00018493 00000004     6979899.........
   286d0:	00000004 00018b55 00018b5b 00018b61     ....U...[...a...
   286e0:	2f637273 6362696c 2f65726f 2f746d66     src/libcore/fmt/
   286f0:	2e646f6d 00007372 000286e0 00000016     mod.rs..........
   28700:	0000043b 00000011 000286e0 00000016     ;...............
   28710:	00000445 00000024 2f637273 6362696c     E...$...src/libc
   28720:	2f65726f 63696c73 6f6d2f65 73722e64     ore/slice/mod.rs
   28730:	65646e69 6f202078 6f207475 61722066     index  out of ra
   28740:	2065676e 20726f66 63696c73 666f2065     nge for slice of
   28750:	6e656c20 20687467 00028730 00000006      length 0.......
   28760:	00028736 00000022 00028718 00000018     6..."...........
   28770:	00000a72 00000005 63696c73 6e692065     r.......slice in
   28780:	20786564 72617473 61207374 62202074     dex starts at  b
   28790:	65207475 2073646e 00207461 00028778     ut ends at .x...
   287a0:	00000016 0002878e 0000000d 00028718     ................
   287b0:	00000018 00000a78 00000005 696e6966     ....x.......fini
   287c0:	64656873 73796168 6b636174 79622820     shedhaystack (by
   287d0:	20736574 6167654e 65766974 69736f50     tes NegativePosi
   287e0:	65766974 65746e69 6c617267 61706e55     tiveintegralUnpa
   287f0:	64656b63 69666e49 6574696e 756e694d     ckedInfiniteMinu
   28800:	77615273 7265764f 776f6c66 6b636162     sRawOverflowback
   28810:	72657469 6f746e49 72657449 61636f6c     iterIntoIterloca
   28820:	6e6f6974 61636f4c 6e6f6974 72616573     tionLocationsear
   28830:	72656863 69736f70 6e6f6974 74697263     cherpositioncrit
   28840:	736f705f 656e694c 796e4173 57776152     _posLinesAnyRawW
   28850:	72656b61 6f6c6c41 72724563 38746e69     akerAllocErrint8
   28860:	745f3478 2f637273 6362696c 2f65726f     x4_tsrc/libcore/
   28870:	2f727473 2e646f6d 2e5b7372 625d2e2e     str/mod.rs[...]b
   28880:	20657479 65646e69 69202078 756f2073     yte index  is ou
   28890:	666f2074 756f6220 2073646e 6020666f     t of bounds of `
   288a0:	0002887f 0000000b 0002888a 00000016     ................
   288b0:	00028484 00000001 00028864 00000016     ........d.......
   288c0:	00000853 00000009 69676562 3d3c206e     S.......begin <=
   288d0:	646e6520 00002820 000288c8 0000000e      end (..........
   288e0:	000284f4 00000004 000284a0 00000010     ................
   288f0:	00028484 00000001 00028864 00000016     ........d.......
   28900:	00000857 00000005 00028864 00000016     W.......d.......
   28910:	00000868 0000000e 20736920 20746f6e     h....... is not 
   28920:	68632061 62207261 646e756f 3b797261     a char boundary;
   28930:	20746920 69207369 6469736e 20292065      it is inside ) 
   28940:	6020666f 0002887f 0000000b 00028918     of `............
   28950:	00000026 000287cc 00000008 0002893e     &...........>...
   28960:	00000006 00028484 00000001 00028864     ............d...
   28970:	00000016 0000086a 00000005 00028424     ....j.......$...
   28980:	00000020 0000001a 00000028 05030100      .......(.......
   28990:	03060605 08080607 1c0a1109 140c190b     ................
   289a0:	0d0e120d 0310040f 09131212 05170116     ................
   289b0:	03190218 021c071a 161f011d 042b0320     ............ .+.
   289c0:	0b2d022c 0330012e 01320231 02a902a7     ,.-...0.1.2.....
   289d0:	08ab04aa 05fb02fa 03fe04fd 78ad09ff     ...............x
   289e0:	a28d8b79 8b585730 1d1c908c 4b0f0edd     y...0WX........K
   289f0:	2efcfb4c 5d5c3f2f 84e2b55f 92918e8d     L.../?\]_.......
   28a00:	bbbab1a9 cac9c6c5 ffe5e4de 12110400     ................
   28a10:	37343129 493d3b3a 8e845d4a b4b1a992     )147:;=IJ]......
   28a20:	cac6bbba e5e4cfce 0e0d0400 31291211     ..............)1
   28a30:	453b3a34 5e4a4946 91846564 cec99d9b     4:;EFIJ^de......
   28a40:	29110dcf 64574945 a9918d65 c5bbbab4     ...)EIWde.......
   28a50:	e5e4dfc9 110d04f0 65644945 b2848180     ........EIde....
   28a60:	d5bfbebc 83f1f0d7 a6a48b85 c7c5bfbe     ................
   28a70:	dbdacfce cdbd9848 49cfcec6 59574f4e     ....H......INOWY
   28a80:	8e895f5e b7b6b18f c7c6c1bf 171611d7     ^_..............
   28a90:	f7f65c5b 0d80fffe dfde716d 6e1f0f0e     [\......mq.....n
   28aa0:	5f1d1c6f afae7e7d 16fabcbb 461f1e17     o.._}~.........F
   28ab0:	584f4e47 7e5e5c5a d4c5b57f f1f0dcd5     GNOXZ\^~........
   28ac0:	8f7372f5 97967574 2e265f2f b7afa72f     .rs.tu../_&./...
   28ad0:	d7cfc7bf 97409adf 1f8f3098 ffcec1c0     ......@..0......
   28ae0:	5b5a4f4e 100f0807 efee2f27 3d376f6e     NOZ[....'/..no7=
   28af0:	9045423f 53fffe91 c9c87567 d9d8d1d0     ?BE....Sgu......
   28b00:	00fffee7 82225f20 448204df 06041b08     .... _"....D....
   28b10:	0eac8111 1e35ab80 03e08015 04010819     ......5.........
   28b20:	0434042f 07010307 0a110706 07120f50     /.4.........P...
   28b30:	04020855 03090a1c 03070308 03030302     U...............
   28b40:	0305040c 0e01060b 033a0515 05060711     ..........:.....
   28b50:	07570710 0d150702 03430450 0401032d     ..W.....P.C.-...
   28b60:	0c0f0611 251d043a 046d205f c880256a     ....:..%_ m.j%..
   28b70:	03b08205 fd82061a 15075903 1409170b     .........Y......
   28b80:	6a0c140c 1a060a06 2b075906 2c0a4605     ...j.....Y.+.F.,
   28b90:	01040c04 2c0b3103 0b061a04 06ac8003     .....1.,........
   28ba0:	411f060a 032d044c 033c0874 073c030f     ...AL.-.t.<...<.
   28bb0:	052b0838 1811ff82 2d112f08 21102003     8.+....../.-. .!
   28bc0:	048c800f 0b199782 05948815 073b052f     ............/.;.
   28bd0:	09180e02 7430b080 1ad6800c ff80050c     ......0t........
   28be0:	05b68005 c69b0c24 1030d20a 37038d84     ....$.....0....7
   28bf0:	145c8109 8008b880 043530c7 0838060a     ..\......05...8.
   28c00:	060c0846 031e0b74 0959045a 1c188380     F...t...Z.Y.....
   28c10:	4809160a 068a8008 170ca4ab 04a13104     ...H.........1..
   28c20:	0726da81 8005050c 6d8111a5 2a287810     ..&........m.x(*
   28c30:	80044c06 be80048d 0f031b03 0106000d     .L..............
   28c40:	04010301 09080802 0b050a02 11011002     ................
   28c50:	13051204 15021411 19021702 1d051c04     ................
   28c60:	6a012408 bc026b03 d402d102 d609d50c     .$.j.k..........
   28c70:	da02d702 e105e001 ee02e802 f904f020     ............ ...
   28c80:	0c02fa06 4e3e3b27 9e9e8f4f 0907069f     ....';>NO.......
   28c90:	563e3d36 04d1d0f3 37361814 35bd5756     6=>V......67VW.5
   28ca0:	12e0cfce 9e8e8987 110e0d04 34312912     .............)14
   28cb0:	4946453a 644f4e4a b65c5a65 a81c1bb7     :EFIJNOdeZ\.....
   28cc0:	09d9d8a9 a8919037 3e3b0a07 928f6966     ....7.....;>fi..
   28cd0:	efee5f6f 9b9a625a 9d552827 a4a3a1a0     o_..Zb..'(U.....
   28ce0:	baada8a7 0b06c4bc 3a1d150c a651453f     ...........:?EQ.
   28cf0:	a0cdcca7 221a1907 c53f3e25 232004c6     ......."%>?... #
   28d00:	33282625 4a483a38 5553504c 5c5a5856     %&(38:HJLPSUVXZ\
   28d10:	6563605e 78736b66 a48a7f7d c0b0afaa     ^`cefksx}.......
   28d20:	a3720cd0 6ecccba4 7b225e6f 2d040305     ..r....no^"{...-
   28d30:	01046503 82802e2f 0f31031d 0924041c     .e../.....1...$.
   28d40:	052b051e 2a0e0444 2406aa80 28042404     ..+.D..*...$.$.(
   28d50:	010b3408 37819080 080a1609 03399880     .4.....7......9.
   28d60:	30090863 03210516 4001051b 054b0438     c..0..!....@8.K.
   28d70:	070a042f 20400709 090c0427 053a0336     /.....@ '...6.:.
   28d80:	0c04071a 37495007 07330d33 810a082e     .....PI73.3.....
   28d90:	81801f26 802a0828 4e091786 430f1e04     &...(.*....N...C
   28da0:	0a07190e 27094706 3f0b7509 3b062a41     .....G.'.u.?A*.;
   28db0:	51060a05 10050106 8b800503 08482060     ...Q........` H.
   28dc0:	5ea6800a 0a0b4522 39130d06 2c360a07     ...^"E.....9..6,
   28dd0:	c0801004 0c53643c 45a08001 5308481b     ....<dS....E.H.S
   28de0:	0781391d 031d0a46 03374947 060a080e     .9..F...GI7.....
   28df0:	810a0739 c7801936 9b830d32 800b7566     9...6...2...fu..
   28e00:	84bc8ac4 82d18f2f 82b9a147 042a0739     ..../...G...9.*.
   28e10:	0a266002 05280a46 5bb08213 39044b65     .`&.F.(....[eK.9
   28e20:	04401107 08f8971c 0da5f382 03311f81     ..@...........1.
   28e30:	81080411 6b04898c 09030d05 60931007     .......k.......`
   28e40:	730af680 46176e08 0c149a80 80190957     ...s.n.F....W...
   28e50:	03478187 150f4285 802b5085 1a032dd5     ..G..B...P+..-..
   28e60:	70810204 8501053a 29d78000 040a044c     ...p:......)L...
   28e70:	44118302 c2803d4c 0401063c 341b0555     ...DL=..<...U..4
   28e80:	2c0e8102 560c6404 5d030d0a 1d393d03     ...,.d.V...].=9.
   28e90:	09042c0d 060e0207 d6839a80 0b030d0a     .,..............
   28ea0:	590c7405 0c140c07 0a083804 1e082806     .t.Y.....8...(..
   28eb0:	31037752 0ca68003 05030414 85060d03     Rw.1............
   28ec0:	6372736a 62696c2f 65726f63 696e752f     jsrc/libcore/uni
   28ed0:	65646f63 646f6d2f 0073722e 00028ec1     code/mod.rs.....
   28ee0:	0000001a 00000038 0000000f 00028ec1     ....8...........
   28ef0:	0000001a 00000039 00000010              ....9.......

00028efc <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   28efc:	1b150f04 17120319 0e000011 00000016     ................
	...
   28f24:	00130600 00000000 00000000 00000000     ................
   28f34:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   28f54:	01050000 00000000 00000000 00000000     ................
   28f64:	00000000 10000000 00000000 0009000b     ................
   28f74:	                                         ...

00028f77 <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   28f93:	00120f00 00000000 00000000 00000000     ................
   28fa3:	0000001f 00000000 00000000 00000000     ................
   28fb3:	1d664649 00000000 00000000 00000000     IFf.............
   28fc3:	00003e8a 00000000 00000000 4b000000     .>.............K
   28fd3:	00000053 00000000 00000000 42236700     S............g#B
	...
   28fef:	0000003d 00230000 00000000 00000000     =.....#.........
   28fff:	2d000075 00000000 00000000 00000000     u..-............
   2900f:	003c4e82 00000000 00000000 63000000     .N<............c
   2901f:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   2902f:	00000300 00000000 00000000 0000002f     ............/...
   2903f:	00000000 00001000 13000000 00000800     ................
	...
   29057:	43000000 89007200 00000000 00000000     ...C.r..........
   29067:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   29077:	00210000 00000000 00000000 00000000     ..!.............
   29087:	4100000a 00000000 00000000 00000000     ...A............
   29097:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   290a7:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   290b7:	00000031 00000053 3a000000 00000000     1...S......:....
   290c7:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   290d7:	0017003b 00000000 00000000 00000000     ;...............
   290e7:	57000055 83000000 00000000 00000000     U..W............
   290f7:	00000059 26000000 00161b6e 00000000     Y......&n.......
   29107:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   29117:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   29127:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   29137:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   29147:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   29157:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

00029168 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   29170:	00000001 00000000 0000000d 00000000     ................
   29180:	0000001c 00000000 00000040 00000000     ........@.......
   29190:	000000b6 00000000 000000bf 00000000     ................
   291a0:	000003f8 00000000 000007f0 00000000     ................
   291b0:	000007ff 00000000 00001000 00000000     ................
   291c0:	00001e00 00000000 00003800 00000000     .........8......
   291d0:	00003f00 00000000 00007f80 00000000     .?..............
   291e0:	00008000 00000000 0001ffc0 00000000     ................
   291f0:	0003ff80 00000000 00078000 00000000     ................
   29200:	007f0000 00000000 00802001 00000000     ......... ......
   29210:	00a30000 00000000 037ffc00 00000000     ................
   29220:	06000000 00000000 07ff0000 00000000     ................
   29230:	09800000 00000000 0e000000 00000000     ................
   29240:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   29250:	200ffe40 00000000 30000001 00000000     @.. .......0....
   29260:	40000000 00000000 4000005c 00000000     ...@....\..@....
   29270:	60000000 00000000 805c8400 00000000     ...`......\.....
   29280:	c0000000 00000000 e0000000 00000000     ................
   29290:	00000000 00000001 0cf00000 00000001     ................
   292a0:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   292b0:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   292c0:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   292d0:	00000000 00000060 00000844 00000060     ....`...D...`...
   292e0:	00000000 000000f0 00000060 00000200     ........`.......
   292f0:	f9ffff7f 000007db 80000000 000007f8     ................
   29300:	e0000000 00000fbc 00000000 00002120     ............ !..
   29310:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   29320:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   29330:	00000000 00003fc0 00000000 0000f000     .....?..........
   29340:	00000000 0000fc00 f8000010 0000fffe     ................
   29350:	0000ffff 0000ffff ffffffff 0000ffff     ................
   29360:	fffff800 00010000 00000000 0001ffc0     ................
   29370:	ffff0000 0001ffff 00000000 00030000     ................
   29380:	00000000 00038000 00000000 0003a340     ............@...
   29390:	00000000 00080000 000c0000 000c0000     ................
   293a0:	00000004 000ff800 00000000 00180000     ................
   293b0:	001c0000 001c0000 c3000000 001e0001     ................
   293c0:	00000000 001f0000 00800001 001f1fc0     ................
   293d0:	00000007 001fef80 ffffffff 00201fff     .............. .
   293e0:	00023986 00230000 00000002 00403000     .9....#......0@.
   293f0:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   29400:	00000000 007f0000 00000000 00bf2800     .............(..
   29410:	00000000 00cff000 03000000 02a00000     ................
   29420:	fff70000 031021fd 00000003 06780000     .....!........x.
   29430:	00000000 06ff8000 00000000 07c00000     ................
   29440:	00000000 07f20000 00000000 0e040187     ................
   29450:	00000006 10000000 00001008 10000000     ................
   29460:	00000007 14000000 0000000f 17f00000     ................
   29470:	00000000 1ff20000 feffe0df 1fffffff     ................
   29480:	00000000 20000000 00000000 200ff800     ....... ....... 
   29490:	00000007 33c80000 00000000 3fb00000     .......3.......?
   294a0:	00000000 3ff78000 00000004 40000000     .......?.......@
   294b0:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   294c0:	00000002 50000000 00000003 58000000     .......P.......X
   294d0:	00000000 66fde000 000007fe 79f80000     .......f.......y
   294e0:	00000003 7fc00000 00000000 7ffe0000     ................
   294f0:	00000000 7fff0000 00000000 80000000     ................
   29500:	0000007f 80000000 00000030 8003ffff     ........0.......
   29510:	0000f06e 87000000 00000002 90000000     n...............
   29520:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   29530:	00000000 a7f80000 00000000 b03c8000     ..............<.
   29540:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   29550:	fffe0000 bfffffff 00000011 c0000000     ................
   29560:	00000000 c19d0000 00000002 d0000000     ................
   29570:	00000000 f807c3a0 ffffffff f87fffff     ................
   29580:	ffffffff fbffffff 000021be fc00000c     .........!......
   29590:	00000000 ff000000 00000002 ff000000     ................
   295a0:	00020000 ffff0000 fff80000 fffffffb     ................
   295b0:	00000000 ffffffff ffffffff ffffffff     ................
   295c0:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

000295d0 <nrf52_hal_i2cs>:
   295d0:	00000000 20000108                       ....... 

000295d8 <nrf52_hal_spis>:
   295d8:	2000ddc0 00000000 00000000 65737341     ... ........Asse
   295e8:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   295f8:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   29608:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   29618:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   29628:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   29638:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   29648:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   29658:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   29668:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   29678:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   29688:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   29698:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   296a8:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   296b8:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   296c8:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   296d8:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   296e8:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   296f8:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   29708:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   29718:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   29728:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   29738:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   29748:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   29758:	00000000 656c6469 00000000 7379736d     ....idle....msys
   29768:	0000315f                                _1..

0002976c <MemFile_methods>:
   2976c:	0001d361 00000000                       a.......

00029774 <stdout>:
   29774:	20000124                                $.. 

00029778 <nrf52k_flash_dev>:
   29778:	00029790 00000000 00080000 00000080     ................
   29788:	00000001 000000ff                       ........

00029790 <nrf52k_flash_funcs>:
   29790:	0001d5cd 0001d4fd 0001d485 0001d4dd     ................
   297a0:	00000000 0001d4d9 00000000              ............

000297ac <nrf52_hal_timers>:
   297ac:	2000ded0 00000000 00000000 00000000     ... ............
	...

000297c4 <hal_i2c1_cfg>:
   297c4:	00000007 00000006 00000064              ........d...

000297d0 <os_bsp_spi0m_cfg>:
   297d0:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   297e0:	7476655f 00000073                       _evts...

000297e8 <COLLECTOR_NODE_HW_ID>:
   297e8:	066aff57 50547878 67242949              W.j.xxTPI)$g

000297f4 <SENSOR_NODE_HW_IDS>:
   297f4:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   29804:	08070605 020b0a09 04030201 08070605     ................
   29814:	030b0a09 04030201 08070605 040b0a09     ................
   29824:	04030201 08070605 050b0a09 77687325     ............%shw
   29834:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   29844:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   29854:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   29864:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   29874:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   29884:	0a732520 00000000 00000000               %s.........

00029890 <sensor_node_addresses>:
   29890:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   298a0:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   298b0:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   298c0:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   298d0:	00000a73                                s...

000298d4 <g_temp_stub_sensor_driver>:
   298d4:	0001e409 0001e311 00000000 00000000     ................
	...
   298fc:	20425453 64616572 6d657420 65732070     STB read temp se
   2990c:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   2991c:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

0002992c <sysflash_map_dflt>:
	...
   29934:	00004000 00000001 00008000 00073c00     .@...........<..
   29944:	00000002 0007bc00 00000400 00000003     ................
   29954:	0007c000 00001000 00000010 00004000     .............@..
   29964:	00004000 00000011 0007d000 00003000     .@...........0..
   29974:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   29984:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 137612	    108	  57144	 194864	  2f930	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
