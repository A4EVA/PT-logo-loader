
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x000205fc vaddr 0x000205fc paddr 0x000205fc align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00020614 memsz 0x00020614 flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x00020614 align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00030148 vaddr 0x20000148 paddr 0x00020680 align 2**16
         filesz 0x00000000 memsz 0x0000de40 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              000185dc  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  000205fc  000205fc  00030144  2**0  CONTENTS
  3 .ARM.exidx         00000018  000205fc  000205fc  000205fc  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00030144  2**0  CONTENTS
  6 .data              0000006c  200000d8  00020614  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00030144  2**0  CONTENTS
  8 .bss               0000de40  20000148  00020680  00030148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000df88  2000df88  00030148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000302f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000303b2  2**0  CONTENTS, READONLY
 13 .debug_line        00049378  00000000  00000000  000303b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        000854a6  00000000  00000000  0007972e  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000e342  00000000  00000000  000febd4  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     000059e8  00000000  00000000  0010cf18  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         000596ae  00000000  00000000  00112900  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         000134bc  00000000  00000000  0016bfae  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      00019ce0  00000000  00000000  0017f46a  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000e8ac  00000000  00000000  0019914c  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000053  00000000  00000000  001a79f8  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00014b1d  00000000  00000000  001a7a4b  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    000308b9  00000000  00000000  001bc568  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
000205fc l    d  .ARM.extab	00000000 .ARM.extab
000205fc l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000df88 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 9mu0l0cofx40kg7
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fe78 l       .debug_str	00000000 
0001fe6c l       .debug_str	00000000 
0002c24d l       .debug_str	00000000 
00051ed9 l       .debug_str	00000000 
00052640 l       .debug_str	00000000 
0005190d l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0002c27a l       .debug_str	00000000 
0002c26c l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00054b32 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
000539bb l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00003f42 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0002c239 l       .debug_str	00000000 
000575f3 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000312f3 l       .debug_str	00000000 
000549dc l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 uihlqvdlbzm5wxk
00001076 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
0000103b l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000010df l       .debug_str	00000000 
0000114a l       .debug_str	00000000 
00001186 l       .debug_str	00000000 
000011d3 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
0000121d l       .debug_str	00000000 
00001288 l       .debug_str	00000000 
000012a3 l       .debug_str	00000000 
0000130f l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00052c5c l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0000136b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
00054e09 l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016bf5 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
0005754f l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000e9c l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001fde0 l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
00000f20 l       .debug_str	00000000 
00000f59 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
00000f99 l       .debug_str	00000000 
00000fd2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000312f3 l       .debug_str	00000000 
000549dc l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fe78 l       .debug_str	00000000 
0001fe6c l       .debug_str	00000000 
0000151c l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
00054e09 l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
00059007 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00057cf2 l       .debug_str	00000000 
000013e2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00058cc6 l       .debug_str	00000000 
000013ef l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
00016499 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000169d l       .debug_str	00000000 
000013ff l       .debug_str	00000000 
00001484 l       .debug_str	00000000 
0000149a l       .debug_str	00000000 
00054b3b l       .debug_str	00000000 
000014c1 l       .debug_str	00000000 
00037717 l       .debug_str	00000000 
000014e9 l       .debug_str	00000000 
00001517 l       .debug_str	00000000 
00001521 l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
00001553 l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
0000157b l       .debug_str	00000000 
00059087 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
000015a8 l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
000015dc l       .debug_str	00000000 
0000160c l       .debug_str	00000000 
00001617 l       .debug_str	00000000 
00001644 l       .debug_str	00000000 
0000164d l       .debug_str	00000000 
00001683 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00001694 l       .debug_str	00000000 
0000151b l       .debug_str	00000000 
00051a5a l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
000016bb l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fe78 l       .debug_str	00000000 
000016e7 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000312f3 l       .debug_str	00000000 
000549dc l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
000030eb l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
000036ac l       .debug_str	00000000 
000036ec l       .debug_str	00000000 
0000373a l       .debug_str	00000000 
0000377a l       .debug_str	00000000 
000037a1 l       .debug_str	00000000 
000037e1 l       .debug_str	00000000 
000037ef l       .debug_str	00000000 
0000385e l       .debug_str	00000000 
00003889 l       .debug_str	00000000 
000038f9 l       .debug_str	00000000 
0000390c l       .debug_str	00000000 
0000397c l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000039a8 l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00017357 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
000039b7 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00052a00 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a411 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b6b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
000572ce l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00051d13 l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00058109 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
000473b6 l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
00001d93 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00057dbc l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da7 l       .debug_str	00000000 
00001db2 l       .debug_str	00000000 
00001dba l       .debug_str	00000000 
0000b338 l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
00001dc2 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001fc2 l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002008 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00002013 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002111 l       .debug_str	00000000 
0000211f l       .debug_str	00000000 
0000217e l       .debug_str	00000000 
000021e5 l       .debug_str	00000000 
000021fb l       .debug_str	00000000 
0000220b l       .debug_str	00000000 
000565f2 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000221a l       .debug_str	00000000 
000257ab l       .debug_str	00000000 
00002220 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002238 l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
00002240 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
0000224e l       .debug_str	00000000 
00002294 l       .debug_str	00000000 
00002271 l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
0005617f l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000233e l       .debug_str	00000000 
00002373 l       .debug_str	00000000 
000023b5 l       .debug_str	00000000 
00056068 l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002434 l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
00002488 l       .debug_str	00000000 
0005552c l       .debug_str	00000000 
000024d2 l       .debug_str	00000000 
000024d8 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
000024e4 l       .debug_str	00000000 
0000250d l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
0000251e l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
000025a8 l       .debug_str	00000000 
000025ad l       .debug_str	00000000 
000563b6 l       .debug_str	00000000 
000025b2 l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
000025c4 l       .debug_str	00000000 
000025f8 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
000555e4 l       .debug_str	00000000 
00002682 l       .debug_str	00000000 
000026ae l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026bf l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
00002749 l       .debug_str	00000000 
0005658a l       .debug_str	00000000 
0000274e l       .debug_str	00000000 
00002757 l       .debug_str	00000000 
0000275e l       .debug_str	00000000 
00002789 l       .debug_str	00000000 
00002766 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027dd l       .debug_str	00000000 
00056252 l       .debug_str	00000000 
00002827 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
00002839 l       .debug_str	00000000 
0000283f l       .debug_str	00000000 
00002847 l       .debug_str	00000000 
00002855 l       .debug_str	00000000 
00002864 l       .debug_str	00000000 
00002875 l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
0000289d l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028c0 l       .debug_str	00000000 
000028f5 l       .debug_str	00000000 
00002937 l       .debug_str	00000000 
000556e7 l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
000029ae l       .debug_str	00000000 
0000298b l       .debug_str	00000000 
000029c0 l       .debug_str	00000000 
00002a02 l       .debug_str	00000000 
00002a4c l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a7e l       .debug_str	00000000 
00002a5b l       .debug_str	00000000 
00002a90 l       .debug_str	00000000 
00002ad2 l       .debug_str	00000000 
00002b1c l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
00002b40 l       .debug_str	00000000 
00002b49 l       .debug_str	00000000 
00002b54 l       .debug_str	00000000 
00002b63 l       .debug_str	00000000 
00002b78 l       .debug_str	00000000 
00002ba9 l       .debug_str	00000000 
00002c46 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002cf6 l       .debug_str	00000000 
00002cff l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d20 l       .debug_str	00000000 
00002d56 l       .debug_str	00000000 
00002dd9 l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00002e80 l       .debug_str	00000000 
00002ecc l       .debug_str	00000000 
00002f20 l       .debug_str	00000000 
00002f3d l       .debug_str	00000000 
00002f51 l       .debug_str	00000000 
00002f9d l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000301b l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
000030ba l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003108 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0002bd38 l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
00003e57 l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314c l       .debug_str	00000000 
00003154 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
0000316d l       .debug_str	00000000 
00003175 l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031a2 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
000031b6 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000031ca l       .debug_str	00000000 
000031d5 l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
00055658 l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00003298 l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
000032b7 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032c6 l       .debug_str	00000000 
000032ce l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
0000331f l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000333d l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
000033ff l       .debug_str	00000000 
00003409 l       .debug_str	00000000 
00003419 l       .debug_str	00000000 
0000342e l       .debug_str	00000000 
00003436 l       .debug_str	00000000 
0000349a l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
0000350d l       .debug_str	00000000 
00003515 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003566 l       .debug_str	00000000 
0000357b l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
000035bf l       .debug_str	00000000 
000035e9 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003660 l       .debug_str	00000000 
0000369f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
00003ba4 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00054e09 l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00003d75 l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
00003b19 l       .debug_str	00000000 
00003b7c l       .debug_str	00000000 
00003c22 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00003cc8 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00003d4f l       .debug_str	00000000 
00003d5e l       .debug_str	00000000 
000524c1 l       .debug_str	00000000 
00003d80 l       .debug_str	00000000 
00016bf5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000039d8 l       .debug_str	00000000 
00003a62 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
00003a7a l       .debug_str	00000000 
00003b0f l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fe96 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
00004acd l       .debug_str	00000000 
00004afa l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00004b15 l       .debug_str	00000000 
00004b49 l       .debug_str	00000000 
00004b30 l       .debug_str	00000000 
00004b51 l       .debug_str	00000000 
00004b67 l       .debug_str	00000000 
00004bcf l       .debug_str	00000000 
00004c47 l       .debug_str	00000000 
00004c74 l       .debug_str	00000000 
00004c8c l       .debug_str	00000000 
00004cf6 l       .debug_str	00000000 
00004cfe l       .debug_str	00000000 
00004d04 l       .debug_str	00000000 
00004d0e l       .debug_str	00000000 
00004d88 l       .debug_str	00000000 
00004df4 l       .debug_str	00000000 
00004e6d l       .debug_str	00000000 
00004ee6 l       .debug_str	00000000 
00004f51 l       .debug_str	00000000 
00004fc0 l       .debug_str	00000000 
00004fc7 l       .debug_str	00000000 
00004fd2 l       .debug_str	00000000 
00004ffa l       .debug_str	00000000 
0000506f l       .debug_str	00000000 
000050ec l       .debug_str	00000000 
00004feb l       .debug_str	00000000 
000050f8 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
0000516f l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
000473b6 l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
000051d8 l       .debug_str	00000000 
00005256 l       .debug_str	00000000 
000052c6 l       .debug_str	00000000 
00005340 l       .debug_str	00000000 
0000535a l       .debug_str	00000000 
000053c6 l       .debug_str	00000000 
000053cf l       .debug_str	00000000 
000053db l       .debug_str	00000000 
00005451 l       .debug_str	00000000 
000054c7 l       .debug_str	00000000 
0000553d l       .debug_str	00000000 
000055a5 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00005614 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
00005681 l       .debug_str	00000000 
000056f6 l       .debug_str	00000000 
0000570b l       .debug_str	00000000 
00005772 l       .debug_str	00000000 
0000577b l       .debug_str	00000000 
00005786 l       .debug_str	00000000 
0000578d l       .debug_str	00000000 
000539c3 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
000057c2 l       .debug_str	00000000 
000533fc l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00005844 l       .debug_str	00000000 
000532a3 l       .debug_str	00000000 
0005873a l       .debug_str	00000000 
00005877 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
00005884 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00058cc6 l       .debug_str	00000000 
000013ef l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
00016499 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000169d l       .debug_str	00000000 
00001694 l       .debug_str	00000000 
000058a5 l       .debug_str	00000000 
000058aa l       .debug_str	00000000 
000058af l       .debug_str	00000000 
000058b4 l       .debug_str	00000000 
000058b9 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
000058c9 l       .debug_str	00000000 
000058d4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a411 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003d8a l       .debug_str	00000000 
00014029 l       .debug_str	00000000 
00003dfe l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003e0a l       .debug_str	00000000 
00003e30 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0002bd38 l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
00003e57 l       .debug_str	00000000 
00003e3c l       .debug_str	00000000 
00003e63 l       .debug_str	00000000 
00003e6e l       .debug_str	00000000 
00003e79 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
00003f33 l       .debug_str	00000000 
00003e8a l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003f11 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00003f18 l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00003f47 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003fa4 l       .debug_str	00000000 
00004009 l       .debug_str	00000000 
00004011 l       .debug_str	00000000 
00004033 l       .debug_str	00000000 
0000401a l       .debug_str	00000000 
0000404b l       .debug_str	00000000 
00004071 l       .debug_str	00000000 
000040e9 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
00055658 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
00004160 l       .debug_str	00000000 
000041c9 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
00004280 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
000572ce l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00051d13 l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00058109 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00004306 l       .debug_str	00000000 
0000437f l       .debug_str	00000000 
00058738 l       .debug_str	00000000 
00004384 l       .debug_str	00000000 
000043a7 l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
000043cd l       .debug_str	00000000 
000043b4 l       .debug_str	00000000 
000043af l       .debug_str	00000000 
000043d8 l       .debug_str	00000000 
000043f1 l       .debug_str	00000000 
0000445c l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
000044cc l       .debug_str	00000000 
000044dc l       .debug_str	00000000 
00004554 l       .debug_str	00000000 
00052f53 l       .debug_str	00000000 
00052cad l       .debug_str	00000000 
0000455e l       .debug_str	00000000 
00004565 l       .debug_str	00000000 
00004588 l       .debug_str	00000000 
0000456f l       .debug_str	00000000 
0000456a l       .debug_str	00000000 
00004592 l       .debug_str	00000000 
000045aa l       .debug_str	00000000 
00004614 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00004689 l       .debug_str	00000000 
000046f0 l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
0000477b l       .debug_str	00000000 
00004784 l       .debug_str	00000000 
00004792 l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047ac l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
000047c7 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047e8 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00004801 l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004872 l       .debug_str	00000000 
00004859 l       .debug_str	00000000 
0000487d l       .debug_str	00000000 
0000489f l       .debug_str	00000000 
00004886 l       .debug_str	00000000 
000048ac l       .debug_str	00000000 
000048c7 l       .debug_str	00000000 
00004934 l       .debug_str	00000000 
000049b1 l       .debug_str	00000000 
000049b9 l       .debug_str	00000000 
00004c65 l       .debug_str	00000000 
00004c4c l       .debug_str	00000000 
000049c3 l       .debug_str	00000000 
000049e0 l       .debug_str	00000000 
00004a4f l       .debug_str	00000000 
00004ac5 l       .debug_str	00000000 
00004ad6 l       .debug_str	00000000 
00004ae4 l       .debug_str	00000000 
00004aeb l       .debug_str	00000000 
00004af2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
000078c2 l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
00029587 l       .debug_str	00000000 
000224a8 l       .debug_str	00000000 
0000a3a8 l       .debug_str	00000000 
0000a3d8 l       .debug_str	00000000 
0000a636 l       .debug_str	00000000 
0000a666 l       .debug_str	00000000 
0000a691 l       .debug_str	00000000 
0000a69b l       .debug_str	00000000 
0000a6f4 l       .debug_str	00000000 
0000a948 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000058d9 l       .debug_str	00000000 
00005909 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00057f54 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
00054072 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d74c l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
00029513 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000226fc l       .debug_str	00000000 
00005b4c l       .debug_str	00000000 
00005b7c l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fe78 l       .debug_str	00000000 
0001fe6c l       .debug_str	00000000 
00052492 l       .debug_str	00000000 
00052c5c l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
00059007 l       .debug_str	00000000 
0000ad71 l       .debug_str	00000000 
0000ad7a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000a969 l       .debug_str	00000000 
0000b283 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
0000a9a0 l       .debug_str	00000000 
0000a9f3 l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
0000aa07 l       .debug_str	00000000 
0000aa4d l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
0000aa5b l       .debug_str	00000000 
0000aaa2 l       .debug_str	00000000 
0000aaab l       .debug_str	00000000 
0000aaf4 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
00003d80 l       .debug_str	00000000 
0000ab00 l       .debug_str	00000000 
0000ab7c l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00003d4f l       .debug_str	00000000 
0000aba6 l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
0000ac51 l       .debug_str	00000000 
0000acd7 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002d592 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00014019 l       .debug_str	00000000 
0000acff l       .debug_str	00000000 
0000ad61 l       .debug_str	00000000 
00054072 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000ad69 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000312f3 l       .debug_str	00000000 
000549dc l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
00054e1e l       .debug_str	00000000 
0000af8d l       .debug_str	00000000 
000519d4 l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
0005944c l       .debug_str	00000000 
0005944b l       .debug_str	00000000 
00058cc6 l       .debug_str	00000000 
000013ef l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
00016499 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000169d l       .debug_str	00000000 
00001694 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000257ab l       .debug_str	00000000 
000257b0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000ad81 l       .debug_str	00000000 
000518f7 l       .debug_str	00000000 
0000ad85 l       .debug_str	00000000 
0000adb6 l       .debug_str	00000000 
0000adbc l       .debug_str	00000000 
0000adfd l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000ae12 l       .debug_str	00000000 
0000ae49 l       .debug_str	00000000 
0000ae54 l       .debug_str	00000000 
00057f54 l       .debug_str	00000000 
0000ae86 l       .debug_str	00000000 
00051a3b l       .debug_str	00000000 
0000aeba l       .debug_str	00000000 
00051a2a l       .debug_str	00000000 
0000aeee l       .debug_str	00000000 
000519e2 l       .debug_str	00000000 
0000af25 l       .debug_str	00000000 
00051a74 l       .debug_str	00000000 
0000af5d l       .debug_str	00000000 
000518a5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
00003e57 l       .debug_str	00000000 
0000b2d4 l       .debug_str	00000000 
0000b2fb l       .debug_str	00000000 
0000b306 l       .debug_str	00000000 
0000b32d l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000b338 l       .debug_str	00000000 
0000b337 l       .debug_str	00000000 
0001fd2b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
000529e3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00054072 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000058be l       .debug_str	00000000 
00055933 l       .debug_str	00000000 
00052c3d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000afbe l       .debug_str	00000000 
0000afe7 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0000aff4 l       .debug_str	00000000 
0000b006 l       .debug_str	00000000 
0000b017 l       .debug_str	00000000 
0000b063 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000b06f l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052a00 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a411 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b6b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
000572ce l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00051d13 l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00058109 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
000473b6 l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
00001d93 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00057dbc l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da7 l       .debug_str	00000000 
00001db2 l       .debug_str	00000000 
00001dba l       .debug_str	00000000 
0000b073 l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
00001dc2 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001fc2 l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002008 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00002013 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002111 l       .debug_str	00000000 
0000211f l       .debug_str	00000000 
0000217e l       .debug_str	00000000 
000021e5 l       .debug_str	00000000 
000021fb l       .debug_str	00000000 
0000220b l       .debug_str	00000000 
000565f2 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000221a l       .debug_str	00000000 
000257ab l       .debug_str	00000000 
00002220 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002238 l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
00002240 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
0000224e l       .debug_str	00000000 
00002294 l       .debug_str	00000000 
00002271 l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
0005617f l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000233e l       .debug_str	00000000 
00002373 l       .debug_str	00000000 
000023b5 l       .debug_str	00000000 
00056068 l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002434 l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
00002488 l       .debug_str	00000000 
0005552c l       .debug_str	00000000 
000024d2 l       .debug_str	00000000 
000024d8 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
000024e4 l       .debug_str	00000000 
0000250d l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
0000251e l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
000025a8 l       .debug_str	00000000 
000025ad l       .debug_str	00000000 
000563b6 l       .debug_str	00000000 
000025b2 l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
000025c4 l       .debug_str	00000000 
000025f8 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
000555e4 l       .debug_str	00000000 
00002682 l       .debug_str	00000000 
000026ae l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026bf l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
00002749 l       .debug_str	00000000 
0005658a l       .debug_str	00000000 
0000274e l       .debug_str	00000000 
00002757 l       .debug_str	00000000 
0000275e l       .debug_str	00000000 
00002789 l       .debug_str	00000000 
00002766 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027dd l       .debug_str	00000000 
00056252 l       .debug_str	00000000 
00002827 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
00002839 l       .debug_str	00000000 
0000283f l       .debug_str	00000000 
00002847 l       .debug_str	00000000 
00002855 l       .debug_str	00000000 
00002864 l       .debug_str	00000000 
00002875 l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
0000289d l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028c0 l       .debug_str	00000000 
000028f5 l       .debug_str	00000000 
00002937 l       .debug_str	00000000 
000556e7 l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
000029ae l       .debug_str	00000000 
0000298b l       .debug_str	00000000 
000029c0 l       .debug_str	00000000 
00002a02 l       .debug_str	00000000 
00002a4c l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a7e l       .debug_str	00000000 
00002a5b l       .debug_str	00000000 
00002a90 l       .debug_str	00000000 
00002ad2 l       .debug_str	00000000 
00002b1c l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
00002b40 l       .debug_str	00000000 
00002b49 l       .debug_str	00000000 
00002b54 l       .debug_str	00000000 
00002b63 l       .debug_str	00000000 
00002b78 l       .debug_str	00000000 
00002ba9 l       .debug_str	00000000 
00002c46 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002cf6 l       .debug_str	00000000 
00002cff l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d20 l       .debug_str	00000000 
00002d56 l       .debug_str	00000000 
00002dd9 l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00002e80 l       .debug_str	00000000 
00002ecc l       .debug_str	00000000 
00002f20 l       .debug_str	00000000 
00002f3d l       .debug_str	00000000 
00002f51 l       .debug_str	00000000 
00002f9d l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000301b l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
000030ba l       .debug_str	00000000 
000030eb l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003108 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0002bd38 l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314c l       .debug_str	00000000 
00003154 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
0000316d l       .debug_str	00000000 
00003175 l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031a2 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
000031b6 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000031ca l       .debug_str	00000000 
000031d5 l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
00055658 l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00003298 l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
000032b7 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032c6 l       .debug_str	00000000 
000032ce l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
0000331f l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000333d l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
000033ff l       .debug_str	00000000 
00003409 l       .debug_str	00000000 
00003419 l       .debug_str	00000000 
0000342e l       .debug_str	00000000 
00003436 l       .debug_str	00000000 
0000349a l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
0000350d l       .debug_str	00000000 
00003515 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003566 l       .debug_str	00000000 
0000357b l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
000035bf l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00052760 l       .debug_str	00000000 
0000b080 l       .debug_str	00000000 
0000b138 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
0000b19c l       .debug_str	00000000 
0000b1d2 l       .debug_str	00000000 
0000b1eb l       .debug_str	00000000 
0000b225 l       .debug_str	00000000 
0000b242 l       .debug_str	00000000 
0000b27d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
0000b29a l       .debug_str	00000000 
0000b2a4 l       .debug_str	00000000 
0000b2ca l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005748c l       .debug_str	00000000 
0000b3fe l       .debug_str	00000000 
0000b43a l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b3f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
00003108 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00052c5c l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012ecf l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b84b l       .debug_str	00000000 
0000b854 l       .debug_str	00000000 
0001fd2b l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0000b8f7 l       .debug_str	00000000 
0000b337 l       .debug_str	00000000 
0000b902 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
0000b479 l       .debug_str	00000000 
0000b4c1 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
0000b4e0 l       .debug_str	00000000 
0000b51b l       .debug_str	00000000 
0000b540 l       .debug_str	00000000 
0000b567 l       .debug_str	00000000 
0000b5c7 l       .debug_str	00000000 
0000b5d0 l       .debug_str	00000000 
0000b63b l       .debug_str	00000000 
0000b64b l       .debug_str	00000000 
0000b6b7 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052a00 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000017f9 l       .debug_str	00000000 
00001b65 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a411 l       .debug_str	00000000 
00001809 l       .debug_str	00000000 
00001815 l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001834 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
000018f0 l       .debug_str	00000000 
000018fb l       .debug_str	00000000 
00001942 l       .debug_str	00000000 
00001991 l       .debug_str	00000000 
0000199b l       .debug_str	00000000 
000019d8 l       .debug_str	00000000 
00001a1d l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a36 l       .debug_str	00000000 
00001a3e l       .debug_str	00000000 
00001a93 l       .debug_str	00000000 
00001af0 l       .debug_str	00000000 
00001afc l       .debug_str	00000000 
00001b05 l       .debug_str	00000000 
00001b11 l       .debug_str	00000000 
00001b1d l       .debug_str	00000000 
00001b26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00001b2e l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001b36 l       .debug_str	00000000 
00001b64 l       .debug_str	00000000 
00001b4b l       .debug_str	00000000 
00001b6b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
000572ce l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00051d13 l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00058109 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001d62 l       .debug_str	00000000 
000473b6 l       .debug_str	00000000 
00001d79 l       .debug_str	00000000 
00001d81 l       .debug_str	00000000 
00001d8a l       .debug_str	00000000 
0000318e l       .debug_str	00000000 
00001d93 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00057dbc l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da7 l       .debug_str	00000000 
00001db2 l       .debug_str	00000000 
00001dba l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
00001dc2 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001fc2 l       .debug_str	00000000 
00001fd0 l       .debug_str	00000000 
00001fdb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002008 l       .debug_str	00000000 
00001fe5 l       .debug_str	00000000 
00002013 l       .debug_str	00000000 
0000208e l       .debug_str	00000000 
00002111 l       .debug_str	00000000 
0000211f l       .debug_str	00000000 
0000217e l       .debug_str	00000000 
000021e5 l       .debug_str	00000000 
000021fb l       .debug_str	00000000 
0000220b l       .debug_str	00000000 
000565f2 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000221a l       .debug_str	00000000 
000257ab l       .debug_str	00000000 
00002220 l       .debug_str	00000000 
00002226 l       .debug_str	00000000 
0000222c l       .debug_str	00000000 
00002238 l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
00002240 l       .debug_str	00000000 
00002248 l       .debug_str	00000000 
0000224e l       .debug_str	00000000 
00002294 l       .debug_str	00000000 
00002271 l       .debug_str	00000000 
000022a4 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
0005617f l       .debug_str	00000000 
0000232c l       .debug_str	00000000 
00002332 l       .debug_str	00000000 
00002338 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000233e l       .debug_str	00000000 
00002373 l       .debug_str	00000000 
000023b5 l       .debug_str	00000000 
00056068 l       .debug_str	00000000 
000023ff l       .debug_str	00000000 
00002405 l       .debug_str	00000000 
0000240b l       .debug_str	00000000 
00002434 l       .debug_str	00000000 
00002411 l       .debug_str	00000000 
00002446 l       .debug_str	00000000 
00002488 l       .debug_str	00000000 
0005552c l       .debug_str	00000000 
000024d2 l       .debug_str	00000000 
000024d8 l       .debug_str	00000000 
000024de l       .debug_str	00000000 
000024e4 l       .debug_str	00000000 
0000250d l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
0000251e l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
000025a8 l       .debug_str	00000000 
000025ad l       .debug_str	00000000 
000563b6 l       .debug_str	00000000 
000025b2 l       .debug_str	00000000 
000025b8 l       .debug_str	00000000 
000025be l       .debug_str	00000000 
000025e7 l       .debug_str	00000000 
000025c4 l       .debug_str	00000000 
000025f8 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
000555e4 l       .debug_str	00000000 
00002682 l       .debug_str	00000000 
000026ae l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
000026bf l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
00002749 l       .debug_str	00000000 
0005658a l       .debug_str	00000000 
0000274e l       .debug_str	00000000 
00002757 l       .debug_str	00000000 
0000275e l       .debug_str	00000000 
00002789 l       .debug_str	00000000 
00002766 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
000027dd l       .debug_str	00000000 
00056252 l       .debug_str	00000000 
00002827 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002833 l       .debug_str	00000000 
00002839 l       .debug_str	00000000 
0000283f l       .debug_str	00000000 
00002847 l       .debug_str	00000000 
00002855 l       .debug_str	00000000 
00002864 l       .debug_str	00000000 
00002875 l       .debug_str	00000000 
00002880 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002896 l       .debug_str	00000000 
0000289d l       .debug_str	00000000 
000028e3 l       .debug_str	00000000 
000028c0 l       .debug_str	00000000 
000028f5 l       .debug_str	00000000 
00002937 l       .debug_str	00000000 
000556e7 l       .debug_str	00000000 
00002981 l       .debug_str	00000000 
000029ae l       .debug_str	00000000 
0000298b l       .debug_str	00000000 
000029c0 l       .debug_str	00000000 
00002a02 l       .debug_str	00000000 
00002a4c l       .debug_str	00000000 
00002a51 l       .debug_str	00000000 
00002a7e l       .debug_str	00000000 
00002a5b l       .debug_str	00000000 
00002a90 l       .debug_str	00000000 
00002ad2 l       .debug_str	00000000 
00002b1c l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002b30 l       .debug_str	00000000 
00002b40 l       .debug_str	00000000 
00002b49 l       .debug_str	00000000 
00002b54 l       .debug_str	00000000 
00002b63 l       .debug_str	00000000 
00002b78 l       .debug_str	00000000 
00002ba9 l       .debug_str	00000000 
00002c46 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002cf6 l       .debug_str	00000000 
00002cff l       .debug_str	00000000 
00002d43 l       .debug_str	00000000 
00002d20 l       .debug_str	00000000 
00002d56 l       .debug_str	00000000 
00002dd9 l       .debug_str	00000000 
00002e64 l       .debug_str	00000000 
00002e80 l       .debug_str	00000000 
00002ecc l       .debug_str	00000000 
00002f20 l       .debug_str	00000000 
00002f3d l       .debug_str	00000000 
00002f51 l       .debug_str	00000000 
00002f9d l       .debug_str	00000000 
00002ff1 l       .debug_str	00000000 
00003007 l       .debug_str	00000000 
0000301b l       .debug_str	00000000 
00003062 l       .debug_str	00000000 
000030b1 l       .debug_str	00000000 
000030dd l       .debug_str	00000000 
000030ba l       .debug_str	00000000 
000030eb l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000030f9 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
00003e25 l       .debug_str	00000000 
00003110 l       .debug_str	00000000 
0002bd38 l       .debug_str	00000000 
0000311f l       .debug_str	00000000 
00003e57 l       .debug_str	00000000 
0000312a l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003146 l       .debug_str	00000000 
0000314c l       .debug_str	00000000 
00003154 l       .debug_str	00000000 
0000315b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
0000316d l       .debug_str	00000000 
00003175 l       .debug_str	00000000 
00003197 l       .debug_str	00000000 
000031a2 l       .debug_str	00000000 
000031ae l       .debug_str	00000000 
000031b6 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
000031ca l       .debug_str	00000000 
000031d5 l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
00055658 l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00003298 l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
000032b7 l       .debug_str	00000000 
000032bf l       .debug_str	00000000 
000032c6 l       .debug_str	00000000 
000032ce l       .debug_str	00000000 
0000330f l       .debug_str	00000000 
000032ec l       .debug_str	00000000 
0000331f l       .debug_str	00000000 
00003334 l       .debug_str	00000000 
0000333d l       .debug_str	00000000 
0000339a l       .debug_str	00000000 
000033ff l       .debug_str	00000000 
00003409 l       .debug_str	00000000 
00003419 l       .debug_str	00000000 
0000342e l       .debug_str	00000000 
00003436 l       .debug_str	00000000 
0000349a l       .debug_str	00000000 
00003506 l       .debug_str	00000000 
0000350d l       .debug_str	00000000 
00003515 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003533 l       .debug_str	00000000 
00003566 l       .debug_str	00000000 
0000357b l       .debug_str	00000000 
0000358e l       .debug_str	00000000 
000035a3 l       .debug_str	00000000 
000035aa l       .debug_str	00000000 
000035bf l       .debug_str	00000000 
0000b338 l       .debug_str	00000000 
0000b6ca l       .debug_str	00000000 
0000b72d l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
0000b7ad l       .debug_str	00000000 
0000b810 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000016bb l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fe78 l       .debug_str	00000000 
0000bba7 l       .debug_str	00000000 
0000bbd8 l       .debug_str	00000000 
0000be6b l       .debug_str	00000000 
0000bbf2 l       .debug_str	00000000 
0000bc23 l       .debug_str	00000000 
0000bca1 l       .debug_str	00000000 
0000bc53 l       .debug_str	00000000 
0000bc84 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
0000bc94 l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
0000bca0 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0000bca6 l       .debug_str	00000000 
0000bcf8 l       .debug_str	00000000 
000016ba l       .debug_str	00000000 
0000bd4b l       .debug_str	00000000 
0000bdb4 l       .debug_str	00000000 
0001fe6c l       .debug_str	00000000 
0000be07 l       .debug_str	00000000 
0000be6a l       .debug_str	00000000 
0000be96 l       .debug_str	00000000 
0000bf0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00057cf2 l       .debug_str	00000000 
000013e2 l       .debug_str	00000000 
00001725 l       .debug_str	00000000 
0000b90c l       .debug_str	00000000 
0000be8c l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000b91b l       .debug_str	00000000 
0000b963 l       .debug_str	00000000 
0000b96c l       .debug_str	00000000 
0000b9b4 l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
0000b9bc l       .debug_str	00000000 
0000b5c7 l       .debug_str	00000000 
0000ba04 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0000ba55 l       .debug_str	00000000 
0000ba9d l       .debug_str	00000000 
0000baa6 l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
000195a3 l       .debug_str	00000000 
0000bae0 l       .debug_str	00000000 
0000bb11 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
000016bb l       .debug_str	00000000 
0000bb1b l       .debug_str	00000000 
0000bb4c l       .debug_str	00000000 
000195b7 l       .debug_str	00000000 
0000bb6c l       .debug_str	00000000 
0000bb9d l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000312f3 l       .debug_str	00000000 
000549dc l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0000c0b6 l       .debug_str	00000000 
0000bfb3 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
0000c00c l       .debug_str	00000000 
0000c018 l       .debug_str	00000000 
0000c05f l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
0000c06b l       .debug_str	00000000 
0000c0c6 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
000549ca l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000567e0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000bf62 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fe96 l       .debug_str	00000000 
00009548 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
0000c386 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00019667 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025fd2 l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0002c898 l       .debug_str	00000000 
00027bcd l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c3e5 l       .debug_str	00000000 
0001974b l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00019786 l       .debug_str	00000000 
0000c42f l       .debug_str	00000000 
0000c49e l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000195ad l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
00016dc4 l       .debug_str	00000000 
0000c124 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052a00 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c135 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c13f l       .debug_str	00000000 
0000c14a l       .debug_str	00000000 
0000c154 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0002357f l       .debug_str	00000000 
0000c15d l       .debug_str	00000000 
0000c1a3 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
000553ed l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
00023565 l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
00052820 l       .debug_str	00000000 
000235a8 l       .debug_str	00000000 
000582c8 l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00057704 l       .debug_str	00000000 
0000c1cf l       .debug_str	00000000 
00056d5c l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
0000c1d2 l       .debug_str	00000000 
0000c212 l       .debug_str	00000000 
0000c221 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0000c269 l       .debug_str	00000000 
0000c2b0 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
0000c2be l       .debug_str	00000000 
0000c302 l       .debug_str	00000000 
0000c30d l       .debug_str	00000000 
0000c316 l       .debug_str	00000000 
0000c31e l       .debug_str	00000000 
00054605 l       .debug_str	00000000 
0000e90e l       .debug_str	00000000 
00052c5c l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c327 l       .debug_str	00000000 
0000c32d l       .debug_str	00000000 
0000c336 l       .debug_str	00000000 
0000c343 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
0003b994 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c346 l       .debug_str	00000000 
0000c35d l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
00010b99 l       .debug_str	00000000 
0000c373 l       .debug_str	00000000 
0000c379 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c380 l       .debug_str	00000000 
00016cec l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001961c l       .debug_str	00000000 
00057b85 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
200000e8 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000160 l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0000e50e l       .debug_str	00000000 
0000e472 l       .debug_str	00000000 
0000e4b8 l       .debug_str	00000000 
0000e557 l       .debug_str	00000000 
0000e59d l       .debug_str	00000000 
0000e90e l       .debug_str	00000000 
00012fb1 l       .debug_str	00000000 
0000e5d7 l       .debug_str	00000000 
0000e61e l       .debug_str	00000000 
0000e66c l       .debug_str	00000000 
0000e6b8 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c380 l       .debug_str	00000000 
0000c386 l       .debug_str	00000000 
00016cec l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
0001961c l       .debug_str	00000000 
00057b85 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00019667 l       .debug_str	00000000 
00025fd2 l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
00027bcd l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000c3e5 l       .debug_str	00000000 
0001974b l       .debug_str	00000000 
0000c3ef l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00019786 l       .debug_str	00000000 
0000c42f l       .debug_str	00000000 
0000e6f8 l       .debug_str	00000000 
0000e7a4 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e876 l       .debug_str	00000000 
0000e88f l       .debug_str	00000000 
00052c5c l       .debug_str	00000000 
0001fdb4 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0001d8a3 l       .debug_str	00000000 
0000e8df l       .debug_str	00000000 
00038b4e l       .debug_str	00000000 
0001a821 l       .debug_str	00000000 
000356fe l       .debug_str	00000000 
0000e8e2 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
000172b6 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00010925 l       .debug_str	00000000 
00059007 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00023081 l       .debug_str	00000000 
0000e8e9 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00026017 l       .debug_str	00000000 
0000e8f0 l       .debug_str	00000000 
000553ee l       .debug_str	00000000 
0000c1bf l       .debug_str	00000000 
00016dc4 l       .debug_str	00000000 
00054605 l       .debug_str	00000000 
0000e8fc l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000e914 l       .debug_str	00000000 
0000e920 l       .debug_str	00000000 
0000e92c l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000e939 l       .debug_str	00000000 
00059574 l       .debug_str	00000000 
0000e946 l       .debug_str	00000000 
0000e9bd l       .debug_str	00000000 
0000e9c6 l       .debug_str	00000000 
0000e9d4 l       .debug_str	00000000 
000196cd l       .debug_str	00000000 
0000e9ec l       .debug_str	00000000 
0000ea21 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4a5 l       .debug_str	00000000 
0000c4ae l       .debug_str	00000000 
0000c4b8 l       .debug_str	00000000 
0000c4c8 l       .debug_str	00000000 
0000e883 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f1 l       .debug_str	00000000 
0000c4f7 l       .debug_str	00000000 
0000c4fd l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
0000c50a l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c516 l       .debug_str	00000000 
0000c51d l       .debug_str	00000000 
0000c523 l       .debug_str	00000000 
0000c52b l       .debug_str	00000000 
0000c532 l       .debug_str	00000000 
0000c538 l       .debug_str	00000000 
0000c53e l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c54a l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c557 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0000c566 l       .debug_str	00000000 
0000c56e l       .debug_str	00000000 
0000c576 l       .debug_str	00000000 
0000c57d l       .debug_str	00000000 
0000c585 l       .debug_str	00000000 
0000c58c l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c59a l       .debug_str	00000000 
0000c5a1 l       .debug_str	00000000 
0000c5a8 l       .debug_str	00000000 
0000c5af l       .debug_str	00000000 
0000c5b5 l       .debug_str	00000000 
0000c5bb l       .debug_str	00000000 
0000c5c1 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5d6 l       .debug_str	00000000 
0000eaaf l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00056c61 l       .debug_str	00000000 
0000c5e9 l       .debug_str	00000000 
000553ed l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
00023565 l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
00052820 l       .debug_str	00000000 
000235a8 l       .debug_str	00000000 
000582c8 l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00057704 l       .debug_str	00000000 
0000c1cf l       .debug_str	00000000 
00056d5c l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000c5f5 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000c605 l       .debug_str	00000000 
0000c641 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
0000c660 l       .debug_str	00000000 
0000c6ae l       .debug_str	00000000 
0000c6ef l       .debug_str	00000000 
0000c75b l       .debug_str	00000000 
0000c79d l       .debug_str	00000000 
0000c809 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00057f54 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
00054072 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d74c l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
0000dd7f l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00010583 l       .debug_str	00000000 
0002c898 l       .debug_str	00000000 
0000decc l       .debug_str	00000000 
0000df1a l       .debug_str	00000000 
0000e09a l       .debug_str	00000000 
0000e0e8 l       .debug_str	00000000 
0000e129 l       .debug_str	00000000 
0000e177 l       .debug_str	00000000 
0000e1b8 l       .debug_str	00000000 
0000e208 l       .debug_str	00000000 
0000e38a l       .debug_str	00000000 
0000e3db l       .debug_str	00000000 
0000e41f l       .debug_str	00000000 
0001bf40 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0000c5e9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000ea95 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f1 l       .debug_str	00000000 
0000c4f7 l       .debug_str	00000000 
0000c4fd l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
0000c50a l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c516 l       .debug_str	00000000 
0000c51d l       .debug_str	00000000 
0000c523 l       .debug_str	00000000 
0000c52b l       .debug_str	00000000 
0000c532 l       .debug_str	00000000 
0000c538 l       .debug_str	00000000 
0000c53e l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c54a l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c557 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0000c566 l       .debug_str	00000000 
0000c56e l       .debug_str	00000000 
0000c576 l       .debug_str	00000000 
0000c57d l       .debug_str	00000000 
0000c585 l       .debug_str	00000000 
0000c58c l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c59a l       .debug_str	00000000 
0000c5a1 l       .debug_str	00000000 
0000c5a8 l       .debug_str	00000000 
0000c5af l       .debug_str	00000000 
0000c5b5 l       .debug_str	00000000 
0000c5bb l       .debug_str	00000000 
0000c5c1 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5d6 l       .debug_str	00000000 
0000eaaf l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00056c61 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000ea2d l       .debug_str	00000000 
0000ea69 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0000eb0a l       .debug_str	00000000 
0000eaff l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
0000eb48 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000567e0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000eabb l       .debug_str	00000000 
0000a53c l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0000f6d9 l       .debug_str	00000000 
0001009a l       .debug_str	00000000 
000101ed l       .debug_str	00000000 
0001021d l       .debug_str	00000000 
0000c32d l       .debug_str	00000000 
0000c336 l       .debug_str	00000000 
0000c343 l       .debug_str	00000000 
0003b994 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000c346 l       .debug_str	00000000 
0000c35d l       .debug_str	00000000 
00010b99 l       .debug_str	00000000 
00010b7c l       .debug_str	00000000 
00010344 l       .debug_str	00000000 
00010374 l       .debug_str	00000000 
00010c20 l       .debug_str	00000000 
00010bc2 l       .debug_str	00000000 
000103b6 l       .debug_str	00000000 
000103e6 l       .debug_str	00000000 
00010435 l       .debug_str	00000000 
00010465 l       .debug_str	00000000 
00010477 l       .debug_str	00000000 
000104a7 l       .debug_str	00000000 
000104e0 l       .debug_str	00000000 
000104e9 l       .debug_str	00000000 
00010516 l       .debug_str	00000000 
00010559 l       .debug_str	00000000 
0001056f l       .debug_str	00000000 
000106b3 l       .debug_str	00000000 
0001074f l       .debug_str	00000000 
00010819 l       .debug_str	00000000 
00010832 l       .debug_str	00000000 
00010911 l       .debug_str	00000000 
00010a5a l       .debug_str	00000000 
00010b77 l       .debug_str	00000000 
00010baf l       .debug_str	00000000 
00010bf4 l       .debug_str	00000000 
00010bfc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0000eb4e l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
0000eb55 l       .debug_str	00000000 
0000eb5a l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0000eb7f l       .debug_str	00000000 
0000eb86 l       .debug_str	00000000 
0000eb8b l       .debug_str	00000000 
0000ebc6 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
0000ebfd l       .debug_str	00000000 
0000ec2d l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
0000ec40 l       .debug_str	00000000 
0000ec46 l       .debug_str	00000000 
0000ec4d l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000e8e2 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00057f54 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
00054072 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c875 l       .debug_str	00000000 
0000c892 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
0000c8d8 l       .debug_str	00000000 
0000c8e9 l       .debug_str	00000000 
0000c959 l       .debug_str	00000000 
0000c9f3 l       .debug_str	00000000 
0000cab6 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d74c l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
0000ccba l       .debug_str	00000000 
0000cd0a l       .debug_str	00000000 
0000cd67 l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
0000cdbb l       .debug_str	00000000 
0000ce32 l       .debug_str	00000000 
0000ceb6 l       .debug_str	00000000 
0000cf31 l       .debug_str	00000000 
0000cfcf l       .debug_str	00000000 
0000d07a l       .debug_str	00000000 
0000d11c l       .debug_str	00000000 
0000d1e1 l       .debug_str	00000000 
0000d2b3 l       .debug_str	00000000 
0000d37c l       .debug_str	00000000 
0000d468 l       .debug_str	00000000 
0000d561 l       .debug_str	00000000 
0000ec55 l       .debug_str	00000000 
0000ed67 l       .debug_str	00000000 
0000ee96 l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
0000efc4 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00010a6e l       .debug_str	00000000 
0001050d l       .debug_str	00000000 
0000f0ea l       .debug_str	00000000 
0000f11a l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00010529 l       .debug_str	00000000 
0000f151 l       .debug_str	00000000 
0000f181 l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000166ff l       .debug_str	00000000 
0000f1ce l       .debug_str	00000000 
0000f1fe l       .debug_str	00000000 
0000cba3 l       .debug_str	00000000 
0000d651 l       .debug_str	00000000 
0000d764 l       .debug_str	00000000 
0000d884 l       .debug_str	00000000 
0000d99b l       .debug_str	00000000 
0000dad4 l       .debug_str	00000000 
0000dc2a l       .debug_str	00000000 
0000dd7f l       .debug_str	00000000 
00010583 l       .debug_str	00000000 
0000f21e l       .debug_str	00000000 
0000f24e l       .debug_str	00000000 
0000ea26 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
0000f3a7 l       .debug_str	00000000 
0000f3b1 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0001961c l       .debug_str	00000000 
0000f3ba l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00019667 l       .debug_str	00000000 
00025fd2 l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0002c898 l       .debug_str	00000000 
00027bcd l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00027b61 l       .debug_str	00000000 
0000f3c7 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
000106d7 l       .debug_str	00000000 
0000f3d3 l       .debug_str	00000000 
0000f403 l       .debug_str	00000000 
0000f4a9 l       .debug_str	00000000 
0000f4ae l       .debug_str	00000000 
0000f4b4 l       .debug_str	00000000 
0000f4bd l       .debug_str	00000000 
00055066 l       .debug_str	00000000 
00010773 l       .debug_str	00000000 
0000f4c7 l       .debug_str	00000000 
0000f4f7 l       .debug_str	00000000 
0000f5cb l       .debug_str	00000000 
000568a4 l       .debug_str	00000000 
000257b0 l       .debug_str	00000000 
0001082c l       .debug_str	00000000 
0000f5d1 l       .debug_str	00000000 
0000f601 l       .debug_str	00000000 
0000f624 l       .debug_str	00000000 
0000f651 l       .debug_str	00000000 
0000f672 l       .debug_str	00000000 
0000f779 l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0000f853 l       .debug_str	00000000 
0000f8ca l       .debug_str	00000000 
0000f94e l       .debug_str	00000000 
0000f9c9 l       .debug_str	00000000 
0000fa67 l       .debug_str	00000000 
0000fb12 l       .debug_str	00000000 
0000fbb4 l       .debug_str	00000000 
0000fc88 l       .debug_str	00000000 
0000fd79 l       .debug_str	00000000 
0000fe69 l       .debug_str	00000000 
00010846 l       .debug_str	00000000 
0000ff51 l       .debug_str	00000000 
0000ff81 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00010925 l       .debug_str	00000000 
0001006a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
000525c5 l       .debug_str	00000000 
00010c2b l       .debug_str	00000000 
00010c5c l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000195ad l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00010c65 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
00013d49 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010dc9 l       .debug_str	00000000 
00010dd5 l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
00025fb7 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000ea95 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f1 l       .debug_str	00000000 
0000c4f7 l       .debug_str	00000000 
0000c4fd l       .debug_str	00000000 
0000c503 l       .debug_str	00000000 
0000c50a l       .debug_str	00000000 
0000c510 l       .debug_str	00000000 
0000c516 l       .debug_str	00000000 
0000c51d l       .debug_str	00000000 
0000c523 l       .debug_str	00000000 
0000c52b l       .debug_str	00000000 
0000c532 l       .debug_str	00000000 
0000c538 l       .debug_str	00000000 
0000c53e l       .debug_str	00000000 
0000c544 l       .debug_str	00000000 
0000c54a l       .debug_str	00000000 
0000c550 l       .debug_str	00000000 
0000c557 l       .debug_str	00000000 
0000c55e l       .debug_str	00000000 
0000c566 l       .debug_str	00000000 
0000c56e l       .debug_str	00000000 
0000c576 l       .debug_str	00000000 
0000c57d l       .debug_str	00000000 
0000c585 l       .debug_str	00000000 
0000c58c l       .debug_str	00000000 
0000c593 l       .debug_str	00000000 
0000c59a l       .debug_str	00000000 
0000c5a1 l       .debug_str	00000000 
0000c5a8 l       .debug_str	00000000 
0000c5af l       .debug_str	00000000 
0000c5b5 l       .debug_str	00000000 
0000c5bb l       .debug_str	00000000 
0000c5c1 l       .debug_str	00000000 
0000c5c7 l       .debug_str	00000000 
0000c5ce l       .debug_str	00000000 
0000c5d6 l       .debug_str	00000000 
0000eaaf l       .debug_str	00000000 
00010cdb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00010d01 l       .debug_str	00000000 
00010dc2 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
00025fb7 l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e876 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c4a5 l       .debug_str	00000000 
0000c4ae l       .debug_str	00000000 
0000c4b8 l       .debug_str	00000000 
0000c4c8 l       .debug_str	00000000 
0000e883 l       .debug_str	00000000 
00010e9d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00010ec3 l       .debug_str	00000000 
00010dc2 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010dc9 l       .debug_str	00000000 
00010f6a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
00001366 l       .debug_str	00000000 
00011061 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00010dc9 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00010cdb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0005754f l       .debug_str	00000000 
00011011 l       .debug_str	00000000 
0001104a l       .debug_str	00000000 
00025fb7 l       .debug_str	00000000 
00010e9d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
00002330 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c4d9 l       .debug_str	00000000 
00010cdb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
0001109a l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 10fld6rw1cguoaz1
00001366 l       .debug_str	00000000 
000111d3 l       .debug_str	00000000 
0001120f l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
00011218 l       .debug_str	00000000 
0001af17 l       .debug_str	00000000 
00011243 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0002c239 l       .debug_str	00000000 
000112a1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00013c2b l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00011179 l       .debug_str	00000000 
000111c0 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001fde0 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1ewcpkt7vg0rrbln
0001163b l       .debug_str	00000000 
0003b994 l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
00002403 l       .debug_str	00000000 
000119c8 l       .debug_str	00000000 
000119c3 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00053e81 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0005754f l       .debug_str	00000000 
00011352 l       .debug_str	00000000 
000113de l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
00054e09 l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016bf5 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
000113fb l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00011487 l       .debug_str	00000000 
000114bc l       .debug_str	00000000 
000114d6 l       .debug_str	00000000 
0001150b l       .debug_str	00000000 
00011998 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00011525 l       .debug_str	00000000 
00011979 l       .debug_str	00000000 
0001193f l       .debug_str	00000000 
0001155a l       .debug_str	00000000 
00011921 l       .debug_str	00000000 
00011574 l       .debug_str	00000000 
000115aa l       .debug_str	00000000 
000118e8 l       .debug_str	00000000 
000118cc l       .debug_str	00000000 
000115c5 l       .debug_str	00000000 
00011895 l       .debug_str	00000000 
00011879 l       .debug_str	00000000 
00011842 l       .debug_str	00000000 
00011827 l       .debug_str	00000000 
000117f1 l       .debug_str	00000000 
000117d6 l       .debug_str	00000000 
000117a0 l       .debug_str	00000000 
00011785 l       .debug_str	00000000 
0001174f l       .debug_str	00000000 
00011734 l       .debug_str	00000000 
000116fe l       .debug_str	00000000 
000116e3 l       .debug_str	00000000 
000116ad l       .debug_str	00000000 
00011619 l       .debug_str	00000000 
00011d0c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00011a0a l       .debug_str	00000000 
00011a06 l       .debug_str	00000000 
00052c3d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00051939 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000112aa l       .debug_str	00000000 
000166ff l       .debug_str	00000000 
000112ae l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0002c205 l       .debug_str	00000000 
000112b3 l       .debug_str	00000000 
000133df l       .debug_str	00000000 
0001fe17 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00027f4f l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
000112b9 l       .debug_str	00000000 
00013519 l       .debug_str	00000000 
000112bc l       .debug_str	00000000 
00044a89 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0005349b l       .debug_str	00000000 
00057db4 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00011a00 l       .debug_str	00000000 
000119fa l       .debug_str	00000000 
000119f4 l       .debug_str	00000000 
000119ee l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00054e1f l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
00059007 l       .debug_str	00000000 
000024e8 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000195ad l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000119eb l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00025fb7 l       .debug_str	00000000 
000112bf l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
00052a00 l       .debug_str	00000000 
00054b32 l       .debug_str	00000000 
000524c1 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
000112c7 l       .debug_str	00000000 
000112d3 l       .debug_str	00000000 
000112de l       .debug_str	00000000 
000112eb l       .debug_str	00000000 
000112f9 l       .debug_str	00000000 
00011308 l       .debug_str	00000000 
00012e03 l       .debug_str	00000000 
000119a7 l       .debug_str	00000000 
0001131a l       .debug_str	00000000 
00011340 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
0001134a l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
000119e7 l       .debug_str	00000000 
00012e4b l       .debug_str	00000000 
00013ab8 l       .debug_str	00000000 
00013b2a l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
000119de l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
0001c0b0 l     O .text	0000001c str.0
0001c330 l     O .text	00000021 str.1
0001c610 l     O .text	00000039 str.2
0001c670 l     O .text	00000021 str.3
0001c6b0 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 1expeypgojy7j7ax
000031f0 l       .debug_str	00000000 
00011a0f l       .debug_str	00000000 
00011a4f l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00017357 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a411 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
000572ce l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00051d13 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00058109 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00055658 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00004384 l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000057fc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1rlfak9oa38tk11p
00011b3d l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
00011b7c l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00011bef l       .debug_str	00000000 
00011c2e l       .debug_str	00000000 
00011d0c l       .debug_str	00000000 
00011c6b l       .debug_str	00000000 
00011cce l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00011cf5 l       .debug_str	00000000 
000524c1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e40c l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
00011a9f l       .debug_str	00000000 
00011b34 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00054e09 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016bf5 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
0005754f l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2qmowyvqdyca5tsh
00011ef5 l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00011d5a l       .debug_str	00000000 
00011d9f l       .debug_str	00000000 
00011dac l       .debug_str	00000000 
00011df1 l       .debug_str	00000000 
00011dfe l       .debug_str	00000000 
00011e43 l       .debug_str	00000000 
00011e50 l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
00011ea2 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
00011eea l       .debug_str	00000000 
0000c0b6 l       .debug_str	00000000 
00011f3d l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00011f83 l       .debug_str	00000000 
00011fc9 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
000549ca l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000567e0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00011d16 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 31071ffymf9y6tnj
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00052492 l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
00054e09 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016bf5 l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
0001200f l       .debug_str	00000000 
0001208b l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 33bdok1lz3m5vvyy
00016a30 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000120b8 l       .debug_str	00000000 
00012114 l       .debug_str	00000000 
0001210a l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
000524c1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3jm8kpc30rum4biz
0001221b l       .debug_str	00000000 
000119de l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00013b2a l       .debug_str	00000000 
00013ab8 l       .debug_str	00000000 
000121ac l       .debug_str	00000000 
000121ed l       .debug_str	00000000 
0001225c l       .debug_str	00000000 
000122bf l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
0001230f l       .debug_str	00000000 
0001238f l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00012403 l       .debug_str	00000000 
00012483 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e40c l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
00054e09 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016bf5 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
0005754f l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0001211b l       .debug_str	00000000 
0001215e l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
0003b994 l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3tdzqkid9cxb86kn
00012cee l       .debug_str	00000000 
00012718 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00012721 l       .debug_str	00000000 
00023027 l       .debug_str	00000000 
0001274d l       .debug_str	00000000 
00037717 l       .debug_str	00000000 
0001277c l       .debug_str	00000000 
000526df l       .debug_str	00000000 
000127d6 l       .debug_str	00000000 
000356fd l       .debug_str	00000000 
0001282f l       .debug_str	00000000 
0001288d l       .debug_str	00000000 
00012896 l       .debug_str	00000000 
000128f4 l       .debug_str	00000000 
000128fd l       .debug_str	00000000 
00012960 l       .debug_str	00000000 
0001296d l       .debug_str	00000000 
000129cc l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
000129d6 l       .debug_str	00000000 
00012a31 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00012a37 l       .debug_str	00000000 
00012a91 l       .debug_str	00000000 
00012a96 l       .debug_str	00000000 
000539a2 l       .debug_str	00000000 
00012af1 l       .debug_str	00000000 
00012b22 l       .debug_str	00000000 
00012b30 l       .debug_str	00000000 
00012b60 l       .debug_str	00000000 
00012b6d l       .debug_str	00000000 
00012ba2 l       .debug_str	00000000 
00012be5 l       .debug_str	00000000 
00012bf6 l       .debug_str	00000000 
00012c33 l       .debug_str	00000000 
00012c3e l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00012cb1 l       .debug_str	00000000 
00012cbd l       .debug_str	00000000 
00012cfc l       .debug_str	00000000 
00012d2c l       .debug_str	00000000 
00012d39 l       .debug_str	00000000 
00012d69 l       .debug_str	00000000 
00012d76 l       .debug_str	00000000 
00012dd2 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
0000f3a7 l       .debug_str	00000000 
0000f3b1 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
0001961c l       .debug_str	00000000 
0000f3ba l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00019667 l       .debug_str	00000000 
00025fd2 l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
0002c898 l       .debug_str	00000000 
00027bcd l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00027af6 l       .debug_str	00000000 
00052c5c l       .debug_str	00000000 
00057e29 l       .debug_str	00000000 
00012ddd l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
000112b9 l       .debug_str	00000000 
00013519 l       .debug_str	00000000 
000112bc l       .debug_str	00000000 
00044a89 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0005349b l       .debug_str	00000000 
00057db4 l       .debug_str	00000000 
00025fb7 l       .debug_str	00000000 
000112bf l       .debug_str	00000000 
00052a00 l       .debug_str	00000000 
000119a7 l       .debug_str	00000000 
00053e81 l       .debug_str	00000000 
00012de6 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00012df2 l       .debug_str	00000000 
000356fc l       .debug_str	00000000 
00013c30 l       .debug_str	00000000 
0003e637 l       .debug_str	00000000 
00053cf9 l       .debug_str	00000000 
000112da l       .debug_str	00000000 
000112e5 l       .debug_str	00000000 
000112f2 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00012e0c l       .debug_str	00000000 
00012b67 l       .debug_str	00000000 
00012e13 l       .debug_str	00000000 
00012e21 l       .debug_str	00000000 
00012e2e l       .debug_str	00000000 
00012e3d l       .debug_str	00000000 
00012e4d l       .debug_str	00000000 
00012e5a l       .debug_str	00000000 
00012e66 l       .debug_str	00000000 
00012e74 l       .debug_str	00000000 
00012e83 l       .debug_str	00000000 
00012e95 l       .debug_str	00000000 
00012eab l       .debug_str	00000000 
000281a9 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00012ec6 l       .debug_str	00000000 
0000232f l       .debug_str	00000000 
00002335 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012ecb l       .debug_str	00000000 
00012ed6 l       .debug_str	00000000 
00012ee2 l       .debug_str	00000000 
00012eed l       .debug_str	00000000 
00012ef8 l       .debug_str	00000000 
00012f03 l       .debug_str	00000000 
00012f0e l       .debug_str	00000000 
00012f19 l       .debug_str	00000000 
00012f24 l       .debug_str	00000000 
00012f2f l       .debug_str	00000000 
00012f3a l       .debug_str	00000000 
00012f45 l       .debug_str	00000000 
00012f50 l       .debug_str	00000000 
00012f5c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00054b32 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
000124c1 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a411 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
000572ce l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00051d13 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00058109 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
000124cc l       .debug_str	00000000 
000124fa l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001250b l       .debug_str	00000000 
0001253f l       .debug_str	00000000 
0001254d l       .debug_str	00000000 
0001257e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0003a895 l       .debug_str	00000000 
00012596 l       .debug_str	00000000 
000125ae l       .debug_str	00000000 
000125e9 l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00012609 l       .debug_str	00000000 
0001261a l       .debug_str	00000000 
00012638 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000112c7 l       .debug_str	00000000 
000112d3 l       .debug_str	00000000 
000112de l       .debug_str	00000000 
000112eb l       .debug_str	00000000 
000112f9 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
00011308 l       .debug_str	00000000 
00012e03 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012673 l       .debug_str	00000000 
0001267c l       .debug_str	00000000 
00012685 l       .debug_str	00000000 
00012690 l       .debug_str	00000000 
0001269c l       .debug_str	00000000 
000126a6 l       .debug_str	00000000 
000126b3 l       .debug_str	00000000 
000126c1 l       .debug_str	00000000 
000126d0 l       .debug_str	00000000 
000126dd l       .debug_str	00000000 
000281ba l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
000126ed l       .debug_str	00000000 
20000164 l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17hff5b4dd283ecf9fcE
0000fca4 l     F .text	000000a8 _ZN3app5chip812render_block17h6c8b81526965606bE
000103b2 l     F .text	00000088 _ZN3app5chip812update_color17h39b5eb1e5de90ff7E
0000ffae l     F .text	00000022 _ZN3app5chip813PixelIterator10get_window17h854aa1964c599aa2E
0000fdf0 l     F .text	000001be _ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE
0000fd4c l     F .text	000000a4 _ZN3app5chip813PixelIterator3new17he6370a46ee33b7bcE
200041b4 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17hb69bb065c68bd165E
00010298 l     F .text	0000011a _ZN3app5chip813convert_color17h69ad441a1103d8f7E
0000f9a2 l     F .text	00000302 _ZN3app5chip813render_region17hc692a4d55cab74f0E
200001b4 l     O .bss	00004000 _ZN3app5chip816CHIP8_TASK_STACK17hdcbcc41748325ebbE
0001e490 l     O .text	00000004 _ZN3app5chip823VIRTUAL_TO_PHYSICAL_MAP17h40eacc1cd7c38417E
0000f3f6 l     F .text	00000010 _ZN3app5chip88Hardware3new17h53332fc09faf36beE
0000f340 l     F .text	000000b6 _ZN3app5chip89task_func17h20d1a4715d78a45aE
0001d9a0 l     O .text	00000021 str.0
0001d9e0 l     O .text	0000001c str.1
0001dac0 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 3zmcssigt164od5g
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fe78 l       .debug_str	00000000 
0001fe6c l       .debug_str	00000000 
00057e2a l       .debug_str	00000000 
000552e5 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
000572ce l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00051d13 l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00058109 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00004384 l       .debug_str	00000000 
00056435 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
00054e09 l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016bf5 l       .debug_str	00000000 
00059007 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00054072 l       .debug_str	00000000 
00013301 l       .debug_str	00000000 
00013328 l       .debug_str	00000000 
00013330 l       .debug_str	00000000 
00013337 l       .debug_str	00000000 
0001333d l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
00054e1f l       .debug_str	00000000 
0001334a l       .debug_str	00000000 
00013359 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00013367 l       .debug_str	00000000 
0001336c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00054b32 l       .debug_str	00000000 
000131a8 l       .debug_str	00000000 
00012f68 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
00052820 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000235a8 l       .debug_str	00000000 
00012f74 l       .debug_str	00000000 
00012fab l       .debug_str	00000000 
0000e90e l       .debug_str	00000000 
00012fb7 l       .debug_str	00000000 
00012fee l       .debug_str	00000000 
00012ff9 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00013001 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013008 l       .debug_str	00000000 
0001300f l       .debug_str	00000000 
000581a7 l       .debug_str	00000000 
00013018 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000529e3 l       .debug_str	00000000 
00013022 l       .debug_str	00000000 
00013319 l       .debug_str	00000000 
0001302c l       .debug_str	00000000 
0001a9fa l       .debug_str	00000000 
00013062 l       .debug_str	00000000 
00013090 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a411 l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
00055658 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
0001309c l       .debug_str	00000000 
000130d3 l       .debug_str	00000000 
00052a00 l       .debug_str	00000000 
00057cdb l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
00057f54 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
000130dc l       .debug_str	00000000 
000130f0 l       .debug_str	00000000 
00013123 l       .debug_str	00000000 
0001312e l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00013164 l       .debug_str	00000000 
000131a2 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
000131b5 l       .debug_str	00000000 
000131f8 l       .debug_str	00000000 
00013210 l       .debug_str	00000000 
00013250 l       .debug_str	00000000 
00013265 l       .debug_str	00000000 
0001329f l       .debug_str	00000000 
000132ae l       .debug_str	00000000 
000132ed l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
00052c5c l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000195a3 l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000312f3 l       .debug_str	00000000 
000549dc l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
20004a64 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h59a4aa8a83a81f4aE
200049b8 l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h163add160b6b9aeeE
200049b8 l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h441481867ef0356fE
20004a4c l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17h8cf0280828a4287dE
200049b4 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17h4fe28d66de6f4ab2E
0001085e l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E
00010fb0 l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E
00010724 l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E
000106d8 l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E
20004a0a l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h040da56764e02a75E
20004a5c l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17hacfa42d26b44dc46E
0001e5d0 l     O .text	00000021 str.0
0001e610 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 4lznhndqn2vyhgat
0001fd2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00051939 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000166ff l       .debug_str	00000000 
000112ae l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000133d9 l       .debug_str	00000000 
0002c205 l       .debug_str	00000000 
000112b3 l       .debug_str	00000000 
0001fe17 l       .debug_str	00000000 
000112aa l       .debug_str	00000000 
000133df l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013370 l       .debug_str	00000000 
00019d0e l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0001fe11 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n402vs8u2uo93u9
00013437 l       .debug_str	00000000 
0000e8df l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00038b4e l       .debug_str	00000000 
0001a821 l       .debug_str	00000000 
000356fe l       .debug_str	00000000 
0000e8e2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c10d l       .debug_str	00000000 
00016dc4 l       .debug_str	00000000 
00054b32 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012673 l       .debug_str	00000000 
0001267c l       .debug_str	00000000 
00012685 l       .debug_str	00000000 
00012690 l       .debug_str	00000000 
0001269c l       .debug_str	00000000 
000126a6 l       .debug_str	00000000 
000126b3 l       .debug_str	00000000 
000126c1 l       .debug_str	00000000 
000126d0 l       .debug_str	00000000 
000126dd l       .debug_str	00000000 
000281ba l       .debug_str	00000000 
000281a9 l       .debug_str	00000000 
0002c898 l       .debug_str	00000000 
000133eb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4op4c7h4jps44h2j
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fe78 l       .debug_str	00000000 
0001346a l       .debug_str	00000000 
000134a7 l       .debug_str	00000000 
000134b8 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000312f3 l       .debug_str	00000000 
000549dc l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 50njrjlotjql8eh3
0001355c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000134ea l       .debug_str	00000000 
000134ef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000134f6 l       .debug_str	00000000 
000134fe l       .debug_str	00000000 
0000c144 l       .debug_str	00000000 
00013506 l       .debug_str	00000000 
0001350e l       .debug_str	00000000 
00013515 l       .debug_str	00000000 
00016fb9 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0001351c l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001feaf l       .debug_str	00000000 
00013571 l       .debug_str	00000000 
00013521 l       .debug_str	00000000 
0002bbac l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53ibzm1eooc9qec2
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
0001357d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000135d6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00013585 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 9p7wjmcx8ujsz0s
00013612 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000135e3 l       .debug_str	00000000 
00013609 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 mka4gzufox8dws5
0001361a l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001364a l       .debug_str	00000000 
0001365d l       .debug_str	00000000 
0000a666 l       .debug_str	00000000 
0001368d l       .debug_str	00000000 
0000a948 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nnlkt1k56qesyal
00013844 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000f00 l       .debug_str	00000000 
00000f82 l       .debug_str	00000000 
000137b0 l       .debug_str	00000000 
0001388d l       .debug_str	00000000 
000138d7 l       .debug_str	00000000 
0001392a l       .debug_str	00000000 
000139b9 l       .debug_str	00000000 
00013a1c l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013a94 l       .debug_str	00000000 
00013b06 l       .debug_str	00000000 
00013bc4 l       .debug_str	00000000 
00052c5c l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
00000e52 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0003b994 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
00054e09 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016bf5 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00003e2b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
0005754f l       .debug_str	00000000 
00000e6d l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000137e l       .debug_str	00000000 
000119de l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00013b2a l       .debug_str	00000000 
00013ab8 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00013696 l       .debug_str	00000000 
00013720 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 r34gpska6wbd31
00012ee2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013bc8 l       .debug_str	00000000 
0002bac6 l       .debug_str	00000000 
0000eb55 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00013c2b l       .debug_str	00000000 
00013c1f l       .debug_str	00000000 
0001fd2b l       .debug_str	00000000 
00013c32 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 rclpy9fcvorr8wf
00013692 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000565c4 l       .debug_str	00000000 
00027f4f l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0001fd2b l       .debug_str	00000000 
00013c3d l       .debug_str	00000000 
00013bc5 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
000152eb l       .debug_str	00000000 
000142e6 l       .debug_str	00000000 
00014310 l       .debug_str	00000000 
0001435e l       .debug_str	00000000 
00014366 l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
000143b3 l       .debug_str	00000000 
0001440d l       .debug_str	00000000 
0001441b l       .debug_str	00000000 
0001446e l       .debug_str	00000000 
00014476 l       .debug_str	00000000 
0001210a l       .debug_str	00000000 
000144cb l       .debug_str	00000000 
00014509 l       .debug_str	00000000 
00014524 l       .debug_str	00000000 
00014583 l       .debug_str	00000000 
00013bc5 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
000145e8 l       .debug_str	00000000 
00014619 l       .debug_str	00000000 
00014624 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00014656 l       .debug_str	00000000 
00014684 l       .debug_str	00000000 
00014696 l       .debug_str	00000000 
000146bc l       .debug_str	00000000 
000146c8 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
0001470f l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c0c6 l       .debug_str	00000000 
0001475a l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
00014760 l       .debug_str	00000000 
000147ec l       .debug_str	00000000 
00014807 l       .debug_str	00000000 
00014837 l       .debug_str	00000000 
0001486c l       .debug_str	00000000 
0001489c l       .debug_str	00000000 
000148b2 l       .debug_str	00000000 
000148e8 l       .debug_str	00000000 
00014903 l       .debug_str	00000000 
0001493d l       .debug_str	00000000 
0001495c l       .debug_str	00000000 
00014998 l       .debug_str	00000000 
000149be l       .debug_str	00000000 
000149ca l       .debug_str	00000000 
000149f1 l       .debug_str	00000000 
000149fe l       .debug_str	00000000 
00014c0b l       .debug_str	00000000 
00014a4c l       .debug_str	00000000 
00014c7b l       .debug_str	00000000 
00014a9d l       .debug_str	00000000 
00014aef l       .debug_str	00000000 
00014afb l       .debug_str	00000000 
00014b46 l       .debug_str	00000000 
00014b58 l       .debug_str	00000000 
00014b9b l       .debug_str	00000000 
00014ba6 l       .debug_str	00000000 
00014c02 l       .debug_str	00000000 
00014c13 l       .debug_str	00000000 
00014c72 l       .debug_str	00000000 
00014c86 l       .debug_str	00000000 
00014cdc l       .debug_str	00000000 
00014d71 l       .debug_str	00000000 
00014d7d l       .debug_str	00000000 
00014e17 l       .debug_str	00000000 
00014e28 l       .debug_str	00000000 
00014e4d l       .debug_str	00000000 
00014ef6 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
00014f07 l       .debug_str	00000000 
00014f8f l       .debug_str	00000000 
00014f46 l       .debug_str	00000000 
00014f8a l       .debug_str	00000000 
00014fd4 l       .debug_str	00000000 
00015015 l       .debug_str	00000000 
0001503a l       .debug_str	00000000 
0001508b l       .debug_str	00000000 
000150d0 l       .debug_str	00000000 
00015123 l       .debug_str	00000000 
00015184 l       .debug_str	00000000 
000151eb l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
00015232 l       .debug_str	00000000 
0001527d l       .debug_str	00000000 
0001528a l       .debug_str	00000000 
00015364 l       .debug_str	00000000 
0001535c l       .debug_str	00000000 
0001536c l       .debug_str	00000000 
00003d4f l       .debug_str	00000000 
00015388 l       .debug_str	00000000 
000153fd l       .debug_str	00000000 
00015428 l       .debug_str	00000000 
000154a1 l       .debug_str	00000000 
000154ab l       .debug_str	00000000 
000154d1 l       .debug_str	00000000 
0001550a l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
00015522 l       .debug_str	00000000 
0001555b l       .debug_str	00000000 
00015593 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
000155cc l       .debug_str	00000000 
00015607 l       .debug_str	00000000 
0001564b l       .debug_str	00000000 
00015691 l       .debug_str	00000000 
000156cd l       .debug_str	00000000 
000156f5 l       .debug_str	00000000 
00015731 l       .debug_str	00000000 
00015755 l       .debug_str	00000000 
000157b2 l       .debug_str	00000000 
000157c6 l       .debug_str	00000000 
00015817 l       .debug_str	00000000 
000166ff l       .debug_str	00000000 
00015823 l       .debug_str	00000000 
00015874 l       .debug_str	00000000 
0001588b l       .debug_str	00000000 
000158dc l       .debug_str	00000000 
000158fa l       .debug_str	00000000 
0001594b l       .debug_str	00000000 
0001595d l       .debug_str	00000000 
000159b5 l       .debug_str	00000000 
000159cb l       .debug_str	00000000 
00015a2e l       .debug_str	00000000 
00015a59 l       .debug_str	00000000 
00015abc l       .debug_str	00000000 
00015b31 l       .debug_str	00000000 
00015b95 l       .debug_str	00000000 
00015b9f l       .debug_str	00000000 
00015c0a l       .debug_str	00000000 
00015c19 l       .debug_str	00000000 
00015c85 l       .debug_str	00000000 
00015cb7 l       .debug_str	00000000 
00015cdd l       .debug_str	00000000 
00015d4c l       .debug_str	00000000 
00015d6c l       .debug_str	00000000 
00015ddc l       .debug_str	00000000 
00015dfd l       .debug_str	00000000 
00011b34 l       .debug_str	00000000 
00015e71 l       .debug_str	00000000 
00015ef1 l       .debug_str	00000000 
00015f37 l       .debug_str	00000000 
00015f60 l       .debug_str	00000000 
00015f67 l       .debug_str	00000000 
00015f9f l       .debug_str	00000000 
00015fde l       .debug_str	00000000 
00015fe5 l       .debug_str	00000000 
0001605e l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
000160f5 l       .debug_str	00000000 
00016173 l       .debug_str	00000000 
0001617d l       .debug_str	00000000 
0001620b l       .debug_str	00000000 
000162b7 l       .debug_str	00000000 
000162fe l       .debug_str	00000000 
0001630b l       .debug_str	00000000 
00016358 l       .debug_str	00000000 
0001636b l       .debug_str	00000000 
000163bd l       .debug_str	00000000 
0001642d l       .debug_str	00000000 
00014029 l       .debug_str	00000000 
0001648d l       .debug_str	00000000 
0001649e l       .debug_str	00000000 
00016503 l       .debug_str	00000000 
00016533 l       .debug_str	00000000 
0001653c l       .debug_str	00000000 
00016578 l       .debug_str	00000000 
0001658c l       .debug_str	00000000 
000165c7 l       .debug_str	00000000 
0001660d l       .debug_str	00000000 
0001662b l       .debug_str	00000000 
0001665b l       .debug_str	00000000 
00016664 l       .debug_str	00000000 
0001669e l       .debug_str	00000000 
000166b0 l       .debug_str	00000000 
000166de l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000166e5 l       .debug_str	00000000 
000166f1 l       .debug_str	00000000 
000166fb l       .debug_str	00000000 
00016705 l       .debug_str	00000000 
00016728 l       .debug_str	00000000 
0002bac6 l       .debug_str	00000000 
0001677d l       .debug_str	00000000 
000167dd l       .debug_str	00000000 
000167e9 l       .debug_str	00000000 
00016839 l       .debug_str	00000000 
0001689c l       .debug_str	00000000 
00016903 l       .debug_str	00000000 
00016972 l       .debug_str	00000000 
00052c5c l       .debug_str	00000000 
00013bc4 l       .debug_str	00000000 
00016a02 l       .debug_str	00000000 
00053cf9 l       .debug_str	00000000 
000112e5 l       .debug_str	00000000 
0000c144 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0001fd2b l       .debug_str	00000000 
000524c1 l       .debug_str	00000000 
00012114 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00016a29 l       .debug_str	00000000 
00052c3d l       .debug_str	00000000 
00016a36 l       .debug_str	00000000 
000529e3 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00016a41 l       .debug_str	00000000 
00059007 l       .debug_str	00000000 
00016a95 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
000549ca l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00016aa0 l       .debug_str	00000000 
00016acb l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016ad7 l       .debug_str	00000000 
00016b11 l       .debug_str	00000000 
00016b4a l       .debug_str	00000000 
00016b59 l       .debug_str	00000000 
00016b9c l       .debug_str	00000000 
00053f0e l       .debug_str	00000000 
00030899 l       .debug_str	00000000 
00055933 l       .debug_str	00000000 
00016bde l       .debug_str	00000000 
00016c02 l       .debug_str	00000000 
00016178 l       .debug_str	00000000 
00052492 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00016c22 l       .debug_str	00000000 
0003e637 l       .debug_str	00000000 
00016c5d l       .debug_str	00000000 
00016c64 l       .debug_str	00000000 
0002f233 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00016ca5 l       .debug_str	00000000 
00016cec l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
000201dc l       .debug_str	00000000 
00016cc6 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000172b6 l       .debug_str	00000000 
00016ce8 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012ecb l       .debug_str	00000000 
00012ed6 l       .debug_str	00000000 
00012ee2 l       .debug_str	00000000 
00012ecf l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b84b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00013c9f l       .debug_str	00000000 
00013cf7 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00013d44 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00013d4e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00013d5a l       .debug_str	00000000 
00016ab1 l       .debug_str	00000000 
00016aa5 l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000565c4 l       .debug_str	00000000 
0002d5b8 l       .debug_str	00000000 
00013d6b l       .debug_str	00000000 
00013d70 l       .debug_str	00000000 
00013d76 l       .debug_str	00000000 
00016fb9 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013d7e l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
00013d84 l       .debug_str	00000000 
00027f4f l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000312f3 l       .debug_str	00000000 
000549dc l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fe78 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
000567e0 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013d8f l       .debug_str	00000000 
00013db8 l       .debug_str	00000000 
00013dc7 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00016b53 l       .debug_str	00000000 
00013de1 l       .debug_str	00000000 
00013e0a l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00013e3f l       .debug_str	00000000 
00013e53 l       .debug_str	00000000 
00013e66 l       .debug_str	00000000 
00013eb2 l       .debug_str	00000000 
00013ec0 l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
0002d592 l       .debug_str	00000000 
00013ec8 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e40c l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00014019 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
0005754f l       .debug_str	00000000 
00016c7f l       .debug_str	00000000 
0003b994 l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
00013ed2 l       .debug_str	00000000 
00054e09 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016bf5 l       .debug_str	00000000 
00054072 l       .debug_str	00000000 
000154c3 l       .debug_str	00000000 
00016c35 l       .debug_str	00000000 
000119de l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00016996 l       .debug_str	00000000 
00016927 l       .debug_str	00000000 
00013ed8 l       .debug_str	00000000 
00013ede l       .debug_str	00000000 
00013f07 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
000154ac l       .debug_str	00000000 
00013f13 l       .debug_str	00000000 
0001357d l       .debug_str	00000000 
00013f40 l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
00013f4b l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00013f74 l       .debug_str	00000000 
00013f7b l       .debug_str	00000000 
00013fa5 l       .debug_str	00000000 
00020efc l       .debug_str	00000000 
00013fa9 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
00013fb2 l       .debug_str	00000000 
00013ff4 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00014007 l       .debug_str	00000000 
00057459 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00042ce6 l       .debug_str	00000000 
00014022 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00014031 l       .debug_str	00000000 
0001403b l       .debug_str	00000000 
00016cd2 l       .debug_str	00000000 
00016499 l       .debug_str	00000000 
00014040 l       .debug_str	00000000 
000140c6 l       .debug_str	00000000 
000140d0 l       .debug_str	00000000 
00014162 l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
000141a8 l       .debug_str	00000000 
0001423c l       .debug_str	00000000 
0001429e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
000176ae l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
000567e0 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000312f3 l       .debug_str	00000000 
000549dc l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fe78 l       .debug_str	00000000 
0000eb4e l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001961c l       .debug_str	00000000 
0000c380 l       .debug_str	00000000 
0000c3e5 l       .debug_str	00000000 
00016da5 l       .debug_str	00000000 
00016dae l       .debug_str	00000000 
00016db6 l       .debug_str	00000000 
00016dbf l       .debug_str	00000000 
0002c898 l       .debug_str	00000000 
00016dcc l       .debug_str	00000000 
00016ddc l       .debug_str	00000000 
00016ded l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00019667 l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
00016dfe l       .debug_str	00000000 
0000e9c6 l       .debug_str	00000000 
0000e9d4 l       .debug_str	00000000 
000196cd l       .debug_str	00000000 
00016e07 l       .debug_str	00000000 
00016e0d l       .debug_str	00000000 
00016e18 l       .debug_str	00000000 
00016e22 l       .debug_str	00000000 
00016e2c l       .debug_str	00000000 
0000b963 l       .debug_str	00000000 
00016e74 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
00016ebc l       .debug_str	00000000 
00016f04 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00016f0d l       .debug_str	00000000 
00016f36 l       .debug_str	00000000 
00016f3f l       .debug_str	00000000 
00016f9c l       .debug_str	00000000 
0005754f l       .debug_str	00000000 
00016fc2 l       .debug_str	00000000 
00016fea l       .debug_str	00000000 
0001701c l       .debug_str	00000000 
00014619 l       .debug_str	00000000 
0001704d l       .debug_str	00000000 
000170aa l       .debug_str	00000000 
00017107 l       .debug_str	00000000 
00017164 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00017196 l       .debug_str	00000000 
000171db l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
000171e7 l       .debug_str	00000000 
00051a59 l       .debug_str	00000000 
00017223 l       .debug_str	00000000 
0000eaff l       .debug_str	00000000 
00017267 l       .debug_str	00000000 
000172ae l       .debug_str	00000000 
000172bc l       .debug_str	00000000 
00017303 l       .debug_str	00000000 
00017311 l       .debug_str	00000000 
00017351 l       .debug_str	00000000 
00017359 l       .debug_str	00000000 
0000eb86 l       .debug_str	00000000 
00017366 l       .debug_str	00000000 
000173a1 l       .debug_str	00000000 
000173df l       .debug_str	00000000 
0001740f l       .debug_str	00000000 
00017423 l       .debug_str	00000000 
00017453 l       .debug_str	00000000 
00017467 l       .debug_str	00000000 
00017497 l       .debug_str	00000000 
000174ab l       .debug_str	00000000 
00037717 l       .debug_str	00000000 
000174f6 l       .debug_str	00000000 
0001754d l       .debug_str	00000000 
0001755c l       .debug_str	00000000 
000175a7 l       .debug_str	00000000 
0000bfaf l       .debug_str	00000000 
0001761e l       .debug_str	00000000 
000176a3 l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
00017725 l       .debug_str	00000000 
000177aa l       .debug_str	00000000 
000177b5 l       .debug_str	00000000 
00052492 l       .debug_str	00000000 
0001783e l       .debug_str	00000000 
0002064a l       .debug_str	00000000 
000178b5 l       .debug_str	00000000 
00053e80 l       .debug_str	00000000 
0001794a l       .debug_str	00000000 
000179e1 l       .debug_str	00000000 
00017a7c l       .debug_str	00000000 
00017b11 l       .debug_str	00000000 
00017ba8 l       .debug_str	00000000 
00017c43 l       .debug_str	00000000 
00017d0b l       .debug_str	00000000 
00017d16 l       .debug_str	00000000 
00017de2 l       .debug_str	00000000 
00017e72 l       .debug_str	00000000 
00017e7e l       .debug_str	00000000 
00017f24 l       .debug_str	00000000 
00017f30 l       .debug_str	00000000 
00017fd4 l       .debug_str	00000000 
00018076 l       .debug_str	00000000 
0001811a l       .debug_str	00000000 
0001816e l       .debug_str	00000000 
000181c3 l       .debug_str	00000000 
00018218 l       .debug_str	00000000 
00014029 l       .debug_str	00000000 
0001829b l       .debug_str	00000000 
0001831f l       .debug_str	00000000 
000183a3 l       .debug_str	00000000 
0000282b l       .debug_str	00000000 
000183ea l       .debug_str	00000000 
00002831 l       .debug_str	00000000 
00018431 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00018478 l       .debug_str	00000000 
000184f6 l       .debug_str	00000000 
00018575 l       .debug_str	00000000 
00018610 l       .debug_str	00000000 
000186a4 l       .debug_str	00000000 
000186f1 l       .debug_str	00000000 
000186fd l       .debug_str	00000000 
00018760 l       .debug_str	00000000 
000187a8 l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
000187b0 l       .debug_str	00000000 
00018844 l       .debug_str	00000000 
000188aa l       .debug_str	00000000 
0001893b l       .debug_str	00000000 
000189da l       .debug_str	00000000 
00018a6b l       .debug_str	00000000 
00018b0a l       .debug_str	00000000 
00018bac l       .debug_str	00000000 
00018c3d l       .debug_str	00000000 
00018ceb l       .debug_str	00000000 
00018d9b l       .debug_str	00000000 
00018e4f l       .debug_str	00000000 
00018f42 l       .debug_str	00000000 
00018f4d l       .debug_str	00000000 
00019044 l       .debug_str	00000000 
000190f0 l       .debug_str	00000000 
000190fa l       .debug_str	00000000 
0001916c l       .debug_str	00000000 
000191e1 l       .debug_str	00000000 
00019254 l       .debug_str	00000000 
000192c5 l       .debug_str	00000000 
00019338 l       .debug_str	00000000 
000193af l       .debug_str	00000000 
00019424 l       .debug_str	00000000 
00019499 l       .debug_str	00000000 
00019509 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
00019595 l       .debug_str	00000000 
0001fd2b l       .debug_str	00000000 
0001959b l       .debug_str	00000000 
0001435e l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
00016a41 l       .debug_str	00000000 
000172b6 l       .debug_str	00000000 
0001959e l       .debug_str	00000000 
000195a8 l       .debug_str	00000000 
000195b2 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
000195bc l       .debug_str	00000000 
000195ed l       .debug_str	00000000 
00059574 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
00019622 l       .debug_str	00000000 
0001962c l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00019636 l       .debug_str	00000000 
0001963f l       .debug_str	00000000 
0001966e l       .debug_str	00000000 
0001967b l       .debug_str	00000000 
0001967e l       .debug_str	00000000 
00019681 l       .debug_str	00000000 
00019684 l       .debug_str	00000000 
00019687 l       .debug_str	00000000 
0001968a l       .debug_str	00000000 
0001968d l       .debug_str	00000000 
000196db l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012ecf l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
00012ee2 l       .debug_str	00000000 
00012eed l       .debug_str	00000000 
0001974b l       .debug_str	00000000 
00019725 l       .debug_str	00000000 
0001977e l       .debug_str	00000000 
00019759 l       .debug_str	00000000 
000197af l       .debug_str	00000000 
0001978b l       .debug_str	00000000 
000197e0 l       .debug_str	00000000 
000197bb l       .debug_str	00000000 
00019814 l       .debug_str	00000000 
000197ed l       .debug_str	00000000 
00019849 l       .debug_str	00000000 
00019823 l       .debug_str	00000000 
0001987d l       .debug_str	00000000 
00019857 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00016cf0 l       .debug_str	00000000 
00016d50 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000195a3 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
000195ad l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000195b7 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000565c4 l       .debug_str	00000000 
0002d5b8 l       .debug_str	00000000 
00013d6b l       .debug_str	00000000 
00013d70 l       .debug_str	00000000 
00013d76 l       .debug_str	00000000 
00016fb9 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000304a9 l       .debug_str	00000000 
00027f4f l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00011670 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
0001594b l       .debug_str	00000000 
00019d58 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0000c0c6 l       .debug_str	00000000 
00019da3 l       .debug_str	00000000 
000148e8 l       .debug_str	00000000 
00019dd9 l       .debug_str	00000000 
0001493d l       .debug_str	00000000 
00019e13 l       .debug_str	00000000 
00019e4f l       .debug_str	00000000 
000149be l       .debug_str	00000000 
00019e75 l       .debug_str	00000000 
000149f1 l       .debug_str	00000000 
00019e9c l       .debug_str	00000000 
00014c0b l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00019eea l       .debug_str	00000000 
00014c7b l       .debug_str	00000000 
00019f3b l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00019f8d l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
00019fe2 l       .debug_str	00000000 
00014d71 l       .debug_str	00000000 
0001a077 l       .debug_str	00000000 
0001a0c5 l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
0001a0d4 l       .debug_str	00000000 
0001a125 l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
0001a13d l       .debug_str	00000000 
0001a192 l       .debug_str	00000000 
00013612 l       .debug_str	00000000 
0001a1ae l       .debug_str	00000000 
0001a1f4 l       .debug_str	00000000 
0001a1fc l       .debug_str	00000000 
00014b9b l       .debug_str	00000000 
0001a245 l       .debug_str	00000000 
00053e80 l       .debug_str	00000000 
0001a2b4 l       .debug_str	00000000 
00015817 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0001a305 l       .debug_str	00000000 
0001a356 l       .debug_str	00000000 
000159b5 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00013f40 l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
00013f4b l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00054e09 l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
00016bf5 l       .debug_str	00000000 
0001a3ae l       .debug_str	00000000 
0001a411 l       .debug_str	00000000 
0001a43b l       .debug_str	00000000 
0001a49e l       .debug_str	00000000 
0001a4a7 l       .debug_str	00000000 
0001a514 l       .debug_str	00000000 
0001a526 l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
0001a597 l       .debug_str	00000000 
00014029 l       .debug_str	00000000 
0001a5f7 l       .debug_str	00000000 
0001a62a l       .debug_str	00000000 
0001a694 l       .debug_str	00000000 
0001a6c7 l       .debug_str	00000000 
0001a6cc l       .debug_str	00000000 
0001a730 l       .debug_str	00000000 
00056739 l       .debug_str	00000000 
0001a78b l       .debug_str	00000000 
0001a7c7 l       .debug_str	00000000 
0001a7d5 l       .debug_str	00000000 
0001a804 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
000524c1 l       .debug_str	00000000 
00012114 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00052c3d l       .debug_str	00000000 
000529e3 l       .debug_str	00000000 
00016a29 l       .debug_str	00000000 
00016a36 l       .debug_str	00000000 
0001fd2b l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00016a95 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
000549ca l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016ad7 l       .debug_str	00000000 
00016b11 l       .debug_str	00000000 
00016b4a l       .debug_str	00000000 
00016b59 l       .debug_str	00000000 
00016b9c l       .debug_str	00000000 
00053f0e l       .debug_str	00000000 
00030899 l       .debug_str	00000000 
00055933 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00016bde l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
0002db2b l       .debug_str	00000000 
00054072 l       .debug_str	00000000 
0001a80c l       .debug_str	00000000 
0001a824 l       .debug_str	00000000 
00059007 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0001a841 l       .debug_str	00000000 
00012b67 l       .debug_str	00000000 
0001a85a l       .debug_str	00000000 
0001a876 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001988b l       .debug_str	00000000 
000198e0 l       .debug_str	00000000 
0001992a l       .debug_str	00000000 
00019931 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00012eea l       .debug_str	00000000 
00012ef5 l       .debug_str	00000000 
00012f00 l       .debug_str	00000000 
00012f0b l       .debug_str	00000000 
0001a81e l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013d84 l       .debug_str	00000000 
000565c4 l       .debug_str	00000000 
00027f4f l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
000567e0 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00019939 l       .debug_str	00000000 
00013db8 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013dc7 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00016b53 l       .debug_str	00000000 
00019962 l       .debug_str	00000000 
00013e0a l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00013e3f l       .debug_str	00000000 
00013e53 l       .debug_str	00000000 
0001998b l       .debug_str	00000000 
00013eb2 l       .debug_str	00000000 
00013ec0 l       .debug_str	00000000 
00013ec8 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
0001357d l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000199d7 l       .debug_str	00000000 
0000afe7 l       .debug_str	00000000 
00019a00 l       .debug_str	00000000 
00019a0a l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
000172b6 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
00052492 l       .debug_str	00000000 
00019a0e l       .debug_str	00000000 
000529b7 l       .debug_str	00000000 
0001a870 l       .debug_str	00000000 
0001a83a l       .debug_str	00000000 
00019a18 l       .debug_str	00000000 
0001210a l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
00019a6d l       .debug_str	00000000 
00019aab l       .debug_str	00000000 
00019ac3 l       .debug_str	00000000 
00014509 l       .debug_str	00000000 
00019b01 l       .debug_str	00000000 
00013bc5 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
00019b66 l       .debug_str	00000000 
00019b96 l       .debug_str	00000000 
00019bbd l       .debug_str	00000000 
000146bc l       .debug_str	00000000 
00019be3 l       .debug_str	00000000 
00019c28 l       .debug_str	00000000 
00019c34 l       .debug_str	00000000 
00011d9f l       .debug_str	00000000 
00019c7a l       .debug_str	00000000 
00019cc0 l       .debug_str	00000000 
00019ccd l       .debug_str	00000000 
00019d0b l       .debug_str	00000000 
00019d11 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
0001177e l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
000117e8 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
00011812 l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
00011850 l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
00011920 l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
0001a8fa l       .debug_str	00000000 
0001a8f8 l       .debug_str	00000000 
0001a94b l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001a87f l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
0001357d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001a89e l       .debug_str	00000000 
0001a8ef l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
0001cabc l       .debug_str	00000000 
00013506 l       .debug_str	00000000 
0001350e l       .debug_str	00000000 
00013515 l       .debug_str	00000000 
000112aa l       .debug_str	00000000 
000133df l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0001ac73 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
0001ac77 l       .debug_str	00000000 
0001a1f4 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
0002d592 l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00014019 l       .debug_str	00000000 
0001acf5 l       .debug_str	00000000 
00054e09 l       .debug_str	00000000 
0003e637 l       .debug_str	00000000 
00057edd l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0001ad0c l       .debug_str	00000000 
00013f07 l       .debug_str	00000000 
0001ad35 l       .debug_str	00000000 
0001ad67 l       .debug_str	00000000 
00013d84 l       .debug_str	00000000 
000304a9 l       .debug_str	00000000 
00027f4f l       .debug_str	00000000 
000567e0 l       .debug_str	00000000 
0000eb4e l       .debug_str	00000000 
0001ad79 l       .debug_str	00000000 
0001ada2 l       .debug_str	00000000 
00013dc7 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00016b53 l       .debug_str	00000000 
0001adc7 l       .debug_str	00000000 
00013e0a l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
0001adf0 l       .debug_str	00000000 
0001ae1a l       .debug_str	00000000 
0001ae43 l       .debug_str	00000000 
0001ae8f l       .debug_str	00000000 
00013ec0 l       .debug_str	00000000 
0001aeb3 l       .debug_str	00000000 
00013ec8 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b3f5 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
0001aec1 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e40c l       .debug_str	00000000 
000537a8 l       .debug_str	00000000 
000467fb l       .debug_str	00000000 
0005450d l       .debug_str	00000000 
00055e26 l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
0001fc1c l       .debug_str	00000000 
0003b994 l       .debug_str	00000000 
000310b3 l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
0001ff2c l       .debug_str	00000000 
0001fed4 l       .debug_str	00000000 
0001aed6 l       .debug_str	00000000 
0001aee0 l       .debug_str	00000000 
0001fdb4 l       .debug_str	00000000 
0002c898 l       .debug_str	00000000 
0001fb8c l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0001d8a3 l       .debug_str	00000000 
0005754f l       .debug_str	00000000 
0001ff65 l       .debug_str	00000000 
000549ca l       .debug_str	00000000 
0001ff44 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00052492 l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
0001fbdd l       .debug_str	00000000 
00013ed8 l       .debug_str	00000000 
0001aee9 l       .debug_str	00000000 
0001af12 l       .debug_str	00000000 
0001af20 l       .debug_str	00000000 
0001af2d l       .debug_str	00000000 
0001af40 l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
0001af59 l       .debug_str	00000000 
0001357d l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
0001af6e l       .debug_str	00000000 
0001afea l       .debug_str	00000000 
0001af81 l       .debug_str	00000000 
0001afc3 l       .debug_str	00000000 
0001afd8 l       .debug_str	00000000 
00057459 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00042ce6 l       .debug_str	00000000 
0001aff5 l       .debug_str	00000000 
0001afff l       .debug_str	00000000 
0001b031 l       .debug_str	00000000 
0001b045 l       .debug_str	00000000 
0001b05a l       .debug_str	00000000 
0001f187 l       .debug_str	00000000 
0001f390 l       .debug_str	00000000 
0001b061 l       .debug_str	00000000 
0001b06c l       .debug_str	00000000 
0001b0f0 l       .debug_str	00000000 
0001b11e l       .debug_str	00000000 
0001b1a4 l       .debug_str	00000000 
0003a895 l       .debug_str	00000000 
0001b1cc l       .debug_str	00000000 
0001b1dd l       .debug_str	00000000 
0001b267 l       .debug_str	00000000 
0001b285 l       .debug_str	00000000 
0001b313 l       .debug_str	00000000 
0001b33a l       .debug_str	00000000 
0001b3c9 l       .debug_str	00000000 
0001b411 l       .debug_str	00000000 
0001b440 l       .debug_str	00000000 
0001b488 l       .debug_str	00000000 
0001b4a7 l       .debug_str	00000000 
0001b4ef l       .debug_str	00000000 
0001b4ff l       .debug_str	00000000 
0001b547 l       .debug_str	00000000 
0001b558 l       .debug_str	00000000 
0001b5a0 l       .debug_str	00000000 
0001b5a8 l       .debug_str	00000000 
0001b5f0 l       .debug_str	00000000 
0001b5fa l       .debug_str	00000000 
0001b642 l       .debug_str	00000000 
0001b65c l       .debug_str	00000000 
0001b6a4 l       .debug_str	00000000 
0001b6bd l       .debug_str	00000000 
0001b705 l       .debug_str	00000000 
0001b718 l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
0001b769 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
0001b7b1 l       .debug_str	00000000 
0001b7fb l       .debug_str	00000000 
0001b846 l       .debug_str	00000000 
0001b884 l       .debug_str	00000000 
0001b8b5 l       .debug_str	00000000 
00019aab l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
0001b8f3 l       .debug_str	00000000 
0001b91c l       .debug_str	00000000 
0001b927 l       .debug_str	00000000 
0001b94c l       .debug_str	00000000 
0001b9ab l       .debug_str	00000000 
0002bac6 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
0001ba12 l       .debug_str	00000000 
0001ba3c l       .debug_str	00000000 
0001ba64 l       .debug_str	00000000 
0001ba9c l       .debug_str	00000000 
0001bacd l       .debug_str	00000000 
0001bad7 l       .debug_str	00000000 
0001bb34 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
0001bb66 l       .debug_str	00000000 
0001bb8c l       .debug_str	00000000 
0001bbae l       .debug_str	00000000 
0001bbd4 l       .debug_str	00000000 
0001bbf6 l       .debug_str	00000000 
0001bc1f l       .debug_str	00000000 
0001bc44 l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
0001bc8c l       .debug_str	00000000 
0001bc95 l       .debug_str	00000000 
0001bd1f l       .debug_str	00000000 
0001134a l       .debug_str	00000000 
0001bd3c l       .debug_str	00000000 
0001bdc8 l       .debug_str	00000000 
0001bde5 l       .debug_str	00000000 
0001be05 l       .debug_str	00000000 
0000eb86 l       .debug_str	00000000 
0001be0c l       .debug_str	00000000 
0001be47 l       .debug_str	00000000 
0001be79 l       .debug_str	00000000 
0001be8a l       .debug_str	00000000 
0001bec5 l       .debug_str	00000000 
0001bf0b l       .debug_str	00000000 
00017497 l       .debug_str	00000000 
0001bf3b l       .debug_str	00000000 
0001bf6b l       .debug_str	00000000 
0001bf89 l       .debug_str	00000000 
0001bfb9 l       .debug_str	00000000 
0001bfcc l       .debug_str	00000000 
0001bffc l       .debug_str	00000000 
0001c011 l       .debug_str	00000000 
0001c041 l       .debug_str	00000000 
0001c05d l       .debug_str	00000000 
0001c08d l       .debug_str	00000000 
0001c0ab l       .debug_str	00000000 
0001c0db l       .debug_str	00000000 
0001c0f6 l       .debug_str	00000000 
0001c126 l       .debug_str	00000000 
0001c14a l       .debug_str	00000000 
0001c17a l       .debug_str	00000000 
0001c1b4 l       .debug_str	00000000 
0001c1e4 l       .debug_str	00000000 
0001c209 l       .debug_str	00000000 
0001c239 l       .debug_str	00000000 
0001c263 l       .debug_str	00000000 
0001c299 l       .debug_str	00000000 
0001c2ca l       .debug_str	00000000 
0001c304 l       .debug_str	00000000 
0001c339 l       .debug_str	00000000 
0001c375 l       .debug_str	00000000 
0001c39b l       .debug_str	00000000 
0001c3bd l       .debug_str	00000000 
0001c3e4 l       .debug_str	00000000 
0001c407 l       .debug_str	00000000 
00014c0b l       .debug_str	00000000 
0001c455 l       .debug_str	00000000 
00014c7b l       .debug_str	00000000 
0001c4a6 l       .debug_str	00000000 
0001c4f7 l       .debug_str	00000000 
0001c504 l       .debug_str	00000000 
0001c556 l       .debug_str	00000000 
0001c564 l       .debug_str	00000000 
00014b46 l       .debug_str	00000000 
0001c5af l       .debug_str	00000000 
0001c5fa l       .debug_str	00000000 
0001c60e l       .debug_str	00000000 
0001c651 l       .debug_str	00000000 
0001c65e l       .debug_str	00000000 
00014b9b l       .debug_str	00000000 
0001c6a1 l       .debug_str	00000000 
00014c02 l       .debug_str	00000000 
0001c6fd l       .debug_str	00000000 
00014c72 l       .debug_str	00000000 
0001c75c l       .debug_str	00000000 
0001c7ae l       .debug_str	00000000 
0001c800 l       .debug_str	00000000 
0001c80a l       .debug_str	00000000 
0001c85f l       .debug_str	00000000 
0001c8b4 l       .debug_str	00000000 
0001c90a l       .debug_str	00000000 
00014aef l       .debug_str	00000000 
0001c960 l       .debug_str	00000000 
0001c99c l       .debug_str	00000000 
000172b6 l       .debug_str	00000000 
0001c9da l       .debug_str	00000000 
0001ca15 l       .debug_str	00000000 
00016a36 l       .debug_str	00000000 
0001ca20 l       .debug_str	00000000 
0001ca67 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0001ca7d l       .debug_str	00000000 
0001cb0e l       .debug_str	00000000 
0001cb24 l       .debug_str	00000000 
0001cb69 l       .debug_str	00000000 
0001cb83 l       .debug_str	00000000 
0001cbe6 l       .debug_str	00000000 
0001cc06 l       .debug_str	00000000 
0001cc45 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0001cca6 l       .debug_str	00000000 
0001cce5 l       .debug_str	00000000 
0001fdaf l       .debug_str	00000000 
0001cd0c l       .debug_str	00000000 
0001cd4c l       .debug_str	00000000 
0001cd7f l       .debug_str	00000000 
0001cd96 l       .debug_str	00000000 
0001cddc l       .debug_str	00000000 
0001cdf8 l       .debug_str	00000000 
0001ce5c l       .debug_str	00000000 
0001ce7e l       .debug_str	00000000 
0001cec0 l       .debug_str	00000000 
0001cee1 l       .debug_str	00000000 
0001cf23 l       .debug_str	00000000 
00055066 l       .debug_str	00000000 
0001cf53 l       .debug_str	00000000 
0001cf97 l       .debug_str	00000000 
0001cfec l       .debug_str	00000000 
0001d030 l       .debug_str	00000000 
0001d086 l       .debug_str	00000000 
0001d0ca l       .debug_str	00000000 
0001d142 l       .debug_str	00000000 
0001d186 l       .debug_str	00000000 
0001d1c6 l       .debug_str	00000000 
0001d1e1 l       .debug_str	00000000 
0001d222 l       .debug_str	00000000 
0001d278 l       .debug_str	00000000 
0001d2bc l       .debug_str	00000000 
0001d2e9 l       .debug_str	00000000 
0001d32e l       .debug_str	00000000 
0001d376 l       .debug_str	00000000 
0001d387 l       .debug_str	00000000 
0001d3cf l       .debug_str	00000000 
0001d3e0 l       .debug_str	00000000 
0002bbac l       .debug_str	00000000 
0001d41b l       .debug_str	00000000 
0001d457 l       .debug_str	00000000 
0001d45d l       .debug_str	00000000 
0001d493 l       .debug_str	00000000 
0001d4a6 l       .debug_str	00000000 
0001d4dd l       .debug_str	00000000 
0001d4f1 l       .debug_str	00000000 
0001d533 l       .debug_str	00000000 
0001d552 l       .debug_str	00000000 
0001d597 l       .debug_str	00000000 
0001d5b2 l       .debug_str	00000000 
0001d617 l       .debug_str	00000000 
0001d67e l       .debug_str	00000000 
0001d689 l       .debug_str	00000000 
0001d6cf l       .debug_str	00000000 
0001d715 l       .debug_str	00000000 
0001d71f l       .debug_str	00000000 
0001d766 l       .debug_str	00000000 
0001d771 l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
0001d7b8 l       .debug_str	00000000 
0001d801 l       .debug_str	00000000 
0001d84a l       .debug_str	00000000 
0001d883 l       .debug_str	00000000 
0001d89e l       .debug_str	00000000 
0001d8ad l       .debug_str	00000000 
0001d8e6 l       .debug_str	00000000 
0001d90b l       .debug_str	00000000 
0001d944 l       .debug_str	00000000 
0001d97d l       .debug_str	00000000 
0001d9a3 l       .debug_str	00000000 
0001d9dc l       .debug_str	00000000 
0001da1a l       .debug_str	00000000 
0001da54 l       .debug_str	00000000 
0001da60 l       .debug_str	00000000 
0001da9c l       .debug_str	00000000 
0001daaf l       .debug_str	00000000 
0001daeb l       .debug_str	00000000 
0001db04 l       .debug_str	00000000 
0001db41 l       .debug_str	00000000 
0001db52 l       .debug_str	00000000 
00015817 l       .debug_str	00000000 
0001dba3 l       .debug_str	00000000 
0001a8ef l       .debug_str	00000000 
0001dbf4 l       .debug_str	00000000 
0001dc4f l       .debug_str	00000000 
0001dcb2 l       .debug_str	00000000 
0001dcce l       .debug_str	00000000 
0001dd2e l       .debug_str	00000000 
0001dd8e l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
0001de0d l       .debug_str	00000000 
0001de71 l       .debug_str	00000000 
0001de7c l       .debug_str	00000000 
0001dee6 l       .debug_str	00000000 
0001def5 l       .debug_str	00000000 
0001df64 l       .debug_str	00000000 
0001df7c l       .debug_str	00000000 
0001dfec l       .debug_str	00000000 
0001e005 l       .debug_str	00000000 
0001e070 l       .debug_str	00000000 
0001e085 l       .debug_str	00000000 
0001e0f5 l       .debug_str	00000000 
0001e10a l       .debug_str	00000000 
0001e17a l       .debug_str	00000000 
0001e18c l       .debug_str	00000000 
000038f9 l       .debug_str	00000000 
0001e1fd l       .debug_str	00000000 
0001e26e l       .debug_str	00000000 
0001e284 l       .debug_str	00000000 
0001e296 l       .debug_str	00000000 
0001e302 l       .debug_str	00000000 
0001e314 l       .debug_str	00000000 
0001e380 l       .debug_str	00000000 
0001e38f l       .debug_str	00000000 
0001e3f7 l       .debug_str	00000000 
0001e401 l       .debug_str	00000000 
0001e475 l       .debug_str	00000000 
00000eee l       .debug_str	00000000 
0001e480 l       .debug_str	00000000 
0001e4f8 l       .debug_str	00000000 
0001e511 l       .debug_str	00000000 
0001e589 l       .debug_str	00000000 
0001e61f l       .debug_str	00000000 
0001e63b l       .debug_str	00000000 
0001e6d1 l       .debug_str	00000000 
0001e767 l       .debug_str	00000000 
0001e7fd l       .debug_str	00000000 
00014d71 l       .debug_str	00000000 
0001e872 l       .debug_str	00000000 
0001e8e6 l       .debug_str	00000000 
0001e95f l       .debug_str	00000000 
0001e9de l       .debug_str	00000000 
0001e9ef l       .debug_str	00000000 
0001ea6f l       .debug_str	00000000 
0001ead1 l       .debug_str	00000000 
0002001d l       .debug_str	00000000 
0001eb22 l       .debug_str	00000000 
0001eb44 l       .debug_str	00000000 
0001eb71 l       .debug_str	00000000 
0001eba0 l       .debug_str	00000000 
0001ebc2 l       .debug_str	00000000 
0001ebe9 l       .debug_str	00000000 
0001ec12 l       .debug_str	00000000 
0001ec44 l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0001ec94 l       .debug_str	00000000 
0001ecda l       .debug_str	00000000 
0001eced l       .debug_str	00000000 
0001ed41 l       .debug_str	00000000 
0001edb3 l       .debug_str	00000000 
0001ee25 l       .debug_str	00000000 
0001ee97 l       .debug_str	00000000 
0001eee6 l       .debug_str	00000000 
0001ef14 l       .debug_str	00000000 
0001ef1f l       .debug_str	00000000 
0001ef79 l       .debug_str	00000000 
0001eff1 l       .debug_str	00000000 
0001f069 l       .debug_str	00000000 
0001f0be l       .debug_str	00000000 
0001f0f3 l       .debug_str	00000000 
0000b824 l       .debug_str	00000000 
0001f11e l       .debug_str	00000000 
00037717 l       .debug_str	00000000 
0001f14d l       .debug_str	00000000 
0001f17d l       .debug_str	00000000 
0001f195 l       .debug_str	00000000 
0001f1c6 l       .debug_str	00000000 
0001f1f8 l       .debug_str	00000000 
0001f237 l       .debug_str	00000000 
0001f24a l       .debug_str	00000000 
0001f282 l       .debug_str	00000000 
0001f28e l       .debug_str	00000000 
0001f2be l       .debug_str	00000000 
0001f2ef l       .debug_str	00000000 
0001f2f5 l       .debug_str	00000000 
0001f322 l       .debug_str	00000000 
0001f353 l       .debug_str	00000000 
0001f386 l       .debug_str	00000000 
0001f3a0 l       .debug_str	00000000 
0001f3d4 l       .debug_str	00000000 
0001f407 l       .debug_str	00000000 
000519f1 l       .debug_str	00000000 
0001f454 l       .debug_str	00000000 
0001f49d l       .debug_str	00000000 
000519d4 l       .debug_str	00000000 
0001f4e8 l       .debug_str	00000000 
0001f510 l       .debug_str	00000000 
0001f556 l       .debug_str	00000000 
0001f55c l       .debug_str	00000000 
0001f58a l       .debug_str	00000000 
0001f5a6 l       .debug_str	00000000 
0001f5d3 l       .debug_str	00000000 
0001f5e3 l       .debug_str	00000000 
0001f63b l       .debug_str	00000000 
0001f694 l       .debug_str	00000000 
0001f6b7 l       .debug_str	00000000 
0001f6e6 l       .debug_str	00000000 
0001f6f8 l       .debug_str	00000000 
0001f72b l       .debug_str	00000000 
0001f741 l       .debug_str	00000000 
0001f78e l       .debug_str	00000000 
0001f7e1 l       .debug_str	00000000 
0001f814 l       .debug_str	00000000 
0001f824 l       .debug_str	00000000 
0001f87a l       .debug_str	00000000 
0001f8d4 l       .debug_str	00000000 
0001f922 l       .debug_str	00000000 
0001f974 l       .debug_str	00000000 
0001f9c9 l       .debug_str	00000000 
0001fa19 l       .debug_str	00000000 
0001fa6d l       .debug_str	00000000 
0001fac4 l       .debug_str	00000000 
0001fb1a l       .debug_str	00000000 
0001fb71 l       .debug_str	00000000 
0001fbbd l       .debug_str	00000000 
0001fc05 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0001fc3a l       .debug_str	00000000 
0001fc66 l       .debug_str	00000000 
0001fc82 l       .debug_str	00000000 
0001fc8f l       .debug_str	00000000 
0001fc9d l       .debug_str	00000000 
0001fca2 l       .debug_str	00000000 
0001fca9 l       .debug_str	00000000 
0001fcc0 l       .debug_str	00000000 
0001fcd6 l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0001fce6 l       .debug_str	00000000 
00052c3d l       .debug_str	00000000 
0001fd09 l       .debug_str	00000000 
000529e3 l       .debug_str	00000000 
0001fd2b l       .debug_str	00000000 
0001959b l       .debug_str	00000000 
0001fd2a l       .debug_str	00000000 
0001435e l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
0001fd31 l       .debug_str	00000000 
0001fd84 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0001fda5 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
0001fdaa l       .debug_str	00000000 
000195b2 l       .debug_str	00000000 
0001fdbe l       .debug_str	00000000 
0001fdd2 l       .debug_str	00000000 
0001fddb l       .debug_str	00000000 
0001fde6 l       .debug_str	00000000 
0001fdf8 l       .debug_str	00000000 
0001fe0c l       .debug_str	00000000 
0001fe1d l       .debug_str	00000000 
0001fe37 l       .debug_str	00000000 
0001fe67 l       .debug_str	00000000 
0001fe82 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016ad7 l       .debug_str	00000000 
00016b11 l       .debug_str	00000000 
00016b4a l       .debug_str	00000000 
00016b59 l       .debug_str	00000000 
00016b9c l       .debug_str	00000000 
00053f0e l       .debug_str	00000000 
00030899 l       .debug_str	00000000 
00055933 l       .debug_str	00000000 
0001fea2 l       .debug_str	00000000 
0001fec1 l       .debug_str	00000000 
00057e63 l       .debug_str	00000000 
0001fee4 l       .debug_str	00000000 
00052c5c l       .debug_str	00000000 
0001355c l       .debug_str	00000000 
0001feea l       .debug_str	00000000 
0000c144 l       .debug_str	00000000 
0001fef2 l       .debug_str	00000000 
00053815 l       .debug_str	00000000 
00059007 l       .debug_str	00000000 
00016a29 l       .debug_str	00000000 
00054284 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012ecf l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0000b84b l       .debug_str	00000000 
0001fefa l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
0000b8f7 l       .debug_str	00000000 
0000b902 l       .debug_str	00000000 
000524c1 l       .debug_str	00000000 
0001ff19 l       .debug_str	00000000 
0001ff38 l       .debug_str	00000000 
0001ff4a l       .debug_str	00000000 
00017357 l       .debug_str	00000000 
00000f11 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00059574 l       .debug_str	00000000 
0005412f l       .debug_str	00000000 
0002f233 l       .debug_str	00000000 
000133d9 l       .debug_str	00000000 
0001ac64 l       .debug_str	00000000 
0001ffbc l       .debug_str	00000000 
00057e2a l       .debug_str	00000000 
0001ffd0 l       .debug_str	00000000 
0001ffe6 l       .debug_str	00000000 
0001fff6 l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
00020008 l       .debug_str	00000000 
00020002 l       .debug_str	00000000 
00020017 l       .debug_str	00000000 
0002002e l       .debug_str	00000000 
0002002d l       .debug_str	00000000 
00012ecb l       .debug_str	00000000 
00012ed6 l       .debug_str	00000000 
00012ee2 l       .debug_str	00000000 
00012eed l       .debug_str	00000000 
00012ef8 l       .debug_str	00000000 
00012f03 l       .debug_str	00000000 
00012f0e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001aa27 l       .debug_str	00000000 
0001aa79 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00051939 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0001aac0 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001aac7 l       .debug_str	00000000 
0001bdf6 l       .debug_str	00000000 
0001fe22 l       .debug_str	00000000 
000195b7 l       .debug_str	00000000 
0001aad0 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0001f557 l       .debug_str	00000000 
0001aad7 l       .debug_str	00000000 
0001aafa l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000134ea l       .debug_str	00000000 
000134ef l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
0001351c l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001feaf l       .debug_str	00000000 
00013571 l       .debug_str	00000000 
0001ab00 l       .debug_str	00000000 
0001ab22 l       .debug_str	00000000 
0001ab37 l       .debug_str	00000000 
0001ab69 l       .debug_str	00000000 
0001ab79 l       .debug_str	00000000 
0001aba6 l       .debug_str	00000000 
0001abb7 l       .debug_str	00000000 
0001abe5 l       .debug_str	00000000 
0001abf7 l       .debug_str	00000000 
0001fdc8 l       .debug_str	00000000 
0001fffb l       .debug_str	00000000 
0000c4e5 l       .debug_str	00000000 
0001ac26 l       .debug_str	00000000 
0001fde0 l       .debug_str	00000000 
00001d84 l       .debug_str	00000000 
000166ff l       .debug_str	00000000 
000112ae l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0002c205 l       .debug_str	00000000 
000112b3 l       .debug_str	00000000 
0001fe17 l       .debug_str	00000000 
0001ac4d l       .debug_str	00000000 
0001fe03 l       .debug_str	00000000 
0001fdfd l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
000312f3 l       .debug_str	00000000 
000549dc l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fe78 l       .debug_str	00000000 
0001fe6c l       .debug_str	00000000 
0001fe4b l       .debug_str	00000000 
0001fe3c l       .debug_str	00000000 
0001fe96 l       .debug_str	00000000 
0001fe87 l       .debug_str	00000000 
0001ac54 l       .debug_str	00000000 
0001ac5d l       .debug_str	00000000 
00052640 l       .debug_str	00000000 
0005190d l       .debug_str	00000000 
0001fdf1 l       .debug_str	00000000 
0001fdeb l       .debug_str	00000000 
0001fe11 l       .debug_str	00000000 
0001fdd7 l       .debug_str	00000000 
000565c4 l       .debug_str	00000000 
0002d5b8 l       .debug_str	00000000 
00013d6b l       .debug_str	00000000 
00013d70 l       .debug_str	00000000 
00013d76 l       .debug_str	00000000 
00016fb9 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
0002b8b8 l       .debug_str	00000000 
00056b0c l       .debug_str	00000000 
0001ac69 l       .debug_str	00000000 
000134f6 l       .debug_str	00000000 
000134fe l       .debug_str	00000000 
00011fd0 l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
00011fa6 l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
00011ecc l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
00011f68 l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
00011ffa l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
0001200a l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
00011f8a l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
00011f96 l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
000121be l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
00012024 l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
0001204c l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20004a68 l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000f0 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
00011ec2 l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
0001e9c4 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
0001201a l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
00011eb8 l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
00011c4c l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
00011c84 l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
00011c9a l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
00011caa l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
00011d50 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
000121e4 l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
0001228e l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
000121d0 l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
00011e1c l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
00020699 l       .debug_str	00000000 
00013f74 l       .debug_str	00000000 
00019636 l       .debug_str	00000000 
000200e5 l       .debug_str	00000000 
0002011a l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0005754f l       .debug_str	00000000 
00020126 l       .debug_str	00000000 
0002015e l       .debug_str	00000000 
00020178 l       .debug_str	00000000 
00020182 l       .debug_str	00000000 
0002018a l       .debug_str	00000000 
00020192 l       .debug_str	00000000 
000201ce l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000201e1 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
000201e9 l       .debug_str	00000000 
00020221 l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00020229 l       .debug_str	00000000 
00020261 l       .debug_str	00000000 
00020269 l       .debug_str	00000000 
000202a1 l       .debug_str	00000000 
000202bb l       .debug_str	00000000 
000202c4 l       .debug_str	00000000 
000202fc l       .debug_str	00000000 
00020305 l       .debug_str	00000000 
0002033d l       .debug_str	00000000 
000140c6 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
000203c5 l       .debug_str	00000000 
0002040d l       .debug_str	00000000 
00020418 l       .debug_str	00000000 
00019aab l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
00020456 l       .debug_str	00000000 
0001b91c l       .debug_str	00000000 
0002047f l       .debug_str	00000000 
000204a4 l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
0001ba12 l       .debug_str	00000000 
00020503 l       .debug_str	00000000 
0001ba64 l       .debug_str	00000000 
0002052b l       .debug_str	00000000 
0002055c l       .debug_str	00000000 
00020568 l       .debug_str	00000000 
000205c7 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
000205f9 l       .debug_str	00000000 
00020641 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0002064e l       .debug_str	00000000 
000206a9 l       .debug_str	00000000 
000206b7 l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
0001be79 l       .debug_str	00000000 
0000eb86 l       .debug_str	00000000 
000206ff l       .debug_str	00000000 
0001bec5 l       .debug_str	00000000 
0002073a l       .debug_str	00000000 
00020771 l       .debug_str	00000000 
0002078a l       .debug_str	00000000 
00020796 l       .debug_str	00000000 
00014c0b l       .debug_str	00000000 
000207e8 l       .debug_str	00000000 
00014c7b l       .debug_str	00000000 
0002083d l       .debug_str	00000000 
00020777 l       .debug_str	00000000 
00020870 l       .debug_str	00000000 
0001a1f4 l       .debug_str	00000000 
000208b6 l       .debug_str	00000000 
00014b9b l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
00054e09 l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
000208ff l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
00020910 l       .debug_str	00000000 
00020985 l       .debug_str	00000000 
000209b2 l       .debug_str	00000000 
0001a514 l       .debug_str	00000000 
00020a3e l       .debug_str	00000000 
00020ac1 l       .debug_str	00000000 
00020af0 l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00020b3d l       .debug_str	00000000 
00020b6d l       .debug_str	00000000 
00020bbb l       .debug_str	00000000 
00020beb l       .debug_str	00000000 
00020c39 l       .debug_str	00000000 
00020c69 l       .debug_str	00000000 
00020cb7 l       .debug_str	00000000 
00020ce8 l       .debug_str	00000000 
00020d37 l       .debug_str	00000000 
00020d68 l       .debug_str	00000000 
00020db7 l       .debug_str	00000000 
00020de7 l       .debug_str	00000000 
00020def l       .debug_str	00000000 
00020e1f l       .debug_str	00000000 
00020e27 l       .debug_str	00000000 
00020e65 l       .debug_str	00000000 
00020e7a l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000ad69 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00052c3d l       .debug_str	00000000 
000529e3 l       .debug_str	00000000 
0001fd2b l       .debug_str	00000000 
0001959b l       .debug_str	00000000 
0001435e l       .debug_str	00000000 
00020ea6 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
00054072 l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
00052492 l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
00016bf5 l       .debug_str	00000000 
00020efc l       .debug_str	00000000 
00013fa9 l       .debug_str	00000000 
00020efb l       .debug_str	00000000 
00020eff l       .debug_str	00000000 
00020f09 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000549ca l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
00020f0f l       .debug_str	00000000 
00020f13 l       .debug_str	00000000 
000201dc l       .debug_str	00000000 
00020f18 l       .debug_str	00000000 
00020f17 l       .debug_str	00000000 
00020f1b l       .debug_str	00000000 
00020f1f l       .debug_str	00000000 
00020f24 l       .debug_str	00000000 
00020f23 l       .debug_str	00000000 
00020f27 l       .debug_str	00000000 
00020f2b l       .debug_str	00000000 
000524c1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00020046 l       .debug_str	00000000 
0002009b l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000565c4 l       .debug_str	00000000 
0002d5b8 l       .debug_str	00000000 
00013d6b l       .debug_str	00000000 
00013d70 l       .debug_str	00000000 
00013d76 l       .debug_str	00000000 
00016fb9 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00013d84 l       .debug_str	00000000 
000304a9 l       .debug_str	00000000 
00027f4f l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
000567e0 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000312f3 l       .debug_str	00000000 
000549dc l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fe78 l       .debug_str	00000000 
0000eb4e l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013ec8 l       .debug_str	00000000 
0001230e l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00020f2f l       .debug_str	00000000 
00053e80 l       .debug_str	00000000 
00020fb4 l       .debug_str	00000000 
00021021 l       .debug_str	00000000 
00021093 l       .debug_str	00000000 
00052c5c l       .debug_str	00000000 
000567e0 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000210f1 l       .debug_str	00000000 
00046837 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0001fd2b l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
000195b7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000565c4 l       .debug_str	00000000 
00027f4f l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002110e l       .debug_str	00000000 
0002bac6 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
0002116f l       .debug_str	00000000 
00013bc5 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00029513 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
000217d3 l       .debug_str	00000000 
0002183e l       .debug_str	00000000 
00021884 l       .debug_str	00000000 
000218f6 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00021b3b l       .debug_str	00000000 
00021bad l       .debug_str	00000000 
00021bf7 l       .debug_str	00000000 
00021c41 l       .debug_str	00000000 
00021e8e l       .debug_str	00000000 
00021eca l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
000039b7 l       .debug_str	00000000 
00021f0f l       .debug_str	00000000 
00021f4c l       .debug_str	00000000 
00021f92 l       .debug_str	00000000 
00021fcf l       .debug_str	00000000 
00022210 l       .debug_str	00000000 
00022250 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00022494 l       .debug_str	00000000 
000226e8 l       .debug_str	00000000 
00022741 l       .debug_str	00000000 
00022991 l       .debug_str	00000000 
0001fd2b l       .debug_str	00000000 
00011a0a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00057f54 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
00054072 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d74c l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
00029587 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000224a8 l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
000226fc l       .debug_str	00000000 
000211d2 l       .debug_str	00000000 
0002123a l       .debug_str	00000000 
0002147a l       .debug_str	00000000 
000214e2 l       .debug_str	00000000 
00021527 l       .debug_str	00000000 
00021592 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
00022a37 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
0001357d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000229e6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000195a3 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0000bca1 l       .debug_str	00000000 
000195b7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000567e0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00022a59 l       .debug_str	00000000 
00022ab5 l       .debug_str	00000000 
00022b12 l       .debug_str	00000000 
00022b6f l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0001fde0 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001fd2b l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
0000a696 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
00022d39 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000565c4 l       .debug_str	00000000 
00027f4f l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002d5b8 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
00022bcc l       .debug_str	00000000 
00022c3d l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00022c49 l       .debug_str	00000000 
000154a1 l       .debug_str	00000000 
00022cba l       .debug_str	00000000 
00022d2b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
000230c4 l       .debug_str	00000000 
0002312f l       .debug_str	00000000 
000231f7 l       .debug_str	00000000 
00023165 l       .debug_str	00000000 
0002319c l       .debug_str	00000000 
000231af l       .debug_str	00000000 
000231ee l       .debug_str	00000000 
00023209 l       .debug_str	00000000 
00023241 l       .debug_str	00000000 
00023255 l       .debug_str	00000000 
00023281 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000195a3 l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
00057e2a l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000312f3 l       .debug_str	00000000 
000549dc l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fe78 l       .debug_str	00000000 
0001fe6c l       .debug_str	00000000 
000195b7 l       .debug_str	00000000 
0000bc9a l       .debug_str	00000000 
00052c5c l       .debug_str	00000000 
00057e29 l       .debug_str	00000000 
0002328a l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
00017357 l       .debug_str	00000000 
0002328e l       .debug_str	00000000 
00057357 l       .debug_str	00000000 
00004ac5 l       .debug_str	00000000 
00004acd l       .debug_str	00000000 
00004ad6 l       .debug_str	00000000 
00004ae4 l       .debug_str	00000000 
00004aeb l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
0000477b l       .debug_str	00000000 
00004784 l       .debug_str	00000000 
00004792 l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047ac l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
000047c7 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047e8 l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00004801 l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00004872 l       .debug_str	00000000 
00004859 l       .debug_str	00000000 
000048ac l       .debug_str	00000000 
0000489f l       .debug_str	00000000 
00004886 l       .debug_str	00000000 
00004af2 l       .debug_str	00000000 
00004b51 l       .debug_str	00000000 
00004afa l       .debug_str	00000000 
00004b15 l       .debug_str	00000000 
00004b49 l       .debug_str	00000000 
00004b30 l       .debug_str	00000000 
00056435 l       .debug_str	00000000 
00044a82 l       .debug_str	00000000 
00023e35 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
00053c47 l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
00023296 l       .debug_str	00000000 
0005748b l       .debug_str	00000000 
000557cb l       .debug_str	00000000 
000536bd l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000553ee l       .debug_str	00000000 
0000c124 l       .debug_str	00000000 
00052a00 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c135 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000c13f l       .debug_str	00000000 
0000c14a l       .debug_str	00000000 
0000c154 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0002357f l       .debug_str	00000000 
00022d40 l       .debug_str	00000000 
00022d71 l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00057f54 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
00054072 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d74c l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
00029513 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000226fc l       .debug_str	00000000 
00022d7d l       .debug_str	00000000 
00022dad l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
00029587 l       .debug_str	00000000 
000224a8 l       .debug_str	00000000 
00022dba l       .debug_str	00000000 
00022deb l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a411 l       .debug_str	00000000 
00005772 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
000572ce l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00051d13 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
00001b8d l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00001bba l       .debug_str	00000000 
00001af6 l       .debug_str	00000000 
00058109 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001bef l       .debug_str	00000000 
00001c18 l       .debug_str	00000000 
00001c76 l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001cdc l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001cfa l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001d10 l       .debug_str	00000000 
00001d36 l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001d4c l       .debug_str	00000000 
0000589d l       .debug_str	00000000 
00001d15 l       .debug_str	00000000 
000056f6 l       .debug_str	00000000 
000473b6 l       .debug_str	00000000 
0000577b l       .debug_str	00000000 
00005786 l       .debug_str	00000000 
00022df3 l       .debug_str	00000000 
00022e1e l       .debug_str	00000000 
00022e2f l       .debug_str	00000000 
00022e64 l       .debug_str	00000000 
00004cf6 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
000049b1 l       .debug_str	00000000 
000049b9 l       .debug_str	00000000 
0000487d l       .debug_str	00000000 
000049c3 l       .debug_str	00000000 
00004c65 l       .debug_str	00000000 
00004c4c l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004c47 l       .debug_str	00000000 
00004c74 l       .debug_str	00000000 
00004cfe l       .debug_str	00000000 
000031f0 l       .debug_str	00000000 
00055658 l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
000031fa l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00003272 l       .debug_str	00000000 
00003279 l       .debug_str	00000000 
00003281 l       .debug_str	00000000 
0000425f l       .debug_str	00000000 
00004d04 l       .debug_str	00000000 
00022e73 l       .debug_str	00000000 
00022ea6 l       .debug_str	00000000 
000042ea l       .debug_str	00000000 
000042f4 l       .debug_str	00000000 
000042fd l       .debug_str	00000000 
00004241 l       .debug_str	00000000 
00004268 l       .debug_str	00000000 
0000439d l       .debug_str	00000000 
00022eb6 l       .debug_str	00000000 
00022eea l       .debug_str	00000000 
00022ef3 l       .debug_str	00000000 
00022f1f l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00022f2e l       .debug_str	00000000 
00022f61 l       .debug_str	00000000 
00022f6e l       .debug_str	00000000 
00022f7a l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00022fab l       .debug_str	00000000 
00022fe0 l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
00022ff1 l       .debug_str	00000000 
00023023 l       .debug_str	00000000 
00023031 l       .debug_str	00000000 
0002306f l       .debug_str	00000000 
00023089 l       .debug_str	00000000 
000230db l       .debug_str	00000000 
00023117 l       .debug_str	00000000 
20004a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20004a78 l     O .bss	00002004 _ZN6mynewt3spi12PENDING_DATA17hf749c482f1fd6e90E
20006f04 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
000130c2 l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
20006a8c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20006b04 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20006aa4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20006a84 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
000133da l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
000135c4 l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
00013be2 l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
000138ac l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
20006a7c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20006ab4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
00013d0a l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
0001ebc0 l     O .text	0000001c str.0
0001ec20 l     O .text	00000021 str.1
0001ec80 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
000312f3 l       .debug_str	00000000 
000549dc l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fe78 l       .debug_str	00000000 
0001fe6c l       .debug_str	00000000 
00023590 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
00023596 l       .debug_str	00000000 
0000e8fc l       .debug_str	00000000 
000557cb l       .debug_str	00000000 
000536bd l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000017df l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
00023565 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00052820 l       .debug_str	00000000 
000235a8 l       .debug_str	00000000 
0000e90e l       .debug_str	00000000 
000232a1 l       .debug_str	00000000 
00037717 l       .debug_str	00000000 
000232cc l       .debug_str	00000000 
00057e63 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
000232f8 l       .debug_str	00000000 
0005915f l       .debug_str	00000000 
00023369 l       .debug_str	00000000 
00023395 l       .debug_str	00000000 
000233c2 l       .debug_str	00000000 
0002342e l       .debug_str	00000000 
00023436 l       .debug_str	00000000 
000234a3 l       .debug_str	00000000 
000234ac l       .debug_str	00000000 
000234d9 l       .debug_str	00000000 
00023281 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00023553 l       .debug_str	00000000 
00023583 l       .debug_str	00000000 
00052a00 l       .debug_str	00000000 
0000c135 l       .debug_str	00000000 
0000c13f l       .debug_str	00000000 
0000c14a l       .debug_str	00000000 
0000c154 l       .debug_str	00000000 
0002357f l       .debug_str	00000000 
00023569 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
000016a2 l       .debug_str	00000000 
000195a3 l       .debug_str	00000000 
000016ab l       .debug_str	00000000 
000016b5 l       .debug_str	00000000 
0000bc8e l       .debug_str	00000000 
000016d6 l       .debug_str	00000000 
000016db l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001ee80 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
00004afa l       .debug_str	00000000 
00004b15 l       .debug_str	00000000 
00004b49 l       .debug_str	00000000 
000235ad l       .debug_str	00000000 
000235ff l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013ec0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001802 l       .debug_str	00000000 
0003a411 l       .debug_str	00000000 
00004ac5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00004acd l       .debug_str	00000000 
00004ad6 l       .debug_str	00000000 
00004ae4 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00004aeb l       .debug_str	00000000 
0000476b l       .debug_str	00000000 
0000477b l       .debug_str	00000000 
00004784 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00004792 l       .debug_str	00000000 
000047a0 l       .debug_str	00000000 
000047ac l       .debug_str	00000000 
000049ba l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
000047c7 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000047cf l       .debug_str	00000000 
000047e8 l       .debug_str	00000000 
00001b7a l       .debug_str	00000000 
000047f9 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00004801 l       .debug_str	00000000 
00004834 l       .debug_str	00000000 
0000481b l       .debug_str	00000000 
00004840 l       .debug_str	00000000 
00001b29 l       .debug_str	00000000 
00004872 l       .debug_str	00000000 
00004859 l       .debug_str	00000000 
0000487d l       .debug_str	00000000 
000048ac l       .debug_str	00000000 
0000489f l       .debug_str	00000000 
00004886 l       .debug_str	00000000 
00004af2 l       .debug_str	00000000 
00004b30 l       .debug_str	00000000 
00004b51 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
0002494f l       .debug_str	00000000 
00023b70 l       .debug_str	00000000 
00014b9b l       .debug_str	00000000 
00023bb3 l       .debug_str	00000000 
00014c02 l       .debug_str	00000000 
00023c0f l       .debug_str	00000000 
00014c72 l       .debug_str	00000000 
00023c6e l       .debug_str	00000000 
00014c0b l       .debug_str	00000000 
00023cc0 l       .debug_str	00000000 
00023d15 l       .debug_str	00000000 
00023d6b l       .debug_str	00000000 
00023d99 l       .debug_str	00000000 
00023da5 l       .debug_str	00000000 
00023dd7 l       .debug_str	00000000 
00023dfe l       .debug_str	00000000 
00023e30 l       .debug_str	00000000 
00023e40 l       .debug_str	00000000 
00023e75 l       .debug_str	00000000 
00023e88 l       .debug_str	00000000 
00023ebe l       .debug_str	00000000 
00023ed2 l       .debug_str	00000000 
00023f1c l       .debug_str	00000000 
00023f2d l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
00023f69 l       .debug_str	00000000 
00051d3f l       .debug_str	00000000 
0005754f l       .debug_str	00000000 
00023fa7 l       .debug_str	00000000 
00023fe5 l       .debug_str	00000000 
0001403b l       .debug_str	00000000 
00023ff2 l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
00024000 l       .debug_str	00000000 
00024028 l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
00024067 l       .debug_str	00000000 
00024095 l       .debug_str	00000000 
0002409c l       .debug_str	00000000 
0002413f l       .debug_str	00000000 
0002414d l       .debug_str	00000000 
00038c20 l       .debug_str	00000000 
000241e5 l       .debug_str	00000000 
0002427f l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
00024337 l       .debug_str	00000000 
0002bac6 l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
00000e30 l       .debug_str	00000000 
000208ff l       .debug_str	00000000 
0002439a l       .debug_str	00000000 
0002440c l       .debug_str	00000000 
00024436 l       .debug_str	00000000 
00024474 l       .debug_str	00000000 
00024487 l       .debug_str	00000000 
000244d2 l       .debug_str	00000000 
0000c600 l       .debug_str	00000000 
000244db l       .debug_str	00000000 
0002451d l       .debug_str	00000000 
000257de l       .debug_str	00000000 
00024557 l       .debug_str	00000000 
0002459c l       .debug_str	00000000 
000245b8 l       .debug_str	00000000 
000245fb l       .debug_str	00000000 
00024611 l       .debug_str	00000000 
00024676 l       .debug_str	00000000 
000246db l       .debug_str	00000000 
00024716 l       .debug_str	00000000 
00024723 l       .debug_str	00000000 
00020777 l       .debug_str	00000000 
00024756 l       .debug_str	00000000 
0000aa4d l       .debug_str	00000000 
0002479c l       .debug_str	00000000 
0001a1f4 l       .debug_str	00000000 
000247e2 l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
00024829 l       .debug_str	00000000 
00024872 l       .debug_str	00000000 
000154a1 l       .debug_str	00000000 
0001fde0 l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000248eb l       .debug_str	00000000 
00024930 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00024988 l       .debug_str	00000000 
00001031 l       .debug_str	00000000 
000249a0 l       .debug_str	00000000 
000249db l       .debug_str	00000000 
000249ff l       .debug_str	00000000 
00024a25 l       .debug_str	00000000 
00024a60 l       .debug_str	00000000 
00024a83 l       .debug_str	00000000 
00024aa8 l       .debug_str	00000000 
00024ae5 l       .debug_str	00000000 
00024afc l       .debug_str	00000000 
00024b39 l       .debug_str	00000000 
00024b50 l       .debug_str	00000000 
000158dc l       .debug_str	00000000 
00024ba1 l       .debug_str	00000000 
000176a3 l       .debug_str	00000000 
00024bfc l       .debug_str	00000000 
00024c5f l       .debug_str	00000000 
00024ca1 l       .debug_str	00000000 
00015b95 l       .debug_str	00000000 
00024d05 l       .debug_str	00000000 
0001a514 l       .debug_str	00000000 
00024d72 l       .debug_str	00000000 
0000ad61 l       .debug_str	00000000 
00024dd4 l       .debug_str	00000000 
00024de2 l       .debug_str	00000000 
00024e4d l       .debug_str	00000000 
00024e67 l       .debug_str	00000000 
00024e7d l       .debug_str	00000000 
00024ee8 l       .debug_str	00000000 
00024ef8 l       .debug_str	00000000 
00024f64 l       .debug_str	00000000 
00024f76 l       .debug_str	00000000 
00024fe2 l       .debug_str	00000000 
00024ff3 l       .debug_str	00000000 
0002505a l       .debug_str	00000000 
00025092 l       .debug_str	00000000 
000250fc l       .debug_str	00000000 
00025184 l       .debug_str	00000000 
00011b34 l       .debug_str	00000000 
000251f8 l       .debug_str	00000000 
0002527a l       .debug_str	00000000 
00025291 l       .debug_str	00000000 
000252cf l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
0002bd38 l       .debug_str	00000000 
0002d5b8 l       .debug_str	00000000 
000252e2 l       .debug_str	00000000 
000252f1 l       .debug_str	00000000 
0002532f l       .debug_str	00000000 
00025342 l       .debug_str	00000000 
0002536e l       .debug_str	00000000 
00025377 l       .debug_str	00000000 
000253a3 l       .debug_str	00000000 
000253ac l       .debug_str	00000000 
0002540c l       .debug_str	00000000 
0002b779 l       .debug_str	00000000 
0002545d l       .debug_str	00000000 
000254ae l       .debug_str	00000000 
0002550b l       .debug_str	00000000 
00025569 l       .debug_str	00000000 
0002584e l       .debug_str	00000000 
000255ba l       .debug_str	00000000 
000255e3 l       .debug_str	00000000 
00025646 l       .debug_str	00000000 
00025657 l       .debug_str	00000000 
00025664 l       .debug_str	00000000 
00025679 l       .debug_str	00000000 
000256ca l       .debug_str	00000000 
000256f3 l       .debug_str	00000000 
00025756 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0001fd2b l       .debug_str	00000000 
00022d39 l       .debug_str	00000000 
00059007 l       .debug_str	00000000 
0000c0d4 l       .debug_str	00000000 
00025773 l       .debug_str	00000000 
00054072 l       .debug_str	00000000 
000310b3 l       .debug_str	00000000 
000201dc l       .debug_str	00000000 
000172b6 l       .debug_str	00000000 
00052c5c l       .debug_str	00000000 
00051a13 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00057e63 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00025794 l       .debug_str	00000000 
000024e8 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00025798 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00023805 l       .debug_str	00000000 
000257aa l       .debug_str	00000000 
000257af l       .debug_str	00000000 
000257b4 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00016a95 l       .debug_str	00000000 
000257d9 l       .debug_str	00000000 
00025815 l       .debug_str	00000000 
000549ca l       .debug_str	00000000 
00035adf l       .debug_str	00000000 
0002582b l       .debug_str	00000000 
00025834 l       .debug_str	00000000 
0002f0e4 l       .debug_str	00000000 
00052aaf l       .debug_str	00000000 
00044cf6 l       .debug_str	00000000 
0002583d l       .debug_str	00000000 
00025841 l       .debug_str	00000000 
0002f3aa l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
00012ecf l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
00012ecb l       .debug_str	00000000 
00012ed6 l       .debug_str	00000000 
00012ee2 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00025863 l       .debug_str	00000000 
0002585e l       .debug_str	00000000 
00052830 l       .debug_str	00000000 
00025867 l       .debug_str	00000000 
00030e81 l       .debug_str	00000000 
00025870 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0003393b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00023624 l       .debug_str	00000000 
0002367e l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002b9e3 l       .debug_str	00000000 
000236cd l       .debug_str	00000000 
00025785 l       .debug_str	00000000 
00025778 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000567e0 l       .debug_str	00000000 
000236d5 l       .debug_str	00000000 
000236e2 l       .debug_str	00000000 
000236eb l       .debug_str	00000000 
0005192d l       .debug_str	00000000 
0002bdaf l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00013d7e l       .debug_str	00000000 
000565c4 l       .debug_str	00000000 
00027f4f l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013ec0 l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d592 l       .debug_str	00000000 
00013ec8 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
0000b3b4 l       .debug_str	00000000 
0000b3f5 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00014019 l       .debug_str	00000000 
00025825 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00052492 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0001357d l       .debug_str	00000000 
00054a58 l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e40c l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000529e3 l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
000257f9 l       .debug_str	00000000 
00013ed8 l       .debug_str	00000000 
000236f5 l       .debug_str	00000000 
00023733 l       .debug_str	00000000 
0001acf5 l       .debug_str	00000000 
00054e09 l       .debug_str	00000000 
0003e637 l       .debug_str	00000000 
00057edd l       .debug_str	00000000 
00023742 l       .debug_str	00000000 
00013f07 l       .debug_str	00000000 
0002376b l       .debug_str	00000000 
0001ad67 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001af20 l       .debug_str	00000000 
0001fe96 l       .debug_str	00000000 
0000e939 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002379d l       .debug_str	00000000 
000257c3 l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
000237ab l       .debug_str	00000000 
00013ff4 l       .debug_str	00000000 
00014007 l       .debug_str	00000000 
00057459 l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
00042ce6 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00051ac8 l       .debug_str	00000000 
000237ed l       .debug_str	00000000 
000237f1 l       .debug_str	00000000 
000237fc l       .debug_str	00000000 
0002380b l       .debug_str	00000000 
00023853 l       .debug_str	00000000 
00023873 l       .debug_str	00000000 
00031bcd l       .debug_str	00000000 
000257ab l       .debug_str	00000000 
000238be l       .debug_str	00000000 
000257b0 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
00023909 l       .debug_str	00000000 
00022d2b l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
0002397a l       .debug_str	00000000 
00014684 l       .debug_str	00000000 
000239a8 l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
000239f0 l       .debug_str	00000000 
00023a20 l       .debug_str	00000000 
00023a4b l       .debug_str	00000000 
00020771 l       .debug_str	00000000 
0002078a l       .debug_str	00000000 
00023a82 l       .debug_str	00000000 
00014c7b l       .debug_str	00000000 
00023ad3 l       .debug_str	00000000 
00014aef l       .debug_str	00000000 
00023b25 l       .debug_str	00000000 
00014b46 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0000eb55 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002587c l       .debug_str	00000000 
000258a5 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00025936 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000258b2 l       .debug_str	00000000 
00013f07 l       .debug_str	00000000 
0000c5de l       .debug_str	00000000 
00056c61 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000258db l       .debug_str	00000000 
00025930 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
00025cab l       .debug_str	00000000 
00025b13 l       .debug_str	00000000 
00025b4f l       .debug_str	00000000 
00025b6b l       .debug_str	00000000 
00025ba7 l       .debug_str	00000000 
00025bdd l       .debug_str	00000000 
00025c19 l       .debug_str	00000000 
00025c24 l       .debug_str	00000000 
00025c60 l       .debug_str	00000000 
00025c6e l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
00025ce2 l       .debug_str	00000000 
00025d1f l       .debug_str	00000000 
00025d2e l       .debug_str	00000000 
00025d6b l       .debug_str	00000000 
00025dae l       .debug_str	00000000 
00025deb l       .debug_str	00000000 
0000eb5a l       .debug_str	00000000 
00025e22 l       .debug_str	00000000 
00025e60 l       .debug_str	00000000 
00025e97 l       .debug_str	00000000 
00025ed6 l       .debug_str	00000000 
00025f0f l       .debug_str	00000000 
00025f73 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00025fa8 l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00025fc3 l       .debug_str	00000000 
00026008 l       .debug_str	00000000 
00026025 l       .debug_str	00000000 
00014029 l       .debug_str	00000000 
0001963f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00019667 l       .debug_str	00000000 
0002593a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00026034 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00025fb7 l       .debug_str	00000000 
0000f5cb l       .debug_str	00000000 
000568a4 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000257b0 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0001082c l       .debug_str	00000000 
00025974 l       .debug_str	00000000 
00025fd2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
00026017 l       .debug_str	00000000 
0000eb55 l       .debug_str	00000000 
00025990 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000e9bd l       .debug_str	00000000 
0000e9c6 l       .debug_str	00000000 
0000e9d4 l       .debug_str	00000000 
000196cd l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0000e9ec l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
0000f3a7 l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
0005754f l       .debug_str	00000000 
0002599d l       .debug_str	00000000 
000259d6 l       .debug_str	00000000 
00025a71 l       .debug_str	00000000 
00025acb l       .debug_str	00000000 
00025b07 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fe78 l       .debug_str	00000000 
00026076 l       .debug_str	00000000 
000260c1 l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0001fdd7 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000312f3 l       .debug_str	00000000 
000549dc l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0001cd91 l       .debug_str	00000000 
00026d30 l       .debug_str	00000000 
00026d3d l       .debug_str	00000000 
00026d7d l       .debug_str	00000000 
00026e7a l       .debug_str	00000000 
00026eba l       .debug_str	00000000 
00026ec9 l       .debug_str	00000000 
00026f09 l       .debug_str	00000000 
00026f28 l       .debug_str	00000000 
00026f68 l       .debug_str	00000000 
00026f84 l       .debug_str	00000000 
00026fc4 l       .debug_str	00000000 
00026fd2 l       .debug_str	00000000 
00027012 l       .debug_str	00000000 
0005754f l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
0000c5f5 l       .debug_str	00000000 
0001d8a3 l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
00027020 l       .debug_str	00000000 
00027061 l       .debug_str	00000000 
0000c336 l       .debug_str	00000000 
00027096 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000270a0 l       .debug_str	00000000 
000270e1 l       .debug_str	00000000 
0001fdb4 l       .debug_str	00000000 
0002712e l       .debug_str	00000000 
0002716f l       .debug_str	00000000 
000271a4 l       .debug_str	00000000 
000271af l       .debug_str	00000000 
000271f0 l       .debug_str	00000000 
0002723d l       .debug_str	00000000 
0002727e l       .debug_str	00000000 
000272b3 l       .debug_str	00000000 
00027322 l       .debug_str	00000000 
00027423 l       .debug_str	00000000 
0001e17a l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00027492 l       .debug_str	00000000 
000274b1 l       .debug_str	00000000 
000039c6 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00017357 l       .debug_str	00000000 
0005289b l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
0000f5cb l       .debug_str	00000000 
000568a4 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
000257b0 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0001082c l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
000166ff l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00001720 l       .debug_str	00000000 
00001728 l       .debug_str	00000000 
00001733 l       .debug_str	00000000 
0000173e l       .debug_str	00000000 
0000174b l       .debug_str	00000000 
00001756 l       .debug_str	00000000 
0000175e l       .debug_str	00000000 
00001769 l       .debug_str	00000000 
00001774 l       .debug_str	00000000 
0000177e l       .debug_str	00000000 
00001789 l       .debug_str	00000000 
00001794 l       .debug_str	00000000 
000017a1 l       .debug_str	00000000 
000017ad l       .debug_str	00000000 
000017ba l       .debug_str	00000000 
000017c8 l       .debug_str	00000000 
000017d2 l       .debug_str	00000000 
0000a95d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
000274a1 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
00058906 l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000c332 l       .debug_str	00000000 
00057f54 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
00054072 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
000260f3 l       .debug_str	00000000 
00026160 l       .debug_str	00000000 
000261f6 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d74c l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
0000f853 l       .debug_str	00000000 
0000f8ca l       .debug_str	00000000 
0000f94e l       .debug_str	00000000 
0000f9c9 l       .debug_str	00000000 
0000fa67 l       .debug_str	00000000 
0000fb12 l       .debug_str	00000000 
000262b5 l       .debug_str	00000000 
0002637a l       .debug_str	00000000 
0002644c l       .debug_str	00000000 
00026515 l       .debug_str	00000000 
000265ff l       .debug_str	00000000 
00026706 l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
0002680c l       .debug_str	00000000 
0002690a l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00026a0b l       .debug_str	00000000 
00026aeb l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00026be9 l       .debug_str	00000000 
00003638 l       .debug_str	00000000 
0000c32d l       .debug_str	00000000 
00026c09 l       .debug_str	00000000 
00026c10 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00026c18 l       .debug_str	00000000 
00026c2c l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00026c5e l       .debug_str	00000000 
00026c72 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00026ca4 l       .debug_str	00000000 
00026ce3 l       .debug_str	00000000 
00026cf1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
00027a48 l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
0000e9bd l       .debug_str	00000000 
0000e9c6 l       .debug_str	00000000 
0000e9d4 l       .debug_str	00000000 
000196cd l       .debug_str	00000000 
0000e9ec l       .debug_str	00000000 
00025a71 l       .debug_str	00000000 
000278c4 l       .debug_str	00000000 
00027981 l       .debug_str	00000000 
000279bc l       .debug_str	00000000 
00027a15 l       .debug_str	00000000 
00025f73 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00027acb l       .debug_str	00000000 
00027b2f l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00027b32 l       .debug_str	00000000 
0000f3cd l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
0002593a l       .debug_str	00000000 
00026034 l       .debug_str	00000000 
00051c3e l       .debug_str	00000000 
0005955e l       .debug_str	00000000 
00027ba2 l       .debug_str	00000000 
00027ba5 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00012ee2 l       .debug_str	00000000 
000195bc l       .debug_str	00000000 
00012eed l       .debug_str	00000000 
00012ef8 l       .debug_str	00000000 
00027bb2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
0000f3a7 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
0000f3b1 l       .debug_str	00000000 
0000e9e6 l       .debug_str	00000000 
0000c393 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0001961c l       .debug_str	00000000 
0000f3ba l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00019667 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025fd2 l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002c898 l       .debug_str	00000000 
00027bcd l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
00027af6 l       .debug_str	00000000 
000274cf l       .debug_str	00000000 
0002756c l       .debug_str	00000000 
000275a5 l       .debug_str	00000000 
00027644 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00027b61 l       .debug_str	00000000 
0002767d l       .debug_str	00000000 
0002771a l       .debug_str	00000000 
0002774e l       .debug_str	00000000 
000277f1 l       .debug_str	00000000 
00027890 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
00027bb2 l       .debug_str	00000000 
00027bcd l       .debug_str	00000000 
00027c71 l       .debug_str	00000000 
00027ce6 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00012ee2 l       .debug_str	00000000 
00025fc3 l       .debug_str	00000000 
00012eed l       .debug_str	00000000 
00012ef8 l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000c0d8 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c112 l       .debug_str	00000000 
0000c3a2 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000c3b3 l       .debug_str	00000000 
0000c3be l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00019667 l       .debug_str	00000000 
0002c898 l       .debug_str	00000000 
00027c02 l       .debug_str	00000000 
00025f73 l       .debug_str	00000000 
0000c3a8 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00025fd2 l       .debug_str	00000000 
0000c3c5 l       .debug_str	00000000 
0000c3d2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
0000bca2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00010cb7 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
00010e9d l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
00027d1d l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000f16 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2m8s7rk6gjg5sdjo
00027ee0 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
0000e88f l       .debug_str	00000000 
0000e8df l       .debug_str	00000000 
00038b4e l       .debug_str	00000000 
0001a821 l       .debug_str	00000000 
000356fe l       .debug_str	00000000 
0000e8e2 l       .debug_str	00000000 
00052c5c l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00059007 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c1ab l       .debug_str	00000000 
000553ed l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000c131 l       .debug_str	00000000 
0000c1b6 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
0000315e l       .debug_str	00000000 
00023565 l       .debug_str	00000000 
0000c1be l       .debug_str	00000000 
00052820 l       .debug_str	00000000 
000235a8 l       .debug_str	00000000 
000582c8 l       .debug_str	00000000 
0000c1c2 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
0000c1c6 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00057704 l       .debug_str	00000000 
0000c1cf l       .debug_str	00000000 
00056d5c l       .debug_str	00000000 
0000e8a0 l       .debug_str	00000000 
00054b32 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012673 l       .debug_str	00000000 
0001267c l       .debug_str	00000000 
00012685 l       .debug_str	00000000 
00012690 l       .debug_str	00000000 
0001269c l       .debug_str	00000000 
000126a6 l       .debug_str	00000000 
000126b3 l       .debug_str	00000000 
000126c1 l       .debug_str	00000000 
000126d0 l       .debug_str	00000000 
000126dd l       .debug_str	00000000 
000281ba l       .debug_str	00000000 
000281a9 l       .debug_str	00000000 
0002c898 l       .debug_str	00000000 
00027de2 l       .debug_str	00000000 
00027e30 l       .debug_str	00000000 
00027e90 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2ug841oumney39pv
0005412f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
0001357d l       .debug_str	00000000 
000567e0 l       .debug_str	00000000 
00027f42 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00027f55 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00027fe1 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
00027fea l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00027ffa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ng3xpvqtoio1chp
0002db2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
0001357d l       .debug_str	00000000 
000567e0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00028021 l       .debug_str	00000000 
00053e80 l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3qt6984rqt15w0xm
000104e5 l       .debug_str	00000000 
00028184 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00012cb1 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
000281a4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
00054b32 l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
00012673 l       .debug_str	00000000 
0001267c l       .debug_str	00000000 
00012685 l       .debug_str	00000000 
00012690 l       .debug_str	00000000 
0001269c l       .debug_str	00000000 
000126a6 l       .debug_str	00000000 
000126b3 l       .debug_str	00000000 
000126c1 l       .debug_str	00000000 
000126d0 l       .debug_str	00000000 
000126dd l       .debug_str	00000000 
000281ba l       .debug_str	00000000 
000281a9 l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
00028090 l       .debug_str	00000000 
000280f3 l       .debug_str	00000000 
0002811d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5cymlse6j4664rei
000529e3 l       .debug_str	00000000 
000282f1 l       .debug_str	00000000 
0002830d l       .debug_str	00000000 
00028333 l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
0000233c l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00055933 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000281c8 l       .debug_str	00000000 
00013f07 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
000281f1 l       .debug_str	00000000 
00028202 l       .debug_str	00000000 
00028212 l       .debug_str	00000000 
0002825e l       .debug_str	00000000 
00028269 l       .debug_str	00000000 
0002829f l       .debug_str	00000000 
000282b7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
00028840 l       .debug_str	00000000 
00036427 l       .debug_str	00000000 
000039b7 l       .debug_str	00000000 
00028b94 l       .debug_str	00000000 
00021f4c l       .debug_str	00000000 
00028c13 l       .debug_str	00000000 
00021fcf l       .debug_str	00000000 
00028c92 l       .debug_str	00000000 
00028d14 l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
00028f58 l       .debug_str	00000000 
00028fda l       .debug_str	00000000 
00029023 l       .debug_str	00000000 
000290a5 l       .debug_str	00000000 
000290ee l       .debug_str	00000000 
00022250 l       .debug_str	00000000 
00029170 l       .debug_str	00000000 
000291f2 l       .debug_str	00000000 
00029436 l       .debug_str	00000000 
000294b8 l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00029501 l       .debug_str	00000000 
00029575 l       .debug_str	00000000 
00011a0a l       .debug_str	00000000 
0001fd2b l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002d592 l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00014019 l       .debug_str	00000000 
00059007 l       .debug_str	00000000 
000016e0 l       .debug_str	00000000 
000297e4 l       .debug_str	00000000 
000297e9 l       .debug_str	00000000 
00029a54 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000591d l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
00057f54 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00005945 l       .debug_str	00000000 
00054072 l       .debug_str	00000000 
00005953 l       .debug_str	00000000 
0000595b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00005963 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d74c l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00005a29 l       .debug_str	00000000 
00005a77 l       .debug_str	00000000 
00005ae2 l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
00029513 l       .debug_str	00000000 
00004b05 l       .debug_str	00000000 
00005bdf l       .debug_str	00000000 
00005c24 l       .debug_str	00000000 
00005c92 l       .debug_str	00000000 
00005d29 l       .debug_str	00000000 
00005de9 l       .debug_str	00000000 
00005ed2 l       .debug_str	00000000 
00005fe4 l       .debug_str	00000000 
0000611f l       .debug_str	00000000 
00006283 l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
000065c6 l       .debug_str	00000000 
000067a5 l       .debug_str	00000000 
000069ad l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00009617 l       .debug_str	00000000 
0000983b l       .debug_str	00000000 
00009a6c l       .debug_str	00000000 
00009c94 l       .debug_str	00000000 
00009edd l       .debug_str	00000000 
0000a143 l       .debug_str	00000000 
00029587 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002833c l       .debug_str	00000000 
000283c3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00028410 l       .debug_str	00000000 
00028497 l       .debug_str	00000000 
000286df l       .debug_str	00000000 
00028768 l       .debug_str	00000000 
000287b7 l       .debug_str	00000000 
00028a8a l       .debug_str	00000000 
00021c41 l       .debug_str	00000000 
00028b16 l       .debug_str	00000000 
00021eca l       .debug_str	00000000 
0001efd0 l     O .text	0000001c str.0
0001f010 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013ec0 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00059007 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00029ac4 l       .debug_str	00000000 
0000b32d l       .debug_str	00000000 
00001366 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
00001366 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00013ed8 l       .debug_str	00000000 
00027f4f l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00029b14 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
00029dd9 l       .debug_str	00000000 
000083d2 l       .debug_str	00000000 
0000855e l       .debug_str	00000000 
0000870d l       .debug_str	00000000 
000088c9 l       .debug_str	00000000 
00008a7c l       .debug_str	00000000 
00008c52 l       .debug_str	00000000 
00008e35 l       .debug_str	00000000 
0000900f l       .debug_str	00000000 
0000920c l       .debug_str	00000000 
00009416 l       .debug_str	00000000 
00029e51 l       .debug_str	00000000 
0002a07c l       .debug_str	00000000 
0002a0f4 l       .debug_str	00000000 
0002a283 l       .debug_str	00000000 
0002a2fb l       .debug_str	00000000 
0002a463 l       .debug_str	00000000 
0002a4db l       .debug_str	00000000 
0002a559 l       .debug_str	00000000 
0002a5d1 l       .debug_str	00000000 
0002a6c4 l       .debug_str	00000000 
0002a73c l       .debug_str	00000000 
0002a919 l       .debug_str	00000000 
0002a991 l       .debug_str	00000000 
0002aa5d l       .debug_str	00000000 
0002aad5 l       .debug_str	00000000 
0002ab05 l       .debug_str	00000000 
0002ab7d l       .debug_str	00000000 
0002ac22 l       .debug_str	00000000 
0002ac9a l       .debug_str	00000000 
0002addb l       .debug_str	00000000 
0002ae53 l       .debug_str	00000000 
0002b009 l       .debug_str	00000000 
0002b081 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00005994 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002d74c l       .debug_str	00000000 
0000599a l       .debug_str	00000000 
0000599d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000059c6 l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
000059fc l       .debug_str	00000000 
00006bde l       .debug_str	00000000 
00029b78 l       .debug_str	00000000 
00029bf0 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00006be1 l       .debug_str	00000000 
00006c31 l       .debug_str	00000000 
00006c8e l       .debug_str	00000000 
00006ce2 l       .debug_str	00000000 
00006d59 l       .debug_str	00000000 
00006ddd l       .debug_str	00000000 
00006e58 l       .debug_str	00000000 
00006ef6 l       .debug_str	00000000 
00006fa1 l       .debug_str	00000000 
00007043 l       .debug_str	00000000 
00007108 l       .debug_str	00000000 
000071da l       .debug_str	00000000 
000072a3 l       .debug_str	00000000 
0000738f l       .debug_str	00000000 
00007488 l       .debug_str	00000000 
00029c47 l       .debug_str	00000000 
00029cbf l       .debug_str	00000000 
00007578 l       .debug_str	00000000 
0000768b l       .debug_str	00000000 
000077ab l       .debug_str	00000000 
000078c2 l       .debug_str	00000000 
000079fc l       .debug_str	00000000 
00007b43 l       .debug_str	00000000 
00007c81 l       .debug_str	00000000 
00007de2 l       .debug_str	00000000 
00007f50 l       .debug_str	00000000 
000080b5 l       .debug_str	00000000 
0000823d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3wi7uqccuys0591w
00016ad7 l       .debug_str	00000000 
00016b11 l       .debug_str	00000000 
00016b4a l       .debug_str	00000000 
00016b59 l       .debug_str	00000000 
00016b9c l       .debug_str	00000000 
00053f0e l       .debug_str	00000000 
00030899 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00013dc7 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
00012605 l       .debug_str	00000000 
00016b53 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002b285 l       .debug_str	00000000 
00013e0a l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
0002b2ae l       .debug_str	00000000 
00002330 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
000017e1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
00025930 l       .debug_str	00000000 
0002b2ea l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002b34a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
0002d74c l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
0002b416 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000597f l       .debug_str	00000000 
00005987 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002b3aa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
0002db2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000013cb l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
0001357d l       .debug_str	00000000 
000567e0 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002b41f l       .debug_str	00000000 
00053e80 l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
0002b490 l       .debug_str	00000000 
0002b4a3 l       .debug_str	00000000 
00013d49 l       .debug_str	00000000 
000567e0 l       .debug_str	00000000 
0002b4d4 l       .debug_str	00000000 
0002b4dc l       .debug_str	00000000 
0002b4e5 l       .debug_str	00000000 
0002b52e l       .debug_str	00000000 
0000506b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0002b4ec l       .debug_str	00000000 
0002b52b l       .debug_str	00000000 
0002b534 l       .debug_str	00000000 
0002b576 l       .debug_str	00000000 
0002b580 l       .debug_str	00000000 
0002b5c3 l       .debug_str	00000000 
0002b5cd l       .debug_str	00000000 
0002b610 l       .debug_str	00000000 
0002b61a l       .debug_str	00000000 
0002b65d l       .debug_str	00000000 
0002b668 l       .debug_str	00000000 
0002b6ad l       .debug_str	00000000 
0002b6b8 l       .debug_str	00000000 
0002b6fd l       .debug_str	00000000 
0002b703 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000eb56 l       .debug_str	00000000 
00000efc l       .debug_str	00000000 
0002bd38 l       .debug_str	00000000 
00012601 l       .debug_str	00000000 
0002b710 l       .debug_str	00000000 
0002b720 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000119e2 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000119cc l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000039ca l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0000ace5 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d592 l       .debug_str	00000000 
000590fc l       .debug_str	00000000 
0000598c l       .debug_str	00000000 
0000598d l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
0000acee l       .debug_str	00000000 
00014019 l       .debug_str	00000000 
00025825 l       .debug_str	00000000 
00001b1b l       .debug_str	00000000 
0002b766 l       .debug_str	00000000 
00023567 l       .debug_str	00000000 
0005754f l       .debug_str	00000000 
0002c13c l       .debug_str	00000000 
000119d4 l       .debug_str	00000000 
00057161 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000529b7 l       .debug_str	00000000 
0002b778 l       .debug_str	00000000 
0002b77d l       .debug_str	00000000 
00058ad7 l       .debug_str	00000000 
0002b788 l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
0002b792 l       .debug_str	00000000 
0002be06 l       .debug_str	00000000 
0002b79c l       .debug_str	00000000 
00016a30 l       .debug_str	00000000 
0002be46 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0002c17f l       .debug_str	00000000 
000119de l       .debug_str	00000000 
00000f0f l       .debug_str	00000000 
0002b7aa l       .debug_str	00000000 
0002b81e l       .debug_str	00000000 
0002c060 l       .debug_str	00000000 
0002b830 l       .debug_str	00000000 
0002be4c l       .debug_str	00000000 
0002be26 l       .debug_str	00000000 
000154c3 l       .debug_str	00000000 
0002c0a3 l       .debug_str	00000000 
0002b835 l       .debug_str	00000000 
0002b8a9 l       .debug_str	00000000 
0002c1b8 l       .debug_str	00000000 
0002c1ff l       .debug_str	00000000 
0002c105 l       .debug_str	00000000 
0002b8c1 l       .debug_str	00000000 
0003b994 l       .debug_str	00000000 
000310b3 l       .debug_str	00000000 
00052966 l       .debug_str	00000000 
0002c21a l       .debug_str	00000000 
0002c0d4 l       .debug_str	00000000 
0002b939 l       .debug_str	00000000 
00004382 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005676d l       .debug_str	00000000 
00022d3a l       .debug_str	00000000 
0002b991 l       .debug_str	00000000 
0002b996 l       .debug_str	00000000 
0002b9a8 l       .debug_str	00000000 
0001cd91 l       .debug_str	00000000 
0002c898 l       .debug_str	00000000 
0002b9b1 l       .debug_str	00000000 
0001aed6 l       .debug_str	00000000 
0002b9d9 l       .debug_str	00000000 
0002b9e9 l       .debug_str	00000000 
00054e09 l       .debug_str	00000000 
0002ba42 l       .debug_str	00000000 
0002ba4a l       .debug_str	00000000 
00013fa9 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00013008 l       .debug_str	00000000 
0002ba52 l       .debug_str	00000000 
00016c5d l       .debug_str	00000000 
0002ba5e l       .debug_str	00000000 
0002ba68 l       .debug_str	00000000 
0002ba75 l       .debug_str	00000000 
0002ba82 l       .debug_str	00000000 
0002ba97 l       .debug_str	00000000 
0002baab l       .debug_str	00000000 
0002bac1 l       .debug_str	00000000 
0002bac9 l       .debug_str	00000000 
0002bad6 l       .debug_str	00000000 
0002bae3 l       .debug_str	00000000 
0002c3ec l       .debug_str	00000000 
0000c1d0 l       .debug_str	00000000 
0002baf0 l       .debug_str	00000000 
0002bb1d l       .debug_str	00000000 
0002bb4c l       .debug_str	00000000 
0002bb73 l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00000e3d l       .debug_str	00000000 
0002bb92 l       .debug_str	00000000 
0002bba7 l       .debug_str	00000000 
0001a8f8 l       .debug_str	00000000 
00046838 l       .debug_str	00000000 
0000b82c l       .debug_str	00000000 
000525c5 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
0002bbb1 l       .debug_str	00000000 
0002bbd6 l       .debug_str	00000000 
0002bbbc l       .debug_str	00000000 
0002bc55 l       .debug_str	00000000 
0002bbe6 l       .debug_str	00000000 
0002bbec l       .debug_str	00000000 
0002bbfb l       .debug_str	00000000 
0002bc06 l       .debug_str	00000000 
0002bc3b l       .debug_str	00000000 
0002bc60 l       .debug_str	00000000 
0002bc70 l       .debug_str	00000000 
000531cf l       .debug_str	00000000 
0002bca2 l       .debug_str	00000000 
0002bca7 l       .debug_str	00000000 
00054072 l       .debug_str	00000000 
0002d50c l       .debug_str	00000000 
0002d505 l       .debug_str	00000000 
00013ed8 l       .debug_str	00000000 
0002d533 l       .debug_str	00000000 
0002d567 l       .debug_str	00000000 
0002bcad l       .debug_str	00000000 
00005940 l       .debug_str	00000000 
0002bceb l       .debug_str	00000000 
0002d510 l       .debug_str	00000000 
0002d55d l       .debug_str	00000000 
0002bccc l       .debug_str	00000000 
0002bcb9 l       .debug_str	00000000 
0002bcd2 l       .debug_str	00000000 
00022d39 l       .debug_str	00000000 
0000bca2 l       .debug_str	00000000 
0000bca1 l       .debug_str	00000000 
0002bcfa l       .debug_str	00000000 
0002bd02 l       .debug_str	00000000 
000371cb l       .debug_str	00000000 
0002bd08 l       .debug_str	00000000 
00044cf6 l       .debug_str	00000000 
0002bd2f l       .debug_str	00000000 
0002bd13 l       .debug_str	00000000 
0000eb55 l       .debug_str	00000000 
0002bd37 l       .debug_str	00000000 
0002b9e3 l       .debug_str	00000000 
000236cd l       .debug_str	00000000 
00025785 l       .debug_str	00000000 
0002bd3c l       .debug_str	00000000 
0002bd60 l       .debug_str	00000000 
0002bd66 l       .debug_str	00000000 
0002bd6e l       .debug_str	00000000 
00047361 l       .debug_str	00000000 
00036dc7 l       .debug_str	00000000 
0002bd73 l       .debug_str	00000000 
0002bd9b l       .debug_str	00000000 
0002bd7d l       .debug_str	00000000 
000104e5 l       .debug_str	00000000 
000195ad l       .debug_str	00000000 
00016ad0 l       .debug_str	00000000 
0001fdd7 l       .debug_str	00000000 
000236d5 l       .debug_str	00000000 
000236e2 l       .debug_str	00000000 
000236eb l       .debug_str	00000000 
0005192d l       .debug_str	00000000 
0002bdaf l       .debug_str	00000000 
0002bda3 l       .debug_str	00000000 
0001357d l       .debug_str	00000000 
0002bdbc l       .debug_str	00000000 
0002bdc8 l       .debug_str	00000000 
0002bdeb l       .debug_str	00000000 
0002bdd5 l       .debug_str	00000000 
0002bdf9 l       .debug_str	00000000 
0002be19 l       .debug_str	00000000 
0002be39 l       .debug_str	00000000 
0002be54 l       .debug_str	00000000 
0002be6f l       .debug_str	00000000 
0002be75 l       .debug_str	00000000 
0002be79 l       .debug_str	00000000 
0002be8a l       .debug_str	00000000 
0002be7d l       .debug_str	00000000 
000017df l       .debug_str	00000000 
000017e3 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000182d l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
0002be9f l       .debug_str	00000000 
0002be9a l       .debug_str	00000000 
0002beb2 l       .debug_str	00000000 
0002befe l       .debug_str	00000000 
0002bed7 l       .debug_str	00000000 
0002beee l       .debug_str	00000000 
0002bf18 l       .debug_str	00000000 
0002bf09 l       .debug_str	00000000 
0002bf60 l       .debug_str	00000000 
0002bf40 l       .debug_str	00000000 
0002bfb9 l       .debug_str	00000000 
0002bf99 l       .debug_str	00000000 
0005191f l       .debug_str	00000000 
0002c010 l       .debug_str	00000000 
0002c015 l       .debug_str	00000000 
0002c01b l       .debug_str	00000000 
0002c03e l       .debug_str	00000000 
0002c020 l       .debug_str	00000000 
0002c049 l       .debug_str	00000000 
0002c094 l       .debug_str	00000000 
0002c0c5 l       .debug_str	00000000 
0002c0f6 l       .debug_str	00000000 
0002c125 l       .debug_str	00000000 
0002c170 l       .debug_str	00000000 
0002c1a1 l       .debug_str	00000000 
0001acf5 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000317dd l       .debug_str	00000000 
0000171d l       .debug_str	00000000 
000312f3 l       .debug_str	00000000 
000549dc l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00059016 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
0000c3d9 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005264e l       .debug_str	00000000 
0005254f l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00052b97 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001fcfb l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0001fe78 l       .debug_str	00000000 
0001fe6c l       .debug_str	00000000 
0001fca9 l       .debug_str	00000000 
0002c1f2 l       .debug_str	00000000 
0002c20b l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
0002c239 l       .debug_str	00000000 
0002c238 l       .debug_str	00000000 
0002c24d l       .debug_str	00000000 
0002c23e l       .debug_str	00000000 
00052640 l       .debug_str	00000000 
0005190d l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
0002c27a l       .debug_str	00000000 
0002c26c l       .debug_str	00000000 
0002c26b l       .debug_str	00000000 
0001fde0 l       .debug_str	00000000 
000195b7 l       .debug_str	00000000 
0005944c l       .debug_str	00000000 
0002c283 l       .debug_str	00000000 
0002c287 l       .debug_str	00000000 
0002c28a l       .debug_str	00000000 
00057f3c l       .debug_str	00000000 
0001959b l       .debug_str	00000000 
0002c28d l       .debug_str	00000000 
0001a870 l       .debug_str	00000000 
0002c291 l       .debug_str	00000000 
0002c290 l       .debug_str	00000000 
0002c296 l       .debug_str	00000000 
0002c368 l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
0002c2b4 l       .debug_str	00000000 
0002c2a2 l       .debug_str	00000000 
0002c2d9 l       .debug_str	00000000 
0002c3a1 l       .debug_str	00000000 
0002c2f7 l       .debug_str	00000000 
0002c2e5 l       .debug_str	00000000 
0002c31c l       .debug_str	00000000 
0002c335 l       .debug_str	00000000 
0002c323 l       .debug_str	00000000 
0002c341 l       .debug_str	00000000 
0002c359 l       .debug_str	00000000 
0002c392 l       .debug_str	00000000 
0001a876 l       .debug_str	00000000 
0002c3cb l       .debug_str	00000000 
0002c3d8 l       .debug_str	00000000 
0002c3d7 l       .debug_str	00000000 
0002c3e0 l       .debug_str	00000000 
0002c40d l       .debug_str	00000000 
0002c3f8 l       .debug_str	00000000 
0002c42a l       .debug_str	00000000 
0002c436 l       .debug_str	00000000 
0002c4e0 l       .debug_str	00000000 
0002c442 l       .debug_str	00000000 
0002c449 l       .debug_str	00000000 
0002c452 l       .debug_str	00000000 
0002c460 l       .debug_str	00000000 
0002c467 l       .debug_str	00000000 
0002c46f l       .debug_str	00000000 
0002c476 l       .debug_str	00000000 
0002c4bc l       .debug_str	00000000 
0002c497 l       .debug_str	00000000 
0002c482 l       .debug_str	00000000 
0002c4a7 l       .debug_str	00000000 
0002c4cb l       .debug_str	00000000 
0000eb74 l       .debug_str	00000000 
0002c4ec l       .debug_str	00000000 
00025798 l       .debug_str	00000000 
00055e26 l       .debug_str	00000000 
0001fc1c l       .debug_str	00000000 
0001fc05 l       .debug_str	00000000 
0002c506 l       .debug_str	00000000 
0002c529 l       .debug_str	00000000 
0002c512 l       .debug_str	00000000 
0002c573 l       .debug_str	00000000 
0002c567 l       .debug_str	00000000 
0002b9de l       .debug_str	00000000 
0002c590 l       .debug_str	00000000 
0002c579 l       .debug_str	00000000 
0002c5d9 l       .debug_str	00000000 
0002c601 l       .debug_str	00000000 
0002c5ea l       .debug_str	00000000 
000549ca l       .debug_str	00000000 
00002837 l       .debug_str	00000000 
00052a55 l       .debug_str	00000000 
0002c6b0 l       .debug_str	00000000 
0002c692 l       .debug_str	00000000 
0002c7a6 l       .debug_str	00000000 
0002c786 l       .debug_str	00000000 
0002c819 l       .debug_str	00000000 
0002c7f9 l       .debug_str	00000000 
00042e1f l       .debug_str	00000000 
0002c86c l       .debug_str	00000000 
0002c879 l       .debug_str	00000000 
0002c884 l       .debug_str	00000000 
0002c89a l       .debug_str	00000000 
0002c8a4 l       .debug_str	00000000 
0002c8fa l       .debug_str	00000000 
0002c90c l       .debug_str	00000000 
0002c95e l       .debug_str	00000000 
0002c972 l       .debug_str	00000000 
0002c9c6 l       .debug_str	00000000 
0002c9cd l       .debug_str	00000000 
0002ca13 l       .debug_str	00000000 
0002ca22 l       .debug_str	00000000 
0002ca7c l       .debug_str	00000000 
0002cad2 l       .debug_str	00000000 
0002cb2a l       .debug_str	00000000 
0002cb74 l       .debug_str	00000000 
0002cb7a l       .debug_str	00000000 
0002cbca l       .debug_str	00000000 
0002cc16 l       .debug_str	00000000 
0002cc64 l       .debug_str	00000000 
0002583e l       .debug_str	00000000 
0002cca4 l       .debug_str	00000000 
0002ccf1 l       .debug_str	00000000 
0002cd3a l       .debug_str	00000000 
0002cd85 l       .debug_str	00000000 
0002cdc2 l       .debug_str	00000000 
0002cdd2 l       .debug_str	00000000 
0002ce2d l       .debug_str	00000000 
0002ce84 l       .debug_str	00000000 
0002cedd l       .debug_str	00000000 
0003a1b3 l       .debug_str	00000000 
0002cf28 l       .debug_str	00000000 
0002cf7c l       .debug_str	00000000 
0002cfcc l       .debug_str	00000000 
0002d01e l       .debug_str	00000000 
000524c1 l       .debug_str	00000000 
0002d062 l       .debug_str	00000000 
0002d0ae l       .debug_str	00000000 
0002d0f6 l       .debug_str	00000000 
0002d140 l       .debug_str	00000000 
00039fe9 l       .debug_str	00000000 
0002d17c l       .debug_str	00000000 
0002d1d0 l       .debug_str	00000000 
0002d220 l       .debug_str	00000000 
0002d272 l       .debug_str	00000000 
0002d2b6 l       .debug_str	00000000 
0002d2c2 l       .debug_str	00000000 
0002d319 l       .debug_str	00000000 
0002d36c l       .debug_str	00000000 
0002d3c1 l       .debug_str	00000000 
0002d408 l       .debug_str	00000000 
0002d414 l       .debug_str	00000000 
0002d42b l       .debug_str	00000000 
0002d424 l       .debug_str	00000000 
0002d43d l       .debug_str	00000000 
0002d452 l       .debug_str	00000000 
0002d4a3 l       .debug_str	00000000 
0002d4b3 l       .debug_str	00000000 
0002d504 l       .debug_str	00000000 
0002d50f l       .debug_str	00000000 
0002d532 l       .debug_str	00000000 
0002d566 l       .debug_str	00000000 
0002d57c l       .debug_str	00000000 
0002d5aa l       .debug_str	00000000 
0002d59e l       .debug_str	00000000 
0002d5b8 l       .debug_str	00000000 
0002d5b7 l       .debug_str	00000000 
0000193e l       .debug_str	00000000 
000195a3 l       .debug_str	00000000 
000257ab l       .debug_str	00000000 
000257aa l       .debug_str	00000000 
000257b0 l       .debug_str	00000000 
000257af l       .debug_str	00000000 
0002d5bb l       .debug_str	00000000 
0002d5fb l       .debug_str	00000000 
0002d603 l       .debug_str	00000000 
0002d643 l       .debug_str	00000000 
0002d64d l       .debug_str	00000000 
00051a59 l       .debug_str	00000000 
000565c4 l       .debug_str	00000000 
0002d689 l       .debug_str	00000000 
0001ba64 l       .debug_str	00000000 
000304a9 l       .debug_str	00000000 
0002d6b1 l       .debug_str	00000000 
0001b91c l       .debug_str	00000000 
0002d6da l       .debug_str	00000000 
0002d6ff l       .debug_str	00000000 
0003e637 l       .debug_str	00000000 
00052aaf l       .debug_str	00000000 
0002d706 l       .debug_str	00000000 
0002d70f l       .debug_str	00000000 
0002d748 l       .debug_str	00000000 
000132fb l       .debug_str	00000000 
0002d750 l       .debug_str	00000000 
00014d71 l       .debug_str	00000000 
0002d7e5 l       .debug_str	00000000 
0000bffc l       .debug_str	00000000 
0002d830 l       .debug_str	00000000 
0000bfa7 l       .debug_str	00000000 
0002d877 l       .debug_str	00000000 
0001210a l       .debug_str	00000000 
0002d8cc l       .debug_str	00000000 
0002d909 l       .debug_str	00000000 
00013ec8 l       .debug_str	00000000 
0002d914 l       .debug_str	00000000 
00014c7b l       .debug_str	00000000 
0002d969 l       .debug_str	00000000 
00014c0b l       .debug_str	00000000 
0002d9bb l       .debug_str	00000000 
0000acdc l       .debug_str	00000000 
0002da02 l       .debug_str	00000000 
0000acd7 l       .debug_str	00000000 
00002d4f l       .debug_str	00000000 
00011a96 l       .debug_str	00000000 
0002e40c l       .debug_str	00000000 
0002da88 l       .debug_str	00000000 
0002dac9 l       .debug_str	00000000 
0002daec l       .debug_str	00000000 
0002db27 l       .debug_str	00000000 
0002db31 l       .debug_str	00000000 
0002dbbb l       .debug_str	00000000 
0002dbed l       .debug_str	00000000 
00011b34 l       .debug_str	00000000 
00013ec0 l       .debug_str	00000000 
0002dc61 l       .debug_str	00000000 
0002dcb2 l       .debug_str	00000000 
00013ff4 l       .debug_str	00000000 
0002dcf4 l       .debug_str	00000000 
0002dd7b l       .debug_str	00000000 
0002dd8a l       .debug_str	00000000 
0002de14 l       .debug_str	00000000 
0002de90 l       .debug_str	00000000 
0002dec0 l       .debug_str	00000000 
0002defb l       .debug_str	00000000 
0002df05 l       .debug_str	00000000 
00003b0f l       .debug_str	00000000 
0002df7c l       .debug_str	00000000 
0002dfd1 l       .debug_str	00000000 
0002dfda l       .debug_str	00000000 
0002e02b l       .debug_str	00000000 
000058be l       .debug_str	00000000 
0002e037 l       .debug_str	00000000 
00001b84 l       .debug_str	00000000 
0002e044 l       .debug_str	00000000 
0002e04d l       .debug_str	00000000 
0002e063 l       .debug_str	00000000 
0002e070 l       .debug_str	00000000 
0002e0b5 l       .debug_str	00000000 
0002e0c9 l       .debug_str	00000000 
0002e11e l       .debug_str	00000000 
0002e127 l       .debug_str	00000000 
000452d6 l       .debug_str	00000000 
0002e15f l       .debug_str	00000000 
0002e19c l       .debug_str	00000000 
0002e1a7 l       .debug_str	00000000 
0002e22a l       .debug_str	00000000 
0002e235 l       .debug_str	00000000 
0002e2bb l       .debug_str	00000000 
0002e330 l       .debug_str	00000000 
0002e35c l       .debug_str	00000000 
0002e3e5 l       .debug_str	00000000 
0002e3f4 l       .debug_str	00000000 
0002e401 l       .debug_str	00000000 
0002e415 l       .debug_str	00000000 
0002e46b l       .debug_str	00000000 
0002e4da l       .debug_str	00000000 
0002e55a l       .debug_str	00000000 
0002e5c8 l       .debug_str	00000000 
0002e653 l       .debug_str	00000000 
0002e6c8 l       .debug_str	00000000 
0002e708 l       .debug_str	00000000 
0002e78b l       .debug_str	00000000 
0002e7cc l       .debug_str	00000000 
00042ce1 l       .debug_str	00000000 
000467fb l       .debug_str	00000000 
0002e831 l       .debug_str	00000000 
0002e8e0 l       .debug_str	00000000 
0002e92b l       .debug_str	00000000 
00014ef6 l       .debug_str	00000000 
0002e9d4 l       .debug_str	00000000 
0002ea50 l       .debug_str	00000000 
00013d7e l       .debug_str	00000000 
0002ea75 l       .debug_str	00000000 
0000c067 l       .debug_str	00000000 
0002eac2 l       .debug_str	00000000 
0001446e l       .debug_str	00000000 
0002eb15 l       .debug_str	00000000 
0002eb50 l       .debug_str	00000000 
0002eb5b l       .debug_str	00000000 
0001a514 l       .debug_str	00000000 
0002ebe7 l       .debug_str	00000000 
000140c6 l       .debug_str	00000000 
0002ec6a l       .debug_str	00000000 
0002ecf2 l       .debug_str	00000000 
00020985 l       .debug_str	00000000 
0002ed67 l       .debug_str	00000000 
0002eded l       .debug_str	00000000 
000153fd l       .debug_str	00000000 
0002ee62 l       .debug_str	00000000 
0000b810 l       .debug_str	00000000 
0002eec5 l       .debug_str	00000000 
0000ad61 l       .debug_str	00000000 
0002ef27 l       .debug_str	00000000 
0000aa4d l       .debug_str	00000000 
0002ef6d l       .debug_str	00000000 
0002efb5 l       .debug_str	00000000 
0002efbf l       .debug_str	00000000 
0002f000 l       .debug_str	00000000 
0002f01a l       .debug_str	00000000 
00025863 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0002f020 l       .debug_str	00000000 
0002f029 l       .debug_str	00000000 
0002f08e l       .debug_str	00000000 
0002f09d l       .debug_str	00000000 
0002f0df l       .debug_str	00000000 
0002f0e9 l       .debug_str	00000000 
0002f14e l       .debug_str	00000000 
0002f190 l       .debug_str	00000000 
0002f1da l       .debug_str	00000000 
0002f1e9 l       .debug_str	00000000 
0002f21f l       .debug_str	00000000 
0002f228 l       .debug_str	00000000 
00017357 l       .debug_str	00000000 
0002f232 l       .debug_str	00000000 
0002f235 l       .debug_str	00000000 
0002f26d l       .debug_str	00000000 
0002f277 l       .debug_str	00000000 
0002f2bb l       .debug_str	00000000 
0002f2d1 l       .debug_str	00000000 
0002f31a l       .debug_str	00000000 
0001403b l       .debug_str	00000000 
0002584e l       .debug_str	00000000 
0002f35f l       .debug_str	00000000 
0002f3a8 l       .debug_str	00000000 
0002f3b6 l       .debug_str	00000000 
0002f3fe l       .debug_str	00000000 
00023f1c l       .debug_str	00000000 
0002f448 l       .debug_str	00000000 
00038c20 l       .debug_str	00000000 
0002f4e0 l       .debug_str	00000000 
00052492 l       .debug_str	00000000 
0002f57a l       .debug_str	00000000 
0002440c l       .debug_str	00000000 
0002f5ec l       .debug_str	00000000 
0002413f l       .debug_str	00000000 
0002f68f l       .debug_str	00000000 
00001719 l       .debug_str	00000000 
0002f6c1 l       .debug_str	00000000 
0002f708 l       .debug_str	00000000 
0002f716 l       .debug_str	00000000 
0002f720 l       .debug_str	00000000 
0002f76e l       .debug_str	00000000 
0002f77e l       .debug_str	00000000 
0002f7c9 l       .debug_str	00000000 
0002f7d7 l       .debug_str	00000000 
0002f865 l       .debug_str	00000000 
0002f874 l       .debug_str	00000000 
0000c0b6 l       .debug_str	00000000 
0002f8bd l       .debug_str	00000000 
0000c05f l       .debug_str	00000000 
0002f902 l       .debug_str	00000000 
0002f93c l       .debug_str	00000000 
0002f945 l       .debug_str	00000000 
0002f991 l       .debug_str	00000000 
0002f9a9 l       .debug_str	00000000 
0002fa0b l       .debug_str	00000000 
0000bfaf l       .debug_str	00000000 
0002fa40 l       .debug_str	00000000 
0002fa68 l       .debug_str	00000000 
0002faa0 l       .debug_str	00000000 
0002fac9 l       .debug_str	00000000 
0002fad4 l       .debug_str	00000000 
0001ac73 l       .debug_str	00000000 
0002faf9 l       .debug_str	00000000 
0002fb88 l       .debug_str	00000000 
0002fbbf l       .debug_str	00000000 
0002fc45 l       .debug_str	00000000 
0002fc93 l       .debug_str	00000000 
0002fc9c l       .debug_str	00000000 
0002fd22 l       .debug_str	00000000 
0002fd35 l       .debug_str	00000000 
0002fdbe l       .debug_str	00000000 
0002fe1a l       .debug_str	00000000 
0002fe5c l       .debug_str	00000000 
0002ff0e l       .debug_str	00000000 
0002ff4d l       .debug_str	00000000 
0002fff2 l       .debug_str	00000000 
00030086 l       .debug_str	00000000 
000300ac l       .debug_str	00000000 
00030128 l       .debug_str	00000000 
00030163 l       .debug_str	00000000 
00030170 l       .debug_str	00000000 
000301a9 l       .debug_str	00000000 
000301c1 l       .debug_str	00000000 
00030201 l       .debug_str	00000000 
00027f4f l       .debug_str	00000000 
0003020d l       .debug_str	00000000 
0003026a l       .debug_str	00000000 
000302c7 l       .debug_str	00000000 
00030374 l       .debug_str	00000000 
000303d1 l       .debug_str	00000000 
000167dd l       .debug_str	00000000 
0003043e l       .debug_str	00000000 
000304a2 l       .debug_str	00000000 
000304ad l       .debug_str	00000000 
000304dd l       .debug_str	00000000 
00030509 l       .debug_str	00000000 
00030575 l       .debug_str	00000000 
000305a5 l       .debug_str	00000000 
000305e1 l       .debug_str	00000000 
0003062b l       .debug_str	00000000 
0003063b l       .debug_str	00000000 
00030670 l       .debug_str	00000000 
000306b5 l       .debug_str	00000000 
000306c0 l       .debug_str	00000000 
00030700 l       .debug_str	00000000 
0003070e l       .debug_str	00000000 
0003079a l       .debug_str	00000000 
00030816 l       .debug_str	00000000 
00030836 l       .debug_str	00000000 
00030890 l       .debug_str	00000000 
0003089d l       .debug_str	00000000 
000308d6 l       .debug_str	00000000 
000308de l       .debug_str	00000000 
00030933 l       .debug_str	00000000 
00030985 l       .debug_str	00000000 
0002f86a l       .debug_str	00000000 
000309cc l       .debug_str	00000000 
00030a40 l       .debug_str	00000000 
00030a84 l       .debug_str	00000000 
00030ad0 l       .debug_str	00000000 
00030b0f l       .debug_str	00000000 
00030b35 l       .debug_str	00000000 
00030b47 l       .debug_str	00000000 
00030b51 l       .debug_str	00000000 
00030b93 l       .debug_str	00000000 
00003a62 l       .debug_str	00000000 
00030c1a l       .debug_str	00000000 
0001208b l       .debug_str	00000000 
00030c96 l       .debug_str	00000000 
00030d0d l       .debug_str	00000000 
00030d5b l       .debug_str	00000000 
00003cb2 l       .debug_str	00000000 
00030deb l       .debug_str	00000000 
00030e27 l       .debug_str	00000000 
00030e34 l       .debug_str	00000000 
00030e7a l       .debug_str	00000000 
00030e87 l       .debug_str	00000000 
00031bcd l       .debug_str	00000000 
00030eb9 l       .debug_str	00000000 
00030f09 l       .debug_str	00000000 
00030f20 l       .debug_str	00000000 
00030faa l       .debug_str	00000000 
0000ac22 l       .debug_str	00000000 
00031026 l       .debug_str	00000000 
0003103a l       .debug_str	00000000 
00031097 l       .debug_str	00000000 
000310a6 l       .debug_str	00000000 
000310b7 l       .debug_str	00000000 
00031111 l       .debug_str	00000000 
00031120 l       .debug_str	00000000 
000311a9 l       .debug_str	00000000 
000311b7 l       .debug_str	00000000 
0003120d l       .debug_str	00000000 
00031261 l       .debug_str	00000000 
000312da l       .debug_str	00000000 
000312f2 l       .debug_str	00000000 
000312fc l       .debug_str	00000000 
00031393 l       .debug_str	00000000 
000313ad l       .debug_str	00000000 
0001d883 l       .debug_str	00000000 
000313e6 l       .debug_str	00000000 
00013bc5 l       .debug_str	00000000 
0003144b l       .debug_str	00000000 
000314e2 l       .debug_str	00000000 
000314e6 l       .debug_str	00000000 
000317db l       .debug_str	00000000 
000314eb l       .debug_str	00000000 
0005748c l       .debug_str	00000000 
00013d84 l       .debug_str	00000000 
0003151d l       .debug_str	00000000 
00019aab l       .debug_str	00000000 
0003155b l       .debug_str	00000000 
0000a9f3 l       .debug_str	00000000 
000315ae l       .debug_str	00000000 
0003163a l       .debug_str	00000000 
000316b6 l       .debug_str	00000000 
000316d5 l       .debug_str	00000000 
00031720 l       .debug_str	00000000 
0003172d l       .debug_str	00000000 
000317a1 l       .debug_str	00000000 
00035adf l       .debug_str	00000000 
0004721a l       .debug_str	00000000 
000317c0 l       .debug_str	00000000 
000317e0 l       .debug_str	00000000 
000317fc l       .debug_str	00000000 
00031806 l       .debug_str	00000000 
00031892 l       .debug_str	00000000 
0003190e l       .debug_str	00000000 
0003193f l       .debug_str	00000000 
000319c2 l       .debug_str	00000000 
000319e2 l       .debug_str	00000000 
00031a68 l       .debug_str	00000000 
00031add l       .debug_str	00000000 
00027fea l       .debug_str	00000000 
00054a58 l       .debug_str	00000000 
00031b1e l       .debug_str	00000000 
000244d2 l       .debug_str	00000000 
00031b69 l       .debug_str	00000000 
00031bc5 l       .debug_str	00000000 
00031bd1 l       .debug_str	00000000 
00031c1a l       .debug_str	00000000 
00031c2a l       .debug_str	00000000 
00031c6f l       .debug_str	00000000 
00031cb8 l       .debug_str	00000000 
00031cfd l       .debug_str	00000000 
00031d59 l       .debug_str	00000000 
00031da4 l       .debug_str	00000000 
00031deb l       .debug_str	00000000 
00031e49 l       .debug_str	00000000 
00031e94 l       .debug_str	00000000 
00031edb l       .debug_str	00000000 
00031f39 l       .debug_str	00000000 
00031f84 l       .debug_str	00000000 
00031fcb l       .debug_str	00000000 
00032029 l       .debug_str	00000000 
00032072 l       .debug_str	00000000 
000320b7 l       .debug_str	00000000 
00032113 l       .debug_str	00000000 
0003215c l       .debug_str	00000000 
000321a1 l       .debug_str	00000000 
000321fd l       .debug_str	00000000 
00032247 l       .debug_str	00000000 
0003228d l       .debug_str	00000000 
000322ea l       .debug_str	00000000 
00032334 l       .debug_str	00000000 
0003237a l       .debug_str	00000000 
000323d7 l       .debug_str	00000000 
00032432 l       .debug_str	00000000 
0003247a l       .debug_str	00000000 
000324be l       .debug_str	00000000 
00032506 l       .debug_str	00000000 
0003254a l       .debug_str	00000000 
000325a5 l       .debug_str	00000000 
000325ee l       .debug_str	00000000 
00032633 l       .debug_str	00000000 
0003268f l       .debug_str	00000000 
000326d8 l       .debug_str	00000000 
0003271d l       .debug_str	00000000 
00032779 l       .debug_str	00000000 
000327c2 l       .debug_str	00000000 
00032807 l       .debug_str	00000000 
00032863 l       .debug_str	00000000 
000328ad l       .debug_str	00000000 
000328f3 l       .debug_str	00000000 
00032950 l       .debug_str	00000000 
0003299a l       .debug_str	00000000 
000329e0 l       .debug_str	00000000 
00032a3d l       .debug_str	00000000 
00032a87 l       .debug_str	00000000 
00032acd l       .debug_str	00000000 
00032b2a l       .debug_str	00000000 
00032b85 l       .debug_str	00000000 
00032bcd l       .debug_str	00000000 
00032c11 l       .debug_str	00000000 
00032c59 l       .debug_str	00000000 
00032c9d l       .debug_str	00000000 
00032cf8 l       .debug_str	00000000 
00032d53 l       .debug_str	00000000 
00032d9b l       .debug_str	00000000 
00032ddf l       .debug_str	00000000 
00032e28 l       .debug_str	00000000 
00032e6d l       .debug_str	00000000 
00032ec9 l       .debug_str	00000000 
00032f25 l       .debug_str	00000000 
00032f6e l       .debug_str	00000000 
00032fb3 l       .debug_str	00000000 
0003300f l       .debug_str	00000000 
00033058 l       .debug_str	00000000 
0003309d l       .debug_str	00000000 
000330f9 l       .debug_str	00000000 
00033142 l       .debug_str	00000000 
00033187 l       .debug_str	00000000 
00023ff2 l       .debug_str	00000000 
000331e3 l       .debug_str	00000000 
00033222 l       .debug_str	00000000 
00033257 l       .debug_str	00000000 
0000594d l       .debug_str	00000000 
00013ed2 l       .debug_str	00000000 
00014022 l       .debug_str	00000000 
00033261 l       .debug_str	00000000 
00015fde l       .debug_str	00000000 
000016e2 l       .debug_str	00000000 
0003329b l       .debug_str	00000000 
00000e46 l       .debug_str	00000000 
0003332d l       .debug_str	00000000 
0001550a l       .debug_str	00000000 
00033366 l       .debug_str	00000000 
000149f1 l       .debug_str	00000000 
0003338d l       .debug_str	00000000 
0001493d l       .debug_str	00000000 
00005926 l       .debug_str	00000000 
000333c7 l       .debug_str	00000000 
000146bc l       .debug_str	00000000 
000333ed l       .debug_str	00000000 
0001440d l       .debug_str	00000000 
00033447 l       .debug_str	00000000 
00014e17 l       .debug_str	00000000 
000334e1 l       .debug_str	00000000 
00014031 l       .debug_str	00000000 
0003356a l       .debug_str	00000000 
00033611 l       .debug_str	00000000 
0003364a l       .debug_str	00000000 
000336bf l       .debug_str	00000000 
000336e8 l       .debug_str	00000000 
00027096 l       .debug_str	00000000 
0003371d l       .debug_str	00000000 
00033759 l       .debug_str	00000000 
0003376a l       .debug_str	00000000 
000337a3 l       .debug_str	00000000 
0001351c l       .debug_str	00000000 
000337b0 l       .debug_str	00000000 
000337bf l       .debug_str	00000000 
0002f096 l       .debug_str	00000000 
00033808 l       .debug_str	00000000 
0003383b l       .debug_str	00000000 
00033848 l       .debug_str	00000000 
0005874b l       .debug_str	00000000 
00033893 l       .debug_str	00000000 
000338eb l       .debug_str	00000000 
00033900 l       .debug_str	00000000 
00033936 l       .debug_str	00000000 
00033941 l       .debug_str	00000000 
000271a4 l       .debug_str	00000000 
000339a0 l       .debug_str	00000000 
00033a13 l       .debug_str	00000000 
00033a7a l       .debug_str	00000000 
00033a9a l       .debug_str	00000000 
00033ad9 l       .debug_str	00000000 
00033af8 l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
00033b6b l       .debug_str	00000000 
00033be8 l       .debug_str	00000000 
00033c4d l       .debug_str	00000000 
00033cad l       .debug_str	00000000 
00033d20 l       .debug_str	00000000 
00033d9d l       .debug_str	00000000 
00016173 l       .debug_str	00000000 
00033e15 l       .debug_str	00000000 
00033e8a l       .debug_str	00000000 
00033f04 l       .debug_str	00000000 
00012ecb l       .debug_str	00000000 
00012ed6 l       .debug_str	00000000 
00033f64 l       .debug_str	00000000 
00056739 l       .debug_str	00000000 
00033fa2 l       .debug_str	00000000 
00033fe4 l       .debug_str	00000000 
0003400f l       .debug_str	00000000 
00034050 l       .debug_str	00000000 
0003405a l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
000575f3 l       .debug_str	00000000 
00051ed9 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
000340b6 l       .debug_str	00000000 
0001120f l       .debug_str	00000000 
000340f2 l       .debug_str	00000000 
000111c0 l       .debug_str	00000000 
00034139 l       .debug_str	00000000 
00034197 l       .debug_str	00000000 
0002bac6 l       .debug_str	00000000 
000341ee l       .debug_str	00000000 
00034248 l       .debug_str	00000000 
00034252 l       .debug_str	00000000 
000134ea l       .debug_str	00000000 
000134ef l       .debug_str	00000000 
00034295 l       .debug_str	00000000 
000342cb l       .debug_str	00000000 
000342db l       .debug_str	00000000 
000342ea l       .debug_str	00000000 
000342f5 l       .debug_str	00000000 
0002bbac l       .debug_str	00000000 
0003432f l       .debug_str	00000000 
00034378 l       .debug_str	00000000 
00026017 l       .debug_str	00000000 
000343bf l       .debug_str	00000000 
000343fa l       .debug_str	00000000 
0003441f l       .debug_str	00000000 
0003448b l       .debug_str	00000000 
0003449e l       .debug_str	00000000 
00034515 l       .debug_str	00000000 
00034520 l       .debug_str	00000000 
0003455d l       .debug_str	00000000 
00034568 l       .debug_str	00000000 
000345e9 l       .debug_str	00000000 
0003462f l       .debug_str	00000000 
00034656 l       .debug_str	00000000 
00034685 l       .debug_str	00000000 
00034696 l       .debug_str	00000000 
00013f74 l       .debug_str	00000000 
000346f2 l       .debug_str	00000000 
00034723 l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
0003476b l       .debug_str	00000000 
000201ce l       .debug_str	00000000 
000347a9 l       .debug_str	00000000 
000347ed l       .debug_str	00000000 
00034840 l       .debug_str	00000000 
000312db l       .debug_str	00000000 
000348b8 l       .debug_str	00000000 
00034907 l       .debug_str	00000000 
0003499d l       .debug_str	00000000 
000349e1 l       .debug_str	00000000 
0003871f l       .debug_str	00000000 
00034a59 l       .debug_str	00000000 
00034aa8 l       .debug_str	00000000 
00034b3e l       .debug_str	00000000 
00034b58 l       .debug_str	00000000 
00034ba7 l       .debug_str	00000000 
00034be0 l       .debug_str	00000000 
00034bfb l       .debug_str	00000000 
00015b95 l       .debug_str	00000000 
00034c5f l       .debug_str	00000000 
000154a1 l       .debug_str	00000000 
00034cd8 l       .debug_str	00000000 
00022d2b l       .debug_str	00000000 
00034d49 l       .debug_str	00000000 
00034ddf l       .debug_str	00000000 
00034e77 l       .debug_str	00000000 
00034ee9 l       .debug_str	00000000 
00034f11 l       .debug_str	00000000 
0001af20 l       .debug_str	00000000 
00034fc9 l       .debug_str	00000000 
00024930 l       .debug_str	00000000 
0003500e l       .debug_str	00000000 
000350c4 l       .debug_str	00000000 
00035109 l       .debug_str	00000000 
00002b2a l       .debug_str	00000000 
0003514b l       .debug_str	00000000 
000351a6 l       .debug_str	00000000 
000351ab l       .debug_str	00000000 
00035204 l       .debug_str	00000000 
00035238 l       .debug_str	00000000 
0003524c l       .debug_str	00000000 
00035287 l       .debug_str	00000000 
000352c9 l       .debug_str	00000000 
000352df l       .debug_str	00000000 
0003534b l       .debug_str	00000000 
00012ecf l       .debug_str	00000000 
0000b835 l       .debug_str	00000000 
0000b840 l       .debug_str	00000000 
0003538d l       .debug_str	00000000 
000353cd l       .debug_str	00000000 
00035427 l       .debug_str	00000000 
00035469 l       .debug_str	00000000 
000354c4 l       .debug_str	00000000 
00035506 l       .debug_str	00000000 
00035511 l       .debug_str	00000000 
00035551 l       .debug_str	00000000 
00035557 l       .debug_str	00000000 
000355b1 l       .debug_str	00000000 
000355ba l       .debug_str	00000000 
000355fc l       .debug_str	00000000 
00035654 l       .debug_str	00000000 
00035696 l       .debug_str	00000000 
000356ef l       .debug_str	00000000 
000356f9 l       .debug_str	00000000 
00035701 l       .debug_str	00000000 
0003570a l       .debug_str	00000000 
000356fd l       .debug_str	00000000 
0003574c l       .debug_str	00000000 
000357a1 l       .debug_str	00000000 
000357de l       .debug_str	00000000 
00035820 l       .debug_str	00000000 
00035877 l       .debug_str	00000000 
000358b9 l       .debug_str	00000000 
00035911 l       .debug_str	00000000 
00035949 l       .debug_str	00000000 
00035955 l       .debug_str	00000000 
00035992 l       .debug_str	00000000 
000359f4 l       .debug_str	00000000 
00035a35 l       .debug_str	00000000 
00035a3e l       .debug_str	00000000 
00035a9c l       .debug_str	00000000 
00035ad5 l       .debug_str	00000000 
00035ae4 l       .debug_str	00000000 
00035b23 l       .debug_str	00000000 
00035b38 l       .debug_str	00000000 
00035b7e l       .debug_str	00000000 
00035b8b l       .debug_str	00000000 
00035b91 l       .debug_str	00000000 
00035bca l       .debug_str	00000000 
00035c56 l       .debug_str	00000000 
00035c92 l       .debug_str	00000000 
00051ac8 l       .debug_str	00000000 
00035ca4 l       .debug_str	00000000 
00035cdc l       .debug_str	00000000 
00035ce8 l       .debug_str	00000000 
00035d25 l       .debug_str	00000000 
00035d87 l       .debug_str	00000000 
00035dc8 l       .debug_str	00000000 
00035e26 l       .debug_str	00000000 
00035e60 l       .debug_str	00000000 
00035eba l       .debug_str	00000000 
00035f03 l       .debug_str	00000000 
00035f13 l       .debug_str	00000000 
00035f4c l       .debug_str	00000000 
00035fce l       .debug_str	00000000 
00036008 l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
0003609d l       .debug_str	00000000 
000360fd l       .debug_str	00000000 
00036138 l       .debug_str	00000000 
00036198 l       .debug_str	00000000 
000361d6 l       .debug_str	00000000 
00036234 l       .debug_str	00000000 
00036272 l       .debug_str	00000000 
000362d0 l       .debug_str	00000000 
0003631b l       .debug_str	00000000 
00036324 l       .debug_str	00000000 
00036373 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0003637f l       .debug_str	00000000 
000363b0 l       .debug_str	00000000 
000363db l       .debug_str	00000000 
00036429 l       .debug_str	00000000 
00013fa5 l       .debug_str	00000000 
00036430 l       .debug_str	00000000 
00036495 l       .debug_str	00000000 
000364c6 l       .debug_str	00000000 
000364ce l       .debug_str	00000000 
00014619 l       .debug_str	00000000 
000364ff l       .debug_str	00000000 
00036558 l       .debug_str	00000000 
000365e6 l       .debug_str	00000000 
00036632 l       .debug_str	00000000 
00036657 l       .debug_str	00000000 
00036674 l       .debug_str	00000000 
0003669e l       .debug_str	00000000 
0001aeb3 l       .debug_str	00000000 
0001af6e l       .debug_str	00000000 
0001afea l       .debug_str	00000000 
000366c0 l       .debug_str	00000000 
0003670d l       .debug_str	00000000 
00036752 l       .debug_str	00000000 
00036791 l       .debug_str	00000000 
000367dd l       .debug_str	00000000 
0003686c l       .debug_str	00000000 
000368b9 l       .debug_str	00000000 
0003693f l       .debug_str	00000000 
000539ca l       .debug_str	00000000 
00036964 l       .debug_str	00000000 
0003698e l       .debug_str	00000000 
00036997 l       .debug_str	00000000 
000369cd l       .debug_str	00000000 
000369d6 l       .debug_str	00000000 
00036a64 l       .debug_str	00000000 
00036aaa l       .debug_str	00000000 
00036ac9 l       .debug_str	00000000 
00036ae0 l       .debug_str	00000000 
00036b04 l       .debug_str	00000000 
00036b20 l       .debug_str	00000000 
00036b67 l       .debug_str	00000000 
00036bac l       .debug_str	00000000 
00036beb l       .debug_str	00000000 
00036c31 l       .debug_str	00000000 
00036cc0 l       .debug_str	00000000 
00036d07 l       .debug_str	00000000 
00036d8d l       .debug_str	00000000 
00036dc2 l       .debug_str	00000000 
00036dcc l       .debug_str	00000000 
000529e3 l       .debug_str	00000000 
00036e37 l       .debug_str	00000000 
00036e6c l       .debug_str	00000000 
00036e76 l       .debug_str	00000000 
00036ea9 l       .debug_str	00000000 
00036eb1 l       .debug_str	00000000 
00036ee5 l       .debug_str	00000000 
00036ef7 l       .debug_str	00000000 
00036f31 l       .debug_str	00000000 
00036f4f l       .debug_str	00000000 
00036f75 l       .debug_str	00000000 
00036f80 l       .debug_str	00000000 
00036fa9 l       .debug_str	00000000 
00036fb7 l       .debug_str	00000000 
00036ff1 l       .debug_str	00000000 
00037027 l       .debug_str	00000000 
0003704d l       .debug_str	00000000 
00037070 l       .debug_str	00000000 
00037099 l       .debug_str	00000000 
000370bf l       .debug_str	00000000 
000370fd l       .debug_str	00000000 
00037117 l       .debug_str	00000000 
00037155 l       .debug_str	00000000 
00037187 l       .debug_str	00000000 
00037193 l       .debug_str	00000000 
0005915f l       .debug_str	00000000 
000371c7 l       .debug_str	00000000 
000371d4 l       .debug_str	00000000 
00023dd7 l       .debug_str	00000000 
00037206 l       .debug_str	00000000 
00037270 l       .debug_str	00000000 
000372e0 l       .debug_str	00000000 
00037347 l       .debug_str	00000000 
00037364 l       .debug_str	00000000 
000373a3 l       .debug_str	00000000 
000373bf l       .debug_str	00000000 
00023d99 l       .debug_str	00000000 
000373ed l       .debug_str	00000000 
00023e75 l       .debug_str	00000000 
00037422 l       .debug_str	00000000 
0003745e l       .debug_str	00000000 
00037484 l       .debug_str	00000000 
000374c3 l       .debug_str	00000000 
000374d3 l       .debug_str	00000000 
00037537 l       .debug_str	00000000 
0003756e l       .debug_str	00000000 
00037584 l       .debug_str	00000000 
000375d3 l       .debug_str	00000000 
000375df l       .debug_str	00000000 
000376b1 l       .debug_str	00000000 
00037626 l       .debug_str	00000000 
000376ac l       .debug_str	00000000 
000376d0 l       .debug_str	00000000 
0003770b l       .debug_str	00000000 
0003771b l       .debug_str	00000000 
00059087 l       .debug_str	00000000 
0003775c l       .debug_str	00000000 
00037796 l       .debug_str	00000000 
000377a5 l       .debug_str	00000000 
000377de l       .debug_str	00000000 
000377ec l       .debug_str	00000000 
00037825 l       .debug_str	00000000 
00037833 l       .debug_str	00000000 
00037883 l       .debug_str	00000000 
00037890 l       .debug_str	00000000 
00037906 l       .debug_str	00000000 
00037911 l       .debug_str	00000000 
00037923 l       .debug_str	00000000 
0003796f l       .debug_str	00000000 
0003798c l       .debug_str	00000000 
00037a20 l       .debug_str	00000000 
00037ab6 l       .debug_str	00000000 
00037b28 l       .debug_str	00000000 
00037b4e l       .debug_str	00000000 
00037bed l       .debug_str	00000000 
00037c5e l       .debug_str	00000000 
000039d0 l       .debug_str	00000000 
00037ca3 l       .debug_str	00000000 
00037d06 l       .debug_str	00000000 
00037d29 l       .debug_str	00000000 
00037d7d l       .debug_str	00000000 
00037d94 l       .debug_str	00000000 
00025930 l       .debug_str	00000000 
00037de1 l       .debug_str	00000000 
00037dee l       .debug_str	00000000 
00037e29 l       .debug_str	00000000 
00037e51 l       .debug_str	00000000 
00037eb3 l       .debug_str	00000000 
0003393b l       .debug_str	00000000 
00037f1c l       .debug_str	00000000 
0003a74a l       .debug_str	00000000 
0000592a l       .debug_str	00000000 
00005930 l       .debug_str	00000000 
00005937 l       .debug_str	00000000 
000281f1 l       .debug_str	00000000 
00028202 l       .debug_str	00000000 
00037f69 l       .debug_str	00000000 
0000b32d l       .debug_str	00000000 
00037fb4 l       .debug_str	00000000 
00038037 l       .debug_str	00000000 
00038067 l       .debug_str	00000000 
000380ef l       .debug_str	00000000 
00038164 l       .debug_str	00000000 
000381b7 l       .debug_str	00000000 
00038243 l       .debug_str	00000000 
0003827b l       .debug_str	00000000 
000382d0 l       .debug_str	00000000 
00038301 l       .debug_str	00000000 
00038353 l       .debug_str	00000000 
00038381 l       .debug_str	00000000 
000383d5 l       .debug_str	00000000 
000383fb l       .debug_str	00000000 
0002011a l       .debug_str	00000000 
00038432 l       .debug_str	00000000 
0003847d l       .debug_str	00000000 
00038499 l       .debug_str	00000000 
000384ef l       .debug_str	00000000 
00020261 l       .debug_str	00000000 
00038568 l       .debug_str	00000000 
000385b8 l       .debug_str	00000000 
0003864f l       .debug_str	00000000 
000386a5 l       .debug_str	00000000 
0003871e l       .debug_str	00000000 
00038736 l       .debug_str	00000000 
000387cd l       .debug_str	00000000 
00038806 l       .debug_str	00000000 
00038a36 l       .debug_str	00000000 
0003884f l       .debug_str	00000000 
00037717 l       .debug_str	00000000 
0003888c l       .debug_str	00000000 
000388d0 l       .debug_str	00000000 
0003891b l       .debug_str	00000000 
0003895b l       .debug_str	00000000 
00038985 l       .debug_str	00000000 
000389ce l       .debug_str	00000000 
000389dd l       .debug_str	00000000 
00038a2e l       .debug_str	00000000 
00038a45 l       .debug_str	00000000 
00042ce5 l       .debug_str	00000000 
00054284 l       .debug_str	00000000 
00038aac l       .debug_str	00000000 
00038b0d l       .debug_str	00000000 
00038b2c l       .debug_str	00000000 
00038b35 l       .debug_str	00000000 
00038b41 l       .debug_str	00000000 
000172b6 l       .debug_str	00000000 
00038b47 l       .debug_str	00000000 
00038b51 l       .debug_str	00000000 
00038b83 l       .debug_str	00000000 
00038b93 l       .debug_str	00000000 
00038c1b l       .debug_str	00000000 
00038c24 l       .debug_str	00000000 
000016ca l       .debug_str	00000000 
00038c91 l       .debug_str	00000000 
00038cd0 l       .debug_str	00000000 
000166e5 l       .debug_str	00000000 
000166f1 l       .debug_str	00000000 
000166fb l       .debug_str	00000000 
00038cdf l       .debug_str	00000000 
00038d4f l       .debug_str	00000000 
00038d74 l       .debug_str	00000000 
00038de3 l       .debug_str	00000000 
00038e09 l       .debug_str	00000000 
00038e78 l       .debug_str	00000000 
00038ea2 l       .debug_str	00000000 
00038ed9 l       .debug_str	00000000 
00038ee4 l       .debug_str	00000000 
00038f20 l       .debug_str	00000000 
00038f3f l       .debug_str	00000000 
00038f79 l       .debug_str	00000000 
00038fb4 l       .debug_str	00000000 
00038ff0 l       .debug_str	00000000 
0000e939 l       .debug_str	00000000 
0003900a l       .debug_str	00000000 
00039046 l       .debug_str	00000000 
00039053 l       .debug_str	00000000 
00051d3f l       .debug_str	00000000 
00039091 l       .debug_str	00000000 
000390d7 l       .debug_str	00000000 
0003915f l       .debug_str	00000000 
00039178 l       .debug_str	00000000 
000391d2 l       .debug_str	00000000 
00039218 l       .debug_str	00000000 
00039230 l       .debug_str	00000000 
000392b0 l       .debug_str	00000000 
00039784 l       .debug_str	00000000 
000392c0 l       .debug_str	00000000 
000392ff l       .debug_str	00000000 
0003933f l       .debug_str	00000000 
000393c9 l       .debug_str	00000000 
000393e0 l       .debug_str	00000000 
00039431 l       .debug_str	00000000 
0003943f l       .debug_str	00000000 
00039444 l       .debug_str	00000000 
0003949f l       .debug_str	00000000 
00039e59 l       .debug_str	00000000 
000394f6 l       .debug_str	00000000 
00039529 l       .debug_str	00000000 
00039570 l       .debug_str	00000000 
000395aa l       .debug_str	00000000 
000395d9 l       .debug_str	00000000 
00039657 l       .debug_str	00000000 
000396db l       .debug_str	00000000 
00039768 l       .debug_str	00000000 
0003977d l       .debug_str	00000000 
0003978d l       .debug_str	00000000 
000397d9 l       .debug_str	00000000 
0003981e l       .debug_str	00000000 
000398b5 l       .debug_str	00000000 
000398d1 l       .debug_str	00000000 
00039918 l       .debug_str	00000000 
00039946 l       .debug_str	00000000 
0003997f l       .debug_str	00000000 
000399a1 l       .debug_str	00000000 
0001a1f4 l       .debug_str	00000000 
00039a1f l       .debug_str	00000000 
00039a9f l       .debug_str	00000000 
00039ade l       .debug_str	00000000 
00039b68 l       .debug_str	00000000 
00039bb4 l       .debug_str	00000000 
00039bd2 l       .debug_str	00000000 
00039bdd l       .debug_str	00000000 
00039c3f l       .debug_str	00000000 
00039c96 l       .debug_str	00000000 
00039d23 l       .debug_str	00000000 
00039d6f l       .debug_str	00000000 
00039e06 l       .debug_str	00000000 
00039e50 l       .debug_str	00000000 
00039e6c l       .debug_str	00000000 
00039ec6 l       .debug_str	00000000 
00039ecf l       .debug_str	00000000 
00039f2e l       .debug_str	00000000 
00039f85 l       .debug_str	00000000 
00039fde l       .debug_str	00000000 
00039ff3 l       .debug_str	00000000 
0003a040 l       .debug_str	00000000 
0003a08b l       .debug_str	00000000 
0003a09e l       .debug_str	00000000 
0001ecda l       .debug_str	00000000 
00013612 l       .debug_str	00000000 
0003a0e9 l       .debug_str	00000000 
0003a0fe l       .debug_str	00000000 
0003a10a l       .debug_str	00000000 
0003a14f l       .debug_str	00000000 
0003a1a8 l       .debug_str	00000000 
0003a1bd l       .debug_str	00000000 
0003a20a l       .debug_str	00000000 
0003a255 l       .debug_str	00000000 
0003a268 l       .debug_str	00000000 
0003a2b3 l       .debug_str	00000000 
0003a2c6 l       .debug_str	00000000 
0003a32a l       .debug_str	00000000 
0003a363 l       .debug_str	00000000 
0003a38f l       .debug_str	00000000 
00057db4 l       .debug_str	00000000 
00053179 l       .debug_str	00000000 
0003a40e l       .debug_str	00000000 
0003a414 l       .debug_str	00000000 
0003a41d l       .debug_str	00000000 
0003a455 l       .debug_str	00000000 
0003a472 l       .debug_str	00000000 
0003a4ae l       .debug_str	00000000 
0003a4cb l       .debug_str	00000000 
0003a527 l       .debug_str	00000000 
0003a55f l       .debug_str	00000000 
0003a5bb l       .debug_str	00000000 
00025fb7 l       .debug_str	00000000 
0003a5f3 l       .debug_str	00000000 
0003a631 l       .debug_str	00000000 
0003a64d l       .debug_str	00000000 
0003a6a3 l       .debug_str	00000000 
0003a70a l       .debug_str	00000000 
0003a742 l       .debug_str	00000000 
0003a74e l       .debug_str	00000000 
0003a7b5 l       .debug_str	00000000 
0003a7f4 l       .debug_str	00000000 
0003a805 l       .debug_str	00000000 
0003a83e l       .debug_str	00000000 
000487e6 l       .debug_str	00000000 
0003a859 l       .debug_str	00000000 
0003a895 l       .debug_str	00000000 
0003a88e l       .debug_str	00000000 
0003a89e l       .debug_str	00000000 
0003a8b0 l       .debug_str	00000000 
0003a8fb l       .debug_str	00000000 
0003a913 l       .debug_str	00000000 
0003a91d l       .debug_str	00000000 
0003a934 l       .debug_str	00000000 
0003a943 l       .debug_str	00000000 
0003a985 l       .debug_str	00000000 
0003a99e l       .debug_str	00000000 
0003aa12 l       .debug_str	00000000 
0003aa21 l       .debug_str	00000000 
0003aa5a l       .debug_str	00000000 
0003aa70 l       .debug_str	00000000 
0003aab0 l       .debug_str	00000000 
0003aabb l       .debug_str	00000000 
0003ab3a l       .debug_str	00000000 
000528f2 l       .debug_str	00000000 
0003ab59 l       .debug_str	00000000 
0003ab6e l       .debug_str	00000000 
0003ab78 l       .debug_str	00000000 
0001a821 l       .debug_str	00000000 
0003ab7d l       .debug_str	00000000 
0003abae l       .debug_str	00000000 
0003abc1 l       .debug_str	00000000 
0003abcb l       .debug_str	00000000 
0003abe8 l       .debug_str	00000000 
0003ac23 l       .debug_str	00000000 
0003ac58 l       .debug_str	00000000 
0003ac89 l       .debug_str	00000000 
0003ac9d l       .debug_str	00000000 
0003aca8 l       .debug_str	00000000 
0003acc6 l       .debug_str	00000000 
0003ad01 l       .debug_str	00000000 
0003ad37 l       .debug_str	00000000 
0003ad68 l       .debug_str	00000000 
0003ad7c l       .debug_str	00000000 
0003ad87 l       .debug_str	00000000 
0003ada5 l       .debug_str	00000000 
0003ade0 l       .debug_str	00000000 
0003ae16 l       .debug_str	00000000 
0003ae47 l       .debug_str	00000000 
0003ae5b l       .debug_str	00000000 
0003ae66 l       .debug_str	00000000 
0003ae84 l       .debug_str	00000000 
0003aebf l       .debug_str	00000000 
0003aef5 l       .debug_str	00000000 
0003af26 l       .debug_str	00000000 
0003f773 l       .debug_str	00000000 
0003af3b l       .debug_str	00000000 
0003af47 l       .debug_str	00000000 
0003af66 l       .debug_str	00000000 
0003afa1 l       .debug_str	00000000 
0003afd8 l       .debug_str	00000000 
0003b009 l       .debug_str	00000000 
0003b01c l       .debug_str	00000000 
0003b026 l       .debug_str	00000000 
0003b043 l       .debug_str	00000000 
0003b07e l       .debug_str	00000000 
0003b0b3 l       .debug_str	00000000 
0003b0e4 l       .debug_str	00000000 
0003b0f8 l       .debug_str	00000000 
0003b103 l       .debug_str	00000000 
0003b121 l       .debug_str	00000000 
0003b15c l       .debug_str	00000000 
0003b192 l       .debug_str	00000000 
0003b1c3 l       .debug_str	00000000 
0003b1d7 l       .debug_str	00000000 
0003b246 l       .debug_str	00000000 
0003b281 l       .debug_str	00000000 
0003b2ca l       .debug_str	00000000 
0003b30f l       .debug_str	00000000 
0003b36b l       .debug_str	00000000 
0003b3b4 l       .debug_str	00000000 
0003b3f9 l       .debug_str	00000000 
0003b455 l       .debug_str	00000000 
0003b49e l       .debug_str	00000000 
0003b4e3 l       .debug_str	00000000 
0003b53f l       .debug_str	00000000 
0003b54a l       .debug_str	00000000 
0003b568 l       .debug_str	00000000 
0003b5a3 l       .debug_str	00000000 
0003b5d9 l       .debug_str	00000000 
0003b60a l       .debug_str	00000000 
0003b61e l       .debug_str	00000000 
0003b629 l       .debug_str	00000000 
0003b647 l       .debug_str	00000000 
0003b682 l       .debug_str	00000000 
0003b6b8 l       .debug_str	00000000 
0003b727 l       .debug_str	00000000 
0003b762 l       .debug_str	00000000 
0003b793 l       .debug_str	00000000 
0003b7a8 l       .debug_str	00000000 
0003b7ad l       .debug_str	00000000 
0003b7b9 l       .debug_str	00000000 
0003b7d8 l       .debug_str	00000000 
0003b813 l       .debug_str	00000000 
0003b84a l       .debug_str	00000000 
0003b8b9 l       .debug_str	00000000 
0003b8f5 l       .debug_str	00000000 
0000aaf4 l       .debug_str	00000000 
0003b93e l       .debug_str	00000000 
0003b949 l       .debug_str	00000000 
0003b990 l       .debug_str	00000000 
0003b99a l       .debug_str	00000000 
0003ba1c l       .debug_str	00000000 
0003ba39 l       .debug_str	00000000 
000176a3 l       .debug_str	00000000 
0003ba94 l       .debug_str	00000000 
0003baee l       .debug_str	00000000 
0003bafb l       .debug_str	00000000 
0003bb6d l       .debug_str	00000000 
0003bbd1 l       .debug_str	00000000 
0003bbdc l       .debug_str	00000000 
0003bc55 l       .debug_str	00000000 
0003bc61 l       .debug_str	00000000 
0003bcdd l       .debug_str	00000000 
0003bce3 l       .debug_str	00000000 
0003bcea l       .debug_str	00000000 
0003bd26 l       .debug_str	00000000 
00014b9b l       .debug_str	00000000 
0003bd6f l       .debug_str	00000000 
0003bdb3 l       .debug_str	00000000 
0003bdfe l       .debug_str	00000000 
0003be3d l       .debug_str	00000000 
0003be62 l       .debug_str	00000000 
0003beb8 l       .debug_str	00000000 
0003bf26 l       .debug_str	00000000 
0003bfa6 l       .debug_str	00000000 
0003c013 l       .debug_str	00000000 
0003c09e l       .debug_str	00000000 
0003c112 l       .debug_str	00000000 
0003c152 l       .debug_str	00000000 
0003c1d3 l       .debug_str	00000000 
0003c214 l       .debug_str	00000000 
0003c278 l       .debug_str	00000000 
0003c327 l       .debug_str	00000000 
0003c371 l       .debug_str	00000000 
0003c3be l       .debug_str	00000000 
0003c404 l       .debug_str	00000000 
0003c40e l       .debug_str	00000000 
0003c447 l       .debug_str	00000000 
0003c476 l       .debug_str	00000000 
0003c4d7 l       .debug_str	00000000 
0003c506 l       .debug_str	00000000 
0003c543 l       .debug_str	00000000 
0003c5d2 l       .debug_str	00000000 
0003c607 l       .debug_str	00000000 
0003c68d l       .debug_str	00000000 
0003c713 l       .debug_str	00000000 
0003c767 l       .debug_str	00000000 
0003c7f0 l       .debug_str	00000000 
0001a0c5 l       .debug_str	00000000 
0003c83e l       .debug_str	00000000 
0003c8cc l       .debug_str	00000000 
0003c920 l       .debug_str	00000000 
0003c95f l       .debug_str	00000000 
0003c9aa l       .debug_str	00000000 
0003ca2c l       .debug_str	00000000 
0003ca48 l       .debug_str	00000000 
0003caa1 l       .debug_str	00000000 
0003cafa l       .debug_str	00000000 
0003cb37 l       .debug_str	00000000 
0003cb78 l       .debug_str	00000000 
0003cbd9 l       .debug_str	00000000 
0003cc4a l       .debug_str	00000000 
0003cc7a l       .debug_str	00000000 
0003ccc0 l       .debug_str	00000000 
0003cd32 l       .debug_str	00000000 
0003cdc6 l       .debug_str	00000000 
0003cdea l       .debug_str	00000000 
0003ce66 l       .debug_str	00000000 
0003cea0 l       .debug_str	00000000 
0003cee2 l       .debug_str	00000000 
0003cf92 l       .debug_str	00000000 
0003cfd1 l       .debug_str	00000000 
0003d074 l       .debug_str	00000000 
0003d0d0 l       .debug_str	00000000 
0003d12d l       .debug_str	00000000 
0003d1d8 l       .debug_str	00000000 
0003d211 l       .debug_str	00000000 
0003d28d l       .debug_str	00000000 
0003d2c5 l       .debug_str	00000000 
0003d2d1 l       .debug_str	00000000 
0003d30e l       .debug_str	00000000 
0003d366 l       .debug_str	00000000 
0003d386 l       .debug_str	00000000 
0003d3df l       .debug_str	00000000 
0003d438 l       .debug_str	00000000 
0003d491 l       .debug_str	00000000 
0003d4eb l       .debug_str	00000000 
0003d521 l       .debug_str	00000000 
0003d531 l       .debug_str	00000000 
0003d540 l       .debug_str	00000000 
0003d549 l       .debug_str	00000000 
0003d580 l       .debug_str	00000000 
0003d5bc l       .debug_str	00000000 
0003d5cc l       .debug_str	00000000 
0003d628 l       .debug_str	00000000 
0003d68a l       .debug_str	00000000 
00030899 l       .debug_str	00000000 
0003d6d4 l       .debug_str	00000000 
0003d70f l       .debug_str	00000000 
0003d734 l       .debug_str	00000000 
0003d793 l       .debug_str	00000000 
0003d7dd l       .debug_str	00000000 
0003d818 l       .debug_str	00000000 
0003d83d l       .debug_str	00000000 
0003d89c l       .debug_str	00000000 
0003d905 l       .debug_str	00000000 
0003d90e l       .debug_str	00000000 
0003d945 l       .debug_str	00000000 
0003d9a1 l       .debug_str	00000000 
0003da03 l       .debug_str	00000000 
0003da62 l       .debug_str	00000000 
0003dac1 l       .debug_str	00000000 
0003daf7 l       .debug_str	00000000 
0003db08 l       .debug_str	00000000 
0003db18 l       .debug_str	00000000 
0003db22 l       .debug_str	00000000 
0003db5a l       .debug_str	00000000 
0003dbb7 l       .debug_str	00000000 
0003dc1a l       .debug_str	00000000 
0003dc65 l       .debug_str	00000000 
0003dca0 l       .debug_str	00000000 
0003dcc6 l       .debug_str	00000000 
0003dd26 l       .debug_str	00000000 
0003dd71 l       .debug_str	00000000 
0003ddac l       .debug_str	00000000 
0003ddd2 l       .debug_str	00000000 
0003de32 l       .debug_str	00000000 
0003de68 l       .debug_str	00000000 
0003de79 l       .debug_str	00000000 
0003de89 l       .debug_str	00000000 
0003de93 l       .debug_str	00000000 
0003decb l       .debug_str	00000000 
0003df28 l       .debug_str	00000000 
0003df8b l       .debug_str	00000000 
0003dfeb l       .debug_str	00000000 
0003e04b l       .debug_str	00000000 
0003e081 l       .debug_str	00000000 
0003e092 l       .debug_str	00000000 
0003e0a2 l       .debug_str	00000000 
0003e0ac l       .debug_str	00000000 
0003e0e4 l       .debug_str	00000000 
0003e141 l       .debug_str	00000000 
0003e1a4 l       .debug_str	00000000 
0003e1ef l       .debug_str	00000000 
0003e22a l       .debug_str	00000000 
0003e250 l       .debug_str	00000000 
0003e2b0 l       .debug_str	00000000 
0003e2fb l       .debug_str	00000000 
0003e336 l       .debug_str	00000000 
0003e35c l       .debug_str	00000000 
0003e3bc l       .debug_str	00000000 
0003e3f2 l       .debug_str	00000000 
0003e403 l       .debug_str	00000000 
0003e413 l       .debug_str	00000000 
0003e41d l       .debug_str	00000000 
0003e455 l       .debug_str	00000000 
0003e4b2 l       .debug_str	00000000 
0003e515 l       .debug_str	00000000 
0003e575 l       .debug_str	00000000 
0003e5d5 l       .debug_str	00000000 
0003e60b l       .debug_str	00000000 
0000b8f1 l       .debug_str	00000000 
0003e61e l       .debug_str	00000000 
0003e630 l       .debug_str	00000000 
0003e63c l       .debug_str	00000000 
0003e677 l       .debug_str	00000000 
0003e6d6 l       .debug_str	00000000 
0003e73b l       .debug_str	00000000 
0003e79d l       .debug_str	00000000 
0003e7d8 l       .debug_str	00000000 
0003e800 l       .debug_str	00000000 
0003e862 l       .debug_str	00000000 
0001d493 l       .debug_str	00000000 
0001feaf l       .debug_str	00000000 
00013571 l       .debug_str	00000000 
0003e898 l       .debug_str	00000000 
0003e8d3 l       .debug_str	00000000 
0003e913 l       .debug_str	00000000 
0003e930 l       .debug_str	00000000 
0003e974 l       .debug_str	00000000 
0003e995 l       .debug_str	00000000 
0003e9d5 l       .debug_str	00000000 
0003e9f2 l       .debug_str	00000000 
0003ea36 l       .debug_str	00000000 
0003ea57 l       .debug_str	00000000 
0003eab9 l       .debug_str	00000000 
0003eb20 l       .debug_str	00000000 
0003eb5b l       .debug_str	00000000 
0003eb7e l       .debug_str	00000000 
0003ebe4 l       .debug_str	00000000 
0003ec1f l       .debug_str	00000000 
0003ec41 l       .debug_str	00000000 
0003ec7c l       .debug_str	00000000 
0003eca0 l       .debug_str	00000000 
0003ecdb l       .debug_str	00000000 
0003ecfe l       .debug_str	00000000 
0003ed39 l       .debug_str	00000000 
0003ed5d l       .debug_str	00000000 
0003ed98 l       .debug_str	00000000 
0003edbb l       .debug_str	00000000 
0003edf6 l       .debug_str	00000000 
0003ee1a l       .debug_str	00000000 
0003ee65 l       .debug_str	00000000 
0003eec7 l       .debug_str	00000000 
0003ef02 l       .debug_str	00000000 
0003ef25 l       .debug_str	00000000 
0003ef70 l       .debug_str	00000000 
0003efab l       .debug_str	00000000 
0003efd1 l       .debug_str	00000000 
0003f00c l       .debug_str	00000000 
0003f032 l       .debug_str	00000000 
0003f083 l       .debug_str	00000000 
0003f0d1 l       .debug_str	00000000 
0003f11c l       .debug_str	00000000 
0003f14f l       .debug_str	00000000 
0003f18a l       .debug_str	00000000 
0003f1af l       .debug_str	00000000 
0003f23b l       .debug_str	00000000 
0003f26f l       .debug_str	00000000 
0003f2eb l       .debug_str	00000000 
0003f330 l       .debug_str	00000000 
0003f37c l       .debug_str	00000000 
0003f3df l       .debug_str	00000000 
0003f41a l       .debug_str	00000000 
0003f43e l       .debug_str	00000000 
0003f479 l       .debug_str	00000000 
0003f4a0 l       .debug_str	00000000 
0003f4ec l       .debug_str	00000000 
0003f527 l       .debug_str	00000000 
0003f54e l       .debug_str	00000000 
0003f599 l       .debug_str	00000000 
0003f5e5 l       .debug_str	00000000 
0003f631 l       .debug_str	00000000 
0003f662 l       .debug_str	00000000 
0003f66a l       .debug_str	00000000 
00010e96 l       .debug_str	00000000 
0003f6b6 l       .debug_str	00000000 
0003f6eb l       .debug_str	00000000 
0003f719 l       .debug_str	00000000 
0003f722 l       .debug_str	00000000 
0003f770 l       .debug_str	00000000 
0003f778 l       .debug_str	00000000 
0003f7dd l       .debug_str	00000000 
0003f830 l       .debug_str	00000000 
0003f890 l       .debug_str	00000000 
0003f8af l       .debug_str	00000000 
0003f912 l       .debug_str	00000000 
0003f934 l       .debug_str	00000000 
0003f97f l       .debug_str	00000000 
0003f9e4 l       .debug_str	00000000 
0003fa06 l       .debug_str	00000000 
0003fa6f l       .debug_str	00000000 
0003faac l       .debug_str	00000000 
0003fb15 l       .debug_str	00000000 
0003fba5 l       .debug_str	00000000 
0000b9b4 l       .debug_str	00000000 
0003fc05 l       .debug_str	00000000 
0003fc68 l       .debug_str	00000000 
0003fcd1 l       .debug_str	00000000 
0003fd04 l       .debug_str	00000000 
0003fd4c l       .debug_str	00000000 
0003fdc6 l       .debug_str	00000000 
0003fe17 l       .debug_str	00000000 
0003fe6e l       .debug_str	00000000 
0001b642 l       .debug_str	00000000 
0003feb6 l       .debug_str	00000000 
0003ff14 l       .debug_str	00000000 
0003ff31 l       .debug_str	00000000 
0003ff9d l       .debug_str	00000000 
0003ffe2 l       .debug_str	00000000 
00040030 l       .debug_str	00000000 
00040078 l       .debug_str	00000000 
00040082 l       .debug_str	00000000 
000400f0 l       .debug_str	00000000 
0004012c l       .debug_str	00000000 
0004014f l       .debug_str	00000000 
000401bf l       .debug_str	00000000 
00040207 l       .debug_str	00000000 
00040210 l       .debug_str	00000000 
0004026d l       .debug_str	00000000 
000402d0 l       .debug_str	00000000 
00040330 l       .debug_str	00000000 
00040390 l       .debug_str	00000000 
000403ec l       .debug_str	00000000 
0004044b l       .debug_str	00000000 
000404ab l       .debug_str	00000000 
000404c6 l       .debug_str	00000000 
0001b5a0 l       .debug_str	00000000 
0004051a l       .debug_str	00000000 
00040598 l       .debug_str	00000000 
000405c2 l       .debug_str	00000000 
00040624 l       .debug_str	00000000 
00040685 l       .debug_str	00000000 
000406df l       .debug_str	00000000 
00040744 l       .debug_str	00000000 
00040796 l       .debug_str	00000000 
000407de l       .debug_str	00000000 
000407f9 l       .debug_str	00000000 
00040873 l       .debug_str	00000000 
000408c0 l       .debug_str	00000000 
0004093a l       .debug_str	00000000 
00040987 l       .debug_str	00000000 
000409db l       .debug_str	00000000 
00040a2d l       .debug_str	00000000 
00040a95 l       .debug_str	00000000 
00040af5 l       .debug_str	00000000 
00040b4f l       .debug_str	00000000 
00040bae l       .debug_str	00000000 
00040c08 l       .debug_str	00000000 
00040c65 l       .debug_str	00000000 
00023733 l       .debug_str	00000000 
00040ca3 l       .debug_str	00000000 
00024716 l       .debug_str	00000000 
00040cde l       .debug_str	00000000 
00040d50 l       .debug_str	00000000 
00040e23 l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
00040e6b l       .debug_str	00000000 
00040eb9 l       .debug_str	00000000 
00040ec3 l       .debug_str	00000000 
00040f0b l       .debug_str	00000000 
00040f17 l       .debug_str	00000000 
00040f8b l       .debug_str	00000000 
00040f96 l       .debug_str	00000000 
00040fd2 l       .debug_str	00000000 
00040ff9 l       .debug_str	00000000 
0004104a l       .debug_str	00000000 
00041057 l       .debug_str	00000000 
00041065 l       .debug_str	00000000 
00041078 l       .debug_str	00000000 
00041083 l       .debug_str	00000000 
000410c5 l       .debug_str	00000000 
000410da l       .debug_str	00000000 
00041144 l       .debug_str	00000000 
000411a1 l       .debug_str	00000000 
00041201 l       .debug_str	00000000 
00041261 l       .debug_str	00000000 
000412d3 l       .debug_str	00000000 
00041320 l       .debug_str	00000000 
0004137f l       .debug_str	00000000 
000413d9 l       .debug_str	00000000 
0004144c l       .debug_str	00000000 
00041459 l       .debug_str	00000000 
000414b9 l       .debug_str	00000000 
000414d8 l       .debug_str	00000000 
00041540 l       .debug_str	00000000 
0004155b l       .debug_str	00000000 
000415b3 l       .debug_str	00000000 
000415fd l       .debug_str	00000000 
00041661 l       .debug_str	00000000 
00041680 l       .debug_str	00000000 
000416e2 l       .debug_str	00000000 
00041748 l       .debug_str	00000000 
000417c8 l       .debug_str	00000000 
00041817 l       .debug_str	00000000 
0004188d l       .debug_str	00000000 
00041903 l       .debug_str	00000000 
000419d8 l       .debug_str	00000000 
00041a35 l       .debug_str	00000000 
00041a93 l       .debug_str	00000000 
00041b13 l       .debug_str	00000000 
00041b82 l       .debug_str	00000000 
00041c00 l       .debug_str	00000000 
00041c53 l       .debug_str	00000000 
00041cb8 l       .debug_str	00000000 
00041d18 l       .debug_str	00000000 
00041d86 l       .debug_str	00000000 
00041e1e l       .debug_str	00000000 
00041ead l       .debug_str	00000000 
00041f3b l       .debug_str	00000000 
00041fc9 l       .debug_str	00000000 
000420d9 l       .debug_str	00000000 
0004214d l       .debug_str	00000000 
0004218f l       .debug_str	00000000 
000421d8 l       .debug_str	00000000 
00042232 l       .debug_str	00000000 
000422ab l       .debug_str	00000000 
000422b8 l       .debug_str	00000000 
000422bd l       .debug_str	00000000 
00042329 l       .debug_str	00000000 
00042370 l       .debug_str	00000000 
000423fa l       .debug_str	00000000 
00042419 l       .debug_str	00000000 
000424a3 l       .debug_str	00000000 
000424c7 l       .debug_str	00000000 
0004250b l       .debug_str	00000000 
0004256f l       .debug_str	00000000 
000425b3 l       .debug_str	00000000 
00042625 l       .debug_str	00000000 
000426e3 l       .debug_str	00000000 
00042745 l       .debug_str	00000000 
000427dd l       .debug_str	00000000 
0004288c l       .debug_str	00000000 
00042922 l       .debug_str	00000000 
000429b5 l       .debug_str	00000000 
000429f9 l       .debug_str	00000000 
00042a4c l       .debug_str	00000000 
00042ad0 l       .debug_str	00000000 
00042b5e l       .debug_str	00000000 
00042bb2 l       .debug_str	00000000 
00042bc3 l       .debug_str	00000000 
00042c48 l       .debug_str	00000000 
00042cd4 l       .debug_str	00000000 
00042cdd l       .debug_str	00000000 
00042cea l       .debug_str	00000000 
00042d41 l       .debug_str	00000000 
00042dc6 l       .debug_str	00000000 
00042e18 l       .debug_str	00000000 
00042e27 l       .debug_str	00000000 
00042e6e l       .debug_str	00000000 
00042ed2 l       .debug_str	00000000 
00042ef3 l       .debug_str	00000000 
00042f73 l       .debug_str	00000000 
00042fde l       .debug_str	00000000 
0004305c l       .debug_str	00000000 
000430ab l       .debug_str	00000000 
0004310a l       .debug_str	00000000 
000431a2 l       .debug_str	00000000 
00043248 l       .debug_str	00000000 
000432de l       .debug_str	00000000 
00043368 l       .debug_str	00000000 
000433de l       .debug_str	00000000 
00043427 l       .debug_str	00000000 
00043483 l       .debug_str	00000000 
000434fe l       .debug_str	00000000 
0004356a l       .debug_str	00000000 
000435f4 l       .debug_str	00000000 
00043638 l       .debug_str	00000000 
00043699 l       .debug_str	00000000 
000436dd l       .debug_str	00000000 
00043761 l       .debug_str	00000000 
000437eb l       .debug_str	00000000 
0004383d l       .debug_str	00000000 
000438bb l       .debug_str	00000000 
00043940 l       .debug_str	00000000 
00043997 l       .debug_str	00000000 
00043a18 l       .debug_str	00000000 
00043ad6 l       .debug_str	00000000 
00043b35 l       .debug_str	00000000 
00043b98 l       .debug_str	00000000 
00043bbd l       .debug_str	00000000 
00043c21 l       .debug_str	00000000 
00043c42 l       .debug_str	00000000 
00043cc2 l       .debug_str	00000000 
00043d2d l       .debug_str	00000000 
00043dab l       .debug_str	00000000 
00043dfa l       .debug_str	00000000 
00043e59 l       .debug_str	00000000 
00043ef1 l       .debug_str	00000000 
00043f97 l       .debug_str	00000000 
0004402d l       .debug_str	00000000 
000440b7 l       .debug_str	00000000 
0004412d l       .debug_str	00000000 
00044176 l       .debug_str	00000000 
000441d2 l       .debug_str	00000000 
0004424d l       .debug_str	00000000 
000442b9 l       .debug_str	00000000 
00044343 l       .debug_str	00000000 
00044387 l       .debug_str	00000000 
000443e8 l       .debug_str	00000000 
0004442c l       .debug_str	00000000 
000444b0 l       .debug_str	00000000 
0004453a l       .debug_str	00000000 
000445b8 l       .debug_str	00000000 
0004463d l       .debug_str	00000000 
00044694 l       .debug_str	00000000 
00044715 l       .debug_str	00000000 
000447d3 l       .debug_str	00000000 
00044832 l       .debug_str	00000000 
00044865 l       .debug_str	00000000 
00044898 l       .debug_str	00000000 
000448cb l       .debug_str	00000000 
000448fe l       .debug_str	00000000 
00044931 l       .debug_str	00000000 
00044964 l       .debug_str	00000000 
00044997 l       .debug_str	00000000 
000449eb l       .debug_str	00000000 
00044a19 l       .debug_str	00000000 
00044a6d l       .debug_str	00000000 
0005744a l       .debug_str	00000000 
0001335d l       .debug_str	00000000 
00044a80 l       .debug_str	00000000 
00044a84 l       .debug_str	00000000 
00044a88 l       .debug_str	00000000 
00044a8c l       .debug_str	00000000 
00044a93 l       .debug_str	00000000 
00044a98 l       .debug_str	00000000 
00044ac8 l       .debug_str	00000000 
00044b1a l       .debug_str	00000000 
00044b5b l       .debug_str	00000000 
00044b68 l       .debug_str	00000000 
00044ba7 l       .debug_str	00000000 
00044bb2 l       .debug_str	00000000 
00044bee l       .debug_str	00000000 
00044bfc l       .debug_str	00000000 
00044c30 l       .debug_str	00000000 
00044c6b l       .debug_str	00000000 
00044ca9 l       .debug_str	00000000 
00044cb7 l       .debug_str	00000000 
00044cf0 l       .debug_str	00000000 
00044cfa l       .debug_str	00000000 
00044d36 l       .debug_str	00000000 
00044d92 l       .debug_str	00000000 
00044d99 l       .debug_str	00000000 
00044df7 l       .debug_str	00000000 
00044e00 l       .debug_str	00000000 
00044e67 l       .debug_str	00000000 
00044e78 l       .debug_str	00000000 
00044ed5 l       .debug_str	00000000 
00044f34 l       .debug_str	00000000 
00044f90 l       .debug_str	00000000 
00044fee l       .debug_str	00000000 
00045055 l       .debug_str	00000000 
000450b2 l       .debug_str	00000000 
00045111 l       .debug_str	00000000 
0004514a l       .debug_str	00000000 
00045154 l       .debug_str	00000000 
000451bc l       .debug_str	00000000 
000451ef l       .debug_str	00000000 
000451f9 l       .debug_str	00000000 
0004522f l       .debug_str	00000000 
0004523b l       .debug_str	00000000 
00045272 l       .debug_str	00000000 
0004527f l       .debug_str	00000000 
000452c3 l       .debug_str	00000000 
000452dd l       .debug_str	00000000 
0004534e l       .debug_str	00000000 
00045361 l       .debug_str	00000000 
000453d2 l       .debug_str	00000000 
00045415 l       .debug_str	00000000 
0004541f l       .debug_str	00000000 
00045469 l       .debug_str	00000000 
000454b0 l       .debug_str	00000000 
000454fd l       .debug_str	00000000 
00045547 l       .debug_str	00000000 
00045579 l       .debug_str	00000000 
00045582 l       .debug_str	00000000 
000455b6 l       .debug_str	00000000 
000455ef l       .debug_str	00000000 
0004562b l       .debug_str	00000000 
0004563d l       .debug_str	00000000 
0004567e l       .debug_str	00000000 
000456dd l       .debug_str	00000000 
0004570e l       .debug_str	00000000 
00045724 l       .debug_str	00000000 
00045759 l       .debug_str	00000000 
000457b6 l       .debug_str	00000000 
0004581a l       .debug_str	00000000 
00045879 l       .debug_str	00000000 
000458d9 l       .debug_str	00000000 
00045937 l       .debug_str	00000000 
0002040d l       .debug_str	00000000 
0004599c l       .debug_str	00000000 
000459e2 l       .debug_str	00000000 
00045a22 l       .debug_str	00000000 
00045aaa l       .debug_str	00000000 
00053e80 l       .debug_str	00000000 
00045b31 l       .debug_str	00000000 
00045b64 l       .debug_str	00000000 
00045bd8 l       .debug_str	00000000 
00045c51 l       .debug_str	00000000 
00045cc5 l       .debug_str	00000000 
00045d24 l       .debug_str	00000000 
00045d81 l       .debug_str	00000000 
00045ddb l       .debug_str	00000000 
00045e37 l       .debug_str	00000000 
00045e94 l       .debug_str	00000000 
00045ef3 l       .debug_str	00000000 
00045f5b l       .debug_str	00000000 
00045fc5 l       .debug_str	00000000 
0004602e l       .debug_str	00000000 
0004608c l       .debug_str	00000000 
000460fe l       .debug_str	00000000 
00046102 l       .debug_str	00000000 
00046175 l       .debug_str	00000000 
000461d3 l       .debug_str	00000000 
0004622f l       .debug_str	00000000 
000462a0 l       .debug_str	00000000 
00046316 l       .debug_str	00000000 
0004634d l       .debug_str	00000000 
000463a9 l       .debug_str	00000000 
000463fd l       .debug_str	00000000 
0004645b l       .debug_str	00000000 
000464c7 l       .debug_str	00000000 
0004651c l       .debug_str	00000000 
0004654f l       .debug_str	00000000 
0004655d l       .debug_str	00000000 
00046595 l       .debug_str	00000000 
000465a8 l       .debug_str	00000000 
000465dd l       .debug_str	00000000 
00046613 l       .debug_str	00000000 
0004666e l       .debug_str	00000000 
000466a1 l       .debug_str	00000000 
000466a8 l       .debug_str	00000000 
000466ea l       .debug_str	00000000 
0004671b l       .debug_str	00000000 
0004674c l       .debug_str	00000000 
0004677f l       .debug_str	00000000 
00046786 l       .debug_str	00000000 
000467b3 l       .debug_str	00000000 
000467ee l       .debug_str	00000000 
00046801 l       .debug_str	00000000 
00046832 l       .debug_str	00000000 
0004683c l       .debug_str	00000000 
0004689d l       .debug_str	00000000 
00046905 l       .debug_str	00000000 
00046942 l       .debug_str	00000000 
00046990 l       .debug_str	00000000 
000469cc l       .debug_str	00000000 
00046a08 l       .debug_str	00000000 
00046a41 l       .debug_str	00000000 
00046a7b l       .debug_str	00000000 
00046ab4 l       .debug_str	00000000 
00046aeb l       .debug_str	00000000 
00046b24 l       .debug_str	00000000 
00046b5e l       .debug_str	00000000 
00046ba4 l       .debug_str	00000000 
00046bc7 l       .debug_str	00000000 
00046c0d l       .debug_str	00000000 
00046c30 l       .debug_str	00000000 
00046c79 l       .debug_str	00000000 
00046c9f l       .debug_str	00000000 
00046ce8 l       .debug_str	00000000 
00046d0e l       .debug_str	00000000 
00046d58 l       .debug_str	00000000 
00046d7f l       .debug_str	00000000 
00046dc9 l       .debug_str	00000000 
00046df0 l       .debug_str	00000000 
00046e3d l       .debug_str	00000000 
00046e67 l       .debug_str	00000000 
00046eb4 l       .debug_str	00000000 
00046ede l       .debug_str	00000000 
00046f11 l       .debug_str	00000000 
00046f3d l       .debug_str	00000000 
00046f93 l       .debug_str	00000000 
00046fbe l       .debug_str	00000000 
00047016 l       .debug_str	00000000 
0004706c l       .debug_str	00000000 
000470a5 l       .debug_str	00000000 
000470b0 l       .debug_str	00000000 
0001ef14 l       .debug_str	00000000 
000470e9 l       .debug_str	00000000 
00047110 l       .debug_str	00000000 
00047149 l       .debug_str	00000000 
00047190 l       .debug_str	00000000 
0004719d l       .debug_str	00000000 
000473b7 l       .debug_str	00000000 
000471cc l       .debug_str	00000000 
0004720c l       .debug_str	00000000 
00047220 l       .debug_str	00000000 
00047262 l       .debug_str	00000000 
00047293 l       .debug_str	00000000 
000472c3 l       .debug_str	00000000 
000472f4 l       .debug_str	00000000 
00047325 l       .debug_str	00000000 
0004735c l       .debug_str	00000000 
00047367 l       .debug_str	00000000 
000473a7 l       .debug_str	00000000 
000473bb l       .debug_str	00000000 
000473f7 l       .debug_str	00000000 
00047407 l       .debug_str	00000000 
0004743c l       .debug_str	00000000 
00047446 l       .debug_str	00000000 
0004747b l       .debug_str	00000000 
00047485 l       .debug_str	00000000 
000474da l       .debug_str	00000000 
00047522 l       .debug_str	00000000 
00047568 l       .debug_str	00000000 
000475af l       .debug_str	00000000 
000475f8 l       .debug_str	00000000 
0004764a l       .debug_str	00000000 
0004769c l       .debug_str	00000000 
0004773a l       .debug_str	00000000 
0004776c l       .debug_str	00000000 
000477a5 l       .debug_str	00000000 
000477ba l       .debug_str	00000000 
000477f5 l       .debug_str	00000000 
0004780c l       .debug_str	00000000 
0004784a l       .debug_str	00000000 
00047864 l       .debug_str	00000000 
000478c6 l       .debug_str	00000000 
000478eb l       .debug_str	00000000 
00047946 l       .debug_str	00000000 
00047955 l       .debug_str	00000000 
000479ca l       .debug_str	00000000 
000479e7 l       .debug_str	00000000 
00047a21 l       .debug_str	00000000 
00047a5e l       .debug_str	00000000 
00047a69 l       .debug_str	00000000 
00047aa1 l       .debug_str	00000000 
00047aa8 l       .debug_str	00000000 
00047b27 l       .debug_str	00000000 
00047b87 l       .debug_str	00000000 
00047be5 l       .debug_str	00000000 
00047c43 l       .debug_str	00000000 
00047c7b l       .debug_str	00000000 
00047cb0 l       .debug_str	00000000 
00047cdb l       .debug_str	00000000 
00047ce5 l       .debug_str	00000000 
00047d15 l       .debug_str	00000000 
00047d23 l       .debug_str	00000000 
00047d7c l       .debug_str	00000000 
00047dcf l       .debug_str	00000000 
00047e4b l       .debug_str	00000000 
00047eaf l       .debug_str	00000000 
00047f13 l       .debug_str	00000000 
00047f49 l       .debug_str	00000000 
00047f5d l       .debug_str	00000000 
00047f9e l       .debug_str	00000000 
00047fb6 l       .debug_str	00000000 
0004806a l       .debug_str	00000000 
0004809d l       .debug_str	00000000 
000480ae l       .debug_str	00000000 
000480f4 l       .debug_str	00000000 
00048101 l       .debug_str	00000000 
0004813e l       .debug_str	00000000 
00048182 l       .debug_str	00000000 
000481c3 l       .debug_str	00000000 
00048205 l       .debug_str	00000000 
0004820f l       .debug_str	00000000 
00048253 l       .debug_str	00000000 
0004825e l       .debug_str	00000000 
000482ac l       .debug_str	00000000 
000482fa l       .debug_str	00000000 
00048340 l       .debug_str	00000000 
00048388 l       .debug_str	00000000 
000483d0 l       .debug_str	00000000 
00014029 l       .debug_str	00000000 
00048437 l       .debug_str	00000000 
00048490 l       .debug_str	00000000 
000484fa l       .debug_str	00000000 
000177aa l       .debug_str	00000000 
00048564 l       .debug_str	00000000 
000485df l       .debug_str	00000000 
00048654 l       .debug_str	00000000 
0004865f l       .debug_str	00000000 
000486d4 l       .debug_str	00000000 
000486df l       .debug_str	00000000 
00048736 l       .debug_str	00000000 
0004879a l       .debug_str	00000000 
000487a6 l       .debug_str	00000000 
000487e3 l       .debug_str	00000000 
000487f0 l       .debug_str	00000000 
00048824 l       .debug_str	00000000 
0004885f l       .debug_str	00000000 
000488bb l       .debug_str	00000000 
00048916 l       .debug_str	00000000 
00048970 l       .debug_str	00000000 
0002f3aa l       .debug_str	00000000 
000489b6 l       .debug_str	00000000 
00048a1c l       .debug_str	00000000 
00048a53 l       .debug_str	00000000 
00048a5b l       .debug_str	00000000 
00048a93 l       .debug_str	00000000 
00048a9c l       .debug_str	00000000 
00048ad4 l       .debug_str	00000000 
00048add l       .debug_str	00000000 
00048b14 l       .debug_str	00000000 
00048b1c l       .debug_str	00000000 
00048b54 l       .debug_str	00000000 
00048b5d l       .debug_str	00000000 
00048b95 l       .debug_str	00000000 
00048b9e l       .debug_str	00000000 
00048bd5 l       .debug_str	00000000 
00048bdd l       .debug_str	00000000 
00048c57 l       .debug_str	00000000 
00048cd1 l       .debug_str	00000000 
00048d4b l       .debug_str	00000000 
00048dc7 l       .debug_str	00000000 
0001aee0 l       .debug_str	00000000 
00048e25 l       .debug_str	00000000 
00048e84 l       .debug_str	00000000 
00048ee3 l       .debug_str	00000000 
00048f42 l       .debug_str	00000000 
00048fa2 l       .debug_str	00000000 
00049000 l       .debug_str	00000000 
0004905f l       .debug_str	00000000 
000490be l       .debug_str	00000000 
0004911d l       .debug_str	00000000 
0004917d l       .debug_str	00000000 
000491d2 l       .debug_str	00000000 
00049227 l       .debug_str	00000000 
00049281 l       .debug_str	00000000 
000492db l       .debug_str	00000000 
00049315 l       .debug_str	00000000 
0004931e l       .debug_str	00000000 
00049358 l       .debug_str	00000000 
00049361 l       .debug_str	00000000 
0004939e l       .debug_str	00000000 
00030895 l       .debug_str	00000000 
000493d7 l       .debug_str	00000000 
00049438 l       .debug_str	00000000 
00049496 l       .debug_str	00000000 
000494d7 l       .debug_str	00000000 
00049515 l       .debug_str	00000000 
0004954e l       .debug_str	00000000 
0004958d l       .debug_str	00000000 
000495cb l       .debug_str	00000000 
00049609 l       .debug_str	00000000 
0004964a l       .debug_str	00000000 
0004968e l       .debug_str	00000000 
000496cb l       .debug_str	00000000 
00049731 l       .debug_str	00000000 
00049798 l       .debug_str	00000000 
000497fb l       .debug_str	00000000 
0004985d l       .debug_str	00000000 
000498c2 l       .debug_str	00000000 
0004992b l       .debug_str	00000000 
00049991 l       .debug_str	00000000 
000499f7 l       .debug_str	00000000 
00049a52 l       .debug_str	00000000 
00049ab9 l       .debug_str	00000000 
00049b24 l       .debug_str	00000000 
00049b7f l       .debug_str	00000000 
00049bda l       .debug_str	00000000 
000237fc l       .debug_str	00000000 
00049c21 l       .debug_str	00000000 
00049c69 l       .debug_str	00000000 
00049cb1 l       .debug_str	00000000 
00049cf9 l       .debug_str	00000000 
00049d42 l       .debug_str	00000000 
00049d8c l       .debug_str	00000000 
00049dd3 l       .debug_str	00000000 
00049e26 l       .debug_str	00000000 
00049e41 l       .debug_str	00000000 
00049e89 l       .debug_str	00000000 
00049edd l       .debug_str	00000000 
00049f25 l       .debug_str	00000000 
00049f79 l       .debug_str	00000000 
00049fc1 l       .debug_str	00000000 
0004a015 l       .debug_str	00000000 
0004a05e l       .debug_str	00000000 
0004a0b3 l       .debug_str	00000000 
0004a0fd l       .debug_str	00000000 
0004a155 l       .debug_str	00000000 
0004a1b7 l       .debug_str	00000000 
0004a216 l       .debug_str	00000000 
0004a276 l       .debug_str	00000000 
0004a2d6 l       .debug_str	00000000 
0004a336 l       .debug_str	00000000 
0004a397 l       .debug_str	00000000 
0004a3f6 l       .debug_str	00000000 
0004a456 l       .debug_str	00000000 
0004a4b6 l       .debug_str	00000000 
0004a516 l       .debug_str	00000000 
0004a577 l       .debug_str	00000000 
0004a5d4 l       .debug_str	00000000 
0004a62f l       .debug_str	00000000 
0004a685 l       .debug_str	00000000 
0004a6e3 l       .debug_str	00000000 
0004a737 l       .debug_str	00000000 
0004a798 l       .debug_str	00000000 
0004a7fe l       .debug_str	00000000 
0004a866 l       .debug_str	00000000 
0004a8cd l       .debug_str	00000000 
0004a929 l       .debug_str	00000000 
0004a98a l       .debug_str	00000000 
0004a9e4 l       .debug_str	00000000 
0004aa3e l       .debug_str	00000000 
0004aa9c l       .debug_str	00000000 
0004aaf0 l       .debug_str	00000000 
0004ab6c l       .debug_str	00000000 
0004abd5 l       .debug_str	00000000 
0004ac51 l       .debug_str	00000000 
0004accd l       .debug_str	00000000 
0004ad36 l       .debug_str	00000000 
0004adb2 l       .debug_str	00000000 
0004ae1f l       .debug_str	00000000 
0004ae79 l       .debug_str	00000000 
0004aed2 l       .debug_str	00000000 
0004af2a l       .debug_str	00000000 
0004af89 l       .debug_str	00000000 
0004afe8 l       .debug_str	00000000 
0004b047 l       .debug_str	00000000 
0004b0a7 l       .debug_str	00000000 
0004b107 l       .debug_str	00000000 
0004b167 l       .debug_str	00000000 
0004b1c7 l       .debug_str	00000000 
0004b229 l       .debug_str	00000000 
0004b28b l       .debug_str	00000000 
0004b2ec l       .debug_str	00000000 
0004b34e l       .debug_str	00000000 
0004b3b0 l       .debug_str	00000000 
0004b411 l       .debug_str	00000000 
0004b473 l       .debug_str	00000000 
0004b4d5 l       .debug_str	00000000 
000308d9 l       .debug_str	00000000 
0004b51e l       .debug_str	00000000 
0004b56a l       .debug_str	00000000 
0004b572 l       .debug_str	00000000 
0004b5bc l       .debug_str	00000000 
0004b607 l       .debug_str	00000000 
0004b60e l       .debug_str	00000000 
0004b659 l       .debug_str	00000000 
0004b6a4 l       .debug_str	00000000 
0004b6f0 l       .debug_str	00000000 
0004b73a l       .debug_str	00000000 
0004b787 l       .debug_str	00000000 
0004b7d2 l       .debug_str	00000000 
0004b81e l       .debug_str	00000000 
0004b86a l       .debug_str	00000000 
0004b8b6 l       .debug_str	00000000 
0004b903 l       .debug_str	00000000 
0004b94d l       .debug_str	00000000 
0004b99a l       .debug_str	00000000 
0004b9e5 l       .debug_str	00000000 
0004ba31 l       .debug_str	00000000 
0004ba7d l       .debug_str	00000000 
0004bac9 l       .debug_str	00000000 
0004bb16 l       .debug_str	00000000 
0004bb60 l       .debug_str	00000000 
0004bbad l       .debug_str	00000000 
0004bbf8 l       .debug_str	00000000 
0004bc44 l       .debug_str	00000000 
0004bc90 l       .debug_str	00000000 
0004bcdc l       .debug_str	00000000 
0004bd29 l       .debug_str	00000000 
0004bd74 l       .debug_str	00000000 
0004bdc2 l       .debug_str	00000000 
0004be0e l       .debug_str	00000000 
0004be5b l       .debug_str	00000000 
0004bea8 l       .debug_str	00000000 
0004bef5 l       .debug_str	00000000 
0004bf43 l       .debug_str	00000000 
0004bf8e l       .debug_str	00000000 
0004bfd9 l       .debug_str	00000000 
0004c025 l       .debug_str	00000000 
0004c071 l       .debug_str	00000000 
0004c0be l       .debug_str	00000000 
0004c10a l       .debug_str	00000000 
0004c157 l       .debug_str	00000000 
0004c1a4 l       .debug_str	00000000 
0004c203 l       .debug_str	00000000 
0004c260 l       .debug_str	00000000 
0004c2bc l       .debug_str	00000000 
0004c31a l       .debug_str	00000000 
0004c377 l       .debug_str	00000000 
0004c3d5 l       .debug_str	00000000 
0004c432 l       .debug_str	00000000 
0004c490 l       .debug_str	00000000 
0004c4ed l       .debug_str	00000000 
0004c54c l       .debug_str	00000000 
0004c5aa l       .debug_str	00000000 
0004c60b l       .debug_str	00000000 
0004c66c l       .debug_str	00000000 
0004c6cf l       .debug_str	00000000 
0004c700 l       .debug_str	00000000 
0004c708 l       .debug_str	00000000 
0004c76b l       .debug_str	00000000 
0004c7ce l       .debug_str	00000000 
0004c832 l       .debug_str	00000000 
0004c896 l       .debug_str	00000000 
0004c8fa l       .debug_str	00000000 
0004c95e l       .debug_str	00000000 
0004c9c1 l       .debug_str	00000000 
0004ca24 l       .debug_str	00000000 
0004ca88 l       .debug_str	00000000 
0004caec l       .debug_str	00000000 
0004cb50 l       .debug_str	00000000 
0004cbb4 l       .debug_str	00000000 
0004cbe5 l       .debug_str	00000000 
0004cbed l       .debug_str	00000000 
0004cc51 l       .debug_str	00000000 
0004ccb5 l       .debug_str	00000000 
0004cd19 l       .debug_str	00000000 
0004cd7d l       .debug_str	00000000 
0004cddd l       .debug_str	00000000 
0004ce3d l       .debug_str	00000000 
0004ce6b l       .debug_str	00000000 
0004ce74 l       .debug_str	00000000 
0004ced5 l       .debug_str	00000000 
0004cf36 l       .debug_str	00000000 
0004cf97 l       .debug_str	00000000 
0004cff8 l       .debug_str	00000000 
0004d04f l       .debug_str	00000000 
0004d0a2 l       .debug_str	00000000 
0004d0ea l       .debug_str	00000000 
0004d112 l       .debug_str	00000000 
0004d15a l       .debug_str	00000000 
0004d170 l       .debug_str	00000000 
0004d1b8 l       .debug_str	00000000 
0004d1ed l       .debug_str	00000000 
0004d235 l       .debug_str	00000000 
0004d270 l       .debug_str	00000000 
0004d2b8 l       .debug_str	00000000 
0004d300 l       .debug_str	00000000 
0004d321 l       .debug_str	00000000 
0004d369 l       .debug_str	00000000 
0004d374 l       .debug_str	00000000 
0004d3bc l       .debug_str	00000000 
0004d3f9 l       .debug_str	00000000 
0004d441 l       .debug_str	00000000 
0004d49a l       .debug_str	00000000 
0004d4e2 l       .debug_str	00000000 
0004d4fe l       .debug_str	00000000 
0004d546 l       .debug_str	00000000 
0004d5f2 l       .debug_str	00000000 
0004d63a l       .debug_str	00000000 
0004d658 l       .debug_str	00000000 
0004d6a0 l       .debug_str	00000000 
0004d6aa l       .debug_str	00000000 
0004d6f2 l       .debug_str	00000000 
0004d72d l       .debug_str	00000000 
0004d775 l       .debug_str	00000000 
0004d7c4 l       .debug_str	00000000 
0004d80c l       .debug_str	00000000 
0004d833 l       .debug_str	00000000 
0004d87b l       .debug_str	00000000 
0004d8a5 l       .debug_str	00000000 
0004d8ed l       .debug_str	00000000 
0004d968 l       .debug_str	00000000 
0004d9b0 l       .debug_str	00000000 
0004d9f8 l       .debug_str	00000000 
0004da0e l       .debug_str	00000000 
00016f04 l       .debug_str	00000000 
0004da56 l       .debug_str	00000000 
0004da9e l       .debug_str	00000000 
0004dae6 l       .debug_str	00000000 
0004db17 l       .debug_str	00000000 
0004db5f l       .debug_str	00000000 
0004dbc3 l       .debug_str	00000000 
0004dc0b l       .debug_str	00000000 
0000b963 l       .debug_str	00000000 
0004dc53 l       .debug_str	00000000 
0004dc9b l       .debug_str	00000000 
0004dca8 l       .debug_str	00000000 
0004dcf0 l       .debug_str	00000000 
0004dcfa l       .debug_str	00000000 
0004dd42 l       .debug_str	00000000 
0004dd4b l       .debug_str	00000000 
0004dd93 l       .debug_str	00000000 
0004ddbb l       .debug_str	00000000 
0004de03 l       .debug_str	00000000 
0004de4b l       .debug_str	00000000 
0004de6d l       .debug_str	00000000 
0004deb5 l       .debug_str	00000000 
0004dee6 l       .debug_str	00000000 
0004df2e l       .debug_str	00000000 
0004df76 l       .debug_str	00000000 
0004dfae l       .debug_str	00000000 
0004dff6 l       .debug_str	00000000 
0004e02b l       .debug_str	00000000 
0004e073 l       .debug_str	00000000 
0004e09c l       .debug_str	00000000 
0004e0e4 l       .debug_str	00000000 
0004e108 l       .debug_str	00000000 
0004e150 l       .debug_str	00000000 
0004e175 l       .debug_str	00000000 
0004e1bd l       .debug_str	00000000 
0004e1da l       .debug_str	00000000 
0004e222 l       .debug_str	00000000 
0004e22d l       .debug_str	00000000 
0004e275 l       .debug_str	00000000 
0004e29d l       .debug_str	00000000 
0004e2e5 l       .debug_str	00000000 
0004e2f4 l       .debug_str	00000000 
0004e33c l       .debug_str	00000000 
0004e384 l       .debug_str	00000000 
0004e3a0 l       .debug_str	00000000 
0004e3e8 l       .debug_str	00000000 
0004e45f l       .debug_str	00000000 
0004e4a7 l       .debug_str	00000000 
0004e51e l       .debug_str	00000000 
0004e566 l       .debug_str	00000000 
0004e56f l       .debug_str	00000000 
0004e5b7 l       .debug_str	00000000 
0004e5dd l       .debug_str	00000000 
0004e625 l       .debug_str	00000000 
0004e658 l       .debug_str	00000000 
0004e6a0 l       .debug_str	00000000 
0004e6bd l       .debug_str	00000000 
0004e705 l       .debug_str	00000000 
0004e70e l       .debug_str	00000000 
0004e756 l       .debug_str	00000000 
0004e79e l       .debug_str	00000000 
0004e7c2 l       .debug_str	00000000 
0000ba4c l       .debug_str	00000000 
0004e80a l       .debug_str	00000000 
0004e852 l       .debug_str	00000000 
0004e89a l       .debug_str	00000000 
0004e992 l       .debug_str	00000000 
0001b5f0 l       .debug_str	00000000 
0004e9da l       .debug_str	00000000 
0004ea22 l       .debug_str	00000000 
0004ea6a l       .debug_str	00000000 
0004ea97 l       .debug_str	00000000 
0000ba9d l       .debug_str	00000000 
0004eadf l       .debug_str	00000000 
0004eb27 l       .debug_str	00000000 
0004eb84 l       .debug_str	00000000 
0004ebcc l       .debug_str	00000000 
0004ebd5 l       .debug_str	00000000 
0004ec1d l       .debug_str	00000000 
0004ec3a l       .debug_str	00000000 
0004ec82 l       .debug_str	00000000 
0004ecb8 l       .debug_str	00000000 
0004ed00 l       .debug_str	00000000 
0004ed35 l       .debug_str	00000000 
0004ed7d l       .debug_str	00000000 
0004edb6 l       .debug_str	00000000 
0004edfe l       .debug_str	00000000 
0004ee1a l       .debug_str	00000000 
0004ee62 l       .debug_str	00000000 
0004ee6a l       .debug_str	00000000 
0004eeb2 l       .debug_str	00000000 
0004eecd l       .debug_str	00000000 
0004ef15 l       .debug_str	00000000 
0004ef3d l       .debug_str	00000000 
0004ef87 l       .debug_str	00000000 
0004efd1 l       .debug_str	00000000 
0004f030 l       .debug_str	00000000 
0004f08d l       .debug_str	00000000 
0004f0e6 l       .debug_str	00000000 
0004f145 l       .debug_str	00000000 
0004f1a4 l       .debug_str	00000000 
0004f205 l       .debug_str	00000000 
0004f268 l       .debug_str	00000000 
0004f2d0 l       .debug_str	00000000 
0004f332 l       .debug_str	00000000 
0004f398 l       .debug_str	00000000 
0004f3fa l       .debug_str	00000000 
0004f45f l       .debug_str	00000000 
0004f4c2 l       .debug_str	00000000 
0004f51e l       .debug_str	00000000 
0004f575 l       .debug_str	00000000 
0004f5ce l       .debug_str	00000000 
0004f621 l       .debug_str	00000000 
0004f67d l       .debug_str	00000000 
0004f6e3 l       .debug_str	00000000 
0004f739 l       .debug_str	00000000 
0004f796 l       .debug_str	00000000 
0004f7f8 l       .debug_str	00000000 
0004f851 l       .debug_str	00000000 
0004f8ac l       .debug_str	00000000 
0004f907 l       .debug_str	00000000 
0004f962 l       .debug_str	00000000 
0004f9bf l       .debug_str	00000000 
0004fa1c l       .debug_str	00000000 
0004fa62 l       .debug_str	00000000 
0004faac l       .debug_str	00000000 
0004faec l       .debug_str	00000000 
0004fb29 l       .debug_str	00000000 
0004fb6d l       .debug_str	00000000 
0004fba9 l       .debug_str	00000000 
0004fbed l       .debug_str	00000000 
0004fc36 l       .debug_str	00000000 
0004fc3f l       .debug_str	00000000 
0004fc88 l       .debug_str	00000000 
0004fc91 l       .debug_str	00000000 
0004fcfa l       .debug_str	00000000 
0004fd57 l       .debug_str	00000000 
0004fdba l       .debug_str	00000000 
0004fe10 l       .debug_str	00000000 
0004fe66 l       .debug_str	00000000 
0004febf l       .debug_str	00000000 
0004ff17 l       .debug_str	00000000 
0004ff7b l       .debug_str	00000000 
00050001 l       .debug_str	00000000 
00050007 l       .debug_str	00000000 
0005008d l       .debug_str	00000000 
00050093 l       .debug_str	00000000 
00050115 l       .debug_str	00000000 
00050197 l       .debug_str	00000000 
0005021a l       .debug_str	00000000 
00050221 l       .debug_str	00000000 
000502a4 l       .debug_str	00000000 
000502ab l       .debug_str	00000000 
00050331 l       .debug_str	00000000 
000503b7 l       .debug_str	00000000 
0005043a l       .debug_str	00000000 
000504bd l       .debug_str	00000000 
0005053f l       .debug_str	00000000 
000505c5 l       .debug_str	00000000 
0005064b l       .debug_str	00000000 
000506d5 l       .debug_str	00000000 
0005075d l       .debug_str	00000000 
000507e5 l       .debug_str	00000000 
0005084d l       .debug_str	00000000 
000508b6 l       .debug_str	00000000 
00050920 l       .debug_str	00000000 
0005098b l       .debug_str	00000000 
000509e9 l       .debug_str	00000000 
00050a47 l       .debug_str	00000000 
00050aa5 l       .debug_str	00000000 
00050b04 l       .debug_str	00000000 
00050b62 l       .debug_str	00000000 
00050bc1 l       .debug_str	00000000 
00050c1f l       .debug_str	00000000 
00050c7e l       .debug_str	00000000 
00050cdd l       .debug_str	00000000 
00050d3c l       .debug_str	00000000 
00050d9a l       .debug_str	00000000 
00050df9 l       .debug_str	00000000 
00050e58 l       .debug_str	00000000 
00050eb7 l       .debug_str	00000000 
00050f16 l       .debug_str	00000000 
00050f75 l       .debug_str	00000000 
00050fd4 l       .debug_str	00000000 
00051033 l       .debug_str	00000000 
00051092 l       .debug_str	00000000 
000510f1 l       .debug_str	00000000 
00051150 l       .debug_str	00000000 
000511af l       .debug_str	00000000 
0005120e l       .debug_str	00000000 
0005126d l       .debug_str	00000000 
000512cc l       .debug_str	00000000 
0005132b l       .debug_str	00000000 
0005138a l       .debug_str	00000000 
000513e9 l       .debug_str	00000000 
00051448 l       .debug_str	00000000 
000514a7 l       .debug_str	00000000 
00051507 l       .debug_str	00000000 
00051566 l       .debug_str	00000000 
000515c5 l       .debug_str	00000000 
00051624 l       .debug_str	00000000 
00051684 l       .debug_str	00000000 
000516e3 l       .debug_str	00000000 
00051742 l       .debug_str	00000000 
000517a1 l       .debug_str	00000000 
00051801 l       .debug_str	00000000 
00015356 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
000171ae l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
000171b8 l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
000159c2 l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
000169ea l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
000158bc l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
0001596c l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
00015ee4 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
00015306 l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
00015368 l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
0001fb64 l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
0001fbdf l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
0001fdd0 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
0001f140 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
00015996 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
0001599c l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00015990 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
00015308 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
000171c4 l     F .text	00000024 __semihost
000171e8 l     F .text	00000010 debugger_connected
000171f8 l     F .text	0000002e semihost_write
000172cc l     F .text	0000001c semihosting_console_write_ch
20006f04 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20006f08 l     O .bss	00000010 avail_queue
20006f18 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20006f24 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
0001749c l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
000174f0 l     F .text	00000050 hal_gpio_irq_handler
00017540 l     F .text	0000002c hal_gpio_irq_setup
0001756c l     F .text	0000001c hal_gpio_find_empty_slot
00017588 l     F .text	00000038 hal_gpio_find_pin
20006f28 l     O .bss	00000040 hal_gpio_irqs
20006f68 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
0001771c l     F .text	0000007a hal_i2c_delay_us
00017798 l     F .text	00000024 hal_i2c_resolve
000177bc l     F .text	0000001c hal_i2c_convert_status
000177d8 l     F .text	00000012 read_gpio_inbuffer
000177ea l     F .text	000000a2 hal_i2c_clear_bus
00020238 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
00017b88 l     F .text	0000006e nrf52_irqm_handler
00017c10 l     F .text	00000014 hal_spi_stop_transfer
00017c24 l     F .text	0000004c hal_spi_config_slave
00017c70 l     F .text	000000b8 hal_spi_init_master
00017d28 l     F .text	000000e0 hal_spi_config_master
00020240 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
0001810c l     F .text	0000000e nrf52_hal_wdt_default_handler
0001811c l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00018334 l     F .text	00000016 os_main
20007070 l     O .bss	00002000 g_os_main_stack
20006f70 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00018644 l     F .text	0000005c os_dev_add
000186a0 l     F .text	00000026 os_dev_initialize
000186c6 l     F .text	00000020 os_dev_init
20009070 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20009078 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
00018bf0 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00018d04 l     F .text	00000010 os_msys_find_biggest_pool
00018d14 l     F .text	0000002c os_msys_find_pool
00018d8c l     F .text	00000044 os_msys_init_once
20009088 l     O .bss	00004900 os_msys_1_data
2000d988 l     O .bss	0000000c os_msys_1_mbuf_pool
2000d994 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
00018fe8 l     F .text	00000020 os_sanity_check_list_lock
00019008 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0001947c l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001956c l     F .text	0000004c os_deltatime
000195b8 l     F .text	0000005c os_time_tick
2000d9b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
000198d4 l       .text	00000000 SVC_User
000198f2 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
00019994 l       .text	00000000 test1
00019988 l       .text	00000000 loop1
0001999a l       .text	00000000 res1
000199b6 l       .text	00000000 test2
000199be l       .text	00000000 done
000199aa l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
000199ca l       .text	00000000 test1
000199c6 l       .text	00000000 loop1
000199d8 l       .text	00000000 test2
000199d4 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
00019a42 l     F .text	000000c0 ui2a
00019b02 l     F .text	00000020 i2a
00019b22 l     F .text	00000030 a2d
00019b52 l     F .text	00000036 a2i
00019b88 l     F .text	0000002a putf
00019bb4 l     F .text	0000011c putchw
00019cd0 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001a054 l     F .text	00000004 stdin_read
0001a058 l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001a108 l     F .text	00000028 nrf52k_flash_wait_ready
0001a130 l     F .text	00000054 nrf52k_flash_erase_sector
0001a184 l     F .text	00000004 nrf52k_flash_init
0001a188 l     F .text	00000020 nrf52k_flash_sector_info
0001a1a8 l     F .text	000000d0 nrf52k_flash_write
0001a278 l     F .text	0000000e nrf52k_flash_read
000203f8 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001a288 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001a494 l     F .text	0000000a nrf_read_timer_cntr
0001a4a0 l     F .text	000000b4 nrf_timer_set_ocmp
0001a554 l     F .text	0000000a nrf_timer_disable_ocmp
0001a55e l     F .text	0000000a nrf_rtc_disable_ocmp
0001a568 l     F .text	00000054 hal_timer_read_bsptimer
0001a5bc l     F .text	00000076 hal_timer_chk_queue
0001a632 l     F .text	0000002c hal_timer_irq_handler
00020414 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001a7f8 l     F .text	00000034 nrf52_periph_create_timers
0001a82c l     F .text	00000020 nrf52_periph_create_i2c
0001a84c l     F .text	00000020 nrf52_periph_create_spi
0002042c l     O .text	0000000c hal_i2c1_cfg
00020438 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001a880 l     F .text	00000028 sensor_mgr_remove
0001a8a8 l     F .text	00000060 sensor_mgr_insert
0001a908 l     F .text	0000000a sensor_type_traits_empty
0001a914 l     F .text	0000000c sensor_mgr_evq_set
0001a94e l     F .text	0000005c sensor_read_data_func
0001a9ac l     F .text	00000048 sensor_base_ts_update_event
0001a9f4 l     F .text	00000050 sensor_up_timestamp
0001aa7c l     F .text	000000a0 sensor_mgr_init
0001ace8 l     F .text	0000007c sensor_mgr_wakeup_event
0001ab46 l     F .text	00000032 sensor_update_nextrun
0001ab78 l     F .text	0000001e sensor_calc_nextrun_delta
0001ab98 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001ac70 l     F .text	0000004a sensor_mgr_poll_bytype
0001acba l     F .text	0000002e sensor_poll_per_type_trait
2000d9ec l     O .bss	00000078 sensor_notify_evt_area
2000da64 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000da80 l     O .bss	00000008 oc_sem
2000da88 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000da8c l     O .bss	0000000c hw_id
2000da98 l     O .bss	00000004 hw_id_len
2000daa0 l     O .bss	00000008 sensor_node_address
2000daa8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
00020450 l     O .text	0000000c COLLECTOR_NODE_HW_ID
0002045c l     O .text	0000003c SENSOR_NODE_HW_IDS
000204f8 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001af0c l     F .text	00000050 config_device
2000dae0 l     O .bss	00000014 adc_1_itf_temp_stub
2000daf8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001afb8 l     F .text	00000004 temp_stub_close
0001afbc l     F .text	0000001c temp_stub_sensor_get_config
0001afd8 l     F .text	00000026 temp_stub_open
0001b0b4 l     F .text	0000007c temp_stub_sensor_read
0002053c l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001b158 l     F .text	00000030 oc_buffer_tx
0001b188 l     F .text	0000002c oc_buffer_rx
2000dbb8 l     O .bss	00000018 oc_inq
2000dbd0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000dbe8 l     O .bss	000000c8 oc_client_cb_area
2000dcb0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000dccc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000dcd0 l     O .bss	0000001c oc_rep_objects
2000dcec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001b2dc l     F .text	00000078 flash_map_read_mfg
2000dd1c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001b430 l     F .text	00000094 mfg_seek_next_aux
0001b4c4 l     F .text	00000070 mfg_read_mmr
0001b534 l     F .text	00000054 mfg_read_next_mmr
0001b588 l     F .text	0000003c mfg_open_flash_area
0001b5c4 l     F .text	00000044 mfg_read_tlv_body
0001b690 l     F .text	0000004e mfg_read_mmr_refs
2000dd94 l     O .bss	00000001 mfg_initialized
2000dd98 l     O .bss	00000018 mfg_mmrs
2000ddb0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001b6f6 l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
0001a953 l       .debug_str	00000000 
0001a9aa l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
0001a9f6 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0001a9fe l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000154d4 g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
0000886c g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE
00008616 g     F .text	000000ba main
00009dfc g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
00018914 g     F .text	00000040 os_eventq_remove
00019760 g     F .text	00000018 os_arch_init
0001997c g     F .text	00000048 memcmp
00011d5a g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
00014738 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
00011486 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
000120d0 g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
00014f0e g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
00014d96 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
0001423c g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
00015504 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
0000a574 g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
000091a8 g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
00016fd6 g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000ded0 g     O .bss	0000001c nrf52_hal_timer0
0000918e g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
0001ab3c g     F .text	0000000a sensor_unlock
0000a95a g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
000114da g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
00008ffa g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
00019034 g     F .text	00000024 os_sanity_check_register
0001b00c g     F .text	0000007c temp_stub_init
000190d4 g     F .text	00000054 os_sched_insert
2000ddb4 g     O .bss	00000001 g_silence_console
000123ec g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00014b8c g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001b794 g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
000152f4 g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
00008d66 g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
0001467e g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
00008ba4 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
0001b218 g     F .text	00000020 oc_send_buffer
000112a0 g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E
00019808 g     F .text	00000030 os_arch_start
0000e968 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE
0001ae30 g     F .text	0000001a is_standalone_node
00018800 g     F .text	00000010 os_eventq_init
000163c2 g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
000124a4 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
00015aa6 g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
000114c4 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
00008e5c g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
00015110 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001ad64 g     F .text	00000028 init_sensor_coap
00014e22 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE
0001b238 g     F .text	0000004c oc_send_multicast_message
00011a7a g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
0000eaa2 g     F .text	000000a8 _ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E
0001637e g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000def0 g     O .bss	00000034 sensor_mgr
00017368 g     F .text	0000002c console_dump
0000ac5c g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E
00019200 g     F .text	00000078 os_sched_wakeup
0000ea26 g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE
0001237c g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
00016e86 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
00008bdc g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001b6f4 g     F .text	00000002 _fini
00018638 g     F .text	0000000a os_cputime_get32
0001158a g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
000140de g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000ddb5 g     O .bss	00000001 g_console_input_ignore
000196f0 g     F .text	00000014 os_arch_ctx_sw
000123c2 g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
00014ac8 g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E
0001993e g     F .text	0000000c SysTick_Handler
0000ef80 g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE
0000f0ea g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E
0001ada4 g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
00011e7c g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
000114f0 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
000113ea g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h1051abda59747a6bE
000094e0 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
000123f6 g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
00019a16 g     F .text	0000001c strcmp
2000dde8 g     O .bss	00000050 g_idle_task
0000f7e0 g     F .text	000000c4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E
000187f0 g     F .text	00000010 os_dev_reset
0000958c g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
00019350 g     F .text	00000010 os_sem_init
0000eb4a g     F .text	00000106 _ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E
000172e8 g     F .text	00000070 console_printhex
000142a8 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
0000ffd0 g     F .text	000002c8 _ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E
0000e9b0 g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE
000205fc g       .text	00000000 __exidx_start
0001ae14 g     F .text	0000001c is_collector_node
000199de g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
00016c94 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
00011162 g     F .text	00000060 _ZN22piet_embedded_graphics7display18set_display_pixels17hee35995df7c8ec94E
00017278 g     F .text	00000054 console_buffer
00018810 g     F .text	0000000a os_eventq_inited
000174b0 g     F .text	0000000c sysinit_end
00014d44 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
000151a0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
0001547c g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000df88 g       .bss	00000000 __HeapBase
0000eec0 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E
0000948c g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
00014a62 g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h8e5f04233c93701aE
00014210 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
0000f218 g     F .text	00000128 .hidden _ZN3app5chip88on_start17h13652dc8e27bf6d4E
00014418 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001b394 g     F .text	00000026 flash_area_read
000123ac g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001b2aa g     F .text	00000002 oc_register_ip4
000090b2 g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001b2ac g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
00014c1a g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE
0001b714 g     F .text	00000028 hal_flash_init
000187b8 g     F .text	00000036 os_dev_close
00020594 g     O .text	00000048 sysflash_map_dflt
0000f452 g     F .text	0000020c _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE
0001a0fc g     F .text	0000000c hal_bsp_init
00008c88 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
0000f8a4 g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha9851d0b0cdc4725E
00011b76 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00009a26 g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
00011a3c g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001baf0 g     F .text	00000004 __aeabi_memcpy4
00017f54 g     F .text	0000002c hal_spi_set_txrx_cb
0001bae8 g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000ddb8 g     O .bss	00000004 console_is_midline
0001bae8 g     F .text	00000006 __aeabi_memclr4
0000f0ba g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E
000080f8 g       .text	00000000 __isr_vector_end
00017a4c g     F .text	0000013c hal_i2c_master_read
00019d34 g     F .text	0000025c tfp_format
000151d0 g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E
000150e0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001ac08 g     F .text	00000068 sensor_read
00009174 g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
0001baf0 g     F .text	00000004 __aeabi_memcpy
0001baf0 g     F .text	00000004 __aeabi_memcpy8
2000df24 g     O .bss	00000020 st_up_osco
00019838 g     F .text	0000005c os_arch_os_start
0001abea g     F .text	0000001e sensor_init
0000ad80 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E
20000000 g       .bss	00000000 _ram_start
00019660 g     F .text	00000026 os_time_delay
0001114a g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E
0001b2a8 g     F .text	00000002 oc_register_gatt
20004a6c g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001b790 g     F .text	00000004 hal_bsp_hw_id_len
000185f8 g     F .text	00000034 os_callout_wakeup_ticks
0001896e g     F .text	00000026 os_mqueue_get
0001788c g     F .text	00000098 hal_i2c_init
0001146e g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h0340384168a45934E
00016250 g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
00016c94 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
000089ac g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0001e88d g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
000150b0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
00019300 g     F .text	00000022 os_sched
00008d78 g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00011bbc g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001a920 g     F .text	0000002e sensor_mgr_match_bytype
00011a90 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
0000aadc g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
00018e3c g     F .text	00000014 os_mutex_init
00009066 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
00009db8 g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
0000f1b2 g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc3726000bdb855aE
2000ddc0 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
00008164  w    F .text	00000002 RTC1_IRQHandler
00011ca2 g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
00015020 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000931c g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
00009462 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
00008c80 g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
00014a70 g     F .text	00000008 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hb4ddf2fb975bed7dE
000125bc g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
00018de0 g     F .text	00000028 os_msys_get_pkthdr
0001b088 g     F .text	0000002c temp_stub_get_raw_temperature
00019278 g     F .text	0000003c os_sched_os_timer_exp
0000efa6 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE
000186e8 g     F .text	00000040 os_dev_create
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
00019024 g     F .text	00000010 os_sanity_check_init
00015566 g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
00014a30 g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE
0001862c g     F .text	0000000c os_cputime_init
0000ac02 g     F .text	00000030 _ZN4core3any6TypeId2of17h3f51c8cccab069bdE
000188fc g     F .text	00000018 os_eventq_run
0001205c g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
00018e08 g     F .text	00000034 os_msys_init
000147e0 g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
00014bb6 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
000196e6 g     F .text	0000000a timer_handler
00011654 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
000152f8 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
000093f2 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
00008cba g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
000152f0 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
00015544 g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
000147b4 g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
00016e86 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
000144ae g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
00019f90 g     F .text	00000008 vfprintf
00014294 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
00011be8 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
00008984 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E
00011c46 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
00018a0e g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
00015080 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
0000eed4 g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6e7fb991422ea45dE
00016752 g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
000087d2 g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE
000154d8 g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
00019716 g     F .text	0000000a os_arch_in_critical
0000e9a0 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E
000190c4 g     F .text	00000010 os_sanity_init
00016e86 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
000181d8 g     F .text	0000004c __assert_func
0000ef5e g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E
00014e0e g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
000145d4 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00014a78 g     F .text	0000001a _ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6065e74ad82d0f14E
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00018cae g     F .text	0000001e os_memblock_put_from_cb
00019898 g     F .text	00000014 os_set_env
00011288 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h63142b18dacbc787E
2000deac g     O .bss	00000004 g_os_last_ctx_sw_time
00012408 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
00017448 g     F .text	00000048 console_printf
0001241e g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
0000aa2c g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
00011abc g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
000122c8 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
00014fc0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
000198ac g     F .text	00000006 os_arch_init_task_stack
0001b680 g     F .text	00000010 mfg_open
00016e86 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
0001b1dc g     F .text	00000030 oc_ri_mem_init
0000f18e g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h116a6636383259eeE
000097ee g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001a0ec g     F .text	00000010 hal_bsp_flash_dev
0001b3bc g     F .text	00000070 flash_map_init
2000dec0 g     O .bss	00000004 g_os_time
0001043a g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17h09fa961dda8dcb87E
0001994a g     F .text	0000001e os_default_irq_asm
00018224 g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
00017e8c g     F .text	00000068 hal_spi_disable
00012464 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E
00009146 g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001b2ae g     F .text	00000002 oc_register_lora
00018a90 g     F .text	000000a8 os_mbuf_append
0001af5c g     F .text	0000005c temp_stub_create
0001b73c g     F .text	00000054 hal_flash_read
00017228 g     F .text	00000048 console_flush
00018478 g     F .text	0000001a os_start
00014a92 g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E
0001a670 g     F .text	00000060 hal_timer_init
00011504 g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0001a068 g     F .text	00000010 rust_sysinit
00008164  w    F .text	00000002 I2S_IRQHandler
00017358 g     F .text	00000010 console_printint
00019324 g     F .text	0000002c os_sched_resort
00010468 g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE
000203d4 g     O .text	00000008 MemFile_methods
0001a03c g     F .text	00000018 fmemopen_w
000132b4 g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
00017e08 g     F .text	00000038 hal_spi_config
0001bae4  w    F .text	00000002 .hidden __aeabi_ldiv0
00018cf4 g     F .text	00000010 os_mempool_module_init
000192f4 g     F .text	0000000c os_sched_next_task
0000ed8e g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17hb4ffb829681b047bE
00017646 g     F .text	00000034 hal_gpio_read
000184cc g     F .text	0000001a os_callout_init
00018dd0 g     F .text	00000010 os_msys_reset
00019f98 g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001b7e8 g     F .text	00000000 .hidden __aeabi_uldivmod
00019688 g     F .text	00000038 os_gettimeofday
000173d4 g     F .text	0000001e console_write
0001125c g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E
00015170 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
0001621a g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
000098ea g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
00018358 g     F .text	00000070 os_init_idle_task
00019778 g     F .text	0000008c os_arch_os_init
0000942a g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
000183c8 g     F .text	000000b0 os_init
2000de98 g     O .bss	00000008 g_os_mempool_list
000098e0 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
00011ad2 g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
000173d0 g     F .text	00000004 semihosting_console_init
0001b61a g     F .text	0000001a mfg_seek_next_with_type
00018f08 g     F .text	000000e0 os_mutex_pend
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00017624 g     F .text	00000022 hal_gpio_write
00008600 g     F .text	00000014 _start
00011bb4 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
00011c1c g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001b6e0 g     F .text	00000014 __wrap_coap_receive
00014ff0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000ddbc g     O .bss	00000001 sysinit_active
0000ac78 g     F .text	00000108 _ZN8libchip814Chip8$LT$T$GT$3new17hca880a1e3fbd9a67E
000124e0 g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
0001432c g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001a00c g     F .text	0000002e memfile_write
0001bae4  w    F .text	00000002 .hidden __aeabi_idiv0
0001834c g     F .text	0000000c os_started
0000ac32 g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE
0001b1b4 g     F .text	00000028 oc_buffer_init
0001423e g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
0000940e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000dea0 g     O .bss	0000000c g_os_sanity_check_mu
000091b8 g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
00014b20 g     F .text	00000042 _ZN4core3ptr4read17h9c6a8e2989f962ccE
0000ed9e g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E
0001bae8 g     F .text	00000006 __aeabi_memclr
0001baf4 g     F .text	0000009a __aeabi_memset4
0000eeac g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E
00012648 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
00016222 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
00012434 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E
00019620 g     F .text	00000040 os_time_advance
00017e40 g     F .text	0000004c hal_spi_enable
0001b648 g     F .text	00000038 mfg_init
00013d5e g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
000089ee g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc4148eaa15af1e8eE
2000de38 g     O .bss	00000050 g_os_main_task
0001baf4 g     F .text	0000009a __aeabi_memset8
00016cf2 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
0000f65e g     F .text	000000d4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE
00008c74 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
00020614 g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000148 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
00015864 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
00008c02 g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
000170ca g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
000174bc g     F .text	00000034 NVIC_Relocate
000174a4 g     F .text	0000000c sysinit_start
000203e0 g     O .text	00000018 nrf52k_flash_dev
0001a6d0 g     F .text	000000f8 hal_timer_config
000143a8 g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
00019ff8 g     F .text	00000014 vprintf
00009098 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
00017270 g     F .text	00000008 disable_buffer
00014e36 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E
2000de88 g     O .bss	00000004 g_os_started
000154cc g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
20000144 g       .bssnz	00000000 __bssnz_end__
00018754 g     F .text	00000020 os_dev_lookup
00009310 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
000181b4 g     F .text	00000010 hal_watchdog_enable
2000dec4 g     O .bss	0000000c g_hal_os_tick
00014da8 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E
00019710 g     F .text	00000006 os_arch_restore_sr
00018524 g     F .text	00000078 os_callout_reset
000098f4 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001b634 g     F .text	0000000a mfg_read_tlv_flash_area
00012480 g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
0001895c g     F .text	00000012 os_mqueue_init
00015050 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
000144d8 g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0001affe g     F .text	0000000e temp_stub_default_cfg
000124b4 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E
0000f8ac g     F .text	000000f6 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E
00008020 g       .imghdr	00000000 __text
000184e8 g     F .text	0000003c os_callout_stop
00008908 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E
000081c0 g     F .text	0000004c hal_system_clock_start
00018a58 g     F .text	00000024 os_mbuf_free_chain
000091e4 g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001a078 g     F .text	00000030 mem_init_mbuf_pool
000124d8 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
00011290 g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E
00012412 g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
00014dba g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E
00017924 g     F .text	00000128 hal_i2c_master_write
0000add6 g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E
00008164  w    F .text	00000002 QDEC_IRQHandler
0000f1ec g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE
0000ac48 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
0001262a g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
00011890 g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
000113b2 g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E
00018954 g     F .text	00000008 os_eventq_dflt_get
0001ab24 g     F .text	00000018 sensor_lock
000111c2 g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE
0001149c g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
000173fc g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
00018a7c g     F .text	00000014 os_mbuf_len
00018a44 g     F .text	00000014 os_mbuf_free
00011aa6 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
00012068 g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
0000ae28 g     F .text	00003b40 _ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE
000173f2 g     F .text	00000008 console_blocking_mode
0000a59a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00009b52 g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
000114b0 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001a86c g     F .text	00000010 nrf52_periph_create
00019058 g     F .text	0000006c os_sanity_run
0000841c g     F .text	00000010 SystemCoreClockUpdate
0000f172 g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E
000142ae g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
000143f4 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
0000ec50 g     F .text	0000007e _ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E
00018c68 g     F .text	00000014 os_mempool_init
000203dc g     O .text	00000004 stdout
0001144a g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h27d5684c70bb37e8E
0000ab8c g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
00018728 g     F .text	0000002c os_dev_initialize_all
00008d98 g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
0000f7cc g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E
00014de4 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
000182bc g     F .text	00000078 os_idle_task
00008e4c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
00014f26 g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
00009970 g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
0000f732 g     F .text	0000009a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE
00015f18 g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001b354 g     F .text	00000040 flash_area_open
00008164 g     F .text	00000002 Default_Handler
000154ca g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000f098 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E
00009336 g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
00018d40 g     F .text	0000004c os_msys_register
000091ee g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000d9b0 g     O .bss	00000004 g_os_sanity_check_list
0000a990 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
00011bf2 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
000117cc g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
00017ef4 g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001aa60 g     F .text	00000010 sensor_mgr_unlock
2000df80 g     O .bss	00000004 flash_map_entries
00016c36 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
00014f30 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
0001b2b0 g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
00014728 g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0000a5c4 g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
00011d6c g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001b608 g     F .text	00000012 mfg_seek_next
00012072 g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
2000011c g     O .data	00000008 g_os_sleep_list
00015c88 g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
000189d2 g     F .text	0000000a os_mbuf_pool_init
2000de90 g     O .bss	00000008 g_callout_list
00019164 g     F .text	0000000c os_sched_set_current_task
0001859c g     F .text	0000005c os_callout_tick
0000ecce g     F .text	000000c0 _ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE
0000920a g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
00011cd4 g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
0000f076 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E
0001813c g     F .text	00000078 hal_watchdog_init
2000deb4 g     O .bss	00000001 g_task_id
00016f5c g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
0000a592 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
00018774 g     F .text	00000044 os_dev_open
2000deb0 g     O .bss	00000004 g_current_task
000152ec g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
00014ea2 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
00008c68 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
00017bf8 g     F .text	00000018 nrf52_spi0_irq_handler
0001ab1c g     F .text	00000008 sensor_pkg_init
0001b130 g     F .text	00000028 temp_stub_config
00018994 g     F .text	0000003e os_mqueue_put
000170ca g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
00017f80 g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
00019158 g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
000122e4 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001b42c g     F .text	00000002 modlog_init
0001802c g     F .text	000000e0 hal_spi_txrx_noblock
0001622a g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
00009184 g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
00008fd6 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
00019128 g     F .text	00000030 os_sched_ctx_sw_hook
0001abbc g     F .text	0000002e sensor_mgr_register
0001547c g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
0000f406 g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hd3173c320d2551cfE
00015ac8 g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
00008154  w    F .text	00000002 NMI_Handler
00014226 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000ef3c g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE
00009286 g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
00008e54 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
00011a6e g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
000189dc g     F .text	00000032 os_mbuf_get
2000deb8 g     O .bss	00000008 g_os_task_list
00008a58 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
00015792 g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
00019fbc g     F .text	0000003a vsnprintf
000130fc g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
0000f1a0 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1647783578bb3807E
00018e50 g     F .text	000000b8 os_mutex_release
0001207a g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
0000f114 g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E
00011e2e g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001aa70 g     F .text	0000000c sensor_mgr_evq_get
0001475c g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
00011bd0 g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
2000de8c g     O .bss	00000004 g_os_idle_ctr
000175c0 g     F .text	0000002c hal_gpio_init_in
00011b6c g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
000098fe g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001a87c g     F .text	00000002 sensor_dev_create
0000ab9a g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E
000116f0 g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
00008a0c g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
000175ec g     F .text	00000038 hal_gpio_init_out
0000f410 g     F .text	00000042 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E
00008e76 g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
00011800 g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
000148f4 g     F .text	0000013c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE
0000950a g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
00019614 g     F .text	0000000c os_time_get
000154cc g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
0000a506 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
00018ccc g     F .text	00000026 os_memblock_put
0001318c g     F .text	00000128 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
00019170 g     F .text	00000090 os_sched_sleep
00011baa g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001aa44 g     F .text	0000001c sensor_mgr_lock
0001b818 g     F .text	000002cc .hidden __udivmoddi4
000114bc g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001a3f4 g     F .text	000000a0 os_tick_init
00014356 g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
000154c6 g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
000090f8 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
000192b4 g     F .text	00000040 os_sched_wakeup_ticks
00009446 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001a7c8 g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
000176f4 g     F .text	00000028 hal_gpio_irq_enable
0001b20c g     F .text	0000000c oc_evq_set
0001ad8c g     F .text	00000018 is_sensor_node
00016c36 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001b284 g     F .text	00000024 oc_init
00016db0 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
00016db0 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
00009824 g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
00016406 g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
0000abc8 g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E
00014f90 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E
2000df48 g     O .bss	00000018 sensor_base_ts
00016fd6 g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
00014c7e g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E
00020614 g       .ARM.exidx	00000000 __etext
00016cf2 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
00017490 g     F .text	0000000c console_get_ticks
0000e98c g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6a25aae91f88a8abE
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0000913c g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
0000eee6 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E
000111fc g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE
20000108 g     O .data	00000004 hal_twi_i2c1
0000ea4c g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE
00019494 g     F .text	000000d8 os_task_init
00009070 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
000117b2 g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
00011b9a g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
00015140 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
00011234 g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE
00019360 g     F .text	00000064 os_sem_release
0000efc8 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E
0001baf4 g     F .text	0000009a __aeabi_memset
0000f01e g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE
00018b38 g     F .text	000000b8 os_mbuf_dup
000198f8 g     F .text	00000046 PendSV_Handler
000124c4 g     F .text	00000014 _ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E
000198b2 g     F .text	00000046 SVC_Handler
000089f8 g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E
00019704 g     F .text	0000000c os_arch_save_sr
00008164  w    F .text	00000002 PWM2_IRQHandler
0000815c  w    F .text	00000002 UsageFault_Handler
0001a660 g     F .text	00000010 nrf52_timer0_irq_handler
00019720 g     F .text	00000040 os_arch_task_stack_init
2000df88 g       .bss	00000000 __bss_end__
00018c7c g     F .text	00000032 os_memblock_get
0000f1c0 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E
2000df84 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
000118ca g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
00011590 g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
000181c4 g     F .text	00000014 hal_watchdog_tickle
00018882 g     F .text	0000007a os_eventq_get
0001b7c8 g     F .text	00000020 sprintf
000196c0 g     F .text	00000026 os_time_ms_to_ticks
00008a1c g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
0000a9f6 g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000d9e8 g     O .bss	00000004 os_flags
0001b2b4 g     F .text	00000028 oc_rep_init
000199c4 g     F .text	0000001a memcpy
0001a0a8 g     F .text	00000044 sysinit_app
00011e16 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E
00014f60 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
00013d6e g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
00012396 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
00017394 g     F .text	0000003c console_out_nolock
2000df60 g     O .bss	00000020 oc_transports
0001767c g     F .text	00000078 hal_gpio_irq_init
0000edf2 g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E
00019a32 g     F .text	00000010 strlen
000193c4 g     F .text	000000b8 os_sem_pend
00011436 g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he2e30225e051e80dE
0001a35c g     F .text	00000098 os_tick_idle
000123dc g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00011276 g     F .text	00000012 _ZN4core3mem4swap17h21afb25e2d195463E
00000000 g       .svc_table	00000000 SVC_Table
0001254e g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
2000fe50 g       *ABS*	00000000 __HeapLimit
00018494 g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
000094b6 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
0000a55a g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
0001452a g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
000140da g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00008158  w    F .text	00000002 MemoryManagement_Handler
00016db0 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
0001881a g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
00009934 g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
000116de g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
0001b63e g     F .text	0000000a mfg_read_tlv_mmr_ref
00008c50 g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
0001ae4c g     F .text	000000c0 sensor_network_init
000147ee g     F .text	00000106 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E
00016db0 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00014b62 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
00008cfc g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
0001244c g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	000198b3 	.word	0x000198b3
	...
    8058:	000198f9 	.word	0x000198f9
    805c:	0001993f 	.word	0x0001993f
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000df88 	.word	0x2000df88
    ldr    r1, =__etext
    8138:	00020614 	.word	0x00020614
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000df88 	.word	0x2000df88
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f00e ffa5 	bl	174bc <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f00f fee0 	bl	183c8 <os_init>
    os_start();
    8608:	f00f ff36 	bl	18478 <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f000 f9f8 	bl	8a0c <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f000 ffb5 	bl	958c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f64b 318e 	movw	r1, #48014	; 0xbb8e
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f64b 33c4 	movw	r3, #48068	; 0xbbc4
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f000 fae2 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f007 ff12 	bl	10468 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f64b 3196 	movw	r1, #48022	; 0xbb96
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f64b 33d4 	movw	r3, #48084	; 0xbbd4
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f000 fad1 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f006 fdd9 	bl	f218 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f64b 31e4 	movw	r1, #48100	; 0xbbe4
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f64b 33f0 	movw	r3, #48112	; 0xbbf0
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f000 fac0 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f000 fb76 	bl	8d78 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f64b 319e 	movw	r1, #48030	; 0xbb9e
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f64b 4300 	movw	r3, #48128	; 0xbc00
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f006 fb7c 	bl	ed9e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f000 fb5b 	bl	8d66 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f64b 31a6 	movw	r1, #48038	; 0xbba6
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f64b 4310 	movw	r3, #48144	; 0xbc10
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f000 fa9b 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f64b 4120 	movw	r1, #48160	; 0xbc20
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f000 fd08 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00c feeb 	bl	154c6 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f64b 4026 	movw	r0, #48166	; 0xbc26
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f000 fcf7 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00c fedb 	bl	154cc <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00c fed9 	bl	154d4 <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f64b 402d 	movw	r0, #48173	; 0xbc2d
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f000 fce0 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f000 fd02 	bl	9146 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f64b 4030 	movw	r0, #48176	; 0xbc30
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f000 fcd3 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f000 fd0d 	bl	9174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f64b 4036 	movw	r0, #48182	; 0xbc36
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f000 fcc7 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f000 fd0a 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f000 fd06 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00c fea3 	bl	154cc <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f002 fa4f 	bl	ac32 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f64b 4138 	movw	r1, #48184	; 0xbc38
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f000 f903 	bl	89ac <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f000 fca1 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f64b 4036 	movw	r0, #48182	; 0xbc36
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f000 fc99 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f000 fcdc 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE>:
    87d2:	b580      	push	{r7, lr}
    87d4:	b08a      	sub	sp, #40	; 0x28
    87d6:	9104      	str	r1, [sp, #16]
    87d8:	9205      	str	r2, [sp, #20]
    87da:	9308      	str	r3, [sp, #32]
    87dc:	2100      	movs	r1, #0
    87de:	f88d 101e 	strb.w	r1, [sp, #30]
    87e2:	f88d 101f 	strb.w	r1, [sp, #31]
    87e6:	2101      	movs	r1, #1
    87e8:	f88d 101f 	strb.w	r1, [sp, #31]
    87ec:	f88d 101e 	strb.w	r1, [sp, #30]
    87f0:	9904      	ldr	r1, [sp, #16]
    87f2:	2900      	cmp	r1, #0
    87f4:	9303      	str	r3, [sp, #12]
    87f6:	9002      	str	r0, [sp, #8]
    87f8:	d001      	beq.n	87fe <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x2c>
    87fa:	e7ff      	b.n	87fc <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x2a>
    87fc:	e004      	b.n	8808 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x36>
    87fe:	2000      	movs	r0, #0
    8800:	9902      	ldr	r1, [sp, #8]
    8802:	6008      	str	r0, [r1, #0]
    8804:	e01f      	b.n	8846 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x74>
    8806:	defe      	udf	#254	; 0xfe
    8808:	2000      	movs	r0, #0
    880a:	f88d 001f 	strb.w	r0, [sp, #31]
    880e:	9905      	ldr	r1, [sp, #20]
    8810:	9109      	str	r1, [sp, #36]	; 0x24
    8812:	f88d 001e 	strb.w	r0, [sp, #30]
    8816:	9106      	str	r1, [sp, #24]
    8818:	9906      	ldr	r1, [sp, #24]
    881a:	9803      	ldr	r0, [sp, #12]
    881c:	f002 fa1e 	bl	ac5c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E>
    8820:	9001      	str	r0, [sp, #4]
    8822:	9100      	str	r1, [sp, #0]
    8824:	e7ff      	b.n	8826 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x54>
    8826:	9801      	ldr	r0, [sp, #4]
    8828:	9902      	ldr	r1, [sp, #8]
    882a:	6048      	str	r0, [r1, #4]
    882c:	9a00      	ldr	r2, [sp, #0]
    882e:	608a      	str	r2, [r1, #8]
    8830:	2301      	movs	r3, #1
    8832:	600b      	str	r3, [r1, #0]
    8834:	e007      	b.n	8846 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x74>
    8836:	9804      	ldr	r0, [sp, #16]
    8838:	2801      	cmp	r0, #1
    883a:	d00c      	beq.n	8856 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x84>
    883c:	e015      	b.n	886a <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x98>
    883e:	2000      	movs	r0, #0
    8840:	f88d 001e 	strb.w	r0, [sp, #30]
    8844:	e7f7      	b.n	8836 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x64>
    8846:	f89d 001e 	ldrb.w	r0, [sp, #30]
    884a:	07c0      	lsls	r0, r0, #31
    884c:	2800      	cmp	r0, #0
    884e:	d1f6      	bne.n	883e <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x6c>
    8850:	e7f1      	b.n	8836 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x64>
    8852:	b00a      	add	sp, #40	; 0x28
    8854:	bd80      	pop	{r7, pc}
    8856:	f89d 001f 	ldrb.w	r0, [sp, #31]
    885a:	07c0      	lsls	r0, r0, #31
    885c:	2800      	cmp	r0, #0
    885e:	d0f8      	beq.n	8852 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x80>
    8860:	e7ff      	b.n	8862 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x90>
    8862:	2000      	movs	r0, #0
    8864:	f88d 001f 	strb.w	r0, [sp, #31]
    8868:	e7f3      	b.n	8852 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x80>
    886a:	e7f2      	b.n	8852 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE+0x80>

0000886c <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE>:
    886c:	b580      	push	{r7, lr}
    886e:	b08c      	sub	sp, #48	; 0x30
    8870:	9103      	str	r1, [sp, #12]
    8872:	9204      	str	r2, [sp, #16]
    8874:	930a      	str	r3, [sp, #40]	; 0x28
    8876:	2100      	movs	r1, #0
    8878:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    887c:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    8880:	2101      	movs	r1, #1
    8882:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    8886:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    888a:	9903      	ldr	r1, [sp, #12]
    888c:	2900      	cmp	r1, #0
    888e:	9302      	str	r3, [sp, #8]
    8890:	9001      	str	r0, [sp, #4]
    8892:	d001      	beq.n	8898 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x2c>
    8894:	e7ff      	b.n	8896 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x2a>
    8896:	e004      	b.n	88a2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x36>
    8898:	2000      	movs	r0, #0
    889a:	9901      	ldr	r1, [sp, #4]
    889c:	6008      	str	r0, [r1, #0]
    889e:	e020      	b.n	88e2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x76>
    88a0:	defe      	udf	#254	; 0xfe
    88a2:	2000      	movs	r0, #0
    88a4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    88a8:	9904      	ldr	r1, [sp, #16]
    88aa:	910b      	str	r1, [sp, #44]	; 0x2c
    88ac:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    88b0:	9108      	str	r1, [sp, #32]
    88b2:	9a08      	ldr	r2, [sp, #32]
    88b4:	a805      	add	r0, sp, #20
    88b6:	9902      	ldr	r1, [sp, #8]
    88b8:	f002 f9c6 	bl	ac48 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE>
    88bc:	e7ff      	b.n	88be <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x52>
    88be:	9805      	ldr	r0, [sp, #20]
    88c0:	9906      	ldr	r1, [sp, #24]
    88c2:	9a07      	ldr	r2, [sp, #28]
    88c4:	9b01      	ldr	r3, [sp, #4]
    88c6:	60da      	str	r2, [r3, #12]
    88c8:	6099      	str	r1, [r3, #8]
    88ca:	6058      	str	r0, [r3, #4]
    88cc:	2001      	movs	r0, #1
    88ce:	6018      	str	r0, [r3, #0]
    88d0:	e007      	b.n	88e2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x76>
    88d2:	9803      	ldr	r0, [sp, #12]
    88d4:	2801      	cmp	r0, #1
    88d6:	d00c      	beq.n	88f2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x86>
    88d8:	e015      	b.n	8906 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x9a>
    88da:	2000      	movs	r0, #0
    88dc:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    88e0:	e7f7      	b.n	88d2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x66>
    88e2:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    88e6:	07c0      	lsls	r0, r0, #31
    88e8:	2800      	cmp	r0, #0
    88ea:	d1f6      	bne.n	88da <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x6e>
    88ec:	e7f1      	b.n	88d2 <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x66>
    88ee:	b00c      	add	sp, #48	; 0x30
    88f0:	bd80      	pop	{r7, pc}
    88f2:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    88f6:	07c0      	lsls	r0, r0, #31
    88f8:	2800      	cmp	r0, #0
    88fa:	d0f8      	beq.n	88ee <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x82>
    88fc:	e7ff      	b.n	88fe <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x92>
    88fe:	2000      	movs	r0, #0
    8900:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    8904:	e7f3      	b.n	88ee <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x82>
    8906:	e7f2      	b.n	88ee <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE+0x82>

00008908 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E>:
    8908:	b085      	sub	sp, #20
    890a:	9000      	str	r0, [sp, #0]
    890c:	2000      	movs	r0, #0
    890e:	f88d 000b 	strb.w	r0, [sp, #11]
    8912:	f88d 000a 	strb.w	r0, [sp, #10]
    8916:	2001      	movs	r0, #1
    8918:	f88d 000b 	strb.w	r0, [sp, #11]
    891c:	f88d 000a 	strb.w	r0, [sp, #10]
    8920:	9800      	ldr	r0, [sp, #0]
    8922:	2800      	cmp	r0, #0
    8924:	4601      	mov	r1, r0
    8926:	bf18      	it	ne
    8928:	2101      	movne	r1, #1
    892a:	2800      	cmp	r0, #0
    892c:	d001      	beq.n	8932 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x2a>
    892e:	e7ff      	b.n	8930 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x28>
    8930:	e005      	b.n	893e <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x36>
    8932:	2000      	movs	r0, #0
    8934:	f88d 000a 	strb.w	r0, [sp, #10]
    8938:	9001      	str	r0, [sp, #4]
    893a:	e007      	b.n	894c <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x44>
    893c:	defe      	udf	#254	; 0xfe
    893e:	2000      	movs	r0, #0
    8940:	f88d 000b 	strb.w	r0, [sp, #11]
    8944:	9800      	ldr	r0, [sp, #0]
    8946:	9004      	str	r0, [sp, #16]
    8948:	9001      	str	r0, [sp, #4]
    894a:	e7ff      	b.n	894c <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x44>
    894c:	f89d 000a 	ldrb.w	r0, [sp, #10]
    8950:	07c0      	lsls	r0, r0, #31
    8952:	2800      	cmp	r0, #0
    8954:	d104      	bne.n	8960 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x58>
    8956:	e7ff      	b.n	8958 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x50>
    8958:	9800      	ldr	r0, [sp, #0]
    895a:	2800      	cmp	r0, #0
    895c:	d107      	bne.n	896e <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x66>
    895e:	e010      	b.n	8982 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x7a>
    8960:	2000      	movs	r0, #0
    8962:	f88d 000a 	strb.w	r0, [sp, #10]
    8966:	e7f7      	b.n	8958 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x50>
    8968:	9801      	ldr	r0, [sp, #4]
    896a:	b005      	add	sp, #20
    896c:	4770      	bx	lr
    896e:	f89d 000b 	ldrb.w	r0, [sp, #11]
    8972:	07c0      	lsls	r0, r0, #31
    8974:	2800      	cmp	r0, #0
    8976:	d0f7      	beq.n	8968 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x60>
    8978:	e7ff      	b.n	897a <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x72>
    897a:	2000      	movs	r0, #0
    897c:	f88d 000b 	strb.w	r0, [sp, #11]
    8980:	e7f2      	b.n	8968 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x60>
    8982:	e7f1      	b.n	8968 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E+0x60>

00008984 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E>:
    8984:	b084      	sub	sp, #16
    8986:	9002      	str	r0, [sp, #8]
    8988:	6801      	ldr	r1, [r0, #0]
    898a:	2900      	cmp	r1, #0
    898c:	9000      	str	r0, [sp, #0]
    898e:	d001      	beq.n	8994 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x10>
    8990:	e7ff      	b.n	8992 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0xe>
    8992:	e003      	b.n	899c <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x18>
    8994:	2000      	movs	r0, #0
    8996:	9001      	str	r0, [sp, #4]
    8998:	e005      	b.n	89a6 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x22>
    899a:	defe      	udf	#254	; 0xfe
    899c:	9800      	ldr	r0, [sp, #0]
    899e:	1d01      	adds	r1, r0, #4
    89a0:	9103      	str	r1, [sp, #12]
    89a2:	9101      	str	r1, [sp, #4]
    89a4:	e7ff      	b.n	89a6 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E+0x22>
    89a6:	9801      	ldr	r0, [sp, #4]
    89a8:	b004      	add	sp, #16
    89aa:	4770      	bx	lr

000089ac <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E>:
    89ac:	b084      	sub	sp, #16
    89ae:	9002      	str	r0, [sp, #8]
    89b0:	9802      	ldr	r0, [sp, #8]
    89b2:	2800      	cmp	r0, #0
    89b4:	4602      	mov	r2, r0
    89b6:	bf18      	it	ne
    89b8:	2201      	movne	r2, #1
    89ba:	2800      	cmp	r0, #0
    89bc:	9101      	str	r1, [sp, #4]
    89be:	d001      	beq.n	89c4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x18>
    89c0:	e7ff      	b.n	89c2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x16>
    89c2:	e009      	b.n	89d8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x2c>
    89c4:	f64b 4048 	movw	r0, #48200	; 0xbc48
    89c8:	f2c0 0001 	movt	r0, #1
    89cc:	212b      	movs	r1, #43	; 0x2b
    89ce:	9a01      	ldr	r2, [sp, #4]
    89d0:	f00c fd82 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    89d4:	defe      	udf	#254	; 0xfe
    89d6:	defe      	udf	#254	; 0xfe
    89d8:	9802      	ldr	r0, [sp, #8]
    89da:	9003      	str	r0, [sp, #12]
    89dc:	9902      	ldr	r1, [sp, #8]
    89de:	2900      	cmp	r1, #0
    89e0:	9000      	str	r0, [sp, #0]
    89e2:	d003      	beq.n	89ec <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x40>
    89e4:	e7ff      	b.n	89e6 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x3a>
    89e6:	9800      	ldr	r0, [sp, #0]
    89e8:	b004      	add	sp, #16
    89ea:	4770      	bx	lr
    89ec:	e7fb      	b.n	89e6 <_ZN4core6option15Option$LT$T$GT$6unwrap17h60603e33b7236287E+0x3a>

000089ee <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc4148eaa15af1e8eE>:
    89ee:	b081      	sub	sp, #4
    89f0:	2100      	movs	r1, #0
    89f2:	6001      	str	r1, [r0, #0]
    89f4:	b001      	add	sp, #4
    89f6:	4770      	bx	lr

000089f8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E>:
    89f8:	b580      	push	{r7, lr}
    89fa:	b082      	sub	sp, #8
    89fc:	9001      	str	r0, [sp, #4]
    89fe:	f7ff ff83 	bl	8908 <_ZN4core6option15Option$LT$T$GT$5ok_or17hffce5087cec965c1E>
    8a02:	9000      	str	r0, [sp, #0]
    8a04:	e7ff      	b.n	8a06 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E+0xe>
    8a06:	9800      	ldr	r0, [sp, #0]
    8a08:	b002      	add	sp, #8
    8a0a:	bd80      	pop	{r7, pc}

00008a0c <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    8a0c:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    8a0e:	f011 fb2b 	bl	1a068 <rust_sysinit>
    8a12:	e7ff      	b.n	8a14 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    8a14:	f000 fbb6 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8a18:	e7ff      	b.n	8a1a <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    8a1a:	bd80      	pop	{r7, pc}

00008a1c <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    8a1c:	b580      	push	{r7, lr}
    8a1e:	b086      	sub	sp, #24
    8a20:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    8a22:	7801      	ldrb	r1, [r0, #0]
    8a24:	07ca      	lsls	r2, r1, #31
    8a26:	2a00      	cmp	r2, #0
    8a28:	9000      	str	r0, [sp, #0]
    8a2a:	d006      	beq.n	8a3a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    8a2c:	e7ff      	b.n	8a2e <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    8a2e:	9800      	ldr	r0, [sp, #0]
    8a30:	6841      	ldr	r1, [r0, #4]
    8a32:	9103      	str	r1, [sp, #12]
    8a34:	9101      	str	r1, [sp, #4]
        match self.rep {
    8a36:	e00c      	b.n	8a52 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    8a38:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    8a3a:	9800      	ldr	r0, [sp, #0]
    8a3c:	6841      	ldr	r1, [r0, #4]
    8a3e:	6882      	ldr	r2, [r0, #8]
    8a40:	9104      	str	r1, [sp, #16]
    8a42:	9205      	str	r2, [sp, #20]
    8a44:	4608      	mov	r0, r1
    8a46:	4611      	mov	r1, r2
    8a48:	f009 f8af 	bl	11baa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8a4c:	9001      	str	r0, [sp, #4]
    8a4e:	e7ff      	b.n	8a50 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    8a50:	e7ff      	b.n	8a52 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    8a52:	9801      	ldr	r0, [sp, #4]
    8a54:	b006      	add	sp, #24
    8a56:	bd80      	pop	{r7, pc}

00008a58 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    8a58:	b5b0      	push	{r4, r5, r7, lr}
    8a5a:	b0b2      	sub	sp, #200	; 0xc8
    8a5c:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    8a5e:	7801      	ldrb	r1, [r0, #0]
    8a60:	07ca      	lsls	r2, r1, #31
    8a62:	2a00      	cmp	r2, #0
    8a64:	900e      	str	r0, [sp, #56]	; 0x38
    8a66:	d005      	beq.n	8a74 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    8a68:	e7ff      	b.n	8a6a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    8a6a:	980e      	ldr	r0, [sp, #56]	; 0x38
    8a6c:	6841      	ldr	r1, [r0, #4]
    8a6e:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    8a70:	e096      	b.n	8ba0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    8a72:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    8a74:	980e      	ldr	r0, [sp, #56]	; 0x38
    8a76:	6841      	ldr	r1, [r0, #4]
    8a78:	6882      	ldr	r2, [r0, #8]
    8a7a:	912b      	str	r1, [sp, #172]	; 0xac
    8a7c:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8a7e:	4608      	mov	r0, r1
    8a80:	4611      	mov	r1, r2
    8a82:	f000 faba 	bl	8ffa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    8a86:	9011      	str	r0, [sp, #68]	; 0x44
    8a88:	e7ff      	b.n	8a8a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    8a8a:	f64b 4078 	movw	r0, #48248	; 0xbc78
    8a8e:	f2c0 0001 	movt	r0, #1
    8a92:	6800      	ldr	r0, [r0, #0]
    8a94:	a911      	add	r1, sp, #68	; 0x44
    8a96:	910f      	str	r1, [sp, #60]	; 0x3c
    8a98:	9010      	str	r0, [sp, #64]	; 0x40
    8a9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8a9c:	902d      	str	r0, [sp, #180]	; 0xb4
    8a9e:	9910      	ldr	r1, [sp, #64]	; 0x40
    8aa0:	912e      	str	r1, [sp, #184]	; 0xb8
    8aa2:	900d      	str	r0, [sp, #52]	; 0x34
    8aa4:	910c      	str	r1, [sp, #48]	; 0x30
    8aa6:	f000 fc46 	bl	9336 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    8aaa:	900b      	str	r0, [sp, #44]	; 0x2c
    8aac:	e7ff      	b.n	8aae <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    8aae:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8ab0:	07c1      	lsls	r1, r0, #31
    8ab2:	2900      	cmp	r1, #0
    8ab4:	d001      	beq.n	8aba <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    8ab6:	e7ff      	b.n	8ab8 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    8ab8:	e072      	b.n	8ba0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8aba:	f64b 40d0 	movw	r0, #48336	; 0xbcd0
    8abe:	f2c0 0001 	movt	r0, #1
    8ac2:	6801      	ldr	r1, [r0, #0]
    8ac4:	980d      	ldr	r0, [sp, #52]	; 0x34
    8ac6:	9021      	str	r0, [sp, #132]	; 0x84
    8ac8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    8aca:	9222      	str	r2, [sp, #136]	; 0x88
    8acc:	f64b 43e4 	movw	r3, #48356	; 0xbce4
    8ad0:	f2c0 0301 	movt	r3, #1
    8ad4:	681b      	ldr	r3, [r3, #0]
    8ad6:	f64b 4ce8 	movw	ip, #48360	; 0xbce8
    8ada:	f2c0 0c01 	movt	ip, #1
    8ade:	f8dc c000 	ldr.w	ip, [ip]
    8ae2:	46ee      	mov	lr, sp
    8ae4:	2400      	movs	r4, #0
    8ae6:	f8ce 4000 	str.w	r4, [lr]
    8aea:	a823      	add	r0, sp, #140	; 0x8c
    8aec:	2201      	movs	r2, #1
    8aee:	910a      	str	r1, [sp, #40]	; 0x28
    8af0:	4619      	mov	r1, r3
    8af2:	4663      	mov	r3, ip
    8af4:	f000 f856 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8af8:	e7ff      	b.n	8afa <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    8afa:	a821      	add	r0, sp, #132	; 0x84
    8afc:	901e      	str	r0, [sp, #120]	; 0x78
    8afe:	a822      	add	r0, sp, #136	; 0x88
    8b00:	901f      	str	r0, [sp, #124]	; 0x7c
    8b02:	a823      	add	r0, sp, #140	; 0x8c
    8b04:	9020      	str	r0, [sp, #128]	; 0x80
    8b06:	981e      	ldr	r0, [sp, #120]	; 0x78
    8b08:	902f      	str	r0, [sp, #188]	; 0xbc
    8b0a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8b0c:	9130      	str	r1, [sp, #192]	; 0xc0
    8b0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8b10:	9231      	str	r2, [sp, #196]	; 0xc4
    8b12:	f249 13ef 	movw	r3, #37359	; 0x91ef
    8b16:	f2c0 0300 	movt	r3, #0
    8b1a:	9109      	str	r1, [sp, #36]	; 0x24
    8b1c:	4619      	mov	r1, r3
    8b1e:	9208      	str	r2, [sp, #32]
    8b20:	f000 fcb4 	bl	948c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8b24:	9007      	str	r0, [sp, #28]
    8b26:	9106      	str	r1, [sp, #24]
    8b28:	e7ff      	b.n	8b2a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    8b2a:	f249 11ef 	movw	r1, #37359	; 0x91ef
    8b2e:	f2c0 0100 	movt	r1, #0
    8b32:	9809      	ldr	r0, [sp, #36]	; 0x24
    8b34:	f000 fcaa 	bl	948c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8b38:	9005      	str	r0, [sp, #20]
    8b3a:	9104      	str	r1, [sp, #16]
    8b3c:	e7ff      	b.n	8b3e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    8b3e:	f645 21a7 	movw	r1, #23207	; 0x5aa7
    8b42:	f2c0 0101 	movt	r1, #1
    8b46:	9808      	ldr	r0, [sp, #32]
    8b48:	f000 fcca 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8b4c:	9003      	str	r0, [sp, #12]
    8b4e:	9102      	str	r1, [sp, #8]
    8b50:	e7ff      	b.n	8b52 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    8b52:	9807      	ldr	r0, [sp, #28]
    8b54:	9018      	str	r0, [sp, #96]	; 0x60
    8b56:	9906      	ldr	r1, [sp, #24]
    8b58:	9119      	str	r1, [sp, #100]	; 0x64
    8b5a:	9a05      	ldr	r2, [sp, #20]
    8b5c:	921a      	str	r2, [sp, #104]	; 0x68
    8b5e:	9b04      	ldr	r3, [sp, #16]
    8b60:	931b      	str	r3, [sp, #108]	; 0x6c
    8b62:	f8dd c00c 	ldr.w	ip, [sp, #12]
    8b66:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    8b6a:	f8dd e008 	ldr.w	lr, [sp, #8]
    8b6e:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    8b72:	466c      	mov	r4, sp
    8b74:	2503      	movs	r5, #3
    8b76:	6025      	str	r5, [r4, #0]
    8b78:	a812      	add	r0, sp, #72	; 0x48
    8b7a:	ab18      	add	r3, sp, #96	; 0x60
    8b7c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8b7e:	462a      	mov	r2, r5
    8b80:	f000 f810 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8b84:	e7ff      	b.n	8b86 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    8b86:	f64b 5004 	movw	r0, #48388	; 0xbd04
    8b8a:	f2c0 0001 	movt	r0, #1
    8b8e:	f00c fc9c 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8b92:	9001      	str	r0, [sp, #4]
    8b94:	e7ff      	b.n	8b96 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    8b96:	a812      	add	r0, sp, #72	; 0x48
    8b98:	9901      	ldr	r1, [sp, #4]
    8b9a:	f00c fcd3 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8b9e:	defe      	udf	#254	; 0xfe
    }
    8ba0:	b032      	add	sp, #200	; 0xc8
    8ba2:	bdb0      	pop	{r4, r5, r7, pc}

00008ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    8ba4:	b580      	push	{r7, lr}
    8ba6:	b086      	sub	sp, #24
    8ba8:	f8dd c020 	ldr.w	ip, [sp, #32]
    8bac:	9102      	str	r1, [sp, #8]
    8bae:	9203      	str	r2, [sp, #12]
    8bb0:	9304      	str	r3, [sp, #16]
    8bb2:	f8cd c014 	str.w	ip, [sp, #20]
    8bb6:	f04f 0e00 	mov.w	lr, #0
    8bba:	f8cd e004 	str.w	lr, [sp, #4]
    8bbe:	f8cd e000 	str.w	lr, [sp]
    8bc2:	f8cd e000 	str.w	lr, [sp]
    8bc6:	6001      	str	r1, [r0, #0]
    8bc8:	6042      	str	r2, [r0, #4]
    8bca:	9900      	ldr	r1, [sp, #0]
    8bcc:	9a01      	ldr	r2, [sp, #4]
    8bce:	6081      	str	r1, [r0, #8]
    8bd0:	60c2      	str	r2, [r0, #12]
    8bd2:	6103      	str	r3, [r0, #16]
    8bd4:	f8c0 c014 	str.w	ip, [r0, #20]
    8bd8:	b006      	add	sp, #24
    8bda:	bd80      	pop	{r7, pc}

00008bdc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    8bdc:	b082      	sub	sp, #8
    8bde:	9001      	str	r0, [sp, #4]
    8be0:	7800      	ldrb	r0, [r0, #0]
    8be2:	07c0      	lsls	r0, r0, #31
    8be4:	2800      	cmp	r0, #0
    8be6:	d004      	beq.n	8bf2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    8be8:	e7ff      	b.n	8bea <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    8bea:	2000      	movs	r0, #0
    8bec:	f88d 0003 	strb.w	r0, [sp, #3]
    8bf0:	e003      	b.n	8bfa <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8bf2:	2001      	movs	r0, #1
    8bf4:	f88d 0003 	strb.w	r0, [sp, #3]
    8bf8:	e7ff      	b.n	8bfa <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8bfa:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8bfe:	b002      	add	sp, #8
    8c00:	4770      	bx	lr

00008c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    8c02:	b08a      	sub	sp, #40	; 0x28
    8c04:	9005      	str	r0, [sp, #20]
    8c06:	9107      	str	r1, [sp, #28]
    8c08:	9208      	str	r2, [sp, #32]
    8c0a:	9805      	ldr	r0, [sp, #20]
    8c0c:	f1b0 0c01 	subs.w	ip, r0, #1
    8c10:	bf18      	it	ne
    8c12:	f04f 0c01 	movne.w	ip, #1
    8c16:	2801      	cmp	r0, #1
    8c18:	9304      	str	r3, [sp, #16]
    8c1a:	9203      	str	r2, [sp, #12]
    8c1c:	9102      	str	r1, [sp, #8]
    8c1e:	d010      	beq.n	8c42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    8c20:	e7ff      	b.n	8c22 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    8c22:	9805      	ldr	r0, [sp, #20]
    8c24:	9006      	str	r0, [sp, #24]
    8c26:	4668      	mov	r0, sp
    8c28:	9904      	ldr	r1, [sp, #16]
    8c2a:	6001      	str	r1, [r0, #0]
    8c2c:	f64b 5314 	movw	r3, #48404	; 0xbd14
    8c30:	f2c0 0301 	movt	r3, #1
    8c34:	aa06      	add	r2, sp, #24
    8c36:	9802      	ldr	r0, [sp, #8]
    8c38:	9903      	ldr	r1, [sp, #12]
    8c3a:	f00c fc1f 	bl	1547c <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    8c3e:	defe      	udf	#254	; 0xfe
    8c40:	defe      	udf	#254	; 0xfe
    8c42:	9805      	ldr	r0, [sp, #20]
    8c44:	2801      	cmp	r0, #1
    8c46:	d102      	bne.n	8c4e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    8c48:	e7ff      	b.n	8c4a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    8c4a:	b00a      	add	sp, #40	; 0x28
    8c4c:	4770      	bx	lr
    8c4e:	e7fc      	b.n	8c4a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

00008c50 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    8c50:	b580      	push	{r7, lr}
    8c52:	b082      	sub	sp, #8
    8c54:	9001      	str	r0, [sp, #4]
    8c56:	f7ff ffc1 	bl	8bdc <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    8c5a:	9000      	str	r0, [sp, #0]
    8c5c:	e7ff      	b.n	8c5e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    8c5e:	2001      	movs	r0, #1
    8c60:	9900      	ldr	r1, [sp, #0]
    8c62:	4388      	bics	r0, r1
    8c64:	b002      	add	sp, #8
    8c66:	bd80      	pop	{r7, pc}

00008c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    8c68:	b082      	sub	sp, #8
    8c6a:	9001      	str	r0, [sp, #4]
    8c6c:	9000      	str	r0, [sp, #0]
    8c6e:	9800      	ldr	r0, [sp, #0]
    8c70:	b002      	add	sp, #8
    8c72:	4770      	bx	lr

00008c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    8c74:	b081      	sub	sp, #4
    8c76:	4601      	mov	r1, r0
    8c78:	f88d 0003 	strb.w	r0, [sp, #3]
    8c7c:	b001      	add	sp, #4
    8c7e:	4770      	bx	lr

00008c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    8c80:	b081      	sub	sp, #4
    8c82:	9000      	str	r0, [sp, #0]
    8c84:	b001      	add	sp, #4
    8c86:	4770      	bx	lr

00008c88 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    8c88:	b580      	push	{r7, lr}
    8c8a:	b08a      	sub	sp, #40	; 0x28
    8c8c:	9007      	str	r0, [sp, #28]
    8c8e:	9108      	str	r1, [sp, #32]
    8c90:	9209      	str	r2, [sp, #36]	; 0x24
    8c92:	2300      	movs	r3, #0
    8c94:	9305      	str	r3, [sp, #20]
    8c96:	9006      	str	r0, [sp, #24]
    8c98:	9805      	ldr	r0, [sp, #20]
    8c9a:	9b06      	ldr	r3, [sp, #24]
    8c9c:	9104      	str	r1, [sp, #16]
    8c9e:	4619      	mov	r1, r3
    8ca0:	9b04      	ldr	r3, [sp, #16]
    8ca2:	9203      	str	r2, [sp, #12]
    8ca4:	461a      	mov	r2, r3
    8ca6:	9b03      	ldr	r3, [sp, #12]
    8ca8:	f000 f828 	bl	8cfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    8cac:	9002      	str	r0, [sp, #8]
    8cae:	9101      	str	r1, [sp, #4]
    8cb0:	e7ff      	b.n	8cb2 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    8cb2:	9802      	ldr	r0, [sp, #8]
    8cb4:	9901      	ldr	r1, [sp, #4]
    8cb6:	b00a      	add	sp, #40	; 0x28
    8cb8:	bd80      	pop	{r7, pc}

00008cba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    8cba:	b580      	push	{r7, lr}
    8cbc:	b08a      	sub	sp, #40	; 0x28
    8cbe:	9006      	str	r0, [sp, #24]
    8cc0:	9107      	str	r1, [sp, #28]
    8cc2:	9208      	str	r2, [sp, #32]
    8cc4:	9309      	str	r3, [sp, #36]	; 0x24
    8cc6:	9005      	str	r0, [sp, #20]
    8cc8:	4610      	mov	r0, r2
    8cca:	9104      	str	r1, [sp, #16]
    8ccc:	4619      	mov	r1, r3
    8cce:	f008 ff4d 	bl	11b6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8cd2:	9003      	str	r0, [sp, #12]
    8cd4:	e7ff      	b.n	8cd6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    8cd6:	9803      	ldr	r0, [sp, #12]
    8cd8:	9905      	ldr	r1, [sp, #20]
    8cda:	f008 fece 	bl	11a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    8cde:	9002      	str	r0, [sp, #8]
    8ce0:	e7ff      	b.n	8ce2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    8ce2:	9804      	ldr	r0, [sp, #16]
    8ce4:	9905      	ldr	r1, [sp, #20]
    8ce6:	1a41      	subs	r1, r0, r1
    8ce8:	9802      	ldr	r0, [sp, #8]
    8cea:	f000 f8b7 	bl	8e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    8cee:	9001      	str	r0, [sp, #4]
    8cf0:	9100      	str	r1, [sp, #0]
    8cf2:	e7ff      	b.n	8cf4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    8cf4:	9801      	ldr	r0, [sp, #4]
    8cf6:	9900      	ldr	r1, [sp, #0]
    8cf8:	b00a      	add	sp, #40	; 0x28
    8cfa:	bd80      	pop	{r7, pc}

00008cfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    8cfc:	b580      	push	{r7, lr}
    8cfe:	b08c      	sub	sp, #48	; 0x30
    8d00:	9008      	str	r0, [sp, #32]
    8d02:	9109      	str	r1, [sp, #36]	; 0x24
    8d04:	920a      	str	r2, [sp, #40]	; 0x28
    8d06:	930b      	str	r3, [sp, #44]	; 0x2c
    8d08:	4288      	cmp	r0, r1
    8d0a:	9307      	str	r3, [sp, #28]
    8d0c:	9206      	str	r2, [sp, #24]
    8d0e:	9105      	str	r1, [sp, #20]
    8d10:	9004      	str	r0, [sp, #16]
    8d12:	d806      	bhi.n	8d22 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    8d14:	e7ff      	b.n	8d16 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    8d16:	9806      	ldr	r0, [sp, #24]
    8d18:	9907      	ldr	r1, [sp, #28]
    8d1a:	f008 ff3e 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d1e:	9003      	str	r0, [sp, #12]
    8d20:	e004      	b.n	8d2c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    8d22:	9804      	ldr	r0, [sp, #16]
    8d24:	9905      	ldr	r1, [sp, #20]
    8d26:	f00d fb4c 	bl	163c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    8d2a:	defe      	udf	#254	; 0xfe
    8d2c:	9805      	ldr	r0, [sp, #20]
    8d2e:	9903      	ldr	r1, [sp, #12]
    8d30:	4288      	cmp	r0, r1
    8d32:	d809      	bhi.n	8d48 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    8d34:	e7ff      	b.n	8d36 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    8d36:	9804      	ldr	r0, [sp, #16]
    8d38:	9905      	ldr	r1, [sp, #20]
    8d3a:	9a06      	ldr	r2, [sp, #24]
    8d3c:	9b07      	ldr	r3, [sp, #28]
    8d3e:	f7ff ffbc 	bl	8cba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    8d42:	9002      	str	r0, [sp, #8]
    8d44:	9101      	str	r1, [sp, #4]
    8d46:	e00a      	b.n	8d5e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    8d48:	9806      	ldr	r0, [sp, #24]
    8d4a:	9907      	ldr	r1, [sp, #28]
    8d4c:	f008 ff25 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d50:	9000      	str	r0, [sp, #0]
    8d52:	e7ff      	b.n	8d54 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    8d54:	9805      	ldr	r0, [sp, #20]
    8d56:	9900      	ldr	r1, [sp, #0]
    8d58:	f00d fb11 	bl	1637e <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    8d5c:	defe      	udf	#254	; 0xfe
    8d5e:	9802      	ldr	r0, [sp, #8]
    8d60:	9901      	ldr	r1, [sp, #4]
    8d62:	b00c      	add	sp, #48	; 0x30
    8d64:	bd80      	pop	{r7, pc}

00008d66 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8d66:	b580      	push	{r7, lr}
    8d68:	b082      	sub	sp, #8
    8d6a:	9001      	str	r0, [sp, #4]
    8d6c:	f00f fdc6 	bl	188fc <os_eventq_run>
    8d70:	e7ff      	b.n	8d72 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    8d72:	2001      	movs	r0, #1
    8d74:	b002      	add	sp, #8
    8d76:	bd80      	pop	{r7, pc}

00008d78 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8d78:	b580      	push	{r7, lr}
    8d7a:	b084      	sub	sp, #16
    8d7c:	9002      	str	r0, [sp, #8]
    8d7e:	f00f fde9 	bl	18954 <os_eventq_dflt_get>
    8d82:	4601      	mov	r1, r0
    8d84:	9003      	str	r0, [sp, #12]
    8d86:	9101      	str	r1, [sp, #4]
    8d88:	e7ff      	b.n	8d8a <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    8d8a:	9801      	ldr	r0, [sp, #4]
    8d8c:	9902      	ldr	r1, [sp, #8]
    8d8e:	6048      	str	r0, [r1, #4]
    8d90:	2200      	movs	r2, #0
    8d92:	600a      	str	r2, [r1, #0]
    8d94:	b004      	add	sp, #16
    8d96:	bd80      	pop	{r7, pc}

00008d98 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8d98:	b570      	push	{r4, r5, r6, lr}
    8d9a:	b09c      	sub	sp, #112	; 0x70
    8d9c:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    8da0:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    8da4:	9c22      	ldr	r4, [sp, #136]	; 0x88
    8da6:	9d21      	ldr	r5, [sp, #132]	; 0x84
    8da8:	9e20      	ldr	r6, [sp, #128]	; 0x80
    8daa:	9013      	str	r0, [sp, #76]	; 0x4c
    8dac:	9114      	str	r1, [sp, #80]	; 0x50
    8dae:	9215      	str	r2, [sp, #84]	; 0x54
    8db0:	9316      	str	r3, [sp, #88]	; 0x58
    8db2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    8db6:	9418      	str	r4, [sp, #96]	; 0x60
    8db8:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    8dbc:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    8dc0:	9011      	str	r0, [sp, #68]	; 0x44
    8dc2:	4608      	mov	r0, r1
    8dc4:	9310      	str	r3, [sp, #64]	; 0x40
    8dc6:	920f      	str	r2, [sp, #60]	; 0x3c
    8dc8:	910e      	str	r1, [sp, #56]	; 0x38
    8dca:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8dce:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    8dd2:	940b      	str	r4, [sp, #44]	; 0x2c
    8dd4:	950a      	str	r5, [sp, #40]	; 0x28
    8dd6:	9609      	str	r6, [sp, #36]	; 0x24
    8dd8:	f7ff fe3e 	bl	8a58 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    8ddc:	e7ff      	b.n	8dde <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    8dde:	980e      	ldr	r0, [sp, #56]	; 0x38
    8de0:	f7ff fe1c 	bl	8a1c <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    8de4:	9008      	str	r0, [sp, #32]
    8de6:	e7ff      	b.n	8de8 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    8de8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8dea:	990c      	ldr	r1, [sp, #48]	; 0x30
    8dec:	f000 f93b 	bl	9066 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    8df0:	9007      	str	r0, [sp, #28]
    8df2:	e7ff      	b.n	8df4 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    8df4:	980d      	ldr	r0, [sp, #52]	; 0x34
    8df6:	b281      	uxth	r1, r0
    8df8:	466a      	mov	r2, sp
    8dfa:	60d1      	str	r1, [r2, #12]
    8dfc:	9907      	ldr	r1, [sp, #28]
    8dfe:	6091      	str	r1, [r2, #8]
    8e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8e02:	6053      	str	r3, [r2, #4]
    8e04:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    8e08:	fa5f fe8c 	uxtb.w	lr, ip
    8e0c:	f8c2 e000 	str.w	lr, [r2]
    8e10:	9811      	ldr	r0, [sp, #68]	; 0x44
    8e12:	9908      	ldr	r1, [sp, #32]
    8e14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8e16:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8e18:	f010 fb3c 	bl	19494 <os_task_init>
    8e1c:	4601      	mov	r1, r0
    8e1e:	901b      	str	r0, [sp, #108]	; 0x6c
    8e20:	9106      	str	r1, [sp, #24]
    8e22:	e7ff      	b.n	8e24 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    8e24:	9806      	ldr	r0, [sp, #24]
    8e26:	2800      	cmp	r0, #0
    8e28:	d005      	beq.n	8e36 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    8e2a:	e7ff      	b.n	8e2c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    8e2c:	9806      	ldr	r0, [sp, #24]
    8e2e:	f009 fae2 	bl	123f6 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    8e32:	9005      	str	r0, [sp, #20]
    8e34:	e004      	b.n	8e40 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    8e36:	2000      	movs	r0, #0
    8e38:	9012      	str	r0, [sp, #72]	; 0x48
    8e3a:	2001      	movs	r0, #1
    8e3c:	9012      	str	r0, [sp, #72]	; 0x48
    8e3e:	e002      	b.n	8e46 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8e40:	9805      	ldr	r0, [sp, #20]
    8e42:	9012      	str	r0, [sp, #72]	; 0x48
    8e44:	e7ff      	b.n	8e46 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8e46:	9812      	ldr	r0, [sp, #72]	; 0x48
    8e48:	b01c      	add	sp, #112	; 0x70
    8e4a:	bd70      	pop	{r4, r5, r6, pc}

00008e4c <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    8e4c:	b081      	sub	sp, #4
    8e4e:	9000      	str	r0, [sp, #0]
    8e50:	b001      	add	sp, #4
    8e52:	4770      	bx	lr

00008e54 <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    8e54:	b081      	sub	sp, #4
    8e56:	9000      	str	r0, [sp, #0]
    8e58:	b001      	add	sp, #4
    8e5a:	4770      	bx	lr

00008e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    8e5c:	b580      	push	{r7, lr}
    8e5e:	b084      	sub	sp, #16
    8e60:	9002      	str	r0, [sp, #8]
    8e62:	9103      	str	r1, [sp, #12]
    8e64:	f000 f993 	bl	918e <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    8e68:	9001      	str	r0, [sp, #4]
    8e6a:	9100      	str	r1, [sp, #0]
    8e6c:	e7ff      	b.n	8e6e <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    8e6e:	9801      	ldr	r0, [sp, #4]
    8e70:	9900      	ldr	r1, [sp, #0]
    8e72:	b004      	add	sp, #16
    8e74:	bd80      	pop	{r7, pc}

00008e76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    8e76:	b5b0      	push	{r4, r5, r7, lr}
    8e78:	b0b8      	sub	sp, #224	; 0xe0
    8e7a:	902f      	str	r0, [sp, #188]	; 0xbc
    8e7c:	9130      	str	r1, [sp, #192]	; 0xc0
    8e7e:	9231      	str	r2, [sp, #196]	; 0xc4
    8e80:	9332      	str	r3, [sp, #200]	; 0xc8
    8e82:	9013      	str	r0, [sp, #76]	; 0x4c
    8e84:	9112      	str	r1, [sp, #72]	; 0x48
    8e86:	9311      	str	r3, [sp, #68]	; 0x44
    8e88:	9210      	str	r2, [sp, #64]	; 0x40
    8e8a:	f008 fe86 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8e8e:	9016      	str	r0, [sp, #88]	; 0x58
    8e90:	e7ff      	b.n	8e92 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    8e92:	9810      	ldr	r0, [sp, #64]	; 0x40
    8e94:	9911      	ldr	r1, [sp, #68]	; 0x44
    8e96:	f008 fe80 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8e9a:	9017      	str	r0, [sp, #92]	; 0x5c
    8e9c:	e7ff      	b.n	8e9e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    8e9e:	a816      	add	r0, sp, #88	; 0x58
    8ea0:	9014      	str	r0, [sp, #80]	; 0x50
    8ea2:	a817      	add	r0, sp, #92	; 0x5c
    8ea4:	9015      	str	r0, [sp, #84]	; 0x54
    8ea6:	9814      	ldr	r0, [sp, #80]	; 0x50
    8ea8:	9033      	str	r0, [sp, #204]	; 0xcc
    8eaa:	9915      	ldr	r1, [sp, #84]	; 0x54
    8eac:	9134      	str	r1, [sp, #208]	; 0xd0
    8eae:	6802      	ldr	r2, [r0, #0]
    8eb0:	680b      	ldr	r3, [r1, #0]
    8eb2:	429a      	cmp	r2, r3
    8eb4:	900f      	str	r0, [sp, #60]	; 0x3c
    8eb6:	910e      	str	r1, [sp, #56]	; 0x38
    8eb8:	d106      	bne.n	8ec8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    8eba:	e7ff      	b.n	8ebc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    8ebc:	9810      	ldr	r0, [sp, #64]	; 0x40
    8ebe:	9911      	ldr	r1, [sp, #68]	; 0x44
    8ec0:	f008 fe73 	bl	11baa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8ec4:	900d      	str	r0, [sp, #52]	; 0x34
    8ec6:	e072      	b.n	8fae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    8ec8:	f64b 5078 	movw	r0, #48504	; 0xbd78
    8ecc:	f2c0 0001 	movt	r0, #1
    8ed0:	6801      	ldr	r1, [r0, #0]
    8ed2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8ed4:	9027      	str	r0, [sp, #156]	; 0x9c
    8ed6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8ed8:	9228      	str	r2, [sp, #160]	; 0xa0
    8eda:	f64b 53b8 	movw	r3, #48568	; 0xbdb8
    8ede:	f2c0 0301 	movt	r3, #1
    8ee2:	681b      	ldr	r3, [r3, #0]
    8ee4:	f64b 5cbc 	movw	ip, #48572	; 0xbdbc
    8ee8:	f2c0 0c01 	movt	ip, #1
    8eec:	f8dc c000 	ldr.w	ip, [ip]
    8ef0:	46ee      	mov	lr, sp
    8ef2:	2400      	movs	r4, #0
    8ef4:	f8ce 4000 	str.w	r4, [lr]
    8ef8:	a829      	add	r0, sp, #164	; 0xa4
    8efa:	2201      	movs	r2, #1
    8efc:	910c      	str	r1, [sp, #48]	; 0x30
    8efe:	4619      	mov	r1, r3
    8f00:	4663      	mov	r3, ip
    8f02:	f7ff fe4f 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8f06:	e7ff      	b.n	8f08 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    8f08:	a827      	add	r0, sp, #156	; 0x9c
    8f0a:	9024      	str	r0, [sp, #144]	; 0x90
    8f0c:	a828      	add	r0, sp, #160	; 0xa0
    8f0e:	9025      	str	r0, [sp, #148]	; 0x94
    8f10:	a829      	add	r0, sp, #164	; 0xa4
    8f12:	9026      	str	r0, [sp, #152]	; 0x98
    8f14:	9824      	ldr	r0, [sp, #144]	; 0x90
    8f16:	9035      	str	r0, [sp, #212]	; 0xd4
    8f18:	9925      	ldr	r1, [sp, #148]	; 0x94
    8f1a:	9136      	str	r1, [sp, #216]	; 0xd8
    8f1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8f1e:	9237      	str	r2, [sp, #220]	; 0xdc
    8f20:	f242 23c9 	movw	r3, #8905	; 0x22c9
    8f24:	f2c0 0301 	movt	r3, #1
    8f28:	910b      	str	r1, [sp, #44]	; 0x2c
    8f2a:	4619      	mov	r1, r3
    8f2c:	920a      	str	r2, [sp, #40]	; 0x28
    8f2e:	f009 f9d9 	bl	122e4 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8f32:	9009      	str	r0, [sp, #36]	; 0x24
    8f34:	9108      	str	r1, [sp, #32]
    8f36:	e7ff      	b.n	8f38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    8f38:	f242 21c9 	movw	r1, #8905	; 0x22c9
    8f3c:	f2c0 0101 	movt	r1, #1
    8f40:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8f42:	f009 f9cf 	bl	122e4 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8f46:	9007      	str	r0, [sp, #28]
    8f48:	9106      	str	r1, [sp, #24]
    8f4a:	e7ff      	b.n	8f4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    8f4c:	f645 21a7 	movw	r1, #23207	; 0x5aa7
    8f50:	f2c0 0101 	movt	r1, #1
    8f54:	980a      	ldr	r0, [sp, #40]	; 0x28
    8f56:	f000 fac3 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8f5a:	9005      	str	r0, [sp, #20]
    8f5c:	9104      	str	r1, [sp, #16]
    8f5e:	e7ff      	b.n	8f60 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    8f60:	9809      	ldr	r0, [sp, #36]	; 0x24
    8f62:	901e      	str	r0, [sp, #120]	; 0x78
    8f64:	9908      	ldr	r1, [sp, #32]
    8f66:	911f      	str	r1, [sp, #124]	; 0x7c
    8f68:	9a07      	ldr	r2, [sp, #28]
    8f6a:	9220      	str	r2, [sp, #128]	; 0x80
    8f6c:	9b06      	ldr	r3, [sp, #24]
    8f6e:	9321      	str	r3, [sp, #132]	; 0x84
    8f70:	f8dd c014 	ldr.w	ip, [sp, #20]
    8f74:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    8f78:	f8dd e010 	ldr.w	lr, [sp, #16]
    8f7c:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    8f80:	466c      	mov	r4, sp
    8f82:	2503      	movs	r5, #3
    8f84:	6025      	str	r5, [r4, #0]
    8f86:	a818      	add	r0, sp, #96	; 0x60
    8f88:	ab1e      	add	r3, sp, #120	; 0x78
    8f8a:	990c      	ldr	r1, [sp, #48]	; 0x30
    8f8c:	462a      	mov	r2, r5
    8f8e:	f7ff fe09 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8f92:	e7ff      	b.n	8f94 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    8f94:	f64b 600c 	movw	r0, #48652	; 0xbe0c
    8f98:	f2c0 0001 	movt	r0, #1
    8f9c:	f00c fa95 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8fa0:	9003      	str	r0, [sp, #12]
    8fa2:	e7ff      	b.n	8fa4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    8fa4:	a818      	add	r0, sp, #96	; 0x60
    8fa6:	9903      	ldr	r1, [sp, #12]
    8fa8:	f00c facc 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8fac:	defe      	udf	#254	; 0xfe
    8fae:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8fb0:	9912      	ldr	r1, [sp, #72]	; 0x48
    8fb2:	f008 fddb 	bl	11b6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8fb6:	9002      	str	r0, [sp, #8]
    8fb8:	e7ff      	b.n	8fba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    8fba:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8fbc:	9912      	ldr	r1, [sp, #72]	; 0x48
    8fbe:	f008 fdec 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8fc2:	9001      	str	r0, [sp, #4]
    8fc4:	e7ff      	b.n	8fc6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    8fc6:	980d      	ldr	r0, [sp, #52]	; 0x34
    8fc8:	9902      	ldr	r1, [sp, #8]
    8fca:	9a01      	ldr	r2, [sp, #4]
    8fcc:	f008 fbf1 	bl	117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    8fd0:	e7ff      	b.n	8fd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    8fd2:	b038      	add	sp, #224	; 0xe0
    8fd4:	bdb0      	pop	{r4, r5, r7, pc}

00008fd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    8fd6:	b580      	push	{r7, lr}
    8fd8:	b086      	sub	sp, #24
    8fda:	9003      	str	r0, [sp, #12]
    8fdc:	9104      	str	r1, [sp, #16]
    8fde:	9205      	str	r2, [sp, #20]
    8fe0:	9002      	str	r0, [sp, #8]
    8fe2:	4610      	mov	r0, r2
    8fe4:	9a02      	ldr	r2, [sp, #8]
    8fe6:	9101      	str	r1, [sp, #4]
    8fe8:	4611      	mov	r1, r2
    8fea:	9a01      	ldr	r2, [sp, #4]
    8fec:	f000 f861 	bl	90b2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    8ff0:	9000      	str	r0, [sp, #0]
    8ff2:	e7ff      	b.n	8ff4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    8ff4:	9800      	ldr	r0, [sp, #0]
    8ff6:	b006      	add	sp, #24
    8ff8:	bd80      	pop	{r7, pc}

00008ffa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    8ffa:	b580      	push	{r7, lr}
    8ffc:	b08e      	sub	sp, #56	; 0x38
    8ffe:	9009      	str	r0, [sp, #36]	; 0x24
    9000:	910a      	str	r1, [sp, #40]	; 0x28
    9002:	9005      	str	r0, [sp, #20]
    9004:	9104      	str	r1, [sp, #16]
    9006:	f008 fdc8 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    900a:	9003      	str	r0, [sp, #12]
    900c:	e7ff      	b.n	900e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    900e:	2101      	movs	r1, #1
    9010:	9803      	ldr	r0, [sp, #12]
    9012:	f000 fa7a 	bl	950a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    9016:	9002      	str	r0, [sp, #8]
    9018:	9101      	str	r1, [sp, #4]
    901a:	e7ff      	b.n	901c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    901c:	9802      	ldr	r0, [sp, #8]
    901e:	9901      	ldr	r1, [sp, #4]
    9020:	f000 f97c 	bl	931c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    9024:	9108      	str	r1, [sp, #32]
    9026:	9007      	str	r0, [sp, #28]
    9028:	e7ff      	b.n	902a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    902a:	9807      	ldr	r0, [sp, #28]
    902c:	2800      	cmp	r0, #0
    902e:	d001      	beq.n	9034 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    9030:	e7ff      	b.n	9032 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    9032:	e00c      	b.n	904e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    9034:	9808      	ldr	r0, [sp, #32]
    9036:	900c      	str	r0, [sp, #48]	; 0x30
    9038:	900d      	str	r0, [sp, #52]	; 0x34
    903a:	9905      	ldr	r1, [sp, #20]
    903c:	9000      	str	r0, [sp, #0]
    903e:	4608      	mov	r0, r1
    9040:	9904      	ldr	r1, [sp, #16]
    9042:	9a00      	ldr	r2, [sp, #0]
    9044:	f7ff ffc7 	bl	8fd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    9048:	9006      	str	r0, [sp, #24]
    904a:	e00b      	b.n	9064 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    904c:	defe      	udf	#254	; 0xfe
    904e:	f008 fa9c 	bl	1158a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    9052:	e002      	b.n	905a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    9054:	9806      	ldr	r0, [sp, #24]
    9056:	b00e      	add	sp, #56	; 0x38
    9058:	bd80      	pop	{r7, pc}
    905a:	f000 f959 	bl	9310 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    905e:	9006      	str	r0, [sp, #24]
    9060:	e7ff      	b.n	9062 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    9062:	e7f7      	b.n	9054 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    9064:	e7f6      	b.n	9054 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

00009066 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    9066:	b082      	sub	sp, #8
    9068:	9000      	str	r0, [sp, #0]
    906a:	9101      	str	r1, [sp, #4]
    906c:	b002      	add	sp, #8
    906e:	4770      	bx	lr

00009070 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    9070:	b580      	push	{r7, lr}
    9072:	b088      	sub	sp, #32
    9074:	9005      	str	r0, [sp, #20]
    9076:	9106      	str	r1, [sp, #24]
    9078:	9207      	str	r2, [sp, #28]
    907a:	9004      	str	r0, [sp, #16]
    907c:	4610      	mov	r0, r2
    907e:	9a04      	ldr	r2, [sp, #16]
    9080:	9103      	str	r1, [sp, #12]
    9082:	4611      	mov	r1, r2
    9084:	9a03      	ldr	r2, [sp, #12]
    9086:	f7ff fdff 	bl	8c88 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    908a:	9002      	str	r0, [sp, #8]
    908c:	9101      	str	r1, [sp, #4]
    908e:	e7ff      	b.n	9090 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    9090:	9802      	ldr	r0, [sp, #8]
    9092:	9901      	ldr	r1, [sp, #4]
    9094:	b008      	add	sp, #32
    9096:	bd80      	pop	{r7, pc}

00009098 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    9098:	b580      	push	{r7, lr}
    909a:	b084      	sub	sp, #16
    909c:	9002      	str	r0, [sp, #8]
    909e:	9103      	str	r1, [sp, #12]
    90a0:	f008 fa30 	bl	11504 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    90a4:	9001      	str	r0, [sp, #4]
    90a6:	9100      	str	r1, [sp, #0]
    90a8:	e7ff      	b.n	90aa <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    90aa:	9801      	ldr	r0, [sp, #4]
    90ac:	9900      	ldr	r1, [sp, #0]
    90ae:	b004      	add	sp, #16
    90b0:	bd80      	pop	{r7, pc}

000090b2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    90b2:	b580      	push	{r7, lr}
    90b4:	b08a      	sub	sp, #40	; 0x28
    90b6:	9007      	str	r0, [sp, #28]
    90b8:	9108      	str	r1, [sp, #32]
    90ba:	9209      	str	r2, [sp, #36]	; 0x24
    90bc:	9005      	str	r0, [sp, #20]
    90be:	4608      	mov	r0, r1
    90c0:	9104      	str	r1, [sp, #16]
    90c2:	4611      	mov	r1, r2
    90c4:	9203      	str	r2, [sp, #12]
    90c6:	f008 fd68 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    90ca:	9002      	str	r0, [sp, #8]
    90cc:	e7ff      	b.n	90ce <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    90ce:	9805      	ldr	r0, [sp, #20]
    90d0:	9902      	ldr	r1, [sp, #8]
    90d2:	4288      	cmp	r0, r1
    90d4:	d303      	bcc.n	90de <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    90d6:	e7ff      	b.n	90d8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    90d8:	2000      	movs	r0, #0
    90da:	9006      	str	r0, [sp, #24]
    90dc:	e009      	b.n	90f2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    90de:	9805      	ldr	r0, [sp, #20]
    90e0:	9904      	ldr	r1, [sp, #16]
    90e2:	9a03      	ldr	r2, [sp, #12]
    90e4:	f008 fd85 	bl	11bf2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    90e8:	9001      	str	r0, [sp, #4]
    90ea:	e7ff      	b.n	90ec <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    90ec:	9801      	ldr	r0, [sp, #4]
    90ee:	9006      	str	r0, [sp, #24]
    90f0:	e7ff      	b.n	90f2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    90f2:	9806      	ldr	r0, [sp, #24]
    90f4:	b00a      	add	sp, #40	; 0x28
    90f6:	bd80      	pop	{r7, pc}

000090f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    90f8:	b580      	push	{r7, lr}
    90fa:	b08a      	sub	sp, #40	; 0x28
    90fc:	9004      	str	r0, [sp, #16]
    90fe:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    9100:	9003      	str	r0, [sp, #12]
    9102:	9102      	str	r1, [sp, #8]
    9104:	f000 f86e 	bl	91e4 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9108:	4601      	mov	r1, r0
    910a:	9006      	str	r0, [sp, #24]
    910c:	9101      	str	r1, [sp, #4]
    910e:	e7ff      	b.n	9110 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    9110:	9803      	ldr	r0, [sp, #12]
    9112:	9902      	ldr	r1, [sp, #8]
    9114:	f000 f850 	bl	91b8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9118:	9000      	str	r0, [sp, #0]
    911a:	e7ff      	b.n	911c <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    911c:	9800      	ldr	r0, [sp, #0]
    911e:	9007      	str	r0, [sp, #28]
    9120:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    9122:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    9124:	4608      	mov	r0, r1
    9126:	f000 f809 	bl	913c <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    912a:	9009      	str	r0, [sp, #36]	; 0x24
    912c:	e7ff      	b.n	912e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    912e:	9801      	ldr	r0, [sp, #4]
    9130:	9900      	ldr	r1, [sp, #0]
    9132:	f00e f8a1 	bl	17278 <console_buffer>
    9136:	e7ff      	b.n	9138 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    9138:	b00a      	add	sp, #40	; 0x28
    913a:	bd80      	pop	{r7, pc}

0000913c <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    913c:	b081      	sub	sp, #4
    913e:	9000      	str	r0, [sp, #0]
    9140:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    9142:	b001      	add	sp, #4
    9144:	4770      	bx	lr

00009146 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    9146:	b580      	push	{r7, lr}
    9148:	b086      	sub	sp, #24
    914a:	9004      	str	r0, [sp, #16]
    914c:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    914e:	9003      	str	r0, [sp, #12]
    9150:	9102      	str	r1, [sp, #8]
    9152:	f000 f847 	bl	91e4 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    9156:	9001      	str	r0, [sp, #4]
    9158:	e7ff      	b.n	915a <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    915a:	9803      	ldr	r0, [sp, #12]
    915c:	9902      	ldr	r1, [sp, #8]
    915e:	f000 f82b 	bl	91b8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    9162:	9000      	str	r0, [sp, #0]
    9164:	e7ff      	b.n	9166 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    9166:	9801      	ldr	r0, [sp, #4]
    9168:	9900      	ldr	r1, [sp, #0]
    916a:	f00e f885 	bl	17278 <console_buffer>
    916e:	e7ff      	b.n	9170 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    9170:	b006      	add	sp, #24
    9172:	bd80      	pop	{r7, pc}

00009174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    9174:	b580      	push	{r7, lr}
    9176:	b082      	sub	sp, #8
    9178:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    917a:	f00e f8ed 	bl	17358 <console_printint>
    917e:	e7ff      	b.n	9180 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    9180:	b002      	add	sp, #8
    9182:	bd80      	pop	{r7, pc}

00009184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    9184:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    9186:	f00e f84f 	bl	17228 <console_flush>
    918a:	e7ff      	b.n	918c <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    918c:	bd80      	pop	{r7, pc}

0000918e <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    918e:	b086      	sub	sp, #24
    9190:	9004      	str	r0, [sp, #16]
    9192:	9105      	str	r1, [sp, #20]
    9194:	9002      	str	r0, [sp, #8]
    9196:	9103      	str	r1, [sp, #12]
    9198:	9802      	ldr	r0, [sp, #8]
    919a:	9903      	ldr	r1, [sp, #12]
    919c:	9000      	str	r0, [sp, #0]
    919e:	9101      	str	r1, [sp, #4]
    91a0:	9800      	ldr	r0, [sp, #0]
    91a2:	9901      	ldr	r1, [sp, #4]
    91a4:	b006      	add	sp, #24
    91a6:	4770      	bx	lr

000091a8 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    91a8:	b082      	sub	sp, #8
    91aa:	460a      	mov	r2, r1
    91ac:	9000      	str	r0, [sp, #0]
    91ae:	f88d 1007 	strb.w	r1, [sp, #7]
    91b2:	7001      	strb	r1, [r0, #0]
    91b4:	b002      	add	sp, #8
    91b6:	4770      	bx	lr

000091b8 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    91b8:	b580      	push	{r7, lr}
    91ba:	b08a      	sub	sp, #40	; 0x28
    91bc:	9004      	str	r0, [sp, #16]
    91be:	9105      	str	r1, [sp, #20]
    91c0:	9008      	str	r0, [sp, #32]
    91c2:	9109      	str	r1, [sp, #36]	; 0x24
    91c4:	9006      	str	r0, [sp, #24]
    91c6:	9107      	str	r1, [sp, #28]
    91c8:	9806      	ldr	r0, [sp, #24]
    91ca:	9907      	ldr	r1, [sp, #28]
    91cc:	9003      	str	r0, [sp, #12]
    91ce:	9102      	str	r1, [sp, #8]
    91d0:	e7ff      	b.n	91d2 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    91d2:	9803      	ldr	r0, [sp, #12]
    91d4:	9902      	ldr	r1, [sp, #8]
    91d6:	f008 fce0 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    91da:	9001      	str	r0, [sp, #4]
    91dc:	e7ff      	b.n	91de <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    91de:	9801      	ldr	r0, [sp, #4]
    91e0:	b00a      	add	sp, #40	; 0x28
    91e2:	bd80      	pop	{r7, pc}

000091e4 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    91e4:	b082      	sub	sp, #8
    91e6:	9000      	str	r0, [sp, #0]
    91e8:	9101      	str	r1, [sp, #4]
    91ea:	b002      	add	sp, #8
    91ec:	4770      	bx	lr

000091ee <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    91ee:	b580      	push	{r7, lr}
    91f0:	b084      	sub	sp, #16
    91f2:	9002      	str	r0, [sp, #8]
    91f4:	9103      	str	r1, [sp, #12]
    91f6:	6800      	ldr	r0, [r0, #0]
    91f8:	f000 f845 	bl	9286 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    91fc:	9001      	str	r0, [sp, #4]
    91fe:	e7ff      	b.n	9200 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    9200:	9801      	ldr	r0, [sp, #4]
    9202:	f000 0001 	and.w	r0, r0, #1
    9206:	b004      	add	sp, #16
    9208:	bd80      	pop	{r7, pc}

0000920a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    920a:	b087      	sub	sp, #28
    920c:	9000      	str	r0, [sp, #0]
    920e:	9101      	str	r1, [sp, #4]
    9210:	2000      	movs	r0, #0
    9212:	f88d 0013 	strb.w	r0, [sp, #19]
    9216:	f88d 0012 	strb.w	r0, [sp, #18]
    921a:	2001      	movs	r0, #1
    921c:	f88d 0013 	strb.w	r0, [sp, #19]
    9220:	f88d 0012 	strb.w	r0, [sp, #18]
    9224:	9800      	ldr	r0, [sp, #0]
    9226:	2800      	cmp	r0, #0
    9228:	d001      	beq.n	922e <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    922a:	e7ff      	b.n	922c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    922c:	e006      	b.n	923c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    922e:	2000      	movs	r0, #0
    9230:	f88d 0012 	strb.w	r0, [sp, #18]
    9234:	2001      	movs	r0, #1
    9236:	9002      	str	r0, [sp, #8]
    9238:	e008      	b.n	924c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    923a:	defe      	udf	#254	; 0xfe
    923c:	2000      	movs	r0, #0
    923e:	f88d 0013 	strb.w	r0, [sp, #19]
    9242:	9901      	ldr	r1, [sp, #4]
    9244:	9106      	str	r1, [sp, #24]
    9246:	9103      	str	r1, [sp, #12]
    9248:	9002      	str	r0, [sp, #8]
    924a:	e7ff      	b.n	924c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    924c:	f89d 0012 	ldrb.w	r0, [sp, #18]
    9250:	07c0      	lsls	r0, r0, #31
    9252:	2800      	cmp	r0, #0
    9254:	d104      	bne.n	9260 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    9256:	e7ff      	b.n	9258 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9258:	9800      	ldr	r0, [sp, #0]
    925a:	2801      	cmp	r0, #1
    925c:	d008      	beq.n	9270 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    925e:	e011      	b.n	9284 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    9260:	2000      	movs	r0, #0
    9262:	f88d 0012 	strb.w	r0, [sp, #18]
    9266:	e7f7      	b.n	9258 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    9268:	9802      	ldr	r0, [sp, #8]
    926a:	9903      	ldr	r1, [sp, #12]
    926c:	b007      	add	sp, #28
    926e:	4770      	bx	lr
    9270:	f89d 0013 	ldrb.w	r0, [sp, #19]
    9274:	07c0      	lsls	r0, r0, #31
    9276:	2800      	cmp	r0, #0
    9278:	d0f6      	beq.n	9268 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    927a:	e7ff      	b.n	927c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    927c:	2000      	movs	r0, #0
    927e:	f88d 0013 	strb.w	r0, [sp, #19]
    9282:	e7f1      	b.n	9268 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9284:	e7f0      	b.n	9268 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

00009286 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    9286:	b580      	push	{r7, lr}
    9288:	b08e      	sub	sp, #56	; 0x38
    928a:	900b      	str	r0, [sp, #44]	; 0x2c
    928c:	910c      	str	r1, [sp, #48]	; 0x30
    928e:	9003      	str	r0, [sp, #12]
    9290:	9803      	ldr	r0, [sp, #12]
    9292:	6800      	ldr	r0, [r0, #0]
    9294:	2800      	cmp	r0, #0
    9296:	4602      	mov	r2, r0
    9298:	bf18      	it	ne
    929a:	2201      	movne	r2, #1
    929c:	2800      	cmp	r0, #0
    929e:	9101      	str	r1, [sp, #4]
    92a0:	d00f      	beq.n	92c2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    92a2:	e7ff      	b.n	92a4 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    92a4:	9803      	ldr	r0, [sp, #12]
    92a6:	900d      	str	r0, [sp, #52]	; 0x34
    92a8:	f64b 621c 	movw	r2, #48668	; 0xbe1c
    92ac:	f2c0 0201 	movt	r2, #1
    92b0:	a907      	add	r1, sp, #28
    92b2:	2304      	movs	r3, #4
    92b4:	9000      	str	r0, [sp, #0]
    92b6:	4608      	mov	r0, r1
    92b8:	9901      	ldr	r1, [sp, #4]
    92ba:	f00c ffb6 	bl	1622a <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    92be:	e011      	b.n	92e4 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    92c0:	defe      	udf	#254	; 0xfe
    92c2:	f64b 6220 	movw	r2, #48672	; 0xbe20
    92c6:	f2c0 0201 	movt	r2, #1
    92ca:	a804      	add	r0, sp, #16
    92cc:	2304      	movs	r3, #4
    92ce:	9901      	ldr	r1, [sp, #4]
    92d0:	f00c ffab 	bl	1622a <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    92d4:	e7ff      	b.n	92d6 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    92d6:	a804      	add	r0, sp, #16
    92d8:	f00c fac4 	bl	15864 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    92dc:	f88d 000b 	strb.w	r0, [sp, #11]
    92e0:	e7ff      	b.n	92e2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    92e2:	e011      	b.n	9308 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    92e4:	9800      	ldr	r0, [sp, #0]
    92e6:	900a      	str	r0, [sp, #40]	; 0x28
    92e8:	f64b 6224 	movw	r2, #48676	; 0xbe24
    92ec:	f2c0 0201 	movt	r2, #1
    92f0:	a807      	add	r0, sp, #28
    92f2:	a90a      	add	r1, sp, #40	; 0x28
    92f4:	f00c fa4d 	bl	15792 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    92f8:	e7ff      	b.n	92fa <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    92fa:	a807      	add	r0, sp, #28
    92fc:	f00c fab2 	bl	15864 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    9300:	f88d 000b 	strb.w	r0, [sp, #11]
    9304:	e7ff      	b.n	9306 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    9306:	e7ff      	b.n	9308 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    9308:	f89d 000b 	ldrb.w	r0, [sp, #11]
    930c:	b00e      	add	sp, #56	; 0x38
    930e:	bd80      	pop	{r7, pc}

00009310 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    9310:	b082      	sub	sp, #8
    9312:	2000      	movs	r0, #0
    9314:	9000      	str	r0, [sp, #0]
    9316:	9800      	ldr	r0, [sp, #0]
    9318:	b002      	add	sp, #8
    931a:	4770      	bx	lr

0000931c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    931c:	b580      	push	{r7, lr}
    931e:	b084      	sub	sp, #16
    9320:	9002      	str	r0, [sp, #8]
    9322:	9103      	str	r1, [sp, #12]
    9324:	f7ff ff71 	bl	920a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    9328:	9001      	str	r0, [sp, #4]
    932a:	9100      	str	r1, [sp, #0]
    932c:	e7ff      	b.n	932e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    932e:	9801      	ldr	r0, [sp, #4]
    9330:	9900      	ldr	r1, [sp, #0]
    9332:	b004      	add	sp, #16
    9334:	bd80      	pop	{r7, pc}

00009336 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    9336:	b580      	push	{r7, lr}
    9338:	b094      	sub	sp, #80	; 0x50
    933a:	9008      	str	r0, [sp, #32]
    933c:	9109      	str	r1, [sp, #36]	; 0x24
    933e:	6802      	ldr	r2, [r0, #0]
    9340:	2a00      	cmp	r2, #0
    9342:	bf18      	it	ne
    9344:	2201      	movne	r2, #1
    9346:	f04f 0300 	mov.w	r3, #0
    934a:	930b      	str	r3, [sp, #44]	; 0x2c
    934c:	920a      	str	r2, [sp, #40]	; 0x28
    934e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    9352:	9104      	str	r1, [sp, #16]
    9354:	9003      	str	r0, [sp, #12]
    9356:	9202      	str	r2, [sp, #8]
    9358:	e7ff      	b.n	935a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    935a:	9802      	ldr	r0, [sp, #8]
    935c:	9902      	ldr	r1, [sp, #8]
    935e:	910d      	str	r1, [sp, #52]	; 0x34
    9360:	9a04      	ldr	r2, [sp, #16]
    9362:	6813      	ldr	r3, [r2, #0]
    9364:	2b00      	cmp	r3, #0
    9366:	bf18      	it	ne
    9368:	2301      	movne	r3, #1
    936a:	f04f 0c00 	mov.w	ip, #0
    936e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    9372:	930e      	str	r3, [sp, #56]	; 0x38
    9374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    9376:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    937a:	9001      	str	r0, [sp, #4]
    937c:	9300      	str	r3, [sp, #0]
    937e:	e7ff      	b.n	9380 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    9380:	9800      	ldr	r0, [sp, #0]
    9382:	9011      	str	r0, [sp, #68]	; 0x44
    9384:	9901      	ldr	r1, [sp, #4]
    9386:	4281      	cmp	r1, r0
    9388:	d104      	bne.n	9394 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    938a:	e7ff      	b.n	938c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    938c:	2001      	movs	r0, #1
    938e:	f88d 0017 	strb.w	r0, [sp, #23]
    9392:	e003      	b.n	939c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    9394:	2000      	movs	r0, #0
    9396:	f88d 0017 	strb.w	r0, [sp, #23]
    939a:	e7ff      	b.n	939c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    939c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    93a0:	07c0      	lsls	r0, r0, #31
    93a2:	2800      	cmp	r0, #0
    93a4:	d104      	bne.n	93b0 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    93a6:	e7ff      	b.n	93a8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    93a8:	2000      	movs	r0, #0
    93aa:	f88d 0016 	strb.w	r0, [sp, #22]
    93ae:	e01c      	b.n	93ea <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    93b0:	9803      	ldr	r0, [sp, #12]
    93b2:	9006      	str	r0, [sp, #24]
    93b4:	9904      	ldr	r1, [sp, #16]
    93b6:	9107      	str	r1, [sp, #28]
    93b8:	9a06      	ldr	r2, [sp, #24]
    93ba:	6812      	ldr	r2, [r2, #0]
    93bc:	2a00      	cmp	r2, #0
    93be:	d104      	bne.n	93ca <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    93c0:	e7ff      	b.n	93c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    93c2:	2001      	movs	r0, #1
    93c4:	f88d 0016 	strb.w	r0, [sp, #22]
    93c8:	e00e      	b.n	93e8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    93ca:	9807      	ldr	r0, [sp, #28]
    93cc:	6800      	ldr	r0, [r0, #0]
    93ce:	2800      	cmp	r0, #0
    93d0:	d0f7      	beq.n	93c2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    93d2:	e7ff      	b.n	93d4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    93d4:	9806      	ldr	r0, [sp, #24]
    93d6:	9012      	str	r0, [sp, #72]	; 0x48
    93d8:	9907      	ldr	r1, [sp, #28]
    93da:	9113      	str	r1, [sp, #76]	; 0x4c
    93dc:	f009 f925 	bl	1262a <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    93e0:	f88d 0016 	strb.w	r0, [sp, #22]
    93e4:	e7ff      	b.n	93e6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    93e6:	e7ff      	b.n	93e8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    93e8:	e7ff      	b.n	93ea <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    93ea:	f89d 0016 	ldrb.w	r0, [sp, #22]
    93ee:	b014      	add	sp, #80	; 0x50
    93f0:	bd80      	pop	{r7, pc}

000093f2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    93f2:	b580      	push	{r7, lr}
    93f4:	b084      	sub	sp, #16
    93f6:	9002      	str	r0, [sp, #8]
    93f8:	9103      	str	r1, [sp, #12]
    93fa:	6800      	ldr	r0, [r0, #0]
    93fc:	f009 f8a7 	bl	1254e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    9400:	9001      	str	r0, [sp, #4]
    9402:	e7ff      	b.n	9404 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    9404:	9801      	ldr	r0, [sp, #4]
    9406:	f000 0001 	and.w	r0, r0, #1
    940a:	b004      	add	sp, #16
    940c:	bd80      	pop	{r7, pc}

0000940e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    940e:	b580      	push	{r7, lr}
    9410:	b084      	sub	sp, #16
    9412:	9002      	str	r0, [sp, #8]
    9414:	9103      	str	r1, [sp, #12]
    9416:	6800      	ldr	r0, [r0, #0]
    9418:	f009 f862 	bl	124e0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    941c:	9001      	str	r0, [sp, #4]
    941e:	e7ff      	b.n	9420 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    9420:	9801      	ldr	r0, [sp, #4]
    9422:	f000 0001 	and.w	r0, r0, #1
    9426:	b004      	add	sp, #16
    9428:	bd80      	pop	{r7, pc}

0000942a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    942a:	b580      	push	{r7, lr}
    942c:	b084      	sub	sp, #16
    942e:	9002      	str	r0, [sp, #8]
    9430:	9103      	str	r1, [sp, #12]
    9432:	6800      	ldr	r0, [r0, #0]
    9434:	f7ff ffeb 	bl	940e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    9438:	9001      	str	r0, [sp, #4]
    943a:	e7ff      	b.n	943c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    943c:	9801      	ldr	r0, [sp, #4]
    943e:	f000 0001 	and.w	r0, r0, #1
    9442:	b004      	add	sp, #16
    9444:	bd80      	pop	{r7, pc}

00009446 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    9446:	b580      	push	{r7, lr}
    9448:	b084      	sub	sp, #16
    944a:	9002      	str	r0, [sp, #8]
    944c:	9103      	str	r1, [sp, #12]
    944e:	6800      	ldr	r0, [r0, #0]
    9450:	f009 f8b4 	bl	125bc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    9454:	9001      	str	r0, [sp, #4]
    9456:	e7ff      	b.n	9458 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    9458:	9801      	ldr	r0, [sp, #4]
    945a:	f000 0001 	and.w	r0, r0, #1
    945e:	b004      	add	sp, #16
    9460:	bd80      	pop	{r7, pc}

00009462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    9462:	b089      	sub	sp, #36	; 0x24
    9464:	9005      	str	r0, [sp, #20]
    9466:	9106      	str	r1, [sp, #24]
    9468:	9107      	str	r1, [sp, #28]
    946a:	9907      	ldr	r1, [sp, #28]
    946c:	9002      	str	r0, [sp, #8]
    946e:	9101      	str	r1, [sp, #4]
    9470:	e7ff      	b.n	9472 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    9472:	9802      	ldr	r0, [sp, #8]
    9474:	9008      	str	r0, [sp, #32]
    9476:	9908      	ldr	r1, [sp, #32]
    9478:	9100      	str	r1, [sp, #0]
    947a:	e7ff      	b.n	947c <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    947c:	9800      	ldr	r0, [sp, #0]
    947e:	9003      	str	r0, [sp, #12]
    9480:	9901      	ldr	r1, [sp, #4]
    9482:	9104      	str	r1, [sp, #16]
    9484:	9803      	ldr	r0, [sp, #12]
    9486:	9904      	ldr	r1, [sp, #16]
    9488:	b009      	add	sp, #36	; 0x24
    948a:	4770      	bx	lr

0000948c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    948c:	b089      	sub	sp, #36	; 0x24
    948e:	9005      	str	r0, [sp, #20]
    9490:	9106      	str	r1, [sp, #24]
    9492:	9107      	str	r1, [sp, #28]
    9494:	9907      	ldr	r1, [sp, #28]
    9496:	9002      	str	r0, [sp, #8]
    9498:	9101      	str	r1, [sp, #4]
    949a:	e7ff      	b.n	949c <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    949c:	9802      	ldr	r0, [sp, #8]
    949e:	9008      	str	r0, [sp, #32]
    94a0:	9908      	ldr	r1, [sp, #32]
    94a2:	9100      	str	r1, [sp, #0]
    94a4:	e7ff      	b.n	94a6 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    94a6:	9800      	ldr	r0, [sp, #0]
    94a8:	9003      	str	r0, [sp, #12]
    94aa:	9901      	ldr	r1, [sp, #4]
    94ac:	9104      	str	r1, [sp, #16]
    94ae:	9803      	ldr	r0, [sp, #12]
    94b0:	9904      	ldr	r1, [sp, #16]
    94b2:	b009      	add	sp, #36	; 0x24
    94b4:	4770      	bx	lr

000094b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    94b6:	b089      	sub	sp, #36	; 0x24
    94b8:	9005      	str	r0, [sp, #20]
    94ba:	9106      	str	r1, [sp, #24]
    94bc:	9107      	str	r1, [sp, #28]
    94be:	9907      	ldr	r1, [sp, #28]
    94c0:	9002      	str	r0, [sp, #8]
    94c2:	9101      	str	r1, [sp, #4]
    94c4:	e7ff      	b.n	94c6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    94c6:	9802      	ldr	r0, [sp, #8]
    94c8:	9008      	str	r0, [sp, #32]
    94ca:	9908      	ldr	r1, [sp, #32]
    94cc:	9100      	str	r1, [sp, #0]
    94ce:	e7ff      	b.n	94d0 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    94d0:	9800      	ldr	r0, [sp, #0]
    94d2:	9003      	str	r0, [sp, #12]
    94d4:	9901      	ldr	r1, [sp, #4]
    94d6:	9104      	str	r1, [sp, #16]
    94d8:	9803      	ldr	r0, [sp, #12]
    94da:	9904      	ldr	r1, [sp, #16]
    94dc:	b009      	add	sp, #36	; 0x24
    94de:	4770      	bx	lr

000094e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    94e0:	b089      	sub	sp, #36	; 0x24
    94e2:	9005      	str	r0, [sp, #20]
    94e4:	9106      	str	r1, [sp, #24]
    94e6:	9107      	str	r1, [sp, #28]
    94e8:	9907      	ldr	r1, [sp, #28]
    94ea:	9002      	str	r0, [sp, #8]
    94ec:	9101      	str	r1, [sp, #4]
    94ee:	e7ff      	b.n	94f0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    94f0:	9802      	ldr	r0, [sp, #8]
    94f2:	9008      	str	r0, [sp, #32]
    94f4:	9908      	ldr	r1, [sp, #32]
    94f6:	9100      	str	r1, [sp, #0]
    94f8:	e7ff      	b.n	94fa <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    94fa:	9800      	ldr	r0, [sp, #0]
    94fc:	9003      	str	r0, [sp, #12]
    94fe:	9901      	ldr	r1, [sp, #4]
    9500:	9104      	str	r1, [sp, #16]
    9502:	9803      	ldr	r0, [sp, #12]
    9504:	9904      	ldr	r1, [sp, #16]
    9506:	b009      	add	sp, #36	; 0x24
    9508:	4770      	bx	lr

0000950a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    950a:	b580      	push	{r7, lr}
    950c:	b088      	sub	sp, #32
    950e:	9004      	str	r0, [sp, #16]
    9510:	9105      	str	r1, [sp, #20]
    9512:	f000 f819 	bl	9548 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    9516:	9001      	str	r0, [sp, #4]
    9518:	9100      	str	r1, [sp, #0]
    951a:	e7ff      	b.n	951c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    951c:	9801      	ldr	r0, [sp, #4]
    951e:	9006      	str	r0, [sp, #24]
    9520:	9900      	ldr	r1, [sp, #0]
    9522:	f001 0201 	and.w	r2, r1, #1
    9526:	f88d 201f 	strb.w	r2, [sp, #31]
    952a:	2a00      	cmp	r2, #0
    952c:	d105      	bne.n	953a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    952e:	e7ff      	b.n	9530 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    9530:	9801      	ldr	r0, [sp, #4]
    9532:	9003      	str	r0, [sp, #12]
    9534:	2101      	movs	r1, #1
    9536:	9102      	str	r1, [sp, #8]
    9538:	e002      	b.n	9540 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    953a:	2000      	movs	r0, #0
    953c:	9002      	str	r0, [sp, #8]
    953e:	e7ff      	b.n	9540 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    9540:	9802      	ldr	r0, [sp, #8]
    9542:	9903      	ldr	r1, [sp, #12]
    9544:	b008      	add	sp, #32
    9546:	bd80      	pop	{r7, pc}

00009548 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    9548:	b08a      	sub	sp, #40	; 0x28
    954a:	9004      	str	r0, [sp, #16]
    954c:	9105      	str	r1, [sp, #20]
    954e:	1a40      	subs	r0, r0, r1
    9550:	f04f 0100 	mov.w	r1, #0
    9554:	f141 0100 	adc.w	r1, r1, #0
    9558:	f1c1 0101 	rsb	r1, r1, #1
    955c:	9006      	str	r0, [sp, #24]
    955e:	f88d 101c 	strb.w	r1, [sp, #28]
    9562:	9806      	ldr	r0, [sp, #24]
    9564:	f89d 101c 	ldrb.w	r1, [sp, #28]
    9568:	9001      	str	r0, [sp, #4]
    956a:	9100      	str	r1, [sp, #0]
    956c:	e7ff      	b.n	956e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
    956e:	9801      	ldr	r0, [sp, #4]
    9570:	9008      	str	r0, [sp, #32]
    9572:	9900      	ldr	r1, [sp, #0]
    9574:	f001 0201 	and.w	r2, r1, #1
    9578:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    957c:	9002      	str	r0, [sp, #8]
    957e:	f88d 200c 	strb.w	r2, [sp, #12]
    9582:	9802      	ldr	r0, [sp, #8]
    9584:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9588:	b00a      	add	sp, #40	; 0x28
    958a:	4770      	bx	lr

0000958c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
    baudrate:   8000,  //  In kHZ. Use SPI at 8MHz (the fastest clock available on the nRF52832) because otherwise refreshing will be super slow.
    word_size:  hal::HAL_SPI_WORD_SIZE_8BIT as u8,
};

/// Initialise the display controller
pub fn start_display() -> MynewtResult<()> {
    958c:	b5b0      	push	{r4, r5, r7, lr}
    958e:	b0b2      	sub	sp, #200	; 0xc8
    //  Create SPI port and GPIO pins
    let mut spi_port = mynewt::SPI::new();
    9590:	f00a fbe5 	bl	13d5e <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
    9594:	9115      	str	r1, [sp, #84]	; 0x54
    9596:	9014      	str	r0, [sp, #80]	; 0x50
    9598:	e7ff      	b.n	959a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
    959a:	f00a fd9e 	bl	140da <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    959e:	9016      	str	r0, [sp, #88]	; 0x58
    95a0:	e7ff      	b.n	95a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
    95a2:	f00a fd9a 	bl	140da <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    95a6:	9017      	str	r0, [sp, #92]	; 0x5c
    95a8:	e7ff      	b.n	95aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>

    //  Init SPI port and GPIO pins
    spi_port.init(
    95aa:	f240 03e8 	movw	r3, #232	; 0xe8
    95ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
    95b2:	a814      	add	r0, sp, #80	; 0x50
    95b4:	2100      	movs	r1, #0
    95b6:	2219      	movs	r2, #25
    95b8:	f00a fbd9 	bl	13d6e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
    95bc:	9012      	str	r0, [sp, #72]	; 0x48
    95be:	e7ff      	b.n	95c0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
    95c0:	9812      	ldr	r0, [sp, #72]	; 0x48
    95c2:	f7ff fb5d 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    95c6:	9018      	str	r0, [sp, #96]	; 0x60
    95c8:	e7ff      	b.n	95ca <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
        DISPLAY_SPI, //  Mynewt SPI port 0
        DISPLAY_CS,  //  LCD_CS (P0.25): Chip select
        unsafe { &mut SPI_SETTINGS }
    ) ? ;
    95ca:	9818      	ldr	r0, [sp, #96]	; 0x60
    95cc:	1e41      	subs	r1, r0, #1
    95ce:	bf18      	it	ne
    95d0:	2101      	movne	r1, #1
    95d2:	2801      	cmp	r0, #1
    95d4:	d001      	beq.n	95da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
    95d6:	e7ff      	b.n	95d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
    95d8:	e006      	b.n	95e8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
    95da:	a816      	add	r0, sp, #88	; 0x58
    95dc:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    95de:	f00a fd7e 	bl	140de <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    95e2:	9011      	str	r0, [sp, #68]	; 0x44
    95e4:	e010      	b.n	9608 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
    95e6:	defe      	udf	#254	; 0xfe
    ) ? ;
    95e8:	9818      	ldr	r0, [sp, #96]	; 0x60
    95ea:	902d      	str	r0, [sp, #180]	; 0xb4
    95ec:	f008 ff74 	bl	124d8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    95f0:	9010      	str	r0, [sp, #64]	; 0x40
    95f2:	e002      	b.n	95fa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
    unsafe {
        DISPLAY.init(&mut delay) ? ;
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    }
    Ok(())
}
    95f4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    95f6:	b032      	add	sp, #200	; 0xc8
    95f8:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
    95fa:	9810      	ldr	r0, [sp, #64]	; 0x40
    95fc:	f7ff fb34 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9600:	9013      	str	r0, [sp, #76]	; 0x4c
    9602:	e7ff      	b.n	9604 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
    9604:	e7ff      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    9606:	e7f5      	b.n	95f4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9608:	9811      	ldr	r0, [sp, #68]	; 0x44
    960a:	f7ff fb39 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    960e:	9019      	str	r0, [sp, #100]	; 0x64
    9610:	e7ff      	b.n	9612 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
    9612:	9819      	ldr	r0, [sp, #100]	; 0x64
    9614:	1e41      	subs	r1, r0, #1
    9616:	bf18      	it	ne
    9618:	2101      	movne	r1, #1
    961a:	2801      	cmp	r0, #1
    961c:	d001      	beq.n	9622 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
    961e:	e7ff      	b.n	9620 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
    9620:	e006      	b.n	9630 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
    9622:	a817      	add	r0, sp, #92	; 0x5c
    9624:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9626:	f00a fd5a 	bl	140de <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    962a:	900f      	str	r0, [sp, #60]	; 0x3c
    962c:	e00c      	b.n	9648 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    962e:	defe      	udf	#254	; 0xfe
    9630:	9819      	ldr	r0, [sp, #100]	; 0x64
    9632:	902e      	str	r0, [sp, #184]	; 0xb8
    9634:	f008 ff50 	bl	124d8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9638:	900e      	str	r0, [sp, #56]	; 0x38
    963a:	e7ff      	b.n	963c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
    963c:	980e      	ldr	r0, [sp, #56]	; 0x38
    963e:	f7ff fb13 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9642:	9013      	str	r0, [sp, #76]	; 0x4c
    9644:	e7ff      	b.n	9646 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
    9646:	e7de      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9648:	980f      	ldr	r0, [sp, #60]	; 0x3c
    964a:	f7ff fb19 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    964e:	901a      	str	r0, [sp, #104]	; 0x68
    9650:	e7ff      	b.n	9652 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
    9652:	981a      	ldr	r0, [sp, #104]	; 0x68
    9654:	1e41      	subs	r1, r0, #1
    9656:	bf18      	it	ne
    9658:	2101      	movne	r1, #1
    965a:	2801      	cmp	r0, #1
    965c:	d001      	beq.n	9662 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
    965e:	e7ff      	b.n	9660 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
    9660:	e004      	b.n	966c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    9662:	f00a fd3a 	bl	140da <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    9666:	900d      	str	r0, [sp, #52]	; 0x34
    9668:	e00c      	b.n	9684 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    966a:	defe      	udf	#254	; 0xfe
    966c:	981a      	ldr	r0, [sp, #104]	; 0x68
    966e:	902f      	str	r0, [sp, #188]	; 0xbc
    9670:	f008 ff32 	bl	124d8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9674:	900c      	str	r0, [sp, #48]	; 0x30
    9676:	e7ff      	b.n	9678 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
    9678:	980c      	ldr	r0, [sp, #48]	; 0x30
    967a:	f7ff faf5 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    967e:	9013      	str	r0, [sp, #76]	; 0x4c
    9680:	e7ff      	b.n	9682 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
    9682:	e7c0      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    9684:	f240 1060 	movw	r0, #352	; 0x160
    9688:	f2c2 0000 	movt	r0, #8192	; 0x2000
    968c:	990d      	ldr	r1, [sp, #52]	; 0x34
    968e:	6001      	str	r1, [r0, #0]
    9690:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    9692:	f00a fd24 	bl	140de <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    9696:	900b      	str	r0, [sp, #44]	; 0x2c
    9698:	e7ff      	b.n	969a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
    969a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    969c:	f7ff faf0 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    96a0:	901b      	str	r0, [sp, #108]	; 0x6c
    96a2:	e7ff      	b.n	96a4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
    96a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
    96a6:	1e41      	subs	r1, r0, #1
    96a8:	bf18      	it	ne
    96aa:	2101      	movne	r1, #1
    96ac:	2801      	cmp	r0, #1
    96ae:	d001      	beq.n	96b4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
    96b0:	e7ff      	b.n	96b2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
    96b2:	e008      	b.n	96c6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
    96b4:	f240 1060 	movw	r0, #352	; 0x160
    96b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    96bc:	f00a fda8 	bl	14210 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    96c0:	900a      	str	r0, [sp, #40]	; 0x28
    96c2:	e00d      	b.n	96e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    96c4:	defe      	udf	#254	; 0xfe
    96c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
    96c8:	9030      	str	r0, [sp, #192]	; 0xc0
    96ca:	f008 ff05 	bl	124d8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    96ce:	9009      	str	r0, [sp, #36]	; 0x24
    96d0:	e7ff      	b.n	96d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
    96d2:	9809      	ldr	r0, [sp, #36]	; 0x24
    96d4:	f7ff fac8 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    96d8:	9013      	str	r0, [sp, #76]	; 0x4c
    96da:	e7ff      	b.n	96dc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
    96dc:	e7ff      	b.n	96de <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    96de:	e792      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
    96e0:	980a      	ldr	r0, [sp, #40]	; 0x28
    96e2:	f7ff facd 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    96e6:	901c      	str	r0, [sp, #112]	; 0x70
    96e8:	e7ff      	b.n	96ea <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
    96ea:	981c      	ldr	r0, [sp, #112]	; 0x70
    96ec:	1e41      	subs	r1, r0, #1
    96ee:	bf18      	it	ne
    96f0:	2101      	movne	r1, #1
    96f2:	2801      	cmp	r0, #1
    96f4:	d001      	beq.n	96fa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
    96f6:	e7ff      	b.n	96f8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
    96f8:	e011      	b.n	971e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
    96fa:	9914      	ldr	r1, [sp, #80]	; 0x50
    96fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
    96fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
    9700:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    9702:	46ec      	mov	ip, sp
    9704:	f04f 0e01 	mov.w	lr, #1
    9708:	f8cc e008 	str.w	lr, [ip, #8]
    970c:	f8cc e004 	str.w	lr, [ip, #4]
    9710:	f8cc 0000 	str.w	r0, [ip]
    9714:	a81d      	add	r0, sp, #116	; 0x74
    9716:	f000 fb4f 	bl	9db8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
    971a:	e00c      	b.n	9736 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
    971c:	defe      	udf	#254	; 0xfe
    971e:	981c      	ldr	r0, [sp, #112]	; 0x70
    9720:	9031      	str	r0, [sp, #196]	; 0xc4
    9722:	f008 fed9 	bl	124d8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9726:	9008      	str	r0, [sp, #32]
    9728:	e7ff      	b.n	972a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
    972a:	9808      	ldr	r0, [sp, #32]
    972c:	f7ff fa9c 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9730:	9013      	str	r0, [sp, #76]	; 0x4c
    9732:	e7ff      	b.n	9734 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
    9734:	e7d3      	b.n	96de <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    9736:	f240 1048 	movw	r0, #328	; 0x148
    973a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    973e:	a91d      	add	r1, sp, #116	; 0x74
    9740:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9744:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
    9748:	f00a fd78 	bl	1423c <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
    974c:	e7ff      	b.n	974e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
    974e:	f240 1048 	movw	r0, #328	; 0x148
    9752:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9756:	a923      	add	r1, sp, #140	; 0x8c
    9758:	f000 fb50 	bl	9dfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
    975c:	9007      	str	r0, [sp, #28]
    975e:	e7ff      	b.n	9760 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
    9760:	9807      	ldr	r0, [sp, #28]
    9762:	f000 0001 	and.w	r0, r0, #1
    9766:	f7ff fa85 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    976a:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    976e:	e7ff      	b.n	9770 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
    9770:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    9774:	07c1      	lsls	r1, r0, #31
    9776:	2900      	cmp	r1, #0
    9778:	d001      	beq.n	977e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
    977a:	e7ff      	b.n	977c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
    977c:	e00d      	b.n	979a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    977e:	f64b 6038 	movw	r0, #48696	; 0xbe38
    9782:	f2c0 0001 	movt	r0, #1
    9786:	6801      	ldr	r1, [r0, #0]
    9788:	f240 1048 	movw	r0, #328	; 0x148
    978c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9790:	f000 f949 	bl	9a26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
    9794:	9006      	str	r0, [sp, #24]
    9796:	e00b      	b.n	97b0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
    9798:	defe      	udf	#254	; 0xfe
    979a:	f008 fe35 	bl	12408 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    979e:	9005      	str	r0, [sp, #20]
    97a0:	e7ff      	b.n	97a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
    97a2:	9805      	ldr	r0, [sp, #20]
    97a4:	f7ff fa60 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    97a8:	9013      	str	r0, [sp, #76]	; 0x4c
    97aa:	e7ff      	b.n	97ac <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
    97ac:	e7ff      	b.n	97ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
    97ae:	e72a      	b.n	9606 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    97b0:	9806      	ldr	r0, [sp, #24]
    97b2:	f000 0001 	and.w	r0, r0, #1
    97b6:	f7ff fa5d 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    97ba:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    97be:	e7ff      	b.n	97c0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
    97c0:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    97c4:	07c1      	lsls	r1, r0, #31
    97c6:	2900      	cmp	r1, #0
    97c8:	d001      	beq.n	97ce <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
    97ca:	e7ff      	b.n	97cc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
    97cc:	e005      	b.n	97da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
    97ce:	2000      	movs	r0, #0
    Ok(())
    97d0:	9013      	str	r0, [sp, #76]	; 0x4c
    97d2:	2001      	movs	r0, #1
    97d4:	9013      	str	r0, [sp, #76]	; 0x4c
}
    97d6:	e70d      	b.n	95f4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    97d8:	defe      	udf	#254	; 0xfe
    97da:	f008 fe15 	bl	12408 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    97de:	9004      	str	r0, [sp, #16]
    97e0:	e7ff      	b.n	97e2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
    97e2:	9804      	ldr	r0, [sp, #16]
    97e4:	f7ff fa40 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    97e8:	9013      	str	r0, [sp, #76]	; 0x4c
    97ea:	e7ff      	b.n	97ec <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
    97ec:	e7df      	b.n	97ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

000097ee <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
    97ee:	b580      	push	{r7, lr}
    97f0:	b08a      	sub	sp, #40	; 0x28
    97f2:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    97f4:	f001 f8ff 	bl	a9f6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
    97f8:	9307      	str	r3, [sp, #28]
    97fa:	9206      	str	r2, [sp, #24]
    97fc:	9105      	str	r1, [sp, #20]
    97fe:	9004      	str	r0, [sp, #16]
    9800:	e7ff      	b.n	9802 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
    9802:	a804      	add	r0, sp, #16
    9804:	f00a fd92 	bl	1432c <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    9808:	9003      	str	r0, [sp, #12]
    980a:	e7ff      	b.n	980c <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
    980c:	9803      	ldr	r0, [sp, #12]
    980e:	f00a fe03 	bl	14418 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    9812:	9002      	str	r0, [sp, #8]
    9814:	9101      	str	r1, [sp, #4]
    9816:	e7ff      	b.n	9818 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
    9818:	9802      	ldr	r0, [sp, #8]
    981a:	f000 0001 	and.w	r0, r0, #1
    981e:	9901      	ldr	r1, [sp, #4]
    9820:	b00a      	add	sp, #40	; 0x28
    9822:	bd80      	pop	{r7, pc}

00009824 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
    9824:	b580      	push	{r7, lr}
    9826:	b090      	sub	sp, #64	; 0x40
    9828:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
    982a:	f100 010c 	add.w	r1, r0, #12
    982e:	9006      	str	r0, [sp, #24]
    9830:	4608      	mov	r0, r1
    9832:	f00a fcf8 	bl	14226 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    9836:	9005      	str	r0, [sp, #20]
    9838:	e7ff      	b.n	983a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
    983a:	9805      	ldr	r0, [sp, #20]
    983c:	f00a ff1f 	bl	1467e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
    9840:	9004      	str	r0, [sp, #16]
    9842:	e7ff      	b.n	9844 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
    9844:	9804      	ldr	r0, [sp, #16]
    9846:	f000 0001 	and.w	r0, r0, #1
    984a:	f7ff fa13 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    984e:	f88d 001f 	strb.w	r0, [sp, #31]
    9852:	e7ff      	b.n	9854 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
    9854:	f89d 001f 	ldrb.w	r0, [sp, #31]
    9858:	07c1      	lsls	r1, r0, #31
    985a:	2900      	cmp	r1, #0
    985c:	d001      	beq.n	9862 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
    985e:	e7ff      	b.n	9860 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
    9860:	e006      	b.n	9870 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
    9862:	9806      	ldr	r0, [sp, #24]
    9864:	300c      	adds	r0, #12
    9866:	f00a fcd3 	bl	14210 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    986a:	9003      	str	r0, [sp, #12]
    986c:	e00d      	b.n	988a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
    986e:	defe      	udf	#254	; 0xfe
    9870:	f008 f9e9 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9874:	e003      	b.n	987e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
    9876:	f89d 001e 	ldrb.w	r0, [sp, #30]
    987a:	b010      	add	sp, #64	; 0x40
    987c:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
    987e:	f00a ff53 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9882:	f88d 001e 	strb.w	r0, [sp, #30]
    9886:	e7ff      	b.n	9888 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
    9888:	e7f5      	b.n	9876 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
    988a:	9803      	ldr	r0, [sp, #12]
    988c:	f00a fea2 	bl	145d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
    9890:	9002      	str	r0, [sp, #8]
    9892:	e7ff      	b.n	9894 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
    9894:	9802      	ldr	r0, [sp, #8]
    9896:	f000 0001 	and.w	r0, r0, #1
    989a:	f7ff f9eb 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    989e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    98a2:	e7ff      	b.n	98a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
    98a4:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    98a8:	07c1      	lsls	r1, r0, #31
    98aa:	2900      	cmp	r1, #0
    98ac:	d001      	beq.n	98b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
    98ae:	e7ff      	b.n	98b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
    98b0:	e006      	b.n	98c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
    98b2:	9806      	ldr	r0, [sp, #24]
    98b4:	300c      	adds	r0, #12
    98b6:	f00a fcb6 	bl	14226 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    98ba:	9001      	str	r0, [sp, #4]
    98bc:	e009      	b.n	98d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
    98be:	defe      	udf	#254	; 0xfe
    98c0:	f008 f9c1 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    98c4:	e7ff      	b.n	98c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
    98c6:	f00a ff2f 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    98ca:	f88d 001e 	strb.w	r0, [sp, #30]
    98ce:	e7ff      	b.n	98d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
    98d0:	e7d1      	b.n	9876 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
    98d2:	9801      	ldr	r0, [sp, #4]
    98d4:	f00a fe29 	bl	1452a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
    98d8:	f88d 001e 	strb.w	r0, [sp, #30]
    98dc:	e7ff      	b.n	98de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
    98de:	e7ca      	b.n	9876 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

000098e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
    98e0:	b082      	sub	sp, #8
    98e2:	9001      	str	r0, [sp, #4]
    98e4:	e7ff      	b.n	98e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
    98e6:	b002      	add	sp, #8
    98e8:	4770      	bx	lr

000098ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
    98ea:	b082      	sub	sp, #8
    98ec:	9001      	str	r0, [sp, #4]
    98ee:	e7ff      	b.n	98f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
    98f0:	b002      	add	sp, #8
    98f2:	4770      	bx	lr

000098f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
    98f4:	b082      	sub	sp, #8
    98f6:	9001      	str	r0, [sp, #4]
    98f8:	e7ff      	b.n	98fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
    98fa:	b002      	add	sp, #8
    98fc:	4770      	bx	lr

000098fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
        }
        Ok(())
    }

    #[cfg(feature = "noblock_spi")]  //  If non-blocking SPI is enabled...
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
    98fe:	b580      	push	{r7, lr}
    9900:	b084      	sub	sp, #16
    9902:	9001      	str	r0, [sp, #4]
    9904:	9102      	str	r1, [sp, #8]
    9906:	9203      	str	r2, [sp, #12]
        //  Write the data bytes,
        mynewt::spi::spi_noblock_write_data(
    9908:	4608      	mov	r0, r1
    990a:	4611      	mov	r1, r2
    990c:	f009 fc3e 	bl	1318c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9910:	9000      	str	r0, [sp, #0]
    9912:	e7ff      	b.n	9914 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
    9914:	f64b 6198 	movw	r1, #48792	; 0xbe98
    9918:	f2c0 0101 	movt	r1, #1
    991c:	f64b 63a8 	movw	r3, #48808	; 0xbea8
    9920:	f2c0 0301 	movt	r3, #1
    9924:	220d      	movs	r2, #13
    9926:	9800      	ldr	r0, [sp, #0]
    9928:	f7ff f96b 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    992c:	e7ff      	b.n	992e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
    992e:	2000      	movs	r0, #0
            data
        ).expect("spi data fail");
        Ok(())
    }
    9930:	b004      	add	sp, #16
    9932:	bd80      	pop	{r7, pc}

00009934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
        self.dc.set_high().map_err(|_| ())?;
        self.spi.write(data).map_err(|_| ())
    }

    /// Writes a data word to the display.
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
    9934:	b580      	push	{r7, lr}
    9936:	b088      	sub	sp, #32
    9938:	460a      	mov	r2, r1
    993a:	9006      	str	r0, [sp, #24]
    993c:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
    9940:	9004      	str	r0, [sp, #16]
    9942:	4608      	mov	r0, r1
    9944:	9203      	str	r2, [sp, #12]
    9946:	f000 fe08 	bl	a55a <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
    994a:	9002      	str	r0, [sp, #8]
    994c:	e7ff      	b.n	994e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
    994e:	9802      	ldr	r0, [sp, #8]
    9950:	f8ad 0016 	strh.w	r0, [sp, #22]
    9954:	e7ff      	b.n	9956 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
    9956:	f10d 0116 	add.w	r1, sp, #22
    995a:	2202      	movs	r2, #2
        self.write_data(&bytes)
    995c:	9804      	ldr	r0, [sp, #16]
    995e:	f7ff ffce 	bl	98fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
    9962:	9001      	str	r0, [sp, #4]
    9964:	e7ff      	b.n	9966 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
    9966:	9801      	ldr	r0, [sp, #4]
    9968:	f000 0001 	and.w	r0, r0, #1
    996c:	b008      	add	sp, #32
    996e:	bd80      	pop	{r7, pc}

00009970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
    9970:	b580      	push	{r7, lr}
    9972:	b08e      	sub	sp, #56	; 0x38
    9974:	468c      	mov	ip, r1
    9976:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    997a:	920b      	str	r2, [sp, #44]	; 0x2c
    997c:	930c      	str	r3, [sp, #48]	; 0x30
    997e:	900d      	str	r0, [sp, #52]	; 0x34
    9980:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
    9984:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9988:	f000 fdbd 	bl	a506 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
    998c:	9008      	str	r0, [sp, #32]
    998e:	9107      	str	r1, [sp, #28]
    9990:	e7ff      	b.n	9992 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
    9992:	9808      	ldr	r0, [sp, #32]
    9994:	f000 0001 	and.w	r0, r0, #1
    9998:	f64b 62b8 	movw	r2, #48824	; 0xbeb8
    999c:	f2c0 0201 	movt	r2, #1
    99a0:	9907      	ldr	r1, [sp, #28]
    99a2:	f00a fcd8 	bl	14356 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    99a6:	9006      	str	r0, [sp, #24]
    99a8:	e7ff      	b.n	99aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
    99aa:	9806      	ldr	r0, [sp, #24]
    99ac:	f009 fba6 	bl	130fc <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
    99b0:	9005      	str	r0, [sp, #20]
    99b2:	e7ff      	b.n	99b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
    99b4:	f64b 61c8 	movw	r1, #48840	; 0xbec8
    99b8:	f2c0 0101 	movt	r1, #1
    99bc:	f64b 63d4 	movw	r3, #48852	; 0xbed4
    99c0:	f2c0 0301 	movt	r3, #1
    99c4:	220c      	movs	r2, #12
    99c6:	9805      	ldr	r0, [sp, #20]
    99c8:	f7ff f91b 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    99cc:	e7ff      	b.n	99ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
    99ce:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
    99d0:	f00a fd10 	bl	143f4 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
    99d4:	9004      	str	r0, [sp, #16]
    99d6:	e7ff      	b.n	99d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
    99d8:	9804      	ldr	r0, [sp, #16]
    99da:	07c1      	lsls	r1, r0, #31
    99dc:	2900      	cmp	r1, #0
    99de:	d01f      	beq.n	9a20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    99e0:	e7ff      	b.n	99e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
    99e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    99e4:	990c      	ldr	r1, [sp, #48]	; 0x30
    99e6:	f64b 62e4 	movw	r2, #48868	; 0xbee4
    99ea:	f2c0 0201 	movt	r2, #1
    99ee:	f00a fcdb 	bl	143a8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
    99f2:	9003      	str	r0, [sp, #12]
    99f4:	9102      	str	r1, [sp, #8]
    99f6:	e7ff      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
    99f8:	9803      	ldr	r0, [sp, #12]
    99fa:	9902      	ldr	r1, [sp, #8]
    99fc:	f009 fbc6 	bl	1318c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9a00:	9001      	str	r0, [sp, #4]
    9a02:	e7ff      	b.n	9a04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
    9a04:	f64b 6198 	movw	r1, #48792	; 0xbe98
    9a08:	f2c0 0101 	movt	r1, #1
    9a0c:	f64b 63f4 	movw	r3, #48884	; 0xbef4
    9a10:	f2c0 0301 	movt	r3, #1
    9a14:	220d      	movs	r2, #13
    9a16:	9801      	ldr	r0, [sp, #4]
    9a18:	f7ff f8f3 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9a1c:	e7ff      	b.n	9a1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
    9a1e:	e7ff      	b.n	9a20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9a20:	2000      	movs	r0, #0
    }
    9a22:	b00e      	add	sp, #56	; 0x38
    9a24:	bd80      	pop	{r7, pc}

00009a26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:

    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
    9a26:	b580      	push	{r7, lr}
    9a28:	b098      	sub	sp, #96	; 0x60
    9a2a:	9012      	str	r0, [sp, #72]	; 0x48
    9a2c:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
    9a2e:	7d02      	ldrb	r2, [r0, #20]
    9a30:	07d2      	lsls	r2, r2, #31
    9a32:	2a00      	cmp	r2, #0
    9a34:	910a      	str	r1, [sp, #40]	; 0x28
    9a36:	9009      	str	r0, [sp, #36]	; 0x24
    9a38:	d109      	bne.n	9a4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
    9a3a:	e7ff      	b.n	9a3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
    9a3c:	2036      	movs	r0, #54	; 0x36
            self.write_command(
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
            ))?;
        } else {
            self.write_command(
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9a3e:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    9a42:	980a      	ldr	r0, [sp, #40]	; 0x28
    9a44:	f7ff fed3 	bl	97ee <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9a48:	9008      	str	r0, [sp, #32]
    9a4a:	9107      	str	r1, [sp, #28]
    9a4c:	e044      	b.n	9ad8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
    9a4e:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
    9a50:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    9a54:	980a      	ldr	r0, [sp, #40]	; 0x28
    9a56:	f7ff feca 	bl	97ee <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9a5a:	9006      	str	r0, [sp, #24]
    9a5c:	9105      	str	r1, [sp, #20]
    9a5e:	e7ff      	b.n	9a60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
    9a60:	9806      	ldr	r0, [sp, #24]
    9a62:	f000 0001 	and.w	r0, r0, #1
    9a66:	f64b 7204 	movw	r2, #48900	; 0xbf04
    9a6a:	f2c0 0201 	movt	r2, #1
    9a6e:	9905      	ldr	r1, [sp, #20]
    9a70:	f00a fc71 	bl	14356 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9a74:	9004      	str	r0, [sp, #16]
    9a76:	e7ff      	b.n	9a78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
    9a78:	9804      	ldr	r0, [sp, #16]
    9a7a:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9a7e:	f10d 0139 	add.w	r1, sp, #57	; 0x39
    9a82:	910c      	str	r1, [sp, #48]	; 0x30
    9a84:	2101      	movs	r1, #1
    9a86:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
    9a88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9a8c:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9a90:	9809      	ldr	r0, [sp, #36]	; 0x24
    9a92:	f7ff ff6d 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9a96:	9003      	str	r0, [sp, #12]
    9a98:	e7ff      	b.n	9a9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
    9a9a:	9803      	ldr	r0, [sp, #12]
    9a9c:	f000 0001 	and.w	r0, r0, #1
    9aa0:	f7ff f8e8 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9aa4:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    9aa8:	e7ff      	b.n	9aaa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
    9aaa:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    9aae:	07c1      	lsls	r1, r0, #31
    9ab0:	2900      	cmp	r1, #0
    9ab2:	d001      	beq.n	9ab8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
    9ab4:	e7ff      	b.n	9ab6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
    9ab6:	e001      	b.n	9abc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
    9ab8:	e047      	b.n	9b4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9aba:	defe      	udf	#254	; 0xfe
            ))?;
    9abc:	f008 f8c3 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ac0:	e003      	b.n	9aca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
            ))?;
        }
        Ok(())
    }
    9ac2:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9ac6:	b018      	add	sp, #96	; 0x60
    9ac8:	bd80      	pop	{r7, pc}
            ))?;
    9aca:	f00a fe2d 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ace:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9ad2:	e7ff      	b.n	9ad4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
    9ad4:	e7ff      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9ad6:	e7f4      	b.n	9ac2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9ad8:	9808      	ldr	r0, [sp, #32]
    9ada:	f000 0001 	and.w	r0, r0, #1
    9ade:	f64b 7214 	movw	r2, #48916	; 0xbf14
    9ae2:	f2c0 0201 	movt	r2, #1
    9ae6:	9907      	ldr	r1, [sp, #28]
    9ae8:	f00a fc35 	bl	14356 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9aec:	9002      	str	r0, [sp, #8]
    9aee:	e7ff      	b.n	9af0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
    9af0:	9802      	ldr	r0, [sp, #8]
    9af2:	f040 0108 	orr.w	r1, r0, #8
    9af6:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    9afa:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    9afe:	910f      	str	r1, [sp, #60]	; 0x3c
    9b00:	2101      	movs	r1, #1
    9b02:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
    9b04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9b08:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
    9b0e:	f7ff ff2f 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9b12:	9001      	str	r0, [sp, #4]
    9b14:	e7ff      	b.n	9b16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
    9b16:	9801      	ldr	r0, [sp, #4]
    9b18:	f000 0001 	and.w	r0, r0, #1
    9b1c:	f7ff f8aa 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9b20:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9b24:	e7ff      	b.n	9b26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
    9b26:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9b2a:	07c1      	lsls	r1, r0, #31
    9b2c:	2900      	cmp	r1, #0
    9b2e:	d001      	beq.n	9b34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
    9b30:	e7ff      	b.n	9b32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
    9b32:	e001      	b.n	9b38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
    9b34:	e009      	b.n	9b4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9b36:	defe      	udf	#254	; 0xfe
            ))?;
    9b38:	f008 f885 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9b3c:	e7ff      	b.n	9b3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
    9b3e:	f00a fdf3 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9b42:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9b46:	e7ff      	b.n	9b48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
    9b48:	e7c5      	b.n	9ad6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9b4a:	2000      	movs	r0, #0
        Ok(())
    9b4c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9b50:	e7b7      	b.n	9ac2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00009b52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
        self.dx = dx;
        self.dy = dy;
    }

    /// Sets the address window for the display.
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
    9b52:	b5b0      	push	{r4, r5, r7, lr}
    9b54:	b0a2      	sub	sp, #136	; 0x88
    9b56:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
    9b5a:	469e      	mov	lr, r3
    9b5c:	4614      	mov	r4, r2
    9b5e:	460d      	mov	r5, r1
    9b60:	9015      	str	r0, [sp, #84]	; 0x54
    9b62:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    9b66:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    9b6a:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    9b6e:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    9b72:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
    9b74:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    9b78:	2100      	movs	r1, #0
    9b7a:	9110      	str	r1, [sp, #64]	; 0x40
    9b7c:	910f      	str	r1, [sp, #60]	; 0x3c
    9b7e:	910f      	str	r1, [sp, #60]	; 0x3c
    9b80:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9b82:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9b84:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9b88:	900d      	str	r0, [sp, #52]	; 0x34
    9b8a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9b8e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9b92:	940a      	str	r4, [sp, #40]	; 0x28
    9b94:	9509      	str	r5, [sp, #36]	; 0x24
    9b96:	f7ff feeb 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9b9a:	9008      	str	r0, [sp, #32]
    9b9c:	e7ff      	b.n	9b9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
    9b9e:	9808      	ldr	r0, [sp, #32]
    9ba0:	f000 0001 	and.w	r0, r0, #1
    9ba4:	f7ff f866 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9ba8:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9bac:	e7ff      	b.n	9bae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
    9bae:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9bb2:	07c1      	lsls	r1, r0, #31
    9bb4:	2900      	cmp	r1, #0
    9bb6:	d001      	beq.n	9bbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
    9bb8:	e7ff      	b.n	9bba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
    9bba:	e00d      	b.n	9bd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
    9bbc:	980d      	ldr	r0, [sp, #52]	; 0x34
    9bbe:	8a01      	ldrh	r1, [r0, #16]
    9bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9bc2:	fa11 f182 	uxtah	r1, r1, r2
    9bc6:	b28b      	uxth	r3, r1
    9bc8:	468c      	mov	ip, r1
    9bca:	428b      	cmp	r3, r1
    9bcc:	f8cd c01c 	str.w	ip, [sp, #28]
    9bd0:	f040 80c2 	bne.w	9d58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
    9bd4:	e00d      	b.n	9bf2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
    9bd6:	defe      	udf	#254	; 0xfe
    9bd8:	f008 f835 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9bdc:	e003      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
        self.write_word(ex + self.dx)?;
        self.write_command(Instruction::RASET, None)?;
        self.write_word(sy + self.dy)?;
        self.write_word(ey + self.dy)
    }
    9bde:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    9be2:	b022      	add	sp, #136	; 0x88
    9be4:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
    9be6:	f00a fd9f 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9bea:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9bee:	e7ff      	b.n	9bf0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
    9bf0:	e7f5      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9bf2:	980d      	ldr	r0, [sp, #52]	; 0x34
    9bf4:	9907      	ldr	r1, [sp, #28]
    9bf6:	f7ff fe9d 	bl	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9bfa:	9006      	str	r0, [sp, #24]
    9bfc:	e7ff      	b.n	9bfe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
    9bfe:	9806      	ldr	r0, [sp, #24]
    9c00:	f000 0001 	and.w	r0, r0, #1
    9c04:	f7ff f836 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c08:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9c0c:	e7ff      	b.n	9c0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
    9c0e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9c12:	07c1      	lsls	r1, r0, #31
    9c14:	2900      	cmp	r1, #0
    9c16:	d001      	beq.n	9c1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
    9c18:	e7ff      	b.n	9c1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
    9c1a:	e00d      	b.n	9c38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
    9c1c:	980d      	ldr	r0, [sp, #52]	; 0x34
    9c1e:	8a01      	ldrh	r1, [r0, #16]
    9c20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9c22:	fa11 f182 	uxtah	r1, r1, r2
    9c26:	b28b      	uxth	r3, r1
    9c28:	468c      	mov	ip, r1
    9c2a:	428b      	cmp	r3, r1
    9c2c:	f8cd c014 	str.w	ip, [sp, #20]
    9c30:	f040 809e 	bne.w	9d70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
    9c34:	e009      	b.n	9c4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
    9c36:	defe      	udf	#254	; 0xfe
    9c38:	f008 f805 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c3c:	e7ff      	b.n	9c3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
    9c3e:	f00a fd73 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9c42:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9c46:	e7ff      	b.n	9c48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
    9c48:	e7c9      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
    9c4a:	980d      	ldr	r0, [sp, #52]	; 0x34
    9c4c:	9905      	ldr	r1, [sp, #20]
    9c4e:	f7ff fe71 	bl	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9c52:	9004      	str	r0, [sp, #16]
    9c54:	e7ff      	b.n	9c56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
    9c56:	9804      	ldr	r0, [sp, #16]
    9c58:	f000 0001 	and.w	r0, r0, #1
    9c5c:	f7ff f80a 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c60:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    9c64:	e7ff      	b.n	9c66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
    9c66:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    9c6a:	07c1      	lsls	r1, r0, #31
    9c6c:	2900      	cmp	r1, #0
    9c6e:	d001      	beq.n	9c74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
    9c70:	e7ff      	b.n	9c72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
    9c72:	e010      	b.n	9c96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
    9c74:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
    9c76:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    9c7a:	2000      	movs	r0, #0
    9c7c:	9013      	str	r0, [sp, #76]	; 0x4c
    9c7e:	9012      	str	r0, [sp, #72]	; 0x48
    9c80:	9012      	str	r0, [sp, #72]	; 0x48
    9c82:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9c84:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9c86:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
    9c8a:	980d      	ldr	r0, [sp, #52]	; 0x34
    9c8c:	f7ff fe70 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9c90:	9003      	str	r0, [sp, #12]
    9c92:	e009      	b.n	9ca8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
    9c94:	defe      	udf	#254	; 0xfe
    9c96:	f007 ffd6 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c9a:	e7ff      	b.n	9c9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
    9c9c:	f00a fd44 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ca0:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9ca4:	e7ff      	b.n	9ca6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
    9ca6:	e79a      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
    9ca8:	9803      	ldr	r0, [sp, #12]
    9caa:	f000 0001 	and.w	r0, r0, #1
    9cae:	f7fe ffe1 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9cb2:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9cb6:	e7ff      	b.n	9cb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
    9cb8:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    9cbc:	07c1      	lsls	r1, r0, #31
    9cbe:	2900      	cmp	r1, #0
    9cc0:	d001      	beq.n	9cc6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
    9cc2:	e7ff      	b.n	9cc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
    9cc4:	e00c      	b.n	9ce0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
    9cc6:	980d      	ldr	r0, [sp, #52]	; 0x34
    9cc8:	8a41      	ldrh	r1, [r0, #18]
    9cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9ccc:	fa11 f182 	uxtah	r1, r1, r2
    9cd0:	b28b      	uxth	r3, r1
    9cd2:	468c      	mov	ip, r1
    9cd4:	428b      	cmp	r3, r1
    9cd6:	f8cd c008 	str.w	ip, [sp, #8]
    9cda:	d155      	bne.n	9d88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
    9cdc:	e009      	b.n	9cf2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
    9cde:	defe      	udf	#254	; 0xfe
    9ce0:	f007 ffb1 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ce4:	e7ff      	b.n	9ce6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
    9ce6:	f00a fd1f 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9cea:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9cee:	e7ff      	b.n	9cf0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
    9cf0:	e775      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
    9cf2:	980d      	ldr	r0, [sp, #52]	; 0x34
    9cf4:	9902      	ldr	r1, [sp, #8]
    9cf6:	f7ff fe1d 	bl	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9cfa:	9001      	str	r0, [sp, #4]
    9cfc:	e7ff      	b.n	9cfe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
    9cfe:	9801      	ldr	r0, [sp, #4]
    9d00:	f000 0001 	and.w	r0, r0, #1
    9d04:	f7fe ffb6 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d08:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    9d0c:	e7ff      	b.n	9d0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
    9d0e:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    9d12:	07c1      	lsls	r1, r0, #31
    9d14:	2900      	cmp	r1, #0
    9d16:	d001      	beq.n	9d1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
    9d18:	e7ff      	b.n	9d1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
    9d1a:	e00c      	b.n	9d36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
    9d1c:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d1e:	8a41      	ldrh	r1, [r0, #18]
    9d20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9d22:	fa11 f182 	uxtah	r1, r1, r2
    9d26:	b28b      	uxth	r3, r1
    9d28:	468c      	mov	ip, r1
    9d2a:	428b      	cmp	r3, r1
    9d2c:	f8cd c000 	str.w	ip, [sp]
    9d30:	d136      	bne.n	9da0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
    9d32:	e009      	b.n	9d48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
    9d34:	defe      	udf	#254	; 0xfe
    9d36:	f007 ff86 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d3a:	e7ff      	b.n	9d3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
    9d3c:	f00a fcf4 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d40:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9d44:	e7ff      	b.n	9d46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
    9d46:	e74a      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
    9d48:	980d      	ldr	r0, [sp, #52]	; 0x34
    9d4a:	9900      	ldr	r1, [sp, #0]
    9d4c:	f7ff fdf2 	bl	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9d50:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9d54:	e7ff      	b.n	9d56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
    9d56:	e742      	b.n	9bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9d58:	f64b 7040 	movw	r0, #48960	; 0xbf40
    9d5c:	f2c0 0001 	movt	r0, #1
    9d60:	f64b 7224 	movw	r2, #48932	; 0xbf24
    9d64:	f2c0 0201 	movt	r2, #1
    9d68:	211c      	movs	r1, #28
    9d6a:	f00b fbb5 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9d6e:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
    9d70:	f64b 7040 	movw	r0, #48960	; 0xbf40
    9d74:	f2c0 0001 	movt	r0, #1
    9d78:	f64b 725c 	movw	r2, #48988	; 0xbf5c
    9d7c:	f2c0 0201 	movt	r2, #1
    9d80:	211c      	movs	r1, #28
    9d82:	f00b fba9 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9d86:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
    9d88:	f64b 7040 	movw	r0, #48960	; 0xbf40
    9d8c:	f2c0 0001 	movt	r0, #1
    9d90:	f64b 726c 	movw	r2, #49004	; 0xbf6c
    9d94:	f2c0 0201 	movt	r2, #1
    9d98:	211c      	movs	r1, #28
    9d9a:	f00b fb9d 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9d9e:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
    9da0:	f64b 7040 	movw	r0, #48960	; 0xbf40
    9da4:	f2c0 0001 	movt	r0, #1
    9da8:	f64b 727c 	movw	r2, #49020	; 0xbf7c
    9dac:	f2c0 0201 	movt	r2, #1
    9db0:	211c      	movs	r1, #28
    9db2:	f00b fb91 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9db6:	defe      	udf	#254	; 0xfe

00009db8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
    9db8:	b5b0      	push	{r4, r5, r7, lr}
    9dba:	b08a      	sub	sp, #40	; 0x28
    9dbc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    9dc0:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    9dc4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9dc6:	9106      	str	r1, [sp, #24]
    9dc8:	9207      	str	r2, [sp, #28]
    9dca:	9308      	str	r3, [sp, #32]
    9dcc:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    9dd0:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
    9dd4:	9100      	str	r1, [sp, #0]
    9dd6:	9201      	str	r2, [sp, #4]
    9dd8:	9302      	str	r3, [sp, #8]
    9dda:	9403      	str	r4, [sp, #12]
    9ddc:	f88d e014 	strb.w	lr, [sp, #20]
    9de0:	f88d c015 	strb.w	ip, [sp, #21]
    9de4:	2100      	movs	r1, #0
    9de6:	f8ad 1010 	strh.w	r1, [sp, #16]
    9dea:	f8ad 1012 	strh.w	r1, [sp, #18]
    9dee:	4669      	mov	r1, sp
        display
    9df0:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9df4:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
    9df8:	b00a      	add	sp, #40	; 0x28
    9dfa:	bdb0      	pop	{r4, r5, r7, pc}

00009dfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
    9dfc:	b580      	push	{r7, lr}
    9dfe:	b0f6      	sub	sp, #472	; 0x1d8
    9e00:	904e      	str	r0, [sp, #312]	; 0x138
    9e02:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
    9e04:	9117      	str	r1, [sp, #92]	; 0x5c
    9e06:	9016      	str	r0, [sp, #88]	; 0x58
    9e08:	f008 fc1e 	bl	12648 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
    9e0c:	9015      	str	r0, [sp, #84]	; 0x54
    9e0e:	e7ff      	b.n	9e10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
    9e10:	f64b 718c 	movw	r1, #49036	; 0xbf8c
    9e14:	f2c0 0101 	movt	r1, #1
    9e18:	f64b 739c 	movw	r3, #49052	; 0xbf9c
    9e1c:	f2c0 0301 	movt	r3, #1
    9e20:	220d      	movs	r2, #13
    9e22:	9815      	ldr	r0, [sp, #84]	; 0x54
    9e24:	f7fe feed 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9e28:	e7ff      	b.n	9e2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
    9e2a:	9816      	ldr	r0, [sp, #88]	; 0x58
    9e2c:	f7ff fcfa 	bl	9824 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
    9e30:	9014      	str	r0, [sp, #80]	; 0x50
    9e32:	e7ff      	b.n	9e34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
    9e34:	9814      	ldr	r0, [sp, #80]	; 0x50
    9e36:	f000 0001 	and.w	r0, r0, #1
    9e3a:	f7fe ff1b 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e3e:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    9e42:	e7ff      	b.n	9e44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
    9e44:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
    9e48:	07c1      	lsls	r1, r0, #31
    9e4a:	2900      	cmp	r1, #0
    9e4c:	d001      	beq.n	9e52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
    9e4e:	e7ff      	b.n	9e50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
    9e50:	e010      	b.n	9e74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
    9e52:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
    9e54:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    9e58:	2000      	movs	r0, #0
    9e5a:	901a      	str	r0, [sp, #104]	; 0x68
    9e5c:	9019      	str	r0, [sp, #100]	; 0x64
    9e5e:	9019      	str	r0, [sp, #100]	; 0x64
    9e60:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9e62:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9e64:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    9e68:	9816      	ldr	r0, [sp, #88]	; 0x58
    9e6a:	f7ff fd81 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e6e:	9013      	str	r0, [sp, #76]	; 0x4c
    9e70:	e00d      	b.n	9e8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
    9e72:	defe      	udf	#254	; 0xfe
    9e74:	f007 fee7 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e78:	e003      	b.n	9e82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
    9e7a:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    9e7e:	b076      	add	sp, #472	; 0x1d8
    9e80:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
    9e82:	f00a fc51 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e86:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9e8a:	e7ff      	b.n	9e8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
    9e8c:	e7f5      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
    9e8e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    9e90:	f000 0001 	and.w	r0, r0, #1
    9e94:	f7fe feee 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e98:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    9e9c:	e7ff      	b.n	9e9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
    9e9e:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    9ea2:	07c1      	lsls	r1, r0, #31
    9ea4:	2900      	cmp	r1, #0
    9ea6:	d001      	beq.n	9eac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
    9ea8:	e7ff      	b.n	9eaa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
    9eaa:	e005      	b.n	9eb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
    9eac:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    9eae:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9eb0:	f00a f9c5 	bl	1423e <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    9eb4:	e009      	b.n	9eca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
    9eb6:	defe      	udf	#254	; 0xfe
    9eb8:	f007 fec5 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ebc:	e7ff      	b.n	9ebe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
    9ebe:	f00a fc33 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ec2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9ec6:	e7ff      	b.n	9ec8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
    9ec8:	e7d7      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    9eca:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
    9ecc:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    9ed0:	2000      	movs	r0, #0
    9ed2:	901d      	str	r0, [sp, #116]	; 0x74
    9ed4:	901c      	str	r0, [sp, #112]	; 0x70
    9ed6:	901c      	str	r0, [sp, #112]	; 0x70
    9ed8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9eda:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9edc:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
    9ee0:	9816      	ldr	r0, [sp, #88]	; 0x58
    9ee2:	f7ff fd45 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9ee6:	9012      	str	r0, [sp, #72]	; 0x48
    9ee8:	e7ff      	b.n	9eea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
    9eea:	9812      	ldr	r0, [sp, #72]	; 0x48
    9eec:	f000 0001 	and.w	r0, r0, #1
    9ef0:	f7fe fec0 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9ef4:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
    9ef8:	e7ff      	b.n	9efa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
    9efa:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
    9efe:	07c1      	lsls	r1, r0, #31
    9f00:	2900      	cmp	r1, #0
    9f02:	d001      	beq.n	9f08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
    9f04:	e7ff      	b.n	9f06 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
    9f06:	e005      	b.n	9f14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
    9f08:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    9f0a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9f0c:	f00a f997 	bl	1423e <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    9f10:	e009      	b.n	9f26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
    9f12:	defe      	udf	#254	; 0xfe
    9f14:	f007 fe97 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f18:	e7ff      	b.n	9f1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
    9f1a:	f00a fc05 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9f1e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9f22:	e7ff      	b.n	9f24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
    9f24:	e7a9      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    9f26:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    9f28:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    9f2c:	f64b 70b0 	movw	r0, #49072	; 0xbfb0
    9f30:	f2c0 0001 	movt	r0, #1
    9f34:	6800      	ldr	r0, [r0, #0]
    9f36:	901f      	str	r0, [sp, #124]	; 0x7c
    9f38:	2003      	movs	r0, #3
    9f3a:	9020      	str	r0, [sp, #128]	; 0x80
    9f3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9f3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9f40:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    9f44:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f46:	f7ff fd13 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f4a:	9011      	str	r0, [sp, #68]	; 0x44
    9f4c:	e7ff      	b.n	9f4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
    9f4e:	9811      	ldr	r0, [sp, #68]	; 0x44
    9f50:	f000 0001 	and.w	r0, r0, #1
    9f54:	f7fe fe8e 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f58:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    9f5c:	e7ff      	b.n	9f5e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
    9f5e:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    9f62:	07c1      	lsls	r1, r0, #31
    9f64:	2900      	cmp	r1, #0
    9f66:	d001      	beq.n	9f6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
    9f68:	e7ff      	b.n	9f6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
    9f6a:	e014      	b.n	9f96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
    9f6c:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9f6e:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    9f72:	f64b 70b0 	movw	r0, #49072	; 0xbfb0
    9f76:	f2c0 0001 	movt	r0, #1
    9f7a:	6800      	ldr	r0, [r0, #0]
    9f7c:	9022      	str	r0, [sp, #136]	; 0x88
    9f7e:	2003      	movs	r0, #3
    9f80:	9023      	str	r0, [sp, #140]	; 0x8c
    9f82:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9f84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9f86:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
    9f8a:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f8c:	f7ff fcf0 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f90:	9010      	str	r0, [sp, #64]	; 0x40
    9f92:	e009      	b.n	9fa8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    9f94:	defe      	udf	#254	; 0xfe
    9f96:	f007 fe56 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f9a:	e7ff      	b.n	9f9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
    9f9c:	f00a fbc4 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9fa0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9fa4:	e7ff      	b.n	9fa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
    9fa6:	e768      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9fa8:	9810      	ldr	r0, [sp, #64]	; 0x40
    9faa:	f000 0001 	and.w	r0, r0, #1
    9fae:	f7fe fe61 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9fb2:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
    9fb6:	e7ff      	b.n	9fb8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
    9fb8:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
    9fbc:	07c1      	lsls	r1, r0, #31
    9fbe:	2900      	cmp	r1, #0
    9fc0:	d001      	beq.n	9fc6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
    9fc2:	e7ff      	b.n	9fc4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
    9fc4:	e014      	b.n	9ff0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
    9fc6:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
    9fc8:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    9fcc:	f64b 70bc 	movw	r0, #49084	; 0xbfbc
    9fd0:	f2c0 0001 	movt	r0, #1
    9fd4:	6800      	ldr	r0, [r0, #0]
    9fd6:	9025      	str	r0, [sp, #148]	; 0x94
    9fd8:	2006      	movs	r0, #6
    9fda:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
    9fdc:	9a25      	ldr	r2, [sp, #148]	; 0x94
    9fde:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9fe0:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
    9fe4:	9816      	ldr	r0, [sp, #88]	; 0x58
    9fe6:	f7ff fcc3 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9fea:	900f      	str	r0, [sp, #60]	; 0x3c
    9fec:	e009      	b.n	a002 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9fee:	defe      	udf	#254	; 0xfe
    9ff0:	f007 fe29 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ff4:	e7ff      	b.n	9ff6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
    9ff6:	f00a fb97 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ffa:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9ffe:	e7ff      	b.n	a000 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
    a000:	e73b      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
    a002:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a004:	f000 0001 	and.w	r0, r0, #1
    a008:	f7fe fe34 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a00c:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
    a010:	e7ff      	b.n	a012 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a012:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
    a016:	07c1      	lsls	r1, r0, #31
    a018:	2900      	cmp	r1, #0
    a01a:	d001      	beq.n	a020 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
    a01c:	e7ff      	b.n	a01e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
    a01e:	e014      	b.n	a04a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
    a020:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a022:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
    a026:	f64b 70c4 	movw	r0, #49092	; 0xbfc4
    a02a:	f2c0 0001 	movt	r0, #1
    a02e:	6800      	ldr	r0, [r0, #0]
    a030:	9028      	str	r0, [sp, #160]	; 0xa0
    a032:	2001      	movs	r0, #1
    a034:	9029      	str	r0, [sp, #164]	; 0xa4
    a036:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    a038:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    a03a:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
    a03e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a040:	f7ff fc96 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a044:	900e      	str	r0, [sp, #56]	; 0x38
    a046:	e009      	b.n	a05c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
    a048:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    a04a:	f007 fdfc 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a04e:	e7ff      	b.n	a050 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
    a050:	f00a fb6a 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a054:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a058:	e7ff      	b.n	a05a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
    a05a:	e70e      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a05c:	980e      	ldr	r0, [sp, #56]	; 0x38
    a05e:	f000 0001 	and.w	r0, r0, #1
    a062:	f7fe fe07 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a066:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
    a06a:	e7ff      	b.n	a06c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
    a06c:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
    a070:	07c1      	lsls	r1, r0, #31
    a072:	2900      	cmp	r1, #0
    a074:	d001      	beq.n	a07a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
    a076:	e7ff      	b.n	a078 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
    a078:	e014      	b.n	a0a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
    a07a:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a07c:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
    a080:	f64b 70cc 	movw	r0, #49100	; 0xbfcc
    a084:	f2c0 0001 	movt	r0, #1
    a088:	6800      	ldr	r0, [r0, #0]
    a08a:	902b      	str	r0, [sp, #172]	; 0xac
    a08c:	2003      	movs	r0, #3
    a08e:	902c      	str	r0, [sp, #176]	; 0xb0
    a090:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    a092:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    a094:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
    a098:	9816      	ldr	r0, [sp, #88]	; 0x58
    a09a:	f7ff fc69 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a09e:	900d      	str	r0, [sp, #52]	; 0x34
    a0a0:	e009      	b.n	a0b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    a0a2:	defe      	udf	#254	; 0xfe
    a0a4:	f007 fdcf 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a0a8:	e7ff      	b.n	a0aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
    a0aa:	f00a fb3d 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a0ae:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a0b2:	e7ff      	b.n	a0b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
    a0b4:	e6e1      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a0b6:	980d      	ldr	r0, [sp, #52]	; 0x34
    a0b8:	f000 0001 	and.w	r0, r0, #1
    a0bc:	f7fe fdda 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a0c0:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
    a0c4:	e7ff      	b.n	a0c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
    a0c6:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
    a0ca:	07c1      	lsls	r1, r0, #31
    a0cc:	2900      	cmp	r1, #0
    a0ce:	d001      	beq.n	a0d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
    a0d0:	e7ff      	b.n	a0d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
    a0d2:	e014      	b.n	a0fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
    a0d4:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a0d6:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
    a0da:	f64b 70d4 	movw	r0, #49108	; 0xbfd4
    a0de:	f2c0 0001 	movt	r0, #1
    a0e2:	6800      	ldr	r0, [r0, #0]
    a0e4:	902e      	str	r0, [sp, #184]	; 0xb8
    a0e6:	2001      	movs	r0, #1
    a0e8:	902f      	str	r0, [sp, #188]	; 0xbc
    a0ea:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    a0ec:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    a0ee:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
    a0f2:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0f4:	f7ff fc3c 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0f8:	900c      	str	r0, [sp, #48]	; 0x30
    a0fa:	e009      	b.n	a110 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    a0fc:	defe      	udf	#254	; 0xfe
    a0fe:	f007 fda2 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a102:	e7ff      	b.n	a104 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
    a104:	f00a fb10 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a108:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a10c:	e7ff      	b.n	a10e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
    a10e:	e6b4      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a110:	980c      	ldr	r0, [sp, #48]	; 0x30
    a112:	f000 0001 	and.w	r0, r0, #1
    a116:	f7fe fdad 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a11a:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
    a11e:	e7ff      	b.n	a120 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
    a120:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
    a124:	07c1      	lsls	r1, r0, #31
    a126:	2900      	cmp	r1, #0
    a128:	d001      	beq.n	a12e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
    a12a:	e7ff      	b.n	a12c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
    a12c:	e014      	b.n	a158 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
    a12e:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a130:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
    a134:	f64b 70dc 	movw	r0, #49116	; 0xbfdc
    a138:	f2c0 0001 	movt	r0, #1
    a13c:	6800      	ldr	r0, [r0, #0]
    a13e:	9031      	str	r0, [sp, #196]	; 0xc4
    a140:	2002      	movs	r0, #2
    a142:	9032      	str	r0, [sp, #200]	; 0xc8
    a144:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    a146:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    a148:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
    a14c:	9816      	ldr	r0, [sp, #88]	; 0x58
    a14e:	f7ff fc0f 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a152:	900b      	str	r0, [sp, #44]	; 0x2c
    a154:	e009      	b.n	a16a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    a156:	defe      	udf	#254	; 0xfe
    a158:	f007 fd75 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a15c:	e7ff      	b.n	a15e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
    a15e:	f00a fae3 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a162:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a166:	e7ff      	b.n	a168 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
    a168:	e687      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a16a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    a16c:	f000 0001 	and.w	r0, r0, #1
    a170:	f7fe fd80 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a174:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
    a178:	e7ff      	b.n	a17a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
    a17a:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
    a17e:	07c1      	lsls	r1, r0, #31
    a180:	2900      	cmp	r1, #0
    a182:	d001      	beq.n	a188 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
    a184:	e7ff      	b.n	a186 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
    a186:	e014      	b.n	a1b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
    a188:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a18a:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
    a18e:	f64b 70e4 	movw	r0, #49124	; 0xbfe4
    a192:	f2c0 0001 	movt	r0, #1
    a196:	6800      	ldr	r0, [r0, #0]
    a198:	9034      	str	r0, [sp, #208]	; 0xd0
    a19a:	2002      	movs	r0, #2
    a19c:	9035      	str	r0, [sp, #212]	; 0xd4
    a19e:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    a1a0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    a1a2:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
    a1a6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1a8:	f7ff fbe2 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1ac:	900a      	str	r0, [sp, #40]	; 0x28
    a1ae:	e009      	b.n	a1c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    a1b0:	defe      	udf	#254	; 0xfe
    a1b2:	f007 fd48 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a1b6:	e7ff      	b.n	a1b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
    a1b8:	f00a fab6 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a1bc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a1c0:	e7ff      	b.n	a1c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
    a1c2:	e65a      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a1c4:	980a      	ldr	r0, [sp, #40]	; 0x28
    a1c6:	f000 0001 	and.w	r0, r0, #1
    a1ca:	f7fe fd53 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a1ce:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
    a1d2:	e7ff      	b.n	a1d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
    a1d4:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
    a1d8:	07c1      	lsls	r1, r0, #31
    a1da:	2900      	cmp	r1, #0
    a1dc:	d001      	beq.n	a1e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
    a1de:	e7ff      	b.n	a1e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
    a1e0:	e014      	b.n	a20c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
    a1e2:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a1e4:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
    a1e8:	f64b 70ec 	movw	r0, #49132	; 0xbfec
    a1ec:	f2c0 0001 	movt	r0, #1
    a1f0:	6800      	ldr	r0, [r0, #0]
    a1f2:	9037      	str	r0, [sp, #220]	; 0xdc
    a1f4:	2002      	movs	r0, #2
    a1f6:	9038      	str	r0, [sp, #224]	; 0xe0
    a1f8:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    a1fa:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    a1fc:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
    a200:	9816      	ldr	r0, [sp, #88]	; 0x58
    a202:	f7ff fbb5 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a206:	9009      	str	r0, [sp, #36]	; 0x24
    a208:	e009      	b.n	a21e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a20a:	defe      	udf	#254	; 0xfe
    a20c:	f007 fd1b 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a210:	e7ff      	b.n	a212 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
    a212:	f00a fa89 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a216:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a21a:	e7ff      	b.n	a21c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
    a21c:	e62d      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a21e:	9809      	ldr	r0, [sp, #36]	; 0x24
    a220:	f000 0001 	and.w	r0, r0, #1
    a224:	f7fe fd26 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a228:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
    a22c:	e7ff      	b.n	a22e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
    a22e:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
    a232:	07c1      	lsls	r1, r0, #31
    a234:	2900      	cmp	r1, #0
    a236:	d001      	beq.n	a23c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
    a238:	e7ff      	b.n	a23a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
    a23a:	e014      	b.n	a266 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
    a23c:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a23e:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
    a242:	f64b 70f4 	movw	r0, #49140	; 0xbff4
    a246:	f2c0 0001 	movt	r0, #1
    a24a:	6800      	ldr	r0, [r0, #0]
    a24c:	903a      	str	r0, [sp, #232]	; 0xe8
    a24e:	2001      	movs	r0, #1
    a250:	903b      	str	r0, [sp, #236]	; 0xec
    a252:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    a254:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    a256:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
    a25a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a25c:	f7ff fb88 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a260:	9008      	str	r0, [sp, #32]
    a262:	e009      	b.n	a278 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a264:	defe      	udf	#254	; 0xfe
    a266:	f007 fcee 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a26a:	e7ff      	b.n	a26c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
    a26c:	f00a fa5c 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a270:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a274:	e7ff      	b.n	a276 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
    a276:	e600      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a278:	9808      	ldr	r0, [sp, #32]
    a27a:	f000 0001 	and.w	r0, r0, #1
    a27e:	f7fe fcf9 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a282:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
    a286:	e7ff      	b.n	a288 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
    a288:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
    a28c:	07c1      	lsls	r1, r0, #31
    a28e:	2900      	cmp	r1, #0
    a290:	d001      	beq.n	a296 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
    a292:	e7ff      	b.n	a294 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
    a294:	e006      	b.n	a2a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
    a296:	9816      	ldr	r0, [sp, #88]	; 0x58
    a298:	7d41      	ldrb	r1, [r0, #21]
    a29a:	07c9      	lsls	r1, r1, #31
    a29c:	2900      	cmp	r1, #0
    a29e:	d11a      	bne.n	a2d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
    a2a0:	e009      	b.n	a2b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a2a2:	defe      	udf	#254	; 0xfe
    a2a4:	f007 fccf 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a2a8:	e7ff      	b.n	a2aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
    a2aa:	f00a fa3d 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2ae:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a2b2:	e7ff      	b.n	a2b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
    a2b4:	e5e1      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a2b6:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
    a2b8:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    a2bc:	2000      	movs	r0, #0
    a2be:	9041      	str	r0, [sp, #260]	; 0x104
    a2c0:	9040      	str	r0, [sp, #256]	; 0x100
    a2c2:	9040      	str	r0, [sp, #256]	; 0x100
    a2c4:	9a40      	ldr	r2, [sp, #256]	; 0x100
    a2c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
    a2c8:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
    a2cc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2ce:	f7ff fb4f 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2d2:	9007      	str	r0, [sp, #28]
    a2d4:	e02a      	b.n	a32c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
    a2d6:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
    a2d8:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    a2dc:	2000      	movs	r0, #0
    a2de:	903e      	str	r0, [sp, #248]	; 0xf8
    a2e0:	903d      	str	r0, [sp, #244]	; 0xf4
    a2e2:	903d      	str	r0, [sp, #244]	; 0xf4
    a2e4:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    a2e6:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    a2e8:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
    a2ec:	9816      	ldr	r0, [sp, #88]	; 0x58
    a2ee:	f7ff fb3f 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a2f2:	9006      	str	r0, [sp, #24]
    a2f4:	e7ff      	b.n	a2f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
    a2f6:	9806      	ldr	r0, [sp, #24]
    a2f8:	f000 0001 	and.w	r0, r0, #1
    a2fc:	f7fe fcba 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a300:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
    a304:	e7ff      	b.n	a306 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
    a306:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
    a30a:	07c1      	lsls	r1, r0, #31
    a30c:	2900      	cmp	r1, #0
    a30e:	d001      	beq.n	a314 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
    a310:	e7ff      	b.n	a312 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
    a312:	e001      	b.n	a318 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
    a314:	e024      	b.n	a360 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
    a316:	defe      	udf	#254	; 0xfe
    a318:	f007 fc95 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a31c:	e7ff      	b.n	a31e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
    a31e:	f00a fa03 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a322:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a326:	e7ff      	b.n	a328 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
    a328:	e7ff      	b.n	a32a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
    a32a:	e5a6      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
    a32c:	9807      	ldr	r0, [sp, #28]
    a32e:	f000 0001 	and.w	r0, r0, #1
    a332:	f7fe fc9f 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a336:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
    a33a:	e7ff      	b.n	a33c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
    a33c:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
    a340:	07c1      	lsls	r1, r0, #31
    a342:	2900      	cmp	r1, #0
    a344:	d001      	beq.n	a34a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
    a346:	e7ff      	b.n	a348 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
    a348:	e001      	b.n	a34e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
    a34a:	e009      	b.n	a360 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
    a34c:	defe      	udf	#254	; 0xfe
    a34e:	f007 fc7a 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a352:	e7ff      	b.n	a354 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
    a354:	f00a f9e8 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a358:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a35c:	e7ff      	b.n	a35e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
    a35e:	e7e4      	b.n	a32a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
    a360:	9816      	ldr	r0, [sp, #88]	; 0x58
    a362:	7d01      	ldrb	r1, [r0, #20]
    a364:	07c9      	lsls	r1, r1, #31
    a366:	2900      	cmp	r1, #0
    a368:	d114      	bne.n	a394 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
    a36a:	e7ff      	b.n	a36c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
    a36c:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a36e:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    a372:	f24c 0004 	movw	r0, #49156	; 0xc004
    a376:	f2c0 0001 	movt	r0, #1
    a37a:	6800      	ldr	r0, [r0, #0]
    a37c:	9046      	str	r0, [sp, #280]	; 0x118
    a37e:	2001      	movs	r0, #1
    a380:	9047      	str	r0, [sp, #284]	; 0x11c
    a382:	9a46      	ldr	r2, [sp, #280]	; 0x118
    a384:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a386:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
    a38a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a38c:	f7ff faf0 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a390:	9005      	str	r0, [sp, #20]
    a392:	e02e      	b.n	a3f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
    a394:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a396:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
    a39a:	f64b 70fc 	movw	r0, #49148	; 0xbffc
    a39e:	f2c0 0001 	movt	r0, #1
    a3a2:	6800      	ldr	r0, [r0, #0]
    a3a4:	9043      	str	r0, [sp, #268]	; 0x10c
    a3a6:	2001      	movs	r0, #1
    a3a8:	9044      	str	r0, [sp, #272]	; 0x110
    a3aa:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a3ac:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a3ae:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
    a3b2:	9816      	ldr	r0, [sp, #88]	; 0x58
    a3b4:	f7ff fadc 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a3b8:	9004      	str	r0, [sp, #16]
    a3ba:	e7ff      	b.n	a3bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
    a3bc:	9804      	ldr	r0, [sp, #16]
    a3be:	f000 0001 	and.w	r0, r0, #1
    a3c2:	f7fe fc57 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3c6:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
    a3ca:	e7ff      	b.n	a3cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
    a3cc:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
    a3d0:	07c1      	lsls	r1, r0, #31
    a3d2:	2900      	cmp	r1, #0
    a3d4:	d001      	beq.n	a3da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
    a3d6:	e7ff      	b.n	a3d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
    a3d8:	e001      	b.n	a3de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
    a3da:	e024      	b.n	a426 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a3dc:	defe      	udf	#254	; 0xfe
    a3de:	f007 fc32 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a3e2:	e7ff      	b.n	a3e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
    a3e4:	f00a f9a0 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a3e8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a3ec:	e7ff      	b.n	a3ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
    a3ee:	e7ff      	b.n	a3f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a3f0:	e543      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a3f2:	9805      	ldr	r0, [sp, #20]
    a3f4:	f000 0001 	and.w	r0, r0, #1
    a3f8:	f7fe fc3c 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a3fc:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
    a400:	e7ff      	b.n	a402 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
    a402:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    a406:	07c1      	lsls	r1, r0, #31
    a408:	2900      	cmp	r1, #0
    a40a:	d001      	beq.n	a410 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
    a40c:	e7ff      	b.n	a40e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
    a40e:	e001      	b.n	a414 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
    a410:	e009      	b.n	a426 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a412:	defe      	udf	#254	; 0xfe
    a414:	f007 fc17 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a418:	e7ff      	b.n	a41a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
    a41a:	f00a f985 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a41e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a422:	e7ff      	b.n	a424 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
    a424:	e7e4      	b.n	a3f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a426:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a428:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
    a42c:	f24c 000c 	movw	r0, #49164	; 0xc00c
    a430:	f2c0 0001 	movt	r0, #1
    a434:	6800      	ldr	r0, [r0, #0]
    a436:	9049      	str	r0, [sp, #292]	; 0x124
    a438:	2001      	movs	r0, #1
    a43a:	904a      	str	r0, [sp, #296]	; 0x128
    a43c:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a43e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    a440:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
    a444:	9816      	ldr	r0, [sp, #88]	; 0x58
    a446:	f7ff fa93 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a44a:	9003      	str	r0, [sp, #12]
    a44c:	e7ff      	b.n	a44e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
    a44e:	9803      	ldr	r0, [sp, #12]
    a450:	f000 0001 	and.w	r0, r0, #1
    a454:	f7fe fc0e 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a458:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
    a45c:	e7ff      	b.n	a45e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
    a45e:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
    a462:	07c1      	lsls	r1, r0, #31
    a464:	2900      	cmp	r1, #0
    a466:	d001      	beq.n	a46c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
    a468:	e7ff      	b.n	a46a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
    a46a:	e010      	b.n	a48e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
    a46c:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
    a46e:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
    a472:	2000      	movs	r0, #0
    a474:	904d      	str	r0, [sp, #308]	; 0x134
    a476:	904c      	str	r0, [sp, #304]	; 0x130
    a478:	904c      	str	r0, [sp, #304]	; 0x130
    a47a:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    a47c:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    a47e:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
    a482:	9816      	ldr	r0, [sp, #88]	; 0x58
    a484:	f7ff fa74 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a488:	9002      	str	r0, [sp, #8]
    a48a:	e009      	b.n	a4a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a48c:	defe      	udf	#254	; 0xfe
    a48e:	f007 fbda 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a492:	e7ff      	b.n	a494 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
    a494:	f00a f948 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a498:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a49c:	e7ff      	b.n	a49e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
    a49e:	e4ec      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
    a4a0:	9802      	ldr	r0, [sp, #8]
    a4a2:	f000 0001 	and.w	r0, r0, #1
    a4a6:	f7fe fbe5 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a4aa:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
    a4ae:	e7ff      	b.n	a4b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
    a4b0:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
    a4b4:	07c1      	lsls	r1, r0, #31
    a4b6:	2900      	cmp	r1, #0
    a4b8:	d001      	beq.n	a4be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
    a4ba:	e7ff      	b.n	a4bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
    a4bc:	e005      	b.n	a4ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
    a4be:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a4c0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a4c2:	f009 febc 	bl	1423e <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a4c6:	e009      	b.n	a4dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
    a4c8:	defe      	udf	#254	; 0xfe
    a4ca:	f007 fbbc 	bl	11c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a4ce:	e7ff      	b.n	a4d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
    a4d0:	f00a f92a 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a4d4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a4d8:	e7ff      	b.n	a4da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
    a4da:	e4ce      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    a4dc:	f008 feea 	bl	132b4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    a4e0:	9001      	str	r0, [sp, #4]
    a4e2:	e7ff      	b.n	a4e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
    a4e4:	f64b 613c 	movw	r1, #48700	; 0xbe3c
    a4e8:	f2c0 0101 	movt	r1, #1
    a4ec:	f24c 0310 	movw	r3, #49168	; 0xc010
    a4f0:	f2c0 0301 	movt	r3, #1
    a4f4:	220e      	movs	r2, #14
    a4f6:	9801      	ldr	r0, [sp, #4]
    a4f8:	f7fe fb83 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a4fc:	e7ff      	b.n	a4fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
    a4fe:	2000      	movs	r0, #0
        Ok(())
    a500:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
    a504:	e4b9      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

0000a506 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
    a506:	b580      	push	{r7, lr}
    a508:	b08a      	sub	sp, #40	; 0x28
    a50a:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    a50c:	f000 fa25 	bl	a95a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
    a510:	9307      	str	r3, [sp, #28]
    a512:	9206      	str	r2, [sp, #24]
    a514:	9105      	str	r1, [sp, #20]
    a516:	9004      	str	r0, [sp, #16]
    a518:	e7ff      	b.n	a51a <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
    a51a:	a804      	add	r0, sp, #16
    a51c:	f009 ff06 	bl	1432c <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    a520:	9003      	str	r0, [sp, #12]
    a522:	e7ff      	b.n	a524 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
    a524:	9803      	ldr	r0, [sp, #12]
    a526:	f009 ff77 	bl	14418 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    a52a:	9002      	str	r0, [sp, #8]
    a52c:	9101      	str	r1, [sp, #4]
    a52e:	e7ff      	b.n	a530 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
    a530:	9802      	ldr	r0, [sp, #8]
    a532:	f000 0001 	and.w	r0, r0, #1
    a536:	9901      	ldr	r1, [sp, #4]
    a538:	b00a      	add	sp, #40	; 0x28
    a53a:	bd80      	pop	{r7, pc}

0000a53c <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
    a53c:	b082      	sub	sp, #8
    a53e:	4601      	mov	r1, r0
    a540:	f8ad 0004 	strh.w	r0, [sp, #4]
    a544:	ba00      	rev	r0, r0
    a546:	0c00      	lsrs	r0, r0, #16
    a548:	f8ad 0006 	strh.w	r0, [sp, #6]
    a54c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a550:	9000      	str	r0, [sp, #0]
    a552:	e7ff      	b.n	a554 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
    a554:	9800      	ldr	r0, [sp, #0]
    a556:	b002      	add	sp, #8
    a558:	4770      	bx	lr

0000a55a <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
    a55a:	b580      	push	{r7, lr}
    a55c:	b084      	sub	sp, #16
    a55e:	4601      	mov	r1, r0
    a560:	f8ad 000e 	strh.w	r0, [sp, #14]
    a564:	9102      	str	r1, [sp, #8]
    a566:	f7ff ffe9 	bl	a53c <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
    a56a:	9001      	str	r0, [sp, #4]
    a56c:	e7ff      	b.n	a56e <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
    a56e:	9801      	ldr	r0, [sp, #4]
    a570:	b004      	add	sp, #16
    a572:	bd80      	pop	{r7, pc}

0000a574 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
    a574:	b580      	push	{r7, lr}
    a576:	b084      	sub	sp, #16
    a578:	9002      	str	r0, [sp, #8]
    a57a:	9802      	ldr	r0, [sp, #8]
    a57c:	f009 fe97 	bl	142ae <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
    a580:	9001      	str	r0, [sp, #4]
    a582:	9100      	str	r1, [sp, #0]
    a584:	e7ff      	b.n	a586 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
    a586:	9801      	ldr	r0, [sp, #4]
    a588:	f000 0001 	and.w	r0, r0, #1
    a58c:	9900      	ldr	r1, [sp, #0]
    a58e:	b004      	add	sp, #16
    a590:	bd80      	pop	{r7, pc}

0000a592 <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
    a592:	b081      	sub	sp, #4
    a594:	9000      	str	r0, [sp, #0]
    a596:	b001      	add	sp, #4
    a598:	4770      	bx	lr

0000a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
    a59a:	b089      	sub	sp, #36	; 0x24
    a59c:	9005      	str	r0, [sp, #20]
    a59e:	9106      	str	r1, [sp, #24]
    a5a0:	9107      	str	r1, [sp, #28]
    a5a2:	9907      	ldr	r1, [sp, #28]
    a5a4:	9002      	str	r0, [sp, #8]
    a5a6:	9101      	str	r1, [sp, #4]
    a5a8:	e7ff      	b.n	a5aa <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
    a5aa:	9802      	ldr	r0, [sp, #8]
    a5ac:	9008      	str	r0, [sp, #32]
    a5ae:	9908      	ldr	r1, [sp, #32]
    a5b0:	9100      	str	r1, [sp, #0]
    a5b2:	e7ff      	b.n	a5b4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
    a5b4:	9800      	ldr	r0, [sp, #0]
    a5b6:	9003      	str	r0, [sp, #12]
    a5b8:	9901      	ldr	r1, [sp, #4]
    a5ba:	9104      	str	r1, [sp, #16]
    a5bc:	9803      	ldr	r0, [sp, #12]
    a5be:	9904      	ldr	r1, [sp, #16]
    a5c0:	b009      	add	sp, #36	; 0x24
    a5c2:	4770      	bx	lr

0000a5c4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
    a5c4:	b08a      	sub	sp, #40	; 0x28
    a5c6:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
    a5c8:	7800      	ldrb	r0, [r0, #0]
    a5ca:	9001      	str	r0, [sp, #4]
    a5cc:	9901      	ldr	r1, [sp, #4]
    a5ce:	e8df f011 	tbh	[pc, r1, lsl #1]
    a5d2:	0103      	.short	0x0103
    a5d4:	01020107 	.word	0x01020107
    a5d8:	010c0102 	.word	0x010c0102
    a5dc:	01020102 	.word	0x01020102
    a5e0:	01020102 	.word	0x01020102
    a5e4:	01020111 	.word	0x01020111
    a5e8:	01020102 	.word	0x01020102
    a5ec:	01020102 	.word	0x01020102
    a5f0:	01160102 	.word	0x01160102
    a5f4:	0120011b 	.word	0x0120011b
    a5f8:	01020125 	.word	0x01020125
    a5fc:	01020102 	.word	0x01020102
    a600:	01020102 	.word	0x01020102
    a604:	01020102 	.word	0x01020102
    a608:	01020102 	.word	0x01020102
    a60c:	01020102 	.word	0x01020102
    a610:	012a0102 	.word	0x012a0102
    a614:	0102012f 	.word	0x0102012f
    a618:	01020102 	.word	0x01020102
    a61c:	01020102 	.word	0x01020102
    a620:	01340102 	.word	0x01340102
    a624:	013e0139 	.word	0x013e0139
    a628:	01480143 	.word	0x01480143
    a62c:	014d0102 	.word	0x014d0102
    a630:	01520102 	.word	0x01520102
    a634:	01020102 	.word	0x01020102
    a638:	01020102 	.word	0x01020102
    a63c:	015c0102 	.word	0x015c0102
    a640:	01020102 	.word	0x01020102
    a644:	01570102 	.word	0x01570102
    a648:	01020102 	.word	0x01020102
    a64c:	01020102 	.word	0x01020102
    a650:	01020102 	.word	0x01020102
    a654:	01020102 	.word	0x01020102
    a658:	01020102 	.word	0x01020102
    a65c:	01020102 	.word	0x01020102
    a660:	01020102 	.word	0x01020102
    a664:	01020102 	.word	0x01020102
    a668:	01020102 	.word	0x01020102
    a66c:	01020102 	.word	0x01020102
    a670:	01020102 	.word	0x01020102
    a674:	01020102 	.word	0x01020102
    a678:	01020102 	.word	0x01020102
    a67c:	01020102 	.word	0x01020102
    a680:	01020102 	.word	0x01020102
    a684:	01020102 	.word	0x01020102
    a688:	01020102 	.word	0x01020102
    a68c:	01020102 	.word	0x01020102
    a690:	01020102 	.word	0x01020102
    a694:	01020102 	.word	0x01020102
    a698:	01020102 	.word	0x01020102
    a69c:	01020102 	.word	0x01020102
    a6a0:	01020102 	.word	0x01020102
    a6a4:	01020102 	.word	0x01020102
    a6a8:	01020102 	.word	0x01020102
    a6ac:	01020102 	.word	0x01020102
    a6b0:	01020102 	.word	0x01020102
    a6b4:	01020102 	.word	0x01020102
    a6b8:	01020102 	.word	0x01020102
    a6bc:	01020102 	.word	0x01020102
    a6c0:	01020102 	.word	0x01020102
    a6c4:	01020102 	.word	0x01020102
    a6c8:	01020102 	.word	0x01020102
    a6cc:	01020102 	.word	0x01020102
    a6d0:	01020102 	.word	0x01020102
    a6d4:	01020102 	.word	0x01020102
    a6d8:	01020102 	.word	0x01020102
    a6dc:	01020102 	.word	0x01020102
    a6e0:	01020102 	.word	0x01020102
    a6e4:	01020102 	.word	0x01020102
    a6e8:	01020102 	.word	0x01020102
    a6ec:	01020102 	.word	0x01020102
    a6f0:	01020102 	.word	0x01020102
    a6f4:	01020102 	.word	0x01020102
    a6f8:	01020102 	.word	0x01020102
    a6fc:	01020102 	.word	0x01020102
    a700:	01020102 	.word	0x01020102
    a704:	01020102 	.word	0x01020102
    a708:	01020102 	.word	0x01020102
    a70c:	01020102 	.word	0x01020102
    a710:	01020102 	.word	0x01020102
    a714:	01020102 	.word	0x01020102
    a718:	01020102 	.word	0x01020102
    a71c:	01020102 	.word	0x01020102
    a720:	01020102 	.word	0x01020102
    a724:	01020102 	.word	0x01020102
    a728:	01020102 	.word	0x01020102
    a72c:	01020102 	.word	0x01020102
    a730:	01020102 	.word	0x01020102
    a734:	01660161 	.word	0x01660161
    a738:	0170016b 	.word	0x0170016b
    a73c:	01750102 	.word	0x01750102
    a740:	01020102 	.word	0x01020102
    a744:	01020102 	.word	0x01020102
    a748:	01020102 	.word	0x01020102
    a74c:	01020102 	.word	0x01020102
    a750:	017a0102 	.word	0x017a0102
    a754:	0184017f 	.word	0x0184017f
    a758:	018e0189 	.word	0x018e0189
    a75c:	01020193 	.word	0x01020193
    a760:	01020102 	.word	0x01020102
    a764:	01020102 	.word	0x01020102
    a768:	01020102 	.word	0x01020102
    a76c:	01020102 	.word	0x01020102
    a770:	01020102 	.word	0x01020102
    a774:	01020102 	.word	0x01020102
    a778:	01020102 	.word	0x01020102
    a77c:	01020102 	.word	0x01020102
    a780:	01020102 	.word	0x01020102
    a784:	01980102 	.word	0x01980102
    a788:	01a2019d 	.word	0x01a2019d
    a78c:	010201a7 	.word	0x010201a7
    a790:	01b10102 	.word	0x01b10102
    a794:	010200fd 	.word	0x010200fd
    a798:	01020102 	.word	0x01020102
    a79c:	01020102 	.word	0x01020102
    a7a0:	01020102 	.word	0x01020102
    a7a4:	01020102 	.word	0x01020102
    a7a8:	01020102 	.word	0x01020102
    a7ac:	01020102 	.word	0x01020102
    a7b0:	01020102 	.word	0x01020102
    a7b4:	01020102 	.word	0x01020102
    a7b8:	01020102 	.word	0x01020102
    a7bc:	01020102 	.word	0x01020102
    a7c0:	01020102 	.word	0x01020102
    a7c4:	01020102 	.word	0x01020102
    a7c8:	01ac0102 	.word	0x01ac0102
    a7cc:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    a7ce:	9007      	str	r0, [sp, #28]
    a7d0:	20e1      	movs	r0, #225	; 0xe1
    a7d2:	9006      	str	r0, [sp, #24]
    a7d4:	e0b3      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7d6:	defe      	udf	#254	; 0xfe
    a7d8:	2000      	movs	r0, #0
    a7da:	9007      	str	r0, [sp, #28]
    a7dc:	9006      	str	r0, [sp, #24]
    a7de:	e0ae      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7e0:	2000      	movs	r0, #0
    a7e2:	9007      	str	r0, [sp, #28]
    a7e4:	2001      	movs	r0, #1
    a7e6:	9006      	str	r0, [sp, #24]
    a7e8:	e0a9      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7ea:	2000      	movs	r0, #0
    a7ec:	9007      	str	r0, [sp, #28]
    a7ee:	2004      	movs	r0, #4
    a7f0:	9006      	str	r0, [sp, #24]
    a7f2:	e0a4      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7f4:	2000      	movs	r0, #0
    a7f6:	9007      	str	r0, [sp, #28]
    a7f8:	2009      	movs	r0, #9
    a7fa:	9006      	str	r0, [sp, #24]
    a7fc:	e09f      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7fe:	2000      	movs	r0, #0
    a800:	9007      	str	r0, [sp, #28]
    a802:	2010      	movs	r0, #16
    a804:	9006      	str	r0, [sp, #24]
    a806:	e09a      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a808:	2000      	movs	r0, #0
    a80a:	9007      	str	r0, [sp, #28]
    a80c:	2011      	movs	r0, #17
    a80e:	9006      	str	r0, [sp, #24]
    a810:	e095      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a812:	2000      	movs	r0, #0
    a814:	9007      	str	r0, [sp, #28]
    a816:	2012      	movs	r0, #18
    a818:	9006      	str	r0, [sp, #24]
    a81a:	e090      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a81c:	2000      	movs	r0, #0
    a81e:	9007      	str	r0, [sp, #28]
    a820:	2013      	movs	r0, #19
    a822:	9006      	str	r0, [sp, #24]
    a824:	e08b      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a826:	2000      	movs	r0, #0
    a828:	9007      	str	r0, [sp, #28]
    a82a:	2020      	movs	r0, #32
    a82c:	9006      	str	r0, [sp, #24]
    a82e:	e086      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a830:	2000      	movs	r0, #0
    a832:	9007      	str	r0, [sp, #28]
    a834:	2021      	movs	r0, #33	; 0x21
    a836:	9006      	str	r0, [sp, #24]
    a838:	e081      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a83a:	2000      	movs	r0, #0
    a83c:	9007      	str	r0, [sp, #28]
    a83e:	2028      	movs	r0, #40	; 0x28
    a840:	9006      	str	r0, [sp, #24]
    a842:	e07c      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a844:	2000      	movs	r0, #0
    a846:	9007      	str	r0, [sp, #28]
    a848:	2029      	movs	r0, #41	; 0x29
    a84a:	9006      	str	r0, [sp, #24]
    a84c:	e077      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a84e:	2000      	movs	r0, #0
    a850:	9007      	str	r0, [sp, #28]
    a852:	202a      	movs	r0, #42	; 0x2a
    a854:	9006      	str	r0, [sp, #24]
    a856:	e072      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a858:	2000      	movs	r0, #0
    a85a:	9007      	str	r0, [sp, #28]
    a85c:	202b      	movs	r0, #43	; 0x2b
    a85e:	9006      	str	r0, [sp, #24]
    a860:	e06d      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a862:	2000      	movs	r0, #0
    a864:	9007      	str	r0, [sp, #28]
    a866:	202c      	movs	r0, #44	; 0x2c
    a868:	9006      	str	r0, [sp, #24]
    a86a:	e068      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a86c:	2000      	movs	r0, #0
    a86e:	9007      	str	r0, [sp, #28]
    a870:	202e      	movs	r0, #46	; 0x2e
    a872:	9006      	str	r0, [sp, #24]
    a874:	e063      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a876:	2000      	movs	r0, #0
    a878:	9007      	str	r0, [sp, #28]
    a87a:	2030      	movs	r0, #48	; 0x30
    a87c:	9006      	str	r0, [sp, #24]
    a87e:	e05e      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a880:	2000      	movs	r0, #0
    a882:	9007      	str	r0, [sp, #28]
    a884:	203a      	movs	r0, #58	; 0x3a
    a886:	9006      	str	r0, [sp, #24]
    a888:	e059      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a88a:	2000      	movs	r0, #0
    a88c:	9007      	str	r0, [sp, #28]
    a88e:	2036      	movs	r0, #54	; 0x36
    a890:	9006      	str	r0, [sp, #24]
    a892:	e054      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a894:	2000      	movs	r0, #0
    a896:	9007      	str	r0, [sp, #28]
    a898:	20b1      	movs	r0, #177	; 0xb1
    a89a:	9006      	str	r0, [sp, #24]
    a89c:	e04f      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a89e:	2000      	movs	r0, #0
    a8a0:	9007      	str	r0, [sp, #28]
    a8a2:	20b2      	movs	r0, #178	; 0xb2
    a8a4:	9006      	str	r0, [sp, #24]
    a8a6:	e04a      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8a8:	2000      	movs	r0, #0
    a8aa:	9007      	str	r0, [sp, #28]
    a8ac:	20b3      	movs	r0, #179	; 0xb3
    a8ae:	9006      	str	r0, [sp, #24]
    a8b0:	e045      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8b2:	2000      	movs	r0, #0
    a8b4:	9007      	str	r0, [sp, #28]
    a8b6:	20b4      	movs	r0, #180	; 0xb4
    a8b8:	9006      	str	r0, [sp, #24]
    a8ba:	e040      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8bc:	2000      	movs	r0, #0
    a8be:	9007      	str	r0, [sp, #28]
    a8c0:	20b6      	movs	r0, #182	; 0xb6
    a8c2:	9006      	str	r0, [sp, #24]
    a8c4:	e03b      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8c6:	2000      	movs	r0, #0
    a8c8:	9007      	str	r0, [sp, #28]
    a8ca:	20c0      	movs	r0, #192	; 0xc0
    a8cc:	9006      	str	r0, [sp, #24]
    a8ce:	e036      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8d0:	2000      	movs	r0, #0
    a8d2:	9007      	str	r0, [sp, #28]
    a8d4:	20c1      	movs	r0, #193	; 0xc1
    a8d6:	9006      	str	r0, [sp, #24]
    a8d8:	e031      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8da:	2000      	movs	r0, #0
    a8dc:	9007      	str	r0, [sp, #28]
    a8de:	20c2      	movs	r0, #194	; 0xc2
    a8e0:	9006      	str	r0, [sp, #24]
    a8e2:	e02c      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8e4:	2000      	movs	r0, #0
    a8e6:	9007      	str	r0, [sp, #28]
    a8e8:	20c3      	movs	r0, #195	; 0xc3
    a8ea:	9006      	str	r0, [sp, #24]
    a8ec:	e027      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8ee:	2000      	movs	r0, #0
    a8f0:	9007      	str	r0, [sp, #28]
    a8f2:	20c4      	movs	r0, #196	; 0xc4
    a8f4:	9006      	str	r0, [sp, #24]
    a8f6:	e022      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a8f8:	2000      	movs	r0, #0
    a8fa:	9007      	str	r0, [sp, #28]
    a8fc:	20c5      	movs	r0, #197	; 0xc5
    a8fe:	9006      	str	r0, [sp, #24]
    a900:	e01d      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a902:	2000      	movs	r0, #0
    a904:	9007      	str	r0, [sp, #28]
    a906:	20da      	movs	r0, #218	; 0xda
    a908:	9006      	str	r0, [sp, #24]
    a90a:	e018      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a90c:	2000      	movs	r0, #0
    a90e:	9007      	str	r0, [sp, #28]
    a910:	20db      	movs	r0, #219	; 0xdb
    a912:	9006      	str	r0, [sp, #24]
    a914:	e013      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a916:	2000      	movs	r0, #0
    a918:	9007      	str	r0, [sp, #28]
    a91a:	20dc      	movs	r0, #220	; 0xdc
    a91c:	9006      	str	r0, [sp, #24]
    a91e:	e00e      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a920:	2000      	movs	r0, #0
    a922:	9007      	str	r0, [sp, #28]
    a924:	20dd      	movs	r0, #221	; 0xdd
    a926:	9006      	str	r0, [sp, #24]
    a928:	e009      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a92a:	2000      	movs	r0, #0
    a92c:	9007      	str	r0, [sp, #28]
    a92e:	20fc      	movs	r0, #252	; 0xfc
    a930:	9006      	str	r0, [sp, #24]
    a932:	e004      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a934:	2000      	movs	r0, #0
    a936:	9007      	str	r0, [sp, #28]
    a938:	20e0      	movs	r0, #224	; 0xe0
    a93a:	9006      	str	r0, [sp, #24]
    a93c:	e7ff      	b.n	a93e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a93e:	9806      	ldr	r0, [sp, #24]
    a940:	9907      	ldr	r1, [sp, #28]
    a942:	9105      	str	r1, [sp, #20]
    a944:	9004      	str	r0, [sp, #16]
    a946:	2000      	movs	r0, #0
    a948:	9003      	str	r0, [sp, #12]
    a94a:	2001      	movs	r0, #1
    a94c:	9002      	str	r0, [sp, #8]
    a94e:	9802      	ldr	r0, [sp, #8]
    a950:	9903      	ldr	r1, [sp, #12]
    a952:	9a04      	ldr	r2, [sp, #16]
    a954:	9b05      	ldr	r3, [sp, #20]
    a956:	b00a      	add	sp, #40	; 0x28
    a958:	4770      	bx	lr

0000a95a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
    a95a:	b580      	push	{r7, lr}
    a95c:	b08a      	sub	sp, #40	; 0x28
    a95e:	9009      	str	r0, [sp, #36]	; 0x24
    a960:	f7ff fe30 	bl	a5c4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
    a964:	9108      	str	r1, [sp, #32]
    a966:	9007      	str	r0, [sp, #28]
    a968:	9306      	str	r3, [sp, #24]
    a96a:	9205      	str	r2, [sp, #20]
    a96c:	e7ff      	b.n	a96e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
    a96e:	9807      	ldr	r0, [sp, #28]
    a970:	9908      	ldr	r1, [sp, #32]
    a972:	9a05      	ldr	r2, [sp, #20]
    a974:	9b06      	ldr	r3, [sp, #24]
    a976:	f000 f859 	bl	aa2c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
    a97a:	9104      	str	r1, [sp, #16]
    a97c:	9003      	str	r0, [sp, #12]
    a97e:	9302      	str	r3, [sp, #8]
    a980:	9201      	str	r2, [sp, #4]
    a982:	e7ff      	b.n	a984 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
    a984:	9803      	ldr	r0, [sp, #12]
    a986:	9904      	ldr	r1, [sp, #16]
    a988:	9a01      	ldr	r2, [sp, #4]
    a98a:	9b02      	ldr	r3, [sp, #8]
    a98c:	b00a      	add	sp, #40	; 0x28
    a98e:	bd80      	pop	{r7, pc}

0000a990 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
    a990:	b08a      	sub	sp, #40	; 0x28
    a992:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
    a994:	7800      	ldrb	r0, [r0, #0]
    a996:	4601      	mov	r1, r0
    a998:	2800      	cmp	r0, #0
    a99a:	9101      	str	r1, [sp, #4]
    a99c:	d00f      	beq.n	a9be <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
    a99e:	e7ff      	b.n	a9a0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
    a9a0:	9801      	ldr	r0, [sp, #4]
    a9a2:	2860      	cmp	r0, #96	; 0x60
    a9a4:	d00f      	beq.n	a9c6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
    a9a6:	e7ff      	b.n	a9a8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
    a9a8:	9801      	ldr	r0, [sp, #4]
    a9aa:	28a0      	cmp	r0, #160	; 0xa0
    a9ac:	d001      	beq.n	a9b2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
    a9ae:	e7ff      	b.n	a9b0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
    a9b0:	e00e      	b.n	a9d0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
    a9b2:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    a9b4:	9007      	str	r0, [sp, #28]
    a9b6:	20a0      	movs	r0, #160	; 0xa0
    a9b8:	9006      	str	r0, [sp, #24]
    a9ba:	e00e      	b.n	a9da <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a9bc:	defe      	udf	#254	; 0xfe
    a9be:	2000      	movs	r0, #0
    a9c0:	9007      	str	r0, [sp, #28]
    a9c2:	9006      	str	r0, [sp, #24]
    a9c4:	e009      	b.n	a9da <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a9c6:	2000      	movs	r0, #0
    a9c8:	9007      	str	r0, [sp, #28]
    a9ca:	2060      	movs	r0, #96	; 0x60
    a9cc:	9006      	str	r0, [sp, #24]
    a9ce:	e004      	b.n	a9da <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a9d0:	2000      	movs	r0, #0
    a9d2:	9007      	str	r0, [sp, #28]
    a9d4:	20c0      	movs	r0, #192	; 0xc0
    a9d6:	9006      	str	r0, [sp, #24]
    a9d8:	e7ff      	b.n	a9da <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a9da:	9806      	ldr	r0, [sp, #24]
    a9dc:	9907      	ldr	r1, [sp, #28]
    a9de:	9105      	str	r1, [sp, #20]
    a9e0:	9004      	str	r0, [sp, #16]
    a9e2:	2000      	movs	r0, #0
    a9e4:	9003      	str	r0, [sp, #12]
    a9e6:	2001      	movs	r0, #1
    a9e8:	9002      	str	r0, [sp, #8]
    a9ea:	9802      	ldr	r0, [sp, #8]
    a9ec:	9903      	ldr	r1, [sp, #12]
    a9ee:	9a04      	ldr	r2, [sp, #16]
    a9f0:	9b05      	ldr	r3, [sp, #20]
    a9f2:	b00a      	add	sp, #40	; 0x28
    a9f4:	4770      	bx	lr

0000a9f6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
    a9f6:	b580      	push	{r7, lr}
    a9f8:	b08a      	sub	sp, #40	; 0x28
    a9fa:	9009      	str	r0, [sp, #36]	; 0x24
    a9fc:	f7ff ffc8 	bl	a990 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
    aa00:	9108      	str	r1, [sp, #32]
    aa02:	9007      	str	r0, [sp, #28]
    aa04:	9306      	str	r3, [sp, #24]
    aa06:	9205      	str	r2, [sp, #20]
    aa08:	e7ff      	b.n	aa0a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
    aa0a:	9807      	ldr	r0, [sp, #28]
    aa0c:	9908      	ldr	r1, [sp, #32]
    aa0e:	9a05      	ldr	r2, [sp, #20]
    aa10:	9b06      	ldr	r3, [sp, #24]
    aa12:	f000 f863 	bl	aadc <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
    aa16:	9104      	str	r1, [sp, #16]
    aa18:	9003      	str	r0, [sp, #12]
    aa1a:	9302      	str	r3, [sp, #8]
    aa1c:	9201      	str	r2, [sp, #4]
    aa1e:	e7ff      	b.n	aa20 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
    aa20:	9803      	ldr	r0, [sp, #12]
    aa22:	9904      	ldr	r1, [sp, #16]
    aa24:	9a01      	ldr	r2, [sp, #4]
    aa26:	9b02      	ldr	r3, [sp, #8]
    aa28:	b00a      	add	sp, #40	; 0x28
    aa2a:	bd80      	pop	{r7, pc}

0000aa2c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
    aa2c:	b5b0      	push	{r4, r5, r7, lr}
    aa2e:	b090      	sub	sp, #64	; 0x40
    aa30:	469c      	mov	ip, r3
    aa32:	4696      	mov	lr, r2
    aa34:	460c      	mov	r4, r1
    aa36:	4605      	mov	r5, r0
    aa38:	9103      	str	r1, [sp, #12]
    aa3a:	9002      	str	r0, [sp, #8]
    aa3c:	9305      	str	r3, [sp, #20]
    aa3e:	9204      	str	r2, [sp, #16]
    aa40:	2000      	movs	r0, #0
    aa42:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa46:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa4a:	2001      	movs	r0, #1
    aa4c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa50:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa54:	9802      	ldr	r0, [sp, #8]
    aa56:	2800      	cmp	r0, #0
    aa58:	d001      	beq.n	aa5e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
    aa5a:	e7ff      	b.n	aa5c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
    aa5c:	e004      	b.n	aa68 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
    aa5e:	2000      	movs	r0, #0
    aa60:	9007      	str	r0, [sp, #28]
    aa62:	9006      	str	r0, [sp, #24]
    aa64:	e023      	b.n	aaae <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    aa66:	defe      	udf	#254	; 0xfe
    aa68:	2000      	movs	r0, #0
    aa6a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa6e:	9904      	ldr	r1, [sp, #16]
    aa70:	9a05      	ldr	r2, [sp, #20]
    aa72:	920f      	str	r2, [sp, #60]	; 0x3c
    aa74:	910e      	str	r1, [sp, #56]	; 0x38
    aa76:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa7a:	920b      	str	r2, [sp, #44]	; 0x2c
    aa7c:	910a      	str	r1, [sp, #40]	; 0x28
    aa7e:	980a      	ldr	r0, [sp, #40]	; 0x28
    aa80:	990b      	ldr	r1, [sp, #44]	; 0x2c
    aa82:	f000 f883 	bl	ab8c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
    aa86:	9101      	str	r1, [sp, #4]
    aa88:	9000      	str	r0, [sp, #0]
    aa8a:	e7ff      	b.n	aa8c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
    aa8c:	9800      	ldr	r0, [sp, #0]
    aa8e:	9008      	str	r0, [sp, #32]
    aa90:	9901      	ldr	r1, [sp, #4]
    aa92:	9109      	str	r1, [sp, #36]	; 0x24
    aa94:	2200      	movs	r2, #0
    aa96:	9207      	str	r2, [sp, #28]
    aa98:	2201      	movs	r2, #1
    aa9a:	9206      	str	r2, [sp, #24]
    aa9c:	e007      	b.n	aaae <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    aa9e:	9802      	ldr	r0, [sp, #8]
    aaa0:	2801      	cmp	r0, #1
    aaa2:	d010      	beq.n	aac6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
    aaa4:	e019      	b.n	aada <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
    aaa6:	2000      	movs	r0, #0
    aaa8:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aaac:	e7f7      	b.n	aa9e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    aaae:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    aab2:	07c0      	lsls	r0, r0, #31
    aab4:	2800      	cmp	r0, #0
    aab6:	d1f6      	bne.n	aaa6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
    aab8:	e7f1      	b.n	aa9e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    aaba:	9806      	ldr	r0, [sp, #24]
    aabc:	9907      	ldr	r1, [sp, #28]
    aabe:	9a08      	ldr	r2, [sp, #32]
    aac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aac2:	b010      	add	sp, #64	; 0x40
    aac4:	bdb0      	pop	{r4, r5, r7, pc}
    aac6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    aaca:	07c0      	lsls	r0, r0, #31
    aacc:	2800      	cmp	r0, #0
    aace:	d0f4      	beq.n	aaba <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    aad0:	e7ff      	b.n	aad2 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
    aad2:	2000      	movs	r0, #0
    aad4:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aad8:	e7ef      	b.n	aaba <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    aada:	e7ee      	b.n	aaba <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

0000aadc <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
    aadc:	b5b0      	push	{r4, r5, r7, lr}
    aade:	b090      	sub	sp, #64	; 0x40
    aae0:	469c      	mov	ip, r3
    aae2:	4696      	mov	lr, r2
    aae4:	460c      	mov	r4, r1
    aae6:	4605      	mov	r5, r0
    aae8:	9103      	str	r1, [sp, #12]
    aaea:	9002      	str	r0, [sp, #8]
    aaec:	9305      	str	r3, [sp, #20]
    aaee:	9204      	str	r2, [sp, #16]
    aaf0:	2000      	movs	r0, #0
    aaf2:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aaf6:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aafa:	2001      	movs	r0, #1
    aafc:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ab00:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ab04:	9802      	ldr	r0, [sp, #8]
    ab06:	2800      	cmp	r0, #0
    ab08:	d001      	beq.n	ab0e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
    ab0a:	e7ff      	b.n	ab0c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
    ab0c:	e004      	b.n	ab18 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
    ab0e:	2000      	movs	r0, #0
    ab10:	9007      	str	r0, [sp, #28]
    ab12:	9006      	str	r0, [sp, #24]
    ab14:	e023      	b.n	ab5e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ab16:	defe      	udf	#254	; 0xfe
    ab18:	2000      	movs	r0, #0
    ab1a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ab1e:	9904      	ldr	r1, [sp, #16]
    ab20:	9a05      	ldr	r2, [sp, #20]
    ab22:	920f      	str	r2, [sp, #60]	; 0x3c
    ab24:	910e      	str	r1, [sp, #56]	; 0x38
    ab26:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ab2a:	920b      	str	r2, [sp, #44]	; 0x2c
    ab2c:	910a      	str	r1, [sp, #40]	; 0x28
    ab2e:	980a      	ldr	r0, [sp, #40]	; 0x28
    ab30:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ab32:	f009 fe55 	bl	147e0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
    ab36:	9101      	str	r1, [sp, #4]
    ab38:	9000      	str	r0, [sp, #0]
    ab3a:	e7ff      	b.n	ab3c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
    ab3c:	9800      	ldr	r0, [sp, #0]
    ab3e:	9008      	str	r0, [sp, #32]
    ab40:	9901      	ldr	r1, [sp, #4]
    ab42:	9109      	str	r1, [sp, #36]	; 0x24
    ab44:	2200      	movs	r2, #0
    ab46:	9207      	str	r2, [sp, #28]
    ab48:	2201      	movs	r2, #1
    ab4a:	9206      	str	r2, [sp, #24]
    ab4c:	e007      	b.n	ab5e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    ab4e:	9802      	ldr	r0, [sp, #8]
    ab50:	2801      	cmp	r0, #1
    ab52:	d010      	beq.n	ab76 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
    ab54:	e019      	b.n	ab8a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
    ab56:	2000      	movs	r0, #0
    ab58:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    ab5c:	e7f7      	b.n	ab4e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    ab5e:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    ab62:	07c0      	lsls	r0, r0, #31
    ab64:	2800      	cmp	r0, #0
    ab66:	d1f6      	bne.n	ab56 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
    ab68:	e7f1      	b.n	ab4e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    ab6a:	9806      	ldr	r0, [sp, #24]
    ab6c:	9907      	ldr	r1, [sp, #28]
    ab6e:	9a08      	ldr	r2, [sp, #32]
    ab70:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ab72:	b010      	add	sp, #64	; 0x40
    ab74:	bdb0      	pop	{r4, r5, r7, pc}
    ab76:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    ab7a:	07c0      	lsls	r0, r0, #31
    ab7c:	2800      	cmp	r0, #0
    ab7e:	d0f4      	beq.n	ab6a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    ab80:	e7ff      	b.n	ab82 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
    ab82:	2000      	movs	r0, #0
    ab84:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    ab88:	e7ef      	b.n	ab6a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    ab8a:	e7ee      	b.n	ab6a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

0000ab8c <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
    ab8c:	b084      	sub	sp, #16
    ab8e:	460a      	mov	r2, r1
    ab90:	4603      	mov	r3, r0
    ab92:	9103      	str	r1, [sp, #12]
    ab94:	9002      	str	r0, [sp, #8]
    ab96:	b004      	add	sp, #16
    ab98:	4770      	bx	lr

0000ab9a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E>:
    ab9a:	b580      	push	{r7, lr}
    ab9c:	b086      	sub	sp, #24
    ab9e:	9004      	str	r0, [sp, #16]
    aba0:	9105      	str	r1, [sp, #20]
    aba2:	9002      	str	r0, [sp, #8]
    aba4:	f000 f810 	bl	abc8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E>
    aba8:	9001      	str	r0, [sp, #4]
    abaa:	e7ff      	b.n	abac <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x12>
    abac:	9801      	ldr	r0, [sp, #4]
    abae:	07c1      	lsls	r1, r0, #31
    abb0:	2900      	cmp	r1, #0
    abb2:	d103      	bne.n	abbc <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x22>
    abb4:	e7ff      	b.n	abb6 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x1c>
    abb6:	2000      	movs	r0, #0
    abb8:	9003      	str	r0, [sp, #12]
    abba:	e002      	b.n	abc2 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x28>
    abbc:	9802      	ldr	r0, [sp, #8]
    abbe:	9003      	str	r0, [sp, #12]
    abc0:	e7ff      	b.n	abc2 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E+0x28>
    abc2:	9803      	ldr	r0, [sp, #12]
    abc4:	b006      	add	sp, #24
    abc6:	bd80      	pop	{r7, pc}

0000abc8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E>:
    abc8:	b580      	push	{r7, lr}
    abca:	b08a      	sub	sp, #40	; 0x28
    abcc:	9008      	str	r0, [sp, #32]
    abce:	9109      	str	r1, [sp, #36]	; 0x24
    abd0:	9103      	str	r1, [sp, #12]
    abd2:	9002      	str	r0, [sp, #8]
    abd4:	f000 f815 	bl	ac02 <_ZN4core3any6TypeId2of17h3f51c8cccab069bdE>
    abd8:	9105      	str	r1, [sp, #20]
    abda:	9004      	str	r0, [sp, #16]
    abdc:	e7ff      	b.n	abde <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E+0x16>
    abde:	9803      	ldr	r0, [sp, #12]
    abe0:	68c1      	ldr	r1, [r0, #12]
    abe2:	9802      	ldr	r0, [sp, #8]
    abe4:	4788      	blx	r1
    abe6:	9107      	str	r1, [sp, #28]
    abe8:	9006      	str	r0, [sp, #24]
    abea:	e7ff      	b.n	abec <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E+0x24>
    abec:	a804      	add	r0, sp, #16
    abee:	a906      	add	r1, sp, #24
    abf0:	f006 fc2b 	bl	1144a <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h27d5684c70bb37e8E>
    abf4:	9001      	str	r0, [sp, #4]
    abf6:	e7ff      	b.n	abf8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hb404653a2617c369E+0x30>
    abf8:	9801      	ldr	r0, [sp, #4]
    abfa:	f000 0001 	and.w	r0, r0, #1
    abfe:	b00a      	add	sp, #40	; 0x28
    ac00:	bd80      	pop	{r7, pc}

0000ac02 <_ZN4core3any6TypeId2of17h3f51c8cccab069bdE>:
    ac02:	b086      	sub	sp, #24
    ac04:	f249 40d9 	movw	r0, #38105	; 0x94d9
    ac08:	f2c1 1010 	movt	r0, #4368	; 0x1110
    ac0c:	9005      	str	r0, [sp, #20]
    ac0e:	f249 7064 	movw	r0, #38756	; 0x9764
    ac12:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    ac16:	9004      	str	r0, [sp, #16]
    ac18:	9804      	ldr	r0, [sp, #16]
    ac1a:	9905      	ldr	r1, [sp, #20]
    ac1c:	9001      	str	r0, [sp, #4]
    ac1e:	9100      	str	r1, [sp, #0]
    ac20:	e7ff      	b.n	ac22 <_ZN4core3any6TypeId2of17h3f51c8cccab069bdE+0x20>
    ac22:	9801      	ldr	r0, [sp, #4]
    ac24:	9002      	str	r0, [sp, #8]
    ac26:	9900      	ldr	r1, [sp, #0]
    ac28:	9103      	str	r1, [sp, #12]
    ac2a:	9802      	ldr	r0, [sp, #8]
    ac2c:	9903      	ldr	r1, [sp, #12]
    ac2e:	b006      	add	sp, #24
    ac30:	4770      	bx	lr

0000ac32 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE>:
    ac32:	b580      	push	{r7, lr}
    ac34:	b084      	sub	sp, #16
    ac36:	9002      	str	r0, [sp, #8]
    ac38:	9103      	str	r1, [sp, #12]
    ac3a:	f7ff ffae 	bl	ab9a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17he59d0591beb75594E>
    ac3e:	9001      	str	r0, [sp, #4]
    ac40:	e7ff      	b.n	ac42 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h1a1e70438bc017caE+0x10>
    ac42:	9801      	ldr	r0, [sp, #4]
    ac44:	b004      	add	sp, #16
    ac46:	bd80      	pop	{r7, pc}

0000ac48 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE>:
    ac48:	b580      	push	{r7, lr}
    ac4a:	b082      	sub	sp, #8
    ac4c:	9200      	str	r2, [sp, #0]
    ac4e:	9101      	str	r1, [sp, #4]
    ac50:	9a00      	ldr	r2, [sp, #0]
    ac52:	f003 fe89 	bl	e968 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE>
    ac56:	e7ff      	b.n	ac58 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h939acc3a20dd048cE+0x10>
    ac58:	b002      	add	sp, #8
    ac5a:	bd80      	pop	{r7, pc}

0000ac5c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E>:
    ac5c:	b580      	push	{r7, lr}
    ac5e:	b084      	sub	sp, #16
    ac60:	9102      	str	r1, [sp, #8]
    ac62:	9003      	str	r0, [sp, #12]
    ac64:	9902      	ldr	r1, [sp, #8]
    ac66:	f003 fe91 	bl	e98c <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6a25aae91f88a8abE>
    ac6a:	9001      	str	r0, [sp, #4]
    ac6c:	9100      	str	r1, [sp, #0]
    ac6e:	e7ff      	b.n	ac70 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hf6f4911cb4702538E+0x14>
    ac70:	9801      	ldr	r0, [sp, #4]
    ac72:	9900      	ldr	r1, [sp, #0]
    ac74:	b004      	add	sp, #16
    ac76:	bd80      	pop	{r7, pc}

0000ac78 <_ZN8libchip814Chip8$LT$T$GT$3new17hca880a1e3fbd9a67E>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    ac78:	b5b0      	push	{r4, r5, r7, lr}
    ac7a:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    ac7e:	b082      	sub	sp, #8
    ac80:	f10d 0e0c 	add.w	lr, sp, #12
    ac84:	f50e 5282 	add.w	r2, lr, #4160	; 0x1040
    ac88:	2300      	movs	r3, #0
        Self {
            v: [0; REGS],
    ac8a:	930b      	str	r3, [sp, #44]	; 0x2c
    ac8c:	930a      	str	r3, [sp, #40]	; 0x28
    ac8e:	9309      	str	r3, [sp, #36]	; 0x24
    ac90:	9308      	str	r3, [sp, #32]
    ac92:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
    ac96:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    ac9a:	9007      	str	r0, [sp, #28]
    ac9c:	4660      	mov	r0, ip
    ac9e:	9106      	str	r1, [sp, #24]
    aca0:	4671      	mov	r1, lr
    aca2:	9205      	str	r2, [sp, #20]
    aca4:	9304      	str	r3, [sp, #16]
    aca6:	f8cd c00c 	str.w	ip, [sp, #12]
    acaa:	f8cd e008 	str.w	lr, [sp, #8]
    acae:	f010 ff1b 	bl	1bae8 <__aeabi_memclr>
            stack: [0; STACKS],
    acb2:	9804      	ldr	r0, [sp, #16]
    acb4:	9905      	ldr	r1, [sp, #20]
    acb6:	6008      	str	r0, [r1, #0]
    acb8:	f841 0c04 	str.w	r0, [r1, #-4]
    acbc:	f841 0c08 	str.w	r0, [r1, #-8]
    acc0:	f841 0c0c 	str.w	r0, [r1, #-12]
    acc4:	f841 0c10 	str.w	r0, [r1, #-16]
    acc8:	f841 0c14 	str.w	r0, [r1, #-20]
    accc:	f841 0c18 	str.w	r0, [r1, #-24]
    acd0:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    acd4:	6088      	str	r0, [r1, #8]
    acd6:	6048      	str	r0, [r1, #4]
            running: false,
            hw,
    acd8:	9a06      	ldr	r2, [sp, #24]
    acda:	8893      	ldrh	r3, [r2, #4]
    acdc:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    ace0:	f8ae 3064 	strh.w	r3, [lr, #100]	; 0x64
    ace4:	6813      	ldr	r3, [r2, #0]
    ace6:	614b      	str	r3, [r1, #20]
        Self {
    ace8:	9b08      	ldr	r3, [sp, #32]
    acea:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    acee:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    acf2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    acf4:	9d07      	ldr	r5, [sp, #28]
    acf6:	642c      	str	r4, [r5, #64]	; 0x40
    acf8:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
    acfc:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
    ad00:	636b      	str	r3, [r5, #52]	; 0x34
    ad02:	8228      	strh	r0, [r5, #16]
    ad04:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    ad08:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    ad0c:	8268      	strh	r0, [r5, #18]
    ad0e:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
    ad12:	f105 0047 	add.w	r0, r5, #71	; 0x47
    ad16:	9903      	ldr	r1, [sp, #12]
    ad18:	9a02      	ldr	r2, [sp, #8]
    ad1a:	f010 fee9 	bl	1baf0 <__aeabi_memcpy>
    ad1e:	9907      	ldr	r1, [sp, #28]
    ad20:	f101 0214 	add.w	r2, r1, #20
    ad24:	f10d 0e10 	add.w	lr, sp, #16
    ad28:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    ad2c:	2320      	movs	r3, #32
    ad2e:	9001      	str	r0, [sp, #4]
    ad30:	4610      	mov	r0, r2
    ad32:	461a      	mov	r2, r3
    ad34:	f010 fedc 	bl	1baf0 <__aeabi_memcpy>
    ad38:	9905      	ldr	r1, [sp, #20]
    ad3a:	684a      	ldr	r2, [r1, #4]
    ad3c:	688b      	ldr	r3, [r1, #8]
    ad3e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    ad42:	f8d1 e010 	ldr.w	lr, [r1, #16]
    ad46:	9c07      	ldr	r4, [sp, #28]
    ad48:	6063      	str	r3, [r4, #4]
    ad4a:	6022      	str	r2, [r4, #0]
    ad4c:	f8c4 e00c 	str.w	lr, [r4, #12]
    ad50:	f8c4 c008 	str.w	ip, [r4, #8]
    ad54:	f241 0247 	movw	r2, #4167	; 0x1047
    ad58:	9b04      	ldr	r3, [sp, #16]
    ad5a:	54a3      	strb	r3, [r4, r2]
    ad5c:	f241 0248 	movw	r2, #4168	; 0x1048
    ad60:	eb04 0c02 	add.w	ip, r4, r2
    ad64:	f8d1 e014 	ldr.w	lr, [r1, #20]
    ad68:	f844 e002 	str.w	lr, [r4, r2]
    ad6c:	f50d 5080 	add.w	r0, sp, #4096	; 0x1000
    ad70:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    ad74:	f8ac 2004 	strh.w	r2, [ip, #4]
        }
    }
    ad78:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    ad7c:	b002      	add	sp, #8
    ad7e:	bdb0      	pop	{r4, r5, r7, pc}

0000ad80 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    ad80:	b580      	push	{r7, lr}
    ad82:	b086      	sub	sp, #24
    ad84:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    ad86:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    ad8a:	2201      	movs	r2, #1
    ad8c:	9003      	str	r0, [sp, #12]
    ad8e:	4608      	mov	r0, r1
    ad90:	4611      	mov	r1, r2
    ad92:	f004 f908 	bl	efa6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE>
    ad96:	9002      	str	r0, [sp, #8]
    ad98:	e7ff      	b.n	ad9a <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E+0x1a>
    ad9a:	9802      	ldr	r0, [sp, #8]
    ad9c:	9903      	ldr	r1, [sp, #12]
    ad9e:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    ada2:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    ada6:	4613      	mov	r3, r2
    ada8:	2a0f      	cmp	r2, #15
    adaa:	9301      	str	r3, [sp, #4]
    adac:	d80a      	bhi.n	adc4 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E+0x44>
    adae:	e7ff      	b.n	adb0 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E+0x30>
    adb0:	9803      	ldr	r0, [sp, #12]
    adb2:	9901      	ldr	r1, [sp, #4]
    adb4:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    adb8:	8a92      	ldrh	r2, [r2, #20]
    adba:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    adbe:	4610      	mov	r0, r2
    adc0:	b006      	add	sp, #24
    adc2:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    adc4:	f24c 0078 	movw	r0, #49272	; 0xc078
    adc8:	f2c0 0001 	movt	r0, #1
    adcc:	2210      	movs	r2, #16
    adce:	9901      	ldr	r1, [sp, #4]
    add0:	f00a fb98 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    add4:	defe      	udf	#254	; 0xfe

0000add6 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E>:
    pub fn run(mut self, rom: &[u8]) {
    add6:	b580      	push	{r7, lr}
    add8:	b086      	sub	sp, #24
    adda:	9104      	str	r1, [sp, #16]
    addc:	9205      	str	r2, [sp, #20]
        self.setup();
    adde:	9003      	str	r0, [sp, #12]
    ade0:	9202      	str	r2, [sp, #8]
    ade2:	9101      	str	r1, [sp, #4]
    ade4:	f003 ff34 	bl	ec50 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E>
    ade8:	e7ff      	b.n	adea <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x14>
        self.load(rom);
    adea:	9803      	ldr	r0, [sp, #12]
    adec:	9901      	ldr	r1, [sp, #4]
    adee:	9a02      	ldr	r2, [sp, #8]
    adf0:	f003 fdde 	bl	e9b0 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE>
    adf4:	e7ff      	b.n	adf6 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x20>
        while self.running {
    adf6:	e7ff      	b.n	adf8 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x22>
    adf8:	f241 0047 	movw	r0, #4167	; 0x1047
    adfc:	9903      	ldr	r1, [sp, #12]
    adfe:	5c08      	ldrb	r0, [r1, r0]
    ae00:	07c0      	lsls	r0, r0, #31
    ae02:	2800      	cmp	r0, #0
    ae04:	d101      	bne.n	ae0a <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x34>
    ae06:	e7ff      	b.n	ae08 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x32>
    }
    ae08:	e00c      	b.n	ae24 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x4e>
            self.sched();
    ae0a:	9803      	ldr	r0, [sp, #12]
    ae0c:	f003 fe9d 	bl	eb4a <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E>
    ae10:	e7ff      	b.n	ae12 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x3c>
            self.eval();
    ae12:	9803      	ldr	r0, [sp, #12]
    ae14:	f000 f808 	bl	ae28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE>
    ae18:	e7ff      	b.n	ae1a <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x44>
            self.next();
    ae1a:	9803      	ldr	r0, [sp, #12]
    ae1c:	f003 fe03 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    ae20:	e7ff      	b.n	ae22 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x4c>
        while self.running {
    ae22:	e7e9      	b.n	adf8 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E+0x22>
    }
    ae24:	b006      	add	sp, #24
    ae26:	bd80      	pop	{r7, pc}

0000ae28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    ae28:	b570      	push	{r4, r5, r6, lr}
    ae2a:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    ae2e:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    ae32:	8a41      	ldrh	r1, [r0, #18]
    ae34:	460a      	mov	r2, r1
    ae36:	2300      	movs	r3, #0
    ae38:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    ae3c:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    ae40:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    ae44:	f043 82c0 	bne.w	e3c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35a0>
    ae48:	e7ff      	b.n	ae4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22>
    ae4a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ae4e:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    ae52:	1842      	adds	r2, r0, r1
    ae54:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    ae58:	4613      	mov	r3, r2
    ae5a:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    ae5e:	8a42      	ldrh	r2, [r0, #18]
    ae60:	3201      	adds	r2, #1
    ae62:	fa1f fc82 	uxth.w	ip, r2
    ae66:	4696      	mov	lr, r2
    ae68:	4594      	cmp	ip, r2
    ae6a:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    ae6e:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    ae72:	f043 82b4 	bne.w	e3de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35b6>
    ae76:	e7ff      	b.n	ae78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x50>
    ae78:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    ae7c:	b281      	uxth	r1, r0
    ae7e:	460a      	mov	r2, r1
    ae80:	2300      	movs	r3, #0
    ae82:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    ae86:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    ae8a:	f043 82b4 	bne.w	e3f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35ce>
    ae8e:	e7ff      	b.n	ae90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x68>
    ae90:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ae94:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    ae98:	1842      	adds	r2, r0, r1
    ae9a:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    ae9e:	4613      	mov	r3, r2
    aea0:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    aea4:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    aea8:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    aeac:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    aeb0:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    aeb4:	e7ff      	b.n	aeb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8e>
    aeb6:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    aeba:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    aebe:	ea40 0201 	orr.w	r2, r0, r1
    aec2:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    aec6:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    aeca:	f36f 321f 	bfc	r2, #12, #20
    aece:	4613      	mov	r3, r2
    aed0:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    aed4:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    aed8:	f002 020f 	and.w	r2, r2, #15
    aedc:	4694      	mov	ip, r2
    aede:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    aee2:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    aee6:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    aeea:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    aeee:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    aef2:	e7ff      	b.n	aef4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcc>
    aef4:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    aef8:	f000 010f 	and.w	r1, r0, #15
    aefc:	460a      	mov	r2, r1
    aefe:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    af02:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    af06:	0909      	lsrs	r1, r1, #4
    af08:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    af0c:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    af10:	e7ff      	b.n	af12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xea>
    af12:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    af16:	f000 010f 	and.w	r1, r0, #15
    af1a:	460a      	mov	r2, r1
    af1c:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    af20:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    af24:	b2cb      	uxtb	r3, r1
    af26:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    af2a:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    af2e:	0b09      	lsrs	r1, r1, #12
    af30:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    af34:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    af38:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    af3c:	e7ff      	b.n	af3e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x116>
    af3e:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    af42:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    af46:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    af4a:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    af4e:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    af52:	e7ff      	b.n	af54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12c>
    af54:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    af58:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    af5c:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    af60:	0912      	lsrs	r2, r2, #4
    af62:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    af66:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    af6a:	e7ff      	b.n	af6c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x144>
    af6c:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    af70:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    af74:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    af78:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    af7c:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    af80:	e7ff      	b.n	af82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15a>
    af82:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    af86:	f000 010f 	and.w	r1, r0, #15
        match (
    af8a:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    af8e:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    af92:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    af96:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    af9a:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    af9e:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    afa2:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    afa6:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    afaa:	468e      	mov	lr, r1
    afac:	290f      	cmp	r1, #15
    afae:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    afb2:	d84f      	bhi.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    afb4:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    afb8:	e8df f011 	tbh	[pc, r1, lsl #1]
    afbc:	03060010 	.word	0x03060010
    afc0:	04320399 	.word	0x04320399
    afc4:	002c04d2 	.word	0x002c04d2
    afc8:	06b4061f 	.word	0x06b4061f
    afcc:	00750032 	.word	0x00750032
    afd0:	0ee40e59 	.word	0x0ee40e59
    afd4:	10260f85 	.word	0x10260f85
    afd8:	0095007b 	.word	0x0095007b
    afdc:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    afe0:	2800      	cmp	r0, #0
    afe2:	f040 8261 	bne.w	b4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x680>
    afe6:	e7ff      	b.n	afe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c0>
    afe8:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    afec:	280e      	cmp	r0, #14
    afee:	f040 825b 	bne.w	b4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x680>
    aff2:	e7ff      	b.n	aff4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cc>
    aff4:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    aff8:	4601      	mov	r1, r0
    affa:	2800      	cmp	r0, #0
    affc:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    b000:	f000 80c0 	beq.w	b184 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35c>
    b004:	e7ff      	b.n	b006 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1de>
    b006:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    b00a:	b281      	uxth	r1, r0
    b00c:	290e      	cmp	r1, #14
    b00e:	f000 81b6 	beq.w	b37e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x556>
    b012:	e249      	b.n	b4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x680>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    b014:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b018:	2800      	cmp	r0, #0
    b01a:	f000 8541 	beq.w	baa0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc78>
    b01e:	e019      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    b020:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b024:	4601      	mov	r1, r0
    b026:	280e      	cmp	r0, #14
    b028:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    b02c:	d812      	bhi.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b02e:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    b032:	e8df f011 	tbh	[pc, r1, lsl #1]
    b036:	071e      	.short	0x071e
    b038:	086707c0 	.word	0x086707c0
    b03c:	09b5090e 	.word	0x09b5090e
    b040:	0b3b0a77 	.word	0x0b3b0a77
    b044:	000f0bf0 	.word	0x000f0bf0
    b048:	000f000f 	.word	0x000f000f
    b04c:	000f000f 	.word	0x000f000f
    b050:	0cb4000f 	.word	0x0cb4000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    b054:	f64c 4088 	movw	r0, #52360	; 0xcc88
    b058:	f2c0 0001 	movt	r0, #1
    b05c:	6801      	ldr	r1, [r0, #0]
    b05e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b062:	f100 0212 	add.w	r2, r0, #18
    b066:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    b06a:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    b06e:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    b072:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    b076:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    b07a:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    b07e:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    b082:	f646 4cf3 	movw	ip, #27891	; 0x6cf3
    b086:	f2c0 0c01 	movt	ip, #1
    b08a:	4610      	mov	r0, r2
    b08c:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    b090:	4661      	mov	r1, ip
    b092:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    b096:	f7ff fa80 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b09a:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    b09e:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    b0a2:	f003 b94f 	b.w	e344 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x351c>
            (9, _, _, 0) => {
    b0a6:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b0aa:	2800      	cmp	r0, #0
    b0ac:	f001 8532 	beq.w	cb14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cec>
    b0b0:	e7d0      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xe, _, 9, 0xe) => {
    b0b2:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    b0b6:	4601      	mov	r1, r0
    b0b8:	2809      	cmp	r0, #9
    b0ba:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    b0be:	d006      	beq.n	b0ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a6>
    b0c0:	e7ff      	b.n	b0c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29a>
    b0c2:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    b0c6:	b281      	uxth	r1, r0
    b0c8:	290a      	cmp	r1, #10
    b0ca:	d006      	beq.n	b0da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b2>
    b0cc:	e7c2      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b0ce:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b0d2:	280e      	cmp	r0, #14
    b0d4:	f002 815b 	beq.w	d38e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2566>
    b0d8:	e7bc      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xe, _, 0xa, 0x1) => {
    b0da:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b0de:	2801      	cmp	r0, #1
    b0e0:	f002 81fe 	beq.w	d4e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b8>
    b0e4:	e7b6      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 0, 7) => {
    b0e6:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    b0ea:	4601      	mov	r1, r0
    b0ec:	2806      	cmp	r0, #6
    b0ee:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    b0f2:	d8af      	bhi.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b0f4:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    b0f8:	e8df f001 	tbb	[pc, r1]
    b0fc:	322c1505 	.word	0x322c1505
    b100:	003e3804 	.word	0x003e3804
    b104:	e7a6      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b106:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b10a:	4601      	mov	r1, r0
    b10c:	2807      	cmp	r0, #7
    b10e:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    b112:	f002 828e 	beq.w	d632 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x280a>
    b116:	e7ff      	b.n	b118 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f0>
    b118:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    b11c:	b281      	uxth	r1, r0
    b11e:	290a      	cmp	r1, #10
    b120:	f002 8320 	beq.w	d764 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x293c>
    b124:	e796      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 1, 5) => {
    b126:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b12a:	4601      	mov	r1, r0
    b12c:	2805      	cmp	r0, #5
    b12e:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    b132:	f002 83b1 	beq.w	d898 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a70>
    b136:	e7ff      	b.n	b138 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x310>
    b138:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    b13c:	b281      	uxth	r1, r0
    b13e:	2908      	cmp	r1, #8
    b140:	f002 843f 	beq.w	d9c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b9a>
    b144:	e7ff      	b.n	b146 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31e>
    b146:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    b14a:	b281      	uxth	r1, r0
    b14c:	290e      	cmp	r1, #14
    b14e:	f002 84cd 	beq.w	daec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2cc4>
    b152:	e77f      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 2, 9) => {
    b154:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b158:	2809      	cmp	r0, #9
    b15a:	f002 856b 	beq.w	dc34 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e0c>
    b15e:	e779      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 3, 3) => {
    b160:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b164:	2803      	cmp	r0, #3
    b166:	f002 8616 	beq.w	dd96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f6e>
    b16a:	e773      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 5, 5) => {
    b16c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b170:	2805      	cmp	r0, #5
    b172:	f002 871f 	beq.w	dfb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x318c>
    b176:	e76d      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
            (0xf, _, 6, 5) => {
    b178:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    b17c:	2805      	cmp	r0, #5
    b17e:	f002 87fc 	beq.w	e17a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3352>
    b182:	e767      	b.n	b054 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22c>
    b184:	2005      	movs	r0, #5
    b186:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    b18a:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    b18e:	f2c0 0001 	movt	r0, #1
    b192:	6801      	ldr	r1, [r0, #0]
    b194:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    b198:	f005 ffd7 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b19c:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    b1a0:	e01f      	b.n	b1e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ba>
    b1a2:	2001      	movs	r0, #1
    b1a4:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    b1a8:	e015      	b.n	b1d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ae>
    b1aa:	2000      	movs	r0, #0
    b1ac:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    b1b0:	e011      	b.n	b1d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ae>
    b1b2:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    b1b4:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    b1b8:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    b1bc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b1c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b1c4:	f006 f836 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b1c8:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    b1cc:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    b1d0:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    b1d4:	e00b      	b.n	b1ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3c6>
    b1d6:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    b1da:	07c0      	lsls	r0, r0, #31
    b1dc:	2800      	cmp	r0, #0
    b1de:	d115      	bne.n	b20c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3e4>
    b1e0:	e05e      	b.n	b2a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x478>
    b1e2:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    b1e6:	07c1      	lsls	r1, r0, #31
    b1e8:	2900      	cmp	r1, #0
    b1ea:	d1e2      	bne.n	b1b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38a>
    b1ec:	e7dd      	b.n	b1aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x382>
    b1ee:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    b1f2:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    b1f6:	f005 ffa8 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b1fa:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    b1fe:	e7ff      	b.n	b200 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3d8>
    b200:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    b204:	07c1      	lsls	r1, r0, #31
    b206:	2900      	cmp	r1, #0
    b208:	d1cb      	bne.n	b1a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37a>
    b20a:	e7ce      	b.n	b1aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x382>
                trace!("[{:04x}] CLS", self.pc);
    b20c:	f64c 7028 	movw	r0, #53032	; 0xcf28
    b210:	f2c0 0001 	movt	r0, #1
    b214:	6801      	ldr	r1, [r0, #0]
    b216:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b21a:	f100 0212 	add.w	r2, r0, #18
    b21e:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    b222:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    b226:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    b22a:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    b22e:	f2c0 0301 	movt	r3, #1
    b232:	4610      	mov	r0, r2
    b234:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    b238:	4619      	mov	r1, r3
    b23a:	f7ff f9ae 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b23e:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    b242:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    b246:	e7ff      	b.n	b248 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x420>
    b248:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    b24c:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    b250:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    b254:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    b258:	f24c 1228 	movw	r2, #49448	; 0xc128
    b25c:	f2c0 0201 	movt	r2, #1
    b260:	6812      	ldr	r2, [r2, #0]
    b262:	466b      	mov	r3, sp
    b264:	f04f 0c01 	mov.w	ip, #1
    b268:	f8c3 c008 	str.w	ip, [r3, #8]
    b26c:	605a      	str	r2, [r3, #4]
    b26e:	f8c3 c000 	str.w	ip, [r3]
    b272:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    b276:	2202      	movs	r2, #2
    b278:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    b27c:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    b280:	f005 ff9f 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b284:	e7ff      	b.n	b286 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x45e>
    b286:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    b28a:	f64c 7048 	movw	r0, #53064	; 0xcf48
    b28e:	f2c0 0001 	movt	r0, #1
    b292:	6802      	ldr	r2, [r0, #0]
    b294:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    b298:	f006 ff1a 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b29c:	e7ff      	b.n	b29e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x476>
    b29e:	e7ff      	b.n	b2a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x478>
    b2a0:	f241 0048 	movw	r0, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    b2a4:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    b2a8:	4408      	add	r0, r1
    b2aa:	f004 fa8f 	bl	f7cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E>
    b2ae:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    b2b0:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    b2b2:	e7ff      	b.n	b2b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x48c>
    b2b4:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    b2b6:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    b2ba:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    b2bc:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    b2c0:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    b2c2:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    b2c6:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    b2ca:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    b2ce:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    b2d2:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    b2d6:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    b2da:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    b2de:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    b2e2:	f003 fde3 	bl	eeac <_ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E>
    b2e6:	e7ff      	b.n	b2e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4c0>
    b2e8:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    b2ec:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    b2f0:	f003 ff3f 	bl	f172 <_ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E>
    b2f4:	e7ff      	b.n	b2f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4ce>
    b2f6:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    b2fa:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    b2fe:	f006 f89a 	bl	11436 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he2e30225e051e80dE>
    b302:	e7ff      	b.n	b304 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4dc>
    b304:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    b308:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    b30c:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    b310:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    b314:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    b318:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    b31c:	e7ff      	b.n	b31e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4f6>
    b31e:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    b322:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    b326:	f005 ffb3 	bl	11290 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E>
    b32a:	e7ff      	b.n	b32c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x504>
    b32c:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    b330:	2800      	cmp	r0, #0
    b332:	d001      	beq.n	b338 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x510>
    b334:	e7ff      	b.n	b336 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x50e>
    b336:	e002      	b.n	b33e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x516>
        match (
    b338:	f003 b843 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    b33c:	defe      	udf	#254	; 0xfe
    b33e:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    b342:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    b346:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    b34a:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    b34e:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    b352:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    b356:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    b35a:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    b35e:	f241 0248 	movw	r2, #4168	; 0x1048
                    self.hw.vram_set(x, y, false);
    b362:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    b366:	441a      	add	r2, r3
    b368:	2300      	movs	r3, #0
    b36a:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    b36c:	4610      	mov	r0, r2
    b36e:	9afd      	ldr	r2, [sp, #1012]	; 0x3f4
    b370:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    b372:	4611      	mov	r1, r2
    b374:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    b376:	f004 f86c 	bl	f452 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE>
    b37a:	e7ff      	b.n	b37c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x554>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    b37c:	e7cf      	b.n	b31e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x4f6>
    b37e:	2005      	movs	r0, #5
    b380:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    b384:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    b388:	f2c0 0001 	movt	r0, #1
    b38c:	6801      	ldr	r1, [r0, #0]
    b38e:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    b392:	f005 feda 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b396:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    b398:	e01f      	b.n	b3da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5b2>
    b39a:	2001      	movs	r0, #1
    b39c:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    b3a0:	e015      	b.n	b3ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5a6>
    b3a2:	2000      	movs	r0, #0
    b3a4:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    b3a8:	e011      	b.n	b3ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5a6>
    b3aa:	2000      	movs	r0, #0
    b3ac:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    b3b0:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    b3b4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b3b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b3bc:	f005 ff3a 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b3c0:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    b3c4:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    b3c8:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    b3cc:	e00a      	b.n	b3e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5bc>
    b3ce:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    b3d2:	07c0      	lsls	r0, r0, #31
    b3d4:	2800      	cmp	r0, #0
    b3d6:	d112      	bne.n	b3fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5d6>
    b3d8:	e055      	b.n	b486 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x65e>
    b3da:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    b3dc:	07c1      	lsls	r1, r0, #31
    b3de:	2900      	cmp	r1, #0
    b3e0:	d1e3      	bne.n	b3aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x582>
    b3e2:	e7de      	b.n	b3a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x57a>
    b3e4:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    b3e8:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    b3ec:	f005 fead 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b3f0:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    b3f2:	e7ff      	b.n	b3f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x5cc>
    b3f4:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    b3f6:	07c1      	lsls	r1, r0, #31
    b3f8:	2900      	cmp	r1, #0
    b3fa:	d1ce      	bne.n	b39a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x572>
    b3fc:	e7d1      	b.n	b3a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x57a>
                trace!("[{:04x}] RET", self.pc);
    b3fe:	f64c 60ec 	movw	r0, #52972	; 0xceec
    b402:	f2c0 0001 	movt	r0, #1
    b406:	6801      	ldr	r1, [r0, #0]
    b408:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b40c:	f100 0212 	add.w	r2, r0, #18
    b410:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    b414:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    b418:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    b41c:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    b420:	f2c0 0301 	movt	r3, #1
    b424:	4610      	mov	r0, r2
    b426:	91f9      	str	r1, [sp, #996]	; 0x3e4
    b428:	4619      	mov	r1, r3
    b42a:	f7ff f8b6 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b42e:	90f8      	str	r0, [sp, #992]	; 0x3e0
    b430:	91f7      	str	r1, [sp, #988]	; 0x3dc
    b432:	e7ff      	b.n	b434 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x60c>
    b434:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    b436:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    b43a:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    b43c:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    b440:	f24c 1228 	movw	r2, #49448	; 0xc128
    b444:	f2c0 0201 	movt	r2, #1
    b448:	6812      	ldr	r2, [r2, #0]
    b44a:	466b      	mov	r3, sp
    b44c:	f04f 0c01 	mov.w	ip, #1
    b450:	f8c3 c008 	str.w	ip, [r3, #8]
    b454:	605a      	str	r2, [r3, #4]
    b456:	f8c3 c000 	str.w	ip, [r3]
    b45a:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    b45e:	2202      	movs	r2, #2
    b460:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    b464:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    b466:	f005 feac 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b46a:	e7ff      	b.n	b46c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x644>
    b46c:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    b470:	f64c 700c 	movw	r0, #53004	; 0xcf0c
    b474:	f2c0 0001 	movt	r0, #1
    b478:	6802      	ldr	r2, [r0, #0]
    b47a:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    b47e:	f006 fe27 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b482:	e7ff      	b.n	b484 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x65c>
    b484:	e7ff      	b.n	b486 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x65e>
                let addr = self.pop();
    b486:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b48a:	f7ff fc79 	bl	ad80 <_ZN8libchip814Chip8$LT$T$GT$3pop17h83869a19cba77f72E>
    b48e:	4601      	mov	r1, r0
    b490:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    b494:	91f6      	str	r1, [sp, #984]	; 0x3d8
    b496:	e7ff      	b.n	b498 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x670>
                self.jump(addr);
    b498:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b49c:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    b49e:	f003 fa7f 	bl	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    b4a2:	e7ff      	b.n	b4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x67c>
        match (
    b4a4:	f002 bf8d 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    b4a8:	2005      	movs	r0, #5
    b4aa:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    b4ae:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    b4b2:	f2c0 0001 	movt	r0, #1
    b4b6:	6801      	ldr	r1, [r0, #0]
    b4b8:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    b4bc:	f005 fe45 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b4c0:	90f5      	str	r0, [sp, #980]	; 0x3d4
    b4c2:	e01f      	b.n	b504 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6dc>
    b4c4:	2001      	movs	r0, #1
    b4c6:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    b4ca:	e015      	b.n	b4f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6d0>
    b4cc:	2000      	movs	r0, #0
    b4ce:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    b4d2:	e011      	b.n	b4f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6d0>
    b4d4:	2000      	movs	r0, #0
    b4d6:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    b4da:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    b4de:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b4e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b4e6:	f005 fea5 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b4ea:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    b4ee:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    b4f2:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    b4f6:	e00a      	b.n	b50e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6e6>
    b4f8:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    b4fc:	07c0      	lsls	r0, r0, #31
    b4fe:	2800      	cmp	r0, #0
    b500:	d112      	bne.n	b528 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x700>
    b502:	e055      	b.n	b5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x788>
    b504:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    b506:	07c1      	lsls	r1, r0, #31
    b508:	2900      	cmp	r1, #0
    b50a:	d1e3      	bne.n	b4d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6ac>
    b50c:	e7de      	b.n	b4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6a4>
    b50e:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    b512:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    b516:	f005 fe18 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b51a:	90f4      	str	r0, [sp, #976]	; 0x3d0
    b51c:	e7ff      	b.n	b51e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6f6>
    b51e:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    b520:	07c1      	lsls	r1, r0, #31
    b522:	2900      	cmp	r1, #0
    b524:	d1ce      	bne.n	b4c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x69c>
    b526:	e7d1      	b.n	b4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x6a4>
                trace!("[{:04x}] SYS nnn", self.pc);
    b528:	f64c 6090 	movw	r0, #52880	; 0xce90
    b52c:	f2c0 0001 	movt	r0, #1
    b530:	6801      	ldr	r1, [r0, #0]
    b532:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b536:	f100 0212 	add.w	r2, r0, #18
    b53a:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    b53e:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    b542:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    b546:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    b54a:	f2c0 0301 	movt	r3, #1
    b54e:	4610      	mov	r0, r2
    b550:	91f3      	str	r1, [sp, #972]	; 0x3cc
    b552:	4619      	mov	r1, r3
    b554:	f7ff f821 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b558:	90f2      	str	r0, [sp, #968]	; 0x3c8
    b55a:	91f1      	str	r1, [sp, #964]	; 0x3c4
    b55c:	e7ff      	b.n	b55e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x736>
    b55e:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    b560:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    b564:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    b566:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    b56a:	f24c 1228 	movw	r2, #49448	; 0xc128
    b56e:	f2c0 0201 	movt	r2, #1
    b572:	6812      	ldr	r2, [r2, #0]
    b574:	466b      	mov	r3, sp
    b576:	f04f 0c01 	mov.w	ip, #1
    b57a:	f8c3 c008 	str.w	ip, [r3, #8]
    b57e:	605a      	str	r2, [r3, #4]
    b580:	f8c3 c000 	str.w	ip, [r3]
    b584:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    b588:	2202      	movs	r2, #2
    b58a:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    b58e:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    b590:	f005 fe17 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b594:	e7ff      	b.n	b596 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x76e>
    b596:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    b59a:	f64c 60b0 	movw	r0, #52912	; 0xceb0
    b59e:	f2c0 0001 	movt	r0, #1
    b5a2:	6802      	ldr	r2, [r0, #0]
    b5a4:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    b5a8:	f006 fd92 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b5ac:	e7ff      	b.n	b5ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x786>
    b5ae:	e7ff      	b.n	b5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x788>
    b5b0:	f64c 60b4 	movw	r0, #52916	; 0xceb4
    b5b4:	f2c0 0001 	movt	r0, #1
    b5b8:	f64c 62c4 	movw	r2, #52932	; 0xcec4
    b5bc:	f2c0 0201 	movt	r2, #1
    b5c0:	210f      	movs	r1, #15
    b5c2:	f009 ff89 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b5c6:	defe      	udf	#254	; 0xfe
    b5c8:	2005      	movs	r0, #5
    b5ca:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    b5ce:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    b5d2:	f2c0 0001 	movt	r0, #1
    b5d6:	6801      	ldr	r1, [r0, #0]
    b5d8:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    b5dc:	f005 fdb5 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b5e0:	90f0      	str	r0, [sp, #960]	; 0x3c0
    b5e2:	e01f      	b.n	b624 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7fc>
    b5e4:	2001      	movs	r0, #1
    b5e6:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    b5ea:	e015      	b.n	b618 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7f0>
    b5ec:	2000      	movs	r0, #0
    b5ee:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    b5f2:	e011      	b.n	b618 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7f0>
    b5f4:	2000      	movs	r0, #0
    b5f6:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    b5fa:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    b5fe:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b602:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b606:	f005 fe15 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b60a:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    b60e:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    b612:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    b616:	e00a      	b.n	b62e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x806>
    b618:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    b61c:	07c0      	lsls	r0, r0, #31
    b61e:	2800      	cmp	r0, #0
    b620:	d112      	bne.n	b648 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x820>
    b622:	e055      	b.n	b6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8a8>
    b624:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    b626:	07c1      	lsls	r1, r0, #31
    b628:	2900      	cmp	r1, #0
    b62a:	d1e3      	bne.n	b5f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7cc>
    b62c:	e7de      	b.n	b5ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7c4>
    b62e:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    b632:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    b636:	f005 fd88 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b63a:	90ef      	str	r0, [sp, #956]	; 0x3bc
    b63c:	e7ff      	b.n	b63e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x816>
    b63e:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    b640:	07c1      	lsls	r1, r0, #31
    b642:	2900      	cmp	r1, #0
    b644:	d1ce      	bne.n	b5e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7bc>
    b646:	e7d1      	b.n	b5ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x7c4>
                trace!("[{:04x}] JP nnn", self.pc);
    b648:	f64c 6050 	movw	r0, #52816	; 0xce50
    b64c:	f2c0 0001 	movt	r0, #1
    b650:	6801      	ldr	r1, [r0, #0]
    b652:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b656:	f100 0212 	add.w	r2, r0, #18
    b65a:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    b65e:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    b662:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    b666:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    b66a:	f2c0 0301 	movt	r3, #1
    b66e:	4610      	mov	r0, r2
    b670:	91ee      	str	r1, [sp, #952]	; 0x3b8
    b672:	4619      	mov	r1, r3
    b674:	f7fe ff91 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b678:	90ed      	str	r0, [sp, #948]	; 0x3b4
    b67a:	91ec      	str	r1, [sp, #944]	; 0x3b0
    b67c:	e7ff      	b.n	b67e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x856>
    b67e:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    b680:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    b684:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    b686:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    b68a:	f24c 1228 	movw	r2, #49448	; 0xc128
    b68e:	f2c0 0201 	movt	r2, #1
    b692:	6812      	ldr	r2, [r2, #0]
    b694:	466b      	mov	r3, sp
    b696:	f04f 0c01 	mov.w	ip, #1
    b69a:	f8c3 c008 	str.w	ip, [r3, #8]
    b69e:	605a      	str	r2, [r3, #4]
    b6a0:	f8c3 c000 	str.w	ip, [r3]
    b6a4:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    b6a8:	2202      	movs	r2, #2
    b6aa:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    b6ae:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    b6b0:	f005 fd87 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b6b4:	e7ff      	b.n	b6b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x88e>
    b6b6:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    b6ba:	f64c 6070 	movw	r0, #52848	; 0xce70
    b6be:	f2c0 0001 	movt	r0, #1
    b6c2:	6802      	ldr	r2, [r0, #0]
    b6c4:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    b6c8:	f006 fd02 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b6cc:	e7ff      	b.n	b6ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8a6>
    b6ce:	e7ff      	b.n	b6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8a8>
    b6d0:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    b6d2:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    b6d6:	f003 fcdf 	bl	f098 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>
    b6da:	90eb      	str	r0, [sp, #940]	; 0x3ac
    b6dc:	e7ff      	b.n	b6de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8b6>
    b6de:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b6e2:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    b6e4:	f003 f95c 	bl	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    b6e8:	e7ff      	b.n	b6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8c2>
        match (
    b6ea:	f002 be6a 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    b6ee:	2005      	movs	r0, #5
    b6f0:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    b6f4:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    b6f8:	f2c0 0001 	movt	r0, #1
    b6fc:	6801      	ldr	r1, [r0, #0]
    b6fe:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    b702:	f005 fd22 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b706:	90ea      	str	r0, [sp, #936]	; 0x3a8
    b708:	e01f      	b.n	b74a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x922>
    b70a:	2001      	movs	r0, #1
    b70c:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    b710:	e015      	b.n	b73e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x916>
    b712:	2000      	movs	r0, #0
    b714:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    b718:	e011      	b.n	b73e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x916>
    b71a:	2000      	movs	r0, #0
    b71c:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    b720:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    b724:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b728:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b72c:	f005 fd82 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b730:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    b734:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    b738:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    b73c:	e00a      	b.n	b754 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x92c>
    b73e:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    b742:	07c0      	lsls	r0, r0, #31
    b744:	2800      	cmp	r0, #0
    b746:	d112      	bne.n	b76e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x946>
    b748:	e055      	b.n	b7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9ce>
    b74a:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    b74c:	07c1      	lsls	r1, r0, #31
    b74e:	2900      	cmp	r1, #0
    b750:	d1e3      	bne.n	b71a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8f2>
    b752:	e7de      	b.n	b712 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8ea>
    b754:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    b758:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    b75c:	f005 fcf5 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b760:	90e9      	str	r0, [sp, #932]	; 0x3a4
    b762:	e7ff      	b.n	b764 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x93c>
    b764:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    b766:	07c1      	lsls	r1, r0, #31
    b768:	2900      	cmp	r1, #0
    b76a:	d1ce      	bne.n	b70a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8e2>
    b76c:	e7d1      	b.n	b712 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x8ea>
                trace!("[{:04x}] CALL nnn", self.pc);
    b76e:	f64c 601c 	movw	r0, #52764	; 0xce1c
    b772:	f2c0 0001 	movt	r0, #1
    b776:	6801      	ldr	r1, [r0, #0]
    b778:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b77c:	f100 0212 	add.w	r2, r0, #18
    b780:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    b784:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    b788:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    b78c:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    b790:	f2c0 0301 	movt	r3, #1
    b794:	4610      	mov	r0, r2
    b796:	91e8      	str	r1, [sp, #928]	; 0x3a0
    b798:	4619      	mov	r1, r3
    b79a:	f7fe fefe 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b79e:	90e7      	str	r0, [sp, #924]	; 0x39c
    b7a0:	91e6      	str	r1, [sp, #920]	; 0x398
    b7a2:	e7ff      	b.n	b7a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x97c>
    b7a4:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    b7a6:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    b7aa:	99e6      	ldr	r1, [sp, #920]	; 0x398
    b7ac:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    b7b0:	f24c 1228 	movw	r2, #49448	; 0xc128
    b7b4:	f2c0 0201 	movt	r2, #1
    b7b8:	6812      	ldr	r2, [r2, #0]
    b7ba:	466b      	mov	r3, sp
    b7bc:	f04f 0c01 	mov.w	ip, #1
    b7c0:	f8c3 c008 	str.w	ip, [r3, #8]
    b7c4:	605a      	str	r2, [r3, #4]
    b7c6:	f8c3 c000 	str.w	ip, [r3]
    b7ca:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    b7ce:	2202      	movs	r2, #2
    b7d0:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    b7d4:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    b7d6:	f005 fcf4 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b7da:	e7ff      	b.n	b7dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9b4>
    b7dc:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    b7e0:	f64c 603c 	movw	r0, #52796	; 0xce3c
    b7e4:	f2c0 0001 	movt	r0, #1
    b7e8:	6802      	ldr	r2, [r0, #0]
    b7ea:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    b7ee:	f006 fc6f 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b7f2:	e7ff      	b.n	b7f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9cc>
    b7f4:	e7ff      	b.n	b7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9ce>
                self.push(self.pc);
    b7f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b7fa:	8a41      	ldrh	r1, [r0, #18]
    b7fc:	f003 f926 	bl	ea4c <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE>
    b800:	e7ff      	b.n	b802 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9da>
    b802:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    b804:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    b808:	f003 fc46 	bl	f098 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>
    b80c:	90e5      	str	r0, [sp, #916]	; 0x394
    b80e:	e7ff      	b.n	b810 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9e8>
    b810:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b814:	99e5      	ldr	r1, [sp, #916]	; 0x394
    b816:	f003 f8c3 	bl	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    b81a:	e7ff      	b.n	b81c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x9f4>
        match (
    b81c:	f002 bdd1 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    b820:	2005      	movs	r0, #5
    b822:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    b826:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    b82a:	f2c0 0001 	movt	r0, #1
    b82e:	6801      	ldr	r1, [r0, #0]
    b830:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    b834:	f005 fc89 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b838:	90e4      	str	r0, [sp, #912]	; 0x390
    b83a:	e01f      	b.n	b87c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa54>
    b83c:	2001      	movs	r0, #1
    b83e:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    b842:	e015      	b.n	b870 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa48>
    b844:	2000      	movs	r0, #0
    b846:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    b84a:	e011      	b.n	b870 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa48>
    b84c:	2000      	movs	r0, #0
    b84e:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    b852:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    b856:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b85a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b85e:	f005 fce9 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b862:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    b866:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    b86a:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    b86e:	e00a      	b.n	b886 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa5e>
    b870:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    b874:	07c0      	lsls	r0, r0, #31
    b876:	2800      	cmp	r0, #0
    b878:	d112      	bne.n	b8a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa78>
    b87a:	e055      	b.n	b928 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb00>
    b87c:	98e4      	ldr	r0, [sp, #912]	; 0x390
    b87e:	07c1      	lsls	r1, r0, #31
    b880:	2900      	cmp	r1, #0
    b882:	d1e3      	bne.n	b84c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa24>
    b884:	e7de      	b.n	b844 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa1c>
    b886:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    b88a:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    b88e:	f005 fc5c 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b892:	90e3      	str	r0, [sp, #908]	; 0x38c
    b894:	e7ff      	b.n	b896 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa6e>
    b896:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    b898:	07c1      	lsls	r1, r0, #31
    b89a:	2900      	cmp	r1, #0
    b89c:	d1ce      	bne.n	b83c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa14>
    b89e:	e7d1      	b.n	b844 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xa1c>
                trace!("[{:04x}] SE Vx kk", self.pc);
    b8a0:	f64c 50cc 	movw	r0, #52684	; 0xcdcc
    b8a4:	f2c0 0001 	movt	r0, #1
    b8a8:	6801      	ldr	r1, [r0, #0]
    b8aa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b8ae:	f100 0212 	add.w	r2, r0, #18
    b8b2:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    b8b6:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    b8ba:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    b8be:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    b8c2:	f2c0 0301 	movt	r3, #1
    b8c6:	4610      	mov	r0, r2
    b8c8:	91e2      	str	r1, [sp, #904]	; 0x388
    b8ca:	4619      	mov	r1, r3
    b8cc:	f7fe fe65 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b8d0:	90e1      	str	r0, [sp, #900]	; 0x384
    b8d2:	91e0      	str	r1, [sp, #896]	; 0x380
    b8d4:	e7ff      	b.n	b8d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xaae>
    b8d6:	98e1      	ldr	r0, [sp, #900]	; 0x384
    b8d8:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    b8dc:	99e0      	ldr	r1, [sp, #896]	; 0x380
    b8de:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    b8e2:	f24c 1228 	movw	r2, #49448	; 0xc128
    b8e6:	f2c0 0201 	movt	r2, #1
    b8ea:	6812      	ldr	r2, [r2, #0]
    b8ec:	466b      	mov	r3, sp
    b8ee:	f04f 0c01 	mov.w	ip, #1
    b8f2:	f8c3 c008 	str.w	ip, [r3, #8]
    b8f6:	605a      	str	r2, [r3, #4]
    b8f8:	f8c3 c000 	str.w	ip, [r3]
    b8fc:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    b900:	2202      	movs	r2, #2
    b902:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    b906:	99e2      	ldr	r1, [sp, #904]	; 0x388
    b908:	f005 fc5b 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    b90c:	e7ff      	b.n	b90e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xae6>
    b90e:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    b912:	f64c 50ec 	movw	r0, #52716	; 0xcdec
    b916:	f2c0 0001 	movt	r0, #1
    b91a:	6802      	ldr	r2, [r0, #0]
    b91c:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    b920:	f006 fbd6 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b924:	e7ff      	b.n	b926 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xafe>
    b926:	e7ff      	b.n	b928 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb00>
                if self.v[x] == kk {
    b928:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b92c:	280f      	cmp	r0, #15
    b92e:	f203 8011 	bhi.w	e954 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3b2c>
    b932:	e7ff      	b.n	b934 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb0c>
    b934:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b938:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b93c:	1842      	adds	r2, r0, r1
    b93e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b942:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    b946:	fa5f fc83 	uxtb.w	ip, r3
    b94a:	4562      	cmp	r2, ip
    b94c:	d106      	bne.n	b95c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb34>
    b94e:	e7ff      	b.n	b950 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb28>
                    self.next();
    b950:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b954:	f003 f867 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    b958:	e7ff      	b.n	b95a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb32>
                if self.v[x] == kk {
    b95a:	e7ff      	b.n	b95c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb34>
        match (
    b95c:	f002 bd31 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    b960:	2005      	movs	r0, #5
    b962:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    b966:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    b96a:	f2c0 0001 	movt	r0, #1
    b96e:	6801      	ldr	r1, [r0, #0]
    b970:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    b974:	f005 fbe9 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b978:	90df      	str	r0, [sp, #892]	; 0x37c
    b97a:	e01f      	b.n	b9bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb94>
    b97c:	2001      	movs	r0, #1
    b97e:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    b982:	e015      	b.n	b9b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb88>
    b984:	2000      	movs	r0, #0
    b986:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    b98a:	e011      	b.n	b9b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb88>
    b98c:	2000      	movs	r0, #0
    b98e:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    b992:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    b996:	f644 206c 	movw	r0, #19052	; 0x4a6c
    b99a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b99e:	f005 fc49 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    b9a2:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    b9a6:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    b9aa:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    b9ae:	e00a      	b.n	b9c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb9e>
    b9b0:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    b9b4:	07c0      	lsls	r0, r0, #31
    b9b6:	2800      	cmp	r0, #0
    b9b8:	d112      	bne.n	b9e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xbb8>
    b9ba:	e055      	b.n	ba68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc40>
    b9bc:	98df      	ldr	r0, [sp, #892]	; 0x37c
    b9be:	07c1      	lsls	r1, r0, #31
    b9c0:	2900      	cmp	r1, #0
    b9c2:	d1e3      	bne.n	b98c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb64>
    b9c4:	e7de      	b.n	b984 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb5c>
    b9c6:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    b9ca:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    b9ce:	f005 fbbc 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    b9d2:	90de      	str	r0, [sp, #888]	; 0x378
    b9d4:	e7ff      	b.n	b9d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xbae>
    b9d6:	98de      	ldr	r0, [sp, #888]	; 0x378
    b9d8:	07c1      	lsls	r1, r0, #31
    b9da:	2900      	cmp	r1, #0
    b9dc:	d1ce      	bne.n	b97c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb54>
    b9de:	e7d1      	b.n	b984 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xb5c>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    b9e0:	f64c 507c 	movw	r0, #52604	; 0xcd7c
    b9e4:	f2c0 0001 	movt	r0, #1
    b9e8:	6801      	ldr	r1, [r0, #0]
    b9ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b9ee:	f100 0212 	add.w	r2, r0, #18
    b9f2:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    b9f6:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    b9fa:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    b9fe:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    ba02:	f2c0 0301 	movt	r3, #1
    ba06:	4610      	mov	r0, r2
    ba08:	91dd      	str	r1, [sp, #884]	; 0x374
    ba0a:	4619      	mov	r1, r3
    ba0c:	f7fe fdc5 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ba10:	90dc      	str	r0, [sp, #880]	; 0x370
    ba12:	91db      	str	r1, [sp, #876]	; 0x36c
    ba14:	e7ff      	b.n	ba16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xbee>
    ba16:	98dc      	ldr	r0, [sp, #880]	; 0x370
    ba18:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    ba1c:	99db      	ldr	r1, [sp, #876]	; 0x36c
    ba1e:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    ba22:	f24c 1228 	movw	r2, #49448	; 0xc128
    ba26:	f2c0 0201 	movt	r2, #1
    ba2a:	6812      	ldr	r2, [r2, #0]
    ba2c:	466b      	mov	r3, sp
    ba2e:	f04f 0c01 	mov.w	ip, #1
    ba32:	f8c3 c008 	str.w	ip, [r3, #8]
    ba36:	605a      	str	r2, [r3, #4]
    ba38:	f8c3 c000 	str.w	ip, [r3]
    ba3c:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    ba40:	2202      	movs	r2, #2
    ba42:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    ba46:	99dd      	ldr	r1, [sp, #884]	; 0x374
    ba48:	f005 fbbb 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    ba4c:	e7ff      	b.n	ba4e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc26>
    ba4e:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    ba52:	f64c 509c 	movw	r0, #52636	; 0xcd9c
    ba56:	f2c0 0001 	movt	r0, #1
    ba5a:	6802      	ldr	r2, [r0, #0]
    ba5c:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    ba60:	f006 fb36 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ba64:	e7ff      	b.n	ba66 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc3e>
    ba66:	e7ff      	b.n	ba68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc40>
                if self.v[x] != kk {
    ba68:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ba6c:	280f      	cmp	r0, #15
    ba6e:	f202 8767 	bhi.w	e940 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3b18>
    ba72:	e7ff      	b.n	ba74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc4c>
    ba74:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba78:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ba7c:	1842      	adds	r2, r0, r1
    ba7e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ba82:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    ba86:	fa5f fc83 	uxtb.w	ip, r3
    ba8a:	4562      	cmp	r2, ip
    ba8c:	d006      	beq.n	ba9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc74>
    ba8e:	e7ff      	b.n	ba90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc68>
                    self.next();
    ba90:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba94:	f002 ffc7 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    ba98:	e7ff      	b.n	ba9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc72>
                if self.v[x] != kk {
    ba9a:	e7ff      	b.n	ba9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc74>
        match (
    ba9c:	f002 bc91 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    baa0:	2005      	movs	r0, #5
    baa2:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    baa6:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    baaa:	f2c0 0001 	movt	r0, #1
    baae:	6801      	ldr	r1, [r0, #0]
    bab0:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    bab4:	f005 fb49 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bab8:	90da      	str	r0, [sp, #872]	; 0x368
    baba:	e01f      	b.n	bafc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcd4>
    babc:	2001      	movs	r0, #1
    babe:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    bac2:	e015      	b.n	baf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcc8>
    bac4:	2000      	movs	r0, #0
    bac6:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    baca:	e011      	b.n	baf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcc8>
    bacc:	2000      	movs	r0, #0
    bace:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    bad2:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    bad6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bada:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bade:	f005 fba9 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bae2:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    bae6:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    baea:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    baee:	e00a      	b.n	bb06 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcde>
    baf0:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    baf4:	07c0      	lsls	r0, r0, #31
    baf6:	2800      	cmp	r0, #0
    baf8:	d112      	bne.n	bb20 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcf8>
    bafa:	e055      	b.n	bba8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd80>
    bafc:	98da      	ldr	r0, [sp, #872]	; 0x368
    bafe:	07c1      	lsls	r1, r0, #31
    bb00:	2900      	cmp	r1, #0
    bb02:	d1e3      	bne.n	bacc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xca4>
    bb04:	e7de      	b.n	bac4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc9c>
    bb06:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    bb0a:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    bb0e:	f005 fb1c 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bb12:	90d9      	str	r0, [sp, #868]	; 0x364
    bb14:	e7ff      	b.n	bb16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xcee>
    bb16:	98d9      	ldr	r0, [sp, #868]	; 0x364
    bb18:	07c1      	lsls	r1, r0, #31
    bb1a:	2900      	cmp	r1, #0
    bb1c:	d1ce      	bne.n	babc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc94>
    bb1e:	e7d1      	b.n	bac4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xc9c>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    bb20:	f64c 501c 	movw	r0, #52508	; 0xcd1c
    bb24:	f2c0 0001 	movt	r0, #1
    bb28:	6801      	ldr	r1, [r0, #0]
    bb2a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bb2e:	f100 0212 	add.w	r2, r0, #18
    bb32:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    bb36:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    bb3a:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    bb3e:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    bb42:	f2c0 0301 	movt	r3, #1
    bb46:	4610      	mov	r0, r2
    bb48:	91d8      	str	r1, [sp, #864]	; 0x360
    bb4a:	4619      	mov	r1, r3
    bb4c:	f7fe fd25 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bb50:	90d7      	str	r0, [sp, #860]	; 0x35c
    bb52:	91d6      	str	r1, [sp, #856]	; 0x358
    bb54:	e7ff      	b.n	bb56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd2e>
    bb56:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    bb58:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    bb5c:	99d6      	ldr	r1, [sp, #856]	; 0x358
    bb5e:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    bb62:	f24c 1228 	movw	r2, #49448	; 0xc128
    bb66:	f2c0 0201 	movt	r2, #1
    bb6a:	6812      	ldr	r2, [r2, #0]
    bb6c:	466b      	mov	r3, sp
    bb6e:	f04f 0c01 	mov.w	ip, #1
    bb72:	f8c3 c008 	str.w	ip, [r3, #8]
    bb76:	605a      	str	r2, [r3, #4]
    bb78:	f8c3 c000 	str.w	ip, [r3]
    bb7c:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    bb80:	2202      	movs	r2, #2
    bb82:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    bb86:	99d8      	ldr	r1, [sp, #864]	; 0x360
    bb88:	f005 fb1b 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bb8c:	e7ff      	b.n	bb8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd66>
    bb8e:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    bb92:	f64c 503c 	movw	r0, #52540	; 0xcd3c
    bb96:	f2c0 0001 	movt	r0, #1
    bb9a:	6802      	ldr	r2, [r0, #0]
    bb9c:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    bba0:	f006 fa96 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bba4:	e7ff      	b.n	bba6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd7e>
    bba6:	e7ff      	b.n	bba8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd80>
                if self.v[x] == self.v[y] {
    bba8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bbac:	280f      	cmp	r0, #15
    bbae:	f202 86b3 	bhi.w	e918 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3af0>
    bbb2:	e7ff      	b.n	bbb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xd8c>
    bbb4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bbb8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bbbc:	1842      	adds	r2, r0, r1
    bbbe:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bbc2:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    bbc6:	2b0f      	cmp	r3, #15
    bbc8:	92d5      	str	r2, [sp, #852]	; 0x354
    bbca:	f202 86af 	bhi.w	e92c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3b04>
    bbce:	e7ff      	b.n	bbd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xda8>
    bbd0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bbd4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    bbd8:	1842      	adds	r2, r0, r1
    bbda:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bbde:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    bbe0:	fa5f fc83 	uxtb.w	ip, r3
    bbe4:	4594      	cmp	ip, r2
    bbe6:	d106      	bne.n	bbf6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdce>
    bbe8:	e7ff      	b.n	bbea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdc2>
                    self.next();
    bbea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bbee:	f002 ff1a 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    bbf2:	e7ff      	b.n	bbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdcc>
                if self.v[x] == self.v[y] {
    bbf4:	e7ff      	b.n	bbf6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdce>
        match (
    bbf6:	f002 bbe4 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bbfa:	2005      	movs	r0, #5
    bbfc:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    bc00:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    bc04:	f2c0 0001 	movt	r0, #1
    bc08:	6801      	ldr	r1, [r0, #0]
    bc0a:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    bc0e:	f005 fa9c 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bc12:	90d4      	str	r0, [sp, #848]	; 0x350
    bc14:	e01f      	b.n	bc56 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe2e>
    bc16:	2001      	movs	r0, #1
    bc18:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    bc1c:	e015      	b.n	bc4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe22>
    bc1e:	2000      	movs	r0, #0
    bc20:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    bc24:	e011      	b.n	bc4a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe22>
    bc26:	2000      	movs	r0, #0
    bc28:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    bc2c:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    bc30:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bc34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bc38:	f005 fafc 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bc3c:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    bc40:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    bc44:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    bc48:	e00a      	b.n	bc60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe38>
    bc4a:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    bc4e:	07c0      	lsls	r0, r0, #31
    bc50:	2800      	cmp	r0, #0
    bc52:	d112      	bne.n	bc7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe52>
    bc54:	e055      	b.n	bd02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xeda>
    bc56:	98d4      	ldr	r0, [sp, #848]	; 0x350
    bc58:	07c1      	lsls	r1, r0, #31
    bc5a:	2900      	cmp	r1, #0
    bc5c:	d1e3      	bne.n	bc26 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdfe>
    bc5e:	e7de      	b.n	bc1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdf6>
    bc60:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    bc64:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    bc68:	f005 fa6f 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bc6c:	90d3      	str	r0, [sp, #844]	; 0x34c
    bc6e:	e7ff      	b.n	bc70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe48>
    bc70:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    bc72:	07c1      	lsls	r1, r0, #31
    bc74:	2900      	cmp	r1, #0
    bc76:	d1ce      	bne.n	bc16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdee>
    bc78:	e7d1      	b.n	bc1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xdf6>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    bc7a:	f64c 4034 	movw	r0, #52276	; 0xcc34
    bc7e:	f2c0 0001 	movt	r0, #1
    bc82:	6801      	ldr	r1, [r0, #0]
    bc84:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bc88:	f100 0212 	add.w	r2, r0, #18
    bc8c:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    bc90:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    bc94:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    bc98:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    bc9c:	f2c0 0301 	movt	r3, #1
    bca0:	4610      	mov	r0, r2
    bca2:	91d2      	str	r1, [sp, #840]	; 0x348
    bca4:	4619      	mov	r1, r3
    bca6:	f7fe fc78 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bcaa:	90d1      	str	r0, [sp, #836]	; 0x344
    bcac:	91d0      	str	r1, [sp, #832]	; 0x340
    bcae:	e7ff      	b.n	bcb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xe88>
    bcb0:	98d1      	ldr	r0, [sp, #836]	; 0x344
    bcb2:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    bcb6:	99d0      	ldr	r1, [sp, #832]	; 0x340
    bcb8:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    bcbc:	f24c 1228 	movw	r2, #49448	; 0xc128
    bcc0:	f2c0 0201 	movt	r2, #1
    bcc4:	6812      	ldr	r2, [r2, #0]
    bcc6:	466b      	mov	r3, sp
    bcc8:	f04f 0c01 	mov.w	ip, #1
    bccc:	f8c3 c008 	str.w	ip, [r3, #8]
    bcd0:	605a      	str	r2, [r3, #4]
    bcd2:	f8c3 c000 	str.w	ip, [r3]
    bcd6:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    bcda:	2202      	movs	r2, #2
    bcdc:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    bce0:	99d2      	ldr	r1, [sp, #840]	; 0x348
    bce2:	f005 fa6e 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bce6:	e7ff      	b.n	bce8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xec0>
    bce8:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    bcec:	f64c 4054 	movw	r0, #52308	; 0xcc54
    bcf0:	f2c0 0001 	movt	r0, #1
    bcf4:	6802      	ldr	r2, [r0, #0]
    bcf6:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    bcfa:	f006 f9e9 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bcfe:	e7ff      	b.n	bd00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xed8>
    bd00:	e7ff      	b.n	bd02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xeda>
                self.v[x] = kk;
    bd02:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bd06:	280f      	cmp	r0, #15
    bd08:	f202 85fc 	bhi.w	e904 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3adc>
    bd0c:	e7ff      	b.n	bd0e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xee6>
    bd0e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bd12:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bd16:	1842      	adds	r2, r0, r1
    bd18:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    bd1c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    bd20:	f002 bb4f 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bd24:	2005      	movs	r0, #5
    bd26:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    bd2a:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    bd2e:	f2c0 0001 	movt	r0, #1
    bd32:	6801      	ldr	r1, [r0, #0]
    bd34:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    bd38:	f005 fa07 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bd3c:	90cf      	str	r0, [sp, #828]	; 0x33c
    bd3e:	e01f      	b.n	bd80 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf58>
    bd40:	2001      	movs	r0, #1
    bd42:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    bd46:	e015      	b.n	bd74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf4c>
    bd48:	2000      	movs	r0, #0
    bd4a:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    bd4e:	e011      	b.n	bd74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf4c>
    bd50:	2000      	movs	r0, #0
    bd52:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    bd56:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    bd5a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bd5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bd62:	f005 fa67 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bd66:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    bd6a:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    bd6e:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    bd72:	e00a      	b.n	bd8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf62>
    bd74:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    bd78:	07c0      	lsls	r0, r0, #31
    bd7a:	2800      	cmp	r0, #0
    bd7c:	d112      	bne.n	bda4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf7c>
    bd7e:	e055      	b.n	be2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1004>
    bd80:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    bd82:	07c1      	lsls	r1, r0, #31
    bd84:	2900      	cmp	r1, #0
    bd86:	d1e3      	bne.n	bd50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf28>
    bd88:	e7de      	b.n	bd48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf20>
    bd8a:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    bd8e:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    bd92:	f005 f9da 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bd96:	90ce      	str	r0, [sp, #824]	; 0x338
    bd98:	e7ff      	b.n	bd9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf72>
    bd9a:	98ce      	ldr	r0, [sp, #824]	; 0x338
    bd9c:	07c1      	lsls	r1, r0, #31
    bd9e:	2900      	cmp	r1, #0
    bda0:	d1ce      	bne.n	bd40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf18>
    bda2:	e7d1      	b.n	bd48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xf20>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    bda4:	f64c 30d4 	movw	r0, #52180	; 0xcbd4
    bda8:	f2c0 0001 	movt	r0, #1
    bdac:	6801      	ldr	r1, [r0, #0]
    bdae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bdb2:	f100 0212 	add.w	r2, r0, #18
    bdb6:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    bdba:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    bdbe:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    bdc2:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    bdc6:	f2c0 0301 	movt	r3, #1
    bdca:	4610      	mov	r0, r2
    bdcc:	91cd      	str	r1, [sp, #820]	; 0x334
    bdce:	4619      	mov	r1, r3
    bdd0:	f7fe fbe3 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bdd4:	90cc      	str	r0, [sp, #816]	; 0x330
    bdd6:	91cb      	str	r1, [sp, #812]	; 0x32c
    bdd8:	e7ff      	b.n	bdda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xfb2>
    bdda:	98cc      	ldr	r0, [sp, #816]	; 0x330
    bddc:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    bde0:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    bde2:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    bde6:	f24c 1228 	movw	r2, #49448	; 0xc128
    bdea:	f2c0 0201 	movt	r2, #1
    bdee:	6812      	ldr	r2, [r2, #0]
    bdf0:	466b      	mov	r3, sp
    bdf2:	f04f 0c01 	mov.w	ip, #1
    bdf6:	f8c3 c008 	str.w	ip, [r3, #8]
    bdfa:	605a      	str	r2, [r3, #4]
    bdfc:	f8c3 c000 	str.w	ip, [r3]
    be00:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    be04:	2202      	movs	r2, #2
    be06:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    be0a:	99cd      	ldr	r1, [sp, #820]	; 0x334
    be0c:	f005 f9d9 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    be10:	e7ff      	b.n	be12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0xfea>
    be12:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    be16:	f64c 30f4 	movw	r0, #52212	; 0xcbf4
    be1a:	f2c0 0001 	movt	r0, #1
    be1e:	6802      	ldr	r2, [r0, #0]
    be20:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    be24:	f006 f954 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    be28:	e7ff      	b.n	be2a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1002>
    be2a:	e7ff      	b.n	be2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1004>
                self.v[x] = self.v[x].wrapping_add(kk);
    be2c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    be30:	280f      	cmp	r0, #15
    be32:	f202 8553 	bhi.w	e8dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ab4>
    be36:	e7ff      	b.n	be38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1010>
    be38:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    be3c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    be40:	1842      	adds	r2, r0, r1
    be42:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    be46:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    be4a:	f003 f877 	bl	ef3c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE>
    be4e:	90ca      	str	r0, [sp, #808]	; 0x328
    be50:	e7ff      	b.n	be52 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x102a>
    be52:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    be56:	280f      	cmp	r0, #15
    be58:	f202 854a 	bhi.w	e8f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3ac8>
    be5c:	e7ff      	b.n	be5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1036>
    be5e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    be62:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    be66:	1842      	adds	r2, r0, r1
    be68:	9bca      	ldr	r3, [sp, #808]	; 0x328
    be6a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    be6e:	f002 baa8 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    be72:	2005      	movs	r0, #5
    be74:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    be78:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    be7c:	f2c0 0001 	movt	r0, #1
    be80:	6801      	ldr	r1, [r0, #0]
    be82:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    be86:	f005 f960 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    be8a:	90c9      	str	r0, [sp, #804]	; 0x324
    be8c:	e01f      	b.n	bece <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10a6>
    be8e:	2001      	movs	r0, #1
    be90:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    be94:	e015      	b.n	bec2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x109a>
    be96:	2000      	movs	r0, #0
    be98:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    be9c:	e011      	b.n	bec2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x109a>
    be9e:	2000      	movs	r0, #0
    bea0:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    bea4:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    bea8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    beac:	f2c2 0000 	movt	r0, #8192	; 0x2000
    beb0:	f005 f9c0 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    beb4:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    beb8:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    bebc:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    bec0:	e00a      	b.n	bed8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10b0>
    bec2:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    bec6:	07c0      	lsls	r0, r0, #31
    bec8:	2800      	cmp	r0, #0
    beca:	d112      	bne.n	bef2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10ca>
    becc:	e055      	b.n	bf7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1152>
    bece:	98c9      	ldr	r0, [sp, #804]	; 0x324
    bed0:	07c1      	lsls	r1, r0, #31
    bed2:	2900      	cmp	r1, #0
    bed4:	d1e3      	bne.n	be9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1076>
    bed6:	e7de      	b.n	be96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x106e>
    bed8:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    bedc:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    bee0:	f005 f933 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bee4:	90c8      	str	r0, [sp, #800]	; 0x320
    bee6:	e7ff      	b.n	bee8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x10c0>
    bee8:	98c8      	ldr	r0, [sp, #800]	; 0x320
    beea:	07c1      	lsls	r1, r0, #31
    beec:	2900      	cmp	r1, #0
    beee:	d1ce      	bne.n	be8e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1066>
    bef0:	e7d1      	b.n	be96 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x106e>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    bef2:	f64c 3074 	movw	r0, #52084	; 0xcb74
    bef6:	f2c0 0001 	movt	r0, #1
    befa:	6801      	ldr	r1, [r0, #0]
    befc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf00:	f100 0212 	add.w	r2, r0, #18
    bf04:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    bf08:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    bf0c:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    bf10:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    bf14:	f2c0 0301 	movt	r3, #1
    bf18:	4610      	mov	r0, r2
    bf1a:	91c7      	str	r1, [sp, #796]	; 0x31c
    bf1c:	4619      	mov	r1, r3
    bf1e:	f7fe fb3c 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bf22:	90c6      	str	r0, [sp, #792]	; 0x318
    bf24:	91c5      	str	r1, [sp, #788]	; 0x314
    bf26:	e7ff      	b.n	bf28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1100>
    bf28:	98c6      	ldr	r0, [sp, #792]	; 0x318
    bf2a:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    bf2e:	99c5      	ldr	r1, [sp, #788]	; 0x314
    bf30:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    bf34:	f24c 1228 	movw	r2, #49448	; 0xc128
    bf38:	f2c0 0201 	movt	r2, #1
    bf3c:	6812      	ldr	r2, [r2, #0]
    bf3e:	466b      	mov	r3, sp
    bf40:	f04f 0c01 	mov.w	ip, #1
    bf44:	f8c3 c008 	str.w	ip, [r3, #8]
    bf48:	605a      	str	r2, [r3, #4]
    bf4a:	f8c3 c000 	str.w	ip, [r3]
    bf4e:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    bf52:	2202      	movs	r2, #2
    bf54:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    bf58:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    bf5a:	f005 f932 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    bf5e:	e7ff      	b.n	bf60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1138>
    bf60:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    bf64:	f64c 3094 	movw	r0, #52116	; 0xcb94
    bf68:	f2c0 0001 	movt	r0, #1
    bf6c:	6802      	ldr	r2, [r0, #0]
    bf6e:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    bf72:	f006 f8ad 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bf76:	e7ff      	b.n	bf78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1150>
    bf78:	e7ff      	b.n	bf7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1152>
                self.v[x] = self.v[y];
    bf7a:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    bf7e:	280f      	cmp	r0, #15
    bf80:	f202 8498 	bhi.w	e8b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a8c>
    bf84:	e7ff      	b.n	bf86 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x115e>
    bf86:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf8a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    bf8e:	1842      	adds	r2, r0, r1
    bf90:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bf94:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    bf98:	2b0f      	cmp	r3, #15
    bf9a:	92c4      	str	r2, [sp, #784]	; 0x310
    bf9c:	f202 8494 	bhi.w	e8c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3aa0>
    bfa0:	e7ff      	b.n	bfa2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x117a>
    bfa2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bfa6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bfaa:	1842      	adds	r2, r0, r1
    bfac:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    bfae:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    bfb2:	f002 ba06 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    bfb6:	2005      	movs	r0, #5
    bfb8:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    bfbc:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    bfc0:	f2c0 0001 	movt	r0, #1
    bfc4:	6801      	ldr	r1, [r0, #0]
    bfc6:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    bfca:	f005 f8be 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    bfce:	90c3      	str	r0, [sp, #780]	; 0x30c
    bfd0:	e01f      	b.n	c012 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11ea>
    bfd2:	2001      	movs	r0, #1
    bfd4:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    bfd8:	e015      	b.n	c006 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11de>
    bfda:	2000      	movs	r0, #0
    bfdc:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    bfe0:	e011      	b.n	c006 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11de>
    bfe2:	2000      	movs	r0, #0
    bfe4:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    bfe8:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    bfec:	f644 206c 	movw	r0, #19052	; 0x4a6c
    bff0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bff4:	f005 f91e 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    bff8:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    bffc:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    c000:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    c004:	e00a      	b.n	c01c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11f4>
    c006:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    c00a:	07c0      	lsls	r0, r0, #31
    c00c:	2800      	cmp	r0, #0
    c00e:	d112      	bne.n	c036 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x120e>
    c010:	e055      	b.n	c0be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1296>
    c012:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    c014:	07c1      	lsls	r1, r0, #31
    c016:	2900      	cmp	r1, #0
    c018:	d1e3      	bne.n	bfe2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11ba>
    c01a:	e7de      	b.n	bfda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11b2>
    c01c:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    c020:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    c024:	f005 f891 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c028:	90c2      	str	r0, [sp, #776]	; 0x308
    c02a:	e7ff      	b.n	c02c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1204>
    c02c:	98c2      	ldr	r0, [sp, #776]	; 0x308
    c02e:	07c1      	lsls	r1, r0, #31
    c030:	2900      	cmp	r1, #0
    c032:	d1ce      	bne.n	bfd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11aa>
    c034:	e7d1      	b.n	bfda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x11b2>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    c036:	f64c 3014 	movw	r0, #51988	; 0xcb14
    c03a:	f2c0 0001 	movt	r0, #1
    c03e:	6801      	ldr	r1, [r0, #0]
    c040:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c044:	f100 0212 	add.w	r2, r0, #18
    c048:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    c04c:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    c050:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    c054:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    c058:	f2c0 0301 	movt	r3, #1
    c05c:	4610      	mov	r0, r2
    c05e:	91c1      	str	r1, [sp, #772]	; 0x304
    c060:	4619      	mov	r1, r3
    c062:	f7fe fa9a 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c066:	90c0      	str	r0, [sp, #768]	; 0x300
    c068:	91bf      	str	r1, [sp, #764]	; 0x2fc
    c06a:	e7ff      	b.n	c06c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1244>
    c06c:	98c0      	ldr	r0, [sp, #768]	; 0x300
    c06e:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    c072:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    c074:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    c078:	f24c 1228 	movw	r2, #49448	; 0xc128
    c07c:	f2c0 0201 	movt	r2, #1
    c080:	6812      	ldr	r2, [r2, #0]
    c082:	466b      	mov	r3, sp
    c084:	f04f 0c01 	mov.w	ip, #1
    c088:	f8c3 c008 	str.w	ip, [r3, #8]
    c08c:	605a      	str	r2, [r3, #4]
    c08e:	f8c3 c000 	str.w	ip, [r3]
    c092:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    c096:	2202      	movs	r2, #2
    c098:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    c09c:	99c1      	ldr	r1, [sp, #772]	; 0x304
    c09e:	f005 f890 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c0a2:	e7ff      	b.n	c0a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x127c>
    c0a4:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    c0a8:	f64c 3034 	movw	r0, #52020	; 0xcb34
    c0ac:	f2c0 0001 	movt	r0, #1
    c0b0:	6802      	ldr	r2, [r0, #0]
    c0b2:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    c0b6:	f006 f80b 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c0ba:	e7ff      	b.n	c0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1294>
    c0bc:	e7ff      	b.n	c0be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1296>
                self.v[x] |= self.v[y];
    c0be:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c0c2:	280f      	cmp	r0, #15
    c0c4:	f202 83e2 	bhi.w	e88c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a64>
    c0c8:	e7ff      	b.n	c0ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12a2>
    c0ca:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c0ce:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c0d2:	1842      	adds	r2, r0, r1
    c0d4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c0d8:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c0dc:	2b0f      	cmp	r3, #15
    c0de:	92be      	str	r2, [sp, #760]	; 0x2f8
    c0e0:	f202 83de 	bhi.w	e8a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a78>
    c0e4:	e7ff      	b.n	c0e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12be>
    c0e6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c0ea:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c0ee:	1842      	adds	r2, r0, r1
    c0f0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    c0f4:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    c0f8:	ea43 030c 	orr.w	r3, r3, ip
    c0fc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c100:	f002 b95f 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c104:	2005      	movs	r0, #5
    c106:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    c10a:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    c10e:	f2c0 0001 	movt	r0, #1
    c112:	6801      	ldr	r1, [r0, #0]
    c114:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    c118:	f005 f817 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c11c:	90bd      	str	r0, [sp, #756]	; 0x2f4
    c11e:	e01f      	b.n	c160 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1338>
    c120:	2001      	movs	r0, #1
    c122:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    c126:	e015      	b.n	c154 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x132c>
    c128:	2000      	movs	r0, #0
    c12a:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    c12e:	e011      	b.n	c154 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x132c>
    c130:	2000      	movs	r0, #0
    c132:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    c136:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    c13a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c13e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c142:	f005 f877 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c146:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    c14a:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    c14e:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    c152:	e00a      	b.n	c16a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1342>
    c154:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    c158:	07c0      	lsls	r0, r0, #31
    c15a:	2800      	cmp	r0, #0
    c15c:	d112      	bne.n	c184 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x135c>
    c15e:	e055      	b.n	c20c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13e4>
    c160:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    c162:	07c1      	lsls	r1, r0, #31
    c164:	2900      	cmp	r1, #0
    c166:	d1e3      	bne.n	c130 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1308>
    c168:	e7de      	b.n	c128 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1300>
    c16a:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    c16e:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    c172:	f004 ffea 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c176:	90bc      	str	r0, [sp, #752]	; 0x2f0
    c178:	e7ff      	b.n	c17a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1352>
    c17a:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    c17c:	07c1      	lsls	r1, r0, #31
    c17e:	2900      	cmp	r1, #0
    c180:	d1ce      	bne.n	c120 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x12f8>
    c182:	e7d1      	b.n	c128 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1300>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    c184:	f64c 20b4 	movw	r0, #51892	; 0xcab4
    c188:	f2c0 0001 	movt	r0, #1
    c18c:	6801      	ldr	r1, [r0, #0]
    c18e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c192:	f100 0212 	add.w	r2, r0, #18
    c196:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    c19a:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    c19e:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    c1a2:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    c1a6:	f2c0 0301 	movt	r3, #1
    c1aa:	4610      	mov	r0, r2
    c1ac:	91bb      	str	r1, [sp, #748]	; 0x2ec
    c1ae:	4619      	mov	r1, r3
    c1b0:	f7fe f9f3 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c1b4:	90ba      	str	r0, [sp, #744]	; 0x2e8
    c1b6:	91b9      	str	r1, [sp, #740]	; 0x2e4
    c1b8:	e7ff      	b.n	c1ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1392>
    c1ba:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    c1bc:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    c1c0:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    c1c2:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    c1c6:	f24c 1228 	movw	r2, #49448	; 0xc128
    c1ca:	f2c0 0201 	movt	r2, #1
    c1ce:	6812      	ldr	r2, [r2, #0]
    c1d0:	466b      	mov	r3, sp
    c1d2:	f04f 0c01 	mov.w	ip, #1
    c1d6:	f8c3 c008 	str.w	ip, [r3, #8]
    c1da:	605a      	str	r2, [r3, #4]
    c1dc:	f8c3 c000 	str.w	ip, [r3]
    c1e0:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    c1e4:	2202      	movs	r2, #2
    c1e6:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    c1ea:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    c1ec:	f004 ffe9 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c1f0:	e7ff      	b.n	c1f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13ca>
    c1f2:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    c1f6:	f64c 20d4 	movw	r0, #51924	; 0xcad4
    c1fa:	f2c0 0001 	movt	r0, #1
    c1fe:	6802      	ldr	r2, [r0, #0]
    c200:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    c204:	f005 ff64 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c208:	e7ff      	b.n	c20a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13e2>
    c20a:	e7ff      	b.n	c20c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13e4>
                self.v[x] &= self.v[y];
    c20c:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c210:	280f      	cmp	r0, #15
    c212:	f202 8327 	bhi.w	e864 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a3c>
    c216:	e7ff      	b.n	c218 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x13f0>
    c218:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c21c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c220:	1842      	adds	r2, r0, r1
    c222:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c226:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c22a:	2b0f      	cmp	r3, #15
    c22c:	92b8      	str	r2, [sp, #736]	; 0x2e0
    c22e:	f202 8323 	bhi.w	e878 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a50>
    c232:	e7ff      	b.n	c234 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x140c>
    c234:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c238:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c23c:	1842      	adds	r2, r0, r1
    c23e:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    c242:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    c246:	ea03 030c 	and.w	r3, r3, ip
    c24a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c24e:	f002 b8b8 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c252:	2005      	movs	r0, #5
    c254:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    c258:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    c25c:	f2c0 0001 	movt	r0, #1
    c260:	6801      	ldr	r1, [r0, #0]
    c262:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    c266:	f004 ff70 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c26a:	90b7      	str	r0, [sp, #732]	; 0x2dc
    c26c:	e01f      	b.n	c2ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1486>
    c26e:	2001      	movs	r0, #1
    c270:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    c274:	e015      	b.n	c2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x147a>
    c276:	2000      	movs	r0, #0
    c278:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    c27c:	e011      	b.n	c2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x147a>
    c27e:	2000      	movs	r0, #0
    c280:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    c284:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    c288:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c28c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c290:	f004 ffd0 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c294:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    c298:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    c29c:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    c2a0:	e00a      	b.n	c2b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1490>
    c2a2:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    c2a6:	07c0      	lsls	r0, r0, #31
    c2a8:	2800      	cmp	r0, #0
    c2aa:	d112      	bne.n	c2d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x14aa>
    c2ac:	e055      	b.n	c35a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1532>
    c2ae:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    c2b0:	07c1      	lsls	r1, r0, #31
    c2b2:	2900      	cmp	r1, #0
    c2b4:	d1e3      	bne.n	c27e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1456>
    c2b6:	e7de      	b.n	c276 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x144e>
    c2b8:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    c2bc:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    c2c0:	f004 ff43 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c2c4:	90b6      	str	r0, [sp, #728]	; 0x2d8
    c2c6:	e7ff      	b.n	c2c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x14a0>
    c2c8:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    c2ca:	07c1      	lsls	r1, r0, #31
    c2cc:	2900      	cmp	r1, #0
    c2ce:	d1ce      	bne.n	c26e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1446>
    c2d0:	e7d1      	b.n	c276 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x144e>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    c2d2:	f64c 2054 	movw	r0, #51796	; 0xca54
    c2d6:	f2c0 0001 	movt	r0, #1
    c2da:	6801      	ldr	r1, [r0, #0]
    c2dc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c2e0:	f100 0212 	add.w	r2, r0, #18
    c2e4:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    c2e8:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    c2ec:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    c2f0:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    c2f4:	f2c0 0301 	movt	r3, #1
    c2f8:	4610      	mov	r0, r2
    c2fa:	91b5      	str	r1, [sp, #724]	; 0x2d4
    c2fc:	4619      	mov	r1, r3
    c2fe:	f7fe f94c 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c302:	90b4      	str	r0, [sp, #720]	; 0x2d0
    c304:	91b3      	str	r1, [sp, #716]	; 0x2cc
    c306:	e7ff      	b.n	c308 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x14e0>
    c308:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    c30a:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    c30e:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    c310:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    c314:	f24c 1228 	movw	r2, #49448	; 0xc128
    c318:	f2c0 0201 	movt	r2, #1
    c31c:	6812      	ldr	r2, [r2, #0]
    c31e:	466b      	mov	r3, sp
    c320:	f04f 0c01 	mov.w	ip, #1
    c324:	f8c3 c008 	str.w	ip, [r3, #8]
    c328:	605a      	str	r2, [r3, #4]
    c32a:	f8c3 c000 	str.w	ip, [r3]
    c32e:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    c332:	2202      	movs	r2, #2
    c334:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    c338:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    c33a:	f004 ff42 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c33e:	e7ff      	b.n	c340 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1518>
    c340:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    c344:	f64c 2074 	movw	r0, #51828	; 0xca74
    c348:	f2c0 0001 	movt	r0, #1
    c34c:	6802      	ldr	r2, [r0, #0]
    c34e:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    c352:	f005 febd 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c356:	e7ff      	b.n	c358 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1530>
    c358:	e7ff      	b.n	c35a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1532>
                self.v[x] ^= self.v[y];
    c35a:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c35e:	280f      	cmp	r0, #15
    c360:	f202 826c 	bhi.w	e83c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a14>
    c364:	e7ff      	b.n	c366 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x153e>
    c366:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c36a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c36e:	1842      	adds	r2, r0, r1
    c370:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c374:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c378:	2b0f      	cmp	r3, #15
    c37a:	92b2      	str	r2, [sp, #712]	; 0x2c8
    c37c:	f202 8268 	bhi.w	e850 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a28>
    c380:	e7ff      	b.n	c382 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x155a>
    c382:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c386:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c38a:	1842      	adds	r2, r0, r1
    c38c:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    c390:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    c394:	ea83 030c 	eor.w	r3, r3, ip
    c398:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c39c:	f002 b811 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c3a0:	2005      	movs	r0, #5
    c3a2:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    c3a6:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    c3aa:	f2c0 0001 	movt	r0, #1
    c3ae:	6801      	ldr	r1, [r0, #0]
    c3b0:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    c3b4:	f004 fec9 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c3b8:	90b1      	str	r0, [sp, #708]	; 0x2c4
    c3ba:	e01f      	b.n	c3fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15d4>
    c3bc:	2001      	movs	r0, #1
    c3be:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    c3c2:	e015      	b.n	c3f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15c8>
    c3c4:	2000      	movs	r0, #0
    c3c6:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    c3ca:	e011      	b.n	c3f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15c8>
    c3cc:	2000      	movs	r0, #0
    c3ce:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    c3d2:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    c3d6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c3da:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c3de:	f004 ff29 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c3e2:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    c3e6:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    c3ea:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    c3ee:	e00a      	b.n	c406 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15de>
    c3f0:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    c3f4:	07c0      	lsls	r0, r0, #31
    c3f6:	2800      	cmp	r0, #0
    c3f8:	d112      	bne.n	c420 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15f8>
    c3fa:	e055      	b.n	c4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1680>
    c3fc:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    c3fe:	07c1      	lsls	r1, r0, #31
    c400:	2900      	cmp	r1, #0
    c402:	d1e3      	bne.n	c3cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15a4>
    c404:	e7de      	b.n	c3c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x159c>
    c406:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    c40a:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    c40e:	f004 fe9c 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c412:	90b0      	str	r0, [sp, #704]	; 0x2c0
    c414:	e7ff      	b.n	c416 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x15ee>
    c416:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    c418:	07c1      	lsls	r1, r0, #31
    c41a:	2900      	cmp	r1, #0
    c41c:	d1ce      	bne.n	c3bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1594>
    c41e:	e7d1      	b.n	c3c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x159c>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    c420:	f64c 10e4 	movw	r0, #51684	; 0xc9e4
    c424:	f2c0 0001 	movt	r0, #1
    c428:	6801      	ldr	r1, [r0, #0]
    c42a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c42e:	f100 0212 	add.w	r2, r0, #18
    c432:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    c436:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    c43a:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    c43e:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    c442:	f2c0 0301 	movt	r3, #1
    c446:	4610      	mov	r0, r2
    c448:	91af      	str	r1, [sp, #700]	; 0x2bc
    c44a:	4619      	mov	r1, r3
    c44c:	f7fe f8a5 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c450:	90ae      	str	r0, [sp, #696]	; 0x2b8
    c452:	91ad      	str	r1, [sp, #692]	; 0x2b4
    c454:	e7ff      	b.n	c456 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x162e>
    c456:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    c458:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    c45c:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    c45e:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    c462:	f24c 1228 	movw	r2, #49448	; 0xc128
    c466:	f2c0 0201 	movt	r2, #1
    c46a:	6812      	ldr	r2, [r2, #0]
    c46c:	466b      	mov	r3, sp
    c46e:	f04f 0c01 	mov.w	ip, #1
    c472:	f8c3 c008 	str.w	ip, [r3, #8]
    c476:	605a      	str	r2, [r3, #4]
    c478:	f8c3 c000 	str.w	ip, [r3]
    c47c:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    c480:	2202      	movs	r2, #2
    c482:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    c486:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    c488:	f004 fe9b 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c48c:	e7ff      	b.n	c48e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1666>
    c48e:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    c492:	f64c 2004 	movw	r0, #51716	; 0xca04
    c496:	f2c0 0001 	movt	r0, #1
    c49a:	6802      	ldr	r2, [r0, #0]
    c49c:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    c4a0:	f005 fe16 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c4a4:	e7ff      	b.n	c4a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x167e>
    c4a6:	e7ff      	b.n	c4a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1680>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    c4a8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c4ac:	280f      	cmp	r0, #15
    c4ae:	f202 81a7 	bhi.w	e800 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39d8>
    c4b2:	e7ff      	b.n	c4b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x168c>
    c4b4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c4b8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c4bc:	1842      	adds	r2, r0, r1
    c4be:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c4c2:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    c4c6:	2b0f      	cmp	r3, #15
    c4c8:	92ac      	str	r2, [sp, #688]	; 0x2b0
    c4ca:	f202 81a3 	bhi.w	e814 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39ec>
    c4ce:	e7ff      	b.n	c4d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x16a8>
    c4d0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c4d4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c4d8:	1842      	adds	r2, r0, r1
    c4da:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c4de:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    c4e0:	f002 fd72 	bl	efc8 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E>
    c4e4:	90ab      	str	r0, [sp, #684]	; 0x2ac
    c4e6:	91aa      	str	r1, [sp, #680]	; 0x2a8
    c4e8:	e7ff      	b.n	c4ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x16c2>
    c4ea:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    c4ec:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    c4f0:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    c4f2:	f001 0201 	and.w	r2, r1, #1
    c4f6:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    c4fa:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c4fe:	2a0f      	cmp	r2, #15
    c500:	f202 8192 	bhi.w	e828 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3a00>
    c504:	e7ff      	b.n	c506 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x16de>
    c506:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c50a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c50e:	1842      	adds	r2, r0, r1
    c510:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    c512:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    c516:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    c518:	f002 0c01 	and.w	ip, r2, #1
    c51c:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    c520:	f001 bf4f 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c524:	2005      	movs	r0, #5
    c526:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    c52a:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    c52e:	f2c0 0001 	movt	r0, #1
    c532:	6801      	ldr	r1, [r0, #0]
    c534:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    c538:	f004 fe07 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c53c:	90a9      	str	r0, [sp, #676]	; 0x2a4
    c53e:	e01f      	b.n	c580 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1758>
    c540:	2001      	movs	r0, #1
    c542:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    c546:	e015      	b.n	c574 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x174c>
    c548:	2000      	movs	r0, #0
    c54a:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    c54e:	e011      	b.n	c574 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x174c>
    c550:	2000      	movs	r0, #0
    c552:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    c556:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    c55a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c55e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c562:	f004 fe67 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c566:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    c56a:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    c56e:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    c572:	e00a      	b.n	c58a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1762>
    c574:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    c578:	07c0      	lsls	r0, r0, #31
    c57a:	2800      	cmp	r0, #0
    c57c:	d112      	bne.n	c5a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x177c>
    c57e:	e055      	b.n	c62c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1804>
    c580:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    c582:	07c1      	lsls	r1, r0, #31
    c584:	2900      	cmp	r1, #0
    c586:	d1e3      	bne.n	c550 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1728>
    c588:	e7de      	b.n	c548 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1720>
    c58a:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    c58e:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    c592:	f004 fdda 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c596:	90a8      	str	r0, [sp, #672]	; 0x2a0
    c598:	e7ff      	b.n	c59a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1772>
    c59a:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    c59c:	07c1      	lsls	r1, r0, #31
    c59e:	2900      	cmp	r1, #0
    c5a0:	d1ce      	bne.n	c540 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1718>
    c5a2:	e7d1      	b.n	c548 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1720>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    c5a4:	f64c 1074 	movw	r0, #51572	; 0xc974
    c5a8:	f2c0 0001 	movt	r0, #1
    c5ac:	6801      	ldr	r1, [r0, #0]
    c5ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c5b2:	f100 0212 	add.w	r2, r0, #18
    c5b6:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    c5ba:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    c5be:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    c5c2:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    c5c6:	f2c0 0301 	movt	r3, #1
    c5ca:	4610      	mov	r0, r2
    c5cc:	91a7      	str	r1, [sp, #668]	; 0x29c
    c5ce:	4619      	mov	r1, r3
    c5d0:	f7fd ffe3 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c5d4:	90a6      	str	r0, [sp, #664]	; 0x298
    c5d6:	91a5      	str	r1, [sp, #660]	; 0x294
    c5d8:	e7ff      	b.n	c5da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x17b2>
    c5da:	98a6      	ldr	r0, [sp, #664]	; 0x298
    c5dc:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    c5e0:	99a5      	ldr	r1, [sp, #660]	; 0x294
    c5e2:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    c5e6:	f24c 1228 	movw	r2, #49448	; 0xc128
    c5ea:	f2c0 0201 	movt	r2, #1
    c5ee:	6812      	ldr	r2, [r2, #0]
    c5f0:	466b      	mov	r3, sp
    c5f2:	f04f 0c01 	mov.w	ip, #1
    c5f6:	f8c3 c008 	str.w	ip, [r3, #8]
    c5fa:	605a      	str	r2, [r3, #4]
    c5fc:	f8c3 c000 	str.w	ip, [r3]
    c600:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    c604:	2202      	movs	r2, #2
    c606:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    c60a:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    c60c:	f004 fdd9 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c610:	e7ff      	b.n	c612 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x17ea>
    c612:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    c616:	f64c 1094 	movw	r0, #51604	; 0xc994
    c61a:	f2c0 0001 	movt	r0, #1
    c61e:	6802      	ldr	r2, [r0, #0]
    c620:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    c624:	f005 fd54 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c628:	e7ff      	b.n	c62a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1802>
    c62a:	e7ff      	b.n	c62c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1804>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    c62c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c630:	280f      	cmp	r0, #15
    c632:	f202 80c7 	bhi.w	e7c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x399c>
    c636:	e7ff      	b.n	c638 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1810>
    c638:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c63c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c640:	1842      	adds	r2, r0, r1
    c642:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c646:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    c64a:	2b0f      	cmp	r3, #15
    c64c:	92a4      	str	r2, [sp, #656]	; 0x290
    c64e:	f202 80c3 	bhi.w	e7d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39b0>
    c652:	e7ff      	b.n	c654 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x182c>
    c654:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c658:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c65c:	1842      	adds	r2, r0, r1
    c65e:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c662:	98a4      	ldr	r0, [sp, #656]	; 0x290
    c664:	f002 fcdb 	bl	f01e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE>
    c668:	90a3      	str	r0, [sp, #652]	; 0x28c
    c66a:	91a2      	str	r1, [sp, #648]	; 0x288
    c66c:	e7ff      	b.n	c66e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1846>
    c66e:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    c670:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    c674:	99a2      	ldr	r1, [sp, #648]	; 0x288
    c676:	f001 0201 	and.w	r2, r1, #1
    c67a:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    c67e:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c682:	2a0f      	cmp	r2, #15
    c684:	f202 80b2 	bhi.w	e7ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x39c4>
    c688:	e7ff      	b.n	c68a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1862>
    c68a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c68e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c692:	1842      	adds	r2, r0, r1
    c694:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    c696:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    c69a:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    c69c:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    c6a0:	ea22 020c 	bic.w	r2, r2, ip
    c6a4:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    c6a8:	f001 be8b 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c6ac:	2005      	movs	r0, #5
    c6ae:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    c6b2:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    c6b6:	f2c0 0001 	movt	r0, #1
    c6ba:	6801      	ldr	r1, [r0, #0]
    c6bc:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    c6c0:	f004 fd43 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c6c4:	90a1      	str	r0, [sp, #644]	; 0x284
    c6c6:	e01f      	b.n	c708 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18e0>
    c6c8:	2001      	movs	r0, #1
    c6ca:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    c6ce:	e015      	b.n	c6fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18d4>
    c6d0:	2000      	movs	r0, #0
    c6d2:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    c6d6:	e011      	b.n	c6fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18d4>
    c6d8:	2000      	movs	r0, #0
    c6da:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    c6de:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    c6e2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c6e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c6ea:	f004 fda3 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c6ee:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    c6f2:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    c6f6:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    c6fa:	e00a      	b.n	c712 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18ea>
    c6fc:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    c700:	07c0      	lsls	r0, r0, #31
    c702:	2800      	cmp	r0, #0
    c704:	d112      	bne.n	c72c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1904>
    c706:	e055      	b.n	c7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x198c>
    c708:	98a1      	ldr	r0, [sp, #644]	; 0x284
    c70a:	07c1      	lsls	r1, r0, #31
    c70c:	2900      	cmp	r1, #0
    c70e:	d1e3      	bne.n	c6d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18b0>
    c710:	e7de      	b.n	c6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18a8>
    c712:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    c716:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    c71a:	f004 fd16 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c71e:	90a0      	str	r0, [sp, #640]	; 0x280
    c720:	e7ff      	b.n	c722 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18fa>
    c722:	98a0      	ldr	r0, [sp, #640]	; 0x280
    c724:	07c1      	lsls	r1, r0, #31
    c726:	2900      	cmp	r1, #0
    c728:	d1ce      	bne.n	c6c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18a0>
    c72a:	e7d1      	b.n	c6d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x18a8>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    c72c:	f64c 1004 	movw	r0, #51460	; 0xc904
    c730:	f2c0 0001 	movt	r0, #1
    c734:	6801      	ldr	r1, [r0, #0]
    c736:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c73a:	f100 0212 	add.w	r2, r0, #18
    c73e:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    c742:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    c746:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    c74a:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    c74e:	f2c0 0301 	movt	r3, #1
    c752:	4610      	mov	r0, r2
    c754:	919f      	str	r1, [sp, #636]	; 0x27c
    c756:	4619      	mov	r1, r3
    c758:	f7fd ff1f 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c75c:	909e      	str	r0, [sp, #632]	; 0x278
    c75e:	919d      	str	r1, [sp, #628]	; 0x274
    c760:	e7ff      	b.n	c762 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x193a>
    c762:	989e      	ldr	r0, [sp, #632]	; 0x278
    c764:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    c768:	999d      	ldr	r1, [sp, #628]	; 0x274
    c76a:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    c76e:	f24c 1228 	movw	r2, #49448	; 0xc128
    c772:	f2c0 0201 	movt	r2, #1
    c776:	6812      	ldr	r2, [r2, #0]
    c778:	466b      	mov	r3, sp
    c77a:	f04f 0c01 	mov.w	ip, #1
    c77e:	f8c3 c008 	str.w	ip, [r3, #8]
    c782:	605a      	str	r2, [r3, #4]
    c784:	f8c3 c000 	str.w	ip, [r3]
    c788:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    c78c:	2202      	movs	r2, #2
    c78e:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    c792:	999f      	ldr	r1, [sp, #636]	; 0x27c
    c794:	f004 fd15 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c798:	e7ff      	b.n	c79a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1972>
    c79a:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    c79e:	f64c 1024 	movw	r0, #51492	; 0xc924
    c7a2:	f2c0 0001 	movt	r0, #1
    c7a6:	6802      	ldr	r2, [r0, #0]
    c7a8:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    c7ac:	f005 fc90 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c7b0:	e7ff      	b.n	c7b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x198a>
    c7b2:	e7ff      	b.n	c7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x198c>
                self.v[0xf] = self.v[x] & 1;
    c7b4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c7b8:	280f      	cmp	r0, #15
    c7ba:	f201 87e5 	bhi.w	e788 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3960>
    c7be:	e7ff      	b.n	c7c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1998>
    c7c0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c7c4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c7c8:	1842      	adds	r2, r0, r1
    c7ca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c7ce:	f002 0201 	and.w	r2, r2, #1
    c7d2:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    c7d6:	290f      	cmp	r1, #15
    c7d8:	f201 87e0 	bhi.w	e79c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3974>
    c7dc:	e7ff      	b.n	c7de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x19b6>
    c7de:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c7e2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c7e6:	1842      	adds	r2, r0, r1
    c7e8:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    c7ec:	2101      	movs	r1, #1
    c7ee:	f002 fbc7 	bl	ef80 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE>
    c7f2:	909c      	str	r0, [sp, #624]	; 0x270
    c7f4:	e7ff      	b.n	c7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x19ce>
    c7f6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c7fa:	280f      	cmp	r0, #15
    c7fc:	f201 87d8 	bhi.w	e7b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3988>
    c800:	e7ff      	b.n	c802 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x19da>
    c802:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c806:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c80a:	1842      	adds	r2, r0, r1
    c80c:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    c80e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c812:	f001 bdd6 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c816:	2005      	movs	r0, #5
    c818:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    c81c:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    c820:	f2c0 0001 	movt	r0, #1
    c824:	6801      	ldr	r1, [r0, #0]
    c826:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    c82a:	f004 fc8e 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c82e:	909b      	str	r0, [sp, #620]	; 0x26c
    c830:	e01f      	b.n	c872 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a4a>
    c832:	2001      	movs	r0, #1
    c834:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    c838:	e015      	b.n	c866 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a3e>
    c83a:	2000      	movs	r0, #0
    c83c:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    c840:	e011      	b.n	c866 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a3e>
    c842:	2000      	movs	r0, #0
    c844:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    c848:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    c84c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c850:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c854:	f004 fcee 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c858:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    c85c:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    c860:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    c864:	e00a      	b.n	c87c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a54>
    c866:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    c86a:	07c0      	lsls	r0, r0, #31
    c86c:	2800      	cmp	r0, #0
    c86e:	d112      	bne.n	c896 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a6e>
    c870:	e055      	b.n	c91e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1af6>
    c872:	989b      	ldr	r0, [sp, #620]	; 0x26c
    c874:	07c1      	lsls	r1, r0, #31
    c876:	2900      	cmp	r1, #0
    c878:	d1e3      	bne.n	c842 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a1a>
    c87a:	e7de      	b.n	c83a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a12>
    c87c:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    c880:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    c884:	f004 fc61 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c888:	909a      	str	r0, [sp, #616]	; 0x268
    c88a:	e7ff      	b.n	c88c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a64>
    c88c:	989a      	ldr	r0, [sp, #616]	; 0x268
    c88e:	07c1      	lsls	r1, r0, #31
    c890:	2900      	cmp	r1, #0
    c892:	d1ce      	bne.n	c832 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a0a>
    c894:	e7d1      	b.n	c83a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1a12>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    c896:	f64c 0094 	movw	r0, #51348	; 0xc894
    c89a:	f2c0 0001 	movt	r0, #1
    c89e:	6801      	ldr	r1, [r0, #0]
    c8a0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c8a4:	f100 0212 	add.w	r2, r0, #18
    c8a8:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    c8ac:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    c8b0:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    c8b4:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    c8b8:	f2c0 0301 	movt	r3, #1
    c8bc:	4610      	mov	r0, r2
    c8be:	9199      	str	r1, [sp, #612]	; 0x264
    c8c0:	4619      	mov	r1, r3
    c8c2:	f7fd fe6a 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c8c6:	9098      	str	r0, [sp, #608]	; 0x260
    c8c8:	9197      	str	r1, [sp, #604]	; 0x25c
    c8ca:	e7ff      	b.n	c8cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1aa4>
    c8cc:	9898      	ldr	r0, [sp, #608]	; 0x260
    c8ce:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    c8d2:	9997      	ldr	r1, [sp, #604]	; 0x25c
    c8d4:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    c8d8:	f24c 1228 	movw	r2, #49448	; 0xc128
    c8dc:	f2c0 0201 	movt	r2, #1
    c8e0:	6812      	ldr	r2, [r2, #0]
    c8e2:	466b      	mov	r3, sp
    c8e4:	f04f 0c01 	mov.w	ip, #1
    c8e8:	f8c3 c008 	str.w	ip, [r3, #8]
    c8ec:	605a      	str	r2, [r3, #4]
    c8ee:	f8c3 c000 	str.w	ip, [r3]
    c8f2:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    c8f6:	2202      	movs	r2, #2
    c8f8:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    c8fc:	9999      	ldr	r1, [sp, #612]	; 0x264
    c8fe:	f004 fc60 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    c902:	e7ff      	b.n	c904 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1adc>
    c904:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    c908:	f64c 00b4 	movw	r0, #51380	; 0xc8b4
    c90c:	f2c0 0001 	movt	r0, #1
    c910:	6802      	ldr	r2, [r0, #0]
    c912:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    c916:	f005 fbdb 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c91a:	e7ff      	b.n	c91c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1af4>
    c91c:	e7ff      	b.n	c91e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1af6>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    c91e:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    c922:	280f      	cmp	r0, #15
    c924:	f201 8712 	bhi.w	e74c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3924>
    c928:	e7ff      	b.n	c92a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b02>
    c92a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c92e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c932:	1842      	adds	r2, r0, r1
    c934:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c938:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    c93c:	2b0f      	cmp	r3, #15
    c93e:	9296      	str	r2, [sp, #600]	; 0x258
    c940:	f201 870e 	bhi.w	e760 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3938>
    c944:	e7ff      	b.n	c946 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b1e>
    c946:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c94a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c94e:	1842      	adds	r2, r0, r1
    c950:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c954:	9896      	ldr	r0, [sp, #600]	; 0x258
    c956:	f002 fb62 	bl	f01e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE>
    c95a:	9095      	str	r0, [sp, #596]	; 0x254
    c95c:	9194      	str	r1, [sp, #592]	; 0x250
    c95e:	e7ff      	b.n	c960 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b38>
    c960:	9895      	ldr	r0, [sp, #596]	; 0x254
    c962:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    c966:	9994      	ldr	r1, [sp, #592]	; 0x250
    c968:	f001 0201 	and.w	r2, r1, #1
    c96c:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    c970:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c974:	2a0f      	cmp	r2, #15
    c976:	f201 86fd 	bhi.w	e774 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x394c>
    c97a:	e7ff      	b.n	c97c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b54>
    c97c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c980:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c984:	1842      	adds	r2, r0, r1
    c986:	9b95      	ldr	r3, [sp, #596]	; 0x254
    c988:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    c98c:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    c98e:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    c992:	ea22 020c 	bic.w	r2, r2, ip
    c996:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    c99a:	f001 bd12 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    c99e:	2005      	movs	r0, #5
    c9a0:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    c9a4:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    c9a8:	f2c0 0001 	movt	r0, #1
    c9ac:	6801      	ldr	r1, [r0, #0]
    c9ae:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    c9b2:	f004 fbca 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    c9b6:	9093      	str	r0, [sp, #588]	; 0x24c
    c9b8:	e01f      	b.n	c9fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bd2>
    c9ba:	2001      	movs	r0, #1
    c9bc:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    c9c0:	e015      	b.n	c9ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bc6>
    c9c2:	2000      	movs	r0, #0
    c9c4:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    c9c8:	e011      	b.n	c9ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bc6>
    c9ca:	2000      	movs	r0, #0
    c9cc:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    c9d0:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    c9d4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    c9d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c9dc:	f004 fc2a 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    c9e0:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    c9e4:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    c9e8:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    c9ec:	e00a      	b.n	ca04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bdc>
    c9ee:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    c9f2:	07c0      	lsls	r0, r0, #31
    c9f4:	2800      	cmp	r0, #0
    c9f6:	d112      	bne.n	ca1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bf6>
    c9f8:	e055      	b.n	caa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c7e>
    c9fa:	9893      	ldr	r0, [sp, #588]	; 0x24c
    c9fc:	07c1      	lsls	r1, r0, #31
    c9fe:	2900      	cmp	r1, #0
    ca00:	d1e3      	bne.n	c9ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ba2>
    ca02:	e7de      	b.n	c9c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b9a>
    ca04:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    ca08:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    ca0c:	f004 fb9d 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ca10:	9092      	str	r0, [sp, #584]	; 0x248
    ca12:	e7ff      	b.n	ca14 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1bec>
    ca14:	9892      	ldr	r0, [sp, #584]	; 0x248
    ca16:	07c1      	lsls	r1, r0, #31
    ca18:	2900      	cmp	r1, #0
    ca1a:	d1ce      	bne.n	c9ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b92>
    ca1c:	e7d1      	b.n	c9c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1b9a>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    ca1e:	f64c 0020 	movw	r0, #51232	; 0xc820
    ca22:	f2c0 0001 	movt	r0, #1
    ca26:	6801      	ldr	r1, [r0, #0]
    ca28:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ca2c:	f100 0212 	add.w	r2, r0, #18
    ca30:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    ca34:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    ca38:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    ca3c:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    ca40:	f2c0 0301 	movt	r3, #1
    ca44:	4610      	mov	r0, r2
    ca46:	9191      	str	r1, [sp, #580]	; 0x244
    ca48:	4619      	mov	r1, r3
    ca4a:	f7fd fda6 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ca4e:	9090      	str	r0, [sp, #576]	; 0x240
    ca50:	918f      	str	r1, [sp, #572]	; 0x23c
    ca52:	e7ff      	b.n	ca54 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c2c>
    ca54:	9890      	ldr	r0, [sp, #576]	; 0x240
    ca56:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    ca5a:	998f      	ldr	r1, [sp, #572]	; 0x23c
    ca5c:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    ca60:	f24c 1228 	movw	r2, #49448	; 0xc128
    ca64:	f2c0 0201 	movt	r2, #1
    ca68:	6812      	ldr	r2, [r2, #0]
    ca6a:	466b      	mov	r3, sp
    ca6c:	f04f 0c01 	mov.w	ip, #1
    ca70:	f8c3 c008 	str.w	ip, [r3, #8]
    ca74:	605a      	str	r2, [r3, #4]
    ca76:	f8c3 c000 	str.w	ip, [r3]
    ca7a:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ca7e:	2202      	movs	r2, #2
    ca80:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    ca84:	9991      	ldr	r1, [sp, #580]	; 0x244
    ca86:	f004 fb9c 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    ca8a:	e7ff      	b.n	ca8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c64>
    ca8c:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    ca90:	f64c 0040 	movw	r0, #51264	; 0xc840
    ca94:	f2c0 0001 	movt	r0, #1
    ca98:	6802      	ldr	r2, [r0, #0]
    ca9a:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    ca9e:	f005 fb17 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    caa2:	e7ff      	b.n	caa4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c7c>
    caa4:	e7ff      	b.n	caa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c7e>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    caa6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    caaa:	280f      	cmp	r0, #15
    caac:	f201 8630 	bhi.w	e710 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38e8>
    cab0:	e7ff      	b.n	cab2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c8a>
    cab2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cab6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    caba:	1842      	adds	r2, r0, r1
    cabc:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cac0:	09d2      	lsrs	r2, r2, #7
    cac2:	928e      	str	r2, [sp, #568]	; 0x238
    cac4:	e7ff      	b.n	cac6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1c9e>
    cac6:	988e      	ldr	r0, [sp, #568]	; 0x238
    cac8:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    cacc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    cad0:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    cad4:	2a0f      	cmp	r2, #15
    cad6:	f201 8625 	bhi.w	e724 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38fc>
    cada:	e7ff      	b.n	cadc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cb4>
    cadc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cae0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cae4:	1842      	adds	r2, r0, r1
    cae6:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    caea:	2101      	movs	r1, #1
    caec:	f002 fa37 	bl	ef5e <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E>
    caf0:	908d      	str	r0, [sp, #564]	; 0x234
    caf2:	e7ff      	b.n	caf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ccc>
    caf4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    caf8:	280f      	cmp	r0, #15
    cafa:	f201 861d 	bhi.w	e738 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3910>
    cafe:	e7ff      	b.n	cb00 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1cd8>
    cb00:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb04:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cb08:	1842      	adds	r2, r0, r1
    cb0a:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    cb0c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    cb10:	f001 bc57 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cb14:	2005      	movs	r0, #5
    cb16:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    cb1a:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    cb1e:	f2c0 0001 	movt	r0, #1
    cb22:	6801      	ldr	r1, [r0, #0]
    cb24:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    cb28:	f004 fb0f 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cb2c:	908c      	str	r0, [sp, #560]	; 0x230
    cb2e:	e01f      	b.n	cb70 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d48>
    cb30:	2001      	movs	r0, #1
    cb32:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    cb36:	e015      	b.n	cb64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d3c>
    cb38:	2000      	movs	r0, #0
    cb3a:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    cb3e:	e011      	b.n	cb64 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d3c>
    cb40:	2000      	movs	r0, #0
    cb42:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    cb46:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    cb4a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cb4e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cb52:	f004 fb6f 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    cb56:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    cb5a:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    cb5e:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    cb62:	e00a      	b.n	cb7a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d52>
    cb64:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    cb68:	07c0      	lsls	r0, r0, #31
    cb6a:	2800      	cmp	r0, #0
    cb6c:	d112      	bne.n	cb94 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d6c>
    cb6e:	e055      	b.n	cc1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1df4>
    cb70:	988c      	ldr	r0, [sp, #560]	; 0x230
    cb72:	07c1      	lsls	r1, r0, #31
    cb74:	2900      	cmp	r1, #0
    cb76:	d1e3      	bne.n	cb40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d18>
    cb78:	e7de      	b.n	cb38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d10>
    cb7a:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    cb7e:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    cb82:	f004 fae2 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cb86:	908b      	str	r0, [sp, #556]	; 0x22c
    cb88:	e7ff      	b.n	cb8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d62>
    cb8a:	988b      	ldr	r0, [sp, #556]	; 0x22c
    cb8c:	07c1      	lsls	r1, r0, #31
    cb8e:	2900      	cmp	r1, #0
    cb90:	d1ce      	bne.n	cb30 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d08>
    cb92:	e7d1      	b.n	cb38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1d10>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    cb94:	f24c 70c0 	movw	r0, #51136	; 0xc7c0
    cb98:	f2c0 0001 	movt	r0, #1
    cb9c:	6801      	ldr	r1, [r0, #0]
    cb9e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cba2:	f100 0212 	add.w	r2, r0, #18
    cba6:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    cbaa:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    cbae:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    cbb2:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    cbb6:	f2c0 0301 	movt	r3, #1
    cbba:	4610      	mov	r0, r2
    cbbc:	918a      	str	r1, [sp, #552]	; 0x228
    cbbe:	4619      	mov	r1, r3
    cbc0:	f7fd fceb 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cbc4:	9089      	str	r0, [sp, #548]	; 0x224
    cbc6:	9188      	str	r1, [sp, #544]	; 0x220
    cbc8:	e7ff      	b.n	cbca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1da2>
    cbca:	9889      	ldr	r0, [sp, #548]	; 0x224
    cbcc:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    cbd0:	9988      	ldr	r1, [sp, #544]	; 0x220
    cbd2:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    cbd6:	f24c 1228 	movw	r2, #49448	; 0xc128
    cbda:	f2c0 0201 	movt	r2, #1
    cbde:	6812      	ldr	r2, [r2, #0]
    cbe0:	466b      	mov	r3, sp
    cbe2:	f04f 0c01 	mov.w	ip, #1
    cbe6:	f8c3 c008 	str.w	ip, [r3, #8]
    cbea:	605a      	str	r2, [r3, #4]
    cbec:	f8c3 c000 	str.w	ip, [r3]
    cbf0:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    cbf4:	2202      	movs	r2, #2
    cbf6:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    cbfa:	998a      	ldr	r1, [sp, #552]	; 0x228
    cbfc:	f004 fae1 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cc00:	e7ff      	b.n	cc02 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1dda>
    cc02:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    cc06:	f24c 70e0 	movw	r0, #51168	; 0xc7e0
    cc0a:	f2c0 0001 	movt	r0, #1
    cc0e:	6802      	ldr	r2, [r0, #0]
    cc10:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    cc14:	f005 fa5c 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cc18:	e7ff      	b.n	cc1a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1df2>
    cc1a:	e7ff      	b.n	cc1c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1df4>
                if self.v[x] != self.v[y] {
    cc1c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cc20:	280f      	cmp	r0, #15
    cc22:	f201 8561 	bhi.w	e6e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38c0>
    cc26:	e7ff      	b.n	cc28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e00>
    cc28:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc2c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cc30:	1842      	adds	r2, r0, r1
    cc32:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cc36:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    cc3a:	2b0f      	cmp	r3, #15
    cc3c:	9287      	str	r2, [sp, #540]	; 0x21c
    cc3e:	f201 855d 	bhi.w	e6fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38d4>
    cc42:	e7ff      	b.n	cc44 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e1c>
    cc44:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc48:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    cc4c:	1842      	adds	r2, r0, r1
    cc4e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cc52:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    cc54:	fa5f fc83 	uxtb.w	ip, r3
    cc58:	4594      	cmp	ip, r2
    cc5a:	d006      	beq.n	cc6a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e42>
    cc5c:	e7ff      	b.n	cc5e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e36>
                    self.next();
    cc5e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc62:	f001 fee0 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    cc66:	e7ff      	b.n	cc68 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e40>
                if self.v[x] != self.v[y] {
    cc68:	e7ff      	b.n	cc6a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e42>
        match (
    cc6a:	f001 bbaa 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cc6e:	2005      	movs	r0, #5
    cc70:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    cc74:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    cc78:	f2c0 0001 	movt	r0, #1
    cc7c:	6801      	ldr	r1, [r0, #0]
    cc7e:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    cc82:	f004 fa62 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cc86:	9086      	str	r0, [sp, #536]	; 0x218
    cc88:	e01f      	b.n	ccca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ea2>
    cc8a:	2001      	movs	r0, #1
    cc8c:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    cc90:	e015      	b.n	ccbe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e96>
    cc92:	2000      	movs	r0, #0
    cc94:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    cc98:	e011      	b.n	ccbe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e96>
    cc9a:	2000      	movs	r0, #0
    cc9c:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    cca0:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    cca4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cca8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ccac:	f004 fac2 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    ccb0:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    ccb4:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    ccb8:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    ccbc:	e00a      	b.n	ccd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1eac>
    ccbe:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    ccc2:	07c0      	lsls	r0, r0, #31
    ccc4:	2800      	cmp	r0, #0
    ccc6:	d112      	bne.n	ccee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ec6>
    ccc8:	e055      	b.n	cd76 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f4e>
    ccca:	9886      	ldr	r0, [sp, #536]	; 0x218
    cccc:	07c1      	lsls	r1, r0, #31
    ccce:	2900      	cmp	r1, #0
    ccd0:	d1e3      	bne.n	cc9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e72>
    ccd2:	e7de      	b.n	cc92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e6a>
    ccd4:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    ccd8:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    ccdc:	f004 fa35 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cce0:	9085      	str	r0, [sp, #532]	; 0x214
    cce2:	e7ff      	b.n	cce4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1ebc>
    cce4:	9885      	ldr	r0, [sp, #532]	; 0x214
    cce6:	07c1      	lsls	r1, r0, #31
    cce8:	2900      	cmp	r1, #0
    ccea:	d1ce      	bne.n	cc8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e62>
    ccec:	e7d1      	b.n	cc92 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1e6a>
                trace!("[{:04x}] LD I, nnn", self.pc);
    ccee:	f24c 7080 	movw	r0, #51072	; 0xc780
    ccf2:	f2c0 0001 	movt	r0, #1
    ccf6:	6801      	ldr	r1, [r0, #0]
    ccf8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ccfc:	f100 0212 	add.w	r2, r0, #18
    cd00:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    cd04:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    cd08:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    cd0c:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    cd10:	f2c0 0301 	movt	r3, #1
    cd14:	4610      	mov	r0, r2
    cd16:	9184      	str	r1, [sp, #528]	; 0x210
    cd18:	4619      	mov	r1, r3
    cd1a:	f7fd fc3e 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cd1e:	9083      	str	r0, [sp, #524]	; 0x20c
    cd20:	9182      	str	r1, [sp, #520]	; 0x208
    cd22:	e7ff      	b.n	cd24 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1efc>
    cd24:	9883      	ldr	r0, [sp, #524]	; 0x20c
    cd26:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    cd2a:	9982      	ldr	r1, [sp, #520]	; 0x208
    cd2c:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    cd30:	f24c 1228 	movw	r2, #49448	; 0xc128
    cd34:	f2c0 0201 	movt	r2, #1
    cd38:	6812      	ldr	r2, [r2, #0]
    cd3a:	466b      	mov	r3, sp
    cd3c:	f04f 0c01 	mov.w	ip, #1
    cd40:	f8c3 c008 	str.w	ip, [r3, #8]
    cd44:	605a      	str	r2, [r3, #4]
    cd46:	f8c3 c000 	str.w	ip, [r3]
    cd4a:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    cd4e:	2202      	movs	r2, #2
    cd50:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    cd54:	9984      	ldr	r1, [sp, #528]	; 0x210
    cd56:	f004 fa34 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cd5a:	e7ff      	b.n	cd5c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f34>
    cd5c:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    cd60:	f24c 70a0 	movw	r0, #51104	; 0xc7a0
    cd64:	f2c0 0001 	movt	r0, #1
    cd68:	6802      	ldr	r2, [r0, #0]
    cd6a:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    cd6e:	f005 f9af 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cd72:	e7ff      	b.n	cd74 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f4c>
    cd74:	e7ff      	b.n	cd76 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f4e>
                self.i = nnn;
    cd76:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    cd7a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    cd7e:	8208      	strh	r0, [r1, #16]
        match (
    cd80:	f001 bb1f 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cd84:	2005      	movs	r0, #5
    cd86:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    cd8a:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    cd8e:	f2c0 0001 	movt	r0, #1
    cd92:	6801      	ldr	r1, [r0, #0]
    cd94:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    cd98:	f004 f9d7 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cd9c:	9081      	str	r0, [sp, #516]	; 0x204
    cd9e:	e01f      	b.n	cde0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fb8>
    cda0:	2001      	movs	r0, #1
    cda2:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    cda6:	e015      	b.n	cdd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fac>
    cda8:	2000      	movs	r0, #0
    cdaa:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    cdae:	e011      	b.n	cdd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fac>
    cdb0:	2000      	movs	r0, #0
    cdb2:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    cdb6:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    cdba:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cdbe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cdc2:	f004 fa37 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    cdc6:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    cdca:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    cdce:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    cdd2:	e00a      	b.n	cdea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fc2>
    cdd4:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    cdd8:	07c0      	lsls	r0, r0, #31
    cdda:	2800      	cmp	r0, #0
    cddc:	d112      	bne.n	ce04 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fdc>
    cdde:	e055      	b.n	ce8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2064>
    cde0:	9881      	ldr	r0, [sp, #516]	; 0x204
    cde2:	07c1      	lsls	r1, r0, #31
    cde4:	2900      	cmp	r1, #0
    cde6:	d1e3      	bne.n	cdb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f88>
    cde8:	e7de      	b.n	cda8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f80>
    cdea:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    cdee:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    cdf2:	f004 f9aa 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cdf6:	9080      	str	r0, [sp, #512]	; 0x200
    cdf8:	e7ff      	b.n	cdfa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1fd2>
    cdfa:	9880      	ldr	r0, [sp, #512]	; 0x200
    cdfc:	07c1      	lsls	r1, r0, #31
    cdfe:	2900      	cmp	r1, #0
    ce00:	d1ce      	bne.n	cda0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f78>
    ce02:	e7d1      	b.n	cda8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x1f80>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    ce04:	f24c 7040 	movw	r0, #51008	; 0xc740
    ce08:	f2c0 0001 	movt	r0, #1
    ce0c:	6801      	ldr	r1, [r0, #0]
    ce0e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ce12:	f100 0212 	add.w	r2, r0, #18
    ce16:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    ce1a:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    ce1e:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    ce22:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    ce26:	f2c0 0301 	movt	r3, #1
    ce2a:	4610      	mov	r0, r2
    ce2c:	917f      	str	r1, [sp, #508]	; 0x1fc
    ce2e:	4619      	mov	r1, r3
    ce30:	f7fd fbb3 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ce34:	907e      	str	r0, [sp, #504]	; 0x1f8
    ce36:	917d      	str	r1, [sp, #500]	; 0x1f4
    ce38:	e7ff      	b.n	ce3a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2012>
    ce3a:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    ce3c:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    ce40:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    ce42:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    ce46:	f24c 1228 	movw	r2, #49448	; 0xc128
    ce4a:	f2c0 0201 	movt	r2, #1
    ce4e:	6812      	ldr	r2, [r2, #0]
    ce50:	466b      	mov	r3, sp
    ce52:	f04f 0c01 	mov.w	ip, #1
    ce56:	f8c3 c008 	str.w	ip, [r3, #8]
    ce5a:	605a      	str	r2, [r3, #4]
    ce5c:	f8c3 c000 	str.w	ip, [r3]
    ce60:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    ce64:	2202      	movs	r2, #2
    ce66:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    ce6a:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    ce6c:	f004 f9a9 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    ce70:	e7ff      	b.n	ce72 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x204a>
    ce72:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    ce76:	f24c 7060 	movw	r0, #51040	; 0xc760
    ce7a:	f2c0 0001 	movt	r0, #1
    ce7e:	6802      	ldr	r2, [r0, #0]
    ce80:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    ce84:	f005 f924 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ce88:	e7ff      	b.n	ce8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2062>
    ce8a:	e7ff      	b.n	ce8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2064>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    ce8c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ce90:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    ce94:	f004 f9e2 	bl	1125c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>
    ce98:	907c      	str	r0, [sp, #496]	; 0x1f0
    ce9a:	e7ff      	b.n	ce9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2074>
    ce9c:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    cea0:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    cea2:	f002 f8e8 	bl	f076 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>
    cea6:	907b      	str	r0, [sp, #492]	; 0x1ec
    cea8:	e7ff      	b.n	ceaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2082>
    ceaa:	2102      	movs	r1, #2
    ceac:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    ceae:	f002 f8f3 	bl	f098 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>
    ceb2:	907a      	str	r0, [sp, #488]	; 0x1e8
    ceb4:	e7ff      	b.n	ceb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x208e>
    ceb6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ceba:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    cebc:	f001 fd70 	bl	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    cec0:	e7ff      	b.n	cec2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x209a>
        match (
    cec2:	f001 ba7e 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    cec6:	2005      	movs	r0, #5
    cec8:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    cecc:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    ced0:	f2c0 0001 	movt	r0, #1
    ced4:	6801      	ldr	r1, [r0, #0]
    ced6:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    ceda:	f004 f936 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cede:	9079      	str	r0, [sp, #484]	; 0x1e4
    cee0:	e01f      	b.n	cf22 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20fa>
    cee2:	2001      	movs	r0, #1
    cee4:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    cee8:	e015      	b.n	cf16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ee>
    ceea:	2000      	movs	r0, #0
    ceec:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    cef0:	e011      	b.n	cf16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ee>
    cef2:	2000      	movs	r0, #0
    cef4:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    cef8:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    cefc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cf00:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cf04:	f004 f996 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    cf08:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    cf0c:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    cf10:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    cf14:	e00a      	b.n	cf2c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2104>
    cf16:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    cf1a:	07c0      	lsls	r0, r0, #31
    cf1c:	2800      	cmp	r0, #0
    cf1e:	d112      	bne.n	cf46 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x211e>
    cf20:	e055      	b.n	cfce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21a6>
    cf22:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    cf24:	07c1      	lsls	r1, r0, #31
    cf26:	2900      	cmp	r1, #0
    cf28:	d1e3      	bne.n	cef2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ca>
    cf2a:	e7de      	b.n	ceea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20c2>
    cf2c:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    cf30:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    cf34:	f004 f909 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    cf38:	9078      	str	r0, [sp, #480]	; 0x1e0
    cf3a:	e7ff      	b.n	cf3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2114>
    cf3c:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    cf3e:	07c1      	lsls	r1, r0, #31
    cf40:	2900      	cmp	r1, #0
    cf42:	d1ce      	bne.n	cee2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20ba>
    cf44:	e7d1      	b.n	ceea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x20c2>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    cf46:	f24c 60f0 	movw	r0, #50928	; 0xc6f0
    cf4a:	f2c0 0001 	movt	r0, #1
    cf4e:	6801      	ldr	r1, [r0, #0]
    cf50:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cf54:	f100 0212 	add.w	r2, r0, #18
    cf58:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    cf5c:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    cf60:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    cf64:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    cf68:	f2c0 0301 	movt	r3, #1
    cf6c:	4610      	mov	r0, r2
    cf6e:	9177      	str	r1, [sp, #476]	; 0x1dc
    cf70:	4619      	mov	r1, r3
    cf72:	f7fd fb12 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cf76:	9076      	str	r0, [sp, #472]	; 0x1d8
    cf78:	9175      	str	r1, [sp, #468]	; 0x1d4
    cf7a:	e7ff      	b.n	cf7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2154>
    cf7c:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    cf7e:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    cf82:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    cf84:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    cf88:	f24c 1228 	movw	r2, #49448	; 0xc128
    cf8c:	f2c0 0201 	movt	r2, #1
    cf90:	6812      	ldr	r2, [r2, #0]
    cf92:	466b      	mov	r3, sp
    cf94:	f04f 0c01 	mov.w	ip, #1
    cf98:	f8c3 c008 	str.w	ip, [r3, #8]
    cf9c:	605a      	str	r2, [r3, #4]
    cf9e:	f8c3 c000 	str.w	ip, [r3]
    cfa2:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    cfa6:	2202      	movs	r2, #2
    cfa8:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    cfac:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    cfae:	f004 f908 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    cfb2:	e7ff      	b.n	cfb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x218c>
    cfb4:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    cfb8:	f24c 7010 	movw	r0, #50960	; 0xc710
    cfbc:	f2c0 0001 	movt	r0, #1
    cfc0:	6802      	ldr	r2, [r0, #0]
    cfc2:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    cfc6:	f005 f883 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cfca:	e7ff      	b.n	cfcc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21a4>
    cfcc:	e7ff      	b.n	cfce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21a6>
    cfce:	f241 0048 	movw	r0, #4168	; 0x1048
                self.v[x] = self.hw.rand() & kk;
    cfd2:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    cfd6:	4408      	add	r0, r1
    cfd8:	f002 fa15 	bl	f406 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hd3173c320d2551cfE>
    cfdc:	9074      	str	r0, [sp, #464]	; 0x1d0
    cfde:	e7ff      	b.n	cfe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21b8>
    cfe0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cfe4:	280f      	cmp	r0, #15
    cfe6:	f201 8375 	bhi.w	e6d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x38ac>
    cfea:	e7ff      	b.n	cfec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21c4>
    cfec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cff0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cff4:	1842      	adds	r2, r0, r1
    cff6:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    cff8:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    cffc:	ea03 0e0c 	and.w	lr, r3, ip
    d000:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    d004:	f001 b9dd 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d008:	2005      	movs	r0, #5
    d00a:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    d00e:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    d012:	f2c0 0001 	movt	r0, #1
    d016:	6801      	ldr	r1, [r0, #0]
    d018:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    d01c:	f004 f895 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d020:	9073      	str	r0, [sp, #460]	; 0x1cc
    d022:	e01f      	b.n	d064 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x223c>
    d024:	2001      	movs	r0, #1
    d026:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    d02a:	e015      	b.n	d058 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2230>
    d02c:	2000      	movs	r0, #0
    d02e:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    d032:	e011      	b.n	d058 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2230>
    d034:	2000      	movs	r0, #0
    d036:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    d03a:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    d03e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d042:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d046:	f004 f8f5 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d04a:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    d04e:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    d052:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    d056:	e00a      	b.n	d06e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2246>
    d058:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    d05c:	07c0      	lsls	r0, r0, #31
    d05e:	2800      	cmp	r0, #0
    d060:	d112      	bne.n	d088 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2260>
    d062:	e055      	b.n	d110 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22e8>
    d064:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    d066:	07c1      	lsls	r1, r0, #31
    d068:	2900      	cmp	r1, #0
    d06a:	d1e3      	bne.n	d034 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x220c>
    d06c:	e7de      	b.n	d02c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2204>
    d06e:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    d072:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    d076:	f004 f868 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d07a:	9072      	str	r0, [sp, #456]	; 0x1c8
    d07c:	e7ff      	b.n	d07e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2256>
    d07e:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    d080:	07c1      	lsls	r1, r0, #31
    d082:	2900      	cmp	r1, #0
    d084:	d1ce      	bne.n	d024 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x21fc>
    d086:	e7d1      	b.n	d02c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2204>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    d088:	f24c 5094 	movw	r0, #50580	; 0xc594
    d08c:	f2c0 0001 	movt	r0, #1
    d090:	6801      	ldr	r1, [r0, #0]
    d092:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d096:	f100 0212 	add.w	r2, r0, #18
    d09a:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    d09e:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    d0a2:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    d0a6:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    d0aa:	f2c0 0301 	movt	r3, #1
    d0ae:	4610      	mov	r0, r2
    d0b0:	9171      	str	r1, [sp, #452]	; 0x1c4
    d0b2:	4619      	mov	r1, r3
    d0b4:	f7fd fa71 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d0b8:	9070      	str	r0, [sp, #448]	; 0x1c0
    d0ba:	916f      	str	r1, [sp, #444]	; 0x1bc
    d0bc:	e7ff      	b.n	d0be <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2296>
    d0be:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    d0c0:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    d0c4:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    d0c6:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    d0ca:	f24c 1228 	movw	r2, #49448	; 0xc128
    d0ce:	f2c0 0201 	movt	r2, #1
    d0d2:	6812      	ldr	r2, [r2, #0]
    d0d4:	466b      	mov	r3, sp
    d0d6:	f04f 0c01 	mov.w	ip, #1
    d0da:	f8c3 c008 	str.w	ip, [r3, #8]
    d0de:	605a      	str	r2, [r3, #4]
    d0e0:	f8c3 c000 	str.w	ip, [r3]
    d0e4:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    d0e8:	2202      	movs	r2, #2
    d0ea:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    d0ee:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    d0f0:	f004 f867 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d0f4:	e7ff      	b.n	d0f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22ce>
    d0f6:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    d0fa:	f24c 50b4 	movw	r0, #50612	; 0xc5b4
    d0fe:	f2c0 0001 	movt	r0, #1
    d102:	6802      	ldr	r2, [r0, #0]
    d104:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    d108:	f004 ffe2 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d10c:	e7ff      	b.n	d10e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22e6>
    d10e:	e7ff      	b.n	d110 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22e8>
                let basex = self.v[x] as usize;
    d110:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d114:	280f      	cmp	r0, #15
    d116:	f201 826b 	bhi.w	e5f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37c8>
    d11a:	e7ff      	b.n	d11c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x22f4>
    d11c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d120:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d124:	1842      	adds	r2, r0, r1
    d126:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d12a:	4613      	mov	r3, r2
    d12c:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    d130:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    d134:	2a0f      	cmp	r2, #15
    d136:	936e      	str	r3, [sp, #440]	; 0x1b8
    d138:	f201 8264 	bhi.w	e604 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37dc>
    d13c:	e7ff      	b.n	d13e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2316>
    d13e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d142:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d146:	1842      	adds	r2, r0, r1
    d148:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d14c:	4613      	mov	r3, r2
    d14e:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
    d152:	f241 0248 	movw	r2, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    d156:	4410      	add	r0, r2
    d158:	936d      	str	r3, [sp, #436]	; 0x1b4
    d15a:	f002 fb37 	bl	f7cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E>
    d15e:	906c      	str	r0, [sp, #432]	; 0x1b0
    d160:	916b      	str	r1, [sp, #428]	; 0x1ac
    d162:	e7ff      	b.n	d164 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x233c>
    d164:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    d166:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    d16a:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    d16c:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    d170:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    d172:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    d176:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    d17a:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    d17e:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    d182:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    d186:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    d18a:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    d18e:	f004 fd2b 	bl	11be8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    d192:	906a      	str	r0, [sp, #424]	; 0x1a8
    d194:	9169      	str	r1, [sp, #420]	; 0x1a4
    d196:	e7ff      	b.n	d198 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2370>
    d198:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    d19a:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    d19e:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    d1a0:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    d1a4:	e7ff      	b.n	d1a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x237e>
    d1a6:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    d1aa:	f004 fc92 	bl	11ad2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d1ae:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    d1b2:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    d1b6:	e7ff      	b.n	d1b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2390>
    d1b8:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    d1bc:	2800      	cmp	r0, #0
    d1be:	d001      	beq.n	d1c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x239c>
    d1c0:	e7ff      	b.n	d1c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x239a>
    d1c2:	e002      	b.n	d1ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x23a2>
        match (
    d1c4:	f001 b8fd 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for y in 0..n {
    d1c8:	defe      	udf	#254	; 0xfe
    d1ca:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    d1ce:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    d1d2:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    d1d6:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    d1da:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d1de:	8a0a      	ldrh	r2, [r1, #16]
    d1e0:	1813      	adds	r3, r2, r0
    d1e2:	469c      	mov	ip, r3
    d1e4:	4293      	cmp	r3, r2
    d1e6:	9068      	str	r0, [sp, #416]	; 0x1a0
    d1e8:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    d1ec:	f0c1 8214 	bcc.w	e618 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37f0>
    d1f0:	e7ff      	b.n	d1f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x23ca>
    d1f2:	2000      	movs	r0, #0
    d1f4:	9967      	ldr	r1, [sp, #412]	; 0x19c
    d1f6:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    d1fa:	f041 8219 	bne.w	e630 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3808>
    d1fe:	e7ff      	b.n	d200 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x23d8>
    d200:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d204:	9967      	ldr	r1, [sp, #412]	; 0x19c
    d206:	1842      	adds	r2, r0, r1
    d208:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d20c:	4613      	mov	r3, r2
    d20e:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    d212:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    d214:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    d218:	eb02 0e0c 	add.w	lr, r2, ip
    d21c:	4674      	mov	r4, lr
    d21e:	4596      	cmp	lr, r2
    d220:	9366      	str	r3, [sp, #408]	; 0x198
    d222:	9465      	str	r4, [sp, #404]	; 0x194
    d224:	f0c1 820e 	bcc.w	e644 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x381c>
    d228:	e7ff      	b.n	d22a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2402>
    d22a:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    d22c:	2800      	cmp	r0, #0
    d22e:	f001 8215 	beq.w	e65c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3834>
    d232:	e7ff      	b.n	d234 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x240c>
    d234:	9865      	ldr	r0, [sp, #404]	; 0x194
    d236:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    d238:	fbb0 f2f1 	udiv	r2, r0, r1
    d23c:	fb02 0211 	mls	r2, r2, r1, r0
    d240:	4613      	mov	r3, r2
    d242:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    d246:	2200      	movs	r2, #0
                    for x in 0..8 {
    d248:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    d24c:	2208      	movs	r2, #8
    d24e:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    d252:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    d256:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    d25a:	9364      	str	r3, [sp, #400]	; 0x190
    d25c:	f004 fcc4 	bl	11be8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    d260:	9063      	str	r0, [sp, #396]	; 0x18c
    d262:	9162      	str	r1, [sp, #392]	; 0x188
    d264:	e7ff      	b.n	d266 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x243e>
    d266:	9863      	ldr	r0, [sp, #396]	; 0x18c
    d268:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    d26c:	9962      	ldr	r1, [sp, #392]	; 0x188
    d26e:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    d272:	e7ff      	b.n	d274 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x244c>
    d274:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    d278:	f004 fc2b 	bl	11ad2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d27c:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    d280:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    d284:	e7ff      	b.n	d286 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x245e>
    d286:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    d28a:	2800      	cmp	r0, #0
    d28c:	d001      	beq.n	d292 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x246a>
    d28e:	e7ff      	b.n	d290 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2468>
    d290:	e001      	b.n	d296 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x246e>
                for y in 0..n {
    d292:	e788      	b.n	d1a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x237e>
                    for x in 0..8 {
    d294:	defe      	udf	#254	; 0xfe
    d296:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    d29a:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    d29e:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    d2a2:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    d2a6:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    d2a8:	1842      	adds	r2, r0, r1
    d2aa:	4613      	mov	r3, r2
    d2ac:	4282      	cmp	r2, r0
    d2ae:	9061      	str	r0, [sp, #388]	; 0x184
    d2b0:	9360      	str	r3, [sp, #384]	; 0x180
    d2b2:	f0c1 81df 	bcc.w	e674 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x384c>
    d2b6:	e7ff      	b.n	d2b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2490>
    d2b8:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    d2ba:	2800      	cmp	r0, #0
    d2bc:	f001 81e6 	beq.w	e68c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3864>
    d2c0:	e7ff      	b.n	d2c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x249a>
    d2c2:	9860      	ldr	r0, [sp, #384]	; 0x180
    d2c4:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    d2c6:	fbb0 f2f1 	udiv	r2, r0, r1
    d2ca:	fb02 0211 	mls	r2, r2, r1, r0
    d2ce:	4613      	mov	r3, r2
    d2d0:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    d2d4:	9a61      	ldr	r2, [sp, #388]	; 0x184
    d2d6:	f1c2 0c07 	rsb	ip, r2, #7
    d2da:	f04f 0e07 	mov.w	lr, #7
    d2de:	4596      	cmp	lr, r2
    d2e0:	935f      	str	r3, [sp, #380]	; 0x17c
    d2e2:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    d2e6:	f0c1 81dd 	bcc.w	e6a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x387c>
    d2ea:	e7ff      	b.n	d2ec <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x24c4>
    d2ec:	985e      	ldr	r0, [sp, #376]	; 0x178
    d2ee:	f000 0107 	and.w	r1, r0, #7
    d2f2:	2201      	movs	r2, #1
    d2f4:	fa02 f101 	lsl.w	r1, r2, r1
    d2f8:	08c2      	lsrs	r2, r0, #3
    d2fa:	2a00      	cmp	r2, #0
    d2fc:	915d      	str	r1, [sp, #372]	; 0x174
    d2fe:	f041 81dd 	bne.w	e6bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3894>
    d302:	e7ff      	b.n	d304 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x24dc>
    d304:	9866      	ldr	r0, [sp, #408]	; 0x198
    d306:	995d      	ldr	r1, [sp, #372]	; 0x174
    d308:	ea00 0201 	and.w	r2, r0, r1
    d30c:	b2d2      	uxtb	r2, r2
    d30e:	2a00      	cmp	r2, #0
    d310:	bf18      	it	ne
    d312:	2201      	movne	r2, #1
    d314:	4613      	mov	r3, r2
    d316:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
    d31a:	f241 0248 	movw	r2, #4168	; 0x1048
                        let dst = self.hw.vram_get(vramx, vramy);
    d31e:	f8dd c490 	ldr.w	ip, [sp, #1168]	; 0x490
    d322:	eb0c 0002 	add.w	r0, ip, r2
    d326:	995f      	ldr	r1, [sp, #380]	; 0x17c
    d328:	9a64      	ldr	r2, [sp, #400]	; 0x190
    d32a:	935c      	str	r3, [sp, #368]	; 0x170
    d32c:	f002 f997 	bl	f65e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE>
    d330:	4601      	mov	r1, r0
    d332:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    d336:	915b      	str	r1, [sp, #364]	; 0x16c
    d338:	e7ff      	b.n	d33a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2512>
                        self.v[0xf] |= (src && dst) as u8;
    d33a:	985c      	ldr	r0, [sp, #368]	; 0x170
    d33c:	07c1      	lsls	r1, r0, #31
    d33e:	2900      	cmp	r1, #0
    d340:	d108      	bne.n	d354 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x252c>
    d342:	e003      	b.n	d34c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2524>
    d344:	2001      	movs	r0, #1
    d346:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    d34a:	e008      	b.n	d35e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2536>
    d34c:	2000      	movs	r0, #0
    d34e:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    d352:	e004      	b.n	d35e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2536>
    d354:	985b      	ldr	r0, [sp, #364]	; 0x16c
    d356:	07c1      	lsls	r1, r0, #31
    d358:	2900      	cmp	r1, #0
    d35a:	d1f3      	bne.n	d344 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x251c>
    d35c:	e7f6      	b.n	d34c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2524>
    d35e:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    d362:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d366:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    d36a:	4310      	orrs	r0, r2
    d36c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    d370:	f241 0048 	movw	r0, #4168	; 0x1048
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    d374:	4408      	add	r0, r1
    d376:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    d378:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    d37a:	ea82 0c03 	eor.w	ip, r2, r3
    d37e:	f00c 0301 	and.w	r3, ip, #1
    d382:	995f      	ldr	r1, [sp, #380]	; 0x17c
    d384:	9a64      	ldr	r2, [sp, #400]	; 0x190
    d386:	f002 f864 	bl	f452 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE>
    d38a:	e7ff      	b.n	d38c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2564>
                    for x in 0..8 {
    d38c:	e772      	b.n	d274 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x244c>
    d38e:	2005      	movs	r0, #5
    d390:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    d394:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    d398:	f2c0 0001 	movt	r0, #1
    d39c:	6801      	ldr	r1, [r0, #0]
    d39e:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    d3a2:	f003 fed2 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d3a6:	905a      	str	r0, [sp, #360]	; 0x168
    d3a8:	e01f      	b.n	d3ea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25c2>
    d3aa:	2001      	movs	r0, #1
    d3ac:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    d3b0:	e015      	b.n	d3de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25b6>
    d3b2:	2000      	movs	r0, #0
    d3b4:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    d3b8:	e011      	b.n	d3de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25b6>
    d3ba:	2000      	movs	r0, #0
    d3bc:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    d3c0:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    d3c4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d3c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d3cc:	f003 ff32 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d3d0:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    d3d4:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    d3d8:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    d3dc:	e00a      	b.n	d3f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25cc>
    d3de:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    d3e2:	07c0      	lsls	r0, r0, #31
    d3e4:	2800      	cmp	r0, #0
    d3e6:	d112      	bne.n	d40e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25e6>
    d3e8:	e055      	b.n	d496 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x266e>
    d3ea:	985a      	ldr	r0, [sp, #360]	; 0x168
    d3ec:	07c1      	lsls	r1, r0, #31
    d3ee:	2900      	cmp	r1, #0
    d3f0:	d1e3      	bne.n	d3ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2592>
    d3f2:	e7de      	b.n	d3b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x258a>
    d3f4:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    d3f8:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    d3fc:	f003 fea5 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d400:	9059      	str	r0, [sp, #356]	; 0x164
    d402:	e7ff      	b.n	d404 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x25dc>
    d404:	9859      	ldr	r0, [sp, #356]	; 0x164
    d406:	07c1      	lsls	r1, r0, #31
    d408:	2900      	cmp	r1, #0
    d40a:	d1ce      	bne.n	d3aa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2582>
    d40c:	e7d1      	b.n	d3b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x258a>
                trace!("[{:04x}] SKP Vx", self.pc);
    d40e:	f24c 5040 	movw	r0, #50496	; 0xc540
    d412:	f2c0 0001 	movt	r0, #1
    d416:	6801      	ldr	r1, [r0, #0]
    d418:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d41c:	f100 0212 	add.w	r2, r0, #18
    d420:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    d424:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    d428:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    d42c:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    d430:	f2c0 0301 	movt	r3, #1
    d434:	4610      	mov	r0, r2
    d436:	9158      	str	r1, [sp, #352]	; 0x160
    d438:	4619      	mov	r1, r3
    d43a:	f7fd f8ae 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d43e:	9057      	str	r0, [sp, #348]	; 0x15c
    d440:	9156      	str	r1, [sp, #344]	; 0x158
    d442:	e7ff      	b.n	d444 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x261c>
    d444:	9857      	ldr	r0, [sp, #348]	; 0x15c
    d446:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    d44a:	9956      	ldr	r1, [sp, #344]	; 0x158
    d44c:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    d450:	f24c 1228 	movw	r2, #49448	; 0xc128
    d454:	f2c0 0201 	movt	r2, #1
    d458:	6812      	ldr	r2, [r2, #0]
    d45a:	466b      	mov	r3, sp
    d45c:	f04f 0c01 	mov.w	ip, #1
    d460:	f8c3 c008 	str.w	ip, [r3, #8]
    d464:	605a      	str	r2, [r3, #4]
    d466:	f8c3 c000 	str.w	ip, [r3]
    d46a:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    d46e:	2202      	movs	r2, #2
    d470:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    d474:	9958      	ldr	r1, [sp, #352]	; 0x160
    d476:	f003 fea4 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d47a:	e7ff      	b.n	d47c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2654>
    d47c:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    d480:	f24c 5060 	movw	r0, #50528	; 0xc560
    d484:	f2c0 0001 	movt	r0, #1
    d488:	6802      	ldr	r2, [r0, #0]
    d48a:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    d48e:	f004 fe1f 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d492:	e7ff      	b.n	d494 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x266c>
    d494:	e7ff      	b.n	d496 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x266e>
    d496:	f241 0048 	movw	r0, #4168	; 0x1048
                if self.hw.key(self.v[x]) {
    d49a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d49e:	4408      	add	r0, r1
    d4a0:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    d4a4:	2a0f      	cmp	r2, #15
    d4a6:	9055      	str	r0, [sp, #340]	; 0x154
    d4a8:	f201 8098 	bhi.w	e5dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37b4>
    d4ac:	e7ff      	b.n	d4ae <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2686>
    d4ae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d4b2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4b6:	1842      	adds	r2, r0, r1
    d4b8:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    d4bc:	9855      	ldr	r0, [sp, #340]	; 0x154
    d4be:	f001 ffa7 	bl	f410 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>
    d4c2:	9054      	str	r0, [sp, #336]	; 0x150
    d4c4:	e7ff      	b.n	d4c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x269e>
    d4c6:	9854      	ldr	r0, [sp, #336]	; 0x150
    d4c8:	07c1      	lsls	r1, r0, #31
    d4ca:	2900      	cmp	r1, #0
    d4cc:	d006      	beq.n	d4dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b4>
    d4ce:	e7ff      	b.n	d4d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26a8>
                    self.next();
    d4d0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d4d4:	f001 faa7 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    d4d8:	e7ff      	b.n	d4da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b2>
                if self.hw.key(self.v[x]) {
    d4da:	e7ff      	b.n	d4dc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26b4>
        match (
    d4dc:	f000 bf71 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d4e0:	2005      	movs	r0, #5
    d4e2:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    d4e6:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    d4ea:	f2c0 0001 	movt	r0, #1
    d4ee:	6801      	ldr	r1, [r0, #0]
    d4f0:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    d4f4:	f003 fe29 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d4f8:	9053      	str	r0, [sp, #332]	; 0x14c
    d4fa:	e01f      	b.n	d53c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2714>
    d4fc:	2001      	movs	r0, #1
    d4fe:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    d502:	e015      	b.n	d530 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2708>
    d504:	2000      	movs	r0, #0
    d506:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    d50a:	e011      	b.n	d530 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2708>
    d50c:	2000      	movs	r0, #0
    d50e:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    d512:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    d516:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d51a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d51e:	f003 fe89 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d522:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    d526:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    d52a:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    d52e:	e00a      	b.n	d546 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x271e>
    d530:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    d534:	07c0      	lsls	r0, r0, #31
    d536:	2800      	cmp	r0, #0
    d538:	d112      	bne.n	d560 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2738>
    d53a:	e055      	b.n	d5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27c0>
    d53c:	9853      	ldr	r0, [sp, #332]	; 0x14c
    d53e:	07c1      	lsls	r1, r0, #31
    d540:	2900      	cmp	r1, #0
    d542:	d1e3      	bne.n	d50c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26e4>
    d544:	e7de      	b.n	d504 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26dc>
    d546:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    d54a:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    d54e:	f003 fdfc 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d552:	9052      	str	r0, [sp, #328]	; 0x148
    d554:	e7ff      	b.n	d556 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x272e>
    d556:	9852      	ldr	r0, [sp, #328]	; 0x148
    d558:	07c1      	lsls	r1, r0, #31
    d55a:	2900      	cmp	r1, #0
    d55c:	d1ce      	bne.n	d4fc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26d4>
    d55e:	e7d1      	b.n	d504 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x26dc>
                trace!("[{:04x}] SKNP Vx", self.pc);
    d560:	f24c 40fc 	movw	r0, #50428	; 0xc4fc
    d564:	f2c0 0001 	movt	r0, #1
    d568:	6801      	ldr	r1, [r0, #0]
    d56a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d56e:	f100 0212 	add.w	r2, r0, #18
    d572:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    d576:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    d57a:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    d57e:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    d582:	f2c0 0301 	movt	r3, #1
    d586:	4610      	mov	r0, r2
    d588:	9151      	str	r1, [sp, #324]	; 0x144
    d58a:	4619      	mov	r1, r3
    d58c:	f7fd f805 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d590:	9050      	str	r0, [sp, #320]	; 0x140
    d592:	914f      	str	r1, [sp, #316]	; 0x13c
    d594:	e7ff      	b.n	d596 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x276e>
    d596:	9850      	ldr	r0, [sp, #320]	; 0x140
    d598:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    d59c:	994f      	ldr	r1, [sp, #316]	; 0x13c
    d59e:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    d5a2:	f24c 1228 	movw	r2, #49448	; 0xc128
    d5a6:	f2c0 0201 	movt	r2, #1
    d5aa:	6812      	ldr	r2, [r2, #0]
    d5ac:	466b      	mov	r3, sp
    d5ae:	f04f 0c01 	mov.w	ip, #1
    d5b2:	f8c3 c008 	str.w	ip, [r3, #8]
    d5b6:	605a      	str	r2, [r3, #4]
    d5b8:	f8c3 c000 	str.w	ip, [r3]
    d5bc:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    d5c0:	2202      	movs	r2, #2
    d5c2:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    d5c6:	9951      	ldr	r1, [sp, #324]	; 0x144
    d5c8:	f003 fdfb 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d5cc:	e7ff      	b.n	d5ce <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27a6>
    d5ce:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    d5d2:	f24c 501c 	movw	r0, #50460	; 0xc51c
    d5d6:	f2c0 0001 	movt	r0, #1
    d5da:	6802      	ldr	r2, [r0, #0]
    d5dc:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    d5e0:	f004 fd76 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d5e4:	e7ff      	b.n	d5e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27be>
    d5e6:	e7ff      	b.n	d5e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27c0>
    d5e8:	f241 0048 	movw	r0, #4168	; 0x1048
                if !self.hw.key(self.v[x]) {
    d5ec:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d5f0:	4408      	add	r0, r1
    d5f2:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    d5f6:	2a0f      	cmp	r2, #15
    d5f8:	904e      	str	r0, [sp, #312]	; 0x138
    d5fa:	f200 87e5 	bhi.w	e5c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x37a0>
    d5fe:	e7ff      	b.n	d600 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27d8>
    d600:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d604:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d608:	1842      	adds	r2, r0, r1
    d60a:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    d60e:	984e      	ldr	r0, [sp, #312]	; 0x138
    d610:	f001 fefe 	bl	f410 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>
    d614:	904d      	str	r0, [sp, #308]	; 0x134
    d616:	e7ff      	b.n	d618 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27f0>
    d618:	984d      	ldr	r0, [sp, #308]	; 0x134
    d61a:	07c1      	lsls	r1, r0, #31
    d61c:	2900      	cmp	r1, #0
    d61e:	d106      	bne.n	d62e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2806>
    d620:	e7ff      	b.n	d622 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x27fa>
                    self.next();
    d622:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d626:	f001 f9fe 	bl	ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>
    d62a:	e7ff      	b.n	d62c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2804>
                if !self.hw.key(self.v[x]) {
    d62c:	e7ff      	b.n	d62e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2806>
        match (
    d62e:	f000 bec8 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d632:	2005      	movs	r0, #5
    d634:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    d638:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    d63c:	f2c0 0001 	movt	r0, #1
    d640:	6801      	ldr	r1, [r0, #0]
    d642:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    d646:	f003 fd80 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d64a:	904c      	str	r0, [sp, #304]	; 0x130
    d64c:	e01f      	b.n	d68e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2866>
    d64e:	2001      	movs	r0, #1
    d650:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    d654:	e015      	b.n	d682 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x285a>
    d656:	2000      	movs	r0, #0
    d658:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    d65c:	e011      	b.n	d682 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x285a>
    d65e:	2000      	movs	r0, #0
    d660:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    d664:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    d668:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d66c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d670:	f003 fde0 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d674:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    d678:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    d67c:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    d680:	e00a      	b.n	d698 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2870>
    d682:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    d686:	07c0      	lsls	r0, r0, #31
    d688:	2800      	cmp	r0, #0
    d68a:	d112      	bne.n	d6b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x288a>
    d68c:	e055      	b.n	d73a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2912>
    d68e:	984c      	ldr	r0, [sp, #304]	; 0x130
    d690:	07c1      	lsls	r1, r0, #31
    d692:	2900      	cmp	r1, #0
    d694:	d1e3      	bne.n	d65e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2836>
    d696:	e7de      	b.n	d656 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x282e>
    d698:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    d69c:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    d6a0:	f003 fd53 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d6a4:	904b      	str	r0, [sp, #300]	; 0x12c
    d6a6:	e7ff      	b.n	d6a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2880>
    d6a8:	984b      	ldr	r0, [sp, #300]	; 0x12c
    d6aa:	07c1      	lsls	r1, r0, #31
    d6ac:	2900      	cmp	r1, #0
    d6ae:	d1ce      	bne.n	d64e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2826>
    d6b0:	e7d1      	b.n	d656 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x282e>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    d6b2:	f24c 40ac 	movw	r0, #50348	; 0xc4ac
    d6b6:	f2c0 0001 	movt	r0, #1
    d6ba:	6801      	ldr	r1, [r0, #0]
    d6bc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d6c0:	f100 0212 	add.w	r2, r0, #18
    d6c4:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    d6c8:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    d6cc:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    d6d0:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    d6d4:	f2c0 0301 	movt	r3, #1
    d6d8:	4610      	mov	r0, r2
    d6da:	914a      	str	r1, [sp, #296]	; 0x128
    d6dc:	4619      	mov	r1, r3
    d6de:	f7fc ff5c 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d6e2:	9049      	str	r0, [sp, #292]	; 0x124
    d6e4:	9148      	str	r1, [sp, #288]	; 0x120
    d6e6:	e7ff      	b.n	d6e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x28c0>
    d6e8:	9849      	ldr	r0, [sp, #292]	; 0x124
    d6ea:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    d6ee:	9948      	ldr	r1, [sp, #288]	; 0x120
    d6f0:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    d6f4:	f24c 1228 	movw	r2, #49448	; 0xc128
    d6f8:	f2c0 0201 	movt	r2, #1
    d6fc:	6812      	ldr	r2, [r2, #0]
    d6fe:	466b      	mov	r3, sp
    d700:	f04f 0c01 	mov.w	ip, #1
    d704:	f8c3 c008 	str.w	ip, [r3, #8]
    d708:	605a      	str	r2, [r3, #4]
    d70a:	f8c3 c000 	str.w	ip, [r3]
    d70e:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    d712:	2202      	movs	r2, #2
    d714:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    d718:	994a      	ldr	r1, [sp, #296]	; 0x128
    d71a:	f003 fd52 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d71e:	e7ff      	b.n	d720 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x28f8>
    d720:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    d724:	f24c 40cc 	movw	r0, #50380	; 0xc4cc
    d728:	f2c0 0001 	movt	r0, #1
    d72c:	6802      	ldr	r2, [r0, #0]
    d72e:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    d732:	f004 fccd 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d736:	e7ff      	b.n	d738 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2910>
    d738:	e7ff      	b.n	d73a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2912>
                self.v[x] = self.dt;
    d73a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d73e:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    d742:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    d746:	2a0f      	cmp	r2, #15
    d748:	9147      	str	r1, [sp, #284]	; 0x11c
    d74a:	f200 8733 	bhi.w	e5b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x378c>
    d74e:	e7ff      	b.n	d750 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2928>
    d750:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d754:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d758:	1842      	adds	r2, r0, r1
    d75a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    d75c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    d760:	f000 be2f 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d764:	2005      	movs	r0, #5
    d766:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    d76a:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    d76e:	f2c0 0001 	movt	r0, #1
    d772:	6801      	ldr	r1, [r0, #0]
    d774:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    d778:	f003 fce7 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d77c:	9046      	str	r0, [sp, #280]	; 0x118
    d77e:	e01f      	b.n	d7c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2998>
    d780:	2001      	movs	r0, #1
    d782:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    d786:	e015      	b.n	d7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x298c>
    d788:	2000      	movs	r0, #0
    d78a:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    d78e:	e011      	b.n	d7b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x298c>
    d790:	2000      	movs	r0, #0
    d792:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    d796:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    d79a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d79e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d7a2:	f003 fd47 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d7a6:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    d7aa:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    d7ae:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    d7b2:	e00a      	b.n	d7ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29a2>
    d7b4:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    d7b8:	07c0      	lsls	r0, r0, #31
    d7ba:	2800      	cmp	r0, #0
    d7bc:	d112      	bne.n	d7e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29bc>
    d7be:	e055      	b.n	d86c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a44>
    d7c0:	9846      	ldr	r0, [sp, #280]	; 0x118
    d7c2:	07c1      	lsls	r1, r0, #31
    d7c4:	2900      	cmp	r1, #0
    d7c6:	d1e3      	bne.n	d790 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2968>
    d7c8:	e7de      	b.n	d788 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2960>
    d7ca:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    d7ce:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    d7d2:	f003 fcba 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d7d6:	9045      	str	r0, [sp, #276]	; 0x114
    d7d8:	e7ff      	b.n	d7da <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29b2>
    d7da:	9845      	ldr	r0, [sp, #276]	; 0x114
    d7dc:	07c1      	lsls	r1, r0, #31
    d7de:	2900      	cmp	r1, #0
    d7e0:	d1ce      	bne.n	d780 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2958>
    d7e2:	e7d1      	b.n	d788 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2960>
                trace!("[{:04x}] LD Vx, K", self.pc);
    d7e4:	f24c 405c 	movw	r0, #50268	; 0xc45c
    d7e8:	f2c0 0001 	movt	r0, #1
    d7ec:	6801      	ldr	r1, [r0, #0]
    d7ee:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d7f2:	f100 0212 	add.w	r2, r0, #18
    d7f6:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    d7fa:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    d7fe:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    d802:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    d806:	f2c0 0301 	movt	r3, #1
    d80a:	4610      	mov	r0, r2
    d80c:	9144      	str	r1, [sp, #272]	; 0x110
    d80e:	4619      	mov	r1, r3
    d810:	f7fc fec3 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d814:	9043      	str	r0, [sp, #268]	; 0x10c
    d816:	9142      	str	r1, [sp, #264]	; 0x108
    d818:	e7ff      	b.n	d81a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x29f2>
    d81a:	9843      	ldr	r0, [sp, #268]	; 0x10c
    d81c:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    d820:	9942      	ldr	r1, [sp, #264]	; 0x108
    d822:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    d826:	f24c 1228 	movw	r2, #49448	; 0xc128
    d82a:	f2c0 0201 	movt	r2, #1
    d82e:	6812      	ldr	r2, [r2, #0]
    d830:	466b      	mov	r3, sp
    d832:	f04f 0c01 	mov.w	ip, #1
    d836:	f8c3 c008 	str.w	ip, [r3, #8]
    d83a:	605a      	str	r2, [r3, #4]
    d83c:	f8c3 c000 	str.w	ip, [r3]
    d840:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    d844:	2202      	movs	r2, #2
    d846:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    d84a:	9944      	ldr	r1, [sp, #272]	; 0x110
    d84c:	f003 fcb9 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d850:	e7ff      	b.n	d852 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a2a>
    d852:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    d856:	f24c 407c 	movw	r0, #50300	; 0xc47c
    d85a:	f2c0 0001 	movt	r0, #1
    d85e:	6802      	ldr	r2, [r0, #0]
    d860:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    d864:	f004 fc34 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d868:	e7ff      	b.n	d86a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a42>
    d86a:	e7ff      	b.n	d86c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a44>
                self.v[x] = self.waitkey();
    d86c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d870:	f001 fa2d 	bl	ecce <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE>
    d874:	9041      	str	r0, [sp, #260]	; 0x104
    d876:	e7ff      	b.n	d878 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a50>
    d878:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d87c:	280f      	cmp	r0, #15
    d87e:	f200 868f 	bhi.w	e5a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3778>
    d882:	e7ff      	b.n	d884 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a5c>
    d884:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d888:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d88c:	1842      	adds	r2, r0, r1
    d88e:	9b41      	ldr	r3, [sp, #260]	; 0x104
    d890:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    d894:	f000 bd95 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d898:	2005      	movs	r0, #5
    d89a:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    d89e:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    d8a2:	f2c0 0001 	movt	r0, #1
    d8a6:	6801      	ldr	r1, [r0, #0]
    d8a8:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    d8ac:	f003 fc4d 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d8b0:	9040      	str	r0, [sp, #256]	; 0x100
    d8b2:	e01f      	b.n	d8f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2acc>
    d8b4:	2001      	movs	r0, #1
    d8b6:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    d8ba:	e015      	b.n	d8e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ac0>
    d8bc:	2000      	movs	r0, #0
    d8be:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    d8c2:	e011      	b.n	d8e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ac0>
    d8c4:	2000      	movs	r0, #0
    d8c6:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    d8ca:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    d8ce:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d8d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d8d6:	f003 fcad 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    d8da:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    d8de:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    d8e2:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    d8e6:	e00a      	b.n	d8fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ad6>
    d8e8:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    d8ec:	07c0      	lsls	r0, r0, #31
    d8ee:	2800      	cmp	r0, #0
    d8f0:	d112      	bne.n	d918 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2af0>
    d8f2:	e055      	b.n	d9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b78>
    d8f4:	9840      	ldr	r0, [sp, #256]	; 0x100
    d8f6:	07c1      	lsls	r1, r0, #31
    d8f8:	2900      	cmp	r1, #0
    d8fa:	d1e3      	bne.n	d8c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a9c>
    d8fc:	e7de      	b.n	d8bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a94>
    d8fe:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    d902:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    d906:	f003 fc20 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d90a:	903f      	str	r0, [sp, #252]	; 0xfc
    d90c:	e7ff      	b.n	d90e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ae6>
    d90e:	983f      	ldr	r0, [sp, #252]	; 0xfc
    d910:	07c1      	lsls	r1, r0, #31
    d912:	2900      	cmp	r1, #0
    d914:	d1ce      	bne.n	d8b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a8c>
    d916:	e7d1      	b.n	d8bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2a94>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    d918:	f24c 400c 	movw	r0, #50188	; 0xc40c
    d91c:	f2c0 0001 	movt	r0, #1
    d920:	6801      	ldr	r1, [r0, #0]
    d922:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d926:	f100 0212 	add.w	r2, r0, #18
    d92a:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    d92e:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    d932:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    d936:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    d93a:	f2c0 0301 	movt	r3, #1
    d93e:	4610      	mov	r0, r2
    d940:	913e      	str	r1, [sp, #248]	; 0xf8
    d942:	4619      	mov	r1, r3
    d944:	f7fc fe29 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d948:	903d      	str	r0, [sp, #244]	; 0xf4
    d94a:	913c      	str	r1, [sp, #240]	; 0xf0
    d94c:	e7ff      	b.n	d94e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b26>
    d94e:	983d      	ldr	r0, [sp, #244]	; 0xf4
    d950:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    d954:	993c      	ldr	r1, [sp, #240]	; 0xf0
    d956:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    d95a:	f24c 1228 	movw	r2, #49448	; 0xc128
    d95e:	f2c0 0201 	movt	r2, #1
    d962:	6812      	ldr	r2, [r2, #0]
    d964:	466b      	mov	r3, sp
    d966:	f04f 0c01 	mov.w	ip, #1
    d96a:	f8c3 c008 	str.w	ip, [r3, #8]
    d96e:	605a      	str	r2, [r3, #4]
    d970:	f8c3 c000 	str.w	ip, [r3]
    d974:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    d978:	2202      	movs	r2, #2
    d97a:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    d97e:	993e      	ldr	r1, [sp, #248]	; 0xf8
    d980:	f003 fc1f 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    d984:	e7ff      	b.n	d986 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b5e>
    d986:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    d98a:	f24c 402c 	movw	r0, #50220	; 0xc42c
    d98e:	f2c0 0001 	movt	r0, #1
    d992:	6802      	ldr	r2, [r0, #0]
    d994:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    d998:	f004 fb9a 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d99c:	e7ff      	b.n	d99e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b76>
    d99e:	e7ff      	b.n	d9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b78>
                self.dt = self.v[x];
    d9a0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d9a4:	280f      	cmp	r0, #15
    d9a6:	f200 85f1 	bhi.w	e58c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3764>
    d9aa:	e7ff      	b.n	d9ac <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2b84>
    d9ac:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d9b0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d9b4:	1842      	adds	r2, r0, r1
    d9b6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d9ba:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    d9be:	f000 bd00 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    d9c2:	2005      	movs	r0, #5
    d9c4:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    d9c8:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    d9cc:	f2c0 0001 	movt	r0, #1
    d9d0:	6801      	ldr	r1, [r0, #0]
    d9d2:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    d9d6:	f003 fbb8 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    d9da:	903b      	str	r0, [sp, #236]	; 0xec
    d9dc:	e01f      	b.n	da1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bf6>
    d9de:	2001      	movs	r0, #1
    d9e0:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    d9e4:	e015      	b.n	da12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bea>
    d9e6:	2000      	movs	r0, #0
    d9e8:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    d9ec:	e011      	b.n	da12 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bea>
    d9ee:	2000      	movs	r0, #0
    d9f0:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    d9f4:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    d9f8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d9fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    da00:	f003 fc18 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    da04:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    da08:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    da0c:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    da10:	e00a      	b.n	da28 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c00>
    da12:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    da16:	07c0      	lsls	r0, r0, #31
    da18:	2800      	cmp	r0, #0
    da1a:	d112      	bne.n	da42 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c1a>
    da1c:	e055      	b.n	daca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ca2>
    da1e:	983b      	ldr	r0, [sp, #236]	; 0xec
    da20:	07c1      	lsls	r1, r0, #31
    da22:	2900      	cmp	r1, #0
    da24:	d1e3      	bne.n	d9ee <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bc6>
    da26:	e7de      	b.n	d9e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bbe>
    da28:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    da2c:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    da30:	f003 fb8b 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    da34:	903a      	str	r0, [sp, #232]	; 0xe8
    da36:	e7ff      	b.n	da38 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c10>
    da38:	983a      	ldr	r0, [sp, #232]	; 0xe8
    da3a:	07c1      	lsls	r1, r0, #31
    da3c:	2900      	cmp	r1, #0
    da3e:	d1ce      	bne.n	d9de <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bb6>
    da40:	e7d1      	b.n	d9e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2bbe>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    da42:	f24c 30bc 	movw	r0, #50108	; 0xc3bc
    da46:	f2c0 0001 	movt	r0, #1
    da4a:	6801      	ldr	r1, [r0, #0]
    da4c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da50:	f100 0212 	add.w	r2, r0, #18
    da54:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    da58:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    da5c:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    da60:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    da64:	f2c0 0301 	movt	r3, #1
    da68:	4610      	mov	r0, r2
    da6a:	9139      	str	r1, [sp, #228]	; 0xe4
    da6c:	4619      	mov	r1, r3
    da6e:	f7fc fd94 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    da72:	9038      	str	r0, [sp, #224]	; 0xe0
    da74:	9137      	str	r1, [sp, #220]	; 0xdc
    da76:	e7ff      	b.n	da78 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c50>
    da78:	9838      	ldr	r0, [sp, #224]	; 0xe0
    da7a:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    da7e:	9937      	ldr	r1, [sp, #220]	; 0xdc
    da80:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    da84:	f24c 1228 	movw	r2, #49448	; 0xc128
    da88:	f2c0 0201 	movt	r2, #1
    da8c:	6812      	ldr	r2, [r2, #0]
    da8e:	466b      	mov	r3, sp
    da90:	f04f 0c01 	mov.w	ip, #1
    da94:	f8c3 c008 	str.w	ip, [r3, #8]
    da98:	605a      	str	r2, [r3, #4]
    da9a:	f8c3 c000 	str.w	ip, [r3]
    da9e:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    daa2:	2202      	movs	r2, #2
    daa4:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    daa8:	9939      	ldr	r1, [sp, #228]	; 0xe4
    daaa:	f003 fb8a 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    daae:	e7ff      	b.n	dab0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2c88>
    dab0:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    dab4:	f24c 30dc 	movw	r0, #50140	; 0xc3dc
    dab8:	f2c0 0001 	movt	r0, #1
    dabc:	6802      	ldr	r2, [r0, #0]
    dabe:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    dac2:	f004 fb05 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dac6:	e7ff      	b.n	dac8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ca0>
    dac8:	e7ff      	b.n	daca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ca2>
                self.st = self.v[x];
    daca:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dace:	280f      	cmp	r0, #15
    dad0:	f200 8552 	bhi.w	e578 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3750>
    dad4:	e7ff      	b.n	dad6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2cae>
    dad6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dada:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dade:	1842      	adds	r2, r0, r1
    dae0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dae4:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    dae8:	f000 bc6b 	b.w	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    daec:	2005      	movs	r0, #5
    daee:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    daf2:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    daf6:	f2c0 0001 	movt	r0, #1
    dafa:	6801      	ldr	r1, [r0, #0]
    dafc:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    db00:	f003 fb23 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    db04:	9036      	str	r0, [sp, #216]	; 0xd8
    db06:	e01f      	b.n	db48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d20>
    db08:	2001      	movs	r0, #1
    db0a:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    db0e:	e015      	b.n	db3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d14>
    db10:	2000      	movs	r0, #0
    db12:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    db16:	e011      	b.n	db3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d14>
    db18:	2000      	movs	r0, #0
    db1a:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    db1e:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    db22:	f644 206c 	movw	r0, #19052	; 0x4a6c
    db26:	f2c2 0000 	movt	r0, #8192	; 0x2000
    db2a:	f003 fb83 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    db2e:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    db32:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    db36:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    db3a:	e00a      	b.n	db52 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d2a>
    db3c:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    db40:	07c0      	lsls	r0, r0, #31
    db42:	2800      	cmp	r0, #0
    db44:	d112      	bne.n	db6c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d44>
    db46:	e055      	b.n	dbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2dcc>
    db48:	9836      	ldr	r0, [sp, #216]	; 0xd8
    db4a:	07c1      	lsls	r1, r0, #31
    db4c:	2900      	cmp	r1, #0
    db4e:	d1e3      	bne.n	db18 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2cf0>
    db50:	e7de      	b.n	db10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ce8>
    db52:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    db56:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    db5a:	f003 faf6 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    db5e:	9035      	str	r0, [sp, #212]	; 0xd4
    db60:	e7ff      	b.n	db62 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d3a>
    db62:	9835      	ldr	r0, [sp, #212]	; 0xd4
    db64:	07c1      	lsls	r1, r0, #31
    db66:	2900      	cmp	r1, #0
    db68:	d1ce      	bne.n	db08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ce0>
    db6a:	e7d1      	b.n	db10 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ce8>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    db6c:	f24c 306c 	movw	r0, #50028	; 0xc36c
    db70:	f2c0 0001 	movt	r0, #1
    db74:	6801      	ldr	r1, [r0, #0]
    db76:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db7a:	f100 0212 	add.w	r2, r0, #18
    db7e:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    db82:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    db86:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    db8a:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    db8e:	f2c0 0301 	movt	r3, #1
    db92:	4610      	mov	r0, r2
    db94:	9134      	str	r1, [sp, #208]	; 0xd0
    db96:	4619      	mov	r1, r3
    db98:	f7fc fcff 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    db9c:	9033      	str	r0, [sp, #204]	; 0xcc
    db9e:	9132      	str	r1, [sp, #200]	; 0xc8
    dba0:	e7ff      	b.n	dba2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2d7a>
    dba2:	9833      	ldr	r0, [sp, #204]	; 0xcc
    dba4:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    dba8:	9932      	ldr	r1, [sp, #200]	; 0xc8
    dbaa:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    dbae:	f24c 1228 	movw	r2, #49448	; 0xc128
    dbb2:	f2c0 0201 	movt	r2, #1
    dbb6:	6812      	ldr	r2, [r2, #0]
    dbb8:	466b      	mov	r3, sp
    dbba:	f04f 0c01 	mov.w	ip, #1
    dbbe:	f8c3 c008 	str.w	ip, [r3, #8]
    dbc2:	605a      	str	r2, [r3, #4]
    dbc4:	f8c3 c000 	str.w	ip, [r3]
    dbc8:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    dbcc:	2202      	movs	r2, #2
    dbce:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    dbd2:	9934      	ldr	r1, [sp, #208]	; 0xd0
    dbd4:	f003 faf5 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    dbd8:	e7ff      	b.n	dbda <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2db2>
    dbda:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    dbde:	f24c 308c 	movw	r0, #50060	; 0xc38c
    dbe2:	f2c0 0001 	movt	r0, #1
    dbe6:	6802      	ldr	r2, [r0, #0]
    dbe8:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    dbec:	f004 fa70 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dbf0:	e7ff      	b.n	dbf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2dca>
    dbf2:	e7ff      	b.n	dbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2dcc>
                self.i = self.i.wrapping_add(self.v[x].into());
    dbf4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dbf8:	8a01      	ldrh	r1, [r0, #16]
    dbfa:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    dbfe:	2a0f      	cmp	r2, #15
    dc00:	9131      	str	r1, [sp, #196]	; 0xc4
    dc02:	f200 84af 	bhi.w	e564 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x373c>
    dc06:	e7ff      	b.n	dc08 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2de0>
    dc08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc0c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dc10:	1842      	adds	r2, r0, r1
    dc12:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    dc16:	f003 fb21 	bl	1125c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>
    dc1a:	9030      	str	r0, [sp, #192]	; 0xc0
    dc1c:	e7ff      	b.n	dc1e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2df6>
    dc1e:	9831      	ldr	r0, [sp, #196]	; 0xc4
    dc20:	9930      	ldr	r1, [sp, #192]	; 0xc0
    dc22:	f001 fa28 	bl	f076 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>
    dc26:	902f      	str	r0, [sp, #188]	; 0xbc
    dc28:	e7ff      	b.n	dc2a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e02>
    dc2a:	982f      	ldr	r0, [sp, #188]	; 0xbc
    dc2c:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    dc30:	8208      	strh	r0, [r1, #16]
        match (
    dc32:	e3c6      	b.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    dc34:	2005      	movs	r0, #5
    dc36:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
    dc3a:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    dc3e:	f2c0 0001 	movt	r0, #1
    dc42:	6801      	ldr	r1, [r0, #0]
    dc44:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    dc48:	f003 fa7f 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dc4c:	902e      	str	r0, [sp, #184]	; 0xb8
    dc4e:	e01f      	b.n	dc90 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e68>
    dc50:	2001      	movs	r0, #1
    dc52:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    dc56:	e015      	b.n	dc84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e5c>
    dc58:	2000      	movs	r0, #0
    dc5a:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    dc5e:	e011      	b.n	dc84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e5c>
    dc60:	2000      	movs	r0, #0
    dc62:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
    dc66:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
    dc6a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dc6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dc72:	f003 fadf 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    dc76:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
    dc7a:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
    dc7e:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
    dc82:	e00a      	b.n	dc9a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e72>
    dc84:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
    dc88:	07c0      	lsls	r0, r0, #31
    dc8a:	2800      	cmp	r0, #0
    dc8c:	d112      	bne.n	dcb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e8c>
    dc8e:	e055      	b.n	dd3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f14>
    dc90:	982e      	ldr	r0, [sp, #184]	; 0xb8
    dc92:	07c1      	lsls	r1, r0, #31
    dc94:	2900      	cmp	r1, #0
    dc96:	d1e3      	bne.n	dc60 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e38>
    dc98:	e7de      	b.n	dc58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e30>
    dc9a:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    dc9e:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
    dca2:	f003 fa52 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dca6:	902d      	str	r0, [sp, #180]	; 0xb4
    dca8:	e7ff      	b.n	dcaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e82>
    dcaa:	982d      	ldr	r0, [sp, #180]	; 0xb4
    dcac:	07c1      	lsls	r1, r0, #31
    dcae:	2900      	cmp	r1, #0
    dcb0:	d1ce      	bne.n	dc50 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e28>
    dcb2:	e7d1      	b.n	dc58 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2e30>
                trace!("[{:04x}] LD F, Vx", self.pc);
    dcb4:	f24c 20e8 	movw	r0, #49896	; 0xc2e8
    dcb8:	f2c0 0001 	movt	r0, #1
    dcbc:	6801      	ldr	r1, [r0, #0]
    dcbe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dcc2:	f100 0212 	add.w	r2, r0, #18
    dcc6:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
    dcca:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
    dcce:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
    dcd2:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    dcd6:	f2c0 0301 	movt	r3, #1
    dcda:	4610      	mov	r0, r2
    dcdc:	912c      	str	r1, [sp, #176]	; 0xb0
    dcde:	4619      	mov	r1, r3
    dce0:	f7fc fc5b 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dce4:	902b      	str	r0, [sp, #172]	; 0xac
    dce6:	912a      	str	r1, [sp, #168]	; 0xa8
    dce8:	e7ff      	b.n	dcea <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2ec2>
    dcea:	982b      	ldr	r0, [sp, #172]	; 0xac
    dcec:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
    dcf0:	992a      	ldr	r1, [sp, #168]	; 0xa8
    dcf2:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
    dcf6:	f24c 1228 	movw	r2, #49448	; 0xc128
    dcfa:	f2c0 0201 	movt	r2, #1
    dcfe:	6812      	ldr	r2, [r2, #0]
    dd00:	466b      	mov	r3, sp
    dd02:	f04f 0c01 	mov.w	ip, #1
    dd06:	f8c3 c008 	str.w	ip, [r3, #8]
    dd0a:	605a      	str	r2, [r3, #4]
    dd0c:	f8c3 c000 	str.w	ip, [r3]
    dd10:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    dd14:	2202      	movs	r2, #2
    dd16:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
    dd1a:	992c      	ldr	r1, [sp, #176]	; 0xb0
    dd1c:	f003 fa51 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    dd20:	e7ff      	b.n	dd22 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2efa>
    dd22:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
    dd26:	f24c 3008 	movw	r0, #49928	; 0xc308
    dd2a:	f2c0 0001 	movt	r0, #1
    dd2e:	6802      	ldr	r2, [r0, #0]
    dd30:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    dd34:	f004 f9cc 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dd38:	e7ff      	b.n	dd3a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f12>
    dd3a:	e7ff      	b.n	dd3c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f14>
                self.i = (self.v[x] * 5).into();
    dd3c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dd40:	280f      	cmp	r0, #15
    dd42:	f200 83f9 	bhi.w	e538 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3710>
    dd46:	e7ff      	b.n	dd48 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f20>
    dd48:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dd4c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dd50:	1842      	adds	r2, r0, r1
    dd52:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dd56:	2305      	movs	r3, #5
    dd58:	fba2 2303 	umull	r2, r3, r2, r3
    dd5c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    dd60:	f04f 0e00 	mov.w	lr, #0
    dd64:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    dd68:	bf18      	it	ne
    dd6a:	f04f 0c01 	movne.w	ip, #1
    dd6e:	2b00      	cmp	r3, #0
    dd70:	bf18      	it	ne
    dd72:	2301      	movne	r3, #1
    dd74:	ea43 030c 	orr.w	r3, r3, ip
    dd78:	2b00      	cmp	r3, #0
    dd7a:	9229      	str	r2, [sp, #164]	; 0xa4
    dd7c:	f040 83e6 	bne.w	e54c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3724>
    dd80:	e7ff      	b.n	dd82 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f5a>
    dd82:	9829      	ldr	r0, [sp, #164]	; 0xa4
    dd84:	f003 fa6a 	bl	1125c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>
    dd88:	9028      	str	r0, [sp, #160]	; 0xa0
    dd8a:	e7ff      	b.n	dd8c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f64>
    dd8c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    dd8e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    dd92:	8208      	strh	r0, [r1, #16]
        match (
    dd94:	e315      	b.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    dd96:	2005      	movs	r0, #5
    dd98:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
    dd9c:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    dda0:	f2c0 0001 	movt	r0, #1
    dda4:	6801      	ldr	r1, [r0, #0]
    dda6:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    ddaa:	f003 f9ce 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    ddae:	9027      	str	r0, [sp, #156]	; 0x9c
    ddb0:	e01f      	b.n	ddf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fca>
    ddb2:	2001      	movs	r0, #1
    ddb4:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    ddb8:	e015      	b.n	dde6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fbe>
    ddba:	2000      	movs	r0, #0
    ddbc:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    ddc0:	e011      	b.n	dde6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fbe>
    ddc2:	2000      	movs	r0, #0
    ddc4:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
    ddc8:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
    ddcc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ddd0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ddd4:	f003 fa2e 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    ddd8:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
    dddc:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
    dde0:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
    dde4:	e00a      	b.n	ddfc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fd4>
    dde6:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
    ddea:	07c0      	lsls	r0, r0, #31
    ddec:	2800      	cmp	r0, #0
    ddee:	d112      	bne.n	de16 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fee>
    ddf0:	e055      	b.n	de9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3076>
    ddf2:	9827      	ldr	r0, [sp, #156]	; 0x9c
    ddf4:	07c1      	lsls	r1, r0, #31
    ddf6:	2900      	cmp	r1, #0
    ddf8:	d1e3      	bne.n	ddc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f9a>
    ddfa:	e7de      	b.n	ddba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f92>
    ddfc:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    de00:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
    de04:	f003 f9a1 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    de08:	9026      	str	r0, [sp, #152]	; 0x98
    de0a:	e7ff      	b.n	de0c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2fe4>
    de0c:	9826      	ldr	r0, [sp, #152]	; 0x98
    de0e:	07c1      	lsls	r1, r0, #31
    de10:	2900      	cmp	r1, #0
    de12:	d1ce      	bne.n	ddb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f8a>
    de14:	e7d1      	b.n	ddba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x2f92>
                trace!("[{:04x}] LD B, Vx", self.pc);
    de16:	f24c 2048 	movw	r0, #49736	; 0xc248
    de1a:	f2c0 0001 	movt	r0, #1
    de1e:	6801      	ldr	r1, [r0, #0]
    de20:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de24:	f100 0212 	add.w	r2, r0, #18
    de28:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
    de2c:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
    de30:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
    de34:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    de38:	f2c0 0301 	movt	r3, #1
    de3c:	4610      	mov	r0, r2
    de3e:	9125      	str	r1, [sp, #148]	; 0x94
    de40:	4619      	mov	r1, r3
    de42:	f7fc fbaa 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    de46:	9024      	str	r0, [sp, #144]	; 0x90
    de48:	9123      	str	r1, [sp, #140]	; 0x8c
    de4a:	e7ff      	b.n	de4c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3024>
    de4c:	9824      	ldr	r0, [sp, #144]	; 0x90
    de4e:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
    de52:	9923      	ldr	r1, [sp, #140]	; 0x8c
    de54:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
    de58:	f24c 1228 	movw	r2, #49448	; 0xc128
    de5c:	f2c0 0201 	movt	r2, #1
    de60:	6812      	ldr	r2, [r2, #0]
    de62:	466b      	mov	r3, sp
    de64:	f04f 0c01 	mov.w	ip, #1
    de68:	f8c3 c008 	str.w	ip, [r3, #8]
    de6c:	605a      	str	r2, [r3, #4]
    de6e:	f8c3 c000 	str.w	ip, [r3]
    de72:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    de76:	2202      	movs	r2, #2
    de78:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
    de7c:	9925      	ldr	r1, [sp, #148]	; 0x94
    de7e:	f003 f9a0 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    de82:	e7ff      	b.n	de84 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x305c>
    de84:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
    de88:	f24c 2068 	movw	r0, #49768	; 0xc268
    de8c:	f2c0 0001 	movt	r0, #1
    de90:	6802      	ldr	r2, [r0, #0]
    de92:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    de96:	f004 f91b 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    de9a:	e7ff      	b.n	de9c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3074>
    de9c:	e7ff      	b.n	de9e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3076>
                let bcd = self.v[x];
    de9e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    dea2:	280f      	cmp	r0, #15
    dea4:	f200 8308 	bhi.w	e4b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3690>
    dea8:	e7ff      	b.n	deaa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3082>
    deaa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    deae:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    deb2:	1842      	adds	r2, r0, r1
    deb4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    deb8:	4613      	mov	r3, r2
    deba:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
    debe:	f248 5c1f 	movw	ip, #34079	; 0x851f
    dec2:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
    dec6:	fba2 2c0c 	umull	r2, ip, r2, ip
    deca:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    dece:	f8b0 e010 	ldrh.w	lr, [r0, #16]
    ded2:	4674      	mov	r4, lr
    ded4:	2500      	movs	r5, #0
    ded6:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
    deda:	9322      	str	r3, [sp, #136]	; 0x88
    dedc:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    dee0:	9420      	str	r4, [sp, #128]	; 0x80
    dee2:	f040 82f3 	bne.w	e4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36a4>
    dee6:	e7ff      	b.n	dee8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x30c0>
    dee8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    deec:	9920      	ldr	r1, [sp, #128]	; 0x80
    deee:	1842      	adds	r2, r0, r1
    def0:	9b21      	ldr	r3, [sp, #132]	; 0x84
    def2:	fa5f fc83 	uxtb.w	ip, r3
    def6:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    defa:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    defe:	fbac 450e 	umull	r4, r5, ip, lr
    df02:	08ed      	lsrs	r5, r5, #3
    df04:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    df08:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
    df0c:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    df10:	9a22      	ldr	r2, [sp, #136]	; 0x88
    df12:	fa5f fc82 	uxtb.w	ip, r2
    df16:	fbac ce0e 	umull	ip, lr, ip, lr
    df1a:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    df1e:	8a05      	ldrh	r5, [r0, #16]
    df20:	3501      	adds	r5, #1
    df22:	2600      	movs	r6, #0
    df24:	2e00      	cmp	r6, #0
    df26:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    df2a:	951e      	str	r5, [sp, #120]	; 0x78
    df2c:	f040 82d8 	bne.w	e4e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36b8>
    df30:	e7ff      	b.n	df32 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x310a>
    df32:	2000      	movs	r0, #0
    df34:	991e      	ldr	r1, [sp, #120]	; 0x78
    df36:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    df3a:	f040 82dd 	bne.w	e4f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36d0>
    df3e:	e7ff      	b.n	df40 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3118>
    df40:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df44:	991e      	ldr	r1, [sp, #120]	; 0x78
    df46:	1842      	adds	r2, r0, r1
    df48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    df4a:	fa5f fc83 	uxtb.w	ip, r3
    df4e:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    df52:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    df56:	fbac e40e 	umull	lr, r4, ip, lr
    df5a:	08e4      	lsrs	r4, r4, #3
    df5c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    df60:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    df64:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
    df68:	8a02      	ldrh	r2, [r0, #16]
    df6a:	3202      	adds	r2, #2
    df6c:	f04f 0c00 	mov.w	ip, #0
    df70:	f1bc 0f00 	cmp.w	ip, #0
    df74:	921d      	str	r2, [sp, #116]	; 0x74
    df76:	f040 82c9 	bne.w	e50c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36e4>
    df7a:	e7ff      	b.n	df7c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3154>
    df7c:	2000      	movs	r0, #0
    df7e:	991d      	ldr	r1, [sp, #116]	; 0x74
    df80:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    df84:	f040 82ce 	bne.w	e524 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x36fc>
    df88:	e7ff      	b.n	df8a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3162>
    df8a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df8e:	991d      	ldr	r1, [sp, #116]	; 0x74
    df90:	1842      	adds	r2, r0, r1
    df92:	9b22      	ldr	r3, [sp, #136]	; 0x88
    df94:	fa5f fc83 	uxtb.w	ip, r3
    df98:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    df9c:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    dfa0:	fbac e40e 	umull	lr, r4, ip, lr
    dfa4:	08e4      	lsrs	r4, r4, #3
    dfa6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    dfaa:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    dfae:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
    dfb2:	e206      	b.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
    dfb4:	2005      	movs	r0, #5
    dfb6:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
    dfba:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    dfbe:	f2c0 0001 	movt	r0, #1
    dfc2:	6801      	ldr	r1, [r0, #0]
    dfc4:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    dfc8:	f003 f8bf 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    dfcc:	901c      	str	r0, [sp, #112]	; 0x70
    dfce:	e01f      	b.n	e010 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31e8>
    dfd0:	2001      	movs	r0, #1
    dfd2:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    dfd6:	e015      	b.n	e004 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31dc>
    dfd8:	2000      	movs	r0, #0
    dfda:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    dfde:	e011      	b.n	e004 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31dc>
    dfe0:	2000      	movs	r0, #0
    dfe2:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
    dfe6:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
    dfea:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dfee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dff2:	f003 f91f 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    dff6:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
    dffa:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
    dffe:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
    e002:	e00a      	b.n	e01a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31f2>
    e004:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
    e008:	07c0      	lsls	r0, r0, #31
    e00a:	2800      	cmp	r0, #0
    e00c:	d112      	bne.n	e034 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x320c>
    e00e:	e055      	b.n	e0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3294>
    e010:	981c      	ldr	r0, [sp, #112]	; 0x70
    e012:	07c1      	lsls	r1, r0, #31
    e014:	2900      	cmp	r1, #0
    e016:	d1e3      	bne.n	dfe0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31b8>
    e018:	e7de      	b.n	dfd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31b0>
    e01a:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    e01e:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
    e022:	f003 f892 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e026:	901b      	str	r0, [sp, #108]	; 0x6c
    e028:	e7ff      	b.n	e02a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3202>
    e02a:	981b      	ldr	r0, [sp, #108]	; 0x6c
    e02c:	07c1      	lsls	r1, r0, #31
    e02e:	2900      	cmp	r1, #0
    e030:	d1ce      	bne.n	dfd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31a8>
    e032:	e7d1      	b.n	dfd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x31b0>
                trace!("[{:04x}] LD [I], Vx", self.pc);
    e034:	f24c 10c8 	movw	r0, #49608	; 0xc1c8
    e038:	f2c0 0001 	movt	r0, #1
    e03c:	6801      	ldr	r1, [r0, #0]
    e03e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e042:	f100 0212 	add.w	r2, r0, #18
    e046:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
    e04a:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
    e04e:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
    e052:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    e056:	f2c0 0301 	movt	r3, #1
    e05a:	4610      	mov	r0, r2
    e05c:	911a      	str	r1, [sp, #104]	; 0x68
    e05e:	4619      	mov	r1, r3
    e060:	f7fc fa9b 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e064:	9019      	str	r0, [sp, #100]	; 0x64
    e066:	9118      	str	r1, [sp, #96]	; 0x60
    e068:	e7ff      	b.n	e06a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3242>
    e06a:	9819      	ldr	r0, [sp, #100]	; 0x64
    e06c:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
    e070:	9918      	ldr	r1, [sp, #96]	; 0x60
    e072:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
    e076:	f24c 1228 	movw	r2, #49448	; 0xc128
    e07a:	f2c0 0201 	movt	r2, #1
    e07e:	6812      	ldr	r2, [r2, #0]
    e080:	466b      	mov	r3, sp
    e082:	f04f 0c01 	mov.w	ip, #1
    e086:	f8c3 c008 	str.w	ip, [r3, #8]
    e08a:	605a      	str	r2, [r3, #4]
    e08c:	f8c3 c000 	str.w	ip, [r3]
    e090:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    e094:	2202      	movs	r2, #2
    e096:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
    e09a:	991a      	ldr	r1, [sp, #104]	; 0x68
    e09c:	f003 f891 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e0a0:	e7ff      	b.n	e0a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x327a>
    e0a2:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
    e0a6:	f24c 10e8 	movw	r0, #49640	; 0xc1e8
    e0aa:	f2c0 0001 	movt	r0, #1
    e0ae:	6802      	ldr	r2, [r0, #0]
    e0b0:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    e0b4:	f004 f80c 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e0b8:	e7ff      	b.n	e0ba <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3292>
    e0ba:	e7ff      	b.n	e0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3294>
                let x = x as usize;
    e0bc:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e0c0:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
    e0c4:	1c41      	adds	r1, r0, #1
    e0c6:	460a      	mov	r2, r1
    e0c8:	4281      	cmp	r1, r0
    e0ca:	9217      	str	r2, [sp, #92]	; 0x5c
    e0cc:	f0c0 81c9 	bcc.w	e462 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x363a>
    e0d0:	e7ff      	b.n	e0d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32aa>
    e0d2:	2000      	movs	r0, #0
    e0d4:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
    e0d8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    e0da:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
    e0de:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
    e0e2:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
    e0e6:	f003 fd7f 	bl	11be8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    e0ea:	9016      	str	r0, [sp, #88]	; 0x58
    e0ec:	9115      	str	r1, [sp, #84]	; 0x54
    e0ee:	e7ff      	b.n	e0f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32c8>
    e0f0:	9816      	ldr	r0, [sp, #88]	; 0x58
    e0f2:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
    e0f6:	9915      	ldr	r1, [sp, #84]	; 0x54
    e0f8:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
    e0fc:	e7ff      	b.n	e0fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32d6>
    e0fe:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
    e102:	f003 fce6 	bl	11ad2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    e106:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
    e10a:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
    e10e:	e7ff      	b.n	e110 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32e8>
    e110:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
    e114:	2800      	cmp	r0, #0
    e116:	d001      	beq.n	e11c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32f4>
    e118:	e7ff      	b.n	e11a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32f2>
    e11a:	e001      	b.n	e120 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32f8>
        match (
    e11c:	e151      	b.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for i in 0..(x + 1) {
    e11e:	defe      	udf	#254	; 0xfe
    e120:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
    e124:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
    e128:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
    e12c:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
    e130:	280f      	cmp	r0, #15
    e132:	9014      	str	r0, [sp, #80]	; 0x50
    e134:	f200 81a1 	bhi.w	e47a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3652>
    e138:	e7ff      	b.n	e13a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3312>
    e13a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e13e:	9914      	ldr	r1, [sp, #80]	; 0x50
    e140:	1842      	adds	r2, r0, r1
    e142:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e146:	8a03      	ldrh	r3, [r0, #16]
    e148:	eb03 0c01 	add.w	ip, r3, r1
    e14c:	46e6      	mov	lr, ip
    e14e:	459c      	cmp	ip, r3
    e150:	9213      	str	r2, [sp, #76]	; 0x4c
    e152:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    e156:	f0c0 8199 	bcc.w	e48c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3664>
    e15a:	e7ff      	b.n	e15c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3334>
    e15c:	2000      	movs	r0, #0
    e15e:	9912      	ldr	r1, [sp, #72]	; 0x48
    e160:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    e164:	f040 819e 	bne.w	e4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x367c>
    e168:	e7ff      	b.n	e16a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3342>
    e16a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e16e:	9912      	ldr	r1, [sp, #72]	; 0x48
    e170:	1842      	adds	r2, r0, r1
    e172:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e174:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
    e178:	e7c1      	b.n	e0fe <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x32d6>
    e17a:	2005      	movs	r0, #5
    e17c:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
    e180:	f24c 00e0 	movw	r0, #49376	; 0xc0e0
    e184:	f2c0 0001 	movt	r0, #1
    e188:	6801      	ldr	r1, [r0, #0]
    e18a:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    e18e:	f002 ffdc 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e192:	9011      	str	r0, [sp, #68]	; 0x44
    e194:	e01f      	b.n	e1d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33ae>
    e196:	2001      	movs	r0, #1
    e198:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    e19c:	e015      	b.n	e1ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33a2>
    e19e:	2000      	movs	r0, #0
    e1a0:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    e1a4:	e011      	b.n	e1ca <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33a2>
    e1a6:	2000      	movs	r0, #0
    e1a8:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
    e1ac:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
    e1b0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e1b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e1b8:	f003 f83c 	bl	11234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>
    e1bc:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
    e1c0:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
    e1c4:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
    e1c8:	e00a      	b.n	e1e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33b8>
    e1ca:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
    e1ce:	07c0      	lsls	r0, r0, #31
    e1d0:	2800      	cmp	r0, #0
    e1d2:	d112      	bne.n	e1fa <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33d2>
    e1d4:	e055      	b.n	e282 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x345a>
    e1d6:	9811      	ldr	r0, [sp, #68]	; 0x44
    e1d8:	07c1      	lsls	r1, r0, #31
    e1da:	2900      	cmp	r1, #0
    e1dc:	d1e3      	bne.n	e1a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x337e>
    e1de:	e7de      	b.n	e19e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3376>
    e1e0:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    e1e4:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
    e1e8:	f002 ffaf 	bl	1114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>
    e1ec:	9010      	str	r0, [sp, #64]	; 0x40
    e1ee:	e7ff      	b.n	e1f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x33c8>
    e1f0:	9810      	ldr	r0, [sp, #64]	; 0x40
    e1f2:	07c1      	lsls	r1, r0, #31
    e1f4:	2900      	cmp	r1, #0
    e1f6:	d1ce      	bne.n	e196 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x336e>
    e1f8:	e7d1      	b.n	e19e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3376>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
    e1fa:	f24c 1004 	movw	r0, #49412	; 0xc104
    e1fe:	f2c0 0001 	movt	r0, #1
    e202:	6801      	ldr	r1, [r0, #0]
    e204:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e208:	f100 0212 	add.w	r2, r0, #18
    e20c:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
    e210:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
    e214:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
    e218:	f646 43f3 	movw	r3, #27891	; 0x6cf3
    e21c:	f2c0 0301 	movt	r3, #1
    e220:	4610      	mov	r0, r2
    e222:	910f      	str	r1, [sp, #60]	; 0x3c
    e224:	4619      	mov	r1, r3
    e226:	f7fc f9b8 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e22a:	900e      	str	r0, [sp, #56]	; 0x38
    e22c:	910d      	str	r1, [sp, #52]	; 0x34
    e22e:	e7ff      	b.n	e230 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3408>
    e230:	980e      	ldr	r0, [sp, #56]	; 0x38
    e232:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
    e236:	990d      	ldr	r1, [sp, #52]	; 0x34
    e238:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
    e23c:	f24c 1228 	movw	r2, #49448	; 0xc128
    e240:	f2c0 0201 	movt	r2, #1
    e244:	6812      	ldr	r2, [r2, #0]
    e246:	466b      	mov	r3, sp
    e248:	f04f 0c01 	mov.w	ip, #1
    e24c:	f8c3 c008 	str.w	ip, [r3, #8]
    e250:	605a      	str	r2, [r3, #4]
    e252:	f8c3 c000 	str.w	ip, [r3]
    e256:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    e25a:	2202      	movs	r2, #2
    e25c:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
    e260:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e262:	f002 ffae 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e266:	e7ff      	b.n	e268 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3440>
    e268:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
    e26c:	f24c 1068 	movw	r0, #49512	; 0xc168
    e270:	f2c0 0001 	movt	r0, #1
    e274:	6802      	ldr	r2, [r0, #0]
    e276:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    e27a:	f003 ff29 	bl	120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e27e:	e7ff      	b.n	e280 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3458>
    e280:	e7ff      	b.n	e282 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x345a>
                let x = x as usize;
    e282:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e286:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
    e28a:	1c41      	adds	r1, r0, #1
    e28c:	460a      	mov	r2, r1
    e28e:	4281      	cmp	r1, r0
    e290:	920c      	str	r2, [sp, #48]	; 0x30
    e292:	f0c0 80bb 	bcc.w	e40c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35e4>
    e296:	e7ff      	b.n	e298 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3470>
    e298:	2000      	movs	r0, #0
    e29a:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
    e29e:	980c      	ldr	r0, [sp, #48]	; 0x30
    e2a0:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
    e2a4:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
    e2a8:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
    e2ac:	f003 fc9c 	bl	11be8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    e2b0:	900b      	str	r0, [sp, #44]	; 0x2c
    e2b2:	910a      	str	r1, [sp, #40]	; 0x28
    e2b4:	e7ff      	b.n	e2b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x348e>
    e2b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e2b8:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
    e2bc:	990a      	ldr	r1, [sp, #40]	; 0x28
    e2be:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
    e2c2:	e7ff      	b.n	e2c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x349c>
    e2c4:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
    e2c8:	f003 fc03 	bl	11ad2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    e2cc:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
    e2d0:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
    e2d4:	e7ff      	b.n	e2d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34ae>
    e2d6:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
    e2da:	2800      	cmp	r0, #0
    e2dc:	d001      	beq.n	e2e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34ba>
    e2de:	e7ff      	b.n	e2e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34b8>
    e2e0:	e001      	b.n	e2e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34be>
        match (
    e2e2:	e06e      	b.n	e3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x359a>
                for i in 0..(x + 1) {
    e2e4:	defe      	udf	#254	; 0xfe
    e2e6:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
    e2ea:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
    e2ee:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
    e2f2:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
    e2f6:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    e2fa:	8a0a      	ldrh	r2, [r1, #16]
    e2fc:	1813      	adds	r3, r2, r0
    e2fe:	469c      	mov	ip, r3
    e300:	4293      	cmp	r3, r2
    e302:	9009      	str	r0, [sp, #36]	; 0x24
    e304:	f8cd c020 	str.w	ip, [sp, #32]
    e308:	f0c0 808c 	bcc.w	e424 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x35fc>
    e30c:	e7ff      	b.n	e30e <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34e6>
    e30e:	2000      	movs	r0, #0
    e310:	9908      	ldr	r1, [sp, #32]
    e312:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    e316:	f040 8091 	bne.w	e43c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3614>
    e31a:	e7ff      	b.n	e31c <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x34f4>
    e31c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e320:	9908      	ldr	r1, [sp, #32]
    e322:	1842      	adds	r2, r0, r1
    e324:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    e328:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e32a:	2b0f      	cmp	r3, #15
    e32c:	9207      	str	r2, [sp, #28]
    e32e:	f200 808f 	bhi.w	e450 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3628>
    e332:	e7ff      	b.n	e334 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x350c>
    e334:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e338:	9909      	ldr	r1, [sp, #36]	; 0x24
    e33a:	1842      	adds	r2, r0, r1
    e33c:	9b07      	ldr	r3, [sp, #28]
    e33e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
    e342:	e7bf      	b.n	e2c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x349c>
    e344:	f646 41f3 	movw	r1, #27891	; 0x6cf3
    e348:	f2c0 0101 	movt	r1, #1
    e34c:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
    e350:	f7fc f923 	bl	a59a <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e354:	9006      	str	r0, [sp, #24]
    e356:	9105      	str	r1, [sp, #20]
    e358:	e7ff      	b.n	e35a <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x3532>
    e35a:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
    e35e:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
    e362:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
    e366:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
    e36a:	9a06      	ldr	r2, [sp, #24]
    e36c:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
    e370:	9b05      	ldr	r3, [sp, #20]
    e372:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
    e376:	f64c 4ccc 	movw	ip, #52428	; 0xcccc
    e37a:	f2c0 0c01 	movt	ip, #1
    e37e:	f8dc c000 	ldr.w	ip, [ip]
    e382:	46ee      	mov	lr, sp
    e384:	2402      	movs	r4, #2
    e386:	f8ce 4008 	str.w	r4, [lr, #8]
    e38a:	f8ce c004 	str.w	ip, [lr, #4]
    e38e:	f8ce 4000 	str.w	r4, [lr]
    e392:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    e396:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
    e39a:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
    e39e:	4622      	mov	r2, r4
    e3a0:	f002 ff0f 	bl	111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>
    e3a4:	e7ff      	b.n	e3a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x357e>
    e3a6:	f64c 40f0 	movw	r0, #52464	; 0xccf0
    e3aa:	f2c0 0001 	movt	r0, #1
    e3ae:	f007 f88c 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    e3b2:	9004      	str	r0, [sp, #16]
    e3b4:	e7ff      	b.n	e3b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17h0ab3848261ad699dE+0x358e>
    e3b6:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    e3ba:	9904      	ldr	r1, [sp, #16]
    e3bc:	f007 f8c2 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    e3c0:	defe      	udf	#254	; 0xfe
        }
    }
    e3c2:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
    e3c6:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
    e3c8:	f24c 0088 	movw	r0, #49288	; 0xc088
    e3cc:	f2c0 0001 	movt	r0, #1
    e3d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e3d4:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    e3d8:	f007 f894 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e3dc:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
    e3de:	f24c 00b0 	movw	r0, #49328	; 0xc0b0
    e3e2:	f2c0 0001 	movt	r0, #1
    e3e6:	f24c 0298 	movw	r2, #49304	; 0xc098
    e3ea:	f2c0 0201 	movt	r2, #1
    e3ee:	211c      	movs	r1, #28
    e3f0:	f007 f872 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e3f4:	defe      	udf	#254	; 0xfe
    e3f6:	f24c 00cc 	movw	r0, #49356	; 0xc0cc
    e3fa:	f2c0 0001 	movt	r0, #1
    e3fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e402:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    e406:	f007 f87d 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e40a:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    e40c:	f24c 00b0 	movw	r0, #49328	; 0xc0b0
    e410:	f2c0 0001 	movt	r0, #1
    e414:	f24c 126c 	movw	r2, #49516	; 0xc16c
    e418:	f2c0 0201 	movt	r2, #1
    e41c:	211c      	movs	r1, #28
    e41e:	f007 f85b 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e422:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
    e424:	f24c 00b0 	movw	r0, #49328	; 0xc0b0
    e428:	f2c0 0001 	movt	r0, #1
    e42c:	f24c 127c 	movw	r2, #49532	; 0xc17c
    e430:	f2c0 0201 	movt	r2, #1
    e434:	211c      	movs	r1, #28
    e436:	f007 f84f 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e43a:	defe      	udf	#254	; 0xfe
    e43c:	f24c 108c 	movw	r0, #49548	; 0xc18c
    e440:	f2c0 0001 	movt	r0, #1
    e444:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e448:	9908      	ldr	r1, [sp, #32]
    e44a:	f007 f85b 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e44e:	defe      	udf	#254	; 0xfe
    e450:	f24c 109c 	movw	r0, #49564	; 0xc19c
    e454:	f2c0 0001 	movt	r0, #1
    e458:	2210      	movs	r2, #16
    e45a:	9909      	ldr	r1, [sp, #36]	; 0x24
    e45c:	f007 f852 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e460:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    e462:	f24c 00b0 	movw	r0, #49328	; 0xc0b0
    e466:	f2c0 0001 	movt	r0, #1
    e46a:	f24c 12ec 	movw	r2, #49644	; 0xc1ec
    e46e:	f2c0 0201 	movt	r2, #1
    e472:	211c      	movs	r1, #28
    e474:	f007 f830 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e478:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
    e47a:	f24c 10fc 	movw	r0, #49660	; 0xc1fc
    e47e:	f2c0 0001 	movt	r0, #1
    e482:	2210      	movs	r2, #16
    e484:	9914      	ldr	r1, [sp, #80]	; 0x50
    e486:	f007 f83d 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e48a:	defe      	udf	#254	; 0xfe
    e48c:	f24c 00b0 	movw	r0, #49328	; 0xc0b0
    e490:	f2c0 0001 	movt	r0, #1
    e494:	f24c 220c 	movw	r2, #49676	; 0xc20c
    e498:	f2c0 0201 	movt	r2, #1
    e49c:	211c      	movs	r1, #28
    e49e:	f007 f81b 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e4a2:	defe      	udf	#254	; 0xfe
    e4a4:	f24c 201c 	movw	r0, #49692	; 0xc21c
    e4a8:	f2c0 0001 	movt	r0, #1
    e4ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e4b0:	9912      	ldr	r1, [sp, #72]	; 0x48
    e4b2:	f007 f827 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e4b6:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
    e4b8:	f24c 206c 	movw	r0, #49772	; 0xc26c
    e4bc:	f2c0 0001 	movt	r0, #1
    e4c0:	2210      	movs	r2, #16
    e4c2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e4c6:	f007 f81d 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e4ca:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
    e4cc:	f24c 207c 	movw	r0, #49788	; 0xc27c
    e4d0:	f2c0 0001 	movt	r0, #1
    e4d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e4d8:	9920      	ldr	r1, [sp, #128]	; 0x80
    e4da:	f007 f813 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e4de:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    e4e0:	f24c 00b0 	movw	r0, #49328	; 0xc0b0
    e4e4:	f2c0 0001 	movt	r0, #1
    e4e8:	f24c 228c 	movw	r2, #49804	; 0xc28c
    e4ec:	f2c0 0201 	movt	r2, #1
    e4f0:	211c      	movs	r1, #28
    e4f2:	f006 fff1 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e4f6:	defe      	udf	#254	; 0xfe
    e4f8:	f24c 209c 	movw	r0, #49820	; 0xc29c
    e4fc:	f2c0 0001 	movt	r0, #1
    e500:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e504:	991e      	ldr	r1, [sp, #120]	; 0x78
    e506:	f006 fffd 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e50a:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
    e50c:	f24c 00b0 	movw	r0, #49328	; 0xc0b0
    e510:	f2c0 0001 	movt	r0, #1
    e514:	f24c 22ac 	movw	r2, #49836	; 0xc2ac
    e518:	f2c0 0201 	movt	r2, #1
    e51c:	211c      	movs	r1, #28
    e51e:	f006 ffdb 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e522:	defe      	udf	#254	; 0xfe
    e524:	f24c 20bc 	movw	r0, #49852	; 0xc2bc
    e528:	f2c0 0001 	movt	r0, #1
    e52c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e530:	991d      	ldr	r1, [sp, #116]	; 0x74
    e532:	f006 ffe7 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e536:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
    e538:	f24c 300c 	movw	r0, #49932	; 0xc30c
    e53c:	f2c0 0001 	movt	r0, #1
    e540:	2210      	movs	r2, #16
    e542:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e546:	f006 ffdd 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e54a:	defe      	udf	#254	; 0xfe
    e54c:	f24c 3030 	movw	r0, #49968	; 0xc330
    e550:	f2c0 0001 	movt	r0, #1
    e554:	f24c 321c 	movw	r2, #49948	; 0xc31c
    e558:	f2c0 0201 	movt	r2, #1
    e55c:	2121      	movs	r1, #33	; 0x21
    e55e:	f006 ffbb 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e562:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
    e564:	f24c 3090 	movw	r0, #50064	; 0xc390
    e568:	f2c0 0001 	movt	r0, #1
    e56c:	2210      	movs	r2, #16
    e56e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e572:	f006 ffc7 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e576:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
    e578:	f24c 30e0 	movw	r0, #50144	; 0xc3e0
    e57c:	f2c0 0001 	movt	r0, #1
    e580:	2210      	movs	r2, #16
    e582:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e586:	f006 ffbd 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e58a:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
    e58c:	f24c 4030 	movw	r0, #50224	; 0xc430
    e590:	f2c0 0001 	movt	r0, #1
    e594:	2210      	movs	r2, #16
    e596:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e59a:	f006 ffb3 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e59e:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
    e5a0:	f24c 4080 	movw	r0, #50304	; 0xc480
    e5a4:	f2c0 0001 	movt	r0, #1
    e5a8:	2210      	movs	r2, #16
    e5aa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5ae:	f006 ffa9 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e5b2:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
    e5b4:	f24c 40d0 	movw	r0, #50384	; 0xc4d0
    e5b8:	f2c0 0001 	movt	r0, #1
    e5bc:	2210      	movs	r2, #16
    e5be:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5c2:	f006 ff9f 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e5c6:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
    e5c8:	f24c 5020 	movw	r0, #50464	; 0xc520
    e5cc:	f2c0 0001 	movt	r0, #1
    e5d0:	2210      	movs	r2, #16
    e5d2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5d6:	f006 ff95 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e5da:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
    e5dc:	f24c 5064 	movw	r0, #50532	; 0xc564
    e5e0:	f2c0 0001 	movt	r0, #1
    e5e4:	2210      	movs	r2, #16
    e5e6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5ea:	f006 ff8b 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e5ee:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
    e5f0:	f24c 50b8 	movw	r0, #50616	; 0xc5b8
    e5f4:	f2c0 0001 	movt	r0, #1
    e5f8:	2210      	movs	r2, #16
    e5fa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e5fe:	f006 ff81 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e602:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
    e604:	f24c 50c8 	movw	r0, #50632	; 0xc5c8
    e608:	f2c0 0001 	movt	r0, #1
    e60c:	2210      	movs	r2, #16
    e60e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e612:	f006 ff77 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e616:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
    e618:	f24c 00b0 	movw	r0, #49328	; 0xc0b0
    e61c:	f2c0 0001 	movt	r0, #1
    e620:	f24c 52d8 	movw	r2, #50648	; 0xc5d8
    e624:	f2c0 0201 	movt	r2, #1
    e628:	211c      	movs	r1, #28
    e62a:	f006 ff55 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e62e:	defe      	udf	#254	; 0xfe
    e630:	f24c 50e8 	movw	r0, #50664	; 0xc5e8
    e634:	f2c0 0001 	movt	r0, #1
    e638:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    e63c:	9967      	ldr	r1, [sp, #412]	; 0x19c
    e63e:	f006 ff61 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e642:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
    e644:	f24c 00b0 	movw	r0, #49328	; 0xc0b0
    e648:	f2c0 0001 	movt	r0, #1
    e64c:	f24c 52f8 	movw	r2, #50680	; 0xc5f8
    e650:	f2c0 0201 	movt	r2, #1
    e654:	211c      	movs	r1, #28
    e656:	f006 ff3f 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e65a:	defe      	udf	#254	; 0xfe
    e65c:	f24c 6010 	movw	r0, #50704	; 0xc610
    e660:	f2c0 0001 	movt	r0, #1
    e664:	f24c 52f8 	movw	r2, #50680	; 0xc5f8
    e668:	f2c0 0201 	movt	r2, #1
    e66c:	2139      	movs	r1, #57	; 0x39
    e66e:	f006 ff33 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e672:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
    e674:	f24c 00b0 	movw	r0, #49328	; 0xc0b0
    e678:	f2c0 0001 	movt	r0, #1
    e67c:	f24c 624c 	movw	r2, #50764	; 0xc64c
    e680:	f2c0 0201 	movt	r2, #1
    e684:	211c      	movs	r1, #28
    e686:	f006 ff27 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e68a:	defe      	udf	#254	; 0xfe
    e68c:	f24c 6010 	movw	r0, #50704	; 0xc610
    e690:	f2c0 0001 	movt	r0, #1
    e694:	f24c 624c 	movw	r2, #50764	; 0xc64c
    e698:	f2c0 0201 	movt	r2, #1
    e69c:	2139      	movs	r1, #57	; 0x39
    e69e:	f006 ff1b 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e6a2:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
    e6a4:	f24c 6070 	movw	r0, #50800	; 0xc670
    e6a8:	f2c0 0001 	movt	r0, #1
    e6ac:	f24c 625c 	movw	r2, #50780	; 0xc65c
    e6b0:	f2c0 0201 	movt	r2, #1
    e6b4:	2121      	movs	r1, #33	; 0x21
    e6b6:	f006 ff0f 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e6ba:	defe      	udf	#254	; 0xfe
    e6bc:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    e6c0:	f2c0 0001 	movt	r0, #1
    e6c4:	f24c 6294 	movw	r2, #50836	; 0xc694
    e6c8:	f2c0 0201 	movt	r2, #1
    e6cc:	2123      	movs	r1, #35	; 0x23
    e6ce:	f006 ff03 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e6d2:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
    e6d4:	f24c 7014 	movw	r0, #50964	; 0xc714
    e6d8:	f2c0 0001 	movt	r0, #1
    e6dc:	2210      	movs	r2, #16
    e6de:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e6e2:	f006 ff0f 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e6e6:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
    e6e8:	f24c 70e4 	movw	r0, #51172	; 0xc7e4
    e6ec:	f2c0 0001 	movt	r0, #1
    e6f0:	2210      	movs	r2, #16
    e6f2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e6f6:	f006 ff05 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e6fa:	defe      	udf	#254	; 0xfe
    e6fc:	f24c 70f4 	movw	r0, #51188	; 0xc7f4
    e700:	f2c0 0001 	movt	r0, #1
    e704:	2210      	movs	r2, #16
    e706:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e70a:	f006 fefb 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e70e:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    e710:	f64c 0044 	movw	r0, #51268	; 0xc844
    e714:	f2c0 0001 	movt	r0, #1
    e718:	2210      	movs	r2, #16
    e71a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e71e:	f006 fef1 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e722:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
    e724:	f64c 0054 	movw	r0, #51284	; 0xc854
    e728:	f2c0 0001 	movt	r0, #1
    e72c:	2210      	movs	r2, #16
    e72e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e732:	f006 fee7 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e736:	defe      	udf	#254	; 0xfe
    e738:	f64c 0064 	movw	r0, #51300	; 0xc864
    e73c:	f2c0 0001 	movt	r0, #1
    e740:	2210      	movs	r2, #16
    e742:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e746:	f006 fedd 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e74a:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    e74c:	f64c 00b8 	movw	r0, #51384	; 0xc8b8
    e750:	f2c0 0001 	movt	r0, #1
    e754:	2210      	movs	r2, #16
    e756:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e75a:	f006 fed3 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e75e:	defe      	udf	#254	; 0xfe
    e760:	f64c 00c8 	movw	r0, #51400	; 0xc8c8
    e764:	f2c0 0001 	movt	r0, #1
    e768:	2210      	movs	r2, #16
    e76a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e76e:	f006 fec9 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e772:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    e774:	f64c 00d8 	movw	r0, #51416	; 0xc8d8
    e778:	f2c0 0001 	movt	r0, #1
    e77c:	2210      	movs	r2, #16
    e77e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e782:	f006 febf 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e786:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
    e788:	f64c 1028 	movw	r0, #51496	; 0xc928
    e78c:	f2c0 0001 	movt	r0, #1
    e790:	2210      	movs	r2, #16
    e792:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e796:	f006 feb5 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e79a:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
    e79c:	f64c 1038 	movw	r0, #51512	; 0xc938
    e7a0:	f2c0 0001 	movt	r0, #1
    e7a4:	2210      	movs	r2, #16
    e7a6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7aa:	f006 feab 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7ae:	defe      	udf	#254	; 0xfe
    e7b0:	f64c 1048 	movw	r0, #51528	; 0xc948
    e7b4:	f2c0 0001 	movt	r0, #1
    e7b8:	2210      	movs	r2, #16
    e7ba:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7be:	f006 fea1 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7c2:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    e7c4:	f64c 1098 	movw	r0, #51608	; 0xc998
    e7c8:	f2c0 0001 	movt	r0, #1
    e7cc:	2210      	movs	r2, #16
    e7ce:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7d2:	f006 fe97 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7d6:	defe      	udf	#254	; 0xfe
    e7d8:	f64c 10a8 	movw	r0, #51624	; 0xc9a8
    e7dc:	f2c0 0001 	movt	r0, #1
    e7e0:	2210      	movs	r2, #16
    e7e2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e7e6:	f006 fe8d 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7ea:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    e7ec:	f64c 10b8 	movw	r0, #51640	; 0xc9b8
    e7f0:	f2c0 0001 	movt	r0, #1
    e7f4:	2210      	movs	r2, #16
    e7f6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7fa:	f006 fe83 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e7fe:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    e800:	f64c 2008 	movw	r0, #51720	; 0xca08
    e804:	f2c0 0001 	movt	r0, #1
    e808:	2210      	movs	r2, #16
    e80a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e80e:	f006 fe79 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e812:	defe      	udf	#254	; 0xfe
    e814:	f64c 2018 	movw	r0, #51736	; 0xca18
    e818:	f2c0 0001 	movt	r0, #1
    e81c:	2210      	movs	r2, #16
    e81e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e822:	f006 fe6f 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e826:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    e828:	f64c 2028 	movw	r0, #51752	; 0xca28
    e82c:	f2c0 0001 	movt	r0, #1
    e830:	2210      	movs	r2, #16
    e832:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e836:	f006 fe65 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e83a:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
    e83c:	f64c 2078 	movw	r0, #51832	; 0xca78
    e840:	f2c0 0001 	movt	r0, #1
    e844:	2210      	movs	r2, #16
    e846:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e84a:	f006 fe5b 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e84e:	defe      	udf	#254	; 0xfe
    e850:	f64c 2088 	movw	r0, #51848	; 0xca88
    e854:	f2c0 0001 	movt	r0, #1
    e858:	2210      	movs	r2, #16
    e85a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e85e:	f006 fe51 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e862:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
    e864:	f64c 20d8 	movw	r0, #51928	; 0xcad8
    e868:	f2c0 0001 	movt	r0, #1
    e86c:	2210      	movs	r2, #16
    e86e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e872:	f006 fe47 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e876:	defe      	udf	#254	; 0xfe
    e878:	f64c 20e8 	movw	r0, #51944	; 0xcae8
    e87c:	f2c0 0001 	movt	r0, #1
    e880:	2210      	movs	r2, #16
    e882:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e886:	f006 fe3d 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e88a:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
    e88c:	f64c 3038 	movw	r0, #52024	; 0xcb38
    e890:	f2c0 0001 	movt	r0, #1
    e894:	2210      	movs	r2, #16
    e896:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e89a:	f006 fe33 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e89e:	defe      	udf	#254	; 0xfe
    e8a0:	f64c 3048 	movw	r0, #52040	; 0xcb48
    e8a4:	f2c0 0001 	movt	r0, #1
    e8a8:	2210      	movs	r2, #16
    e8aa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8ae:	f006 fe29 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8b2:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
    e8b4:	f64c 3098 	movw	r0, #52120	; 0xcb98
    e8b8:	f2c0 0001 	movt	r0, #1
    e8bc:	2210      	movs	r2, #16
    e8be:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e8c2:	f006 fe1f 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8c6:	defe      	udf	#254	; 0xfe
    e8c8:	f64c 30a8 	movw	r0, #52136	; 0xcba8
    e8cc:	f2c0 0001 	movt	r0, #1
    e8d0:	2210      	movs	r2, #16
    e8d2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8d6:	f006 fe15 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8da:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
    e8dc:	f64c 30f8 	movw	r0, #52216	; 0xcbf8
    e8e0:	f2c0 0001 	movt	r0, #1
    e8e4:	2210      	movs	r2, #16
    e8e6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8ea:	f006 fe0b 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e8ee:	defe      	udf	#254	; 0xfe
    e8f0:	f64c 4008 	movw	r0, #52232	; 0xcc08
    e8f4:	f2c0 0001 	movt	r0, #1
    e8f8:	2210      	movs	r2, #16
    e8fa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e8fe:	f006 fe01 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e902:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
    e904:	f64c 4058 	movw	r0, #52312	; 0xcc58
    e908:	f2c0 0001 	movt	r0, #1
    e90c:	2210      	movs	r2, #16
    e90e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e912:	f006 fdf7 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e916:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
    e918:	f64c 5040 	movw	r0, #52544	; 0xcd40
    e91c:	f2c0 0001 	movt	r0, #1
    e920:	2210      	movs	r2, #16
    e922:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e926:	f006 fded 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e92a:	defe      	udf	#254	; 0xfe
    e92c:	f64c 5050 	movw	r0, #52560	; 0xcd50
    e930:	f2c0 0001 	movt	r0, #1
    e934:	2210      	movs	r2, #16
    e936:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e93a:	f006 fde3 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e93e:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
    e940:	f64c 50a0 	movw	r0, #52640	; 0xcda0
    e944:	f2c0 0001 	movt	r0, #1
    e948:	2210      	movs	r2, #16
    e94a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e94e:	f006 fdd9 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e952:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
    e954:	f64c 50f0 	movw	r0, #52720	; 0xcdf0
    e958:	f2c0 0001 	movt	r0, #1
    e95c:	2210      	movs	r2, #16
    e95e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e962:	f006 fdcf 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    e966:	defe      	udf	#254	; 0xfe

0000e968 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    e968:	b580      	push	{r7, lr}
    e96a:	b086      	sub	sp, #24
    e96c:	9104      	str	r1, [sp, #16]
    e96e:	9205      	str	r2, [sp, #20]
    e970:	6809      	ldr	r1, [r1, #0]
    e972:	6809      	ldr	r1, [r1, #0]
    e974:	2300      	movs	r3, #0
    e976:	9301      	str	r3, [sp, #4]
    e978:	9102      	str	r1, [sp, #8]
    e97a:	9203      	str	r2, [sp, #12]
    e97c:	9901      	ldr	r1, [sp, #4]
    e97e:	9a02      	ldr	r2, [sp, #8]
    e980:	9b03      	ldr	r3, [sp, #12]
    e982:	f000 fa9d 	bl	eec0 <_ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E>
    e986:	e7ff      	b.n	e988 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17hbe953f3cc8769e4cE+0x20>
    e988:	b006      	add	sp, #24
    e98a:	bd80      	pop	{r7, pc}

0000e98c <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h6a25aae91f88a8abE>:
    e98c:	b084      	sub	sp, #16
    e98e:	9002      	str	r0, [sp, #8]
    e990:	9103      	str	r1, [sp, #12]
    e992:	6800      	ldr	r0, [r0, #0]
    e994:	9000      	str	r0, [sp, #0]
    e996:	9101      	str	r1, [sp, #4]
    e998:	9800      	ldr	r0, [sp, #0]
    e99a:	9901      	ldr	r1, [sp, #4]
    e99c:	b004      	add	sp, #16
    e99e:	4770      	bx	lr

0000e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>:
    fn jump(&mut self, pc: u16) {
    e9a0:	b082      	sub	sp, #8
    e9a2:	460a      	mov	r2, r1
    e9a4:	9000      	str	r0, [sp, #0]
    e9a6:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
    e9aa:	8241      	strh	r1, [r0, #18]
    }
    e9ac:	b002      	add	sp, #8
    e9ae:	4770      	bx	lr

0000e9b0 <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE>:
    fn load(&mut self, rom: &[u8]) {
    e9b0:	b580      	push	{r7, lr}
    e9b2:	b08a      	sub	sp, #40	; 0x28
    e9b4:	9105      	str	r1, [sp, #20]
    e9b6:	9206      	str	r2, [sp, #24]
    e9b8:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    e9ba:	3047      	adds	r0, #71	; 0x47
    e9bc:	9905      	ldr	r1, [sp, #20]
    e9be:	9a06      	ldr	r2, [sp, #24]
    e9c0:	9004      	str	r0, [sp, #16]
    e9c2:	4608      	mov	r0, r1
    e9c4:	4611      	mov	r1, r2
    e9c6:	f003 f8e8 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    e9ca:	9003      	str	r0, [sp, #12]
    e9cc:	e7ff      	b.n	e9ce <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x1e>
    e9ce:	9803      	ldr	r0, [sp, #12]
    e9d0:	f500 7100 	add.w	r1, r0, #512	; 0x200
    e9d4:	460a      	mov	r2, r1
    e9d6:	4281      	cmp	r1, r0
    e9d8:	9202      	str	r2, [sp, #8]
    e9da:	d318      	bcc.n	ea0e <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x5e>
    e9dc:	e7ff      	b.n	e9de <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x2e>
    e9de:	f44f 7000 	mov.w	r0, #512	; 0x200
    e9e2:	9007      	str	r0, [sp, #28]
    e9e4:	9802      	ldr	r0, [sp, #8]
    e9e6:	9008      	str	r0, [sp, #32]
    e9e8:	9a07      	ldr	r2, [sp, #28]
    e9ea:	9b08      	ldr	r3, [sp, #32]
    e9ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    e9f0:	9804      	ldr	r0, [sp, #16]
    e9f2:	f000 fb7a 	bl	f0ea <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E>
    e9f6:	9001      	str	r0, [sp, #4]
    e9f8:	9100      	str	r1, [sp, #0]
    e9fa:	e7ff      	b.n	e9fc <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x4c>
    e9fc:	9a05      	ldr	r2, [sp, #20]
    e9fe:	9b06      	ldr	r3, [sp, #24]
    ea00:	9801      	ldr	r0, [sp, #4]
    ea02:	9900      	ldr	r1, [sp, #0]
    ea04:	f7fa fa37 	bl	8e76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    ea08:	e7ff      	b.n	ea0a <_ZN8libchip814Chip8$LT$T$GT$4load17h421a99a3132b32abE+0x5a>
    }
    ea0a:	b00a      	add	sp, #40	; 0x28
    ea0c:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    ea0e:	f24c 00b0 	movw	r0, #49328	; 0xc0b0
    ea12:	f2c0 0001 	movt	r0, #1
    ea16:	f64c 724c 	movw	r2, #53068	; 0xcf4c
    ea1a:	f2c0 0201 	movt	r2, #1
    ea1e:	211c      	movs	r1, #28
    ea20:	f006 fd5a 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ea24:	defe      	udf	#254	; 0xfe

0000ea26 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE>:
    fn next(&mut self) {
    ea26:	b580      	push	{r7, lr}
    ea28:	b084      	sub	sp, #16
    ea2a:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
    ea2c:	8a41      	ldrh	r1, [r0, #18]
    ea2e:	2202      	movs	r2, #2
    ea30:	9002      	str	r0, [sp, #8]
    ea32:	4608      	mov	r0, r1
    ea34:	4611      	mov	r1, r2
    ea36:	f000 fb1e 	bl	f076 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>
    ea3a:	9001      	str	r0, [sp, #4]
    ea3c:	e7ff      	b.n	ea3e <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE+0x18>
    ea3e:	9802      	ldr	r0, [sp, #8]
    ea40:	9901      	ldr	r1, [sp, #4]
    ea42:	f7ff ffad 	bl	e9a0 <_ZN8libchip814Chip8$LT$T$GT$4jump17h3c3d4823bea6dd36E>
    ea46:	e7ff      	b.n	ea48 <_ZN8libchip814Chip8$LT$T$GT$4next17h7ff7f0f0210b4bbeE+0x22>
    }
    ea48:	b004      	add	sp, #16
    ea4a:	bd80      	pop	{r7, pc}

0000ea4c <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE>:
    fn push(&mut self, item: u16) {
    ea4c:	b580      	push	{r7, lr}
    ea4e:	b086      	sub	sp, #24
    ea50:	460a      	mov	r2, r1
    ea52:	9004      	str	r0, [sp, #16]
    ea54:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
    ea58:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    ea5c:	460b      	mov	r3, r1
    ea5e:	290f      	cmp	r1, #15
    ea60:	9003      	str	r0, [sp, #12]
    ea62:	9202      	str	r2, [sp, #8]
    ea64:	9301      	str	r3, [sp, #4]
    ea66:	d813      	bhi.n	ea90 <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE+0x44>
    ea68:	e7ff      	b.n	ea6a <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE+0x1e>
    ea6a:	9803      	ldr	r0, [sp, #12]
    ea6c:	9901      	ldr	r1, [sp, #4]
    ea6e:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    ea72:	9b02      	ldr	r3, [sp, #8]
    ea74:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
    ea76:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    ea7a:	2101      	movs	r1, #1
    ea7c:	f000 fa5e 	bl	ef3c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE>
    ea80:	9000      	str	r0, [sp, #0]
    ea82:	e7ff      	b.n	ea84 <_ZN8libchip814Chip8$LT$T$GT$4push17h4dce80960ec16a6bE+0x38>
    ea84:	9800      	ldr	r0, [sp, #0]
    ea86:	9903      	ldr	r1, [sp, #12]
    ea88:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
    ea8c:	b006      	add	sp, #24
    ea8e:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
    ea90:	f64c 705c 	movw	r0, #53084	; 0xcf5c
    ea94:	f2c0 0001 	movt	r0, #1
    ea98:	2210      	movs	r2, #16
    ea9a:	9901      	ldr	r1, [sp, #4]
    ea9c:	f006 fd32 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    eaa0:	defe      	udf	#254	; 0xfe

0000eaa2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E>:
    fn tick(&mut self) {
    eaa2:	b580      	push	{r7, lr}
    eaa4:	b084      	sub	sp, #16
    eaa6:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
    eaa8:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    eaac:	2900      	cmp	r1, #0
    eaae:	9002      	str	r0, [sp, #8]
    eab0:	d00f      	beq.n	ead2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x30>
    eab2:	e7ff      	b.n	eab4 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x12>
            self.dt -= 1;
    eab4:	9802      	ldr	r0, [sp, #8]
    eab6:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    eaba:	3901      	subs	r1, #1
    eabc:	b2ca      	uxtb	r2, r1
    eabe:	460b      	mov	r3, r1
    eac0:	428a      	cmp	r2, r1
    eac2:	9301      	str	r3, [sp, #4]
    eac4:	d129      	bne.n	eb1a <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x78>
    eac6:	e7ff      	b.n	eac8 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x26>
    eac8:	9801      	ldr	r0, [sp, #4]
    eaca:	9902      	ldr	r1, [sp, #8]
    eacc:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
    ead0:	e7ff      	b.n	ead2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x30>
        if self.st > 0 {
    ead2:	9802      	ldr	r0, [sp, #8]
    ead4:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    ead8:	2900      	cmp	r1, #0
    eada:	d01c      	beq.n	eb16 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x74>
    eadc:	e7ff      	b.n	eade <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x3c>
            self.st -= 1;
    eade:	9802      	ldr	r0, [sp, #8]
    eae0:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    eae4:	3901      	subs	r1, #1
    eae6:	b2ca      	uxtb	r2, r1
    eae8:	460b      	mov	r3, r1
    eaea:	428a      	cmp	r2, r1
    eaec:	9300      	str	r3, [sp, #0]
    eaee:	d120      	bne.n	eb32 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x90>
    eaf0:	e7ff      	b.n	eaf2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x50>
    eaf2:	9800      	ldr	r0, [sp, #0]
    eaf4:	9902      	ldr	r1, [sp, #8]
    eaf6:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
    eafa:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
    eafe:	2a00      	cmp	r2, #0
    eb00:	d108      	bne.n	eb14 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x72>
    eb02:	e7ff      	b.n	eb04 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x62>
    eb04:	f241 0048 	movw	r0, #4168	; 0x1048
                self.hw.beep();
    eb08:	9902      	ldr	r1, [sp, #8]
    eb0a:	4408      	add	r0, r1
    eb0c:	f000 feca 	bl	f8a4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha9851d0b0cdc4725E>
    eb10:	e7ff      	b.n	eb12 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x70>
            if self.st == 0 {
    eb12:	e7ff      	b.n	eb14 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x72>
        if self.st > 0 {
    eb14:	e7ff      	b.n	eb16 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E+0x74>
    }
    eb16:	b004      	add	sp, #16
    eb18:	bd80      	pop	{r7, pc}
            self.dt -= 1;
    eb1a:	f24c 6070 	movw	r0, #50800	; 0xc670
    eb1e:	f2c0 0001 	movt	r0, #1
    eb22:	f64c 726c 	movw	r2, #53100	; 0xcf6c
    eb26:	f2c0 0201 	movt	r2, #1
    eb2a:	2121      	movs	r1, #33	; 0x21
    eb2c:	f006 fcd4 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    eb30:	defe      	udf	#254	; 0xfe
            self.st -= 1;
    eb32:	f24c 6070 	movw	r0, #50800	; 0xc670
    eb36:	f2c0 0001 	movt	r0, #1
    eb3a:	f64c 727c 	movw	r2, #53116	; 0xcf7c
    eb3e:	f2c0 0201 	movt	r2, #1
    eb42:	2121      	movs	r1, #33	; 0x21
    eb44:	f006 fcc8 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    eb48:	defe      	udf	#254	; 0xfe

0000eb4a <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E>:
    fn sched(&mut self) {
    eb4a:	b510      	push	{r4, lr}
    eb4c:	b098      	sub	sp, #96	; 0x60
    eb4e:	9015      	str	r0, [sp, #84]	; 0x54
    eb50:	f241 0148 	movw	r1, #4168	; 0x1048
        if self.hw.sched() {
    eb54:	4401      	add	r1, r0
    eb56:	900b      	str	r0, [sp, #44]	; 0x2c
    eb58:	4608      	mov	r0, r1
    eb5a:	f000 fea7 	bl	f8ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E>
    eb5e:	900a      	str	r0, [sp, #40]	; 0x28
    eb60:	e7ff      	b.n	eb62 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x18>
    eb62:	980a      	ldr	r0, [sp, #40]	; 0x28
    eb64:	07c1      	lsls	r1, r0, #31
    eb66:	2900      	cmp	r1, #0
    eb68:	d005      	beq.n	eb76 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x2c>
    eb6a:	e7ff      	b.n	eb6c <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x22>
            self.shutdown();
    eb6c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eb6e:	f000 f90e 	bl	ed8e <_ZN8libchip814Chip8$LT$T$GT$8shutdown17hb4ffb829681b047bE>
    eb72:	e7ff      	b.n	eb74 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x2a>
        if self.hw.sched() {
    eb74:	e7ff      	b.n	eb76 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x2c>
        if let Some(t) = self.time {
    eb76:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eb78:	6801      	ldr	r1, [r0, #0]
    eb7a:	2901      	cmp	r1, #1
    eb7c:	d009      	beq.n	eb92 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x48>
    eb7e:	e7ff      	b.n	eb80 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x36>
    eb80:	f241 0048 	movw	r0, #4168	; 0x1048
            self.time = Some(self.hw.clock());
    eb84:	990b      	ldr	r1, [sp, #44]	; 0x2c
    eb86:	4408      	add	r0, r1
    eb88:	f000 fe2a 	bl	f7e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>
    eb8c:	9109      	str	r1, [sp, #36]	; 0x24
    eb8e:	9008      	str	r0, [sp, #32]
    eb90:	e046      	b.n	ec20 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xd6>
        if let Some(t) = self.time {
    eb92:	980b      	ldr	r0, [sp, #44]	; 0x2c
    eb94:	6881      	ldr	r1, [r0, #8]
    eb96:	68c2      	ldr	r2, [r0, #12]
    eb98:	9217      	str	r2, [sp, #92]	; 0x5c
    eb9a:	9116      	str	r1, [sp, #88]	; 0x58
    eb9c:	f241 0348 	movw	r3, #4168	; 0x1048
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    eba0:	4418      	add	r0, r3
    eba2:	9107      	str	r1, [sp, #28]
    eba4:	9206      	str	r2, [sp, #24]
    eba6:	f000 fe1b 	bl	f7e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>
    ebaa:	9105      	str	r1, [sp, #20]
    ebac:	9004      	str	r0, [sp, #16]
    ebae:	e7ff      	b.n	ebb0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x66>
    ebb0:	9804      	ldr	r0, [sp, #16]
    ebb2:	9905      	ldr	r1, [sp, #20]
    ebb4:	9a07      	ldr	r2, [sp, #28]
    ebb6:	9b06      	ldr	r3, [sp, #24]
    ebb8:	f000 fa7f 	bl	f0ba <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E>
    ebbc:	9103      	str	r1, [sp, #12]
    ebbe:	9002      	str	r0, [sp, #8]
    ebc0:	e7ff      	b.n	ebc2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x78>
    ebc2:	f245 002b 	movw	r0, #20523	; 0x502b
    ebc6:	f2c0 00fe 	movt	r0, #254	; 0xfe
    ebca:	9902      	ldr	r1, [sp, #8]
    ebcc:	1a08      	subs	r0, r1, r0
    ebce:	9a03      	ldr	r2, [sp, #12]
    ebd0:	f172 0300 	sbcs.w	r3, r2, #0
    ebd4:	d323      	bcc.n	ec1e <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xd4>
    ebd6:	e7ff      	b.n	ebd8 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x8e>
                self.tick();
    ebd8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ebda:	f7ff ff62 	bl	eaa2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h3fe60c74da4fd418E>
    ebde:	e7ff      	b.n	ebe0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x96>
    ebe0:	f241 0048 	movw	r0, #4168	; 0x1048
                self.time = Some(self.hw.clock());
    ebe4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ebe6:	4408      	add	r0, r1
    ebe8:	f000 fdfa 	bl	f7e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>
    ebec:	9101      	str	r1, [sp, #4]
    ebee:	9000      	str	r0, [sp, #0]
    ebf0:	e7ff      	b.n	ebf2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xa8>
    ebf2:	9800      	ldr	r0, [sp, #0]
    ebf4:	900e      	str	r0, [sp, #56]	; 0x38
    ebf6:	9901      	ldr	r1, [sp, #4]
    ebf8:	910f      	str	r1, [sp, #60]	; 0x3c
    ebfa:	2200      	movs	r2, #0
    ebfc:	920d      	str	r2, [sp, #52]	; 0x34
    ebfe:	2201      	movs	r2, #1
    ec00:	920c      	str	r2, [sp, #48]	; 0x30
    ec02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ec04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ec06:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    ec0a:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    ec0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ec10:	6063      	str	r3, [r4, #4]
    ec12:	6022      	str	r2, [r4, #0]
    ec14:	f8c4 e00c 	str.w	lr, [r4, #12]
    ec18:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    ec1c:	e7ff      	b.n	ec1e <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0xd4>
        if let Some(t) = self.time {
    ec1e:	e015      	b.n	ec4c <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x102>
            self.time = Some(self.hw.clock());
    ec20:	9808      	ldr	r0, [sp, #32]
    ec22:	9012      	str	r0, [sp, #72]	; 0x48
    ec24:	9909      	ldr	r1, [sp, #36]	; 0x24
    ec26:	9113      	str	r1, [sp, #76]	; 0x4c
    ec28:	2200      	movs	r2, #0
    ec2a:	9211      	str	r2, [sp, #68]	; 0x44
    ec2c:	2201      	movs	r2, #1
    ec2e:	9210      	str	r2, [sp, #64]	; 0x40
    ec30:	9a10      	ldr	r2, [sp, #64]	; 0x40
    ec32:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ec34:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    ec38:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
    ec3c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ec3e:	6063      	str	r3, [r4, #4]
    ec40:	6022      	str	r2, [r4, #0]
    ec42:	f8c4 e00c 	str.w	lr, [r4, #12]
    ec46:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
    ec4a:	e7ff      	b.n	ec4c <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E+0x102>
    }
    ec4c:	b018      	add	sp, #96	; 0x60
    ec4e:	bd10      	pop	{r4, pc}

0000ec50 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E>:
    fn setup(&mut self) {
    ec50:	b580      	push	{r7, lr}
    ec52:	b088      	sub	sp, #32
    ec54:	9007      	str	r0, [sp, #28]
    ec56:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
    ec5a:	8241      	strh	r1, [r0, #18]
    ec5c:	f241 0148 	movw	r1, #4168	; 0x1048
        self.hw.vram_setsize(DISPS);
    ec60:	4401      	add	r1, r0
    ec62:	f24c 1244 	movw	r2, #49476	; 0xc144
    ec66:	f2c0 0201 	movt	r2, #1
    ec6a:	6813      	ldr	r3, [r2, #0]
    ec6c:	6852      	ldr	r2, [r2, #4]
    ec6e:	9005      	str	r0, [sp, #20]
    ec70:	4608      	mov	r0, r1
    ec72:	4619      	mov	r1, r3
    ec74:	f000 fd5d 	bl	f732 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE>
    ec78:	e7ff      	b.n	ec7a <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x2a>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
    ec7a:	9805      	ldr	r0, [sp, #20]
    ec7c:	f100 0147 	add.w	r1, r0, #71	; 0x47
    ec80:	f64e 008d 	movw	r0, #59533	; 0xe88d
    ec84:	f2c0 0001 	movt	r0, #1
    ec88:	2250      	movs	r2, #80	; 0x50
    ec8a:	9104      	str	r1, [sp, #16]
    ec8c:	4611      	mov	r1, r2
    ec8e:	f002 ff84 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    ec92:	9003      	str	r0, [sp, #12]
    ec94:	e7ff      	b.n	ec96 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x46>
    ec96:	9803      	ldr	r0, [sp, #12]
    ec98:	9006      	str	r0, [sp, #24]
    ec9a:	9a06      	ldr	r2, [sp, #24]
    ec9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    eca0:	9804      	ldr	r0, [sp, #16]
    eca2:	f7fa f9e5 	bl	9070 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
    eca6:	9002      	str	r0, [sp, #8]
    eca8:	9101      	str	r1, [sp, #4]
    ecaa:	e7ff      	b.n	ecac <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x5c>
    ecac:	f64e 028d 	movw	r2, #59533	; 0xe88d
    ecb0:	f2c0 0201 	movt	r2, #1
    ecb4:	2350      	movs	r3, #80	; 0x50
    ecb6:	9802      	ldr	r0, [sp, #8]
    ecb8:	9901      	ldr	r1, [sp, #4]
    ecba:	f7fa f8dc 	bl	8e76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    ecbe:	e7ff      	b.n	ecc0 <_ZN8libchip814Chip8$LT$T$GT$5setup17hd1ebcc336f6c78c4E+0x70>
    ecc0:	f241 0047 	movw	r0, #4167	; 0x1047
    ecc4:	2101      	movs	r1, #1
        self.running = true;
    ecc6:	9a05      	ldr	r2, [sp, #20]
    ecc8:	5411      	strb	r1, [r2, r0]
    }
    ecca:	b008      	add	sp, #32
    eccc:	bd80      	pop	{r7, pc}

0000ecce <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE>:
    fn waitkey(&mut self) -> u8 {
    ecce:	b580      	push	{r7, lr}
    ecd0:	b08c      	sub	sp, #48	; 0x30
    ecd2:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
    ecd4:	9005      	str	r0, [sp, #20]
    ecd6:	e7ff      	b.n	ecd8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xa>
    ecd8:	f241 0047 	movw	r0, #4167	; 0x1047
    ecdc:	9905      	ldr	r1, [sp, #20]
    ecde:	5c08      	ldrb	r0, [r1, r0]
    ece0:	07c0      	lsls	r0, r0, #31
    ece2:	2800      	cmp	r0, #0
    ece4:	d104      	bne.n	ecf0 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x22>
    ece6:	e7ff      	b.n	ece8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x1a>
    ece8:	2020      	movs	r0, #32
        return b' ';
    ecea:	f88d 001b 	strb.w	r0, [sp, #27]
    ecee:	e04a      	b.n	ed86 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xb8>
            self.sched();
    ecf0:	9805      	ldr	r0, [sp, #20]
    ecf2:	f7ff ff2a 	bl	eb4a <_ZN8libchip814Chip8$LT$T$GT$5sched17h6566e0b45a34c577E>
    ecf6:	e7ff      	b.n	ecf8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x2a>
    ecf8:	2000      	movs	r0, #0
            for i in 0..0xf {
    ecfa:	f88d 001c 	strb.w	r0, [sp, #28]
    ecfe:	200f      	movs	r0, #15
    ed00:	f88d 001d 	strb.w	r0, [sp, #29]
    ed04:	f89d 001c 	ldrb.w	r0, [sp, #28]
    ed08:	f89d 101d 	ldrb.w	r1, [sp, #29]
    ed0c:	f000 f8e2 	bl	eed4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6e7fb991422ea45dE>
    ed10:	9004      	str	r0, [sp, #16]
    ed12:	9103      	str	r1, [sp, #12]
    ed14:	e7ff      	b.n	ed16 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x48>
    ed16:	9804      	ldr	r0, [sp, #16]
    ed18:	f88d 0020 	strb.w	r0, [sp, #32]
    ed1c:	9903      	ldr	r1, [sp, #12]
    ed1e:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    ed22:	e7ff      	b.n	ed24 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x56>
    ed24:	a808      	add	r0, sp, #32
    ed26:	f000 f864 	bl	edf2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E>
    ed2a:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    ed2e:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    ed32:	e7ff      	b.n	ed34 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x66>
    ed34:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    ed38:	07c1      	lsls	r1, r0, #31
    ed3a:	2900      	cmp	r1, #0
    ed3c:	d001      	beq.n	ed42 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x74>
    ed3e:	e7ff      	b.n	ed40 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x72>
    ed40:	e001      	b.n	ed46 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x78>
        while self.running {
    ed42:	e7c9      	b.n	ecd8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xa>
            for i in 0..0xf {
    ed44:	defe      	udf	#254	; 0xfe
    ed46:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    ed4a:	4601      	mov	r1, r0
    ed4c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    ed50:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    ed54:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    ed58:	f241 0248 	movw	r2, #4168	; 0x1048
                if self.hw.key(i) {
    ed5c:	9b05      	ldr	r3, [sp, #20]
    ed5e:	441a      	add	r2, r3
    ed60:	9002      	str	r0, [sp, #8]
    ed62:	4610      	mov	r0, r2
    ed64:	9a02      	ldr	r2, [sp, #8]
    ed66:	9101      	str	r1, [sp, #4]
    ed68:	4611      	mov	r1, r2
    ed6a:	f000 fb51 	bl	f410 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>
    ed6e:	9000      	str	r0, [sp, #0]
    ed70:	e7ff      	b.n	ed72 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xa4>
    ed72:	9800      	ldr	r0, [sp, #0]
    ed74:	07c1      	lsls	r1, r0, #31
    ed76:	2900      	cmp	r1, #0
    ed78:	d101      	bne.n	ed7e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xb0>
    ed7a:	e7ff      	b.n	ed7c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xae>
            for i in 0..0xf {
    ed7c:	e7d2      	b.n	ed24 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0x56>
                    return i;
    ed7e:	9801      	ldr	r0, [sp, #4]
    ed80:	f88d 001b 	strb.w	r0, [sp, #27]
    ed84:	e7ff      	b.n	ed86 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hdf3ad53b2d4f401eE+0xb8>
    }
    ed86:	f89d 001b 	ldrb.w	r0, [sp, #27]
    ed8a:	b00c      	add	sp, #48	; 0x30
    ed8c:	bd80      	pop	{r7, pc}

0000ed8e <_ZN8libchip814Chip8$LT$T$GT$8shutdown17hb4ffb829681b047bE>:
    fn shutdown(&mut self) {
    ed8e:	b081      	sub	sp, #4
    ed90:	9000      	str	r0, [sp, #0]
    ed92:	f241 0147 	movw	r1, #4167	; 0x1047
    ed96:	2200      	movs	r2, #0
        self.running = false;
    ed98:	5442      	strb	r2, [r0, r1]
    }
    ed9a:	b001      	add	sp, #4
    ed9c:	4770      	bx	lr

0000ed9e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E>:
    ed9e:	b08a      	sub	sp, #40	; 0x28
    eda0:	9107      	str	r1, [sp, #28]
    eda2:	9208      	str	r2, [sp, #32]
    eda4:	f8d0 c000 	ldr.w	ip, [r0]
    eda8:	f1bc 0f00 	cmp.w	ip, #0
    edac:	9305      	str	r3, [sp, #20]
    edae:	9204      	str	r2, [sp, #16]
    edb0:	9103      	str	r1, [sp, #12]
    edb2:	9002      	str	r0, [sp, #8]
    edb4:	d011      	beq.n	edda <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x3c>
    edb6:	e7ff      	b.n	edb8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x1a>
    edb8:	9802      	ldr	r0, [sp, #8]
    edba:	6841      	ldr	r1, [r0, #4]
    edbc:	9106      	str	r1, [sp, #24]
    edbe:	4669      	mov	r1, sp
    edc0:	9a05      	ldr	r2, [sp, #20]
    edc2:	600a      	str	r2, [r1, #0]
    edc4:	f64c 738c 	movw	r3, #53132	; 0xcf8c
    edc8:	f2c0 0301 	movt	r3, #1
    edcc:	aa06      	add	r2, sp, #24
    edce:	9803      	ldr	r0, [sp, #12]
    edd0:	9904      	ldr	r1, [sp, #16]
    edd2:	f006 fb53 	bl	1547c <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    edd6:	defe      	udf	#254	; 0xfe
    edd8:	defe      	udf	#254	; 0xfe
    edda:	9802      	ldr	r0, [sp, #8]
    eddc:	6841      	ldr	r1, [r0, #4]
    edde:	9109      	str	r1, [sp, #36]	; 0x24
    ede0:	6802      	ldr	r2, [r0, #0]
    ede2:	2a00      	cmp	r2, #0
    ede4:	9101      	str	r1, [sp, #4]
    ede6:	d103      	bne.n	edf0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x52>
    ede8:	e7ff      	b.n	edea <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x4c>
    edea:	9801      	ldr	r0, [sp, #4]
    edec:	b00a      	add	sp, #40	; 0x28
    edee:	4770      	bx	lr
    edf0:	e7fb      	b.n	edea <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E+0x4c>

0000edf2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E>:
    edf2:	b580      	push	{r7, lr}
    edf4:	b086      	sub	sp, #24
    edf6:	9005      	str	r0, [sp, #20]
    edf8:	2100      	movs	r1, #0
    edfa:	f88d 1013 	strb.w	r1, [sp, #19]
    edfe:	1c41      	adds	r1, r0, #1
    ee00:	9002      	str	r0, [sp, #8]
    ee02:	f002 fb34 	bl	1146e <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h0340384168a45934E>
    ee06:	9001      	str	r0, [sp, #4]
    ee08:	e7ff      	b.n	ee0a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x18>
    ee0a:	9801      	ldr	r0, [sp, #4]
    ee0c:	07c1      	lsls	r1, r0, #31
    ee0e:	2900      	cmp	r1, #0
    ee10:	d104      	bne.n	ee1c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x2a>
    ee12:	e7ff      	b.n	ee14 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x22>
    ee14:	2000      	movs	r0, #0
    ee16:	f88d 000c 	strb.w	r0, [sp, #12]
    ee1a:	e02c      	b.n	ee76 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x84>
    ee1c:	2001      	movs	r0, #1
    ee1e:	f88d 0013 	strb.w	r0, [sp, #19]
    ee22:	9902      	ldr	r1, [sp, #8]
    ee24:	9000      	str	r0, [sp, #0]
    ee26:	4608      	mov	r0, r1
    ee28:	9900      	ldr	r1, [sp, #0]
    ee2a:	f000 f973 	bl	f114 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E>
    ee2e:	f88d 1011 	strb.w	r1, [sp, #17]
    ee32:	f88d 0010 	strb.w	r0, [sp, #16]
    ee36:	e7ff      	b.n	ee38 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x46>
    ee38:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ee3c:	07c0      	lsls	r0, r0, #31
    ee3e:	2800      	cmp	r0, #0
    ee40:	d104      	bne.n	ee4c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x5a>
    ee42:	e7ff      	b.n	ee44 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x52>
    ee44:	2000      	movs	r0, #0
    ee46:	f88d 000c 	strb.w	r0, [sp, #12]
    ee4a:	e029      	b.n	eea0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xae>
    ee4c:	2000      	movs	r0, #0
    ee4e:	f88d 0013 	strb.w	r0, [sp, #19]
    ee52:	f89d 0011 	ldrb.w	r0, [sp, #17]
    ee56:	f88d 0012 	strb.w	r0, [sp, #18]
    ee5a:	f10d 0012 	add.w	r0, sp, #18
    ee5e:	9902      	ldr	r1, [sp, #8]
    ee60:	f002 fa09 	bl	11276 <_ZN4core3mem4swap17h21afb25e2d195463E>
    ee64:	e7ff      	b.n	ee66 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x74>
    ee66:	f89d 0012 	ldrb.w	r0, [sp, #18]
    ee6a:	f88d 000d 	strb.w	r0, [sp, #13]
    ee6e:	2001      	movs	r0, #1
    ee70:	f88d 000c 	strb.w	r0, [sp, #12]
    ee74:	e014      	b.n	eea0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xae>
    ee76:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ee7a:	f89d 100d 	ldrb.w	r1, [sp, #13]
    ee7e:	b006      	add	sp, #24
    ee80:	bd80      	pop	{r7, pc}
    ee82:	2000      	movs	r0, #0
    ee84:	f88d 0013 	strb.w	r0, [sp, #19]
    ee88:	e7f5      	b.n	ee76 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x84>
    ee8a:	f89d 0013 	ldrb.w	r0, [sp, #19]
    ee8e:	07c0      	lsls	r0, r0, #31
    ee90:	2800      	cmp	r0, #0
    ee92:	d0f6      	beq.n	ee82 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x90>
    ee94:	e7ff      	b.n	ee96 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xa4>
    ee96:	2000      	movs	r0, #0
    ee98:	f88d 0013 	strb.w	r0, [sp, #19]
    ee9c:	e7f1      	b.n	ee82 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x90>
    ee9e:	e7f0      	b.n	ee82 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x90>
    eea0:	f89d 0010 	ldrb.w	r0, [sp, #16]
    eea4:	07c0      	lsls	r0, r0, #31
    eea6:	2800      	cmp	r0, #0
    eea8:	d1ef      	bne.n	ee8a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0x98>
    eeaa:	e7f8      	b.n	ee9e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h37a84aaec9869548E+0xac>

0000eeac <_ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E>:
    eeac:	b580      	push	{r7, lr}
    eeae:	b084      	sub	sp, #16
    eeb0:	9101      	str	r1, [sp, #4]
    eeb2:	9202      	str	r2, [sp, #8]
    eeb4:	9303      	str	r3, [sp, #12]
    eeb6:	f000 f96a 	bl	f18e <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h116a6636383259eeE>
    eeba:	e7ff      	b.n	eebc <_ZN4core4iter6traits8iterator8Iterator3map17h704adbbd229a4ae6E+0x10>
    eebc:	b004      	add	sp, #16
    eebe:	bd80      	pop	{r7, pc}

0000eec0 <_ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E>:
    eec0:	b580      	push	{r7, lr}
    eec2:	b084      	sub	sp, #16
    eec4:	9101      	str	r1, [sp, #4]
    eec6:	9202      	str	r2, [sp, #8]
    eec8:	9303      	str	r3, [sp, #12]
    eeca:	f000 f969 	bl	f1a0 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1647783578bb3807E>
    eece:	e7ff      	b.n	eed0 <_ZN4core4iter6traits8iterator8Iterator3map17h9d41144da998d389E+0x10>
    eed0:	b004      	add	sp, #16
    eed2:	bd80      	pop	{r7, pc}

0000eed4 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h6e7fb991422ea45dE>:
    eed4:	b081      	sub	sp, #4
    eed6:	460a      	mov	r2, r1
    eed8:	4603      	mov	r3, r0
    eeda:	f88d 0000 	strb.w	r0, [sp]
    eede:	f88d 1001 	strb.w	r1, [sp, #1]
    eee2:	b001      	add	sp, #4
    eee4:	4770      	bx	lr

0000eee6 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E>:
    eee6:	b580      	push	{r7, lr}
    eee8:	b086      	sub	sp, #24
    eeea:	460a      	mov	r2, r1
    eeec:	4603      	mov	r3, r0
    eeee:	f88d 0014 	strb.w	r0, [sp, #20]
    eef2:	f88d 1015 	strb.w	r1, [sp, #21]
    eef6:	9203      	str	r2, [sp, #12]
    eef8:	9302      	str	r3, [sp, #8]
    eefa:	f000 f865 	bl	efc8 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E>
    eefe:	9001      	str	r0, [sp, #4]
    ef00:	9100      	str	r1, [sp, #0]
    ef02:	e7ff      	b.n	ef04 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x1e>
    ef04:	9801      	ldr	r0, [sp, #4]
    ef06:	f88d 0016 	strb.w	r0, [sp, #22]
    ef0a:	9900      	ldr	r1, [sp, #0]
    ef0c:	f001 0201 	and.w	r2, r1, #1
    ef10:	f88d 2017 	strb.w	r2, [sp, #23]
    ef14:	2a00      	cmp	r2, #0
    ef16:	d107      	bne.n	ef28 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x42>
    ef18:	e7ff      	b.n	ef1a <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x34>
    ef1a:	9801      	ldr	r0, [sp, #4]
    ef1c:	f88d 0011 	strb.w	r0, [sp, #17]
    ef20:	2101      	movs	r1, #1
    ef22:	f88d 1010 	strb.w	r1, [sp, #16]
    ef26:	e003      	b.n	ef30 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x4a>
    ef28:	2000      	movs	r0, #0
    ef2a:	f88d 0010 	strb.w	r0, [sp, #16]
    ef2e:	e7ff      	b.n	ef30 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E+0x4a>
    ef30:	f89d 0010 	ldrb.w	r0, [sp, #16]
    ef34:	f89d 1011 	ldrb.w	r1, [sp, #17]
    ef38:	b006      	add	sp, #24
    ef3a:	bd80      	pop	{r7, pc}

0000ef3c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE>:
    ef3c:	b082      	sub	sp, #8
    ef3e:	460a      	mov	r2, r1
    ef40:	4603      	mov	r3, r0
    ef42:	f88d 0005 	strb.w	r0, [sp, #5]
    ef46:	f88d 1006 	strb.w	r1, [sp, #6]
    ef4a:	4408      	add	r0, r1
    ef4c:	f88d 0007 	strb.w	r0, [sp, #7]
    ef50:	f89d 0007 	ldrb.w	r0, [sp, #7]
    ef54:	9000      	str	r0, [sp, #0]
    ef56:	e7ff      	b.n	ef58 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h8015977e012c9a0dE+0x1c>
    ef58:	9800      	ldr	r0, [sp, #0]
    ef5a:	b002      	add	sp, #8
    ef5c:	4770      	bx	lr

0000ef5e <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E>:
    ef5e:	b084      	sub	sp, #16
    ef60:	4602      	mov	r2, r0
    ef62:	f88d 0007 	strb.w	r0, [sp, #7]
    ef66:	9102      	str	r1, [sp, #8]
    ef68:	f001 0107 	and.w	r1, r1, #7
    ef6c:	4088      	lsls	r0, r1
    ef6e:	f88d 000f 	strb.w	r0, [sp, #15]
    ef72:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ef76:	9000      	str	r0, [sp, #0]
    ef78:	e7ff      	b.n	ef7a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17he0c9c1743ed48494E+0x1c>
    ef7a:	9800      	ldr	r0, [sp, #0]
    ef7c:	b004      	add	sp, #16
    ef7e:	4770      	bx	lr

0000ef80 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE>:
    ef80:	b084      	sub	sp, #16
    ef82:	b2c2      	uxtb	r2, r0
    ef84:	4603      	mov	r3, r0
    ef86:	f88d 0007 	strb.w	r0, [sp, #7]
    ef8a:	9102      	str	r1, [sp, #8]
    ef8c:	f001 0007 	and.w	r0, r1, #7
    ef90:	fa22 f000 	lsr.w	r0, r2, r0
    ef94:	f88d 000f 	strb.w	r0, [sp, #15]
    ef98:	f89d 000f 	ldrb.w	r0, [sp, #15]
    ef9c:	9000      	str	r0, [sp, #0]
    ef9e:	e7ff      	b.n	efa0 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hd8fc987b7fb948dbE+0x20>
    efa0:	9800      	ldr	r0, [sp, #0]
    efa2:	b004      	add	sp, #16
    efa4:	4770      	bx	lr

0000efa6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE>:
    efa6:	b082      	sub	sp, #8
    efa8:	460a      	mov	r2, r1
    efaa:	4603      	mov	r3, r0
    efac:	f88d 0005 	strb.w	r0, [sp, #5]
    efb0:	f88d 1006 	strb.w	r1, [sp, #6]
    efb4:	1a40      	subs	r0, r0, r1
    efb6:	f88d 0007 	strb.w	r0, [sp, #7]
    efba:	f89d 0007 	ldrb.w	r0, [sp, #7]
    efbe:	9000      	str	r0, [sp, #0]
    efc0:	e7ff      	b.n	efc2 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h85ad829ef61f8d1fE+0x1c>
    efc2:	9800      	ldr	r0, [sp, #0]
    efc4:	b002      	add	sp, #8
    efc6:	4770      	bx	lr

0000efc8 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E>:
    efc8:	b084      	sub	sp, #16
    efca:	b2c2      	uxtb	r2, r0
    efcc:	460b      	mov	r3, r1
    efce:	4684      	mov	ip, r0
    efd0:	f88d 000a 	strb.w	r0, [sp, #10]
    efd4:	f88d 100b 	strb.w	r1, [sp, #11]
    efd8:	fa52 f081 	uxtab	r0, r2, r1
    efdc:	b2c1      	uxtb	r1, r0
    efde:	1a09      	subs	r1, r1, r0
    efe0:	bf18      	it	ne
    efe2:	2101      	movne	r1, #1
    efe4:	f88d 000c 	strb.w	r0, [sp, #12]
    efe8:	f88d 100d 	strb.w	r1, [sp, #13]
    efec:	f89d 000c 	ldrb.w	r0, [sp, #12]
    eff0:	f89d 100d 	ldrb.w	r1, [sp, #13]
    eff4:	9001      	str	r0, [sp, #4]
    eff6:	9100      	str	r1, [sp, #0]
    eff8:	e7ff      	b.n	effa <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h60b6abf8cd92d7c5E+0x32>
    effa:	9801      	ldr	r0, [sp, #4]
    effc:	f88d 000e 	strb.w	r0, [sp, #14]
    f000:	9900      	ldr	r1, [sp, #0]
    f002:	f001 0201 	and.w	r2, r1, #1
    f006:	f88d 200f 	strb.w	r2, [sp, #15]
    f00a:	f88d 0008 	strb.w	r0, [sp, #8]
    f00e:	f88d 2009 	strb.w	r2, [sp, #9]
    f012:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f016:	f89d 1009 	ldrb.w	r1, [sp, #9]
    f01a:	b004      	add	sp, #16
    f01c:	4770      	bx	lr

0000f01e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE>:
    f01e:	b580      	push	{r7, lr}
    f020:	b084      	sub	sp, #16
    f022:	b2ca      	uxtb	r2, r1
    f024:	b2c3      	uxtb	r3, r0
    f026:	468c      	mov	ip, r1
    f028:	4686      	mov	lr, r0
    f02a:	f88d 000a 	strb.w	r0, [sp, #10]
    f02e:	f88d 100b 	strb.w	r1, [sp, #11]
    f032:	1a98      	subs	r0, r3, r2
    f034:	b2c1      	uxtb	r1, r0
    f036:	1a09      	subs	r1, r1, r0
    f038:	bf18      	it	ne
    f03a:	2101      	movne	r1, #1
    f03c:	f88d 000c 	strb.w	r0, [sp, #12]
    f040:	f88d 100d 	strb.w	r1, [sp, #13]
    f044:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f048:	f89d 100d 	ldrb.w	r1, [sp, #13]
    f04c:	9001      	str	r0, [sp, #4]
    f04e:	9100      	str	r1, [sp, #0]
    f050:	e7ff      	b.n	f052 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h513cc2f76210ff2bE+0x34>
    f052:	9801      	ldr	r0, [sp, #4]
    f054:	f88d 000e 	strb.w	r0, [sp, #14]
    f058:	9900      	ldr	r1, [sp, #0]
    f05a:	f001 0201 	and.w	r2, r1, #1
    f05e:	f88d 200f 	strb.w	r2, [sp, #15]
    f062:	f88d 0008 	strb.w	r0, [sp, #8]
    f066:	f88d 2009 	strb.w	r2, [sp, #9]
    f06a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f06e:	f89d 1009 	ldrb.w	r1, [sp, #9]
    f072:	b004      	add	sp, #16
    f074:	bd80      	pop	{r7, pc}

0000f076 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E>:
    f076:	b083      	sub	sp, #12
    f078:	460a      	mov	r2, r1
    f07a:	4603      	mov	r3, r0
    f07c:	f8ad 0006 	strh.w	r0, [sp, #6]
    f080:	f8ad 1008 	strh.w	r1, [sp, #8]
    f084:	4408      	add	r0, r1
    f086:	f8ad 000a 	strh.w	r0, [sp, #10]
    f08a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    f08e:	9000      	str	r0, [sp, #0]
    f090:	e7ff      	b.n	f092 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hc9fef766b9a5b5d2E+0x1c>
    f092:	9800      	ldr	r0, [sp, #0]
    f094:	b003      	add	sp, #12
    f096:	4770      	bx	lr

0000f098 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E>:
    f098:	b083      	sub	sp, #12
    f09a:	460a      	mov	r2, r1
    f09c:	4603      	mov	r3, r0
    f09e:	f8ad 0006 	strh.w	r0, [sp, #6]
    f0a2:	f8ad 1008 	strh.w	r1, [sp, #8]
    f0a6:	1a40      	subs	r0, r0, r1
    f0a8:	f8ad 000a 	strh.w	r0, [sp, #10]
    f0ac:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    f0b0:	9000      	str	r0, [sp, #0]
    f0b2:	e7ff      	b.n	f0b4 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hba10a25f15b3be45E+0x1c>
    f0b4:	9800      	ldr	r0, [sp, #0]
    f0b6:	b003      	add	sp, #12
    f0b8:	4770      	bx	lr

0000f0ba <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E>:
    f0ba:	b5b0      	push	{r4, r5, r7, lr}
    f0bc:	b088      	sub	sp, #32
    f0be:	469c      	mov	ip, r3
    f0c0:	4696      	mov	lr, r2
    f0c2:	460c      	mov	r4, r1
    f0c4:	4605      	mov	r5, r0
    f0c6:	9103      	str	r1, [sp, #12]
    f0c8:	9002      	str	r0, [sp, #8]
    f0ca:	9305      	str	r3, [sp, #20]
    f0cc:	9204      	str	r2, [sp, #16]
    f0ce:	1a80      	subs	r0, r0, r2
    f0d0:	eb61 0103 	sbc.w	r1, r1, r3
    f0d4:	9107      	str	r1, [sp, #28]
    f0d6:	9006      	str	r0, [sp, #24]
    f0d8:	9806      	ldr	r0, [sp, #24]
    f0da:	9907      	ldr	r1, [sp, #28]
    f0dc:	9001      	str	r0, [sp, #4]
    f0de:	9100      	str	r1, [sp, #0]
    f0e0:	e7ff      	b.n	f0e2 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17hf8eddcd100cb7a54E+0x28>
    f0e2:	9801      	ldr	r0, [sp, #4]
    f0e4:	9900      	ldr	r1, [sp, #0]
    f0e6:	b008      	add	sp, #32
    f0e8:	bdb0      	pop	{r4, r5, r7, pc}

0000f0ea <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E>:
    f0ea:	b580      	push	{r7, lr}
    f0ec:	b088      	sub	sp, #32
    f0ee:	9004      	str	r0, [sp, #16]
    f0f0:	9105      	str	r1, [sp, #20]
    f0f2:	9206      	str	r2, [sp, #24]
    f0f4:	9307      	str	r3, [sp, #28]
    f0f6:	9003      	str	r0, [sp, #12]
    f0f8:	4610      	mov	r0, r2
    f0fa:	9102      	str	r1, [sp, #8]
    f0fc:	4619      	mov	r1, r3
    f0fe:	9a03      	ldr	r2, [sp, #12]
    f100:	9b02      	ldr	r3, [sp, #8]
    f102:	f7f9 fdfb 	bl	8cfc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    f106:	9001      	str	r0, [sp, #4]
    f108:	9100      	str	r1, [sp, #0]
    f10a:	e7ff      	b.n	f10c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc22918223fd59462E+0x22>
    f10c:	9801      	ldr	r0, [sp, #4]
    f10e:	9900      	ldr	r1, [sp, #0]
    f110:	b008      	add	sp, #32
    f112:	bd80      	pop	{r7, pc}

0000f114 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E>:
    f114:	b580      	push	{r7, lr}
    f116:	b088      	sub	sp, #32
    f118:	9005      	str	r0, [sp, #20]
    f11a:	9106      	str	r1, [sp, #24]
    f11c:	9002      	str	r0, [sp, #8]
    f11e:	4608      	mov	r0, r1
    f120:	f005 fc86 	bl	14a30 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE>
    f124:	f88d 1011 	strb.w	r1, [sp, #17]
    f128:	f88d 0010 	strb.w	r0, [sp, #16]
    f12c:	e7ff      	b.n	f12e <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x1a>
    f12e:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f132:	07c1      	lsls	r1, r0, #31
    f134:	2900      	cmp	r1, #0
    f136:	d005      	beq.n	f144 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x30>
    f138:	e7ff      	b.n	f13a <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x26>
    f13a:	2000      	movs	r0, #0
    f13c:	f88d 000c 	strb.w	r0, [sp, #12]
    f140:	e011      	b.n	f166 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x52>
    f142:	defe      	udf	#254	; 0xfe
    f144:	f89d 0011 	ldrb.w	r0, [sp, #17]
    f148:	f88d 001f 	strb.w	r0, [sp, #31]
    f14c:	9902      	ldr	r1, [sp, #8]
    f14e:	780a      	ldrb	r2, [r1, #0]
    f150:	9001      	str	r0, [sp, #4]
    f152:	4610      	mov	r0, r2
    f154:	9901      	ldr	r1, [sp, #4]
    f156:	f7ff fec6 	bl	eee6 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hfa181f6a010301d7E>
    f15a:	f88d 100d 	strb.w	r1, [sp, #13]
    f15e:	f88d 000c 	strb.w	r0, [sp, #12]
    f162:	e7ff      	b.n	f164 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x50>
    f164:	e7ff      	b.n	f166 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17hd81d5b4704e79892E+0x52>
    f166:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f16a:	f89d 100d 	ldrb.w	r1, [sp, #13]
    f16e:	b008      	add	sp, #32
    f170:	bd80      	pop	{r7, pc}

0000f172 <_ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E>:
    f172:	b580      	push	{r7, lr}
    f174:	b084      	sub	sp, #16
    f176:	680a      	ldr	r2, [r1, #0]
    f178:	684b      	ldr	r3, [r1, #4]
    f17a:	6889      	ldr	r1, [r1, #8]
    f17c:	9103      	str	r1, [sp, #12]
    f17e:	9302      	str	r3, [sp, #8]
    f180:	9201      	str	r2, [sp, #4]
    f182:	a901      	add	r1, sp, #4
    f184:	f002 f915 	bl	113b2 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E>
    f188:	e7ff      	b.n	f18a <_ZN4core4iter6traits8iterator8Iterator7flatten17hb125ae9dc567cfd9E+0x18>
    f18a:	b004      	add	sp, #16
    f18c:	bd80      	pop	{r7, pc}

0000f18e <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h116a6636383259eeE>:
    f18e:	b083      	sub	sp, #12
    f190:	9100      	str	r1, [sp, #0]
    f192:	9201      	str	r2, [sp, #4]
    f194:	9302      	str	r3, [sp, #8]
    f196:	6001      	str	r1, [r0, #0]
    f198:	6042      	str	r2, [r0, #4]
    f19a:	6083      	str	r3, [r0, #8]
    f19c:	b003      	add	sp, #12
    f19e:	4770      	bx	lr

0000f1a0 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h1647783578bb3807E>:
    f1a0:	b083      	sub	sp, #12
    f1a2:	9100      	str	r1, [sp, #0]
    f1a4:	9201      	str	r2, [sp, #4]
    f1a6:	9302      	str	r3, [sp, #8]
    f1a8:	6001      	str	r1, [r0, #0]
    f1aa:	6042      	str	r2, [r0, #4]
    f1ac:	6083      	str	r3, [r0, #8]
    f1ae:	b003      	add	sp, #12
    f1b0:	4770      	bx	lr

0000f1b2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc3726000bdb855aE>:
    f1b2:	680a      	ldr	r2, [r1, #0]
    f1b4:	684b      	ldr	r3, [r1, #4]
    f1b6:	6889      	ldr	r1, [r1, #8]
    f1b8:	6081      	str	r1, [r0, #8]
    f1ba:	6043      	str	r3, [r0, #4]
    f1bc:	6002      	str	r2, [r0, #0]
    f1be:	4770      	bx	lr

0000f1c0 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E>:
    f1c0:	b580      	push	{r7, lr}
    f1c2:	b086      	sub	sp, #24
    f1c4:	9105      	str	r1, [sp, #20]
    f1c6:	9004      	str	r0, [sp, #16]
    f1c8:	4608      	mov	r0, r1
    f1ca:	9103      	str	r1, [sp, #12]
    f1cc:	f002 fc81 	bl	11ad2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f1d0:	9002      	str	r0, [sp, #8]
    f1d2:	9101      	str	r1, [sp, #4]
    f1d4:	e7ff      	b.n	f1d6 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E+0x16>
    f1d6:	9803      	ldr	r0, [sp, #12]
    f1d8:	f100 0308 	add.w	r3, r0, #8
    f1dc:	9804      	ldr	r0, [sp, #16]
    f1de:	9902      	ldr	r1, [sp, #8]
    f1e0:	9a01      	ldr	r2, [sp, #4]
    f1e2:	f7f9 fb43 	bl	886c <_ZN4core6option15Option$LT$T$GT$3map17he9798d2ffad9b3eaE>
    f1e6:	e7ff      	b.n	f1e8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E+0x28>
    f1e8:	b006      	add	sp, #24
    f1ea:	bd80      	pop	{r7, pc}

0000f1ec <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE>:
    f1ec:	b580      	push	{r7, lr}
    f1ee:	b086      	sub	sp, #24
    f1f0:	9105      	str	r1, [sp, #20]
    f1f2:	9004      	str	r0, [sp, #16]
    f1f4:	4608      	mov	r0, r1
    f1f6:	9103      	str	r1, [sp, #12]
    f1f8:	f002 fc6b 	bl	11ad2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    f1fc:	9002      	str	r0, [sp, #8]
    f1fe:	9101      	str	r1, [sp, #4]
    f200:	e7ff      	b.n	f202 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE+0x16>
    f202:	9803      	ldr	r0, [sp, #12]
    f204:	f100 0308 	add.w	r3, r0, #8
    f208:	9804      	ldr	r0, [sp, #16]
    f20a:	9902      	ldr	r1, [sp, #8]
    f20c:	9a01      	ldr	r2, [sp, #4]
    f20e:	f7f9 fae0 	bl	87d2 <_ZN4core6option15Option$LT$T$GT$3map17h89a980b2f6ceac9fE>
    f212:	e7ff      	b.n	f214 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE+0x28>
    f214:	b006      	add	sp, #24
    f216:	bd80      	pop	{r7, pc}

0000f218 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E>:
/// CHIP8 Virtual Pixel size, in Physical Pixels
const PIXEL_WIDTH: usize = 3;
const PIXEL_HEIGHT: usize = 5;

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    f218:	b580      	push	{r7, lr}
    f21a:	b0a4      	sub	sp, #144	; 0x90
    console::print("Rust CHIP8\n"); console::flush();
    f21c:	f64c 709c 	movw	r0, #53148	; 0xcf9c
    f220:	f2c0 0001 	movt	r0, #1
    f224:	210b      	movs	r1, #11
    f226:	f7f9 ff67 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f22a:	e7ff      	b.n	f22c <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x14>
    f22c:	f7f9 ffaa 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f230:	e7ff      	b.n	f232 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x1a>
    f232:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    f234:	900e      	str	r0, [sp, #56]	; 0x38
    f236:	990e      	ldr	r1, [sp, #56]	; 0x38
    f238:	f002 fa51 	bl	116de <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    f23c:	900d      	str	r0, [sp, #52]	; 0x34
    f23e:	910c      	str	r1, [sp, #48]	; 0x30
    f240:	e7ff      	b.n	f242 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x2a>
    f242:	20ef      	movs	r0, #239	; 0xef
    f244:	900b      	str	r0, [sp, #44]	; 0x2c
    f246:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f248:	f002 fa49 	bl	116de <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    f24c:	900a      	str	r0, [sp, #40]	; 0x28
    f24e:	9109      	str	r1, [sp, #36]	; 0x24
    f250:	e7ff      	b.n	f252 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x3a>
    let background = Rectangle::<Rgb565>
    f252:	4668      	mov	r0, sp
    f254:	9909      	ldr	r1, [sp, #36]	; 0x24
    f256:	6001      	str	r1, [r0, #0]
    f258:	a817      	add	r0, sp, #92	; 0x5c
    f25a:	990d      	ldr	r1, [sp, #52]	; 0x34
    f25c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f25e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f260:	f005 fa7c 	bl	1475c <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    f264:	e7ff      	b.n	f266 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x4e>
    f266:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    f268:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
    f26c:	f88d 007d 	strb.w	r0, [sp, #125]	; 0x7d
    f270:	f88d 007e 	strb.w	r0, [sp, #126]	; 0x7e
    f274:	f89d 007e 	ldrb.w	r0, [sp, #126]	; 0x7e
    f278:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
    f27c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    f280:	f002 fa36 	bl	116f0 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    f284:	9008      	str	r0, [sp, #32]
    f286:	e7ff      	b.n	f288 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x70>
    f288:	9808      	ldr	r0, [sp, #32]
    f28a:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    f28e:	2101      	movs	r1, #1
    f290:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
    let background = Rectangle::<Rgb565>
    f294:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    f298:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    f29c:	a810      	add	r0, sp, #64	; 0x40
    f29e:	a917      	add	r1, sp, #92	; 0x5c
    f2a0:	f005 fa4a 	bl	14738 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    f2a4:	e7ff      	b.n	f2a6 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x8e>
    f2a6:	2000      	movs	r0, #0
    f2a8:	223f      	movs	r2, #63	; 0x3f
    f2aa:	231f      	movs	r3, #31

    //  Render background to display
    //  druid::draw_to_display(background);
    render_region(0, 0, SCREEN_WIDTH as u8 - 1, SCREEN_HEIGHT as u8 - 1);
    f2ac:	9007      	str	r0, [sp, #28]
    f2ae:	9907      	ldr	r1, [sp, #28]
    f2b0:	f000 fb77 	bl	f9a2 <_ZN3app5chip813render_region17hc692a4d55cab74f0E>
    f2b4:	e7ff      	b.n	f2b6 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x9e>

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    f2b6:	f64c 70bc 	movw	r0, #53180	; 0xcfbc
    f2ba:	f2c0 0001 	movt	r0, #1
    f2be:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    f2c0:	f24f 3041 	movw	r0, #62273	; 0xf341
    f2c4:	f2c0 0000 	movt	r0, #0
    f2c8:	9021      	str	r0, [sp, #132]	; 0x84
    os::task_init(                  //  Create a new task and start it...
    f2ca:	9a21      	ldr	r2, [sp, #132]	; 0x84
    f2cc:	4668      	mov	r0, sp
    f2ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    f2d2:	6103      	str	r3, [r0, #16]
    f2d4:	60c3      	str	r3, [r0, #12]
    f2d6:	f240 13b4 	movw	r3, #436	; 0x1b4
    f2da:	f2c2 0300 	movt	r3, #8192	; 0x2000
    f2de:	6083      	str	r3, [r0, #8]
    f2e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f2e4:	6043      	str	r3, [r0, #4]
    f2e6:	2314      	movs	r3, #20
    f2e8:	6003      	str	r3, [r0, #0]
    f2ea:	f240 1064 	movw	r0, #356	; 0x164
    f2ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f2f2:	2300      	movs	r3, #0
    f2f4:	f7f9 fd50 	bl	8d98 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    f2f8:	9006      	str	r0, [sp, #24]
    f2fa:	e7ff      	b.n	f2fc <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xe4>
    f2fc:	9806      	ldr	r0, [sp, #24]
    f2fe:	f7f9 fcbf 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    f302:	9020      	str	r0, [sp, #128]	; 0x80
    f304:	e7ff      	b.n	f306 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xee>
        NULL,  //  Argument to be passed to above function
        20,    //  Task priority: highest is 0, lowest is 255 (main task is 127), SPI is 10
        os::OS_WAIT_FOREVER as u32,       //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                                 //  `?` means check for error
    f306:	9820      	ldr	r0, [sp, #128]	; 0x80
    f308:	1e41      	subs	r1, r0, #1
    f30a:	bf18      	it	ne
    f30c:	2101      	movne	r1, #1
    f30e:	2801      	cmp	r0, #1
    f310:	d001      	beq.n	f316 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xfe>
    f312:	e7ff      	b.n	f314 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0xfc>
    f314:	e005      	b.n	f322 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x10a>
    f316:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    f318:	900f      	str	r0, [sp, #60]	; 0x3c
    f31a:	2001      	movs	r0, #1
    f31c:	900f      	str	r0, [sp, #60]	; 0x3c
}
    f31e:	e006      	b.n	f32e <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x116>
    os::task_init(                  //  Create a new task and start it...
    f320:	defe      	udf	#254	; 0xfe
    ) ? ;                                 //  `?` means check for error
    f322:	9820      	ldr	r0, [sp, #128]	; 0x80
    f324:	9023      	str	r0, [sp, #140]	; 0x8c
    f326:	f003 f8d7 	bl	124d8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    f32a:	9005      	str	r0, [sp, #20]
    f32c:	e002      	b.n	f334 <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x11c>
}
    f32e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    f330:	b024      	add	sp, #144	; 0x90
    f332:	bd80      	pop	{r7, pc}
    ) ? ;                                 //  `?` means check for error
    f334:	9805      	ldr	r0, [sp, #20]
    f336:	f7f9 fc97 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    f33a:	900f      	str	r0, [sp, #60]	; 0x3c
    f33c:	e7ff      	b.n	f33e <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x126>
    f33e:	e7f6      	b.n	f32e <_ZN3app5chip88on_start17h13652dc8e27bf6d4E+0x116>

0000f340 <_ZN3app5chip89task_func17h20d1a4715d78a45aE>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 4096;  //  Must be 4096 and above because CHIP8 Emulator requires substantial stack space

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {    
    f340:	b580      	push	{r7, lr}
    f342:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
    f346:	b082      	sub	sp, #8
    f348:	f50d 5103 	add.w	r1, sp, #8384	; 0x20c0
    f34c:	6008      	str	r0, [r1, #0]
    f34e:	a804      	add	r0, sp, #16
    //  Create the hardware API for rendering the emulator
    let hardware = Hardware::new();
    f350:	9103      	str	r1, [sp, #12]
    f352:	f000 f850 	bl	f3f6 <_ZN3app5chip88Hardware3new17h53332fc09faf36beE>
    f356:	e7ff      	b.n	f358 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x18>

    //  Create the emulator
    let chip8 = libchip8::Chip8::new(hardware);
    f358:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    f35c:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    f360:	f8ae 006c 	strh.w	r0, [lr, #108]	; 0x6c
    f364:	9804      	ldr	r0, [sp, #16]
    f366:	f50d 5e80 	add.w	lr, sp, #4096	; 0x1000
    f36a:	f8ce 0068 	str.w	r0, [lr, #104]	; 0x68
    f36e:	a806      	add	r0, sp, #24
    f370:	f10d 0e08 	add.w	lr, sp, #8
    f374:	f50e 5183 	add.w	r1, lr, #4192	; 0x1060
    f378:	f7fb fc7e 	bl	ac78 <_ZN8libchip814Chip8$LT$T$GT$3new17hca880a1e3fbd9a67E>
    f37c:	e7ff      	b.n	f37e <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x3e>
    console::print("CHIP8 started\n"); console::flush();
    f37e:	f64c 70c0 	movw	r0, #53184	; 0xcfc0
    f382:	f2c0 0001 	movt	r0, #1
    f386:	210e      	movs	r1, #14
    f388:	f7f9 feb6 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f38c:	e7ff      	b.n	f38e <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x4e>
    f38e:	f7f9 fef9 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f392:	e7ff      	b.n	f394 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x54>

    //  Load the emulator ROM
    //  let rom = include_bytes!("../roms/invaders.ch8");
    let rom = include_bytes!("../roms/blinky.ch8");
    f394:	f64c 70ce 	movw	r0, #53198	; 0xcfce
    f398:	f2c0 0001 	movt	r0, #1
    f39c:	9903      	ldr	r1, [sp, #12]
    f39e:	6048      	str	r0, [r1, #4]
    f3a0:	f10d 0e10 	add.w	lr, sp, #16
    f3a4:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    f3a8:	a906      	add	r1, sp, #24
    f3aa:	f241 0350 	movw	r3, #4176	; 0x1050
    //  let rom = include_bytes!("../roms/pong.ch8");

    //  Run the emulator ROM. This will block until emulator terminates
    chip8.run(rom);
    f3ae:	9002      	str	r0, [sp, #8]
    f3b0:	4610      	mov	r0, r2
    f3b2:	9201      	str	r2, [sp, #4]
    f3b4:	461a      	mov	r2, r3
    f3b6:	f00c fb9b 	bl	1baf0 <__aeabi_memcpy>
    f3ba:	f640 1234 	movw	r2, #2356	; 0x934
    f3be:	9801      	ldr	r0, [sp, #4]
    f3c0:	9902      	ldr	r1, [sp, #8]
    f3c2:	f7fb fd08 	bl	add6 <_ZN8libchip814Chip8$LT$T$GT$3run17hd778633fa4454690E>
    f3c6:	e7ff      	b.n	f3c8 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x88>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    f3c8:	f64d 1002 	movw	r0, #55554	; 0xd902
    f3cc:	f2c0 0001 	movt	r0, #1
    f3d0:	210b      	movs	r1, #11
    f3d2:	f7f9 fe91 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f3d6:	e7ff      	b.n	f3d8 <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x98>
    f3d8:	f7f9 fed4 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f3dc:	e7ff      	b.n	f3de <_ZN3app5chip89task_func17h20d1a4715d78a45aE+0x9e>
    assert!(false, "CHIP8 should not end");
    f3de:	f64d 100d 	movw	r0, #55565	; 0xd90d
    f3e2:	f2c0 0001 	movt	r0, #1
    f3e6:	f64d 1238 	movw	r2, #55608	; 0xd938
    f3ea:	f2c0 0201 	movt	r2, #1
    f3ee:	2114      	movs	r1, #20
    f3f0:	f006 f872 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f3f4:	defe      	udf	#254	; 0xfe

0000f3f6 <_ZN3app5chip88Hardware3new17h53332fc09faf36beE>:
    is_checking_input: bool,
}

impl Hardware {
    /// Return a new Hardware API for rendering CHIP8 Emulator
    pub fn new() -> Hardware {
    f3f6:	2100      	movs	r1, #0
        Hardware {
    f3f8:	7001      	strb	r1, [r0, #0]
    f3fa:	7041      	strb	r1, [r0, #1]
    f3fc:	7081      	strb	r1, [r0, #2]
    f3fe:	70c1      	strb	r1, [r0, #3]
    f400:	7101      	strb	r1, [r0, #4]
    f402:	7141      	strb	r1, [r0, #5]
            update_right: 0,
            update_bottom: 0,
            is_interactive: false,
            is_checking_input: false,
        }
    }
    f404:	4770      	bx	lr

0000f406 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17hd3173c320d2551cfE>:
}

impl libchip8::Hardware for Hardware {
    /// Return a random value.
    fn rand(&mut self) -> u8 {
    f406:	b081      	sub	sp, #4
    f408:	9000      	str	r0, [sp, #0]
    f40a:	207b      	movs	r0, #123	; 0x7b
        123  //  TODO
    }
    f40c:	b001      	add	sp, #4
    f40e:	4770      	bx	lr

0000f410 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E>:

    /// Check if the key is pressed.
    fn key(&mut self, _key: u8) -> bool {
    f410:	b580      	push	{r7, lr}
    f412:	b084      	sub	sp, #16
    f414:	460a      	mov	r2, r1
    f416:	9002      	str	r0, [sp, #8]
    f418:	f88d 100f 	strb.w	r1, [sp, #15]
        if !self.is_interactive {
    f41c:	7901      	ldrb	r1, [r0, #4]
    f41e:	07c9      	lsls	r1, r1, #31
    f420:	2900      	cmp	r1, #0
    f422:	9001      	str	r0, [sp, #4]
    f424:	d10f      	bne.n	f446 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x36>
    f426:	e7ff      	b.n	f428 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x18>
    f428:	2001      	movs	r0, #1
            self.is_interactive = true;
    f42a:	9901      	ldr	r1, [sp, #4]
    f42c:	7108      	strb	r0, [r1, #4]
            console::print("key\n"); console::flush(); ////
    f42e:	f64d 1048 	movw	r0, #55624	; 0xd948
    f432:	f2c0 0001 	movt	r0, #1
    f436:	2104      	movs	r1, #4
    f438:	f7f9 fe5e 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f43c:	e7ff      	b.n	f43e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x2e>
    f43e:	f7f9 fea1 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f442:	e7ff      	b.n	f444 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x34>
        if !self.is_interactive {
    f444:	e7ff      	b.n	f446 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hd49eb08a2cd2bb94E+0x36>
    f446:	2001      	movs	r0, #1
        }
        self.is_checking_input = true;
    f448:	9901      	ldr	r1, [sp, #4]
    f44a:	7148      	strb	r0, [r1, #5]
    f44c:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    f44e:	b004      	add	sp, #16
    f450:	bd80      	pop	{r7, pc}

0000f452 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE>:

    /// Set the state of a pixel in the screen. true for white, and false for black.
    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    f452:	b08c      	sub	sp, #48	; 0x30
    f454:	469c      	mov	ip, r3
    f456:	9007      	str	r0, [sp, #28]
    f458:	9108      	str	r1, [sp, #32]
    f45a:	9209      	str	r2, [sp, #36]	; 0x24
    f45c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
        //  console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    f460:	293f      	cmp	r1, #63	; 0x3f
    f462:	9205      	str	r2, [sp, #20]
    f464:	9104      	str	r1, [sp, #16]
    f466:	9003      	str	r0, [sp, #12]
    f468:	f8cd c008 	str.w	ip, [sp, #8]
    f46c:	d804      	bhi.n	f478 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x26>
    f46e:	e7ff      	b.n	f470 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1e>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f470:	9805      	ldr	r0, [sp, #20]
    f472:	281f      	cmp	r0, #31
    f474:	d814      	bhi.n	f4a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x4e>
    f476:	e00b      	b.n	f490 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x3e>
        assert!(x < SCREEN_WIDTH, "x overflow");
    f478:	f64d 104c 	movw	r0, #55628	; 0xd94c
    f47c:	f2c0 0001 	movt	r0, #1
    f480:	f64d 1258 	movw	r2, #55640	; 0xd958
    f484:	f2c0 0201 	movt	r2, #1
    f488:	210a      	movs	r1, #10
    f48a:	f006 f825 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f48e:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f490:	9805      	ldr	r0, [sp, #20]
    f492:	0181      	lsls	r1, r0, #6
    f494:	0e82      	lsrs	r2, r0, #26
    f496:	2a00      	cmp	r2, #0
    f498:	9101      	str	r1, [sp, #4]
    f49a:	f040 80be 	bne.w	f61a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1c8>
    f49e:	e00b      	b.n	f4b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x66>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f4a0:	f64d 1068 	movw	r0, #55656	; 0xd968
    f4a4:	f2c0 0001 	movt	r0, #1
    f4a8:	f64d 1274 	movw	r2, #55668	; 0xd974
    f4ac:	f2c0 0201 	movt	r2, #1
    f4b0:	210a      	movs	r1, #10
    f4b2:	f006 f811 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f4b6:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f4b8:	9804      	ldr	r0, [sp, #16]
    f4ba:	9901      	ldr	r1, [sp, #4]
    f4bc:	1842      	adds	r2, r0, r1
    f4be:	4613      	mov	r3, r2
    f4c0:	4282      	cmp	r2, r0
    f4c2:	9300      	str	r3, [sp, #0]
    f4c4:	f0c0 80b5 	bcc.w	f632 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1e0>
    f4c8:	e7ff      	b.n	f4ca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x78>
    f4ca:	9800      	ldr	r0, [sp, #0]
    f4cc:	900b      	str	r0, [sp, #44]	; 0x2c
        unsafe { SCREEN_BUFFER[i] = 
            if d {
    f4ce:	9902      	ldr	r1, [sp, #8]
    f4d0:	07ca      	lsls	r2, r1, #31
    f4d2:	2a00      	cmp	r2, #0
    f4d4:	d106      	bne.n	f4e4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x92>
    f4d6:	e7ff      	b.n	f4d8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x86>
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
                else { 200 }                    //  Darker colour for initial screen
            } 
            else { 
                if self.is_interactive { 127 }  //  Fade to black
    f4d8:	9803      	ldr	r0, [sp, #12]
    f4da:	7901      	ldrb	r1, [r0, #4]
    f4dc:	07c9      	lsls	r1, r1, #31
    f4de:	2900      	cmp	r1, #0
    f4e0:	d113      	bne.n	f50a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xb8>
    f4e2:	e00e      	b.n	f502 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xb0>
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    f4e4:	9803      	ldr	r0, [sp, #12]
    f4e6:	7901      	ldrb	r1, [r0, #4]
    f4e8:	07c9      	lsls	r1, r1, #31
    f4ea:	2900      	cmp	r1, #0
    f4ec:	d104      	bne.n	f4f8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xa6>
    f4ee:	e7ff      	b.n	f4f0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x9e>
    f4f0:	20c8      	movs	r0, #200	; 0xc8
                else { 200 }                    //  Darker colour for initial screen
    f4f2:	f88d 0018 	strb.w	r0, [sp, #24]
                if self.is_interactive { 255 }  //  Brighter colour when emulator is active
    f4f6:	e003      	b.n	f500 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xae>
    f4f8:	20ff      	movs	r0, #255	; 0xff
    f4fa:	f88d 0018 	strb.w	r0, [sp, #24]
    f4fe:	e7ff      	b.n	f500 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xae>
            if d {
    f500:	e008      	b.n	f514 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc2>
    f502:	2000      	movs	r0, #0
                else { 0 }                      //  Black for initial screen                 
    f504:	f88d 0018 	strb.w	r0, [sp, #24]
                if self.is_interactive { 127 }  //  Fade to black
    f508:	e003      	b.n	f512 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc0>
    f50a:	207f      	movs	r0, #127	; 0x7f
    f50c:	f88d 0018 	strb.w	r0, [sp, #24]
    f510:	e7ff      	b.n	f512 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc0>
            if d {
    f512:	e7ff      	b.n	f514 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xc2>
    f514:	2000      	movs	r0, #0
        unsafe { SCREEN_BUFFER[i] = 
    f516:	9900      	ldr	r1, [sp, #0]
    f518:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    f51c:	f040 8095 	bne.w	f64a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1f8>
    f520:	e7ff      	b.n	f522 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xd0>
    f522:	f244 10b4 	movw	r0, #16820	; 0x41b4
    f526:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f52a:	f89d 1018 	ldrb.w	r1, [sp, #24]
    f52e:	9a00      	ldr	r2, [sp, #0]
    f530:	5481      	strb	r1, [r0, r2]
            }  
        };

        //  Remember the boundaries of the screen region to be updated
        if self.update_left == 0 && self.update_right == 0 &&
    f532:	9803      	ldr	r0, [sp, #12]
    f534:	7801      	ldrb	r1, [r0, #0]
    f536:	2900      	cmp	r1, #0
    f538:	d02e      	beq.n	f598 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x146>
    f53a:	e029      	b.n	f590 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x13e>
    f53c:	2001      	movs	r0, #1
    f53e:	f88d 0019 	strb.w	r0, [sp, #25]
    f542:	e008      	b.n	f556 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x104>
    f544:	2000      	movs	r0, #0
    f546:	f88d 0019 	strb.w	r0, [sp, #25]
    f54a:	e004      	b.n	f556 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x104>
            self.update_top == 0 && self.update_bottom == 0 {
    f54c:	9803      	ldr	r0, [sp, #12]
    f54e:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    f550:	2900      	cmp	r1, #0
    f552:	d0f3      	beq.n	f53c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xea>
    f554:	e7f6      	b.n	f544 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xf2>
    f556:	f89d 0019 	ldrb.w	r0, [sp, #25]
    f55a:	07c0      	lsls	r0, r0, #31
    f55c:	2800      	cmp	r0, #0
    f55e:	d126      	bne.n	f5ae <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x15c>
    f560:	e02d      	b.n	f5be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x16c>
    f562:	2001      	movs	r0, #1
    f564:	f88d 001a 	strb.w	r0, [sp, #26]
    f568:	e008      	b.n	f57c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x12a>
    f56a:	2000      	movs	r0, #0
    f56c:	f88d 001a 	strb.w	r0, [sp, #26]
    f570:	e004      	b.n	f57c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x12a>
            self.update_top == 0 && self.update_bottom == 0 {
    f572:	9803      	ldr	r0, [sp, #12]
    f574:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    f576:	2900      	cmp	r1, #0
    f578:	d0f3      	beq.n	f562 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x110>
    f57a:	e7f6      	b.n	f56a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x118>
    f57c:	f89d 001a 	ldrb.w	r0, [sp, #26]
    f580:	07c0      	lsls	r0, r0, #31
    f582:	2800      	cmp	r0, #0
    f584:	d1e2      	bne.n	f54c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xfa>
    f586:	e7dd      	b.n	f544 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0xf2>
    f588:	2001      	movs	r0, #1
    f58a:	f88d 001b 	strb.w	r0, [sp, #27]
    f58e:	e008      	b.n	f5a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x150>
    f590:	2000      	movs	r0, #0
    f592:	f88d 001b 	strb.w	r0, [sp, #27]
    f596:	e004      	b.n	f5a2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x150>
    f598:	9803      	ldr	r0, [sp, #12]
    f59a:	7881      	ldrb	r1, [r0, #2]
    f59c:	2900      	cmp	r1, #0
    f59e:	d0f3      	beq.n	f588 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x136>
    f5a0:	e7f6      	b.n	f590 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x13e>
    f5a2:	f89d 001b 	ldrb.w	r0, [sp, #27]
    f5a6:	07c0      	lsls	r0, r0, #31
    f5a8:	2800      	cmp	r0, #0
    f5aa:	d1e2      	bne.n	f572 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x120>
    f5ac:	e7dd      	b.n	f56a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x118>
            self.update_left = x as u8;
    f5ae:	9804      	ldr	r0, [sp, #16]
    f5b0:	9903      	ldr	r1, [sp, #12]
    f5b2:	7008      	strb	r0, [r1, #0]
            self.update_right = x as u8;
    f5b4:	7088      	strb	r0, [r1, #2]
            self.update_top = y as u8;
    f5b6:	9a05      	ldr	r2, [sp, #20]
    f5b8:	704a      	strb	r2, [r1, #1]
            self.update_bottom = y as u8;
    f5ba:	70ca      	strb	r2, [r1, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    f5bc:	e7ff      	b.n	f5be <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x16c>
        }
        if (x as u8) < self.update_left { self.update_left = x as u8; }
    f5be:	9804      	ldr	r0, [sp, #16]
    f5c0:	b2c1      	uxtb	r1, r0
    f5c2:	9a03      	ldr	r2, [sp, #12]
    f5c4:	7813      	ldrb	r3, [r2, #0]
    f5c6:	4299      	cmp	r1, r3
    f5c8:	d204      	bcs.n	f5d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x182>
    f5ca:	e7ff      	b.n	f5cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x17a>
    f5cc:	9804      	ldr	r0, [sp, #16]
    f5ce:	9903      	ldr	r1, [sp, #12]
    f5d0:	7008      	strb	r0, [r1, #0]
    f5d2:	e7ff      	b.n	f5d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x182>
        if (x as u8) > self.update_right { self.update_right = x as u8; }
    f5d4:	9804      	ldr	r0, [sp, #16]
    f5d6:	b2c1      	uxtb	r1, r0
    f5d8:	9a03      	ldr	r2, [sp, #12]
    f5da:	7893      	ldrb	r3, [r2, #2]
    f5dc:	4299      	cmp	r1, r3
    f5de:	d904      	bls.n	f5ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x198>
    f5e0:	e7ff      	b.n	f5e2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x190>
    f5e2:	9804      	ldr	r0, [sp, #16]
    f5e4:	9903      	ldr	r1, [sp, #12]
    f5e6:	7088      	strb	r0, [r1, #2]
    f5e8:	e7ff      	b.n	f5ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x198>
        if (y as u8) < self.update_top { self.update_top = y as u8; }
    f5ea:	9805      	ldr	r0, [sp, #20]
    f5ec:	b2c1      	uxtb	r1, r0
    f5ee:	9a03      	ldr	r2, [sp, #12]
    f5f0:	7853      	ldrb	r3, [r2, #1]
    f5f2:	4299      	cmp	r1, r3
    f5f4:	d204      	bcs.n	f600 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1ae>
    f5f6:	e7ff      	b.n	f5f8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1a6>
    f5f8:	9805      	ldr	r0, [sp, #20]
    f5fa:	9903      	ldr	r1, [sp, #12]
    f5fc:	7048      	strb	r0, [r1, #1]
    f5fe:	e7ff      	b.n	f600 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1ae>
        if (y as u8) > self.update_bottom { self.update_bottom = y as u8; }
    f600:	9805      	ldr	r0, [sp, #20]
    f602:	b2c1      	uxtb	r1, r0
    f604:	9a03      	ldr	r2, [sp, #12]
    f606:	78d3      	ldrb	r3, [r2, #3]
    f608:	4299      	cmp	r1, r3
    f60a:	d904      	bls.n	f616 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1c4>
    f60c:	e7ff      	b.n	f60e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1bc>
    f60e:	9805      	ldr	r0, [sp, #20]
    f610:	9903      	ldr	r1, [sp, #12]
    f612:	70c8      	strb	r0, [r1, #3]
    f614:	e7ff      	b.n	f616 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hfbd8b08403d4975dE+0x1c4>
    }
    f616:	b00c      	add	sp, #48	; 0x30
    f618:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    f61a:	f64d 10a0 	movw	r0, #55712	; 0xd9a0
    f61e:	f2c0 0001 	movt	r0, #1
    f622:	f64d 1284 	movw	r2, #55684	; 0xd984
    f626:	f2c0 0201 	movt	r2, #1
    f62a:	2121      	movs	r1, #33	; 0x21
    f62c:	f005 ff54 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f630:	defe      	udf	#254	; 0xfe
    f632:	f64d 10e0 	movw	r0, #55776	; 0xd9e0
    f636:	f2c0 0001 	movt	r0, #1
    f63a:	f64d 12c4 	movw	r2, #55748	; 0xd9c4
    f63e:	f2c0 0201 	movt	r2, #1
    f642:	211c      	movs	r1, #28
    f644:	f005 ff48 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f648:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = 
    f64a:	f64d 10fc 	movw	r0, #55804	; 0xd9fc
    f64e:	f2c0 0001 	movt	r0, #1
    f652:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f656:	9900      	ldr	r1, [sp, #0]
    f658:	f005 ff54 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    f65c:	defe      	udf	#254	; 0xfe

0000f65e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE>:

    /// Get the current state of a pixel in the screen.
    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    f65e:	b088      	sub	sp, #32
    f660:	9004      	str	r0, [sp, #16]
    f662:	9105      	str	r1, [sp, #20]
    f664:	9206      	str	r2, [sp, #24]
        //  console::print("get "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    f666:	293f      	cmp	r1, #63	; 0x3f
    f668:	9203      	str	r2, [sp, #12]
    f66a:	9102      	str	r1, [sp, #8]
    f66c:	d804      	bhi.n	f678 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x1a>
    f66e:	e7ff      	b.n	f670 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x12>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f670:	9803      	ldr	r0, [sp, #12]
    f672:	281f      	cmp	r0, #31
    f674:	d813      	bhi.n	f69e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x40>
    f676:	e00b      	b.n	f690 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x32>
        assert!(x < SCREEN_WIDTH, "x overflow");
    f678:	f64d 104c 	movw	r0, #55628	; 0xd94c
    f67c:	f2c0 0001 	movt	r0, #1
    f680:	f64d 220c 	movw	r2, #55820	; 0xda0c
    f684:	f2c0 0201 	movt	r2, #1
    f688:	210a      	movs	r1, #10
    f68a:	f005 ff25 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f68e:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f690:	9803      	ldr	r0, [sp, #12]
    f692:	0181      	lsls	r1, r0, #6
    f694:	0e82      	lsrs	r2, r0, #26
    f696:	2a00      	cmp	r2, #0
    f698:	9101      	str	r1, [sp, #4]
    f69a:	d128      	bne.n	f6ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x90>
    f69c:	e00b      	b.n	f6b6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x58>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    f69e:	f64d 1068 	movw	r0, #55656	; 0xd968
    f6a2:	f2c0 0001 	movt	r0, #1
    f6a6:	f64d 221c 	movw	r2, #55836	; 0xda1c
    f6aa:	f2c0 0201 	movt	r2, #1
    f6ae:	210a      	movs	r1, #10
    f6b0:	f005 ff12 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f6b4:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    f6b6:	9802      	ldr	r0, [sp, #8]
    f6b8:	9901      	ldr	r1, [sp, #4]
    f6ba:	1842      	adds	r2, r0, r1
    f6bc:	4613      	mov	r3, r2
    f6be:	4282      	cmp	r2, r0
    f6c0:	9300      	str	r3, [sp, #0]
    f6c2:	d320      	bcc.n	f706 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0xa8>
    f6c4:	e7ff      	b.n	f6c6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x68>
    f6c6:	9800      	ldr	r0, [sp, #0]
    f6c8:	9007      	str	r0, [sp, #28]
    f6ca:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] >= 128 }
    f6cc:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    f6d0:	d125      	bne.n	f71e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0xc0>
    f6d2:	e7ff      	b.n	f6d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h5eefd4370e48ed0fE+0x76>
    f6d4:	f244 10b4 	movw	r0, #16820	; 0x41b4
    f6d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f6dc:	9900      	ldr	r1, [sp, #0]
    f6de:	5640      	ldrsb	r0, [r0, r1]
    f6e0:	2200      	movs	r2, #0
    f6e2:	2800      	cmp	r0, #0
    f6e4:	bf48      	it	mi
    f6e6:	2201      	movmi	r2, #1
    }
    f6e8:	4610      	mov	r0, r2
    f6ea:	b008      	add	sp, #32
    f6ec:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    f6ee:	f64d 10a0 	movw	r0, #55712	; 0xd9a0
    f6f2:	f2c0 0001 	movt	r0, #1
    f6f6:	f64d 222c 	movw	r2, #55852	; 0xda2c
    f6fa:	f2c0 0201 	movt	r2, #1
    f6fe:	2121      	movs	r1, #33	; 0x21
    f700:	f005 feea 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f704:	defe      	udf	#254	; 0xfe
    f706:	f64d 10e0 	movw	r0, #55776	; 0xd9e0
    f70a:	f2c0 0001 	movt	r0, #1
    f70e:	f64d 223c 	movw	r2, #55868	; 0xda3c
    f712:	f2c0 0201 	movt	r2, #1
    f716:	211c      	movs	r1, #28
    f718:	f005 fede 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f71c:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] >= 128 }
    f71e:	f64d 204c 	movw	r0, #55884	; 0xda4c
    f722:	f2c0 0001 	movt	r0, #1
    f726:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f72a:	9900      	ldr	r1, [sp, #0]
    f72c:	f005 feea 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    f730:	defe      	udf	#254	; 0xfe

0000f732 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE>:

    /// Set the size of the screen.
    fn vram_setsize(&mut self, size: (usize, usize)) {
    f732:	b580      	push	{r7, lr}
    f734:	b086      	sub	sp, #24
    f736:	9003      	str	r0, [sp, #12]
    f738:	9104      	str	r1, [sp, #16]
    f73a:	9205      	str	r2, [sp, #20]
        //  Do nothing. We assume SCREEN_WIDTH and SCREEN_HEIGHT.
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    f73c:	2940      	cmp	r1, #64	; 0x40
    f73e:	9201      	str	r2, [sp, #4]
    f740:	9100      	str	r1, [sp, #0]
    f742:	d008      	beq.n	f756 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x24>
    f744:	e003      	b.n	f74e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x1c>
    f746:	2001      	movs	r0, #1
    f748:	f88d 000b 	strb.w	r0, [sp, #11]
    f74c:	e007      	b.n	f75e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x2c>
    f74e:	2000      	movs	r0, #0
    f750:	f88d 000b 	strb.w	r0, [sp, #11]
    f754:	e003      	b.n	f75e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x2c>
    f756:	9801      	ldr	r0, [sp, #4]
    f758:	2820      	cmp	r0, #32
    f75a:	d0f4      	beq.n	f746 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x14>
    f75c:	e7f7      	b.n	f74e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x1c>
    f75e:	f89d 000b 	ldrb.w	r0, [sp, #11]
    f762:	07c0      	lsls	r0, r0, #31
    f764:	2800      	cmp	r0, #0
    f766:	d008      	beq.n	f77a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x48>
    f768:	e7ff      	b.n	f76a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x38>
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    f76a:	f64d 2064 	movw	r0, #55908	; 0xda64
    f76e:	f2c0 0001 	movt	r0, #1
    f772:	2108      	movs	r1, #8
    f774:	f7f9 fcc0 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f778:	e00b      	b.n	f792 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x60>
        assert!(size.0 == SCREEN_WIDTH && size.1 == SCREEN_HEIGHT, "bad size");
    f77a:	f64d 205c 	movw	r0, #55900	; 0xda5c
    f77e:	f2c0 0001 	movt	r0, #1
    f782:	f64d 2284 	movw	r2, #55940	; 0xda84
    f786:	f2c0 0201 	movt	r2, #1
    f78a:	2108      	movs	r1, #8
    f78c:	f005 fea4 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f790:	defe      	udf	#254	; 0xfe
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    f792:	9800      	ldr	r0, [sp, #0]
    f794:	f7f9 fcee 	bl	9174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    f798:	e7ff      	b.n	f79a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x68>
    f79a:	f64d 2094 	movw	r0, #55956	; 0xda94
    f79e:	f2c0 0001 	movt	r0, #1
    f7a2:	2102      	movs	r1, #2
    f7a4:	f7f9 fca8 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f7a8:	e7ff      	b.n	f7aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x78>
    f7aa:	9801      	ldr	r0, [sp, #4]
    f7ac:	f7f9 fce2 	bl	9174 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    f7b0:	e7ff      	b.n	f7b2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x80>
    f7b2:	f64d 2096 	movw	r0, #55958	; 0xda96
    f7b6:	f2c0 0001 	movt	r0, #1
    f7ba:	2101      	movs	r1, #1
    f7bc:	f7f9 fc9c 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    f7c0:	e7ff      	b.n	f7c2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x90>
    f7c2:	f7f9 fcdf 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f7c6:	e7ff      	b.n	f7c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17ha40ef5564912f1bcE+0x96>
    }
    f7c8:	b006      	add	sp, #24
    f7ca:	bd80      	pop	{r7, pc}

0000f7cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hbb5c150f8fc596c2E>:

    /// Get the size of the screen.
    fn vram_size(&mut self) -> (usize, usize) {
    f7cc:	b083      	sub	sp, #12
    f7ce:	9002      	str	r0, [sp, #8]
    f7d0:	2040      	movs	r0, #64	; 0x40
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    f7d2:	9000      	str	r0, [sp, #0]
    f7d4:	2020      	movs	r0, #32
    f7d6:	9001      	str	r0, [sp, #4]
    }
    f7d8:	9800      	ldr	r0, [sp, #0]
    f7da:	9901      	ldr	r1, [sp, #4]
    f7dc:	b003      	add	sp, #12
    f7de:	4770      	bx	lr

0000f7e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E>:

    /// Return the current clock value in nanoseconds.
    fn clock(&mut self) -> u64 {
    f7e0:	b5b0      	push	{r4, r5, r7, lr}
    f7e2:	b086      	sub	sp, #24
    f7e4:	9005      	str	r0, [sp, #20]
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    f7e6:	f009 ff15 	bl	19614 <os_time_get>
    f7ea:	9004      	str	r0, [sp, #16]
    f7ec:	e7ff      	b.n	f7ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0xe>
    f7ee:	2000      	movs	r0, #0
    f7f0:	9904      	ldr	r1, [sp, #16]
    f7f2:	fba0 2301 	umull	r2, r3, r0, r1
    f7f6:	2b00      	cmp	r3, #0
    f7f8:	bf18      	it	ne
    f7fa:	2301      	movne	r3, #1
    f7fc:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    f800:	fba0 e40c 	umull	lr, r4, r0, ip
    f804:	2c00      	cmp	r4, #0
    f806:	bf18      	it	ne
    f808:	2401      	movne	r4, #1
    f80a:	ea43 0304 	orr.w	r3, r3, r4
    f80e:	4472      	add	r2, lr
    f810:	fba1 ce0c 	umull	ip, lr, r1, ip
    f814:	eb12 020e 	adds.w	r2, r2, lr
    f818:	f140 0000 	adc.w	r0, r0, #0
    f81c:	ea40 0003 	orr.w	r0, r0, r3
    f820:	2800      	cmp	r0, #0
    f822:	f8cd c00c 	str.w	ip, [sp, #12]
    f826:	9202      	str	r2, [sp, #8]
    f828:	d124      	bne.n	f874 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0x94>
    f82a:	e7ff      	b.n	f82c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0x4c>
    f82c:	2000      	movs	r0, #0
    f82e:	9903      	ldr	r1, [sp, #12]
    f830:	fba0 2301 	umull	r2, r3, r0, r1
    f834:	2b00      	cmp	r3, #0
    f836:	bf18      	it	ne
    f838:	2301      	movne	r3, #1
    f83a:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    f83e:	f8dd e008 	ldr.w	lr, [sp, #8]
    f842:	fbae 450c 	umull	r4, r5, lr, ip
    f846:	2d00      	cmp	r5, #0
    f848:	bf18      	it	ne
    f84a:	2501      	movne	r5, #1
    f84c:	ea43 0305 	orr.w	r3, r3, r5
    f850:	4422      	add	r2, r4
    f852:	fba1 c40c 	umull	ip, r4, r1, ip
    f856:	1912      	adds	r2, r2, r4
    f858:	f140 0000 	adc.w	r0, r0, #0
    f85c:	ea40 0003 	orr.w	r0, r0, r3
    f860:	2800      	cmp	r0, #0
    f862:	f8cd c004 	str.w	ip, [sp, #4]
    f866:	9200      	str	r2, [sp, #0]
    f868:	d110      	bne.n	f88c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0xac>
    f86a:	e7ff      	b.n	f86c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17h16b04d87e9a07932E+0x8c>
    }
    f86c:	9801      	ldr	r0, [sp, #4]
    f86e:	9900      	ldr	r1, [sp, #0]
    f870:	b006      	add	sp, #24
    f872:	bdb0      	pop	{r4, r5, r7, pc}
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    f874:	f64d 10a0 	movw	r0, #55712	; 0xd9a0
    f878:	f2c0 0001 	movt	r0, #1
    f87c:	f64d 2298 	movw	r2, #55960	; 0xda98
    f880:	f2c0 0201 	movt	r2, #1
    f884:	2121      	movs	r1, #33	; 0x21
    f886:	f005 fe27 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f88a:	defe      	udf	#254	; 0xfe
    f88c:	f64d 10a0 	movw	r0, #55712	; 0xd9a0
    f890:	f2c0 0001 	movt	r0, #1
    f894:	f64d 2298 	movw	r2, #55960	; 0xda98
    f898:	f2c0 0201 	movt	r2, #1
    f89c:	2121      	movs	r1, #33	; 0x21
    f89e:	f005 fe1b 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f8a2:	defe      	udf	#254	; 0xfe

0000f8a4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha9851d0b0cdc4725E>:

    /// Play beep sound.
    fn beep(&mut self) {
    f8a4:	b081      	sub	sp, #4
    f8a6:	9000      	str	r0, [sp, #0]
        //  TODO: Vibrate? Flash?
    }
    f8a8:	b001      	add	sp, #4
    f8aa:	4770      	bx	lr

0000f8ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E>:

    /// Called in every step; return true for shutdown.
    fn sched(&mut self) -> bool {
    f8ac:	b580      	push	{r7, lr}
    f8ae:	b084      	sub	sp, #16
    f8b0:	9003      	str	r0, [sp, #12]
        //  console::print("sched\n"); console::flush(); ////

        //  If no screen update, return
        if self.update_left == 0 && self.update_right == 0 &&
    f8b2:	7801      	ldrb	r1, [r0, #0]
    f8b4:	2900      	cmp	r1, #0
    f8b6:	9001      	str	r0, [sp, #4]
    f8b8:	d02e      	beq.n	f918 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x6c>
    f8ba:	e029      	b.n	f910 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x64>
    f8bc:	2001      	movs	r0, #1
    f8be:	f88d 0009 	strb.w	r0, [sp, #9]
    f8c2:	e008      	b.n	f8d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x2a>
    f8c4:	2000      	movs	r0, #0
    f8c6:	f88d 0009 	strb.w	r0, [sp, #9]
    f8ca:	e004      	b.n	f8d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x2a>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    f8cc:	9801      	ldr	r0, [sp, #4]
    f8ce:	78c1      	ldrb	r1, [r0, #3]
        if self.update_left == 0 && self.update_right == 0 &&
    f8d0:	2900      	cmp	r1, #0
    f8d2:	d0f3      	beq.n	f8bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x10>
    f8d4:	e7f6      	b.n	f8c4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x18>
    f8d6:	f89d 0009 	ldrb.w	r0, [sp, #9]
    f8da:	07c0      	lsls	r0, r0, #31
    f8dc:	2800      	cmp	r0, #0
    f8de:	d12c      	bne.n	f93a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x8e>
    f8e0:	e025      	b.n	f92e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x82>
    f8e2:	2001      	movs	r0, #1
    f8e4:	f88d 000a 	strb.w	r0, [sp, #10]
    f8e8:	e008      	b.n	f8fc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x50>
    f8ea:	2000      	movs	r0, #0
    f8ec:	f88d 000a 	strb.w	r0, [sp, #10]
    f8f0:	e004      	b.n	f8fc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x50>
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    f8f2:	9801      	ldr	r0, [sp, #4]
    f8f4:	7841      	ldrb	r1, [r0, #1]
        if self.update_left == 0 && self.update_right == 0 &&
    f8f6:	2900      	cmp	r1, #0
    f8f8:	d0f3      	beq.n	f8e2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x36>
    f8fa:	e7f6      	b.n	f8ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x3e>
    f8fc:	f89d 000a 	ldrb.w	r0, [sp, #10]
    f900:	07c0      	lsls	r0, r0, #31
    f902:	2800      	cmp	r0, #0
    f904:	d1e2      	bne.n	f8cc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x20>
    f906:	e7dd      	b.n	f8c4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x18>
    f908:	2001      	movs	r0, #1
    f90a:	f88d 000b 	strb.w	r0, [sp, #11]
    f90e:	e008      	b.n	f922 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x76>
    f910:	2000      	movs	r0, #0
    f912:	f88d 000b 	strb.w	r0, [sp, #11]
    f916:	e004      	b.n	f922 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x76>
    f918:	9801      	ldr	r0, [sp, #4]
    f91a:	7881      	ldrb	r1, [r0, #2]
    f91c:	2900      	cmp	r1, #0
    f91e:	d0f3      	beq.n	f908 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x5c>
    f920:	e7f6      	b.n	f910 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x64>
    f922:	f89d 000b 	ldrb.w	r0, [sp, #11]
    f926:	07c0      	lsls	r0, r0, #31
    f928:	2800      	cmp	r0, #0
    f92a:	d1e2      	bne.n	f8f2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x46>
    f92c:	e7dd      	b.n	f8ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x3e>

        //  If emulator is preparing the initial screen, refresh the screen later
        if !self.is_interactive { return false; }
    f92e:	9801      	ldr	r0, [sp, #4]
    f930:	7901      	ldrb	r1, [r0, #4]
    f932:	07c9      	lsls	r1, r1, #31
    f934:	2900      	cmp	r1, #0
    f936:	d00e      	beq.n	f956 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xaa>
    f938:	e007      	b.n	f94a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x9e>
    f93a:	2000      	movs	r0, #0
            self.update_top == 0 && self.update_bottom == 0 { return false; }
    f93c:	f88d 0008 	strb.w	r0, [sp, #8]
    f940:	e7ff      	b.n	f942 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>
        self.update_right = 0;
        self.update_bottom = 0;

        //  Return false to indicate no shutdown
        false
    }
    f942:	f89d 0008 	ldrb.w	r0, [sp, #8]
    f946:	b004      	add	sp, #16
    f948:	bd80      	pop	{r7, pc}
        if !self.is_checking_input { return false; }
    f94a:	9801      	ldr	r0, [sp, #4]
    f94c:	7941      	ldrb	r1, [r0, #5]
    f94e:	07c9      	lsls	r1, r1, #31
    f950:	2900      	cmp	r1, #0
    f952:	d00a      	beq.n	f96a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xbe>
    f954:	e003      	b.n	f95e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xb2>
    f956:	2000      	movs	r0, #0
        if !self.is_interactive { return false; }
    f958:	f88d 0008 	strb.w	r0, [sp, #8]
    f95c:	e7f1      	b.n	f942 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>
    f95e:	2000      	movs	r0, #0
        self.is_checking_input = false;
    f960:	9901      	ldr	r1, [sp, #4]
    f962:	7148      	strb	r0, [r1, #5]
        unsafe { hal_watchdog_tickle() };
    f964:	f008 fc2e 	bl	181c4 <hal_watchdog_tickle>
    f968:	e003      	b.n	f972 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xc6>
    f96a:	2000      	movs	r0, #0
        if !self.is_checking_input { return false; }
    f96c:	f88d 0008 	strb.w	r0, [sp, #8]
    f970:	e7e7      	b.n	f942 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>
    f972:	2001      	movs	r0, #1
        unsafe { os::os_time_delay(1) };
    f974:	f009 fe74 	bl	19660 <os_time_delay>
    f978:	e7ff      	b.n	f97a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xce>
        render_region(
    f97a:	9801      	ldr	r0, [sp, #4]
    f97c:	7800      	ldrb	r0, [r0, #0]
    f97e:	9901      	ldr	r1, [sp, #4]
    f980:	7849      	ldrb	r1, [r1, #1]
    f982:	9a01      	ldr	r2, [sp, #4]
    f984:	7892      	ldrb	r2, [r2, #2]
    f986:	9b01      	ldr	r3, [sp, #4]
    f988:	78db      	ldrb	r3, [r3, #3]
    f98a:	f000 f80a 	bl	f9a2 <_ZN3app5chip813render_region17hc692a4d55cab74f0E>
    f98e:	e7ff      	b.n	f990 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0xe4>
    f990:	2000      	movs	r0, #0
        self.update_left = 0;
    f992:	9901      	ldr	r1, [sp, #4]
    f994:	7008      	strb	r0, [r1, #0]
        self.update_top = 0;
    f996:	7048      	strb	r0, [r1, #1]
        self.update_right = 0;
    f998:	7088      	strb	r0, [r1, #2]
        self.update_bottom = 0;
    f99a:	70c8      	strb	r0, [r1, #3]
        false
    f99c:	f88d 0008 	strb.w	r0, [sp, #8]
    }
    f9a0:	e7cf      	b.n	f942 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17hfa067a2bd5bb3c34E+0x96>

0000f9a2 <_ZN3app5chip813render_region17hc692a4d55cab74f0E>:
}

/// Render the Virtual Screen region
fn render_region(left: u8, top: u8, right: u8, bottom: u8) {
    f9a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    f9a4:	b095      	sub	sp, #84	; 0x54
    f9a6:	fa5f fc80 	uxtb.w	ip, r0
    f9aa:	fa5f fe82 	uxtb.w	lr, r2
    f9ae:	461c      	mov	r4, r3
    f9b0:	4615      	mov	r5, r2
    f9b2:	460e      	mov	r6, r1
    f9b4:	4607      	mov	r7, r0
    f9b6:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    f9ba:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    f9be:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
    f9c2:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    let width = right - left + 1;
    f9c6:	ebae 000c 	sub.w	r0, lr, ip
    f9ca:	b2c1      	uxtb	r1, r0
    f9cc:	4602      	mov	r2, r0
    f9ce:	4281      	cmp	r1, r0
    f9d0:	9411      	str	r4, [sp, #68]	; 0x44
    f9d2:	9510      	str	r5, [sp, #64]	; 0x40
    f9d4:	960f      	str	r6, [sp, #60]	; 0x3c
    f9d6:	970e      	str	r7, [sp, #56]	; 0x38
    f9d8:	920d      	str	r2, [sp, #52]	; 0x34
    f9da:	f040 80df 	bne.w	fb9c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1fa>
    f9de:	e7ff      	b.n	f9e0 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x3e>
    f9e0:	2001      	movs	r0, #1
    f9e2:	990d      	ldr	r1, [sp, #52]	; 0x34
    f9e4:	fa50 f081 	uxtab	r0, r0, r1
    f9e8:	b2c2      	uxtb	r2, r0
    f9ea:	4603      	mov	r3, r0
    f9ec:	4282      	cmp	r2, r0
    f9ee:	930c      	str	r3, [sp, #48]	; 0x30
    f9f0:	f040 80e0 	bne.w	fbb4 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x212>
    f9f4:	e7ff      	b.n	f9f6 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x54>
    f9f6:	980c      	ldr	r0, [sp, #48]	; 0x30
    f9f8:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    let height = bottom - top + 1;
    f9fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    f9fe:	b2ca      	uxtb	r2, r1
    fa00:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fa02:	fa5f fc83 	uxtb.w	ip, r3
    fa06:	ebac 0202 	sub.w	r2, ip, r2
    fa0a:	fa5f fc82 	uxtb.w	ip, r2
    fa0e:	4696      	mov	lr, r2
    fa10:	4594      	cmp	ip, r2
    fa12:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    fa16:	f040 80d9 	bne.w	fbcc <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x22a>
    fa1a:	e7ff      	b.n	fa1c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x7a>
    fa1c:	2001      	movs	r0, #1
    fa1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fa20:	fa50 f081 	uxtab	r0, r0, r1
    fa24:	b2c2      	uxtb	r2, r0
    fa26:	4603      	mov	r3, r0
    fa28:	4282      	cmp	r2, r0
    fa2a:	930a      	str	r3, [sp, #40]	; 0x28
    fa2c:	f040 80da 	bne.w	fbe4 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x242>
    fa30:	e7ff      	b.n	fa32 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x90>
    fa32:	980a      	ldr	r0, [sp, #40]	; 0x28
    fa34:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
    //  If the update region is small, render with a single block
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    fa38:	990c      	ldr	r1, [sp, #48]	; 0x30
    fa3a:	b2ca      	uxtb	r2, r1
    fa3c:	fa52 f280 	uxtab	r2, r2, r0
    fa40:	b2d3      	uxtb	r3, r2
    fa42:	4694      	mov	ip, r2
    fa44:	4293      	cmp	r3, r2
    fa46:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    fa4a:	f040 80d7 	bne.w	fbfc <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x25a>
    fa4e:	e7ff      	b.n	fa50 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xae>
    fa50:	9809      	ldr	r0, [sp, #36]	; 0x24
    fa52:	b2c1      	uxtb	r1, r0
    fa54:	2926      	cmp	r1, #38	; 0x26
    fa56:	d307      	bcc.n	fa68 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xc6>
    fa58:	e7ff      	b.n	fa5a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xb8>
        render_block(left, top, right, bottom);
    } else {
        //  If the update region is too big for a single block, break the region into blocks and render
        let mut x = left;
    fa5a:	980e      	ldr	r0, [sp, #56]	; 0x38
    fa5c:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
        let mut y = top;
    fa60:	990f      	ldr	r1, [sp, #60]	; 0x3c
    fa62:	f88d 1049 	strb.w	r1, [sp, #73]	; 0x49
        loop {
    fa66:	e007      	b.n	fa78 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xd6>
        render_block(left, top, right, bottom);
    fa68:	980e      	ldr	r0, [sp, #56]	; 0x38
    fa6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    fa6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fa6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fa70:	f000 f918 	bl	fca4 <_ZN3app5chip812render_block17h6c8b81526965606bE>
    fa74:	e7ff      	b.n	fa76 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xd4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    fa76:	e08f      	b.n	fb98 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f6>
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    fa78:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    fa7c:	3020      	adds	r0, #32
    fa7e:	b2c1      	uxtb	r1, r0
    fa80:	4602      	mov	r2, r0
    fa82:	4281      	cmp	r1, r0
    fa84:	9208      	str	r2, [sp, #32]
    fa86:	f040 80c5 	bne.w	fc14 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x272>
    fa8a:	e7ff      	b.n	fa8c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xea>
    fa8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fa90:	9908      	ldr	r1, [sp, #32]
    fa92:	fa50 f081 	uxtab	r0, r0, r1
    fa96:	b2c2      	uxtb	r2, r0
    fa98:	4603      	mov	r3, r0
    fa9a:	4282      	cmp	r2, r0
    fa9c:	9307      	str	r3, [sp, #28]
    fa9e:	f040 80c5 	bne.w	fc2c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x28a>
    faa2:	e7ff      	b.n	faa4 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x102>
    faa4:	9807      	ldr	r0, [sp, #28]
    faa6:	f88d 0052 	strb.w	r0, [sp, #82]	; 0x52
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    faaa:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    faae:	3105      	adds	r1, #5
    fab0:	b2ca      	uxtb	r2, r1
    fab2:	460b      	mov	r3, r1
    fab4:	428a      	cmp	r2, r1
    fab6:	9306      	str	r3, [sp, #24]
    fab8:	f040 80c4 	bne.w	fc44 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2a2>
    fabc:	e7ff      	b.n	fabe <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x11c>
    fabe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    fac2:	9906      	ldr	r1, [sp, #24]
    fac4:	fa50 f081 	uxtab	r0, r0, r1
    fac8:	b2c2      	uxtb	r2, r0
    faca:	4603      	mov	r3, r0
    facc:	4282      	cmp	r2, r0
    face:	9305      	str	r3, [sp, #20]
    fad0:	f040 80c4 	bne.w	fc5c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2ba>
    fad4:	e7ff      	b.n	fad6 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x134>
    fad6:	9805      	ldr	r0, [sp, #20]
    fad8:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
            render_block(x, y,
    fadc:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    fae0:	f89d 2049 	ldrb.w	r2, [sp, #73]	; 0x49
                if block_right  <= right  { block_right }  else { right },
    fae4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fae6:	fa5f fc83 	uxtb.w	ip, r3
    faea:	f8dd e01c 	ldr.w	lr, [sp, #28]
    faee:	fa5f f48e 	uxtb.w	r4, lr
    faf2:	4564      	cmp	r4, ip
    faf4:	9104      	str	r1, [sp, #16]
    faf6:	9203      	str	r2, [sp, #12]
    faf8:	d904      	bls.n	fb04 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x162>
    fafa:	e7ff      	b.n	fafc <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x15a>
    fafc:	9810      	ldr	r0, [sp, #64]	; 0x40
    fafe:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    fb02:	e003      	b.n	fb0c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x16a>
    fb04:	9807      	ldr	r0, [sp, #28]
    fb06:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    fb0a:	e7ff      	b.n	fb0c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x16a>
                if block_bottom <= bottom { block_bottom } else { bottom }
    fb0c:	9811      	ldr	r0, [sp, #68]	; 0x44
    fb0e:	b2c1      	uxtb	r1, r0
    fb10:	9a05      	ldr	r2, [sp, #20]
    fb12:	b2d3      	uxtb	r3, r2
    fb14:	428b      	cmp	r3, r1
    fb16:	d904      	bls.n	fb22 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x180>
    fb18:	e7ff      	b.n	fb1a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x178>
    fb1a:	9811      	ldr	r0, [sp, #68]	; 0x44
    fb1c:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    fb20:	e003      	b.n	fb2a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x188>
    fb22:	9805      	ldr	r0, [sp, #20]
    fb24:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
    fb28:	e7ff      	b.n	fb2a <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x188>
            render_block(x, y,
    fb2a:	f89d 304b 	ldrb.w	r3, [sp, #75]	; 0x4b
    fb2e:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
    fb32:	9804      	ldr	r0, [sp, #16]
    fb34:	9903      	ldr	r1, [sp, #12]
    fb36:	f000 f8b5 	bl	fca4 <_ZN3app5chip812render_block17h6c8b81526965606bE>
    fb3a:	e7ff      	b.n	fb3c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x19a>
            );  //  Will not overflow SPI buffer
            x += BLOCK_WIDTH as u8;
    fb3c:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
    fb40:	3020      	adds	r0, #32
    fb42:	b2c1      	uxtb	r1, r0
    fb44:	4602      	mov	r2, r0
    fb46:	4281      	cmp	r1, r0
    fb48:	9202      	str	r2, [sp, #8]
    fb4a:	f040 8093 	bne.w	fc74 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2d2>
    fb4e:	e7ff      	b.n	fb50 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1ae>
    fb50:	9802      	ldr	r0, [sp, #8]
    fb52:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
            if x > right {
    fb56:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
    fb5a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fb5c:	b2d3      	uxtb	r3, r2
    fb5e:	4299      	cmp	r1, r3
    fb60:	d919      	bls.n	fb96 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f4>
    fb62:	e7ff      	b.n	fb64 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1c2>
                x = left;
    fb64:	980e      	ldr	r0, [sp, #56]	; 0x38
    fb66:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
                y += BLOCK_HEIGHT as u8;
    fb6a:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    fb6e:	3105      	adds	r1, #5
    fb70:	b2ca      	uxtb	r2, r1
    fb72:	460b      	mov	r3, r1
    fb74:	428a      	cmp	r2, r1
    fb76:	9301      	str	r3, [sp, #4]
    fb78:	f040 8088 	bne.w	fc8c <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x2ea>
    fb7c:	e7ff      	b.n	fb7e <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1dc>
    fb7e:	9801      	ldr	r0, [sp, #4]
    fb80:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
                if y > bottom { break; }
    fb84:	f89d 1049 	ldrb.w	r1, [sp, #73]	; 0x49
    fb88:	9a11      	ldr	r2, [sp, #68]	; 0x44
    fb8a:	b2d3      	uxtb	r3, r2
    fb8c:	4299      	cmp	r1, r3
    fb8e:	d801      	bhi.n	fb94 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f2>
    fb90:	e7ff      	b.n	fb92 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f0>
            if x > right {
    fb92:	e000      	b.n	fb96 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f4>
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    fb94:	e000      	b.n	fb98 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0x1f6>
        loop {
    fb96:	e76f      	b.n	fa78 <_ZN3app5chip813render_region17hc692a4d55cab74f0E+0xd6>
            }
        }
    }
}
    fb98:	b015      	add	sp, #84	; 0x54
    fb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    let width = right - left + 1;
    fb9c:	f64d 20c0 	movw	r0, #56000	; 0xdac0
    fba0:	f2c0 0001 	movt	r0, #1
    fba4:	f64d 22a8 	movw	r2, #55976	; 0xdaa8
    fba8:	f2c0 0201 	movt	r2, #1
    fbac:	2121      	movs	r1, #33	; 0x21
    fbae:	f005 fc93 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fbb2:	defe      	udf	#254	; 0xfe
    fbb4:	f64d 10e0 	movw	r0, #55776	; 0xd9e0
    fbb8:	f2c0 0001 	movt	r0, #1
    fbbc:	f64d 22a8 	movw	r2, #55976	; 0xdaa8
    fbc0:	f2c0 0201 	movt	r2, #1
    fbc4:	211c      	movs	r1, #28
    fbc6:	f005 fc87 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fbca:	defe      	udf	#254	; 0xfe
    let height = bottom - top + 1;
    fbcc:	f64d 20c0 	movw	r0, #56000	; 0xdac0
    fbd0:	f2c0 0001 	movt	r0, #1
    fbd4:	f64d 22e4 	movw	r2, #56036	; 0xdae4
    fbd8:	f2c0 0201 	movt	r2, #1
    fbdc:	2121      	movs	r1, #33	; 0x21
    fbde:	f005 fc7b 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fbe2:	defe      	udf	#254	; 0xfe
    fbe4:	f64d 10e0 	movw	r0, #55776	; 0xd9e0
    fbe8:	f2c0 0001 	movt	r0, #1
    fbec:	f64d 22e4 	movw	r2, #56036	; 0xdae4
    fbf0:	f2c0 0201 	movt	r2, #1
    fbf4:	211c      	movs	r1, #28
    fbf6:	f005 fc6f 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fbfa:	defe      	udf	#254	; 0xfe
    if width + height <= BLOCK_WIDTH as u8 + BLOCK_HEIGHT as u8 {  //  Will not overflow SPI buffer
    fbfc:	f64d 10e0 	movw	r0, #55776	; 0xd9e0
    fc00:	f2c0 0001 	movt	r0, #1
    fc04:	f64d 22f4 	movw	r2, #56052	; 0xdaf4
    fc08:	f2c0 0201 	movt	r2, #1
    fc0c:	211c      	movs	r1, #28
    fc0e:	f005 fc63 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc12:	defe      	udf	#254	; 0xfe
            let block_right = x + BLOCK_WIDTH as u8 - 1;
    fc14:	f64d 10e0 	movw	r0, #55776	; 0xd9e0
    fc18:	f2c0 0001 	movt	r0, #1
    fc1c:	f64d 3204 	movw	r2, #56068	; 0xdb04
    fc20:	f2c0 0201 	movt	r2, #1
    fc24:	211c      	movs	r1, #28
    fc26:	f005 fc57 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc2a:	defe      	udf	#254	; 0xfe
    fc2c:	f64d 20c0 	movw	r0, #56000	; 0xdac0
    fc30:	f2c0 0001 	movt	r0, #1
    fc34:	f64d 3204 	movw	r2, #56068	; 0xdb04
    fc38:	f2c0 0201 	movt	r2, #1
    fc3c:	2121      	movs	r1, #33	; 0x21
    fc3e:	f005 fc4b 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc42:	defe      	udf	#254	; 0xfe
            let block_bottom = y + BLOCK_HEIGHT as u8 - 1;
    fc44:	f64d 10e0 	movw	r0, #55776	; 0xd9e0
    fc48:	f2c0 0001 	movt	r0, #1
    fc4c:	f64d 3214 	movw	r2, #56084	; 0xdb14
    fc50:	f2c0 0201 	movt	r2, #1
    fc54:	211c      	movs	r1, #28
    fc56:	f005 fc3f 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc5a:	defe      	udf	#254	; 0xfe
    fc5c:	f64d 20c0 	movw	r0, #56000	; 0xdac0
    fc60:	f2c0 0001 	movt	r0, #1
    fc64:	f64d 3214 	movw	r2, #56084	; 0xdb14
    fc68:	f2c0 0201 	movt	r2, #1
    fc6c:	2121      	movs	r1, #33	; 0x21
    fc6e:	f005 fc33 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc72:	defe      	udf	#254	; 0xfe
            x += BLOCK_WIDTH as u8;
    fc74:	f64d 10e0 	movw	r0, #55776	; 0xd9e0
    fc78:	f2c0 0001 	movt	r0, #1
    fc7c:	f64d 3224 	movw	r2, #56100	; 0xdb24
    fc80:	f2c0 0201 	movt	r2, #1
    fc84:	211c      	movs	r1, #28
    fc86:	f005 fc27 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc8a:	defe      	udf	#254	; 0xfe
                y += BLOCK_HEIGHT as u8;
    fc8c:	f64d 10e0 	movw	r0, #55776	; 0xd9e0
    fc90:	f2c0 0001 	movt	r0, #1
    fc94:	f64d 3234 	movw	r2, #56116	; 0xdb34
    fc98:	f2c0 0201 	movt	r2, #1
    fc9c:	211c      	movs	r1, #28
    fc9e:	f005 fc1b 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fca2:	defe      	udf	#254	; 0xfe

0000fca4 <_ZN3app5chip812render_block17h6c8b81526965606bE>:

/// Render the Virtual Block
fn render_block(left: u8, top: u8, right: u8, bottom: u8) {
    fca4:	b570      	push	{r4, r5, r6, lr}
    fca6:	b090      	sub	sp, #64	; 0x40
    fca8:	469c      	mov	ip, r3
    fcaa:	4696      	mov	lr, r2
    fcac:	460c      	mov	r4, r1
    fcae:	4605      	mov	r5, r0
    fcb0:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
    fcb4:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
    fcb8:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
    fcbc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    //  console::print("render "); console::printint(left as i32); console::print(", "); console::printint(top as i32); console::print(", "); console::printint(right as i32 - left as i32); console::print(", "); console::printint(bottom as i32 - top as i32); console::print("\n"); console::flush(); ////
    //  Create a new block for the region to be updated
    let mut block = PixelIterator::new(
    fcc0:	466e      	mov	r6, sp
    fcc2:	6033      	str	r3, [r6, #0]
    fcc4:	ab09      	add	r3, sp, #36	; 0x24
    fcc6:	9008      	str	r0, [sp, #32]
    fcc8:	4618      	mov	r0, r3
    fcca:	9b08      	ldr	r3, [sp, #32]
    fccc:	9107      	str	r1, [sp, #28]
    fcce:	4619      	mov	r1, r3
    fcd0:	9e07      	ldr	r6, [sp, #28]
    fcd2:	9206      	str	r2, [sp, #24]
    fcd4:	4632      	mov	r2, r6
    fcd6:	9b06      	ldr	r3, [sp, #24]
    fcd8:	f8cd c014 	str.w	ip, [sp, #20]
    fcdc:	f8cd e010 	str.w	lr, [sp, #16]
    fce0:	9403      	str	r4, [sp, #12]
    fce2:	9502      	str	r5, [sp, #8]
    fce4:	f000 f832 	bl	fd4c <_ZN3app5chip813PixelIterator3new17he6370a46ee33b7bcE>
    fce8:	e7ff      	b.n	fcea <_ZN3app5chip812render_block17h6c8b81526965606bE+0x46>
    fcea:	a809      	add	r0, sp, #36	; 0x24
        left, top, 
        right, bottom,
    );
    //  Render the block
    let (left_physical, top_physical, right_physical, bottom_physical) = block.get_window();
    fcec:	f000 f95f 	bl	ffae <_ZN3app5chip813PixelIterator10get_window17h854aa1964c599aa2E>
    fcf0:	900e      	str	r0, [sp, #56]	; 0x38
    fcf2:	980e      	ldr	r0, [sp, #56]	; 0x38
    fcf4:	900c      	str	r0, [sp, #48]	; 0x30
    fcf6:	e7ff      	b.n	fcf8 <_ZN3app5chip812render_block17h6c8b81526965606bE+0x54>
    fcf8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    fcfc:	f88d 003c 	strb.w	r0, [sp, #60]	; 0x3c
    fd00:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
    fd04:	f88d 103d 	strb.w	r1, [sp, #61]	; 0x3d
    fd08:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    fd0c:	f88d 203e 	strb.w	r2, [sp, #62]	; 0x3e
    fd10:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
    fd14:	f88d 303f 	strb.w	r3, [sp, #63]	; 0x3f
    druid::set_display_pixels(left_physical as u16, top_physical as u16, right_physical as u16, bottom_physical as u16,
    fd18:	46ec      	mov	ip, sp
    fd1a:	f10d 0e24 	add.w	lr, sp, #36	; 0x24
    fd1e:	f8cc e000 	str.w	lr, [ip]
    fd22:	f001 fa1e 	bl	11162 <_ZN22piet_embedded_graphics7display18set_display_pixels17hee35995df7c8ec94E>
    fd26:	9001      	str	r0, [sp, #4]
    fd28:	e7ff      	b.n	fd2a <_ZN3app5chip812render_block17h6c8b81526965606bE+0x86>
    fd2a:	9801      	ldr	r0, [sp, #4]
    fd2c:	f000 0001 	and.w	r0, r0, #1
    fd30:	f64d 3144 	movw	r1, #56132	; 0xdb44
    fd34:	f2c0 0101 	movt	r1, #1
    fd38:	f64d 3358 	movw	r3, #56152	; 0xdb58
    fd3c:	f2c0 0301 	movt	r3, #1
    fd40:	2211      	movs	r2, #17
    fd42:	f004 fbc9 	bl	144d8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
    fd46:	e7ff      	b.n	fd48 <_ZN3app5chip812render_block17h6c8b81526965606bE+0xa4>
        &mut block
    ).expect("set pixels failed");    
}
    fd48:	b010      	add	sp, #64	; 0x40
    fd4a:	bd70      	pop	{r4, r5, r6, pc}

0000fd4c <_ZN3app5chip813PixelIterator3new17he6370a46ee33b7bcE>:
    physical_bottom:    u8,
}

impl PixelIterator {
    /// Return a new PixelInterator for the block dimensions
    pub fn new(
    fd4c:	b570      	push	{r4, r5, r6, lr}
    fd4e:	b08a      	sub	sp, #40	; 0x28
    fd50:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    fd54:	469e      	mov	lr, r3
    fd56:	4614      	mov	r4, r2
    fd58:	460d      	mov	r5, r1
    fd5a:	f88d 101c 	strb.w	r1, [sp, #28]
    fd5e:	f88d 201d 	strb.w	r2, [sp, #29]
    fd62:	f88d 301e 	strb.w	r3, [sp, #30]
    fd66:	f88d c01f 	strb.w	ip, [sp, #31]
        block_right:     u8,
        //  End row number for block
        block_bottom:    u8,        
    ) -> PixelIterator {
        let (physical_left, physical_top, physical_right, physical_bottom) = 
            Self::get_bounding_box(block_left, block_top, block_right, block_bottom);
    fd6a:	9005      	str	r0, [sp, #20]
    fd6c:	4608      	mov	r0, r1
    fd6e:	4611      	mov	r1, r2
    fd70:	461a      	mov	r2, r3
    fd72:	4663      	mov	r3, ip
    fd74:	f8cd c010 	str.w	ip, [sp, #16]
    fd78:	f8cd e00c 	str.w	lr, [sp, #12]
    fd7c:	9402      	str	r4, [sp, #8]
    fd7e:	9501      	str	r5, [sp, #4]
    fd80:	f000 f836 	bl	fdf0 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE>
    fd84:	9008      	str	r0, [sp, #32]
    fd86:	9808      	ldr	r0, [sp, #32]
    fd88:	9006      	str	r0, [sp, #24]
    fd8a:	e7ff      	b.n	fd8c <_ZN3app5chip813PixelIterator3new17he6370a46ee33b7bcE+0x40>
        let (physical_left, physical_top, physical_right, physical_bottom) = 
    fd8c:	f89d 0018 	ldrb.w	r0, [sp, #24]
    fd90:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    fd94:	f89d 1019 	ldrb.w	r1, [sp, #25]
    fd98:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    fd9c:	f89d 201a 	ldrb.w	r2, [sp, #26]
    fda0:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
    fda4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    fda8:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
        PixelIterator {
    fdac:	f8dd c004 	ldr.w	ip, [sp, #4]
    fdb0:	f8dd e014 	ldr.w	lr, [sp, #20]
    fdb4:	f88e c000 	strb.w	ip, [lr]
    fdb8:	9c02      	ldr	r4, [sp, #8]
    fdba:	f88e 4001 	strb.w	r4, [lr, #1]
    fdbe:	2500      	movs	r5, #0
    fdc0:	f88e 5002 	strb.w	r5, [lr, #2]
    fdc4:	f88e 5003 	strb.w	r5, [lr, #3]
    fdc8:	f88e c004 	strb.w	ip, [lr, #4]
    fdcc:	9d03      	ldr	r5, [sp, #12]
    fdce:	f88e 5005 	strb.w	r5, [lr, #5]
    fdd2:	f88e 4006 	strb.w	r4, [lr, #6]
    fdd6:	9e04      	ldr	r6, [sp, #16]
    fdd8:	f88e 6007 	strb.w	r6, [lr, #7]
    fddc:	f88e 0008 	strb.w	r0, [lr, #8]
    fde0:	f88e 2009 	strb.w	r2, [lr, #9]
    fde4:	f88e 100a 	strb.w	r1, [lr, #10]
    fde8:	f88e 300b 	strb.w	r3, [lr, #11]
            x_offset: 0, 
            y_offset: 0,
            block_left, block_right, block_top, block_bottom,
            physical_left, physical_top, physical_right, physical_bottom
        }
    }
    fdec:	b00a      	add	sp, #40	; 0x28
    fdee:	bd70      	pop	{r4, r5, r6, pc}

0000fdf0 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE>:
        ( left, top, right, bottom )
    }

    /// Return Bounding Box of Physical Pixels (left, top, right, bottom) that correspond to the Virtual Pixels
    #[cfg(feature = "chip8_curve")]  //  If we are rendering CHIP8 Emulator as curved surface...
    fn get_bounding_box(virtual_left: u8, virtual_top: u8, virtual_right: u8, virtual_bottom: u8) -> (u8, u8, u8, u8) {
    fdf0:	b5b0      	push	{r4, r5, r7, lr}
    fdf2:	b092      	sub	sp, #72	; 0x48
    fdf4:	469c      	mov	ip, r3
    fdf6:	4696      	mov	lr, r2
    fdf8:	460c      	mov	r4, r1
    fdfa:	4605      	mov	r5, r0
    fdfc:	f88d 0040 	strb.w	r0, [sp, #64]	; 0x40
    fe00:	f88d 1041 	strb.w	r1, [sp, #65]	; 0x41
    fe04:	f88d 2042 	strb.w	r2, [sp, #66]	; 0x42
    fe08:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
    fe0c:	b2c8      	uxtb	r0, r1
        //  One Virtual Pixel may map to multiple Physical Pixels, so we lookup the Physical Bounding Box.
        //  TODO: Handle wide and tall Bounding Boxes
        let physical_left_top = VIRTUAL_TO_PHYSICAL_MAP[virtual_top as usize][virtual_left as usize];  //  Returns (left,top,right,bottom)
    fe0e:	4601      	mov	r1, r0
    fe10:	280f      	cmp	r0, #15
    fe12:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    fe16:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
    fe1a:	9509      	str	r5, [sp, #36]	; 0x24
    fe1c:	9108      	str	r1, [sp, #32]
    fe1e:	f200 80a2 	bhi.w	ff66 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x176>
    fe22:	e7ff      	b.n	fe24 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x34>
    fe24:	9809      	ldr	r0, [sp, #36]	; 0x24
    fe26:	b2c1      	uxtb	r1, r0
    fe28:	460a      	mov	r2, r1
    fe2a:	291f      	cmp	r1, #31
    fe2c:	9207      	str	r2, [sp, #28]
    fe2e:	f200 80a3 	bhi.w	ff78 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x188>
    fe32:	e7ff      	b.n	fe34 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x44>
    fe34:	f24e 4090 	movw	r0, #58512	; 0xe490
    fe38:	f2c0 0001 	movt	r0, #1
    fe3c:	6800      	ldr	r0, [r0, #0]
    fe3e:	9908      	ldr	r1, [sp, #32]
    fe40:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
    fe44:	9a07      	ldr	r2, [sp, #28]
    fe46:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    fe4a:	900d      	str	r0, [sp, #52]	; 0x34
        let physical_right_bottom = VIRTUAL_TO_PHYSICAL_MAP[virtual_bottom as usize][virtual_right as usize];
    fe4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    fe4e:	b2c3      	uxtb	r3, r0
    fe50:	469c      	mov	ip, r3
    fe52:	2b0f      	cmp	r3, #15
    fe54:	f8cd c018 	str.w	ip, [sp, #24]
    fe58:	f200 8097 	bhi.w	ff8a <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x19a>
    fe5c:	e7ff      	b.n	fe5e <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x6e>
    fe5e:	980a      	ldr	r0, [sp, #40]	; 0x28
    fe60:	b2c1      	uxtb	r1, r0
    fe62:	460a      	mov	r2, r1
    fe64:	291f      	cmp	r1, #31
    fe66:	9205      	str	r2, [sp, #20]
    fe68:	f200 8098 	bhi.w	ff9c <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x1ac>
    fe6c:	e7ff      	b.n	fe6e <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x7e>
    fe6e:	f24e 4090 	movw	r0, #58512	; 0xe490
    fe72:	f2c0 0001 	movt	r0, #1
    fe76:	6800      	ldr	r0, [r0, #0]
    fe78:	9906      	ldr	r1, [sp, #24]
    fe7a:	eb00 10c1 	add.w	r0, r0, r1, lsl #7
    fe7e:	9a05      	ldr	r2, [sp, #20]
    fe80:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
    fe84:	900e      	str	r0, [sp, #56]	; 0x38

        let left: u8 = physical_left_top.0;
    fe86:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
    fe8a:	4603      	mov	r3, r0
    fe8c:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
        let top: u8 = physical_left_top.1;
    fe90:	f89d c035 	ldrb.w	ip, [sp, #53]	; 0x35
    fe94:	46e6      	mov	lr, ip
    fe96:	f88d c045 	strb.w	ip, [sp, #69]	; 0x45
        let right: u8 = physical_right_bottom.2;
    fe9a:	f89d c03a 	ldrb.w	ip, [sp, #58]	; 0x3a
    fe9e:	4664      	mov	r4, ip
    fea0:	f88d c046 	strb.w	ip, [sp, #70]	; 0x46
        let bottom: u8 = physical_right_bottom.3;
    fea4:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
    fea8:	4665      	mov	r5, ip
    feaa:	f88d c047 	strb.w	ip, [sp, #71]	; 0x47
        //  TODO
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    feae:	28f0      	cmp	r0, #240	; 0xf0
    feb0:	9304      	str	r3, [sp, #16]
    feb2:	f8cd e00c 	str.w	lr, [sp, #12]
    feb6:	9402      	str	r4, [sp, #8]
    feb8:	9501      	str	r5, [sp, #4]
    feba:	d32e      	bcc.n	ff1a <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x12a>
    febc:	e029      	b.n	ff12 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x122>
    febe:	2001      	movs	r0, #1
    fec0:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    fec4:	e008      	b.n	fed8 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xe8>
    fec6:	2000      	movs	r0, #0
    fec8:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    fecc:	e004      	b.n	fed8 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xe8>
    fece:	9801      	ldr	r0, [sp, #4]
    fed0:	b2c1      	uxtb	r1, r0
    fed2:	29f0      	cmp	r1, #240	; 0xf0
    fed4:	d3f3      	bcc.n	febe <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xce>
    fed6:	e7f6      	b.n	fec6 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xd6>
    fed8:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
    fedc:	07c0      	lsls	r0, r0, #31
    fede:	2800      	cmp	r0, #0
    fee0:	d035      	beq.n	ff4e <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x15e>
    fee2:	e025      	b.n	ff30 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x140>
    fee4:	2001      	movs	r0, #1
    fee6:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    feea:	e008      	b.n	fefe <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x10e>
    feec:	2000      	movs	r0, #0
    feee:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    fef2:	e004      	b.n	fefe <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x10e>
    fef4:	9802      	ldr	r0, [sp, #8]
    fef6:	b2c1      	uxtb	r1, r0
    fef8:	29f0      	cmp	r1, #240	; 0xf0
    fefa:	d3f3      	bcc.n	fee4 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xf4>
    fefc:	e7f6      	b.n	feec <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xfc>
    fefe:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
    ff02:	07c0      	lsls	r0, r0, #31
    ff04:	2800      	cmp	r0, #0
    ff06:	d1e2      	bne.n	fece <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xde>
    ff08:	e7dd      	b.n	fec6 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xd6>
    ff0a:	2001      	movs	r0, #1
    ff0c:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    ff10:	e008      	b.n	ff24 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x134>
    ff12:	2000      	movs	r0, #0
    ff14:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    ff18:	e004      	b.n	ff24 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x134>
    ff1a:	9803      	ldr	r0, [sp, #12]
    ff1c:	b2c1      	uxtb	r1, r0
    ff1e:	29f0      	cmp	r1, #240	; 0xf0
    ff20:	d3f3      	bcc.n	ff0a <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x11a>
    ff22:	e7f6      	b.n	ff12 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x122>
    ff24:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
    ff28:	07c0      	lsls	r0, r0, #31
    ff2a:	2800      	cmp	r0, #0
    ff2c:	d1e2      	bne.n	fef4 <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0x104>
    ff2e:	e7dd      	b.n	feec <_ZN3app5chip813PixelIterator16get_bounding_box17h2d30013ff0fc6bfbE+0xfc>
        ( left, top, right, bottom )
    ff30:	9804      	ldr	r0, [sp, #16]
    ff32:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    ff36:	9903      	ldr	r1, [sp, #12]
    ff38:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
    ff3c:	9a02      	ldr	r2, [sp, #8]
    ff3e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
    ff42:	9b01      	ldr	r3, [sp, #4]
    ff44:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    }
    ff48:	980c      	ldr	r0, [sp, #48]	; 0x30
    ff4a:	b012      	add	sp, #72	; 0x48
    ff4c:	bdb0      	pop	{r4, r5, r7, pc}
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    ff4e:	f64d 206c 	movw	r0, #55916	; 0xda6c
    ff52:	f2c0 0001 	movt	r0, #1
    ff56:	f64d 3288 	movw	r2, #56200	; 0xdb88
    ff5a:	f2c0 0201 	movt	r2, #1
    ff5e:	2108      	movs	r1, #8
    ff60:	f005 faba 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ff64:	defe      	udf	#254	; 0xfe
        let physical_left_top = VIRTUAL_TO_PHYSICAL_MAP[virtual_top as usize][virtual_left as usize];  //  Returns (left,top,right,bottom)
    ff66:	f64d 3068 	movw	r0, #56168	; 0xdb68
    ff6a:	f2c0 0001 	movt	r0, #1
    ff6e:	2210      	movs	r2, #16
    ff70:	9908      	ldr	r1, [sp, #32]
    ff72:	f005 fac7 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ff76:	defe      	udf	#254	; 0xfe
    ff78:	f64d 3068 	movw	r0, #56168	; 0xdb68
    ff7c:	f2c0 0001 	movt	r0, #1
    ff80:	2220      	movs	r2, #32
    ff82:	9907      	ldr	r1, [sp, #28]
    ff84:	f005 fabe 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ff88:	defe      	udf	#254	; 0xfe
        let physical_right_bottom = VIRTUAL_TO_PHYSICAL_MAP[virtual_bottom as usize][virtual_right as usize];
    ff8a:	f64d 3078 	movw	r0, #56184	; 0xdb78
    ff8e:	f2c0 0001 	movt	r0, #1
    ff92:	2210      	movs	r2, #16
    ff94:	9906      	ldr	r1, [sp, #24]
    ff96:	f005 fab5 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ff9a:	defe      	udf	#254	; 0xfe
    ff9c:	f64d 3078 	movw	r0, #56184	; 0xdb78
    ffa0:	f2c0 0001 	movt	r0, #1
    ffa4:	2220      	movs	r2, #32
    ffa6:	9905      	ldr	r1, [sp, #20]
    ffa8:	f005 faac 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ffac:	defe      	udf	#254	; 0xfe

0000ffae <_ZN3app5chip813PixelIterator10get_window17h854aa1964c599aa2E>:

    /// Return window of Physical Pixels: (left, top, right, bottom)
    pub fn get_window(&self) -> (u8, u8, u8, u8) {
    ffae:	b082      	sub	sp, #8
    ffb0:	9001      	str	r0, [sp, #4]
        ( self.physical_left, self.physical_top, self.physical_right, self.physical_bottom )
    ffb2:	7a01      	ldrb	r1, [r0, #8]
    ffb4:	7a42      	ldrb	r2, [r0, #9]
    ffb6:	7a83      	ldrb	r3, [r0, #10]
    ffb8:	7ac0      	ldrb	r0, [r0, #11]
    ffba:	f88d 1000 	strb.w	r1, [sp]
    ffbe:	f88d 3001 	strb.w	r3, [sp, #1]
    ffc2:	f88d 2002 	strb.w	r2, [sp, #2]
    ffc6:	f88d 0003 	strb.w	r0, [sp, #3]
    }
    ffca:	9800      	ldr	r0, [sp, #0]
    ffcc:	b002      	add	sp, #8
    ffce:	4770      	bx	lr

0000ffd0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E>:
impl Iterator for PixelIterator {
    /// This Iterator returns Physical Pixel colour words (16-bit)
    type Item = u16;

    /// Return the next Physical Pixel colour
    fn next(&mut self) -> Option<Self::Item> {
    ffd0:	b580      	push	{r7, lr}
    ffd2:	b090      	sub	sp, #64	; 0x40
    ffd4:	900d      	str	r0, [sp, #52]	; 0x34
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    ffd6:	7841      	ldrb	r1, [r0, #1]
    ffd8:	79c2      	ldrb	r2, [r0, #7]
    ffda:	4291      	cmp	r1, r2
    ffdc:	900a      	str	r0, [sp, #40]	; 0x28
    ffde:	d805      	bhi.n	ffec <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x1c>
    ffe0:	e7ff      	b.n	ffe2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x12>

        if self.x >= SCREEN_WIDTH as u8 ||
    ffe2:	980a      	ldr	r0, [sp, #40]	; 0x28
    ffe4:	7801      	ldrb	r1, [r0, #0]
    ffe6:	293f      	cmp	r1, #63	; 0x3f
    ffe8:	d80a      	bhi.n	10000 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x30>
    ffea:	e011      	b.n	10010 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x40>
    ffec:	2000      	movs	r0, #0
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    ffee:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    fff2:	e7ff      	b.n	fff4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x24>
                }
            }
        }
        //  Return the Physical Pixel color
        return Some(color);
    }
    fff4:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    fff8:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
    fffc:	b010      	add	sp, #64	; 0x40
    fffe:	bd80      	pop	{r7, pc}
   10000:	2001      	movs	r0, #1
        if self.x >= SCREEN_WIDTH as u8 ||
   10002:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   10006:	e008      	b.n	1001a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x4a>
   10008:	2000      	movs	r0, #0
   1000a:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   1000e:	e004      	b.n	1001a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x4a>
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
   10010:	980a      	ldr	r0, [sp, #40]	; 0x28
   10012:	7841      	ldrb	r1, [r0, #1]
        if self.x >= SCREEN_WIDTH as u8 ||
   10014:	291f      	cmp	r1, #31
   10016:	d8f3      	bhi.n	10000 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x30>
   10018:	e7f6      	b.n	10008 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x38>
   1001a:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   1001e:	07c0      	lsls	r0, r0, #31
   10020:	2800      	cmp	r0, #0
   10022:	d003      	beq.n	1002c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x5c>
   10024:	e7ff      	b.n	10026 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x56>
   10026:	be00      	bkpt	0x0000
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
   10028:	e7ff      	b.n	1002a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x5a>
        if self.x >= SCREEN_WIDTH as u8 ||
   1002a:	e7ff      	b.n	1002c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x5c>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
   1002c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1002e:	7801      	ldrb	r1, [r0, #0]
   10030:	293f      	cmp	r1, #63	; 0x3f
   10032:	d805      	bhi.n	10040 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x70>
   10034:	e7ff      	b.n	10036 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x66>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
   10036:	980a      	ldr	r0, [sp, #40]	; 0x28
   10038:	7841      	ldrb	r1, [r0, #1]
   1003a:	291f      	cmp	r1, #31
   1003c:	d817      	bhi.n	1006e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x9e>
   1003e:	e00b      	b.n	10058 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x88>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
   10040:	f64d 104c 	movw	r0, #55628	; 0xd94c
   10044:	f2c0 0001 	movt	r0, #1
   10048:	f64d 3298 	movw	r2, #56216	; 0xdb98
   1004c:	f2c0 0201 	movt	r2, #1
   10050:	210a      	movs	r1, #10
   10052:	f005 fa41 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10056:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
   10058:	980a      	ldr	r0, [sp, #40]	; 0x28
   1005a:	7801      	ldrb	r1, [r0, #0]
   1005c:	7842      	ldrb	r2, [r0, #1]
   1005e:	0192      	lsls	r2, r2, #6
   10060:	2300      	movs	r3, #0
   10062:	2b00      	cmp	r3, #0
   10064:	9109      	str	r1, [sp, #36]	; 0x24
   10066:	9208      	str	r2, [sp, #32]
   10068:	f040 80b0 	bne.w	101cc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x1fc>
   1006c:	e00b      	b.n	10086 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0xb6>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
   1006e:	f64d 1068 	movw	r0, #55656	; 0xd968
   10072:	f2c0 0001 	movt	r0, #1
   10076:	f64d 32a8 	movw	r2, #56232	; 0xdba8
   1007a:	f2c0 0201 	movt	r2, #1
   1007e:	210a      	movs	r1, #10
   10080:	f005 fa2a 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10084:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
   10086:	9809      	ldr	r0, [sp, #36]	; 0x24
   10088:	9908      	ldr	r1, [sp, #32]
   1008a:	1842      	adds	r2, r0, r1
   1008c:	4613      	mov	r3, r2
   1008e:	4282      	cmp	r2, r0
   10090:	9307      	str	r3, [sp, #28]
   10092:	f0c0 80a7 	bcc.w	101e4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x214>
   10096:	e7ff      	b.n	10098 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0xc8>
   10098:	9807      	ldr	r0, [sp, #28]
   1009a:	900e      	str	r0, [sp, #56]	; 0x38
   1009c:	2100      	movs	r1, #0
        let color = unsafe { convert_color(SCREEN_BUFFER[i]) };
   1009e:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
   100a2:	f040 80ab 	bne.w	101fc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x22c>
   100a6:	e7ff      	b.n	100a8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0xd8>
   100a8:	f244 10b4 	movw	r0, #16820	; 0x41b4
   100ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
   100b0:	9907      	ldr	r1, [sp, #28]
   100b2:	5c40      	ldrb	r0, [r0, r1]
   100b4:	f000 f8f0 	bl	10298 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E>
   100b8:	4601      	mov	r1, r0
   100ba:	f8ad 003e 	strh.w	r0, [sp, #62]	; 0x3e
   100be:	9106      	str	r1, [sp, #24]
   100c0:	e7ff      	b.n	100c2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0xf2>
        if self.x_offset == 0 && self.y_offset == 0 {  //  Update colours only once per Virtual Pixel
   100c2:	980a      	ldr	r0, [sp, #40]	; 0x28
   100c4:	7881      	ldrb	r1, [r0, #2]
   100c6:	2900      	cmp	r1, #0
   100c8:	d008      	beq.n	100dc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x10c>
   100ca:	e003      	b.n	100d4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x104>
   100cc:	2001      	movs	r0, #1
   100ce:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   100d2:	e008      	b.n	100e6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x116>
   100d4:	2000      	movs	r0, #0
   100d6:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   100da:	e004      	b.n	100e6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x116>
   100dc:	980a      	ldr	r0, [sp, #40]	; 0x28
   100de:	78c1      	ldrb	r1, [r0, #3]
   100e0:	2900      	cmp	r1, #0
   100e2:	d0f3      	beq.n	100cc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0xfc>
   100e4:	e7f6      	b.n	100d4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x104>
   100e6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   100ea:	07c0      	lsls	r0, r0, #31
   100ec:	2800      	cmp	r0, #0
   100ee:	d020      	beq.n	10132 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x162>
   100f0:	e7ff      	b.n	100f2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x122>
   100f2:	2000      	movs	r0, #0
            unsafe { SCREEN_BUFFER[i] = update_color(SCREEN_BUFFER[i]); }  //  Fade to black
   100f4:	9907      	ldr	r1, [sp, #28]
   100f6:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
   100fa:	f040 8089 	bne.w	10210 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x240>
   100fe:	e7ff      	b.n	10100 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x130>
   10100:	f244 10b4 	movw	r0, #16820	; 0x41b4
   10104:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10108:	9907      	ldr	r1, [sp, #28]
   1010a:	5c40      	ldrb	r0, [r0, r1]
   1010c:	f000 f951 	bl	103b2 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E>
   10110:	9005      	str	r0, [sp, #20]
   10112:	e7ff      	b.n	10114 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x144>
   10114:	2000      	movs	r0, #0
   10116:	9907      	ldr	r1, [sp, #28]
   10118:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
   1011c:	f040 8082 	bne.w	10224 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x254>
   10120:	e7ff      	b.n	10122 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x152>
   10122:	f244 10b4 	movw	r0, #16820	; 0x41b4
   10126:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1012a:	9905      	ldr	r1, [sp, #20]
   1012c:	9a07      	ldr	r2, [sp, #28]
   1012e:	5481      	strb	r1, [r0, r2]
        if self.x_offset == 0 && self.y_offset == 0 {  //  Update colours only once per Virtual Pixel
   10130:	e7ff      	b.n	10132 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x162>
        self.x_offset += 1;
   10132:	980a      	ldr	r0, [sp, #40]	; 0x28
   10134:	7881      	ldrb	r1, [r0, #2]
   10136:	3101      	adds	r1, #1
   10138:	b2ca      	uxtb	r2, r1
   1013a:	460b      	mov	r3, r1
   1013c:	428a      	cmp	r2, r1
   1013e:	9304      	str	r3, [sp, #16]
   10140:	d17a      	bne.n	10238 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x268>
   10142:	e7ff      	b.n	10144 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x174>
   10144:	9804      	ldr	r0, [sp, #16]
   10146:	990a      	ldr	r1, [sp, #40]	; 0x28
   10148:	7088      	strb	r0, [r1, #2]
        if self.x_offset >= PIXEL_WIDTH as u8 {
   1014a:	788a      	ldrb	r2, [r1, #2]
   1014c:	2a03      	cmp	r2, #3
   1014e:	d336      	bcc.n	101be <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x1ee>
   10150:	e7ff      	b.n	10152 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x182>
   10152:	2000      	movs	r0, #0
            self.x_offset = 0;
   10154:	990a      	ldr	r1, [sp, #40]	; 0x28
   10156:	7088      	strb	r0, [r1, #2]
            self.x += 1;
   10158:	7808      	ldrb	r0, [r1, #0]
   1015a:	3001      	adds	r0, #1
   1015c:	b2c2      	uxtb	r2, r0
   1015e:	4603      	mov	r3, r0
   10160:	4282      	cmp	r2, r0
   10162:	9303      	str	r3, [sp, #12]
   10164:	d174      	bne.n	10250 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x280>
   10166:	e7ff      	b.n	10168 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x198>
   10168:	9803      	ldr	r0, [sp, #12]
   1016a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1016c:	7008      	strb	r0, [r1, #0]
            if self.x > self.block_right {
   1016e:	780a      	ldrb	r2, [r1, #0]
   10170:	794b      	ldrb	r3, [r1, #5]
   10172:	429a      	cmp	r2, r3
   10174:	d922      	bls.n	101bc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x1ec>
   10176:	e7ff      	b.n	10178 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x1a8>
                self.x = self.block_left;
   10178:	980a      	ldr	r0, [sp, #40]	; 0x28
   1017a:	7901      	ldrb	r1, [r0, #4]
   1017c:	7001      	strb	r1, [r0, #0]
                self.y_offset += 1;
   1017e:	78c1      	ldrb	r1, [r0, #3]
   10180:	3101      	adds	r1, #1
   10182:	b2ca      	uxtb	r2, r1
   10184:	460b      	mov	r3, r1
   10186:	428a      	cmp	r2, r1
   10188:	9302      	str	r3, [sp, #8]
   1018a:	d16d      	bne.n	10268 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x298>
   1018c:	e7ff      	b.n	1018e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x1be>
   1018e:	9802      	ldr	r0, [sp, #8]
   10190:	990a      	ldr	r1, [sp, #40]	; 0x28
   10192:	70c8      	strb	r0, [r1, #3]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
   10194:	78ca      	ldrb	r2, [r1, #3]
   10196:	2a05      	cmp	r2, #5
   10198:	d30f      	bcc.n	101ba <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x1ea>
   1019a:	e7ff      	b.n	1019c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x1cc>
   1019c:	2000      	movs	r0, #0
                    self.y_offset = 0;
   1019e:	990a      	ldr	r1, [sp, #40]	; 0x28
   101a0:	70c8      	strb	r0, [r1, #3]
                    self.y += 1;
   101a2:	7848      	ldrb	r0, [r1, #1]
   101a4:	3001      	adds	r0, #1
   101a6:	b2c2      	uxtb	r2, r0
   101a8:	4603      	mov	r3, r0
   101aa:	4282      	cmp	r2, r0
   101ac:	9301      	str	r3, [sp, #4]
   101ae:	d167      	bne.n	10280 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x2b0>
   101b0:	e7ff      	b.n	101b2 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x1e2>
   101b2:	9801      	ldr	r0, [sp, #4]
   101b4:	990a      	ldr	r1, [sp, #40]	; 0x28
   101b6:	7048      	strb	r0, [r1, #1]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
   101b8:	e7ff      	b.n	101ba <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x1ea>
            if self.x > self.block_right {
   101ba:	e7ff      	b.n	101bc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x1ec>
        if self.x_offset >= PIXEL_WIDTH as u8 {
   101bc:	e7ff      	b.n	101be <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x1ee>
        return Some(color);
   101be:	9806      	ldr	r0, [sp, #24]
   101c0:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   101c4:	2101      	movs	r1, #1
   101c6:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
   101ca:	e713      	b.n	fff4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E+0x24>
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
   101cc:	f64d 10a0 	movw	r0, #55712	; 0xd9a0
   101d0:	f2c0 0001 	movt	r0, #1
   101d4:	f64d 32b8 	movw	r2, #56248	; 0xdbb8
   101d8:	f2c0 0201 	movt	r2, #1
   101dc:	2121      	movs	r1, #33	; 0x21
   101de:	f005 f97b 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   101e2:	defe      	udf	#254	; 0xfe
   101e4:	f64d 10e0 	movw	r0, #55776	; 0xd9e0
   101e8:	f2c0 0001 	movt	r0, #1
   101ec:	f64d 32c8 	movw	r2, #56264	; 0xdbc8
   101f0:	f2c0 0201 	movt	r2, #1
   101f4:	211c      	movs	r1, #28
   101f6:	f005 f96f 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   101fa:	defe      	udf	#254	; 0xfe
        let color = unsafe { convert_color(SCREEN_BUFFER[i]) };
   101fc:	f64d 30d8 	movw	r0, #56280	; 0xdbd8
   10200:	f2c0 0001 	movt	r0, #1
   10204:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10208:	9907      	ldr	r1, [sp, #28]
   1020a:	f005 f97b 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1020e:	defe      	udf	#254	; 0xfe
            unsafe { SCREEN_BUFFER[i] = update_color(SCREEN_BUFFER[i]); }  //  Fade to black
   10210:	f64d 30e8 	movw	r0, #56296	; 0xdbe8
   10214:	f2c0 0001 	movt	r0, #1
   10218:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1021c:	9907      	ldr	r1, [sp, #28]
   1021e:	f005 f971 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10222:	defe      	udf	#254	; 0xfe
   10224:	f64d 30f8 	movw	r0, #56312	; 0xdbf8
   10228:	f2c0 0001 	movt	r0, #1
   1022c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   10230:	9907      	ldr	r1, [sp, #28]
   10232:	f005 f967 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10236:	defe      	udf	#254	; 0xfe
        self.x_offset += 1;
   10238:	f64d 10e0 	movw	r0, #55776	; 0xd9e0
   1023c:	f2c0 0001 	movt	r0, #1
   10240:	f64d 4208 	movw	r2, #56328	; 0xdc08
   10244:	f2c0 0201 	movt	r2, #1
   10248:	211c      	movs	r1, #28
   1024a:	f005 f945 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1024e:	defe      	udf	#254	; 0xfe
            self.x += 1;
   10250:	f64d 10e0 	movw	r0, #55776	; 0xd9e0
   10254:	f2c0 0001 	movt	r0, #1
   10258:	f64d 4218 	movw	r2, #56344	; 0xdc18
   1025c:	f2c0 0201 	movt	r2, #1
   10260:	211c      	movs	r1, #28
   10262:	f005 f939 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10266:	defe      	udf	#254	; 0xfe
                self.y_offset += 1;
   10268:	f64d 10e0 	movw	r0, #55776	; 0xd9e0
   1026c:	f2c0 0001 	movt	r0, #1
   10270:	f64d 4228 	movw	r2, #56360	; 0xdc28
   10274:	f2c0 0201 	movt	r2, #1
   10278:	211c      	movs	r1, #28
   1027a:	f005 f92d 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1027e:	defe      	udf	#254	; 0xfe
                    self.y += 1;
   10280:	f64d 10e0 	movw	r0, #55776	; 0xd9e0
   10284:	f2c0 0001 	movt	r0, #1
   10288:	f64d 4238 	movw	r2, #56376	; 0xdc38
   1028c:	f2c0 0201 	movt	r2, #1
   10290:	211c      	movs	r1, #28
   10292:	f005 f921 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10296:	defe      	udf	#254	; 0xfe

00010298 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E>:
}

/// Convert the Virtual Colour (8-bit greyscale) to 16-bit Colour
fn convert_color(grey: u8) -> u16 {
   10298:	b580      	push	{r7, lr}
   1029a:	b08a      	sub	sp, #40	; 0x28
   1029c:	b2c1      	uxtb	r1, r0
   1029e:	4602      	mov	r2, r0
   102a0:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    match grey {
        250..=255 => Rgb565::from(( grey, grey, grey )).0,  //  White
   102a4:	29fa      	cmp	r1, #250	; 0xfa
   102a6:	9205      	str	r2, [sp, #20]
   102a8:	d304      	bcc.n	102b4 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x1c>
   102aa:	e7ff      	b.n	102ac <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x14>
   102ac:	2001      	movs	r0, #1
   102ae:	2800      	cmp	r0, #0
   102b0:	d11d      	bne.n	102ee <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x56>
   102b2:	e7ff      	b.n	102b4 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x1c>
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
   102b4:	9805      	ldr	r0, [sp, #20]
   102b6:	b241      	sxtb	r1, r0
   102b8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   102bc:	dc05      	bgt.n	102ca <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x32>
   102be:	e7ff      	b.n	102c0 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x28>
   102c0:	9805      	ldr	r0, [sp, #20]
   102c2:	b2c1      	uxtb	r1, r0
   102c4:	29fa      	cmp	r1, #250	; 0xfa
   102c6:	d327      	bcc.n	10318 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x80>
   102c8:	e7ff      	b.n	102ca <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x32>
   102ca:	2000      	movs	r0, #0
        0..128   => Rgb565::from(( 0, 0, grey )).0,  //  Dark Blue
   102cc:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   102d0:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   102d4:	9805      	ldr	r0, [sp, #20]
   102d6:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
   102da:	f89d 1026 	ldrb.w	r1, [sp, #38]	; 0x26
   102de:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   102e2:	ea42 4001 	orr.w	r0, r2, r1, lsl #16
   102e6:	f001 fa03 	bl	116f0 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
   102ea:	9004      	str	r0, [sp, #16]
   102ec:	e041      	b.n	10372 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xda>
        250..=255 => Rgb565::from(( grey, grey, grey )).0,  //  White
   102ee:	9805      	ldr	r0, [sp, #20]
   102f0:	f88d 001c 	strb.w	r0, [sp, #28]
   102f4:	f88d 001d 	strb.w	r0, [sp, #29]
   102f8:	f88d 001e 	strb.w	r0, [sp, #30]
   102fc:	f89d 101e 	ldrb.w	r1, [sp, #30]
   10300:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   10304:	ea42 4001 	orr.w	r0, r2, r1, lsl #16
   10308:	f001 f9f2 	bl	116f0 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
   1030c:	9003      	str	r0, [sp, #12]
   1030e:	e7ff      	b.n	10310 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x78>
   10310:	9803      	ldr	r0, [sp, #12]
   10312:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
   10316:	e030      	b.n	1037a <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xe2>
   10318:	f06f 0063 	mvn.w	r0, #99	; 0x63
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
   1031c:	9905      	ldr	r1, [sp, #20]
   1031e:	fa50 f081 	uxtab	r0, r0, r1
   10322:	b2c2      	uxtb	r2, r0
   10324:	4603      	mov	r3, r0
   10326:	4282      	cmp	r2, r0
   10328:	9302      	str	r3, [sp, #8]
   1032a:	d12a      	bne.n	10382 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xea>
   1032c:	e7ff      	b.n	1032e <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x96>
   1032e:	f06f 0063 	mvn.w	r0, #99	; 0x63
   10332:	9905      	ldr	r1, [sp, #20]
   10334:	fa50 f081 	uxtab	r0, r0, r1
   10338:	b2c2      	uxtb	r2, r0
   1033a:	4603      	mov	r3, r0
   1033c:	4282      	cmp	r2, r0
   1033e:	9301      	str	r3, [sp, #4]
   10340:	d12b      	bne.n	1039a <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0x102>
   10342:	e7ff      	b.n	10344 <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xac>
   10344:	9802      	ldr	r0, [sp, #8]
   10346:	f88d 0020 	strb.w	r0, [sp, #32]
   1034a:	9905      	ldr	r1, [sp, #20]
   1034c:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   10350:	9a01      	ldr	r2, [sp, #4]
   10352:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
   10356:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1035a:	f8bd c020 	ldrh.w	ip, [sp, #32]
   1035e:	ea4c 4003 	orr.w	r0, ip, r3, lsl #16
   10362:	f001 f9c5 	bl	116f0 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
   10366:	9000      	str	r0, [sp, #0]
   10368:	e7ff      	b.n	1036a <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xd2>
   1036a:	9800      	ldr	r0, [sp, #0]
   1036c:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
   10370:	e003      	b.n	1037a <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xe2>
        0..128   => Rgb565::from(( 0, 0, grey )).0,  //  Dark Blue
   10372:	9804      	ldr	r0, [sp, #16]
   10374:	f8ad 001a 	strh.w	r0, [sp, #26]
    match grey {
   10378:	e7ff      	b.n	1037a <_ZN3app5chip813convert_color17h69ad441a1103d8f7E+0xe2>
    }
}
   1037a:	f8bd 001a 	ldrh.w	r0, [sp, #26]
   1037e:	b00a      	add	sp, #40	; 0x28
   10380:	bd80      	pop	{r7, pc}
        128..250 => Rgb565::from(( grey - 100, grey, grey - 100 )).0,  //  Greenish
   10382:	f64d 20c0 	movw	r0, #56000	; 0xdac0
   10386:	f2c0 0001 	movt	r0, #1
   1038a:	f64d 4248 	movw	r2, #56392	; 0xdc48
   1038e:	f2c0 0201 	movt	r2, #1
   10392:	2121      	movs	r1, #33	; 0x21
   10394:	f005 f8a0 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10398:	defe      	udf	#254	; 0xfe
   1039a:	f64d 20c0 	movw	r0, #56000	; 0xdac0
   1039e:	f2c0 0001 	movt	r0, #1
   103a2:	f64d 4258 	movw	r2, #56408	; 0xdc58
   103a6:	f2c0 0201 	movt	r2, #1
   103aa:	2121      	movs	r1, #33	; 0x21
   103ac:	f005 f894 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   103b0:	defe      	udf	#254	; 0xfe

000103b2 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E>:

/// Fade the Virtual Colour (8-bit greyscale) to black
fn update_color(grey: u8) -> u8 {
   103b2:	b084      	sub	sp, #16
   103b4:	b2c1      	uxtb	r1, r0
   103b6:	4602      	mov	r2, r0
   103b8:	f88d 000f 	strb.w	r0, [sp, #15]
    match grey {
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
   103bc:	29c8      	cmp	r1, #200	; 0xc8
   103be:	9202      	str	r2, [sp, #8]
   103c0:	d304      	bcc.n	103cc <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x1a>
   103c2:	e7ff      	b.n	103c4 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x12>
   103c4:	2001      	movs	r0, #1
   103c6:	2800      	cmp	r0, #0
   103c8:	d110      	bne.n	103ec <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x3a>
   103ca:	e7ff      	b.n	103cc <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x1a>
        128..200 => grey,        //  Normal white stays the same
   103cc:	9802      	ldr	r0, [sp, #8]
   103ce:	b241      	sxtb	r1, r0
   103d0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   103d4:	dc05      	bgt.n	103e2 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x30>
   103d6:	e7ff      	b.n	103d8 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x26>
   103d8:	9802      	ldr	r0, [sp, #8]
   103da:	b2c1      	uxtb	r1, r0
   103dc:	29c8      	cmp	r1, #200	; 0xc8
   103de:	d314      	bcc.n	1040a <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x58>
   103e0:	e7ff      	b.n	103e2 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x30>
        0..128   => grey >> 1,   //  Dark fade to black
   103e2:	9802      	ldr	r0, [sp, #8]
   103e4:	b2c1      	uxtb	r1, r0
   103e6:	0849      	lsrs	r1, r1, #1
   103e8:	9101      	str	r1, [sp, #4]
   103ea:	e012      	b.n	10412 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x60>
   103ec:	f06f 0001 	mvn.w	r0, #1
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
   103f0:	9902      	ldr	r1, [sp, #8]
   103f2:	fa50 f081 	uxtab	r0, r0, r1
   103f6:	b2c2      	uxtb	r2, r0
   103f8:	4603      	mov	r3, r0
   103fa:	4282      	cmp	r2, r0
   103fc:	9300      	str	r3, [sp, #0]
   103fe:	d110      	bne.n	10422 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x70>
   10400:	e7ff      	b.n	10402 <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x50>
   10402:	9800      	ldr	r0, [sp, #0]
   10404:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
   10408:	e007      	b.n	1041a <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x68>
        128..200 => grey,        //  Normal white stays the same
   1040a:	9802      	ldr	r0, [sp, #8]
   1040c:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
   10410:	e003      	b.n	1041a <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x68>
        0..128   => grey >> 1,   //  Dark fade to black
   10412:	9801      	ldr	r0, [sp, #4]
   10414:	f88d 000e 	strb.w	r0, [sp, #14]
    match grey {
   10418:	e7ff      	b.n	1041a <_ZN3app5chip812update_color17h39b5eb1e5de90ff7E+0x68>
    }
}
   1041a:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1041e:	b004      	add	sp, #16
   10420:	4770      	bx	lr
        200..=255 => grey - 2,   //  Initial white flash fade to normal white
   10422:	f64d 20c0 	movw	r0, #56000	; 0xdac0
   10426:	f2c0 0001 	movt	r0, #1
   1042a:	f64d 4268 	movw	r2, #56424	; 0xdc68
   1042e:	f2c0 0201 	movt	r2, #1
   10432:	2121      	movs	r1, #33	; 0x21
   10434:	f005 f850 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10438:	defe      	udf	#254	; 0xfe

0001043a <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E>:

pub fn handle_touch(_x: u16, _y: u16) { 
   1043a:	b580      	push	{r7, lr}
   1043c:	b084      	sub	sp, #16
   1043e:	460a      	mov	r2, r1
   10440:	4603      	mov	r3, r0
   10442:	f8ad 000c 	strh.w	r0, [sp, #12]
   10446:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
   1044a:	f64d 4078 	movw	r0, #56440	; 0xdc78
   1044e:	f2c0 0001 	movt	r0, #1
   10452:	2118      	movs	r1, #24
   10454:	9202      	str	r2, [sp, #8]
   10456:	9301      	str	r3, [sp, #4]
   10458:	f7f8 fe4e 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
   1045c:	e7ff      	b.n	1045e <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E+0x24>
   1045e:	f7f8 fe91 	bl	9184 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
   10462:	e7ff      	b.n	10464 <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E+0x2a>
}
   10464:	b004      	add	sp, #16
   10466:	bd80      	pop	{r7, pc}

00010468 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
   10468:	b5b0      	push	{r4, r5, r7, lr}
   1046a:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
   1046c:	f24e 4094 	movw	r0, #58516	; 0xe494
   10470:	f2c0 0001 	movt	r0, #1
   10474:	2112      	movs	r1, #18
   10476:	f7f8 fe3f 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
   1047a:	e7ff      	b.n	1047c <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
   1047c:	f644 10b4 	movw	r0, #18868	; 0x49b4
   10480:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10484:	210a      	movs	r1, #10
   10486:	f003 fe2a 	bl	140de <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   1048a:	9012      	str	r0, [sp, #72]	; 0x48
   1048c:	e7ff      	b.n	1048e <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x26>
   1048e:	9812      	ldr	r0, [sp, #72]	; 0x48
   10490:	f7f8 fbf6 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10494:	9014      	str	r0, [sp, #80]	; 0x50
   10496:	e7ff      	b.n	10498 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x30>
   10498:	9814      	ldr	r0, [sp, #80]	; 0x50
   1049a:	1e41      	subs	r1, r0, #1
   1049c:	bf18      	it	ne
   1049e:	2101      	movne	r1, #1
   104a0:	2801      	cmp	r0, #1
   104a2:	d001      	beq.n	104a8 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x40>
   104a4:	e7ff      	b.n	104a6 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x3e>
   104a6:	e008      	b.n	104ba <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
   104a8:	f644 10b4 	movw	r0, #18868	; 0x49b4
   104ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
   104b0:	f003 feae 	bl	14210 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
   104b4:	9011      	str	r0, [sp, #68]	; 0x44
   104b6:	e00f      	b.n	104d8 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
   104b8:	defe      	udf	#254	; 0xfe
   104ba:	9814      	ldr	r0, [sp, #80]	; 0x50
   104bc:	9036      	str	r0, [sp, #216]	; 0xd8
   104be:	f002 f80b 	bl	124d8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   104c2:	9010      	str	r0, [sp, #64]	; 0x40
   104c4:	e002      	b.n	104cc <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
   104c6:	9813      	ldr	r0, [sp, #76]	; 0x4c
   104c8:	b03e      	add	sp, #248	; 0xf8
   104ca:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
   104cc:	9810      	ldr	r0, [sp, #64]	; 0x40
   104ce:	f7f8 fbcb 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   104d2:	9013      	str	r0, [sp, #76]	; 0x4c
   104d4:	e7ff      	b.n	104d6 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x6e>
   104d6:	e7f6      	b.n	104c6 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x5e>
        TOUCH_RESET.set_low() ? ;
   104d8:	9811      	ldr	r0, [sp, #68]	; 0x44
   104da:	f7f8 fbd1 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   104de:	9015      	str	r0, [sp, #84]	; 0x54
   104e0:	e7ff      	b.n	104e2 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x7a>
   104e2:	9815      	ldr	r0, [sp, #84]	; 0x54
   104e4:	1e41      	subs	r1, r0, #1
   104e6:	bf18      	it	ne
   104e8:	2101      	movne	r1, #1
   104ea:	2801      	cmp	r0, #1
   104ec:	d001      	beq.n	104f2 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x8a>
   104ee:	e7ff      	b.n	104f0 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x88>
   104f0:	e008      	b.n	10504 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x9c>
        TOUCH_DELAY.delay_ms(20);
   104f2:	f644 10b8 	movw	r0, #18872	; 0x49b8
   104f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   104fa:	2114      	movs	r1, #20
   104fc:	f003 fe9f 	bl	1423e <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   10500:	e00d      	b.n	1051e <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb6>
        TOUCH_RESET.set_low() ? ;
   10502:	defe      	udf	#254	; 0xfe
   10504:	9815      	ldr	r0, [sp, #84]	; 0x54
   10506:	9037      	str	r0, [sp, #220]	; 0xdc
   10508:	f001 ffe6 	bl	124d8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   1050c:	900f      	str	r0, [sp, #60]	; 0x3c
   1050e:	e7ff      	b.n	10510 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xa8>
   10510:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10512:	f7f8 fba9 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10516:	9013      	str	r0, [sp, #76]	; 0x4c
   10518:	e7ff      	b.n	1051a <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb2>
   1051a:	e7ff      	b.n	1051c <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb4>
   1051c:	e7d3      	b.n	104c6 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x5e>
        TOUCH_RESET.set_high() ? ;
   1051e:	f644 10b4 	movw	r0, #18868	; 0x49b4
   10522:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10526:	f003 fe7e 	bl	14226 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
   1052a:	900e      	str	r0, [sp, #56]	; 0x38
   1052c:	e7ff      	b.n	1052e <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xc6>
   1052e:	980e      	ldr	r0, [sp, #56]	; 0x38
   10530:	f7f8 fba6 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10534:	9016      	str	r0, [sp, #88]	; 0x58
   10536:	e7ff      	b.n	10538 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xd0>
   10538:	9816      	ldr	r0, [sp, #88]	; 0x58
   1053a:	1e41      	subs	r1, r0, #1
   1053c:	bf18      	it	ne
   1053e:	2101      	movne	r1, #1
   10540:	2801      	cmp	r0, #1
   10542:	d001      	beq.n	10548 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xe0>
   10544:	e7ff      	b.n	10546 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xde>
   10546:	e008      	b.n	1055a <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
   10548:	f644 10b8 	movw	r0, #18872	; 0x49b8
   1054c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10550:	21c8      	movs	r1, #200	; 0xc8
   10552:	f003 fe74 	bl	1423e <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   10556:	e00c      	b.n	10572 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x10a>
        TOUCH_RESET.set_high() ? ;
   10558:	defe      	udf	#254	; 0xfe
   1055a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1055c:	9038      	str	r0, [sp, #224]	; 0xe0
   1055e:	f001 ffbb 	bl	124d8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   10562:	900d      	str	r0, [sp, #52]	; 0x34
   10564:	e7ff      	b.n	10566 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xfe>
   10566:	980d      	ldr	r0, [sp, #52]	; 0x34
   10568:	f7f8 fb7e 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   1056c:	9013      	str	r0, [sp, #76]	; 0x4c
   1056e:	e7ff      	b.n	10570 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x108>
   10570:	e7d4      	b.n	1051c <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
   10572:	f644 10b8 	movw	r0, #18872	; 0x49b8
   10576:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1057a:	21c8      	movs	r1, #200	; 0xc8
   1057c:	f003 fe5f 	bl	1423e <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   10580:	e7ff      	b.n	10582 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
   10582:	f240 7025 	movw	r0, #1829	; 0x725
   10586:	f2c0 0001 	movt	r0, #1
   1058a:	9017      	str	r0, [sp, #92]	; 0x5c
   1058c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1058e:	f644 214c 	movw	r1, #19020	; 0x4a4c
   10592:	f2c2 0100 	movt	r1, #8192	; 0x2000
   10596:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
   10598:	f240 60d9 	movw	r0, #1753	; 0x6d9
   1059c:	f2c0 0001 	movt	r0, #1
   105a0:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
   105a2:	e7ff      	b.n	105a4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
   105a4:	9919      	ldr	r1, [sp, #100]	; 0x64
   105a6:	4668      	mov	r0, sp
   105a8:	2201      	movs	r2, #1
   105aa:	6002      	str	r2, [r0, #0]
   105ac:	201c      	movs	r0, #28
   105ae:	2200      	movs	r2, #0
   105b0:	2302      	movs	r3, #2
   105b2:	f007 f863 	bl	1767c <hal_gpio_irq_init>
   105b6:	9018      	str	r0, [sp, #96]	; 0x60
   105b8:	e7ff      	b.n	105ba <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
   105ba:	f24e 40ac 	movw	r0, #58540	; 0xe4ac
   105be:	f2c0 0001 	movt	r0, #1
   105c2:	6800      	ldr	r0, [r0, #0]
   105c4:	a918      	add	r1, sp, #96	; 0x60
   105c6:	911a      	str	r1, [sp, #104]	; 0x68
   105c8:	901b      	str	r0, [sp, #108]	; 0x6c
   105ca:	981a      	ldr	r0, [sp, #104]	; 0x68
   105cc:	9039      	str	r0, [sp, #228]	; 0xe4
   105ce:	991b      	ldr	r1, [sp, #108]	; 0x6c
   105d0:	913a      	str	r1, [sp, #232]	; 0xe8
   105d2:	6802      	ldr	r2, [r0, #0]
   105d4:	680b      	ldr	r3, [r1, #0]
   105d6:	429a      	cmp	r2, r3
   105d8:	900c      	str	r0, [sp, #48]	; 0x30
   105da:	910b      	str	r1, [sp, #44]	; 0x2c
   105dc:	d104      	bne.n	105e8 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x180>
   105de:	e7ff      	b.n	105e0 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x178>
   105e0:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
   105e2:	f007 f887 	bl	176f4 <hal_gpio_irq_enable>
   105e6:	e072      	b.n	106ce <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
   105e8:	f24e 5004 	movw	r0, #58628	; 0xe504
   105ec:	f2c0 0001 	movt	r0, #1
   105f0:	6801      	ldr	r1, [r0, #0]
   105f2:	980c      	ldr	r0, [sp, #48]	; 0x30
   105f4:	902b      	str	r0, [sp, #172]	; 0xac
   105f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   105f8:	922c      	str	r2, [sp, #176]	; 0xb0
   105fa:	f24e 5320 	movw	r3, #58656	; 0xe520
   105fe:	f2c0 0301 	movt	r3, #1
   10602:	681b      	ldr	r3, [r3, #0]
   10604:	f24e 5c24 	movw	ip, #58660	; 0xe524
   10608:	f2c0 0c01 	movt	ip, #1
   1060c:	f8dc c000 	ldr.w	ip, [ip]
   10610:	46ee      	mov	lr, sp
   10612:	2400      	movs	r4, #0
   10614:	f8ce 4000 	str.w	r4, [lr]
   10618:	a82d      	add	r0, sp, #180	; 0xb4
   1061a:	2201      	movs	r2, #1
   1061c:	910a      	str	r1, [sp, #40]	; 0x28
   1061e:	4619      	mov	r1, r3
   10620:	4663      	mov	r3, ip
   10622:	f000 fdeb 	bl	111fc <_ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE>
   10626:	e7ff      	b.n	10628 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x1c0>
   10628:	a82b      	add	r0, sp, #172	; 0xac
   1062a:	9028      	str	r0, [sp, #160]	; 0xa0
   1062c:	a82c      	add	r0, sp, #176	; 0xb0
   1062e:	9029      	str	r0, [sp, #164]	; 0xa4
   10630:	a82d      	add	r0, sp, #180	; 0xb4
   10632:	902a      	str	r0, [sp, #168]	; 0xa8
   10634:	9828      	ldr	r0, [sp, #160]	; 0xa0
   10636:	903b      	str	r0, [sp, #236]	; 0xec
   10638:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1063a:	913c      	str	r1, [sp, #240]	; 0xf0
   1063c:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   1063e:	923d      	str	r2, [sp, #244]	; 0xf4
   10640:	f241 6355 	movw	r3, #5717	; 0x1655
   10644:	f2c0 0301 	movt	r3, #1
   10648:	9109      	str	r1, [sp, #36]	; 0x24
   1064a:	4619      	mov	r1, r3
   1064c:	9208      	str	r2, [sp, #32]
   1064e:	f7f8 ff08 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   10652:	9007      	str	r0, [sp, #28]
   10654:	9106      	str	r1, [sp, #24]
   10656:	e7ff      	b.n	10658 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x1f0>
   10658:	f241 6155 	movw	r1, #5717	; 0x1655
   1065c:	f2c0 0101 	movt	r1, #1
   10660:	9809      	ldr	r0, [sp, #36]	; 0x24
   10662:	f7f8 fefe 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   10666:	9005      	str	r0, [sp, #20]
   10668:	9104      	str	r1, [sp, #16]
   1066a:	e7ff      	b.n	1066c <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x204>
   1066c:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   10670:	f2c0 0101 	movt	r1, #1
   10674:	9808      	ldr	r0, [sp, #32]
   10676:	f7f8 ff33 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1067a:	9003      	str	r0, [sp, #12]
   1067c:	9102      	str	r1, [sp, #8]
   1067e:	e7ff      	b.n	10680 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x218>
   10680:	9807      	ldr	r0, [sp, #28]
   10682:	9022      	str	r0, [sp, #136]	; 0x88
   10684:	9906      	ldr	r1, [sp, #24]
   10686:	9123      	str	r1, [sp, #140]	; 0x8c
   10688:	9a05      	ldr	r2, [sp, #20]
   1068a:	9224      	str	r2, [sp, #144]	; 0x90
   1068c:	9b04      	ldr	r3, [sp, #16]
   1068e:	9325      	str	r3, [sp, #148]	; 0x94
   10690:	f8dd c00c 	ldr.w	ip, [sp, #12]
   10694:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
   10698:	f8dd e008 	ldr.w	lr, [sp, #8]
   1069c:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
   106a0:	466c      	mov	r4, sp
   106a2:	2503      	movs	r5, #3
   106a4:	6025      	str	r5, [r4, #0]
   106a6:	a81c      	add	r0, sp, #112	; 0x70
   106a8:	ab22      	add	r3, sp, #136	; 0x88
   106aa:	990a      	ldr	r1, [sp, #40]	; 0x28
   106ac:	462a      	mov	r2, r5
   106ae:	f000 fda5 	bl	111fc <_ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE>
   106b2:	e7ff      	b.n	106b4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x24c>
   106b4:	f24e 5044 	movw	r0, #58692	; 0xe544
   106b8:	f2c0 0001 	movt	r0, #1
   106bc:	f004 ff05 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   106c0:	9001      	str	r0, [sp, #4]
   106c2:	e7ff      	b.n	106c4 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x25c>
   106c4:	a81c      	add	r0, sp, #112	; 0x70
   106c6:	9901      	ldr	r1, [sp, #4]
   106c8:	f004 ff3c 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   106cc:	defe      	udf	#254	; 0xfe
   106ce:	2000      	movs	r0, #0
    Ok(())
   106d0:	9013      	str	r0, [sp, #76]	; 0x4c
   106d2:	2001      	movs	r0, #1
   106d4:	9013      	str	r0, [sp, #76]	; 0x4c
}
   106d6:	e6f6      	b.n	104c6 <_ZN3app12touch_sensor18start_touch_sensor17h88de9fc17469ba4dE+0x5e>

000106d8 <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
   106d8:	b580      	push	{r7, lr}
   106da:	b086      	sub	sp, #24
   106dc:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
   106de:	f644 214c 	movw	r1, #19020	; 0x4a4c
   106e2:	f2c2 0100 	movt	r1, #8192	; 0x2000
   106e6:	6088      	str	r0, [r1, #8]
   106e8:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
   106ea:	f7f8 fb45 	bl	8d78 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
   106ee:	e7ff      	b.n	106f0 <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E+0x18>
   106f0:	f64b 319e 	movw	r1, #48030	; 0xbb9e
   106f4:	f2c0 0101 	movt	r1, #1
   106f8:	f24e 535c 	movw	r3, #58716	; 0xe55c
   106fc:	f2c0 0301 	movt	r3, #1
   10700:	a802      	add	r0, sp, #8
   10702:	2208      	movs	r2, #8
   10704:	f7fe fb4b 	bl	ed9e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17he3b5cba0354dd4b4E>
   10708:	4601      	mov	r1, r0
   1070a:	9005      	str	r0, [sp, #20]
   1070c:	9101      	str	r1, [sp, #4]
   1070e:	e7ff      	b.n	10710 <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
   10710:	f644 214c 	movw	r1, #19020	; 0x4a4c
   10714:	f2c2 0100 	movt	r1, #8192	; 0x2000
   10718:	9801      	ldr	r0, [sp, #4]
   1071a:	f008 f87e 	bl	1881a <os_eventq_put>
   1071e:	e7ff      	b.n	10720 <_ZN3app12touch_sensor23touch_interrupt_handler17h98cd6e49ce5fe9c3E+0x48>
    //console::print("touch\n"); ////
}
   10720:	b006      	add	sp, #24
   10722:	bd80      	pop	{r7, pc}

00010724 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
   10724:	b580      	push	{r7, lr}
   10726:	b094      	sub	sp, #80	; 0x50
   10728:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
   1072a:	f644 10b8 	movw	r0, #18872	; 0x49b8
   1072e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10732:	f000 f894 	bl	1085e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E>
   10736:	9006      	str	r0, [sp, #24]
   10738:	e7ff      	b.n	1073a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x16>
   1073a:	f24e 516c 	movw	r1, #58732	; 0xe56c
   1073e:	f2c0 0101 	movt	r1, #1
   10742:	f24e 537c 	movw	r3, #58748	; 0xe57c
   10746:	f2c0 0301 	movt	r3, #1
   1074a:	220e      	movs	r2, #14
   1074c:	9806      	ldr	r0, [sp, #24]
   1074e:	f7f8 fa58 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10752:	e7ff      	b.n	10754 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
   10754:	f644 10b8 	movw	r0, #18872	; 0x49b8
   10758:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1075c:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
   10760:	2100      	movs	r1, #0
   10762:	9107      	str	r1, [sp, #28]
   10764:	9008      	str	r0, [sp, #32]
   10766:	9807      	ldr	r0, [sp, #28]
   10768:	9908      	ldr	r1, [sp, #32]
   1076a:	f001 fa3d 	bl	11be8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   1076e:	9005      	str	r0, [sp, #20]
   10770:	9104      	str	r1, [sp, #16]
   10772:	e7ff      	b.n	10774 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x50>
   10774:	9805      	ldr	r0, [sp, #20]
   10776:	9009      	str	r0, [sp, #36]	; 0x24
   10778:	9904      	ldr	r1, [sp, #16]
   1077a:	910a      	str	r1, [sp, #40]	; 0x28
   1077c:	e7ff      	b.n	1077e <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x5a>
   1077e:	a809      	add	r0, sp, #36	; 0x24
   10780:	f001 f9a7 	bl	11ad2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10784:	910c      	str	r1, [sp, #48]	; 0x30
   10786:	900b      	str	r0, [sp, #44]	; 0x2c
   10788:	e7ff      	b.n	1078a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x66>
   1078a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1078c:	2800      	cmp	r0, #0
   1078e:	d001      	beq.n	10794 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x70>
   10790:	e7ff      	b.n	10792 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x6e>
   10792:	e002      	b.n	1079a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
   10794:	b014      	add	sp, #80	; 0x50
   10796:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
   10798:	defe      	udf	#254	; 0xfe
   1079a:	980c      	ldr	r0, [sp, #48]	; 0x30
   1079c:	900f      	str	r0, [sp, #60]	; 0x3c
   1079e:	9010      	str	r0, [sp, #64]	; 0x40
   107a0:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
   107a2:	2809      	cmp	r0, #9
   107a4:	9003      	str	r0, [sp, #12]
   107a6:	d851      	bhi.n	1084c <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x128>
   107a8:	e7ff      	b.n	107aa <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x86>
   107aa:	f644 10b8 	movw	r0, #18872	; 0x49b8
   107ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
   107b2:	9903      	ldr	r1, [sp, #12]
   107b4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   107b8:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
   107bc:	4603      	mov	r3, r0
   107be:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
   107c2:	f8b2 c002 	ldrh.w	ip, [r2, #2]
   107c6:	46e6      	mov	lr, ip
   107c8:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
   107cc:	7912      	ldrb	r2, [r2, #4]
   107ce:	4694      	mov	ip, r2
   107d0:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
   107d4:	2800      	cmp	r0, #0
   107d6:	9302      	str	r3, [sp, #8]
   107d8:	f8cd e004 	str.w	lr, [sp, #4]
   107dc:	f8cd c000 	str.w	ip, [sp]
   107e0:	d008      	beq.n	107f4 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xd0>
   107e2:	e003      	b.n	107ec <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xc8>
   107e4:	2001      	movs	r0, #1
   107e6:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
   107ea:	e008      	b.n	107fe <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xda>
   107ec:	2000      	movs	r0, #0
   107ee:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
   107f2:	e004      	b.n	107fe <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xda>
   107f4:	9801      	ldr	r0, [sp, #4]
   107f6:	0401      	lsls	r1, r0, #16
   107f8:	2900      	cmp	r1, #0
   107fa:	d0f3      	beq.n	107e4 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xc0>
   107fc:	e7f6      	b.n	107ec <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xc8>
   107fe:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
   10802:	07c0      	lsls	r0, r0, #31
   10804:	2800      	cmp	r0, #0
   10806:	d105      	bne.n	10814 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf0>
   10808:	e7ff      	b.n	1080a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xe6>
            if action != 0 && action != 2 { continue; }
   1080a:	9800      	ldr	r0, [sp, #0]
   1080c:	0601      	lsls	r1, r0, #24
   1080e:	2900      	cmp	r1, #0
   10810:	d10a      	bne.n	10828 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x104>
   10812:	e005      	b.n	10820 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xfc>
            if x == 0 && y == 0 { continue; }
   10814:	e7ff      	b.n	10816 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf2>
   10816:	e7b2      	b.n	1077e <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x5a>
   10818:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
   1081a:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1081e:	e008      	b.n	10832 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x10e>
   10820:	2000      	movs	r0, #0
   10822:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   10826:	e004      	b.n	10832 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x10e>
   10828:	9800      	ldr	r0, [sp, #0]
   1082a:	b2c1      	uxtb	r1, r0
   1082c:	2902      	cmp	r1, #2
   1082e:	d1f3      	bne.n	10818 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf4>
   10830:	e7f6      	b.n	10820 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xfc>
   10832:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   10836:	07c0      	lsls	r0, r0, #31
   10838:	2800      	cmp	r0, #0
   1083a:	d105      	bne.n	10848 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x124>
   1083c:	e7ff      	b.n	1083e <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x11a>
            super::handle_touch(x, y);
   1083e:	9802      	ldr	r0, [sp, #8]
   10840:	9901      	ldr	r1, [sp, #4]
   10842:	f7ff fdfa 	bl	1043a <_ZN3app5chip812handle_touch17h09fa961dda8dcb87E>
   10846:	e000      	b.n	1084a <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x126>
            if action != 0 && action != 2 { continue; }
   10848:	e7e5      	b.n	10816 <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
   1084a:	e798      	b.n	1077e <_ZN3app12touch_sensor20touch_event_callback17haf83c08607702637E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
   1084c:	f24e 508c 	movw	r0, #58764	; 0xe58c
   10850:	f2c0 0001 	movt	r0, #1
   10854:	220a      	movs	r2, #10
   10856:	9903      	ldr	r1, [sp, #12]
   10858:	f004 fe54 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1085c:	defe      	udf	#254	; 0xfe

0001085e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
   1085e:	b580      	push	{r7, lr}
   10860:	b0de      	sub	sp, #376	; 0x178
   10862:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
   10864:	4669      	mov	r1, sp
   10866:	223f      	movs	r2, #63	; 0x3f
   10868:	600a      	str	r2, [r1, #0]
   1086a:	f644 230a 	movw	r3, #18954	; 0x4a0a
   1086e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   10872:	2115      	movs	r1, #21
   10874:	f04f 0c00 	mov.w	ip, #0
   10878:	9026      	str	r0, [sp, #152]	; 0x98
   1087a:	4608      	mov	r0, r1
   1087c:	4661      	mov	r1, ip
   1087e:	f000 fb97 	bl	10fb0 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E>
   10882:	9025      	str	r0, [sp, #148]	; 0x94
   10884:	e7ff      	b.n	10886 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x28>
   10886:	f24e 519c 	movw	r1, #58780	; 0xe59c
   1088a:	f2c0 0101 	movt	r1, #1
   1088e:	f24e 53b0 	movw	r3, #58800	; 0xe5b0
   10892:	f2c0 0301 	movt	r3, #1
   10896:	2213      	movs	r2, #19
   10898:	9825      	ldr	r0, [sp, #148]	; 0x94
   1089a:	f7f8 f9b2 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1089e:	e7ff      	b.n	108a0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x42>
   108a0:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
   108a4:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
   108a6:	9024      	str	r0, [sp, #144]	; 0x90
   108a8:	9123      	str	r1, [sp, #140]	; 0x8c
   108aa:	f00b f91d 	bl	1bae8 <__aeabi_memclr>
   108ae:	a827      	add	r0, sp, #156	; 0x9c
   108b0:	9924      	ldr	r1, [sp, #144]	; 0x90
   108b2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   108b4:	f00b f91c 	bl	1baf0 <__aeabi_memcpy>
   108b8:	e7ff      	b.n	108ba <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5c>
   108ba:	a927      	add	r1, sp, #156	; 0x9c
   108bc:	2252      	movs	r2, #82	; 0x52
   108be:	9826      	ldr	r0, [sp, #152]	; 0x98
   108c0:	f00b f916 	bl	1baf0 <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
   108c4:	f644 210a 	movw	r1, #18954	; 0x4a0a
   108c8:	f2c2 0100 	movt	r1, #8192	; 0x2000
   108cc:	7889      	ldrb	r1, [r1, #2]
   108ce:	f001 010f 	and.w	r1, r1, #15
   108d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   108d4:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
   108d8:	2100      	movs	r1, #0
    data.count     = 0;
   108da:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
   108de:	9150      	str	r1, [sp, #320]	; 0x140
   108e0:	2105      	movs	r1, #5
   108e2:	9151      	str	r1, [sp, #324]	; 0x144
   108e4:	9950      	ldr	r1, [sp, #320]	; 0x140
   108e6:	9b51      	ldr	r3, [sp, #324]	; 0x144
   108e8:	9022      	str	r0, [sp, #136]	; 0x88
   108ea:	4608      	mov	r0, r1
   108ec:	4619      	mov	r1, r3
   108ee:	f001 f97b 	bl	11be8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
   108f2:	9021      	str	r0, [sp, #132]	; 0x84
   108f4:	9120      	str	r1, [sp, #128]	; 0x80
   108f6:	e7ff      	b.n	108f8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x9a>
   108f8:	9821      	ldr	r0, [sp, #132]	; 0x84
   108fa:	9052      	str	r0, [sp, #328]	; 0x148
   108fc:	9920      	ldr	r1, [sp, #128]	; 0x80
   108fe:	9153      	str	r1, [sp, #332]	; 0x14c
   10900:	e7ff      	b.n	10902 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xa4>
   10902:	a852      	add	r0, sp, #328	; 0x148
   10904:	f001 f8e5 	bl	11ad2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10908:	9155      	str	r1, [sp, #340]	; 0x154
   1090a:	9054      	str	r0, [sp, #336]	; 0x150
   1090c:	e7ff      	b.n	1090e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xb0>
   1090e:	9854      	ldr	r0, [sp, #336]	; 0x150
   10910:	2800      	cmp	r0, #0
   10912:	d001      	beq.n	10918 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xba>
   10914:	e7ff      	b.n	10916 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xb8>
   10916:	e001      	b.n	1091c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xbe>
   10918:	e00d      	b.n	10936 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xd8>
   1091a:	defe      	udf	#254	; 0xfe
   1091c:	9855      	ldr	r0, [sp, #340]	; 0x154
   1091e:	9058      	str	r0, [sp, #352]	; 0x160
   10920:	9059      	str	r0, [sp, #356]	; 0x164
   10922:	905a      	str	r0, [sp, #360]	; 0x168
   10924:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
   10926:	fba1 1200 	umull	r1, r2, r1, r0
   1092a:	2a00      	cmp	r2, #0
   1092c:	901f      	str	r0, [sp, #124]	; 0x7c
   1092e:	911e      	str	r1, [sp, #120]	; 0x78
   10930:	f040 81c1 	bne.w	10cb6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x458>
   10934:	e002      	b.n	1093c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xde>
   10936:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
   10938:	b05e      	add	sp, #376	; 0x178
   1093a:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
   1093c:	981e      	ldr	r0, [sp, #120]	; 0x78
   1093e:	1d41      	adds	r1, r0, #5
   10940:	460a      	mov	r2, r1
   10942:	4281      	cmp	r1, r0
   10944:	921d      	str	r2, [sp, #116]	; 0x74
   10946:	f0c0 81c2 	bcc.w	10cce <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x470>
   1094a:	e7ff      	b.n	1094c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xee>
   1094c:	981d      	ldr	r0, [sp, #116]	; 0x74
   1094e:	283e      	cmp	r0, #62	; 0x3e
   10950:	f200 81c9 	bhi.w	10ce6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x488>
   10954:	e7ff      	b.n	10956 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xf8>
   10956:	f644 200a 	movw	r0, #18954	; 0x4a0a
   1095a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1095e:	991d      	ldr	r1, [sp, #116]	; 0x74
   10960:	5c40      	ldrb	r0, [r0, r1]
   10962:	0900      	lsrs	r0, r0, #4
   10964:	901c      	str	r0, [sp, #112]	; 0x70
   10966:	e7ff      	b.n	10968 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x10a>
   10968:	981c      	ldr	r0, [sp, #112]	; 0x70
   1096a:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
   1096e:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
   10970:	290e      	cmp	r1, #14
   10972:	d80b      	bhi.n	1098c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x12e>
   10974:	e7ff      	b.n	10976 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x118>
        data.count += 1;
   10976:	9826      	ldr	r0, [sp, #152]	; 0x98
   10978:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
   1097c:	3101      	adds	r1, #1
   1097e:	b2ca      	uxtb	r2, r1
   10980:	460b      	mov	r3, r1
   10982:	428a      	cmp	r2, r1
   10984:	931b      	str	r3, [sp, #108]	; 0x6c
   10986:	f040 81b7 	bne.w	10cf8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x49a>
   1098a:	e001      	b.n	10990 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x132>
        if pointid >= HYN_MAX_ID { break; }
   1098c:	e7ff      	b.n	1098e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x130>
   1098e:	e7d2      	b.n	10936 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xd8>
        data.count += 1;
   10990:	981b      	ldr	r0, [sp, #108]	; 0x6c
   10992:	9926      	ldr	r1, [sp, #152]	; 0x98
   10994:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
   10998:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   1099a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1099c:	fba2 2c03 	umull	r2, ip, r2, r3
   109a0:	f1bc 0f00 	cmp.w	ip, #0
   109a4:	921a      	str	r2, [sp, #104]	; 0x68
   109a6:	f040 81b3 	bne.w	10d10 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4b2>
   109aa:	e7ff      	b.n	109ac <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x14e>
   109ac:	981a      	ldr	r0, [sp, #104]	; 0x68
   109ae:	1cc1      	adds	r1, r0, #3
   109b0:	460a      	mov	r2, r1
   109b2:	4281      	cmp	r1, r0
   109b4:	9219      	str	r2, [sp, #100]	; 0x64
   109b6:	f0c0 81b7 	bcc.w	10d28 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4ca>
   109ba:	e7ff      	b.n	109bc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x15e>
   109bc:	9819      	ldr	r0, [sp, #100]	; 0x64
   109be:	283e      	cmp	r0, #62	; 0x3e
   109c0:	f200 81be 	bhi.w	10d40 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4e2>
   109c4:	e7ff      	b.n	109c6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x168>
   109c6:	f644 200a 	movw	r0, #18954	; 0x4a0a
   109ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
   109ce:	9919      	ldr	r1, [sp, #100]	; 0x64
   109d0:	5c40      	ldrb	r0, [r0, r1]
   109d2:	f000 000f 	and.w	r0, r0, #15
   109d6:	4602      	mov	r2, r0
   109d8:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
   109dc:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
   109de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   109e0:	fba0 0c03 	umull	r0, ip, r0, r3
   109e4:	f1bc 0f00 	cmp.w	ip, #0
   109e8:	9218      	str	r2, [sp, #96]	; 0x60
   109ea:	9017      	str	r0, [sp, #92]	; 0x5c
   109ec:	f040 81b1 	bne.w	10d52 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x4f4>
   109f0:	e7ff      	b.n	109f2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x194>
   109f2:	9817      	ldr	r0, [sp, #92]	; 0x5c
   109f4:	1d01      	adds	r1, r0, #4
   109f6:	460a      	mov	r2, r1
   109f8:	4281      	cmp	r1, r0
   109fa:	9216      	str	r2, [sp, #88]	; 0x58
   109fc:	f0c0 81b5 	bcc.w	10d6a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x50c>
   10a00:	e7ff      	b.n	10a02 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1a4>
   10a02:	9816      	ldr	r0, [sp, #88]	; 0x58
   10a04:	283e      	cmp	r0, #62	; 0x3e
   10a06:	f200 81bc 	bhi.w	10d82 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x524>
   10a0a:	e7ff      	b.n	10a0c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1ae>
   10a0c:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10a10:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10a14:	9916      	ldr	r1, [sp, #88]	; 0x58
   10a16:	5c40      	ldrb	r0, [r0, r1]
   10a18:	4602      	mov	r2, r0
   10a1a:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
   10a1e:	9818      	ldr	r0, [sp, #96]	; 0x60
   10a20:	0203      	lsls	r3, r0, #8
   10a22:	9215      	str	r2, [sp, #84]	; 0x54
   10a24:	9314      	str	r3, [sp, #80]	; 0x50
   10a26:	e7ff      	b.n	10a28 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1ca>
   10a28:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10a2a:	2809      	cmp	r0, #9
   10a2c:	f200 81b2 	bhi.w	10d94 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x536>
   10a30:	e7ff      	b.n	10a32 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1d4>
   10a32:	9814      	ldr	r0, [sp, #80]	; 0x50
   10a34:	9915      	ldr	r1, [sp, #84]	; 0x54
   10a36:	ea40 0201 	orr.w	r2, r0, r1
   10a3a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10a3c:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
   10a40:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
   10a44:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   10a46:	fba2 2e0c 	umull	r2, lr, r2, ip
   10a4a:	f1be 0f00 	cmp.w	lr, #0
   10a4e:	9213      	str	r2, [sp, #76]	; 0x4c
   10a50:	f040 81a9 	bne.w	10da6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x548>
   10a54:	e7ff      	b.n	10a56 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x1f8>
   10a56:	9813      	ldr	r0, [sp, #76]	; 0x4c
   10a58:	1d41      	adds	r1, r0, #5
   10a5a:	460a      	mov	r2, r1
   10a5c:	4281      	cmp	r1, r0
   10a5e:	9212      	str	r2, [sp, #72]	; 0x48
   10a60:	f0c0 81ad 	bcc.w	10dbe <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x560>
   10a64:	e7ff      	b.n	10a66 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x208>
   10a66:	9812      	ldr	r0, [sp, #72]	; 0x48
   10a68:	283e      	cmp	r0, #62	; 0x3e
   10a6a:	f200 81b4 	bhi.w	10dd6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x578>
   10a6e:	e7ff      	b.n	10a70 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x212>
   10a70:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10a74:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10a78:	9912      	ldr	r1, [sp, #72]	; 0x48
   10a7a:	5c40      	ldrb	r0, [r0, r1]
   10a7c:	f000 000f 	and.w	r0, r0, #15
   10a80:	4602      	mov	r2, r0
   10a82:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
   10a86:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
   10a88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   10a8a:	fba0 0c03 	umull	r0, ip, r0, r3
   10a8e:	f1bc 0f00 	cmp.w	ip, #0
   10a92:	9211      	str	r2, [sp, #68]	; 0x44
   10a94:	9010      	str	r0, [sp, #64]	; 0x40
   10a96:	f040 81a7 	bne.w	10de8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x58a>
   10a9a:	e7ff      	b.n	10a9c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x23e>
   10a9c:	9810      	ldr	r0, [sp, #64]	; 0x40
   10a9e:	1d81      	adds	r1, r0, #6
   10aa0:	460a      	mov	r2, r1
   10aa2:	4281      	cmp	r1, r0
   10aa4:	920f      	str	r2, [sp, #60]	; 0x3c
   10aa6:	f0c0 81ab 	bcc.w	10e00 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5a2>
   10aaa:	e7ff      	b.n	10aac <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x24e>
   10aac:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10aae:	283e      	cmp	r0, #62	; 0x3e
   10ab0:	f200 81b2 	bhi.w	10e18 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5ba>
   10ab4:	e7ff      	b.n	10ab6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x258>
   10ab6:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10aba:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10abe:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10ac0:	5c40      	ldrb	r0, [r0, r1]
   10ac2:	4602      	mov	r2, r0
   10ac4:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
   10ac8:	9811      	ldr	r0, [sp, #68]	; 0x44
   10aca:	0203      	lsls	r3, r0, #8
   10acc:	920e      	str	r2, [sp, #56]	; 0x38
   10ace:	930d      	str	r3, [sp, #52]	; 0x34
   10ad0:	e7ff      	b.n	10ad2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x274>
   10ad2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10ad4:	2809      	cmp	r0, #9
   10ad6:	f200 81a8 	bhi.w	10e2a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5cc>
   10ada:	e7ff      	b.n	10adc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x27e>
   10adc:	9826      	ldr	r0, [sp, #152]	; 0x98
   10ade:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10ae0:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10ae6:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   10aea:	ea43 0e0c 	orr.w	lr, r3, ip
   10aee:	f8a2 e002 	strh.w	lr, [r2, #2]
   10af2:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
   10af4:	fba2 2e01 	umull	r2, lr, r2, r1
   10af8:	f1be 0f00 	cmp.w	lr, #0
   10afc:	920c      	str	r2, [sp, #48]	; 0x30
   10afe:	f040 819d 	bne.w	10e3c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5de>
   10b02:	e7ff      	b.n	10b04 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2a6>
   10b04:	980c      	ldr	r0, [sp, #48]	; 0x30
   10b06:	1cc1      	adds	r1, r0, #3
   10b08:	460a      	mov	r2, r1
   10b0a:	4281      	cmp	r1, r0
   10b0c:	920b      	str	r2, [sp, #44]	; 0x2c
   10b0e:	f0c0 81a1 	bcc.w	10e54 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x5f6>
   10b12:	e7ff      	b.n	10b14 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2b6>
   10b14:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10b16:	283e      	cmp	r0, #62	; 0x3e
   10b18:	f200 81a8 	bhi.w	10e6c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x60e>
   10b1c:	e7ff      	b.n	10b1e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2c0>
   10b1e:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10b22:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10b26:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10b28:	5c40      	ldrb	r0, [r0, r1]
   10b2a:	0980      	lsrs	r0, r0, #6
   10b2c:	900a      	str	r0, [sp, #40]	; 0x28
   10b2e:	e7ff      	b.n	10b30 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2d2>
        data.touches[i].action =
   10b30:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10b32:	2809      	cmp	r0, #9
   10b34:	f200 81a3 	bhi.w	10e7e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x620>
   10b38:	e7ff      	b.n	10b3a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2dc>
   10b3a:	9826      	ldr	r0, [sp, #152]	; 0x98
   10b3c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10b3e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10b44:	7113      	strb	r3, [r2, #4]
   10b46:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
   10b48:	fba2 2c01 	umull	r2, ip, r2, r1
   10b4c:	f1bc 0f00 	cmp.w	ip, #0
   10b50:	9209      	str	r2, [sp, #36]	; 0x24
   10b52:	f040 819d 	bne.w	10e90 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x632>
   10b56:	e7ff      	b.n	10b58 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x2fa>
   10b58:	9809      	ldr	r0, [sp, #36]	; 0x24
   10b5a:	1d41      	adds	r1, r0, #5
   10b5c:	460a      	mov	r2, r1
   10b5e:	4281      	cmp	r1, r0
   10b60:	9208      	str	r2, [sp, #32]
   10b62:	f0c0 81a1 	bcc.w	10ea8 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x64a>
   10b66:	e7ff      	b.n	10b68 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x30a>
   10b68:	9808      	ldr	r0, [sp, #32]
   10b6a:	283e      	cmp	r0, #62	; 0x3e
   10b6c:	f200 81a8 	bhi.w	10ec0 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x662>
   10b70:	e7ff      	b.n	10b72 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x314>
   10b72:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10b76:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10b7a:	9908      	ldr	r1, [sp, #32]
   10b7c:	5c40      	ldrb	r0, [r0, r1]
   10b7e:	0900      	lsrs	r0, r0, #4
   10b80:	9007      	str	r0, [sp, #28]
   10b82:	e7ff      	b.n	10b84 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x326>
        data.touches[i].finger =
   10b84:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10b86:	2809      	cmp	r0, #9
   10b88:	f200 81a3 	bhi.w	10ed2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x674>
   10b8c:	e7ff      	b.n	10b8e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x330>
   10b8e:	9826      	ldr	r0, [sp, #152]	; 0x98
   10b90:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10b92:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10b96:	9b07      	ldr	r3, [sp, #28]
   10b98:	7153      	strb	r3, [r2, #5]
   10b9a:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
   10b9c:	fba2 2c01 	umull	r2, ip, r2, r1
   10ba0:	f1bc 0f00 	cmp.w	ip, #0
   10ba4:	9206      	str	r2, [sp, #24]
   10ba6:	f040 819d 	bne.w	10ee4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x686>
   10baa:	e7ff      	b.n	10bac <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x34e>
   10bac:	9806      	ldr	r0, [sp, #24]
   10bae:	1dc1      	adds	r1, r0, #7
   10bb0:	460a      	mov	r2, r1
   10bb2:	4281      	cmp	r1, r0
   10bb4:	9205      	str	r2, [sp, #20]
   10bb6:	f0c0 81a1 	bcc.w	10efc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x69e>
   10bba:	e7ff      	b.n	10bbc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x35e>
   10bbc:	9805      	ldr	r0, [sp, #20]
   10bbe:	283e      	cmp	r0, #62	; 0x3e
   10bc0:	f200 81a8 	bhi.w	10f14 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6b6>
   10bc4:	e7ff      	b.n	10bc6 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x368>
   10bc6:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10bca:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10bce:	9905      	ldr	r1, [sp, #20]
   10bd0:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
   10bd2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   10bd4:	2a09      	cmp	r2, #9
   10bd6:	9004      	str	r0, [sp, #16]
   10bd8:	f200 81a5 	bhi.w	10f26 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6c8>
   10bdc:	e7ff      	b.n	10bde <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x380>
   10bde:	9826      	ldr	r0, [sp, #152]	; 0x98
   10be0:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10be2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10be6:	9b04      	ldr	r3, [sp, #16]
   10be8:	7193      	strb	r3, [r2, #6]
   10bea:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
   10bec:	fba2 2c01 	umull	r2, ip, r2, r1
   10bf0:	f1bc 0f00 	cmp.w	ip, #0
   10bf4:	9203      	str	r2, [sp, #12]
   10bf6:	f040 819f 	bne.w	10f38 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6da>
   10bfa:	e7ff      	b.n	10bfc <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x39e>
   10bfc:	9803      	ldr	r0, [sp, #12]
   10bfe:	f100 0108 	add.w	r1, r0, #8
   10c02:	460a      	mov	r2, r1
   10c04:	4281      	cmp	r1, r0
   10c06:	9202      	str	r2, [sp, #8]
   10c08:	f0c0 81a2 	bcc.w	10f50 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x6f2>
   10c0c:	e7ff      	b.n	10c0e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3b0>
   10c0e:	9802      	ldr	r0, [sp, #8]
   10c10:	283e      	cmp	r0, #62	; 0x3e
   10c12:	f200 81a9 	bhi.w	10f68 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x70a>
   10c16:	e7ff      	b.n	10c18 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3ba>
   10c18:	f644 200a 	movw	r0, #18954	; 0x4a0a
   10c1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10c20:	9902      	ldr	r1, [sp, #8]
   10c22:	5c40      	ldrb	r0, [r0, r1]
   10c24:	0900      	lsrs	r0, r0, #4
   10c26:	9001      	str	r0, [sp, #4]
   10c28:	e7ff      	b.n	10c2a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3cc>
        data.touches[i].area =
   10c2a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10c2c:	2809      	cmp	r0, #9
   10c2e:	f200 81a4 	bhi.w	10f7a <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x71c>
   10c32:	e7ff      	b.n	10c34 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3d6>
   10c34:	9826      	ldr	r0, [sp, #152]	; 0x98
   10c36:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10c38:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10c3c:	9b01      	ldr	r3, [sp, #4]
   10c3e:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
   10c40:	290a      	cmp	r1, #10
   10c42:	d326      	bcc.n	10c92 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x434>
   10c44:	e1a2      	b.n	10f8c <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x72e>
   10c46:	2001      	movs	r0, #1
   10c48:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
   10c4c:	e009      	b.n	10c62 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x404>
   10c4e:	2000      	movs	r0, #0
   10c50:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
   10c54:	e005      	b.n	10c62 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x404>
            && (data.point_num == 0) {
   10c56:	9826      	ldr	r0, [sp, #152]	; 0x98
   10c58:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
   10c5c:	2900      	cmp	r1, #0
   10c5e:	d0f2      	beq.n	10c46 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3e8>
   10c60:	e7f5      	b.n	10c4e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3f0>
   10c62:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
   10c66:	07c0      	lsls	r0, r0, #31
   10c68:	2800      	cmp	r0, #0
   10c6a:	d123      	bne.n	10cb4 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x456>
   10c6c:	e021      	b.n	10cb2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x454>
   10c6e:	2001      	movs	r0, #1
   10c70:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
   10c74:	e007      	b.n	10c86 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x428>
   10c76:	2000      	movs	r0, #0
   10c78:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
   10c7c:	e003      	b.n	10c86 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x428>
   10c7e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10c80:	280a      	cmp	r0, #10
   10c82:	d30e      	bcc.n	10ca2 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x444>
   10c84:	e18b      	b.n	10f9e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x740>
   10c86:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
   10c8a:	07c0      	lsls	r0, r0, #31
   10c8c:	2800      	cmp	r0, #0
   10c8e:	d1e2      	bne.n	10c56 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3f8>
   10c90:	e7dd      	b.n	10c4e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x3f0>
   10c92:	9826      	ldr	r0, [sp, #152]	; 0x98
   10c94:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10c96:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10c9a:	7912      	ldrb	r2, [r2, #4]
   10c9c:	2a00      	cmp	r2, #0
   10c9e:	d0e6      	beq.n	10c6e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x410>
   10ca0:	e7ed      	b.n	10c7e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x420>
   10ca2:	9826      	ldr	r0, [sp, #152]	; 0x98
   10ca4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10ca6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   10caa:	7912      	ldrb	r2, [r2, #4]
   10cac:	2a02      	cmp	r2, #2
   10cae:	d0de      	beq.n	10c6e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x410>
   10cb0:	e7e1      	b.n	10c76 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
   10cb2:	e626      	b.n	10902 <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0xa4>
            break;
   10cb4:	e66b      	b.n	1098e <_ZN3app12touch_sensor14read_touchdata17h0558d282755ffa70E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
   10cb6:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
   10cba:	f2c0 0001 	movt	r0, #1
   10cbe:	f24e 52c0 	movw	r2, #58816	; 0xe5c0
   10cc2:	f2c0 0201 	movt	r2, #1
   10cc6:	2121      	movs	r1, #33	; 0x21
   10cc8:	f004 fc06 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ccc:	defe      	udf	#254	; 0xfe
   10cce:	f24e 6010 	movw	r0, #58896	; 0xe610
   10cd2:	f2c0 0001 	movt	r0, #1
   10cd6:	f24e 52f4 	movw	r2, #58868	; 0xe5f4
   10cda:	f2c0 0201 	movt	r2, #1
   10cde:	211c      	movs	r1, #28
   10ce0:	f004 fbfa 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ce4:	defe      	udf	#254	; 0xfe
   10ce6:	f24e 602c 	movw	r0, #58924	; 0xe62c
   10cea:	f2c0 0001 	movt	r0, #1
   10cee:	223f      	movs	r2, #63	; 0x3f
   10cf0:	991d      	ldr	r1, [sp, #116]	; 0x74
   10cf2:	f004 fc07 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10cf6:	defe      	udf	#254	; 0xfe
        data.count += 1;
   10cf8:	f24e 6010 	movw	r0, #58896	; 0xe610
   10cfc:	f2c0 0001 	movt	r0, #1
   10d00:	f24e 623c 	movw	r2, #58940	; 0xe63c
   10d04:	f2c0 0201 	movt	r2, #1
   10d08:	211c      	movs	r1, #28
   10d0a:	f004 fbe5 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10d0e:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   10d10:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
   10d14:	f2c0 0001 	movt	r0, #1
   10d18:	f24e 624c 	movw	r2, #58956	; 0xe64c
   10d1c:	f2c0 0201 	movt	r2, #1
   10d20:	2121      	movs	r1, #33	; 0x21
   10d22:	f004 fbd9 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10d26:	defe      	udf	#254	; 0xfe
   10d28:	f24e 6010 	movw	r0, #58896	; 0xe610
   10d2c:	f2c0 0001 	movt	r0, #1
   10d30:	f24e 625c 	movw	r2, #58972	; 0xe65c
   10d34:	f2c0 0201 	movt	r2, #1
   10d38:	211c      	movs	r1, #28
   10d3a:	f004 fbcd 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10d3e:	defe      	udf	#254	; 0xfe
   10d40:	f24e 606c 	movw	r0, #58988	; 0xe66c
   10d44:	f2c0 0001 	movt	r0, #1
   10d48:	223f      	movs	r2, #63	; 0x3f
   10d4a:	9919      	ldr	r1, [sp, #100]	; 0x64
   10d4c:	f004 fbda 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d50:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
   10d52:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
   10d56:	f2c0 0001 	movt	r0, #1
   10d5a:	f24e 627c 	movw	r2, #59004	; 0xe67c
   10d5e:	f2c0 0201 	movt	r2, #1
   10d62:	2121      	movs	r1, #33	; 0x21
   10d64:	f004 fbb8 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10d68:	defe      	udf	#254	; 0xfe
   10d6a:	f24e 6010 	movw	r0, #58896	; 0xe610
   10d6e:	f2c0 0001 	movt	r0, #1
   10d72:	f24e 628c 	movw	r2, #59020	; 0xe68c
   10d76:	f2c0 0201 	movt	r2, #1
   10d7a:	211c      	movs	r1, #28
   10d7c:	f004 fbac 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10d80:	defe      	udf	#254	; 0xfe
   10d82:	f24e 609c 	movw	r0, #59036	; 0xe69c
   10d86:	f2c0 0001 	movt	r0, #1
   10d8a:	223f      	movs	r2, #63	; 0x3f
   10d8c:	9916      	ldr	r1, [sp, #88]	; 0x58
   10d8e:	f004 fbb9 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10d92:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
   10d94:	f24e 60ac 	movw	r0, #59052	; 0xe6ac
   10d98:	f2c0 0001 	movt	r0, #1
   10d9c:	220a      	movs	r2, #10
   10d9e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10da0:	f004 fbb0 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10da4:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
   10da6:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
   10daa:	f2c0 0001 	movt	r0, #1
   10dae:	f24e 62bc 	movw	r2, #59068	; 0xe6bc
   10db2:	f2c0 0201 	movt	r2, #1
   10db6:	2121      	movs	r1, #33	; 0x21
   10db8:	f004 fb8e 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10dbc:	defe      	udf	#254	; 0xfe
   10dbe:	f24e 6010 	movw	r0, #58896	; 0xe610
   10dc2:	f2c0 0001 	movt	r0, #1
   10dc6:	f24e 62cc 	movw	r2, #59084	; 0xe6cc
   10dca:	f2c0 0201 	movt	r2, #1
   10dce:	211c      	movs	r1, #28
   10dd0:	f004 fb82 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10dd4:	defe      	udf	#254	; 0xfe
   10dd6:	f24e 60dc 	movw	r0, #59100	; 0xe6dc
   10dda:	f2c0 0001 	movt	r0, #1
   10dde:	223f      	movs	r2, #63	; 0x3f
   10de0:	9912      	ldr	r1, [sp, #72]	; 0x48
   10de2:	f004 fb8f 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10de6:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
   10de8:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
   10dec:	f2c0 0001 	movt	r0, #1
   10df0:	f24e 62ec 	movw	r2, #59116	; 0xe6ec
   10df4:	f2c0 0201 	movt	r2, #1
   10df8:	2121      	movs	r1, #33	; 0x21
   10dfa:	f004 fb6d 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10dfe:	defe      	udf	#254	; 0xfe
   10e00:	f24e 6010 	movw	r0, #58896	; 0xe610
   10e04:	f2c0 0001 	movt	r0, #1
   10e08:	f24e 62fc 	movw	r2, #59132	; 0xe6fc
   10e0c:	f2c0 0201 	movt	r2, #1
   10e10:	211c      	movs	r1, #28
   10e12:	f004 fb61 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10e16:	defe      	udf	#254	; 0xfe
   10e18:	f24e 700c 	movw	r0, #59148	; 0xe70c
   10e1c:	f2c0 0001 	movt	r0, #1
   10e20:	223f      	movs	r2, #63	; 0x3f
   10e22:	990f      	ldr	r1, [sp, #60]	; 0x3c
   10e24:	f004 fb6e 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10e28:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
   10e2a:	f24e 701c 	movw	r0, #59164	; 0xe71c
   10e2e:	f2c0 0001 	movt	r0, #1
   10e32:	220a      	movs	r2, #10
   10e34:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10e36:	f004 fb65 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10e3a:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
   10e3c:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
   10e40:	f2c0 0001 	movt	r0, #1
   10e44:	f24e 722c 	movw	r2, #59180	; 0xe72c
   10e48:	f2c0 0201 	movt	r2, #1
   10e4c:	2121      	movs	r1, #33	; 0x21
   10e4e:	f004 fb43 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10e52:	defe      	udf	#254	; 0xfe
   10e54:	f24e 6010 	movw	r0, #58896	; 0xe610
   10e58:	f2c0 0001 	movt	r0, #1
   10e5c:	f24e 723c 	movw	r2, #59196	; 0xe73c
   10e60:	f2c0 0201 	movt	r2, #1
   10e64:	211c      	movs	r1, #28
   10e66:	f004 fb37 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10e6a:	defe      	udf	#254	; 0xfe
   10e6c:	f24e 704c 	movw	r0, #59212	; 0xe74c
   10e70:	f2c0 0001 	movt	r0, #1
   10e74:	223f      	movs	r2, #63	; 0x3f
   10e76:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10e78:	f004 fb44 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10e7c:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
   10e7e:	f24e 705c 	movw	r0, #59228	; 0xe75c
   10e82:	f2c0 0001 	movt	r0, #1
   10e86:	220a      	movs	r2, #10
   10e88:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10e8a:	f004 fb3b 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10e8e:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
   10e90:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
   10e94:	f2c0 0001 	movt	r0, #1
   10e98:	f24e 726c 	movw	r2, #59244	; 0xe76c
   10e9c:	f2c0 0201 	movt	r2, #1
   10ea0:	2121      	movs	r1, #33	; 0x21
   10ea2:	f004 fb19 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ea6:	defe      	udf	#254	; 0xfe
   10ea8:	f24e 6010 	movw	r0, #58896	; 0xe610
   10eac:	f2c0 0001 	movt	r0, #1
   10eb0:	f24e 727c 	movw	r2, #59260	; 0xe77c
   10eb4:	f2c0 0201 	movt	r2, #1
   10eb8:	211c      	movs	r1, #28
   10eba:	f004 fb0d 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ebe:	defe      	udf	#254	; 0xfe
   10ec0:	f24e 708c 	movw	r0, #59276	; 0xe78c
   10ec4:	f2c0 0001 	movt	r0, #1
   10ec8:	223f      	movs	r2, #63	; 0x3f
   10eca:	9908      	ldr	r1, [sp, #32]
   10ecc:	f004 fb1a 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ed0:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
   10ed2:	f24e 709c 	movw	r0, #59292	; 0xe79c
   10ed6:	f2c0 0001 	movt	r0, #1
   10eda:	220a      	movs	r2, #10
   10edc:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10ede:	f004 fb11 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10ee2:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
   10ee4:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
   10ee8:	f2c0 0001 	movt	r0, #1
   10eec:	f24e 72ac 	movw	r2, #59308	; 0xe7ac
   10ef0:	f2c0 0201 	movt	r2, #1
   10ef4:	2121      	movs	r1, #33	; 0x21
   10ef6:	f004 faef 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10efa:	defe      	udf	#254	; 0xfe
   10efc:	f24e 6010 	movw	r0, #58896	; 0xe610
   10f00:	f2c0 0001 	movt	r0, #1
   10f04:	f24e 72bc 	movw	r2, #59324	; 0xe7bc
   10f08:	f2c0 0201 	movt	r2, #1
   10f0c:	211c      	movs	r1, #28
   10f0e:	f004 fae3 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f12:	defe      	udf	#254	; 0xfe
   10f14:	f24e 70cc 	movw	r0, #59340	; 0xe7cc
   10f18:	f2c0 0001 	movt	r0, #1
   10f1c:	223f      	movs	r2, #63	; 0x3f
   10f1e:	9905      	ldr	r1, [sp, #20]
   10f20:	f004 faf0 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10f24:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
   10f26:	f24e 70dc 	movw	r0, #59356	; 0xe7dc
   10f2a:	f2c0 0001 	movt	r0, #1
   10f2e:	220a      	movs	r2, #10
   10f30:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10f32:	f004 fae7 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10f36:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
   10f38:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
   10f3c:	f2c0 0001 	movt	r0, #1
   10f40:	f24e 72ec 	movw	r2, #59372	; 0xe7ec
   10f44:	f2c0 0201 	movt	r2, #1
   10f48:	2121      	movs	r1, #33	; 0x21
   10f4a:	f004 fac5 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f4e:	defe      	udf	#254	; 0xfe
   10f50:	f24e 6010 	movw	r0, #58896	; 0xe610
   10f54:	f2c0 0001 	movt	r0, #1
   10f58:	f24e 72fc 	movw	r2, #59388	; 0xe7fc
   10f5c:	f2c0 0201 	movt	r2, #1
   10f60:	211c      	movs	r1, #28
   10f62:	f004 fab9 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10f66:	defe      	udf	#254	; 0xfe
   10f68:	f64e 000c 	movw	r0, #59404	; 0xe80c
   10f6c:	f2c0 0001 	movt	r0, #1
   10f70:	223f      	movs	r2, #63	; 0x3f
   10f72:	9902      	ldr	r1, [sp, #8]
   10f74:	f004 fac6 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10f78:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
   10f7a:	f64e 001c 	movw	r0, #59420	; 0xe81c
   10f7e:	f2c0 0001 	movt	r0, #1
   10f82:	220a      	movs	r2, #10
   10f84:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10f86:	f004 fabd 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10f8a:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
   10f8c:	f64e 002c 	movw	r0, #59436	; 0xe82c
   10f90:	f2c0 0001 	movt	r0, #1
   10f94:	220a      	movs	r2, #10
   10f96:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10f98:	f004 fab4 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10f9c:	defe      	udf	#254	; 0xfe
   10f9e:	f64e 003c 	movw	r0, #59452	; 0xe83c
   10fa2:	f2c0 0001 	movt	r0, #1
   10fa6:	220a      	movs	r2, #10
   10fa8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10faa:	f004 faab 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10fae:	defe      	udf	#254	; 0xfe

00010fb0 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
   10fb0:	b5b0      	push	{r4, r5, r7, lr}
   10fb2:	b094      	sub	sp, #80	; 0x50
   10fb4:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
   10fb8:	4696      	mov	lr, r2
   10fba:	460c      	mov	r4, r1
   10fbc:	4605      	mov	r5, r0
   10fbe:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
   10fc2:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
   10fc6:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
   10fca:	9310      	str	r3, [sp, #64]	; 0x40
   10fcc:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
   10fd0:	4618      	mov	r0, r3
   10fd2:	4661      	mov	r1, ip
   10fd4:	930d      	str	r3, [sp, #52]	; 0x34
   10fd6:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   10fda:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   10fde:	940a      	str	r4, [sp, #40]	; 0x28
   10fe0:	9509      	str	r5, [sp, #36]	; 0x24
   10fe2:	f000 fdda 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   10fe6:	9008      	str	r0, [sp, #32]
   10fe8:	e7ff      	b.n	10fea <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x3a>
   10fea:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10fec:	b2c1      	uxtb	r1, r0
   10fee:	9a08      	ldr	r2, [sp, #32]
   10ff0:	428a      	cmp	r2, r1
   10ff2:	d30d      	bcc.n	11010 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x60>
   10ff4:	e7ff      	b.n	10ff6 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   10ff6:	980a      	ldr	r0, [sp, #40]	; 0x28
   10ff8:	b2c1      	uxtb	r1, r0
   10ffa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10ffc:	fa51 f182 	uxtab	r1, r1, r2
   11000:	b2cb      	uxtb	r3, r1
   11002:	468c      	mov	ip, r1
   11004:	428b      	cmp	r3, r1
   11006:	f8cd c01c 	str.w	ip, [sp, #28]
   1100a:	f040 8092 	bne.w	11132 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x182>
   1100e:	e00b      	b.n	11028 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
   11010:	f64e 004c 	movw	r0, #59468	; 0xe84c
   11014:	f2c0 0001 	movt	r0, #1
   11018:	f64e 0254 	movw	r2, #59476	; 0xe854
   1101c:	f2c0 0201 	movt	r2, #1
   11020:	2107      	movs	r1, #7
   11022:	f004 fa59 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11026:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   11028:	9807      	ldr	r0, [sp, #28]
   1102a:	b241      	sxtb	r1, r0
   1102c:	2900      	cmp	r1, #0
   1102e:	d411      	bmi.n	11054 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0xa4>
   11030:	e7ff      	b.n	11032 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
   11032:	f644 2064 	movw	r0, #19044	; 0x4a64
   11036:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1103a:	990a      	ldr	r1, [sp, #40]	; 0x28
   1103c:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
   1103e:	f644 225c 	movw	r2, #19036	; 0x4a5c
   11042:	f2c2 0200 	movt	r2, #8192	; 0x2000
   11046:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11048:	7013      	strb	r3, [r2, #0]
   1104a:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
   1104c:	f000 fda5 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   11050:	9006      	str	r0, [sp, #24]
   11052:	e00b      	b.n	1106c <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   11054:	f24e 5054 	movw	r0, #58708	; 0xe554
   11058:	f2c0 0001 	movt	r0, #1
   1105c:	f64e 0274 	movw	r2, #59508	; 0xe874
   11060:	f2c0 0201 	movt	r2, #1
   11064:	2108      	movs	r1, #8
   11066:	f004 fa37 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1106a:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
   1106c:	f644 205c 	movw	r0, #19036	; 0x4a5c
   11070:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11074:	9906      	ldr	r1, [sp, #24]
   11076:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
   11078:	f644 2064 	movw	r0, #19044	; 0x4a64
   1107c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11080:	2101      	movs	r1, #1
   11082:	f000 fd73 	bl	11b6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11086:	9005      	str	r0, [sp, #20]
   11088:	e7ff      	b.n	1108a <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0xda>
   1108a:	f644 205c 	movw	r0, #19036	; 0x4a5c
   1108e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11092:	9905      	ldr	r1, [sp, #20]
   11094:	6041      	str	r1, [r0, #4]
   11096:	2201      	movs	r2, #1
   11098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1109c:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
   110a0:	9004      	str	r0, [sp, #16]
   110a2:	4610      	mov	r0, r2
   110a4:	9904      	ldr	r1, [sp, #16]
   110a6:	461a      	mov	r2, r3
   110a8:	4663      	mov	r3, ip
   110aa:	f006 fc3b 	bl	17924 <hal_i2c_master_write>
   110ae:	9012      	str	r0, [sp, #72]	; 0x48
   110b0:	e7ff      	b.n	110b2 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
   110b2:	f644 2064 	movw	r0, #19044	; 0x4a64
   110b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   110ba:	2100      	movs	r1, #0
   110bc:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
   110be:	f644 205c 	movw	r0, #19036	; 0x4a5c
   110c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   110c6:	9909      	ldr	r1, [sp, #36]	; 0x24
   110c8:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
   110ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   110cc:	b2d3      	uxtb	r3, r2
   110ce:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
   110d0:	980d      	ldr	r0, [sp, #52]	; 0x34
   110d2:	990c      	ldr	r1, [sp, #48]	; 0x30
   110d4:	f000 fd4a 	bl	11b6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   110d8:	9003      	str	r0, [sp, #12]
   110da:	e7ff      	b.n	110dc <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x12c>
   110dc:	f644 205c 	movw	r0, #19036	; 0x4a5c
   110e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   110e4:	9903      	ldr	r1, [sp, #12]
   110e6:	6041      	str	r1, [r0, #4]
   110e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   110ec:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
   110ee:	9002      	str	r0, [sp, #8]
   110f0:	4618      	mov	r0, r3
   110f2:	9902      	ldr	r1, [sp, #8]
   110f4:	f006 fcaa 	bl	17a4c <hal_i2c_master_read>
   110f8:	4601      	mov	r1, r0
   110fa:	9013      	str	r0, [sp, #76]	; 0x4c
   110fc:	9101      	str	r1, [sp, #4]
   110fe:	e7ff      	b.n	11100 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
   11100:	9801      	ldr	r0, [sp, #4]
   11102:	2804      	cmp	r0, #4
   11104:	d005      	beq.n	11112 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x162>
   11106:	e7ff      	b.n	11108 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x158>
   11108:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
   1110a:	900e      	str	r0, [sp, #56]	; 0x38
   1110c:	2001      	movs	r0, #1
   1110e:	900e      	str	r0, [sp, #56]	; 0x38
}
   11110:	e00c      	b.n	1112c <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x17c>
        console::print("i2c fail\n"); ////
   11112:	f64e 0084 	movw	r0, #59524	; 0xe884
   11116:	f2c0 0001 	movt	r0, #1
   1111a:	2109      	movs	r1, #9
   1111c:	f7f7 ffec 	bl	90f8 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
   11120:	e7ff      	b.n	11122 <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x172>
   11122:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
   11124:	900e      	str	r0, [sp, #56]	; 0x38
   11126:	2001      	movs	r0, #1
   11128:	900e      	str	r0, [sp, #56]	; 0x38
   1112a:	e7ff      	b.n	1112c <_ZN3app12touch_sensor19read_register_range17h1ee60ea5dbd21769E+0x17c>
}
   1112c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1112e:	b014      	add	sp, #80	; 0x50
   11130:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
   11132:	f24e 6010 	movw	r0, #58896	; 0xe610
   11136:	f2c0 0001 	movt	r0, #1
   1113a:	f64e 0264 	movw	r2, #59492	; 0xe864
   1113e:	f2c0 0201 	movt	r2, #1
   11142:	211c      	movs	r1, #28
   11144:	f004 f9c8 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11148:	defe      	udf	#254	; 0xfe

0001114a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hf19fb35e5afa7ee8E>:
    fn le(&self, other: &LevelFilter) -> bool {
   1114a:	b082      	sub	sp, #8
   1114c:	9000      	str	r0, [sp, #0]
   1114e:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   11150:	6800      	ldr	r0, [r0, #0]
   11152:	6809      	ldr	r1, [r1, #0]
   11154:	2200      	movs	r2, #0
   11156:	4288      	cmp	r0, r1
   11158:	bf98      	it	ls
   1115a:	2201      	movls	r2, #1
    }
   1115c:	4610      	mov	r0, r2
   1115e:	b002      	add	sp, #8
   11160:	4770      	bx	lr

00011162 <_ZN22piet_embedded_graphics7display18set_display_pixels17hee35995df7c8ec94E>:
        item
    ).expect("draw blocks fail");
}

/// Draw the pixel colours to the display at the window from (sx,sy) to (ex,ey)
pub fn set_display_pixels<P: IntoIterator<Item = u16>>(sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
   11162:	b5f0      	push	{r4, r5, r6, r7, lr}
   11164:	b08d      	sub	sp, #52	; 0x34
   11166:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   1116a:	469e      	mov	lr, r3
   1116c:	4614      	mov	r4, r2
   1116e:	460d      	mov	r5, r1
   11170:	4606      	mov	r6, r0
   11172:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   11176:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
   1117a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
   1117e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    unsafe { DISPLAY.set_pixels(sx, sy, ex, ey, colors) }
   11182:	466f      	mov	r7, sp
   11184:	f8c7 c004 	str.w	ip, [r7, #4]
   11188:	603b      	str	r3, [r7, #0]
   1118a:	f240 1348 	movw	r3, #328	; 0x148
   1118e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   11192:	900a      	str	r0, [sp, #40]	; 0x28
   11194:	4618      	mov	r0, r3
   11196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11198:	9109      	str	r1, [sp, #36]	; 0x24
   1119a:	4619      	mov	r1, r3
   1119c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   111a0:	9208      	str	r2, [sp, #32]
   111a2:	4662      	mov	r2, ip
   111a4:	9b08      	ldr	r3, [sp, #32]
   111a6:	f8cd e01c 	str.w	lr, [sp, #28]
   111aa:	9406      	str	r4, [sp, #24]
   111ac:	9505      	str	r5, [sp, #20]
   111ae:	9604      	str	r6, [sp, #16]
   111b0:	f003 fb1d 	bl	147ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E>
   111b4:	9003      	str	r0, [sp, #12]
   111b6:	e7ff      	b.n	111b8 <_ZN22piet_embedded_graphics7display18set_display_pixels17hee35995df7c8ec94E+0x56>
}
   111b8:	9803      	ldr	r0, [sp, #12]
   111ba:	f000 0001 	and.w	r0, r0, #1
   111be:	b00d      	add	sp, #52	; 0x34
   111c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000111c2 <_ZN4core3fmt9Arguments16new_v1_formatted17hacdcc7244c77b88cE>:
   111c2:	b510      	push	{r4, lr}
   111c4:	b088      	sub	sp, #32
   111c6:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   111ca:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   111ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   111d0:	9102      	str	r1, [sp, #8]
   111d2:	9203      	str	r2, [sp, #12]
   111d4:	9304      	str	r3, [sp, #16]
   111d6:	9405      	str	r4, [sp, #20]
   111d8:	f8cd e018 	str.w	lr, [sp, #24]
   111dc:	f8cd c01c 	str.w	ip, [sp, #28]
   111e0:	f8cd e000 	str.w	lr, [sp]
   111e4:	f8cd c004 	str.w	ip, [sp, #4]
   111e8:	6001      	str	r1, [r0, #0]
   111ea:	6042      	str	r2, [r0, #4]
   111ec:	9900      	ldr	r1, [sp, #0]
   111ee:	9a01      	ldr	r2, [sp, #4]
   111f0:	6081      	str	r1, [r0, #8]
   111f2:	60c2      	str	r2, [r0, #12]
   111f4:	6103      	str	r3, [r0, #16]
   111f6:	6144      	str	r4, [r0, #20]
   111f8:	b008      	add	sp, #32
   111fa:	bd10      	pop	{r4, pc}

000111fc <_ZN4core3fmt9Arguments6new_v117h745a95d658ce50bcE>:
   111fc:	b580      	push	{r7, lr}
   111fe:	b086      	sub	sp, #24
   11200:	f8dd c020 	ldr.w	ip, [sp, #32]
   11204:	9102      	str	r1, [sp, #8]
   11206:	9203      	str	r2, [sp, #12]
   11208:	9304      	str	r3, [sp, #16]
   1120a:	f8cd c014 	str.w	ip, [sp, #20]
   1120e:	f04f 0e00 	mov.w	lr, #0
   11212:	f8cd e004 	str.w	lr, [sp, #4]
   11216:	f8cd e000 	str.w	lr, [sp]
   1121a:	f8cd e000 	str.w	lr, [sp]
   1121e:	6001      	str	r1, [r0, #0]
   11220:	6042      	str	r2, [r0, #4]
   11222:	9900      	ldr	r1, [sp, #0]
   11224:	9a01      	ldr	r2, [sp, #4]
   11226:	6081      	str	r1, [r0, #8]
   11228:	60c2      	str	r2, [r0, #12]
   1122a:	6103      	str	r3, [r0, #16]
   1122c:	f8c0 c014 	str.w	ip, [r0, #20]
   11230:	b006      	add	sp, #24
   11232:	bd80      	pop	{r7, pc}

00011234 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE>:
   11234:	b580      	push	{r7, lr}
   11236:	b086      	sub	sp, #24
   11238:	460a      	mov	r2, r1
   1123a:	9004      	str	r0, [sp, #16]
   1123c:	f88d 1017 	strb.w	r1, [sp, #23]
   11240:	9203      	str	r2, [sp, #12]
   11242:	f000 fd2e 	bl	11ca2 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11246:	9002      	str	r0, [sp, #8]
   11248:	e7ff      	b.n	1124a <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE+0x16>
   1124a:	9802      	ldr	r0, [sp, #8]
   1124c:	9903      	ldr	r1, [sp, #12]
   1124e:	f000 fd41 	bl	11cd4 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   11252:	9001      	str	r0, [sp, #4]
   11254:	e7ff      	b.n	11256 <_ZN4core4sync6atomic11AtomicUsize4load17h85babfef363fe1ccE+0x22>
   11256:	9801      	ldr	r0, [sp, #4]
   11258:	b006      	add	sp, #24
   1125a:	bd80      	pop	{r7, pc}

0001125c <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E>:
   1125c:	b580      	push	{r7, lr}
   1125e:	b084      	sub	sp, #16
   11260:	4601      	mov	r1, r0
   11262:	f88d 000f 	strb.w	r0, [sp, #15]
   11266:	9102      	str	r1, [sp, #8]
   11268:	f003 fbfb 	bl	14a62 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h8e5f04233c93701aE>
   1126c:	9001      	str	r0, [sp, #4]
   1126e:	e7ff      	b.n	11270 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h3b65c5c0ca842cb0E+0x14>
   11270:	9801      	ldr	r0, [sp, #4]
   11272:	b004      	add	sp, #16
   11274:	bd80      	pop	{r7, pc}

00011276 <_ZN4core3mem4swap17h21afb25e2d195463E>:
   11276:	b580      	push	{r7, lr}
   11278:	b082      	sub	sp, #8
   1127a:	9000      	str	r0, [sp, #0]
   1127c:	9101      	str	r1, [sp, #4]
   1127e:	f003 fc23 	bl	14ac8 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E>
   11282:	e7ff      	b.n	11284 <_ZN4core3mem4swap17h21afb25e2d195463E+0xe>
   11284:	b002      	add	sp, #8
   11286:	bd80      	pop	{r7, pc}

00011288 <_ZN4core3ptr13drop_in_place17h63142b18dacbc787E>:
   11288:	b081      	sub	sp, #4
   1128a:	9000      	str	r0, [sp, #0]
   1128c:	b001      	add	sp, #4
   1128e:	4770      	bx	lr

00011290 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E>:
   11290:	b580      	push	{r7, lr}
   11292:	b082      	sub	sp, #8
   11294:	9101      	str	r1, [sp, #4]
   11296:	f000 f803 	bl	112a0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E>
   1129a:	e7ff      	b.n	1129c <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4a745471c1d57141E+0xc>
   1129c:	b002      	add	sp, #8
   1129e:	bd80      	pop	{r7, pc}

000112a0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E>:
   112a0:	b580      	push	{r7, lr}
   112a2:	b0a0      	sub	sp, #128	; 0x80
   112a4:	911c      	str	r1, [sp, #112]	; 0x70
   112a6:	9103      	str	r1, [sp, #12]
   112a8:	9002      	str	r0, [sp, #8]
   112aa:	e7ff      	b.n	112ac <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc>
   112ac:	9803      	ldr	r0, [sp, #12]
   112ae:	68c1      	ldr	r1, [r0, #12]
   112b0:	2901      	cmp	r1, #1
   112b2:	d11e      	bne.n	112f2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x52>
   112b4:	e7ff      	b.n	112b6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x16>
   112b6:	9803      	ldr	r0, [sp, #12]
   112b8:	f100 0110 	add.w	r1, r0, #16
   112bc:	911e      	str	r1, [sp, #120]	; 0x78
   112be:	a804      	add	r0, sp, #16
   112c0:	f7fd ff94 	bl	f1ec <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE>
   112c4:	e7ff      	b.n	112c6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x26>
   112c6:	9804      	ldr	r0, [sp, #16]
   112c8:	2801      	cmp	r0, #1
   112ca:	d001      	beq.n	112d0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x30>
   112cc:	e7ff      	b.n	112ce <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x2e>
   112ce:	e00f      	b.n	112f0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x50>
   112d0:	9804      	ldr	r0, [sp, #16]
   112d2:	9905      	ldr	r1, [sp, #20]
   112d4:	9a06      	ldr	r2, [sp, #24]
   112d6:	9209      	str	r2, [sp, #36]	; 0x24
   112d8:	9108      	str	r1, [sp, #32]
   112da:	9007      	str	r0, [sp, #28]
   112dc:	9807      	ldr	r0, [sp, #28]
   112de:	9908      	ldr	r1, [sp, #32]
   112e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   112e2:	9b02      	ldr	r3, [sp, #8]
   112e4:	609a      	str	r2, [r3, #8]
   112e6:	6059      	str	r1, [r3, #4]
   112e8:	6018      	str	r0, [r3, #0]
   112ea:	e7ff      	b.n	112ec <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x4c>
   112ec:	b020      	add	sp, #128	; 0x80
   112ee:	bd80      	pop	{r7, pc}
   112f0:	e7ff      	b.n	112f2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x52>
   112f2:	a80a      	add	r0, sp, #40	; 0x28
   112f4:	9903      	ldr	r1, [sp, #12]
   112f6:	f7fd ff63 	bl	f1c0 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb4ea2c87bdb33472E>
   112fa:	e7ff      	b.n	112fc <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x5c>
   112fc:	980a      	ldr	r0, [sp, #40]	; 0x28
   112fe:	2800      	cmp	r0, #0
   11300:	d012      	beq.n	11328 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x88>
   11302:	e7ff      	b.n	11304 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x64>
   11304:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11306:	990c      	ldr	r1, [sp, #48]	; 0x30
   11308:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1130a:	9211      	str	r2, [sp, #68]	; 0x44
   1130c:	9110      	str	r1, [sp, #64]	; 0x40
   1130e:	900f      	str	r0, [sp, #60]	; 0x3c
   11310:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11312:	9910      	ldr	r1, [sp, #64]	; 0x40
   11314:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11316:	921b      	str	r2, [sp, #108]	; 0x6c
   11318:	911a      	str	r1, [sp, #104]	; 0x68
   1131a:	9019      	str	r0, [sp, #100]	; 0x64
   1131c:	a816      	add	r0, sp, #88	; 0x58
   1131e:	a919      	add	r1, sp, #100	; 0x64
   11320:	f7fd ff47 	bl	f1b2 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hfc3726000bdb855aE>
   11324:	e028      	b.n	11378 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd8>
   11326:	defe      	udf	#254	; 0xfe
   11328:	9803      	ldr	r0, [sp, #12]
   1132a:	301c      	adds	r0, #28
   1132c:	f7f7 fb2a 	bl	8984 <_ZN4core6option15Option$LT$T$GT$6as_mut17h5a2bd9b4e74d89e2E>
   11330:	9001      	str	r0, [sp, #4]
   11332:	e7ff      	b.n	11334 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x94>
   11334:	9801      	ldr	r0, [sp, #4]
   11336:	f7f7 fb5f 	bl	89f8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17hdb0154f18aef5e62E>
   1133a:	900e      	str	r0, [sp, #56]	; 0x38
   1133c:	e7ff      	b.n	1133e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x9e>
   1133e:	980e      	ldr	r0, [sp, #56]	; 0x38
   11340:	fab0 f180 	clz	r1, r0
   11344:	0949      	lsrs	r1, r1, #5
   11346:	2800      	cmp	r0, #0
   11348:	d101      	bne.n	1134e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xae>
   1134a:	e7ff      	b.n	1134c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xac>
   1134c:	e009      	b.n	11362 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc2>
   1134e:	980e      	ldr	r0, [sp, #56]	; 0x38
   11350:	901f      	str	r0, [sp, #124]	; 0x7c
   11352:	9902      	ldr	r1, [sp, #8]
   11354:	9000      	str	r0, [sp, #0]
   11356:	4608      	mov	r0, r1
   11358:	9900      	ldr	r1, [sp, #0]
   1135a:	f7fd ff47 	bl	f1ec <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb9744cdb80c5075dE>
   1135e:	e00a      	b.n	11376 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd6>
   11360:	defe      	udf	#254	; 0xfe
   11362:	f002 ffa1 	bl	142a8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
   11366:	e7ff      	b.n	11368 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc8>
   11368:	9802      	ldr	r0, [sp, #8]
   1136a:	f7f7 fb40 	bl	89ee <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc4148eaa15af1e8eE>
   1136e:	e7ff      	b.n	11370 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd0>
   11370:	e7ff      	b.n	11372 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd2>
   11372:	e7ff      	b.n	11374 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd4>
   11374:	e7ba      	b.n	112ec <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x4c>
   11376:	e7fc      	b.n	11372 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xd2>
   11378:	9816      	ldr	r0, [sp, #88]	; 0x58
   1137a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1137c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1137e:	9215      	str	r2, [sp, #84]	; 0x54
   11380:	9114      	str	r1, [sp, #80]	; 0x50
   11382:	9013      	str	r0, [sp, #76]	; 0x4c
   11384:	2001      	movs	r0, #1
   11386:	9012      	str	r0, [sp, #72]	; 0x48
   11388:	e7ff      	b.n	1138a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xea>
   1138a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1138c:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1138e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   11390:	9b15      	ldr	r3, [sp, #84]	; 0x54
   11392:	f8dd c00c 	ldr.w	ip, [sp, #12]
   11396:	f8cc 3018 	str.w	r3, [ip, #24]
   1139a:	f8cc 2014 	str.w	r2, [ip, #20]
   1139e:	f8cc 1010 	str.w	r1, [ip, #16]
   113a2:	f8cc 000c 	str.w	r0, [ip, #12]
   113a6:	980a      	ldr	r0, [sp, #40]	; 0x28
   113a8:	2801      	cmp	r0, #1
   113aa:	d101      	bne.n	113b0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x110>
   113ac:	e7ff      	b.n	113ae <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x10e>
   113ae:	e77d      	b.n	112ac <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0xc>
   113b0:	e7fd      	b.n	113ae <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9391011bfcfe5586E+0x10e>

000113b2 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E>:
   113b2:	b5b0      	push	{r4, r5, r7, lr}
   113b4:	b090      	sub	sp, #64	; 0x40
   113b6:	680a      	ldr	r2, [r1, #0]
   113b8:	684b      	ldr	r3, [r1, #4]
   113ba:	6889      	ldr	r1, [r1, #8]
   113bc:	910f      	str	r1, [sp, #60]	; 0x3c
   113be:	930e      	str	r3, [sp, #56]	; 0x38
   113c0:	920d      	str	r2, [sp, #52]	; 0x34
   113c2:	a902      	add	r1, sp, #8
   113c4:	aa0d      	add	r2, sp, #52	; 0x34
   113c6:	9001      	str	r0, [sp, #4]
   113c8:	4608      	mov	r0, r1
   113ca:	4611      	mov	r1, r2
   113cc:	f000 f80d 	bl	113ea <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h1051abda59747a6bE>
   113d0:	e7ff      	b.n	113d2 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hc4675c1f0b8e1d41E+0x20>
   113d2:	a802      	add	r0, sp, #8
   113d4:	9901      	ldr	r1, [sp, #4]
   113d6:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
   113da:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
   113de:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
   113e2:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
   113e6:	b010      	add	sp, #64	; 0x40
   113e8:	bdb0      	pop	{r4, r5, r7, pc}

000113ea <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h1051abda59747a6bE>:
   113ea:	b08b      	sub	sp, #44	; 0x2c
   113ec:	680a      	ldr	r2, [r1, #0]
   113ee:	684b      	ldr	r3, [r1, #4]
   113f0:	6889      	ldr	r1, [r1, #8]
   113f2:	9102      	str	r1, [sp, #8]
   113f4:	9301      	str	r3, [sp, #4]
   113f6:	9200      	str	r2, [sp, #0]
   113f8:	2100      	movs	r1, #0
   113fa:	9103      	str	r1, [sp, #12]
   113fc:	9107      	str	r1, [sp, #28]
   113fe:	9900      	ldr	r1, [sp, #0]
   11400:	9a01      	ldr	r2, [sp, #4]
   11402:	9b02      	ldr	r3, [sp, #8]
   11404:	6083      	str	r3, [r0, #8]
   11406:	6042      	str	r2, [r0, #4]
   11408:	6001      	str	r1, [r0, #0]
   1140a:	9903      	ldr	r1, [sp, #12]
   1140c:	9a04      	ldr	r2, [sp, #16]
   1140e:	9b05      	ldr	r3, [sp, #20]
   11410:	f8dd c018 	ldr.w	ip, [sp, #24]
   11414:	f8c0 c018 	str.w	ip, [r0, #24]
   11418:	6143      	str	r3, [r0, #20]
   1141a:	6102      	str	r2, [r0, #16]
   1141c:	60c1      	str	r1, [r0, #12]
   1141e:	9907      	ldr	r1, [sp, #28]
   11420:	9a08      	ldr	r2, [sp, #32]
   11422:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11424:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   11428:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   1142c:	6243      	str	r3, [r0, #36]	; 0x24
   1142e:	6202      	str	r2, [r0, #32]
   11430:	61c1      	str	r1, [r0, #28]
   11432:	b00b      	add	sp, #44	; 0x2c
   11434:	4770      	bx	lr

00011436 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17he2e30225e051e80dE>:
   11436:	b5b0      	push	{r4, r5, r7, lr}
   11438:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
   1143c:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
   11440:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11444:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   11448:	bdb0      	pop	{r4, r5, r7, pc}

0001144a <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h27d5684c70bb37e8E>:
   1144a:	b084      	sub	sp, #16
   1144c:	9000      	str	r0, [sp, #0]
   1144e:	9101      	str	r1, [sp, #4]
   11450:	9102      	str	r1, [sp, #8]
   11452:	9003      	str	r0, [sp, #12]
   11454:	6802      	ldr	r2, [r0, #0]
   11456:	6840      	ldr	r0, [r0, #4]
   11458:	680b      	ldr	r3, [r1, #0]
   1145a:	6849      	ldr	r1, [r1, #4]
   1145c:	4048      	eors	r0, r1
   1145e:	ea82 0103 	eor.w	r1, r2, r3
   11462:	4308      	orrs	r0, r1
   11464:	fab0 f080 	clz	r0, r0
   11468:	0940      	lsrs	r0, r0, #5
   1146a:	b004      	add	sp, #16
   1146c:	4770      	bx	lr

0001146e <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h0340384168a45934E>:
   1146e:	b082      	sub	sp, #8
   11470:	9000      	str	r0, [sp, #0]
   11472:	9101      	str	r1, [sp, #4]
   11474:	7800      	ldrb	r0, [r0, #0]
   11476:	7809      	ldrb	r1, [r1, #0]
   11478:	2200      	movs	r2, #0
   1147a:	4288      	cmp	r0, r1
   1147c:	bf38      	it	cc
   1147e:	2201      	movcc	r2, #1
   11480:	4610      	mov	r0, r2
   11482:	b002      	add	sp, #8
   11484:	4770      	bx	lr

00011486 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   11486:	b084      	sub	sp, #16
   11488:	9001      	str	r0, [sp, #4]
   1148a:	9102      	str	r1, [sp, #8]
   1148c:	4408      	add	r0, r1
   1148e:	9003      	str	r0, [sp, #12]
   11490:	9803      	ldr	r0, [sp, #12]
   11492:	9000      	str	r0, [sp, #0]
   11494:	e7ff      	b.n	11496 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   11496:	9800      	ldr	r0, [sp, #0]
   11498:	b004      	add	sp, #16
   1149a:	4770      	bx	lr

0001149c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   1149c:	b082      	sub	sp, #8
   1149e:	9001      	str	r0, [sp, #4]
   114a0:	9000      	str	r0, [sp, #0]
   114a2:	e7ff      	b.n	114a4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   114a4:	9800      	ldr	r0, [sp, #0]
   114a6:	fab0 f180 	clz	r1, r0
   114aa:	0948      	lsrs	r0, r1, #5
   114ac:	b002      	add	sp, #8
   114ae:	4770      	bx	lr

000114b0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   114b0:	b082      	sub	sp, #8
   114b2:	9001      	str	r0, [sp, #4]
   114b4:	9000      	str	r0, [sp, #0]
   114b6:	9800      	ldr	r0, [sp, #0]
   114b8:	b002      	add	sp, #8
   114ba:	4770      	bx	lr

000114bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   114bc:	b081      	sub	sp, #4
   114be:	9000      	str	r0, [sp, #0]
   114c0:	b001      	add	sp, #4
   114c2:	4770      	bx	lr

000114c4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   114c4:	b580      	push	{r7, lr}
   114c6:	b084      	sub	sp, #16
   114c8:	9002      	str	r0, [sp, #8]
   114ca:	9103      	str	r1, [sp, #12]
   114cc:	f000 f805 	bl	114da <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   114d0:	9001      	str	r0, [sp, #4]
   114d2:	e7ff      	b.n	114d4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   114d4:	9801      	ldr	r0, [sp, #4]
   114d6:	b004      	add	sp, #16
   114d8:	bd80      	pop	{r7, pc}

000114da <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   114da:	b084      	sub	sp, #16
   114dc:	9001      	str	r0, [sp, #4]
   114de:	9102      	str	r1, [sp, #8]
   114e0:	4408      	add	r0, r1
   114e2:	9003      	str	r0, [sp, #12]
   114e4:	9803      	ldr	r0, [sp, #12]
   114e6:	9000      	str	r0, [sp, #0]
   114e8:	e7ff      	b.n	114ea <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   114ea:	9800      	ldr	r0, [sp, #0]
   114ec:	b004      	add	sp, #16
   114ee:	4770      	bx	lr

000114f0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   114f0:	b082      	sub	sp, #8
   114f2:	9001      	str	r0, [sp, #4]
   114f4:	9000      	str	r0, [sp, #0]
   114f6:	e7ff      	b.n	114f8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   114f8:	9800      	ldr	r0, [sp, #0]
   114fa:	fab0 f180 	clz	r1, r0
   114fe:	0948      	lsrs	r0, r1, #5
   11500:	b002      	add	sp, #8
   11502:	4770      	bx	lr

00011504 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   11504:	b580      	push	{r7, lr}
   11506:	b090      	sub	sp, #64	; 0x40
   11508:	900c      	str	r0, [sp, #48]	; 0x30
   1150a:	910d      	str	r1, [sp, #52]	; 0x34
   1150c:	9007      	str	r0, [sp, #28]
   1150e:	9106      	str	r1, [sp, #24]
   11510:	f000 ff6c 	bl	123ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   11514:	4601      	mov	r1, r0
   11516:	900e      	str	r0, [sp, #56]	; 0x38
   11518:	9105      	str	r1, [sp, #20]
   1151a:	e7ff      	b.n	1151c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   1151c:	9805      	ldr	r0, [sp, #20]
   1151e:	f7ff ffe7 	bl	114f0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   11522:	e7ff      	b.n	11524 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   11524:	e7ff      	b.n	11526 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   11526:	2001      	movs	r0, #1
   11528:	900f      	str	r0, [sp, #60]	; 0x3c
   1152a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1152c:	9004      	str	r0, [sp, #16]
   1152e:	e7ff      	b.n	11530 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   11530:	9804      	ldr	r0, [sp, #16]
   11532:	2800      	cmp	r0, #0
   11534:	d006      	beq.n	11544 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   11536:	e7ff      	b.n	11538 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   11538:	9807      	ldr	r0, [sp, #28]
   1153a:	9906      	ldr	r1, [sp, #24]
   1153c:	f000 ff4e 	bl	123dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   11540:	9003      	str	r0, [sp, #12]
   11542:	e00e      	b.n	11562 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   11544:	9807      	ldr	r0, [sp, #28]
   11546:	9906      	ldr	r1, [sp, #24]
   11548:	f000 ff48 	bl	123dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   1154c:	9002      	str	r0, [sp, #8]
   1154e:	e7ff      	b.n	11550 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   11550:	9805      	ldr	r0, [sp, #20]
   11552:	9902      	ldr	r1, [sp, #8]
   11554:	f7ff ffb6 	bl	114c4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   11558:	9001      	str	r0, [sp, #4]
   1155a:	e7ff      	b.n	1155c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   1155c:	9801      	ldr	r0, [sp, #4]
   1155e:	900a      	str	r0, [sp, #40]	; 0x28
   11560:	e006      	b.n	11570 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   11562:	9805      	ldr	r0, [sp, #20]
   11564:	9903      	ldr	r1, [sp, #12]
   11566:	f000 ff16 	bl	12396 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   1156a:	900a      	str	r0, [sp, #40]	; 0x28
   1156c:	e7ff      	b.n	1156e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   1156e:	e7ff      	b.n	11570 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   11570:	9805      	ldr	r0, [sp, #20]
   11572:	f7ff ff9d 	bl	114b0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   11576:	9000      	str	r0, [sp, #0]
   11578:	e7ff      	b.n	1157a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   1157a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1157c:	9900      	ldr	r1, [sp, #0]
   1157e:	9108      	str	r1, [sp, #32]
   11580:	9009      	str	r0, [sp, #36]	; 0x24
   11582:	9808      	ldr	r0, [sp, #32]
   11584:	9909      	ldr	r1, [sp, #36]	; 0x24
   11586:	b010      	add	sp, #64	; 0x40
   11588:	bd80      	pop	{r7, pc}

0001158a <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   1158a:	b081      	sub	sp, #4
   1158c:	b001      	add	sp, #4
   1158e:	4770      	bx	lr

00011590 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   11590:	b580      	push	{r7, lr}
   11592:	b08e      	sub	sp, #56	; 0x38
   11594:	9007      	str	r0, [sp, #28]
   11596:	6801      	ldr	r1, [r0, #0]
   11598:	9005      	str	r0, [sp, #20]
   1159a:	4608      	mov	r0, r1
   1159c:	f7ff ff8e 	bl	114bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   115a0:	9004      	str	r0, [sp, #16]
   115a2:	e7ff      	b.n	115a4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   115a4:	9804      	ldr	r0, [sp, #16]
   115a6:	f7ff ff79 	bl	1149c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   115aa:	e7ff      	b.n	115ac <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   115ac:	e7ff      	b.n	115ae <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   115ae:	2001      	movs	r0, #1
   115b0:	9008      	str	r0, [sp, #32]
   115b2:	9808      	ldr	r0, [sp, #32]
   115b4:	9003      	str	r0, [sp, #12]
   115b6:	e7ff      	b.n	115b8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   115b8:	9803      	ldr	r0, [sp, #12]
   115ba:	2800      	cmp	r0, #0
   115bc:	d007      	beq.n	115ce <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   115be:	e7ff      	b.n	115c0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   115c0:	9805      	ldr	r0, [sp, #20]
   115c2:	6840      	ldr	r0, [r0, #4]
   115c4:	f7ff ff94 	bl	114f0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   115c8:	e7ff      	b.n	115ca <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   115ca:	e7ff      	b.n	115cc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   115cc:	e7ff      	b.n	115ce <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   115ce:	9805      	ldr	r0, [sp, #20]
   115d0:	6800      	ldr	r0, [r0, #0]
   115d2:	f7ff ff73 	bl	114bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   115d6:	9002      	str	r0, [sp, #8]
   115d8:	e7ff      	b.n	115da <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   115da:	9805      	ldr	r0, [sp, #20]
   115dc:	6841      	ldr	r1, [r0, #4]
   115de:	9a02      	ldr	r2, [sp, #8]
   115e0:	428a      	cmp	r2, r1
   115e2:	d02e      	beq.n	11642 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   115e4:	e7ff      	b.n	115e6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   115e6:	9805      	ldr	r0, [sp, #20]
   115e8:	900a      	str	r0, [sp, #40]	; 0x28
   115ea:	2101      	movs	r1, #1
   115ec:	910b      	str	r1, [sp, #44]	; 0x2c
   115ee:	910d      	str	r1, [sp, #52]	; 0x34
   115f0:	990d      	ldr	r1, [sp, #52]	; 0x34
   115f2:	2900      	cmp	r1, #0
   115f4:	d015      	beq.n	11622 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   115f6:	e7ff      	b.n	115f8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   115f8:	9805      	ldr	r0, [sp, #20]
   115fa:	6800      	ldr	r0, [r0, #0]
   115fc:	f7ff ff5e 	bl	114bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11600:	900c      	str	r0, [sp, #48]	; 0x30
   11602:	9905      	ldr	r1, [sp, #20]
   11604:	680a      	ldr	r2, [r1, #0]
   11606:	9001      	str	r0, [sp, #4]
   11608:	4610      	mov	r0, r2
   1160a:	f7ff ff57 	bl	114bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1160e:	2101      	movs	r1, #1
   11610:	f7ff ff39 	bl	11486 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   11614:	f7ff ff4c 	bl	114b0 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   11618:	9905      	ldr	r1, [sp, #20]
   1161a:	6008      	str	r0, [r1, #0]
   1161c:	9801      	ldr	r0, [sp, #4]
   1161e:	9009      	str	r0, [sp, #36]	; 0x24
   11620:	e00c      	b.n	1163c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   11622:	9805      	ldr	r0, [sp, #20]
   11624:	6840      	ldr	r0, [r0, #4]
   11626:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1162a:	f7ff ff56 	bl	114da <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   1162e:	9905      	ldr	r1, [sp, #20]
   11630:	6048      	str	r0, [r1, #4]
   11632:	6808      	ldr	r0, [r1, #0]
   11634:	f7ff ff42 	bl	114bc <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11638:	9009      	str	r0, [sp, #36]	; 0x24
   1163a:	e7ff      	b.n	1163c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   1163c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1163e:	9000      	str	r0, [sp, #0]
   11640:	e002      	b.n	11648 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   11642:	2000      	movs	r0, #0
   11644:	9006      	str	r0, [sp, #24]
   11646:	e002      	b.n	1164e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   11648:	9800      	ldr	r0, [sp, #0]
   1164a:	9006      	str	r0, [sp, #24]
   1164c:	e7ff      	b.n	1164e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   1164e:	9806      	ldr	r0, [sp, #24]
   11650:	b00e      	add	sp, #56	; 0x38
   11652:	bd80      	pop	{r7, pc}

00011654 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
   11654:	b580      	push	{r7, lr}
   11656:	b084      	sub	sp, #16
   11658:	9002      	str	r0, [sp, #8]
   1165a:	9103      	str	r1, [sp, #12]
   1165c:	6800      	ldr	r0, [r0, #0]
   1165e:	f000 f807 	bl	11670 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
   11662:	9001      	str	r0, [sp, #4]
   11664:	e7ff      	b.n	11666 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
   11666:	9801      	ldr	r0, [sp, #4]
   11668:	f000 0001 	and.w	r0, r0, #1
   1166c:	b004      	add	sp, #16
   1166e:	bd80      	pop	{r7, pc}

00011670 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
   11670:	b580      	push	{r7, lr}
   11672:	b088      	sub	sp, #32
   11674:	9006      	str	r0, [sp, #24]
   11676:	9107      	str	r1, [sp, #28]
   11678:	9004      	str	r0, [sp, #16]
   1167a:	4608      	mov	r0, r1
   1167c:	9103      	str	r1, [sp, #12]
   1167e:	f004 fdcc 	bl	1621a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   11682:	9002      	str	r0, [sp, #8]
   11684:	e7ff      	b.n	11686 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
   11686:	9802      	ldr	r0, [sp, #8]
   11688:	07c1      	lsls	r1, r0, #31
   1168a:	2900      	cmp	r1, #0
   1168c:	d105      	bne.n	1169a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
   1168e:	e7ff      	b.n	11690 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
   11690:	9803      	ldr	r0, [sp, #12]
   11692:	f004 fdc6 	bl	16222 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   11696:	9001      	str	r0, [sp, #4]
   11698:	e007      	b.n	116aa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
   1169a:	9804      	ldr	r0, [sp, #16]
   1169c:	9903      	ldr	r1, [sp, #12]
   1169e:	f005 fb87 	bl	16db0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   116a2:	f88d 0017 	strb.w	r0, [sp, #23]
   116a6:	e7ff      	b.n	116a8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
   116a8:	e015      	b.n	116d6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   116aa:	9801      	ldr	r0, [sp, #4]
   116ac:	07c1      	lsls	r1, r0, #31
   116ae:	2900      	cmp	r1, #0
   116b0:	d107      	bne.n	116c2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
   116b2:	e7ff      	b.n	116b4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
   116b4:	9804      	ldr	r0, [sp, #16]
   116b6:	9903      	ldr	r1, [sp, #12]
   116b8:	f005 fc8d 	bl	16fd6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   116bc:	f88d 0017 	strb.w	r0, [sp, #23]
   116c0:	e007      	b.n	116d2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
   116c2:	9804      	ldr	r0, [sp, #16]
   116c4:	9903      	ldr	r1, [sp, #12]
   116c6:	f005 fbde 	bl	16e86 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   116ca:	f88d 0017 	strb.w	r0, [sp, #23]
   116ce:	e7ff      	b.n	116d0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
   116d0:	e000      	b.n	116d4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   116d2:	e7ff      	b.n	116d4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   116d4:	e7ff      	b.n	116d6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   116d6:	f89d 0017 	ldrb.w	r0, [sp, #23]
   116da:	b008      	add	sp, #32
   116dc:	bd80      	pop	{r7, pc}

000116de <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
   116de:	b084      	sub	sp, #16
   116e0:	9002      	str	r0, [sp, #8]
   116e2:	9103      	str	r1, [sp, #12]
            Coord(x, y)
   116e4:	9000      	str	r0, [sp, #0]
   116e6:	9101      	str	r1, [sp, #4]
        }
   116e8:	9800      	ldr	r0, [sp, #0]
   116ea:	9901      	ldr	r1, [sp, #4]
   116ec:	b004      	add	sp, #16
   116ee:	4770      	bx	lr

000116f0 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
   116f0:	b08b      	sub	sp, #44	; 0x2c
   116f2:	4601      	mov	r1, r0
   116f4:	f8ad 0020 	strh.w	r0, [sp, #32]
   116f8:	0c00      	lsrs	r0, r0, #16
   116fa:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   116fe:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   11702:	f88d 001e 	strb.w	r0, [sp, #30]
   11706:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   1170a:	f8ad 001c 	strh.w	r0, [sp, #28]
   1170e:	f89d 001c 	ldrb.w	r0, [sp, #28]
   11712:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   11716:	f89d 201d 	ldrb.w	r2, [sp, #29]
   1171a:	4613      	mov	r3, r2
   1171c:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   11720:	f89d 201e 	ldrb.w	r2, [sp, #30]
   11724:	4694      	mov	ip, r2
   11726:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
   1172a:	0200      	lsls	r0, r0, #8
   1172c:	9306      	str	r3, [sp, #24]
   1172e:	f8cd c014 	str.w	ip, [sp, #20]
   11732:	9004      	str	r0, [sp, #16]
   11734:	e7ff      	b.n	11736 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
   11736:	9804      	ldr	r0, [sp, #16]
   11738:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
   1173c:	9a06      	ldr	r2, [sp, #24]
   1173e:	b2d3      	uxtb	r3, r2
   11740:	00db      	lsls	r3, r3, #3
   11742:	9103      	str	r1, [sp, #12]
   11744:	9302      	str	r3, [sp, #8]
   11746:	e7ff      	b.n	11748 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
   11748:	9802      	ldr	r0, [sp, #8]
   1174a:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
   1174e:	9a03      	ldr	r2, [sp, #12]
   11750:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
   11752:	9b05      	ldr	r3, [sp, #20]
   11754:	fa5f fc83 	uxtb.w	ip, r3
   11758:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   1175c:	9101      	str	r1, [sp, #4]
   1175e:	f8cd c000 	str.w	ip, [sp]
   11762:	e7ff      	b.n	11764 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
   11764:	9800      	ldr	r0, [sp, #0]
   11766:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
   1176a:	9a01      	ldr	r2, [sp, #4]
   1176c:	4311      	orrs	r1, r2
   1176e:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
   11772:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
   11776:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   1177a:	b00b      	add	sp, #44	; 0x2c
   1177c:	4770      	bx	lr

0001177e <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
   1177e:	b580      	push	{r7, lr}
   11780:	b088      	sub	sp, #32
   11782:	9005      	str	r0, [sp, #20]
   11784:	9106      	str	r1, [sp, #24]
   11786:	9003      	str	r0, [sp, #12]
   11788:	4608      	mov	r0, r1
   1178a:	f000 fa21 	bl	11bd0 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
   1178e:	9004      	str	r0, [sp, #16]
   11790:	e7ff      	b.n	11792 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
   11792:	9804      	ldr	r0, [sp, #16]
   11794:	9007      	str	r0, [sp, #28]
   11796:	9903      	ldr	r1, [sp, #12]
   11798:	680a      	ldr	r2, [r1, #0]
   1179a:	9002      	str	r0, [sp, #8]
   1179c:	4610      	mov	r0, r2
   1179e:	9902      	ldr	r1, [sp, #8]
   117a0:	f000 f837 	bl	11812 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
   117a4:	9001      	str	r0, [sp, #4]
   117a6:	9100      	str	r1, [sp, #0]
   117a8:	e7ff      	b.n	117aa <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
   117aa:	9801      	ldr	r0, [sp, #4]
   117ac:	9900      	ldr	r1, [sp, #0]
   117ae:	b008      	add	sp, #32
   117b0:	bd80      	pop	{r7, pc}

000117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
   117b2:	b580      	push	{r7, lr}
   117b4:	b084      	sub	sp, #16
   117b6:	9001      	str	r0, [sp, #4]
   117b8:	9102      	str	r1, [sp, #8]
   117ba:	9203      	str	r2, [sp, #12]
   117bc:	9000      	str	r0, [sp, #0]
   117be:	4608      	mov	r0, r1
   117c0:	9900      	ldr	r1, [sp, #0]
   117c2:	f00a f995 	bl	1baf0 <__aeabi_memcpy>
   117c6:	e7ff      	b.n	117c8 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
   117c8:	b004      	add	sp, #16
   117ca:	bd80      	pop	{r7, pc}

000117cc <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
   117cc:	b580      	push	{r7, lr}
   117ce:	b084      	sub	sp, #16
   117d0:	9001      	str	r0, [sp, #4]
   117d2:	9102      	str	r1, [sp, #8]
   117d4:	9203      	str	r2, [sp, #12]
   117d6:	0092      	lsls	r2, r2, #2
   117d8:	9000      	str	r0, [sp, #0]
   117da:	4608      	mov	r0, r1
   117dc:	9900      	ldr	r1, [sp, #0]
   117de:	f00a f987 	bl	1baf0 <__aeabi_memcpy>
   117e2:	e7ff      	b.n	117e4 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
   117e4:	b004      	add	sp, #16
   117e6:	bd80      	pop	{r7, pc}

000117e8 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
   117e8:	b082      	sub	sp, #8
   117ea:	9000      	str	r0, [sp, #0]
   117ec:	9101      	str	r1, [sp, #4]
   117ee:	6800      	ldr	r0, [r0, #0]
   117f0:	6809      	ldr	r1, [r1, #0]
   117f2:	2200      	movs	r2, #0
   117f4:	4288      	cmp	r0, r1
   117f6:	bf38      	it	cc
   117f8:	2201      	movcc	r2, #1
   117fa:	4610      	mov	r0, r2
   117fc:	b002      	add	sp, #8
   117fe:	4770      	bx	lr

00011800 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
   11800:	b580      	push	{r7, lr}
   11802:	b082      	sub	sp, #8
   11804:	9000      	str	r0, [sp, #0]
   11806:	9101      	str	r1, [sp, #4]
   11808:	f000 f85f 	bl	118ca <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
   1180c:	e7ff      	b.n	1180e <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
   1180e:	b002      	add	sp, #8
   11810:	bd80      	pop	{r7, pc}

00011812 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
   11812:	b580      	push	{r7, lr}
   11814:	b088      	sub	sp, #32
   11816:	9004      	str	r0, [sp, #16]
   11818:	9105      	str	r1, [sp, #20]
   1181a:	f000 f819 	bl	11850 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
   1181e:	9001      	str	r0, [sp, #4]
   11820:	9100      	str	r1, [sp, #0]
   11822:	e7ff      	b.n	11824 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
   11824:	9801      	ldr	r0, [sp, #4]
   11826:	9006      	str	r0, [sp, #24]
   11828:	9900      	ldr	r1, [sp, #0]
   1182a:	f001 0201 	and.w	r2, r1, #1
   1182e:	f88d 201f 	strb.w	r2, [sp, #31]
   11832:	2a00      	cmp	r2, #0
   11834:	d105      	bne.n	11842 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
   11836:	e7ff      	b.n	11838 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
   11838:	9801      	ldr	r0, [sp, #4]
   1183a:	9003      	str	r0, [sp, #12]
   1183c:	2101      	movs	r1, #1
   1183e:	9102      	str	r1, [sp, #8]
   11840:	e002      	b.n	11848 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   11842:	2000      	movs	r0, #0
   11844:	9002      	str	r0, [sp, #8]
   11846:	e7ff      	b.n	11848 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   11848:	9802      	ldr	r0, [sp, #8]
   1184a:	9903      	ldr	r1, [sp, #12]
   1184c:	b008      	add	sp, #32
   1184e:	bd80      	pop	{r7, pc}

00011850 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
   11850:	b08a      	sub	sp, #40	; 0x28
   11852:	9004      	str	r0, [sp, #16]
   11854:	9105      	str	r1, [sp, #20]
   11856:	1840      	adds	r0, r0, r1
   11858:	f04f 0100 	mov.w	r1, #0
   1185c:	f141 0100 	adc.w	r1, r1, #0
   11860:	9006      	str	r0, [sp, #24]
   11862:	f88d 101c 	strb.w	r1, [sp, #28]
   11866:	9806      	ldr	r0, [sp, #24]
   11868:	f89d 101c 	ldrb.w	r1, [sp, #28]
   1186c:	9001      	str	r0, [sp, #4]
   1186e:	9100      	str	r1, [sp, #0]
   11870:	e7ff      	b.n	11872 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
   11872:	9801      	ldr	r0, [sp, #4]
   11874:	9008      	str	r0, [sp, #32]
   11876:	9900      	ldr	r1, [sp, #0]
   11878:	f001 0201 	and.w	r2, r1, #1
   1187c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   11880:	9002      	str	r0, [sp, #8]
   11882:	f88d 200c 	strb.w	r2, [sp, #12]
   11886:	9802      	ldr	r0, [sp, #8]
   11888:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1188c:	b00a      	add	sp, #40	; 0x28
   1188e:	4770      	bx	lr

00011890 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
   11890:	b580      	push	{r7, lr}
   11892:	b08c      	sub	sp, #48	; 0x30
   11894:	9005      	str	r0, [sp, #20]
   11896:	9106      	str	r1, [sp, #24]
   11898:	9207      	str	r2, [sp, #28]
   1189a:	4603      	mov	r3, r0
   1189c:	9008      	str	r0, [sp, #32]
   1189e:	4608      	mov	r0, r1
   118a0:	9109      	str	r1, [sp, #36]	; 0x24
   118a2:	2104      	movs	r1, #4
   118a4:	910b      	str	r1, [sp, #44]	; 0x2c
   118a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   118a8:	9204      	str	r2, [sp, #16]
   118aa:	9303      	str	r3, [sp, #12]
   118ac:	9002      	str	r0, [sp, #8]
   118ae:	9101      	str	r1, [sp, #4]
   118b0:	e7ff      	b.n	118b2 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
   118b2:	9801      	ldr	r0, [sp, #4]
   118b4:	9904      	ldr	r1, [sp, #16]
   118b6:	fb00 f201 	mul.w	r2, r0, r1
   118ba:	920a      	str	r2, [sp, #40]	; 0x28
   118bc:	9803      	ldr	r0, [sp, #12]
   118be:	9902      	ldr	r1, [sp, #8]
   118c0:	f000 f82e 	bl	11920 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
   118c4:	e7ff      	b.n	118c6 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
   118c6:	b00c      	add	sp, #48	; 0x30
   118c8:	bd80      	pop	{r7, pc}

000118ca <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
   118ca:	b580      	push	{r7, lr}
   118cc:	b088      	sub	sp, #32
   118ce:	9004      	str	r0, [sp, #16]
   118d0:	9105      	str	r1, [sp, #20]
   118d2:	2204      	movs	r2, #4
   118d4:	9207      	str	r2, [sp, #28]
   118d6:	9a07      	ldr	r2, [sp, #28]
   118d8:	9103      	str	r1, [sp, #12]
   118da:	9002      	str	r0, [sp, #8]
   118dc:	9201      	str	r2, [sp, #4]
   118de:	e7ff      	b.n	118e0 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
   118e0:	9801      	ldr	r0, [sp, #4]
   118e2:	2820      	cmp	r0, #32
   118e4:	d306      	bcc.n	118f4 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
   118e6:	e7ff      	b.n	118e8 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
   118e8:	2201      	movs	r2, #1
   118ea:	9802      	ldr	r0, [sp, #8]
   118ec:	9903      	ldr	r1, [sp, #12]
   118ee:	f7ff ffcf 	bl	11890 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
   118f2:	e012      	b.n	1191a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
   118f4:	9802      	ldr	r0, [sp, #8]
   118f6:	f000 f8a1 	bl	11a3c <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
   118fa:	4601      	mov	r1, r0
   118fc:	9006      	str	r0, [sp, #24]
   118fe:	9100      	str	r1, [sp, #0]
   11900:	e7ff      	b.n	11902 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
   11902:	2201      	movs	r2, #1
   11904:	9803      	ldr	r0, [sp, #12]
   11906:	9902      	ldr	r1, [sp, #8]
   11908:	f7ff ff60 	bl	117cc <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   1190c:	e7ff      	b.n	1190e <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
   1190e:	9803      	ldr	r0, [sp, #12]
   11910:	9900      	ldr	r1, [sp, #0]
   11912:	f000 f8ac 	bl	11a6e <_ZN4core3ptr5write17h4a80332de2cee3d3E>
   11916:	e7ff      	b.n	11918 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
   11918:	e000      	b.n	1191c <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   1191a:	e7ff      	b.n	1191c <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   1191c:	b008      	add	sp, #32
   1191e:	bd80      	pop	{r7, pc}

00011920 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
   11920:	b5d0      	push	{r4, r6, r7, lr}
   11922:	af02      	add	r7, sp, #8
   11924:	b0b4      	sub	sp, #208	; 0xd0
   11926:	466c      	mov	r4, sp
   11928:	f36f 0404 	bfc	r4, #0, #5
   1192c:	46a5      	mov	sp, r4
   1192e:	9024      	str	r0, [sp, #144]	; 0x90
   11930:	9125      	str	r1, [sp, #148]	; 0x94
   11932:	9226      	str	r2, [sp, #152]	; 0x98
   11934:	2320      	movs	r3, #32
   11936:	932f      	str	r3, [sp, #188]	; 0xbc
   11938:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1193a:	9327      	str	r3, [sp, #156]	; 0x9c
   1193c:	920e      	str	r2, [sp, #56]	; 0x38
   1193e:	910d      	str	r1, [sp, #52]	; 0x34
   11940:	900c      	str	r0, [sp, #48]	; 0x30
   11942:	930b      	str	r3, [sp, #44]	; 0x2c
   11944:	e7ff      	b.n	11946 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
   11946:	2000      	movs	r0, #0
   11948:	900f      	str	r0, [sp, #60]	; 0x3c
   1194a:	e7ff      	b.n	1194c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   1194c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1194e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11950:	4408      	add	r0, r1
   11952:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   11954:	4290      	cmp	r0, r2
   11956:	d905      	bls.n	11964 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
   11958:	e7ff      	b.n	1195a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
   1195a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1195c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1195e:	4288      	cmp	r0, r1
   11960:	d334      	bcc.n	119cc <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
   11962:	e067      	b.n	11a34 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   11964:	e7ff      	b.n	11966 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
   11966:	a810      	add	r0, sp, #64	; 0x40
   11968:	9030      	str	r0, [sp, #192]	; 0xc0
   1196a:	9031      	str	r0, [sp, #196]	; 0xc4
   1196c:	e7ff      	b.n	1196e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
   1196e:	a810      	add	r0, sp, #64	; 0x40
   11970:	4601      	mov	r1, r0
   11972:	9028      	str	r0, [sp, #160]	; 0xa0
   11974:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11976:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11978:	900a      	str	r0, [sp, #40]	; 0x28
   1197a:	4610      	mov	r0, r2
   1197c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1197e:	9109      	str	r1, [sp, #36]	; 0x24
   11980:	4619      	mov	r1, r3
   11982:	f000 f87a 	bl	11a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11986:	4601      	mov	r1, r0
   11988:	9029      	str	r0, [sp, #164]	; 0xa4
   1198a:	9108      	str	r1, [sp, #32]
   1198c:	e7ff      	b.n	1198e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
   1198e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11990:	980d      	ldr	r0, [sp, #52]	; 0x34
   11992:	f000 f872 	bl	11a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11996:	4601      	mov	r1, r0
   11998:	902a      	str	r0, [sp, #168]	; 0xa8
   1199a:	9107      	str	r1, [sp, #28]
   1199c:	e7ff      	b.n	1199e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
   1199e:	9808      	ldr	r0, [sp, #32]
   119a0:	9909      	ldr	r1, [sp, #36]	; 0x24
   119a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   119a4:	f7ff ff05 	bl	117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   119a8:	e7ff      	b.n	119aa <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
   119aa:	9807      	ldr	r0, [sp, #28]
   119ac:	9908      	ldr	r1, [sp, #32]
   119ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   119b0:	f7ff feff 	bl	117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   119b4:	e7ff      	b.n	119b6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
   119b6:	9809      	ldr	r0, [sp, #36]	; 0x24
   119b8:	9907      	ldr	r1, [sp, #28]
   119ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   119bc:	f7ff fef9 	bl	117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   119c0:	e7ff      	b.n	119c2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
   119c2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   119c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   119c6:	4408      	add	r0, r1
   119c8:	900f      	str	r0, [sp, #60]	; 0x3c
   119ca:	e7bf      	b.n	1194c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   119cc:	e7ff      	b.n	119ce <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
   119ce:	980f      	ldr	r0, [sp, #60]	; 0x3c
   119d0:	990e      	ldr	r1, [sp, #56]	; 0x38
   119d2:	1a08      	subs	r0, r1, r0
   119d4:	4602      	mov	r2, r0
   119d6:	902b      	str	r0, [sp, #172]	; 0xac
   119d8:	a81c      	add	r0, sp, #112	; 0x70
   119da:	9032      	str	r0, [sp, #200]	; 0xc8
   119dc:	9033      	str	r0, [sp, #204]	; 0xcc
   119de:	9206      	str	r2, [sp, #24]
   119e0:	9005      	str	r0, [sp, #20]
   119e2:	e7ff      	b.n	119e4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
   119e4:	9805      	ldr	r0, [sp, #20]
   119e6:	9905      	ldr	r1, [sp, #20]
   119e8:	912c      	str	r1, [sp, #176]	; 0xb0
   119ea:	990f      	ldr	r1, [sp, #60]	; 0x3c
   119ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   119ee:	9004      	str	r0, [sp, #16]
   119f0:	4610      	mov	r0, r2
   119f2:	f000 f842 	bl	11a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   119f6:	4601      	mov	r1, r0
   119f8:	902d      	str	r0, [sp, #180]	; 0xb4
   119fa:	9103      	str	r1, [sp, #12]
   119fc:	e7ff      	b.n	119fe <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
   119fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11a00:	980d      	ldr	r0, [sp, #52]	; 0x34
   11a02:	f000 f83a 	bl	11a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11a06:	4601      	mov	r1, r0
   11a08:	902e      	str	r0, [sp, #184]	; 0xb8
   11a0a:	9102      	str	r1, [sp, #8]
   11a0c:	e7ff      	b.n	11a0e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
   11a0e:	9803      	ldr	r0, [sp, #12]
   11a10:	9904      	ldr	r1, [sp, #16]
   11a12:	9a06      	ldr	r2, [sp, #24]
   11a14:	f7ff fecd 	bl	117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11a18:	e7ff      	b.n	11a1a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
   11a1a:	9802      	ldr	r0, [sp, #8]
   11a1c:	9903      	ldr	r1, [sp, #12]
   11a1e:	9a06      	ldr	r2, [sp, #24]
   11a20:	f7ff fec7 	bl	117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11a24:	e7ff      	b.n	11a26 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
   11a26:	9804      	ldr	r0, [sp, #16]
   11a28:	9902      	ldr	r1, [sp, #8]
   11a2a:	9a06      	ldr	r2, [sp, #24]
   11a2c:	f7ff fec1 	bl	117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11a30:	e7ff      	b.n	11a32 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
   11a32:	e7ff      	b.n	11a34 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   11a34:	f1a7 0408 	sub.w	r4, r7, #8
   11a38:	46a5      	mov	sp, r4
   11a3a:	bdd0      	pop	{r4, r6, r7, pc}

00011a3c <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
   11a3c:	b580      	push	{r7, lr}
   11a3e:	b08a      	sub	sp, #40	; 0x28
   11a40:	9004      	str	r0, [sp, #16]
   11a42:	9905      	ldr	r1, [sp, #20]
   11a44:	9103      	str	r1, [sp, #12]
   11a46:	9002      	str	r0, [sp, #8]
   11a48:	e7ff      	b.n	11a4a <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
   11a4a:	a803      	add	r0, sp, #12
   11a4c:	9008      	str	r0, [sp, #32]
   11a4e:	9009      	str	r0, [sp, #36]	; 0x24
   11a50:	e7ff      	b.n	11a52 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
   11a52:	a903      	add	r1, sp, #12
   11a54:	2201      	movs	r2, #1
   11a56:	9802      	ldr	r0, [sp, #8]
   11a58:	f7ff feb8 	bl	117cc <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11a5c:	e7ff      	b.n	11a5e <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
   11a5e:	9803      	ldr	r0, [sp, #12]
   11a60:	9006      	str	r0, [sp, #24]
   11a62:	9007      	str	r0, [sp, #28]
   11a64:	9001      	str	r0, [sp, #4]
   11a66:	e7ff      	b.n	11a68 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
   11a68:	9801      	ldr	r0, [sp, #4]
   11a6a:	b00a      	add	sp, #40	; 0x28
   11a6c:	bd80      	pop	{r7, pc}

00011a6e <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
   11a6e:	b082      	sub	sp, #8
   11a70:	9000      	str	r0, [sp, #0]
   11a72:	9101      	str	r1, [sp, #4]
   11a74:	6001      	str	r1, [r0, #0]
   11a76:	b002      	add	sp, #8
   11a78:	4770      	bx	lr

00011a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
   11a7a:	b580      	push	{r7, lr}
   11a7c:	b084      	sub	sp, #16
   11a7e:	9002      	str	r0, [sp, #8]
   11a80:	9103      	str	r1, [sp, #12]
   11a82:	f000 f805 	bl	11a90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
   11a86:	9001      	str	r0, [sp, #4]
   11a88:	e7ff      	b.n	11a8a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
   11a8a:	9801      	ldr	r0, [sp, #4]
   11a8c:	b004      	add	sp, #16
   11a8e:	bd80      	pop	{r7, pc}

00011a90 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
   11a90:	b084      	sub	sp, #16
   11a92:	9001      	str	r0, [sp, #4]
   11a94:	9102      	str	r1, [sp, #8]
   11a96:	4408      	add	r0, r1
   11a98:	9003      	str	r0, [sp, #12]
   11a9a:	9803      	ldr	r0, [sp, #12]
   11a9c:	9000      	str	r0, [sp, #0]
   11a9e:	e7ff      	b.n	11aa0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
   11aa0:	9800      	ldr	r0, [sp, #0]
   11aa2:	b004      	add	sp, #16
   11aa4:	4770      	bx	lr

00011aa6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
   11aa6:	b580      	push	{r7, lr}
   11aa8:	b084      	sub	sp, #16
   11aaa:	9002      	str	r0, [sp, #8]
   11aac:	9103      	str	r1, [sp, #12]
   11aae:	f000 f805 	bl	11abc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
   11ab2:	9001      	str	r0, [sp, #4]
   11ab4:	e7ff      	b.n	11ab6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
   11ab6:	9801      	ldr	r0, [sp, #4]
   11ab8:	b004      	add	sp, #16
   11aba:	bd80      	pop	{r7, pc}

00011abc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
   11abc:	b084      	sub	sp, #16
   11abe:	9001      	str	r0, [sp, #4]
   11ac0:	9102      	str	r1, [sp, #8]
   11ac2:	4408      	add	r0, r1
   11ac4:	9003      	str	r0, [sp, #12]
   11ac6:	9803      	ldr	r0, [sp, #12]
   11ac8:	9000      	str	r0, [sp, #0]
   11aca:	e7ff      	b.n	11acc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
   11acc:	9800      	ldr	r0, [sp, #0]
   11ace:	b004      	add	sp, #16
   11ad0:	4770      	bx	lr

00011ad2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
   11ad2:	b580      	push	{r7, lr}
   11ad4:	b08a      	sub	sp, #40	; 0x28
   11ad6:	9009      	str	r0, [sp, #36]	; 0x24
   11ad8:	2100      	movs	r1, #0
   11ada:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11ade:	1d01      	adds	r1, r0, #4
   11ae0:	9002      	str	r0, [sp, #8]
   11ae2:	f7ff fe81 	bl	117e8 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
   11ae6:	9001      	str	r0, [sp, #4]
   11ae8:	e7ff      	b.n	11aea <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
   11aea:	9801      	ldr	r0, [sp, #4]
   11aec:	07c1      	lsls	r1, r0, #31
   11aee:	2900      	cmp	r1, #0
   11af0:	d103      	bne.n	11afa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
   11af2:	e7ff      	b.n	11af4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
   11af4:	2000      	movs	r0, #0
   11af6:	9003      	str	r0, [sp, #12]
   11af8:	e021      	b.n	11b3e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11afa:	2001      	movs	r0, #1
   11afc:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11b00:	9902      	ldr	r1, [sp, #8]
   11b02:	9000      	str	r0, [sp, #0]
   11b04:	4608      	mov	r0, r1
   11b06:	9900      	ldr	r1, [sp, #0]
   11b08:	f7ff fe39 	bl	1177e <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
   11b0c:	9106      	str	r1, [sp, #24]
   11b0e:	9005      	str	r0, [sp, #20]
   11b10:	e7ff      	b.n	11b12 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
   11b12:	9805      	ldr	r0, [sp, #20]
   11b14:	2801      	cmp	r0, #1
   11b16:	d003      	beq.n	11b20 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
   11b18:	e7ff      	b.n	11b1a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
   11b1a:	2000      	movs	r0, #0
   11b1c:	9003      	str	r0, [sp, #12]
   11b1e:	e021      	b.n	11b64 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11b20:	2000      	movs	r0, #0
   11b22:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11b26:	9806      	ldr	r0, [sp, #24]
   11b28:	9007      	str	r0, [sp, #28]
   11b2a:	a807      	add	r0, sp, #28
   11b2c:	9902      	ldr	r1, [sp, #8]
   11b2e:	f7ff fe67 	bl	11800 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
   11b32:	e7ff      	b.n	11b34 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
   11b34:	9807      	ldr	r0, [sp, #28]
   11b36:	9004      	str	r0, [sp, #16]
   11b38:	2001      	movs	r0, #1
   11b3a:	9003      	str	r0, [sp, #12]
   11b3c:	e012      	b.n	11b64 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11b3e:	9803      	ldr	r0, [sp, #12]
   11b40:	9904      	ldr	r1, [sp, #16]
   11b42:	b00a      	add	sp, #40	; 0x28
   11b44:	bd80      	pop	{r7, pc}
   11b46:	2000      	movs	r0, #0
   11b48:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11b4c:	e7f7      	b.n	11b3e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11b4e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11b52:	07c0      	lsls	r0, r0, #31
   11b54:	2800      	cmp	r0, #0
   11b56:	d0f6      	beq.n	11b46 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11b58:	e7ff      	b.n	11b5a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
   11b5a:	2000      	movs	r0, #0
   11b5c:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11b60:	e7f1      	b.n	11b46 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11b62:	e7f0      	b.n	11b46 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   11b64:	9805      	ldr	r0, [sp, #20]
   11b66:	2801      	cmp	r0, #1
   11b68:	d0f1      	beq.n	11b4e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
   11b6a:	e7fa      	b.n	11b62 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

00011b6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
   11b6c:	b082      	sub	sp, #8
   11b6e:	9000      	str	r0, [sp, #0]
   11b70:	9101      	str	r1, [sp, #4]
   11b72:	b002      	add	sp, #8
   11b74:	4770      	bx	lr

00011b76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
   11b76:	b580      	push	{r7, lr}
   11b78:	b086      	sub	sp, #24
   11b7a:	9003      	str	r0, [sp, #12]
   11b7c:	9104      	str	r1, [sp, #16]
   11b7e:	9205      	str	r2, [sp, #20]
   11b80:	9002      	str	r0, [sp, #8]
   11b82:	4610      	mov	r0, r2
   11b84:	9a02      	ldr	r2, [sp, #8]
   11b86:	9101      	str	r1, [sp, #4]
   11b88:	4611      	mov	r1, r2
   11b8a:	9a01      	ldr	r2, [sp, #4]
   11b8c:	f000 f846 	bl	11c1c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
   11b90:	9000      	str	r0, [sp, #0]
   11b92:	e7ff      	b.n	11b94 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
   11b94:	9800      	ldr	r0, [sp, #0]
   11b96:	b006      	add	sp, #24
   11b98:	bd80      	pop	{r7, pc}

00011b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
   11b9a:	b084      	sub	sp, #16
   11b9c:	9002      	str	r0, [sp, #8]
   11b9e:	9103      	str	r1, [sp, #12]
   11ba0:	9000      	str	r0, [sp, #0]
   11ba2:	9101      	str	r1, [sp, #4]
   11ba4:	9801      	ldr	r0, [sp, #4]
   11ba6:	b004      	add	sp, #16
   11ba8:	4770      	bx	lr

00011baa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
   11baa:	b082      	sub	sp, #8
   11bac:	9000      	str	r0, [sp, #0]
   11bae:	9101      	str	r1, [sp, #4]
   11bb0:	b002      	add	sp, #8
   11bb2:	4770      	bx	lr

00011bb4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
   11bb4:	b081      	sub	sp, #4
   11bb6:	9000      	str	r0, [sp, #0]
   11bb8:	b001      	add	sp, #4
   11bba:	4770      	bx	lr

00011bbc <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
   11bbc:	b580      	push	{r7, lr}
   11bbe:	b082      	sub	sp, #8
   11bc0:	9001      	str	r0, [sp, #4]
   11bc2:	f7ff fff7 	bl	11bb4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
   11bc6:	9000      	str	r0, [sp, #0]
   11bc8:	e7ff      	b.n	11bca <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
   11bca:	9800      	ldr	r0, [sp, #0]
   11bcc:	b002      	add	sp, #8
   11bce:	bd80      	pop	{r7, pc}

00011bd0 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
   11bd0:	b580      	push	{r7, lr}
   11bd2:	b084      	sub	sp, #16
   11bd4:	9003      	str	r0, [sp, #12]
   11bd6:	f7ff fff1 	bl	11bbc <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
   11bda:	9001      	str	r0, [sp, #4]
   11bdc:	e7ff      	b.n	11bde <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
   11bde:	9801      	ldr	r0, [sp, #4]
   11be0:	9002      	str	r0, [sp, #8]
   11be2:	9802      	ldr	r0, [sp, #8]
   11be4:	b004      	add	sp, #16
   11be6:	bd80      	pop	{r7, pc}

00011be8 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
   11be8:	b082      	sub	sp, #8
   11bea:	9000      	str	r0, [sp, #0]
   11bec:	9101      	str	r1, [sp, #4]
   11bee:	b002      	add	sp, #8
   11bf0:	4770      	bx	lr

00011bf2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
   11bf2:	b580      	push	{r7, lr}
   11bf4:	b086      	sub	sp, #24
   11bf6:	9003      	str	r0, [sp, #12]
   11bf8:	9104      	str	r1, [sp, #16]
   11bfa:	9205      	str	r2, [sp, #20]
   11bfc:	9002      	str	r0, [sp, #8]
   11bfe:	4608      	mov	r0, r1
   11c00:	4611      	mov	r1, r2
   11c02:	f7ff ffd2 	bl	11baa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   11c06:	9001      	str	r0, [sp, #4]
   11c08:	e7ff      	b.n	11c0a <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
   11c0a:	9801      	ldr	r0, [sp, #4]
   11c0c:	9902      	ldr	r1, [sp, #8]
   11c0e:	f7ff ff4a 	bl	11aa6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
   11c12:	9000      	str	r0, [sp, #0]
   11c14:	e7ff      	b.n	11c16 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
   11c16:	9800      	ldr	r0, [sp, #0]
   11c18:	b006      	add	sp, #24
   11c1a:	bd80      	pop	{r7, pc}

00011c1c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
   11c1c:	b580      	push	{r7, lr}
   11c1e:	b086      	sub	sp, #24
   11c20:	9003      	str	r0, [sp, #12]
   11c22:	9104      	str	r1, [sp, #16]
   11c24:	9205      	str	r2, [sp, #20]
   11c26:	9002      	str	r0, [sp, #8]
   11c28:	4608      	mov	r0, r1
   11c2a:	4611      	mov	r1, r2
   11c2c:	f7ff ff9e 	bl	11b6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11c30:	9001      	str	r0, [sp, #4]
   11c32:	e7ff      	b.n	11c34 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
   11c34:	9801      	ldr	r0, [sp, #4]
   11c36:	9902      	ldr	r1, [sp, #8]
   11c38:	f7ff ff1f 	bl	11a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11c3c:	9000      	str	r0, [sp, #0]
   11c3e:	e7ff      	b.n	11c40 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
   11c40:	9800      	ldr	r0, [sp, #0]
   11c42:	b006      	add	sp, #24
   11c44:	bd80      	pop	{r7, pc}

00011c46 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   11c46:	b081      	sub	sp, #4
   11c48:	b001      	add	sp, #4
   11c4a:	4770      	bx	lr

00011c4c <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
   11c4c:	b580      	push	{r7, lr}
   11c4e:	b086      	sub	sp, #24
   11c50:	f8dd c020 	ldr.w	ip, [sp, #32]
   11c54:	9102      	str	r1, [sp, #8]
   11c56:	9203      	str	r2, [sp, #12]
   11c58:	9304      	str	r3, [sp, #16]
   11c5a:	f8cd c014 	str.w	ip, [sp, #20]
   11c5e:	f04f 0e00 	mov.w	lr, #0
   11c62:	f8cd e004 	str.w	lr, [sp, #4]
   11c66:	f8cd e000 	str.w	lr, [sp]
   11c6a:	f8cd e000 	str.w	lr, [sp]
   11c6e:	6001      	str	r1, [r0, #0]
   11c70:	6042      	str	r2, [r0, #4]
   11c72:	9900      	ldr	r1, [sp, #0]
   11c74:	9a01      	ldr	r2, [sp, #4]
   11c76:	6081      	str	r1, [r0, #8]
   11c78:	60c2      	str	r2, [r0, #12]
   11c7a:	6103      	str	r3, [r0, #16]
   11c7c:	f8c0 c014 	str.w	ip, [r0, #20]
   11c80:	b006      	add	sp, #24
   11c82:	bd80      	pop	{r7, pc}

00011c84 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
   11c84:	b580      	push	{r7, lr}
   11c86:	b084      	sub	sp, #16
   11c88:	9101      	str	r1, [sp, #4]
   11c8a:	9202      	str	r2, [sp, #8]
   11c8c:	9901      	ldr	r1, [sp, #4]
   11c8e:	9a02      	ldr	r2, [sp, #8]
   11c90:	f000 fa95 	bl	121be <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
   11c94:	e7ff      	b.n	11c96 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
   11c96:	b004      	add	sp, #16
   11c98:	bd80      	pop	{r7, pc}

00011c9a <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
   11c9a:	b081      	sub	sp, #4
   11c9c:	9000      	str	r0, [sp, #0]
   11c9e:	b001      	add	sp, #4
   11ca0:	4770      	bx	lr

00011ca2 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
   11ca2:	b081      	sub	sp, #4
   11ca4:	9000      	str	r0, [sp, #0]
   11ca6:	b001      	add	sp, #4
   11ca8:	4770      	bx	lr

00011caa <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
   11caa:	b580      	push	{r7, lr}
   11cac:	b086      	sub	sp, #24
   11cae:	460a      	mov	r2, r1
   11cb0:	9004      	str	r0, [sp, #16]
   11cb2:	f88d 1017 	strb.w	r1, [sp, #23]
   11cb6:	9203      	str	r2, [sp, #12]
   11cb8:	f7ff fff3 	bl	11ca2 <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11cbc:	9002      	str	r0, [sp, #8]
   11cbe:	e7ff      	b.n	11cc0 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
   11cc0:	9802      	ldr	r0, [sp, #8]
   11cc2:	9903      	ldr	r1, [sp, #12]
   11cc4:	f000 f806 	bl	11cd4 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   11cc8:	9001      	str	r0, [sp, #4]
   11cca:	e7ff      	b.n	11ccc <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
   11ccc:	9801      	ldr	r0, [sp, #4]
   11cce:	b006      	add	sp, #24
   11cd0:	bd80      	pop	{r7, pc}
	...

00011cd4 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
   11cd4:	b086      	sub	sp, #24
   11cd6:	460a      	mov	r2, r1
   11cd8:	f88d 100f 	strb.w	r1, [sp, #15]
   11cdc:	9005      	str	r0, [sp, #20]
   11cde:	f89d 100f 	ldrb.w	r1, [sp, #15]
   11ce2:	9002      	str	r0, [sp, #8]
   11ce4:	9101      	str	r1, [sp, #4]
   11ce6:	9901      	ldr	r1, [sp, #4]
   11ce8:	e8df f001 	tbb	[pc, r1]
   11cec:	03102317 	.word	0x03102317
   11cf0:	001c      	.short	0x001c
   11cf2:	f64e 00dd 	movw	r0, #59613	; 0xe8dd
   11cf6:	f2c0 0001 	movt	r0, #1
   11cfa:	f64e 1258 	movw	r2, #59736	; 0xe958
   11cfe:	f2c0 0201 	movt	r2, #1
   11d02:	2131      	movs	r1, #49	; 0x31
   11d04:	f003 fbe8 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11d08:	defe      	udf	#254	; 0xfe
   11d0a:	defe      	udf	#254	; 0xfe
   11d0c:	9802      	ldr	r0, [sp, #8]
   11d0e:	6801      	ldr	r1, [r0, #0]
   11d10:	f3bf 8f5f 	dmb	sy
   11d14:	9104      	str	r1, [sp, #16]
   11d16:	e7ff      	b.n	11d18 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
   11d18:	e017      	b.n	11d4a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   11d1a:	9802      	ldr	r0, [sp, #8]
   11d1c:	6801      	ldr	r1, [r0, #0]
   11d1e:	9104      	str	r1, [sp, #16]
   11d20:	e7ff      	b.n	11d22 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
   11d22:	e012      	b.n	11d4a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   11d24:	9802      	ldr	r0, [sp, #8]
   11d26:	6801      	ldr	r1, [r0, #0]
   11d28:	f3bf 8f5f 	dmb	sy
   11d2c:	9104      	str	r1, [sp, #16]
   11d2e:	e7ff      	b.n	11d30 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
   11d30:	e00b      	b.n	11d4a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   11d32:	f64e 1068 	movw	r0, #59752	; 0xe968
   11d36:	f2c0 0001 	movt	r0, #1
   11d3a:	f64e 1258 	movw	r2, #59736	; 0xe958
   11d3e:	f2c0 0201 	movt	r2, #1
   11d42:	2128      	movs	r1, #40	; 0x28
   11d44:	f003 fbc8 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11d48:	defe      	udf	#254	; 0xfe
   11d4a:	9804      	ldr	r0, [sp, #16]
   11d4c:	b006      	add	sp, #24
   11d4e:	4770      	bx	lr

00011d50 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
   11d50:	b081      	sub	sp, #4
   11d52:	9000      	str	r0, [sp, #0]
   11d54:	6800      	ldr	r0, [r0, #0]
   11d56:	b001      	add	sp, #4
   11d58:	4770      	bx	lr

00011d5a <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
   11d5a:	b082      	sub	sp, #8
   11d5c:	9001      	str	r0, [sp, #4]
   11d5e:	6801      	ldr	r1, [r0, #0]
   11d60:	6840      	ldr	r0, [r0, #4]
   11d62:	9000      	str	r0, [sp, #0]
   11d64:	4608      	mov	r0, r1
   11d66:	9900      	ldr	r1, [sp, #0]
   11d68:	b002      	add	sp, #8
   11d6a:	4770      	bx	lr

00011d6c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
   11d6c:	b580      	push	{r7, lr}
   11d6e:	b08c      	sub	sp, #48	; 0x30
   11d70:	9101      	str	r1, [sp, #4]
   11d72:	9202      	str	r2, [sp, #8]
   11d74:	2100      	movs	r1, #0
   11d76:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   11d7a:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11d7e:	2101      	movs	r1, #1
   11d80:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11d84:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   11d88:	9901      	ldr	r1, [sp, #4]
   11d8a:	2900      	cmp	r1, #0
   11d8c:	460a      	mov	r2, r1
   11d8e:	bf18      	it	ne
   11d90:	2201      	movne	r2, #1
   11d92:	2900      	cmp	r1, #0
   11d94:	9000      	str	r0, [sp, #0]
   11d96:	d001      	beq.n	11d9c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
   11d98:	e7ff      	b.n	11d9a <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
   11d9a:	e008      	b.n	11dae <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
   11d9c:	2000      	movs	r0, #0
   11d9e:	9900      	ldr	r1, [sp, #0]
   11da0:	6088      	str	r0, [r1, #8]
   11da2:	6048      	str	r0, [r1, #4]
   11da4:	6008      	str	r0, [r1, #0]
   11da6:	2002      	movs	r0, #2
   11da8:	6008      	str	r0, [r1, #0]
   11daa:	e021      	b.n	11df0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   11dac:	defe      	udf	#254	; 0xfe
   11dae:	2000      	movs	r0, #0
   11db0:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11db4:	9901      	ldr	r1, [sp, #4]
   11db6:	9a02      	ldr	r2, [sp, #8]
   11db8:	910a      	str	r1, [sp, #40]	; 0x28
   11dba:	920b      	str	r2, [sp, #44]	; 0x2c
   11dbc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11dc0:	9106      	str	r1, [sp, #24]
   11dc2:	9207      	str	r2, [sp, #28]
   11dc4:	9906      	ldr	r1, [sp, #24]
   11dc6:	9a07      	ldr	r2, [sp, #28]
   11dc8:	a803      	add	r0, sp, #12
   11dca:	f7ff ff5b 	bl	11c84 <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
   11dce:	e7ff      	b.n	11dd0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
   11dd0:	9803      	ldr	r0, [sp, #12]
   11dd2:	9904      	ldr	r1, [sp, #16]
   11dd4:	9a05      	ldr	r2, [sp, #20]
   11dd6:	9b00      	ldr	r3, [sp, #0]
   11dd8:	609a      	str	r2, [r3, #8]
   11dda:	6059      	str	r1, [r3, #4]
   11ddc:	6018      	str	r0, [r3, #0]
   11dde:	e007      	b.n	11df0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   11de0:	9801      	ldr	r0, [sp, #4]
   11de2:	2800      	cmp	r0, #0
   11de4:	d10c      	bne.n	11e00 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
   11de6:	e015      	b.n	11e14 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
   11de8:	2000      	movs	r0, #0
   11dea:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11dee:	e7f7      	b.n	11de0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   11df0:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   11df4:	07c0      	lsls	r0, r0, #31
   11df6:	2800      	cmp	r0, #0
   11df8:	d1f6      	bne.n	11de8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
   11dfa:	e7f1      	b.n	11de0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   11dfc:	b00c      	add	sp, #48	; 0x30
   11dfe:	bd80      	pop	{r7, pc}
   11e00:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11e04:	07c0      	lsls	r0, r0, #31
   11e06:	2800      	cmp	r0, #0
   11e08:	d0f8      	beq.n	11dfc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   11e0a:	e7ff      	b.n	11e0c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
   11e0c:	2000      	movs	r0, #0
   11e0e:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11e12:	e7f3      	b.n	11dfc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   11e14:	e7f2      	b.n	11dfc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

00011e16 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>:
   11e16:	b081      	sub	sp, #4
   11e18:	b001      	add	sp, #4
   11e1a:	4770      	bx	lr

00011e1c <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
   11e1c:	b5b0      	push	{r4, r5, r7, lr}
   11e1e:	b081      	sub	sp, #4
   11e20:	9100      	str	r1, [sp, #0]
   11e22:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11e26:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   11e2a:	b001      	add	sp, #4
   11e2c:	bdb0      	pop	{r4, r5, r7, pc}

00011e2e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
   11e2e:	b580      	push	{r7, lr}
   11e30:	b088      	sub	sp, #32
   11e32:	9106      	str	r1, [sp, #24]
   11e34:	680a      	ldr	r2, [r1, #0]
   11e36:	1e93      	subs	r3, r2, #2
   11e38:	bf18      	it	ne
   11e3a:	2301      	movne	r3, #1
   11e3c:	2a02      	cmp	r2, #2
   11e3e:	9102      	str	r1, [sp, #8]
   11e40:	9001      	str	r0, [sp, #4]
   11e42:	d001      	beq.n	11e48 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
   11e44:	e7ff      	b.n	11e46 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
   11e46:	e008      	b.n	11e5a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
   11e48:	2000      	movs	r0, #0
   11e4a:	9901      	ldr	r1, [sp, #4]
   11e4c:	6088      	str	r0, [r1, #8]
   11e4e:	6048      	str	r0, [r1, #4]
   11e50:	6008      	str	r0, [r1, #0]
   11e52:	2002      	movs	r0, #2
   11e54:	6008      	str	r0, [r1, #0]
   11e56:	e00f      	b.n	11e78 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   11e58:	defe      	udf	#254	; 0xfe
   11e5a:	9802      	ldr	r0, [sp, #8]
   11e5c:	9007      	str	r0, [sp, #28]
   11e5e:	a803      	add	r0, sp, #12
   11e60:	9902      	ldr	r1, [sp, #8]
   11e62:	f000 f9b5 	bl	121d0 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
   11e66:	e7ff      	b.n	11e68 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
   11e68:	9803      	ldr	r0, [sp, #12]
   11e6a:	9904      	ldr	r1, [sp, #16]
   11e6c:	9a05      	ldr	r2, [sp, #20]
   11e6e:	9b01      	ldr	r3, [sp, #4]
   11e70:	609a      	str	r2, [r3, #8]
   11e72:	6059      	str	r1, [r3, #4]
   11e74:	6018      	str	r0, [r3, #0]
   11e76:	e7ff      	b.n	11e78 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   11e78:	b008      	add	sp, #32
   11e7a:	bd80      	pop	{r7, pc}

00011e7c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
   11e7c:	b580      	push	{r7, lr}
   11e7e:	b086      	sub	sp, #24
   11e80:	9004      	str	r0, [sp, #16]
   11e82:	6801      	ldr	r1, [r0, #0]
   11e84:	2900      	cmp	r1, #0
   11e86:	9001      	str	r0, [sp, #4]
   11e88:	d001      	beq.n	11e8e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
   11e8a:	e7ff      	b.n	11e8c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
   11e8c:	e003      	b.n	11e96 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
   11e8e:	2000      	movs	r0, #0
   11e90:	9002      	str	r0, [sp, #8]
   11e92:	e00d      	b.n	11eb0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   11e94:	defe      	udf	#254	; 0xfe
   11e96:	9801      	ldr	r0, [sp, #4]
   11e98:	1d01      	adds	r1, r0, #4
   11e9a:	9105      	str	r1, [sp, #20]
   11e9c:	4608      	mov	r0, r1
   11e9e:	f7ff ff57 	bl	11d50 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
   11ea2:	9000      	str	r0, [sp, #0]
   11ea4:	e7ff      	b.n	11ea6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
   11ea6:	9800      	ldr	r0, [sp, #0]
   11ea8:	9003      	str	r0, [sp, #12]
   11eaa:	2101      	movs	r1, #1
   11eac:	9102      	str	r1, [sp, #8]
   11eae:	e7ff      	b.n	11eb0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   11eb0:	9802      	ldr	r0, [sp, #8]
   11eb2:	9903      	ldr	r1, [sp, #12]
   11eb4:	b006      	add	sp, #24
   11eb6:	bd80      	pop	{r7, pc}

00011eb8 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
   11eb8:	b081      	sub	sp, #4
   11eba:	9000      	str	r0, [sp, #0]
        *self
   11ebc:	6800      	ldr	r0, [r0, #0]
    }
   11ebe:	b001      	add	sp, #4
   11ec0:	4770      	bx	lr

00011ec2 <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
   11ec2:	b580      	push	{r7, lr}
        RecordBuilder::new()
   11ec4:	f000 f802 	bl	11ecc <_ZN3log13RecordBuilder3new17haca8312579858419E>
   11ec8:	e7ff      	b.n	11eca <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
   11eca:	bd80      	pop	{r7, pc}

00011ecc <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
   11ecc:	b570      	push	{r4, r5, r6, lr}
   11ece:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
   11ed0:	f64e 11a8 	movw	r1, #59816	; 0xe9a8
   11ed4:	f2c0 0101 	movt	r1, #1
   11ed8:	6809      	ldr	r1, [r1, #0]
   11eda:	466a      	mov	r2, sp
   11edc:	2300      	movs	r3, #0
   11ede:	6013      	str	r3, [r2, #0]
   11ee0:	aa16      	add	r2, sp, #88	; 0x58
   11ee2:	9004      	str	r0, [sp, #16]
   11ee4:	4610      	mov	r0, r2
   11ee6:	9103      	str	r1, [sp, #12]
   11ee8:	461a      	mov	r2, r3
   11eea:	9b03      	ldr	r3, [sp, #12]
   11eec:	f7ff feae 	bl	11c4c <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
   11ef0:	e7ff      	b.n	11ef2 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
   11ef2:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
   11ef4:	f000 f891 	bl	1201a <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
   11ef8:	e7ff      	b.n	11efa <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
   11efa:	a81c      	add	r0, sp, #112	; 0x70
   11efc:	a91f      	add	r1, sp, #124	; 0x7c
   11efe:	f000 f8a5 	bl	1204c <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
   11f02:	e7ff      	b.n	11f04 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
   11f04:	2000      	movs	r0, #0
                module_path: None,
   11f06:	9024      	str	r0, [sp, #144]	; 0x90
   11f08:	9023      	str	r0, [sp, #140]	; 0x8c
   11f0a:	9022      	str	r0, [sp, #136]	; 0x88
   11f0c:	2102      	movs	r1, #2
   11f0e:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
   11f10:	9027      	str	r0, [sp, #156]	; 0x9c
   11f12:	9026      	str	r0, [sp, #152]	; 0x98
   11f14:	9025      	str	r0, [sp, #148]	; 0x94
   11f16:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
   11f18:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
   11f1a:	981c      	ldr	r0, [sp, #112]	; 0x70
   11f1c:	991d      	ldr	r1, [sp, #116]	; 0x74
   11f1e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   11f20:	9207      	str	r2, [sp, #28]
   11f22:	9106      	str	r1, [sp, #24]
   11f24:	9005      	str	r0, [sp, #20]
   11f26:	a805      	add	r0, sp, #20
   11f28:	f100 010c 	add.w	r1, r0, #12
   11f2c:	aa16      	add	r2, sp, #88	; 0x58
   11f2e:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   11f32:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   11f36:	9922      	ldr	r1, [sp, #136]	; 0x88
   11f38:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   11f3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11f3c:	9310      	str	r3, [sp, #64]	; 0x40
   11f3e:	920f      	str	r2, [sp, #60]	; 0x3c
   11f40:	910e      	str	r1, [sp, #56]	; 0x38
   11f42:	9925      	ldr	r1, [sp, #148]	; 0x94
   11f44:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11f46:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   11f48:	9313      	str	r3, [sp, #76]	; 0x4c
   11f4a:	9212      	str	r2, [sp, #72]	; 0x48
   11f4c:	9111      	str	r1, [sp, #68]	; 0x44
   11f4e:	9928      	ldr	r1, [sp, #160]	; 0xa0
   11f50:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   11f52:	9114      	str	r1, [sp, #80]	; 0x50
   11f54:	9215      	str	r2, [sp, #84]	; 0x54
   11f56:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
   11f58:	9904      	ldr	r1, [sp, #16]
   11f5a:	9002      	str	r0, [sp, #8]
   11f5c:	4608      	mov	r0, r1
   11f5e:	9902      	ldr	r1, [sp, #8]
   11f60:	f009 fdc6 	bl	1baf0 <__aeabi_memcpy>
    }
   11f64:	b02a      	add	sp, #168	; 0xa8
   11f66:	bd70      	pop	{r4, r5, r6, pc}

00011f68 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
   11f68:	b5f0      	push	{r4, r5, r6, r7, lr}
   11f6a:	b087      	sub	sp, #28
   11f6c:	9006      	str	r0, [sp, #24]
   11f6e:	466a      	mov	r2, sp
        self.record.args = args;
   11f70:	4613      	mov	r3, r2
   11f72:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
   11f76:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
   11f7a:	f100 010c 	add.w	r1, r0, #12
   11f7e:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   11f82:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
   11f86:	b007      	add	sp, #28
   11f88:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011f8a <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
   11f8a:	b082      	sub	sp, #8
   11f8c:	9000      	str	r0, [sp, #0]
   11f8e:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
   11f90:	6001      	str	r1, [r0, #0]
    }
   11f92:	b002      	add	sp, #8
   11f94:	4770      	bx	lr

00011f96 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
   11f96:	b083      	sub	sp, #12
   11f98:	9000      	str	r0, [sp, #0]
   11f9a:	9101      	str	r1, [sp, #4]
   11f9c:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
   11f9e:	6041      	str	r1, [r0, #4]
   11fa0:	6082      	str	r2, [r0, #8]
    }
   11fa2:	b003      	add	sp, #12
   11fa4:	4770      	bx	lr

00011fa6 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
   11fa6:	b580      	push	{r7, lr}
   11fa8:	b088      	sub	sp, #32
   11faa:	9005      	str	r0, [sp, #20]
   11fac:	9106      	str	r1, [sp, #24]
   11fae:	9207      	str	r2, [sp, #28]
   11fb0:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
   11fb2:	9001      	str	r0, [sp, #4]
   11fb4:	4618      	mov	r0, r3
   11fb6:	f7ff fed9 	bl	11d6c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   11fba:	e7ff      	b.n	11fbc <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
   11fbc:	9802      	ldr	r0, [sp, #8]
   11fbe:	9903      	ldr	r1, [sp, #12]
   11fc0:	9a04      	ldr	r2, [sp, #16]
   11fc2:	9b01      	ldr	r3, [sp, #4]
   11fc4:	62da      	str	r2, [r3, #44]	; 0x2c
   11fc6:	6299      	str	r1, [r3, #40]	; 0x28
   11fc8:	6258      	str	r0, [r3, #36]	; 0x24
    }
   11fca:	4618      	mov	r0, r3
   11fcc:	b008      	add	sp, #32
   11fce:	bd80      	pop	{r7, pc}

00011fd0 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
   11fd0:	b580      	push	{r7, lr}
   11fd2:	b088      	sub	sp, #32
   11fd4:	9005      	str	r0, [sp, #20]
   11fd6:	9106      	str	r1, [sp, #24]
   11fd8:	9207      	str	r2, [sp, #28]
   11fda:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
   11fdc:	9001      	str	r0, [sp, #4]
   11fde:	4618      	mov	r0, r3
   11fe0:	f7ff fec4 	bl	11d6c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   11fe4:	e7ff      	b.n	11fe6 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
   11fe6:	9802      	ldr	r0, [sp, #8]
   11fe8:	9903      	ldr	r1, [sp, #12]
   11fea:	9a04      	ldr	r2, [sp, #16]
   11fec:	9b01      	ldr	r3, [sp, #4]
   11fee:	639a      	str	r2, [r3, #56]	; 0x38
   11ff0:	6359      	str	r1, [r3, #52]	; 0x34
   11ff2:	6318      	str	r0, [r3, #48]	; 0x30
    }
   11ff4:	4618      	mov	r0, r3
   11ff6:	b008      	add	sp, #32
   11ff8:	bd80      	pop	{r7, pc}

00011ffa <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
   11ffa:	b083      	sub	sp, #12
   11ffc:	9000      	str	r0, [sp, #0]
   11ffe:	9101      	str	r1, [sp, #4]
   12000:	9202      	str	r2, [sp, #8]
        self.record.line = line;
   12002:	63c1      	str	r1, [r0, #60]	; 0x3c
   12004:	6402      	str	r2, [r0, #64]	; 0x40
    }
   12006:	b003      	add	sp, #12
   12008:	4770      	bx	lr

0001200a <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
   1200a:	b580      	push	{r7, lr}
   1200c:	b082      	sub	sp, #8
   1200e:	9101      	str	r1, [sp, #4]
        self.record.clone()
   12010:	f000 f8e8 	bl	121e4 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
   12014:	e7ff      	b.n	12016 <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
   12016:	b002      	add	sp, #8
   12018:	bd80      	pop	{r7, pc}

0001201a <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
   1201a:	b580      	push	{r7, lr}
        MetadataBuilder::new()
   1201c:	f000 f802 	bl	12024 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
   12020:	e7ff      	b.n	12022 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
   12022:	bd80      	pop	{r7, pc}

00012024 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
   12024:	b084      	sub	sp, #16
   12026:	2103      	movs	r1, #3
                level: Level::Info,
   12028:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
   1202a:	9903      	ldr	r1, [sp, #12]
   1202c:	9100      	str	r1, [sp, #0]
   1202e:	f64e 1190 	movw	r1, #59792	; 0xe990
   12032:	f2c0 0101 	movt	r1, #1
   12036:	9101      	str	r1, [sp, #4]
   12038:	2100      	movs	r1, #0
   1203a:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
   1203c:	9900      	ldr	r1, [sp, #0]
   1203e:	9a01      	ldr	r2, [sp, #4]
   12040:	9b02      	ldr	r3, [sp, #8]
   12042:	6083      	str	r3, [r0, #8]
   12044:	6042      	str	r2, [r0, #4]
   12046:	6001      	str	r1, [r0, #0]
    }
   12048:	b004      	add	sp, #16
   1204a:	4770      	bx	lr

0001204c <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
   1204c:	b580      	push	{r7, lr}
   1204e:	b082      	sub	sp, #8
   12050:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
   12052:	f000 f91c 	bl	1228e <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   12056:	e7ff      	b.n	12058 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
   12058:	b002      	add	sp, #8
   1205a:	bd80      	pop	{r7, pc}

0001205c <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
   1205c:	b082      	sub	sp, #8
   1205e:	9000      	str	r0, [sp, #0]
   12060:	9101      	str	r1, [sp, #4]
   12062:	2000      	movs	r0, #0
    }
   12064:	b002      	add	sp, #8
   12066:	4770      	bx	lr

00012068 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
   12068:	b082      	sub	sp, #8
   1206a:	9000      	str	r0, [sp, #0]
   1206c:	9101      	str	r1, [sp, #4]
   1206e:	b002      	add	sp, #8
   12070:	4770      	bx	lr

00012072 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
   12072:	b081      	sub	sp, #4
   12074:	9000      	str	r0, [sp, #0]
   12076:	b001      	add	sp, #4
   12078:	4770      	bx	lr

0001207a <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
   1207a:	b580      	push	{r7, lr}
   1207c:	b084      	sub	sp, #16
   1207e:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   12080:	f88d 000f 	strb.w	r0, [sp, #15]
   12084:	f89d 100f 	ldrb.w	r1, [sp, #15]
   12088:	f644 2068 	movw	r0, #19048	; 0x4a68
   1208c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12090:	f7ff fe0b 	bl	11caa <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
   12094:	9000      	str	r0, [sp, #0]
   12096:	e7ff      	b.n	12098 <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
   12098:	9800      	ldr	r0, [sp, #0]
   1209a:	2802      	cmp	r0, #2
   1209c:	d109      	bne.n	120b2 <_ZN3log6logger17hf609e7cc1c031552E+0x38>
   1209e:	e7ff      	b.n	120a0 <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
   120a0:	f240 00f0 	movw	r0, #240	; 0xf0
   120a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   120a8:	6801      	ldr	r1, [r0, #0]
   120aa:	6840      	ldr	r0, [r0, #4]
   120ac:	9101      	str	r1, [sp, #4]
   120ae:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   120b0:	e00a      	b.n	120c8 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
   120b2:	f64e 10c4 	movw	r0, #59844	; 0xe9c4
   120b6:	f2c0 0001 	movt	r0, #1
   120ba:	9001      	str	r0, [sp, #4]
   120bc:	f64e 10ac 	movw	r0, #59820	; 0xe9ac
   120c0:	f2c0 0001 	movt	r0, #1
   120c4:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   120c6:	e7ff      	b.n	120c8 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
   120c8:	9801      	ldr	r0, [sp, #4]
   120ca:	9902      	ldr	r1, [sp, #8]
        }
    }
}
   120cc:	b004      	add	sp, #16
   120ce:	bd80      	pop	{r7, pc}

000120d0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
   120d0:	b570      	push	{r4, r5, r6, lr}
   120d2:	b0ca      	sub	sp, #296	; 0x128
   120d4:	9141      	str	r1, [sp, #260]	; 0x104
   120d6:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
   120d8:	6813      	ldr	r3, [r2, #0]
   120da:	f8d2 c004 	ldr.w	ip, [r2, #4]
   120de:	9343      	str	r3, [sp, #268]	; 0x10c
   120e0:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
   120e4:	f8d2 e008 	ldr.w	lr, [r2, #8]
   120e8:	68d4      	ldr	r4, [r2, #12]
   120ea:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
   120ee:	9446      	str	r4, [sp, #280]	; 0x118
   120f0:	6915      	ldr	r5, [r2, #16]
   120f2:	6956      	ldr	r6, [r2, #20]
   120f4:	9547      	str	r5, [sp, #284]	; 0x11c
   120f6:	9648      	str	r6, [sp, #288]	; 0x120
   120f8:	6992      	ldr	r2, [r2, #24]
   120fa:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
   120fc:	9112      	str	r1, [sp, #72]	; 0x48
   120fe:	9011      	str	r0, [sp, #68]	; 0x44
   12100:	9310      	str	r3, [sp, #64]	; 0x40
   12102:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   12106:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   1210a:	940d      	str	r4, [sp, #52]	; 0x34
   1210c:	950c      	str	r5, [sp, #48]	; 0x30
   1210e:	960b      	str	r6, [sp, #44]	; 0x2c
   12110:	920a      	str	r2, [sp, #40]	; 0x28
   12112:	f7ff ffb2 	bl	1207a <_ZN3log6logger17hf609e7cc1c031552E>
   12116:	9009      	str	r0, [sp, #36]	; 0x24
   12118:	9108      	str	r1, [sp, #32]
   1211a:	e7ff      	b.n	1211c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
   1211c:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
   1211e:	f7ff fed0 	bl	11ec2 <_ZN3log6Record7builder17hde62ab0132265febE>
   12122:	e7ff      	b.n	12124 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
   12124:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
   12126:	4601      	mov	r1, r0
   12128:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1212a:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   1212e:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   12132:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
   12134:	9007      	str	r0, [sp, #28]
   12136:	4608      	mov	r0, r1
   12138:	9907      	ldr	r1, [sp, #28]
   1213a:	f7ff ff15 	bl	11f68 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
   1213e:	9006      	str	r0, [sp, #24]
   12140:	e7ff      	b.n	12142 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
   12142:	9806      	ldr	r0, [sp, #24]
   12144:	9912      	ldr	r1, [sp, #72]	; 0x48
   12146:	f7ff ff20 	bl	11f8a <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
   1214a:	9005      	str	r0, [sp, #20]
   1214c:	e7ff      	b.n	1214e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
   1214e:	9805      	ldr	r0, [sp, #20]
   12150:	9910      	ldr	r1, [sp, #64]	; 0x40
   12152:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12154:	f7ff ff1f 	bl	11f96 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
   12158:	9004      	str	r0, [sp, #16]
   1215a:	e7ff      	b.n	1215c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
   1215c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1215e:	903b      	str	r0, [sp, #236]	; 0xec
   12160:	990d      	ldr	r1, [sp, #52]	; 0x34
   12162:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
   12164:	993b      	ldr	r1, [sp, #236]	; 0xec
   12166:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   12168:	9804      	ldr	r0, [sp, #16]
   1216a:	f7ff ff1c 	bl	11fa6 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
   1216e:	9003      	str	r0, [sp, #12]
   12170:	e7ff      	b.n	12172 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
   12172:	980c      	ldr	r0, [sp, #48]	; 0x30
   12174:	903d      	str	r0, [sp, #244]	; 0xf4
   12176:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12178:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
   1217a:	993d      	ldr	r1, [sp, #244]	; 0xf4
   1217c:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
   1217e:	9803      	ldr	r0, [sp, #12]
   12180:	f7ff ff26 	bl	11fd0 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
   12184:	9002      	str	r0, [sp, #8]
   12186:	e7ff      	b.n	12188 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
   12188:	980a      	ldr	r0, [sp, #40]	; 0x28
   1218a:	9040      	str	r0, [sp, #256]	; 0x100
   1218c:	2101      	movs	r1, #1
   1218e:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
   12190:	993f      	ldr	r1, [sp, #252]	; 0xfc
   12192:	9a40      	ldr	r2, [sp, #256]	; 0x100
   12194:	9802      	ldr	r0, [sp, #8]
   12196:	f7ff ff30 	bl	11ffa <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
   1219a:	9001      	str	r0, [sp, #4]
   1219c:	e7ff      	b.n	1219e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
   1219e:	a813      	add	r0, sp, #76	; 0x4c
   121a0:	9901      	ldr	r1, [sp, #4]
   121a2:	f7ff ff32 	bl	1200a <_ZN3log13RecordBuilder5build17h83529556a009112eE>
   121a6:	e7ff      	b.n	121a8 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
   121a8:	9808      	ldr	r0, [sp, #32]
   121aa:	6901      	ldr	r1, [r0, #16]
   121ac:	aa13      	add	r2, sp, #76	; 0x4c
   121ae:	9809      	ldr	r0, [sp, #36]	; 0x24
   121b0:	9100      	str	r1, [sp, #0]
   121b2:	4611      	mov	r1, r2
   121b4:	9a00      	ldr	r2, [sp, #0]
   121b6:	4790      	blx	r2
   121b8:	e7ff      	b.n	121ba <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
   121ba:	b04a      	add	sp, #296	; 0x128
   121bc:	bd70      	pop	{r4, r5, r6, pc}

000121be <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
   121be:	b082      	sub	sp, #8
   121c0:	9100      	str	r1, [sp, #0]
   121c2:	9201      	str	r2, [sp, #4]
   121c4:	6041      	str	r1, [r0, #4]
   121c6:	6082      	str	r2, [r0, #8]
   121c8:	2100      	movs	r1, #0
   121ca:	6001      	str	r1, [r0, #0]
   121cc:	b002      	add	sp, #8
   121ce:	4770      	bx	lr

000121d0 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   121d0:	b081      	sub	sp, #4
   121d2:	9100      	str	r1, [sp, #0]
   121d4:	680a      	ldr	r2, [r1, #0]
   121d6:	684b      	ldr	r3, [r1, #4]
   121d8:	6889      	ldr	r1, [r1, #8]
   121da:	6081      	str	r1, [r0, #8]
   121dc:	6043      	str	r3, [r0, #4]
   121de:	6002      	str	r2, [r0, #0]
   121e0:	b001      	add	sp, #4
   121e2:	4770      	bx	lr

000121e4 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
   121e4:	b570      	push	{r4, r5, r6, lr}
   121e6:	b09c      	sub	sp, #112	; 0x70
   121e8:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
   121ea:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
   121ec:	f101 020c 	add.w	r2, r1, #12
   121f0:	4613      	mov	r3, r2
   121f2:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
   121f4:	f101 0224 	add.w	r2, r1, #36	; 0x24
   121f8:	4694      	mov	ip, r2
   121fa:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
   121fc:	f101 0230 	add.w	r2, r1, #48	; 0x30
   12200:	4696      	mov	lr, r2
   12202:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
   12204:	f101 023c 	add.w	r2, r1, #60	; 0x3c
   12208:	4614      	mov	r4, r2
   1220a:	921b      	str	r2, [sp, #108]	; 0x6c
   1220c:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
   1220e:	9006      	str	r0, [sp, #24]
   12210:	4610      	mov	r0, r2
   12212:	9305      	str	r3, [sp, #20]
   12214:	f8cd c010 	str.w	ip, [sp, #16]
   12218:	f8cd e00c 	str.w	lr, [sp, #12]
   1221c:	9402      	str	r4, [sp, #8]
   1221e:	f000 f836 	bl	1228e <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   12222:	e7ff      	b.n	12224 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
   12224:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
   12226:	9905      	ldr	r1, [sp, #20]
   12228:	f7ff fdf8 	bl	11e1c <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
   1222c:	e7ff      	b.n	1222e <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
   1222e:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
   12230:	9904      	ldr	r1, [sp, #16]
   12232:	f7ff fdfc 	bl	11e2e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   12236:	e7ff      	b.n	12238 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
   12238:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
   1223a:	9903      	ldr	r1, [sp, #12]
   1223c:	f7ff fdf7 	bl	11e2e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   12240:	e7ff      	b.n	12242 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
   12242:	9802      	ldr	r0, [sp, #8]
   12244:	f7ff fe1a 	bl	11e7c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
   12248:	9001      	str	r0, [sp, #4]
   1224a:	9100      	str	r1, [sp, #0]
   1224c:	e7ff      	b.n	1224e <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
   1224e:	9807      	ldr	r0, [sp, #28]
   12250:	9908      	ldr	r1, [sp, #32]
   12252:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12254:	9b06      	ldr	r3, [sp, #24]
   12256:	609a      	str	r2, [r3, #8]
   12258:	6059      	str	r1, [r3, #4]
   1225a:	6018      	str	r0, [r3, #0]
   1225c:	f103 000c 	add.w	r0, r3, #12
   12260:	a90a      	add	r1, sp, #40	; 0x28
   12262:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
   12266:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
   1226a:	9810      	ldr	r0, [sp, #64]	; 0x40
   1226c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1226e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12270:	62da      	str	r2, [r3, #44]	; 0x2c
   12272:	6299      	str	r1, [r3, #40]	; 0x28
   12274:	6258      	str	r0, [r3, #36]	; 0x24
   12276:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12278:	9914      	ldr	r1, [sp, #80]	; 0x50
   1227a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1227c:	639a      	str	r2, [r3, #56]	; 0x38
   1227e:	6359      	str	r1, [r3, #52]	; 0x34
   12280:	6318      	str	r0, [r3, #48]	; 0x30
   12282:	9801      	ldr	r0, [sp, #4]
   12284:	63d8      	str	r0, [r3, #60]	; 0x3c
   12286:	9900      	ldr	r1, [sp, #0]
   12288:	6419      	str	r1, [r3, #64]	; 0x40
   1228a:	b01c      	add	sp, #112	; 0x70
   1228c:	bd70      	pop	{r4, r5, r6, pc}

0001228e <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   1228e:	b580      	push	{r7, lr}
   12290:	b088      	sub	sp, #32
   12292:	9105      	str	r1, [sp, #20]
    level: Level,
   12294:	9106      	str	r1, [sp, #24]
    target: &'a str,
   12296:	1d0a      	adds	r2, r1, #4
   12298:	4613      	mov	r3, r2
   1229a:	9207      	str	r2, [sp, #28]
    level: Level,
   1229c:	9004      	str	r0, [sp, #16]
   1229e:	4608      	mov	r0, r1
   122a0:	9303      	str	r3, [sp, #12]
   122a2:	f7ff fe09 	bl	11eb8 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
   122a6:	9002      	str	r0, [sp, #8]
   122a8:	e7ff      	b.n	122aa <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
   122aa:	9803      	ldr	r0, [sp, #12]
   122ac:	f7ff fd55 	bl	11d5a <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
   122b0:	9001      	str	r0, [sp, #4]
   122b2:	9100      	str	r1, [sp, #0]
   122b4:	e7ff      	b.n	122b6 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   122b6:	9802      	ldr	r0, [sp, #8]
   122b8:	9904      	ldr	r1, [sp, #16]
   122ba:	6008      	str	r0, [r1, #0]
   122bc:	9a01      	ldr	r2, [sp, #4]
   122be:	604a      	str	r2, [r1, #4]
   122c0:	9b00      	ldr	r3, [sp, #0]
   122c2:	608b      	str	r3, [r1, #8]
   122c4:	b008      	add	sp, #32
   122c6:	bd80      	pop	{r7, pc}

000122c8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   122c8:	b580      	push	{r7, lr}
   122ca:	b084      	sub	sp, #16
   122cc:	9002      	str	r0, [sp, #8]
   122ce:	9103      	str	r1, [sp, #12]
   122d0:	6800      	ldr	r0, [r0, #0]
   122d2:	f000 f81c 	bl	1230e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   122d6:	9001      	str	r0, [sp, #4]
   122d8:	e7ff      	b.n	122da <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   122da:	9801      	ldr	r0, [sp, #4]
   122dc:	f000 0001 	and.w	r0, r0, #1
   122e0:	b004      	add	sp, #16
   122e2:	bd80      	pop	{r7, pc}

000122e4 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   122e4:	b089      	sub	sp, #36	; 0x24
   122e6:	9005      	str	r0, [sp, #20]
   122e8:	9106      	str	r1, [sp, #24]
   122ea:	9107      	str	r1, [sp, #28]
   122ec:	9907      	ldr	r1, [sp, #28]
   122ee:	9002      	str	r0, [sp, #8]
   122f0:	9101      	str	r1, [sp, #4]
   122f2:	e7ff      	b.n	122f4 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   122f4:	9802      	ldr	r0, [sp, #8]
   122f6:	9008      	str	r0, [sp, #32]
   122f8:	9908      	ldr	r1, [sp, #32]
   122fa:	9100      	str	r1, [sp, #0]
   122fc:	e7ff      	b.n	122fe <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   122fe:	9800      	ldr	r0, [sp, #0]
   12300:	9003      	str	r0, [sp, #12]
   12302:	9901      	ldr	r1, [sp, #4]
   12304:	9104      	str	r1, [sp, #16]
   12306:	9803      	ldr	r0, [sp, #12]
   12308:	9904      	ldr	r1, [sp, #16]
   1230a:	b009      	add	sp, #36	; 0x24
   1230c:	4770      	bx	lr

0001230e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   1230e:	b580      	push	{r7, lr}
   12310:	b088      	sub	sp, #32
   12312:	9006      	str	r0, [sp, #24]
   12314:	9107      	str	r1, [sp, #28]
   12316:	9004      	str	r0, [sp, #16]
   12318:	4608      	mov	r0, r1
   1231a:	9103      	str	r1, [sp, #12]
   1231c:	f003 ff7d 	bl	1621a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12320:	9002      	str	r0, [sp, #8]
   12322:	e7ff      	b.n	12324 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   12324:	9802      	ldr	r0, [sp, #8]
   12326:	07c1      	lsls	r1, r0, #31
   12328:	2900      	cmp	r1, #0
   1232a:	d105      	bne.n	12338 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   1232c:	e7ff      	b.n	1232e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   1232e:	9803      	ldr	r0, [sp, #12]
   12330:	f003 ff77 	bl	16222 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12334:	9001      	str	r0, [sp, #4]
   12336:	e007      	b.n	12348 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   12338:	9804      	ldr	r0, [sp, #16]
   1233a:	9903      	ldr	r1, [sp, #12]
   1233c:	f004 fd38 	bl	16db0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12340:	f88d 0017 	strb.w	r0, [sp, #23]
   12344:	e7ff      	b.n	12346 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   12346:	e015      	b.n	12374 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   12348:	9801      	ldr	r0, [sp, #4]
   1234a:	07c1      	lsls	r1, r0, #31
   1234c:	2900      	cmp	r1, #0
   1234e:	d107      	bne.n	12360 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   12350:	e7ff      	b.n	12352 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   12352:	9804      	ldr	r0, [sp, #16]
   12354:	9903      	ldr	r1, [sp, #12]
   12356:	f004 feb8 	bl	170ca <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   1235a:	f88d 0017 	strb.w	r0, [sp, #23]
   1235e:	e007      	b.n	12370 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   12360:	9804      	ldr	r0, [sp, #16]
   12362:	9903      	ldr	r1, [sp, #12]
   12364:	f004 fd8f 	bl	16e86 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   12368:	f88d 0017 	strb.w	r0, [sp, #23]
   1236c:	e7ff      	b.n	1236e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   1236e:	e000      	b.n	12372 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   12370:	e7ff      	b.n	12372 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   12372:	e7ff      	b.n	12374 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   12374:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12378:	b008      	add	sp, #32
   1237a:	bd80      	pop	{r7, pc}

0001237c <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   1237c:	b086      	sub	sp, #24
   1237e:	9004      	str	r0, [sp, #16]
   12380:	9105      	str	r1, [sp, #20]
   12382:	9002      	str	r0, [sp, #8]
   12384:	9103      	str	r1, [sp, #12]
   12386:	9802      	ldr	r0, [sp, #8]
   12388:	9903      	ldr	r1, [sp, #12]
   1238a:	9000      	str	r0, [sp, #0]
   1238c:	9101      	str	r1, [sp, #4]
   1238e:	9800      	ldr	r0, [sp, #0]
   12390:	9901      	ldr	r1, [sp, #4]
   12392:	b006      	add	sp, #24
   12394:	4770      	bx	lr

00012396 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   12396:	b580      	push	{r7, lr}
   12398:	b084      	sub	sp, #16
   1239a:	9002      	str	r0, [sp, #8]
   1239c:	9103      	str	r1, [sp, #12]
   1239e:	f000 f805 	bl	123ac <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   123a2:	9001      	str	r0, [sp, #4]
   123a4:	e7ff      	b.n	123a6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   123a6:	9801      	ldr	r0, [sp, #4]
   123a8:	b004      	add	sp, #16
   123aa:	bd80      	pop	{r7, pc}

000123ac <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   123ac:	b084      	sub	sp, #16
   123ae:	9001      	str	r0, [sp, #4]
   123b0:	9102      	str	r1, [sp, #8]
   123b2:	4408      	add	r0, r1
   123b4:	9003      	str	r0, [sp, #12]
   123b6:	9803      	ldr	r0, [sp, #12]
   123b8:	9000      	str	r0, [sp, #0]
   123ba:	e7ff      	b.n	123bc <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   123bc:	9800      	ldr	r0, [sp, #0]
   123be:	b004      	add	sp, #16
   123c0:	4770      	bx	lr

000123c2 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   123c2:	b580      	push	{r7, lr}
   123c4:	b084      	sub	sp, #16
   123c6:	9002      	str	r0, [sp, #8]
   123c8:	9103      	str	r1, [sp, #12]
   123ca:	f7ff ffd7 	bl	1237c <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   123ce:	9001      	str	r0, [sp, #4]
   123d0:	9100      	str	r1, [sp, #0]
   123d2:	e7ff      	b.n	123d4 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   123d4:	9801      	ldr	r0, [sp, #4]
   123d6:	9900      	ldr	r1, [sp, #0]
   123d8:	b004      	add	sp, #16
   123da:	bd80      	pop	{r7, pc}

000123dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   123dc:	b084      	sub	sp, #16
   123de:	9002      	str	r0, [sp, #8]
   123e0:	9103      	str	r1, [sp, #12]
   123e2:	9000      	str	r0, [sp, #0]
   123e4:	9101      	str	r1, [sp, #4]
   123e6:	9801      	ldr	r0, [sp, #4]
   123e8:	b004      	add	sp, #16
   123ea:	4770      	bx	lr

000123ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   123ec:	b082      	sub	sp, #8
   123ee:	9000      	str	r0, [sp, #0]
   123f0:	9101      	str	r1, [sp, #4]
   123f2:	b002      	add	sp, #8
   123f4:	4770      	bx	lr

000123f6 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
   123f6:	b083      	sub	sp, #12
   123f8:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
   123fa:	9002      	str	r0, [sp, #8]
   123fc:	9802      	ldr	r0, [sp, #8]
   123fe:	9000      	str	r0, [sp, #0]
   12400:	e7ff      	b.n	12402 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
   12402:	9800      	ldr	r0, [sp, #0]
   12404:	b003      	add	sp, #12
   12406:	4770      	bx	lr

00012408 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
   12408:	b081      	sub	sp, #4
   1240a:	f06f 000c 	mvn.w	r0, #12
        }
   1240e:	b001      	add	sp, #4
   12410:	4770      	bx	lr

00012412 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
   12412:	b082      	sub	sp, #8
   12414:	9000      	str	r0, [sp, #0]
   12416:	9101      	str	r1, [sp, #4]
   12418:	2000      	movs	r0, #0
        }
   1241a:	b002      	add	sp, #8
   1241c:	4770      	bx	lr

0001241e <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   1241e:	b082      	sub	sp, #8
   12420:	9000      	str	r0, [sp, #0]
   12422:	9101      	str	r1, [sp, #4]
   12424:	7800      	ldrb	r0, [r0, #0]
   12426:	7809      	ldrb	r1, [r1, #0]
   12428:	1a40      	subs	r0, r0, r1
   1242a:	fab0 f080 	clz	r0, r0
   1242e:	0940      	lsrs	r0, r0, #5
   12430:	b002      	add	sp, #8
   12432:	4770      	bx	lr

00012434 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   12434:	b580      	push	{r7, lr}
   12436:	b084      	sub	sp, #16
   12438:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1243a:	f002 fcbe 	bl	14dba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>
   1243e:	9002      	str	r0, [sp, #8]
   12440:	9101      	str	r1, [sp, #4]
   12442:	e7ff      	b.n	12444 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E+0x10>
    }
   12444:	9802      	ldr	r0, [sp, #8]
   12446:	9901      	ldr	r1, [sp, #4]
   12448:	b004      	add	sp, #16
   1244a:	bd80      	pop	{r7, pc}

0001244c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   1244c:	b580      	push	{r7, lr}
   1244e:	b084      	sub	sp, #16
   12450:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   12452:	f002 fcc7 	bl	14de4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   12456:	9002      	str	r0, [sp, #8]
   12458:	9101      	str	r1, [sp, #4]
   1245a:	e7ff      	b.n	1245c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   1245c:	9802      	ldr	r0, [sp, #8]
   1245e:	9901      	ldr	r1, [sp, #4]
   12460:	b004      	add	sp, #16
   12462:	bd80      	pop	{r7, pc}

00012464 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   12464:	b580      	push	{r7, lr}
   12466:	b084      	sub	sp, #16
   12468:	9001      	str	r0, [sp, #4]
   1246a:	9102      	str	r1, [sp, #8]
   1246c:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   1246e:	f002 fc06 	bl	14c7e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>
   12472:	9000      	str	r0, [sp, #0]
   12474:	e7ff      	b.n	12476 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E+0x12>
    }
   12476:	9800      	ldr	r0, [sp, #0]
   12478:	f000 0001 	and.w	r0, r0, #1
   1247c:	b004      	add	sp, #16
   1247e:	bd80      	pop	{r7, pc}

00012480 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   12480:	b580      	push	{r7, lr}
   12482:	b086      	sub	sp, #24
   12484:	460a      	mov	r2, r1
   12486:	9004      	str	r0, [sp, #16]
   12488:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   1248c:	9203      	str	r2, [sp, #12]
   1248e:	f002 fc59 	bl	14d44 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   12492:	9002      	str	r0, [sp, #8]
   12494:	9101      	str	r1, [sp, #4]
   12496:	e7ff      	b.n	12498 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   12498:	9802      	ldr	r0, [sp, #8]
   1249a:	f000 0001 	and.w	r0, r0, #1
   1249e:	9901      	ldr	r1, [sp, #4]
   124a0:	b006      	add	sp, #24
   124a2:	bd80      	pop	{r7, pc}

000124a4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   124a4:	b580      	push	{r7, lr}
   124a6:	b082      	sub	sp, #8
   124a8:	9001      	str	r0, [sp, #4]
        self.0.clear()
   124aa:	f002 fc74 	bl	14d96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   124ae:	e7ff      	b.n	124b0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   124b0:	b002      	add	sp, #8
   124b2:	bd80      	pop	{r7, pc}

000124b4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>:
    pub fn clear(&mut self) {
   124b4:	b580      	push	{r7, lr}
   124b6:	b082      	sub	sp, #8
   124b8:	9001      	str	r0, [sp, #4]
        self.0.clear()
   124ba:	f002 fc75 	bl	14da8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>
   124be:	e7ff      	b.n	124c0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E+0xc>
    }
   124c0:	b002      	add	sp, #8
   124c2:	bd80      	pop	{r7, pc}

000124c4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>:
    pub fn capacity(&self) -> usize {
   124c4:	b580      	push	{r7, lr}
   124c6:	b082      	sub	sp, #8
   124c8:	9001      	str	r0, [sp, #4]
        self.0.capacity()
   124ca:	f002 fcaa 	bl	14e22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   124ce:	9000      	str	r0, [sp, #0]
   124d0:	e7ff      	b.n	124d2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E+0xe>
    }
   124d2:	9800      	ldr	r0, [sp, #0]
   124d4:	b002      	add	sp, #8
   124d6:	bd80      	pop	{r7, pc}

000124d8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
   124d8:	b081      	sub	sp, #4
   124da:	9000      	str	r0, [sp, #0]
   124dc:	b001      	add	sp, #4
   124de:	4770      	bx	lr

000124e0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   124e0:	b580      	push	{r7, lr}
   124e2:	b088      	sub	sp, #32
   124e4:	9006      	str	r0, [sp, #24]
   124e6:	9107      	str	r1, [sp, #28]
   124e8:	9004      	str	r0, [sp, #16]
   124ea:	4608      	mov	r0, r1
   124ec:	9103      	str	r1, [sp, #12]
   124ee:	f003 fe94 	bl	1621a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   124f2:	9002      	str	r0, [sp, #8]
   124f4:	e7ff      	b.n	124f6 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   124f6:	9802      	ldr	r0, [sp, #8]
   124f8:	07c1      	lsls	r1, r0, #31
   124fa:	2900      	cmp	r1, #0
   124fc:	d105      	bne.n	1250a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   124fe:	e7ff      	b.n	12500 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   12500:	9803      	ldr	r0, [sp, #12]
   12502:	f003 fe8e 	bl	16222 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12506:	9001      	str	r0, [sp, #4]
   12508:	e007      	b.n	1251a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   1250a:	9804      	ldr	r0, [sp, #16]
   1250c:	9903      	ldr	r1, [sp, #12]
   1250e:	f004 fb92 	bl	16c36 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   12512:	f88d 0017 	strb.w	r0, [sp, #23]
   12516:	e7ff      	b.n	12518 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   12518:	e015      	b.n	12546 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   1251a:	9801      	ldr	r0, [sp, #4]
   1251c:	07c1      	lsls	r1, r0, #31
   1251e:	2900      	cmp	r1, #0
   12520:	d107      	bne.n	12532 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   12522:	e7ff      	b.n	12524 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   12524:	9804      	ldr	r0, [sp, #16]
   12526:	9903      	ldr	r1, [sp, #12]
   12528:	f004 fd18 	bl	16f5c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   1252c:	f88d 0017 	strb.w	r0, [sp, #23]
   12530:	e007      	b.n	12542 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   12532:	9804      	ldr	r0, [sp, #16]
   12534:	9903      	ldr	r1, [sp, #12]
   12536:	f004 fbad 	bl	16c94 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   1253a:	f88d 0017 	strb.w	r0, [sp, #23]
   1253e:	e7ff      	b.n	12540 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   12540:	e000      	b.n	12544 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   12542:	e7ff      	b.n	12544 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   12544:	e7ff      	b.n	12546 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   12546:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1254a:	b008      	add	sp, #32
   1254c:	bd80      	pop	{r7, pc}

0001254e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   1254e:	b580      	push	{r7, lr}
   12550:	b088      	sub	sp, #32
   12552:	9006      	str	r0, [sp, #24]
   12554:	9107      	str	r1, [sp, #28]
   12556:	9004      	str	r0, [sp, #16]
   12558:	4608      	mov	r0, r1
   1255a:	9103      	str	r1, [sp, #12]
   1255c:	f003 fe5d 	bl	1621a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12560:	9002      	str	r0, [sp, #8]
   12562:	e7ff      	b.n	12564 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   12564:	9802      	ldr	r0, [sp, #8]
   12566:	07c1      	lsls	r1, r0, #31
   12568:	2900      	cmp	r1, #0
   1256a:	d105      	bne.n	12578 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   1256c:	e7ff      	b.n	1256e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   1256e:	9803      	ldr	r0, [sp, #12]
   12570:	f003 fe57 	bl	16222 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12574:	9001      	str	r0, [sp, #4]
   12576:	e007      	b.n	12588 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   12578:	9804      	ldr	r0, [sp, #16]
   1257a:	9903      	ldr	r1, [sp, #12]
   1257c:	f004 fc18 	bl	16db0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12580:	f88d 0017 	strb.w	r0, [sp, #23]
   12584:	e7ff      	b.n	12586 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   12586:	e015      	b.n	125b4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   12588:	9801      	ldr	r0, [sp, #4]
   1258a:	07c1      	lsls	r1, r0, #31
   1258c:	2900      	cmp	r1, #0
   1258e:	d107      	bne.n	125a0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   12590:	e7ff      	b.n	12592 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   12592:	9804      	ldr	r0, [sp, #16]
   12594:	9903      	ldr	r1, [sp, #12]
   12596:	f004 fd1e 	bl	16fd6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   1259a:	f88d 0017 	strb.w	r0, [sp, #23]
   1259e:	e007      	b.n	125b0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   125a0:	9804      	ldr	r0, [sp, #16]
   125a2:	9903      	ldr	r1, [sp, #12]
   125a4:	f004 fc6f 	bl	16e86 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   125a8:	f88d 0017 	strb.w	r0, [sp, #23]
   125ac:	e7ff      	b.n	125ae <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   125ae:	e000      	b.n	125b2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   125b0:	e7ff      	b.n	125b2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   125b2:	e7ff      	b.n	125b4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   125b4:	f89d 0017 	ldrb.w	r0, [sp, #23]
   125b8:	b008      	add	sp, #32
   125ba:	bd80      	pop	{r7, pc}

000125bc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   125bc:	b580      	push	{r7, lr}
   125be:	b088      	sub	sp, #32
   125c0:	9006      	str	r0, [sp, #24]
   125c2:	9107      	str	r1, [sp, #28]
   125c4:	9004      	str	r0, [sp, #16]
   125c6:	4608      	mov	r0, r1
   125c8:	9103      	str	r1, [sp, #12]
   125ca:	f003 fe26 	bl	1621a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   125ce:	9002      	str	r0, [sp, #8]
   125d0:	e7ff      	b.n	125d2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   125d2:	9802      	ldr	r0, [sp, #8]
   125d4:	07c1      	lsls	r1, r0, #31
   125d6:	2900      	cmp	r1, #0
   125d8:	d105      	bne.n	125e6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   125da:	e7ff      	b.n	125dc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   125dc:	9803      	ldr	r0, [sp, #12]
   125de:	f003 fe20 	bl	16222 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   125e2:	9001      	str	r0, [sp, #4]
   125e4:	e007      	b.n	125f6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   125e6:	9804      	ldr	r0, [sp, #16]
   125e8:	9903      	ldr	r1, [sp, #12]
   125ea:	f004 fbe1 	bl	16db0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   125ee:	f88d 0017 	strb.w	r0, [sp, #23]
   125f2:	e7ff      	b.n	125f4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   125f4:	e015      	b.n	12622 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   125f6:	9801      	ldr	r0, [sp, #4]
   125f8:	07c1      	lsls	r1, r0, #31
   125fa:	2900      	cmp	r1, #0
   125fc:	d107      	bne.n	1260e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   125fe:	e7ff      	b.n	12600 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   12600:	9804      	ldr	r0, [sp, #16]
   12602:	9903      	ldr	r1, [sp, #12]
   12604:	f004 fd61 	bl	170ca <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   12608:	f88d 0017 	strb.w	r0, [sp, #23]
   1260c:	e007      	b.n	1261e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   1260e:	9804      	ldr	r0, [sp, #16]
   12610:	9903      	ldr	r1, [sp, #12]
   12612:	f004 fc38 	bl	16e86 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   12616:	f88d 0017 	strb.w	r0, [sp, #23]
   1261a:	e7ff      	b.n	1261c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   1261c:	e000      	b.n	12620 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   1261e:	e7ff      	b.n	12620 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   12620:	e7ff      	b.n	12622 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   12622:	f89d 0017 	ldrb.w	r0, [sp, #23]
   12626:	b008      	add	sp, #32
   12628:	bd80      	pop	{r7, pc}

0001262a <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   1262a:	b580      	push	{r7, lr}
   1262c:	b084      	sub	sp, #16
   1262e:	9002      	str	r0, [sp, #8]
   12630:	9103      	str	r1, [sp, #12]
   12632:	6800      	ldr	r0, [r0, #0]
   12634:	6809      	ldr	r1, [r1, #0]
   12636:	f7ff fef2 	bl	1241e <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   1263a:	9001      	str	r0, [sp, #4]
   1263c:	e7ff      	b.n	1263e <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   1263e:	9801      	ldr	r0, [sp, #4]
   12640:	f000 0001 	and.w	r0, r0, #1
   12644:	b004      	add	sp, #16
   12646:	bd80      	pop	{r7, pc}

00012648 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   12648:	b5b0      	push	{r4, r5, r7, lr}
   1264a:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   1264e:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   12650:	f005 fc1c 	bl	17e8c <hal_spi_disable>
   12654:	e7ff      	b.n	12656 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   12656:	f240 01f8 	movw	r1, #248	; 0xf8
   1265a:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1265e:	2000      	movs	r0, #0
   12660:	f005 fbd2 	bl	17e08 <hal_spi_config>
   12664:	906a      	str	r0, [sp, #424]	; 0x1a8
   12666:	e7ff      	b.n	12668 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   12668:	f64e 10c8 	movw	r0, #59848	; 0xe9c8
   1266c:	f2c0 0001 	movt	r0, #1
   12670:	6800      	ldr	r0, [r0, #0]
   12672:	a96a      	add	r1, sp, #424	; 0x1a8
   12674:	916b      	str	r1, [sp, #428]	; 0x1ac
   12676:	906c      	str	r0, [sp, #432]	; 0x1b0
   12678:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   1267a:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   1267e:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   12680:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   12684:	6802      	ldr	r2, [r0, #0]
   12686:	680b      	ldr	r3, [r1, #0]
   12688:	429a      	cmp	r2, r3
   1268a:	9068      	str	r0, [sp, #416]	; 0x1a0
   1268c:	9167      	str	r1, [sp, #412]	; 0x19c
   1268e:	d10c      	bne.n	126aa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   12690:	e7ff      	b.n	12692 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   12692:	f646 7004 	movw	r0, #28420	; 0x6f04
   12696:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1269a:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   1269e:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   126a2:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   126a6:	9066      	str	r0, [sp, #408]	; 0x198
   126a8:	e075      	b.n	12796 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   126aa:	f64e 2020 	movw	r0, #59936	; 0xea20
   126ae:	f2c0 0001 	movt	r0, #1
   126b2:	6801      	ldr	r1, [r0, #0]
   126b4:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   126b6:	907c      	str	r0, [sp, #496]	; 0x1f0
   126b8:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   126ba:	927d      	str	r2, [sp, #500]	; 0x1f4
   126bc:	f64e 233c 	movw	r3, #59964	; 0xea3c
   126c0:	f2c0 0301 	movt	r3, #1
   126c4:	681b      	ldr	r3, [r3, #0]
   126c6:	f64e 2c40 	movw	ip, #59968	; 0xea40
   126ca:	f2c0 0c01 	movt	ip, #1
   126ce:	f8dc c000 	ldr.w	ip, [ip]
   126d2:	46ee      	mov	lr, sp
   126d4:	2400      	movs	r4, #0
   126d6:	f8ce 4000 	str.w	r4, [lr]
   126da:	a87e      	add	r0, sp, #504	; 0x1f8
   126dc:	2201      	movs	r2, #1
   126de:	9165      	str	r1, [sp, #404]	; 0x194
   126e0:	4619      	mov	r1, r3
   126e2:	4663      	mov	r3, ip
   126e4:	f7f6 fa5e 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   126e8:	e7ff      	b.n	126ea <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   126ea:	a87c      	add	r0, sp, #496	; 0x1f0
   126ec:	9079      	str	r0, [sp, #484]	; 0x1e4
   126ee:	a87d      	add	r0, sp, #500	; 0x1f4
   126f0:	907a      	str	r0, [sp, #488]	; 0x1e8
   126f2:	a87e      	add	r0, sp, #504	; 0x1f8
   126f4:	907b      	str	r0, [sp, #492]	; 0x1ec
   126f6:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   126f8:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   126fc:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   126fe:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   12702:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   12704:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   12708:	f249 33f3 	movw	r3, #37875	; 0x93f3
   1270c:	f2c0 0300 	movt	r3, #0
   12710:	9164      	str	r1, [sp, #400]	; 0x190
   12712:	4619      	mov	r1, r3
   12714:	9263      	str	r2, [sp, #396]	; 0x18c
   12716:	f7f6 fea4 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1271a:	9062      	str	r0, [sp, #392]	; 0x188
   1271c:	9161      	str	r1, [sp, #388]	; 0x184
   1271e:	e7ff      	b.n	12720 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   12720:	f249 31f3 	movw	r1, #37875	; 0x93f3
   12724:	f2c0 0100 	movt	r1, #0
   12728:	9864      	ldr	r0, [sp, #400]	; 0x190
   1272a:	f7f6 fe9a 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1272e:	9060      	str	r0, [sp, #384]	; 0x180
   12730:	915f      	str	r1, [sp, #380]	; 0x17c
   12732:	e7ff      	b.n	12734 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   12734:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   12738:	f2c0 0101 	movt	r1, #1
   1273c:	9863      	ldr	r0, [sp, #396]	; 0x18c
   1273e:	f7f6 fecf 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12742:	905e      	str	r0, [sp, #376]	; 0x178
   12744:	915d      	str	r1, [sp, #372]	; 0x174
   12746:	e7ff      	b.n	12748 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   12748:	9862      	ldr	r0, [sp, #392]	; 0x188
   1274a:	9073      	str	r0, [sp, #460]	; 0x1cc
   1274c:	9961      	ldr	r1, [sp, #388]	; 0x184
   1274e:	9174      	str	r1, [sp, #464]	; 0x1d0
   12750:	9a60      	ldr	r2, [sp, #384]	; 0x180
   12752:	9275      	str	r2, [sp, #468]	; 0x1d4
   12754:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   12756:	9376      	str	r3, [sp, #472]	; 0x1d8
   12758:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   1275c:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   12760:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   12764:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   12768:	466c      	mov	r4, sp
   1276a:	2503      	movs	r5, #3
   1276c:	6025      	str	r5, [r4, #0]
   1276e:	a86d      	add	r0, sp, #436	; 0x1b4
   12770:	ab73      	add	r3, sp, #460	; 0x1cc
   12772:	9965      	ldr	r1, [sp, #404]	; 0x194
   12774:	462a      	mov	r2, r5
   12776:	f7f6 fa15 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1277a:	e7ff      	b.n	1277c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   1277c:	f64e 205c 	movw	r0, #59996	; 0xea5c
   12780:	f2c0 0001 	movt	r0, #1
   12784:	f002 fea1 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12788:	905c      	str	r0, [sp, #368]	; 0x170
   1278a:	e7ff      	b.n	1278c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   1278c:	a86d      	add	r0, sp, #436	; 0x1b4
   1278e:	995c      	ldr	r1, [sp, #368]	; 0x170
   12790:	f002 fed8 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12794:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   12796:	f643 30e3 	movw	r0, #15331	; 0x3be3
   1279a:	f2c0 0001 	movt	r0, #1
   1279e:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   127a0:	9985      	ldr	r1, [sp, #532]	; 0x214
   127a2:	2000      	movs	r0, #0
   127a4:	9a66      	ldr	r2, [sp, #408]	; 0x198
   127a6:	f005 fbd5 	bl	17f54 <hal_spi_set_txrx_cb>
   127aa:	9084      	str	r0, [sp, #528]	; 0x210
   127ac:	e7ff      	b.n	127ae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   127ae:	f64e 10c8 	movw	r0, #59848	; 0xe9c8
   127b2:	f2c0 0001 	movt	r0, #1
   127b6:	6800      	ldr	r0, [r0, #0]
   127b8:	a984      	add	r1, sp, #528	; 0x210
   127ba:	9186      	str	r1, [sp, #536]	; 0x218
   127bc:	9087      	str	r0, [sp, #540]	; 0x21c
   127be:	9886      	ldr	r0, [sp, #536]	; 0x218
   127c0:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   127c4:	9987      	ldr	r1, [sp, #540]	; 0x21c
   127c6:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   127ca:	6802      	ldr	r2, [r0, #0]
   127cc:	680b      	ldr	r3, [r1, #0]
   127ce:	429a      	cmp	r2, r3
   127d0:	905b      	str	r0, [sp, #364]	; 0x16c
   127d2:	915a      	str	r1, [sp, #360]	; 0x168
   127d4:	d105      	bne.n	127e2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   127d6:	e7ff      	b.n	127d8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   127d8:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   127da:	f005 fb31 	bl	17e40 <hal_spi_enable>
   127de:	909f      	str	r0, [sp, #636]	; 0x27c
   127e0:	e075      	b.n	128ce <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   127e2:	f64e 2020 	movw	r0, #59936	; 0xea20
   127e6:	f2c0 0001 	movt	r0, #1
   127ea:	6801      	ldr	r1, [r0, #0]
   127ec:	985b      	ldr	r0, [sp, #364]	; 0x16c
   127ee:	9097      	str	r0, [sp, #604]	; 0x25c
   127f0:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   127f2:	9298      	str	r2, [sp, #608]	; 0x260
   127f4:	f64e 2380 	movw	r3, #60032	; 0xea80
   127f8:	f2c0 0301 	movt	r3, #1
   127fc:	681b      	ldr	r3, [r3, #0]
   127fe:	f64e 2c40 	movw	ip, #59968	; 0xea40
   12802:	f2c0 0c01 	movt	ip, #1
   12806:	f8dc c000 	ldr.w	ip, [ip]
   1280a:	46ee      	mov	lr, sp
   1280c:	2400      	movs	r4, #0
   1280e:	f8ce 4000 	str.w	r4, [lr]
   12812:	a899      	add	r0, sp, #612	; 0x264
   12814:	2201      	movs	r2, #1
   12816:	9159      	str	r1, [sp, #356]	; 0x164
   12818:	4619      	mov	r1, r3
   1281a:	4663      	mov	r3, ip
   1281c:	f7f6 f9c2 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12820:	e7ff      	b.n	12822 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   12822:	a897      	add	r0, sp, #604	; 0x25c
   12824:	9094      	str	r0, [sp, #592]	; 0x250
   12826:	a898      	add	r0, sp, #608	; 0x260
   12828:	9095      	str	r0, [sp, #596]	; 0x254
   1282a:	a899      	add	r0, sp, #612	; 0x264
   1282c:	9096      	str	r0, [sp, #600]	; 0x258
   1282e:	9894      	ldr	r0, [sp, #592]	; 0x250
   12830:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   12834:	9995      	ldr	r1, [sp, #596]	; 0x254
   12836:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   1283a:	9a96      	ldr	r2, [sp, #600]	; 0x258
   1283c:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   12840:	f249 33f3 	movw	r3, #37875	; 0x93f3
   12844:	f2c0 0300 	movt	r3, #0
   12848:	9158      	str	r1, [sp, #352]	; 0x160
   1284a:	4619      	mov	r1, r3
   1284c:	9257      	str	r2, [sp, #348]	; 0x15c
   1284e:	f7f6 fe08 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12852:	9056      	str	r0, [sp, #344]	; 0x158
   12854:	9155      	str	r1, [sp, #340]	; 0x154
   12856:	e7ff      	b.n	12858 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   12858:	f249 31f3 	movw	r1, #37875	; 0x93f3
   1285c:	f2c0 0100 	movt	r1, #0
   12860:	9858      	ldr	r0, [sp, #352]	; 0x160
   12862:	f7f6 fdfe 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12866:	9054      	str	r0, [sp, #336]	; 0x150
   12868:	9153      	str	r1, [sp, #332]	; 0x14c
   1286a:	e7ff      	b.n	1286c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   1286c:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   12870:	f2c0 0101 	movt	r1, #1
   12874:	9857      	ldr	r0, [sp, #348]	; 0x15c
   12876:	f7f6 fe33 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1287a:	9052      	str	r0, [sp, #328]	; 0x148
   1287c:	9151      	str	r1, [sp, #324]	; 0x144
   1287e:	e7ff      	b.n	12880 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   12880:	9856      	ldr	r0, [sp, #344]	; 0x158
   12882:	908e      	str	r0, [sp, #568]	; 0x238
   12884:	9955      	ldr	r1, [sp, #340]	; 0x154
   12886:	918f      	str	r1, [sp, #572]	; 0x23c
   12888:	9a54      	ldr	r2, [sp, #336]	; 0x150
   1288a:	9290      	str	r2, [sp, #576]	; 0x240
   1288c:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   1288e:	9391      	str	r3, [sp, #580]	; 0x244
   12890:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   12894:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   12898:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   1289c:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   128a0:	466c      	mov	r4, sp
   128a2:	2503      	movs	r5, #3
   128a4:	6025      	str	r5, [r4, #0]
   128a6:	a888      	add	r0, sp, #544	; 0x220
   128a8:	ab8e      	add	r3, sp, #568	; 0x238
   128aa:	9959      	ldr	r1, [sp, #356]	; 0x164
   128ac:	462a      	mov	r2, r5
   128ae:	f7f6 f979 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   128b2:	e7ff      	b.n	128b4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   128b4:	f64e 2084 	movw	r0, #60036	; 0xea84
   128b8:	f2c0 0001 	movt	r0, #1
   128bc:	f002 fe05 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   128c0:	9050      	str	r0, [sp, #320]	; 0x140
   128c2:	e7ff      	b.n	128c4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   128c4:	a888      	add	r0, sp, #544	; 0x220
   128c6:	9950      	ldr	r1, [sp, #320]	; 0x140
   128c8:	f002 fe3c 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   128cc:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   128ce:	f64e 10c8 	movw	r0, #59848	; 0xe9c8
   128d2:	f2c0 0001 	movt	r0, #1
   128d6:	6800      	ldr	r0, [r0, #0]
   128d8:	a99f      	add	r1, sp, #636	; 0x27c
   128da:	91a0      	str	r1, [sp, #640]	; 0x280
   128dc:	90a1      	str	r0, [sp, #644]	; 0x284
   128de:	98a0      	ldr	r0, [sp, #640]	; 0x280
   128e0:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   128e4:	99a1      	ldr	r1, [sp, #644]	; 0x284
   128e6:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   128ea:	6802      	ldr	r2, [r0, #0]
   128ec:	680b      	ldr	r3, [r1, #0]
   128ee:	429a      	cmp	r2, r3
   128f0:	904f      	str	r0, [sp, #316]	; 0x13c
   128f2:	914e      	str	r1, [sp, #312]	; 0x138
   128f4:	d106      	bne.n	12904 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   128f6:	e7ff      	b.n	128f8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   128f8:	2019      	movs	r0, #25
   128fa:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   128fc:	f004 fe76 	bl	175ec <hal_gpio_init_out>
   12900:	90b9      	str	r0, [sp, #740]	; 0x2e4
   12902:	e075      	b.n	129f0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12904:	f64e 2020 	movw	r0, #59936	; 0xea20
   12908:	f2c0 0001 	movt	r0, #1
   1290c:	6801      	ldr	r1, [r0, #0]
   1290e:	984f      	ldr	r0, [sp, #316]	; 0x13c
   12910:	90b1      	str	r0, [sp, #708]	; 0x2c4
   12912:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   12914:	92b2      	str	r2, [sp, #712]	; 0x2c8
   12916:	f64e 23ac 	movw	r3, #60076	; 0xeaac
   1291a:	f2c0 0301 	movt	r3, #1
   1291e:	681b      	ldr	r3, [r3, #0]
   12920:	f64e 2c40 	movw	ip, #59968	; 0xea40
   12924:	f2c0 0c01 	movt	ip, #1
   12928:	f8dc c000 	ldr.w	ip, [ip]
   1292c:	46ee      	mov	lr, sp
   1292e:	2400      	movs	r4, #0
   12930:	f8ce 4000 	str.w	r4, [lr]
   12934:	a8b3      	add	r0, sp, #716	; 0x2cc
   12936:	2201      	movs	r2, #1
   12938:	914d      	str	r1, [sp, #308]	; 0x134
   1293a:	4619      	mov	r1, r3
   1293c:	4663      	mov	r3, ip
   1293e:	f7f6 f931 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12942:	e7ff      	b.n	12944 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   12944:	a8b1      	add	r0, sp, #708	; 0x2c4
   12946:	90ae      	str	r0, [sp, #696]	; 0x2b8
   12948:	a8b2      	add	r0, sp, #712	; 0x2c8
   1294a:	90af      	str	r0, [sp, #700]	; 0x2bc
   1294c:	a8b3      	add	r0, sp, #716	; 0x2cc
   1294e:	90b0      	str	r0, [sp, #704]	; 0x2c0
   12950:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   12952:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   12956:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   12958:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   1295c:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   1295e:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   12962:	f249 33f3 	movw	r3, #37875	; 0x93f3
   12966:	f2c0 0300 	movt	r3, #0
   1296a:	914c      	str	r1, [sp, #304]	; 0x130
   1296c:	4619      	mov	r1, r3
   1296e:	924b      	str	r2, [sp, #300]	; 0x12c
   12970:	f7f6 fd77 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12974:	904a      	str	r0, [sp, #296]	; 0x128
   12976:	9149      	str	r1, [sp, #292]	; 0x124
   12978:	e7ff      	b.n	1297a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   1297a:	f249 31f3 	movw	r1, #37875	; 0x93f3
   1297e:	f2c0 0100 	movt	r1, #0
   12982:	984c      	ldr	r0, [sp, #304]	; 0x130
   12984:	f7f6 fd6d 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12988:	9048      	str	r0, [sp, #288]	; 0x120
   1298a:	9147      	str	r1, [sp, #284]	; 0x11c
   1298c:	e7ff      	b.n	1298e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   1298e:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   12992:	f2c0 0101 	movt	r1, #1
   12996:	984b      	ldr	r0, [sp, #300]	; 0x12c
   12998:	f7f6 fda2 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1299c:	9046      	str	r0, [sp, #280]	; 0x118
   1299e:	9145      	str	r1, [sp, #276]	; 0x114
   129a0:	e7ff      	b.n	129a2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   129a2:	984a      	ldr	r0, [sp, #296]	; 0x128
   129a4:	90a8      	str	r0, [sp, #672]	; 0x2a0
   129a6:	9949      	ldr	r1, [sp, #292]	; 0x124
   129a8:	91a9      	str	r1, [sp, #676]	; 0x2a4
   129aa:	9a48      	ldr	r2, [sp, #288]	; 0x120
   129ac:	92aa      	str	r2, [sp, #680]	; 0x2a8
   129ae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   129b0:	93ab      	str	r3, [sp, #684]	; 0x2ac
   129b2:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   129b6:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   129ba:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   129be:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   129c2:	466c      	mov	r4, sp
   129c4:	2503      	movs	r5, #3
   129c6:	6025      	str	r5, [r4, #0]
   129c8:	a8a2      	add	r0, sp, #648	; 0x288
   129ca:	aba8      	add	r3, sp, #672	; 0x2a0
   129cc:	994d      	ldr	r1, [sp, #308]	; 0x134
   129ce:	462a      	mov	r2, r5
   129d0:	f7f6 f8e8 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   129d4:	e7ff      	b.n	129d6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   129d6:	f64e 20b0 	movw	r0, #60080	; 0xeab0
   129da:	f2c0 0001 	movt	r0, #1
   129de:	f002 fd74 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   129e2:	9044      	str	r0, [sp, #272]	; 0x110
   129e4:	e7ff      	b.n	129e6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   129e6:	a8a2      	add	r0, sp, #648	; 0x288
   129e8:	9944      	ldr	r1, [sp, #272]	; 0x110
   129ea:	f002 fdab 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   129ee:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   129f0:	f64e 10c8 	movw	r0, #59848	; 0xe9c8
   129f4:	f2c0 0001 	movt	r0, #1
   129f8:	6800      	ldr	r0, [r0, #0]
   129fa:	a9b9      	add	r1, sp, #740	; 0x2e4
   129fc:	91ba      	str	r1, [sp, #744]	; 0x2e8
   129fe:	90bb      	str	r0, [sp, #748]	; 0x2ec
   12a00:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   12a02:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   12a06:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   12a08:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   12a0c:	6802      	ldr	r2, [r0, #0]
   12a0e:	680b      	ldr	r3, [r1, #0]
   12a10:	429a      	cmp	r2, r3
   12a12:	9043      	str	r0, [sp, #268]	; 0x10c
   12a14:	9142      	str	r1, [sp, #264]	; 0x108
   12a16:	d106      	bne.n	12a26 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   12a18:	e7ff      	b.n	12a1a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   12a1a:	2012      	movs	r0, #18
   12a1c:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12a1e:	f004 fde5 	bl	175ec <hal_gpio_init_out>
   12a22:	90d3      	str	r0, [sp, #844]	; 0x34c
   12a24:	e075      	b.n	12b12 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12a26:	f64e 2020 	movw	r0, #59936	; 0xea20
   12a2a:	f2c0 0001 	movt	r0, #1
   12a2e:	6801      	ldr	r1, [r0, #0]
   12a30:	9843      	ldr	r0, [sp, #268]	; 0x10c
   12a32:	90cb      	str	r0, [sp, #812]	; 0x32c
   12a34:	9a42      	ldr	r2, [sp, #264]	; 0x108
   12a36:	92cc      	str	r2, [sp, #816]	; 0x330
   12a38:	f64e 23d4 	movw	r3, #60116	; 0xead4
   12a3c:	f2c0 0301 	movt	r3, #1
   12a40:	681b      	ldr	r3, [r3, #0]
   12a42:	f64e 2c40 	movw	ip, #59968	; 0xea40
   12a46:	f2c0 0c01 	movt	ip, #1
   12a4a:	f8dc c000 	ldr.w	ip, [ip]
   12a4e:	46ee      	mov	lr, sp
   12a50:	2400      	movs	r4, #0
   12a52:	f8ce 4000 	str.w	r4, [lr]
   12a56:	a8cd      	add	r0, sp, #820	; 0x334
   12a58:	2201      	movs	r2, #1
   12a5a:	9141      	str	r1, [sp, #260]	; 0x104
   12a5c:	4619      	mov	r1, r3
   12a5e:	4663      	mov	r3, ip
   12a60:	f7f6 f8a0 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12a64:	e7ff      	b.n	12a66 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   12a66:	a8cb      	add	r0, sp, #812	; 0x32c
   12a68:	90c8      	str	r0, [sp, #800]	; 0x320
   12a6a:	a8cc      	add	r0, sp, #816	; 0x330
   12a6c:	90c9      	str	r0, [sp, #804]	; 0x324
   12a6e:	a8cd      	add	r0, sp, #820	; 0x334
   12a70:	90ca      	str	r0, [sp, #808]	; 0x328
   12a72:	98c8      	ldr	r0, [sp, #800]	; 0x320
   12a74:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   12a78:	99c9      	ldr	r1, [sp, #804]	; 0x324
   12a7a:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   12a7e:	9aca      	ldr	r2, [sp, #808]	; 0x328
   12a80:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   12a84:	f249 33f3 	movw	r3, #37875	; 0x93f3
   12a88:	f2c0 0300 	movt	r3, #0
   12a8c:	9140      	str	r1, [sp, #256]	; 0x100
   12a8e:	4619      	mov	r1, r3
   12a90:	923f      	str	r2, [sp, #252]	; 0xfc
   12a92:	f7f6 fce6 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12a96:	903e      	str	r0, [sp, #248]	; 0xf8
   12a98:	913d      	str	r1, [sp, #244]	; 0xf4
   12a9a:	e7ff      	b.n	12a9c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   12a9c:	f249 31f3 	movw	r1, #37875	; 0x93f3
   12aa0:	f2c0 0100 	movt	r1, #0
   12aa4:	9840      	ldr	r0, [sp, #256]	; 0x100
   12aa6:	f7f6 fcdc 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12aaa:	903c      	str	r0, [sp, #240]	; 0xf0
   12aac:	913b      	str	r1, [sp, #236]	; 0xec
   12aae:	e7ff      	b.n	12ab0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   12ab0:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   12ab4:	f2c0 0101 	movt	r1, #1
   12ab8:	983f      	ldr	r0, [sp, #252]	; 0xfc
   12aba:	f7f6 fd11 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12abe:	903a      	str	r0, [sp, #232]	; 0xe8
   12ac0:	9139      	str	r1, [sp, #228]	; 0xe4
   12ac2:	e7ff      	b.n	12ac4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   12ac4:	983e      	ldr	r0, [sp, #248]	; 0xf8
   12ac6:	90c2      	str	r0, [sp, #776]	; 0x308
   12ac8:	993d      	ldr	r1, [sp, #244]	; 0xf4
   12aca:	91c3      	str	r1, [sp, #780]	; 0x30c
   12acc:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   12ace:	92c4      	str	r2, [sp, #784]	; 0x310
   12ad0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   12ad2:	93c5      	str	r3, [sp, #788]	; 0x314
   12ad4:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   12ad8:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   12adc:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   12ae0:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   12ae4:	466c      	mov	r4, sp
   12ae6:	2503      	movs	r5, #3
   12ae8:	6025      	str	r5, [r4, #0]
   12aea:	a8bc      	add	r0, sp, #752	; 0x2f0
   12aec:	abc2      	add	r3, sp, #776	; 0x308
   12aee:	9941      	ldr	r1, [sp, #260]	; 0x104
   12af0:	462a      	mov	r2, r5
   12af2:	f7f6 f857 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12af6:	e7ff      	b.n	12af8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   12af8:	f64e 20d8 	movw	r0, #60120	; 0xead8
   12afc:	f2c0 0001 	movt	r0, #1
   12b00:	f002 fce3 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12b04:	9038      	str	r0, [sp, #224]	; 0xe0
   12b06:	e7ff      	b.n	12b08 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   12b08:	a8bc      	add	r0, sp, #752	; 0x2f0
   12b0a:	9938      	ldr	r1, [sp, #224]	; 0xe0
   12b0c:	f002 fd1a 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12b10:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12b12:	f64e 10c8 	movw	r0, #59848	; 0xe9c8
   12b16:	f2c0 0001 	movt	r0, #1
   12b1a:	6800      	ldr	r0, [r0, #0]
   12b1c:	a9d3      	add	r1, sp, #844	; 0x34c
   12b1e:	91d4      	str	r1, [sp, #848]	; 0x350
   12b20:	90d5      	str	r0, [sp, #852]	; 0x354
   12b22:	98d4      	ldr	r0, [sp, #848]	; 0x350
   12b24:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   12b28:	99d5      	ldr	r1, [sp, #852]	; 0x354
   12b2a:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   12b2e:	6802      	ldr	r2, [r0, #0]
   12b30:	680b      	ldr	r3, [r1, #0]
   12b32:	429a      	cmp	r2, r3
   12b34:	9037      	str	r0, [sp, #220]	; 0xdc
   12b36:	9136      	str	r1, [sp, #216]	; 0xd8
   12b38:	d107      	bne.n	12b4a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   12b3a:	e7ff      	b.n	12b3c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   12b3c:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   12b40:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12b44:	f005 fe5c 	bl	18800 <os_eventq_init>
   12b48:	e075      	b.n	12c36 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12b4a:	f64e 2020 	movw	r0, #59936	; 0xea20
   12b4e:	f2c0 0001 	movt	r0, #1
   12b52:	6801      	ldr	r1, [r0, #0]
   12b54:	9837      	ldr	r0, [sp, #220]	; 0xdc
   12b56:	90e5      	str	r0, [sp, #916]	; 0x394
   12b58:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   12b5a:	92e6      	str	r2, [sp, #920]	; 0x398
   12b5c:	f64e 23d4 	movw	r3, #60116	; 0xead4
   12b60:	f2c0 0301 	movt	r3, #1
   12b64:	681b      	ldr	r3, [r3, #0]
   12b66:	f64e 2c40 	movw	ip, #59968	; 0xea40
   12b6a:	f2c0 0c01 	movt	ip, #1
   12b6e:	f8dc c000 	ldr.w	ip, [ip]
   12b72:	46ee      	mov	lr, sp
   12b74:	2400      	movs	r4, #0
   12b76:	f8ce 4000 	str.w	r4, [lr]
   12b7a:	a8e7      	add	r0, sp, #924	; 0x39c
   12b7c:	2201      	movs	r2, #1
   12b7e:	9135      	str	r1, [sp, #212]	; 0xd4
   12b80:	4619      	mov	r1, r3
   12b82:	4663      	mov	r3, ip
   12b84:	f7f6 f80e 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12b88:	e7ff      	b.n	12b8a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   12b8a:	a8e5      	add	r0, sp, #916	; 0x394
   12b8c:	90e2      	str	r0, [sp, #904]	; 0x388
   12b8e:	a8e6      	add	r0, sp, #920	; 0x398
   12b90:	90e3      	str	r0, [sp, #908]	; 0x38c
   12b92:	a8e7      	add	r0, sp, #924	; 0x39c
   12b94:	90e4      	str	r0, [sp, #912]	; 0x390
   12b96:	98e2      	ldr	r0, [sp, #904]	; 0x388
   12b98:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   12b9c:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   12b9e:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   12ba2:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   12ba4:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   12ba8:	f249 33f3 	movw	r3, #37875	; 0x93f3
   12bac:	f2c0 0300 	movt	r3, #0
   12bb0:	9134      	str	r1, [sp, #208]	; 0xd0
   12bb2:	4619      	mov	r1, r3
   12bb4:	9233      	str	r2, [sp, #204]	; 0xcc
   12bb6:	f7f6 fc54 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12bba:	9032      	str	r0, [sp, #200]	; 0xc8
   12bbc:	9131      	str	r1, [sp, #196]	; 0xc4
   12bbe:	e7ff      	b.n	12bc0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   12bc0:	f249 31f3 	movw	r1, #37875	; 0x93f3
   12bc4:	f2c0 0100 	movt	r1, #0
   12bc8:	9834      	ldr	r0, [sp, #208]	; 0xd0
   12bca:	f7f6 fc4a 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12bce:	9030      	str	r0, [sp, #192]	; 0xc0
   12bd0:	912f      	str	r1, [sp, #188]	; 0xbc
   12bd2:	e7ff      	b.n	12bd4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   12bd4:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   12bd8:	f2c0 0101 	movt	r1, #1
   12bdc:	9833      	ldr	r0, [sp, #204]	; 0xcc
   12bde:	f7f6 fc7f 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12be2:	902e      	str	r0, [sp, #184]	; 0xb8
   12be4:	912d      	str	r1, [sp, #180]	; 0xb4
   12be6:	e7ff      	b.n	12be8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   12be8:	9832      	ldr	r0, [sp, #200]	; 0xc8
   12bea:	90dc      	str	r0, [sp, #880]	; 0x370
   12bec:	9931      	ldr	r1, [sp, #196]	; 0xc4
   12bee:	91dd      	str	r1, [sp, #884]	; 0x374
   12bf0:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   12bf2:	92de      	str	r2, [sp, #888]	; 0x378
   12bf4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   12bf6:	93df      	str	r3, [sp, #892]	; 0x37c
   12bf8:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   12bfc:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   12c00:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   12c04:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   12c08:	466c      	mov	r4, sp
   12c0a:	2503      	movs	r5, #3
   12c0c:	6025      	str	r5, [r4, #0]
   12c0e:	a8d6      	add	r0, sp, #856	; 0x358
   12c10:	abdc      	add	r3, sp, #880	; 0x370
   12c12:	9935      	ldr	r1, [sp, #212]	; 0xd4
   12c14:	462a      	mov	r2, r5
   12c16:	f7f5 ffc5 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12c1a:	e7ff      	b.n	12c1c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   12c1c:	f64e 20e8 	movw	r0, #60136	; 0xeae8
   12c20:	f2c0 0001 	movt	r0, #1
   12c24:	f002 fc51 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12c28:	902c      	str	r0, [sp, #176]	; 0xb0
   12c2a:	e7ff      	b.n	12c2c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   12c2c:	a8d6      	add	r0, sp, #856	; 0x358
   12c2e:	992c      	ldr	r1, [sp, #176]	; 0xb0
   12c30:	f002 fc88 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12c34:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   12c36:	f243 50c5 	movw	r0, #13765	; 0x35c5
   12c3a:	f2c0 0001 	movt	r0, #1
   12c3e:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   12c40:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   12c42:	f646 208c 	movw	r0, #27276	; 0x6a8c
   12c46:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12c4a:	2200      	movs	r2, #0
   12c4c:	f005 fe86 	bl	1895c <os_mqueue_init>
   12c50:	90ed      	str	r0, [sp, #948]	; 0x3b4
   12c52:	e7ff      	b.n	12c54 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   12c54:	f64e 10c8 	movw	r0, #59848	; 0xe9c8
   12c58:	f2c0 0001 	movt	r0, #1
   12c5c:	6800      	ldr	r0, [r0, #0]
   12c5e:	a9ed      	add	r1, sp, #948	; 0x3b4
   12c60:	91ef      	str	r1, [sp, #956]	; 0x3bc
   12c62:	90f0      	str	r0, [sp, #960]	; 0x3c0
   12c64:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   12c66:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   12c6a:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   12c6c:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   12c70:	6802      	ldr	r2, [r0, #0]
   12c72:	680b      	ldr	r3, [r1, #0]
   12c74:	429a      	cmp	r2, r3
   12c76:	902b      	str	r0, [sp, #172]	; 0xac
   12c78:	912a      	str	r1, [sp, #168]	; 0xa8
   12c7a:	d10a      	bne.n	12c92 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   12c7c:	e7ff      	b.n	12c7e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   12c7e:	f646 207c 	movw	r0, #27260	; 0x6a7c
   12c82:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12c86:	2100      	movs	r1, #0
   12c88:	f006 fb62 	bl	19350 <os_sem_init>
   12c8c:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   12c90:	e07b      	b.n	12d8a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   12c92:	f64e 2020 	movw	r0, #59936	; 0xea20
   12c96:	f2c0 0001 	movt	r0, #1
   12c9a:	6801      	ldr	r1, [r0, #0]
   12c9c:	982b      	ldr	r0, [sp, #172]	; 0xac
   12c9e:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   12ca2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   12ca4:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   12ca8:	f64e 330c 	movw	r3, #60172	; 0xeb0c
   12cac:	f2c0 0301 	movt	r3, #1
   12cb0:	681b      	ldr	r3, [r3, #0]
   12cb2:	f64e 2c40 	movw	ip, #59968	; 0xea40
   12cb6:	f2c0 0c01 	movt	ip, #1
   12cba:	f8dc c000 	ldr.w	ip, [ip]
   12cbe:	46ee      	mov	lr, sp
   12cc0:	2400      	movs	r4, #0
   12cc2:	f8ce 4000 	str.w	r4, [lr]
   12cc6:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   12cca:	2201      	movs	r2, #1
   12ccc:	9129      	str	r1, [sp, #164]	; 0xa4
   12cce:	4619      	mov	r1, r3
   12cd0:	4663      	mov	r3, ip
   12cd2:	f7f5 ff67 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12cd6:	e7ff      	b.n	12cd8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   12cd8:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   12cdc:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   12cde:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   12ce2:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   12ce4:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   12ce8:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   12cea:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   12cec:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   12cf0:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   12cf2:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   12cf6:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   12cf8:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   12cfc:	f249 33f3 	movw	r3, #37875	; 0x93f3
   12d00:	f2c0 0300 	movt	r3, #0
   12d04:	9128      	str	r1, [sp, #160]	; 0xa0
   12d06:	4619      	mov	r1, r3
   12d08:	9227      	str	r2, [sp, #156]	; 0x9c
   12d0a:	f7f6 fbaa 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12d0e:	9026      	str	r0, [sp, #152]	; 0x98
   12d10:	9125      	str	r1, [sp, #148]	; 0x94
   12d12:	e7ff      	b.n	12d14 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   12d14:	f249 31f3 	movw	r1, #37875	; 0x93f3
   12d18:	f2c0 0100 	movt	r1, #0
   12d1c:	9828      	ldr	r0, [sp, #160]	; 0xa0
   12d1e:	f7f6 fba0 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12d22:	9024      	str	r0, [sp, #144]	; 0x90
   12d24:	9123      	str	r1, [sp, #140]	; 0x8c
   12d26:	e7ff      	b.n	12d28 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   12d28:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   12d2c:	f2c0 0101 	movt	r1, #1
   12d30:	9827      	ldr	r0, [sp, #156]	; 0x9c
   12d32:	f7f6 fbd5 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12d36:	9022      	str	r0, [sp, #136]	; 0x88
   12d38:	9121      	str	r1, [sp, #132]	; 0x84
   12d3a:	e7ff      	b.n	12d3c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   12d3c:	9826      	ldr	r0, [sp, #152]	; 0x98
   12d3e:	90f7      	str	r0, [sp, #988]	; 0x3dc
   12d40:	9925      	ldr	r1, [sp, #148]	; 0x94
   12d42:	91f8      	str	r1, [sp, #992]	; 0x3e0
   12d44:	9a24      	ldr	r2, [sp, #144]	; 0x90
   12d46:	92f9      	str	r2, [sp, #996]	; 0x3e4
   12d48:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   12d4a:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   12d4c:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   12d50:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   12d54:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   12d58:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   12d5c:	466c      	mov	r4, sp
   12d5e:	2503      	movs	r5, #3
   12d60:	6025      	str	r5, [r4, #0]
   12d62:	a8f1      	add	r0, sp, #964	; 0x3c4
   12d64:	abf7      	add	r3, sp, #988	; 0x3dc
   12d66:	9929      	ldr	r1, [sp, #164]	; 0xa4
   12d68:	462a      	mov	r2, r5
   12d6a:	f7f5 ff1b 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12d6e:	e7ff      	b.n	12d70 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   12d70:	f64e 3010 	movw	r0, #60176	; 0xeb10
   12d74:	f2c0 0001 	movt	r0, #1
   12d78:	f002 fba7 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12d7c:	9020      	str	r0, [sp, #128]	; 0x80
   12d7e:	e7ff      	b.n	12d80 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   12d80:	a8f1      	add	r0, sp, #964	; 0x3c4
   12d82:	9920      	ldr	r1, [sp, #128]	; 0x80
   12d84:	f002 fbde 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12d88:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12d8a:	f64e 10c8 	movw	r0, #59848	; 0xe9c8
   12d8e:	f2c0 0001 	movt	r0, #1
   12d92:	6800      	ldr	r0, [r0, #0]
   12d94:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   12d98:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   12d9c:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   12da0:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   12da4:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   12da8:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   12dac:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   12db0:	6802      	ldr	r2, [r0, #0]
   12db2:	680b      	ldr	r3, [r1, #0]
   12db4:	429a      	cmp	r2, r3
   12db6:	901f      	str	r0, [sp, #124]	; 0x7c
   12db8:	911e      	str	r1, [sp, #120]	; 0x78
   12dba:	d10a      	bne.n	12dd2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   12dbc:	e7ff      	b.n	12dbe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   12dbe:	f646 2084 	movw	r0, #27268	; 0x6a84
   12dc2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12dc6:	2102      	movs	r1, #2
   12dc8:	f006 fac2 	bl	19350 <os_sem_init>
   12dcc:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   12dd0:	e088      	b.n	12ee4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12dd2:	f64e 2020 	movw	r0, #59936	; 0xea20
   12dd6:	f2c0 0001 	movt	r0, #1
   12dda:	6801      	ldr	r1, [r0, #0]
   12ddc:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12dde:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   12de2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12de4:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   12de8:	f64e 3338 	movw	r3, #60216	; 0xeb38
   12dec:	f2c0 0301 	movt	r3, #1
   12df0:	681b      	ldr	r3, [r3, #0]
   12df2:	f64e 2c40 	movw	ip, #59968	; 0xea40
   12df6:	f2c0 0c01 	movt	ip, #1
   12dfa:	f8dc c000 	ldr.w	ip, [ip]
   12dfe:	46ee      	mov	lr, sp
   12e00:	2400      	movs	r4, #0
   12e02:	f8ce 4000 	str.w	r4, [lr]
   12e06:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   12e0a:	2201      	movs	r2, #1
   12e0c:	911d      	str	r1, [sp, #116]	; 0x74
   12e0e:	4619      	mov	r1, r3
   12e10:	4663      	mov	r3, ip
   12e12:	f7f5 fec7 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12e16:	e7ff      	b.n	12e18 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   12e18:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   12e1c:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   12e20:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   12e24:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   12e28:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   12e2c:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   12e30:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   12e34:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   12e38:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   12e3c:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   12e40:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   12e44:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   12e48:	f249 4347 	movw	r3, #37959	; 0x9447
   12e4c:	f2c0 0300 	movt	r3, #0
   12e50:	911c      	str	r1, [sp, #112]	; 0x70
   12e52:	4619      	mov	r1, r3
   12e54:	921b      	str	r2, [sp, #108]	; 0x6c
   12e56:	f7f6 fb2e 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12e5a:	901a      	str	r0, [sp, #104]	; 0x68
   12e5c:	9119      	str	r1, [sp, #100]	; 0x64
   12e5e:	e7ff      	b.n	12e60 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   12e60:	f249 4147 	movw	r1, #37959	; 0x9447
   12e64:	f2c0 0100 	movt	r1, #0
   12e68:	981c      	ldr	r0, [sp, #112]	; 0x70
   12e6a:	f7f6 fb24 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12e6e:	9018      	str	r0, [sp, #96]	; 0x60
   12e70:	9117      	str	r1, [sp, #92]	; 0x5c
   12e72:	e7ff      	b.n	12e74 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   12e74:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   12e78:	f2c0 0101 	movt	r1, #1
   12e7c:	981b      	ldr	r0, [sp, #108]	; 0x6c
   12e7e:	f7f6 fb2f 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12e82:	9016      	str	r0, [sp, #88]	; 0x58
   12e84:	9115      	str	r1, [sp, #84]	; 0x54
   12e86:	e7ff      	b.n	12e88 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   12e88:	981a      	ldr	r0, [sp, #104]	; 0x68
   12e8a:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   12e8e:	9919      	ldr	r1, [sp, #100]	; 0x64
   12e90:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   12e94:	9a18      	ldr	r2, [sp, #96]	; 0x60
   12e96:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   12e9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12e9c:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   12ea0:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   12ea4:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   12ea8:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   12eac:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   12eb0:	466c      	mov	r4, sp
   12eb2:	2503      	movs	r5, #3
   12eb4:	6025      	str	r5, [r4, #0]
   12eb6:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   12eba:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   12ebe:	991d      	ldr	r1, [sp, #116]	; 0x74
   12ec0:	462a      	mov	r2, r5
   12ec2:	f7f5 fe6f 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12ec6:	e7ff      	b.n	12ec8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   12ec8:	f64e 303c 	movw	r0, #60220	; 0xeb3c
   12ecc:	f2c0 0001 	movt	r0, #1
   12ed0:	f002 fafb 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12ed4:	9014      	str	r0, [sp, #80]	; 0x50
   12ed6:	e7ff      	b.n	12ed8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   12ed8:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   12edc:	9914      	ldr	r1, [sp, #80]	; 0x50
   12ede:	f002 fb31 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12ee2:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12ee4:	f64e 10c8 	movw	r0, #59848	; 0xe9c8
   12ee8:	f2c0 0001 	movt	r0, #1
   12eec:	6800      	ldr	r0, [r0, #0]
   12eee:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   12ef2:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   12ef6:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   12efa:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   12efe:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   12f02:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   12f06:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   12f0a:	6802      	ldr	r2, [r0, #0]
   12f0c:	680b      	ldr	r3, [r1, #0]
   12f0e:	429a      	cmp	r2, r3
   12f10:	9013      	str	r0, [sp, #76]	; 0x4c
   12f12:	9112      	str	r1, [sp, #72]	; 0x48
   12f14:	d125      	bne.n	12f62 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   12f16:	e7ff      	b.n	12f18 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   12f18:	f64e 3068 	movw	r0, #60264	; 0xeb68
   12f1c:	f2c0 0001 	movt	r0, #1
   12f20:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   12f22:	f243 00c3 	movw	r0, #12483	; 0x30c3
   12f26:	f2c0 0001 	movt	r0, #1
   12f2a:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   12f2e:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   12f32:	4668      	mov	r0, sp
   12f34:	f44f 7380 	mov.w	r3, #256	; 0x100
   12f38:	6103      	str	r3, [r0, #16]
   12f3a:	60c3      	str	r3, [r0, #12]
   12f3c:	f646 3304 	movw	r3, #27396	; 0x6b04
   12f40:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12f44:	6083      	str	r3, [r0, #8]
   12f46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12f4a:	6043      	str	r3, [r0, #4]
   12f4c:	230a      	movs	r3, #10
   12f4e:	6003      	str	r3, [r0, #0]
   12f50:	f646 20b4 	movw	r0, #27316	; 0x6ab4
   12f54:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12f58:	2300      	movs	r3, #0
   12f5a:	f7f5 ff1d 	bl	8d98 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   12f5e:	9011      	str	r0, [sp, #68]	; 0x44
   12f60:	e088      	b.n	13074 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12f62:	f64e 2020 	movw	r0, #59936	; 0xea20
   12f66:	f2c0 0001 	movt	r0, #1
   12f6a:	6801      	ldr	r1, [r0, #0]
   12f6c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12f6e:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   12f72:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12f74:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   12f78:	f64e 3338 	movw	r3, #60216	; 0xeb38
   12f7c:	f2c0 0301 	movt	r3, #1
   12f80:	681b      	ldr	r3, [r3, #0]
   12f82:	f64e 2c40 	movw	ip, #59968	; 0xea40
   12f86:	f2c0 0c01 	movt	ip, #1
   12f8a:	f8dc c000 	ldr.w	ip, [ip]
   12f8e:	46ee      	mov	lr, sp
   12f90:	2400      	movs	r4, #0
   12f92:	f8ce 4000 	str.w	r4, [lr]
   12f96:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   12f9a:	2201      	movs	r2, #1
   12f9c:	9110      	str	r1, [sp, #64]	; 0x40
   12f9e:	4619      	mov	r1, r3
   12fa0:	4663      	mov	r3, ip
   12fa2:	f7f5 fdff 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12fa6:	e7ff      	b.n	12fa8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   12fa8:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   12fac:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   12fb0:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   12fb4:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   12fb8:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   12fbc:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   12fc0:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   12fc4:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   12fc8:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   12fcc:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   12fd0:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   12fd4:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   12fd8:	f249 4347 	movw	r3, #37959	; 0x9447
   12fdc:	f2c0 0300 	movt	r3, #0
   12fe0:	910f      	str	r1, [sp, #60]	; 0x3c
   12fe2:	4619      	mov	r1, r3
   12fe4:	920e      	str	r2, [sp, #56]	; 0x38
   12fe6:	f7f6 fa66 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12fea:	900d      	str	r0, [sp, #52]	; 0x34
   12fec:	910c      	str	r1, [sp, #48]	; 0x30
   12fee:	e7ff      	b.n	12ff0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   12ff0:	f249 4147 	movw	r1, #37959	; 0x9447
   12ff4:	f2c0 0100 	movt	r1, #0
   12ff8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12ffa:	f7f6 fa5c 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12ffe:	900b      	str	r0, [sp, #44]	; 0x2c
   13000:	910a      	str	r1, [sp, #40]	; 0x28
   13002:	e7ff      	b.n	13004 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   13004:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   13008:	f2c0 0101 	movt	r1, #1
   1300c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1300e:	f7f6 fa67 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13012:	9009      	str	r0, [sp, #36]	; 0x24
   13014:	9108      	str	r1, [sp, #32]
   13016:	e7ff      	b.n	13018 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   13018:	980d      	ldr	r0, [sp, #52]	; 0x34
   1301a:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   1301e:	990c      	ldr	r1, [sp, #48]	; 0x30
   13020:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   13024:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13026:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   1302a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1302c:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   13030:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   13034:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   13038:	f8dd e020 	ldr.w	lr, [sp, #32]
   1303c:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   13040:	466c      	mov	r4, sp
   13042:	2503      	movs	r5, #3
   13044:	6025      	str	r5, [r4, #0]
   13046:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   1304a:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   1304e:	9910      	ldr	r1, [sp, #64]	; 0x40
   13050:	462a      	mov	r2, r5
   13052:	f7f5 fda7 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13056:	e7ff      	b.n	13058 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   13058:	f64e 304c 	movw	r0, #60236	; 0xeb4c
   1305c:	f2c0 0001 	movt	r0, #1
   13060:	f002 fa33 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13064:	9007      	str	r0, [sp, #28]
   13066:	e7ff      	b.n	13068 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   13068:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   1306c:	9907      	ldr	r1, [sp, #28]
   1306e:	f002 fa69 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13072:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   13074:	9811      	ldr	r0, [sp, #68]	; 0x44
   13076:	f7f5 fe03 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   1307a:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   1307e:	e7ff      	b.n	13080 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   13080:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   13084:	1e41      	subs	r1, r0, #1
   13086:	bf18      	it	ne
   13088:	2101      	movne	r1, #1
   1308a:	2801      	cmp	r0, #1
   1308c:	d001      	beq.n	13092 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   1308e:	e7ff      	b.n	13090 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   13090:	e005      	b.n	1309e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   13092:	2000      	movs	r0, #0
    Ok(())
   13094:	9069      	str	r0, [sp, #420]	; 0x1a4
   13096:	2001      	movs	r0, #1
   13098:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   1309a:	e008      	b.n	130ae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   1309c:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   1309e:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   130a2:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   130a6:	f7ff fa17 	bl	124d8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   130aa:	9006      	str	r0, [sp, #24]
   130ac:	e003      	b.n	130b6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   130ae:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   130b0:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   130b4:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   130b6:	9806      	ldr	r0, [sp, #24]
   130b8:	f7f5 fdd6 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   130bc:	9069      	str	r0, [sp, #420]	; 0x1a4
   130be:	e7ff      	b.n	130c0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   130c0:	e7f5      	b.n	130ae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

000130c2 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   130c2:	b580      	push	{r7, lr}
   130c4:	b082      	sub	sp, #8
   130c6:	9001      	str	r0, [sp, #4]
    loop {
   130c8:	e7ff      	b.n	130ca <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   130ca:	f646 20a4 	movw	r0, #27300	; 0x6aa4
   130ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
   130d2:	f7f5 fe48 	bl	8d66 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   130d6:	9000      	str	r0, [sp, #0]
   130d8:	e7ff      	b.n	130da <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   130da:	f64e 316c 	movw	r1, #60268	; 0xeb6c
   130de:	f2c0 0101 	movt	r1, #1
   130e2:	f64e 3378 	movw	r3, #60280	; 0xeb78
   130e6:	f2c0 0301 	movt	r3, #1
   130ea:	220b      	movs	r2, #11
   130ec:	9800      	ldr	r0, [sp, #0]
   130ee:	f7f5 fd88 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   130f2:	e7ff      	b.n	130f4 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   130f4:	f005 f866 	bl	181c4 <hal_watchdog_tickle>
   130f8:	e7ff      	b.n	130fa <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   130fa:	e7e6      	b.n	130ca <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

000130fc <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   130fc:	b580      	push	{r7, lr}
   130fe:	b08c      	sub	sp, #48	; 0x30
   13100:	4601      	mov	r1, r0
   13102:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   13106:	9104      	str	r1, [sp, #16]
   13108:	f000 f8d4 	bl	132b4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   1310c:	9003      	str	r0, [sp, #12]
   1310e:	e7ff      	b.n	13110 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   13110:	9803      	ldr	r0, [sp, #12]
   13112:	f7f5 fdb5 	bl	8c80 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13116:	9006      	str	r0, [sp, #24]
   13118:	e7ff      	b.n	1311a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   1311a:	9806      	ldr	r0, [sp, #24]
   1311c:	1e41      	subs	r1, r0, #1
   1311e:	bf18      	it	ne
   13120:	2101      	movne	r1, #1
   13122:	2801      	cmp	r0, #1
   13124:	d001      	beq.n	1312a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   13126:	e7ff      	b.n	13128 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   13128:	e00c      	b.n	13144 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   1312a:	f644 2070 	movw	r0, #19056	; 0x4a70
   1312e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13132:	9904      	ldr	r1, [sp, #16]
   13134:	f7ff f9a4 	bl	12480 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   13138:	f88d 101d 	strb.w	r1, [sp, #29]
   1313c:	f88d 001c 	strb.w	r0, [sp, #28]
   13140:	e00f      	b.n	13162 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   13142:	defe      	udf	#254	; 0xfe
   13144:	9806      	ldr	r0, [sp, #24]
   13146:	900b      	str	r0, [sp, #44]	; 0x2c
   13148:	f7ff f9c6 	bl	124d8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   1314c:	9002      	str	r0, [sp, #8]
   1314e:	e002      	b.n	13156 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   13150:	9805      	ldr	r0, [sp, #20]
   13152:	b00c      	add	sp, #48	; 0x30
   13154:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   13156:	9802      	ldr	r0, [sp, #8]
   13158:	f7f5 fd86 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   1315c:	9005      	str	r0, [sp, #20]
   1315e:	e7ff      	b.n	13160 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   13160:	e7f6      	b.n	13150 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   13162:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   13164:	f7f5 fd74 	bl	8c50 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   13168:	9001      	str	r0, [sp, #4]
   1316a:	e7ff      	b.n	1316c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   1316c:	9801      	ldr	r0, [sp, #4]
   1316e:	07c1      	lsls	r1, r0, #31
   13170:	2900      	cmp	r1, #0
   13172:	d105      	bne.n	13180 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   13174:	e7ff      	b.n	13176 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   13176:	2000      	movs	r0, #0
    Ok(())
   13178:	9005      	str	r0, [sp, #20]
   1317a:	2001      	movs	r0, #1
   1317c:	9005      	str	r0, [sp, #20]
}
   1317e:	e7e7      	b.n	13150 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   13180:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   13184:	9008      	str	r0, [sp, #32]
   13186:	9808      	ldr	r0, [sp, #32]
   13188:	9005      	str	r0, [sp, #20]
   1318a:	e7e1      	b.n	13150 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

0001318c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   1318c:	b580      	push	{r7, lr}
   1318e:	b094      	sub	sp, #80	; 0x50
   13190:	9010      	str	r0, [sp, #64]	; 0x40
   13192:	9111      	str	r1, [sp, #68]	; 0x44
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   13194:	f644 2270 	movw	r2, #19056	; 0x4a70
   13198:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1319c:	900d      	str	r0, [sp, #52]	; 0x34
   1319e:	4610      	mov	r0, r2
   131a0:	910c      	str	r1, [sp, #48]	; 0x30
   131a2:	f7ff f953 	bl	1244c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   131a6:	900b      	str	r0, [sp, #44]	; 0x2c
   131a8:	910a      	str	r1, [sp, #40]	; 0x28
   131aa:	e7ff      	b.n	131ac <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   131ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
   131ae:	990a      	ldr	r1, [sp, #40]	; 0x28
   131b0:	f7fe fcf3 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   131b4:	9009      	str	r0, [sp, #36]	; 0x24
   131b6:	e7ff      	b.n	131b8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   131b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   131ba:	2800      	cmp	r0, #0
   131bc:	d009      	beq.n	131d2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x46>
   131be:	e7ff      	b.n	131c0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  if unsafe { PENDING_DATA.len() + data.len() > PENDING_DATA.capacity() } { cortex_m::asm::bkpt(); } ////
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   131c0:	f644 2078 	movw	r0, #19064	; 0x4a78
   131c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   131c8:	f7ff f934 	bl	12434 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   131cc:	9008      	str	r0, [sp, #32]
   131ce:	9107      	str	r1, [sp, #28]
   131d0:	e00b      	b.n	131ea <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x5e>
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   131d2:	f64e 3088 	movw	r0, #60296	; 0xeb88
   131d6:	f2c0 0001 	movt	r0, #1
   131da:	f64e 3294 	movw	r2, #60308	; 0xeb94
   131de:	f2c0 0201 	movt	r2, #1
   131e2:	210b      	movs	r1, #11
   131e4:	f002 f978 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   131e8:	defe      	udf	#254	; 0xfe
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   131ea:	9808      	ldr	r0, [sp, #32]
   131ec:	9907      	ldr	r1, [sp, #28]
   131ee:	f7fe fcd4 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   131f2:	9006      	str	r0, [sp, #24]
   131f4:	e7ff      	b.n	131f6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x6a>
   131f6:	980d      	ldr	r0, [sp, #52]	; 0x34
   131f8:	990c      	ldr	r1, [sp, #48]	; 0x30
   131fa:	f7fe fcce 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   131fe:	9005      	str	r0, [sp, #20]
   13200:	e7ff      	b.n	13202 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x76>
   13202:	9806      	ldr	r0, [sp, #24]
   13204:	9905      	ldr	r1, [sp, #20]
   13206:	1842      	adds	r2, r0, r1
   13208:	4613      	mov	r3, r2
   1320a:	4282      	cmp	r2, r0
   1320c:	9304      	str	r3, [sp, #16]
   1320e:	d345      	bcc.n	1329c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x110>
   13210:	e7ff      	b.n	13212 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x86>
   13212:	f644 2078 	movw	r0, #19064	; 0x4a78
   13216:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1321a:	f7ff f953 	bl	124c4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>
   1321e:	9003      	str	r0, [sp, #12]
   13220:	e7ff      	b.n	13222 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x96>
   13222:	9804      	ldr	r0, [sp, #16]
   13224:	9903      	ldr	r1, [sp, #12]
   13226:	4288      	cmp	r0, r1
   13228:	d80a      	bhi.n	13240 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xb4>
   1322a:	e7ff      	b.n	1322c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa0>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   1322c:	f644 2078 	movw	r0, #19064	; 0x4a78
   13230:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13234:	990d      	ldr	r1, [sp, #52]	; 0x34
   13236:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13238:	f7ff f914 	bl	12464 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>
   1323c:	9002      	str	r0, [sp, #8]
   1323e:	e00b      	b.n	13258 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xcc>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   13240:	f64e 30dc 	movw	r0, #60380	; 0xebdc
   13244:	f2c0 0001 	movt	r0, #1
   13248:	f64e 32e8 	movw	r2, #60392	; 0xebe8
   1324c:	f2c0 0201 	movt	r2, #1
   13250:	210c      	movs	r1, #12
   13252:	f002 f941 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13256:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13258:	9802      	ldr	r0, [sp, #8]
   1325a:	f000 0001 	and.w	r0, r0, #1
   1325e:	f7f5 fd09 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   13262:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   13266:	e7ff      	b.n	13268 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xdc>
   13268:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   1326c:	07c1      	lsls	r1, r0, #31
   1326e:	2900      	cmp	r1, #0
   13270:	d001      	beq.n	13276 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xea>
   13272:	e7ff      	b.n	13274 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xe8>
   13274:	e005      	b.n	13282 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xf6>
   13276:	2000      	movs	r0, #0
    Ok(())
   13278:	900e      	str	r0, [sp, #56]	; 0x38
   1327a:	2001      	movs	r0, #1
   1327c:	900e      	str	r0, [sp, #56]	; 0x38
}
   1327e:	e004      	b.n	1328a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13280:	defe      	udf	#254	; 0xfe
   13282:	f7ff f8c1 	bl	12408 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   13286:	9001      	str	r0, [sp, #4]
   13288:	e002      	b.n	13290 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x104>
}
   1328a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1328c:	b014      	add	sp, #80	; 0x50
   1328e:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   13290:	9801      	ldr	r0, [sp, #4]
   13292:	f7f5 fce9 	bl	8c68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13296:	900e      	str	r0, [sp, #56]	; 0x38
   13298:	e7ff      	b.n	1329a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x10e>
   1329a:	e7f6      	b.n	1328a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   1329c:	f64e 30c0 	movw	r0, #60352	; 0xebc0
   132a0:	f2c0 0001 	movt	r0, #1
   132a4:	f64e 32a4 	movw	r2, #60324	; 0xeba4
   132a8:	f2c0 0201 	movt	r2, #1
   132ac:	211c      	movs	r1, #28
   132ae:	f002 f913 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   132b2:	defe      	udf	#254	; 0xfe

000132b4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   132b4:	b580      	push	{r7, lr}
   132b6:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   132b8:	f644 2070 	movw	r0, #19056	; 0x4a70
   132bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   132c0:	f7ff f8c4 	bl	1244c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   132c4:	900b      	str	r0, [sp, #44]	; 0x2c
   132c6:	910a      	str	r1, [sp, #40]	; 0x28
   132c8:	e016      	b.n	132f8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   132ca:	2001      	movs	r0, #1
   132cc:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   132d0:	e00c      	b.n	132ec <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   132d2:	2000      	movs	r0, #0
   132d4:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   132d8:	e008      	b.n	132ec <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   132da:	f644 2078 	movw	r0, #19064	; 0x4a78
   132de:	f2c2 0000 	movt	r0, #8192	; 0x2000
   132e2:	f7ff f8a7 	bl	12434 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   132e6:	9009      	str	r0, [sp, #36]	; 0x24
   132e8:	9108      	str	r1, [sp, #32]
   132ea:	e00f      	b.n	1330c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   132ec:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   132f0:	07c0      	lsls	r0, r0, #31
   132f2:	2800      	cmp	r0, #0
   132f4:	d11d      	bne.n	13332 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   132f6:	e013      	b.n	13320 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   132f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   132fa:	990a      	ldr	r1, [sp, #40]	; 0x28
   132fc:	f7fe fc4d 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13300:	9007      	str	r0, [sp, #28]
   13302:	e7ff      	b.n	13304 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   13304:	9807      	ldr	r0, [sp, #28]
   13306:	2800      	cmp	r0, #0
   13308:	d0e7      	beq.n	132da <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   1330a:	e7e2      	b.n	132d2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   1330c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1330e:	9908      	ldr	r1, [sp, #32]
   13310:	f7fe fc43 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13314:	9006      	str	r0, [sp, #24]
   13316:	e7ff      	b.n	13318 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   13318:	9806      	ldr	r0, [sp, #24]
   1331a:	2800      	cmp	r0, #0
   1331c:	d0d5      	beq.n	132ca <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   1331e:	e7d8      	b.n	132d2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   13320:	f644 2070 	movw	r0, #19056	; 0x4a70
   13324:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13328:	f7ff f890 	bl	1244c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   1332c:	9005      	str	r0, [sp, #20]
   1332e:	9104      	str	r1, [sp, #16]
   13330:	e007      	b.n	13342 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   13332:	2000      	movs	r0, #0
        return Ok(());
   13334:	900c      	str	r0, [sp, #48]	; 0x30
   13336:	2001      	movs	r0, #1
   13338:	900c      	str	r0, [sp, #48]	; 0x30
   1333a:	e7ff      	b.n	1333c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   1333c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1333e:	b010      	add	sp, #64	; 0x40
   13340:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   13342:	9804      	ldr	r0, [sp, #16]
   13344:	2800      	cmp	r0, #0
   13346:	d03f      	beq.n	133c8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   13348:	e7ff      	b.n	1334a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   1334a:	9805      	ldr	r0, [sp, #20]
   1334c:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   1334e:	f644 2078 	movw	r0, #19064	; 0x4a78
   13352:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13356:	9103      	str	r1, [sp, #12]
   13358:	f7ff f86c 	bl	12434 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
   1335c:	9002      	str	r0, [sp, #8]
   1335e:	9101      	str	r1, [sp, #4]
   13360:	e7ff      	b.n	13362 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   13362:	9803      	ldr	r0, [sp, #12]
   13364:	9902      	ldr	r1, [sp, #8]
   13366:	9a01      	ldr	r2, [sp, #4]
   13368:	f000 f837 	bl	133da <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   1336c:	900e      	str	r0, [sp, #56]	; 0x38
   1336e:	e7ff      	b.n	13370 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   13370:	980e      	ldr	r0, [sp, #56]	; 0x38
   13372:	2801      	cmp	r0, #1
   13374:	d107      	bne.n	13386 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   13376:	e7ff      	b.n	13378 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   13378:	f644 2070 	movw	r0, #19056	; 0x4a70
   1337c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13380:	f7ff f890 	bl	124a4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   13384:	e014      	b.n	133b0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   13386:	980e      	ldr	r0, [sp, #56]	; 0x38
   13388:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   1338a:	f644 2170 	movw	r1, #19056	; 0x4a70
   1338e:	f2c2 0100 	movt	r1, #8192	; 0x2000
   13392:	9000      	str	r0, [sp, #0]
   13394:	4608      	mov	r0, r1
   13396:	f7ff f885 	bl	124a4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   1339a:	e7ff      	b.n	1339c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   1339c:	f644 2078 	movw	r0, #19064	; 0x4a78
   133a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   133a4:	f7ff f886 	bl	124b4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   133a8:	e7ff      	b.n	133aa <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   133aa:	9800      	ldr	r0, [sp, #0]
   133ac:	900c      	str	r0, [sp, #48]	; 0x30
   133ae:	e7c5      	b.n	1333c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   133b0:	f644 2078 	movw	r0, #19064	; 0x4a78
   133b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   133b8:	f7ff f87c 	bl	124b4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
   133bc:	e7ff      	b.n	133be <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   133be:	2000      	movs	r0, #0
    Ok(())
   133c0:	900c      	str	r0, [sp, #48]	; 0x30
   133c2:	2001      	movs	r0, #1
   133c4:	900c      	str	r0, [sp, #48]	; 0x30
}
   133c6:	e7b9      	b.n	1333c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   133c8:	f64e 30f8 	movw	r0, #60408	; 0xebf8
   133cc:	f2c0 0001 	movt	r0, #1
   133d0:	2100      	movs	r1, #0
   133d2:	9a04      	ldr	r2, [sp, #16]
   133d4:	f002 f896 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   133d8:	defe      	udf	#254	; 0xfe

000133da <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   133da:	b580      	push	{r7, lr}
   133dc:	b0a0      	sub	sp, #128	; 0x80
   133de:	4603      	mov	r3, r0
   133e0:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   133e4:	9116      	str	r1, [sp, #88]	; 0x58
   133e6:	9217      	str	r2, [sp, #92]	; 0x5c
   133e8:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   133ec:	9018      	str	r0, [sp, #96]	; 0x60
   133ee:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   133f2:	fba0 0c0c 	umull	r0, ip, r0, ip
   133f6:	f1bc 0f00 	cmp.w	ip, #0
   133fa:	920f      	str	r2, [sp, #60]	; 0x3c
   133fc:	910e      	str	r1, [sp, #56]	; 0x38
   133fe:	900d      	str	r0, [sp, #52]	; 0x34
   13400:	f040 80c8 	bne.w	13594 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   13404:	e7ff      	b.n	13406 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   13406:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   1340a:	f2c1 0062 	movt	r0, #4194	; 0x1062
   1340e:	990d      	ldr	r1, [sp, #52]	; 0x34
   13410:	fba1 0200 	umull	r0, r2, r1, r0
   13414:	0991      	lsrs	r1, r2, #6
   13416:	f646 2284 	movw	r2, #27268	; 0x6a84
   1341a:	f2c2 0200 	movt	r2, #8192	; 0x2000
   1341e:	900c      	str	r0, [sp, #48]	; 0x30
   13420:	4610      	mov	r0, r2
   13422:	f005 ffcf 	bl	193c4 <os_sem_pend>
   13426:	e7ff      	b.n	13428 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   13428:	980e      	ldr	r0, [sp, #56]	; 0x38
   1342a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1342c:	f7fe fbb5 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13430:	900b      	str	r0, [sp, #44]	; 0x2c
   13432:	e7ff      	b.n	13434 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   13434:	2001      	movs	r0, #1
   13436:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13438:	fa10 f081 	uxtah	r0, r0, r1
   1343c:	b282      	uxth	r2, r0
   1343e:	4603      	mov	r3, r0
   13440:	4282      	cmp	r2, r0
   13442:	930a      	str	r3, [sp, #40]	; 0x28
   13444:	f040 80b2 	bne.w	135ac <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   13448:	e7ff      	b.n	1344a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   1344a:	980a      	ldr	r0, [sp, #40]	; 0x28
   1344c:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   13450:	b280      	uxth	r0, r0
   13452:	2100      	movs	r1, #0
   13454:	f005 fcc4 	bl	18de0 <os_msys_get_pkthdr>
   13458:	4601      	mov	r1, r0
   1345a:	901a      	str	r0, [sp, #104]	; 0x68
   1345c:	9109      	str	r1, [sp, #36]	; 0x24
   1345e:	e7ff      	b.n	13460 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   13460:	9809      	ldr	r0, [sp, #36]	; 0x24
   13462:	f000 ff17 	bl	14294 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   13466:	9008      	str	r0, [sp, #32]
   13468:	e7ff      	b.n	1346a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   1346a:	9808      	ldr	r0, [sp, #32]
   1346c:	07c1      	lsls	r1, r0, #31
   1346e:	2900      	cmp	r1, #0
   13470:	d106      	bne.n	13480 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   13472:	e7ff      	b.n	13474 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   13474:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   13478:	901b      	str	r0, [sp, #108]	; 0x6c
   1347a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   1347c:	9107      	str	r1, [sp, #28]
   1347e:	e010      	b.n	134a2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13480:	f646 2084 	movw	r0, #27268	; 0x6a84
   13484:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13488:	f005 ff6a 	bl	19360 <os_sem_release>
   1348c:	e7ff      	b.n	1348e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   1348e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   13492:	9012      	str	r0, [sp, #72]	; 0x48
   13494:	9812      	ldr	r0, [sp, #72]	; 0x48
   13496:	9011      	str	r0, [sp, #68]	; 0x44
   13498:	e002      	b.n	134a0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   1349a:	9811      	ldr	r0, [sp, #68]	; 0x44
   1349c:	b020      	add	sp, #128	; 0x80
   1349e:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   134a0:	e7fb      	b.n	1349a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   134a2:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   134a4:	9809      	ldr	r0, [sp, #36]	; 0x24
   134a6:	9907      	ldr	r1, [sp, #28]
   134a8:	f005 faf2 	bl	18a90 <os_mbuf_append>
   134ac:	4601      	mov	r1, r0
   134ae:	901c      	str	r0, [sp, #112]	; 0x70
   134b0:	9106      	str	r1, [sp, #24]
   134b2:	e7ff      	b.n	134b4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   134b4:	9806      	ldr	r0, [sp, #24]
   134b6:	2800      	cmp	r0, #0
   134b8:	d106      	bne.n	134c8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   134ba:	e7ff      	b.n	134bc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   134bc:	980e      	ldr	r0, [sp, #56]	; 0x38
   134be:	990f      	ldr	r1, [sp, #60]	; 0x3c
   134c0:	f7fe fb73 	bl	11baa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   134c4:	9005      	str	r0, [sp, #20]
   134c6:	e011      	b.n	134ec <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   134c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   134ca:	f005 fac5 	bl	18a58 <os_mbuf_free_chain>
   134ce:	e7ff      	b.n	134d0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   134d0:	f646 2084 	movw	r0, #27268	; 0x6a84
   134d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   134d8:	f005 ff42 	bl	19360 <os_sem_release>
   134dc:	e7ff      	b.n	134de <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   134de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   134e2:	9013      	str	r0, [sp, #76]	; 0x4c
   134e4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   134e6:	9011      	str	r0, [sp, #68]	; 0x44
   134e8:	e7ff      	b.n	134ea <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   134ea:	e7d9      	b.n	134a0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   134ec:	9805      	ldr	r0, [sp, #20]
   134ee:	901d      	str	r0, [sp, #116]	; 0x74
   134f0:	991d      	ldr	r1, [sp, #116]	; 0x74
   134f2:	9104      	str	r1, [sp, #16]
   134f4:	e7ff      	b.n	134f6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   134f6:	980e      	ldr	r0, [sp, #56]	; 0x38
   134f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   134fa:	f7fe fb4e 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   134fe:	9003      	str	r0, [sp, #12]
   13500:	e7ff      	b.n	13502 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   13502:	9803      	ldr	r0, [sp, #12]
   13504:	b282      	uxth	r2, r0
   13506:	9809      	ldr	r0, [sp, #36]	; 0x24
   13508:	9904      	ldr	r1, [sp, #16]
   1350a:	f005 fac1 	bl	18a90 <os_mbuf_append>
   1350e:	4601      	mov	r1, r0
   13510:	901e      	str	r0, [sp, #120]	; 0x78
   13512:	9102      	str	r1, [sp, #8]
   13514:	e7ff      	b.n	13516 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   13516:	9802      	ldr	r0, [sp, #8]
   13518:	2800      	cmp	r0, #0
   1351a:	d10f      	bne.n	1353c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   1351c:	e7ff      	b.n	1351e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   1351e:	f646 208c 	movw	r0, #27276	; 0x6a8c
   13522:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13526:	f646 21a4 	movw	r1, #27300	; 0x6aa4
   1352a:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1352e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13530:	f005 fa30 	bl	18994 <os_mqueue_put>
   13534:	4601      	mov	r1, r0
   13536:	901f      	str	r0, [sp, #124]	; 0x7c
   13538:	9101      	str	r1, [sp, #4]
   1353a:	e011      	b.n	13560 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   1353c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1353e:	f005 fa8b 	bl	18a58 <os_mbuf_free_chain>
   13542:	e7ff      	b.n	13544 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13544:	f646 2084 	movw	r0, #27268	; 0x6a84
   13548:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1354c:	f005 ff08 	bl	19360 <os_sem_release>
   13550:	e7ff      	b.n	13552 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   13552:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   13556:	9014      	str	r0, [sp, #80]	; 0x50
   13558:	9814      	ldr	r0, [sp, #80]	; 0x50
   1355a:	9011      	str	r0, [sp, #68]	; 0x44
   1355c:	e7ff      	b.n	1355e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   1355e:	e7c4      	b.n	134ea <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   13560:	9801      	ldr	r0, [sp, #4]
   13562:	2800      	cmp	r0, #0
   13564:	d105      	bne.n	13572 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   13566:	e7ff      	b.n	13568 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   13568:	2000      	movs	r0, #0
    Ok(())
   1356a:	9011      	str	r0, [sp, #68]	; 0x44
   1356c:	2001      	movs	r0, #1
   1356e:	9011      	str	r0, [sp, #68]	; 0x44
}
   13570:	e793      	b.n	1349a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13572:	9809      	ldr	r0, [sp, #36]	; 0x24
   13574:	f005 fa70 	bl	18a58 <os_mbuf_free_chain>
   13578:	e7ff      	b.n	1357a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   1357a:	f646 2084 	movw	r0, #27268	; 0x6a84
   1357e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13582:	f005 feed 	bl	19360 <os_sem_release>
   13586:	e7ff      	b.n	13588 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   13588:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   1358c:	9015      	str	r0, [sp, #84]	; 0x54
   1358e:	9815      	ldr	r0, [sp, #84]	; 0x54
   13590:	9011      	str	r0, [sp, #68]	; 0x44
   13592:	e7e4      	b.n	1355e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13594:	f64e 4020 	movw	r0, #60448	; 0xec20
   13598:	f2c0 0001 	movt	r0, #1
   1359c:	f64e 4208 	movw	r2, #60424	; 0xec08
   135a0:	f2c0 0201 	movt	r2, #1
   135a4:	2121      	movs	r1, #33	; 0x21
   135a6:	f001 ff97 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   135aa:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   135ac:	f64e 30c0 	movw	r0, #60352	; 0xebc0
   135b0:	f2c0 0001 	movt	r0, #1
   135b4:	f64e 4244 	movw	r2, #60484	; 0xec44
   135b8:	f2c0 0201 	movt	r2, #1
   135bc:	211c      	movs	r1, #28
   135be:	f001 ff8b 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   135c2:	defe      	udf	#254	; 0xfe

000135c4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   135c4:	b5b0      	push	{r4, r5, r7, lr}
   135c6:	b0c4      	sub	sp, #272	; 0x110
   135c8:	9038      	str	r0, [sp, #224]	; 0xe0
   135ca:	e7ff      	b.n	135cc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   135cc:	f646 208c 	movw	r0, #27276	; 0x6a8c
   135d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   135d4:	f005 f9cb 	bl	1896e <os_mqueue_get>
   135d8:	4601      	mov	r1, r0
   135da:	9039      	str	r0, [sp, #228]	; 0xe4
   135dc:	911b      	str	r1, [sp, #108]	; 0x6c
   135de:	e7ff      	b.n	135e0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   135e0:	981b      	ldr	r0, [sp, #108]	; 0x6c
   135e2:	f000 fe57 	bl	14294 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   135e6:	901a      	str	r0, [sp, #104]	; 0x68
   135e8:	e7ff      	b.n	135ea <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   135ea:	981a      	ldr	r0, [sp, #104]	; 0x68
   135ec:	07c1      	lsls	r1, r0, #31
   135ee:	2900      	cmp	r1, #0
   135f0:	d106      	bne.n	13600 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   135f2:	e7ff      	b.n	135f4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   135f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
   135f6:	901c      	str	r0, [sp, #112]	; 0x70
   135f8:	2101      	movs	r1, #1
        let mut first_byte = true;
   135fa:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   135fe:	e001      	b.n	13604 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   13600:	b044      	add	sp, #272	; 0x110
   13602:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   13604:	981c      	ldr	r0, [sp, #112]	; 0x70
   13606:	f000 fe45 	bl	14294 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   1360a:	9019      	str	r0, [sp, #100]	; 0x64
   1360c:	e7ff      	b.n	1360e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   1360e:	9819      	ldr	r0, [sp, #100]	; 0x64
   13610:	07c1      	lsls	r1, r0, #31
   13612:	2900      	cmp	r1, #0
   13614:	d004      	beq.n	13620 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   13616:	e7ff      	b.n	13618 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   13618:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1361a:	f005 fa1d 	bl	18a58 <os_mbuf_free_chain>
   1361e:	e0aa      	b.n	13776 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   13620:	981c      	ldr	r0, [sp, #112]	; 0x70
   13622:	6800      	ldr	r0, [r0, #0]
   13624:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   13626:	991c      	ldr	r1, [sp, #112]	; 0x70
   13628:	88c9      	ldrh	r1, [r1, #6]
   1362a:	460a      	mov	r2, r1
   1362c:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13630:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   13634:	07c9      	lsls	r1, r1, #31
   13636:	2900      	cmp	r1, #0
   13638:	9018      	str	r0, [sp, #96]	; 0x60
   1363a:	9217      	str	r2, [sp, #92]	; 0x5c
   1363c:	d105      	bne.n	1364a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   1363e:	e7ff      	b.n	13640 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   13640:	9818      	ldr	r0, [sp, #96]	; 0x60
   13642:	903e      	str	r0, [sp, #248]	; 0xf8
   13644:	983e      	ldr	r0, [sp, #248]	; 0xf8
   13646:	9016      	str	r0, [sp, #88]	; 0x58
   13648:	e07b      	b.n	13742 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   1364a:	2000      	movs	r0, #0
                first_byte = false;
   1364c:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   13650:	9818      	ldr	r0, [sp, #96]	; 0x60
   13652:	903c      	str	r0, [sp, #240]	; 0xf0
   13654:	983c      	ldr	r0, [sp, #240]	; 0xf0
   13656:	9015      	str	r0, [sp, #84]	; 0x54
   13658:	e7ff      	b.n	1365a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   1365a:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   1365c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1365e:	9014      	str	r0, [sp, #80]	; 0x50
   13660:	4608      	mov	r0, r1
   13662:	9914      	ldr	r1, [sp, #80]	; 0x50
   13664:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13666:	f000 f921 	bl	138ac <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   1366a:	9013      	str	r0, [sp, #76]	; 0x4c
   1366c:	e7ff      	b.n	1366e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   1366e:	f64e 4154 	movw	r1, #60500	; 0xec54
   13672:	f2c0 0101 	movt	r1, #1
   13676:	f64e 4360 	movw	r3, #60512	; 0xec60
   1367a:	f2c0 0301 	movt	r3, #1
   1367e:	220c      	movs	r2, #12
   13680:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13682:	f7f5 fabe 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13686:	e7ff      	b.n	13688 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   13688:	9818      	ldr	r0, [sp, #96]	; 0x60
   1368a:	7801      	ldrb	r1, [r0, #0]
   1368c:	2901      	cmp	r1, #1
   1368e:	d013      	beq.n	136b8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   13690:	e01a      	b.n	136c8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   13692:	2001      	movs	r0, #1
   13694:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   13698:	e008      	b.n	136ac <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   1369a:	2000      	movs	r0, #0
   1369c:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   136a0:	e004      	b.n	136ac <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   136a2:	9818      	ldr	r0, [sp, #96]	; 0x60
   136a4:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   136a6:	2929      	cmp	r1, #41	; 0x29
   136a8:	d0f3      	beq.n	13692 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   136aa:	e7f6      	b.n	1369a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   136ac:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   136b0:	07c0      	lsls	r0, r0, #31
   136b2:	2800      	cmp	r0, #0
   136b4:	d113      	bne.n	136de <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   136b6:	e017      	b.n	136e8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   136b8:	2001      	movs	r0, #1
   136ba:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   136be:	e008      	b.n	136d2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   136c0:	2000      	movs	r0, #0
   136c2:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   136c6:	e004      	b.n	136d2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   136c8:	9818      	ldr	r0, [sp, #96]	; 0x60
   136ca:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   136cc:	2911      	cmp	r1, #17
   136ce:	d0f3      	beq.n	136b8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   136d0:	e7f6      	b.n	136c0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   136d2:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   136d6:	07c0      	lsls	r0, r0, #31
   136d8:	2800      	cmp	r0, #0
   136da:	d1da      	bne.n	13692 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   136dc:	e7e1      	b.n	136a2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   136de:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   136e0:	f000 fb13 	bl	13d0a <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   136e4:	e7ff      	b.n	136e6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   136e6:	e7ff      	b.n	136e8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   136e8:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   136ea:	9818      	ldr	r0, [sp, #96]	; 0x60
   136ec:	f7fe f9c5 	bl	11a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   136f0:	9012      	str	r0, [sp, #72]	; 0x48
   136f2:	e7ff      	b.n	136f4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   136f4:	9812      	ldr	r0, [sp, #72]	; 0x48
   136f6:	903d      	str	r0, [sp, #244]	; 0xf4
   136f8:	983d      	ldr	r0, [sp, #244]	; 0xf4
   136fa:	9011      	str	r0, [sp, #68]	; 0x44
   136fc:	e7ff      	b.n	136fe <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   136fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   13702:	9917      	ldr	r1, [sp, #92]	; 0x5c
   13704:	fa10 f081 	uxtah	r0, r0, r1
   13708:	b282      	uxth	r2, r0
   1370a:	4603      	mov	r3, r0
   1370c:	4282      	cmp	r2, r0
   1370e:	9310      	str	r3, [sp, #64]	; 0x40
   13710:	f040 80c0 	bne.w	13894 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   13714:	e7ff      	b.n	13716 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   13716:	9810      	ldr	r0, [sp, #64]	; 0x40
   13718:	b281      	uxth	r1, r0
   1371a:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   1371c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1371e:	f000 f8c5 	bl	138ac <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13722:	900f      	str	r0, [sp, #60]	; 0x3c
   13724:	e7ff      	b.n	13726 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   13726:	f64e 4154 	movw	r1, #60500	; 0xec54
   1372a:	f2c0 0101 	movt	r1, #1
   1372e:	f64e 43a4 	movw	r3, #60580	; 0xeca4
   13732:	f2c0 0301 	movt	r3, #1
   13736:	220c      	movs	r2, #12
   13738:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1373a:	f7f5 fa62 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1373e:	e7ff      	b.n	13740 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13740:	e015      	b.n	1376e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   13742:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13744:	b281      	uxth	r1, r0
   13746:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   13748:	9816      	ldr	r0, [sp, #88]	; 0x58
   1374a:	f000 f8af 	bl	138ac <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   1374e:	900e      	str	r0, [sp, #56]	; 0x38
   13750:	e7ff      	b.n	13752 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   13752:	f64e 4154 	movw	r1, #60500	; 0xec54
   13756:	f2c0 0101 	movt	r1, #1
   1375a:	f64e 43b4 	movw	r3, #60596	; 0xecb4
   1375e:	f2c0 0301 	movt	r3, #1
   13762:	220c      	movs	r2, #12
   13764:	980e      	ldr	r0, [sp, #56]	; 0x38
   13766:	f7f5 fa4c 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1376a:	e7ff      	b.n	1376c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   1376c:	e7ff      	b.n	1376e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   1376e:	981c      	ldr	r0, [sp, #112]	; 0x70
   13770:	68c0      	ldr	r0, [r0, #12]
   13772:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   13774:	e746      	b.n	13604 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   13776:	f646 2084 	movw	r0, #27268	; 0x6a84
   1377a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1377e:	f005 fdef 	bl	19360 <os_sem_release>
   13782:	901e      	str	r0, [sp, #120]	; 0x78
   13784:	e7ff      	b.n	13786 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   13786:	f64e 10c8 	movw	r0, #59848	; 0xe9c8
   1378a:	f2c0 0001 	movt	r0, #1
   1378e:	6800      	ldr	r0, [r0, #0]
   13790:	a91e      	add	r1, sp, #120	; 0x78
   13792:	911f      	str	r1, [sp, #124]	; 0x7c
   13794:	9020      	str	r0, [sp, #128]	; 0x80
   13796:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13798:	903f      	str	r0, [sp, #252]	; 0xfc
   1379a:	9920      	ldr	r1, [sp, #128]	; 0x80
   1379c:	9140      	str	r1, [sp, #256]	; 0x100
   1379e:	6802      	ldr	r2, [r0, #0]
   137a0:	680b      	ldr	r3, [r1, #0]
   137a2:	429a      	cmp	r2, r3
   137a4:	900d      	str	r0, [sp, #52]	; 0x34
   137a6:	910c      	str	r1, [sp, #48]	; 0x30
   137a8:	d101      	bne.n	137ae <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   137aa:	e7ff      	b.n	137ac <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   137ac:	e70e      	b.n	135cc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   137ae:	f64e 2020 	movw	r0, #59936	; 0xea20
   137b2:	f2c0 0001 	movt	r0, #1
   137b6:	6801      	ldr	r1, [r0, #0]
   137b8:	980d      	ldr	r0, [sp, #52]	; 0x34
   137ba:	9030      	str	r0, [sp, #192]	; 0xc0
   137bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   137be:	9231      	str	r2, [sp, #196]	; 0xc4
   137c0:	f64e 3338 	movw	r3, #60216	; 0xeb38
   137c4:	f2c0 0301 	movt	r3, #1
   137c8:	681b      	ldr	r3, [r3, #0]
   137ca:	f64e 2c40 	movw	ip, #59968	; 0xea40
   137ce:	f2c0 0c01 	movt	ip, #1
   137d2:	f8dc c000 	ldr.w	ip, [ip]
   137d6:	46ee      	mov	lr, sp
   137d8:	2400      	movs	r4, #0
   137da:	f8ce 4000 	str.w	r4, [lr]
   137de:	a832      	add	r0, sp, #200	; 0xc8
   137e0:	2201      	movs	r2, #1
   137e2:	910b      	str	r1, [sp, #44]	; 0x2c
   137e4:	4619      	mov	r1, r3
   137e6:	4663      	mov	r3, ip
   137e8:	f7f5 f9dc 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   137ec:	e7ff      	b.n	137ee <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   137ee:	a830      	add	r0, sp, #192	; 0xc0
   137f0:	902d      	str	r0, [sp, #180]	; 0xb4
   137f2:	a831      	add	r0, sp, #196	; 0xc4
   137f4:	902e      	str	r0, [sp, #184]	; 0xb8
   137f6:	a832      	add	r0, sp, #200	; 0xc8
   137f8:	902f      	str	r0, [sp, #188]	; 0xbc
   137fa:	982d      	ldr	r0, [sp, #180]	; 0xb4
   137fc:	9041      	str	r0, [sp, #260]	; 0x104
   137fe:	992e      	ldr	r1, [sp, #184]	; 0xb8
   13800:	9142      	str	r1, [sp, #264]	; 0x108
   13802:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   13804:	9243      	str	r2, [sp, #268]	; 0x10c
   13806:	f249 4347 	movw	r3, #37959	; 0x9447
   1380a:	f2c0 0300 	movt	r3, #0
   1380e:	910a      	str	r1, [sp, #40]	; 0x28
   13810:	4619      	mov	r1, r3
   13812:	9209      	str	r2, [sp, #36]	; 0x24
   13814:	f7f5 fe4f 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13818:	9008      	str	r0, [sp, #32]
   1381a:	9107      	str	r1, [sp, #28]
   1381c:	e7ff      	b.n	1381e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   1381e:	f249 4147 	movw	r1, #37959	; 0x9447
   13822:	f2c0 0100 	movt	r1, #0
   13826:	980a      	ldr	r0, [sp, #40]	; 0x28
   13828:	f7f5 fe45 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   1382c:	9006      	str	r0, [sp, #24]
   1382e:	9105      	str	r1, [sp, #20]
   13830:	e7ff      	b.n	13832 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   13832:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   13836:	f2c0 0101 	movt	r1, #1
   1383a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1383c:	f7f5 fe50 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13840:	9004      	str	r0, [sp, #16]
   13842:	9103      	str	r1, [sp, #12]
   13844:	e7ff      	b.n	13846 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   13846:	9808      	ldr	r0, [sp, #32]
   13848:	9027      	str	r0, [sp, #156]	; 0x9c
   1384a:	9907      	ldr	r1, [sp, #28]
   1384c:	9128      	str	r1, [sp, #160]	; 0xa0
   1384e:	9a06      	ldr	r2, [sp, #24]
   13850:	9229      	str	r2, [sp, #164]	; 0xa4
   13852:	9b05      	ldr	r3, [sp, #20]
   13854:	932a      	str	r3, [sp, #168]	; 0xa8
   13856:	f8dd c010 	ldr.w	ip, [sp, #16]
   1385a:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   1385e:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13862:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   13866:	466c      	mov	r4, sp
   13868:	2503      	movs	r5, #3
   1386a:	6025      	str	r5, [r4, #0]
   1386c:	a821      	add	r0, sp, #132	; 0x84
   1386e:	ab27      	add	r3, sp, #156	; 0x9c
   13870:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13872:	462a      	mov	r2, r5
   13874:	f7f5 f996 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13878:	e7ff      	b.n	1387a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   1387a:	f64e 40c4 	movw	r0, #60612	; 0xecc4
   1387e:	f2c0 0001 	movt	r0, #1
   13882:	f001 fe22 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13886:	9002      	str	r0, [sp, #8]
   13888:	e7ff      	b.n	1388a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   1388a:	a821      	add	r0, sp, #132	; 0x84
   1388c:	9902      	ldr	r1, [sp, #8]
   1388e:	f001 fe59 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13892:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   13894:	f64e 4080 	movw	r0, #60544	; 0xec80
   13898:	f2c0 0001 	movt	r0, #1
   1389c:	f64e 4270 	movw	r2, #60528	; 0xec70
   138a0:	f2c0 0201 	movt	r2, #1
   138a4:	2121      	movs	r1, #33	; 0x21
   138a6:	f001 fe17 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   138aa:	defe      	udf	#254	; 0xfe

000138ac <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   138ac:	b5b0      	push	{r4, r5, r7, lr}
   138ae:	b0e8      	sub	sp, #416	; 0x1a0
   138b0:	4613      	mov	r3, r2
   138b2:	9058      	str	r0, [sp, #352]	; 0x160
   138b4:	9159      	str	r1, [sp, #356]	; 0x164
   138b6:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   138ba:	2900      	cmp	r1, #0
   138bc:	9121      	str	r1, [sp, #132]	; 0x84
   138be:	9020      	str	r0, [sp, #128]	; 0x80
   138c0:	931f      	str	r3, [sp, #124]	; 0x7c
   138c2:	d004      	beq.n	138ce <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   138c4:	e7ff      	b.n	138c6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   138c6:	9821      	ldr	r0, [sp, #132]	; 0x84
   138c8:	2801      	cmp	r0, #1
   138ca:	db0d      	blt.n	138e8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   138cc:	e007      	b.n	138de <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   138ce:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   138d0:	9022      	str	r0, [sp, #136]	; 0x88
   138d2:	2001      	movs	r0, #1
   138d4:	9022      	str	r0, [sp, #136]	; 0x88
   138d6:	e7ff      	b.n	138d8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   138d8:	9822      	ldr	r0, [sp, #136]	; 0x88
   138da:	b068      	add	sp, #416	; 0x1a0
   138dc:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   138de:	981f      	ldr	r0, [sp, #124]	; 0x7c
   138e0:	07c1      	lsls	r1, r0, #31
   138e2:	2900      	cmp	r1, #0
   138e4:	d10f      	bne.n	13906 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   138e6:	e00b      	b.n	13900 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   138e8:	f64e 40d4 	movw	r0, #60628	; 0xecd4
   138ec:	f2c0 0001 	movt	r0, #1
   138f0:	f64e 42e0 	movw	r2, #60640	; 0xece0
   138f4:	f2c0 0201 	movt	r2, #1
   138f8:	210b      	movs	r1, #11
   138fa:	f001 fded 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   138fe:	defe      	udf	#254	; 0xfe
   13900:	2001      	movs	r0, #1
        else { 1 }
   13902:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   13904:	e002      	b.n	1390c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   13906:	2000      	movs	r0, #0
   13908:	9023      	str	r0, [sp, #140]	; 0x8c
   1390a:	e7ff      	b.n	1390c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   1390c:	9923      	ldr	r1, [sp, #140]	; 0x8c
   1390e:	2012      	movs	r0, #18
   13910:	f003 fe88 	bl	17624 <hal_gpio_write>
   13914:	e7ff      	b.n	13916 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   13916:	2019      	movs	r0, #25
   13918:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   1391a:	f003 fe83 	bl	17624 <hal_gpio_write>
   1391e:	e7ff      	b.n	13920 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   13920:	9821      	ldr	r0, [sp, #132]	; 0x84
   13922:	2801      	cmp	r0, #1
   13924:	d005      	beq.n	13932 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   13926:	e7ff      	b.n	13928 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   13928:	9820      	ldr	r0, [sp, #128]	; 0x80
   1392a:	9061      	str	r0, [sp, #388]	; 0x184
   1392c:	9961      	ldr	r1, [sp, #388]	; 0x184
   1392e:	911e      	str	r1, [sp, #120]	; 0x78
   13930:	e094      	b.n	13a5c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   13932:	9820      	ldr	r0, [sp, #128]	; 0x80
   13934:	905b      	str	r0, [sp, #364]	; 0x16c
   13936:	995b      	ldr	r1, [sp, #364]	; 0x16c
   13938:	911d      	str	r1, [sp, #116]	; 0x74
   1393a:	e7ff      	b.n	1393c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   1393c:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   1393e:	901c      	str	r0, [sp, #112]	; 0x70
   13940:	991d      	ldr	r1, [sp, #116]	; 0x74
   13942:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   13944:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13946:	f004 fb1b 	bl	17f80 <hal_spi_txrx>
   1394a:	9024      	str	r0, [sp, #144]	; 0x90
   1394c:	e7ff      	b.n	1394e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   1394e:	f64e 10c8 	movw	r0, #59848	; 0xe9c8
   13952:	f2c0 0001 	movt	r0, #1
   13956:	6800      	ldr	r0, [r0, #0]
   13958:	a924      	add	r1, sp, #144	; 0x90
   1395a:	9125      	str	r1, [sp, #148]	; 0x94
   1395c:	9026      	str	r0, [sp, #152]	; 0x98
   1395e:	9825      	ldr	r0, [sp, #148]	; 0x94
   13960:	905c      	str	r0, [sp, #368]	; 0x170
   13962:	9926      	ldr	r1, [sp, #152]	; 0x98
   13964:	915d      	str	r1, [sp, #372]	; 0x174
   13966:	6802      	ldr	r2, [r0, #0]
   13968:	680b      	ldr	r3, [r1, #0]
   1396a:	429a      	cmp	r2, r3
   1396c:	901b      	str	r0, [sp, #108]	; 0x6c
   1396e:	911a      	str	r1, [sp, #104]	; 0x68
   13970:	d101      	bne.n	13976 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   13972:	e7ff      	b.n	13974 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   13974:	e11f      	b.n	13bb6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13976:	f64e 2020 	movw	r0, #59936	; 0xea20
   1397a:	f2c0 0001 	movt	r0, #1
   1397e:	6801      	ldr	r1, [r0, #0]
   13980:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13982:	9036      	str	r0, [sp, #216]	; 0xd8
   13984:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   13986:	9237      	str	r2, [sp, #220]	; 0xdc
   13988:	f64e 43f8 	movw	r3, #60664	; 0xecf8
   1398c:	f2c0 0301 	movt	r3, #1
   13990:	681b      	ldr	r3, [r3, #0]
   13992:	f64e 2c40 	movw	ip, #59968	; 0xea40
   13996:	f2c0 0c01 	movt	ip, #1
   1399a:	f8dc c000 	ldr.w	ip, [ip]
   1399e:	46ee      	mov	lr, sp
   139a0:	2400      	movs	r4, #0
   139a2:	f8ce 4000 	str.w	r4, [lr]
   139a6:	a838      	add	r0, sp, #224	; 0xe0
   139a8:	2201      	movs	r2, #1
   139aa:	9119      	str	r1, [sp, #100]	; 0x64
   139ac:	4619      	mov	r1, r3
   139ae:	4663      	mov	r3, ip
   139b0:	f7f5 f8f8 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   139b4:	e7ff      	b.n	139b6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   139b6:	a836      	add	r0, sp, #216	; 0xd8
   139b8:	9033      	str	r0, [sp, #204]	; 0xcc
   139ba:	a837      	add	r0, sp, #220	; 0xdc
   139bc:	9034      	str	r0, [sp, #208]	; 0xd0
   139be:	a838      	add	r0, sp, #224	; 0xe0
   139c0:	9035      	str	r0, [sp, #212]	; 0xd4
   139c2:	9833      	ldr	r0, [sp, #204]	; 0xcc
   139c4:	905e      	str	r0, [sp, #376]	; 0x178
   139c6:	9934      	ldr	r1, [sp, #208]	; 0xd0
   139c8:	915f      	str	r1, [sp, #380]	; 0x17c
   139ca:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   139cc:	9260      	str	r2, [sp, #384]	; 0x180
   139ce:	f249 33f3 	movw	r3, #37875	; 0x93f3
   139d2:	f2c0 0300 	movt	r3, #0
   139d6:	9118      	str	r1, [sp, #96]	; 0x60
   139d8:	4619      	mov	r1, r3
   139da:	9217      	str	r2, [sp, #92]	; 0x5c
   139dc:	f7f5 fd41 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   139e0:	9016      	str	r0, [sp, #88]	; 0x58
   139e2:	9115      	str	r1, [sp, #84]	; 0x54
   139e4:	e7ff      	b.n	139e6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   139e6:	f249 31f3 	movw	r1, #37875	; 0x93f3
   139ea:	f2c0 0100 	movt	r1, #0
   139ee:	9818      	ldr	r0, [sp, #96]	; 0x60
   139f0:	f7f5 fd37 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   139f4:	9014      	str	r0, [sp, #80]	; 0x50
   139f6:	9113      	str	r1, [sp, #76]	; 0x4c
   139f8:	e7ff      	b.n	139fa <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   139fa:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   139fe:	f2c0 0101 	movt	r1, #1
   13a02:	9817      	ldr	r0, [sp, #92]	; 0x5c
   13a04:	f7f5 fd6c 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13a08:	9012      	str	r0, [sp, #72]	; 0x48
   13a0a:	9111      	str	r1, [sp, #68]	; 0x44
   13a0c:	e7ff      	b.n	13a0e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   13a0e:	9816      	ldr	r0, [sp, #88]	; 0x58
   13a10:	902d      	str	r0, [sp, #180]	; 0xb4
   13a12:	9915      	ldr	r1, [sp, #84]	; 0x54
   13a14:	912e      	str	r1, [sp, #184]	; 0xb8
   13a16:	9a14      	ldr	r2, [sp, #80]	; 0x50
   13a18:	922f      	str	r2, [sp, #188]	; 0xbc
   13a1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   13a1c:	9330      	str	r3, [sp, #192]	; 0xc0
   13a1e:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   13a22:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   13a26:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   13a2a:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   13a2e:	466c      	mov	r4, sp
   13a30:	2503      	movs	r5, #3
   13a32:	6025      	str	r5, [r4, #0]
   13a34:	a827      	add	r0, sp, #156	; 0x9c
   13a36:	ab2d      	add	r3, sp, #180	; 0xb4
   13a38:	9919      	ldr	r1, [sp, #100]	; 0x64
   13a3a:	462a      	mov	r2, r5
   13a3c:	f7f5 f8b2 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13a40:	e7ff      	b.n	13a42 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   13a42:	f64e 40fc 	movw	r0, #60668	; 0xecfc
   13a46:	f2c0 0001 	movt	r0, #1
   13a4a:	f001 fd3e 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13a4e:	9010      	str	r0, [sp, #64]	; 0x40
   13a50:	e7ff      	b.n	13a52 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   13a52:	a827      	add	r0, sp, #156	; 0x9c
   13a54:	9910      	ldr	r1, [sp, #64]	; 0x40
   13a56:	f001 fd75 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13a5a:	defe      	udf	#254	; 0xfe
   13a5c:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   13a5e:	900f      	str	r0, [sp, #60]	; 0x3c
   13a60:	991e      	ldr	r1, [sp, #120]	; 0x78
   13a62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   13a64:	9b21      	ldr	r3, [sp, #132]	; 0x84
   13a66:	f004 fae1 	bl	1802c <hal_spi_txrx_noblock>
   13a6a:	903e      	str	r0, [sp, #248]	; 0xf8
   13a6c:	e7ff      	b.n	13a6e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13a6e:	f64e 10c8 	movw	r0, #59848	; 0xe9c8
   13a72:	f2c0 0001 	movt	r0, #1
   13a76:	6800      	ldr	r0, [r0, #0]
   13a78:	a93e      	add	r1, sp, #248	; 0xf8
   13a7a:	913f      	str	r1, [sp, #252]	; 0xfc
   13a7c:	9040      	str	r0, [sp, #256]	; 0x100
   13a7e:	983f      	ldr	r0, [sp, #252]	; 0xfc
   13a80:	9062      	str	r0, [sp, #392]	; 0x188
   13a82:	9940      	ldr	r1, [sp, #256]	; 0x100
   13a84:	9163      	str	r1, [sp, #396]	; 0x18c
   13a86:	6802      	ldr	r2, [r0, #0]
   13a88:	680b      	ldr	r3, [r1, #0]
   13a8a:	429a      	cmp	r2, r3
   13a8c:	900e      	str	r0, [sp, #56]	; 0x38
   13a8e:	910d      	str	r1, [sp, #52]	; 0x34
   13a90:	d10c      	bne.n	13aac <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   13a92:	e7ff      	b.n	13a94 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   13a94:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   13a98:	9067      	str	r0, [sp, #412]	; 0x19c
   13a9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13a9e:	fba0 0101 	umull	r0, r1, r0, r1
   13aa2:	2900      	cmp	r1, #0
   13aa4:	900c      	str	r0, [sp, #48]	; 0x30
   13aa6:	f040 8090 	bne.w	13bca <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   13aaa:	e072      	b.n	13b92 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13aac:	f64e 2020 	movw	r0, #59936	; 0xea20
   13ab0:	f2c0 0001 	movt	r0, #1
   13ab4:	6801      	ldr	r1, [r0, #0]
   13ab6:	980e      	ldr	r0, [sp, #56]	; 0x38
   13ab8:	9050      	str	r0, [sp, #320]	; 0x140
   13aba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13abc:	9251      	str	r2, [sp, #324]	; 0x144
   13abe:	f64e 43f8 	movw	r3, #60664	; 0xecf8
   13ac2:	f2c0 0301 	movt	r3, #1
   13ac6:	681b      	ldr	r3, [r3, #0]
   13ac8:	f64e 2c40 	movw	ip, #59968	; 0xea40
   13acc:	f2c0 0c01 	movt	ip, #1
   13ad0:	f8dc c000 	ldr.w	ip, [ip]
   13ad4:	46ee      	mov	lr, sp
   13ad6:	2400      	movs	r4, #0
   13ad8:	f8ce 4000 	str.w	r4, [lr]
   13adc:	a852      	add	r0, sp, #328	; 0x148
   13ade:	2201      	movs	r2, #1
   13ae0:	910b      	str	r1, [sp, #44]	; 0x2c
   13ae2:	4619      	mov	r1, r3
   13ae4:	4663      	mov	r3, ip
   13ae6:	f7f5 f85d 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13aea:	e7ff      	b.n	13aec <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   13aec:	a850      	add	r0, sp, #320	; 0x140
   13aee:	904d      	str	r0, [sp, #308]	; 0x134
   13af0:	a851      	add	r0, sp, #324	; 0x144
   13af2:	904e      	str	r0, [sp, #312]	; 0x138
   13af4:	a852      	add	r0, sp, #328	; 0x148
   13af6:	904f      	str	r0, [sp, #316]	; 0x13c
   13af8:	984d      	ldr	r0, [sp, #308]	; 0x134
   13afa:	9064      	str	r0, [sp, #400]	; 0x190
   13afc:	994e      	ldr	r1, [sp, #312]	; 0x138
   13afe:	9165      	str	r1, [sp, #404]	; 0x194
   13b00:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   13b02:	9266      	str	r2, [sp, #408]	; 0x198
   13b04:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13b08:	f2c0 0300 	movt	r3, #0
   13b0c:	910a      	str	r1, [sp, #40]	; 0x28
   13b0e:	4619      	mov	r1, r3
   13b10:	9209      	str	r2, [sp, #36]	; 0x24
   13b12:	f7f5 fca6 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b16:	9008      	str	r0, [sp, #32]
   13b18:	9107      	str	r1, [sp, #28]
   13b1a:	e7ff      	b.n	13b1c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   13b1c:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13b20:	f2c0 0100 	movt	r1, #0
   13b24:	980a      	ldr	r0, [sp, #40]	; 0x28
   13b26:	f7f5 fc9c 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b2a:	9006      	str	r0, [sp, #24]
   13b2c:	9105      	str	r1, [sp, #20]
   13b2e:	e7ff      	b.n	13b30 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   13b30:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   13b34:	f2c0 0101 	movt	r1, #1
   13b38:	9809      	ldr	r0, [sp, #36]	; 0x24
   13b3a:	f7f5 fcd1 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13b3e:	9004      	str	r0, [sp, #16]
   13b40:	9103      	str	r1, [sp, #12]
   13b42:	e7ff      	b.n	13b44 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   13b44:	9808      	ldr	r0, [sp, #32]
   13b46:	9047      	str	r0, [sp, #284]	; 0x11c
   13b48:	9907      	ldr	r1, [sp, #28]
   13b4a:	9148      	str	r1, [sp, #288]	; 0x120
   13b4c:	9a06      	ldr	r2, [sp, #24]
   13b4e:	9249      	str	r2, [sp, #292]	; 0x124
   13b50:	9b05      	ldr	r3, [sp, #20]
   13b52:	934a      	str	r3, [sp, #296]	; 0x128
   13b54:	f8dd c010 	ldr.w	ip, [sp, #16]
   13b58:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   13b5c:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13b60:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   13b64:	466c      	mov	r4, sp
   13b66:	2503      	movs	r5, #3
   13b68:	6025      	str	r5, [r4, #0]
   13b6a:	a841      	add	r0, sp, #260	; 0x104
   13b6c:	ab47      	add	r3, sp, #284	; 0x11c
   13b6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13b70:	462a      	mov	r2, r5
   13b72:	f7f5 f817 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b76:	e7ff      	b.n	13b78 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   13b78:	f64e 500c 	movw	r0, #60684	; 0xed0c
   13b7c:	f2c0 0001 	movt	r0, #1
   13b80:	f001 fca3 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13b84:	9002      	str	r0, [sp, #8]
   13b86:	e7ff      	b.n	13b88 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   13b88:	a841      	add	r0, sp, #260	; 0x104
   13b8a:	9902      	ldr	r1, [sp, #8]
   13b8c:	f001 fcda 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13b90:	defe      	udf	#254	; 0xfe
   13b92:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13b96:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13b9a:	990c      	ldr	r1, [sp, #48]	; 0x30
   13b9c:	fba1 0200 	umull	r0, r2, r1, r0
   13ba0:	0991      	lsrs	r1, r2, #6
   13ba2:	f646 227c 	movw	r2, #27260	; 0x6a7c
   13ba6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13baa:	9001      	str	r0, [sp, #4]
   13bac:	4610      	mov	r0, r2
   13bae:	f005 fc09 	bl	193c4 <os_sem_pend>
   13bb2:	e7ff      	b.n	13bb4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   13bb4:	e7ff      	b.n	13bb6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   13bb6:	2019      	movs	r0, #25
   13bb8:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   13bba:	f003 fd33 	bl	17624 <hal_gpio_write>
   13bbe:	e7ff      	b.n	13bc0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   13bc0:	2000      	movs	r0, #0
    Ok(())
   13bc2:	9022      	str	r0, [sp, #136]	; 0x88
   13bc4:	2001      	movs	r0, #1
   13bc6:	9022      	str	r0, [sp, #136]	; 0x88
}
   13bc8:	e686      	b.n	138d8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13bca:	f64e 4020 	movw	r0, #60448	; 0xec20
   13bce:	f2c0 0001 	movt	r0, #1
   13bd2:	f64e 521c 	movw	r2, #60700	; 0xed1c
   13bd6:	f2c0 0201 	movt	r2, #1
   13bda:	2121      	movs	r1, #33	; 0x21
   13bdc:	f001 fc7c 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13be0:	defe      	udf	#254	; 0xfe

00013be2 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   13be2:	b5b0      	push	{r4, r5, r7, lr}
   13be4:	b0ae      	sub	sp, #184	; 0xb8
   13be6:	9027      	str	r0, [sp, #156]	; 0x9c
   13be8:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   13bea:	f646 207c 	movw	r0, #27260	; 0x6a7c
   13bee:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13bf2:	f005 fbb5 	bl	19360 <os_sem_release>
   13bf6:	900d      	str	r0, [sp, #52]	; 0x34
   13bf8:	e7ff      	b.n	13bfa <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   13bfa:	f64e 10c8 	movw	r0, #59848	; 0xe9c8
   13bfe:	f2c0 0001 	movt	r0, #1
   13c02:	6800      	ldr	r0, [r0, #0]
   13c04:	a90d      	add	r1, sp, #52	; 0x34
   13c06:	910e      	str	r1, [sp, #56]	; 0x38
   13c08:	900f      	str	r0, [sp, #60]	; 0x3c
   13c0a:	980e      	ldr	r0, [sp, #56]	; 0x38
   13c0c:	9029      	str	r0, [sp, #164]	; 0xa4
   13c0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13c10:	912a      	str	r1, [sp, #168]	; 0xa8
   13c12:	6802      	ldr	r2, [r0, #0]
   13c14:	680b      	ldr	r3, [r1, #0]
   13c16:	429a      	cmp	r2, r3
   13c18:	900c      	str	r0, [sp, #48]	; 0x30
   13c1a:	910b      	str	r1, [sp, #44]	; 0x2c
   13c1c:	d102      	bne.n	13c24 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   13c1e:	e7ff      	b.n	13c20 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   13c20:	b02e      	add	sp, #184	; 0xb8
   13c22:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   13c24:	f64e 2020 	movw	r0, #59936	; 0xea20
   13c28:	f2c0 0001 	movt	r0, #1
   13c2c:	6801      	ldr	r1, [r0, #0]
   13c2e:	980c      	ldr	r0, [sp, #48]	; 0x30
   13c30:	901f      	str	r0, [sp, #124]	; 0x7c
   13c32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13c34:	9220      	str	r2, [sp, #128]	; 0x80
   13c36:	f64e 3338 	movw	r3, #60216	; 0xeb38
   13c3a:	f2c0 0301 	movt	r3, #1
   13c3e:	681b      	ldr	r3, [r3, #0]
   13c40:	f64e 2c40 	movw	ip, #59968	; 0xea40
   13c44:	f2c0 0c01 	movt	ip, #1
   13c48:	f8dc c000 	ldr.w	ip, [ip]
   13c4c:	46ee      	mov	lr, sp
   13c4e:	2400      	movs	r4, #0
   13c50:	f8ce 4000 	str.w	r4, [lr]
   13c54:	a821      	add	r0, sp, #132	; 0x84
   13c56:	2201      	movs	r2, #1
   13c58:	910a      	str	r1, [sp, #40]	; 0x28
   13c5a:	4619      	mov	r1, r3
   13c5c:	4663      	mov	r3, ip
   13c5e:	f7f4 ffa1 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c62:	e7ff      	b.n	13c64 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   13c64:	a81f      	add	r0, sp, #124	; 0x7c
   13c66:	901c      	str	r0, [sp, #112]	; 0x70
   13c68:	a820      	add	r0, sp, #128	; 0x80
   13c6a:	901d      	str	r0, [sp, #116]	; 0x74
   13c6c:	a821      	add	r0, sp, #132	; 0x84
   13c6e:	901e      	str	r0, [sp, #120]	; 0x78
   13c70:	981c      	ldr	r0, [sp, #112]	; 0x70
   13c72:	902b      	str	r0, [sp, #172]	; 0xac
   13c74:	991d      	ldr	r1, [sp, #116]	; 0x74
   13c76:	912c      	str	r1, [sp, #176]	; 0xb0
   13c78:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13c7a:	922d      	str	r2, [sp, #180]	; 0xb4
   13c7c:	f249 4347 	movw	r3, #37959	; 0x9447
   13c80:	f2c0 0300 	movt	r3, #0
   13c84:	9109      	str	r1, [sp, #36]	; 0x24
   13c86:	4619      	mov	r1, r3
   13c88:	9208      	str	r2, [sp, #32]
   13c8a:	f7f5 fc14 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13c8e:	9007      	str	r0, [sp, #28]
   13c90:	9106      	str	r1, [sp, #24]
   13c92:	e7ff      	b.n	13c94 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   13c94:	f249 4147 	movw	r1, #37959	; 0x9447
   13c98:	f2c0 0100 	movt	r1, #0
   13c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
   13c9e:	f7f5 fc0a 	bl	94b6 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13ca2:	9005      	str	r0, [sp, #20]
   13ca4:	9104      	str	r1, [sp, #16]
   13ca6:	e7ff      	b.n	13ca8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   13ca8:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   13cac:	f2c0 0101 	movt	r1, #1
   13cb0:	9808      	ldr	r0, [sp, #32]
   13cb2:	f7f5 fc15 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13cb6:	9003      	str	r0, [sp, #12]
   13cb8:	9102      	str	r1, [sp, #8]
   13cba:	e7ff      	b.n	13cbc <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   13cbc:	9807      	ldr	r0, [sp, #28]
   13cbe:	9016      	str	r0, [sp, #88]	; 0x58
   13cc0:	9906      	ldr	r1, [sp, #24]
   13cc2:	9117      	str	r1, [sp, #92]	; 0x5c
   13cc4:	9a05      	ldr	r2, [sp, #20]
   13cc6:	9218      	str	r2, [sp, #96]	; 0x60
   13cc8:	9b04      	ldr	r3, [sp, #16]
   13cca:	9319      	str	r3, [sp, #100]	; 0x64
   13ccc:	f8dd c00c 	ldr.w	ip, [sp, #12]
   13cd0:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   13cd4:	f8dd e008 	ldr.w	lr, [sp, #8]
   13cd8:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   13cdc:	466c      	mov	r4, sp
   13cde:	2503      	movs	r5, #3
   13ce0:	6025      	str	r5, [r4, #0]
   13ce2:	a810      	add	r0, sp, #64	; 0x40
   13ce4:	ab16      	add	r3, sp, #88	; 0x58
   13ce6:	990a      	ldr	r1, [sp, #40]	; 0x28
   13ce8:	462a      	mov	r2, r5
   13cea:	f7f4 ff5b 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13cee:	e7ff      	b.n	13cf0 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   13cf0:	f64e 502c 	movw	r0, #60716	; 0xed2c
   13cf4:	f2c0 0001 	movt	r0, #1
   13cf8:	f001 fbe7 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13cfc:	9001      	str	r0, [sp, #4]
   13cfe:	e7ff      	b.n	13d00 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   13d00:	a810      	add	r0, sp, #64	; 0x40
   13d02:	9901      	ldr	r1, [sp, #4]
   13d04:	f001 fc1e 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13d08:	defe      	udf	#254	; 0xfe

00013d0a <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   13d0a:	b580      	push	{r7, lr}
   13d0c:	b084      	sub	sp, #16
   13d0e:	4601      	mov	r1, r0
   13d10:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13d14:	b2c0      	uxtb	r0, r0
   13d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13d1a:	fba0 0202 	umull	r0, r2, r0, r2
   13d1e:	2a00      	cmp	r2, #0
   13d20:	9001      	str	r0, [sp, #4]
   13d22:	d110      	bne.n	13d46 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   13d24:	e7ff      	b.n	13d26 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   13d26:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13d2a:	f2c1 0062 	movt	r0, #4194	; 0x1062
   13d2e:	9901      	ldr	r1, [sp, #4]
   13d30:	fba1 0200 	umull	r0, r2, r1, r0
   13d34:	0992      	lsrs	r2, r2, #6
   13d36:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   13d38:	9000      	str	r0, [sp, #0]
   13d3a:	4610      	mov	r0, r2
   13d3c:	f005 fc90 	bl	19660 <os_time_delay>
   13d40:	e7ff      	b.n	13d42 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   13d42:	b004      	add	sp, #16
   13d44:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13d46:	f64e 4020 	movw	r0, #60448	; 0xec20
   13d4a:	f2c0 0001 	movt	r0, #1
   13d4e:	f64e 523c 	movw	r2, #60732	; 0xed3c
   13d52:	f2c0 0201 	movt	r2, #1
   13d56:	2121      	movs	r1, #33	; 0x21
   13d58:	f001 fbbe 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13d5c:	defe      	udf	#254	; 0xfe

00013d5e <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
   13d5e:	b082      	sub	sp, #8
   13d60:	2000      	movs	r0, #0
        SPI {
   13d62:	9000      	str	r0, [sp, #0]
   13d64:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
   13d66:	9800      	ldr	r0, [sp, #0]
   13d68:	9901      	ldr	r1, [sp, #4]
   13d6a:	b002      	add	sp, #8
   13d6c:	4770      	bx	lr

00013d6e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
   13d6e:	b5b0      	push	{r4, r5, r7, lr}
   13d70:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
   13d74:	9077      	str	r0, [sp, #476]	; 0x1dc
   13d76:	9178      	str	r1, [sp, #480]	; 0x1e0
   13d78:	9279      	str	r2, [sp, #484]	; 0x1e4
   13d7a:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
   13d7c:	9028      	str	r0, [sp, #160]	; 0xa0
   13d7e:	4608      	mov	r0, r1
   13d80:	9127      	str	r1, [sp, #156]	; 0x9c
   13d82:	4619      	mov	r1, r3
   13d84:	9226      	str	r2, [sp, #152]	; 0x98
   13d86:	f004 f83f 	bl	17e08 <hal_spi_config>
   13d8a:	9029      	str	r0, [sp, #164]	; 0xa4
   13d8c:	e7ff      	b.n	13d8e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
   13d8e:	f64e 504c 	movw	r0, #60748	; 0xed4c
   13d92:	f2c0 0001 	movt	r0, #1
   13d96:	6800      	ldr	r0, [r0, #0]
   13d98:	a929      	add	r1, sp, #164	; 0xa4
   13d9a:	912a      	str	r1, [sp, #168]	; 0xa8
   13d9c:	902b      	str	r0, [sp, #172]	; 0xac
   13d9e:	982a      	ldr	r0, [sp, #168]	; 0xa8
   13da0:	907b      	str	r0, [sp, #492]	; 0x1ec
   13da2:	992b      	ldr	r1, [sp, #172]	; 0xac
   13da4:	917c      	str	r1, [sp, #496]	; 0x1f0
   13da6:	6802      	ldr	r2, [r0, #0]
   13da8:	680b      	ldr	r3, [r1, #0]
   13daa:	429a      	cmp	r2, r3
   13dac:	9025      	str	r0, [sp, #148]	; 0x94
   13dae:	9124      	str	r1, [sp, #144]	; 0x90
   13db0:	d105      	bne.n	13dbe <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
   13db2:	e7ff      	b.n	13db4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
   13db4:	9827      	ldr	r0, [sp, #156]	; 0x9c
   13db6:	f004 f843 	bl	17e40 <hal_spi_enable>
   13dba:	9043      	str	r0, [sp, #268]	; 0x10c
   13dbc:	e072      	b.n	13ea4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
   13dbe:	f64e 50a4 	movw	r0, #60836	; 0xeda4
   13dc2:	f2c0 0001 	movt	r0, #1
   13dc6:	6801      	ldr	r1, [r0, #0]
   13dc8:	9825      	ldr	r0, [sp, #148]	; 0x94
   13dca:	903b      	str	r0, [sp, #236]	; 0xec
   13dcc:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13dce:	923c      	str	r2, [sp, #240]	; 0xf0
   13dd0:	f64e 53c0 	movw	r3, #60864	; 0xedc0
   13dd4:	f2c0 0301 	movt	r3, #1
   13dd8:	681b      	ldr	r3, [r3, #0]
   13dda:	f64e 5cc4 	movw	ip, #60868	; 0xedc4
   13dde:	f2c0 0c01 	movt	ip, #1
   13de2:	f8dc c000 	ldr.w	ip, [ip]
   13de6:	46ee      	mov	lr, sp
   13de8:	2400      	movs	r4, #0
   13dea:	f8ce 4000 	str.w	r4, [lr]
   13dee:	a83d      	add	r0, sp, #244	; 0xf4
   13df0:	2201      	movs	r2, #1
   13df2:	9123      	str	r1, [sp, #140]	; 0x8c
   13df4:	4619      	mov	r1, r3
   13df6:	4663      	mov	r3, ip
   13df8:	f7f4 fed4 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13dfc:	e7ff      	b.n	13dfe <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
   13dfe:	a83b      	add	r0, sp, #236	; 0xec
   13e00:	9038      	str	r0, [sp, #224]	; 0xe0
   13e02:	a83c      	add	r0, sp, #240	; 0xf0
   13e04:	9039      	str	r0, [sp, #228]	; 0xe4
   13e06:	a83d      	add	r0, sp, #244	; 0xf4
   13e08:	903a      	str	r0, [sp, #232]	; 0xe8
   13e0a:	9838      	ldr	r0, [sp, #224]	; 0xe0
   13e0c:	907d      	str	r0, [sp, #500]	; 0x1f4
   13e0e:	9939      	ldr	r1, [sp, #228]	; 0xe4
   13e10:	917e      	str	r1, [sp, #504]	; 0x1f8
   13e12:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   13e14:	927f      	str	r2, [sp, #508]	; 0x1fc
   13e16:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13e1a:	f2c0 0300 	movt	r3, #0
   13e1e:	9122      	str	r1, [sp, #136]	; 0x88
   13e20:	4619      	mov	r1, r3
   13e22:	9221      	str	r2, [sp, #132]	; 0x84
   13e24:	f7f5 fb1d 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13e28:	9020      	str	r0, [sp, #128]	; 0x80
   13e2a:	911f      	str	r1, [sp, #124]	; 0x7c
   13e2c:	e7ff      	b.n	13e2e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
   13e2e:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13e32:	f2c0 0100 	movt	r1, #0
   13e36:	9822      	ldr	r0, [sp, #136]	; 0x88
   13e38:	f7f5 fb13 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13e3c:	901e      	str	r0, [sp, #120]	; 0x78
   13e3e:	911d      	str	r1, [sp, #116]	; 0x74
   13e40:	e7ff      	b.n	13e42 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
   13e42:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   13e46:	f2c0 0101 	movt	r1, #1
   13e4a:	9821      	ldr	r0, [sp, #132]	; 0x84
   13e4c:	f7f5 fb48 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13e50:	901c      	str	r0, [sp, #112]	; 0x70
   13e52:	911b      	str	r1, [sp, #108]	; 0x6c
   13e54:	e7ff      	b.n	13e56 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
   13e56:	9820      	ldr	r0, [sp, #128]	; 0x80
   13e58:	9032      	str	r0, [sp, #200]	; 0xc8
   13e5a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   13e5c:	9133      	str	r1, [sp, #204]	; 0xcc
   13e5e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13e60:	9234      	str	r2, [sp, #208]	; 0xd0
   13e62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13e64:	9335      	str	r3, [sp, #212]	; 0xd4
   13e66:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
   13e6a:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
   13e6e:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
   13e72:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
   13e76:	466c      	mov	r4, sp
   13e78:	2503      	movs	r5, #3
   13e7a:	6025      	str	r5, [r4, #0]
   13e7c:	a82c      	add	r0, sp, #176	; 0xb0
   13e7e:	ab32      	add	r3, sp, #200	; 0xc8
   13e80:	9923      	ldr	r1, [sp, #140]	; 0x8c
   13e82:	462a      	mov	r2, r5
   13e84:	f7f4 fe8e 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13e88:	e7ff      	b.n	13e8a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
   13e8a:	f64e 50e0 	movw	r0, #60896	; 0xede0
   13e8e:	f2c0 0001 	movt	r0, #1
   13e92:	f001 fb1a 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13e96:	901a      	str	r0, [sp, #104]	; 0x68
   13e98:	e7ff      	b.n	13e9a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
   13e9a:	a82c      	add	r0, sp, #176	; 0xb0
   13e9c:	991a      	ldr	r1, [sp, #104]	; 0x68
   13e9e:	f001 fb51 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13ea2:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
   13ea4:	f64e 504c 	movw	r0, #60748	; 0xed4c
   13ea8:	f2c0 0001 	movt	r0, #1
   13eac:	6800      	ldr	r0, [r0, #0]
   13eae:	a943      	add	r1, sp, #268	; 0x10c
   13eb0:	9144      	str	r1, [sp, #272]	; 0x110
   13eb2:	9045      	str	r0, [sp, #276]	; 0x114
   13eb4:	9844      	ldr	r0, [sp, #272]	; 0x110
   13eb6:	9080      	str	r0, [sp, #512]	; 0x200
   13eb8:	9945      	ldr	r1, [sp, #276]	; 0x114
   13eba:	9181      	str	r1, [sp, #516]	; 0x204
   13ebc:	6802      	ldr	r2, [r0, #0]
   13ebe:	680b      	ldr	r3, [r1, #0]
   13ec0:	429a      	cmp	r2, r3
   13ec2:	9019      	str	r0, [sp, #100]	; 0x64
   13ec4:	9118      	str	r1, [sp, #96]	; 0x60
   13ec6:	d106      	bne.n	13ed6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
   13ec8:	e7ff      	b.n	13eca <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
   13eca:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
   13ecc:	9826      	ldr	r0, [sp, #152]	; 0x98
   13ece:	f003 fb8d 	bl	175ec <hal_gpio_init_out>
   13ed2:	905d      	str	r0, [sp, #372]	; 0x174
   13ed4:	e072      	b.n	13fbc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
   13ed6:	f64e 50a4 	movw	r0, #60836	; 0xeda4
   13eda:	f2c0 0001 	movt	r0, #1
   13ede:	6801      	ldr	r1, [r0, #0]
   13ee0:	9819      	ldr	r0, [sp, #100]	; 0x64
   13ee2:	9055      	str	r0, [sp, #340]	; 0x154
   13ee4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13ee6:	9256      	str	r2, [sp, #344]	; 0x158
   13ee8:	f64e 6308 	movw	r3, #60936	; 0xee08
   13eec:	f2c0 0301 	movt	r3, #1
   13ef0:	681b      	ldr	r3, [r3, #0]
   13ef2:	f64e 5cc4 	movw	ip, #60868	; 0xedc4
   13ef6:	f2c0 0c01 	movt	ip, #1
   13efa:	f8dc c000 	ldr.w	ip, [ip]
   13efe:	46ee      	mov	lr, sp
   13f00:	2400      	movs	r4, #0
   13f02:	f8ce 4000 	str.w	r4, [lr]
   13f06:	a857      	add	r0, sp, #348	; 0x15c
   13f08:	2201      	movs	r2, #1
   13f0a:	9117      	str	r1, [sp, #92]	; 0x5c
   13f0c:	4619      	mov	r1, r3
   13f0e:	4663      	mov	r3, ip
   13f10:	f7f4 fe48 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13f14:	e7ff      	b.n	13f16 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
   13f16:	a855      	add	r0, sp, #340	; 0x154
   13f18:	9052      	str	r0, [sp, #328]	; 0x148
   13f1a:	a856      	add	r0, sp, #344	; 0x158
   13f1c:	9053      	str	r0, [sp, #332]	; 0x14c
   13f1e:	a857      	add	r0, sp, #348	; 0x15c
   13f20:	9054      	str	r0, [sp, #336]	; 0x150
   13f22:	9852      	ldr	r0, [sp, #328]	; 0x148
   13f24:	9082      	str	r0, [sp, #520]	; 0x208
   13f26:	9953      	ldr	r1, [sp, #332]	; 0x14c
   13f28:	9183      	str	r1, [sp, #524]	; 0x20c
   13f2a:	9a54      	ldr	r2, [sp, #336]	; 0x150
   13f2c:	9284      	str	r2, [sp, #528]	; 0x210
   13f2e:	f249 33f3 	movw	r3, #37875	; 0x93f3
   13f32:	f2c0 0300 	movt	r3, #0
   13f36:	9116      	str	r1, [sp, #88]	; 0x58
   13f38:	4619      	mov	r1, r3
   13f3a:	9215      	str	r2, [sp, #84]	; 0x54
   13f3c:	f7f5 fa91 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13f40:	9014      	str	r0, [sp, #80]	; 0x50
   13f42:	9113      	str	r1, [sp, #76]	; 0x4c
   13f44:	e7ff      	b.n	13f46 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
   13f46:	f249 31f3 	movw	r1, #37875	; 0x93f3
   13f4a:	f2c0 0100 	movt	r1, #0
   13f4e:	9816      	ldr	r0, [sp, #88]	; 0x58
   13f50:	f7f5 fa87 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13f54:	9012      	str	r0, [sp, #72]	; 0x48
   13f56:	9111      	str	r1, [sp, #68]	; 0x44
   13f58:	e7ff      	b.n	13f5a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
   13f5a:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   13f5e:	f2c0 0101 	movt	r1, #1
   13f62:	9815      	ldr	r0, [sp, #84]	; 0x54
   13f64:	f7f5 fabc 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13f68:	9010      	str	r0, [sp, #64]	; 0x40
   13f6a:	910f      	str	r1, [sp, #60]	; 0x3c
   13f6c:	e7ff      	b.n	13f6e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
   13f6e:	9814      	ldr	r0, [sp, #80]	; 0x50
   13f70:	904c      	str	r0, [sp, #304]	; 0x130
   13f72:	9913      	ldr	r1, [sp, #76]	; 0x4c
   13f74:	914d      	str	r1, [sp, #308]	; 0x134
   13f76:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13f78:	924e      	str	r2, [sp, #312]	; 0x138
   13f7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13f7c:	934f      	str	r3, [sp, #316]	; 0x13c
   13f7e:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   13f82:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
   13f86:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   13f8a:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
   13f8e:	466c      	mov	r4, sp
   13f90:	2503      	movs	r5, #3
   13f92:	6025      	str	r5, [r4, #0]
   13f94:	a846      	add	r0, sp, #280	; 0x118
   13f96:	ab4c      	add	r3, sp, #304	; 0x130
   13f98:	9917      	ldr	r1, [sp, #92]	; 0x5c
   13f9a:	462a      	mov	r2, r5
   13f9c:	f7f4 fe02 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13fa0:	e7ff      	b.n	13fa2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
   13fa2:	f64e 600c 	movw	r0, #60940	; 0xee0c
   13fa6:	f2c0 0001 	movt	r0, #1
   13faa:	f001 fa8e 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13fae:	900e      	str	r0, [sp, #56]	; 0x38
   13fb0:	e7ff      	b.n	13fb2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
   13fb2:	a846      	add	r0, sp, #280	; 0x118
   13fb4:	990e      	ldr	r1, [sp, #56]	; 0x38
   13fb6:	f001 fac5 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13fba:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
   13fbc:	f64e 504c 	movw	r0, #60748	; 0xed4c
   13fc0:	f2c0 0001 	movt	r0, #1
   13fc4:	6800      	ldr	r0, [r0, #0]
   13fc6:	a95d      	add	r1, sp, #372	; 0x174
   13fc8:	915e      	str	r1, [sp, #376]	; 0x178
   13fca:	905f      	str	r0, [sp, #380]	; 0x17c
   13fcc:	985e      	ldr	r0, [sp, #376]	; 0x178
   13fce:	9085      	str	r0, [sp, #532]	; 0x214
   13fd0:	995f      	ldr	r1, [sp, #380]	; 0x17c
   13fd2:	9186      	str	r1, [sp, #536]	; 0x218
   13fd4:	6802      	ldr	r2, [r0, #0]
   13fd6:	680b      	ldr	r3, [r1, #0]
   13fd8:	429a      	cmp	r2, r3
   13fda:	900d      	str	r0, [sp, #52]	; 0x34
   13fdc:	910c      	str	r1, [sp, #48]	; 0x30
   13fde:	d109      	bne.n	13ff4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
   13fe0:	e7ff      	b.n	13fe2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
   13fe2:	9827      	ldr	r0, [sp, #156]	; 0x9c
   13fe4:	9928      	ldr	r1, [sp, #160]	; 0xa0
   13fe6:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
   13fe8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13fea:	604a      	str	r2, [r1, #4]
   13fec:	2001      	movs	r0, #1
        Ok(())
    }
   13fee:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
   13ff2:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
   13ff4:	f64e 50a4 	movw	r0, #60836	; 0xeda4
   13ff8:	f2c0 0001 	movt	r0, #1
   13ffc:	6801      	ldr	r1, [r0, #0]
   13ffe:	980d      	ldr	r0, [sp, #52]	; 0x34
   14000:	906f      	str	r0, [sp, #444]	; 0x1bc
   14002:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14004:	9270      	str	r2, [sp, #448]	; 0x1c0
   14006:	f64e 6334 	movw	r3, #60980	; 0xee34
   1400a:	f2c0 0301 	movt	r3, #1
   1400e:	681b      	ldr	r3, [r3, #0]
   14010:	f64e 5cc4 	movw	ip, #60868	; 0xedc4
   14014:	f2c0 0c01 	movt	ip, #1
   14018:	f8dc c000 	ldr.w	ip, [ip]
   1401c:	46ee      	mov	lr, sp
   1401e:	2400      	movs	r4, #0
   14020:	f8ce 4000 	str.w	r4, [lr]
   14024:	a871      	add	r0, sp, #452	; 0x1c4
   14026:	2201      	movs	r2, #1
   14028:	910b      	str	r1, [sp, #44]	; 0x2c
   1402a:	4619      	mov	r1, r3
   1402c:	4663      	mov	r3, ip
   1402e:	f7f4 fdb9 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14032:	e7ff      	b.n	14034 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
   14034:	a86f      	add	r0, sp, #444	; 0x1bc
   14036:	906c      	str	r0, [sp, #432]	; 0x1b0
   14038:	a870      	add	r0, sp, #448	; 0x1c0
   1403a:	906d      	str	r0, [sp, #436]	; 0x1b4
   1403c:	a871      	add	r0, sp, #452	; 0x1c4
   1403e:	906e      	str	r0, [sp, #440]	; 0x1b8
   14040:	986c      	ldr	r0, [sp, #432]	; 0x1b0
   14042:	9087      	str	r0, [sp, #540]	; 0x21c
   14044:	996d      	ldr	r1, [sp, #436]	; 0x1b4
   14046:	9188      	str	r1, [sp, #544]	; 0x220
   14048:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   1404a:	9289      	str	r2, [sp, #548]	; 0x224
   1404c:	f249 33f3 	movw	r3, #37875	; 0x93f3
   14050:	f2c0 0300 	movt	r3, #0
   14054:	910a      	str	r1, [sp, #40]	; 0x28
   14056:	4619      	mov	r1, r3
   14058:	9209      	str	r2, [sp, #36]	; 0x24
   1405a:	f7f5 fa02 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1405e:	9008      	str	r0, [sp, #32]
   14060:	9107      	str	r1, [sp, #28]
   14062:	e7ff      	b.n	14064 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
   14064:	f249 31f3 	movw	r1, #37875	; 0x93f3
   14068:	f2c0 0100 	movt	r1, #0
   1406c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1406e:	f7f5 f9f8 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14072:	9006      	str	r0, [sp, #24]
   14074:	9105      	str	r1, [sp, #20]
   14076:	e7ff      	b.n	14078 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
   14078:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   1407c:	f2c0 0101 	movt	r1, #1
   14080:	9809      	ldr	r0, [sp, #36]	; 0x24
   14082:	f7f5 fa2d 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14086:	9004      	str	r0, [sp, #16]
   14088:	9103      	str	r1, [sp, #12]
   1408a:	e7ff      	b.n	1408c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
   1408c:	9808      	ldr	r0, [sp, #32]
   1408e:	9066      	str	r0, [sp, #408]	; 0x198
   14090:	9907      	ldr	r1, [sp, #28]
   14092:	9167      	str	r1, [sp, #412]	; 0x19c
   14094:	9a06      	ldr	r2, [sp, #24]
   14096:	9268      	str	r2, [sp, #416]	; 0x1a0
   14098:	9b05      	ldr	r3, [sp, #20]
   1409a:	9369      	str	r3, [sp, #420]	; 0x1a4
   1409c:	f8dd c010 	ldr.w	ip, [sp, #16]
   140a0:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
   140a4:	f8dd e00c 	ldr.w	lr, [sp, #12]
   140a8:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
   140ac:	466c      	mov	r4, sp
   140ae:	2503      	movs	r5, #3
   140b0:	6025      	str	r5, [r4, #0]
   140b2:	a860      	add	r0, sp, #384	; 0x180
   140b4:	ab66      	add	r3, sp, #408	; 0x198
   140b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   140b8:	462a      	mov	r2, r5
   140ba:	f7f4 fd73 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   140be:	e7ff      	b.n	140c0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
   140c0:	f64e 6038 	movw	r0, #60984	; 0xee38
   140c4:	f2c0 0001 	movt	r0, #1
   140c8:	f001 f9ff 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   140cc:	9002      	str	r0, [sp, #8]
   140ce:	e7ff      	b.n	140d0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
   140d0:	a860      	add	r0, sp, #384	; 0x180
   140d2:	9902      	ldr	r1, [sp, #8]
   140d4:	f001 fa36 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   140d8:	defe      	udf	#254	; 0xfe

000140da <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
   140da:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
   140dc:	4770      	bx	lr

000140de <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
   140de:	b5b0      	push	{r4, r5, r7, lr}
   140e0:	b0b0      	sub	sp, #192	; 0xc0
   140e2:	9029      	str	r0, [sp, #164]	; 0xa4
   140e4:	912a      	str	r1, [sp, #168]	; 0xa8
   140e6:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
   140e8:	900e      	str	r0, [sp, #56]	; 0x38
   140ea:	4608      	mov	r0, r1
   140ec:	910d      	str	r1, [sp, #52]	; 0x34
   140ee:	4611      	mov	r1, r2
   140f0:	f003 fa7c 	bl	175ec <hal_gpio_init_out>
   140f4:	900f      	str	r0, [sp, #60]	; 0x3c
   140f6:	e7ff      	b.n	140f8 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
   140f8:	f64e 504c 	movw	r0, #60748	; 0xed4c
   140fc:	f2c0 0001 	movt	r0, #1
   14100:	6800      	ldr	r0, [r0, #0]
   14102:	a90f      	add	r1, sp, #60	; 0x3c
   14104:	9110      	str	r1, [sp, #64]	; 0x40
   14106:	9011      	str	r0, [sp, #68]	; 0x44
   14108:	9810      	ldr	r0, [sp, #64]	; 0x40
   1410a:	902b      	str	r0, [sp, #172]	; 0xac
   1410c:	9911      	ldr	r1, [sp, #68]	; 0x44
   1410e:	912c      	str	r1, [sp, #176]	; 0xb0
   14110:	6802      	ldr	r2, [r0, #0]
   14112:	680b      	ldr	r3, [r1, #0]
   14114:	429a      	cmp	r2, r3
   14116:	900c      	str	r0, [sp, #48]	; 0x30
   14118:	910b      	str	r1, [sp, #44]	; 0x2c
   1411a:	d106      	bne.n	1412a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
   1411c:	e7ff      	b.n	1411e <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
   1411e:	980d      	ldr	r0, [sp, #52]	; 0x34
   14120:	990e      	ldr	r1, [sp, #56]	; 0x38
   14122:	6008      	str	r0, [r1, #0]
   14124:	2001      	movs	r0, #1
        Ok(())
    }
   14126:	b030      	add	sp, #192	; 0xc0
   14128:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
   1412a:	f64e 50a4 	movw	r0, #60836	; 0xeda4
   1412e:	f2c0 0001 	movt	r0, #1
   14132:	6801      	ldr	r1, [r0, #0]
   14134:	980c      	ldr	r0, [sp, #48]	; 0x30
   14136:	9021      	str	r0, [sp, #132]	; 0x84
   14138:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1413a:	9222      	str	r2, [sp, #136]	; 0x88
   1413c:	f64e 635c 	movw	r3, #61020	; 0xee5c
   14140:	f2c0 0301 	movt	r3, #1
   14144:	681b      	ldr	r3, [r3, #0]
   14146:	f64e 5cc4 	movw	ip, #60868	; 0xedc4
   1414a:	f2c0 0c01 	movt	ip, #1
   1414e:	f8dc c000 	ldr.w	ip, [ip]
   14152:	46ee      	mov	lr, sp
   14154:	2400      	movs	r4, #0
   14156:	f8ce 4000 	str.w	r4, [lr]
   1415a:	a823      	add	r0, sp, #140	; 0x8c
   1415c:	2201      	movs	r2, #1
   1415e:	910a      	str	r1, [sp, #40]	; 0x28
   14160:	4619      	mov	r1, r3
   14162:	4663      	mov	r3, ip
   14164:	f7f4 fd1e 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14168:	e7ff      	b.n	1416a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
   1416a:	a821      	add	r0, sp, #132	; 0x84
   1416c:	901e      	str	r0, [sp, #120]	; 0x78
   1416e:	a822      	add	r0, sp, #136	; 0x88
   14170:	901f      	str	r0, [sp, #124]	; 0x7c
   14172:	a823      	add	r0, sp, #140	; 0x8c
   14174:	9020      	str	r0, [sp, #128]	; 0x80
   14176:	981e      	ldr	r0, [sp, #120]	; 0x78
   14178:	902d      	str	r0, [sp, #180]	; 0xb4
   1417a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1417c:	912e      	str	r1, [sp, #184]	; 0xb8
   1417e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   14180:	922f      	str	r2, [sp, #188]	; 0xbc
   14182:	f249 33f3 	movw	r3, #37875	; 0x93f3
   14186:	f2c0 0300 	movt	r3, #0
   1418a:	9109      	str	r1, [sp, #36]	; 0x24
   1418c:	4619      	mov	r1, r3
   1418e:	9208      	str	r2, [sp, #32]
   14190:	f7f5 f967 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   14194:	9007      	str	r0, [sp, #28]
   14196:	9106      	str	r1, [sp, #24]
   14198:	e7ff      	b.n	1419a <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
   1419a:	f249 31f3 	movw	r1, #37875	; 0x93f3
   1419e:	f2c0 0100 	movt	r1, #0
   141a2:	9809      	ldr	r0, [sp, #36]	; 0x24
   141a4:	f7f5 f95d 	bl	9462 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   141a8:	9005      	str	r0, [sp, #20]
   141aa:	9104      	str	r1, [sp, #16]
   141ac:	e7ff      	b.n	141ae <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
   141ae:	f645 21a7 	movw	r1, #23207	; 0x5aa7
   141b2:	f2c0 0101 	movt	r1, #1
   141b6:	9808      	ldr	r0, [sp, #32]
   141b8:	f7f5 f992 	bl	94e0 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   141bc:	9003      	str	r0, [sp, #12]
   141be:	9102      	str	r1, [sp, #8]
   141c0:	e7ff      	b.n	141c2 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
   141c2:	9807      	ldr	r0, [sp, #28]
   141c4:	9018      	str	r0, [sp, #96]	; 0x60
   141c6:	9906      	ldr	r1, [sp, #24]
   141c8:	9119      	str	r1, [sp, #100]	; 0x64
   141ca:	9a05      	ldr	r2, [sp, #20]
   141cc:	921a      	str	r2, [sp, #104]	; 0x68
   141ce:	9b04      	ldr	r3, [sp, #16]
   141d0:	931b      	str	r3, [sp, #108]	; 0x6c
   141d2:	f8dd c00c 	ldr.w	ip, [sp, #12]
   141d6:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
   141da:	f8dd e008 	ldr.w	lr, [sp, #8]
   141de:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
   141e2:	466c      	mov	r4, sp
   141e4:	2503      	movs	r5, #3
   141e6:	6025      	str	r5, [r4, #0]
   141e8:	a812      	add	r0, sp, #72	; 0x48
   141ea:	ab18      	add	r3, sp, #96	; 0x60
   141ec:	990a      	ldr	r1, [sp, #40]	; 0x28
   141ee:	462a      	mov	r2, r5
   141f0:	f7f4 fcd8 	bl	8ba4 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   141f4:	e7ff      	b.n	141f6 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
   141f6:	f64e 6060 	movw	r0, #61024	; 0xee60
   141fa:	f2c0 0001 	movt	r0, #1
   141fe:	f001 f964 	bl	154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14202:	9001      	str	r0, [sp, #4]
   14204:	e7ff      	b.n	14206 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
   14206:	a812      	add	r0, sp, #72	; 0x48
   14208:	9901      	ldr	r1, [sp, #4]
   1420a:	f001 f99b 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1420e:	defe      	udf	#254	; 0xfe

00014210 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
   14210:	b580      	push	{r7, lr}
   14212:	b082      	sub	sp, #8
   14214:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
   14216:	6800      	ldr	r0, [r0, #0]
   14218:	2100      	movs	r1, #0
   1421a:	f003 fa03 	bl	17624 <hal_gpio_write>
   1421e:	e7ff      	b.n	14220 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
   14220:	2001      	movs	r0, #1
        Ok(())
    }
   14222:	b002      	add	sp, #8
   14224:	bd80      	pop	{r7, pc}

00014226 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
   14226:	b580      	push	{r7, lr}
   14228:	b082      	sub	sp, #8
   1422a:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
   1422c:	6800      	ldr	r0, [r0, #0]
   1422e:	2101      	movs	r1, #1
   14230:	f003 f9f8 	bl	17624 <hal_gpio_write>
   14234:	e7ff      	b.n	14236 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
   14236:	2001      	movs	r0, #1
        Ok(())
    }
   14238:	b002      	add	sp, #8
   1423a:	bd80      	pop	{r7, pc}

0001423c <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
   1423c:	4770      	bx	lr

0001423e <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
   1423e:	b580      	push	{r7, lr}
   14240:	b086      	sub	sp, #24
   14242:	460a      	mov	r2, r1
   14244:	9003      	str	r0, [sp, #12]
   14246:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   1424a:	b2c8      	uxtb	r0, r1
   1424c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   14250:	fba0 0101 	umull	r0, r1, r0, r1
   14254:	2900      	cmp	r1, #0
   14256:	9002      	str	r0, [sp, #8]
   14258:	d110      	bne.n	1427c <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
   1425a:	e7ff      	b.n	1425c <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
   1425c:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14260:	f2c1 0062 	movt	r0, #4194	; 0x1062
   14264:	9902      	ldr	r1, [sp, #8]
   14266:	fba1 0200 	umull	r0, r2, r1, r0
   1426a:	0992      	lsrs	r2, r2, #6
   1426c:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
   1426e:	9001      	str	r0, [sp, #4]
   14270:	4610      	mov	r0, r2
   14272:	f005 f9f5 	bl	19660 <os_time_delay>
   14276:	e7ff      	b.n	14278 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
   14278:	b006      	add	sp, #24
   1427a:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   1427c:	f64e 6080 	movw	r0, #61056	; 0xee80
   14280:	f2c0 0001 	movt	r0, #1
   14284:	f64e 6270 	movw	r2, #61040	; 0xee70
   14288:	f2c0 0201 	movt	r2, #1
   1428c:	2121      	movs	r1, #33	; 0x21
   1428e:	f001 f923 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14292:	defe      	udf	#254	; 0xfe

00014294 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   14294:	b082      	sub	sp, #8
   14296:	9001      	str	r0, [sp, #4]
   14298:	9000      	str	r0, [sp, #0]
   1429a:	e7ff      	b.n	1429c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   1429c:	9800      	ldr	r0, [sp, #0]
   1429e:	fab0 f180 	clz	r1, r0
   142a2:	0948      	lsrs	r0, r1, #5
   142a4:	b002      	add	sp, #8
   142a6:	4770      	bx	lr

000142a8 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   142a8:	b081      	sub	sp, #4
   142aa:	b001      	add	sp, #4
   142ac:	4770      	bx	lr

000142ae <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   142ae:	b08a      	sub	sp, #40	; 0x28
   142b0:	9005      	str	r0, [sp, #20]
   142b2:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   142b4:	9107      	str	r1, [sp, #28]
   142b6:	21ff      	movs	r1, #255	; 0xff
   142b8:	9106      	str	r1, [sp, #24]
   142ba:	2108      	movs	r1, #8
   142bc:	9108      	str	r1, [sp, #32]
   142be:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   142c0:	9003      	str	r0, [sp, #12]
   142c2:	9102      	str	r1, [sp, #8]
   142c4:	e016      	b.n	142f4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   142c6:	2001      	movs	r0, #1
   142c8:	f88d 0013 	strb.w	r0, [sp, #19]
   142cc:	e00c      	b.n	142e8 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   142ce:	2000      	movs	r0, #0
   142d0:	f88d 0013 	strb.w	r0, [sp, #19]
   142d4:	e008      	b.n	142e8 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   142d6:	9803      	ldr	r0, [sp, #12]
   142d8:	6801      	ldr	r1, [r0, #0]
   142da:	6842      	ldr	r2, [r0, #4]
   142dc:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   142e0:	f172 0200 	sbcs.w	r2, r2, #0
   142e4:	d3ef      	bcc.n	142c6 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   142e6:	e7f2      	b.n	142ce <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   142e8:	f89d 0013 	ldrb.w	r0, [sp, #19]
   142ec:	07c0      	lsls	r0, r0, #31
   142ee:	2800      	cmp	r0, #0
   142f0:	d10e      	bne.n	14310 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   142f2:	e009      	b.n	14308 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   142f4:	2001      	movs	r0, #1
   142f6:	9009      	str	r0, [sp, #36]	; 0x24
   142f8:	9809      	ldr	r0, [sp, #36]	; 0x24
   142fa:	9001      	str	r0, [sp, #4]
   142fc:	e7ff      	b.n	142fe <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   142fe:	9802      	ldr	r0, [sp, #8]
   14300:	9901      	ldr	r1, [sp, #4]
   14302:	4288      	cmp	r0, r1
   14304:	d9df      	bls.n	142c6 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14306:	e7e6      	b.n	142d6 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   14308:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   1430a:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   1430e:	e007      	b.n	14320 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   14310:	9803      	ldr	r0, [sp, #12]
   14312:	7801      	ldrb	r1, [r0, #0]
   14314:	f88d 1011 	strb.w	r1, [sp, #17]
   14318:	2101      	movs	r1, #1
   1431a:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   1431e:	e7ff      	b.n	14320 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   14320:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14324:	f89d 1011 	ldrb.w	r1, [sp, #17]
   14328:	b00a      	add	sp, #40	; 0x28
   1432a:	4770      	bx	lr

0001432c <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   1432c:	b084      	sub	sp, #16
   1432e:	9002      	str	r0, [sp, #8]
   14330:	6801      	ldr	r1, [r0, #0]
   14332:	2900      	cmp	r1, #0
   14334:	9000      	str	r0, [sp, #0]
   14336:	d001      	beq.n	1433c <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   14338:	e7ff      	b.n	1433a <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   1433a:	e003      	b.n	14344 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   1433c:	2000      	movs	r0, #0
   1433e:	9001      	str	r0, [sp, #4]
   14340:	e006      	b.n	14350 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14342:	defe      	udf	#254	; 0xfe
   14344:	9800      	ldr	r0, [sp, #0]
   14346:	f100 0108 	add.w	r1, r0, #8
   1434a:	9103      	str	r1, [sp, #12]
   1434c:	9101      	str	r1, [sp, #4]
   1434e:	e7ff      	b.n	14350 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14350:	9801      	ldr	r0, [sp, #4]
   14352:	b004      	add	sp, #16
   14354:	4770      	bx	lr

00014356 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   14356:	b084      	sub	sp, #16
   14358:	460b      	mov	r3, r1
   1435a:	4684      	mov	ip, r0
   1435c:	f88d 000c 	strb.w	r0, [sp, #12]
   14360:	f88d 100d 	strb.w	r1, [sp, #13]
   14364:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14368:	07c1      	lsls	r1, r0, #31
   1436a:	2900      	cmp	r1, #0
   1436c:	9202      	str	r2, [sp, #8]
   1436e:	d001      	beq.n	14374 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   14370:	e7ff      	b.n	14372 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   14372:	e009      	b.n	14388 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   14374:	f64e 60a1 	movw	r0, #61089	; 0xeea1
   14378:	f2c0 0001 	movt	r0, #1
   1437c:	212b      	movs	r1, #43	; 0x2b
   1437e:	9a02      	ldr	r2, [sp, #8]
   14380:	f001 f8aa 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14384:	defe      	udf	#254	; 0xfe
   14386:	defe      	udf	#254	; 0xfe
   14388:	f89d 000d 	ldrb.w	r0, [sp, #13]
   1438c:	4601      	mov	r1, r0
   1438e:	f88d 000f 	strb.w	r0, [sp, #15]
   14392:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14396:	07c0      	lsls	r0, r0, #31
   14398:	2800      	cmp	r0, #0
   1439a:	9101      	str	r1, [sp, #4]
   1439c:	d003      	beq.n	143a6 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   1439e:	e7ff      	b.n	143a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   143a0:	9801      	ldr	r0, [sp, #4]
   143a2:	b004      	add	sp, #16
   143a4:	4770      	bx	lr
   143a6:	e7fb      	b.n	143a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

000143a8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   143a8:	b088      	sub	sp, #32
   143aa:	9004      	str	r0, [sp, #16]
   143ac:	9105      	str	r1, [sp, #20]
   143ae:	9804      	ldr	r0, [sp, #16]
   143b0:	2800      	cmp	r0, #0
   143b2:	4601      	mov	r1, r0
   143b4:	bf18      	it	ne
   143b6:	2101      	movne	r1, #1
   143b8:	2800      	cmp	r0, #0
   143ba:	9203      	str	r2, [sp, #12]
   143bc:	d001      	beq.n	143c2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   143be:	e7ff      	b.n	143c0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   143c0:	e009      	b.n	143d6 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   143c2:	f64e 60a1 	movw	r0, #61089	; 0xeea1
   143c6:	f2c0 0001 	movt	r0, #1
   143ca:	212b      	movs	r1, #43	; 0x2b
   143cc:	9a03      	ldr	r2, [sp, #12]
   143ce:	f001 f883 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   143d2:	defe      	udf	#254	; 0xfe
   143d4:	defe      	udf	#254	; 0xfe
   143d6:	9804      	ldr	r0, [sp, #16]
   143d8:	9905      	ldr	r1, [sp, #20]
   143da:	9006      	str	r0, [sp, #24]
   143dc:	9107      	str	r1, [sp, #28]
   143de:	9a04      	ldr	r2, [sp, #16]
   143e0:	2a00      	cmp	r2, #0
   143e2:	9002      	str	r0, [sp, #8]
   143e4:	9101      	str	r1, [sp, #4]
   143e6:	d004      	beq.n	143f2 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   143e8:	e7ff      	b.n	143ea <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   143ea:	9802      	ldr	r0, [sp, #8]
   143ec:	9901      	ldr	r1, [sp, #4]
   143ee:	b008      	add	sp, #32
   143f0:	4770      	bx	lr
   143f2:	e7fa      	b.n	143ea <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

000143f4 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   143f4:	b082      	sub	sp, #8
   143f6:	9001      	str	r0, [sp, #4]
   143f8:	6800      	ldr	r0, [r0, #0]
   143fa:	2800      	cmp	r0, #0
   143fc:	d104      	bne.n	14408 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   143fe:	e7ff      	b.n	14400 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   14400:	2000      	movs	r0, #0
   14402:	f88d 0003 	strb.w	r0, [sp, #3]
   14406:	e003      	b.n	14410 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14408:	2001      	movs	r0, #1
   1440a:	f88d 0003 	strb.w	r0, [sp, #3]
   1440e:	e7ff      	b.n	14410 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14410:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14414:	b002      	add	sp, #8
   14416:	4770      	bx	lr

00014418 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   14418:	b580      	push	{r7, lr}
   1441a:	b086      	sub	sp, #24
   1441c:	9000      	str	r0, [sp, #0]
   1441e:	2000      	movs	r0, #0
   14420:	f88d 000f 	strb.w	r0, [sp, #15]
   14424:	f88d 000e 	strb.w	r0, [sp, #14]
   14428:	2001      	movs	r0, #1
   1442a:	f88d 000f 	strb.w	r0, [sp, #15]
   1442e:	f88d 000e 	strb.w	r0, [sp, #14]
   14432:	9800      	ldr	r0, [sp, #0]
   14434:	2800      	cmp	r0, #0
   14436:	4601      	mov	r1, r0
   14438:	bf18      	it	ne
   1443a:	2101      	movne	r1, #1
   1443c:	2800      	cmp	r0, #0
   1443e:	d001      	beq.n	14444 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   14440:	e7ff      	b.n	14442 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   14442:	e004      	b.n	1444e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   14444:	2000      	movs	r0, #0
   14446:	f88d 0004 	strb.w	r0, [sp, #4]
   1444a:	e019      	b.n	14480 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   1444c:	defe      	udf	#254	; 0xfe
   1444e:	2000      	movs	r0, #0
   14450:	f88d 000f 	strb.w	r0, [sp, #15]
   14454:	9900      	ldr	r1, [sp, #0]
   14456:	9105      	str	r1, [sp, #20]
   14458:	f88d 000e 	strb.w	r0, [sp, #14]
   1445c:	9102      	str	r1, [sp, #8]
   1445e:	9802      	ldr	r0, [sp, #8]
   14460:	f7f6 f888 	bl	a574 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   14464:	f88d 1005 	strb.w	r1, [sp, #5]
   14468:	f88d 0004 	strb.w	r0, [sp, #4]
   1446c:	e7ff      	b.n	1446e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   1446e:	e007      	b.n	14480 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14470:	9800      	ldr	r0, [sp, #0]
   14472:	2800      	cmp	r0, #0
   14474:	d110      	bne.n	14498 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   14476:	e019      	b.n	144ac <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   14478:	2000      	movs	r0, #0
   1447a:	f88d 000e 	strb.w	r0, [sp, #14]
   1447e:	e7f7      	b.n	14470 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14480:	f89d 000e 	ldrb.w	r0, [sp, #14]
   14484:	07c0      	lsls	r0, r0, #31
   14486:	2800      	cmp	r0, #0
   14488:	d1f6      	bne.n	14478 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   1448a:	e7f1      	b.n	14470 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   1448c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14490:	f89d 1005 	ldrb.w	r1, [sp, #5]
   14494:	b006      	add	sp, #24
   14496:	bd80      	pop	{r7, pc}
   14498:	f89d 000f 	ldrb.w	r0, [sp, #15]
   1449c:	07c0      	lsls	r0, r0, #31
   1449e:	2800      	cmp	r0, #0
   144a0:	d0f4      	beq.n	1448c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   144a2:	e7ff      	b.n	144a4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   144a4:	2000      	movs	r0, #0
   144a6:	f88d 000f 	strb.w	r0, [sp, #15]
   144aa:	e7ef      	b.n	1448c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   144ac:	e7ee      	b.n	1448c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

000144ae <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   144ae:	b580      	push	{r7, lr}
   144b0:	b084      	sub	sp, #16
   144b2:	9002      	str	r0, [sp, #8]
   144b4:	9103      	str	r1, [sp, #12]
   144b6:	f64e 60cc 	movw	r0, #61132	; 0xeecc
   144ba:	f2c0 0001 	movt	r0, #1
   144be:	2202      	movs	r2, #2
   144c0:	9001      	str	r0, [sp, #4]
   144c2:	4608      	mov	r0, r1
   144c4:	9901      	ldr	r1, [sp, #4]
   144c6:	f001 fd27 	bl	15f18 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   144ca:	9000      	str	r0, [sp, #0]
   144cc:	e7ff      	b.n	144ce <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   144ce:	9800      	ldr	r0, [sp, #0]
   144d0:	f000 0001 	and.w	r0, r0, #1
   144d4:	b004      	add	sp, #16
   144d6:	bd80      	pop	{r7, pc}

000144d8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   144d8:	b580      	push	{r7, lr}
   144da:	b08a      	sub	sp, #40	; 0x28
   144dc:	4684      	mov	ip, r0
   144de:	f88d 0017 	strb.w	r0, [sp, #23]
   144e2:	9107      	str	r1, [sp, #28]
   144e4:	9208      	str	r2, [sp, #32]
   144e6:	f89d 0017 	ldrb.w	r0, [sp, #23]
   144ea:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   144ee:	f1be 0f00 	cmp.w	lr, #0
   144f2:	9304      	str	r3, [sp, #16]
   144f4:	9203      	str	r2, [sp, #12]
   144f6:	9102      	str	r1, [sp, #8]
   144f8:	d00e      	beq.n	14518 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   144fa:	e7ff      	b.n	144fc <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   144fc:	4668      	mov	r0, sp
   144fe:	9904      	ldr	r1, [sp, #16]
   14500:	6001      	str	r1, [r0, #0]
   14502:	f64e 63d0 	movw	r3, #61136	; 0xeed0
   14506:	f2c0 0301 	movt	r3, #1
   1450a:	aa06      	add	r2, sp, #24
   1450c:	9802      	ldr	r0, [sp, #8]
   1450e:	9903      	ldr	r1, [sp, #12]
   14510:	f000 ffb4 	bl	1547c <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   14514:	defe      	udf	#254	; 0xfe
   14516:	defe      	udf	#254	; 0xfe
   14518:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1451c:	07c0      	lsls	r0, r0, #31
   1451e:	2800      	cmp	r0, #0
   14520:	d102      	bne.n	14528 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   14522:	e7ff      	b.n	14524 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   14524:	b00a      	add	sp, #40	; 0x28
   14526:	bd80      	pop	{r7, pc}
   14528:	e7fc      	b.n	14524 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

0001452a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   1452a:	b580      	push	{r7, lr}
   1452c:	b088      	sub	sp, #32
   1452e:	9001      	str	r0, [sp, #4]
   14530:	2000      	movs	r0, #0
   14532:	f88d 0013 	strb.w	r0, [sp, #19]
   14536:	f88d 0011 	strb.w	r0, [sp, #17]
   1453a:	f88d 0012 	strb.w	r0, [sp, #18]
   1453e:	2001      	movs	r0, #1
   14540:	f88d 0012 	strb.w	r0, [sp, #18]
   14544:	f88d 0013 	strb.w	r0, [sp, #19]
   14548:	f88d 0011 	strb.w	r0, [sp, #17]
   1454c:	9801      	ldr	r0, [sp, #4]
   1454e:	1e41      	subs	r1, r0, #1
   14550:	bf18      	it	ne
   14552:	2101      	movne	r1, #1
   14554:	2801      	cmp	r0, #1
   14556:	d00d      	beq.n	14574 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   14558:	e7ff      	b.n	1455a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   1455a:	2000      	movs	r0, #0
   1455c:	f88d 0013 	strb.w	r0, [sp, #19]
   14560:	9901      	ldr	r1, [sp, #4]
   14562:	9107      	str	r1, [sp, #28]
   14564:	f88d 0011 	strb.w	r0, [sp, #17]
   14568:	9103      	str	r1, [sp, #12]
   1456a:	9803      	ldr	r0, [sp, #12]
   1456c:	f7f5 f9c2 	bl	98f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   14570:	e006      	b.n	14580 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   14572:	defe      	udf	#254	; 0xfe
   14574:	2000      	movs	r0, #0
   14576:	f88d 0012 	strb.w	r0, [sp, #18]
   1457a:	f88d 000b 	strb.w	r0, [sp, #11]
   1457e:	e003      	b.n	14588 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   14580:	2001      	movs	r0, #1
   14582:	f88d 000b 	strb.w	r0, [sp, #11]
   14586:	e7ff      	b.n	14588 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   14588:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1458c:	07c0      	lsls	r0, r0, #31
   1458e:	2800      	cmp	r0, #0
   14590:	d104      	bne.n	1459c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   14592:	e7ff      	b.n	14594 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   14594:	9801      	ldr	r0, [sp, #4]
   14596:	2801      	cmp	r0, #1
   14598:	d008      	beq.n	145ac <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   1459a:	e011      	b.n	145c0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   1459c:	2000      	movs	r0, #0
   1459e:	f88d 0011 	strb.w	r0, [sp, #17]
   145a2:	e7f7      	b.n	14594 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   145a4:	f89d 000b 	ldrb.w	r0, [sp, #11]
   145a8:	b008      	add	sp, #32
   145aa:	bd80      	pop	{r7, pc}
   145ac:	f89d 0012 	ldrb.w	r0, [sp, #18]
   145b0:	07c0      	lsls	r0, r0, #31
   145b2:	2800      	cmp	r0, #0
   145b4:	d0f6      	beq.n	145a4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   145b6:	e7ff      	b.n	145b8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   145b8:	2000      	movs	r0, #0
   145ba:	f88d 0012 	strb.w	r0, [sp, #18]
   145be:	e7f1      	b.n	145a4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   145c0:	f89d 0013 	ldrb.w	r0, [sp, #19]
   145c4:	07c0      	lsls	r0, r0, #31
   145c6:	2800      	cmp	r0, #0
   145c8:	d0ec      	beq.n	145a4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   145ca:	e7ff      	b.n	145cc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   145cc:	2000      	movs	r0, #0
   145ce:	f88d 0013 	strb.w	r0, [sp, #19]
   145d2:	e7e7      	b.n	145a4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

000145d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   145d4:	b580      	push	{r7, lr}
   145d6:	b088      	sub	sp, #32
   145d8:	9001      	str	r0, [sp, #4]
   145da:	2000      	movs	r0, #0
   145dc:	f88d 0013 	strb.w	r0, [sp, #19]
   145e0:	f88d 0011 	strb.w	r0, [sp, #17]
   145e4:	f88d 0012 	strb.w	r0, [sp, #18]
   145e8:	2001      	movs	r0, #1
   145ea:	f88d 0012 	strb.w	r0, [sp, #18]
   145ee:	f88d 0013 	strb.w	r0, [sp, #19]
   145f2:	f88d 0011 	strb.w	r0, [sp, #17]
   145f6:	9801      	ldr	r0, [sp, #4]
   145f8:	1e41      	subs	r1, r0, #1
   145fa:	bf18      	it	ne
   145fc:	2101      	movne	r1, #1
   145fe:	2801      	cmp	r0, #1
   14600:	d00d      	beq.n	1461e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   14602:	e7ff      	b.n	14604 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   14604:	2000      	movs	r0, #0
   14606:	f88d 0013 	strb.w	r0, [sp, #19]
   1460a:	9901      	ldr	r1, [sp, #4]
   1460c:	9107      	str	r1, [sp, #28]
   1460e:	f88d 0011 	strb.w	r0, [sp, #17]
   14612:	9103      	str	r1, [sp, #12]
   14614:	9803      	ldr	r0, [sp, #12]
   14616:	f7f5 f963 	bl	98e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   1461a:	e006      	b.n	1462a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   1461c:	defe      	udf	#254	; 0xfe
   1461e:	2000      	movs	r0, #0
   14620:	f88d 0012 	strb.w	r0, [sp, #18]
   14624:	f88d 000b 	strb.w	r0, [sp, #11]
   14628:	e003      	b.n	14632 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   1462a:	2001      	movs	r0, #1
   1462c:	f88d 000b 	strb.w	r0, [sp, #11]
   14630:	e7ff      	b.n	14632 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   14632:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14636:	07c0      	lsls	r0, r0, #31
   14638:	2800      	cmp	r0, #0
   1463a:	d104      	bne.n	14646 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   1463c:	e7ff      	b.n	1463e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1463e:	9801      	ldr	r0, [sp, #4]
   14640:	2801      	cmp	r0, #1
   14642:	d008      	beq.n	14656 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   14644:	e011      	b.n	1466a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   14646:	2000      	movs	r0, #0
   14648:	f88d 0011 	strb.w	r0, [sp, #17]
   1464c:	e7f7      	b.n	1463e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   1464e:	f89d 000b 	ldrb.w	r0, [sp, #11]
   14652:	b008      	add	sp, #32
   14654:	bd80      	pop	{r7, pc}
   14656:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1465a:	07c0      	lsls	r0, r0, #31
   1465c:	2800      	cmp	r0, #0
   1465e:	d0f6      	beq.n	1464e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   14660:	e7ff      	b.n	14662 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   14662:	2000      	movs	r0, #0
   14664:	f88d 0012 	strb.w	r0, [sp, #18]
   14668:	e7f1      	b.n	1464e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   1466a:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1466e:	07c0      	lsls	r0, r0, #31
   14670:	2800      	cmp	r0, #0
   14672:	d0ec      	beq.n	1464e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   14674:	e7ff      	b.n	14676 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   14676:	2000      	movs	r0, #0
   14678:	f88d 0013 	strb.w	r0, [sp, #19]
   1467c:	e7e7      	b.n	1464e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

0001467e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   1467e:	b580      	push	{r7, lr}
   14680:	b088      	sub	sp, #32
   14682:	9001      	str	r0, [sp, #4]
   14684:	2000      	movs	r0, #0
   14686:	f88d 0013 	strb.w	r0, [sp, #19]
   1468a:	f88d 0011 	strb.w	r0, [sp, #17]
   1468e:	f88d 0012 	strb.w	r0, [sp, #18]
   14692:	2001      	movs	r0, #1
   14694:	f88d 0012 	strb.w	r0, [sp, #18]
   14698:	f88d 0013 	strb.w	r0, [sp, #19]
   1469c:	f88d 0011 	strb.w	r0, [sp, #17]
   146a0:	9801      	ldr	r0, [sp, #4]
   146a2:	1e41      	subs	r1, r0, #1
   146a4:	bf18      	it	ne
   146a6:	2101      	movne	r1, #1
   146a8:	2801      	cmp	r0, #1
   146aa:	d00d      	beq.n	146c8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   146ac:	e7ff      	b.n	146ae <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   146ae:	2000      	movs	r0, #0
   146b0:	f88d 0013 	strb.w	r0, [sp, #19]
   146b4:	9901      	ldr	r1, [sp, #4]
   146b6:	9107      	str	r1, [sp, #28]
   146b8:	f88d 0011 	strb.w	r0, [sp, #17]
   146bc:	9103      	str	r1, [sp, #12]
   146be:	9803      	ldr	r0, [sp, #12]
   146c0:	f7f5 f913 	bl	98ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   146c4:	e006      	b.n	146d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   146c6:	defe      	udf	#254	; 0xfe
   146c8:	2000      	movs	r0, #0
   146ca:	f88d 0012 	strb.w	r0, [sp, #18]
   146ce:	f88d 000b 	strb.w	r0, [sp, #11]
   146d2:	e003      	b.n	146dc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   146d4:	2001      	movs	r0, #1
   146d6:	f88d 000b 	strb.w	r0, [sp, #11]
   146da:	e7ff      	b.n	146dc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   146dc:	f89d 0011 	ldrb.w	r0, [sp, #17]
   146e0:	07c0      	lsls	r0, r0, #31
   146e2:	2800      	cmp	r0, #0
   146e4:	d104      	bne.n	146f0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   146e6:	e7ff      	b.n	146e8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   146e8:	9801      	ldr	r0, [sp, #4]
   146ea:	2801      	cmp	r0, #1
   146ec:	d008      	beq.n	14700 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   146ee:	e011      	b.n	14714 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   146f0:	2000      	movs	r0, #0
   146f2:	f88d 0011 	strb.w	r0, [sp, #17]
   146f6:	e7f7      	b.n	146e8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   146f8:	f89d 000b 	ldrb.w	r0, [sp, #11]
   146fc:	b008      	add	sp, #32
   146fe:	bd80      	pop	{r7, pc}
   14700:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14704:	07c0      	lsls	r0, r0, #31
   14706:	2800      	cmp	r0, #0
   14708:	d0f6      	beq.n	146f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1470a:	e7ff      	b.n	1470c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   1470c:	2000      	movs	r0, #0
   1470e:	f88d 0012 	strb.w	r0, [sp, #18]
   14712:	e7f1      	b.n	146f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   14714:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14718:	07c0      	lsls	r0, r0, #31
   1471a:	2800      	cmp	r0, #0
   1471c:	d0ec      	beq.n	146f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1471e:	e7ff      	b.n	14720 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   14720:	2000      	movs	r0, #0
   14722:	f88d 0013 	strb.w	r0, [sp, #19]
   14726:	e7e7      	b.n	146f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

00014728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   14728:	b082      	sub	sp, #8
   1472a:	2001      	movs	r0, #1
   1472c:	f88d 0003 	strb.w	r0, [sp, #3]
   14730:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14734:	b002      	add	sp, #8
   14736:	4770      	bx	lr

00014738 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
        self.style.stroke_width = width;

        self
    }

    fn fill(mut self, color: Option<C>) -> Self {
   14738:	b5b0      	push	{r4, r5, r7, lr}
   1473a:	b081      	sub	sp, #4
   1473c:	469c      	mov	ip, r3
   1473e:	4696      	mov	lr, r2
   14740:	f8ad 2000 	strh.w	r2, [sp]
   14744:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   14748:	820a      	strh	r2, [r1, #16]
   1474a:	824b      	strh	r3, [r1, #18]

        self
   1474c:	c91c      	ldmia	r1!, {r2, r3, r4}
   1474e:	c01c      	stmia	r0!, {r2, r3, r4}
   14750:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   14754:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   14758:	b001      	add	sp, #4
   1475a:	bdb0      	pop	{r4, r5, r7, pc}

0001475c <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   1475c:	b510      	push	{r4, lr}
   1475e:	b08c      	sub	sp, #48	; 0x30
   14760:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   14764:	9108      	str	r1, [sp, #32]
   14766:	9209      	str	r2, [sp, #36]	; 0x24
   14768:	930a      	str	r3, [sp, #40]	; 0x28
   1476a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1476e:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   14772:	9004      	str	r0, [sp, #16]
   14774:	4670      	mov	r0, lr
   14776:	9303      	str	r3, [sp, #12]
   14778:	9202      	str	r2, [sp, #8]
   1477a:	9101      	str	r1, [sp, #4]
   1477c:	f8cd c000 	str.w	ip, [sp]
   14780:	f000 f818 	bl	147b4 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   14784:	e7ff      	b.n	14786 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   14786:	9801      	ldr	r0, [sp, #4]
   14788:	9904      	ldr	r1, [sp, #16]
   1478a:	6008      	str	r0, [r1, #0]
   1478c:	9a02      	ldr	r2, [sp, #8]
   1478e:	604a      	str	r2, [r1, #4]
   14790:	9b03      	ldr	r3, [sp, #12]
   14792:	608b      	str	r3, [r1, #8]
   14794:	f8dd c000 	ldr.w	ip, [sp]
   14798:	f8c1 c00c 	str.w	ip, [r1, #12]
   1479c:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   147a0:	f8a1 e018 	strh.w	lr, [r1, #24]
   147a4:	f8dd e014 	ldr.w	lr, [sp, #20]
   147a8:	9c06      	ldr	r4, [sp, #24]
   147aa:	614c      	str	r4, [r1, #20]
   147ac:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   147b0:	b00c      	add	sp, #48	; 0x30
   147b2:	bd10      	pop	{r4, pc}

000147b4 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   147b4:	b082      	sub	sp, #8
   147b6:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   147b8:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   147bc:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   147c0:	f8bd 1000 	ldrh.w	r1, [sp]
   147c4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   147c8:	8001      	strh	r1, [r0, #0]
   147ca:	8042      	strh	r2, [r0, #2]
   147cc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   147d0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   147d4:	8081      	strh	r1, [r0, #4]
   147d6:	80c2      	strh	r2, [r0, #6]
   147d8:	2101      	movs	r1, #1
   147da:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   147dc:	b002      	add	sp, #8
   147de:	4770      	bx	lr

000147e0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
   147e0:	b084      	sub	sp, #16
   147e2:	460a      	mov	r2, r1
   147e4:	4603      	mov	r3, r0
   147e6:	9103      	str	r1, [sp, #12]
   147e8:	9002      	str	r0, [sp, #8]
   147ea:	b004      	add	sp, #16
   147ec:	4770      	bx	lr

000147ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
   147ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   147f0:	b091      	sub	sp, #68	; 0x44
   147f2:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
   147f6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
   147fa:	461c      	mov	r4, r3
   147fc:	4615      	mov	r5, r2
   147fe:	460e      	mov	r6, r1
   14800:	900a      	str	r0, [sp, #40]	; 0x28
   14802:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
   14806:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
   1480a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
   1480e:	f8ad e032 	strh.w	lr, [sp, #50]	; 0x32
   14812:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
   14814:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
   14818:	2701      	movs	r7, #1
   1481a:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
   1481e:	466f      	mov	r7, sp
   14820:	f8c7 e000 	str.w	lr, [r7]
   14824:	9008      	str	r0, [sp, #32]
   14826:	f8cd c01c 	str.w	ip, [sp, #28]
   1482a:	9406      	str	r4, [sp, #24]
   1482c:	9505      	str	r5, [sp, #20]
   1482e:	9604      	str	r6, [sp, #16]
   14830:	f7f5 f98f 	bl	9b52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
   14834:	9003      	str	r0, [sp, #12]
   14836:	e7ff      	b.n	14838 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0x4a>
   14838:	9803      	ldr	r0, [sp, #12]
   1483a:	f000 0001 	and.w	r0, r0, #1
   1483e:	f7f4 fa19 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   14842:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
   14846:	e7ff      	b.n	14848 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0x5a>
   14848:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   1484c:	07c1      	lsls	r1, r0, #31
   1484e:	2900      	cmp	r1, #0
   14850:	d001      	beq.n	14856 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0x68>
   14852:	e7ff      	b.n	14854 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0x66>
   14854:	e009      	b.n	1486a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0x7c>
   14856:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
   14858:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   1485c:	9808      	ldr	r0, [sp, #32]
   1485e:	9907      	ldr	r1, [sp, #28]
   14860:	f000 f848 	bl	148f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE>
   14864:	9002      	str	r0, [sp, #8]
   14866:	e00d      	b.n	14884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0x96>
        self.set_address_window(sx, sy, ex, ey)?;
   14868:	defe      	udf	#254	; 0xfe
   1486a:	f7fd fad4 	bl	11e16 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   1486e:	e003      	b.n	14878 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0x8a>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
   14870:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   14874:	b011      	add	sp, #68	; 0x44
   14876:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
   14878:	f7ff ff56 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1487c:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   14880:	e7ff      	b.n	14882 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0x94>
   14882:	e031      	b.n	148e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0xfa>
        self.write_pixels(colors) ? ;
   14884:	9802      	ldr	r0, [sp, #8]
   14886:	f000 0001 	and.w	r0, r0, #1
   1488a:	f7f4 f9f3 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1488e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
   14892:	e7ff      	b.n	14894 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0xa6>
   14894:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
   14898:	07c1      	lsls	r1, r0, #31
   1489a:	2900      	cmp	r1, #0
   1489c:	d001      	beq.n	148a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0xb4>
   1489e:	e7ff      	b.n	148a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0xb2>
   148a0:	e004      	b.n	148ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0xbe>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   148a2:	f7fe fd07 	bl	132b4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   148a6:	9001      	str	r0, [sp, #4]
   148a8:	e009      	b.n	148be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0xd0>
        self.write_pixels(colors) ? ;
   148aa:	defe      	udf	#254	; 0xfe
   148ac:	f7fd fab3 	bl	11e16 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   148b0:	e7ff      	b.n	148b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0xc4>
   148b2:	f7ff ff39 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   148b6:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   148ba:	e7ff      	b.n	148bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0xce>
   148bc:	e014      	b.n	148e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0xfa>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   148be:	f64e 61e0 	movw	r1, #61152	; 0xeee0
   148c2:	f2c0 0101 	movt	r1, #1
   148c6:	f64e 733c 	movw	r3, #61244	; 0xef3c
   148ca:	f2c0 0301 	movt	r3, #1
   148ce:	220e      	movs	r2, #14
   148d0:	9801      	ldr	r0, [sp, #4]
   148d2:	f7f4 f996 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   148d6:	e7ff      	b.n	148d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0xea>
   148d8:	2000      	movs	r0, #0
        Ok(())
   148da:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    }
   148de:	e7c7      	b.n	14870 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0x82>
   148e0:	2000      	movs	r0, #0
   148e2:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   148e6:	e7c3      	b.n	14870 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0x82>
   148e8:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   148ec:	07c0      	lsls	r0, r0, #31
   148ee:	2800      	cmp	r0, #0
   148f0:	d1f6      	bne.n	148e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0xf2>
   148f2:	e7bd      	b.n	14870 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17he8379781ce9b0d12E+0x82>

000148f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
   148f4:	b580      	push	{r7, lr}
   148f6:	b094      	sub	sp, #80	; 0x50
   148f8:	900d      	str	r0, [sp, #52]	; 0x34
   148fa:	910e      	str	r1, [sp, #56]	; 0x38
   148fc:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
   148fe:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
   14902:	2301      	movs	r3, #1
   14904:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   14908:	232c      	movs	r3, #44	; 0x2c
   1490a:	f88d 301f 	strb.w	r3, [sp, #31]
   1490e:	9209      	str	r2, [sp, #36]	; 0x24
   14910:	9208      	str	r2, [sp, #32]
   14912:	9208      	str	r2, [sp, #32]
   14914:	9a08      	ldr	r2, [sp, #32]
   14916:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14918:	f89d c01f 	ldrb.w	ip, [sp, #31]
   1491c:	9006      	str	r0, [sp, #24]
   1491e:	9105      	str	r1, [sp, #20]
   14920:	4661      	mov	r1, ip
   14922:	f7f5 f825 	bl	9970 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   14926:	9004      	str	r0, [sp, #16]
   14928:	e7ff      	b.n	1492a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x36>
   1492a:	9804      	ldr	r0, [sp, #16]
   1492c:	f000 0001 	and.w	r0, r0, #1
   14930:	f7f4 f9a0 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   14934:	f88d 001e 	strb.w	r0, [sp, #30]
   14938:	e7ff      	b.n	1493a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x46>
   1493a:	f89d 001e 	ldrb.w	r0, [sp, #30]
   1493e:	07c1      	lsls	r1, r0, #31
   14940:	2900      	cmp	r1, #0
   14942:	d001      	beq.n	14948 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x54>
   14944:	e7ff      	b.n	14946 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x52>
   14946:	e008      	b.n	1495a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x66>
   14948:	2000      	movs	r0, #0
        for color in colors {
   1494a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   1494e:	9805      	ldr	r0, [sp, #20]
   14950:	f000 f88e 	bl	14a70 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hb4ddf2fb975bed7dE>
   14954:	9003      	str	r0, [sp, #12]
   14956:	e00d      	b.n	14974 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x80>
        self.write_command(Instruction::RAMWR, None)?;
   14958:	defe      	udf	#254	; 0xfe
   1495a:	f7fd fa5c 	bl	11e16 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   1495e:	e003      	b.n	14968 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x74>
    }
   14960:	f89d 001d 	ldrb.w	r0, [sp, #29]
   14964:	b014      	add	sp, #80	; 0x50
   14966:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
   14968:	f7ff fede 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1496c:	f88d 001d 	strb.w	r0, [sp, #29]
   14970:	e7ff      	b.n	14972 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x7e>
   14972:	e057      	b.n	14a24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x130>
        for color in colors {
   14974:	9803      	ldr	r0, [sp, #12]
   14976:	900a      	str	r0, [sp, #40]	; 0x28
   14978:	e7ff      	b.n	1497a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x86>
   1497a:	a80a      	add	r0, sp, #40	; 0x28
   1497c:	f000 f87c 	bl	14a78 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6065e74ad82d0f14E>
   14980:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
   14984:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
   14988:	e7ff      	b.n	1498a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x96>
   1498a:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
   1498e:	4601      	mov	r1, r0
   14990:	2800      	cmp	r0, #0
   14992:	d001      	beq.n	14998 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0xa4>
   14994:	e7ff      	b.n	14996 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0xa2>
   14996:	e001      	b.n	1499c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0xa8>
        }
   14998:	e02b      	b.n	149f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0xfe>
        for color in colors {
   1499a:	defe      	udf	#254	; 0xfe
   1499c:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
   149a0:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
   149a4:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
   149a8:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
            self.write_word(color)?;
   149ac:	9906      	ldr	r1, [sp, #24]
   149ae:	9002      	str	r0, [sp, #8]
   149b0:	4608      	mov	r0, r1
   149b2:	9902      	ldr	r1, [sp, #8]
   149b4:	f7f4 ffbe 	bl	9934 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   149b8:	9001      	str	r0, [sp, #4]
   149ba:	e7ff      	b.n	149bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0xc8>
   149bc:	9801      	ldr	r0, [sp, #4]
   149be:	f000 0001 	and.w	r0, r0, #1
   149c2:	f7f4 f957 	bl	8c74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   149c6:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   149ca:	e7ff      	b.n	149cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0xd8>
   149cc:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   149d0:	07c1      	lsls	r1, r0, #31
   149d2:	2900      	cmp	r1, #0
   149d4:	d001      	beq.n	149da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0xe6>
   149d6:	e7ff      	b.n	149d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0xe4>
   149d8:	e001      	b.n	149de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0xea>
        for color in colors {
   149da:	e7ce      	b.n	1497a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x86>
            self.write_word(color)?;
   149dc:	defe      	udf	#254	; 0xfe
   149de:	f7fd fa1a 	bl	11e16 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
   149e2:	e7ff      	b.n	149e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0xf0>
   149e4:	f7ff fea0 	bl	14728 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   149e8:	f88d 001d 	strb.w	r0, [sp, #29]
   149ec:	e7ff      	b.n	149ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0xfa>
        }
   149ee:	e7ff      	b.n	149f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0xfc>
    }
   149f0:	e018      	b.n	14a24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x130>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   149f2:	f7fe fc5f 	bl	132b4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   149f6:	9000      	str	r0, [sp, #0]
   149f8:	e7ff      	b.n	149fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x106>
   149fa:	f64e 61e0 	movw	r1, #61152	; 0xeee0
   149fe:	f2c0 0101 	movt	r1, #1
   14a02:	f64e 734c 	movw	r3, #61260	; 0xef4c
   14a06:	f2c0 0301 	movt	r3, #1
   14a0a:	220e      	movs	r2, #14
   14a0c:	9800      	ldr	r0, [sp, #0]
   14a0e:	f7f4 f8f8 	bl	8c02 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14a12:	e7ff      	b.n	14a14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x120>
   14a14:	2000      	movs	r0, #0
        Ok(())
   14a16:	f88d 001d 	strb.w	r0, [sp, #29]
    }
   14a1a:	e7a1      	b.n	14960 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x6c>
   14a1c:	2000      	movs	r0, #0
   14a1e:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   14a22:	e79d      	b.n	14960 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x6c>
   14a24:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   14a28:	07c0      	lsls	r0, r0, #31
   14a2a:	2800      	cmp	r0, #0
   14a2c:	d1f6      	bne.n	14a1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x128>
   14a2e:	e797      	b.n	14960 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h611044464da38cebE+0x6c>

00014a30 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE>:
   14a30:	b083      	sub	sp, #12
   14a32:	9002      	str	r0, [sp, #8]
   14a34:	9000      	str	r0, [sp, #0]
   14a36:	e7ff      	b.n	14a38 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x8>
   14a38:	9800      	ldr	r0, [sp, #0]
   14a3a:	28ff      	cmp	r0, #255	; 0xff
   14a3c:	d807      	bhi.n	14a4e <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x1e>
   14a3e:	e7ff      	b.n	14a40 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x10>
   14a40:	9800      	ldr	r0, [sp, #0]
   14a42:	f88d 0005 	strb.w	r0, [sp, #5]
   14a46:	2100      	movs	r1, #0
   14a48:	f88d 1004 	strb.w	r1, [sp, #4]
   14a4c:	e003      	b.n	14a56 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x26>
   14a4e:	2001      	movs	r0, #1
   14a50:	f88d 0004 	strb.w	r0, [sp, #4]
   14a54:	e7ff      	b.n	14a56 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h612ea5e43be0039dE+0x26>
   14a56:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14a5a:	f89d 1005 	ldrb.w	r1, [sp, #5]
   14a5e:	b003      	add	sp, #12
   14a60:	4770      	bx	lr

00014a62 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h8e5f04233c93701aE>:
   14a62:	b081      	sub	sp, #4
   14a64:	4601      	mov	r1, r0
   14a66:	f88d 0003 	strb.w	r0, [sp, #3]
   14a6a:	b2c0      	uxtb	r0, r0
   14a6c:	b001      	add	sp, #4
   14a6e:	4770      	bx	lr

00014a70 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hb4ddf2fb975bed7dE>:
   14a70:	b081      	sub	sp, #4
   14a72:	9000      	str	r0, [sp, #0]
   14a74:	b001      	add	sp, #4
   14a76:	4770      	bx	lr

00014a78 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6065e74ad82d0f14E>:
   14a78:	b580      	push	{r7, lr}
   14a7a:	b084      	sub	sp, #16
   14a7c:	9003      	str	r0, [sp, #12]
   14a7e:	6800      	ldr	r0, [r0, #0]
   14a80:	f7fb faa6 	bl	ffd0 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h7e03d834c3ad98f2E>
   14a84:	9002      	str	r0, [sp, #8]
   14a86:	9101      	str	r1, [sp, #4]
   14a88:	e7ff      	b.n	14a8a <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6065e74ad82d0f14E+0x12>
   14a8a:	9802      	ldr	r0, [sp, #8]
   14a8c:	9901      	ldr	r1, [sp, #4]
   14a8e:	b004      	add	sp, #16
   14a90:	bd80      	pop	{r7, pc}

00014a92 <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E>:
   14a92:	b580      	push	{r7, lr}
   14a94:	b08c      	sub	sp, #48	; 0x30
   14a96:	9005      	str	r0, [sp, #20]
   14a98:	9106      	str	r1, [sp, #24]
   14a9a:	9207      	str	r2, [sp, #28]
   14a9c:	9008      	str	r0, [sp, #32]
   14a9e:	9109      	str	r1, [sp, #36]	; 0x24
   14aa0:	2301      	movs	r3, #1
   14aa2:	930b      	str	r3, [sp, #44]	; 0x2c
   14aa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14aa6:	9204      	str	r2, [sp, #16]
   14aa8:	9103      	str	r1, [sp, #12]
   14aaa:	9002      	str	r0, [sp, #8]
   14aac:	9301      	str	r3, [sp, #4]
   14aae:	e7ff      	b.n	14ab0 <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E+0x1e>
   14ab0:	9801      	ldr	r0, [sp, #4]
   14ab2:	9904      	ldr	r1, [sp, #16]
   14ab4:	fb00 f201 	mul.w	r2, r0, r1
   14ab8:	920a      	str	r2, [sp, #40]	; 0x28
   14aba:	9802      	ldr	r0, [sp, #8]
   14abc:	9903      	ldr	r1, [sp, #12]
   14abe:	f000 fb87 	bl	151d0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E>
   14ac2:	e7ff      	b.n	14ac4 <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E+0x32>
   14ac4:	b00c      	add	sp, #48	; 0x30
   14ac6:	bd80      	pop	{r7, pc}

00014ac8 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E>:
   14ac8:	b580      	push	{r7, lr}
   14aca:	b088      	sub	sp, #32
   14acc:	9004      	str	r0, [sp, #16]
   14ace:	9105      	str	r1, [sp, #20]
   14ad0:	2201      	movs	r2, #1
   14ad2:	9207      	str	r2, [sp, #28]
   14ad4:	9a07      	ldr	r2, [sp, #28]
   14ad6:	9103      	str	r1, [sp, #12]
   14ad8:	9002      	str	r0, [sp, #8]
   14ada:	9201      	str	r2, [sp, #4]
   14adc:	e7ff      	b.n	14ade <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x16>
   14ade:	9801      	ldr	r0, [sp, #4]
   14ae0:	2820      	cmp	r0, #32
   14ae2:	d306      	bcc.n	14af2 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x2a>
   14ae4:	e7ff      	b.n	14ae6 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x1e>
   14ae6:	2201      	movs	r2, #1
   14ae8:	9802      	ldr	r0, [sp, #8]
   14aea:	9903      	ldr	r1, [sp, #12]
   14aec:	f7ff ffd1 	bl	14a92 <_ZN4core3ptr19swap_nonoverlapping17ha68e6af383efc743E>
   14af0:	e013      	b.n	14b1a <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x52>
   14af2:	9802      	ldr	r0, [sp, #8]
   14af4:	f000 f814 	bl	14b20 <_ZN4core3ptr4read17h9c6a8e2989f962ccE>
   14af8:	4601      	mov	r1, r0
   14afa:	f88d 001b 	strb.w	r0, [sp, #27]
   14afe:	9100      	str	r1, [sp, #0]
   14b00:	e7ff      	b.n	14b02 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x3a>
   14b02:	2201      	movs	r2, #1
   14b04:	9803      	ldr	r0, [sp, #12]
   14b06:	9902      	ldr	r1, [sp, #8]
   14b08:	f7fc fe53 	bl	117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14b0c:	e7ff      	b.n	14b0e <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x46>
   14b0e:	9803      	ldr	r0, [sp, #12]
   14b10:	9900      	ldr	r1, [sp, #0]
   14b12:	f7f4 fb49 	bl	91a8 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   14b16:	e7ff      	b.n	14b18 <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x50>
   14b18:	e000      	b.n	14b1c <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x54>
   14b1a:	e7ff      	b.n	14b1c <_ZN4core3ptr23swap_nonoverlapping_one17ha857e353b2d31a89E+0x54>
   14b1c:	b008      	add	sp, #32
   14b1e:	bd80      	pop	{r7, pc}

00014b20 <_ZN4core3ptr4read17h9c6a8e2989f962ccE>:
   14b20:	b580      	push	{r7, lr}
   14b22:	b088      	sub	sp, #32
   14b24:	9004      	str	r0, [sp, #16]
   14b26:	f89d 1015 	ldrb.w	r1, [sp, #21]
   14b2a:	f88d 100f 	strb.w	r1, [sp, #15]
   14b2e:	9002      	str	r0, [sp, #8]
   14b30:	e7ff      	b.n	14b32 <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x12>
   14b32:	f10d 000f 	add.w	r0, sp, #15
   14b36:	9006      	str	r0, [sp, #24]
   14b38:	9007      	str	r0, [sp, #28]
   14b3a:	e7ff      	b.n	14b3c <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x1c>
   14b3c:	f10d 010f 	add.w	r1, sp, #15
   14b40:	2201      	movs	r2, #1
   14b42:	9802      	ldr	r0, [sp, #8]
   14b44:	f7fc fe35 	bl	117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14b48:	e7ff      	b.n	14b4a <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x2a>
   14b4a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14b4e:	4601      	mov	r1, r0
   14b50:	f88d 0016 	strb.w	r0, [sp, #22]
   14b54:	f88d 0017 	strb.w	r0, [sp, #23]
   14b58:	9101      	str	r1, [sp, #4]
   14b5a:	e7ff      	b.n	14b5c <_ZN4core3ptr4read17h9c6a8e2989f962ccE+0x3c>
   14b5c:	9801      	ldr	r0, [sp, #4]
   14b5e:	b008      	add	sp, #32
   14b60:	bd80      	pop	{r7, pc}

00014b62 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14b62:	b580      	push	{r7, lr}
   14b64:	b088      	sub	sp, #32
   14b66:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14b68:	1d01      	adds	r1, r0, #4
   14b6a:	9106      	str	r1, [sp, #24]
   14b6c:	9107      	str	r1, [sp, #28]
   14b6e:	9004      	str	r0, [sp, #16]
   14b70:	9103      	str	r1, [sp, #12]
   14b72:	e7ff      	b.n	14b74 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   14b74:	9804      	ldr	r0, [sp, #16]
   14b76:	6801      	ldr	r1, [r0, #0]
   14b78:	9803      	ldr	r0, [sp, #12]
   14b7a:	f7f4 f96f 	bl	8e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   14b7e:	9002      	str	r0, [sp, #8]
   14b80:	9101      	str	r1, [sp, #4]
   14b82:	e7ff      	b.n	14b84 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   14b84:	9802      	ldr	r0, [sp, #8]
   14b86:	9901      	ldr	r1, [sp, #4]
   14b88:	b008      	add	sp, #32
   14b8a:	bd80      	pop	{r7, pc}

00014b8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14b8c:	b580      	push	{r7, lr}
   14b8e:	b088      	sub	sp, #32
   14b90:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14b92:	1d01      	adds	r1, r0, #4
   14b94:	9106      	str	r1, [sp, #24]
   14b96:	9107      	str	r1, [sp, #28]
   14b98:	9004      	str	r0, [sp, #16]
   14b9a:	9103      	str	r1, [sp, #12]
   14b9c:	e7ff      	b.n	14b9e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x12>
   14b9e:	9804      	ldr	r0, [sp, #16]
   14ba0:	6801      	ldr	r1, [r0, #0]
   14ba2:	9803      	ldr	r0, [sp, #12]
   14ba4:	f7f4 f95a 	bl	8e5c <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   14ba8:	9002      	str	r0, [sp, #8]
   14baa:	9101      	str	r1, [sp, #4]
   14bac:	e7ff      	b.n	14bae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x22>
    }
   14bae:	9802      	ldr	r0, [sp, #8]
   14bb0:	9901      	ldr	r1, [sp, #4]
   14bb2:	b008      	add	sp, #32
   14bb4:	bd80      	pop	{r7, pc}

00014bb6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14bb6:	b580      	push	{r7, lr}
   14bb8:	b08a      	sub	sp, #40	; 0x28
   14bba:	460a      	mov	r2, r1
   14bbc:	9006      	str	r0, [sp, #24]
   14bbe:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   14bc2:	1d01      	adds	r1, r0, #4
   14bc4:	9108      	str	r1, [sp, #32]
   14bc6:	9109      	str	r1, [sp, #36]	; 0x24
   14bc8:	9005      	str	r0, [sp, #20]
   14bca:	9204      	str	r2, [sp, #16]
   14bcc:	9103      	str	r1, [sp, #12]
   14bce:	e7ff      	b.n	14bd0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   14bd0:	9805      	ldr	r0, [sp, #20]
   14bd2:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14bd4:	9803      	ldr	r0, [sp, #12]
   14bd6:	f7fc ff50 	bl	11a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14bda:	9002      	str	r0, [sp, #8]
   14bdc:	e7ff      	b.n	14bde <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   14bde:	9802      	ldr	r0, [sp, #8]
   14be0:	9904      	ldr	r1, [sp, #16]
   14be2:	f000 f994 	bl	14f0e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   14be6:	e7ff      	b.n	14be8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   14be8:	9805      	ldr	r0, [sp, #20]
   14bea:	6801      	ldr	r1, [r0, #0]
   14bec:	1c4a      	adds	r2, r1, #1
   14bee:	4613      	mov	r3, r2
   14bf0:	428a      	cmp	r2, r1
   14bf2:	9301      	str	r3, [sp, #4]
   14bf4:	d305      	bcc.n	14c02 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   14bf6:	e7ff      	b.n	14bf8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   14bf8:	9801      	ldr	r0, [sp, #4]
   14bfa:	9905      	ldr	r1, [sp, #20]
   14bfc:	6008      	str	r0, [r1, #0]
    }
   14bfe:	b00a      	add	sp, #40	; 0x28
   14c00:	bd80      	pop	{r7, pc}
        self.len += 1;
   14c02:	f64e 70d0 	movw	r0, #61392	; 0xefd0
   14c06:	f2c0 0001 	movt	r0, #1
   14c0a:	f64e 72b4 	movw	r2, #61364	; 0xefb4
   14c0e:	f2c0 0201 	movt	r2, #1
   14c12:	211c      	movs	r1, #28
   14c14:	f000 fc60 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14c18:	defe      	udf	#254	; 0xfe

00014c1a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14c1a:	b580      	push	{r7, lr}
   14c1c:	b08a      	sub	sp, #40	; 0x28
   14c1e:	460a      	mov	r2, r1
   14c20:	9006      	str	r0, [sp, #24]
   14c22:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   14c26:	1d01      	adds	r1, r0, #4
   14c28:	9108      	str	r1, [sp, #32]
   14c2a:	9109      	str	r1, [sp, #36]	; 0x24
   14c2c:	9005      	str	r0, [sp, #20]
   14c2e:	9204      	str	r2, [sp, #16]
   14c30:	9103      	str	r1, [sp, #12]
   14c32:	e7ff      	b.n	14c34 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x1a>
            .add(self.len)
   14c34:	9805      	ldr	r0, [sp, #20]
   14c36:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14c38:	9803      	ldr	r0, [sp, #12]
   14c3a:	f7fc ff1e 	bl	11a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14c3e:	9002      	str	r0, [sp, #8]
   14c40:	e7ff      	b.n	14c42 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x28>
   14c42:	9802      	ldr	r0, [sp, #8]
   14c44:	9904      	ldr	r1, [sp, #16]
   14c46:	f000 f962 	bl	14f0e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   14c4a:	e7ff      	b.n	14c4c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x32>
        self.len += 1;
   14c4c:	9805      	ldr	r0, [sp, #20]
   14c4e:	6801      	ldr	r1, [r0, #0]
   14c50:	1c4a      	adds	r2, r1, #1
   14c52:	4613      	mov	r3, r2
   14c54:	428a      	cmp	r2, r1
   14c56:	9301      	str	r3, [sp, #4]
   14c58:	d305      	bcc.n	14c66 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x4c>
   14c5a:	e7ff      	b.n	14c5c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x42>
   14c5c:	9801      	ldr	r0, [sp, #4]
   14c5e:	9905      	ldr	r1, [sp, #20]
   14c60:	6008      	str	r0, [r1, #0]
    }
   14c62:	b00a      	add	sp, #40	; 0x28
   14c64:	bd80      	pop	{r7, pc}
        self.len += 1;
   14c66:	f64e 70d0 	movw	r0, #61392	; 0xefd0
   14c6a:	f2c0 0001 	movt	r0, #1
   14c6e:	f64e 72b4 	movw	r2, #61364	; 0xefb4
   14c72:	f2c0 0201 	movt	r2, #1
   14c76:	211c      	movs	r1, #28
   14c78:	f000 fc2e 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14c7c:	defe      	udf	#254	; 0xfe

00014c7e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14c7e:	b580      	push	{r7, lr}
   14c80:	b094      	sub	sp, #80	; 0x50
   14c82:	900e      	str	r0, [sp, #56]	; 0x38
   14c84:	910f      	str	r1, [sp, #60]	; 0x3c
   14c86:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   14c88:	6803      	ldr	r3, [r0, #0]
   14c8a:	9009      	str	r0, [sp, #36]	; 0x24
   14c8c:	4608      	mov	r0, r1
   14c8e:	9108      	str	r1, [sp, #32]
   14c90:	4611      	mov	r1, r2
   14c92:	9207      	str	r2, [sp, #28]
   14c94:	9306      	str	r3, [sp, #24]
   14c96:	f7fc ff80 	bl	11b9a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   14c9a:	9005      	str	r0, [sp, #20]
   14c9c:	e7ff      	b.n	14c9e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x20>
   14c9e:	9806      	ldr	r0, [sp, #24]
   14ca0:	9905      	ldr	r1, [sp, #20]
   14ca2:	1842      	adds	r2, r0, r1
   14ca4:	4613      	mov	r3, r2
   14ca6:	4282      	cmp	r2, r0
   14ca8:	9304      	str	r3, [sp, #16]
   14caa:	d33f      	bcc.n	14d2c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xae>
   14cac:	e7ff      	b.n	14cae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x30>
   14cae:	9809      	ldr	r0, [sp, #36]	; 0x24
   14cb0:	f000 f8b7 	bl	14e22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   14cb4:	9003      	str	r0, [sp, #12]
   14cb6:	e7ff      	b.n	14cb8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x3a>
   14cb8:	9804      	ldr	r0, [sp, #16]
   14cba:	9903      	ldr	r1, [sp, #12]
   14cbc:	4288      	cmp	r0, r1
   14cbe:	d807      	bhi.n	14cd0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x52>
   14cc0:	e7ff      	b.n	14cc2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x44>
            for elem in other {
   14cc2:	9808      	ldr	r0, [sp, #32]
   14cc4:	9907      	ldr	r1, [sp, #28]
   14cc6:	f7f4 f9e7 	bl	9098 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   14cca:	9002      	str	r0, [sp, #8]
   14ccc:	9101      	str	r1, [sp, #4]
   14cce:	e003      	b.n	14cd8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x5a>
   14cd0:	2001      	movs	r0, #1
            Err(())
   14cd2:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14cd6:	e025      	b.n	14d24 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   14cd8:	9802      	ldr	r0, [sp, #8]
   14cda:	900b      	str	r0, [sp, #44]	; 0x2c
   14cdc:	9901      	ldr	r1, [sp, #4]
   14cde:	910c      	str	r1, [sp, #48]	; 0x30
   14ce0:	e7ff      	b.n	14ce2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
   14ce2:	a80b      	add	r0, sp, #44	; 0x2c
   14ce4:	f7fc fc54 	bl	11590 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   14ce8:	900d      	str	r0, [sp, #52]	; 0x34
   14cea:	e7ff      	b.n	14cec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x6e>
   14cec:	980d      	ldr	r0, [sp, #52]	; 0x34
   14cee:	2800      	cmp	r0, #0
   14cf0:	4601      	mov	r1, r0
   14cf2:	bf18      	it	ne
   14cf4:	2101      	movne	r1, #1
   14cf6:	2800      	cmp	r0, #0
   14cf8:	d001      	beq.n	14cfe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x80>
   14cfa:	e7ff      	b.n	14cfc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x7e>
   14cfc:	e004      	b.n	14d08 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x8a>
   14cfe:	2000      	movs	r0, #0
            Ok(())
   14d00:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14d04:	e00e      	b.n	14d24 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   14d06:	defe      	udf	#254	; 0xfe
   14d08:	980d      	ldr	r0, [sp, #52]	; 0x34
   14d0a:	9011      	str	r0, [sp, #68]	; 0x44
   14d0c:	9012      	str	r0, [sp, #72]	; 0x48
   14d0e:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   14d10:	f000 f909 	bl	14f26 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   14d14:	9000      	str	r0, [sp, #0]
   14d16:	e7ff      	b.n	14d18 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x9a>
   14d18:	9809      	ldr	r0, [sp, #36]	; 0x24
   14d1a:	9900      	ldr	r1, [sp, #0]
   14d1c:	f7ff ff7d 	bl	14c1a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>
   14d20:	e7ff      	b.n	14d22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa4>
            for elem in other {
   14d22:	e7de      	b.n	14ce2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
    }
   14d24:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   14d28:	b014      	add	sp, #80	; 0x50
   14d2a:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   14d2c:	f64e 70d0 	movw	r0, #61392	; 0xefd0
   14d30:	f2c0 0001 	movt	r0, #1
   14d34:	f64e 72ec 	movw	r2, #61420	; 0xefec
   14d38:	f2c0 0201 	movt	r2, #1
   14d3c:	211c      	movs	r1, #28
   14d3e:	f000 fbcb 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14d42:	defe      	udf	#254	; 0xfe

00014d44 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   14d44:	b580      	push	{r7, lr}
   14d46:	b088      	sub	sp, #32
   14d48:	460a      	mov	r2, r1
   14d4a:	9006      	str	r0, [sp, #24]
   14d4c:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   14d50:	6801      	ldr	r1, [r0, #0]
   14d52:	9004      	str	r0, [sp, #16]
   14d54:	9203      	str	r2, [sp, #12]
   14d56:	9102      	str	r1, [sp, #8]
   14d58:	f000 f859 	bl	14e0e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   14d5c:	9001      	str	r0, [sp, #4]
   14d5e:	e7ff      	b.n	14d60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   14d60:	9802      	ldr	r0, [sp, #8]
   14d62:	9901      	ldr	r1, [sp, #4]
   14d64:	4288      	cmp	r0, r1
   14d66:	d307      	bcc.n	14d78 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   14d68:	e7ff      	b.n	14d6a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   14d6a:	9803      	ldr	r0, [sp, #12]
   14d6c:	f88d 0015 	strb.w	r0, [sp, #21]
   14d70:	2101      	movs	r1, #1
   14d72:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   14d76:	e008      	b.n	14d8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   14d78:	9804      	ldr	r0, [sp, #16]
   14d7a:	9903      	ldr	r1, [sp, #12]
   14d7c:	f7ff ff1b 	bl	14bb6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   14d80:	e7ff      	b.n	14d82 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   14d82:	2000      	movs	r0, #0
            Ok(())
   14d84:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   14d88:	e7ff      	b.n	14d8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   14d8a:	f89d 0014 	ldrb.w	r0, [sp, #20]
   14d8e:	f89d 1015 	ldrb.w	r1, [sp, #21]
   14d92:	b008      	add	sp, #32
   14d94:	bd80      	pop	{r7, pc}

00014d96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   14d96:	b580      	push	{r7, lr}
   14d98:	b082      	sub	sp, #8
   14d9a:	9001      	str	r0, [sp, #4]
   14d9c:	2100      	movs	r1, #0
        self.truncate(0);
   14d9e:	f000 f880 	bl	14ea2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   14da2:	e7ff      	b.n	14da4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   14da4:	b002      	add	sp, #8
   14da6:	bd80      	pop	{r7, pc}

00014da8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>:
    pub(crate) fn clear(&mut self) {
   14da8:	b580      	push	{r7, lr}
   14daa:	b082      	sub	sp, #8
   14dac:	9001      	str	r0, [sp, #4]
   14dae:	2100      	movs	r1, #0
        self.truncate(0);
   14db0:	f000 f841 	bl	14e36 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>
   14db4:	e7ff      	b.n	14db6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E+0xe>
    }
   14db6:	b002      	add	sp, #8
   14db8:	bd80      	pop	{r7, pc}

00014dba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   14dba:	b580      	push	{r7, lr}
   14dbc:	b088      	sub	sp, #32
   14dbe:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   14dc0:	1d01      	adds	r1, r0, #4
   14dc2:	9106      	str	r1, [sp, #24]
   14dc4:	9107      	str	r1, [sp, #28]
   14dc6:	9004      	str	r0, [sp, #16]
   14dc8:	9103      	str	r1, [sp, #12]
   14dca:	e7ff      	b.n	14dcc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x12>
   14dcc:	9804      	ldr	r0, [sp, #16]
   14dce:	6801      	ldr	r1, [r0, #0]
   14dd0:	9803      	ldr	r0, [sp, #12]
   14dd2:	f7fd faf6 	bl	123c2 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   14dd6:	9002      	str	r0, [sp, #8]
   14dd8:	9101      	str	r1, [sp, #4]
   14dda:	e7ff      	b.n	14ddc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x22>
    }
   14ddc:	9802      	ldr	r0, [sp, #8]
   14dde:	9901      	ldr	r1, [sp, #4]
   14de0:	b008      	add	sp, #32
   14de2:	bd80      	pop	{r7, pc}

00014de4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   14de4:	b580      	push	{r7, lr}
   14de6:	b088      	sub	sp, #32
   14de8:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   14dea:	1d01      	adds	r1, r0, #4
   14dec:	9106      	str	r1, [sp, #24]
   14dee:	9107      	str	r1, [sp, #28]
   14df0:	9004      	str	r0, [sp, #16]
   14df2:	9103      	str	r1, [sp, #12]
   14df4:	e7ff      	b.n	14df6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   14df6:	9804      	ldr	r0, [sp, #16]
   14df8:	6801      	ldr	r1, [r0, #0]
   14dfa:	9803      	ldr	r0, [sp, #12]
   14dfc:	f7fd fae1 	bl	123c2 <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   14e00:	9002      	str	r0, [sp, #8]
   14e02:	9101      	str	r1, [sp, #4]
   14e04:	e7ff      	b.n	14e06 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   14e06:	9802      	ldr	r0, [sp, #8]
   14e08:	9901      	ldr	r1, [sp, #4]
   14e0a:	b008      	add	sp, #32
   14e0c:	bd80      	pop	{r7, pc}

00014e0e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   14e0e:	b580      	push	{r7, lr}
   14e10:	b082      	sub	sp, #8
   14e12:	9001      	str	r0, [sp, #4]
        N::to_usize()
   14e14:	f000 f964 	bl	150e0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   14e18:	9000      	str	r0, [sp, #0]
   14e1a:	e7ff      	b.n	14e1c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   14e1c:	9800      	ldr	r0, [sp, #0]
   14e1e:	b002      	add	sp, #8
   14e20:	bd80      	pop	{r7, pc}

00014e22 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>:
    pub(crate) fn capacity(&self) -> usize {
   14e22:	b580      	push	{r7, lr}
   14e24:	b082      	sub	sp, #8
   14e26:	9001      	str	r0, [sp, #4]
        N::to_usize()
   14e28:	f000 f8b2 	bl	14f90 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>
   14e2c:	9000      	str	r0, [sp, #0]
   14e2e:	e7ff      	b.n	14e30 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE+0xe>
    }
   14e30:	9800      	ldr	r0, [sp, #0]
   14e32:	b002      	add	sp, #8
   14e34:	bd80      	pop	{r7, pc}

00014e36 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   14e36:	b580      	push	{r7, lr}
   14e38:	b08a      	sub	sp, #40	; 0x28
   14e3a:	9007      	str	r0, [sp, #28]
   14e3c:	9108      	str	r1, [sp, #32]
   14e3e:	9106      	str	r1, [sp, #24]
   14e40:	9005      	str	r0, [sp, #20]
   14e42:	e7ff      	b.n	14e44 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
            while len < self.len {
   14e44:	9805      	ldr	r0, [sp, #20]
   14e46:	6801      	ldr	r1, [r0, #0]
   14e48:	9a06      	ldr	r2, [sp, #24]
   14e4a:	428a      	cmp	r2, r1
   14e4c:	d302      	bcc.n	14e54 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1e>
   14e4e:	e7ff      	b.n	14e50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1a>
    }
   14e50:	b00a      	add	sp, #40	; 0x28
   14e52:	bd80      	pop	{r7, pc}
                self.len -= 1;
   14e54:	9805      	ldr	r0, [sp, #20]
   14e56:	6801      	ldr	r1, [r0, #0]
   14e58:	1e4a      	subs	r2, r1, #1
   14e5a:	2901      	cmp	r1, #1
   14e5c:	9204      	str	r2, [sp, #16]
   14e5e:	d314      	bcc.n	14e8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x54>
   14e60:	e7ff      	b.n	14e62 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x2c>
   14e62:	9804      	ldr	r0, [sp, #16]
   14e64:	9905      	ldr	r1, [sp, #20]
   14e66:	6008      	str	r0, [r1, #0]
                let len = self.len;
   14e68:	680a      	ldr	r2, [r1, #0]
   14e6a:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   14e6c:	4608      	mov	r0, r1
   14e6e:	9203      	str	r2, [sp, #12]
   14e70:	f7ff fe8c 	bl	14b8c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>
   14e74:	9002      	str	r0, [sp, #8]
   14e76:	9101      	str	r1, [sp, #4]
   14e78:	e7ff      	b.n	14e7a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x44>
   14e7a:	9802      	ldr	r0, [sp, #8]
   14e7c:	9901      	ldr	r1, [sp, #4]
   14e7e:	9a03      	ldr	r2, [sp, #12]
   14e80:	f7fc fe79 	bl	11b76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   14e84:	e7ff      	b.n	14e86 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x50>
   14e86:	e7ff      	b.n	14e88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x52>
            while len < self.len {
   14e88:	e7dc      	b.n	14e44 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
                self.len -= 1;
   14e8a:	f24f 0010 	movw	r0, #61456	; 0xf010
   14e8e:	f2c0 0001 	movt	r0, #1
   14e92:	f64e 72fc 	movw	r2, #61436	; 0xeffc
   14e96:	f2c0 0201 	movt	r2, #1
   14e9a:	2121      	movs	r1, #33	; 0x21
   14e9c:	f000 fb1c 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14ea0:	defe      	udf	#254	; 0xfe

00014ea2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   14ea2:	b580      	push	{r7, lr}
   14ea4:	b08a      	sub	sp, #40	; 0x28
   14ea6:	9007      	str	r0, [sp, #28]
   14ea8:	9108      	str	r1, [sp, #32]
   14eaa:	9106      	str	r1, [sp, #24]
   14eac:	9005      	str	r0, [sp, #20]
   14eae:	e7ff      	b.n	14eb0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   14eb0:	9805      	ldr	r0, [sp, #20]
   14eb2:	6801      	ldr	r1, [r0, #0]
   14eb4:	9a06      	ldr	r2, [sp, #24]
   14eb6:	428a      	cmp	r2, r1
   14eb8:	d302      	bcc.n	14ec0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   14eba:	e7ff      	b.n	14ebc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   14ebc:	b00a      	add	sp, #40	; 0x28
   14ebe:	bd80      	pop	{r7, pc}
                self.len -= 1;
   14ec0:	9805      	ldr	r0, [sp, #20]
   14ec2:	6801      	ldr	r1, [r0, #0]
   14ec4:	1e4a      	subs	r2, r1, #1
   14ec6:	2901      	cmp	r1, #1
   14ec8:	9204      	str	r2, [sp, #16]
   14eca:	d314      	bcc.n	14ef6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   14ecc:	e7ff      	b.n	14ece <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   14ece:	9804      	ldr	r0, [sp, #16]
   14ed0:	9905      	ldr	r1, [sp, #20]
   14ed2:	6008      	str	r0, [r1, #0]
                let len = self.len;
   14ed4:	680a      	ldr	r2, [r1, #0]
   14ed6:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   14ed8:	4608      	mov	r0, r1
   14eda:	9203      	str	r2, [sp, #12]
   14edc:	f7ff fe41 	bl	14b62 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   14ee0:	9002      	str	r0, [sp, #8]
   14ee2:	9101      	str	r1, [sp, #4]
   14ee4:	e7ff      	b.n	14ee6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   14ee6:	9802      	ldr	r0, [sp, #8]
   14ee8:	9901      	ldr	r1, [sp, #4]
   14eea:	9a03      	ldr	r2, [sp, #12]
   14eec:	f7fc fe43 	bl	11b76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   14ef0:	e7ff      	b.n	14ef2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   14ef2:	e7ff      	b.n	14ef4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   14ef4:	e7dc      	b.n	14eb0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   14ef6:	f24f 0010 	movw	r0, #61456	; 0xf010
   14efa:	f2c0 0001 	movt	r0, #1
   14efe:	f64e 72fc 	movw	r2, #61436	; 0xeffc
   14f02:	f2c0 0201 	movt	r2, #1
   14f06:	2121      	movs	r1, #33	; 0x21
   14f08:	f000 fae6 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14f0c:	defe      	udf	#254	; 0xfe

00014f0e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   14f0e:	b580      	push	{r7, lr}
   14f10:	b084      	sub	sp, #16
   14f12:	460a      	mov	r2, r1
   14f14:	9002      	str	r0, [sp, #8]
   14f16:	f88d 100f 	strb.w	r1, [sp, #15]
   14f1a:	9201      	str	r2, [sp, #4]
   14f1c:	f7f4 f944 	bl	91a8 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   14f20:	e7ff      	b.n	14f22 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   14f22:	b004      	add	sp, #16
   14f24:	bd80      	pop	{r7, pc}

00014f26 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   14f26:	b081      	sub	sp, #4
   14f28:	9000      	str	r0, [sp, #0]
   14f2a:	7800      	ldrb	r0, [r0, #0]
   14f2c:	b001      	add	sp, #4
   14f2e:	4770      	bx	lr

00014f30 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   14f30:	b580      	push	{r7, lr}
   14f32:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14f34:	f000 f9da 	bl	152ec <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14f38:	9003      	str	r0, [sp, #12]
   14f3a:	e7ff      	b.n	14f3c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   14f3c:	9803      	ldr	r0, [sp, #12]
   14f3e:	f000 f9db 	bl	152f8 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14f42:	9002      	str	r0, [sp, #8]
   14f44:	e7ff      	b.n	14f46 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   14f46:	f000 f8cb 	bl	150e0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   14f4a:	9001      	str	r0, [sp, #4]
   14f4c:	e7ff      	b.n	14f4e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   14f4e:	9801      	ldr	r0, [sp, #4]
   14f50:	0041      	lsls	r1, r0, #1
   14f52:	9100      	str	r1, [sp, #0]
   14f54:	e7ff      	b.n	14f56 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   14f56:	9802      	ldr	r0, [sp, #8]
   14f58:	9900      	ldr	r1, [sp, #0]
   14f5a:	4308      	orrs	r0, r1
    }
   14f5c:	b004      	add	sp, #16
   14f5e:	bd80      	pop	{r7, pc}

00014f60 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   14f60:	b580      	push	{r7, lr}
   14f62:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14f64:	f000 f9c2 	bl	152ec <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14f68:	9003      	str	r0, [sp, #12]
   14f6a:	e7ff      	b.n	14f6c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   14f6c:	9803      	ldr	r0, [sp, #12]
   14f6e:	f000 f9c3 	bl	152f8 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14f72:	9002      	str	r0, [sp, #8]
   14f74:	e7ff      	b.n	14f76 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   14f76:	f000 f86b 	bl	15050 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   14f7a:	9001      	str	r0, [sp, #4]
   14f7c:	e7ff      	b.n	14f7e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   14f7e:	9801      	ldr	r0, [sp, #4]
   14f80:	0041      	lsls	r1, r0, #1
   14f82:	9100      	str	r1, [sp, #0]
   14f84:	e7ff      	b.n	14f86 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   14f86:	9802      	ldr	r0, [sp, #8]
   14f88:	9900      	ldr	r1, [sp, #0]
   14f8a:	4308      	orrs	r0, r1
    }
   14f8c:	b004      	add	sp, #16
   14f8e:	bd80      	pop	{r7, pc}

00014f90 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>:
    fn to_usize() -> usize {
   14f90:	b580      	push	{r7, lr}
   14f92:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14f94:	f000 f9aa 	bl	152ec <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14f98:	9003      	str	r0, [sp, #12]
   14f9a:	e7ff      	b.n	14f9c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0xc>
   14f9c:	9803      	ldr	r0, [sp, #12]
   14f9e:	f000 f9ab 	bl	152f8 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14fa2:	9002      	str	r0, [sp, #8]
   14fa4:	e7ff      	b.n	14fa6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x16>
   14fa6:	f000 f8fb 	bl	151a0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>
   14faa:	9001      	str	r0, [sp, #4]
   14fac:	e7ff      	b.n	14fae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x1e>
   14fae:	9801      	ldr	r0, [sp, #4]
   14fb0:	0041      	lsls	r1, r0, #1
   14fb2:	9100      	str	r1, [sp, #0]
   14fb4:	e7ff      	b.n	14fb6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x26>
   14fb6:	9802      	ldr	r0, [sp, #8]
   14fb8:	9900      	ldr	r1, [sp, #0]
   14fba:	4308      	orrs	r0, r1
    }
   14fbc:	b004      	add	sp, #16
   14fbe:	bd80      	pop	{r7, pc}

00014fc0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   14fc0:	b580      	push	{r7, lr}
   14fc2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14fc4:	f000 f992 	bl	152ec <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14fc8:	9003      	str	r0, [sp, #12]
   14fca:	e7ff      	b.n	14fcc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   14fcc:	9803      	ldr	r0, [sp, #12]
   14fce:	f000 f993 	bl	152f8 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14fd2:	9002      	str	r0, [sp, #8]
   14fd4:	e7ff      	b.n	14fd6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   14fd6:	f000 f80b 	bl	14ff0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   14fda:	9001      	str	r0, [sp, #4]
   14fdc:	e7ff      	b.n	14fde <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   14fde:	9801      	ldr	r0, [sp, #4]
   14fe0:	0041      	lsls	r1, r0, #1
   14fe2:	9100      	str	r1, [sp, #0]
   14fe4:	e7ff      	b.n	14fe6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   14fe6:	9802      	ldr	r0, [sp, #8]
   14fe8:	9900      	ldr	r1, [sp, #0]
   14fea:	4308      	orrs	r0, r1
    }
   14fec:	b004      	add	sp, #16
   14fee:	bd80      	pop	{r7, pc}

00014ff0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   14ff0:	b580      	push	{r7, lr}
   14ff2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14ff4:	f000 f97a 	bl	152ec <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14ff8:	9003      	str	r0, [sp, #12]
   14ffa:	e7ff      	b.n	14ffc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   14ffc:	9803      	ldr	r0, [sp, #12]
   14ffe:	f000 f97b 	bl	152f8 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15002:	9002      	str	r0, [sp, #8]
   15004:	e7ff      	b.n	15006 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   15006:	f000 f89b 	bl	15140 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   1500a:	9001      	str	r0, [sp, #4]
   1500c:	e7ff      	b.n	1500e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   1500e:	9801      	ldr	r0, [sp, #4]
   15010:	0041      	lsls	r1, r0, #1
   15012:	9100      	str	r1, [sp, #0]
   15014:	e7ff      	b.n	15016 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   15016:	9802      	ldr	r0, [sp, #8]
   15018:	9900      	ldr	r1, [sp, #0]
   1501a:	4308      	orrs	r0, r1
    }
   1501c:	b004      	add	sp, #16
   1501e:	bd80      	pop	{r7, pc}

00015020 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   15020:	b580      	push	{r7, lr}
   15022:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15024:	f000 f962 	bl	152ec <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15028:	9003      	str	r0, [sp, #12]
   1502a:	e7ff      	b.n	1502c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   1502c:	9803      	ldr	r0, [sp, #12]
   1502e:	f000 f963 	bl	152f8 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15032:	9002      	str	r0, [sp, #8]
   15034:	e7ff      	b.n	15036 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   15036:	f7ff ff7b 	bl	14f30 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   1503a:	9001      	str	r0, [sp, #4]
   1503c:	e7ff      	b.n	1503e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   1503e:	9801      	ldr	r0, [sp, #4]
   15040:	0041      	lsls	r1, r0, #1
   15042:	9100      	str	r1, [sp, #0]
   15044:	e7ff      	b.n	15046 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   15046:	9802      	ldr	r0, [sp, #8]
   15048:	9900      	ldr	r1, [sp, #0]
   1504a:	4308      	orrs	r0, r1
    }
   1504c:	b004      	add	sp, #16
   1504e:	bd80      	pop	{r7, pc}

00015050 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   15050:	b580      	push	{r7, lr}
   15052:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15054:	f000 f94a 	bl	152ec <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15058:	9003      	str	r0, [sp, #12]
   1505a:	e7ff      	b.n	1505c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   1505c:	9803      	ldr	r0, [sp, #12]
   1505e:	f000 f94b 	bl	152f8 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15062:	9002      	str	r0, [sp, #8]
   15064:	e7ff      	b.n	15066 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   15066:	f000 f823 	bl	150b0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   1506a:	9001      	str	r0, [sp, #4]
   1506c:	e7ff      	b.n	1506e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   1506e:	9801      	ldr	r0, [sp, #4]
   15070:	0041      	lsls	r1, r0, #1
   15072:	9100      	str	r1, [sp, #0]
   15074:	e7ff      	b.n	15076 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   15076:	9802      	ldr	r0, [sp, #8]
   15078:	9900      	ldr	r1, [sp, #0]
   1507a:	4308      	orrs	r0, r1
    }
   1507c:	b004      	add	sp, #16
   1507e:	bd80      	pop	{r7, pc}

00015080 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   15080:	b580      	push	{r7, lr}
   15082:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15084:	f000 f932 	bl	152ec <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15088:	9003      	str	r0, [sp, #12]
   1508a:	e7ff      	b.n	1508c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   1508c:	9803      	ldr	r0, [sp, #12]
   1508e:	f000 f933 	bl	152f8 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15092:	9002      	str	r0, [sp, #8]
   15094:	e7ff      	b.n	15096 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   15096:	f000 f86b 	bl	15170 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   1509a:	9001      	str	r0, [sp, #4]
   1509c:	e7ff      	b.n	1509e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   1509e:	9801      	ldr	r0, [sp, #4]
   150a0:	0041      	lsls	r1, r0, #1
   150a2:	9100      	str	r1, [sp, #0]
   150a4:	e7ff      	b.n	150a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   150a6:	9802      	ldr	r0, [sp, #8]
   150a8:	9900      	ldr	r1, [sp, #0]
   150aa:	4308      	orrs	r0, r1
    }
   150ac:	b004      	add	sp, #16
   150ae:	bd80      	pop	{r7, pc}

000150b0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   150b0:	b580      	push	{r7, lr}
   150b2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   150b4:	f000 f91a 	bl	152ec <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   150b8:	9003      	str	r0, [sp, #12]
   150ba:	e7ff      	b.n	150bc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   150bc:	9803      	ldr	r0, [sp, #12]
   150be:	f000 f91b 	bl	152f8 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   150c2:	9002      	str	r0, [sp, #8]
   150c4:	e7ff      	b.n	150c6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   150c6:	f000 f823 	bl	15110 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   150ca:	9001      	str	r0, [sp, #4]
   150cc:	e7ff      	b.n	150ce <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   150ce:	9801      	ldr	r0, [sp, #4]
   150d0:	0041      	lsls	r1, r0, #1
   150d2:	9100      	str	r1, [sp, #0]
   150d4:	e7ff      	b.n	150d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   150d6:	9802      	ldr	r0, [sp, #8]
   150d8:	9900      	ldr	r1, [sp, #0]
   150da:	4308      	orrs	r0, r1
    }
   150dc:	b004      	add	sp, #16
   150de:	bd80      	pop	{r7, pc}

000150e0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   150e0:	b580      	push	{r7, lr}
   150e2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   150e4:	f000 f904 	bl	152f0 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   150e8:	9003      	str	r0, [sp, #12]
   150ea:	e7ff      	b.n	150ec <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   150ec:	9803      	ldr	r0, [sp, #12]
   150ee:	f000 f903 	bl	152f8 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   150f2:	9002      	str	r0, [sp, #8]
   150f4:	e7ff      	b.n	150f6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   150f6:	f000 f8fd 	bl	152f4 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   150fa:	9001      	str	r0, [sp, #4]
   150fc:	e7ff      	b.n	150fe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   150fe:	9801      	ldr	r0, [sp, #4]
   15100:	0041      	lsls	r1, r0, #1
   15102:	9100      	str	r1, [sp, #0]
   15104:	e7ff      	b.n	15106 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   15106:	9802      	ldr	r0, [sp, #8]
   15108:	9900      	ldr	r1, [sp, #0]
   1510a:	4308      	orrs	r0, r1
    }
   1510c:	b004      	add	sp, #16
   1510e:	bd80      	pop	{r7, pc}

00015110 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   15110:	b580      	push	{r7, lr}
   15112:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15114:	f000 f8ea 	bl	152ec <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15118:	9003      	str	r0, [sp, #12]
   1511a:	e7ff      	b.n	1511c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   1511c:	9803      	ldr	r0, [sp, #12]
   1511e:	f000 f8eb 	bl	152f8 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15122:	9002      	str	r0, [sp, #8]
   15124:	e7ff      	b.n	15126 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   15126:	f7ff ff7b 	bl	15020 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   1512a:	9001      	str	r0, [sp, #4]
   1512c:	e7ff      	b.n	1512e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   1512e:	9801      	ldr	r0, [sp, #4]
   15130:	0041      	lsls	r1, r0, #1
   15132:	9100      	str	r1, [sp, #0]
   15134:	e7ff      	b.n	15136 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   15136:	9802      	ldr	r0, [sp, #8]
   15138:	9900      	ldr	r1, [sp, #0]
   1513a:	4308      	orrs	r0, r1
    }
   1513c:	b004      	add	sp, #16
   1513e:	bd80      	pop	{r7, pc}

00015140 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   15140:	b580      	push	{r7, lr}
   15142:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15144:	f000 f8d2 	bl	152ec <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15148:	9003      	str	r0, [sp, #12]
   1514a:	e7ff      	b.n	1514c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   1514c:	9803      	ldr	r0, [sp, #12]
   1514e:	f000 f8d3 	bl	152f8 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15152:	9002      	str	r0, [sp, #8]
   15154:	e7ff      	b.n	15156 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   15156:	f7ff ff03 	bl	14f60 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   1515a:	9001      	str	r0, [sp, #4]
   1515c:	e7ff      	b.n	1515e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   1515e:	9801      	ldr	r0, [sp, #4]
   15160:	0041      	lsls	r1, r0, #1
   15162:	9100      	str	r1, [sp, #0]
   15164:	e7ff      	b.n	15166 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   15166:	9802      	ldr	r0, [sp, #8]
   15168:	9900      	ldr	r1, [sp, #0]
   1516a:	4308      	orrs	r0, r1
    }
   1516c:	b004      	add	sp, #16
   1516e:	bd80      	pop	{r7, pc}

00015170 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   15170:	b580      	push	{r7, lr}
   15172:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15174:	f000 f8ba 	bl	152ec <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   15178:	9003      	str	r0, [sp, #12]
   1517a:	e7ff      	b.n	1517c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   1517c:	9803      	ldr	r0, [sp, #12]
   1517e:	f000 f8bb 	bl	152f8 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   15182:	9002      	str	r0, [sp, #8]
   15184:	e7ff      	b.n	15186 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   15186:	f7ff ff1b 	bl	14fc0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   1518a:	9001      	str	r0, [sp, #4]
   1518c:	e7ff      	b.n	1518e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   1518e:	9801      	ldr	r0, [sp, #4]
   15190:	0041      	lsls	r1, r0, #1
   15192:	9100      	str	r1, [sp, #0]
   15194:	e7ff      	b.n	15196 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   15196:	9802      	ldr	r0, [sp, #8]
   15198:	9900      	ldr	r1, [sp, #0]
   1519a:	4308      	orrs	r0, r1
    }
   1519c:	b004      	add	sp, #16
   1519e:	bd80      	pop	{r7, pc}

000151a0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>:
    fn to_usize() -> usize {
   151a0:	b580      	push	{r7, lr}
   151a2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   151a4:	f000 f8a2 	bl	152ec <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   151a8:	9003      	str	r0, [sp, #12]
   151aa:	e7ff      	b.n	151ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0xc>
   151ac:	9803      	ldr	r0, [sp, #12]
   151ae:	f000 f8a3 	bl	152f8 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   151b2:	9002      	str	r0, [sp, #8]
   151b4:	e7ff      	b.n	151b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x16>
   151b6:	f7ff ff63 	bl	15080 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   151ba:	9001      	str	r0, [sp, #4]
   151bc:	e7ff      	b.n	151be <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x1e>
   151be:	9801      	ldr	r0, [sp, #4]
   151c0:	0041      	lsls	r1, r0, #1
   151c2:	9100      	str	r1, [sp, #0]
   151c4:	e7ff      	b.n	151c6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x26>
   151c6:	9802      	ldr	r0, [sp, #8]
   151c8:	9900      	ldr	r1, [sp, #0]
   151ca:	4308      	orrs	r0, r1
    }
   151cc:	b004      	add	sp, #16
   151ce:	bd80      	pop	{r7, pc}

000151d0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E>:
   151d0:	b5d0      	push	{r4, r6, r7, lr}
   151d2:	af02      	add	r7, sp, #8
   151d4:	b0b4      	sub	sp, #208	; 0xd0
   151d6:	466c      	mov	r4, sp
   151d8:	f36f 0404 	bfc	r4, #0, #5
   151dc:	46a5      	mov	sp, r4
   151de:	9024      	str	r0, [sp, #144]	; 0x90
   151e0:	9125      	str	r1, [sp, #148]	; 0x94
   151e2:	9226      	str	r2, [sp, #152]	; 0x98
   151e4:	2320      	movs	r3, #32
   151e6:	932f      	str	r3, [sp, #188]	; 0xbc
   151e8:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   151ea:	9327      	str	r3, [sp, #156]	; 0x9c
   151ec:	920e      	str	r2, [sp, #56]	; 0x38
   151ee:	910d      	str	r1, [sp, #52]	; 0x34
   151f0:	900c      	str	r0, [sp, #48]	; 0x30
   151f2:	930b      	str	r3, [sp, #44]	; 0x2c
   151f4:	e7ff      	b.n	151f6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x26>
   151f6:	2000      	movs	r0, #0
   151f8:	900f      	str	r0, [sp, #60]	; 0x3c
   151fa:	e7ff      	b.n	151fc <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x2c>
   151fc:	980f      	ldr	r0, [sp, #60]	; 0x3c
   151fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15200:	4408      	add	r0, r1
   15202:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15204:	4290      	cmp	r0, r2
   15206:	d905      	bls.n	15214 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x44>
   15208:	e7ff      	b.n	1520a <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x3a>
   1520a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1520c:	990e      	ldr	r1, [sp, #56]	; 0x38
   1520e:	4288      	cmp	r0, r1
   15210:	d334      	bcc.n	1527c <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xac>
   15212:	e067      	b.n	152e4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x114>
   15214:	e7ff      	b.n	15216 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x46>
   15216:	a810      	add	r0, sp, #64	; 0x40
   15218:	9032      	str	r0, [sp, #200]	; 0xc8
   1521a:	9033      	str	r0, [sp, #204]	; 0xcc
   1521c:	e7ff      	b.n	1521e <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x4e>
   1521e:	a810      	add	r0, sp, #64	; 0x40
   15220:	4601      	mov	r1, r0
   15222:	9028      	str	r0, [sp, #160]	; 0xa0
   15224:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15226:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15228:	900a      	str	r0, [sp, #40]	; 0x28
   1522a:	4610      	mov	r0, r2
   1522c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1522e:	9109      	str	r1, [sp, #36]	; 0x24
   15230:	4619      	mov	r1, r3
   15232:	f7fc fc22 	bl	11a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15236:	4601      	mov	r1, r0
   15238:	9029      	str	r0, [sp, #164]	; 0xa4
   1523a:	9108      	str	r1, [sp, #32]
   1523c:	e7ff      	b.n	1523e <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x6e>
   1523e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   15240:	980d      	ldr	r0, [sp, #52]	; 0x34
   15242:	f7fc fc1a 	bl	11a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   15246:	4601      	mov	r1, r0
   15248:	902a      	str	r0, [sp, #168]	; 0xa8
   1524a:	9107      	str	r1, [sp, #28]
   1524c:	e7ff      	b.n	1524e <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x7e>
   1524e:	9808      	ldr	r0, [sp, #32]
   15250:	9909      	ldr	r1, [sp, #36]	; 0x24
   15252:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15254:	f7fc faad 	bl	117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15258:	e7ff      	b.n	1525a <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x8a>
   1525a:	9807      	ldr	r0, [sp, #28]
   1525c:	9908      	ldr	r1, [sp, #32]
   1525e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15260:	f7fc faa7 	bl	117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15264:	e7ff      	b.n	15266 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x96>
   15266:	9809      	ldr	r0, [sp, #36]	; 0x24
   15268:	9907      	ldr	r1, [sp, #28]
   1526a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1526c:	f7fc faa1 	bl	117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15270:	e7ff      	b.n	15272 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xa2>
   15272:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15274:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15276:	4408      	add	r0, r1
   15278:	900f      	str	r0, [sp, #60]	; 0x3c
   1527a:	e7bf      	b.n	151fc <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x2c>
   1527c:	e7ff      	b.n	1527e <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xae>
   1527e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   15280:	990e      	ldr	r1, [sp, #56]	; 0x38
   15282:	1a08      	subs	r0, r1, r0
   15284:	4602      	mov	r2, r0
   15286:	902b      	str	r0, [sp, #172]	; 0xac
   15288:	a81c      	add	r0, sp, #112	; 0x70
   1528a:	9030      	str	r0, [sp, #192]	; 0xc0
   1528c:	9031      	str	r0, [sp, #196]	; 0xc4
   1528e:	9206      	str	r2, [sp, #24]
   15290:	9005      	str	r0, [sp, #20]
   15292:	e7ff      	b.n	15294 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xc4>
   15294:	9805      	ldr	r0, [sp, #20]
   15296:	9905      	ldr	r1, [sp, #20]
   15298:	912c      	str	r1, [sp, #176]	; 0xb0
   1529a:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1529c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1529e:	9004      	str	r0, [sp, #16]
   152a0:	4610      	mov	r0, r2
   152a2:	f7fc fbea 	bl	11a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   152a6:	4601      	mov	r1, r0
   152a8:	902d      	str	r0, [sp, #180]	; 0xb4
   152aa:	9103      	str	r1, [sp, #12]
   152ac:	e7ff      	b.n	152ae <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xde>
   152ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
   152b0:	980d      	ldr	r0, [sp, #52]	; 0x34
   152b2:	f7fc fbe2 	bl	11a7a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   152b6:	4601      	mov	r1, r0
   152b8:	902e      	str	r0, [sp, #184]	; 0xb8
   152ba:	9102      	str	r1, [sp, #8]
   152bc:	e7ff      	b.n	152be <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xee>
   152be:	9803      	ldr	r0, [sp, #12]
   152c0:	9904      	ldr	r1, [sp, #16]
   152c2:	9a06      	ldr	r2, [sp, #24]
   152c4:	f7fc fa75 	bl	117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   152c8:	e7ff      	b.n	152ca <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0xfa>
   152ca:	9802      	ldr	r0, [sp, #8]
   152cc:	9903      	ldr	r1, [sp, #12]
   152ce:	9a06      	ldr	r2, [sp, #24]
   152d0:	f7fc fa6f 	bl	117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   152d4:	e7ff      	b.n	152d6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x106>
   152d6:	9804      	ldr	r0, [sp, #16]
   152d8:	9902      	ldr	r1, [sp, #8]
   152da:	9a06      	ldr	r2, [sp, #24]
   152dc:	f7fc fa69 	bl	117b2 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   152e0:	e7ff      	b.n	152e2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x112>
   152e2:	e7ff      	b.n	152e4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h4225096f81b73683E+0x114>
   152e4:	f1a7 0408 	sub.w	r4, r7, #8
   152e8:	46a5      	mov	sp, r4
   152ea:	bdd0      	pop	{r4, r6, r7, pc}

000152ec <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   152ec:	2000      	movs	r0, #0
        0
    }
   152ee:	4770      	bx	lr

000152f0 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   152f0:	2001      	movs	r0, #1
        1
    }
   152f2:	4770      	bx	lr

000152f4 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   152f4:	2000      	movs	r0, #0
    }
   152f6:	4770      	bx	lr

000152f8 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   152f8:	b081      	sub	sp, #4
   152fa:	4601      	mov	r1, r0
   152fc:	f88d 0003 	strb.w	r0, [sp, #3]
   15300:	b2c0      	uxtb	r0, r0
   15302:	b001      	add	sp, #4
   15304:	4770      	bx	lr

00015306 <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   15306:	4770      	bx	lr

00015308 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   15308:	b5b0      	push	{r4, r5, r7, lr}
   1530a:	b086      	sub	sp, #24
   1530c:	460c      	mov	r4, r1
   1530e:	4605      	mov	r5, r0
   15310:	f001 fb6b 	bl	169ea <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   15314:	b9a8      	cbnz	r0, 15342 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   15316:	f24f 0334 	movw	r3, #61492	; 0xf034
   1531a:	2200      	movs	r2, #0
   1531c:	f2c0 0301 	movt	r3, #1
   15320:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15324:	9205      	str	r2, [sp, #20]
   15326:	9304      	str	r3, [sp, #16]
   15328:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1532c:	2201      	movs	r2, #1
   1532e:	9201      	str	r2, [sp, #4]
   15330:	f24f 02f8 	movw	r2, #61688	; 0xf0f8
   15334:	f2c0 0201 	movt	r2, #1
   15338:	9200      	str	r2, [sp, #0]
   1533a:	466a      	mov	r2, sp
   1533c:	f000 fbc4 	bl	15ac8 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   15340:	b110      	cbz	r0, 15348 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   15342:	2001      	movs	r0, #1
   15344:	b006      	add	sp, #24
   15346:	bdb0      	pop	{r4, r5, r7, pc}
   15348:	1d28      	adds	r0, r5, #4
   1534a:	4621      	mov	r1, r4
   1534c:	b006      	add	sp, #24
   1534e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   15352:	f001 bb4a 	b.w	169ea <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

00015356 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   15356:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   1535a:	f243 6134 	movw	r1, #13876	; 0x3634
   1535e:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   15362:	f6cd 0131 	movt	r1, #55345	; 0xd831
   15366:	4770      	bx	lr

00015368 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   15368:	b570      	push	{r4, r5, r6, lr}
   1536a:	460e      	mov	r6, r1
   1536c:	3909      	subs	r1, #9
   1536e:	4604      	mov	r4, r0
   15370:	291e      	cmp	r1, #30
   15372:	d818      	bhi.n	153a6 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   15374:	2002      	movs	r0, #2
   15376:	2574      	movs	r5, #116	; 0x74
   15378:	e8df f001 	tbb	[pc, r1]
   1537c:	1c1c1019 	.word	0x1c1c1019
   15380:	1c1c1c29 	.word	0x1c1c1c29
   15384:	1c1c1c1c 	.word	0x1c1c1c1c
   15388:	1c1c1c1c 	.word	0x1c1c1c1c
   1538c:	1c1c1c1c 	.word	0x1c1c1c1c
   15390:	1c1c1c1c 	.word	0x1c1c1c1c
   15394:	1c1c171c 	.word	0x1c1c171c
   15398:	00171c1c 	.word	0x00171c1c
   1539c:	2002      	movs	r0, #2
   1539e:	256e      	movs	r5, #110	; 0x6e
   153a0:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   153a4:	bd70      	pop	{r4, r5, r6, pc}
   153a6:	2e5c      	cmp	r6, #92	; 0x5c
   153a8:	d104      	bne.n	153b4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   153aa:	2002      	movs	r0, #2
   153ac:	4635      	mov	r5, r6
   153ae:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   153b2:	bd70      	pop	{r4, r5, r6, pc}
   153b4:	2a00      	cmp	r2, #0
   153b6:	d040      	beq.n	1543a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   153b8:	f3c6 1083 	ubfx	r0, r6, #6, #4
   153bc:	0ab1      	lsrs	r1, r6, #10
   153be:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   153c2:	d309      	bcc.n	153d8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   153c4:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   153c8:	d137      	bne.n	1543a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   153ca:	211e      	movs	r1, #30
   153cc:	e00b      	b.n	153e6 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   153ce:	2002      	movs	r0, #2
   153d0:	2572      	movs	r5, #114	; 0x72
   153d2:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   153d6:	bd70      	pop	{r4, r5, r6, pc}
   153d8:	f64f 3264 	movw	r2, #64356	; 0xfb64
   153dc:	f2c0 0201 	movt	r2, #1
   153e0:	5c51      	ldrb	r1, [r2, r1]
   153e2:	291e      	cmp	r1, #30
   153e4:	d842      	bhi.n	1546c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   153e6:	f64f 32df 	movw	r2, #64479	; 0xfbdf
   153ea:	f2c0 0201 	movt	r2, #1
   153ee:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   153f2:	5c09      	ldrb	r1, [r1, r0]
   153f4:	298b      	cmp	r1, #139	; 0x8b
   153f6:	d231      	bcs.n	1545c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   153f8:	f64f 50d0 	movw	r0, #64976	; 0xfdd0
   153fc:	2301      	movs	r3, #1
   153fe:	f2c0 0001 	movt	r0, #1
   15402:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   15406:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   1540a:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   1540e:	f8d2 c004 	ldr.w	ip, [r2, #4]
   15412:	fa03 f501 	lsl.w	r5, r3, r1
   15416:	f1b1 0220 	subs.w	r2, r1, #32
   1541a:	f1c1 0120 	rsb	r1, r1, #32
   1541e:	bf58      	it	pl
   15420:	2500      	movpl	r5, #0
   15422:	2a00      	cmp	r2, #0
   15424:	ea00 0005 	and.w	r0, r0, r5
   15428:	fa23 f101 	lsr.w	r1, r3, r1
   1542c:	bf58      	it	pl
   1542e:	fa03 f102 	lslpl.w	r1, r3, r2
   15432:	ea01 010c 	and.w	r1, r1, ip
   15436:	4308      	orrs	r0, r1
   15438:	d105      	bne.n	15446 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   1543a:	4630      	mov	r0, r6
   1543c:	f001 f989 	bl	16752 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   15440:	b108      	cbz	r0, 15446 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   15442:	2001      	movs	r0, #1
   15444:	e7b2      	b.n	153ac <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   15446:	f046 0001 	orr.w	r0, r6, #1
   1544a:	2107      	movs	r1, #7
   1544c:	fab0 f080 	clz	r0, r0
   15450:	f04f 0e05 	mov.w	lr, #5
   15454:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   15458:	2003      	movs	r0, #3
   1545a:	e7a7      	b.n	153ac <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   1545c:	f64f 3054 	movw	r0, #64340	; 0xfb54
   15460:	228b      	movs	r2, #139	; 0x8b
   15462:	f2c0 0001 	movt	r0, #1
   15466:	f000 f84d 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1546a:	defe      	udf	#254	; 0xfe
   1546c:	f64f 3044 	movw	r0, #64324	; 0xfb44
   15470:	221f      	movs	r2, #31
   15472:	f2c0 0001 	movt	r0, #1
   15476:	f000 f845 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1547a:	defe      	udf	#254	; 0xfe

0001547c <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   1547c:	b08e      	sub	sp, #56	; 0x38
   1547e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   15482:	2002      	movs	r0, #2
   15484:	a90a      	add	r1, sp, #40	; 0x28
   15486:	9009      	str	r0, [sp, #36]	; 0x24
   15488:	9108      	str	r1, [sp, #32]
   1548a:	2100      	movs	r1, #0
   1548c:	9107      	str	r1, [sp, #28]
   1548e:	e9cd 0105 	strd	r0, r1, [sp, #20]
   15492:	f24f 2000 	movw	r0, #61952	; 0xf200
   15496:	f2c0 0001 	movt	r0, #1
   1549a:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1549e:	9004      	str	r0, [sp, #16]
   154a0:	f247 10af 	movw	r0, #29103	; 0x71af
   154a4:	f2c0 0001 	movt	r0, #1
   154a8:	900d      	str	r0, [sp, #52]	; 0x34
   154aa:	a802      	add	r0, sp, #8
   154ac:	900c      	str	r0, [sp, #48]	; 0x30
   154ae:	f247 10b9 	movw	r0, #29113	; 0x71b9
   154b2:	f2c0 0001 	movt	r0, #1
   154b6:	4661      	mov	r1, ip
   154b8:	900b      	str	r0, [sp, #44]	; 0x2c
   154ba:	4668      	mov	r0, sp
   154bc:	900a      	str	r0, [sp, #40]	; 0x28
   154be:	a804      	add	r0, sp, #16
   154c0:	f000 f840 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   154c4:	defe      	udf	#254	; 0xfe

000154c6 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   154c6:	68c0      	ldr	r0, [r0, #12]
   154c8:	4770      	bx	lr

000154ca <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   154ca:	4770      	bx	lr

000154cc <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   154cc:	e9d0 2100 	ldrd	r2, r1, [r0]
   154d0:	4610      	mov	r0, r2
   154d2:	4770      	bx	lr

000154d4 <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   154d4:	6880      	ldr	r0, [r0, #8]
   154d6:	4770      	bx	lr

000154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   154d8:	b088      	sub	sp, #32
   154da:	4694      	mov	ip, r2
   154dc:	f24f 0234 	movw	r2, #61492	; 0xf034
   154e0:	2300      	movs	r3, #0
   154e2:	f2c0 0201 	movt	r2, #1
   154e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   154ea:	4668      	mov	r0, sp
   154ec:	9305      	str	r3, [sp, #20]
   154ee:	4661      	mov	r1, ip
   154f0:	9204      	str	r2, [sp, #16]
   154f2:	2201      	movs	r2, #1
   154f4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   154f8:	9201      	str	r2, [sp, #4]
   154fa:	aa06      	add	r2, sp, #24
   154fc:	9200      	str	r2, [sp, #0]
   154fe:	f000 f821 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   15502:	defe      	udf	#254	; 0xfe

00015504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   15504:	b08c      	sub	sp, #48	; 0x30
   15506:	4603      	mov	r3, r0
   15508:	e9cd 1200 	strd	r1, r2, [sp]
   1550c:	2002      	movs	r0, #2
   1550e:	a908      	add	r1, sp, #32
   15510:	9007      	str	r0, [sp, #28]
   15512:	9106      	str	r1, [sp, #24]
   15514:	2100      	movs	r1, #0
   15516:	9105      	str	r1, [sp, #20]
   15518:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1551c:	f24f 2034 	movw	r0, #62004	; 0xf234
   15520:	f2c0 0001 	movt	r0, #1
   15524:	4669      	mov	r1, sp
   15526:	9002      	str	r0, [sp, #8]
   15528:	f247 00cb 	movw	r0, #28875	; 0x70cb
   1552c:	f2c0 0001 	movt	r0, #1
   15530:	900b      	str	r0, [sp, #44]	; 0x2c
   15532:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   15536:	a801      	add	r0, sp, #4
   15538:	9008      	str	r0, [sp, #32]
   1553a:	a802      	add	r0, sp, #8
   1553c:	4619      	mov	r1, r3
   1553e:	f000 f801 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   15542:	defe      	udf	#254	; 0xfe

00015544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   15544:	b084      	sub	sp, #16
   15546:	e9cd 0102 	strd	r0, r1, [sp, #8]
   1554a:	f24f 2010 	movw	r0, #61968	; 0xf210
   1554e:	f2c0 0001 	movt	r0, #1
   15552:	9001      	str	r0, [sp, #4]
   15554:	f24f 0034 	movw	r0, #61492	; 0xf034
   15558:	f2c0 0001 	movt	r0, #1
   1555c:	9000      	str	r0, [sp, #0]
   1555e:	4668      	mov	r0, sp
   15560:	f7f3 f8b6 	bl	86d0 <rust_begin_unwind>
   15564:	defe      	udf	#254	; 0xfe

00015566 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   15566:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1556a:	b081      	sub	sp, #4
   1556c:	2a00      	cmp	r2, #0
   1556e:	f000 80fe 	beq.w	1576e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   15572:	4690      	mov	r8, r2
   15574:	468a      	mov	sl, r1
   15576:	4681      	mov	r9, r0
   15578:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1557c:	7800      	ldrb	r0, [r0, #0]
   1557e:	b948      	cbnz	r0, 15594 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   15580:	e014      	b.n	155ac <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   15582:	44da      	add	sl, fp
   15584:	2c00      	cmp	r4, #0
   15586:	46a0      	mov	r8, r4
   15588:	f000 80f1 	beq.w	1576e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   1558c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   15590:	7800      	ldrb	r0, [r0, #0]
   15592:	b158      	cbz	r0, 155ac <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   15594:	e9d9 0100 	ldrd	r0, r1, [r9]
   15598:	2204      	movs	r2, #4
   1559a:	68cb      	ldr	r3, [r1, #12]
   1559c:	f24f 1154 	movw	r1, #61780	; 0xf154
   155a0:	f2c0 0101 	movt	r1, #1
   155a4:	4798      	blx	r3
   155a6:	2800      	cmp	r0, #0
   155a8:	f040 80e5 	bne.w	15776 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   155ac:	f04f 0b00 	mov.w	fp, #0
   155b0:	4641      	mov	r1, r8
   155b2:	e008      	b.n	155c6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   155b4:	ebb8 010b 	subs.w	r1, r8, fp
   155b8:	f04f 0000 	mov.w	r0, #0
   155bc:	bf38      	it	cc
   155be:	4601      	movcc	r1, r0
   155c0:	45c3      	cmp	fp, r8
   155c2:	f200 80a5 	bhi.w	15710 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   155c6:	eb0a 0e0b 	add.w	lr, sl, fp
   155ca:	2000      	movs	r0, #0
   155cc:	f01e 0203 	ands.w	r2, lr, #3
   155d0:	bf18      	it	ne
   155d2:	f1d2 0c04 	rsbsne	ip, r2, #4
   155d6:	d120      	bne.n	1561a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   155d8:	2908      	cmp	r1, #8
   155da:	d357      	bcc.n	1568c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   155dc:	f1a1 0208 	sub.w	r2, r1, #8
   155e0:	4290      	cmp	r0, r2
   155e2:	d853      	bhi.n	1568c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   155e4:	f85e 3000 	ldr.w	r3, [lr, r0]
   155e8:	eb0e 0700 	add.w	r7, lr, r0
   155ec:	687f      	ldr	r7, [r7, #4]
   155ee:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   155f2:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   155f6:	ea26 0303 	bic.w	r3, r6, r3
   155fa:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   155fe:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   15602:	ea26 0707 	bic.w	r7, r6, r7
   15606:	433b      	orrs	r3, r7
   15608:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   1560c:	d102      	bne.n	15614 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   1560e:	3008      	adds	r0, #8
   15610:	4290      	cmp	r0, r2
   15612:	d9e7      	bls.n	155e4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   15614:	4288      	cmp	r0, r1
   15616:	d939      	bls.n	1568c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   15618:	e0b1      	b.n	1577e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   1561a:	458c      	cmp	ip, r1
   1561c:	bf88      	it	hi
   1561e:	468c      	movhi	ip, r1
   15620:	eb0e 060c 	add.w	r6, lr, ip
   15624:	2000      	movs	r0, #0
   15626:	4663      	mov	r3, ip
   15628:	4677      	mov	r7, lr
   1562a:	b363      	cbz	r3, 15686 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   1562c:	463a      	mov	r2, r7
   1562e:	f812 4b01 	ldrb.w	r4, [r2], #1
   15632:	f1b4 050a 	subs.w	r5, r4, #10
   15636:	bf18      	it	ne
   15638:	2501      	movne	r5, #1
   1563a:	4428      	add	r0, r5
   1563c:	2c0a      	cmp	r4, #10
   1563e:	d059      	beq.n	156f4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   15640:	42b2      	cmp	r2, r6
   15642:	d020      	beq.n	15686 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15644:	787a      	ldrb	r2, [r7, #1]
   15646:	f1b2 040a 	subs.w	r4, r2, #10
   1564a:	bf18      	it	ne
   1564c:	2401      	movne	r4, #1
   1564e:	4420      	add	r0, r4
   15650:	2a0a      	cmp	r2, #10
   15652:	d04f      	beq.n	156f4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   15654:	1cba      	adds	r2, r7, #2
   15656:	42b2      	cmp	r2, r6
   15658:	d015      	beq.n	15686 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   1565a:	78ba      	ldrb	r2, [r7, #2]
   1565c:	f1b2 040a 	subs.w	r4, r2, #10
   15660:	bf18      	it	ne
   15662:	2401      	movne	r4, #1
   15664:	4420      	add	r0, r4
   15666:	2a0a      	cmp	r2, #10
   15668:	d044      	beq.n	156f4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   1566a:	1cfa      	adds	r2, r7, #3
   1566c:	42b2      	cmp	r2, r6
   1566e:	d00a      	beq.n	15686 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   15670:	78fa      	ldrb	r2, [r7, #3]
   15672:	3b04      	subs	r3, #4
   15674:	3704      	adds	r7, #4
   15676:	f1b2 040a 	subs.w	r4, r2, #10
   1567a:	bf18      	it	ne
   1567c:	2401      	movne	r4, #1
   1567e:	4420      	add	r0, r4
   15680:	2a0a      	cmp	r2, #10
   15682:	d1d2      	bne.n	1562a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   15684:	e036      	b.n	156f4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   15686:	4660      	mov	r0, ip
   15688:	2908      	cmp	r1, #8
   1568a:	d2a7      	bcs.n	155dc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   1568c:	eb0e 0700 	add.w	r7, lr, r0
   15690:	eb0e 0201 	add.w	r2, lr, r1
   15694:	1a0e      	subs	r6, r1, r0
   15696:	2100      	movs	r1, #0
   15698:	b3ce      	cbz	r6, 1570e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   1569a:	463b      	mov	r3, r7
   1569c:	f813 5b01 	ldrb.w	r5, [r3], #1
   156a0:	f1b5 040a 	subs.w	r4, r5, #10
   156a4:	bf18      	it	ne
   156a6:	2401      	movne	r4, #1
   156a8:	4421      	add	r1, r4
   156aa:	2d0a      	cmp	r5, #10
   156ac:	d021      	beq.n	156f2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   156ae:	4293      	cmp	r3, r2
   156b0:	d02d      	beq.n	1570e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   156b2:	787b      	ldrb	r3, [r7, #1]
   156b4:	f1b3 050a 	subs.w	r5, r3, #10
   156b8:	bf18      	it	ne
   156ba:	2501      	movne	r5, #1
   156bc:	4429      	add	r1, r5
   156be:	2b0a      	cmp	r3, #10
   156c0:	d017      	beq.n	156f2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   156c2:	1cbb      	adds	r3, r7, #2
   156c4:	4293      	cmp	r3, r2
   156c6:	d022      	beq.n	1570e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   156c8:	78bb      	ldrb	r3, [r7, #2]
   156ca:	f1b3 050a 	subs.w	r5, r3, #10
   156ce:	bf18      	it	ne
   156d0:	2501      	movne	r5, #1
   156d2:	4429      	add	r1, r5
   156d4:	2b0a      	cmp	r3, #10
   156d6:	d00c      	beq.n	156f2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   156d8:	1cfb      	adds	r3, r7, #3
   156da:	4293      	cmp	r3, r2
   156dc:	d017      	beq.n	1570e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   156de:	78fb      	ldrb	r3, [r7, #3]
   156e0:	3e04      	subs	r6, #4
   156e2:	3704      	adds	r7, #4
   156e4:	f1b3 050a 	subs.w	r5, r3, #10
   156e8:	bf18      	it	ne
   156ea:	2501      	movne	r5, #1
   156ec:	4429      	add	r1, r5
   156ee:	2b0a      	cmp	r3, #10
   156f0:	d1d2      	bne.n	15698 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   156f2:	4408      	add	r0, r1
   156f4:	4458      	add	r0, fp
   156f6:	f100 0b01 	add.w	fp, r0, #1
   156fa:	4540      	cmp	r0, r8
   156fc:	f4bf af5a 	bcs.w	155b4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   15700:	f81a 0000 	ldrb.w	r0, [sl, r0]
   15704:	280a      	cmp	r0, #10
   15706:	f47f af55 	bne.w	155b4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   1570a:	2001      	movs	r0, #1
   1570c:	e001      	b.n	15712 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   1570e:	2000      	movs	r0, #0
   15710:	46c3      	mov	fp, r8
   15712:	f8d9 1008 	ldr.w	r1, [r9, #8]
   15716:	eba8 040b 	sub.w	r4, r8, fp
   1571a:	7008      	strb	r0, [r1, #0]
   1571c:	fab4 f084 	clz	r0, r4
   15720:	0942      	lsrs	r2, r0, #5
   15722:	fabb f08b 	clz	r0, fp
   15726:	0943      	lsrs	r3, r0, #5
   15728:	e9d9 0100 	ldrd	r0, r1, [r9]
   1572c:	ea53 0602 	orrs.w	r6, r3, r2
   15730:	d106      	bne.n	15740 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   15732:	45d8      	cmp	r8, fp
   15734:	d926      	bls.n	15784 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   15736:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   1573a:	f112 0f41 	cmn.w	r2, #65	; 0x41
   1573e:	dd21      	ble.n	15784 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   15740:	68cb      	ldr	r3, [r1, #12]
   15742:	4651      	mov	r1, sl
   15744:	465a      	mov	r2, fp
   15746:	4798      	blx	r3
   15748:	b9a8      	cbnz	r0, 15776 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   1574a:	2e00      	cmp	r6, #0
   1574c:	f47f af19 	bne.w	15582 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   15750:	45d8      	cmp	r8, fp
   15752:	d905      	bls.n	15760 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   15754:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   15758:	f110 0f41 	cmn.w	r0, #65	; 0x41
   1575c:	f73f af11 	bgt.w	15582 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   15760:	4650      	mov	r0, sl
   15762:	4641      	mov	r1, r8
   15764:	465a      	mov	r2, fp
   15766:	4643      	mov	r3, r8
   15768:	f000 fe4d 	bl	16406 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   1576c:	defe      	udf	#254	; 0xfe
   1576e:	2000      	movs	r0, #0
   15770:	b001      	add	sp, #4
   15772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15776:	2001      	movs	r0, #1
   15778:	b001      	add	sp, #4
   1577a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1577e:	f000 fe20 	bl	163c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   15782:	defe      	udf	#254	; 0xfe
   15784:	4650      	mov	r0, sl
   15786:	4641      	mov	r1, r8
   15788:	2200      	movs	r2, #0
   1578a:	465b      	mov	r3, fp
   1578c:	f000 fe3b 	bl	16406 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   15790:	defe      	udf	#254	; 0xfe

00015792 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   15792:	b5f0      	push	{r4, r5, r6, r7, lr}
   15794:	b08d      	sub	sp, #52	; 0x34
   15796:	4604      	mov	r4, r0
   15798:	7a00      	ldrb	r0, [r0, #8]
   1579a:	b138      	cbz	r0, 157ac <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   1579c:	2001      	movs	r0, #1
   1579e:	6861      	ldr	r1, [r4, #4]
   157a0:	7220      	strb	r0, [r4, #8]
   157a2:	1c48      	adds	r0, r1, #1
   157a4:	6060      	str	r0, [r4, #4]
   157a6:	4620      	mov	r0, r4
   157a8:	b00d      	add	sp, #52	; 0x34
   157aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   157ac:	4616      	mov	r6, r2
   157ae:	460d      	mov	r5, r1
   157b0:	e9d4 1200 	ldrd	r1, r2, [r4]
   157b4:	7808      	ldrb	r0, [r1, #0]
   157b6:	0740      	lsls	r0, r0, #29
   157b8:	d419      	bmi.n	157ee <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   157ba:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   157be:	f24f 215e 	movw	r1, #62046	; 0xf25e
   157c2:	f24f 2c62 	movw	ip, #62050	; 0xf262
   157c6:	f2c0 0101 	movt	r1, #1
   157ca:	2a00      	cmp	r2, #0
   157cc:	f2c0 0c01 	movt	ip, #1
   157d0:	bf08      	it	eq
   157d2:	4661      	moveq	r1, ip
   157d4:	68db      	ldr	r3, [r3, #12]
   157d6:	f04f 0202 	mov.w	r2, #2
   157da:	bf08      	it	eq
   157dc:	2201      	moveq	r2, #1
   157de:	4798      	blx	r3
   157e0:	2800      	cmp	r0, #0
   157e2:	d1db      	bne.n	1579c <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   157e4:	68f2      	ldr	r2, [r6, #12]
   157e6:	4628      	mov	r0, r5
   157e8:	6821      	ldr	r1, [r4, #0]
   157ea:	4790      	blx	r2
   157ec:	e7d7      	b.n	1579e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   157ee:	b95a      	cbnz	r2, 15808 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   157f0:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   157f4:	2202      	movs	r2, #2
   157f6:	68cb      	ldr	r3, [r1, #12]
   157f8:	f24f 2160 	movw	r1, #62048	; 0xf260
   157fc:	f2c0 0101 	movt	r1, #1
   15800:	4798      	blx	r3
   15802:	2800      	cmp	r0, #0
   15804:	d1ca      	bne.n	1579c <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   15806:	6821      	ldr	r1, [r4, #0]
   15808:	2001      	movs	r0, #1
   1580a:	f10d 030f 	add.w	r3, sp, #15
   1580e:	f88d 000f 	strb.w	r0, [sp, #15]
   15812:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   15816:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   1581a:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   1581e:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   15822:	f891 1020 	ldrb.w	r1, [r1, #32]
   15826:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   1582a:	a904      	add	r1, sp, #16
   1582c:	e9cd 0204 	strd	r0, r2, [sp, #16]
   15830:	f24f 2044 	movw	r0, #62020	; 0xf244
   15834:	f2c0 0001 	movt	r0, #1
   15838:	68f2      	ldr	r2, [r6, #12]
   1583a:	900b      	str	r0, [sp, #44]	; 0x2c
   1583c:	4668      	mov	r0, sp
   1583e:	900a      	str	r0, [sp, #40]	; 0x28
   15840:	4628      	mov	r0, r5
   15842:	e9cd 3708 	strd	r3, r7, [sp, #32]
   15846:	e9cd ce06 	strd	ip, lr, [sp, #24]
   1584a:	4790      	blx	r2
   1584c:	2800      	cmp	r0, #0
   1584e:	d1a5      	bne.n	1579c <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   15850:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   15854:	2202      	movs	r2, #2
   15856:	68cb      	ldr	r3, [r1, #12]
   15858:	f24f 215c 	movw	r1, #62044	; 0xf25c
   1585c:	f2c0 0101 	movt	r1, #1
   15860:	4798      	blx	r3
   15862:	e79c      	b.n	1579e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

00015864 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   15864:	b5b0      	push	{r4, r5, r7, lr}
   15866:	4604      	mov	r4, r0
   15868:	7a05      	ldrb	r5, [r0, #8]
   1586a:	6840      	ldr	r0, [r0, #4]
   1586c:	b308      	cbz	r0, 158b2 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   1586e:	b10d      	cbz	r5, 15874 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   15870:	2501      	movs	r5, #1
   15872:	e01d      	b.n	158b0 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   15874:	2801      	cmp	r0, #1
   15876:	d110      	bne.n	1589a <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   15878:	7a60      	ldrb	r0, [r4, #9]
   1587a:	b170      	cbz	r0, 1589a <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   1587c:	6821      	ldr	r1, [r4, #0]
   1587e:	7808      	ldrb	r0, [r1, #0]
   15880:	0740      	lsls	r0, r0, #29
   15882:	d40a      	bmi.n	1589a <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   15884:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   15888:	2201      	movs	r2, #1
   1588a:	68cb      	ldr	r3, [r1, #12]
   1588c:	f24f 2163 	movw	r1, #62051	; 0xf263
   15890:	f2c0 0101 	movt	r1, #1
   15894:	2501      	movs	r5, #1
   15896:	4798      	blx	r3
   15898:	b950      	cbnz	r0, 158b0 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   1589a:	6821      	ldr	r1, [r4, #0]
   1589c:	2201      	movs	r2, #1
   1589e:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   158a2:	68cb      	ldr	r3, [r1, #12]
   158a4:	f24f 2164 	movw	r1, #62052	; 0xf264
   158a8:	f2c0 0101 	movt	r1, #1
   158ac:	4798      	blx	r3
   158ae:	4605      	mov	r5, r0
   158b0:	7225      	strb	r5, [r4, #8]
   158b2:	2d00      	cmp	r5, #0
   158b4:	bf18      	it	ne
   158b6:	2501      	movne	r5, #1
   158b8:	4628      	mov	r0, r5
   158ba:	bdb0      	pop	{r4, r5, r7, pc}

000158bc <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   158bc:	b580      	push	{r7, lr}
   158be:	b082      	sub	sp, #8
   158c0:	468c      	mov	ip, r1
   158c2:	2100      	movs	r1, #0
   158c4:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   158c8:	9101      	str	r1, [sp, #4]
   158ca:	d207      	bcs.n	158dc <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   158cc:	f88d c004 	strb.w	ip, [sp, #4]
   158d0:	a901      	add	r1, sp, #4
   158d2:	2201      	movs	r2, #1
   158d4:	f7ff fe47 	bl	15566 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   158d8:	b002      	add	sp, #8
   158da:	bd80      	pop	{r7, pc}
   158dc:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   158e0:	d210      	bcs.n	15904 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   158e2:	ea4f 119c 	mov.w	r1, ip, lsr #6
   158e6:	2306      	movs	r3, #6
   158e8:	2202      	movs	r2, #2
   158ea:	f363 115f 	bfi	r1, r3, #5, #27
   158ee:	f362 1c9f 	bfi	ip, r2, #6, #26
   158f2:	f88d c005 	strb.w	ip, [sp, #5]
   158f6:	f88d 1004 	strb.w	r1, [sp, #4]
   158fa:	a901      	add	r1, sp, #4
   158fc:	f7ff fe33 	bl	15566 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   15900:	b002      	add	sp, #8
   15902:	bd80      	pop	{r7, pc}
   15904:	2202      	movs	r2, #2
   15906:	4663      	mov	r3, ip
   15908:	a901      	add	r1, sp, #4
   1590a:	f362 139f 	bfi	r3, r2, #6, #26
   1590e:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   15912:	d213      	bcs.n	1593c <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   15914:	f88d 3006 	strb.w	r3, [sp, #6]
   15918:	ea4f 139c 	mov.w	r3, ip, lsr #6
   1591c:	f362 139f 	bfi	r3, r2, #6, #26
   15920:	f88d 3005 	strb.w	r3, [sp, #5]
   15924:	ea4f 321c 	mov.w	r2, ip, lsr #12
   15928:	230e      	movs	r3, #14
   1592a:	f363 121f 	bfi	r2, r3, #4, #28
   1592e:	f88d 2004 	strb.w	r2, [sp, #4]
   15932:	2203      	movs	r2, #3
   15934:	f7ff fe17 	bl	15566 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   15938:	b002      	add	sp, #8
   1593a:	bd80      	pop	{r7, pc}
   1593c:	f88d 3007 	strb.w	r3, [sp, #7]
   15940:	ea4f 139c 	mov.w	r3, ip, lsr #6
   15944:	f362 139f 	bfi	r3, r2, #6, #26
   15948:	f88d 3006 	strb.w	r3, [sp, #6]
   1594c:	ea4f 331c 	mov.w	r3, ip, lsr #12
   15950:	f362 139f 	bfi	r3, r2, #6, #26
   15954:	22f0      	movs	r2, #240	; 0xf0
   15956:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   1595a:	f88d 3005 	strb.w	r3, [sp, #5]
   1595e:	f88d 2004 	strb.w	r2, [sp, #4]
   15962:	2204      	movs	r2, #4
   15964:	f7ff fdff 	bl	15566 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   15968:	b002      	add	sp, #8
   1596a:	bd80      	pop	{r7, pc}

0001596c <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   1596c:	b570      	push	{r4, r5, r6, lr}
   1596e:	b088      	sub	sp, #32
   15970:	9001      	str	r0, [sp, #4]
   15972:	aa02      	add	r2, sp, #8
   15974:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   15978:	f24f 3130 	movw	r1, #62256	; 0xf330
   1597c:	4610      	mov	r0, r2
   1597e:	f2c0 0101 	movt	r1, #1
   15982:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   15986:	a801      	add	r0, sp, #4
   15988:	f000 f89e 	bl	15ac8 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   1598c:	b008      	add	sp, #32
   1598e:	bd70      	pop	{r4, r5, r6, pc}

00015990 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   15990:	6800      	ldr	r0, [r0, #0]
   15992:	f7ff bde8 	b.w	15566 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

00015996 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   15996:	6800      	ldr	r0, [r0, #0]
   15998:	f7ff bf90 	b.w	158bc <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

0001599c <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   1599c:	b570      	push	{r4, r5, r6, lr}
   1599e:	b088      	sub	sp, #32
   159a0:	6800      	ldr	r0, [r0, #0]
   159a2:	aa02      	add	r2, sp, #8
   159a4:	9001      	str	r0, [sp, #4]
   159a6:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   159aa:	4610      	mov	r0, r2
   159ac:	f24f 3130 	movw	r1, #62256	; 0xf330
   159b0:	f2c0 0101 	movt	r1, #1
   159b4:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   159b8:	a801      	add	r0, sp, #4
   159ba:	f000 f885 	bl	15ac8 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   159be:	b008      	add	sp, #32
   159c0:	bd70      	pop	{r4, r5, r6, pc}

000159c2 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   159c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159c6:	b08d      	sub	sp, #52	; 0x34
   159c8:	468c      	mov	ip, r1
   159ca:	6801      	ldr	r1, [r0, #0]
   159cc:	f248 5e1f 	movw	lr, #34079	; 0x851f
   159d0:	f24f 2067 	movw	r0, #62055	; 0xf267
   159d4:	f242 7810 	movw	r8, #10000	; 0x2710
   159d8:	4541      	cmp	r1, r8
   159da:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   159de:	f2c0 0001 	movt	r0, #1
   159e2:	d337      	bcc.n	15a54 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   159e4:	f241 7959 	movw	r9, #5977	; 0x1759
   159e8:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   159ec:	f10d 0b0c 	add.w	fp, sp, #12
   159f0:	2300      	movs	r3, #0
   159f2:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   159f6:	f04f 0a64 	mov.w	sl, #100	; 0x64
   159fa:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   159fe:	fba1 2409 	umull	r2, r4, r1, r9
   15a02:	42b9      	cmp	r1, r7
   15a04:	ea4f 3254 	mov.w	r2, r4, lsr #13
   15a08:	fb02 1418 	mls	r4, r2, r8, r1
   15a0c:	4611      	mov	r1, r2
   15a0e:	b2a5      	uxth	r5, r4
   15a10:	fba5 560e 	umull	r5, r6, r5, lr
   15a14:	ea4f 1556 	mov.w	r5, r6, lsr #5
   15a18:	eb0b 0603 	add.w	r6, fp, r3
   15a1c:	fb05 441a 	mls	r4, r5, sl, r4
   15a20:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   15a24:	f1a3 0304 	sub.w	r3, r3, #4
   15a28:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   15a2c:	b2a4      	uxth	r4, r4
   15a2e:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   15a32:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   15a36:	d8e2      	bhi.n	159fe <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   15a38:	f103 0427 	add.w	r4, r3, #39	; 0x27
   15a3c:	4611      	mov	r1, r2
   15a3e:	2963      	cmp	r1, #99	; 0x63
   15a40:	dc0b      	bgt.n	15a5a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   15a42:	460b      	mov	r3, r1
   15a44:	2b0a      	cmp	r3, #10
   15a46:	db17      	blt.n	15a78 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   15a48:	1ea1      	subs	r1, r4, #2
   15a4a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   15a4e:	aa03      	add	r2, sp, #12
   15a50:	5250      	strh	r0, [r2, r1]
   15a52:	e016      	b.n	15a82 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   15a54:	2427      	movs	r4, #39	; 0x27
   15a56:	2963      	cmp	r1, #99	; 0x63
   15a58:	ddf3      	ble.n	15a42 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   15a5a:	b28a      	uxth	r2, r1
   15a5c:	3c02      	subs	r4, #2
   15a5e:	fba2 230e 	umull	r2, r3, r2, lr
   15a62:	2264      	movs	r2, #100	; 0x64
   15a64:	095b      	lsrs	r3, r3, #5
   15a66:	fb03 1112 	mls	r1, r3, r2, r1
   15a6a:	aa03      	add	r2, sp, #12
   15a6c:	b289      	uxth	r1, r1
   15a6e:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   15a72:	5311      	strh	r1, [r2, r4]
   15a74:	2b0a      	cmp	r3, #10
   15a76:	dae7      	bge.n	15a48 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   15a78:	1e61      	subs	r1, r4, #1
   15a7a:	aa03      	add	r2, sp, #12
   15a7c:	f103 0030 	add.w	r0, r3, #48	; 0x30
   15a80:	5450      	strb	r0, [r2, r1]
   15a82:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   15a86:	aa03      	add	r2, sp, #12
   15a88:	4411      	add	r1, r2
   15a8a:	f24f 0234 	movw	r2, #61492	; 0xf034
   15a8e:	e9cd 1000 	strd	r1, r0, [sp]
   15a92:	f2c0 0201 	movt	r2, #1
   15a96:	4660      	mov	r0, ip
   15a98:	2101      	movs	r1, #1
   15a9a:	2300      	movs	r3, #0
   15a9c:	f000 f8f4 	bl	15c88 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   15aa0:	b00d      	add	sp, #52	; 0x34
   15aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015aa6 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   15aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15aaa:	b086      	sub	sp, #24
   15aac:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   15ab0:	466a      	mov	r2, sp
   15ab2:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   15ab6:	4613      	mov	r3, r2
   15ab8:	4660      	mov	r0, ip
   15aba:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   15abe:	f000 f803 	bl	15ac8 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   15ac2:	b006      	add	sp, #24
   15ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015ac8 <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   15ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15acc:	b08b      	sub	sp, #44	; 0x2c
   15ace:	2303      	movs	r3, #3
   15ad0:	6897      	ldr	r7, [r2, #8]
   15ad2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   15ad6:	2320      	movs	r3, #32
   15ad8:	9303      	str	r3, [sp, #12]
   15ada:	2300      	movs	r3, #0
   15adc:	2f00      	cmp	r7, #0
   15ade:	9302      	str	r3, [sp, #8]
   15ae0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   15ae4:	9306      	str	r3, [sp, #24]
   15ae6:	9304      	str	r3, [sp, #16]
   15ae8:	d07c      	beq.n	15be4 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   15aea:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   15aee:	e9d2 9400 	ldrd	r9, r4, [r2]
   15af2:	45a3      	cmp	fp, r4
   15af4:	bf88      	it	hi
   15af6:	46a3      	movhi	fp, r4
   15af8:	f1bb 0f00 	cmp.w	fp, #0
   15afc:	f000 809b 	beq.w	15c36 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   15b00:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   15b04:	68cd      	ldr	r5, [r1, #12]
   15b06:	9201      	str	r2, [sp, #4]
   15b08:	e9d9 3200 	ldrd	r3, r2, [r9]
   15b0c:	4619      	mov	r1, r3
   15b0e:	47a8      	blx	r5
   15b10:	2800      	cmp	r0, #0
   15b12:	f040 809e 	bne.w	15c52 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15b16:	464d      	mov	r5, r9
   15b18:	f04f 0a01 	mov.w	sl, #1
   15b1c:	f04f 0800 	mov.w	r8, #0
   15b20:	f04f 0910 	mov.w	r9, #16
   15b24:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   15b28:	6841      	ldr	r1, [r0, #4]
   15b2a:	9103      	str	r1, [sp, #12]
   15b2c:	7f01      	ldrb	r1, [r0, #28]
   15b2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   15b32:	6881      	ldr	r1, [r0, #8]
   15b34:	9102      	str	r1, [sp, #8]
   15b36:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   15b3a:	b18a      	cbz	r2, 15b60 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   15b3c:	2a02      	cmp	r2, #2
   15b3e:	d011      	beq.n	15b64 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   15b40:	9a01      	ldr	r2, [sp, #4]
   15b42:	4291      	cmp	r1, r2
   15b44:	f080 8098 	bcs.w	15c78 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   15b48:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   15b4c:	f645 13c3 	movw	r3, #22979	; 0x59c3
   15b50:	f2c0 0301 	movt	r3, #1
   15b54:	6852      	ldr	r2, [r2, #4]
   15b56:	429a      	cmp	r2, r3
   15b58:	d104      	bne.n	15b64 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   15b5a:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   15b5e:	6809      	ldr	r1, [r1, #0]
   15b60:	2201      	movs	r2, #1
   15b62:	e000      	b.n	15b66 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   15b64:	2200      	movs	r2, #0
   15b66:	e9cd 2104 	strd	r2, r1, [sp, #16]
   15b6a:	f857 1009 	ldr.w	r1, [r7, r9]
   15b6e:	68c0      	ldr	r0, [r0, #12]
   15b70:	b180      	cbz	r0, 15b94 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   15b72:	2802      	cmp	r0, #2
   15b74:	d010      	beq.n	15b98 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   15b76:	9801      	ldr	r0, [sp, #4]
   15b78:	4281      	cmp	r1, r0
   15b7a:	d27d      	bcs.n	15c78 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   15b7c:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   15b80:	f645 12c3 	movw	r2, #22979	; 0x59c3
   15b84:	f2c0 0201 	movt	r2, #1
   15b88:	6840      	ldr	r0, [r0, #4]
   15b8a:	4290      	cmp	r0, r2
   15b8c:	d104      	bne.n	15b98 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   15b8e:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   15b92:	6801      	ldr	r1, [r0, #0]
   15b94:	2001      	movs	r0, #1
   15b96:	e000      	b.n	15b9a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   15b98:	2000      	movs	r0, #0
   15b9a:	eb07 0209 	add.w	r2, r7, r9
   15b9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   15ba2:	9801      	ldr	r0, [sp, #4]
   15ba4:	f852 1c10 	ldr.w	r1, [r2, #-16]
   15ba8:	4281      	cmp	r1, r0
   15baa:	d25d      	bcs.n	15c68 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   15bac:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   15bb0:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   15bb4:	684a      	ldr	r2, [r1, #4]
   15bb6:	a902      	add	r1, sp, #8
   15bb8:	4790      	blx	r2
   15bba:	2800      	cmp	r0, #0
   15bbc:	d149      	bne.n	15c52 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15bbe:	45da      	cmp	sl, fp
   15bc0:	d24b      	bcs.n	15c5a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   15bc2:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   15bc6:	eb05 0208 	add.w	r2, r5, r8
   15bca:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   15bce:	68db      	ldr	r3, [r3, #12]
   15bd0:	4798      	blx	r3
   15bd2:	f109 0920 	add.w	r9, r9, #32
   15bd6:	f108 0808 	add.w	r8, r8, #8
   15bda:	f10a 0a01 	add.w	sl, sl, #1
   15bde:	2800      	cmp	r0, #0
   15be0:	d0a0      	beq.n	15b24 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   15be2:	e036      	b.n	15c52 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15be4:	6956      	ldr	r6, [r2, #20]
   15be6:	e9d2 9400 	ldrd	r9, r4, [r2]
   15bea:	42a6      	cmp	r6, r4
   15bec:	bf88      	it	hi
   15bee:	4626      	movhi	r6, r4
   15bf0:	b30e      	cbz	r6, 15c36 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   15bf2:	6917      	ldr	r7, [r2, #16]
   15bf4:	e9d9 3200 	ldrd	r3, r2, [r9]
   15bf8:	68cd      	ldr	r5, [r1, #12]
   15bfa:	4619      	mov	r1, r3
   15bfc:	47a8      	blx	r5
   15bfe:	bb40      	cbnz	r0, 15c52 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15c00:	f10d 0808 	add.w	r8, sp, #8
   15c04:	2500      	movs	r5, #0
   15c06:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   15c0a:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   15c0e:	684a      	ldr	r2, [r1, #4]
   15c10:	4641      	mov	r1, r8
   15c12:	4790      	blx	r2
   15c14:	b9e8      	cbnz	r0, 15c52 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15c16:	f105 0a01 	add.w	sl, r5, #1
   15c1a:	45b2      	cmp	sl, r6
   15c1c:	d20d      	bcs.n	15c3a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   15c1e:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   15c22:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   15c26:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   15c2a:	68db      	ldr	r3, [r3, #12]
   15c2c:	4798      	blx	r3
   15c2e:	2800      	cmp	r0, #0
   15c30:	4655      	mov	r5, sl
   15c32:	d0e8      	beq.n	15c06 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   15c34:	e00d      	b.n	15c52 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15c36:	f04f 0a00 	mov.w	sl, #0
   15c3a:	4554      	cmp	r4, sl
   15c3c:	d910      	bls.n	15c60 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   15c3e:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   15c42:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   15c46:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   15c4a:	6852      	ldr	r2, [r2, #4]
   15c4c:	68db      	ldr	r3, [r3, #12]
   15c4e:	4798      	blx	r3
   15c50:	b130      	cbz	r0, 15c60 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   15c52:	2001      	movs	r0, #1
   15c54:	b00b      	add	sp, #44	; 0x2c
   15c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c5a:	46a9      	mov	r9, r5
   15c5c:	4554      	cmp	r4, sl
   15c5e:	d8ee      	bhi.n	15c3e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   15c60:	2000      	movs	r0, #0
   15c62:	b00b      	add	sp, #44	; 0x2c
   15c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c68:	f24f 3060 	movw	r0, #62304	; 0xf360
   15c6c:	f2c0 0001 	movt	r0, #1
   15c70:	9a01      	ldr	r2, [sp, #4]
   15c72:	f7ff fc47 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   15c76:	defe      	udf	#254	; 0xfe
   15c78:	f24f 3070 	movw	r0, #62320	; 0xf370
   15c7c:	f2c0 0001 	movt	r0, #1
   15c80:	9a01      	ldr	r2, [sp, #4]
   15c82:	f7ff fc3f 	bl	15504 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   15c86:	defe      	udf	#254	; 0xfe

00015c88 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   15c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c8c:	b083      	sub	sp, #12
   15c8e:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   15c92:	469a      	mov	sl, r3
   15c94:	4604      	mov	r4, r0
   15c96:	b1e1      	cbz	r1, 15cd2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   15c98:	f8d4 e000 	ldr.w	lr, [r4]
   15c9c:	f04f 082b 	mov.w	r8, #43	; 0x2b
   15ca0:	f01e 0101 	ands.w	r1, lr, #1
   15ca4:	bf08      	it	eq
   15ca6:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   15caa:	eb01 0907 	add.w	r9, r1, r7
   15cae:	ea5f 714e 	movs.w	r1, lr, lsl #29
   15cb2:	d517      	bpl.n	15ce4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   15cb4:	f1ba 0f00 	cmp.w	sl, #0
   15cb8:	d033      	beq.n	15d22 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   15cba:	f1aa 0101 	sub.w	r1, sl, #1
   15cbe:	f00a 0c03 	and.w	ip, sl, #3
   15cc2:	2903      	cmp	r1, #3
   15cc4:	d22f      	bcs.n	15d26 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   15cc6:	2100      	movs	r1, #0
   15cc8:	4613      	mov	r3, r2
   15cca:	f1bc 0f00 	cmp.w	ip, #0
   15cce:	d152      	bne.n	15d76 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   15cd0:	e069      	b.n	15da6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15cd2:	f8d4 e000 	ldr.w	lr, [r4]
   15cd6:	f107 0901 	add.w	r9, r7, #1
   15cda:	f04f 082d 	mov.w	r8, #45	; 0x2d
   15cde:	ea5f 714e 	movs.w	r1, lr, lsl #29
   15ce2:	d4e7      	bmi.n	15cb4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   15ce4:	f04f 0a00 	mov.w	sl, #0
   15ce8:	2200      	movs	r2, #0
   15cea:	68a0      	ldr	r0, [r4, #8]
   15cec:	2801      	cmp	r0, #1
   15cee:	d161      	bne.n	15db4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   15cf0:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   15cf4:	45cb      	cmp	fp, r9
   15cf6:	d95d      	bls.n	15db4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   15cf8:	ea5f 700e 	movs.w	r0, lr, lsl #28
   15cfc:	d46e      	bmi.n	15ddc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   15cfe:	9202      	str	r2, [sp, #8]
   15d00:	ebab 0109 	sub.w	r1, fp, r9
   15d04:	f894 2020 	ldrb.w	r2, [r4, #32]
   15d08:	2000      	movs	r0, #0
   15d0a:	46a9      	mov	r9, r5
   15d0c:	460e      	mov	r6, r1
   15d0e:	2a03      	cmp	r2, #3
   15d10:	bf08      	it	eq
   15d12:	2201      	moveq	r2, #1
   15d14:	e8df f002 	tbb	[pc, r2]
   15d18:	02840287 	.word	0x02840287
   15d1c:	2600      	movs	r6, #0
   15d1e:	4608      	mov	r0, r1
   15d20:	e081      	b.n	15e26 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   15d22:	2100      	movs	r1, #0
   15d24:	e03f      	b.n	15da6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15d26:	ebac 060a 	sub.w	r6, ip, sl
   15d2a:	2100      	movs	r1, #0
   15d2c:	4693      	mov	fp, r2
   15d2e:	4613      	mov	r3, r2
   15d30:	e9cd 7501 	strd	r7, r5, [sp, #4]
   15d34:	781a      	ldrb	r2, [r3, #0]
   15d36:	785d      	ldrb	r5, [r3, #1]
   15d38:	7898      	ldrb	r0, [r3, #2]
   15d3a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15d3e:	78df      	ldrb	r7, [r3, #3]
   15d40:	2a80      	cmp	r2, #128	; 0x80
   15d42:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   15d46:	bf08      	it	eq
   15d48:	3101      	addeq	r1, #1
   15d4a:	2a80      	cmp	r2, #128	; 0x80
   15d4c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15d50:	bf08      	it	eq
   15d52:	3101      	addeq	r1, #1
   15d54:	2880      	cmp	r0, #128	; 0x80
   15d56:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   15d5a:	bf08      	it	eq
   15d5c:	3101      	addeq	r1, #1
   15d5e:	2880      	cmp	r0, #128	; 0x80
   15d60:	bf08      	it	eq
   15d62:	3101      	addeq	r1, #1
   15d64:	3304      	adds	r3, #4
   15d66:	3604      	adds	r6, #4
   15d68:	d1e4      	bne.n	15d34 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   15d6a:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   15d6e:	465a      	mov	r2, fp
   15d70:	f1bc 0f00 	cmp.w	ip, #0
   15d74:	d017      	beq.n	15da6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15d76:	7818      	ldrb	r0, [r3, #0]
   15d78:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15d7c:	2880      	cmp	r0, #128	; 0x80
   15d7e:	bf08      	it	eq
   15d80:	3101      	addeq	r1, #1
   15d82:	f1bc 0f01 	cmp.w	ip, #1
   15d86:	d00e      	beq.n	15da6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15d88:	7858      	ldrb	r0, [r3, #1]
   15d8a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15d8e:	2880      	cmp	r0, #128	; 0x80
   15d90:	bf08      	it	eq
   15d92:	3101      	addeq	r1, #1
   15d94:	f1bc 0f02 	cmp.w	ip, #2
   15d98:	d005      	beq.n	15da6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15d9a:	7898      	ldrb	r0, [r3, #2]
   15d9c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15da0:	2880      	cmp	r0, #128	; 0x80
   15da2:	bf08      	it	eq
   15da4:	3101      	addeq	r1, #1
   15da6:	eb09 000a 	add.w	r0, r9, sl
   15daa:	eba0 0901 	sub.w	r9, r0, r1
   15dae:	68a0      	ldr	r0, [r4, #8]
   15db0:	2801      	cmp	r0, #1
   15db2:	d09d      	beq.n	15cf0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   15db4:	4620      	mov	r0, r4
   15db6:	4641      	mov	r1, r8
   15db8:	4653      	mov	r3, sl
   15dba:	f000 f893 	bl	15ee4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   15dbe:	b120      	cbz	r0, 15dca <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   15dc0:	2601      	movs	r6, #1
   15dc2:	4630      	mov	r0, r6
   15dc4:	b003      	add	sp, #12
   15dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dca:	69e1      	ldr	r1, [r4, #28]
   15dcc:	463a      	mov	r2, r7
   15dce:	69a0      	ldr	r0, [r4, #24]
   15dd0:	68cb      	ldr	r3, [r1, #12]
   15dd2:	4629      	mov	r1, r5
   15dd4:	b003      	add	sp, #12
   15dd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dda:	4718      	bx	r3
   15ddc:	6860      	ldr	r0, [r4, #4]
   15dde:	2601      	movs	r6, #1
   15de0:	9002      	str	r0, [sp, #8]
   15de2:	2030      	movs	r0, #48	; 0x30
   15de4:	f894 1020 	ldrb.w	r1, [r4, #32]
   15de8:	4653      	mov	r3, sl
   15dea:	6060      	str	r0, [r4, #4]
   15dec:	4620      	mov	r0, r4
   15dee:	9101      	str	r1, [sp, #4]
   15df0:	4641      	mov	r1, r8
   15df2:	f884 6020 	strb.w	r6, [r4, #32]
   15df6:	f000 f875 	bl	15ee4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   15dfa:	2800      	cmp	r0, #0
   15dfc:	d1e1      	bne.n	15dc2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   15dfe:	f894 2020 	ldrb.w	r2, [r4, #32]
   15e02:	ebab 0109 	sub.w	r1, fp, r9
   15e06:	2000      	movs	r0, #0
   15e08:	46a9      	mov	r9, r5
   15e0a:	2a03      	cmp	r2, #3
   15e0c:	bf08      	it	eq
   15e0e:	2201      	moveq	r2, #1
   15e10:	460e      	mov	r6, r1
   15e12:	e8df f002 	tbb	[pc, r2]
   15e16:	0235      	.short	0x0235
   15e18:	0232      	.short	0x0232
   15e1a:	2600      	movs	r6, #0
   15e1c:	4608      	mov	r0, r1
   15e1e:	e02f      	b.n	15e80 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   15e20:	0848      	lsrs	r0, r1, #1
   15e22:	3101      	adds	r1, #1
   15e24:	084e      	lsrs	r6, r1, #1
   15e26:	1c45      	adds	r5, r0, #1
   15e28:	3d01      	subs	r5, #1
   15e2a:	d007      	beq.n	15e3c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   15e2c:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15e30:	6861      	ldr	r1, [r4, #4]
   15e32:	6912      	ldr	r2, [r2, #16]
   15e34:	4790      	blx	r2
   15e36:	2800      	cmp	r0, #0
   15e38:	d0f6      	beq.n	15e28 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   15e3a:	e7c1      	b.n	15dc0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15e3c:	9a02      	ldr	r2, [sp, #8]
   15e3e:	4620      	mov	r0, r4
   15e40:	4641      	mov	r1, r8
   15e42:	4653      	mov	r3, sl
   15e44:	f8d4 b004 	ldr.w	fp, [r4, #4]
   15e48:	f000 f84c 	bl	15ee4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   15e4c:	2800      	cmp	r0, #0
   15e4e:	d1b7      	bne.n	15dc0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15e50:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15e54:	463a      	mov	r2, r7
   15e56:	68cb      	ldr	r3, [r1, #12]
   15e58:	4649      	mov	r1, r9
   15e5a:	4798      	blx	r3
   15e5c:	2800      	cmp	r0, #0
   15e5e:	d1af      	bne.n	15dc0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15e60:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   15e64:	1c77      	adds	r7, r6, #1
   15e66:	2601      	movs	r6, #1
   15e68:	3f01      	subs	r7, #1
   15e6a:	d02c      	beq.n	15ec6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   15e6c:	6922      	ldr	r2, [r4, #16]
   15e6e:	4628      	mov	r0, r5
   15e70:	4659      	mov	r1, fp
   15e72:	4790      	blx	r2
   15e74:	2800      	cmp	r0, #0
   15e76:	d0f7      	beq.n	15e68 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   15e78:	e7a3      	b.n	15dc2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   15e7a:	0848      	lsrs	r0, r1, #1
   15e7c:	3101      	adds	r1, #1
   15e7e:	084e      	lsrs	r6, r1, #1
   15e80:	1c45      	adds	r5, r0, #1
   15e82:	3d01      	subs	r5, #1
   15e84:	d007      	beq.n	15e96 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   15e86:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15e8a:	6861      	ldr	r1, [r4, #4]
   15e8c:	6912      	ldr	r2, [r2, #16]
   15e8e:	4790      	blx	r2
   15e90:	2800      	cmp	r0, #0
   15e92:	d0f6      	beq.n	15e82 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   15e94:	e794      	b.n	15dc0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15e96:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15e9a:	463a      	mov	r2, r7
   15e9c:	68cb      	ldr	r3, [r1, #12]
   15e9e:	4649      	mov	r1, r9
   15ea0:	f8d4 8004 	ldr.w	r8, [r4, #4]
   15ea4:	4798      	blx	r3
   15ea6:	2800      	cmp	r0, #0
   15ea8:	f47f af8a 	bne.w	15dc0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15eac:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   15eb0:	1c77      	adds	r7, r6, #1
   15eb2:	2601      	movs	r6, #1
   15eb4:	3f01      	subs	r7, #1
   15eb6:	d00b      	beq.n	15ed0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   15eb8:	692a      	ldr	r2, [r5, #16]
   15eba:	4648      	mov	r0, r9
   15ebc:	4641      	mov	r1, r8
   15ebe:	4790      	blx	r2
   15ec0:	2800      	cmp	r0, #0
   15ec2:	d0f7      	beq.n	15eb4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   15ec4:	e77d      	b.n	15dc2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   15ec6:	2600      	movs	r6, #0
   15ec8:	4630      	mov	r0, r6
   15eca:	b003      	add	sp, #12
   15ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ed0:	9801      	ldr	r0, [sp, #4]
   15ed2:	2600      	movs	r6, #0
   15ed4:	f884 0020 	strb.w	r0, [r4, #32]
   15ed8:	9802      	ldr	r0, [sp, #8]
   15eda:	6060      	str	r0, [r4, #4]
   15edc:	4630      	mov	r0, r6
   15ede:	b003      	add	sp, #12
   15ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015ee4 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   15ee4:	b570      	push	{r4, r5, r6, lr}
   15ee6:	461c      	mov	r4, r3
   15ee8:	4615      	mov	r5, r2
   15eea:	4606      	mov	r6, r0
   15eec:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   15ef0:	d006      	beq.n	15f00 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   15ef2:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   15ef6:	6912      	ldr	r2, [r2, #16]
   15ef8:	4790      	blx	r2
   15efa:	b108      	cbz	r0, 15f00 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   15efc:	2001      	movs	r0, #1
   15efe:	bd70      	pop	{r4, r5, r6, pc}
   15f00:	b13d      	cbz	r5, 15f12 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   15f02:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   15f06:	4622      	mov	r2, r4
   15f08:	68cb      	ldr	r3, [r1, #12]
   15f0a:	4629      	mov	r1, r5
   15f0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15f10:	4718      	bx	r3
   15f12:	2000      	movs	r0, #0
   15f14:	bd70      	pop	{r4, r5, r6, pc}
	...

00015f18 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   15f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f1c:	b081      	sub	sp, #4
   15f1e:	f8d0 e008 	ldr.w	lr, [r0, #8]
   15f22:	4682      	mov	sl, r0
   15f24:	6900      	ldr	r0, [r0, #16]
   15f26:	4691      	mov	r9, r2
   15f28:	4688      	mov	r8, r1
   15f2a:	f1be 0f01 	cmp.w	lr, #1
   15f2e:	d111      	bne.n	15f54 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   15f30:	2801      	cmp	r0, #1
   15f32:	d012      	beq.n	15f5a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   15f34:	f1b9 0f00 	cmp.w	r9, #0
   15f38:	f000 80c5 	beq.w	160c6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   15f3c:	f1a9 0101 	sub.w	r1, r9, #1
   15f40:	f009 0003 	and.w	r0, r9, #3
   15f44:	2903      	cmp	r1, #3
   15f46:	d267      	bcs.n	16018 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   15f48:	2100      	movs	r1, #0
   15f4a:	4642      	mov	r2, r8
   15f4c:	2800      	cmp	r0, #0
   15f4e:	f040 8083 	bne.w	16058 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   15f52:	e097      	b.n	16084 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   15f54:	2801      	cmp	r0, #1
   15f56:	f040 80bd 	bne.w	160d4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   15f5a:	f1b9 0f00 	cmp.w	r9, #0
   15f5e:	d054      	beq.n	1600a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   15f60:	f8da 0014 	ldr.w	r0, [sl, #20]
   15f64:	eb08 0109 	add.w	r1, r8, r9
   15f68:	2200      	movs	r2, #0
   15f6a:	4647      	mov	r7, r8
   15f6c:	1c43      	adds	r3, r0, #1
   15f6e:	4646      	mov	r6, r8
   15f70:	463c      	mov	r4, r7
   15f72:	f914 5b01 	ldrsb.w	r5, [r4], #1
   15f76:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   15f7a:	b2e8      	uxtb	r0, r5
   15f7c:	dc2e      	bgt.n	15fdc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   15f7e:	428c      	cmp	r4, r1
   15f80:	d01a      	beq.n	15fb8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   15f82:	787d      	ldrb	r5, [r7, #1]
   15f84:	1cbc      	adds	r4, r7, #2
   15f86:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   15f8a:	4627      	mov	r7, r4
   15f8c:	f000 0b1f 	and.w	fp, r0, #31
   15f90:	28df      	cmp	r0, #223	; 0xdf
   15f92:	d917      	bls.n	15fc4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   15f94:	428f      	cmp	r7, r1
   15f96:	d018      	beq.n	15fca <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   15f98:	f817 4b01 	ldrb.w	r4, [r7], #1
   15f9c:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   15fa0:	463c      	mov	r4, r7
   15fa2:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   15fa6:	28f0      	cmp	r0, #240	; 0xf0
   15fa8:	d316      	bcc.n	15fd8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   15faa:	428f      	cmp	r7, r1
   15fac:	d020      	beq.n	15ff0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   15fae:	f817 0b01 	ldrb.w	r0, [r7], #1
   15fb2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   15fb6:	e01d      	b.n	15ff4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   15fb8:	2500      	movs	r5, #0
   15fba:	460f      	mov	r7, r1
   15fbc:	f000 0b1f 	and.w	fp, r0, #31
   15fc0:	28df      	cmp	r0, #223	; 0xdf
   15fc2:	d8e7      	bhi.n	15f94 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   15fc4:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   15fc8:	e008      	b.n	15fdc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   15fca:	f04f 0c00 	mov.w	ip, #0
   15fce:	460f      	mov	r7, r1
   15fd0:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   15fd4:	28f0      	cmp	r0, #240	; 0xf0
   15fd6:	d2e8      	bcs.n	15faa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   15fd8:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   15fdc:	4627      	mov	r7, r4
   15fde:	3b01      	subs	r3, #1
   15fe0:	d065      	beq.n	160ae <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   15fe2:	1b90      	subs	r0, r2, r6
   15fe4:	42b9      	cmp	r1, r7
   15fe6:	eb00 0207 	add.w	r2, r0, r7
   15fea:	463e      	mov	r6, r7
   15fec:	d1c0      	bne.n	15f70 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   15fee:	e061      	b.n	160b4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   15ff0:	2000      	movs	r0, #0
   15ff2:	4627      	mov	r7, r4
   15ff4:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   15ff8:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   15ffc:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   16000:	4428      	add	r0, r5
   16002:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   16006:	d1ea      	bne.n	15fde <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   16008:	e054      	b.n	160b4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   1600a:	2200      	movs	r2, #0
   1600c:	f1be 0f01 	cmp.w	lr, #1
   16010:	d054      	beq.n	160bc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   16012:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   16016:	e062      	b.n	160de <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   16018:	eba0 0309 	sub.w	r3, r0, r9
   1601c:	2100      	movs	r1, #0
   1601e:	4642      	mov	r2, r8
   16020:	7817      	ldrb	r7, [r2, #0]
   16022:	7856      	ldrb	r6, [r2, #1]
   16024:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   16028:	7895      	ldrb	r5, [r2, #2]
   1602a:	78d4      	ldrb	r4, [r2, #3]
   1602c:	2f80      	cmp	r7, #128	; 0x80
   1602e:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   16032:	bf08      	it	eq
   16034:	3101      	addeq	r1, #1
   16036:	2f80      	cmp	r7, #128	; 0x80
   16038:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   1603c:	bf08      	it	eq
   1603e:	3101      	addeq	r1, #1
   16040:	2f80      	cmp	r7, #128	; 0x80
   16042:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   16046:	bf08      	it	eq
   16048:	3101      	addeq	r1, #1
   1604a:	2f80      	cmp	r7, #128	; 0x80
   1604c:	bf08      	it	eq
   1604e:	3101      	addeq	r1, #1
   16050:	3204      	adds	r2, #4
   16052:	3304      	adds	r3, #4
   16054:	d1e4      	bne.n	16020 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   16056:	b1a8      	cbz	r0, 16084 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   16058:	7813      	ldrb	r3, [r2, #0]
   1605a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1605e:	2b80      	cmp	r3, #128	; 0x80
   16060:	bf08      	it	eq
   16062:	3101      	addeq	r1, #1
   16064:	2801      	cmp	r0, #1
   16066:	d00d      	beq.n	16084 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   16068:	7853      	ldrb	r3, [r2, #1]
   1606a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1606e:	2b80      	cmp	r3, #128	; 0x80
   16070:	bf08      	it	eq
   16072:	3101      	addeq	r1, #1
   16074:	2802      	cmp	r0, #2
   16076:	d005      	beq.n	16084 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   16078:	7890      	ldrb	r0, [r2, #2]
   1607a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1607e:	2880      	cmp	r0, #128	; 0x80
   16080:	bf08      	it	eq
   16082:	3101      	addeq	r1, #1
   16084:	f8da 000c 	ldr.w	r0, [sl, #12]
   16088:	eba9 0101 	sub.w	r1, r9, r1
   1608c:	4281      	cmp	r1, r0
   1608e:	d221      	bcs.n	160d4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   16090:	f1b9 0f00 	cmp.w	r9, #0
   16094:	d029      	beq.n	160ea <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   16096:	f1a9 0101 	sub.w	r1, r9, #1
   1609a:	f009 0c03 	and.w	ip, r9, #3
   1609e:	2903      	cmp	r1, #3
   160a0:	d225      	bcs.n	160ee <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   160a2:	2100      	movs	r1, #0
   160a4:	4643      	mov	r3, r8
   160a6:	f1bc 0f00 	cmp.w	ip, #0
   160aa:	d142      	bne.n	16132 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   160ac:	e059      	b.n	16162 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   160ae:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   160b2:	d167      	bne.n	16184 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   160b4:	464a      	mov	r2, r9
   160b6:	f1be 0f01 	cmp.w	lr, #1
   160ba:	d1aa      	bne.n	16012 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   160bc:	4691      	mov	r9, r2
   160be:	f1b9 0f00 	cmp.w	r9, #0
   160c2:	f47f af3b 	bne.w	15f3c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   160c6:	2100      	movs	r1, #0
   160c8:	f8da 000c 	ldr.w	r0, [sl, #12]
   160cc:	eba9 0101 	sub.w	r1, r9, r1
   160d0:	4281      	cmp	r1, r0
   160d2:	d3dd      	bcc.n	16090 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   160d4:	f8da 101c 	ldr.w	r1, [sl, #28]
   160d8:	464a      	mov	r2, r9
   160da:	f8da 0018 	ldr.w	r0, [sl, #24]
   160de:	68cb      	ldr	r3, [r1, #12]
   160e0:	4641      	mov	r1, r8
   160e2:	b001      	add	sp, #4
   160e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160e8:	4718      	bx	r3
   160ea:	2100      	movs	r1, #0
   160ec:	e039      	b.n	16162 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   160ee:	ebac 0709 	sub.w	r7, ip, r9
   160f2:	2100      	movs	r1, #0
   160f4:	4643      	mov	r3, r8
   160f6:	781e      	ldrb	r6, [r3, #0]
   160f8:	785d      	ldrb	r5, [r3, #1]
   160fa:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   160fe:	789c      	ldrb	r4, [r3, #2]
   16100:	78da      	ldrb	r2, [r3, #3]
   16102:	2e80      	cmp	r6, #128	; 0x80
   16104:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   16108:	bf08      	it	eq
   1610a:	3101      	addeq	r1, #1
   1610c:	2e80      	cmp	r6, #128	; 0x80
   1610e:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   16112:	bf08      	it	eq
   16114:	3101      	addeq	r1, #1
   16116:	2e80      	cmp	r6, #128	; 0x80
   16118:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1611c:	bf08      	it	eq
   1611e:	3101      	addeq	r1, #1
   16120:	2a80      	cmp	r2, #128	; 0x80
   16122:	bf08      	it	eq
   16124:	3101      	addeq	r1, #1
   16126:	3304      	adds	r3, #4
   16128:	3704      	adds	r7, #4
   1612a:	d1e4      	bne.n	160f6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   1612c:	f1bc 0f00 	cmp.w	ip, #0
   16130:	d017      	beq.n	16162 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   16132:	781a      	ldrb	r2, [r3, #0]
   16134:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   16138:	2a80      	cmp	r2, #128	; 0x80
   1613a:	bf08      	it	eq
   1613c:	3101      	addeq	r1, #1
   1613e:	f1bc 0f01 	cmp.w	ip, #1
   16142:	d00e      	beq.n	16162 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   16144:	785a      	ldrb	r2, [r3, #1]
   16146:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1614a:	2a80      	cmp	r2, #128	; 0x80
   1614c:	bf08      	it	eq
   1614e:	3101      	addeq	r1, #1
   16150:	f1bc 0f02 	cmp.w	ip, #2
   16154:	d005      	beq.n	16162 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   16156:	789a      	ldrb	r2, [r3, #2]
   16158:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1615c:	2a80      	cmp	r2, #128	; 0x80
   1615e:	bf08      	it	eq
   16160:	3101      	addeq	r1, #1
   16162:	f89a 3020 	ldrb.w	r3, [sl, #32]
   16166:	eba1 0109 	sub.w	r1, r1, r9
   1616a:	4401      	add	r1, r0
   1616c:	2000      	movs	r0, #0
   1616e:	1eda      	subs	r2, r3, #3
   16170:	bf18      	it	ne
   16172:	461a      	movne	r2, r3
   16174:	460e      	mov	r6, r1
   16176:	e8df f002 	tbb	[pc, r2]
   1617a:	0216      	.short	0x0216
   1617c:	0213      	.short	0x0213
   1617e:	2600      	movs	r6, #0
   16180:	4608      	mov	r0, r1
   16182:	e010      	b.n	161a6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   16184:	2a00      	cmp	r2, #0
   16186:	bf18      	it	ne
   16188:	454a      	cmpne	r2, r9
   1618a:	d134      	bne.n	161f6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   1618c:	4640      	mov	r0, r8
   1618e:	2800      	cmp	r0, #0
   16190:	bf0c      	ite	eq
   16192:	464a      	moveq	r2, r9
   16194:	4680      	movne	r8, r0
   16196:	f1be 0f01 	cmp.w	lr, #1
   1619a:	f43f af8f 	beq.w	160bc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   1619e:	e738      	b.n	16012 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   161a0:	0848      	lsrs	r0, r1, #1
   161a2:	3101      	adds	r1, #1
   161a4:	084e      	lsrs	r6, r1, #1
   161a6:	1c44      	adds	r4, r0, #1
   161a8:	3c01      	subs	r4, #1
   161aa:	d008      	beq.n	161be <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   161ac:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   161b0:	f8da 1004 	ldr.w	r1, [sl, #4]
   161b4:	6912      	ldr	r2, [r2, #16]
   161b6:	4790      	blx	r2
   161b8:	2800      	cmp	r0, #0
   161ba:	d0f5      	beq.n	161a8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   161bc:	e013      	b.n	161e6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   161be:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   161c2:	464a      	mov	r2, r9
   161c4:	68cb      	ldr	r3, [r1, #12]
   161c6:	4641      	mov	r1, r8
   161c8:	f8da 7004 	ldr.w	r7, [sl, #4]
   161cc:	4798      	blx	r3
   161ce:	b950      	cbnz	r0, 161e6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   161d0:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   161d4:	3601      	adds	r6, #1
   161d6:	3e01      	subs	r6, #1
   161d8:	d009      	beq.n	161ee <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   161da:	692a      	ldr	r2, [r5, #16]
   161dc:	4620      	mov	r0, r4
   161de:	4639      	mov	r1, r7
   161e0:	4790      	blx	r2
   161e2:	2800      	cmp	r0, #0
   161e4:	d0f7      	beq.n	161d6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   161e6:	2001      	movs	r0, #1
   161e8:	b001      	add	sp, #4
   161ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161ee:	2000      	movs	r0, #0
   161f0:	b001      	add	sp, #4
   161f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161f6:	454a      	cmp	r2, r9
   161f8:	d204      	bcs.n	16204 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   161fa:	f918 0002 	ldrsb.w	r0, [r8, r2]
   161fe:	f110 0f40 	cmn.w	r0, #64	; 0x40
   16202:	dac3      	bge.n	1618c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   16204:	2000      	movs	r0, #0
   16206:	2200      	movs	r2, #0
   16208:	2800      	cmp	r0, #0
   1620a:	bf0c      	ite	eq
   1620c:	464a      	moveq	r2, r9
   1620e:	4680      	movne	r8, r0
   16210:	f1be 0f01 	cmp.w	lr, #1
   16214:	f43f af52 	beq.w	160bc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   16218:	e6fb      	b.n	16012 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

0001621a <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   1621a:	7800      	ldrb	r0, [r0, #0]
   1621c:	f3c0 1000 	ubfx	r0, r0, #4, #1
   16220:	4770      	bx	lr

00016222 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   16222:	7800      	ldrb	r0, [r0, #0]
   16224:	f3c0 1040 	ubfx	r0, r0, #5, #1
   16228:	4770      	bx	lr

0001622a <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   1622a:	b570      	push	{r4, r5, r6, lr}
   1622c:	460d      	mov	r5, r1
   1622e:	4606      	mov	r6, r0
   16230:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16234:	461c      	mov	r4, r3
   16236:	68cb      	ldr	r3, [r1, #12]
   16238:	4611      	mov	r1, r2
   1623a:	4622      	mov	r2, r4
   1623c:	4798      	blx	r3
   1623e:	7230      	strb	r0, [r6, #8]
   16240:	fab4 f084 	clz	r0, r4
   16244:	0940      	lsrs	r0, r0, #5
   16246:	7270      	strb	r0, [r6, #9]
   16248:	2000      	movs	r0, #0
   1624a:	e9c6 5000 	strd	r5, r0, [r6]
   1624e:	bd70      	pop	{r4, r5, r6, pc}

00016250 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   16250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16254:	b085      	sub	sp, #20
   16256:	460c      	mov	r4, r1
   16258:	4605      	mov	r5, r0
   1625a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1625e:	690a      	ldr	r2, [r1, #16]
   16260:	2127      	movs	r1, #39	; 0x27
   16262:	4790      	blx	r2
   16264:	b118      	cbz	r0, 1626e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   16266:	2001      	movs	r0, #1
   16268:	b005      	add	sp, #20
   1626a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1626e:	6829      	ldr	r1, [r5, #0]
   16270:	a801      	add	r0, sp, #4
   16272:	2201      	movs	r2, #1
   16274:	f7ff f878 	bl	15368 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   16278:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   1627c:	f04f 091c 	mov.w	r9, #28
   16280:	f8dd 800c 	ldr.w	r8, [sp, #12]
   16284:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   16288:	f89d 6010 	ldrb.w	r6, [sp, #16]
   1628c:	d139      	bne.n	16302 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   1628e:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   16292:	2f02      	cmp	r7, #2
   16294:	f0c0 806b 	bcc.w	1636e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   16298:	d00c      	beq.n	162b4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   1629a:	b2f0      	uxtb	r0, r6
   1629c:	2604      	movs	r6, #4
   1629e:	2703      	movs	r7, #3
   162a0:	215c      	movs	r1, #92	; 0x5c
   162a2:	e8df f000 	tbb	[pc, r0]
   162a6:	0364      	.short	0x0364
   162a8:	09242010 	.word	0x09242010
   162ac:	2600      	movs	r6, #0
   162ae:	2703      	movs	r7, #3
   162b0:	217d      	movs	r1, #125	; 0x7d
   162b2:	e001      	b.n	162b8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   162b4:	2701      	movs	r7, #1
   162b6:	215c      	movs	r1, #92	; 0x5c
   162b8:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   162bc:	6912      	ldr	r2, [r2, #16]
   162be:	4790      	blx	r2
   162c0:	2800      	cmp	r0, #0
   162c2:	d0e6      	beq.n	16292 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   162c4:	e7cf      	b.n	16266 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   162c6:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   162ca:	2602      	movs	r6, #2
   162cc:	2703      	movs	r7, #3
   162ce:	f1b8 0f00 	cmp.w	r8, #0
   162d2:	fa25 f100 	lsr.w	r1, r5, r0
   162d6:	bf08      	it	eq
   162d8:	2601      	moveq	r6, #1
   162da:	bf18      	it	ne
   162dc:	f1a8 0801 	subne.w	r8, r8, #1
   162e0:	f367 111f 	bfi	r1, r7, #4, #28
   162e4:	e7e8      	b.n	162b8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   162e6:	2602      	movs	r6, #2
   162e8:	2703      	movs	r7, #3
   162ea:	217b      	movs	r1, #123	; 0x7b
   162ec:	e7e4      	b.n	162b8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   162ee:	2703      	movs	r7, #3
   162f0:	2175      	movs	r1, #117	; 0x75
   162f2:	2603      	movs	r6, #3
   162f4:	e7e0      	b.n	162b8 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   162f6:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   162fa:	6912      	ldr	r2, [r2, #16]
   162fc:	4790      	blx	r2
   162fe:	2800      	cmp	r0, #0
   16300:	d1b1      	bne.n	16266 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   16302:	4638      	mov	r0, r7
   16304:	2701      	movs	r7, #1
   16306:	215c      	movs	r1, #92	; 0x5c
   16308:	e8df f000 	tbb	[pc, r0]
   1630c:	06020331 	.word	0x06020331
   16310:	e7f1      	b.n	162f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16312:	2700      	movs	r7, #0
   16314:	4629      	mov	r1, r5
   16316:	e7ee      	b.n	162f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16318:	b2f0      	uxtb	r0, r6
   1631a:	2604      	movs	r6, #4
   1631c:	2703      	movs	r7, #3
   1631e:	215c      	movs	r1, #92	; 0x5c
   16320:	e8df f000 	tbb	[pc, r0]
   16324:	1d080425 	.word	0x1d080425
   16328:	0321      	.short	0x0321
   1632a:	e7e4      	b.n	162f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1632c:	2600      	movs	r6, #0
   1632e:	2703      	movs	r7, #3
   16330:	217d      	movs	r1, #125	; 0x7d
   16332:	e7e0      	b.n	162f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16334:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   16338:	2602      	movs	r6, #2
   1633a:	2703      	movs	r7, #3
   1633c:	fa25 f000 	lsr.w	r0, r5, r0
   16340:	f000 000f 	and.w	r0, r0, #15
   16344:	f100 0157 	add.w	r1, r0, #87	; 0x57
   16348:	280a      	cmp	r0, #10
   1634a:	bf38      	it	cc
   1634c:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   16350:	f1b8 0f00 	cmp.w	r8, #0
   16354:	bf0c      	ite	eq
   16356:	2601      	moveq	r6, #1
   16358:	f1a8 0801 	subne.w	r8, r8, #1
   1635c:	e7cb      	b.n	162f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1635e:	2602      	movs	r6, #2
   16360:	2703      	movs	r7, #3
   16362:	217b      	movs	r1, #123	; 0x7b
   16364:	e7c7      	b.n	162f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   16366:	2703      	movs	r7, #3
   16368:	2175      	movs	r1, #117	; 0x75
   1636a:	2603      	movs	r6, #3
   1636c:	e7c3      	b.n	162f6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1636e:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   16372:	690a      	ldr	r2, [r1, #16]
   16374:	2127      	movs	r1, #39	; 0x27
   16376:	b005      	add	sp, #20
   16378:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1637c:	4710      	bx	r2

0001637e <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   1637e:	b08c      	sub	sp, #48	; 0x30
   16380:	e9cd 0100 	strd	r0, r1, [sp]
   16384:	2002      	movs	r0, #2
   16386:	a908      	add	r1, sp, #32
   16388:	9007      	str	r0, [sp, #28]
   1638a:	9106      	str	r1, [sp, #24]
   1638c:	2100      	movs	r1, #0
   1638e:	9105      	str	r1, [sp, #20]
   16390:	e9cd 0103 	strd	r0, r1, [sp, #12]
   16394:	f24f 30c0 	movw	r0, #62400	; 0xf3c0
   16398:	f2c0 0001 	movt	r0, #1
   1639c:	a901      	add	r1, sp, #4
   1639e:	9002      	str	r0, [sp, #8]
   163a0:	f247 00cb 	movw	r0, #28875	; 0x70cb
   163a4:	f2c0 0001 	movt	r0, #1
   163a8:	900b      	str	r0, [sp, #44]	; 0x2c
   163aa:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   163ae:	4668      	mov	r0, sp
   163b0:	f24f 31d0 	movw	r1, #62416	; 0xf3d0
   163b4:	9008      	str	r0, [sp, #32]
   163b6:	a802      	add	r0, sp, #8
   163b8:	f2c0 0101 	movt	r1, #1
   163bc:	f7ff f8c2 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   163c0:	defe      	udf	#254	; 0xfe

000163c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   163c2:	b08c      	sub	sp, #48	; 0x30
   163c4:	e9cd 0100 	strd	r0, r1, [sp]
   163c8:	2002      	movs	r0, #2
   163ca:	a908      	add	r1, sp, #32
   163cc:	9007      	str	r0, [sp, #28]
   163ce:	9106      	str	r1, [sp, #24]
   163d0:	2100      	movs	r1, #0
   163d2:	9105      	str	r1, [sp, #20]
   163d4:	e9cd 0103 	strd	r0, r1, [sp, #12]
   163d8:	f24f 4004 	movw	r0, #62468	; 0xf404
   163dc:	f2c0 0001 	movt	r0, #1
   163e0:	a901      	add	r1, sp, #4
   163e2:	9002      	str	r0, [sp, #8]
   163e4:	f247 00cb 	movw	r0, #28875	; 0x70cb
   163e8:	f2c0 0001 	movt	r0, #1
   163ec:	900b      	str	r0, [sp, #44]	; 0x2c
   163ee:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   163f2:	4668      	mov	r0, sp
   163f4:	f24f 4114 	movw	r1, #62484	; 0xf414
   163f8:	9008      	str	r0, [sp, #32]
   163fa:	a802      	add	r0, sp, #8
   163fc:	f2c0 0101 	movt	r1, #1
   16400:	f7ff f8a0 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16404:	defe      	udf	#254	; 0xfe

00016406 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   16406:	b09a      	sub	sp, #104	; 0x68
   16408:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   1640c:	e9cd 2300 	strd	r2, r3, [sp]
   16410:	d802      	bhi.n	16418 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   16412:	2501      	movs	r5, #1
   16414:	468c      	mov	ip, r1
   16416:	e03e      	b.n	16496 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16418:	f1c1 0e00 	rsb	lr, r1, #0
   1641c:	f44f 7c80 	mov.w	ip, #256	; 0x100
   16420:	458c      	cmp	ip, r1
   16422:	d205      	bcs.n	16430 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   16424:	f910 400c 	ldrsb.w	r4, [r0, ip]
   16428:	f114 0f41 	cmn.w	r4, #65	; 0x41
   1642c:	f300 8108 	bgt.w	16640 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   16430:	eb0e 040c 	add.w	r4, lr, ip
   16434:	f1ac 0601 	sub.w	r6, ip, #1
   16438:	2c01      	cmp	r4, #1
   1643a:	d02a      	beq.n	16492 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1643c:	428e      	cmp	r6, r1
   1643e:	d206      	bcs.n	1644e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   16440:	eb00 050c 	add.w	r5, r0, ip
   16444:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   16448:	f115 0f41 	cmn.w	r5, #65	; 0x41
   1644c:	dc21      	bgt.n	16492 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   1644e:	f1ac 0602 	sub.w	r6, ip, #2
   16452:	2c02      	cmp	r4, #2
   16454:	d01d      	beq.n	16492 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16456:	428e      	cmp	r6, r1
   16458:	d206      	bcs.n	16468 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   1645a:	eb00 050c 	add.w	r5, r0, ip
   1645e:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   16462:	f115 0f41 	cmn.w	r5, #65	; 0x41
   16466:	dc14      	bgt.n	16492 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16468:	f1ac 0603 	sub.w	r6, ip, #3
   1646c:	2c03      	cmp	r4, #3
   1646e:	d010      	beq.n	16492 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16470:	428e      	cmp	r6, r1
   16472:	d206      	bcs.n	16482 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   16474:	eb00 050c 	add.w	r5, r0, ip
   16478:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   1647c:	f115 0f41 	cmn.w	r5, #65	; 0x41
   16480:	dc07      	bgt.n	16492 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16482:	f1bc 0c04 	subs.w	ip, ip, #4
   16486:	f04f 0500 	mov.w	r5, #0
   1648a:	d004      	beq.n	16496 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   1648c:	2c04      	cmp	r4, #4
   1648e:	d1c7      	bne.n	16420 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   16490:	e001      	b.n	16496 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16492:	2500      	movs	r5, #0
   16494:	46b4      	mov	ip, r6
   16496:	2605      	movs	r6, #5
   16498:	2d00      	cmp	r5, #0
   1649a:	f24f 45e2 	movw	r5, #62690	; 0xf4e2
   1649e:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   164a2:	bf18      	it	ne
   164a4:	2600      	movne	r6, #0
   164a6:	9605      	str	r6, [sp, #20]
   164a8:	f24f 0634 	movw	r6, #61492	; 0xf034
   164ac:	f2c0 0501 	movt	r5, #1
   164b0:	f2c0 0601 	movt	r6, #1
   164b4:	bf18      	it	ne
   164b6:	4635      	movne	r5, r6
   164b8:	428a      	cmp	r2, r1
   164ba:	9504      	str	r5, [sp, #16]
   164bc:	bf98      	it	ls
   164be:	428b      	cmpls	r3, r1
   164c0:	d92a      	bls.n	16518 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   164c2:	428a      	cmp	r2, r1
   164c4:	f04f 0003 	mov.w	r0, #3
   164c8:	a910      	add	r1, sp, #64	; 0x40
   164ca:	bf88      	it	hi
   164cc:	4613      	movhi	r3, r2
   164ce:	900f      	str	r0, [sp, #60]	; 0x3c
   164d0:	910e      	str	r1, [sp, #56]	; 0x38
   164d2:	2100      	movs	r1, #0
   164d4:	910d      	str	r1, [sp, #52]	; 0x34
   164d6:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   164da:	f24f 5008 	movw	r0, #62728	; 0xf508
   164de:	f2c0 0001 	movt	r0, #1
   164e2:	a904      	add	r1, sp, #16
   164e4:	900a      	str	r0, [sp, #40]	; 0x28
   164e6:	f247 10b9 	movw	r0, #29113	; 0x71b9
   164ea:	f2c0 0001 	movt	r0, #1
   164ee:	9308      	str	r3, [sp, #32]
   164f0:	9015      	str	r0, [sp, #84]	; 0x54
   164f2:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   164f6:	a802      	add	r0, sp, #8
   164f8:	f24f 5120 	movw	r1, #62752	; 0xf520
   164fc:	9012      	str	r0, [sp, #72]	; 0x48
   164fe:	f247 00cb 	movw	r0, #28875	; 0x70cb
   16502:	f2c0 0101 	movt	r1, #1
   16506:	f2c0 0001 	movt	r0, #1
   1650a:	9011      	str	r0, [sp, #68]	; 0x44
   1650c:	a808      	add	r0, sp, #32
   1650e:	9010      	str	r0, [sp, #64]	; 0x40
   16510:	a80a      	add	r0, sp, #40	; 0x28
   16512:	f7ff f817 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16516:	defe      	udf	#254	; 0xfe
   16518:	429a      	cmp	r2, r3
   1651a:	f200 80f1 	bhi.w	16700 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   1651e:	2a00      	cmp	r2, #0
   16520:	bf18      	it	ne
   16522:	4291      	cmpne	r1, r2
   16524:	d109      	bne.n	1653a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   16526:	461a      	mov	r2, r3
   16528:	2a00      	cmp	r2, #0
   1652a:	9206      	str	r2, [sp, #24]
   1652c:	bf18      	it	ne
   1652e:	428a      	cmpne	r2, r1
   16530:	d10e      	bne.n	16550 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   16532:	4613      	mov	r3, r2
   16534:	428b      	cmp	r3, r1
   16536:	d047      	beq.n	165c8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   16538:	e052      	b.n	165e0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   1653a:	d9f5      	bls.n	16528 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   1653c:	5686      	ldrsb	r6, [r0, r2]
   1653e:	f116 0f40 	cmn.w	r6, #64	; 0x40
   16542:	bfa8      	it	ge
   16544:	461a      	movge	r2, r3
   16546:	2a00      	cmp	r2, #0
   16548:	9206      	str	r2, [sp, #24]
   1654a:	bf18      	it	ne
   1654c:	428a      	cmpne	r2, r1
   1654e:	d0f0      	beq.n	16532 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   16550:	f1a0 0c01 	sub.w	ip, r0, #1
   16554:	f101 0e02 	add.w	lr, r1, #2
   16558:	1ccc      	adds	r4, r1, #3
   1655a:	1c4d      	adds	r5, r1, #1
   1655c:	1d0e      	adds	r6, r1, #4
   1655e:	428a      	cmp	r2, r1
   16560:	d206      	bcs.n	16570 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   16562:	eb0c 0302 	add.w	r3, ip, r2
   16566:	f993 3001 	ldrsb.w	r3, [r3, #1]
   1656a:	f113 0f41 	cmn.w	r3, #65	; 0x41
   1656e:	dce0      	bgt.n	16532 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   16570:	1e53      	subs	r3, r2, #1
   16572:	bf18      	it	ne
   16574:	4295      	cmpne	r5, r2
   16576:	d025      	beq.n	165c4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16578:	428b      	cmp	r3, r1
   1657a:	d204      	bcs.n	16586 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   1657c:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   16580:	f117 0f41 	cmn.w	r7, #65	; 0x41
   16584:	dc1e      	bgt.n	165c4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16586:	1e93      	subs	r3, r2, #2
   16588:	bf18      	it	ne
   1658a:	4596      	cmpne	lr, r2
   1658c:	d01a      	beq.n	165c4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1658e:	428b      	cmp	r3, r1
   16590:	d206      	bcs.n	165a0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   16592:	eb0c 0702 	add.w	r7, ip, r2
   16596:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   1659a:	f117 0f41 	cmn.w	r7, #65	; 0x41
   1659e:	dc11      	bgt.n	165c4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   165a0:	1ed3      	subs	r3, r2, #3
   165a2:	bf18      	it	ne
   165a4:	4294      	cmpne	r4, r2
   165a6:	d00d      	beq.n	165c4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   165a8:	428b      	cmp	r3, r1
   165aa:	d206      	bcs.n	165ba <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   165ac:	eb0c 0702 	add.w	r7, ip, r2
   165b0:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   165b4:	f117 0f41 	cmn.w	r7, #65	; 0x41
   165b8:	dc04      	bgt.n	165c4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   165ba:	1f13      	subs	r3, r2, #4
   165bc:	d002      	beq.n	165c4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   165be:	4296      	cmp	r6, r2
   165c0:	461a      	mov	r2, r3
   165c2:	d1cc      	bne.n	1655e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   165c4:	428b      	cmp	r3, r1
   165c6:	d10b      	bne.n	165e0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   165c8:	f24f 10d0 	movw	r0, #61904	; 0xf1d0
   165cc:	f24f 5270 	movw	r2, #62832	; 0xf570
   165d0:	f2c0 0001 	movt	r0, #1
   165d4:	f2c0 0201 	movt	r2, #1
   165d8:	212b      	movs	r1, #43	; 0x2b
   165da:	f7fe ff7d 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   165de:	defe      	udf	#254	; 0xfe
   165e0:	18c5      	adds	r5, r0, r3
   165e2:	462e      	mov	r6, r5
   165e4:	f916 4b01 	ldrsb.w	r4, [r6], #1
   165e8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   165ec:	b2e2      	uxtb	r2, r4
   165ee:	dd02      	ble.n	165f6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   165f0:	9207      	str	r2, [sp, #28]
   165f2:	2101      	movs	r1, #1
   165f4:	e04d      	b.n	16692 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   165f6:	4408      	add	r0, r1
   165f8:	4286      	cmp	r6, r0
   165fa:	d10b      	bne.n	16614 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   165fc:	2500      	movs	r5, #0
   165fe:	4606      	mov	r6, r0
   16600:	f002 011f 	and.w	r1, r2, #31
   16604:	2adf      	cmp	r2, #223	; 0xdf
   16606:	d80d      	bhi.n	16624 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   16608:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   1660c:	2880      	cmp	r0, #128	; 0x80
   1660e:	9007      	str	r0, [sp, #28]
   16610:	d333      	bcc.n	1667a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   16612:	e034      	b.n	1667e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   16614:	7869      	ldrb	r1, [r5, #1]
   16616:	1cae      	adds	r6, r5, #2
   16618:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   1661c:	f002 011f 	and.w	r1, r2, #31
   16620:	2adf      	cmp	r2, #223	; 0xdf
   16622:	d9f1      	bls.n	16608 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   16624:	4286      	cmp	r6, r0
   16626:	d10d      	bne.n	16644 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   16628:	2400      	movs	r4, #0
   1662a:	4606      	mov	r6, r0
   1662c:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   16630:	2af0      	cmp	r2, #240	; 0xf0
   16632:	d20f      	bcs.n	16654 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   16634:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   16638:	2880      	cmp	r0, #128	; 0x80
   1663a:	9007      	str	r0, [sp, #28]
   1663c:	d31d      	bcc.n	1667a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   1663e:	e01e      	b.n	1667e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   16640:	2500      	movs	r5, #0
   16642:	e728      	b.n	16496 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16644:	f816 4b01 	ldrb.w	r4, [r6], #1
   16648:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   1664c:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   16650:	2af0      	cmp	r2, #240	; 0xf0
   16652:	d3ef      	bcc.n	16634 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   16654:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   16658:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   1665c:	4286      	cmp	r6, r0
   1665e:	bf1a      	itte	ne
   16660:	7830      	ldrbne	r0, [r6, #0]
   16662:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   16666:	2000      	moveq	r0, #0
   16668:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   1666c:	4408      	add	r0, r1
   1666e:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   16672:	d0a9      	beq.n	165c8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   16674:	2880      	cmp	r0, #128	; 0x80
   16676:	9007      	str	r0, [sp, #28]
   16678:	d201      	bcs.n	1667e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   1667a:	2101      	movs	r1, #1
   1667c:	e009      	b.n	16692 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   1667e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   16682:	d201      	bcs.n	16688 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   16684:	2102      	movs	r1, #2
   16686:	e004      	b.n	16692 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   16688:	2104      	movs	r1, #4
   1668a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1668e:	bf38      	it	cc
   16690:	2103      	movcc	r1, #3
   16692:	4419      	add	r1, r3
   16694:	aa10      	add	r2, sp, #64	; 0x40
   16696:	a808      	add	r0, sp, #32
   16698:	e9cd 3108 	strd	r3, r1, [sp, #32]
   1669c:	2105      	movs	r1, #5
   1669e:	910f      	str	r1, [sp, #60]	; 0x3c
   166a0:	920e      	str	r2, [sp, #56]	; 0x38
   166a2:	2200      	movs	r2, #0
   166a4:	920d      	str	r2, [sp, #52]	; 0x34
   166a6:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   166aa:	f24f 51ac 	movw	r1, #62892	; 0xf5ac
   166ae:	f2c0 0101 	movt	r1, #1
   166b2:	aa04      	add	r2, sp, #16
   166b4:	910a      	str	r1, [sp, #40]	; 0x28
   166b6:	f247 11b9 	movw	r1, #29113	; 0x71b9
   166ba:	f2c0 0101 	movt	r1, #1
   166be:	9119      	str	r1, [sp, #100]	; 0x64
   166c0:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   166c4:	a902      	add	r1, sp, #8
   166c6:	9116      	str	r1, [sp, #88]	; 0x58
   166c8:	f245 3109 	movw	r1, #21257	; 0x5309
   166cc:	f2c0 0101 	movt	r1, #1
   166d0:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   166d4:	f246 2051 	movw	r0, #25169	; 0x6251
   166d8:	f2c0 0001 	movt	r0, #1
   166dc:	f24f 51d4 	movw	r1, #62932	; 0xf5d4
   166e0:	9013      	str	r0, [sp, #76]	; 0x4c
   166e2:	a807      	add	r0, sp, #28
   166e4:	9012      	str	r0, [sp, #72]	; 0x48
   166e6:	f247 00cb 	movw	r0, #28875	; 0x70cb
   166ea:	f2c0 0001 	movt	r0, #1
   166ee:	f2c0 0101 	movt	r1, #1
   166f2:	9011      	str	r0, [sp, #68]	; 0x44
   166f4:	a806      	add	r0, sp, #24
   166f6:	9010      	str	r0, [sp, #64]	; 0x40
   166f8:	a80a      	add	r0, sp, #40	; 0x28
   166fa:	f7fe ff23 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   166fe:	defe      	udf	#254	; 0xfe
   16700:	2004      	movs	r0, #4
   16702:	a910      	add	r1, sp, #64	; 0x40
   16704:	900f      	str	r0, [sp, #60]	; 0x3c
   16706:	910e      	str	r1, [sp, #56]	; 0x38
   16708:	2100      	movs	r1, #0
   1670a:	910d      	str	r1, [sp, #52]	; 0x34
   1670c:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   16710:	f24f 5040 	movw	r0, #62784	; 0xf540
   16714:	f2c0 0001 	movt	r0, #1
   16718:	a904      	add	r1, sp, #16
   1671a:	900a      	str	r0, [sp, #40]	; 0x28
   1671c:	f247 10b9 	movw	r0, #29113	; 0x71b9
   16720:	f2c0 0001 	movt	r0, #1
   16724:	9017      	str	r0, [sp, #92]	; 0x5c
   16726:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   1672a:	a802      	add	r0, sp, #8
   1672c:	9014      	str	r0, [sp, #80]	; 0x50
   1672e:	f247 00cb 	movw	r0, #28875	; 0x70cb
   16732:	a901      	add	r1, sp, #4
   16734:	f2c0 0001 	movt	r0, #1
   16738:	9013      	str	r0, [sp, #76]	; 0x4c
   1673a:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   1673e:	f24f 5160 	movw	r1, #62816	; 0xf560
   16742:	4668      	mov	r0, sp
   16744:	f2c0 0101 	movt	r1, #1
   16748:	9010      	str	r0, [sp, #64]	; 0x40
   1674a:	a80a      	add	r0, sp, #40	; 0x28
   1674c:	f7fe fefa 	bl	15544 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16750:	defe      	udf	#254	; 0xfe

00016752 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   16752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16756:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1675a:	d270      	bcs.n	1683e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   1675c:	f24f 5ef4 	movw	lr, #62964	; 0xf5f4
   16760:	f24f 6846 	movw	r8, #63046	; 0xf646
   16764:	fa1f f980 	uxth.w	r9, r0
   16768:	f2c0 0e01 	movt	lr, #1
   1676c:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   16770:	f04f 0a00 	mov.w	sl, #0
   16774:	f2c0 0801 	movt	r8, #1
   16778:	4675      	mov	r5, lr
   1677a:	786e      	ldrb	r6, [r5, #1]
   1677c:	4652      	mov	r2, sl
   1677e:	782b      	ldrb	r3, [r5, #0]
   16780:	3502      	adds	r5, #2
   16782:	44b2      	add	sl, r6
   16784:	4563      	cmp	r3, ip
   16786:	d129      	bne.n	167dc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   16788:	4592      	cmp	sl, r2
   1678a:	f0c0 8112 	bcc.w	169b2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   1678e:	ea4f 035a 	mov.w	r3, sl, lsr #1
   16792:	2b92      	cmp	r3, #146	; 0x92
   16794:	f200 8112 	bhi.w	169bc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   16798:	eb08 0302 	add.w	r3, r8, r2
   1679c:	199a      	adds	r2, r3, r6
   1679e:	b31e      	cbz	r6, 167e8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   167a0:	461f      	mov	r7, r3
   167a2:	b2c4      	uxtb	r4, r0
   167a4:	f817 1b01 	ldrb.w	r1, [r7], #1
   167a8:	42a1      	cmp	r1, r4
   167aa:	f000 80b6 	beq.w	1691a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   167ae:	4297      	cmp	r7, r2
   167b0:	d01a      	beq.n	167e8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   167b2:	7859      	ldrb	r1, [r3, #1]
   167b4:	42a1      	cmp	r1, r4
   167b6:	f000 80b0 	beq.w	1691a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   167ba:	1c99      	adds	r1, r3, #2
   167bc:	4291      	cmp	r1, r2
   167be:	d013      	beq.n	167e8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   167c0:	7899      	ldrb	r1, [r3, #2]
   167c2:	42a1      	cmp	r1, r4
   167c4:	f000 80a9 	beq.w	1691a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   167c8:	1cd9      	adds	r1, r3, #3
   167ca:	4291      	cmp	r1, r2
   167cc:	d00c      	beq.n	167e8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   167ce:	1d19      	adds	r1, r3, #4
   167d0:	78db      	ldrb	r3, [r3, #3]
   167d2:	3e04      	subs	r6, #4
   167d4:	42a3      	cmp	r3, r4
   167d6:	460b      	mov	r3, r1
   167d8:	d1e1      	bne.n	1679e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   167da:	e09e      	b.n	1691a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   167dc:	d808      	bhi.n	167f0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   167de:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   167e2:	4295      	cmp	r5, r2
   167e4:	d1c9      	bne.n	1677a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   167e6:	e003      	b.n	167f0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   167e8:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   167ec:	428d      	cmp	r5, r1
   167ee:	d1c4      	bne.n	1677a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   167f0:	f24f 756b 	movw	r5, #63339	; 0xf76b
   167f4:	2101      	movs	r1, #1
   167f6:	f2c0 0501 	movt	r5, #1
   167fa:	4628      	mov	r0, r5
   167fc:	4602      	mov	r2, r0
   167fe:	f812 7b01 	ldrb.w	r7, [r2], #1
   16802:	b27e      	sxtb	r6, r7
   16804:	2e00      	cmp	r6, #0
   16806:	d404      	bmi.n	16812 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   16808:	4610      	mov	r0, r2
   1680a:	ebb9 0907 	subs.w	r9, r9, r7
   1680e:	d50f      	bpl.n	16830 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   16810:	e0bd      	b.n	1698e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16812:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   16816:	429a      	cmp	r2, r3
   16818:	f000 80db 	beq.w	169d2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   1681c:	7842      	ldrb	r2, [r0, #1]
   1681e:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   16822:	3002      	adds	r0, #2
   16824:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   16828:	ebb9 0907 	subs.w	r9, r9, r7
   1682c:	f100 80af 	bmi.w	1698e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16830:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   16834:	f081 0101 	eor.w	r1, r1, #1
   16838:	4290      	cmp	r0, r2
   1683a:	d1df      	bne.n	167fc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   1683c:	e0a7      	b.n	1698e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   1683e:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   16842:	d26f      	bcs.n	16924 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   16844:	f64f 0ea5 	movw	lr, #63653	; 0xf8a5
   16848:	f64f 08eb 	movw	r8, #63723	; 0xf8eb
   1684c:	fa1f f980 	uxth.w	r9, r0
   16850:	f2c0 0e01 	movt	lr, #1
   16854:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   16858:	f04f 0a00 	mov.w	sl, #0
   1685c:	f2c0 0801 	movt	r8, #1
   16860:	4675      	mov	r5, lr
   16862:	786e      	ldrb	r6, [r5, #1]
   16864:	4652      	mov	r2, sl
   16866:	782b      	ldrb	r3, [r5, #0]
   16868:	3502      	adds	r5, #2
   1686a:	44b2      	add	sl, r6
   1686c:	4563      	cmp	r3, ip
   1686e:	d125      	bne.n	168bc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   16870:	4592      	cmp	sl, r2
   16872:	f0c0 809e 	bcc.w	169b2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   16876:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   1687a:	f200 80a5 	bhi.w	169c8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   1687e:	eb08 0302 	add.w	r3, r8, r2
   16882:	199a      	adds	r2, r3, r6
   16884:	b306      	cbz	r6, 168c8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   16886:	461f      	mov	r7, r3
   16888:	b2c4      	uxtb	r4, r0
   1688a:	f817 1b01 	ldrb.w	r1, [r7], #1
   1688e:	42a1      	cmp	r1, r4
   16890:	d043      	beq.n	1691a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16892:	4297      	cmp	r7, r2
   16894:	d018      	beq.n	168c8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   16896:	7859      	ldrb	r1, [r3, #1]
   16898:	42a1      	cmp	r1, r4
   1689a:	d03e      	beq.n	1691a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   1689c:	1c99      	adds	r1, r3, #2
   1689e:	4291      	cmp	r1, r2
   168a0:	d012      	beq.n	168c8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   168a2:	7899      	ldrb	r1, [r3, #2]
   168a4:	42a1      	cmp	r1, r4
   168a6:	d038      	beq.n	1691a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   168a8:	1cd9      	adds	r1, r3, #3
   168aa:	4291      	cmp	r1, r2
   168ac:	d00c      	beq.n	168c8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   168ae:	1d19      	adds	r1, r3, #4
   168b0:	78db      	ldrb	r3, [r3, #3]
   168b2:	3e04      	subs	r6, #4
   168b4:	42a3      	cmp	r3, r4
   168b6:	460b      	mov	r3, r1
   168b8:	d1e4      	bne.n	16884 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   168ba:	e02e      	b.n	1691a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   168bc:	d808      	bhi.n	168d0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   168be:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   168c2:	4295      	cmp	r5, r2
   168c4:	d1cd      	bne.n	16862 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   168c6:	e003      	b.n	168d0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   168c8:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   168cc:	428d      	cmp	r5, r1
   168ce:	d1c8      	bne.n	16862 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   168d0:	f64f 1591 	movw	r5, #63889	; 0xf991
   168d4:	2101      	movs	r1, #1
   168d6:	f2c0 0501 	movt	r5, #1
   168da:	4628      	mov	r0, r5
   168dc:	4602      	mov	r2, r0
   168de:	f812 7b01 	ldrb.w	r7, [r2], #1
   168e2:	b27e      	sxtb	r6, r7
   168e4:	2e00      	cmp	r6, #0
   168e6:	d40a      	bmi.n	168fe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   168e8:	4610      	mov	r0, r2
   168ea:	ebb9 0907 	subs.w	r9, r9, r7
   168ee:	d44e      	bmi.n	1698e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   168f0:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   168f4:	f081 0101 	eor.w	r1, r1, #1
   168f8:	4290      	cmp	r0, r2
   168fa:	d1ef      	bne.n	168dc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   168fc:	e047      	b.n	1698e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   168fe:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   16902:	429a      	cmp	r2, r3
   16904:	d065      	beq.n	169d2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   16906:	7842      	ldrb	r2, [r0, #1]
   16908:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   1690c:	3002      	adds	r0, #2
   1690e:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   16912:	ebb9 0907 	subs.w	r9, r9, r7
   16916:	d5eb      	bpl.n	168f0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   16918:	e039      	b.n	1698e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   1691a:	2100      	movs	r1, #0
   1691c:	f001 0001 	and.w	r0, r1, #1
   16920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16924:	f240 51e2 	movw	r1, #1506	; 0x5e2
   16928:	f240 63e2 	movw	r3, #1762	; 0x6e2
   1692c:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   16930:	1842      	adds	r2, r0, r1
   16932:	f2c0 030b 	movt	r3, #11
   16936:	2100      	movs	r1, #0
   16938:	429a      	cmp	r2, r3
   1693a:	d328      	bcc.n	1698e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   1693c:	f241 421f 	movw	r2, #5151	; 0x141f
   16940:	f640 431f 	movw	r3, #3103	; 0xc1f
   16944:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   16948:	4402      	add	r2, r0
   1694a:	429a      	cmp	r2, r3
   1694c:	bf21      	itttt	cs
   1694e:	f243 125e 	movwcs	r2, #12638	; 0x315e
   16952:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   16956:	4402      	addcs	r2, r0
   16958:	2a0e      	cmpcs	r2, #14
   1695a:	d318      	bcc.n	1698e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   1695c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   16960:	f64b 031e 	movw	r3, #47134	; 0xb81e
   16964:	f2c0 021f 	movt	r2, #31
   16968:	f2c0 0302 	movt	r3, #2
   1696c:	4002      	ands	r2, r0
   1696e:	429a      	cmp	r2, r3
   16970:	d00d      	beq.n	1698e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16972:	f645 1229 	movw	r2, #22825	; 0x5929
   16976:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   1697a:	4402      	add	r2, r0
   1697c:	2a29      	cmp	r2, #41	; 0x29
   1697e:	bf21      	itttt	cs
   16980:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   16984:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   16988:	4402      	addcs	r2, r0
   1698a:	2a0b      	cmpcs	r2, #11
   1698c:	d203      	bcs.n	16996 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   1698e:	f001 0001 	and.w	r0, r1, #1
   16992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16996:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   1699a:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   1699e:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   169a2:	2000      	movs	r0, #0
   169a4:	f2c0 0202 	movt	r2, #2
   169a8:	4291      	cmp	r1, r2
   169aa:	bf88      	it	hi
   169ac:	2001      	movhi	r0, #1
   169ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   169b2:	4610      	mov	r0, r2
   169b4:	4651      	mov	r1, sl
   169b6:	f7ff fd04 	bl	163c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   169ba:	defe      	udf	#254	; 0xfe
   169bc:	4650      	mov	r0, sl
   169be:	f240 1125 	movw	r1, #293	; 0x125
   169c2:	f7ff fcdc 	bl	1637e <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   169c6:	defe      	udf	#254	; 0xfe
   169c8:	4650      	mov	r0, sl
   169ca:	21a6      	movs	r1, #166	; 0xa6
   169cc:	f7ff fcd7 	bl	1637e <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   169d0:	defe      	udf	#254	; 0xfe
   169d2:	f24f 10d0 	movw	r0, #61904	; 0xf1d0
   169d6:	f24f 52e4 	movw	r2, #62948	; 0xf5e4
   169da:	f2c0 0001 	movt	r0, #1
   169de:	f2c0 0201 	movt	r2, #1
   169e2:	212b      	movs	r1, #43	; 0x2b
   169e4:	f7fe fd78 	bl	154d8 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   169e8:	defe      	udf	#254	; 0xfe

000169ea <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   169ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169ee:	b0a3      	sub	sp, #140	; 0x8c
   169f0:	468c      	mov	ip, r1
   169f2:	6809      	ldr	r1, [r1, #0]
   169f4:	06ca      	lsls	r2, r1, #27
   169f6:	d44a      	bmi.n	16a8e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   169f8:	6804      	ldr	r4, [r0, #0]
   169fa:	0688      	lsls	r0, r1, #26
   169fc:	f100 8089 	bmi.w	16b12 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   16a00:	f248 5e1f 	movw	lr, #34079	; 0x851f
   16a04:	f24f 2267 	movw	r2, #62055	; 0xf267
   16a08:	f242 7810 	movw	r8, #10000	; 0x2710
   16a0c:	4544      	cmp	r4, r8
   16a0e:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   16a12:	f2c0 0201 	movt	r2, #1
   16a16:	f0c0 80e3 	bcc.w	16be0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   16a1a:	f241 7959 	movw	r9, #5977	; 0x1759
   16a1e:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   16a22:	f10d 0b0c 	add.w	fp, sp, #12
   16a26:	2300      	movs	r3, #0
   16a28:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   16a2c:	f04f 0a64 	mov.w	sl, #100	; 0x64
   16a30:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   16a34:	fba4 0109 	umull	r0, r1, r4, r9
   16a38:	42bc      	cmp	r4, r7
   16a3a:	ea4f 3051 	mov.w	r0, r1, lsr #13
   16a3e:	fb00 4118 	mls	r1, r0, r8, r4
   16a42:	4604      	mov	r4, r0
   16a44:	b28d      	uxth	r5, r1
   16a46:	fba5 560e 	umull	r5, r6, r5, lr
   16a4a:	ea4f 1556 	mov.w	r5, r6, lsr #5
   16a4e:	eb0b 0603 	add.w	r6, fp, r3
   16a52:	fb05 111a 	mls	r1, r5, sl, r1
   16a56:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   16a5a:	f1a3 0304 	sub.w	r3, r3, #4
   16a5e:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   16a62:	b289      	uxth	r1, r1
   16a64:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   16a68:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   16a6c:	d8e2      	bhi.n	16a34 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   16a6e:	f103 0127 	add.w	r1, r3, #39	; 0x27
   16a72:	4604      	mov	r4, r0
   16a74:	2c63      	cmp	r4, #99	; 0x63
   16a76:	f300 80b7 	bgt.w	16be8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   16a7a:	4623      	mov	r3, r4
   16a7c:	2b0a      	cmp	r3, #10
   16a7e:	f2c0 80c3 	blt.w	16c08 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   16a82:	1e88      	subs	r0, r1, #2
   16a84:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   16a88:	aa03      	add	r2, sp, #12
   16a8a:	5211      	strh	r1, [r2, r0]
   16a8c:	e0c1      	b.n	16c12 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   16a8e:	6800      	ldr	r0, [r0, #0]
   16a90:	f10d 0e0c 	add.w	lr, sp, #12
   16a94:	2381      	movs	r3, #129	; 0x81
   16a96:	2100      	movs	r1, #0
   16a98:	f000 020f 	and.w	r2, r0, #15
   16a9c:	f102 0457 	add.w	r4, r2, #87	; 0x57
   16aa0:	2a0a      	cmp	r2, #10
   16aa2:	bf38      	it	cc
   16aa4:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   16aa8:	eb0e 0203 	add.w	r2, lr, r3
   16aac:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   16ab0:	f802 4c02 	strb.w	r4, [r2, #-2]
   16ab4:	d071      	beq.n	16b9a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   16ab6:	0904      	lsrs	r4, r0, #4
   16ab8:	f004 040f 	and.w	r4, r4, #15
   16abc:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16ac0:	2c0a      	cmp	r4, #10
   16ac2:	bf38      	it	cc
   16ac4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16ac8:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   16acc:	f802 5c03 	strb.w	r5, [r2, #-3]
   16ad0:	d079      	beq.n	16bc6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   16ad2:	0a04      	lsrs	r4, r0, #8
   16ad4:	f004 040f 	and.w	r4, r4, #15
   16ad8:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16adc:	2c0a      	cmp	r4, #10
   16ade:	bf38      	it	cc
   16ae0:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16ae4:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16ae8:	f802 5c04 	strb.w	r5, [r2, #-4]
   16aec:	d073      	beq.n	16bd6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   16aee:	0b04      	lsrs	r4, r0, #12
   16af0:	3b04      	subs	r3, #4
   16af2:	f004 040f 	and.w	r4, r4, #15
   16af6:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16afa:	2c0a      	cmp	r4, #10
   16afc:	bf38      	it	cc
   16afe:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16b02:	f802 5c05 	strb.w	r5, [r2, #-5]
   16b06:	0c02      	lsrs	r2, r0, #16
   16b08:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   16b0c:	4610      	mov	r0, r2
   16b0e:	d1c3      	bne.n	16a98 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   16b10:	e03f      	b.n	16b92 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   16b12:	f10d 0e0c 	add.w	lr, sp, #12
   16b16:	2381      	movs	r3, #129	; 0x81
   16b18:	2100      	movs	r1, #0
   16b1a:	f004 000f 	and.w	r0, r4, #15
   16b1e:	eb0e 0203 	add.w	r2, lr, r3
   16b22:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16b26:	280a      	cmp	r0, #10
   16b28:	bf38      	it	cc
   16b2a:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16b2e:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   16b32:	f802 5c02 	strb.w	r5, [r2, #-2]
   16b36:	d030      	beq.n	16b9a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   16b38:	0920      	lsrs	r0, r4, #4
   16b3a:	f000 000f 	and.w	r0, r0, #15
   16b3e:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16b42:	280a      	cmp	r0, #10
   16b44:	bf38      	it	cc
   16b46:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16b4a:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   16b4e:	f802 5c03 	strb.w	r5, [r2, #-3]
   16b52:	d038      	beq.n	16bc6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   16b54:	0a20      	lsrs	r0, r4, #8
   16b56:	f000 000f 	and.w	r0, r0, #15
   16b5a:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16b5e:	280a      	cmp	r0, #10
   16b60:	bf38      	it	cc
   16b62:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16b66:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   16b6a:	f802 5c04 	strb.w	r5, [r2, #-4]
   16b6e:	d032      	beq.n	16bd6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   16b70:	0b20      	lsrs	r0, r4, #12
   16b72:	3b04      	subs	r3, #4
   16b74:	f000 000f 	and.w	r0, r0, #15
   16b78:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16b7c:	280a      	cmp	r0, #10
   16b7e:	bf38      	it	cc
   16b80:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16b84:	0c20      	lsrs	r0, r4, #16
   16b86:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   16b8a:	4604      	mov	r4, r0
   16b8c:	f802 5c05 	strb.w	r5, [r2, #-5]
   16b90:	d1c3      	bne.n	16b1a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   16b92:	1e58      	subs	r0, r3, #1
   16b94:	2881      	cmp	r0, #129	; 0x81
   16b96:	d305      	bcc.n	16ba4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   16b98:	e019      	b.n	16bce <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   16b9a:	1e59      	subs	r1, r3, #1
   16b9c:	1e98      	subs	r0, r3, #2
   16b9e:	460b      	mov	r3, r1
   16ba0:	2881      	cmp	r0, #129	; 0x81
   16ba2:	d214      	bcs.n	16bce <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   16ba4:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   16ba8:	f24f 2265 	movw	r2, #62053	; 0xf265
   16bac:	4470      	add	r0, lr
   16bae:	f2c0 0201 	movt	r2, #1
   16bb2:	e9cd 0100 	strd	r0, r1, [sp]
   16bb6:	4660      	mov	r0, ip
   16bb8:	2101      	movs	r1, #1
   16bba:	2302      	movs	r3, #2
   16bbc:	f7ff f864 	bl	15c88 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16bc0:	b023      	add	sp, #140	; 0x8c
   16bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bc6:	1ed8      	subs	r0, r3, #3
   16bc8:	3b02      	subs	r3, #2
   16bca:	2881      	cmp	r0, #129	; 0x81
   16bcc:	d3ea      	bcc.n	16ba4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   16bce:	2180      	movs	r1, #128	; 0x80
   16bd0:	f7ff fbf7 	bl	163c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16bd4:	defe      	udf	#254	; 0xfe
   16bd6:	1f18      	subs	r0, r3, #4
   16bd8:	3b03      	subs	r3, #3
   16bda:	2881      	cmp	r0, #129	; 0x81
   16bdc:	d3e2      	bcc.n	16ba4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   16bde:	e7f6      	b.n	16bce <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   16be0:	2127      	movs	r1, #39	; 0x27
   16be2:	2c63      	cmp	r4, #99	; 0x63
   16be4:	f77f af49 	ble.w	16a7a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   16be8:	b2a0      	uxth	r0, r4
   16bea:	3902      	subs	r1, #2
   16bec:	fba0 030e 	umull	r0, r3, r0, lr
   16bf0:	af03      	add	r7, sp, #12
   16bf2:	2064      	movs	r0, #100	; 0x64
   16bf4:	095b      	lsrs	r3, r3, #5
   16bf6:	fb03 4010 	mls	r0, r3, r0, r4
   16bfa:	b280      	uxth	r0, r0
   16bfc:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   16c00:	5278      	strh	r0, [r7, r1]
   16c02:	2b0a      	cmp	r3, #10
   16c04:	f6bf af3d 	bge.w	16a82 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   16c08:	1e48      	subs	r0, r1, #1
   16c0a:	aa03      	add	r2, sp, #12
   16c0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
   16c10:	5411      	strb	r1, [r2, r0]
   16c12:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   16c16:	aa03      	add	r2, sp, #12
   16c18:	4410      	add	r0, r2
   16c1a:	f24f 0234 	movw	r2, #61492	; 0xf034
   16c1e:	e9cd 0100 	strd	r0, r1, [sp]
   16c22:	f2c0 0201 	movt	r2, #1
   16c26:	4660      	mov	r0, ip
   16c28:	2101      	movs	r1, #1
   16c2a:	2300      	movs	r3, #0
   16c2c:	f7ff f82c 	bl	15c88 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16c30:	b023      	add	sp, #140	; 0x8c
   16c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016c36 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   16c36:	b580      	push	{r7, lr}
   16c38:	b0a2      	sub	sp, #136	; 0x88
   16c3a:	7802      	ldrb	r2, [r0, #0]
   16c3c:	468c      	mov	ip, r1
   16c3e:	f002 030f 	and.w	r3, r2, #15
   16c42:	f103 0057 	add.w	r0, r3, #87	; 0x57
   16c46:	2b0a      	cmp	r3, #10
   16c48:	bf38      	it	cc
   16c4a:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   16c4e:	2300      	movs	r3, #0
   16c50:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   16c54:	d00b      	beq.n	16c6e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   16c56:	0913      	lsrs	r3, r2, #4
   16c58:	f103 0157 	add.w	r1, r3, #87	; 0x57
   16c5c:	2aa0      	cmp	r2, #160	; 0xa0
   16c5e:	bf38      	it	cc
   16c60:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   16c64:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   16c68:	227e      	movs	r2, #126	; 0x7e
   16c6a:	2302      	movs	r3, #2
   16c6c:	e001      	b.n	16c72 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   16c6e:	227f      	movs	r2, #127	; 0x7f
   16c70:	2301      	movs	r3, #1
   16c72:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   16c76:	a802      	add	r0, sp, #8
   16c78:	4410      	add	r0, r2
   16c7a:	f24f 2265 	movw	r2, #62053	; 0xf265
   16c7e:	e9cd 0300 	strd	r0, r3, [sp]
   16c82:	f2c0 0201 	movt	r2, #1
   16c86:	4660      	mov	r0, ip
   16c88:	2101      	movs	r1, #1
   16c8a:	2302      	movs	r3, #2
   16c8c:	f7fe fffc 	bl	15c88 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16c90:	b022      	add	sp, #136	; 0x88
   16c92:	bd80      	pop	{r7, pc}

00016c94 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   16c94:	b580      	push	{r7, lr}
   16c96:	b0a2      	sub	sp, #136	; 0x88
   16c98:	7802      	ldrb	r2, [r0, #0]
   16c9a:	468c      	mov	ip, r1
   16c9c:	f002 030f 	and.w	r3, r2, #15
   16ca0:	f103 0037 	add.w	r0, r3, #55	; 0x37
   16ca4:	2b0a      	cmp	r3, #10
   16ca6:	bf38      	it	cc
   16ca8:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   16cac:	2300      	movs	r3, #0
   16cae:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   16cb2:	d00b      	beq.n	16ccc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   16cb4:	0913      	lsrs	r3, r2, #4
   16cb6:	f103 0137 	add.w	r1, r3, #55	; 0x37
   16cba:	2aa0      	cmp	r2, #160	; 0xa0
   16cbc:	bf38      	it	cc
   16cbe:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   16cc2:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   16cc6:	227e      	movs	r2, #126	; 0x7e
   16cc8:	2302      	movs	r3, #2
   16cca:	e001      	b.n	16cd0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   16ccc:	227f      	movs	r2, #127	; 0x7f
   16cce:	2301      	movs	r3, #1
   16cd0:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   16cd4:	a802      	add	r0, sp, #8
   16cd6:	4410      	add	r0, r2
   16cd8:	f24f 2265 	movw	r2, #62053	; 0xf265
   16cdc:	e9cd 0300 	strd	r0, r3, [sp]
   16ce0:	f2c0 0201 	movt	r2, #1
   16ce4:	4660      	mov	r0, ip
   16ce6:	2101      	movs	r1, #1
   16ce8:	2302      	movs	r3, #2
   16cea:	f7fe ffcd 	bl	15c88 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16cee:	b022      	add	sp, #136	; 0x88
   16cf0:	bd80      	pop	{r7, pc}

00016cf2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   16cf2:	b580      	push	{r7, lr}
   16cf4:	b0a2      	sub	sp, #136	; 0x88
   16cf6:	8800      	ldrh	r0, [r0, #0]
   16cf8:	468c      	mov	ip, r1
   16cfa:	f000 020f 	and.w	r2, r0, #15
   16cfe:	f102 0357 	add.w	r3, r2, #87	; 0x57
   16d02:	2a0a      	cmp	r2, #10
   16d04:	bf38      	it	cc
   16d06:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   16d0a:	2200      	movs	r2, #0
   16d0c:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   16d10:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   16d14:	d02a      	beq.n	16d6c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   16d16:	0903      	lsrs	r3, r0, #4
   16d18:	f003 030f 	and.w	r3, r3, #15
   16d1c:	f103 0157 	add.w	r1, r3, #87	; 0x57
   16d20:	2b0a      	cmp	r3, #10
   16d22:	bf38      	it	cc
   16d24:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   16d28:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   16d2c:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   16d30:	d031      	beq.n	16d96 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   16d32:	0a01      	lsrs	r1, r0, #8
   16d34:	f001 010f 	and.w	r1, r1, #15
   16d38:	f101 0257 	add.w	r2, r1, #87	; 0x57
   16d3c:	290a      	cmp	r1, #10
   16d3e:	bf38      	it	cc
   16d40:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   16d44:	2100      	movs	r1, #0
   16d46:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16d4a:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   16d4e:	d027      	beq.n	16da0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   16d50:	0b00      	lsrs	r0, r0, #12
   16d52:	f100 0157 	add.w	r1, r0, #87	; 0x57
   16d56:	280a      	cmp	r0, #10
   16d58:	bf38      	it	cc
   16d5a:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   16d5e:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   16d62:	227d      	movs	r2, #125	; 0x7d
   16d64:	207c      	movs	r0, #124	; 0x7c
   16d66:	2881      	cmp	r0, #129	; 0x81
   16d68:	d304      	bcc.n	16d74 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   16d6a:	e01d      	b.n	16da8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   16d6c:	2280      	movs	r2, #128	; 0x80
   16d6e:	207f      	movs	r0, #127	; 0x7f
   16d70:	2881      	cmp	r0, #129	; 0x81
   16d72:	d219      	bcs.n	16da8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   16d74:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   16d78:	ab02      	add	r3, sp, #8
   16d7a:	4418      	add	r0, r3
   16d7c:	2101      	movs	r1, #1
   16d7e:	e9cd 0200 	strd	r0, r2, [sp]
   16d82:	f24f 2265 	movw	r2, #62053	; 0xf265
   16d86:	f2c0 0201 	movt	r2, #1
   16d8a:	4660      	mov	r0, ip
   16d8c:	2302      	movs	r3, #2
   16d8e:	f7fe ff7b 	bl	15c88 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16d92:	b022      	add	sp, #136	; 0x88
   16d94:	bd80      	pop	{r7, pc}
   16d96:	207e      	movs	r0, #126	; 0x7e
   16d98:	227f      	movs	r2, #127	; 0x7f
   16d9a:	2881      	cmp	r0, #129	; 0x81
   16d9c:	d3ea      	bcc.n	16d74 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   16d9e:	e003      	b.n	16da8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   16da0:	207d      	movs	r0, #125	; 0x7d
   16da2:	227e      	movs	r2, #126	; 0x7e
   16da4:	2881      	cmp	r0, #129	; 0x81
   16da6:	d3e5      	bcc.n	16d74 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   16da8:	2180      	movs	r1, #128	; 0x80
   16daa:	f7ff fb0a 	bl	163c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16dae:	defe      	udf	#254	; 0xfe

00016db0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   16db0:	b5b0      	push	{r4, r5, r7, lr}
   16db2:	b0a2      	sub	sp, #136	; 0x88
   16db4:	6800      	ldr	r0, [r0, #0]
   16db6:	f10d 0e08 	add.w	lr, sp, #8
   16dba:	468c      	mov	ip, r1
   16dbc:	2381      	movs	r3, #129	; 0x81
   16dbe:	2100      	movs	r1, #0
   16dc0:	f000 020f 	and.w	r2, r0, #15
   16dc4:	f102 0457 	add.w	r4, r2, #87	; 0x57
   16dc8:	2a0a      	cmp	r2, #10
   16dca:	bf38      	it	cc
   16dcc:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   16dd0:	eb0e 0203 	add.w	r2, lr, r3
   16dd4:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   16dd8:	f802 4c02 	strb.w	r4, [r2, #-2]
   16ddc:	d030      	beq.n	16e40 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   16dde:	0904      	lsrs	r4, r0, #4
   16de0:	f004 040f 	and.w	r4, r4, #15
   16de4:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16de8:	2c0a      	cmp	r4, #10
   16dea:	bf38      	it	cc
   16dec:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16df0:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   16df4:	f802 5c03 	strb.w	r5, [r2, #-3]
   16df8:	d028      	beq.n	16e4c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   16dfa:	0a04      	lsrs	r4, r0, #8
   16dfc:	f004 040f 	and.w	r4, r4, #15
   16e00:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16e04:	2c0a      	cmp	r4, #10
   16e06:	bf38      	it	cc
   16e08:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16e0c:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16e10:	f802 5c04 	strb.w	r5, [r2, #-4]
   16e14:	d01f      	beq.n	16e56 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   16e16:	0b04      	lsrs	r4, r0, #12
   16e18:	3b04      	subs	r3, #4
   16e1a:	f004 040f 	and.w	r4, r4, #15
   16e1e:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16e22:	2c0a      	cmp	r4, #10
   16e24:	bf38      	it	cc
   16e26:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16e2a:	f802 5c05 	strb.w	r5, [r2, #-5]
   16e2e:	0c02      	lsrs	r2, r0, #16
   16e30:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   16e34:	4610      	mov	r0, r2
   16e36:	d1c3      	bne.n	16dc0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   16e38:	1e58      	subs	r0, r3, #1
   16e3a:	2881      	cmp	r0, #129	; 0x81
   16e3c:	d30f      	bcc.n	16e5e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   16e3e:	e01e      	b.n	16e7e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16e40:	1e59      	subs	r1, r3, #1
   16e42:	1e98      	subs	r0, r3, #2
   16e44:	460b      	mov	r3, r1
   16e46:	2881      	cmp	r0, #129	; 0x81
   16e48:	d309      	bcc.n	16e5e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   16e4a:	e018      	b.n	16e7e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16e4c:	1ed8      	subs	r0, r3, #3
   16e4e:	3b02      	subs	r3, #2
   16e50:	2881      	cmp	r0, #129	; 0x81
   16e52:	d304      	bcc.n	16e5e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   16e54:	e013      	b.n	16e7e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16e56:	1f18      	subs	r0, r3, #4
   16e58:	3b03      	subs	r3, #3
   16e5a:	2881      	cmp	r0, #129	; 0x81
   16e5c:	d20f      	bcs.n	16e7e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16e5e:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   16e62:	f24f 2265 	movw	r2, #62053	; 0xf265
   16e66:	4470      	add	r0, lr
   16e68:	f2c0 0201 	movt	r2, #1
   16e6c:	e9cd 0100 	strd	r0, r1, [sp]
   16e70:	4660      	mov	r0, ip
   16e72:	2101      	movs	r1, #1
   16e74:	2302      	movs	r3, #2
   16e76:	f7fe ff07 	bl	15c88 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16e7a:	b022      	add	sp, #136	; 0x88
   16e7c:	bdb0      	pop	{r4, r5, r7, pc}
   16e7e:	2180      	movs	r1, #128	; 0x80
   16e80:	f7ff fa9f 	bl	163c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16e84:	defe      	udf	#254	; 0xfe

00016e86 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   16e86:	b5b0      	push	{r4, r5, r7, lr}
   16e88:	b0a2      	sub	sp, #136	; 0x88
   16e8a:	6800      	ldr	r0, [r0, #0]
   16e8c:	f10d 0e08 	add.w	lr, sp, #8
   16e90:	468c      	mov	ip, r1
   16e92:	2381      	movs	r3, #129	; 0x81
   16e94:	2100      	movs	r1, #0
   16e96:	f000 020f 	and.w	r2, r0, #15
   16e9a:	f102 0437 	add.w	r4, r2, #55	; 0x37
   16e9e:	2a0a      	cmp	r2, #10
   16ea0:	bf38      	it	cc
   16ea2:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   16ea6:	eb0e 0203 	add.w	r2, lr, r3
   16eaa:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   16eae:	f802 4c02 	strb.w	r4, [r2, #-2]
   16eb2:	d030      	beq.n	16f16 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   16eb4:	0904      	lsrs	r4, r0, #4
   16eb6:	f004 040f 	and.w	r4, r4, #15
   16eba:	f104 0537 	add.w	r5, r4, #55	; 0x37
   16ebe:	2c0a      	cmp	r4, #10
   16ec0:	bf38      	it	cc
   16ec2:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16ec6:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   16eca:	f802 5c03 	strb.w	r5, [r2, #-3]
   16ece:	d028      	beq.n	16f22 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   16ed0:	0a04      	lsrs	r4, r0, #8
   16ed2:	f004 040f 	and.w	r4, r4, #15
   16ed6:	f104 0537 	add.w	r5, r4, #55	; 0x37
   16eda:	2c0a      	cmp	r4, #10
   16edc:	bf38      	it	cc
   16ede:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16ee2:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16ee6:	f802 5c04 	strb.w	r5, [r2, #-4]
   16eea:	d01f      	beq.n	16f2c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   16eec:	0b04      	lsrs	r4, r0, #12
   16eee:	3b04      	subs	r3, #4
   16ef0:	f004 040f 	and.w	r4, r4, #15
   16ef4:	f104 0537 	add.w	r5, r4, #55	; 0x37
   16ef8:	2c0a      	cmp	r4, #10
   16efa:	bf38      	it	cc
   16efc:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16f00:	f802 5c05 	strb.w	r5, [r2, #-5]
   16f04:	0c02      	lsrs	r2, r0, #16
   16f06:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   16f0a:	4610      	mov	r0, r2
   16f0c:	d1c3      	bne.n	16e96 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   16f0e:	1e58      	subs	r0, r3, #1
   16f10:	2881      	cmp	r0, #129	; 0x81
   16f12:	d30f      	bcc.n	16f34 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   16f14:	e01e      	b.n	16f54 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16f16:	1e59      	subs	r1, r3, #1
   16f18:	1e98      	subs	r0, r3, #2
   16f1a:	460b      	mov	r3, r1
   16f1c:	2881      	cmp	r0, #129	; 0x81
   16f1e:	d309      	bcc.n	16f34 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   16f20:	e018      	b.n	16f54 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16f22:	1ed8      	subs	r0, r3, #3
   16f24:	3b02      	subs	r3, #2
   16f26:	2881      	cmp	r0, #129	; 0x81
   16f28:	d304      	bcc.n	16f34 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   16f2a:	e013      	b.n	16f54 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16f2c:	1f18      	subs	r0, r3, #4
   16f2e:	3b03      	subs	r3, #3
   16f30:	2881      	cmp	r0, #129	; 0x81
   16f32:	d20f      	bcs.n	16f54 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16f34:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   16f38:	f24f 2265 	movw	r2, #62053	; 0xf265
   16f3c:	4470      	add	r0, lr
   16f3e:	f2c0 0201 	movt	r2, #1
   16f42:	e9cd 0100 	strd	r0, r1, [sp]
   16f46:	4660      	mov	r0, ip
   16f48:	2101      	movs	r1, #1
   16f4a:	2302      	movs	r3, #2
   16f4c:	f7fe fe9c 	bl	15c88 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16f50:	b022      	add	sp, #136	; 0x88
   16f52:	bdb0      	pop	{r4, r5, r7, pc}
   16f54:	2180      	movs	r1, #128	; 0x80
   16f56:	f7ff fa34 	bl	163c2 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16f5a:	defe      	udf	#254	; 0xfe

00016f5c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   16f5c:	b580      	push	{r7, lr}
   16f5e:	b08c      	sub	sp, #48	; 0x30
   16f60:	7802      	ldrb	r2, [r0, #0]
   16f62:	2a64      	cmp	r2, #100	; 0x64
   16f64:	d314      	bcc.n	16f90 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   16f66:	f248 501f 	movw	r0, #34079	; 0x851f
   16f6a:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   16f6e:	fba2 0300 	umull	r0, r3, r2, r0
   16f72:	2064      	movs	r0, #100	; 0x64
   16f74:	095b      	lsrs	r3, r3, #5
   16f76:	fb03 2010 	mls	r0, r3, r0, r2
   16f7a:	f24f 2267 	movw	r2, #62055	; 0xf267
   16f7e:	f2c0 0201 	movt	r2, #1
   16f82:	b2c0      	uxtb	r0, r0
   16f84:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   16f88:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   16f8c:	2024      	movs	r0, #36	; 0x24
   16f8e:	e003      	b.n	16f98 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   16f90:	2a0a      	cmp	r2, #10
   16f92:	d206      	bcs.n	16fa2 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   16f94:	2026      	movs	r0, #38	; 0x26
   16f96:	4613      	mov	r3, r2
   16f98:	f103 0230 	add.w	r2, r3, #48	; 0x30
   16f9c:	ab02      	add	r3, sp, #8
   16f9e:	541a      	strb	r2, [r3, r0]
   16fa0:	e008      	b.n	16fb4 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   16fa2:	f24f 2067 	movw	r0, #62055	; 0xf267
   16fa6:	f2c0 0001 	movt	r0, #1
   16faa:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   16fae:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   16fb2:	2025      	movs	r0, #37	; 0x25
   16fb4:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   16fb8:	ab02      	add	r3, sp, #8
   16fba:	4418      	add	r0, r3
   16fbc:	2300      	movs	r3, #0
   16fbe:	e9cd 0200 	strd	r0, r2, [sp]
   16fc2:	f24f 0234 	movw	r2, #61492	; 0xf034
   16fc6:	4608      	mov	r0, r1
   16fc8:	f2c0 0201 	movt	r2, #1
   16fcc:	2101      	movs	r1, #1
   16fce:	f7fe fe5b 	bl	15c88 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16fd2:	b00c      	add	sp, #48	; 0x30
   16fd4:	bd80      	pop	{r7, pc}

00016fd6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   16fd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fda:	b08f      	sub	sp, #60	; 0x3c
   16fdc:	6805      	ldr	r5, [r0, #0]
   16fde:	f248 581f 	movw	r8, #34079	; 0x851f
   16fe2:	460e      	mov	r6, r1
   16fe4:	f24f 2167 	movw	r1, #62055	; 0xf267
   16fe8:	2d00      	cmp	r5, #0
   16fea:	f242 7910 	movw	r9, #10000	; 0x2710
   16fee:	462b      	mov	r3, r5
   16ff0:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   16ff4:	bf48      	it	mi
   16ff6:	426b      	negmi	r3, r5
   16ff8:	454b      	cmp	r3, r9
   16ffa:	f2c0 0101 	movt	r1, #1
   16ffe:	d33a      	bcc.n	17076 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   17000:	f241 7a59 	movw	sl, #5977	; 0x1759
   17004:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   17008:	f10d 0e14 	add.w	lr, sp, #20
   1700c:	2400      	movs	r4, #0
   1700e:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   17012:	f04f 0b64 	mov.w	fp, #100	; 0x64
   17016:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   1701a:	e9cd 5603 	strd	r5, r6, [sp, #12]
   1701e:	fba3 250a 	umull	r2, r5, r3, sl
   17022:	eb0e 0704 	add.w	r7, lr, r4
   17026:	3c04      	subs	r4, #4
   17028:	4283      	cmp	r3, r0
   1702a:	ea4f 3255 	mov.w	r2, r5, lsr #13
   1702e:	fb02 3519 	mls	r5, r2, r9, r3
   17032:	4613      	mov	r3, r2
   17034:	b2ae      	uxth	r6, r5
   17036:	fba6 6c08 	umull	r6, ip, r6, r8
   1703a:	ea4f 165c 	mov.w	r6, ip, lsr #5
   1703e:	fb06 551b 	mls	r5, r6, fp, r5
   17042:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   17046:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   1704a:	b2ad      	uxth	r5, r5
   1704c:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   17050:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   17054:	d8e3      	bhi.n	1701e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   17056:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   1705a:	f104 0027 	add.w	r0, r4, #39	; 0x27
   1705e:	4613      	mov	r3, r2
   17060:	2b63      	cmp	r3, #99	; 0x63
   17062:	dc0b      	bgt.n	1707c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   17064:	461a      	mov	r2, r3
   17066:	2a0a      	cmp	r2, #10
   17068:	db17      	blt.n	1709a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   1706a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   1706e:	3802      	subs	r0, #2
   17070:	aa05      	add	r2, sp, #20
   17072:	5211      	strh	r1, [r2, r0]
   17074:	e016      	b.n	170a4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   17076:	2027      	movs	r0, #39	; 0x27
   17078:	2b63      	cmp	r3, #99	; 0x63
   1707a:	ddf3      	ble.n	17064 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   1707c:	b29a      	uxth	r2, r3
   1707e:	3802      	subs	r0, #2
   17080:	fba2 2708 	umull	r2, r7, r2, r8
   17084:	097a      	lsrs	r2, r7, #5
   17086:	2764      	movs	r7, #100	; 0x64
   17088:	fb02 3317 	mls	r3, r2, r7, r3
   1708c:	af05      	add	r7, sp, #20
   1708e:	b29b      	uxth	r3, r3
   17090:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   17094:	523b      	strh	r3, [r7, r0]
   17096:	2a0a      	cmp	r2, #10
   17098:	dae7      	bge.n	1706a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   1709a:	3801      	subs	r0, #1
   1709c:	f102 0130 	add.w	r1, r2, #48	; 0x30
   170a0:	aa05      	add	r2, sp, #20
   170a2:	5411      	strb	r1, [r2, r0]
   170a4:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   170a8:	aa05      	add	r2, sp, #20
   170aa:	4410      	add	r0, r2
   170ac:	f24f 0234 	movw	r2, #61492	; 0xf034
   170b0:	e9cd 0100 	strd	r0, r1, [sp]
   170b4:	43e8      	mvns	r0, r5
   170b6:	0fc1      	lsrs	r1, r0, #31
   170b8:	f2c0 0201 	movt	r2, #1
   170bc:	4630      	mov	r0, r6
   170be:	2300      	movs	r3, #0
   170c0:	f7fe fde2 	bl	15c88 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   170c4:	b00f      	add	sp, #60	; 0x3c
   170c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000170ca <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   170ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   170ce:	b08d      	sub	sp, #52	; 0x34
   170d0:	468c      	mov	ip, r1
   170d2:	6801      	ldr	r1, [r0, #0]
   170d4:	f248 5e1f 	movw	lr, #34079	; 0x851f
   170d8:	f24f 2067 	movw	r0, #62055	; 0xf267
   170dc:	f242 7810 	movw	r8, #10000	; 0x2710
   170e0:	4541      	cmp	r1, r8
   170e2:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   170e6:	f2c0 0001 	movt	r0, #1
   170ea:	d337      	bcc.n	1715c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   170ec:	f241 7959 	movw	r9, #5977	; 0x1759
   170f0:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   170f4:	f10d 0b0c 	add.w	fp, sp, #12
   170f8:	2300      	movs	r3, #0
   170fa:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   170fe:	f04f 0a64 	mov.w	sl, #100	; 0x64
   17102:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   17106:	fba1 2409 	umull	r2, r4, r1, r9
   1710a:	42b9      	cmp	r1, r7
   1710c:	ea4f 3254 	mov.w	r2, r4, lsr #13
   17110:	fb02 1418 	mls	r4, r2, r8, r1
   17114:	4611      	mov	r1, r2
   17116:	b2a5      	uxth	r5, r4
   17118:	fba5 560e 	umull	r5, r6, r5, lr
   1711c:	ea4f 1556 	mov.w	r5, r6, lsr #5
   17120:	eb0b 0603 	add.w	r6, fp, r3
   17124:	fb05 441a 	mls	r4, r5, sl, r4
   17128:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   1712c:	f1a3 0304 	sub.w	r3, r3, #4
   17130:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   17134:	b2a4      	uxth	r4, r4
   17136:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   1713a:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   1713e:	d8e2      	bhi.n	17106 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   17140:	f103 0427 	add.w	r4, r3, #39	; 0x27
   17144:	4611      	mov	r1, r2
   17146:	2963      	cmp	r1, #99	; 0x63
   17148:	dc0b      	bgt.n	17162 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   1714a:	460b      	mov	r3, r1
   1714c:	2b0a      	cmp	r3, #10
   1714e:	db17      	blt.n	17180 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   17150:	1ea1      	subs	r1, r4, #2
   17152:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   17156:	aa03      	add	r2, sp, #12
   17158:	5250      	strh	r0, [r2, r1]
   1715a:	e016      	b.n	1718a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   1715c:	2427      	movs	r4, #39	; 0x27
   1715e:	2963      	cmp	r1, #99	; 0x63
   17160:	ddf3      	ble.n	1714a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   17162:	b28a      	uxth	r2, r1
   17164:	3c02      	subs	r4, #2
   17166:	fba2 230e 	umull	r2, r3, r2, lr
   1716a:	2264      	movs	r2, #100	; 0x64
   1716c:	095b      	lsrs	r3, r3, #5
   1716e:	fb03 1112 	mls	r1, r3, r2, r1
   17172:	aa03      	add	r2, sp, #12
   17174:	b289      	uxth	r1, r1
   17176:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   1717a:	5311      	strh	r1, [r2, r4]
   1717c:	2b0a      	cmp	r3, #10
   1717e:	dae7      	bge.n	17150 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   17180:	1e61      	subs	r1, r4, #1
   17182:	aa03      	add	r2, sp, #12
   17184:	f103 0030 	add.w	r0, r3, #48	; 0x30
   17188:	5450      	strb	r0, [r2, r1]
   1718a:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   1718e:	aa03      	add	r2, sp, #12
   17190:	4411      	add	r1, r2
   17192:	f24f 0234 	movw	r2, #61492	; 0xf034
   17196:	e9cd 1000 	strd	r1, r0, [sp]
   1719a:	f2c0 0201 	movt	r2, #1
   1719e:	4660      	mov	r0, ip
   171a0:	2101      	movs	r1, #1
   171a2:	2300      	movs	r3, #0
   171a4:	f7fe fd70 	bl	15c88 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   171a8:	b00d      	add	sp, #52	; 0x34
   171aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000171ae <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   171ae:	e9d0 2000 	ldrd	r2, r0, [r0]
   171b2:	68c3      	ldr	r3, [r0, #12]
   171b4:	4610      	mov	r0, r2
   171b6:	4718      	bx	r3

000171b8 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   171b8:	460b      	mov	r3, r1
   171ba:	e9d0 1200 	ldrd	r1, r2, [r0]
   171be:	4618      	mov	r0, r3
   171c0:	f7fe beaa 	b.w	15f18 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>

000171c4 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   171c4:	4b07      	ldr	r3, [pc, #28]	; (171e4 <__semihost+0x20>)
   171c6:	781b      	ldrb	r3, [r3, #0]
   171c8:	b14b      	cbz	r3, 171de <__semihost+0x1a>
static int __semihost(int command, void* message) {
   171ca:	b410      	push	{r4}
   171cc:	4602      	mov	r2, r0
   171ce:	460c      	mov	r4, r1
    __asm( 
   171d0:	4610      	mov	r0, r2
   171d2:	4621      	mov	r1, r4
   171d4:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   171d6:	2000      	movs	r0, #0
}
   171d8:	f85d 4b04 	ldr.w	r4, [sp], #4
   171dc:	4770      	bx	lr
    if (!log_enabled) return -1;
   171de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   171e2:	4770      	bx	lr
   171e4:	20000100 	.word	0x20000100

000171e8 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   171e8:	4b02      	ldr	r3, [pc, #8]	; (171f4 <debugger_connected+0xc>)
   171ea:	6818      	ldr	r0, [r3, #0]
}
   171ec:	f000 0001 	and.w	r0, r0, #1
   171f0:	4770      	bx	lr
   171f2:	bf00      	nop
   171f4:	e000edf0 	.word	0xe000edf0

000171f8 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   171f8:	b570      	push	{r4, r5, r6, lr}
   171fa:	b084      	sub	sp, #16
   171fc:	4606      	mov	r6, r0
   171fe:	460d      	mov	r5, r1
   17200:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   17202:	f7ff fff1 	bl	171e8 <debugger_connected>
   17206:	4603      	mov	r3, r0
   17208:	b108      	cbz	r0, 1720e <semihost_write+0x16>
    if (length == 0) { return 0; }
   1720a:	b91c      	cbnz	r4, 17214 <semihost_write+0x1c>
   1720c:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   1720e:	4618      	mov	r0, r3
   17210:	b004      	add	sp, #16
   17212:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   17214:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   17216:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   17218:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   1721a:	a901      	add	r1, sp, #4
   1721c:	2005      	movs	r0, #5
   1721e:	f7ff ffd1 	bl	171c4 <__semihost>
   17222:	4603      	mov	r3, r0
   17224:	e7f3      	b.n	1720e <semihost_write+0x16>
	...

00017228 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   17228:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   1722a:	4b0e      	ldr	r3, [pc, #56]	; (17264 <console_flush+0x3c>)
   1722c:	781b      	ldrb	r3, [r3, #0]
   1722e:	b1bb      	cbz	r3, 17260 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   17230:	4b0d      	ldr	r3, [pc, #52]	; (17268 <console_flush+0x40>)
   17232:	681d      	ldr	r5, [r3, #0]
   17234:	b1a5      	cbz	r5, 17260 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   17236:	4b0d      	ldr	r3, [pc, #52]	; (1726c <console_flush+0x44>)
   17238:	685b      	ldr	r3, [r3, #4]
   1723a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   1723e:	b97b      	cbnz	r3, 17260 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   17240:	4b09      	ldr	r3, [pc, #36]	; (17268 <console_flush+0x40>)
   17242:	2200      	movs	r2, #0
   17244:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   17246:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   17248:	e005      	b.n	17256 <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   1724a:	88e2      	ldrh	r2, [r4, #6]
   1724c:	6821      	ldr	r1, [r4, #0]
   1724e:	2002      	movs	r0, #2
   17250:	f7ff ffd2 	bl	171f8 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   17254:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   17256:	2c00      	cmp	r4, #0
   17258:	d1f7      	bne.n	1724a <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   1725a:	4628      	mov	r0, r5
   1725c:	f001 fbfc 	bl	18a58 <os_mbuf_free_chain>
}
   17260:	bd38      	pop	{r3, r4, r5, pc}
   17262:	bf00      	nop
   17264:	20000100 	.word	0x20000100
   17268:	20006f04 	.word	0x20006f04
   1726c:	e000ed00 	.word	0xe000ed00

00017270 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   17270:	b508      	push	{r3, lr}
   17272:	f7ff ffd9 	bl	17228 <console_flush>
   17276:	bd08      	pop	{r3, pc}

00017278 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   17278:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   1727a:	4b12      	ldr	r3, [pc, #72]	; (172c4 <console_buffer+0x4c>)
   1727c:	781b      	ldrb	r3, [r3, #0]
   1727e:	b903      	cbnz	r3, 17282 <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   17280:	bd38      	pop	{r3, r4, r5, pc}
   17282:	460d      	mov	r5, r1
   17284:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   17286:	f7ff ffaf 	bl	171e8 <debugger_connected>
   1728a:	2800      	cmp	r0, #0
   1728c:	d0f8      	beq.n	17280 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   1728e:	4b0e      	ldr	r3, [pc, #56]	; (172c8 <console_buffer+0x50>)
   17290:	681b      	ldr	r3, [r3, #0]
   17292:	b173      	cbz	r3, 172b2 <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   17294:	4b0c      	ldr	r3, [pc, #48]	; (172c8 <console_buffer+0x50>)
   17296:	6818      	ldr	r0, [r3, #0]
   17298:	f001 fbf0 	bl	18a7c <os_mbuf_len>
   1729c:	4428      	add	r0, r5
   1729e:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   172a2:	d2ed      	bcs.n	17280 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   172a4:	b2aa      	uxth	r2, r5
   172a6:	4621      	mov	r1, r4
   172a8:	4b07      	ldr	r3, [pc, #28]	; (172c8 <console_buffer+0x50>)
   172aa:	6818      	ldr	r0, [r3, #0]
   172ac:	f001 fbf0 	bl	18a90 <os_mbuf_append>
   172b0:	e7e6      	b.n	17280 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   172b2:	2100      	movs	r1, #0
   172b4:	b2a8      	uxth	r0, r5
   172b6:	f001 fd93 	bl	18de0 <os_msys_get_pkthdr>
   172ba:	4b03      	ldr	r3, [pc, #12]	; (172c8 <console_buffer+0x50>)
   172bc:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   172be:	2800      	cmp	r0, #0
   172c0:	d1e8      	bne.n	17294 <console_buffer+0x1c>
   172c2:	e7dd      	b.n	17280 <console_buffer+0x8>
   172c4:	20000100 	.word	0x20000100
   172c8:	20006f04 	.word	0x20006f04

000172cc <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   172cc:	b500      	push	{lr}
   172ce:	b083      	sub	sp, #12
   172d0:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   172d4:	280d      	cmp	r0, #13
   172d6:	d004      	beq.n	172e2 <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   172d8:	2101      	movs	r1, #1
   172da:	f10d 0007 	add.w	r0, sp, #7
   172de:	f7ff ffcb 	bl	17278 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   172e2:	b003      	add	sp, #12
   172e4:	f85d fb04 	ldr.w	pc, [sp], #4

000172e8 <console_printhex>:
void console_printhex(uint8_t v) {
   172e8:	b510      	push	{r4, lr}
   172ea:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   172ec:	2310      	movs	r3, #16
    int length = 0;
   172ee:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   172f0:	e005      	b.n	172fe <console_printhex+0x16>
        v = v % divisor;
   172f2:	fbb0 f1f3 	udiv	r1, r0, r3
   172f6:	fb03 0011 	mls	r0, r3, r1, r0
   172fa:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   172fc:	091b      	lsrs	r3, r3, #4
   172fe:	b18b      	cbz	r3, 17324 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   17300:	fbb0 f4f3 	udiv	r4, r0, r3
   17304:	f104 0130 	add.w	r1, r4, #48	; 0x30
   17308:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   1730a:	2939      	cmp	r1, #57	; 0x39
   1730c:	d902      	bls.n	17314 <console_printhex+0x2c>
   1730e:	f104 0157 	add.w	r1, r4, #87	; 0x57
   17312:	b2c9      	uxtb	r1, r1
            if (length < size) {
   17314:	2a02      	cmp	r2, #2
   17316:	dcec      	bgt.n	172f2 <console_printhex+0xa>
                buffer[length++] = digit;
   17318:	ac02      	add	r4, sp, #8
   1731a:	4414      	add	r4, r2
   1731c:	f804 1c04 	strb.w	r1, [r4, #-4]
   17320:	3201      	adds	r2, #1
   17322:	e7e6      	b.n	172f2 <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   17324:	b92a      	cbnz	r2, 17332 <console_printhex+0x4a>
   17326:	ab02      	add	r3, sp, #8
   17328:	4413      	add	r3, r2
   1732a:	2130      	movs	r1, #48	; 0x30
   1732c:	f803 1c04 	strb.w	r1, [r3, #-4]
   17330:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   17332:	2a02      	cmp	r2, #2
   17334:	dc04      	bgt.n	17340 <console_printhex+0x58>
   17336:	ab02      	add	r3, sp, #8
   17338:	441a      	add	r2, r3
   1733a:	2300      	movs	r3, #0
   1733c:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   17340:	2300      	movs	r3, #0
   17342:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   17346:	a801      	add	r0, sp, #4
   17348:	f002 fb73 	bl	19a32 <strlen>
   1734c:	4601      	mov	r1, r0
   1734e:	a801      	add	r0, sp, #4
   17350:	f7ff ff92 	bl	17278 <console_buffer>
}
   17354:	b002      	add	sp, #8
   17356:	bd10      	pop	{r4, pc}

00017358 <console_printint>:
void console_printint(int i) {
   17358:	b508      	push	{r3, lr}
    console_printf("%d", i);
   1735a:	4601      	mov	r1, r0
   1735c:	4801      	ldr	r0, [pc, #4]	; (17364 <console_printint+0xc>)
   1735e:	f000 f873 	bl	17448 <console_printf>
}
   17362:	bd08      	pop	{r3, pc}
   17364:	0002022c 	.word	0x0002022c

00017368 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   17368:	b180      	cbz	r0, 1738c <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   1736a:	b570      	push	{r4, r5, r6, lr}
   1736c:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   1736e:	b161      	cbz	r1, 1738a <console_dump+0x22>
   17370:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   17372:	2400      	movs	r4, #0
   17374:	e007      	b.n	17386 <console_dump+0x1e>
   17376:	5d30      	ldrb	r0, [r6, r4]
   17378:	f7ff ffb6 	bl	172e8 <console_printhex>
   1737c:	2101      	movs	r1, #1
   1737e:	4804      	ldr	r0, [pc, #16]	; (17390 <console_dump+0x28>)
   17380:	f7ff ff7a 	bl	17278 <console_buffer>
   17384:	3401      	adds	r4, #1
   17386:	42ac      	cmp	r4, r5
   17388:	d3f5      	bcc.n	17376 <console_dump+0xe>
}
   1738a:	bd70      	pop	{r4, r5, r6, pc}
   1738c:	4770      	bx	lr
   1738e:	bf00      	nop
   17390:	00020228 	.word	0x00020228

00017394 <console_out_nolock>:

int console_out_nolock(int character) {
   17394:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   17396:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   17398:	4b0b      	ldr	r3, [pc, #44]	; (173c8 <console_out_nolock+0x34>)
   1739a:	781b      	ldrb	r3, [r3, #0]
   1739c:	b953      	cbnz	r3, 173b4 <console_out_nolock+0x20>
   1739e:	4604      	mov	r4, r0
    if ('\n' == c) {
   173a0:	2d0a      	cmp	r5, #10
   173a2:	d009      	beq.n	173b8 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   173a4:	4b09      	ldr	r3, [pc, #36]	; (173cc <console_out_nolock+0x38>)
   173a6:	2201      	movs	r2, #1
   173a8:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   173aa:	4628      	mov	r0, r5
   173ac:	f7ff ff8e 	bl	172cc <semihosting_console_write_ch>
    return character;
   173b0:	4620      	mov	r0, r4
}
   173b2:	bd38      	pop	{r3, r4, r5, pc}
   173b4:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   173b6:	e7fc      	b.n	173b2 <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   173b8:	200d      	movs	r0, #13
   173ba:	f7ff ff87 	bl	172cc <semihosting_console_write_ch>
        console_is_midline = 0;
   173be:	4b03      	ldr	r3, [pc, #12]	; (173cc <console_out_nolock+0x38>)
   173c0:	2200      	movs	r2, #0
   173c2:	601a      	str	r2, [r3, #0]
   173c4:	e7f1      	b.n	173aa <console_out_nolock+0x16>
   173c6:	bf00      	nop
   173c8:	2000ddb4 	.word	0x2000ddb4
   173cc:	2000ddb8 	.word	0x2000ddb8

000173d0 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   173d0:	2000      	movs	r0, #0
   173d2:	4770      	bx	lr

000173d4 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   173d4:	b570      	push	{r4, r5, r6, lr}
   173d6:	4606      	mov	r6, r0
   173d8:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   173da:	2400      	movs	r4, #0
   173dc:	42ac      	cmp	r4, r5
   173de:	da07      	bge.n	173f0 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   173e0:	5d30      	ldrb	r0, [r6, r4]
   173e2:	f7ff ffd7 	bl	17394 <console_out_nolock>
   173e6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   173ea:	d001      	beq.n	173f0 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   173ec:	3401      	adds	r4, #1
   173ee:	e7f5      	b.n	173dc <console_write+0x8>
    }
}
   173f0:	bd70      	pop	{r4, r5, r6, pc}

000173f2 <console_blocking_mode>:

void console_blocking_mode(void) {
   173f2:	b508      	push	{r3, lr}
    disable_buffer();
   173f4:	f7ff ff3c 	bl	17270 <disable_buffer>
}
   173f8:	bd08      	pop	{r3, pc}
	...

000173fc <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   173fc:	b510      	push	{r4, lr}
   173fe:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   17400:	4b0d      	ldr	r3, [pc, #52]	; (17438 <console_pkg_init+0x3c>)
   17402:	781b      	ldrb	r3, [r3, #0]
   17404:	b193      	cbz	r3, 1742c <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   17406:	480d      	ldr	r0, [pc, #52]	; (1743c <console_pkg_init+0x40>)
   17408:	f001 f9fa 	bl	18800 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   1740c:	480c      	ldr	r0, [pc, #48]	; (17440 <console_pkg_init+0x44>)
   1740e:	f001 fd15 	bl	18e3c <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   17412:	f7ff ffdd 	bl	173d0 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   17416:	b138      	cbz	r0, 17428 <console_pkg_init+0x2c>
   17418:	2000      	movs	r0, #0
   1741a:	9000      	str	r0, [sp, #0]
   1741c:	4b09      	ldr	r3, [pc, #36]	; (17444 <console_pkg_init+0x48>)
   1741e:	681c      	ldr	r4, [r3, #0]
   17420:	4603      	mov	r3, r0
   17422:	4602      	mov	r2, r0
   17424:	4601      	mov	r1, r0
   17426:	47a0      	blx	r4
}
   17428:	b002      	add	sp, #8
   1742a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1742c:	461a      	mov	r2, r3
   1742e:	4619      	mov	r1, r3
   17430:	4618      	mov	r0, r3
   17432:	f000 fed1 	bl	181d8 <__assert_func>
   17436:	bf00      	nop
   17438:	2000ddbc 	.word	0x2000ddbc
   1743c:	20006f08 	.word	0x20006f08
   17440:	20006f18 	.word	0x20006f18
   17444:	20000104 	.word	0x20000104

00017448 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   17448:	b40f      	push	{r0, r1, r2, r3}
   1744a:	b510      	push	{r4, lr}
   1744c:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   1744e:	f000 f81f 	bl	17490 <console_get_ticks>
   17452:	b160      	cbz	r0, 1746e <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   17454:	4b0c      	ldr	r3, [pc, #48]	; (17488 <console_printf+0x40>)
   17456:	681b      	ldr	r3, [r3, #0]
   17458:	b10b      	cbz	r3, 1745e <console_printf+0x16>
    num_chars = 0;
   1745a:	2400      	movs	r4, #0
   1745c:	e008      	b.n	17470 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   1745e:	f002 f8d9 	bl	19614 <os_time_get>
   17462:	4601      	mov	r1, r0
   17464:	4809      	ldr	r0, [pc, #36]	; (1748c <console_printf+0x44>)
   17466:	f002 fd97 	bl	19f98 <printf>
   1746a:	4604      	mov	r4, r0
   1746c:	e000      	b.n	17470 <console_printf+0x28>
    num_chars = 0;
   1746e:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   17470:	a905      	add	r1, sp, #20
   17472:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   17474:	9804      	ldr	r0, [sp, #16]
   17476:	f002 fdbf 	bl	19ff8 <vprintf>
    va_end(args);

    return num_chars;
}
   1747a:	4420      	add	r0, r4
   1747c:	b002      	add	sp, #8
   1747e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17482:	b004      	add	sp, #16
   17484:	4770      	bx	lr
   17486:	bf00      	nop
   17488:	2000ddb8 	.word	0x2000ddb8
   1748c:	00020230 	.word	0x00020230

00017490 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   17490:	4b01      	ldr	r3, [pc, #4]	; (17498 <console_get_ticks+0x8>)
   17492:	7818      	ldrb	r0, [r3, #0]
   17494:	4770      	bx	lr
   17496:	bf00      	nop
   17498:	20006f24 	.word	0x20006f24

0001749c <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   1749c:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   1749e:	f000 fe9b 	bl	181d8 <__assert_func>
	...

000174a4 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   174a4:	4b01      	ldr	r3, [pc, #4]	; (174ac <sysinit_start+0x8>)
   174a6:	2201      	movs	r2, #1
   174a8:	701a      	strb	r2, [r3, #0]
}
   174aa:	4770      	bx	lr
   174ac:	2000ddbc 	.word	0x2000ddbc

000174b0 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   174b0:	4b01      	ldr	r3, [pc, #4]	; (174b8 <sysinit_end+0x8>)
   174b2:	2200      	movs	r2, #0
   174b4:	701a      	strb	r2, [r3, #0]
}
   174b6:	4770      	bx	lr
   174b8:	2000ddbc 	.word	0x2000ddbc

000174bc <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   174bc:	4a09      	ldr	r2, [pc, #36]	; (174e4 <NVIC_Relocate+0x28>)
   174be:	4b0a      	ldr	r3, [pc, #40]	; (174e8 <NVIC_Relocate+0x2c>)
   174c0:	429a      	cmp	r2, r3
   174c2:	d00a      	beq.n	174da <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   174c4:	2300      	movs	r3, #0
   174c6:	e006      	b.n	174d6 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   174c8:	4a07      	ldr	r2, [pc, #28]	; (174e8 <NVIC_Relocate+0x2c>)
   174ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   174ce:	4a05      	ldr	r2, [pc, #20]	; (174e4 <NVIC_Relocate+0x28>)
   174d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   174d4:	3301      	adds	r3, #1
   174d6:	2b35      	cmp	r3, #53	; 0x35
   174d8:	ddf6      	ble.n	174c8 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   174da:	4a02      	ldr	r2, [pc, #8]	; (174e4 <NVIC_Relocate+0x28>)
   174dc:	4b03      	ldr	r3, [pc, #12]	; (174ec <NVIC_Relocate+0x30>)
   174de:	609a      	str	r2, [r3, #8]
#endif
}
   174e0:	4770      	bx	lr
   174e2:	bf00      	nop
   174e4:	20000000 	.word	0x20000000
   174e8:	00008020 	.word	0x00008020
   174ec:	e000ed00 	.word	0xe000ed00

000174f0 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   174f0:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   174f2:	2400      	movs	r4, #0
   174f4:	e000      	b.n	174f8 <hal_gpio_irq_handler+0x8>
   174f6:	3401      	adds	r4, #1
   174f8:	2c07      	cmp	r4, #7
   174fa:	dc1c      	bgt.n	17536 <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   174fc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17500:	4a0d      	ldr	r2, [pc, #52]	; (17538 <hal_gpio_irq_handler+0x48>)
   17502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   17506:	2b00      	cmp	r3, #0
   17508:	d0f5      	beq.n	174f6 <hal_gpio_irq_handler+0x6>
   1750a:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   1750e:	2301      	movs	r3, #1
   17510:	40a3      	lsls	r3, r4
   17512:	421a      	tst	r2, r3
   17514:	d0ef      	beq.n	174f6 <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   17516:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1751a:	4a07      	ldr	r2, [pc, #28]	; (17538 <hal_gpio_irq_handler+0x48>)
   1751c:	2100      	movs	r1, #0
   1751e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   17522:	4b06      	ldr	r3, [pc, #24]	; (1753c <hal_gpio_irq_handler+0x4c>)
   17524:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   17528:	2a00      	cmp	r2, #0
   1752a:	d0e4      	beq.n	174f6 <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   1752c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   17530:	6858      	ldr	r0, [r3, #4]
   17532:	4790      	blx	r2
   17534:	e7df      	b.n	174f6 <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   17536:	bd10      	pop	{r4, pc}
   17538:	40006000 	.word	0x40006000
   1753c:	20006f28 	.word	0x20006f28

00017540 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   17540:	4b06      	ldr	r3, [pc, #24]	; (1755c <hal_gpio_irq_setup+0x1c>)
   17542:	781b      	ldrb	r3, [r3, #0]
   17544:	b94b      	cbnz	r3, 1755a <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   17546:	4b06      	ldr	r3, [pc, #24]	; (17560 <hal_gpio_irq_setup+0x20>)
   17548:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1754a:	4a06      	ldr	r2, [pc, #24]	; (17564 <hal_gpio_irq_setup+0x24>)
   1754c:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1754e:	4b06      	ldr	r3, [pc, #24]	; (17568 <hal_gpio_irq_setup+0x28>)
   17550:	2240      	movs	r2, #64	; 0x40
   17552:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   17554:	4b01      	ldr	r3, [pc, #4]	; (1755c <hal_gpio_irq_setup+0x1c>)
   17556:	2201      	movs	r2, #1
   17558:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   1755a:	4770      	bx	lr
   1755c:	20006f68 	.word	0x20006f68
   17560:	e000ed00 	.word	0xe000ed00
   17564:	000174f1 	.word	0x000174f1
   17568:	e000e100 	.word	0xe000e100

0001756c <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1756c:	2000      	movs	r0, #0
   1756e:	2807      	cmp	r0, #7
   17570:	dc05      	bgt.n	1757e <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   17572:	4b04      	ldr	r3, [pc, #16]	; (17584 <hal_gpio_find_empty_slot+0x18>)
   17574:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   17578:	b11b      	cbz	r3, 17582 <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1757a:	3001      	adds	r0, #1
   1757c:	e7f7      	b.n	1756e <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   1757e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   17582:	4770      	bx	lr
   17584:	20006f28 	.word	0x20006f28

00017588 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   17588:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1758a:	2000      	movs	r0, #0
   1758c:	e000      	b.n	17590 <hal_gpio_find_pin+0x8>
   1758e:	3001      	adds	r0, #1
   17590:	2807      	cmp	r0, #7
   17592:	dc0e      	bgt.n	175b2 <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   17594:	4b08      	ldr	r3, [pc, #32]	; (175b8 <hal_gpio_find_pin+0x30>)
   17596:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   1759a:	2b00      	cmp	r3, #0
   1759c:	d0f7      	beq.n	1758e <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   1759e:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   175a2:	4a06      	ldr	r2, [pc, #24]	; (175bc <hal_gpio_find_pin+0x34>)
   175a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   175a8:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   175ac:	428b      	cmp	r3, r1
   175ae:	d1ee      	bne.n	1758e <hal_gpio_find_pin+0x6>
   175b0:	e001      	b.n	175b6 <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   175b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   175b6:	4770      	bx	lr
   175b8:	20006f28 	.word	0x20006f28
   175bc:	40006000 	.word	0x40006000

000175c0 <hal_gpio_init_in>:
    switch (pull) {
   175c0:	2901      	cmp	r1, #1
   175c2:	d003      	beq.n	175cc <hal_gpio_init_in+0xc>
   175c4:	2902      	cmp	r1, #2
   175c6:	d00f      	beq.n	175e8 <hal_gpio_init_in+0x28>
        conf = 0;
   175c8:	2100      	movs	r1, #0
        break;
   175ca:	e000      	b.n	175ce <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   175cc:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   175ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   175d2:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   175d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   175da:	2301      	movs	r3, #1
   175dc:	fa03 f000 	lsl.w	r0, r3, r0
   175e0:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   175e4:	2000      	movs	r0, #0
   175e6:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   175e8:	2104      	movs	r1, #4
   175ea:	e7f0      	b.n	175ce <hal_gpio_init_in+0xe>

000175ec <hal_gpio_init_out>:
    if (val) {
   175ec:	b999      	cbnz	r1, 17616 <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   175ee:	2301      	movs	r3, #1
   175f0:	4083      	lsls	r3, r0
   175f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   175f6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   175fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   175fe:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   17602:	2103      	movs	r1, #3
   17604:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   17608:	2301      	movs	r3, #1
   1760a:	fa03 f000 	lsl.w	r0, r3, r0
   1760e:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   17612:	2000      	movs	r0, #0
   17614:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   17616:	2301      	movs	r3, #1
   17618:	4083      	lsls	r3, r0
   1761a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1761e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   17622:	e7ea      	b.n	175fa <hal_gpio_init_out+0xe>

00017624 <hal_gpio_write>:
    if (val) {
   17624:	b939      	cbnz	r1, 17636 <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   17626:	2301      	movs	r3, #1
   17628:	fa03 f000 	lsl.w	r0, r3, r0
   1762c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17630:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   17634:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   17636:	2301      	movs	r3, #1
   17638:	fa03 f000 	lsl.w	r0, r3, r0
   1763c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17640:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   17644:	4770      	bx	lr

00017646 <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   17646:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1764a:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   1764e:	2301      	movs	r3, #1
   17650:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   17652:	421a      	tst	r2, r3
   17654:	d108      	bne.n	17668 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   17656:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1765a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   1765e:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   17662:	f000 0001 	and.w	r0, r0, #1
}
   17666:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   17668:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1766c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   17670:	fa23 f000 	lsr.w	r0, r3, r0
   17674:	f000 0001 	and.w	r0, r0, #1
   17678:	4770      	bx	lr
	...

0001767c <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   1767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17680:	4680      	mov	r8, r0
   17682:	460f      	mov	r7, r1
   17684:	4616      	mov	r6, r2
   17686:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   17688:	f7ff ff5a 	bl	17540 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   1768c:	f7ff ff6e 	bl	1756c <hal_gpio_find_empty_slot>
    if (i < 0) {
   17690:	1e05      	subs	r5, r0, #0
   17692:	db27      	blt.n	176e4 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   17694:	f89d 1018 	ldrb.w	r1, [sp, #24]
   17698:	4640      	mov	r0, r8
   1769a:	f7ff ff91 	bl	175c0 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   1769e:	2c02      	cmp	r4, #2
   176a0:	d01d      	beq.n	176de <hal_gpio_irq_init+0x62>
   176a2:	2c03      	cmp	r4, #3
   176a4:	d018      	beq.n	176d8 <hal_gpio_irq_init+0x5c>
   176a6:	2c01      	cmp	r4, #1
   176a8:	d002      	beq.n	176b0 <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   176aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   176ae:	e011      	b.n	176d4 <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   176b0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   176b4:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   176b8:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   176bc:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   176c0:	4b0a      	ldr	r3, [pc, #40]	; (176ec <hal_gpio_irq_init+0x70>)
   176c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   176c6:	4b0a      	ldr	r3, [pc, #40]	; (176f0 <hal_gpio_irq_init+0x74>)
   176c8:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   176cc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   176d0:	605e      	str	r6, [r3, #4]

    return 0;
   176d2:	2000      	movs	r0, #0
}
   176d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   176d8:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   176dc:	e7ea      	b.n	176b4 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   176de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   176e2:	e7e7      	b.n	176b4 <hal_gpio_irq_init+0x38>
        return -1;
   176e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   176e8:	e7f4      	b.n	176d4 <hal_gpio_irq_init+0x58>
   176ea:	bf00      	nop
   176ec:	40006000 	.word	0x40006000
   176f0:	20006f28 	.word	0x20006f28

000176f4 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   176f4:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   176f6:	f7ff ff47 	bl	17588 <hal_gpio_find_pin>
    if (i < 0) {
   176fa:	2800      	cmp	r0, #0
   176fc:	db0a      	blt.n	17714 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   176fe:	4a06      	ldr	r2, [pc, #24]	; (17718 <hal_gpio_irq_enable+0x24>)
   17700:	f100 0340 	add.w	r3, r0, #64	; 0x40
   17704:	2100      	movs	r1, #0
   17706:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   1770a:	2301      	movs	r3, #1
   1770c:	fa03 f000 	lsl.w	r0, r3, r0
   17710:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   17714:	bd08      	pop	{r3, pc}
   17716:	bf00      	nop
   17718:	40006000 	.word	0x40006000

0001771c <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   1771c:	3801      	subs	r0, #1
   1771e:	bf00      	nop
   17720:	bf00      	nop
   17722:	bf00      	nop
   17724:	bf00      	nop
   17726:	bf00      	nop
   17728:	bf00      	nop
   1772a:	bf00      	nop
   1772c:	bf00      	nop
   1772e:	bf00      	nop
   17730:	bf00      	nop
   17732:	bf00      	nop
   17734:	bf00      	nop
   17736:	bf00      	nop
   17738:	bf00      	nop
   1773a:	bf00      	nop
   1773c:	bf00      	nop
   1773e:	bf00      	nop
   17740:	bf00      	nop
   17742:	bf00      	nop
   17744:	bf00      	nop
   17746:	bf00      	nop
   17748:	bf00      	nop
   1774a:	bf00      	nop
   1774c:	bf00      	nop
   1774e:	bf00      	nop
   17750:	bf00      	nop
   17752:	bf00      	nop
   17754:	bf00      	nop
   17756:	bf00      	nop
   17758:	bf00      	nop
   1775a:	bf00      	nop
   1775c:	bf00      	nop
   1775e:	bf00      	nop
   17760:	bf00      	nop
   17762:	bf00      	nop
   17764:	bf00      	nop
   17766:	bf00      	nop
   17768:	bf00      	nop
   1776a:	bf00      	nop
   1776c:	bf00      	nop
   1776e:	bf00      	nop
   17770:	bf00      	nop
   17772:	bf00      	nop
   17774:	bf00      	nop
   17776:	bf00      	nop
   17778:	bf00      	nop
   1777a:	bf00      	nop
   1777c:	bf00      	nop
   1777e:	bf00      	nop
   17780:	bf00      	nop
   17782:	bf00      	nop
   17784:	bf00      	nop
   17786:	bf00      	nop
   17788:	bf00      	nop
   1778a:	bf00      	nop
   1778c:	bf00      	nop
   1778e:	bf00      	nop
   17790:	bf00      	nop
   17792:	d1c3      	bne.n	1771c <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   17794:	4770      	bx	lr
	...

00017798 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   17798:	2801      	cmp	r0, #1
   1779a:	d806      	bhi.n	177aa <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   1779c:	4b06      	ldr	r3, [pc, #24]	; (177b8 <hal_i2c_resolve+0x20>)
   1779e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   177a2:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   177a4:	b12b      	cbz	r3, 177b2 <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   177a6:	2000      	movs	r0, #0
}
   177a8:	4770      	bx	lr
        *out_i2c = NULL;
   177aa:	2300      	movs	r3, #0
   177ac:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   177ae:	2002      	movs	r0, #2
   177b0:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   177b2:	2002      	movs	r0, #2
   177b4:	4770      	bx	lr
   177b6:	bf00      	nop
   177b8:	00020238 	.word	0x00020238

000177bc <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   177bc:	b148      	cbz	r0, 177d2 <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   177be:	f010 0f04 	tst.w	r0, #4
   177c2:	d107      	bne.n	177d4 <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   177c4:	f010 0f02 	tst.w	r0, #2
   177c8:	d101      	bne.n	177ce <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   177ca:	2001      	movs	r0, #1
    }
}
   177cc:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   177ce:	2004      	movs	r0, #4
   177d0:	4770      	bx	lr
   177d2:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   177d4:	2005      	movs	r0, #5
   177d6:	4770      	bx	lr

000177d8 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   177d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   177dc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   177e0:	fa23 f000 	lsr.w	r0, r3, r0
}
   177e4:	f000 0001 	and.w	r0, r0, #1
   177e8:	4770      	bx	lr

000177ea <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   177ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   177ee:	4605      	mov	r5, r0
   177f0:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   177f2:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   177f6:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   177fa:	f240 630c 	movw	r3, #1548	; 0x60c
   177fe:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   17802:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   17806:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   1780a:	2101      	movs	r1, #1
   1780c:	f7ff ff0a 	bl	17624 <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   17810:	2101      	movs	r1, #1
   17812:	4630      	mov	r0, r6
   17814:	f7ff ff06 	bl	17624 <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   17818:	f240 630d 	movw	r3, #1549	; 0x60d
   1781c:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   17820:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   17824:	2004      	movs	r0, #4
   17826:	f7ff ff79 	bl	1771c <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   1782a:	2400      	movs	r4, #0
   1782c:	2c08      	cmp	r4, #8
   1782e:	dc14      	bgt.n	1785a <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   17830:	4630      	mov	r0, r6
   17832:	f7ff ffd1 	bl	177d8 <read_gpio_inbuffer>
   17836:	b978      	cbnz	r0, 17858 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   17838:	2100      	movs	r1, #0
   1783a:	4628      	mov	r0, r5
   1783c:	f7ff fef2 	bl	17624 <hal_gpio_write>
        hal_i2c_delay_us(4);
   17840:	2004      	movs	r0, #4
   17842:	f7ff ff6b 	bl	1771c <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   17846:	2101      	movs	r1, #1
   17848:	4628      	mov	r0, r5
   1784a:	f7ff feeb 	bl	17624 <hal_gpio_write>
        hal_i2c_delay_us(4);
   1784e:	2004      	movs	r0, #4
   17850:	f7ff ff64 	bl	1771c <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   17854:	3401      	adds	r4, #1
   17856:	e7e9      	b.n	1782c <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   17858:	b154      	cbz	r4, 17870 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   1785a:	2100      	movs	r1, #0
   1785c:	4630      	mov	r0, r6
   1785e:	f7ff fee1 	bl	17624 <hal_gpio_write>
    hal_i2c_delay_us(4);
   17862:	2004      	movs	r0, #4
   17864:	f7ff ff5a 	bl	1771c <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   17868:	2101      	movs	r1, #1
   1786a:	4630      	mov	r0, r6
   1786c:	f7ff feda 	bl	17624 <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   17870:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17874:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   17878:	f240 620c 	movw	r2, #1548	; 0x60c
   1787c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   17880:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   17884:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   17888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001788c <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   1788c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1788e:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   17890:	b1a1      	cbz	r1, 178bc <hal_i2c_init+0x30>
   17892:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   17894:	a901      	add	r1, sp, #4
   17896:	f7ff ff7f 	bl	17798 <hal_i2c_resolve>
    if (rc != 0) {
   1789a:	4606      	mov	r6, r0
   1789c:	bba8      	cbnz	r0, 1790a <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   1789e:	9b01      	ldr	r3, [sp, #4]
   178a0:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   178a2:	68a3      	ldr	r3, [r4, #8]
   178a4:	2bfa      	cmp	r3, #250	; 0xfa
   178a6:	d035      	beq.n	17914 <hal_i2c_init+0x88>
   178a8:	d90e      	bls.n	178c8 <hal_i2c_init+0x3c>
   178aa:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   178ae:	d02f      	beq.n	17910 <hal_i2c_init+0x84>
   178b0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   178b4:	d131      	bne.n	1791a <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   178b6:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   178ba:	e009      	b.n	178d0 <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   178bc:	2300      	movs	r3, #0
   178be:	461a      	mov	r2, r3
   178c0:	4619      	mov	r1, r3
   178c2:	4618      	mov	r0, r3
   178c4:	f000 fc88 	bl	181d8 <__assert_func>
    switch (cfg->i2c_frequency) {
   178c8:	2b64      	cmp	r3, #100	; 0x64
   178ca:	d126      	bne.n	1791a <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   178cc:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   178d0:	6861      	ldr	r1, [r4, #4]
   178d2:	6820      	ldr	r0, [r4, #0]
   178d4:	f7ff ff89 	bl	177ea <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   178d8:	6823      	ldr	r3, [r4, #0]
   178da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   178de:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   178e2:	f240 610c 	movw	r1, #1548	; 0x60c
   178e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   178ea:	6863      	ldr	r3, [r4, #4]
   178ec:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   178f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   178f4:	6823      	ldr	r3, [r4, #0]
   178f6:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   178fa:	6863      	ldr	r3, [r4, #4]
   178fc:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   17900:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   17904:	2305      	movs	r3, #5
   17906:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   1790a:	4630      	mov	r0, r6
   1790c:	b003      	add	sp, #12
   1790e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   17910:	4f03      	ldr	r7, [pc, #12]	; (17920 <hal_i2c_init+0x94>)
        break;
   17912:	e7dd      	b.n	178d0 <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   17914:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   17918:	e7da      	b.n	178d0 <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   1791a:	2602      	movs	r6, #2
   1791c:	e7f5      	b.n	1790a <hal_i2c_init+0x7e>
   1791e:	bf00      	nop
   17920:	06147ae9 	.word	0x06147ae9

00017924 <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   17924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17928:	b083      	sub	sp, #12
   1792a:	4688      	mov	r8, r1
   1792c:	4615      	mov	r5, r2
   1792e:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   17930:	a901      	add	r1, sp, #4
   17932:	f7ff ff31 	bl	17798 <hal_i2c_resolve>
    if (rc != 0) {
   17936:	4681      	mov	r9, r0
   17938:	b118      	cbz	r0, 17942 <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   1793a:	4648      	mov	r0, r9
   1793c:	b003      	add	sp, #12
   1793e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   17942:	9b01      	ldr	r3, [sp, #4]
   17944:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   17946:	f898 3000 	ldrb.w	r3, [r8]
   1794a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   1794e:	2300      	movs	r3, #0
   17950:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   17954:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   17958:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   1795c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   17960:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   17964:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   17968:	2300      	movs	r3, #0
   1796a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1796e:	2301      	movs	r3, #1
   17970:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   17972:	f000 fe61 	bl	18638 <os_cputime_get32>
   17976:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   1797a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1797e:	f7ff fe62 	bl	17646 <hal_gpio_read>
   17982:	b1b0      	cbz	r0, 179b2 <hal_i2c_master_write+0x8e>
   17984:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   17988:	b99b      	cbnz	r3, 179b2 <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1798a:	f000 fe55 	bl	18638 <os_cputime_get32>
   1798e:	1b80      	subs	r0, r0, r6
   17990:	2800      	cmp	r0, #0
   17992:	dbf2      	blt.n	1797a <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   17994:	2300      	movs	r3, #0
   17996:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1799a:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1799e:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   179a2:	f7ff ff22 	bl	177ea <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   179a6:	2305      	movs	r3, #5
   179a8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   179ac:	f1bb 0b01 	subs.w	fp, fp, #1
   179b0:	d1da      	bne.n	17968 <hal_i2c_master_write+0x44>
    start = os_time_get();
   179b2:	f001 fe2f 	bl	19614 <os_time_get>
   179b6:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   179b8:	464f      	mov	r7, r9
   179ba:	e003      	b.n	179c4 <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   179bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   179c0:	b9db      	cbnz	r3, 179fa <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   179c2:	3701      	adds	r7, #1
   179c4:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   179c8:	42bb      	cmp	r3, r7
   179ca:	dd24      	ble.n	17a16 <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   179cc:	2300      	movs	r3, #0
   179ce:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   179d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   179d6:	5ddb      	ldrb	r3, [r3, r7]
   179d8:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   179dc:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   179e0:	2b00      	cmp	r3, #0
   179e2:	d1eb      	bne.n	179bc <hal_i2c_master_write+0x98>
   179e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   179e8:	2b00      	cmp	r3, #0
   179ea:	d1e7      	bne.n	179bc <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   179ec:	f001 fe12 	bl	19614 <os_time_get>
   179f0:	1b80      	subs	r0, r0, r6
   179f2:	42a8      	cmp	r0, r5
   179f4:	d9f2      	bls.n	179dc <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   179f6:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   179fa:	2301      	movs	r3, #1
   179fc:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   179fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17a02:	2b00      	cmp	r3, #0
   17a04:	d099      	beq.n	1793a <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   17a06:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   17a0a:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   17a0e:	f7ff fed5 	bl	177bc <hal_i2c_convert_status>
   17a12:	4681      	mov	r9, r0
   17a14:	e791      	b.n	1793a <hal_i2c_master_write+0x16>
    if (last_op) {
   17a16:	f1ba 0f00 	cmp.w	sl, #0
   17a1a:	d08e      	beq.n	1793a <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   17a1c:	2300      	movs	r3, #0
   17a1e:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   17a22:	2301      	movs	r3, #1
   17a24:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   17a26:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   17a2a:	b953      	cbnz	r3, 17a42 <hal_i2c_master_write+0x11e>
   17a2c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17a30:	b93b      	cbnz	r3, 17a42 <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   17a32:	f001 fdef 	bl	19614 <os_time_get>
   17a36:	1b80      	subs	r0, r0, r6
   17a38:	42a8      	cmp	r0, r5
   17a3a:	d9f4      	bls.n	17a26 <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   17a3c:	f04f 0903 	mov.w	r9, #3
   17a40:	e7db      	b.n	179fa <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   17a42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17a46:	2b00      	cmp	r3, #0
   17a48:	d1d7      	bne.n	179fa <hal_i2c_master_write+0xd6>
   17a4a:	e776      	b.n	1793a <hal_i2c_master_write+0x16>

00017a4c <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   17a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a50:	b085      	sub	sp, #20
   17a52:	460f      	mov	r7, r1
   17a54:	4615      	mov	r5, r2
   17a56:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   17a58:	a903      	add	r1, sp, #12
   17a5a:	f7ff fe9d 	bl	17798 <hal_i2c_resolve>
    if (rc != 0) {
   17a5e:	4681      	mov	r9, r0
   17a60:	b118      	cbz	r0, 17a6a <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   17a62:	4648      	mov	r0, r9
   17a64:	b005      	add	sp, #20
   17a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   17a6a:	9b03      	ldr	r3, [sp, #12]
   17a6c:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   17a6e:	f001 fdd1 	bl	19614 <os_time_get>
   17a72:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   17a74:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17a78:	b11b      	cbz	r3, 17a82 <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   17a7a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   17a7e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   17a82:	2300      	movs	r3, #0
   17a84:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   17a88:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   17a8c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   17a90:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   17a94:	783b      	ldrb	r3, [r7, #0]
   17a96:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   17a9a:	887b      	ldrh	r3, [r7, #2]
   17a9c:	2b01      	cmp	r3, #1
   17a9e:	d02e      	beq.n	17afe <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   17aa0:	2301      	movs	r3, #1
   17aa2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   17aa6:	46a2      	mov	sl, r4
    int retry = 2;
   17aa8:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   17aac:	2300      	movs	r3, #0
   17aae:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   17ab2:	2301      	movs	r3, #1
   17ab4:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   17ab8:	f000 fdbe 	bl	18638 <os_cputime_get32>
   17abc:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   17ac0:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17ac4:	f7ff fdbf 	bl	17646 <hal_gpio_read>
   17ac8:	b1b8      	cbz	r0, 17afa <hal_i2c_master_read+0xae>
   17aca:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   17ace:	b9a3      	cbnz	r3, 17afa <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   17ad0:	f000 fdb2 	bl	18638 <os_cputime_get32>
   17ad4:	eba0 0008 	sub.w	r0, r0, r8
   17ad8:	2800      	cmp	r0, #0
   17ada:	dbf1      	blt.n	17ac0 <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   17adc:	2300      	movs	r3, #0
   17ade:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   17ae2:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17ae6:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   17aea:	f7ff fe7e 	bl	177ea <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   17aee:	2305      	movs	r3, #5
   17af0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   17af4:	f1bb 0b01 	subs.w	fp, fp, #1
   17af8:	d1d8      	bne.n	17aac <hal_i2c_master_read+0x60>
    int retry = 2;
   17afa:	46c8      	mov	r8, r9
   17afc:	e017      	b.n	17b2e <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   17afe:	9b01      	ldr	r3, [sp, #4]
   17b00:	2b00      	cmp	r3, #0
   17b02:	d0cd      	beq.n	17aa0 <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   17b04:	2302      	movs	r3, #2
   17b06:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   17b0a:	e7cc      	b.n	17aa6 <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   17b0c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b10:	bb0b      	cbnz	r3, 17b56 <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   17b12:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   17b16:	687b      	ldr	r3, [r7, #4]
   17b18:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   17b1c:	887b      	ldrh	r3, [r7, #2]
   17b1e:	3b02      	subs	r3, #2
   17b20:	4543      	cmp	r3, r8
   17b22:	d02a      	beq.n	17b7a <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   17b24:	2300      	movs	r3, #0
   17b26:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   17b2a:	f108 0801 	add.w	r8, r8, #1
   17b2e:	887b      	ldrh	r3, [r7, #2]
   17b30:	4543      	cmp	r3, r8
   17b32:	dd96      	ble.n	17a62 <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   17b34:	2301      	movs	r3, #1
   17b36:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   17b38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17b3c:	2b00      	cmp	r3, #0
   17b3e:	d1e5      	bne.n	17b0c <hal_i2c_master_read+0xc0>
   17b40:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b44:	2b00      	cmp	r3, #0
   17b46:	d1e1      	bne.n	17b0c <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   17b48:	f001 fd64 	bl	19614 <os_time_get>
   17b4c:	1b80      	subs	r0, r0, r6
   17b4e:	42a8      	cmp	r0, r5
   17b50:	d9f2      	bls.n	17b38 <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   17b52:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   17b56:	2301      	movs	r3, #1
   17b58:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   17b5a:	2300      	movs	r3, #0
   17b5c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   17b60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17b64:	2b00      	cmp	r3, #0
   17b66:	f43f af7c 	beq.w	17a62 <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   17b6a:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   17b6e:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   17b72:	f7ff fe23 	bl	177bc <hal_i2c_convert_status>
   17b76:	4681      	mov	r9, r0
   17b78:	e773      	b.n	17a62 <hal_i2c_master_read+0x16>
            if (last_op) {
   17b7a:	9b01      	ldr	r3, [sp, #4]
   17b7c:	2b00      	cmp	r3, #0
   17b7e:	d0d1      	beq.n	17b24 <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   17b80:	2302      	movs	r3, #2
   17b82:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   17b86:	e7cd      	b.n	17b24 <hal_i2c_master_read+0xd8>

00017b88 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   17b88:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   17b8a:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   17b8c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   17b90:	b32b      	cbz	r3, 17bde <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   17b92:	2300      	movs	r3, #0
   17b94:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   17b98:	7843      	ldrb	r3, [r0, #1]
   17b9a:	b303      	cbz	r3, 17bde <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   17b9c:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   17ba0:	88c3      	ldrh	r3, [r0, #6]
   17ba2:	fa13 f382 	uxtah	r3, r3, r2
   17ba6:	b29b      	uxth	r3, r3
   17ba8:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   17baa:	8881      	ldrh	r1, [r0, #4]
   17bac:	428b      	cmp	r3, r1
   17bae:	d217      	bcs.n	17be0 <nrf52_irqm_handler+0x58>
   17bb0:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   17bb2:	6984      	ldr	r4, [r0, #24]
   17bb4:	4414      	add	r4, r2
   17bb6:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   17bb8:	1acb      	subs	r3, r1, r3
   17bba:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   17bbc:	2bff      	cmp	r3, #255	; 0xff
   17bbe:	bf28      	it	cs
   17bc0:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   17bc2:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   17bc6:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   17bca:	69c1      	ldr	r1, [r0, #28]
   17bcc:	b129      	cbz	r1, 17bda <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   17bce:	440a      	add	r2, r1
   17bd0:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   17bd2:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   17bd6:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   17bda:	2301      	movs	r3, #1
   17bdc:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   17bde:	bd38      	pop	{r3, r4, r5, pc}
   17be0:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   17be2:	6a03      	ldr	r3, [r0, #32]
   17be4:	b10b      	cbz	r3, 17bea <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   17be6:	6a40      	ldr	r0, [r0, #36]	; 0x24
   17be8:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   17bea:	2300      	movs	r3, #0
   17bec:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   17bee:	2340      	movs	r3, #64	; 0x40
   17bf0:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   17bf4:	e7f3      	b.n	17bde <nrf52_irqm_handler+0x56>
	...

00017bf8 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   17bf8:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   17bfa:	4b04      	ldr	r3, [pc, #16]	; (17c0c <nrf52_spi0_irq_handler+0x14>)
   17bfc:	781b      	ldrb	r3, [r3, #0]
   17bfe:	b103      	cbz	r3, 17c02 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   17c00:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   17c02:	4802      	ldr	r0, [pc, #8]	; (17c0c <nrf52_spi0_irq_handler+0x14>)
   17c04:	f7ff ffc0 	bl	17b88 <nrf52_irqm_handler>
}
   17c08:	e7fa      	b.n	17c00 <nrf52_spi0_irq_handler+0x8>
   17c0a:	bf00      	nop
   17c0c:	2000ddc0 	.word	0x2000ddc0

00017c10 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   17c10:	2301      	movs	r3, #1
   17c12:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   17c14:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   17c18:	2b00      	cmp	r3, #0
   17c1a:	d0fb      	beq.n	17c14 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   17c1c:	2300      	movs	r3, #0
   17c1e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   17c22:	4770      	bx	lr

00017c24 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   17c24:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   17c26:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   17c28:	780b      	ldrb	r3, [r1, #0]
   17c2a:	2b03      	cmp	r3, #3
   17c2c:	d80c      	bhi.n	17c48 <hal_spi_config_slave+0x24>
   17c2e:	e8df f003 	tbb	[pc, r3]
   17c32:	0e02      	.short	0x0e02
   17c34:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   17c36:	2300      	movs	r3, #0
    rc = 0;
   17c38:	4618      	mov	r0, r3
   17c3a:	e00a      	b.n	17c52 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   17c3c:	2304      	movs	r3, #4
    rc = 0;
   17c3e:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   17c40:	e007      	b.n	17c52 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   17c42:	2306      	movs	r3, #6
    rc = 0;
   17c44:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   17c46:	e004      	b.n	17c52 <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   17c48:	2300      	movs	r3, #0
            rc = EINVAL;
   17c4a:	2016      	movs	r0, #22
            break;
   17c4c:	e001      	b.n	17c52 <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   17c4e:	2302      	movs	r3, #2
    rc = 0;
   17c50:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   17c52:	784c      	ldrb	r4, [r1, #1]
   17c54:	2c01      	cmp	r4, #1
   17c56:	d006      	beq.n	17c66 <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   17c58:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   17c5c:	788b      	ldrb	r3, [r1, #2]
   17c5e:	b92b      	cbnz	r3, 17c6c <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   17c60:	f85d 4b04 	ldr.w	r4, [sp], #4
   17c64:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   17c66:	f043 0301 	orr.w	r3, r3, #1
   17c6a:	e7f5      	b.n	17c58 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   17c6c:	2016      	movs	r0, #22
    return rc;
   17c6e:	e7f7      	b.n	17c60 <hal_spi_config_slave+0x3c>

00017c70 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   17c70:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   17c72:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   17c74:	2501      	movs	r5, #1
   17c76:	409d      	lsls	r5, r3
   17c78:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   17c7c:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   17c80:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17c84:	2503      	movs	r5, #3
   17c86:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   17c8a:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   17c8c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17c90:	2500      	movs	r5, #0
   17c92:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   17c96:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   17c98:	780c      	ldrb	r4, [r1, #0]
   17c9a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   17c9e:	784c      	ldrb	r4, [r1, #1]
   17ca0:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   17ca4:	7889      	ldrb	r1, [r1, #2]
   17ca6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17caa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17cae:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   17cb2:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   17cb6:	4919      	ldr	r1, [pc, #100]	; (17d1c <hal_spi_init_master+0xac>)
   17cb8:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17cba:	3310      	adds	r3, #16
   17cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   17cc0:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   17cc4:	42ab      	cmp	r3, r5
   17cc6:	db22      	blt.n	17d0e <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17cc8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   17ccc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   17cd0:	22e0      	movs	r2, #224	; 0xe0
   17cd2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   17cd6:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   17cda:	2b00      	cmp	r3, #0
   17cdc:	db08      	blt.n	17cf0 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17cde:	f003 011f 	and.w	r1, r3, #31
   17ce2:	095b      	lsrs	r3, r3, #5
   17ce4:	2201      	movs	r2, #1
   17ce6:	408a      	lsls	r2, r1
   17ce8:	3360      	adds	r3, #96	; 0x60
   17cea:	490d      	ldr	r1, [pc, #52]	; (17d20 <hal_spi_init_master+0xb0>)
   17cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   17cf0:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   17cf4:	2b00      	cmp	r3, #0
   17cf6:	db07      	blt.n	17d08 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17cf8:	f003 011f 	and.w	r1, r3, #31
   17cfc:	095b      	lsrs	r3, r3, #5
   17cfe:	2201      	movs	r2, #1
   17d00:	408a      	lsls	r2, r1
   17d02:	4907      	ldr	r1, [pc, #28]	; (17d20 <hal_spi_init_master+0xb0>)
   17d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   17d08:	2000      	movs	r0, #0
   17d0a:	bc30      	pop	{r4, r5}
   17d0c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17d0e:	f003 030f 	and.w	r3, r3, #15
   17d12:	4a04      	ldr	r2, [pc, #16]	; (17d24 <hal_spi_init_master+0xb4>)
   17d14:	441a      	add	r2, r3
   17d16:	23e0      	movs	r3, #224	; 0xe0
   17d18:	7613      	strb	r3, [r2, #24]
   17d1a:	e7dc      	b.n	17cd6 <hal_spi_init_master+0x66>
   17d1c:	e000ed00 	.word	0xe000ed00
   17d20:	e000e100 	.word	0xe000e100
   17d24:	e000ecfc 	.word	0xe000ecfc

00017d28 <hal_spi_config_master>:
{
   17d28:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   17d2a:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   17d2c:	680c      	ldr	r4, [r1, #0]
   17d2e:	684b      	ldr	r3, [r1, #4]
   17d30:	6084      	str	r4, [r0, #8]
   17d32:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   17d34:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   17d38:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   17d3c:	7808      	ldrb	r0, [r1, #0]
   17d3e:	2801      	cmp	r0, #1
   17d40:	d916      	bls.n	17d70 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   17d42:	2001      	movs	r0, #1
   17d44:	4098      	lsls	r0, r3
   17d46:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   17d4a:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   17d4e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17d52:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   17d56:	2403      	movs	r4, #3
   17d58:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   17d5c:	788b      	ldrb	r3, [r1, #2]
   17d5e:	b973      	cbnz	r3, 17d7e <hal_spi_config_master+0x56>
    rc = 0;
   17d60:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   17d62:	780b      	ldrb	r3, [r1, #0]
   17d64:	2b03      	cmp	r3, #3
   17d66:	d812      	bhi.n	17d8e <hal_spi_config_master+0x66>
   17d68:	e8df f003 	tbb	[pc, r3]
   17d6c:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   17d70:	2001      	movs	r0, #1
   17d72:	4098      	lsls	r0, r3
   17d74:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   17d78:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   17d7c:	e7e7      	b.n	17d4e <hal_spi_config_master+0x26>
            rc = EINVAL;
   17d7e:	2016      	movs	r0, #22
   17d80:	e7ef      	b.n	17d62 <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   17d82:	2300      	movs	r3, #0
   17d84:	e007      	b.n	17d96 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   17d86:	2304      	movs	r3, #4
            break;
   17d88:	e005      	b.n	17d96 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   17d8a:	2306      	movs	r3, #6
            break;
   17d8c:	e003      	b.n	17d96 <hal_spi_config_master+0x6e>
            nrf_config = 0;
   17d8e:	2300      	movs	r3, #0
            rc = EINVAL;
   17d90:	2016      	movs	r0, #22
            break;
   17d92:	e000      	b.n	17d96 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   17d94:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   17d96:	784c      	ldrb	r4, [r1, #1]
   17d98:	2c01      	cmp	r4, #1
   17d9a:	d010      	beq.n	17dbe <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   17d9c:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   17da0:	684b      	ldr	r3, [r1, #4]
   17da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   17da6:	d023      	beq.n	17df0 <hal_spi_config_master+0xc8>
   17da8:	d80c      	bhi.n	17dc4 <hal_spi_config_master+0x9c>
   17daa:	2bfa      	cmp	r3, #250	; 0xfa
   17dac:	d029      	beq.n	17e02 <hal_spi_config_master+0xda>
   17dae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   17db2:	d01a      	beq.n	17dea <hal_spi_config_master+0xc2>
   17db4:	2b7d      	cmp	r3, #125	; 0x7d
   17db6:	d011      	beq.n	17ddc <hal_spi_config_master+0xb4>
            frequency = 0;
   17db8:	2300      	movs	r3, #0
            rc = EINVAL;
   17dba:	2016      	movs	r0, #22
            break;
   17dbc:	e010      	b.n	17de0 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   17dbe:	f043 0301 	orr.w	r3, r3, #1
   17dc2:	e7eb      	b.n	17d9c <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   17dc4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   17dc8:	d015      	beq.n	17df6 <hal_spi_config_master+0xce>
   17dca:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   17dce:	d015      	beq.n	17dfc <hal_spi_config_master+0xd4>
   17dd0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   17dd4:	d1f0      	bne.n	17db8 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   17dd6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   17dda:	e001      	b.n	17de0 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   17ddc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   17de0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   17de4:	f85d 4b04 	ldr.w	r4, [sp], #4
   17de8:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   17dea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   17dee:	e7f7      	b.n	17de0 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   17df0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   17df4:	e7f4      	b.n	17de0 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   17df6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   17dfa:	e7f1      	b.n	17de0 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   17dfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   17e00:	e7ee      	b.n	17de0 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   17e02:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   17e06:	e7eb      	b.n	17de0 <hal_spi_config_master+0xb8>

00017e08 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17e08:	2802      	cmp	r0, #2
   17e0a:	dc10      	bgt.n	17e2e <hal_spi_config+0x26>
{
   17e0c:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17e0e:	4b0b      	ldr	r3, [pc, #44]	; (17e3c <hal_spi_config+0x34>)
   17e10:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17e14:	b168      	cbz	r0, 17e32 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   17e16:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   17e18:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   17e1c:	b95b      	cbnz	r3, 17e36 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17e1e:	7803      	ldrb	r3, [r0, #0]
   17e20:	b113      	cbz	r3, 17e28 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   17e22:	f7ff feff 	bl	17c24 <hal_spi_config_slave>
    }

err:
    return (rc);
}
   17e26:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   17e28:	f7ff ff7e 	bl	17d28 <hal_spi_config_master>
   17e2c:	e7fb      	b.n	17e26 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17e2e:	2016      	movs	r0, #22
}
   17e30:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17e32:	2016      	movs	r0, #22
   17e34:	e7f7      	b.n	17e26 <hal_spi_config+0x1e>
        return -1;
   17e36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17e3a:	e7f4      	b.n	17e26 <hal_spi_config+0x1e>
   17e3c:	00020240 	.word	0x00020240

00017e40 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17e40:	2802      	cmp	r0, #2
   17e42:	dc1b      	bgt.n	17e7c <hal_spi_enable+0x3c>
   17e44:	4b10      	ldr	r3, [pc, #64]	; (17e88 <hal_spi_enable+0x48>)
   17e46:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17e4a:	b1cb      	cbz	r3, 17e80 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17e4c:	781a      	ldrb	r2, [r3, #0]
   17e4e:	b17a      	cbz	r2, 17e70 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   17e50:	6a1a      	ldr	r2, [r3, #32]
   17e52:	b1ba      	cbz	r2, 17e84 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   17e54:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   17e56:	2000      	movs	r0, #0
   17e58:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   17e5c:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   17e60:	f240 4202 	movw	r2, #1026	; 0x402
   17e64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   17e68:	2202      	movs	r2, #2
   17e6a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   17e6e:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   17e70:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   17e72:	2201      	movs	r2, #1
   17e74:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   17e78:	2000      	movs	r0, #0
   17e7a:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17e7c:	2016      	movs	r0, #22
   17e7e:	4770      	bx	lr
   17e80:	2016      	movs	r0, #22
   17e82:	4770      	bx	lr
            rc = EINVAL;
   17e84:	2016      	movs	r0, #22

err:
    return rc;
}
   17e86:	4770      	bx	lr
   17e88:	00020240 	.word	0x00020240

00017e8c <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17e8c:	2802      	cmp	r0, #2
   17e8e:	dc2a      	bgt.n	17ee6 <hal_spi_disable+0x5a>
{
   17e90:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17e92:	4b17      	ldr	r3, [pc, #92]	; (17ef0 <hal_spi_disable+0x64>)
   17e94:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17e98:	b33c      	cbz	r4, 17eea <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17e9a:	7823      	ldrb	r3, [r4, #0]
   17e9c:	b9ab      	cbnz	r3, 17eca <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   17e9e:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17ea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ea4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   17ea8:	7863      	ldrb	r3, [r4, #1]
   17eaa:	b943      	cbnz	r3, 17ebe <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   17eac:	2300      	movs	r3, #0
   17eae:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   17eb2:	2000      	movs	r0, #0
   17eb4:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   17eb6:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   17eb8:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   17eba:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   17ebc:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   17ebe:	4628      	mov	r0, r5
   17ec0:	f7ff fea6 	bl	17c10 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   17ec4:	2300      	movs	r3, #0
   17ec6:	7063      	strb	r3, [r4, #1]
   17ec8:	e7f0      	b.n	17eac <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   17eca:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ed0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   17ed4:	2300      	movs	r3, #0
   17ed6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   17eda:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   17ede:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   17ee2:	70e3      	strb	r3, [r4, #3]
   17ee4:	e7e5      	b.n	17eb2 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17ee6:	2016      	movs	r0, #22
}
   17ee8:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17eea:	2016      	movs	r0, #22
    return rc;
   17eec:	e7e6      	b.n	17ebc <hal_spi_disable+0x30>
   17eee:	bf00      	nop
   17ef0:	00020240 	.word	0x00020240

00017ef4 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17ef4:	2802      	cmp	r0, #2
   17ef6:	dc1d      	bgt.n	17f34 <hal_spi_init+0x40>
{
   17ef8:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17efa:	4b13      	ldr	r3, [pc, #76]	; (17f48 <hal_spi_init+0x54>)
   17efc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17f00:	b1d4      	cbz	r4, 17f38 <hal_spi_init+0x44>
    if (cfg == NULL) {
   17f02:	b1d9      	cbz	r1, 17f3c <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   17f04:	2a01      	cmp	r2, #1
   17f06:	d81b      	bhi.n	17f40 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   17f08:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   17f0a:	b9d8      	cbnz	r0, 17f44 <hal_spi_init+0x50>
   17f0c:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   17f0e:	2303      	movs	r3, #3
   17f10:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   17f12:	b94a      	cbnz	r2, 17f28 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   17f14:	4b0d      	ldr	r3, [pc, #52]	; (17f4c <hal_spi_init+0x58>)
   17f16:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   17f18:	f7ff ffb8 	bl	17e8c <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   17f1c:	4a0c      	ldr	r2, [pc, #48]	; (17f50 <hal_spi_init+0x5c>)
   17f1e:	4629      	mov	r1, r5
   17f20:	4620      	mov	r0, r4
   17f22:	f7ff fea5 	bl	17c70 <hal_spi_init_master>
   17f26:	e00c      	b.n	17f42 <hal_spi_init+0x4e>
            assert(0);
   17f28:	2300      	movs	r3, #0
   17f2a:	461a      	mov	r2, r3
   17f2c:	4619      	mov	r1, r3
   17f2e:	4618      	mov	r0, r3
   17f30:	f000 f952 	bl	181d8 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17f34:	2016      	movs	r0, #22
}
   17f36:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17f38:	2016      	movs	r0, #22
   17f3a:	e002      	b.n	17f42 <hal_spi_init+0x4e>
    rc = EINVAL;
   17f3c:	2016      	movs	r0, #22
   17f3e:	e000      	b.n	17f42 <hal_spi_init+0x4e>
   17f40:	2016      	movs	r0, #22
}
   17f42:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   17f44:	2016      	movs	r0, #22
    return (rc);
   17f46:	e7fc      	b.n	17f42 <hal_spi_init+0x4e>
   17f48:	00020240 	.word	0x00020240
   17f4c:	40003000 	.word	0x40003000
   17f50:	00017bf9 	.word	0x00017bf9

00017f54 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17f54:	2802      	cmp	r0, #2
   17f56:	dc0a      	bgt.n	17f6e <hal_spi_set_txrx_cb+0x1a>
   17f58:	4b08      	ldr	r3, [pc, #32]	; (17f7c <hal_spi_set_txrx_cb+0x28>)
   17f5a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17f5e:	b143      	cbz	r3, 17f72 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   17f60:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   17f62:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   17f66:	b930      	cbnz	r0, 17f76 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   17f68:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   17f6a:	625a      	str	r2, [r3, #36]	; 0x24
   17f6c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17f6e:	2016      	movs	r0, #22
   17f70:	4770      	bx	lr
   17f72:	2016      	movs	r0, #22
   17f74:	4770      	bx	lr
        rc = -1;
   17f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   17f7a:	4770      	bx	lr
   17f7c:	00020240 	.word	0x00020240

00017f80 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   17f80:	2b00      	cmp	r3, #0
   17f82:	d046      	beq.n	18012 <hal_spi_txrx+0x92>
{
   17f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f86:	460d      	mov	r5, r1
   17f88:	4617      	mov	r7, r2
   17f8a:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   17f8c:	2802      	cmp	r0, #2
   17f8e:	dc42      	bgt.n	18016 <hal_spi_txrx+0x96>
   17f90:	4b25      	ldr	r3, [pc, #148]	; (18028 <hal_spi_txrx+0xa8>)
   17f92:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17f96:	2b00      	cmp	r3, #0
   17f98:	d03f      	beq.n	1801a <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17f9a:	781a      	ldrb	r2, [r3, #0]
   17f9c:	2a00      	cmp	r2, #0
   17f9e:	d13e      	bne.n	1801e <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   17fa0:	2900      	cmp	r1, #0
   17fa2:	d03e      	beq.n	18022 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   17fa4:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   17fa6:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   17faa:	2b07      	cmp	r3, #7
   17fac:	d004      	beq.n	17fb8 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   17fae:	b95b      	cbnz	r3, 17fc8 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   17fb0:	2301      	movs	r3, #1
   17fb2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   17fb6:	e007      	b.n	17fc8 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   17fb8:	f7ff ff68 	bl	17e8c <hal_spi_disable>
   17fbc:	e7f8      	b.n	17fb0 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   17fbe:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   17fc2:	2300      	movs	r3, #0
   17fc4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   17fc8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17fcc:	2b00      	cmp	r3, #0
   17fce:	d1f6      	bne.n	17fbe <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   17fd0:	782b      	ldrb	r3, [r5, #0]
   17fd2:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   17fd6:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   17fd8:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   17fda:	2200      	movs	r2, #0
   17fdc:	e00d      	b.n	17ffa <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   17fde:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17fe2:	2b00      	cmp	r3, #0
   17fe4:	d0fb      	beq.n	17fde <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   17fe6:	2300      	movs	r3, #0
   17fe8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   17fec:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   17ff0:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   17ff2:	b10f      	cbz	r7, 17ff8 <hal_spi_txrx+0x78>
                *rxd = rxval;
   17ff4:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   17ff8:	3201      	adds	r2, #1
   17ffa:	42b2      	cmp	r2, r6
   17ffc:	da07      	bge.n	1800e <hal_spi_txrx+0x8e>
            if (txcnt) {
   17ffe:	2900      	cmp	r1, #0
   18000:	d0ed      	beq.n	17fde <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   18002:	786b      	ldrb	r3, [r5, #1]
   18004:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   18008:	3901      	subs	r1, #1
                ++txd;
   1800a:	3501      	adds	r5, #1
   1800c:	e7e7      	b.n	17fde <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   1800e:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   18010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   18012:	2016      	movs	r0, #22
}
   18014:	4770      	bx	lr
    return rc;
   18016:	2016      	movs	r0, #22
   18018:	e7fa      	b.n	18010 <hal_spi_txrx+0x90>
   1801a:	2016      	movs	r0, #22
   1801c:	e7f8      	b.n	18010 <hal_spi_txrx+0x90>
   1801e:	2016      	movs	r0, #22
   18020:	e7f6      	b.n	18010 <hal_spi_txrx+0x90>
   18022:	2016      	movs	r0, #22
   18024:	e7f4      	b.n	18010 <hal_spi_txrx+0x90>
   18026:	bf00      	nop
   18028:	00020240 	.word	0x00020240

0001802c <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1802c:	2802      	cmp	r0, #2
   1802e:	dc57      	bgt.n	180e0 <hal_spi_txrx_noblock+0xb4>
{
   18030:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   18032:	4c35      	ldr	r4, [pc, #212]	; (18108 <hal_spi_txrx_noblock+0xdc>)
   18034:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   18038:	2800      	cmp	r0, #0
   1803a:	d053      	beq.n	180e4 <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   1803c:	6a04      	ldr	r4, [r0, #32]
   1803e:	2c00      	cmp	r4, #0
   18040:	d052      	beq.n	180e8 <hal_spi_txrx_noblock+0xbc>
   18042:	2b00      	cmp	r3, #0
   18044:	d052      	beq.n	180ec <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   18046:	7804      	ldrb	r4, [r0, #0]
   18048:	2c00      	cmp	r4, #0
   1804a:	d137      	bne.n	180bc <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1804c:	2900      	cmp	r1, #0
   1804e:	d050      	beq.n	180f2 <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   18050:	7844      	ldrb	r4, [r0, #1]
   18052:	2c00      	cmp	r4, #0
   18054:	d14f      	bne.n	180f6 <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   18056:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   18058:	2540      	movs	r5, #64	; 0x40
   1805a:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   1805e:	2501      	movs	r5, #1
   18060:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   18062:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   18066:	2d07      	cmp	r5, #7
   18068:	d005      	beq.n	18076 <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   1806a:	2500      	movs	r5, #0
   1806c:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   18070:	2507      	movs	r5, #7
   18072:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   18076:	2500      	movs	r5, #0
   18078:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   1807a:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   1807c:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   1807e:	2bff      	cmp	r3, #255	; 0xff
   18080:	bfa8      	it	ge
   18082:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   18084:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   18088:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   1808c:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   1808e:	b172      	cbz	r2, 180ae <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   18090:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   18094:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   18098:	2000      	movs	r0, #0
   1809a:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   1809e:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   180a2:	2301      	movs	r3, #1
   180a4:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   180a6:	2340      	movs	r3, #64	; 0x40
   180a8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   180ac:	e01f      	b.n	180ee <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   180ae:	3002      	adds	r0, #2
   180b0:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   180b4:	2301      	movs	r3, #1
   180b6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   180ba:	e7ed      	b.n	18098 <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   180bc:	b161      	cbz	r1, 180d8 <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   180be:	2bff      	cmp	r3, #255	; 0xff
   180c0:	dc1c      	bgt.n	180fc <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   180c2:	78c4      	ldrb	r4, [r0, #3]
   180c4:	b9e4      	cbnz	r4, 18100 <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   180c6:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   180c8:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   180ca:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   180cc:	2301      	movs	r3, #1
   180ce:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   180d0:	6902      	ldr	r2, [r0, #16]
   180d2:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   180d4:	2000      	movs	r0, #0
   180d6:	e00a      	b.n	180ee <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   180d8:	2a00      	cmp	r2, #0
   180da:	d1f0      	bne.n	180be <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   180dc:	2016      	movs	r0, #22
   180de:	e006      	b.n	180ee <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   180e0:	2016      	movs	r0, #22

err:
    return rc;
}
   180e2:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   180e4:	2016      	movs	r0, #22
   180e6:	e002      	b.n	180ee <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   180e8:	2016      	movs	r0, #22
   180ea:	e000      	b.n	180ee <hal_spi_txrx_noblock+0xc2>
   180ec:	2016      	movs	r0, #22
}
   180ee:	bc30      	pop	{r4, r5}
   180f0:	4770      	bx	lr
    rc = EINVAL;
   180f2:	2016      	movs	r0, #22
   180f4:	e7fb      	b.n	180ee <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   180f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   180fa:	e7f8      	b.n	180ee <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   180fc:	2016      	movs	r0, #22
   180fe:	e7f6      	b.n	180ee <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   18100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18104:	e7f3      	b.n	180ee <hal_spi_txrx_noblock+0xc2>
   18106:	bf00      	nop
   18108:	00020240 	.word	0x00020240

0001810c <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   1810c:	b508      	push	{r3, lr}
    assert(0);
   1810e:	2300      	movs	r3, #0
   18110:	461a      	mov	r2, r3
   18112:	4619      	mov	r1, r3
   18114:	4618      	mov	r0, r3
   18116:	f000 f85f 	bl	181d8 <__assert_func>
	...

0001811c <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   1811c:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1811e:	4b06      	ldr	r3, [pc, #24]	; (18138 <nrf52_wdt_irq_handler+0x1c>)
   18120:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   18124:	f013 0f01 	tst.w	r3, #1
   18128:	d100      	bne.n	1812c <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   1812a:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   1812c:	4b02      	ldr	r3, [pc, #8]	; (18138 <nrf52_wdt_irq_handler+0x1c>)
   1812e:	2200      	movs	r2, #0
   18130:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   18134:	f7ff ffea 	bl	1810c <nrf52_hal_wdt_default_handler>
   18138:	40010000 	.word	0x40010000

0001813c <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   1813c:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1813e:	4b17      	ldr	r3, [pc, #92]	; (1819c <hal_watchdog_init+0x60>)
   18140:	2201      	movs	r2, #1
   18142:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   18146:	4b16      	ldr	r3, [pc, #88]	; (181a0 <hal_watchdog_init+0x64>)
   18148:	4298      	cmp	r0, r3
   1814a:	d821      	bhi.n	18190 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   1814c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   18150:	0153      	lsls	r3, r2, #5
   18152:	4a14      	ldr	r2, [pc, #80]	; (181a4 <hal_watchdog_init+0x68>)
   18154:	fba2 2303 	umull	r2, r3, r2, r3
   18158:	08db      	lsrs	r3, r3, #3
   1815a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1815e:	4b0f      	ldr	r3, [pc, #60]	; (1819c <hal_watchdog_init+0x60>)
   18160:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18164:	4a10      	ldr	r2, [pc, #64]	; (181a8 <hal_watchdog_init+0x6c>)
   18166:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18168:	4910      	ldr	r1, [pc, #64]	; (181ac <hal_watchdog_init+0x70>)
   1816a:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1816e:	4a10      	ldr	r2, [pc, #64]	; (181b0 <hal_watchdog_init+0x74>)
   18170:	21e0      	movs	r1, #224	; 0xe0
   18172:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18176:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1817a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1817e:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   18180:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   18184:	f042 0201 	orr.w	r2, r2, #1
   18188:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   1818c:	2000      	movs	r0, #0
   1818e:	bd08      	pop	{r3, pc}
        assert(0);
   18190:	2300      	movs	r3, #0
   18192:	461a      	mov	r2, r3
   18194:	4619      	mov	r1, r3
   18196:	4618      	mov	r0, r3
   18198:	f000 f81e 	bl	181d8 <__assert_func>
   1819c:	40010000 	.word	0x40010000
   181a0:	02aaaaaa 	.word	0x02aaaaaa
   181a4:	10624dd3 	.word	0x10624dd3
   181a8:	e000ed00 	.word	0xe000ed00
   181ac:	0001811d 	.word	0x0001811d
   181b0:	e000e100 	.word	0xe000e100

000181b4 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   181b4:	4b02      	ldr	r3, [pc, #8]	; (181c0 <hal_watchdog_enable+0xc>)
   181b6:	2201      	movs	r2, #1
   181b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   181bc:	601a      	str	r2, [r3, #0]
}
   181be:	4770      	bx	lr
   181c0:	40010000 	.word	0x40010000

000181c4 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   181c4:	4b02      	ldr	r3, [pc, #8]	; (181d0 <hal_watchdog_tickle+0xc>)
   181c6:	4a03      	ldr	r2, [pc, #12]	; (181d4 <hal_watchdog_tickle+0x10>)
   181c8:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   181cc:	4770      	bx	lr
   181ce:	bf00      	nop
   181d0:	40010000 	.word	0x40010000
   181d4:	6e524635 	.word	0x6e524635

000181d8 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   181d8:	b508      	push	{r3, lr}
   181da:	4675      	mov	r5, lr
   181dc:	4604      	mov	r4, r0
   181de:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   181e0:	f001 fa90 	bl	19704 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   181e4:	f7ff f905 	bl	173f2 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   181e8:	b18c      	cbz	r4, 1820e <__assert_func+0x36>
   181ea:	4633      	mov	r3, r6
   181ec:	4622      	mov	r2, r4
   181ee:	4629      	mov	r1, r5
   181f0:	4809      	ldr	r0, [pc, #36]	; (18218 <__assert_func+0x40>)
   181f2:	f7ff f929 	bl	17448 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   181f6:	f7ef ffc5 	bl	8184 <hal_debugger_connected>
   181fa:	b100      	cbz	r0, 181fe <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   181fc:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   181fe:	4b07      	ldr	r3, [pc, #28]	; (1821c <__assert_func+0x44>)
   18200:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   18204:	605a      	str	r2, [r3, #4]
    asm("isb");
   18206:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   1820a:	f7ef ffc3 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   1820e:	4629      	mov	r1, r5
   18210:	4803      	ldr	r0, [pc, #12]	; (18220 <__assert_func+0x48>)
   18212:	f7ff f919 	bl	17448 <console_printf>
   18216:	e7ee      	b.n	181f6 <__assert_func+0x1e>
   18218:	0002025c 	.word	0x0002025c
   1821c:	e000ed00 	.word	0xe000ed00
   18220:	0002024c 	.word	0x0002024c

00018224 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   18224:	b500      	push	{lr}
   18226:	b083      	sub	sp, #12
   18228:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   1822a:	f7ff f8e2 	bl	173f2 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   1822e:	4d1b      	ldr	r5, [pc, #108]	; (1829c <os_default_irq+0x78>)
   18230:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   18232:	6822      	ldr	r2, [r4, #0]
   18234:	f3c1 0108 	ubfx	r1, r1, #0, #9
   18238:	4819      	ldr	r0, [pc, #100]	; (182a0 <os_default_irq+0x7c>)
   1823a:	f7ff f905 	bl	17448 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   1823e:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   18240:	6883      	ldr	r3, [r0, #8]
   18242:	6842      	ldr	r2, [r0, #4]
   18244:	6801      	ldr	r1, [r0, #0]
   18246:	68c0      	ldr	r0, [r0, #12]
   18248:	9000      	str	r0, [sp, #0]
   1824a:	4816      	ldr	r0, [pc, #88]	; (182a4 <os_default_irq+0x80>)
   1824c:	f7ff f8fc 	bl	17448 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   18250:	6923      	ldr	r3, [r4, #16]
   18252:	9300      	str	r3, [sp, #0]
   18254:	68e3      	ldr	r3, [r4, #12]
   18256:	68a2      	ldr	r2, [r4, #8]
   18258:	6861      	ldr	r1, [r4, #4]
   1825a:	4813      	ldr	r0, [pc, #76]	; (182a8 <os_default_irq+0x84>)
   1825c:	f7ff f8f4 	bl	17448 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   18260:	6a23      	ldr	r3, [r4, #32]
   18262:	9300      	str	r3, [sp, #0]
   18264:	69e3      	ldr	r3, [r4, #28]
   18266:	69a2      	ldr	r2, [r4, #24]
   18268:	6961      	ldr	r1, [r4, #20]
   1826a:	4810      	ldr	r0, [pc, #64]	; (182ac <os_default_irq+0x88>)
   1826c:	f7ff f8ec 	bl	17448 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   18270:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   18272:	6983      	ldr	r3, [r0, #24]
   18274:	6942      	ldr	r2, [r0, #20]
   18276:	6901      	ldr	r1, [r0, #16]
   18278:	69c0      	ldr	r0, [r0, #28]
   1827a:	9000      	str	r0, [sp, #0]
   1827c:	480c      	ldr	r0, [pc, #48]	; (182b0 <os_default_irq+0x8c>)
   1827e:	f7ff f8e3 	bl	17448 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   18282:	6869      	ldr	r1, [r5, #4]
   18284:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   18286:	6aab      	ldr	r3, [r5, #40]	; 0x28
   18288:	480a      	ldr	r0, [pc, #40]	; (182b4 <os_default_irq+0x90>)
   1828a:	f7ff f8dd 	bl	17448 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   1828e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   18290:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   18292:	4809      	ldr	r0, [pc, #36]	; (182b8 <os_default_irq+0x94>)
   18294:	f7ff f8d8 	bl	17448 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   18298:	f7ef ff7c 	bl	8194 <hal_system_reset>
   1829c:	e000ed00 	.word	0xe000ed00
   182a0:	00020274 	.word	0x00020274
   182a4:	000202a8 	.word	0x000202a8
   182a8:	000202dc 	.word	0x000202dc
   182ac:	00020310 	.word	0x00020310
   182b0:	00020344 	.word	0x00020344
   182b4:	00020378 	.word	0x00020378
   182b8:	000203a0 	.word	0x000203a0

000182bc <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   182bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   182be:	f7ff ff81 	bl	181c4 <hal_watchdog_tickle>
    sanity_last = 0;
   182c2:	2500      	movs	r5, #0
   182c4:	e00b      	b.n	182de <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   182c6:	f000 fec7 	bl	19058 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   182ca:	f7ff ff7b 	bl	181c4 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   182ce:	4625      	mov	r5, r4
   182d0:	e011      	b.n	182f6 <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   182d2:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   182d4:	f002 f842 	bl	1a35c <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   182d8:	4638      	mov	r0, r7
   182da:	f001 fa19 	bl	19710 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   182de:	4a14      	ldr	r2, [pc, #80]	; (18330 <os_idle_task+0x74>)
   182e0:	6813      	ldr	r3, [r2, #0]
   182e2:	3301      	adds	r3, #1
   182e4:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   182e6:	f001 f995 	bl	19614 <os_time_get>
   182ea:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   182ec:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   182f0:	1ac3      	subs	r3, r0, r3
   182f2:	2b00      	cmp	r3, #0
   182f4:	dce7      	bgt.n	182c6 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   182f6:	f001 fa05 	bl	19704 <os_arch_save_sr>
   182fa:	4607      	mov	r7, r0
        now = os_time_get();
   182fc:	f001 f98a 	bl	19614 <os_time_get>
   18300:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   18302:	f000 ffd7 	bl	192b4 <os_sched_wakeup_ticks>
   18306:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   18308:	4630      	mov	r0, r6
   1830a:	f000 f975 	bl	185f8 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   1830e:	42a0      	cmp	r0, r4
   18310:	bf28      	it	cs
   18312:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   18314:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   18318:	1b9b      	subs	r3, r3, r6
   1831a:	4298      	cmp	r0, r3
   1831c:	bf28      	it	cs
   1831e:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   18320:	280b      	cmp	r0, #11
   18322:	d9d6      	bls.n	182d2 <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   18324:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   18328:	d9d4      	bls.n	182d4 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   1832a:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   1832e:	e7d1      	b.n	182d4 <os_idle_task+0x18>
   18330:	2000de8c 	.word	0x2000de8c

00018334 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   18334:	b508      	push	{r3, lr}
   18336:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   18338:	2100      	movs	r1, #0
   1833a:	4608      	mov	r0, r1
   1833c:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   1833e:	2300      	movs	r3, #0
   18340:	461a      	mov	r2, r3
   18342:	4619      	mov	r1, r3
   18344:	4618      	mov	r0, r3
   18346:	f7ff ff47 	bl	181d8 <__assert_func>
	...

0001834c <os_started>:
}
   1834c:	4b01      	ldr	r3, [pc, #4]	; (18354 <os_started+0x8>)
   1834e:	6818      	ldr	r0, [r3, #0]
   18350:	4770      	bx	lr
   18352:	bf00      	nop
   18354:	2000de88 	.word	0x2000de88

00018358 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   18358:	b500      	push	{lr}
   1835a:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   1835c:	2340      	movs	r3, #64	; 0x40
   1835e:	9303      	str	r3, [sp, #12]
   18360:	4b15      	ldr	r3, [pc, #84]	; (183b8 <os_init_idle_task+0x60>)
   18362:	9302      	str	r3, [sp, #8]
   18364:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18368:	9301      	str	r3, [sp, #4]
   1836a:	23ff      	movs	r3, #255	; 0xff
   1836c:	9300      	str	r3, [sp, #0]
   1836e:	2300      	movs	r3, #0
   18370:	4a12      	ldr	r2, [pc, #72]	; (183bc <os_init_idle_task+0x64>)
   18372:	4913      	ldr	r1, [pc, #76]	; (183c0 <os_init_idle_task+0x68>)
   18374:	4813      	ldr	r0, [pc, #76]	; (183c4 <os_init_idle_task+0x6c>)
   18376:	f001 f88d 	bl	19494 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   1837a:	b950      	cbnz	r0, 18392 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   1837c:	f000 fea2 	bl	190c4 <os_sanity_init>
    assert(rc == 0);
   18380:	b968      	cbnz	r0, 1839e <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   18382:	f247 5030 	movw	r0, #30000	; 0x7530
   18386:	f7ff fed9 	bl	1813c <hal_watchdog_init>
    assert(rc == 0);
   1838a:	b970      	cbnz	r0, 183aa <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   1838c:	b005      	add	sp, #20
   1838e:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   18392:	2300      	movs	r3, #0
   18394:	461a      	mov	r2, r3
   18396:	4619      	mov	r1, r3
   18398:	4618      	mov	r0, r3
   1839a:	f7ff ff1d 	bl	181d8 <__assert_func>
    assert(rc == 0);
   1839e:	2300      	movs	r3, #0
   183a0:	461a      	mov	r2, r3
   183a2:	4619      	mov	r1, r3
   183a4:	4618      	mov	r0, r3
   183a6:	f7ff ff17 	bl	181d8 <__assert_func>
    assert(rc == 0);
   183aa:	2300      	movs	r3, #0
   183ac:	461a      	mov	r2, r3
   183ae:	4619      	mov	r1, r3
   183b0:	4618      	mov	r0, r3
   183b2:	f7ff ff11 	bl	181d8 <__assert_func>
   183b6:	bf00      	nop
   183b8:	20006f70 	.word	0x20006f70
   183bc:	000182bd 	.word	0x000182bd
   183c0:	000203c4 	.word	0x000203c4
   183c4:	2000dde8 	.word	0x2000dde8

000183c8 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   183c8:	b510      	push	{r4, lr}
   183ca:	b084      	sub	sp, #16
   183cc:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   183ce:	4b24      	ldr	r3, [pc, #144]	; (18460 <os_init+0x98>)
   183d0:	2200      	movs	r2, #0
   183d2:	601a      	str	r2, [r3, #0]
   183d4:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   183d6:	4b23      	ldr	r3, [pc, #140]	; (18464 <os_init+0x9c>)
   183d8:	601a      	str	r2, [r3, #0]
   183da:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   183dc:	f000 faba 	bl	18954 <os_eventq_dflt_get>
   183e0:	f000 fa0e 	bl	18800 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   183e4:	f000 fa04 	bl	187f0 <os_dev_reset>

    err = os_arch_os_init();
   183e8:	f001 f9c6 	bl	19778 <os_arch_os_init>
    assert(err == OS_OK);
   183ec:	bb00      	cbnz	r0, 18430 <os_init+0x68>

    if (main_fn) {
   183ee:	b18c      	cbz	r4, 18414 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   183f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   183f4:	9303      	str	r3, [sp, #12]
   183f6:	4b1c      	ldr	r3, [pc, #112]	; (18468 <os_init+0xa0>)
   183f8:	9302      	str	r3, [sp, #8]
   183fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   183fe:	9301      	str	r3, [sp, #4]
   18400:	237f      	movs	r3, #127	; 0x7f
   18402:	9300      	str	r3, [sp, #0]
   18404:	4623      	mov	r3, r4
   18406:	4a19      	ldr	r2, [pc, #100]	; (1846c <os_init+0xa4>)
   18408:	4919      	ldr	r1, [pc, #100]	; (18470 <os_init+0xa8>)
   1840a:	481a      	ldr	r0, [pc, #104]	; (18474 <os_init+0xac>)
   1840c:	f001 f842 	bl	19494 <os_task_init>
   18410:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   18412:	b998      	cbnz	r0, 1843c <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   18414:	f001 fe72 	bl	1a0fc <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   18418:	2001      	movs	r0, #1
   1841a:	f000 f985 	bl	18728 <os_dev_initialize_all>
   1841e:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   18420:	b990      	cbnz	r0, 18448 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   18422:	2002      	movs	r0, #2
   18424:	f000 f980 	bl	18728 <os_dev_initialize_all>
   18428:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   1842a:	b998      	cbnz	r0, 18454 <os_init+0x8c>
}
   1842c:	b004      	add	sp, #16
   1842e:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   18430:	2300      	movs	r3, #0
   18432:	461a      	mov	r2, r3
   18434:	4619      	mov	r1, r3
   18436:	4618      	mov	r0, r3
   18438:	f7ff fece 	bl	181d8 <__assert_func>
        assert(err == 0);
   1843c:	2300      	movs	r3, #0
   1843e:	461a      	mov	r2, r3
   18440:	4619      	mov	r1, r3
   18442:	4618      	mov	r0, r3
   18444:	f7ff fec8 	bl	181d8 <__assert_func>
    assert(err == OS_OK);
   18448:	2300      	movs	r3, #0
   1844a:	461a      	mov	r2, r3
   1844c:	4619      	mov	r1, r3
   1844e:	4618      	mov	r0, r3
   18450:	f7ff fec2 	bl	181d8 <__assert_func>
    assert(err == OS_OK);
   18454:	2300      	movs	r3, #0
   18456:	461a      	mov	r2, r3
   18458:	4619      	mov	r1, r3
   1845a:	4618      	mov	r0, r3
   1845c:	f7ff febc 	bl	181d8 <__assert_func>
   18460:	2000de90 	.word	0x2000de90
   18464:	2000deb8 	.word	0x2000deb8
   18468:	20007070 	.word	0x20007070
   1846c:	00018335 	.word	0x00018335
   18470:	000203bc 	.word	0x000203bc
   18474:	2000de38 	.word	0x2000de38

00018478 <os_start>:

void
os_start(void)
{
   18478:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   1847a:	f7ff fe9b 	bl	181b4 <hal_watchdog_enable>

    err = os_arch_os_start();
   1847e:	f001 f9db 	bl	19838 <os_arch_os_start>
    assert(err == OS_OK);
   18482:	b900      	cbnz	r0, 18486 <os_start+0xe>
#else
    assert(0);
#endif
}
   18484:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   18486:	2300      	movs	r3, #0
   18488:	461a      	mov	r2, r3
   1848a:	4619      	mov	r1, r3
   1848c:	4618      	mov	r0, r3
   1848e:	f7ff fea3 	bl	181d8 <__assert_func>
	...

00018494 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   18494:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   18496:	4b0c      	ldr	r3, [pc, #48]	; (184c8 <os_pkg_init+0x34>)
   18498:	781b      	ldrb	r3, [r3, #0]
   1849a:	b14b      	cbz	r3, 184b0 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   1849c:	2003      	movs	r0, #3
   1849e:	f000 f943 	bl	18728 <os_dev_initialize_all>
   184a2:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   184a4:	b948      	cbnz	r0, 184ba <os_pkg_init+0x26>

    os_mempool_module_init();
   184a6:	f000 fc25 	bl	18cf4 <os_mempool_module_init>
    os_msys_init();
   184aa:	f000 fcad 	bl	18e08 <os_msys_init>
}
   184ae:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   184b0:	461a      	mov	r2, r3
   184b2:	4619      	mov	r1, r3
   184b4:	4618      	mov	r0, r3
   184b6:	f7ff fe8f 	bl	181d8 <__assert_func>
    assert(err == OS_OK);
   184ba:	2300      	movs	r3, #0
   184bc:	461a      	mov	r2, r3
   184be:	4619      	mov	r1, r3
   184c0:	4618      	mov	r0, r3
   184c2:	f7ff fe89 	bl	181d8 <__assert_func>
   184c6:	bf00      	nop
   184c8:	2000ddbc 	.word	0x2000ddbc

000184cc <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   184cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   184ce:	4604      	mov	r4, r0
   184d0:	460d      	mov	r5, r1
   184d2:	4617      	mov	r7, r2
   184d4:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   184d6:	2220      	movs	r2, #32
   184d8:	2100      	movs	r1, #0
   184da:	f001 fa80 	bl	199de <memset>
    c->c_ev.ev_cb = ev_cb;
   184de:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   184e0:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   184e2:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   184e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000184e8 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   184e8:	b538      	push	{r3, r4, r5, lr}
   184ea:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   184ec:	f001 f90a 	bl	19704 <os_arch_save_sr>
   184f0:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   184f2:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   184f4:	b13b      	cbz	r3, 18506 <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   184f6:	69a2      	ldr	r2, [r4, #24]
   184f8:	b172      	cbz	r2, 18518 <os_callout_stop+0x30>
   184fa:	61d3      	str	r3, [r2, #28]
   184fc:	69e3      	ldr	r3, [r4, #28]
   184fe:	69a2      	ldr	r2, [r4, #24]
   18500:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   18502:	2300      	movs	r3, #0
   18504:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   18506:	6920      	ldr	r0, [r4, #16]
   18508:	b110      	cbz	r0, 18510 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   1850a:	4621      	mov	r1, r4
   1850c:	f000 fa02 	bl	18914 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   18510:	4628      	mov	r0, r5
   18512:	f001 f8fd 	bl	19710 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   18516:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   18518:	4a01      	ldr	r2, [pc, #4]	; (18520 <os_callout_stop+0x38>)
   1851a:	6053      	str	r3, [r2, #4]
   1851c:	e7ee      	b.n	184fc <os_callout_stop+0x14>
   1851e:	bf00      	nop
   18520:	2000de90 	.word	0x2000de90

00018524 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   18524:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   18526:	6903      	ldr	r3, [r0, #16]
   18528:	b1c3      	cbz	r3, 1855c <os_callout_reset+0x38>
   1852a:	4605      	mov	r5, r0
   1852c:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   1852e:	2900      	cmp	r1, #0
   18530:	db2f      	blt.n	18592 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   18532:	f001 f8e7 	bl	19704 <os_arch_save_sr>
   18536:	4606      	mov	r6, r0

    os_callout_stop(c);
   18538:	4628      	mov	r0, r5
   1853a:	f7ff ffd5 	bl	184e8 <os_callout_stop>

    if (ticks == 0) {
   1853e:	b904      	cbnz	r4, 18542 <os_callout_reset+0x1e>
        ticks = 1;
   18540:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   18542:	f001 f867 	bl	19614 <os_time_get>
   18546:	4420      	add	r0, r4
   18548:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   1854a:	4b13      	ldr	r3, [pc, #76]	; (18598 <os_callout_reset+0x74>)
   1854c:	681b      	ldr	r3, [r3, #0]
   1854e:	b153      	cbz	r3, 18566 <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   18550:	695a      	ldr	r2, [r3, #20]
   18552:	1a82      	subs	r2, r0, r2
   18554:	2a00      	cmp	r2, #0
   18556:	db06      	blt.n	18566 <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   18558:	699b      	ldr	r3, [r3, #24]
   1855a:	e7f8      	b.n	1854e <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   1855c:	461a      	mov	r2, r3
   1855e:	4619      	mov	r1, r3
   18560:	4618      	mov	r0, r3
   18562:	f7ff fe39 	bl	181d8 <__assert_func>
            break;
        }
    }

    if (entry) {
   18566:	b15b      	cbz	r3, 18580 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   18568:	69da      	ldr	r2, [r3, #28]
   1856a:	61ea      	str	r2, [r5, #28]
   1856c:	61ab      	str	r3, [r5, #24]
   1856e:	69da      	ldr	r2, [r3, #28]
   18570:	6015      	str	r5, [r2, #0]
   18572:	3518      	adds	r5, #24
   18574:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   18576:	4630      	mov	r0, r6
   18578:	f001 f8ca 	bl	19710 <os_arch_restore_sr>

    ret = OS_OK;
   1857c:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   1857e:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   18580:	2300      	movs	r3, #0
   18582:	61ab      	str	r3, [r5, #24]
   18584:	4b04      	ldr	r3, [pc, #16]	; (18598 <os_callout_reset+0x74>)
   18586:	685a      	ldr	r2, [r3, #4]
   18588:	61ea      	str	r2, [r5, #28]
   1858a:	6015      	str	r5, [r2, #0]
   1858c:	3518      	adds	r5, #24
   1858e:	605d      	str	r5, [r3, #4]
   18590:	e7f1      	b.n	18576 <os_callout_reset+0x52>
        ret = OS_EINVAL;
   18592:	2002      	movs	r0, #2
    return ret;
   18594:	e7f3      	b.n	1857e <os_callout_reset+0x5a>
   18596:	bf00      	nop
   18598:	2000de90 	.word	0x2000de90

0001859c <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   1859c:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   1859e:	f001 f839 	bl	19614 <os_time_get>
   185a2:	4605      	mov	r5, r0
   185a4:	e00f      	b.n	185c6 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   185a6:	69e2      	ldr	r2, [r4, #28]
   185a8:	4b12      	ldr	r3, [pc, #72]	; (185f4 <os_callout_tick+0x58>)
   185aa:	605a      	str	r2, [r3, #4]
   185ac:	69e3      	ldr	r3, [r4, #28]
   185ae:	69a2      	ldr	r2, [r4, #24]
   185b0:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   185b2:	2300      	movs	r3, #0
   185b4:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   185b6:	f001 f8ab 	bl	19710 <os_arch_restore_sr>

        if (c) {
   185ba:	b1d4      	cbz	r4, 185f2 <os_callout_tick+0x56>
            if (c->c_evq) {
   185bc:	6920      	ldr	r0, [r4, #16]
   185be:	b9a0      	cbnz	r0, 185ea <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   185c0:	6863      	ldr	r3, [r4, #4]
   185c2:	4620      	mov	r0, r4
   185c4:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   185c6:	f001 f89d 	bl	19704 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   185ca:	4b0a      	ldr	r3, [pc, #40]	; (185f4 <os_callout_tick+0x58>)
   185cc:	681c      	ldr	r4, [r3, #0]
        if (c) {
   185ce:	2c00      	cmp	r4, #0
   185d0:	d0f1      	beq.n	185b6 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   185d2:	6963      	ldr	r3, [r4, #20]
   185d4:	1aeb      	subs	r3, r5, r3
   185d6:	2b00      	cmp	r3, #0
   185d8:	db05      	blt.n	185e6 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   185da:	69a3      	ldr	r3, [r4, #24]
   185dc:	2b00      	cmp	r3, #0
   185de:	d0e2      	beq.n	185a6 <os_callout_tick+0xa>
   185e0:	69e2      	ldr	r2, [r4, #28]
   185e2:	61da      	str	r2, [r3, #28]
   185e4:	e7e2      	b.n	185ac <os_callout_tick+0x10>
                c = NULL;
   185e6:	2400      	movs	r4, #0
   185e8:	e7e5      	b.n	185b6 <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   185ea:	4621      	mov	r1, r4
   185ec:	f000 f915 	bl	1881a <os_eventq_put>
   185f0:	e7e9      	b.n	185c6 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   185f2:	bd38      	pop	{r3, r4, r5, pc}
   185f4:	2000de90 	.word	0x2000de90

000185f8 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   185f8:	b510      	push	{r4, lr}
   185fa:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   185fc:	f001 f88b 	bl	19716 <os_arch_in_critical>
   18600:	b130      	cbz	r0, 18610 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   18602:	4b09      	ldr	r3, [pc, #36]	; (18628 <os_callout_wakeup_ticks+0x30>)
   18604:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   18606:	b15b      	cbz	r3, 18620 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   18608:	6958      	ldr	r0, [r3, #20]
   1860a:	1b00      	subs	r0, r0, r4
   1860c:	d406      	bmi.n	1861c <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   1860e:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   18610:	2300      	movs	r3, #0
   18612:	461a      	mov	r2, r3
   18614:	4619      	mov	r1, r3
   18616:	4618      	mov	r0, r3
   18618:	f7ff fdde 	bl	181d8 <__assert_func>
            rt = 0;     /* callout time is in the past */
   1861c:	2000      	movs	r0, #0
   1861e:	e7f6      	b.n	1860e <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   18620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   18624:	e7f3      	b.n	1860e <os_callout_wakeup_ticks+0x16>
   18626:	bf00      	nop
   18628:	2000de90 	.word	0x2000de90

0001862c <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   1862c:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   1862e:	4601      	mov	r1, r0
   18630:	2000      	movs	r0, #0
   18632:	f002 f84d 	bl	1a6d0 <hal_timer_config>
    return rc;
}
   18636:	bd08      	pop	{r3, pc}

00018638 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   18638:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   1863a:	2000      	movs	r0, #0
   1863c:	f002 f8c4 	bl	1a7c8 <hal_timer_read>
    return cpu_time;
}
   18640:	bd08      	pop	{r3, pc}
	...

00018644 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   18644:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   18646:	4b15      	ldr	r3, [pc, #84]	; (1869c <os_dev_add+0x58>)
   18648:	681d      	ldr	r5, [r3, #0]
   1864a:	b115      	cbz	r5, 18652 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1864c:	462b      	mov	r3, r5
    prev_dev = NULL;
   1864e:	2400      	movs	r4, #0
   18650:	e008      	b.n	18664 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   18652:	4603      	mov	r3, r0
   18654:	f843 5f20 	str.w	r5, [r3, #32]!
   18658:	4a10      	ldr	r2, [pc, #64]	; (1869c <os_dev_add+0x58>)
   1865a:	6053      	str	r3, [r2, #4]
   1865c:	6010      	str	r0, [r2, #0]
        return (0);
   1865e:	e010      	b.n	18682 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   18660:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   18662:	6a1b      	ldr	r3, [r3, #32]
   18664:	b143      	cbz	r3, 18678 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   18666:	7e01      	ldrb	r1, [r0, #24]
   18668:	7e1a      	ldrb	r2, [r3, #24]
   1866a:	4291      	cmp	r1, r2
   1866c:	d304      	bcc.n	18678 <os_dev_add+0x34>
   1866e:	d1f7      	bne.n	18660 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   18670:	7e41      	ldrb	r1, [r0, #25]
   18672:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   18674:	4291      	cmp	r1, r2
   18676:	d2f3      	bcs.n	18660 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   18678:	b15c      	cbz	r4, 18692 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1867a:	6a23      	ldr	r3, [r4, #32]
   1867c:	6203      	str	r3, [r0, #32]
   1867e:	b11b      	cbz	r3, 18688 <os_dev_add+0x44>
   18680:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   18682:	2000      	movs	r0, #0
   18684:	bc30      	pop	{r4, r5}
   18686:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   18688:	f100 0320 	add.w	r3, r0, #32
   1868c:	4a03      	ldr	r2, [pc, #12]	; (1869c <os_dev_add+0x58>)
   1868e:	6053      	str	r3, [r2, #4]
   18690:	e7f6      	b.n	18680 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   18692:	6205      	str	r5, [r0, #32]
   18694:	4b01      	ldr	r3, [pc, #4]	; (1869c <os_dev_add+0x58>)
   18696:	6018      	str	r0, [r3, #0]
   18698:	e7f3      	b.n	18682 <os_dev_add+0x3e>
   1869a:	bf00      	nop
   1869c:	20009070 	.word	0x20009070

000186a0 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   186a0:	b510      	push	{r4, lr}
   186a2:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   186a4:	6903      	ldr	r3, [r0, #16]
   186a6:	6941      	ldr	r1, [r0, #20]
   186a8:	4798      	blx	r3
    if (rc != 0) {
   186aa:	4603      	mov	r3, r0
   186ac:	b128      	cbz	r0, 186ba <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   186ae:	7ee2      	ldrb	r2, [r4, #27]
   186b0:	f012 0f08 	tst.w	r2, #8
   186b4:	d105      	bne.n	186c2 <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   186b6:	2300      	movs	r3, #0
   186b8:	e003      	b.n	186c2 <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   186ba:	7ee2      	ldrb	r2, [r4, #27]
   186bc:	f042 0201 	orr.w	r2, r2, #1
   186c0:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   186c2:	4618      	mov	r0, r3
   186c4:	bd10      	pop	{r4, pc}

000186c6 <os_dev_init>:
    dev->od_name = name;
   186c6:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   186c8:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   186ca:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   186cc:	2300      	movs	r3, #0
   186ce:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   186d0:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   186d2:	9a00      	ldr	r2, [sp, #0]
   186d4:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   186d6:	9a01      	ldr	r2, [sp, #4]
   186d8:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   186da:	6003      	str	r3, [r0, #0]
   186dc:	6043      	str	r3, [r0, #4]
   186de:	6083      	str	r3, [r0, #8]
   186e0:	60c3      	str	r3, [r0, #12]
}
   186e2:	4618      	mov	r0, r3
   186e4:	4770      	bx	lr
	...

000186e8 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   186e8:	b530      	push	{r4, r5, lr}
   186ea:	b083      	sub	sp, #12
   186ec:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   186ee:	9c07      	ldr	r4, [sp, #28]
   186f0:	9401      	str	r4, [sp, #4]
   186f2:	9c06      	ldr	r4, [sp, #24]
   186f4:	9400      	str	r4, [sp, #0]
   186f6:	f7ff ffe6 	bl	186c6 <os_dev_init>
    if (rc != 0) {
   186fa:	4603      	mov	r3, r0
   186fc:	b110      	cbz	r0, 18704 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   186fe:	4618      	mov	r0, r3
   18700:	b003      	add	sp, #12
   18702:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   18704:	4628      	mov	r0, r5
   18706:	f7ff ff9d 	bl	18644 <os_dev_add>
    if (rc != 0) {
   1870a:	4603      	mov	r3, r0
   1870c:	2800      	cmp	r0, #0
   1870e:	d1f6      	bne.n	186fe <os_dev_create+0x16>
    if (g_os_started) {
   18710:	4a04      	ldr	r2, [pc, #16]	; (18724 <os_dev_create+0x3c>)
   18712:	6812      	ldr	r2, [r2, #0]
   18714:	2a00      	cmp	r2, #0
   18716:	d0f2      	beq.n	186fe <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   18718:	4628      	mov	r0, r5
   1871a:	f7ff ffc1 	bl	186a0 <os_dev_initialize>
   1871e:	4603      	mov	r3, r0
    return (rc);
   18720:	e7ed      	b.n	186fe <os_dev_create+0x16>
   18722:	bf00      	nop
   18724:	2000de88 	.word	0x2000de88

00018728 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   18728:	b538      	push	{r3, r4, r5, lr}
   1872a:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1872c:	4b08      	ldr	r3, [pc, #32]	; (18750 <os_dev_initialize_all+0x28>)
   1872e:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   18730:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   18732:	e000      	b.n	18736 <os_dev_initialize_all+0xe>
   18734:	6a24      	ldr	r4, [r4, #32]
   18736:	b144      	cbz	r4, 1874a <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   18738:	7e23      	ldrb	r3, [r4, #24]
   1873a:	42ab      	cmp	r3, r5
   1873c:	d1fa      	bne.n	18734 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   1873e:	4620      	mov	r0, r4
   18740:	f7ff ffae 	bl	186a0 <os_dev_initialize>
            if (rc) {
   18744:	4602      	mov	r2, r0
   18746:	2800      	cmp	r0, #0
   18748:	d0f4      	beq.n	18734 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   1874a:	4610      	mov	r0, r2
   1874c:	bd38      	pop	{r3, r4, r5, pc}
   1874e:	bf00      	nop
   18750:	20009070 	.word	0x20009070

00018754 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   18754:	b538      	push	{r3, r4, r5, lr}
   18756:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   18758:	4b05      	ldr	r3, [pc, #20]	; (18770 <os_dev_lookup+0x1c>)
   1875a:	681c      	ldr	r4, [r3, #0]
   1875c:	b134      	cbz	r4, 1876c <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   1875e:	4629      	mov	r1, r5
   18760:	69e0      	ldr	r0, [r4, #28]
   18762:	f001 f958 	bl	19a16 <strcmp>
   18766:	b108      	cbz	r0, 1876c <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   18768:	6a24      	ldr	r4, [r4, #32]
   1876a:	e7f7      	b.n	1875c <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   1876c:	4620      	mov	r0, r4
   1876e:	bd38      	pop	{r3, r4, r5, pc}
   18770:	20009070 	.word	0x20009070

00018774 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   18774:	b570      	push	{r4, r5, r6, lr}
   18776:	460d      	mov	r5, r1
   18778:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   1877a:	f7ff ffeb 	bl	18754 <os_dev_lookup>
    if (dev == NULL) {
   1877e:	4604      	mov	r4, r0
   18780:	b1a0      	cbz	r0, 187ac <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   18782:	7ec3      	ldrb	r3, [r0, #27]
   18784:	f013 0f01 	tst.w	r3, #1
   18788:	d012      	beq.n	187b0 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   1878a:	6803      	ldr	r3, [r0, #0]
   1878c:	b11b      	cbz	r3, 18796 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   1878e:	4632      	mov	r2, r6
   18790:	4629      	mov	r1, r5
   18792:	4798      	blx	r3
        if (rc != 0) {
   18794:	b970      	cbnz	r0, 187b4 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   18796:	f000 ffb5 	bl	19704 <os_arch_save_sr>
    ++dev->od_open_ref;
   1879a:	7ea3      	ldrb	r3, [r4, #26]
   1879c:	3301      	adds	r3, #1
   1879e:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   187a0:	7ee3      	ldrb	r3, [r4, #27]
   187a2:	f043 0302 	orr.w	r3, r3, #2
   187a6:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   187a8:	f000 ffb2 	bl	19710 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   187ac:	4620      	mov	r0, r4
   187ae:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   187b0:	2400      	movs	r4, #0
   187b2:	e7fb      	b.n	187ac <os_dev_open+0x38>
    return (NULL);
   187b4:	2400      	movs	r4, #0
   187b6:	e7f9      	b.n	187ac <os_dev_open+0x38>

000187b8 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   187b8:	b1b0      	cbz	r0, 187e8 <os_dev_close+0x30>
{
   187ba:	b510      	push	{r4, lr}
   187bc:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   187be:	68c3      	ldr	r3, [r0, #12]
   187c0:	b113      	cbz	r3, 187c8 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   187c2:	4798      	blx	r3
        if (rc != 0) {
   187c4:	4603      	mov	r3, r0
   187c6:	b968      	cbnz	r0, 187e4 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   187c8:	f000 ff9c 	bl	19704 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   187cc:	7ea3      	ldrb	r3, [r4, #26]
   187ce:	3b01      	subs	r3, #1
   187d0:	b2db      	uxtb	r3, r3
   187d2:	76a3      	strb	r3, [r4, #26]
   187d4:	b91b      	cbnz	r3, 187de <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   187d6:	7ee3      	ldrb	r3, [r4, #27]
   187d8:	f023 0306 	bic.w	r3, r3, #6
   187dc:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   187de:	f000 ff97 	bl	19710 <os_arch_restore_sr>

    return (0);
   187e2:	2300      	movs	r3, #0
err:
    return (rc);
}
   187e4:	4618      	mov	r0, r3
   187e6:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   187e8:	2302      	movs	r3, #2
}
   187ea:	4618      	mov	r0, r3
   187ec:	4770      	bx	lr
	...

000187f0 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   187f0:	4b02      	ldr	r3, [pc, #8]	; (187fc <os_dev_reset+0xc>)
   187f2:	2200      	movs	r2, #0
   187f4:	601a      	str	r2, [r3, #0]
   187f6:	605b      	str	r3, [r3, #4]
}
   187f8:	4770      	bx	lr
   187fa:	bf00      	nop
   187fc:	20009070 	.word	0x20009070

00018800 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   18800:	2200      	movs	r2, #0
   18802:	6002      	str	r2, [r0, #0]
   18804:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   18806:	4603      	mov	r3, r0
   18808:	f843 2f08 	str.w	r2, [r3, #8]!
   1880c:	60c3      	str	r3, [r0, #12]
}
   1880e:	4770      	bx	lr

00018810 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   18810:	68c0      	ldr	r0, [r0, #12]
}
   18812:	3000      	adds	r0, #0
   18814:	bf18      	it	ne
   18816:	2001      	movne	r0, #1
   18818:	4770      	bx	lr

0001881a <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   1881a:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   1881c:	b1f0      	cbz	r0, 1885c <os_eventq_put+0x42>
   1881e:	460c      	mov	r4, r1
   18820:	4605      	mov	r5, r0
   18822:	f7ff fff5 	bl	18810 <os_eventq_inited>
   18826:	b1c8      	cbz	r0, 1885c <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   18828:	f000 ff6c 	bl	19704 <os_arch_save_sr>
   1882c:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   1882e:	7823      	ldrb	r3, [r4, #0]
   18830:	b9d3      	cbnz	r3, 18868 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   18832:	2301      	movs	r3, #1
   18834:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   18836:	2300      	movs	r3, #0
   18838:	60e3      	str	r3, [r4, #12]
   1883a:	68eb      	ldr	r3, [r5, #12]
   1883c:	601c      	str	r4, [r3, #0]
   1883e:	340c      	adds	r4, #12
   18840:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   18842:	6868      	ldr	r0, [r5, #4]
   18844:	b1b8      	cbz	r0, 18876 <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   18846:	7b03      	ldrb	r3, [r0, #12]
   18848:	2b02      	cmp	r3, #2
   1884a:	d010      	beq.n	1886e <os_eventq_put+0x54>
    resched = 0;
   1884c:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   1884e:	2300      	movs	r3, #0
   18850:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   18852:	4630      	mov	r0, r6
   18854:	f000 ff5c 	bl	19710 <os_arch_restore_sr>

    if (resched) {
   18858:	b97c      	cbnz	r4, 1887a <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   1885a:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   1885c:	2300      	movs	r3, #0
   1885e:	461a      	mov	r2, r3
   18860:	4619      	mov	r1, r3
   18862:	4618      	mov	r0, r3
   18864:	f7ff fcb8 	bl	181d8 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   18868:	f000 ff52 	bl	19710 <os_arch_restore_sr>
   1886c:	e7f5      	b.n	1885a <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   1886e:	f000 fcc7 	bl	19200 <os_sched_wakeup>
            resched = 1;
   18872:	2401      	movs	r4, #1
   18874:	e7eb      	b.n	1884e <os_eventq_put+0x34>
    resched = 0;
   18876:	2400      	movs	r4, #0
   18878:	e7eb      	b.n	18852 <os_eventq_put+0x38>
        os_sched(NULL);
   1887a:	2000      	movs	r0, #0
   1887c:	f000 fd40 	bl	19300 <os_sched>
   18880:	e7eb      	b.n	1885a <os_eventq_put+0x40>

00018882 <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   18882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18884:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   18886:	f000 fc67 	bl	19158 <os_sched_get_current_task>
   1888a:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   1888c:	682b      	ldr	r3, [r5, #0]
   1888e:	4283      	cmp	r3, r0
   18890:	d001      	beq.n	18896 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   18892:	b9db      	cbnz	r3, 188cc <os_eventq_get+0x4a>
            evq->evq_owner = t;
   18894:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   18896:	f000 ff35 	bl	19704 <os_arch_save_sr>
   1889a:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   1889c:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   1889e:	b9de      	cbnz	r6, 188d8 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   188a0:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   188a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   188a6:	4620      	mov	r0, r4
   188a8:	f000 fc62 	bl	19170 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   188ac:	7b63      	ldrb	r3, [r4, #13]
   188ae:	f043 0308 	orr.w	r3, r3, #8
   188b2:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   188b4:	4638      	mov	r0, r7
   188b6:	f000 ff2b 	bl	19710 <os_arch_restore_sr>

        os_sched(NULL);
   188ba:	2000      	movs	r0, #0
   188bc:	f000 fd20 	bl	19300 <os_sched>

        OS_ENTER_CRITICAL(sr);
   188c0:	f000 ff20 	bl	19704 <os_arch_save_sr>
   188c4:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   188c6:	2300      	movs	r3, #0
   188c8:	606b      	str	r3, [r5, #4]
        goto pull_one;
   188ca:	e7e7      	b.n	1889c <os_eventq_get+0x1a>
            assert(0);
   188cc:	2300      	movs	r3, #0
   188ce:	461a      	mov	r2, r3
   188d0:	4619      	mov	r1, r3
   188d2:	4618      	mov	r0, r3
   188d4:	f7ff fc80 	bl	181d8 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   188d8:	68f3      	ldr	r3, [r6, #12]
   188da:	60ab      	str	r3, [r5, #8]
   188dc:	b153      	cbz	r3, 188f4 <os_eventq_get+0x72>
        ev->ev_queued = 0;
   188de:	2300      	movs	r3, #0
   188e0:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   188e2:	7b63      	ldrb	r3, [r4, #13]
   188e4:	f023 0308 	bic.w	r3, r3, #8
   188e8:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   188ea:	4638      	mov	r0, r7
   188ec:	f000 ff10 	bl	19710 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   188f0:	4630      	mov	r0, r6
   188f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   188f4:	f105 0308 	add.w	r3, r5, #8
   188f8:	60eb      	str	r3, [r5, #12]
   188fa:	e7f0      	b.n	188de <os_eventq_get+0x5c>

000188fc <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   188fc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   188fe:	f7ff ffc0 	bl	18882 <os_eventq_get>
    assert(ev->ev_cb != NULL);
   18902:	6843      	ldr	r3, [r0, #4]
   18904:	b10b      	cbz	r3, 1890a <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   18906:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   18908:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   1890a:	461a      	mov	r2, r3
   1890c:	4619      	mov	r1, r3
   1890e:	4618      	mov	r0, r3
   18910:	f7ff fc62 	bl	181d8 <__assert_func>

00018914 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   18914:	b538      	push	{r3, r4, r5, lr}
   18916:	4605      	mov	r5, r0
   18918:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1891a:	f000 fef3 	bl	19704 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   1891e:	7823      	ldrb	r3, [r4, #0]
   18920:	b183      	cbz	r3, 18944 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   18922:	68aa      	ldr	r2, [r5, #8]
   18924:	42a2      	cmp	r2, r4
   18926:	d107      	bne.n	18938 <os_eventq_remove+0x24>
   18928:	68d3      	ldr	r3, [r2, #12]
   1892a:	60ab      	str	r3, [r5, #8]
   1892c:	b953      	cbnz	r3, 18944 <os_eventq_remove+0x30>
   1892e:	f105 0308 	add.w	r3, r5, #8
   18932:	60eb      	str	r3, [r5, #12]
   18934:	e006      	b.n	18944 <os_eventq_remove+0x30>
   18936:	461a      	mov	r2, r3
   18938:	68d3      	ldr	r3, [r2, #12]
   1893a:	42a3      	cmp	r3, r4
   1893c:	d1fb      	bne.n	18936 <os_eventq_remove+0x22>
   1893e:	68db      	ldr	r3, [r3, #12]
   18940:	60d3      	str	r3, [r2, #12]
   18942:	b123      	cbz	r3, 1894e <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   18944:	2300      	movs	r3, #0
   18946:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   18948:	f000 fee2 	bl	19710 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   1894c:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1894e:	320c      	adds	r2, #12
   18950:	60ea      	str	r2, [r5, #12]
   18952:	e7f7      	b.n	18944 <os_eventq_remove+0x30>

00018954 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   18954:	4800      	ldr	r0, [pc, #0]	; (18958 <os_eventq_dflt_get+0x4>)
   18956:	4770      	bx	lr
   18958:	20009078 	.word	0x20009078

0001895c <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   1895c:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   1895e:	2000      	movs	r0, #0
   18960:	6018      	str	r0, [r3, #0]
   18962:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   18964:	6098      	str	r0, [r3, #8]
   18966:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   18968:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   1896a:	611a      	str	r2, [r3, #16]

    return (0);
}
   1896c:	4770      	bx	lr

0001896e <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   1896e:	b538      	push	{r3, r4, r5, lr}
   18970:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   18972:	f000 fec7 	bl	19704 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   18976:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   18978:	b114      	cbz	r4, 18980 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1897a:	6863      	ldr	r3, [r4, #4]
   1897c:	602b      	str	r3, [r5, #0]
   1897e:	b12b      	cbz	r3, 1898c <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   18980:	f000 fec6 	bl	19710 <os_arch_restore_sr>

    if (mp) {
   18984:	b124      	cbz	r4, 18990 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   18986:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   1898a:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1898c:	606d      	str	r5, [r5, #4]
   1898e:	e7f7      	b.n	18980 <os_mqueue_get+0x12>
        m = NULL;
   18990:	2000      	movs	r0, #0
    return (m);
   18992:	e7fa      	b.n	1898a <os_mqueue_get+0x1c>

00018994 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   18994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   18996:	7953      	ldrb	r3, [r2, #5]
   18998:	2b07      	cmp	r3, #7
   1899a:	d916      	bls.n	189ca <os_mqueue_put+0x36>
   1899c:	4614      	mov	r4, r2
   1899e:	460e      	mov	r6, r1
   189a0:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   189a2:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   189a6:	f000 fead 	bl	19704 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   189aa:	2300      	movs	r3, #0
   189ac:	f844 3f14 	str.w	r3, [r4, #20]!
   189b0:	686b      	ldr	r3, [r5, #4]
   189b2:	601f      	str	r7, [r3, #0]
   189b4:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   189b6:	f000 feab 	bl	19710 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   189ba:	b146      	cbz	r6, 189ce <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   189bc:	f105 0108 	add.w	r1, r5, #8
   189c0:	4630      	mov	r0, r6
   189c2:	f7ff ff2a 	bl	1881a <os_eventq_put>
    }

    return (0);
   189c6:	2000      	movs	r0, #0
   189c8:	e000      	b.n	189cc <os_mqueue_put+0x38>
err:
    return (rc);
   189ca:	2002      	movs	r0, #2
}
   189cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   189ce:	2000      	movs	r0, #0
   189d0:	e7fc      	b.n	189cc <os_mqueue_put+0x38>

000189d2 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   189d2:	3a10      	subs	r2, #16
   189d4:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   189d6:	6041      	str	r1, [r0, #4]

    return (0);
}
   189d8:	2000      	movs	r0, #0
   189da:	4770      	bx	lr

000189dc <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   189dc:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   189de:	8803      	ldrh	r3, [r0, #0]
   189e0:	428b      	cmp	r3, r1
   189e2:	d312      	bcc.n	18a0a <os_mbuf_get+0x2e>
   189e4:	460d      	mov	r5, r1
   189e6:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   189e8:	6840      	ldr	r0, [r0, #4]
   189ea:	f000 f947 	bl	18c7c <os_memblock_get>
    if (!om) {
   189ee:	4603      	mov	r3, r0
   189f0:	b148      	cbz	r0, 18a06 <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   189f2:	2200      	movs	r2, #0
   189f4:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   189f6:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   189f8:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   189fa:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   189fc:	f100 0110 	add.w	r1, r0, #16
   18a00:	4429      	add	r1, r5
   18a02:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   18a04:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   18a06:	4618      	mov	r0, r3
   18a08:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   18a0a:	2300      	movs	r3, #0
    return om;
   18a0c:	e7fb      	b.n	18a06 <os_mbuf_get+0x2a>

00018a0e <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   18a0e:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   18a10:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   18a14:	8803      	ldrh	r3, [r0, #0]
   18a16:	42ab      	cmp	r3, r5
   18a18:	d310      	bcc.n	18a3c <os_mbuf_get_pkthdr+0x2e>
   18a1a:	2dff      	cmp	r5, #255	; 0xff
   18a1c:	d810      	bhi.n	18a40 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   18a1e:	2100      	movs	r1, #0
   18a20:	f7ff ffdc 	bl	189dc <os_mbuf_get>
    if (om) {
   18a24:	4603      	mov	r3, r0
   18a26:	b138      	cbz	r0, 18a38 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   18a28:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   18a2a:	6802      	ldr	r2, [r0, #0]
   18a2c:	4415      	add	r5, r2
   18a2e:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   18a30:	2200      	movs	r2, #0
   18a32:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   18a34:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   18a36:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   18a38:	4618      	mov	r0, r3
   18a3a:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   18a3c:	2300      	movs	r3, #0
   18a3e:	e7fb      	b.n	18a38 <os_mbuf_get_pkthdr+0x2a>
   18a40:	2300      	movs	r3, #0
    return om;
   18a42:	e7f9      	b.n	18a38 <os_mbuf_get_pkthdr+0x2a>

00018a44 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   18a44:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   18a46:	6883      	ldr	r3, [r0, #8]
   18a48:	b123      	cbz	r3, 18a54 <os_mbuf_free+0x10>
   18a4a:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   18a4c:	6858      	ldr	r0, [r3, #4]
   18a4e:	f000 f93d 	bl	18ccc <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   18a52:	bd08      	pop	{r3, pc}
    rc = 0;
   18a54:	2000      	movs	r0, #0
    return (rc);
   18a56:	e7fc      	b.n	18a52 <os_mbuf_free+0xe>

00018a58 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   18a58:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   18a5a:	b160      	cbz	r0, 18a76 <os_mbuf_free_chain+0x1e>
{
   18a5c:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   18a5e:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   18a60:	4618      	mov	r0, r3
   18a62:	f7ff ffef 	bl	18a44 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   18a66:	4623      	mov	r3, r4
        if (rc != 0) {
   18a68:	4602      	mov	r2, r0
   18a6a:	b910      	cbnz	r0, 18a72 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   18a6c:	2c00      	cmp	r4, #0
   18a6e:	d1f6      	bne.n	18a5e <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   18a70:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   18a72:	4610      	mov	r0, r2
   18a74:	bd10      	pop	{r4, pc}
    rc = 0;
   18a76:	2200      	movs	r2, #0
}
   18a78:	4610      	mov	r0, r2
   18a7a:	4770      	bx	lr

00018a7c <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   18a7c:	2300      	movs	r3, #0
    while (om != NULL) {
   18a7e:	e003      	b.n	18a88 <os_mbuf_len+0xc>
        len += om->om_len;
   18a80:	88c2      	ldrh	r2, [r0, #6]
   18a82:	4413      	add	r3, r2
   18a84:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   18a86:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   18a88:	2800      	cmp	r0, #0
   18a8a:	d1f9      	bne.n	18a80 <os_mbuf_len+0x4>
    }

    return len;
}
   18a8c:	4618      	mov	r0, r3
   18a8e:	4770      	bx	lr

00018a90 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   18a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   18a94:	2800      	cmp	r0, #0
   18a96:	d04d      	beq.n	18b34 <os_mbuf_append+0xa4>
   18a98:	460f      	mov	r7, r1
   18a9a:	4691      	mov	r9, r2
   18a9c:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   18a9e:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   18aa2:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   18aa4:	e000      	b.n	18aa8 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   18aa6:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   18aa8:	68eb      	ldr	r3, [r5, #12]
   18aaa:	2b00      	cmp	r3, #0
   18aac:	d1fb      	bne.n	18aa6 <os_mbuf_append+0x16>
    }

    remainder = len;
   18aae:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   18ab0:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   18ab2:	f105 0410 	add.w	r4, r5, #16
   18ab6:	881b      	ldrh	r3, [r3, #0]
   18ab8:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   18aba:	6828      	ldr	r0, [r5, #0]
   18abc:	88eb      	ldrh	r3, [r5, #6]
   18abe:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   18ac0:	1a24      	subs	r4, r4, r0
   18ac2:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   18ac4:	b164      	cbz	r4, 18ae0 <os_mbuf_append+0x50>
        if (space > remainder) {
   18ac6:	454c      	cmp	r4, r9
   18ac8:	dd00      	ble.n	18acc <os_mbuf_append+0x3c>
            space = remainder;
   18aca:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   18acc:	4622      	mov	r2, r4
   18ace:	4639      	mov	r1, r7
   18ad0:	f000 ff78 	bl	199c4 <memcpy>

        last->om_len += space;
   18ad4:	88eb      	ldrh	r3, [r5, #6]
   18ad6:	4423      	add	r3, r4
   18ad8:	80eb      	strh	r3, [r5, #6]
        data += space;
   18ada:	4427      	add	r7, r4
        remainder -= space;
   18adc:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   18ae0:	2e00      	cmp	r6, #0
   18ae2:	dd16      	ble.n	18b12 <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   18ae4:	2100      	movs	r1, #0
   18ae6:	4640      	mov	r0, r8
   18ae8:	f7ff ff78 	bl	189dc <os_mbuf_get>
        if (!new) {
   18aec:	4604      	mov	r4, r0
   18aee:	b180      	cbz	r0, 18b12 <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   18af0:	f8b8 2000 	ldrh.w	r2, [r8]
   18af4:	42b2      	cmp	r2, r6
   18af6:	bfa8      	it	ge
   18af8:	4632      	movge	r2, r6
   18afa:	b292      	uxth	r2, r2
   18afc:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   18afe:	4639      	mov	r1, r7
   18b00:	6800      	ldr	r0, [r0, #0]
   18b02:	f000 ff5f 	bl	199c4 <memcpy>
        data += new->om_len;
   18b06:	88e3      	ldrh	r3, [r4, #6]
   18b08:	441f      	add	r7, r3
        remainder -= new->om_len;
   18b0a:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   18b0c:	60ec      	str	r4, [r5, #12]
        last = new;
   18b0e:	4625      	mov	r5, r4
   18b10:	e7e6      	b.n	18ae0 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   18b12:	f89a 3005 	ldrb.w	r3, [sl, #5]
   18b16:	2b07      	cmp	r3, #7
   18b18:	d907      	bls.n	18b2a <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   18b1a:	eba9 0906 	sub.w	r9, r9, r6
   18b1e:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   18b22:	fa13 f989 	uxtah	r9, r3, r9
   18b26:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   18b2a:	b106      	cbz	r6, 18b2e <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   18b2c:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   18b2e:	4630      	mov	r0, r6
   18b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   18b34:	2602      	movs	r6, #2
   18b36:	e7fa      	b.n	18b2e <os_mbuf_append+0x9e>

00018b38 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   18b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b3c:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   18b3e:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   18b42:	2700      	movs	r7, #0
    head = NULL;
   18b44:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   18b46:	e017      	b.n	18b78 <os_mbuf_dup+0x40>
    startoff = 0;
   18b48:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18b4a:	4623      	mov	r3, r4
   18b4c:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   18b50:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18b52:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   18b54:	b299      	uxth	r1, r3
   18b56:	4640      	mov	r0, r8
   18b58:	f7ff ff40 	bl	189dc <os_mbuf_get>
   18b5c:	4605      	mov	r5, r0
   18b5e:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   18b60:	b188      	cbz	r0, 18b86 <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   18b62:	7923      	ldrb	r3, [r4, #4]
   18b64:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   18b66:	88e3      	ldrh	r3, [r4, #6]
   18b68:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   18b6a:	88e2      	ldrh	r2, [r4, #6]
   18b6c:	6821      	ldr	r1, [r4, #0]
   18b6e:	6828      	ldr	r0, [r5, #0]
   18b70:	f000 ff28 	bl	199c4 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   18b74:	68e4      	ldr	r4, [r4, #12]
   18b76:	462f      	mov	r7, r5
   18b78:	b14c      	cbz	r4, 18b8e <os_mbuf_dup+0x56>
        if (head) {
   18b7a:	b15e      	cbz	r6, 18b94 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   18b7c:	7963      	ldrb	r3, [r4, #5]
   18b7e:	2b07      	cmp	r3, #7
   18b80:	d9e2      	bls.n	18b48 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   18b82:	b299      	uxth	r1, r3
   18b84:	e7e1      	b.n	18b4a <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   18b86:	4630      	mov	r0, r6
   18b88:	f7ff ff66 	bl	18a58 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   18b8c:	462e      	mov	r6, r5
}
   18b8e:	4630      	mov	r0, r6
   18b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   18b94:	7963      	ldrb	r3, [r4, #5]
   18b96:	2b07      	cmp	r3, #7
   18b98:	d911      	bls.n	18bbe <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   18b9a:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18b9c:	4623      	mov	r3, r4
   18b9e:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   18ba2:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18ba4:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   18ba6:	b299      	uxth	r1, r3
   18ba8:	4640      	mov	r0, r8
   18baa:	f7ff ff17 	bl	189dc <os_mbuf_get>
            if (!head) {
   18bae:	4606      	mov	r6, r0
   18bb0:	2800      	cmp	r0, #0
   18bb2:	d0ec      	beq.n	18b8e <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   18bb4:	7963      	ldrb	r3, [r4, #5]
   18bb6:	2b07      	cmp	r3, #7
   18bb8:	d803      	bhi.n	18bc2 <os_mbuf_dup+0x8a>
            copy = head;
   18bba:	4605      	mov	r5, r0
   18bbc:	e7d1      	b.n	18b62 <os_mbuf_dup+0x2a>
    startoff = 0;
   18bbe:	2100      	movs	r1, #0
   18bc0:	e7ec      	b.n	18b9c <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   18bc2:	88c3      	ldrh	r3, [r0, #6]
   18bc4:	b973      	cbnz	r3, 18be4 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   18bc6:	f100 0510 	add.w	r5, r0, #16
   18bca:	7962      	ldrb	r2, [r4, #5]
   18bcc:	f104 0110 	add.w	r1, r4, #16
   18bd0:	4628      	mov	r0, r5
   18bd2:	f000 fef7 	bl	199c4 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   18bd6:	7963      	ldrb	r3, [r4, #5]
   18bd8:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   18bda:	7963      	ldrb	r3, [r4, #5]
   18bdc:	441d      	add	r5, r3
   18bde:	6035      	str	r5, [r6, #0]
            copy = head;
   18be0:	4635      	mov	r5, r6
   18be2:	e7be      	b.n	18b62 <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   18be4:	2300      	movs	r3, #0
   18be6:	461a      	mov	r2, r3
   18be8:	4619      	mov	r1, r3
   18bea:	4618      	mov	r0, r3
   18bec:	f7ff faf4 	bl	181d8 <__assert_func>

00018bf0 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   18bf0:	2800      	cmp	r0, #0
   18bf2:	d031      	beq.n	18c58 <os_mempool_init_internal+0x68>
{
   18bf4:	b430      	push	{r4, r5}
   18bf6:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   18bf8:	2a00      	cmp	r2, #0
   18bfa:	d02f      	beq.n	18c5c <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   18bfc:	b1bb      	cbz	r3, 18c2e <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   18bfe:	b113      	cbz	r3, 18c06 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   18c00:	f013 0f03 	tst.w	r3, #3
   18c04:	d12c      	bne.n	18c60 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   18c06:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   18c08:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   18c0a:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   18c0c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   18c10:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   18c12:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   18c14:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   18c16:	9802      	ldr	r0, [sp, #8]
   18c18:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   18c1a:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   18c1c:	b199      	cbz	r1, 18c46 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   18c1e:	f012 0f03 	tst.w	r2, #3
   18c22:	d002      	beq.n	18c2a <os_mempool_init_internal+0x3a>
   18c24:	f022 0203 	bic.w	r2, r2, #3
   18c28:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   18c2a:	2001      	movs	r0, #1
   18c2c:	e007      	b.n	18c3e <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   18c2e:	2900      	cmp	r1, #0
   18c30:	d0e5      	beq.n	18bfe <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   18c32:	2003      	movs	r0, #3
   18c34:	e00e      	b.n	18c54 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   18c36:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   18c38:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   18c3a:	3001      	adds	r0, #1
            block_addr += true_block_size;
   18c3c:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   18c3e:	4281      	cmp	r1, r0
   18c40:	dcf9      	bgt.n	18c36 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   18c42:	2200      	movs	r2, #0
   18c44:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   18c46:	2000      	movs	r0, #0
   18c48:	6120      	str	r0, [r4, #16]
   18c4a:	4b06      	ldr	r3, [pc, #24]	; (18c64 <os_mempool_init_internal+0x74>)
   18c4c:	685a      	ldr	r2, [r3, #4]
   18c4e:	6014      	str	r4, [r2, #0]
   18c50:	3410      	adds	r4, #16
   18c52:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   18c54:	bc30      	pop	{r4, r5}
   18c56:	4770      	bx	lr
        return OS_INVALID_PARM;
   18c58:	2003      	movs	r0, #3
}
   18c5a:	4770      	bx	lr
        return OS_INVALID_PARM;
   18c5c:	2003      	movs	r0, #3
   18c5e:	e7f9      	b.n	18c54 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   18c60:	2004      	movs	r0, #4
   18c62:	e7f7      	b.n	18c54 <os_mempool_init_internal+0x64>
   18c64:	2000de98 	.word	0x2000de98

00018c68 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   18c68:	b510      	push	{r4, lr}
   18c6a:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   18c6c:	2400      	movs	r4, #0
   18c6e:	9401      	str	r4, [sp, #4]
   18c70:	9c04      	ldr	r4, [sp, #16]
   18c72:	9400      	str	r4, [sp, #0]
   18c74:	f7ff ffbc 	bl	18bf0 <os_mempool_init_internal>
}
   18c78:	b002      	add	sp, #8
   18c7a:	bd10      	pop	{r4, pc}

00018c7c <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   18c7c:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   18c7e:	b1a0      	cbz	r0, 18caa <os_memblock_get+0x2e>
   18c80:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   18c82:	f000 fd3f 	bl	19704 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   18c86:	88e3      	ldrh	r3, [r4, #6]
   18c88:	b153      	cbz	r3, 18ca0 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   18c8a:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   18c8c:	682a      	ldr	r2, [r5, #0]
   18c8e:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   18c90:	3b01      	subs	r3, #1
   18c92:	b29b      	uxth	r3, r3
   18c94:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   18c96:	8922      	ldrh	r2, [r4, #8]
   18c98:	4293      	cmp	r3, r2
   18c9a:	d202      	bcs.n	18ca2 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   18c9c:	8123      	strh	r3, [r4, #8]
   18c9e:	e000      	b.n	18ca2 <os_memblock_get+0x26>
    block = NULL;
   18ca0:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   18ca2:	f000 fd35 	bl	19710 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   18ca6:	4628      	mov	r0, r5
   18ca8:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   18caa:	2500      	movs	r5, #0
    return (void *)block;
   18cac:	e7fb      	b.n	18ca6 <os_memblock_get+0x2a>

00018cae <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   18cae:	b538      	push	{r3, r4, r5, lr}
   18cb0:	4604      	mov	r4, r0
   18cb2:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   18cb4:	f000 fd26 	bl	19704 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   18cb8:	6963      	ldr	r3, [r4, #20]
   18cba:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   18cbc:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   18cbe:	88e3      	ldrh	r3, [r4, #6]
   18cc0:	3301      	adds	r3, #1
   18cc2:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   18cc4:	f000 fd24 	bl	19710 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   18cc8:	2000      	movs	r0, #0
   18cca:	bd38      	pop	{r3, r4, r5, pc}

00018ccc <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   18ccc:	b168      	cbz	r0, 18cea <os_memblock_put+0x1e>
{
   18cce:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   18cd0:	b169      	cbz	r1, 18cee <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   18cd2:	7a83      	ldrb	r3, [r0, #10]
   18cd4:	f013 0f01 	tst.w	r3, #1
   18cd8:	d004      	beq.n	18ce4 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   18cda:	69c3      	ldr	r3, [r0, #28]
   18cdc:	b113      	cbz	r3, 18ce4 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   18cde:	6a02      	ldr	r2, [r0, #32]
   18ce0:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   18ce2:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   18ce4:	f7ff ffe3 	bl	18cae <os_memblock_put_from_cb>
   18ce8:	e7fb      	b.n	18ce2 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   18cea:	2003      	movs	r0, #3
}
   18cec:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18cee:	2003      	movs	r0, #3
   18cf0:	e7f7      	b.n	18ce2 <os_memblock_put+0x16>
	...

00018cf4 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   18cf4:	4b02      	ldr	r3, [pc, #8]	; (18d00 <os_mempool_module_init+0xc>)
   18cf6:	2200      	movs	r2, #0
   18cf8:	601a      	str	r2, [r3, #0]
   18cfa:	605b      	str	r3, [r3, #4]
}
   18cfc:	4770      	bx	lr
   18cfe:	bf00      	nop
   18d00:	2000de98 	.word	0x2000de98

00018d04 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   18d04:	4b02      	ldr	r3, [pc, #8]	; (18d10 <os_msys_find_biggest_pool+0xc>)
   18d06:	6818      	ldr	r0, [r3, #0]
   18d08:	b108      	cbz	r0, 18d0e <os_msys_find_biggest_pool+0xa>
   18d0a:	6858      	ldr	r0, [r3, #4]
   18d0c:	3808      	subs	r0, #8
}
   18d0e:	4770      	bx	lr
   18d10:	2000010c 	.word	0x2000010c

00018d14 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18d14:	4b09      	ldr	r3, [pc, #36]	; (18d3c <os_msys_find_pool+0x28>)
   18d16:	6819      	ldr	r1, [r3, #0]
   18d18:	460b      	mov	r3, r1
   18d1a:	b123      	cbz	r3, 18d26 <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   18d1c:	881a      	ldrh	r2, [r3, #0]
   18d1e:	4282      	cmp	r2, r0
   18d20:	d201      	bcs.n	18d26 <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18d22:	689b      	ldr	r3, [r3, #8]
   18d24:	e7f9      	b.n	18d1a <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   18d26:	b10b      	cbz	r3, 18d2c <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   18d28:	4618      	mov	r0, r3
   18d2a:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   18d2c:	b119      	cbz	r1, 18d36 <os_msys_find_pool+0x22>
   18d2e:	4b03      	ldr	r3, [pc, #12]	; (18d3c <os_msys_find_pool+0x28>)
   18d30:	685b      	ldr	r3, [r3, #4]
   18d32:	3b08      	subs	r3, #8
   18d34:	e7f8      	b.n	18d28 <os_msys_find_pool+0x14>
   18d36:	460b      	mov	r3, r1
    return (pool);
   18d38:	e7f6      	b.n	18d28 <os_msys_find_pool+0x14>
   18d3a:	bf00      	nop
   18d3c:	2000010c 	.word	0x2000010c

00018d40 <os_msys_register>:
{
   18d40:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18d42:	4b11      	ldr	r3, [pc, #68]	; (18d88 <os_msys_register+0x48>)
   18d44:	681d      	ldr	r5, [r3, #0]
   18d46:	462b      	mov	r3, r5
    prev = NULL;
   18d48:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18d4a:	b133      	cbz	r3, 18d5a <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   18d4c:	8801      	ldrh	r1, [r0, #0]
   18d4e:	881a      	ldrh	r2, [r3, #0]
   18d50:	4291      	cmp	r1, r2
   18d52:	d302      	bcc.n	18d5a <os_msys_register+0x1a>
        prev = pool;
   18d54:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18d56:	689b      	ldr	r3, [r3, #8]
   18d58:	e7f7      	b.n	18d4a <os_msys_register+0xa>
    if (prev) {
   18d5a:	b15c      	cbz	r4, 18d74 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   18d5c:	68a3      	ldr	r3, [r4, #8]
   18d5e:	6083      	str	r3, [r0, #8]
   18d60:	b11b      	cbz	r3, 18d6a <os_msys_register+0x2a>
   18d62:	60a0      	str	r0, [r4, #8]
}
   18d64:	2000      	movs	r0, #0
   18d66:	bc30      	pop	{r4, r5}
   18d68:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   18d6a:	f100 0308 	add.w	r3, r0, #8
   18d6e:	4a06      	ldr	r2, [pc, #24]	; (18d88 <os_msys_register+0x48>)
   18d70:	6053      	str	r3, [r2, #4]
   18d72:	e7f6      	b.n	18d62 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   18d74:	6085      	str	r5, [r0, #8]
   18d76:	b115      	cbz	r5, 18d7e <os_msys_register+0x3e>
   18d78:	4b03      	ldr	r3, [pc, #12]	; (18d88 <os_msys_register+0x48>)
   18d7a:	6018      	str	r0, [r3, #0]
   18d7c:	e7f2      	b.n	18d64 <os_msys_register+0x24>
   18d7e:	f100 0308 	add.w	r3, r0, #8
   18d82:	4a01      	ldr	r2, [pc, #4]	; (18d88 <os_msys_register+0x48>)
   18d84:	6053      	str	r3, [r2, #4]
   18d86:	e7f7      	b.n	18d78 <os_msys_register+0x38>
   18d88:	2000010c 	.word	0x2000010c

00018d8c <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   18d8c:	b530      	push	{r4, r5, lr}
   18d8e:	b083      	sub	sp, #12
   18d90:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   18d92:	9d07      	ldr	r5, [sp, #28]
   18d94:	9501      	str	r5, [sp, #4]
   18d96:	9d06      	ldr	r5, [sp, #24]
   18d98:	9500      	str	r5, [sp, #0]
   18d9a:	f001 f96d 	bl	1a078 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   18d9e:	b138      	cbz	r0, 18db0 <os_msys_init_once+0x24>
   18da0:	2000      	movs	r0, #0
   18da2:	9000      	str	r0, [sp, #0]
   18da4:	4b09      	ldr	r3, [pc, #36]	; (18dcc <os_msys_init_once+0x40>)
   18da6:	681d      	ldr	r5, [r3, #0]
   18da8:	4603      	mov	r3, r0
   18daa:	4602      	mov	r2, r0
   18dac:	4601      	mov	r1, r0
   18dae:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   18db0:	4620      	mov	r0, r4
   18db2:	f7ff ffc5 	bl	18d40 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   18db6:	b138      	cbz	r0, 18dc8 <os_msys_init_once+0x3c>
   18db8:	2000      	movs	r0, #0
   18dba:	9000      	str	r0, [sp, #0]
   18dbc:	4b03      	ldr	r3, [pc, #12]	; (18dcc <os_msys_init_once+0x40>)
   18dbe:	681c      	ldr	r4, [r3, #0]
   18dc0:	4603      	mov	r3, r0
   18dc2:	4602      	mov	r2, r0
   18dc4:	4601      	mov	r1, r0
   18dc6:	47a0      	blx	r4
}
   18dc8:	b003      	add	sp, #12
   18dca:	bd30      	pop	{r4, r5, pc}
   18dcc:	20000104 	.word	0x20000104

00018dd0 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   18dd0:	4b02      	ldr	r3, [pc, #8]	; (18ddc <os_msys_reset+0xc>)
   18dd2:	2200      	movs	r2, #0
   18dd4:	601a      	str	r2, [r3, #0]
   18dd6:	605b      	str	r3, [r3, #4]
}
   18dd8:	4770      	bx	lr
   18dda:	bf00      	nop
   18ddc:	2000010c 	.word	0x2000010c

00018de0 <os_msys_get_pkthdr>:
{
   18de0:	b510      	push	{r4, lr}
   18de2:	460c      	mov	r4, r1
    if (dsize == 0) {
   18de4:	b930      	cbnz	r0, 18df4 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   18de6:	f7ff ff8d 	bl	18d04 <os_msys_find_biggest_pool>
    if (!pool) {
   18dea:	b158      	cbz	r0, 18e04 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   18dec:	b2e1      	uxtb	r1, r4
   18dee:	f7ff fe0e 	bl	18a0e <os_mbuf_get_pkthdr>
}
   18df2:	bd10      	pop	{r4, pc}
   18df4:	f101 0308 	add.w	r3, r1, #8
   18df8:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   18dfa:	4403      	add	r3, r0
   18dfc:	b298      	uxth	r0, r3
   18dfe:	f7ff ff89 	bl	18d14 <os_msys_find_pool>
   18e02:	e7f2      	b.n	18dea <os_msys_get_pkthdr+0xa>
    return (NULL);
   18e04:	2000      	movs	r0, #0
   18e06:	e7f4      	b.n	18df2 <os_msys_get_pkthdr+0x12>

00018e08 <os_msys_init>:

void
os_msys_init(void)
{
   18e08:	b500      	push	{lr}
   18e0a:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   18e0c:	f7ff ffe0 	bl	18dd0 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   18e10:	4b06      	ldr	r3, [pc, #24]	; (18e2c <os_msys_init+0x24>)
   18e12:	9301      	str	r3, [sp, #4]
   18e14:	f44f 7392 	mov.w	r3, #292	; 0x124
   18e18:	9300      	str	r3, [sp, #0]
   18e1a:	2340      	movs	r3, #64	; 0x40
   18e1c:	4a04      	ldr	r2, [pc, #16]	; (18e30 <os_msys_init+0x28>)
   18e1e:	4905      	ldr	r1, [pc, #20]	; (18e34 <os_msys_init+0x2c>)
   18e20:	4805      	ldr	r0, [pc, #20]	; (18e38 <os_msys_init+0x30>)
   18e22:	f7ff ffb3 	bl	18d8c <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   18e26:	b003      	add	sp, #12
   18e28:	f85d fb04 	ldr.w	pc, [sp], #4
   18e2c:	000203cc 	.word	0x000203cc
   18e30:	2000d988 	.word	0x2000d988
   18e34:	2000d994 	.word	0x2000d994
   18e38:	20009088 	.word	0x20009088

00018e3c <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   18e3c:	4603      	mov	r3, r0
   18e3e:	b128      	cbz	r0, 18e4c <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   18e40:	2000      	movs	r0, #0
   18e42:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   18e44:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   18e46:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   18e48:	6018      	str	r0, [r3, #0]
   18e4a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18e4c:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   18e4e:	4770      	bx	lr

00018e50 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   18e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   18e52:	4b2c      	ldr	r3, [pc, #176]	; (18f04 <os_mutex_release+0xb4>)
   18e54:	681b      	ldr	r3, [r3, #0]
   18e56:	2b00      	cmp	r3, #0
   18e58:	d04d      	beq.n	18ef6 <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   18e5a:	2800      	cmp	r0, #0
   18e5c:	d04d      	beq.n	18efa <os_mutex_release+0xaa>
   18e5e:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   18e60:	f000 f97a 	bl	19158 <os_sched_get_current_task>
   18e64:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   18e66:	88e3      	ldrh	r3, [r4, #6]
   18e68:	2b00      	cmp	r3, #0
   18e6a:	d048      	beq.n	18efe <os_mutex_release+0xae>
   18e6c:	68a2      	ldr	r2, [r4, #8]
   18e6e:	4282      	cmp	r2, r0
   18e70:	d001      	beq.n	18e76 <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   18e72:	2005      	movs	r0, #5
   18e74:	e040      	b.n	18ef8 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   18e76:	2b01      	cmp	r3, #1
   18e78:	d003      	beq.n	18e82 <os_mutex_release+0x32>
        --mu->mu_level;
   18e7a:	3b01      	subs	r3, #1
   18e7c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   18e7e:	2000      	movs	r0, #0
        goto done;
   18e80:	e03a      	b.n	18ef8 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   18e82:	f000 fc3f 	bl	19704 <os_arch_save_sr>
   18e86:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   18e88:	88e3      	ldrh	r3, [r4, #6]
   18e8a:	3b01      	subs	r3, #1
   18e8c:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   18e8e:	7aea      	ldrb	r2, [r5, #11]
   18e90:	7963      	ldrb	r3, [r4, #5]
   18e92:	429a      	cmp	r2, r3
   18e94:	d11e      	bne.n	18ed4 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   18e96:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   18e98:	b146      	cbz	r6, 18eac <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   18e9a:	69f3      	ldr	r3, [r6, #28]
   18e9c:	b1fb      	cbz	r3, 18ede <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   18e9e:	4630      	mov	r0, r6
   18ea0:	f000 f9ae 	bl	19200 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   18ea4:	2301      	movs	r3, #1
   18ea6:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   18ea8:	7af3      	ldrb	r3, [r6, #11]
   18eaa:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   18eac:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   18eae:	b116      	cbz	r6, 18eb6 <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   18eb0:	7bb3      	ldrb	r3, [r6, #14]
   18eb2:	3301      	adds	r3, #1
   18eb4:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   18eb6:	7bab      	ldrb	r3, [r5, #14]
   18eb8:	3b01      	subs	r3, #1
   18eba:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   18ebc:	f000 fa1a 	bl	192f4 <os_sched_next_task>
   18ec0:	4604      	mov	r4, r0
    if (rdy != current) {
   18ec2:	4285      	cmp	r5, r0
   18ec4:	d010      	beq.n	18ee8 <os_mutex_release+0x98>
        resched = 1;
   18ec6:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   18ec8:	4638      	mov	r0, r7
   18eca:	f000 fc21 	bl	19710 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   18ece:	b96d      	cbnz	r5, 18eec <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   18ed0:	2000      	movs	r0, #0
   18ed2:	e011      	b.n	18ef8 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   18ed4:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   18ed6:	4628      	mov	r0, r5
   18ed8:	f000 fa24 	bl	19324 <os_sched_resort>
   18edc:	e7db      	b.n	18e96 <os_mutex_release+0x46>
        assert(rdy->t_obj);
   18ede:	461a      	mov	r2, r3
   18ee0:	4619      	mov	r1, r3
   18ee2:	4618      	mov	r0, r3
   18ee4:	f7ff f978 	bl	181d8 <__assert_func>
    resched = 0;
   18ee8:	2500      	movs	r5, #0
   18eea:	e7ed      	b.n	18ec8 <os_mutex_release+0x78>
        os_sched(rdy);
   18eec:	4620      	mov	r0, r4
   18eee:	f000 fa07 	bl	19300 <os_sched>
    ret = OS_OK;
   18ef2:	2000      	movs	r0, #0
   18ef4:	e000      	b.n	18ef8 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   18ef6:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   18ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   18efa:	2003      	movs	r0, #3
   18efc:	e7fc      	b.n	18ef8 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   18efe:	2005      	movs	r0, #5
   18f00:	e7fa      	b.n	18ef8 <os_mutex_release+0xa8>
   18f02:	bf00      	nop
   18f04:	2000de88 	.word	0x2000de88

00018f08 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   18f08:	4b36      	ldr	r3, [pc, #216]	; (18fe4 <os_mutex_pend+0xdc>)
   18f0a:	681b      	ldr	r3, [r3, #0]
   18f0c:	2b00      	cmp	r3, #0
   18f0e:	d065      	beq.n	18fdc <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   18f10:	2800      	cmp	r0, #0
   18f12:	d065      	beq.n	18fe0 <os_mutex_pend+0xd8>
{
   18f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f18:	460f      	mov	r7, r1
   18f1a:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   18f1c:	f000 fbf2 	bl	19704 <os_arch_save_sr>
   18f20:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   18f22:	f000 f919 	bl	19158 <os_sched_get_current_task>
   18f26:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   18f28:	88e3      	ldrh	r3, [r4, #6]
   18f2a:	b19b      	cbz	r3, 18f54 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   18f2c:	68a2      	ldr	r2, [r4, #8]
   18f2e:	4282      	cmp	r2, r0
   18f30:	d01e      	beq.n	18f70 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   18f32:	b327      	cbz	r7, 18f7e <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   18f34:	7ad1      	ldrb	r1, [r2, #11]
   18f36:	7ac3      	ldrb	r3, [r0, #11]
   18f38:	4299      	cmp	r1, r3
   18f3a:	d825      	bhi.n	18f88 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   18f3c:	6821      	ldr	r1, [r4, #0]
   18f3e:	b369      	cbz	r1, 18f9c <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   18f40:	460b      	mov	r3, r1
    last = NULL;
   18f42:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   18f44:	b32b      	cbz	r3, 18f92 <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   18f46:	7ae8      	ldrb	r0, [r5, #11]
   18f48:	7ada      	ldrb	r2, [r3, #11]
   18f4a:	4290      	cmp	r0, r2
   18f4c:	d321      	bcc.n	18f92 <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   18f4e:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   18f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   18f52:	e7f7      	b.n	18f44 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   18f54:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   18f56:	7ac3      	ldrb	r3, [r0, #11]
   18f58:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   18f5a:	7b83      	ldrb	r3, [r0, #14]
   18f5c:	3301      	adds	r3, #1
   18f5e:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   18f60:	2301      	movs	r3, #1
   18f62:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   18f64:	4640      	mov	r0, r8
   18f66:	f000 fbd3 	bl	19710 <os_arch_restore_sr>
        ret = OS_OK;
   18f6a:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   18f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   18f70:	3301      	adds	r3, #1
   18f72:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   18f74:	4640      	mov	r0, r8
   18f76:	f000 fbcb 	bl	19710 <os_arch_restore_sr>
        ret = OS_OK;
   18f7a:	2000      	movs	r0, #0
        goto done;
   18f7c:	e7f6      	b.n	18f6c <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   18f7e:	4640      	mov	r0, r8
   18f80:	f000 fbc6 	bl	19710 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   18f84:	2006      	movs	r0, #6
        goto done;
   18f86:	e7f1      	b.n	18f6c <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   18f88:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   18f8a:	68a0      	ldr	r0, [r4, #8]
   18f8c:	f000 f9ca 	bl	19324 <os_sched_resort>
   18f90:	e7d4      	b.n	18f3c <os_mutex_pend+0x34>
    if (last) {
   18f92:	b11e      	cbz	r6, 18f9c <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   18f94:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   18f96:	64eb      	str	r3, [r5, #76]	; 0x4c
   18f98:	64f5      	str	r5, [r6, #76]	; 0x4c
   18f9a:	e001      	b.n	18fa0 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   18f9c:	64e9      	str	r1, [r5, #76]	; 0x4c
   18f9e:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   18fa0:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   18fa2:	7b6b      	ldrb	r3, [r5, #13]
   18fa4:	f043 0304 	orr.w	r3, r3, #4
   18fa8:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   18faa:	4639      	mov	r1, r7
   18fac:	4628      	mov	r0, r5
   18fae:	f000 f8df 	bl	19170 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   18fb2:	4640      	mov	r0, r8
   18fb4:	f000 fbac 	bl	19710 <os_arch_restore_sr>
    os_sched(NULL);
   18fb8:	2000      	movs	r0, #0
   18fba:	f000 f9a1 	bl	19300 <os_sched>
    OS_ENTER_CRITICAL(sr);
   18fbe:	f000 fba1 	bl	19704 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   18fc2:	7b6b      	ldrb	r3, [r5, #13]
   18fc4:	f023 0304 	bic.w	r3, r3, #4
   18fc8:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   18fca:	f000 fba1 	bl	19710 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   18fce:	68a3      	ldr	r3, [r4, #8]
   18fd0:	42ab      	cmp	r3, r5
   18fd2:	d001      	beq.n	18fd8 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   18fd4:	2006      	movs	r0, #6
   18fd6:	e7c9      	b.n	18f6c <os_mutex_pend+0x64>
        ret = OS_OK;
   18fd8:	2000      	movs	r0, #0
   18fda:	e7c7      	b.n	18f6c <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   18fdc:	2009      	movs	r0, #9
   18fde:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18fe0:	2003      	movs	r0, #3
}
   18fe2:	4770      	bx	lr
   18fe4:	2000de88 	.word	0x2000de88

00018fe8 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   18fe8:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   18fea:	4b05      	ldr	r3, [pc, #20]	; (19000 <os_sanity_check_list_lock+0x18>)
   18fec:	6818      	ldr	r0, [r3, #0]
   18fee:	b900      	cbnz	r0, 18ff2 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   18ff0:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   18ff2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18ff6:	4803      	ldr	r0, [pc, #12]	; (19004 <os_sanity_check_list_lock+0x1c>)
   18ff8:	f7ff ff86 	bl	18f08 <os_mutex_pend>
err:
   18ffc:	e7f8      	b.n	18ff0 <os_sanity_check_list_lock+0x8>
   18ffe:	bf00      	nop
   19000:	2000de88 	.word	0x2000de88
   19004:	2000dea0 	.word	0x2000dea0

00019008 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   19008:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1900a:	4b04      	ldr	r3, [pc, #16]	; (1901c <os_sanity_check_list_unlock+0x14>)
   1900c:	6818      	ldr	r0, [r3, #0]
   1900e:	b900      	cbnz	r0, 19012 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   19010:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   19012:	4803      	ldr	r0, [pc, #12]	; (19020 <os_sanity_check_list_unlock+0x18>)
   19014:	f7ff ff1c 	bl	18e50 <os_mutex_release>
err:
   19018:	e7fa      	b.n	19010 <os_sanity_check_list_unlock+0x8>
   1901a:	bf00      	nop
   1901c:	2000de88 	.word	0x2000de88
   19020:	2000dea0 	.word	0x2000dea0

00019024 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   19024:	2300      	movs	r3, #0
   19026:	6003      	str	r3, [r0, #0]
   19028:	6043      	str	r3, [r0, #4]
   1902a:	6083      	str	r3, [r0, #8]
   1902c:	60c3      	str	r3, [r0, #12]
   1902e:	6103      	str	r3, [r0, #16]
}
   19030:	4618      	mov	r0, r3
   19032:	4770      	bx	lr

00019034 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   19034:	b510      	push	{r4, lr}
   19036:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   19038:	f7ff ffd6 	bl	18fe8 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1903c:	4603      	mov	r3, r0
   1903e:	b108      	cbz	r0, 19044 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   19040:	4618      	mov	r0, r3
   19042:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   19044:	4b03      	ldr	r3, [pc, #12]	; (19054 <os_sanity_check_register+0x20>)
   19046:	681a      	ldr	r2, [r3, #0]
   19048:	6122      	str	r2, [r4, #16]
   1904a:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1904c:	f7ff ffdc 	bl	19008 <os_sanity_check_list_unlock>
   19050:	4603      	mov	r3, r0
err:
   19052:	e7f5      	b.n	19040 <os_sanity_check_register+0xc>
   19054:	2000d9b0 	.word	0x2000d9b0

00019058 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   19058:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1905a:	f7ff ffc5 	bl	18fe8 <os_sanity_check_list_lock>
    if (rc != 0) {
   1905e:	b910      	cbnz	r0, 19066 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   19060:	4b17      	ldr	r3, [pc, #92]	; (190c0 <os_sanity_run+0x68>)
   19062:	681c      	ldr	r4, [r3, #0]
   19064:	e00e      	b.n	19084 <os_sanity_run+0x2c>
        assert(0);
   19066:	2300      	movs	r3, #0
   19068:	461a      	mov	r2, r3
   1906a:	4619      	mov	r1, r3
   1906c:	4618      	mov	r0, r3
   1906e:	f7ff f8b3 	bl	181d8 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   19072:	f000 facf 	bl	19614 <os_time_get>
   19076:	6823      	ldr	r3, [r4, #0]
   19078:	6862      	ldr	r2, [r4, #4]
   1907a:	4413      	add	r3, r2
   1907c:	1ac3      	subs	r3, r0, r3
   1907e:	2b00      	cmp	r3, #0
   19080:	dc0d      	bgt.n	1909e <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   19082:	6924      	ldr	r4, [r4, #16]
   19084:	b18c      	cbz	r4, 190aa <os_sanity_run+0x52>
        if (sc->sc_func) {
   19086:	68a3      	ldr	r3, [r4, #8]
   19088:	2b00      	cmp	r3, #0
   1908a:	d0f2      	beq.n	19072 <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   1908c:	68e1      	ldr	r1, [r4, #12]
   1908e:	4620      	mov	r0, r4
   19090:	4798      	blx	r3
            if (rc == OS_OK) {
   19092:	2800      	cmp	r0, #0
   19094:	d1ed      	bne.n	19072 <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   19096:	f000 fabd 	bl	19614 <os_time_get>
   1909a:	6020      	str	r0, [r4, #0]
                continue;
   1909c:	e7f1      	b.n	19082 <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1909e:	2300      	movs	r3, #0
   190a0:	461a      	mov	r2, r3
   190a2:	4619      	mov	r1, r3
   190a4:	4618      	mov	r0, r3
   190a6:	f7ff f897 	bl	181d8 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   190aa:	f7ff ffad 	bl	19008 <os_sanity_check_list_unlock>
    if (rc != 0) {
   190ae:	b900      	cbnz	r0, 190b2 <os_sanity_run+0x5a>
        assert(0);
    }
}
   190b0:	bd10      	pop	{r4, pc}
        assert(0);
   190b2:	2300      	movs	r3, #0
   190b4:	461a      	mov	r2, r3
   190b6:	4619      	mov	r1, r3
   190b8:	4618      	mov	r0, r3
   190ba:	f7ff f88d 	bl	181d8 <__assert_func>
   190be:	bf00      	nop
   190c0:	2000d9b0 	.word	0x2000d9b0

000190c4 <os_sanity_init>:

int
os_sanity_init(void)
{
   190c4:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   190c6:	4802      	ldr	r0, [pc, #8]	; (190d0 <os_sanity_init+0xc>)
   190c8:	f7ff feb8 	bl	18e3c <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   190cc:	bd08      	pop	{r3, pc}
   190ce:	bf00      	nop
   190d0:	2000dea0 	.word	0x2000dea0

000190d4 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   190d4:	7b03      	ldrb	r3, [r0, #12]
   190d6:	2b01      	cmp	r3, #1
   190d8:	d001      	beq.n	190de <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   190da:	2002      	movs	r0, #2
}
   190dc:	4770      	bx	lr
{
   190de:	b510      	push	{r4, lr}
   190e0:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   190e2:	f000 fb0f 	bl	19704 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   190e6:	4b0f      	ldr	r3, [pc, #60]	; (19124 <os_sched_insert+0x50>)
   190e8:	681b      	ldr	r3, [r3, #0]
   190ea:	b12b      	cbz	r3, 190f8 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   190ec:	7ae1      	ldrb	r1, [r4, #11]
   190ee:	7ada      	ldrb	r2, [r3, #11]
   190f0:	4291      	cmp	r1, r2
   190f2:	d301      	bcc.n	190f8 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   190f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   190f6:	e7f8      	b.n	190ea <os_sched_insert+0x16>
    if (entry) {
   190f8:	b153      	cbz	r3, 19110 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   190fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   190fc:	64a2      	str	r2, [r4, #72]	; 0x48
   190fe:	6463      	str	r3, [r4, #68]	; 0x44
   19100:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   19102:	6014      	str	r4, [r2, #0]
   19104:	3444      	adds	r4, #68	; 0x44
   19106:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   19108:	f000 fb02 	bl	19710 <os_arch_restore_sr>
    return (0);
   1910c:	2000      	movs	r0, #0
}
   1910e:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   19110:	2300      	movs	r3, #0
   19112:	6463      	str	r3, [r4, #68]	; 0x44
   19114:	4b03      	ldr	r3, [pc, #12]	; (19124 <os_sched_insert+0x50>)
   19116:	685a      	ldr	r2, [r3, #4]
   19118:	64a2      	str	r2, [r4, #72]	; 0x48
   1911a:	6014      	str	r4, [r2, #0]
   1911c:	3444      	adds	r4, #68	; 0x44
   1911e:	605c      	str	r4, [r3, #4]
   19120:	e7f2      	b.n	19108 <os_sched_insert+0x34>
   19122:	bf00      	nop
   19124:	20000114 	.word	0x20000114

00019128 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   19128:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1912a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1912c:	3301      	adds	r3, #1
   1912e:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   19130:	4b06      	ldr	r3, [pc, #24]	; (1914c <os_sched_ctx_sw_hook+0x24>)
   19132:	681c      	ldr	r4, [r3, #0]
   19134:	4b06      	ldr	r3, [pc, #24]	; (19150 <os_sched_ctx_sw_hook+0x28>)
   19136:	6818      	ldr	r0, [r3, #0]
   19138:	4906      	ldr	r1, [pc, #24]	; (19154 <os_sched_ctx_sw_hook+0x2c>)
   1913a:	680b      	ldr	r3, [r1, #0]
   1913c:	1ac2      	subs	r2, r0, r3
   1913e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   19140:	4413      	add	r3, r2
   19142:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   19144:	6008      	str	r0, [r1, #0]
}
   19146:	f85d 4b04 	ldr.w	r4, [sp], #4
   1914a:	4770      	bx	lr
   1914c:	2000deb0 	.word	0x2000deb0
   19150:	2000dec0 	.word	0x2000dec0
   19154:	2000deac 	.word	0x2000deac

00019158 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   19158:	4b01      	ldr	r3, [pc, #4]	; (19160 <os_sched_get_current_task+0x8>)
   1915a:	6818      	ldr	r0, [r3, #0]
   1915c:	4770      	bx	lr
   1915e:	bf00      	nop
   19160:	2000deb0 	.word	0x2000deb0

00019164 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   19164:	4b01      	ldr	r3, [pc, #4]	; (1916c <os_sched_set_current_task+0x8>)
   19166:	6018      	str	r0, [r3, #0]
}
   19168:	4770      	bx	lr
   1916a:	bf00      	nop
   1916c:	2000deb0 	.word	0x2000deb0

00019170 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   19170:	b538      	push	{r3, r4, r5, lr}
   19172:	4604      	mov	r4, r0
   19174:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   19176:	6c43      	ldr	r3, [r0, #68]	; 0x44
   19178:	b1d3      	cbz	r3, 191b0 <os_sched_sleep+0x40>
   1917a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1917c:	649a      	str	r2, [r3, #72]	; 0x48
   1917e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   19180:	6c62      	ldr	r2, [r4, #68]	; 0x44
   19182:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   19184:	2302      	movs	r3, #2
   19186:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   19188:	f000 fa44 	bl	19614 <os_time_get>
   1918c:	4428      	add	r0, r5
   1918e:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   19190:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   19194:	d010      	beq.n	191b8 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   19196:	4b18      	ldr	r3, [pc, #96]	; (191f8 <os_sched_sleep+0x88>)
   19198:	681b      	ldr	r3, [r3, #0]
   1919a:	b1d3      	cbz	r3, 191d2 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1919c:	7b5a      	ldrb	r2, [r3, #13]
   1919e:	f012 0f01 	tst.w	r2, #1
   191a2:	d116      	bne.n	191d2 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   191a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   191a6:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   191a8:	2a00      	cmp	r2, #0
   191aa:	dc12      	bgt.n	191d2 <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   191ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   191ae:	e7f4      	b.n	1919a <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   191b0:	6c82      	ldr	r2, [r0, #72]	; 0x48
   191b2:	4b12      	ldr	r3, [pc, #72]	; (191fc <os_sched_sleep+0x8c>)
   191b4:	605a      	str	r2, [r3, #4]
   191b6:	e7e2      	b.n	1917e <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   191b8:	7b63      	ldrb	r3, [r4, #13]
   191ba:	f043 0301 	orr.w	r3, r3, #1
   191be:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   191c0:	2300      	movs	r3, #0
   191c2:	6463      	str	r3, [r4, #68]	; 0x44
   191c4:	4b0c      	ldr	r3, [pc, #48]	; (191f8 <os_sched_sleep+0x88>)
   191c6:	685a      	ldr	r2, [r3, #4]
   191c8:	64a2      	str	r2, [r4, #72]	; 0x48
   191ca:	6014      	str	r4, [r2, #0]
   191cc:	3444      	adds	r4, #68	; 0x44
   191ce:	605c      	str	r4, [r3, #4]
   191d0:	e007      	b.n	191e2 <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   191d2:	b143      	cbz	r3, 191e6 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   191d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   191d6:	64a2      	str	r2, [r4, #72]	; 0x48
   191d8:	6463      	str	r3, [r4, #68]	; 0x44
   191da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   191dc:	6014      	str	r4, [r2, #0]
   191de:	3444      	adds	r4, #68	; 0x44
   191e0:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   191e2:	2000      	movs	r0, #0
   191e4:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   191e6:	2300      	movs	r3, #0
   191e8:	6463      	str	r3, [r4, #68]	; 0x44
   191ea:	4b03      	ldr	r3, [pc, #12]	; (191f8 <os_sched_sleep+0x88>)
   191ec:	685a      	ldr	r2, [r3, #4]
   191ee:	64a2      	str	r2, [r4, #72]	; 0x48
   191f0:	6014      	str	r4, [r2, #0]
   191f2:	3444      	adds	r4, #68	; 0x44
   191f4:	605c      	str	r4, [r3, #4]
   191f6:	e7f4      	b.n	191e2 <os_sched_sleep+0x72>
   191f8:	2000011c 	.word	0x2000011c
   191fc:	20000114 	.word	0x20000114

00019200 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   19200:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   19202:	7b03      	ldrb	r3, [r0, #12]
   19204:	2b02      	cmp	r3, #2
   19206:	d108      	bne.n	1921a <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   19208:	69c3      	ldr	r3, [r0, #28]
   1920a:	b1db      	cbz	r3, 19244 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1920c:	681a      	ldr	r2, [r3, #0]
   1920e:	b152      	cbz	r2, 19226 <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   19210:	4282      	cmp	r2, r0
   19212:	d10f      	bne.n	19234 <os_sched_wakeup+0x34>
   19214:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   19216:	601a      	str	r2, [r3, #0]
   19218:	e011      	b.n	1923e <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   1921a:	2300      	movs	r3, #0
   1921c:	461a      	mov	r2, r3
   1921e:	4619      	mov	r1, r3
   19220:	4618      	mov	r0, r3
   19222:	f7fe ffd9 	bl	181d8 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   19226:	2300      	movs	r3, #0
   19228:	461a      	mov	r2, r3
   1922a:	4619      	mov	r1, r3
   1922c:	4618      	mov	r0, r3
   1922e:	f7fe ffd3 	bl	181d8 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   19232:	461a      	mov	r2, r3
   19234:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   19236:	4283      	cmp	r3, r0
   19238:	d1fb      	bne.n	19232 <os_sched_wakeup+0x32>
   1923a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1923c:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1923e:	2300      	movs	r3, #0
   19240:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   19242:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   19244:	2301      	movs	r3, #1
   19246:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   19248:	2300      	movs	r3, #0
   1924a:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1924c:	7b43      	ldrb	r3, [r0, #13]
   1924e:	f023 0301 	bic.w	r3, r3, #1
   19252:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   19254:	6c43      	ldr	r3, [r0, #68]	; 0x44
   19256:	b143      	cbz	r3, 1926a <os_sched_wakeup+0x6a>
   19258:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1925a:	649a      	str	r2, [r3, #72]	; 0x48
   1925c:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1925e:	6c42      	ldr	r2, [r0, #68]	; 0x44
   19260:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   19262:	f7ff ff37 	bl	190d4 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   19266:	2000      	movs	r0, #0
   19268:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1926a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1926c:	4b01      	ldr	r3, [pc, #4]	; (19274 <os_sched_wakeup+0x74>)
   1926e:	605a      	str	r2, [r3, #4]
   19270:	e7f4      	b.n	1925c <os_sched_wakeup+0x5c>
   19272:	bf00      	nop
   19274:	2000011c 	.word	0x2000011c

00019278 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   19278:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1927a:	f000 f9cb 	bl	19614 <os_time_get>
   1927e:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   19280:	f000 fa40 	bl	19704 <os_arch_save_sr>
   19284:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   19286:	4b0a      	ldr	r3, [pc, #40]	; (192b0 <os_sched_os_timer_exp+0x38>)
   19288:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1928a:	b160      	cbz	r0, 192a6 <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1928c:	7b43      	ldrb	r3, [r0, #13]
   1928e:	f013 0f01 	tst.w	r3, #1
   19292:	d108      	bne.n	192a6 <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   19294:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   19296:	6b43      	ldr	r3, [r0, #52]	; 0x34
   19298:	1aeb      	subs	r3, r5, r3
   1929a:	2b00      	cmp	r3, #0
   1929c:	db03      	blt.n	192a6 <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   1929e:	f7ff ffaf 	bl	19200 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   192a2:	4620      	mov	r0, r4
   192a4:	e7f1      	b.n	1928a <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   192a6:	4630      	mov	r0, r6
   192a8:	f000 fa32 	bl	19710 <os_arch_restore_sr>
}
   192ac:	bd70      	pop	{r4, r5, r6, pc}
   192ae:	bf00      	nop
   192b0:	2000011c 	.word	0x2000011c

000192b4 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   192b4:	b510      	push	{r4, lr}
   192b6:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   192b8:	f000 fa2d 	bl	19716 <os_arch_in_critical>
   192bc:	b150      	cbz	r0, 192d4 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   192be:	4b0c      	ldr	r3, [pc, #48]	; (192f0 <os_sched_wakeup_ticks+0x3c>)
   192c0:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   192c2:	b17b      	cbz	r3, 192e4 <os_sched_wakeup_ticks+0x30>
   192c4:	7b5a      	ldrb	r2, [r3, #13]
   192c6:	f012 0f01 	tst.w	r2, #1
   192ca:	d10e      	bne.n	192ea <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   192cc:	6b58      	ldr	r0, [r3, #52]	; 0x34
   192ce:	1b00      	subs	r0, r0, r4
   192d0:	d406      	bmi.n	192e0 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   192d2:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   192d4:	2300      	movs	r3, #0
   192d6:	461a      	mov	r2, r3
   192d8:	4619      	mov	r1, r3
   192da:	4618      	mov	r0, r3
   192dc:	f7fe ff7c 	bl	181d8 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   192e0:	2000      	movs	r0, #0
   192e2:	e7f6      	b.n	192d2 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   192e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   192e8:	e7f3      	b.n	192d2 <os_sched_wakeup_ticks+0x1e>
   192ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   192ee:	e7f0      	b.n	192d2 <os_sched_wakeup_ticks+0x1e>
   192f0:	2000011c 	.word	0x2000011c

000192f4 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   192f4:	4b01      	ldr	r3, [pc, #4]	; (192fc <os_sched_next_task+0x8>)
   192f6:	6818      	ldr	r0, [r3, #0]
   192f8:	4770      	bx	lr
   192fa:	bf00      	nop
   192fc:	20000114 	.word	0x20000114

00019300 <os_sched>:
{
   19300:	b538      	push	{r3, r4, r5, lr}
   19302:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   19304:	f000 f9fe 	bl	19704 <os_arch_save_sr>
   19308:	4605      	mov	r5, r0
    if (!next_t) {
   1930a:	b134      	cbz	r4, 1931a <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1930c:	4620      	mov	r0, r4
   1930e:	f000 f9ef 	bl	196f0 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   19312:	4628      	mov	r0, r5
   19314:	f000 f9fc 	bl	19710 <os_arch_restore_sr>
}
   19318:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1931a:	f7ff ffeb 	bl	192f4 <os_sched_next_task>
   1931e:	4604      	mov	r4, r0
   19320:	e7f4      	b.n	1930c <os_sched+0xc>
	...

00019324 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   19324:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   19326:	7b03      	ldrb	r3, [r0, #12]
   19328:	2b01      	cmp	r3, #1
   1932a:	d000      	beq.n	1932e <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1932c:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1932e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   19330:	b13b      	cbz	r3, 19342 <os_sched_resort+0x1e>
   19332:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19334:	649a      	str	r2, [r3, #72]	; 0x48
   19336:	6c83      	ldr	r3, [r0, #72]	; 0x48
   19338:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1933a:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1933c:	f7ff feca 	bl	190d4 <os_sched_insert>
}
   19340:	e7f4      	b.n	1932c <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   19342:	6c82      	ldr	r2, [r0, #72]	; 0x48
   19344:	4b01      	ldr	r3, [pc, #4]	; (1934c <os_sched_resort+0x28>)
   19346:	605a      	str	r2, [r3, #4]
   19348:	e7f5      	b.n	19336 <os_sched_resort+0x12>
   1934a:	bf00      	nop
   1934c:	20000114 	.word	0x20000114

00019350 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   19350:	4603      	mov	r3, r0
   19352:	b118      	cbz	r0, 1935c <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   19354:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   19356:	2000      	movs	r0, #0
   19358:	6018      	str	r0, [r3, #0]
   1935a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1935c:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1935e:	4770      	bx	lr

00019360 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   19360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   19362:	4b17      	ldr	r3, [pc, #92]	; (193c0 <os_sem_release+0x60>)
   19364:	681b      	ldr	r3, [r3, #0]
   19366:	b33b      	cbz	r3, 193b8 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   19368:	b340      	cbz	r0, 193bc <os_sem_release+0x5c>
   1936a:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1936c:	f7ff fef4 	bl	19158 <os_sched_get_current_task>
   19370:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   19372:	f000 f9c7 	bl	19704 <os_arch_save_sr>
   19376:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   19378:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1937a:	b165      	cbz	r5, 19396 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1937c:	7b6b      	ldrb	r3, [r5, #13]
   1937e:	f023 0302 	bic.w	r3, r3, #2
   19382:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   19384:	4628      	mov	r0, r5
   19386:	f7ff ff3b 	bl	19200 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1938a:	7afa      	ldrb	r2, [r7, #11]
   1938c:	7aeb      	ldrb	r3, [r5, #11]
   1938e:	429a      	cmp	r2, r3
   19390:	d80b      	bhi.n	193aa <os_sem_release+0x4a>
    resched = 0;
   19392:	2400      	movs	r4, #0
   19394:	e003      	b.n	1939e <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   19396:	88e3      	ldrh	r3, [r4, #6]
   19398:	3301      	adds	r3, #1
   1939a:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1939c:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1939e:	4630      	mov	r0, r6
   193a0:	f000 f9b6 	bl	19710 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   193a4:	b91c      	cbnz	r4, 193ae <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   193a6:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   193a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   193aa:	2401      	movs	r4, #1
   193ac:	e7f7      	b.n	1939e <os_sem_release+0x3e>
        os_sched(rdy);
   193ae:	4628      	mov	r0, r5
   193b0:	f7ff ffa6 	bl	19300 <os_sched>
    ret = OS_OK;
   193b4:	2000      	movs	r0, #0
   193b6:	e7f7      	b.n	193a8 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   193b8:	2009      	movs	r0, #9
   193ba:	e7f5      	b.n	193a8 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   193bc:	2003      	movs	r0, #3
   193be:	e7f3      	b.n	193a8 <os_sem_release+0x48>
   193c0:	2000de88 	.word	0x2000de88

000193c4 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   193c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   193c6:	4b2c      	ldr	r3, [pc, #176]	; (19478 <os_sem_pend+0xb4>)
   193c8:	681b      	ldr	r3, [r3, #0]
   193ca:	2b00      	cmp	r3, #0
   193cc:	d04f      	beq.n	1946e <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   193ce:	2800      	cmp	r0, #0
   193d0:	d04f      	beq.n	19472 <os_sem_pend+0xae>
   193d2:	460d      	mov	r5, r1
   193d4:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   193d6:	f7ff febf 	bl	19158 <os_sched_get_current_task>
   193da:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   193dc:	f000 f992 	bl	19704 <os_arch_save_sr>
   193e0:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   193e2:	88e3      	ldrh	r3, [r4, #6]
   193e4:	b14b      	cbz	r3, 193fa <os_sem_pend+0x36>
        sem->sem_tokens--;
   193e6:	3b01      	subs	r3, #1
   193e8:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   193ea:	2400      	movs	r4, #0
    sched = 0;
   193ec:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   193ee:	4638      	mov	r0, r7
   193f0:	f000 f98e 	bl	19710 <os_arch_restore_sr>

    if (sched) {
   193f4:	bb45      	cbnz	r5, 19448 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   193f6:	4620      	mov	r0, r4
   193f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   193fa:	b315      	cbz	r5, 19442 <os_sem_pend+0x7e>
        current->t_obj = sem;
   193fc:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   193fe:	7b73      	ldrb	r3, [r6, #13]
   19400:	f043 0302 	orr.w	r3, r3, #2
   19404:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   19406:	f8d4 c000 	ldr.w	ip, [r4]
   1940a:	f1bc 0f00 	cmp.w	ip, #0
   1940e:	d00e      	beq.n	1942e <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19410:	4663      	mov	r3, ip
        last = NULL;
   19412:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19414:	b133      	cbz	r3, 19424 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   19416:	7af1      	ldrb	r1, [r6, #11]
   19418:	7ada      	ldrb	r2, [r3, #11]
   1941a:	4291      	cmp	r1, r2
   1941c:	d302      	bcc.n	19424 <os_sem_pend+0x60>
                last = entry;
   1941e:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   19422:	e7f7      	b.n	19414 <os_sem_pend+0x50>
        if (last) {
   19424:	b118      	cbz	r0, 1942e <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   19426:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   19428:	64f3      	str	r3, [r6, #76]	; 0x4c
   1942a:	64c6      	str	r6, [r0, #76]	; 0x4c
   1942c:	e002      	b.n	19434 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1942e:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   19432:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   19434:	4629      	mov	r1, r5
   19436:	4630      	mov	r0, r6
   19438:	f7ff fe9a 	bl	19170 <os_sched_sleep>
        ret = OS_OK;
   1943c:	2400      	movs	r4, #0
        sched = 1;
   1943e:	2501      	movs	r5, #1
   19440:	e7d5      	b.n	193ee <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   19442:	2406      	movs	r4, #6
    sched = 0;
   19444:	2500      	movs	r5, #0
   19446:	e7d2      	b.n	193ee <os_sem_pend+0x2a>
        os_sched(NULL);
   19448:	2000      	movs	r0, #0
   1944a:	f7ff ff59 	bl	19300 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1944e:	7b73      	ldrb	r3, [r6, #13]
   19450:	f013 0f02 	tst.w	r3, #2
   19454:	d101      	bne.n	1945a <os_sem_pend+0x96>
            ret = OS_OK;
   19456:	2400      	movs	r4, #0
   19458:	e7cd      	b.n	193f6 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1945a:	f000 f953 	bl	19704 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1945e:	7b73      	ldrb	r3, [r6, #13]
   19460:	f023 0302 	bic.w	r3, r3, #2
   19464:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   19466:	f000 f953 	bl	19710 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1946a:	2406      	movs	r4, #6
   1946c:	e7c3      	b.n	193f6 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1946e:	2409      	movs	r4, #9
   19470:	e7c1      	b.n	193f6 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   19472:	2403      	movs	r4, #3
   19474:	e7bf      	b.n	193f6 <os_sem_pend+0x32>
   19476:	bf00      	nop
   19478:	2000de88 	.word	0x2000de88

0001947c <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1947c:	2300      	movs	r3, #0
   1947e:	e003      	b.n	19488 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   19480:	4a03      	ldr	r2, [pc, #12]	; (19490 <_clear_stack+0x14>)
   19482:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   19486:	3301      	adds	r3, #1
   19488:	428b      	cmp	r3, r1
   1948a:	dbf9      	blt.n	19480 <_clear_stack+0x4>
    }
}
   1948c:	4770      	bx	lr
   1948e:	bf00      	nop
   19490:	deadbeef 	.word	0xdeadbeef

00019494 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   19494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19498:	4604      	mov	r4, r0
   1949a:	460f      	mov	r7, r1
   1949c:	4690      	mov	r8, r2
   1949e:	461d      	mov	r5, r3
   194a0:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   194a4:	2250      	movs	r2, #80	; 0x50
   194a6:	2100      	movs	r1, #0
   194a8:	f000 fa99 	bl	199de <memset>

    t->t_func = func;
   194ac:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   194b0:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   194b2:	f000 f927 	bl	19704 <os_arch_save_sr>
    rc = g_task_id;
   194b6:	4b2b      	ldr	r3, [pc, #172]	; (19564 <os_task_init+0xd0>)
   194b8:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   194ba:	1c6a      	adds	r2, r5, #1
   194bc:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   194be:	f000 f927 	bl	19710 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   194c2:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   194c4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   194c8:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   194ca:	2301      	movs	r3, #1
   194cc:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   194ce:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   194d0:	2300      	movs	r3, #0
   194d2:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   194d4:	f104 0720 	add.w	r7, r4, #32
   194d8:	4638      	mov	r0, r7
   194da:	f7ff fda3 	bl	19024 <os_sanity_check_init>
    if (rc != OS_OK) {
   194de:	4605      	mov	r5, r0
   194e0:	2800      	cmp	r0, #0
   194e2:	d132      	bne.n	1954a <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   194e4:	9b07      	ldr	r3, [sp, #28]
   194e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   194ea:	d005      	beq.n	194f8 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   194ec:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   194ee:	4638      	mov	r0, r7
   194f0:	f7ff fda0 	bl	19034 <os_sanity_check_register>
        if (rc != OS_OK) {
   194f4:	4605      	mov	r5, r0
   194f6:	bb40      	cbnz	r0, 1954a <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   194f8:	4631      	mov	r1, r6
   194fa:	9808      	ldr	r0, [sp, #32]
   194fc:	f7ff ffbe 	bl	1947c <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   19500:	9b08      	ldr	r3, [sp, #32]
   19502:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   19506:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   19508:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   1950a:	4632      	mov	r2, r6
   1950c:	4620      	mov	r0, r4
   1950e:	f000 f907 	bl	19720 <os_arch_task_stack_init>
   19512:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   19514:	4b14      	ldr	r3, [pc, #80]	; (19568 <os_task_init+0xd4>)
   19516:	681b      	ldr	r3, [r3, #0]
   19518:	b15b      	cbz	r3, 19532 <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   1951a:	7ae1      	ldrb	r1, [r4, #11]
   1951c:	7ada      	ldrb	r2, [r3, #11]
   1951e:	4291      	cmp	r1, r2
   19520:	d001      	beq.n	19526 <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   19522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19524:	e7f8      	b.n	19518 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   19526:	2300      	movs	r3, #0
   19528:	461a      	mov	r2, r3
   1952a:	4619      	mov	r1, r3
   1952c:	4618      	mov	r0, r3
   1952e:	f7fe fe53 	bl	181d8 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   19532:	6423      	str	r3, [r4, #64]	; 0x40
   19534:	4b0c      	ldr	r3, [pc, #48]	; (19568 <os_task_init+0xd4>)
   19536:	685a      	ldr	r2, [r3, #4]
   19538:	6014      	str	r4, [r2, #0]
   1953a:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1953e:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   19540:	4620      	mov	r0, r4
   19542:	f7ff fdc7 	bl	190d4 <os_sched_insert>
   19546:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   19548:	b110      	cbz	r0, 19550 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   1954a:	4628      	mov	r0, r5
   1954c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   19550:	f7fe fefc 	bl	1834c <os_started>
   19554:	b908      	cbnz	r0, 1955a <os_task_init+0xc6>
    return (0);
   19556:	4605      	mov	r5, r0
   19558:	e7f7      	b.n	1954a <os_task_init+0xb6>
        os_sched(NULL);
   1955a:	2000      	movs	r0, #0
   1955c:	f7ff fed0 	bl	19300 <os_sched>
   19560:	e7f3      	b.n	1954a <os_task_init+0xb6>
   19562:	bf00      	nop
   19564:	2000deb4 	.word	0x2000deb4
   19568:	2000deb8 	.word	0x2000deb8

0001956c <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1956c:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   19570:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   19572:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   19576:	e9d1 4500 	ldrd	r4, r5, [r1]
   1957a:	eb14 0b03 	adds.w	fp, r4, r3
   1957e:	f145 0c00 	adc.w	ip, r5, #0
   19582:	e9c2 bc00 	strd	fp, ip, [r2]
   19586:	688b      	ldr	r3, [r1, #8]
   19588:	f641 6184 	movw	r1, #7812	; 0x1e84
   1958c:	fb01 3000 	mla	r0, r1, r0, r3
   19590:	6090      	str	r0, [r2, #8]
   19592:	4b08      	ldr	r3, [pc, #32]	; (195b4 <os_deltatime+0x48>)
   19594:	4298      	cmp	r0, r3
   19596:	dd0a      	ble.n	195ae <os_deltatime+0x42>
   19598:	f11b 0401 	adds.w	r4, fp, #1
   1959c:	f14c 0500 	adc.w	r5, ip, #0
   195a0:	e9c2 4500 	strd	r4, r5, [r2]
   195a4:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   195a8:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   195ac:	6090      	str	r0, [r2, #8]
}
   195ae:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   195b2:	4770      	bx	lr
   195b4:	000f423f 	.word	0x000f423f

000195b8 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   195b8:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   195ba:	1e04      	subs	r4, r0, #0
   195bc:	db0d      	blt.n	195da <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   195be:	f000 f8a1 	bl	19704 <os_arch_save_sr>
   195c2:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   195c4:	4a11      	ldr	r2, [pc, #68]	; (1960c <os_time_tick+0x54>)
   195c6:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   195c8:	18e0      	adds	r0, r4, r3
   195ca:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   195cc:	ea90 0f03 	teq	r0, r3
   195d0:	d409      	bmi.n	195e6 <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   195d2:	4628      	mov	r0, r5
   195d4:	f000 f89c 	bl	19710 <os_arch_restore_sr>
}
   195d8:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   195da:	2300      	movs	r3, #0
   195dc:	461a      	mov	r2, r3
   195de:	4619      	mov	r1, r3
   195e0:	4618      	mov	r0, r3
   195e2:	f7fe fdf9 	bl	181d8 <__assert_func>
        delta = g_os_time - basetod.ostime;
   195e6:	4e0a      	ldr	r6, [pc, #40]	; (19610 <os_time_tick+0x58>)
   195e8:	4631      	mov	r1, r6
   195ea:	f851 4b08 	ldr.w	r4, [r1], #8
   195ee:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   195f0:	460a      	mov	r2, r1
   195f2:	4620      	mov	r0, r4
   195f4:	f7ff ffba 	bl	1956c <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   195f8:	f106 0118 	add.w	r1, r6, #24
   195fc:	460a      	mov	r2, r1
   195fe:	4620      	mov	r0, r4
   19600:	f7ff ffb4 	bl	1956c <os_deltatime>
        basetod.ostime = g_os_time;
   19604:	4b01      	ldr	r3, [pc, #4]	; (1960c <os_time_tick+0x54>)
   19606:	681b      	ldr	r3, [r3, #0]
   19608:	6033      	str	r3, [r6, #0]
   1960a:	e7e2      	b.n	195d2 <os_time_tick+0x1a>
   1960c:	2000dec0 	.word	0x2000dec0
   19610:	2000d9b8 	.word	0x2000d9b8

00019614 <os_time_get>:
}
   19614:	4b01      	ldr	r3, [pc, #4]	; (1961c <os_time_get+0x8>)
   19616:	6818      	ldr	r0, [r3, #0]
   19618:	4770      	bx	lr
   1961a:	bf00      	nop
   1961c:	2000dec0 	.word	0x2000dec0

00019620 <os_time_advance>:

void
os_time_advance(int ticks)
{
   19620:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   19622:	1e04      	subs	r4, r0, #0
   19624:	db09      	blt.n	1963a <os_time_advance+0x1a>

    if (ticks > 0) {
   19626:	2c00      	cmp	r4, #0
   19628:	dd06      	ble.n	19638 <os_time_advance+0x18>
        if (!os_started()) {
   1962a:	f7fe fe8f 	bl	1834c <os_started>
   1962e:	b950      	cbnz	r0, 19646 <os_time_advance+0x26>
            g_os_time += ticks;
   19630:	4a0a      	ldr	r2, [pc, #40]	; (1965c <os_time_advance+0x3c>)
   19632:	6813      	ldr	r3, [r2, #0]
   19634:	441c      	add	r4, r3
   19636:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   19638:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1963a:	2300      	movs	r3, #0
   1963c:	461a      	mov	r2, r3
   1963e:	4619      	mov	r1, r3
   19640:	4618      	mov	r0, r3
   19642:	f7fe fdc9 	bl	181d8 <__assert_func>
            os_time_tick(ticks);
   19646:	4620      	mov	r0, r4
   19648:	f7ff ffb6 	bl	195b8 <os_time_tick>
            os_callout_tick();
   1964c:	f7fe ffa6 	bl	1859c <os_callout_tick>
            os_sched_os_timer_exp();
   19650:	f7ff fe12 	bl	19278 <os_sched_os_timer_exp>
            os_sched(NULL);
   19654:	2000      	movs	r0, #0
   19656:	f7ff fe53 	bl	19300 <os_sched>
}
   1965a:	e7ed      	b.n	19638 <os_time_advance+0x18>
   1965c:	2000dec0 	.word	0x2000dec0

00019660 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   19660:	b900      	cbnz	r0, 19664 <os_time_delay+0x4>
   19662:	4770      	bx	lr
{
   19664:	b538      	push	{r3, r4, r5, lr}
   19666:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   19668:	f000 f84c 	bl	19704 <os_arch_save_sr>
   1966c:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1966e:	f7ff fd73 	bl	19158 <os_sched_get_current_task>
   19672:	4621      	mov	r1, r4
   19674:	f7ff fd7c 	bl	19170 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   19678:	4628      	mov	r0, r5
   1967a:	f000 f849 	bl	19710 <os_arch_restore_sr>
        os_sched(NULL);
   1967e:	2000      	movs	r0, #0
   19680:	f7ff fe3e 	bl	19300 <os_sched>
    }
}
   19684:	bd38      	pop	{r3, r4, r5, pc}
	...

00019688 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   19688:	b570      	push	{r4, r5, r6, lr}
   1968a:	4605      	mov	r5, r0
   1968c:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1968e:	f000 f839 	bl	19704 <os_arch_save_sr>
   19692:	4606      	mov	r6, r0
    if (tv != NULL) {
   19694:	b145      	cbz	r5, 196a8 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   19696:	f7ff ffbd 	bl	19614 <os_time_get>
   1969a:	4908      	ldr	r1, [pc, #32]	; (196bc <os_gettimeofday+0x34>)
   1969c:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   196a0:	462a      	mov	r2, r5
   196a2:	1ac0      	subs	r0, r0, r3
   196a4:	f7ff ff62 	bl	1956c <os_deltatime>
    }

    if (tz != NULL) {
   196a8:	b114      	cbz	r4, 196b0 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   196aa:	4b04      	ldr	r3, [pc, #16]	; (196bc <os_gettimeofday+0x34>)
   196ac:	6a98      	ldr	r0, [r3, #40]	; 0x28
   196ae:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   196b0:	4630      	mov	r0, r6
   196b2:	f000 f82d 	bl	19710 <os_arch_restore_sr>

    return (0);
}
   196b6:	2000      	movs	r0, #0
   196b8:	bd70      	pop	{r4, r5, r6, pc}
   196ba:	bf00      	nop
   196bc:	2000d9b8 	.word	0x2000d9b8

000196c0 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   196c0:	b538      	push	{r3, r4, r5, lr}
   196c2:	4604      	mov	r4, r0
   196c4:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   196c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   196ca:	2300      	movs	r3, #0
   196cc:	01c0      	lsls	r0, r0, #7
   196ce:	0e61      	lsrs	r1, r4, #25
   196d0:	f002 f88a 	bl	1b7e8 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   196d4:	2901      	cmp	r1, #1
   196d6:	bf08      	it	eq
   196d8:	2800      	cmpeq	r0, #0
   196da:	d202      	bcs.n	196e2 <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   196dc:	6028      	str	r0, [r5, #0]
    return 0;
   196de:	2000      	movs	r0, #0
}
   196e0:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   196e2:	2002      	movs	r0, #2
   196e4:	e7fc      	b.n	196e0 <os_time_ms_to_ticks+0x20>

000196e6 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   196e6:	b508      	push	{r3, lr}
    os_time_advance(1);
   196e8:	2001      	movs	r0, #1
   196ea:	f7ff ff99 	bl	19620 <os_time_advance>
}
   196ee:	bd08      	pop	{r3, pc}

000196f0 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   196f0:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   196f2:	f7ff fd19 	bl	19128 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   196f6:	4b02      	ldr	r3, [pc, #8]	; (19700 <os_arch_ctx_sw+0x10>)
   196f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   196fc:	605a      	str	r2, [r3, #4]
}
   196fe:	bd08      	pop	{r3, pc}
   19700:	e000ed00 	.word	0xe000ed00

00019704 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19704:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   19708:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1970a:	f000 0001 	and.w	r0, r0, #1
   1970e:	4770      	bx	lr

00019710 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   19710:	b900      	cbnz	r0, 19714 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   19712:	b662      	cpsie	i
        __enable_irq();
    }
}
   19714:	4770      	bx	lr

00019716 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19716:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1971a:	f000 0001 	and.w	r0, r0, #1
   1971e:	4770      	bx	lr

00019720 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   19720:	b570      	push	{r4, r5, r6, lr}
   19722:	4606      	mov	r6, r0
   19724:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   19726:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   1972a:	2309      	movs	r3, #9
   1972c:	e003      	b.n	19736 <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1972e:	2200      	movs	r2, #0
   19730:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   19734:	3301      	adds	r3, #1
   19736:	2b0d      	cmp	r3, #13
   19738:	ddf9      	ble.n	1972e <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1973a:	4620      	mov	r0, r4
   1973c:	f000 f8b6 	bl	198ac <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   19740:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   19744:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   19748:	6973      	ldr	r3, [r6, #20]
   1974a:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1974e:	69b3      	ldr	r3, [r6, #24]
   19750:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   19754:	f06f 0302 	mvn.w	r3, #2
   19758:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   1975c:	4620      	mov	r0, r4
   1975e:	bd70      	pop	{r4, r5, r6, pc}

00019760 <os_arch_init>:

void
os_arch_init(void)
{
   19760:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   19762:	4a04      	ldr	r2, [pc, #16]	; (19774 <os_arch_init+0x14>)
   19764:	6953      	ldr	r3, [r2, #20]
   19766:	f043 0310 	orr.w	r3, r3, #16
   1976a:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1976c:	f7fe fdf4 	bl	18358 <os_init_idle_task>
}
   19770:	bd08      	pop	{r3, pc}
   19772:	bf00      	nop
   19774:	e000ed00 	.word	0xe000ed00

00019778 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   19778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1977a:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1977e:	b90c      	cbnz	r4, 19784 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   19780:	2400      	movs	r4, #0
   19782:	e009      	b.n	19798 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   19784:	2007      	movs	r0, #7
   19786:	e02e      	b.n	197e6 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   19788:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1978c:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   19790:	26ff      	movs	r6, #255	; 0xff
   19792:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   19796:	3401      	adds	r4, #1
   19798:	2cef      	cmp	r4, #239	; 0xef
   1979a:	d9f5      	bls.n	19788 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1979c:	f06f 040d 	mvn.w	r4, #13
   197a0:	e007      	b.n	197b2 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   197a2:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   197a4:	4e12      	ldr	r6, [pc, #72]	; (197f0 <os_arch_os_init+0x78>)
   197a6:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   197a8:	3510      	adds	r5, #16
   197aa:	4f12      	ldr	r7, [pc, #72]	; (197f4 <os_arch_os_init+0x7c>)
   197ac:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   197b0:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   197b2:	2c25      	cmp	r4, #37	; 0x25
   197b4:	ddf5      	ble.n	197a2 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   197b6:	4c0e      	ldr	r4, [pc, #56]	; (197f0 <os_arch_os_init+0x78>)
   197b8:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   197ba:	4e0f      	ldr	r6, [pc, #60]	; (197f8 <os_arch_os_init+0x80>)
   197bc:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   197be:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   197c0:	4e0e      	ldr	r6, [pc, #56]	; (197fc <os_arch_os_init+0x84>)
   197c2:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   197c4:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   197c6:	4e0e      	ldr	r6, [pc, #56]	; (19800 <os_arch_os_init+0x88>)
   197c8:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   197ca:	25e0      	movs	r5, #224	; 0xe0
   197cc:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   197d0:	2520      	movs	r5, #32
   197d2:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   197d4:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   197d8:	f014 0f01 	tst.w	r4, #1
   197dc:	d004      	beq.n	197e8 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   197de:	f8df c024 	ldr.w	ip, [pc, #36]	; 19804 <os_arch_os_init+0x8c>
   197e2:	df00      	svc	0
        err = OS_OK;
   197e4:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   197e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   197e8:	f7ff ffba 	bl	19760 <os_arch_init>
        err = OS_OK;
   197ec:	2000      	movs	r0, #0
   197ee:	e7fa      	b.n	197e6 <os_arch_os_init+0x6e>
   197f0:	e000ed00 	.word	0xe000ed00
   197f4:	0001994b 	.word	0x0001994b
   197f8:	000198b3 	.word	0x000198b3
   197fc:	000198f9 	.word	0x000198f9
   19800:	0001993f 	.word	0x0001993f
   19804:	00019761 	.word	0x00019761

00019808 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   19808:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1980a:	f7ff fd73 	bl	192f4 <os_sched_next_task>
   1980e:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   19810:	f7ff fca8 	bl	19164 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   19814:	6823      	ldr	r3, [r4, #0]
   19816:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   19818:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1981c:	2106      	movs	r1, #6
   1981e:	2080      	movs	r0, #128	; 0x80
   19820:	f000 fde8 	bl	1a3f4 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   19824:	4b03      	ldr	r3, [pc, #12]	; (19834 <os_arch_start+0x2c>)
   19826:	2201      	movs	r2, #1
   19828:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1982a:	4620      	mov	r0, r4
   1982c:	f7ff ff60 	bl	196f0 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   19830:	69a0      	ldr	r0, [r4, #24]
   19832:	bd10      	pop	{r4, pc}
   19834:	2000de88 	.word	0x2000de88

00019838 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   19838:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1983a:	4814      	ldr	r0, [pc, #80]	; (1988c <os_arch_os_start+0x54>)
   1983c:	6800      	ldr	r0, [r0, #0]
   1983e:	3804      	subs	r0, #4
   19840:	f000 f82a 	bl	19898 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   19844:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   19848:	b9d4      	cbnz	r4, 19880 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1984a:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1984e:	f004 0403 	and.w	r4, r4, #3
   19852:	2c03      	cmp	r4, #3
   19854:	d808      	bhi.n	19868 <os_arch_os_start+0x30>
   19856:	e8df f004 	tbb	[pc, r4]
   1985a:	1515      	.short	0x1515
   1985c:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1985e:	4c0c      	ldr	r4, [pc, #48]	; (19890 <os_arch_os_start+0x58>)
   19860:	6824      	ldr	r4, [r4, #0]
   19862:	f014 0f01 	tst.w	r4, #1
   19866:	d10f      	bne.n	19888 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   19868:	f8df c028 	ldr.w	ip, [pc, #40]	; 19894 <os_arch_os_start+0x5c>
   1986c:	df00      	svc	0
   1986e:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   19870:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   19872:	4c07      	ldr	r4, [pc, #28]	; (19890 <os_arch_os_start+0x58>)
   19874:	6824      	ldr	r4, [r4, #0]
   19876:	f014 0f01 	tst.w	r4, #1
   1987a:	d1f5      	bne.n	19868 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   1987c:	2008      	movs	r0, #8
   1987e:	e7f7      	b.n	19870 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   19880:	2007      	movs	r0, #7
   19882:	e7f5      	b.n	19870 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   19884:	2008      	movs	r0, #8
   19886:	e7f3      	b.n	19870 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   19888:	2008      	movs	r0, #8
   1988a:	e7f1      	b.n	19870 <os_arch_os_start+0x38>
   1988c:	2000dde8 	.word	0x2000dde8
   19890:	2000d9e8 	.word	0x2000d9e8
   19894:	00019809 	.word	0x00019809

00019898 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   19898:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   1989c:	4832      	ldr	r0, [pc, #200]	; (19968 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1989e:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   198a0:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   198a2:	f380 8814 	msr	CONTROL, r0
        ISB
   198a6:	f3bf 8f6f 	isb	sy
        BX      LR
   198aa:	4770      	bx	lr

000198ac <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   198ac:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   198b0:	4770      	bx	lr

000198b2 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   198b2:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   198b6:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   198b8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   198bc:	b951      	cbnz	r1, 198d4 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   198be:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   198c2:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   198c4:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   198c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   198ca:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   198ce:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   198d2:	4770      	bx	lr

000198d4 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   198d4:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   198d6:	4a25      	ldr	r2, [pc, #148]	; (1996c <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   198d8:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   198da:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   198dc:	d809      	bhi.n	198f2 <SVC_Done>

        LDR     R4,=SVC_Table-4
   198de:	4c24      	ldr	r4, [pc, #144]	; (19970 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   198e0:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   198e4:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   198e8:	47a0      	blx	r4

        MRS     R12,PSP
   198ea:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   198ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000198f2 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   198f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   198f6:	4770      	bx	lr

000198f8 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   198f8:	4b1e      	ldr	r3, [pc, #120]	; (19974 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   198fa:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   198fc:	4b1e      	ldr	r3, [pc, #120]	; (19978 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   198fe:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   19900:	4291      	cmp	r1, r2
        IT      EQ
   19902:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   19904:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   19906:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1990a:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   1990e:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   19910:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   19914:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   19918:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1991c:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   1991e:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   19922:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   19926:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   1992a:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   1992c:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   19930:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   19934:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   19938:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1993c:	4770      	bx	lr

0001993e <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1993e:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   19940:	f7ff fed1 	bl	196e6 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   19944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   19948:	4770      	bx	lr

0001994a <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1994a:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1994e:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   19950:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   19954:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   19958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1995c:	4668      	mov	r0, sp
        BL      os_default_irq
   1995e:	f7fe fc61 	bl	18224 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   19962:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   19966:	4770      	bx	lr
        LDR     R0,=os_flags
   19968:	2000d9e8 	.word	0x2000d9e8
        LDR     R2,=SVC_Count
   1996c:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   19970:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   19974:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   19978:	2000deb0 	.word	0x2000deb0

0001997c <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   1997c:	b470      	push	{r4, r5, r6}
   1997e:	f04f 0500 	mov.w	r5, #0
   19982:	f022 0603 	bic.w	r6, r2, #3
   19986:	e005      	b.n	19994 <test1>

00019988 <loop1>:
   19988:	5943      	ldr	r3, [r0, r5]
   1998a:	594c      	ldr	r4, [r1, r5]
   1998c:	42a3      	cmp	r3, r4
   1998e:	d104      	bne.n	1999a <res1>
   19990:	f105 0504 	add.w	r5, r5, #4

00019994 <test1>:
   19994:	42b5      	cmp	r5, r6
   19996:	d1f7      	bne.n	19988 <loop1>
   19998:	e00d      	b.n	199b6 <test2>

0001999a <res1>:
   1999a:	ba1b      	rev	r3, r3
   1999c:	ba24      	rev	r4, r4
   1999e:	1b1b      	subs	r3, r3, r4
   199a0:	bf8c      	ite	hi
   199a2:	2301      	movhi	r3, #1
   199a4:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   199a8:	e009      	b.n	199be <done>

000199aa <loop2>:
   199aa:	5d43      	ldrb	r3, [r0, r5]
   199ac:	5d4c      	ldrb	r4, [r1, r5]
   199ae:	1b1b      	subs	r3, r3, r4
   199b0:	d105      	bne.n	199be <done>
   199b2:	f105 0501 	add.w	r5, r5, #1

000199b6 <test2>:
   199b6:	4295      	cmp	r5, r2
   199b8:	d1f7      	bne.n	199aa <loop2>
   199ba:	f04f 0300 	mov.w	r3, #0

000199be <done>:
   199be:	4618      	mov	r0, r3
   199c0:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   199c2:	4770      	bx	lr

000199c4 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   199c4:	e001      	b.n	199ca <test1>

000199c6 <loop1>:
   199c6:	588b      	ldr	r3, [r1, r2]
   199c8:	5083      	str	r3, [r0, r2]

000199ca <test1>:
   199ca:	3a04      	subs	r2, #4
   199cc:	d5fb      	bpl.n	199c6 <loop1>
   199ce:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   199d2:	e001      	b.n	199d8 <test2>

000199d4 <loop2>:
   199d4:	5c8b      	ldrb	r3, [r1, r2]
   199d6:	5483      	strb	r3, [r0, r2]

000199d8 <test2>:
   199d8:	3a01      	subs	r2, #1
   199da:	d5fb      	bpl.n	199d4 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   199dc:	4770      	bx	lr

000199de <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   199de:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   199e0:	4605      	mov	r5, r0
   199e2:	b2c9      	uxtb	r1, r1
   199e4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   199e8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   199ec:	18ab      	adds	r3, r5, r2
   199ee:	2403      	movs	r4, #3
   199f0:	4023      	ands	r3, r4
   199f2:	1ad3      	subs	r3, r2, r3
   199f4:	d40b      	bmi.n	19a0e <memset+0x30>
   199f6:	e001      	b.n	199fc <memset+0x1e>
   199f8:	3a01      	subs	r2, #1
   199fa:	54a9      	strb	r1, [r5, r2]
   199fc:	429a      	cmp	r2, r3
   199fe:	d1fb      	bne.n	199f8 <memset+0x1a>
   19a00:	e000      	b.n	19a04 <memset+0x26>
   19a02:	50a9      	str	r1, [r5, r2]
   19a04:	3a04      	subs	r2, #4
   19a06:	d5fc      	bpl.n	19a02 <memset+0x24>
   19a08:	3204      	adds	r2, #4
   19a0a:	e000      	b.n	19a0e <memset+0x30>
   19a0c:	54a9      	strb	r1, [r5, r2]
   19a0e:	3a01      	subs	r2, #1
   19a10:	d5fc      	bpl.n	19a0c <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   19a12:	bc30      	pop	{r4, r5}
   19a14:	4770      	bx	lr

00019a16 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   19a16:	b430      	push	{r4, r5}
   19a18:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   19a1a:	1c55      	adds	r5, r2, #1
   19a1c:	7813      	ldrb	r3, [r2, #0]
   19a1e:	1c4c      	adds	r4, r1, #1
   19a20:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   19a22:	1a18      	subs	r0, r3, r0
   19a24:	d103      	bne.n	19a2e <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   19a26:	462a      	mov	r2, r5
   19a28:	4621      	mov	r1, r4
		if (d || !ch)
   19a2a:	2b00      	cmp	r3, #0
   19a2c:	d1f5      	bne.n	19a1a <strcmp+0x4>
			break;
	}

	return d;
}
   19a2e:	bc30      	pop	{r4, r5}
   19a30:	4770      	bx	lr

00019a32 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   19a32:	4603      	mov	r3, r0
	while (*ss)
   19a34:	e000      	b.n	19a38 <strlen+0x6>
		ss++;
   19a36:	3301      	adds	r3, #1
	while (*ss)
   19a38:	781a      	ldrb	r2, [r3, #0]
   19a3a:	2a00      	cmp	r2, #0
   19a3c:	d1fb      	bne.n	19a36 <strlen+0x4>
	return ss - s;
}
   19a3e:	1a18      	subs	r0, r3, r0
   19a40:	4770      	bx	lr

00019a42 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   19a42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19a46:	b082      	sub	sp, #8
   19a48:	e9cd 0100 	strd	r0, r1, [sp]
   19a4c:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   19a4e:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   19a52:	2401      	movs	r4, #1
   19a54:	2500      	movs	r5, #0
    while (num / d >= p->base)
   19a56:	e004      	b.n	19a62 <ui2a+0x20>
        d *= p->base;
   19a58:	fb06 f305 	mul.w	r3, r6, r5
   19a5c:	fba4 4506 	umull	r4, r5, r4, r6
   19a60:	441d      	add	r5, r3
    while (num / d >= p->base)
   19a62:	4622      	mov	r2, r4
   19a64:	462b      	mov	r3, r5
   19a66:	e9dd 0100 	ldrd	r0, r1, [sp]
   19a6a:	f001 febd 	bl	1b7e8 <__aeabi_uldivmod>
   19a6e:	f899 6003 	ldrb.w	r6, [r9, #3]
   19a72:	2700      	movs	r7, #0
   19a74:	42b9      	cmp	r1, r7
   19a76:	bf08      	it	eq
   19a78:	42b0      	cmpeq	r0, r6
   19a7a:	d2ed      	bcs.n	19a58 <ui2a+0x16>
    int n = 0;
   19a7c:	f04f 0a00 	mov.w	sl, #0
   19a80:	e007      	b.n	19a92 <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   19a82:	2330      	movs	r3, #48	; 0x30
   19a84:	441e      	add	r6, r3
   19a86:	f888 6000 	strb.w	r6, [r8]
            ++n;
   19a8a:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   19a8e:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   19a92:	ea54 0305 	orrs.w	r3, r4, r5
   19a96:	d02e      	beq.n	19af6 <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   19a98:	4622      	mov	r2, r4
   19a9a:	462b      	mov	r3, r5
   19a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
   19aa0:	f001 fea2 	bl	1b7e8 <__aeabi_uldivmod>
   19aa4:	4606      	mov	r6, r0
   19aa6:	460f      	mov	r7, r1
        num %= d;
   19aa8:	4622      	mov	r2, r4
   19aaa:	462b      	mov	r3, r5
   19aac:	e9dd 0100 	ldrd	r0, r1, [sp]
   19ab0:	f001 fe9a 	bl	1b7e8 <__aeabi_uldivmod>
   19ab4:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   19ab8:	f899 2003 	ldrb.w	r2, [r9, #3]
   19abc:	2300      	movs	r3, #0
   19abe:	4620      	mov	r0, r4
   19ac0:	4629      	mov	r1, r5
   19ac2:	f001 fe91 	bl	1b7e8 <__aeabi_uldivmod>
   19ac6:	4604      	mov	r4, r0
   19ac8:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   19aca:	f1ba 0f00 	cmp.w	sl, #0
   19ace:	d105      	bne.n	19adc <ui2a+0x9a>
   19ad0:	ea56 0307 	orrs.w	r3, r6, r7
   19ad4:	d102      	bne.n	19adc <ui2a+0x9a>
   19ad6:	ea54 0305 	orrs.w	r3, r4, r5
   19ada:	d1da      	bne.n	19a92 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   19adc:	2f00      	cmp	r7, #0
   19ade:	bf08      	it	eq
   19ae0:	2e0a      	cmpeq	r6, #10
   19ae2:	d3ce      	bcc.n	19a82 <ui2a+0x40>
   19ae4:	f899 3002 	ldrb.w	r3, [r9, #2]
   19ae8:	f013 0f04 	tst.w	r3, #4
   19aec:	d001      	beq.n	19af2 <ui2a+0xb0>
   19aee:	2337      	movs	r3, #55	; 0x37
   19af0:	e7c8      	b.n	19a84 <ui2a+0x42>
   19af2:	2357      	movs	r3, #87	; 0x57
   19af4:	e7c6      	b.n	19a84 <ui2a+0x42>
        }
    }
    *bf = 0;
   19af6:	2300      	movs	r3, #0
   19af8:	f888 3000 	strb.w	r3, [r8]
}
   19afc:	b002      	add	sp, #8
   19afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00019b02 <i2a>:

static void i2a(long long int num, struct param *p)
{
   19b02:	b508      	push	{r3, lr}
    if (num < 0) {
   19b04:	2800      	cmp	r0, #0
   19b06:	f171 0300 	sbcs.w	r3, r1, #0
   19b0a:	db02      	blt.n	19b12 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   19b0c:	f7ff ff99 	bl	19a42 <ui2a>
}
   19b10:	bd08      	pop	{r3, pc}
        num = -num;
   19b12:	4240      	negs	r0, r0
   19b14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   19b18:	7893      	ldrb	r3, [r2, #2]
   19b1a:	f043 0301 	orr.w	r3, r3, #1
   19b1e:	7093      	strb	r3, [r2, #2]
   19b20:	e7f4      	b.n	19b0c <i2a+0xa>

00019b22 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   19b22:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   19b26:	b2db      	uxtb	r3, r3
   19b28:	2b09      	cmp	r3, #9
   19b2a:	d90b      	bls.n	19b44 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   19b2c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   19b30:	b2db      	uxtb	r3, r3
   19b32:	2b05      	cmp	r3, #5
   19b34:	d908      	bls.n	19b48 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   19b36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   19b3a:	b2db      	uxtb	r3, r3
   19b3c:	2b05      	cmp	r3, #5
   19b3e:	d805      	bhi.n	19b4c <a2d+0x2a>
        return ch - 'A' + 10;
   19b40:	3837      	subs	r0, #55	; 0x37
   19b42:	4770      	bx	lr
        return ch - '0';
   19b44:	3830      	subs	r0, #48	; 0x30
   19b46:	4770      	bx	lr
        return ch - 'a' + 10;
   19b48:	3857      	subs	r0, #87	; 0x57
   19b4a:	4770      	bx	lr
    else
        return -1;
   19b4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19b50:	4770      	bx	lr

00019b52 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   19b52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19b56:	4605      	mov	r5, r0
   19b58:	4688      	mov	r8, r1
   19b5a:	4617      	mov	r7, r2
   19b5c:	4699      	mov	r9, r3
    const char *p = *src;
   19b5e:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   19b60:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   19b62:	4628      	mov	r0, r5
   19b64:	f7ff ffdd 	bl	19b22 <a2d>
   19b68:	2800      	cmp	r0, #0
   19b6a:	db06      	blt.n	19b7a <a2i+0x28>
        if (digit > base)
   19b6c:	42b8      	cmp	r0, r7
   19b6e:	dc04      	bgt.n	19b7a <a2i+0x28>
            break;
        num = num * base + digit;
   19b70:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   19b74:	7825      	ldrb	r5, [r4, #0]
   19b76:	3401      	adds	r4, #1
   19b78:	e7f3      	b.n	19b62 <a2i+0x10>
    }
    *src = p;
   19b7a:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   19b7e:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   19b82:	4628      	mov	r0, r5
   19b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00019b88 <putf>:

static int putf(FILE *putp, char c)
{
   19b88:	b500      	push	{lr}
   19b8a:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   19b8c:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   19b90:	6803      	ldr	r3, [r0, #0]
   19b92:	681b      	ldr	r3, [r3, #0]
   19b94:	b14b      	cbz	r3, 19baa <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   19b96:	2201      	movs	r2, #1
   19b98:	f10d 0107 	add.w	r1, sp, #7
   19b9c:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   19b9e:	2801      	cmp	r0, #1
   19ba0:	d005      	beq.n	19bae <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   19ba2:	2000      	movs	r0, #0
    else
        return 1;
}
   19ba4:	b003      	add	sp, #12
   19ba6:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   19baa:	2000      	movs	r0, #0
   19bac:	e7fa      	b.n	19ba4 <putf+0x1c>
        return 1;
   19bae:	2001      	movs	r0, #1
   19bb0:	e7f8      	b.n	19ba4 <putf+0x1c>
	...

00019bb4 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   19bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19bb8:	4606      	mov	r6, r0
   19bba:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   19bbc:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   19bbe:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   19bc0:	e001      	b.n	19bc6 <putchw+0x12>
        n--;
   19bc2:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   19bc4:	4613      	mov	r3, r2
   19bc6:	1c5a      	adds	r2, r3, #1
   19bc8:	781b      	ldrb	r3, [r3, #0]
   19bca:	b10b      	cbz	r3, 19bd0 <putchw+0x1c>
   19bcc:	2c00      	cmp	r4, #0
   19bce:	dcf8      	bgt.n	19bc2 <putchw+0xe>
    if (p->sign)
   19bd0:	78bb      	ldrb	r3, [r7, #2]
   19bd2:	f013 0f01 	tst.w	r3, #1
   19bd6:	d000      	beq.n	19bda <putchw+0x26>
        n--;
   19bd8:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   19bda:	887b      	ldrh	r3, [r7, #2]
   19bdc:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   19be0:	b29b      	uxth	r3, r3
   19be2:	f241 0202 	movw	r2, #4098	; 0x1002
   19be6:	4293      	cmp	r3, r2
   19be8:	d01c      	beq.n	19c24 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   19bea:	f640 0202 	movw	r2, #2050	; 0x802
   19bee:	4293      	cmp	r3, r2
   19bf0:	d01a      	beq.n	19c28 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   19bf2:	683b      	ldr	r3, [r7, #0]
   19bf4:	4d35      	ldr	r5, [pc, #212]	; (19ccc <putchw+0x118>)
   19bf6:	401d      	ands	r5, r3
   19bf8:	b1f5      	cbz	r5, 19c38 <putchw+0x84>
    unsigned written = 0;
   19bfa:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   19bfc:	78bb      	ldrb	r3, [r7, #2]
   19bfe:	f013 0f01 	tst.w	r3, #1
   19c02:	d11f      	bne.n	19c44 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   19c04:	887b      	ldrh	r3, [r7, #2]
   19c06:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   19c0a:	b29b      	uxth	r3, r3
   19c0c:	f241 0202 	movw	r2, #4098	; 0x1002
   19c10:	4293      	cmp	r3, r2
   19c12:	d01d      	beq.n	19c50 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   19c14:	f640 0202 	movw	r2, #2050	; 0x802
   19c18:	4293      	cmp	r3, r2
   19c1a:	d02a      	beq.n	19c72 <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   19c1c:	787b      	ldrb	r3, [r7, #1]
   19c1e:	bba3      	cbnz	r3, 19c8a <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   19c20:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   19c22:	e03d      	b.n	19ca0 <putchw+0xec>
        n -= 2;
   19c24:	3c02      	subs	r4, #2
   19c26:	e7e4      	b.n	19bf2 <putchw+0x3e>
        n--;
   19c28:	3c01      	subs	r4, #1
   19c2a:	e7e2      	b.n	19bf2 <putchw+0x3e>
            written += putf(putp, ' ');
   19c2c:	2120      	movs	r1, #32
   19c2e:	4630      	mov	r0, r6
   19c30:	f7ff ffaa 	bl	19b88 <putf>
   19c34:	4405      	add	r5, r0
        while (n-- > 0)
   19c36:	4644      	mov	r4, r8
   19c38:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   19c3c:	2c00      	cmp	r4, #0
   19c3e:	dcf5      	bgt.n	19c2c <putchw+0x78>
   19c40:	4644      	mov	r4, r8
   19c42:	e7db      	b.n	19bfc <putchw+0x48>
        written += putf(putp, '-');
   19c44:	212d      	movs	r1, #45	; 0x2d
   19c46:	4630      	mov	r0, r6
   19c48:	f7ff ff9e 	bl	19b88 <putf>
   19c4c:	4405      	add	r5, r0
   19c4e:	e7d9      	b.n	19c04 <putchw+0x50>
        written += putf(putp, '0');
   19c50:	2130      	movs	r1, #48	; 0x30
   19c52:	4630      	mov	r0, r6
   19c54:	f7ff ff98 	bl	19b88 <putf>
   19c58:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   19c5a:	78bb      	ldrb	r3, [r7, #2]
   19c5c:	f013 0f04 	tst.w	r3, #4
   19c60:	d005      	beq.n	19c6e <putchw+0xba>
   19c62:	2158      	movs	r1, #88	; 0x58
   19c64:	4630      	mov	r0, r6
   19c66:	f7ff ff8f 	bl	19b88 <putf>
   19c6a:	4405      	add	r5, r0
   19c6c:	e7d6      	b.n	19c1c <putchw+0x68>
   19c6e:	2178      	movs	r1, #120	; 0x78
   19c70:	e7f8      	b.n	19c64 <putchw+0xb0>
        written += putf(putp, '0');
   19c72:	2130      	movs	r1, #48	; 0x30
   19c74:	4630      	mov	r0, r6
   19c76:	f7ff ff87 	bl	19b88 <putf>
   19c7a:	4405      	add	r5, r0
   19c7c:	e7ce      	b.n	19c1c <putchw+0x68>
            written += putf(putp, '0');
   19c7e:	2130      	movs	r1, #48	; 0x30
   19c80:	4630      	mov	r0, r6
   19c82:	f7ff ff81 	bl	19b88 <putf>
   19c86:	4405      	add	r5, r0
        while (n-- > 0)
   19c88:	4644      	mov	r4, r8
   19c8a:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   19c8e:	2c00      	cmp	r4, #0
   19c90:	dcf5      	bgt.n	19c7e <putchw+0xca>
   19c92:	4644      	mov	r4, r8
   19c94:	e7c4      	b.n	19c20 <putchw+0x6c>
        written += putf(putp, ch);
   19c96:	4630      	mov	r0, r6
   19c98:	f7ff ff76 	bl	19b88 <putf>
   19c9c:	4405      	add	r5, r0
    while ((ch = *bf++))
   19c9e:	4643      	mov	r3, r8
   19ca0:	f103 0801 	add.w	r8, r3, #1
   19ca4:	7819      	ldrb	r1, [r3, #0]
   19ca6:	2900      	cmp	r1, #0
   19ca8:	d1f5      	bne.n	19c96 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   19caa:	78bb      	ldrb	r3, [r7, #2]
   19cac:	f013 0f08 	tst.w	r3, #8
   19cb0:	d106      	bne.n	19cc0 <putchw+0x10c>
   19cb2:	e008      	b.n	19cc6 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   19cb4:	2120      	movs	r1, #32
   19cb6:	4630      	mov	r0, r6
   19cb8:	f7ff ff66 	bl	19b88 <putf>
   19cbc:	4405      	add	r5, r0
        while (n-- > 0)
   19cbe:	463c      	mov	r4, r7
   19cc0:	1e67      	subs	r7, r4, #1
   19cc2:	2c00      	cmp	r4, #0
   19cc4:	dcf6      	bgt.n	19cb4 <putchw+0x100>
    }
    
    return written;
}
   19cc6:	4628      	mov	r0, r5
   19cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19ccc:	0008ff00 	.word	0x0008ff00

00019cd0 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   19cd0:	b160      	cbz	r0, 19cec <intarg+0x1c>
   19cd2:	2801      	cmp	r0, #1
   19cd4:	d017      	beq.n	19d06 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   19cd6:	bb19      	cbnz	r1, 19d20 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   19cd8:	6813      	ldr	r3, [r2, #0]
   19cda:	3307      	adds	r3, #7
   19cdc:	f023 0307 	bic.w	r3, r3, #7
   19ce0:	f103 0108 	add.w	r1, r3, #8
   19ce4:	6011      	str	r1, [r2, #0]
   19ce6:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   19cea:	4770      	bx	lr
        if (sign) {
   19cec:	b129      	cbz	r1, 19cfa <intarg+0x2a>
            val = va_arg(*va, int);
   19cee:	6813      	ldr	r3, [r2, #0]
   19cf0:	1d19      	adds	r1, r3, #4
   19cf2:	6011      	str	r1, [r2, #0]
   19cf4:	6818      	ldr	r0, [r3, #0]
   19cf6:	17c1      	asrs	r1, r0, #31
   19cf8:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   19cfa:	6813      	ldr	r3, [r2, #0]
   19cfc:	1d19      	adds	r1, r3, #4
   19cfe:	6011      	str	r1, [r2, #0]
   19d00:	6818      	ldr	r0, [r3, #0]
   19d02:	2100      	movs	r1, #0
   19d04:	4770      	bx	lr
        if (sign) {
   19d06:	b129      	cbz	r1, 19d14 <intarg+0x44>
            val = va_arg(*va, long);
   19d08:	6813      	ldr	r3, [r2, #0]
   19d0a:	1d19      	adds	r1, r3, #4
   19d0c:	6011      	str	r1, [r2, #0]
   19d0e:	6818      	ldr	r0, [r3, #0]
   19d10:	17c1      	asrs	r1, r0, #31
   19d12:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   19d14:	6813      	ldr	r3, [r2, #0]
   19d16:	1d19      	adds	r1, r3, #4
   19d18:	6011      	str	r1, [r2, #0]
   19d1a:	6818      	ldr	r0, [r3, #0]
   19d1c:	2100      	movs	r1, #0
   19d1e:	4770      	bx	lr
            val = va_arg(*va, long long);
   19d20:	6813      	ldr	r3, [r2, #0]
   19d22:	3307      	adds	r3, #7
   19d24:	f023 0307 	bic.w	r3, r3, #7
   19d28:	f103 0108 	add.w	r1, r3, #8
   19d2c:	6011      	str	r1, [r2, #0]
   19d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
   19d32:	4770      	bx	lr

00019d34 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   19d34:	b570      	push	{r4, r5, r6, lr}
   19d36:	b08a      	sub	sp, #40	; 0x28
   19d38:	4605      	mov	r5, r0
   19d3a:	9101      	str	r1, [sp, #4]
   19d3c:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   19d3e:	ab02      	add	r3, sp, #8
   19d40:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   19d42:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   19d44:	9b01      	ldr	r3, [sp, #4]
   19d46:	1c5a      	adds	r2, r3, #1
   19d48:	9201      	str	r2, [sp, #4]
   19d4a:	7819      	ldrb	r1, [r3, #0]
   19d4c:	2900      	cmp	r1, #0
   19d4e:	f000 811c 	beq.w	19f8a <tfp_format+0x256>
        if (ch != '%') {
   19d52:	2925      	cmp	r1, #37	; 0x25
   19d54:	d004      	beq.n	19d60 <tfp_format+0x2c>
            written += putf(putp, ch);
   19d56:	4628      	mov	r0, r5
   19d58:	f7ff ff16 	bl	19b88 <putf>
   19d5c:	4404      	add	r4, r0
   19d5e:	e7f1      	b.n	19d44 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   19d60:	2200      	movs	r2, #0
   19d62:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   19d66:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   19d6a:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   19d6e:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   19d72:	f362 0382 	bfi	r3, r2, #2, #1
   19d76:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   19d7a:	9b01      	ldr	r3, [sp, #4]
   19d7c:	1c5a      	adds	r2, r3, #1
   19d7e:	9201      	str	r2, [sp, #4]
   19d80:	7818      	ldrb	r0, [r3, #0]
   19d82:	b128      	cbz	r0, 19d90 <tfp_format+0x5c>
                switch (ch) {
   19d84:	282d      	cmp	r0, #45	; 0x2d
   19d86:	d04e      	beq.n	19e26 <tfp_format+0xf2>
   19d88:	2830      	cmp	r0, #48	; 0x30
   19d8a:	d03c      	beq.n	19e06 <tfp_format+0xd2>
   19d8c:	2823      	cmp	r0, #35	; 0x23
   19d8e:	d043      	beq.n	19e18 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   19d90:	282a      	cmp	r0, #42	; 0x2a
   19d92:	d052      	beq.n	19e3a <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   19d94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   19d98:	b2db      	uxtb	r3, r3
   19d9a:	2b09      	cmp	r3, #9
   19d9c:	d961      	bls.n	19e62 <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   19d9e:	286c      	cmp	r0, #108	; 0x6c
   19da0:	d065      	beq.n	19e6e <tfp_format+0x13a>
            lng = 0;
   19da2:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   19da4:	287a      	cmp	r0, #122	; 0x7a
   19da6:	d06f      	beq.n	19e88 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   19da8:	2869      	cmp	r0, #105	; 0x69
   19daa:	f000 808e 	beq.w	19eca <tfp_format+0x196>
   19dae:	d970      	bls.n	19e92 <tfp_format+0x15e>
   19db0:	2873      	cmp	r0, #115	; 0x73
   19db2:	f000 80dd 	beq.w	19f70 <tfp_format+0x23c>
   19db6:	f200 8099 	bhi.w	19eec <tfp_format+0x1b8>
   19dba:	286f      	cmp	r0, #111	; 0x6f
   19dbc:	f000 80c7 	beq.w	19f4e <tfp_format+0x21a>
   19dc0:	2870      	cmp	r0, #112	; 0x70
   19dc2:	d1bf      	bne.n	19d44 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   19dc4:	9b00      	ldr	r3, [sp, #0]
   19dc6:	1d1a      	adds	r2, r3, #4
   19dc8:	9200      	str	r2, [sp, #0]
   19dca:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   19dcc:	2310      	movs	r3, #16
   19dce:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   19dd2:	aa08      	add	r2, sp, #32
   19dd4:	2100      	movs	r1, #0
   19dd6:	f7ff fe34 	bl	19a42 <ui2a>
                p.width = 2 * sizeof(void*);
   19dda:	2308      	movs	r3, #8
   19ddc:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   19de0:	2301      	movs	r3, #1
   19de2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   19de6:	2130      	movs	r1, #48	; 0x30
   19de8:	4628      	mov	r0, r5
   19dea:	f7ff fecd 	bl	19b88 <putf>
   19dee:	4404      	add	r4, r0
                written += putf(putp, 'x');
   19df0:	2178      	movs	r1, #120	; 0x78
   19df2:	4628      	mov	r0, r5
   19df4:	f7ff fec8 	bl	19b88 <putf>
   19df8:	4404      	add	r4, r0
                written += putchw(putp, &p);
   19dfa:	a908      	add	r1, sp, #32
   19dfc:	4628      	mov	r0, r5
   19dfe:	f7ff fed9 	bl	19bb4 <putchw>
   19e02:	4404      	add	r4, r0
                break;
   19e04:	e79e      	b.n	19d44 <tfp_format+0x10>
                    if (!p.left) {
   19e06:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19e0a:	f013 0f08 	tst.w	r3, #8
   19e0e:	d1b4      	bne.n	19d7a <tfp_format+0x46>
                        p.lz = 1;
   19e10:	2301      	movs	r3, #1
   19e12:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   19e16:	e7b0      	b.n	19d7a <tfp_format+0x46>
                    p.alt = 1;
   19e18:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19e1c:	f043 0302 	orr.w	r3, r3, #2
   19e20:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   19e24:	e7a9      	b.n	19d7a <tfp_format+0x46>
                    p.left = 1;
   19e26:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19e2a:	f043 0308 	orr.w	r3, r3, #8
   19e2e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   19e32:	2300      	movs	r3, #0
   19e34:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   19e38:	e79f      	b.n	19d7a <tfp_format+0x46>
                i = intarg(0, 1, &va);
   19e3a:	466a      	mov	r2, sp
   19e3c:	2101      	movs	r1, #1
   19e3e:	2000      	movs	r0, #0
   19e40:	f7ff ff46 	bl	19cd0 <intarg>
                if (i > UCHAR_MAX) {
   19e44:	28ff      	cmp	r0, #255	; 0xff
   19e46:	dd07      	ble.n	19e58 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   19e48:	23ff      	movs	r3, #255	; 0xff
   19e4a:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   19e4e:	9b01      	ldr	r3, [sp, #4]
   19e50:	1c5a      	adds	r2, r3, #1
   19e52:	9201      	str	r2, [sp, #4]
   19e54:	7818      	ldrb	r0, [r3, #0]
   19e56:	e7a2      	b.n	19d9e <tfp_format+0x6a>
                } else if (i > 0) {
   19e58:	2800      	cmp	r0, #0
   19e5a:	ddf8      	ble.n	19e4e <tfp_format+0x11a>
                    p.width = i;
   19e5c:	f88d 0020 	strb.w	r0, [sp, #32]
   19e60:	e7f5      	b.n	19e4e <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   19e62:	ab08      	add	r3, sp, #32
   19e64:	220a      	movs	r2, #10
   19e66:	a901      	add	r1, sp, #4
   19e68:	f7ff fe73 	bl	19b52 <a2i>
   19e6c:	e797      	b.n	19d9e <tfp_format+0x6a>
                ch = *(fmt++);
   19e6e:	9b01      	ldr	r3, [sp, #4]
   19e70:	1c5a      	adds	r2, r3, #1
   19e72:	9201      	str	r2, [sp, #4]
   19e74:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   19e76:	286c      	cmp	r0, #108	; 0x6c
   19e78:	d001      	beq.n	19e7e <tfp_format+0x14a>
                lng = 1;
   19e7a:	2601      	movs	r6, #1
   19e7c:	e792      	b.n	19da4 <tfp_format+0x70>
                    ch = *(fmt++);
   19e7e:	1c9a      	adds	r2, r3, #2
   19e80:	9201      	str	r2, [sp, #4]
   19e82:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   19e84:	2602      	movs	r6, #2
   19e86:	e78d      	b.n	19da4 <tfp_format+0x70>
                ch = *(fmt++);
   19e88:	9b01      	ldr	r3, [sp, #4]
   19e8a:	1c5a      	adds	r2, r3, #1
   19e8c:	9201      	str	r2, [sp, #4]
   19e8e:	7818      	ldrb	r0, [r3, #0]
   19e90:	e78a      	b.n	19da8 <tfp_format+0x74>
            switch (ch) {
   19e92:	2858      	cmp	r0, #88	; 0x58
   19e94:	d040      	beq.n	19f18 <tfp_format+0x1e4>
   19e96:	d80a      	bhi.n	19eae <tfp_format+0x17a>
   19e98:	2800      	cmp	r0, #0
   19e9a:	d076      	beq.n	19f8a <tfp_format+0x256>
   19e9c:	2825      	cmp	r0, #37	; 0x25
   19e9e:	f47f af51 	bne.w	19d44 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   19ea2:	4601      	mov	r1, r0
   19ea4:	4628      	mov	r0, r5
   19ea6:	f7ff fe6f 	bl	19b88 <putf>
   19eaa:	4404      	add	r4, r0
                break;
   19eac:	e74a      	b.n	19d44 <tfp_format+0x10>
            switch (ch) {
   19eae:	2863      	cmp	r0, #99	; 0x63
   19eb0:	d108      	bne.n	19ec4 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   19eb2:	9b00      	ldr	r3, [sp, #0]
   19eb4:	1d1a      	adds	r2, r3, #4
   19eb6:	9200      	str	r2, [sp, #0]
   19eb8:	7819      	ldrb	r1, [r3, #0]
   19eba:	4628      	mov	r0, r5
   19ebc:	f7ff fe64 	bl	19b88 <putf>
   19ec0:	4404      	add	r4, r0
                break;
   19ec2:	e73f      	b.n	19d44 <tfp_format+0x10>
            switch (ch) {
   19ec4:	2864      	cmp	r0, #100	; 0x64
   19ec6:	f47f af3d 	bne.w	19d44 <tfp_format+0x10>
                p.base = 10;
   19eca:	230a      	movs	r3, #10
   19ecc:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   19ed0:	466a      	mov	r2, sp
   19ed2:	2101      	movs	r1, #1
   19ed4:	4630      	mov	r0, r6
   19ed6:	f7ff fefb 	bl	19cd0 <intarg>
   19eda:	aa08      	add	r2, sp, #32
   19edc:	f7ff fe11 	bl	19b02 <i2a>
                written += putchw(putp, &p);
   19ee0:	a908      	add	r1, sp, #32
   19ee2:	4628      	mov	r0, r5
   19ee4:	f7ff fe66 	bl	19bb4 <putchw>
   19ee8:	4404      	add	r4, r0
                break;
   19eea:	e72b      	b.n	19d44 <tfp_format+0x10>
            switch (ch) {
   19eec:	2875      	cmp	r0, #117	; 0x75
   19eee:	d110      	bne.n	19f12 <tfp_format+0x1de>
                p.base = 10;
   19ef0:	230a      	movs	r3, #10
   19ef2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   19ef6:	466a      	mov	r2, sp
   19ef8:	2100      	movs	r1, #0
   19efa:	4630      	mov	r0, r6
   19efc:	f7ff fee8 	bl	19cd0 <intarg>
   19f00:	aa08      	add	r2, sp, #32
   19f02:	f7ff fd9e 	bl	19a42 <ui2a>
                written += putchw(putp, &p);
   19f06:	a908      	add	r1, sp, #32
   19f08:	4628      	mov	r0, r5
   19f0a:	f7ff fe53 	bl	19bb4 <putchw>
   19f0e:	4404      	add	r4, r0
                break;
   19f10:	e718      	b.n	19d44 <tfp_format+0x10>
            switch (ch) {
   19f12:	2878      	cmp	r0, #120	; 0x78
   19f14:	f47f af16 	bne.w	19d44 <tfp_format+0x10>
                p.base = 16;
   19f18:	2310      	movs	r3, #16
   19f1a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   19f1e:	2858      	cmp	r0, #88	; 0x58
   19f20:	bf14      	ite	ne
   19f22:	2300      	movne	r3, #0
   19f24:	2301      	moveq	r3, #1
   19f26:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   19f2a:	f363 0282 	bfi	r2, r3, #2, #1
   19f2e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   19f32:	466a      	mov	r2, sp
   19f34:	2100      	movs	r1, #0
   19f36:	4630      	mov	r0, r6
   19f38:	f7ff feca 	bl	19cd0 <intarg>
   19f3c:	aa08      	add	r2, sp, #32
   19f3e:	f7ff fd80 	bl	19a42 <ui2a>
                written += putchw(putp, &p);
   19f42:	a908      	add	r1, sp, #32
   19f44:	4628      	mov	r0, r5
   19f46:	f7ff fe35 	bl	19bb4 <putchw>
   19f4a:	4404      	add	r4, r0
                break;
   19f4c:	e6fa      	b.n	19d44 <tfp_format+0x10>
                p.base = 8;
   19f4e:	2308      	movs	r3, #8
   19f50:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   19f54:	466a      	mov	r2, sp
   19f56:	2100      	movs	r1, #0
   19f58:	4630      	mov	r0, r6
   19f5a:	f7ff feb9 	bl	19cd0 <intarg>
   19f5e:	aa08      	add	r2, sp, #32
   19f60:	f7ff fd6f 	bl	19a42 <ui2a>
                written += putchw(putp, &p);
   19f64:	a908      	add	r1, sp, #32
   19f66:	4628      	mov	r0, r5
   19f68:	f7ff fe24 	bl	19bb4 <putchw>
   19f6c:	4404      	add	r4, r0
                break;
   19f6e:	e6e9      	b.n	19d44 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   19f70:	9b00      	ldr	r3, [sp, #0]
   19f72:	1d1a      	adds	r2, r3, #4
   19f74:	9200      	str	r2, [sp, #0]
   19f76:	681b      	ldr	r3, [r3, #0]
   19f78:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   19f7a:	a908      	add	r1, sp, #32
   19f7c:	4628      	mov	r0, r5
   19f7e:	f7ff fe19 	bl	19bb4 <putchw>
   19f82:	4404      	add	r4, r0
                p.bf = bf;
   19f84:	ab02      	add	r3, sp, #8
   19f86:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   19f88:	e6dc      	b.n	19d44 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   19f8a:	4620      	mov	r0, r4
   19f8c:	b00a      	add	sp, #40	; 0x28
   19f8e:	bd70      	pop	{r4, r5, r6, pc}

00019f90 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   19f90:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   19f92:	f7ff fecf 	bl	19d34 <tfp_format>
}
   19f96:	bd08      	pop	{r3, pc}

00019f98 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   19f98:	b40f      	push	{r0, r1, r2, r3}
   19f9a:	b500      	push	{lr}
   19f9c:	b083      	sub	sp, #12
   19f9e:	aa04      	add	r2, sp, #16
   19fa0:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   19fa4:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   19fa6:	4b04      	ldr	r3, [pc, #16]	; (19fb8 <printf+0x20>)
   19fa8:	6818      	ldr	r0, [r3, #0]
   19faa:	f7ff fff1 	bl	19f90 <vfprintf>
    va_end(va);
    return rv;
}
   19fae:	b003      	add	sp, #12
   19fb0:	f85d eb04 	ldr.w	lr, [sp], #4
   19fb4:	b004      	add	sp, #16
   19fb6:	4770      	bx	lr
   19fb8:	000203dc 	.word	0x000203dc

00019fbc <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   19fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   19fbe:	b085      	sub	sp, #20
   19fc0:	4605      	mov	r5, r0
   19fc2:	460c      	mov	r4, r1
   19fc4:	4616      	mov	r6, r2
   19fc6:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   19fc8:	460a      	mov	r2, r1
   19fca:	4601      	mov	r1, r0
   19fcc:	4668      	mov	r0, sp
   19fce:	f000 f835 	bl	1a03c <fmemopen_w>
    tfp_format(f, fmt, va);
   19fd2:	463a      	mov	r2, r7
   19fd4:	4631      	mov	r1, r6
   19fd6:	f7ff fead 	bl	19d34 <tfp_format>
    if (size > 0) {
   19fda:	b12c      	cbz	r4, 19fe8 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   19fdc:	9b02      	ldr	r3, [sp, #8]
   19fde:	42a3      	cmp	r3, r4
   19fe0:	d305      	bcc.n	19fee <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   19fe2:	3c01      	subs	r4, #1
   19fe4:	2300      	movs	r3, #0
   19fe6:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   19fe8:	9802      	ldr	r0, [sp, #8]
   19fea:	b005      	add	sp, #20
   19fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   19fee:	9b01      	ldr	r3, [sp, #4]
   19ff0:	2200      	movs	r2, #0
   19ff2:	701a      	strb	r2, [r3, #0]
   19ff4:	e7f8      	b.n	19fe8 <vsnprintf+0x2c>
	...

00019ff8 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   19ff8:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   19ffa:	460a      	mov	r2, r1
   19ffc:	4601      	mov	r1, r0
   19ffe:	4b02      	ldr	r3, [pc, #8]	; (1a008 <vprintf+0x10>)
   1a000:	6818      	ldr	r0, [r3, #0]
   1a002:	f7ff ffc5 	bl	19f90 <vfprintf>
}
   1a006:	bd08      	pop	{r3, pc}
   1a008:	000203dc 	.word	0x000203dc

0001a00c <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1a00c:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1a00e:	2500      	movs	r5, #0
    
    while (n--)
   1a010:	e000      	b.n	1a014 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1a012:	4622      	mov	r2, r4
    while (n--)
   1a014:	1e54      	subs	r4, r2, #1
   1a016:	b16a      	cbz	r2, 1a034 <memfile_write+0x28>
        f->bytes_written++;
   1a018:	6883      	ldr	r3, [r0, #8]
   1a01a:	3301      	adds	r3, #1
   1a01c:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1a01e:	68c2      	ldr	r2, [r0, #12]
   1a020:	4293      	cmp	r3, r2
   1a022:	d8f6      	bhi.n	1a012 <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1a024:	6843      	ldr	r3, [r0, #4]
   1a026:	1c5a      	adds	r2, r3, #1
   1a028:	6042      	str	r2, [r0, #4]
   1a02a:	780a      	ldrb	r2, [r1, #0]
   1a02c:	701a      	strb	r2, [r3, #0]
            i++;
   1a02e:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1a030:	3101      	adds	r1, #1
   1a032:	e7ee      	b.n	1a012 <memfile_write+0x6>
        }
    }
    
    return i;
}
   1a034:	4628      	mov	r0, r5
   1a036:	bc30      	pop	{r4, r5}
   1a038:	4770      	bx	lr
	...

0001a03c <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1a03c:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1a03e:	4c04      	ldr	r4, [pc, #16]	; (1a050 <fmemopen_w+0x14>)
   1a040:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1a042:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1a044:	2100      	movs	r1, #0
   1a046:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1a048:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1a04a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a04e:	4770      	bx	lr
   1a050:	000203d4 	.word	0x000203d4

0001a054 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1a054:	2000      	movs	r0, #0
   1a056:	4770      	bx	lr

0001a058 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1a058:	b510      	push	{r4, lr}
   1a05a:	4608      	mov	r0, r1
   1a05c:	4614      	mov	r4, r2
    console_write(bp, n);
   1a05e:	4611      	mov	r1, r2
   1a060:	f7fd f9b8 	bl	173d4 <console_write>
    return n;
}
   1a064:	4620      	mov	r0, r4
   1a066:	bd10      	pop	{r4, pc}

0001a068 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1a068:	b508      	push	{r3, lr}
    sysinit();
   1a06a:	f7fd fa1b 	bl	174a4 <sysinit_start>
   1a06e:	f000 f81b 	bl	1a0a8 <sysinit_app>
   1a072:	f7fd fa1d 	bl	174b0 <sysinit_end>
}
   1a076:	bd08      	pop	{r3, pc}

0001a078 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1a078:	b570      	push	{r4, r5, r6, lr}
   1a07a:	b082      	sub	sp, #8
   1a07c:	460c      	mov	r4, r1
   1a07e:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1a080:	b29d      	uxth	r5, r3
   1a082:	9b07      	ldr	r3, [sp, #28]
   1a084:	9300      	str	r3, [sp, #0]
   1a086:	4603      	mov	r3, r0
   1a088:	9a06      	ldr	r2, [sp, #24]
   1a08a:	4629      	mov	r1, r5
   1a08c:	4620      	mov	r0, r4
   1a08e:	f7fe fdeb 	bl	18c68 <os_mempool_init>
    if (rc != 0) {
   1a092:	b108      	cbz	r0, 1a098 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1a094:	b002      	add	sp, #8
   1a096:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1a098:	462b      	mov	r3, r5
   1a09a:	9a06      	ldr	r2, [sp, #24]
   1a09c:	b292      	uxth	r2, r2
   1a09e:	4621      	mov	r1, r4
   1a0a0:	4630      	mov	r0, r6
   1a0a2:	f7fe fc96 	bl	189d2 <os_mbuf_pool_init>
   1a0a6:	e7f5      	b.n	1a094 <mem_init_mbuf_pool+0x1c>

0001a0a8 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1a0a8:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1a0aa:	f7fe f9f3 	bl	18494 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1a0ae:	f001 f985 	bl	1b3bc <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1a0b2:	f7fd f9a3 	bl	173fc <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1a0b6:	f001 fac7 	bl	1b648 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1a0ba:	f001 f9b7 	bl	1b42c <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1a0be:	f001 f8e1 	bl	1b284 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1a0c2:	f001 f8f1 	bl	1b2a8 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1a0c6:	f001 f8f0 	bl	1b2aa <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1a0ca:	f001 f8ef 	bl	1b2ac <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1a0ce:	f001 f8ee 	bl	1b2ae <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1a0d2:	f001 f8ed 	bl	1b2b0 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1a0d6:	f000 fbd1 	bl	1a87c <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1a0da:	f000 fd1f 	bl	1ab1c <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1a0de:	f000 ff3d 	bl	1af5c <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1a0e2:	f000 feb3 	bl	1ae4c <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1a0e6:	f000 fe3d 	bl	1ad64 <init_sensor_coap>
}
   1a0ea:	bd08      	pop	{r3, pc}

0001a0ec <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1a0ec:	b908      	cbnz	r0, 1a0f2 <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1a0ee:	4802      	ldr	r0, [pc, #8]	; (1a0f8 <hal_bsp_flash_dev+0xc>)
   1a0f0:	4770      	bx	lr
    }

    return NULL;
   1a0f2:	2000      	movs	r0, #0
}
   1a0f4:	4770      	bx	lr
   1a0f6:	bf00      	nop
   1a0f8:	000203e0 	.word	0x000203e0

0001a0fc <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1a0fc:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1a0fe:	f7ee f85f 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1a102:	f000 fbb3 	bl	1a86c <nrf52_periph_create>
}
   1a106:	bd08      	pop	{r3, pc}

0001a108 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1a108:	2300      	movs	r3, #0
   1a10a:	4a07      	ldr	r2, [pc, #28]	; (1a128 <nrf52k_flash_wait_ready+0x20>)
   1a10c:	4293      	cmp	r3, r2
   1a10e:	dc06      	bgt.n	1a11e <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1a110:	4a06      	ldr	r2, [pc, #24]	; (1a12c <nrf52k_flash_wait_ready+0x24>)
   1a112:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1a116:	2a01      	cmp	r2, #1
   1a118:	d004      	beq.n	1a124 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1a11a:	3301      	adds	r3, #1
   1a11c:	e7f5      	b.n	1a10a <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1a11e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a122:	4770      	bx	lr
            return 0;
   1a124:	2000      	movs	r0, #0
}
   1a126:	4770      	bx	lr
   1a128:	0001869f 	.word	0x0001869f
   1a12c:	4001e000 	.word	0x4001e000

0001a130 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1a130:	b538      	push	{r3, r4, r5, lr}
   1a132:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1a134:	f7ff ffe8 	bl	1a108 <nrf52k_flash_wait_ready>
   1a138:	b9f0      	cbnz	r0, 1a178 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a13a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a13e:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1a140:	4b0f      	ldr	r3, [pc, #60]	; (1a180 <nrf52k_flash_erase_sector+0x50>)
   1a142:	2202      	movs	r2, #2
   1a144:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1a148:	f7ff ffde 	bl	1a108 <nrf52k_flash_wait_ready>
   1a14c:	b148      	cbz	r0, 1a162 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1a14e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1a152:	4a0b      	ldr	r2, [pc, #44]	; (1a180 <nrf52k_flash_erase_sector+0x50>)
   1a154:	2100      	movs	r1, #0
   1a156:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1a15a:	b904      	cbnz	r4, 1a15e <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1a15c:	b662      	cpsie	i
    return rc;
}
   1a15e:	4618      	mov	r0, r3
   1a160:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1a162:	4b07      	ldr	r3, [pc, #28]	; (1a180 <nrf52k_flash_erase_sector+0x50>)
   1a164:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1a168:	f7ff ffce 	bl	1a108 <nrf52k_flash_wait_ready>
   1a16c:	4603      	mov	r3, r0
   1a16e:	2800      	cmp	r0, #0
   1a170:	d0ef      	beq.n	1a152 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1a172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a176:	e7ec      	b.n	1a152 <nrf52k_flash_erase_sector+0x22>
        return -1;
   1a178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a17c:	e7ef      	b.n	1a15e <nrf52k_flash_erase_sector+0x2e>
   1a17e:	bf00      	nop
   1a180:	4001e000 	.word	0x4001e000

0001a184 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1a184:	2000      	movs	r0, #0
   1a186:	4770      	bx	lr

0001a188 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1a188:	297f      	cmp	r1, #127	; 0x7f
   1a18a:	dc06      	bgt.n	1a19a <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1a18c:	0309      	lsls	r1, r1, #12
   1a18e:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1a190:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1a194:	601a      	str	r2, [r3, #0]
}
   1a196:	2000      	movs	r0, #0
   1a198:	4770      	bx	lr
{
   1a19a:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1a19c:	2300      	movs	r3, #0
   1a19e:	461a      	mov	r2, r3
   1a1a0:	4619      	mov	r1, r3
   1a1a2:	4618      	mov	r0, r3
   1a1a4:	f7fe f818 	bl	181d8 <__assert_func>

0001a1a8 <nrf52k_flash_write>:
{
   1a1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a1ac:	b082      	sub	sp, #8
   1a1ae:	460d      	mov	r5, r1
   1a1b0:	4616      	mov	r6, r2
   1a1b2:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1a1b4:	f7ff ffa8 	bl	1a108 <nrf52k_flash_wait_ready>
   1a1b8:	2800      	cmp	r0, #0
   1a1ba:	d158      	bne.n	1a26e <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a1bc:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a1c0:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1a1c2:	4b2c      	ldr	r3, [pc, #176]	; (1a274 <nrf52k_flash_write+0xcc>)
   1a1c4:	2201      	movs	r2, #1
   1a1c6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1a1ca:	f015 0803 	ands.w	r8, r5, #3
   1a1ce:	d10b      	bne.n	1a1e8 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1a1d0:	2c03      	cmp	r4, #3
   1a1d2:	d925      	bls.n	1a220 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1a1d4:	f7ff ff98 	bl	1a108 <nrf52k_flash_wait_ready>
   1a1d8:	2800      	cmp	r0, #0
   1a1da:	d139      	bne.n	1a250 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1a1dc:	f856 3b04 	ldr.w	r3, [r6], #4
   1a1e0:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1a1e4:	3c04      	subs	r4, #4
   1a1e6:	e7f3      	b.n	1a1d0 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1a1e8:	f7ff ff8e 	bl	1a108 <nrf52k_flash_wait_ready>
   1a1ec:	bb68      	cbnz	r0, 1a24a <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1a1ee:	f025 0a03 	bic.w	sl, r5, #3
   1a1f2:	f8da 3000 	ldr.w	r3, [sl]
   1a1f6:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1a1f8:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1a1fc:	45a1      	cmp	r9, r4
   1a1fe:	d900      	bls.n	1a202 <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1a200:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1a202:	464a      	mov	r2, r9
   1a204:	4631      	mov	r1, r6
   1a206:	ab01      	add	r3, sp, #4
   1a208:	eb03 0008 	add.w	r0, r3, r8
   1a20c:	f7ff fbda 	bl	199c4 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1a210:	9b01      	ldr	r3, [sp, #4]
   1a212:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1a216:	444d      	add	r5, r9
        num_bytes -= cnt;
   1a218:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1a21c:	444e      	add	r6, r9
   1a21e:	e7d7      	b.n	1a1d0 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1a220:	b164      	cbz	r4, 1a23c <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1a222:	682b      	ldr	r3, [r5, #0]
   1a224:	a802      	add	r0, sp, #8
   1a226:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1a22a:	4622      	mov	r2, r4
   1a22c:	4631      	mov	r1, r6
   1a22e:	f7ff fbc9 	bl	199c4 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1a232:	f7ff ff69 	bl	1a108 <nrf52k_flash_wait_ready>
   1a236:	b9b8      	cbnz	r0, 1a268 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1a238:	9b01      	ldr	r3, [sp, #4]
   1a23a:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1a23c:	f7ff ff64 	bl	1a108 <nrf52k_flash_wait_ready>
   1a240:	4603      	mov	r3, r0
   1a242:	b138      	cbz	r0, 1a254 <nrf52k_flash_write+0xac>
        rc = -1;
   1a244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a248:	e004      	b.n	1a254 <nrf52k_flash_write+0xac>
    int rc = -1;
   1a24a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a24e:	e001      	b.n	1a254 <nrf52k_flash_write+0xac>
   1a250:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1a254:	4a07      	ldr	r2, [pc, #28]	; (1a274 <nrf52k_flash_write+0xcc>)
   1a256:	2100      	movs	r1, #0
   1a258:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1a25c:	b907      	cbnz	r7, 1a260 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1a25e:	b662      	cpsie	i
}
   1a260:	4618      	mov	r0, r3
   1a262:	b002      	add	sp, #8
   1a264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1a268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a26c:	e7f2      	b.n	1a254 <nrf52k_flash_write+0xac>
        return -1;
   1a26e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a272:	e7f5      	b.n	1a260 <nrf52k_flash_write+0xb8>
   1a274:	4001e000 	.word	0x4001e000

0001a278 <nrf52k_flash_read>:
{
   1a278:	b508      	push	{r3, lr}
   1a27a:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1a27c:	461a      	mov	r2, r3
   1a27e:	f7ff fba1 	bl	199c4 <memcpy>
}
   1a282:	2000      	movs	r0, #0
   1a284:	bd08      	pop	{r3, pc}
	...

0001a288 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1a288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1a28a:	f7ff fa3b 	bl	19704 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1a28e:	4b31      	ldr	r3, [pc, #196]	; (1a354 <nrf52_timer_handler+0xcc>)
   1a290:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1a294:	4b30      	ldr	r3, [pc, #192]	; (1a358 <nrf52_timer_handler+0xd0>)
   1a296:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1a298:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1a29c:	d225      	bcs.n	1a2ea <nrf52_timer_handler+0x62>
   1a29e:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1a2a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a2a4:	d227      	bcs.n	1a2f6 <nrf52_timer_handler+0x6e>
    result = x - y;
   1a2a6:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1a2a8:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1a2ac:	d129      	bne.n	1a302 <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1a2ae:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1a2b2:	4f29      	ldr	r7, [pc, #164]	; (1a358 <nrf52_timer_handler+0xd0>)
   1a2b4:	683c      	ldr	r4, [r7, #0]
   1a2b6:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1a2ba:	4628      	mov	r0, r5
   1a2bc:	f7ff f9b0 	bl	19620 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1a2c0:	4b24      	ldr	r3, [pc, #144]	; (1a354 <nrf52_timer_handler+0xcc>)
   1a2c2:	2200      	movs	r2, #0
   1a2c4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1a2c8:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1a2ca:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1a2cc:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1a2d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1a2d4:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1a2d6:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1a2d8:	f7ff fa1d 	bl	19716 <os_arch_in_critical>
   1a2dc:	bb28      	cbnz	r0, 1a32a <nrf52_timer_handler+0xa2>
   1a2de:	2300      	movs	r3, #0
   1a2e0:	461a      	mov	r2, r3
   1a2e2:	4619      	mov	r1, r3
   1a2e4:	4618      	mov	r0, r3
   1a2e6:	f7fd ff77 	bl	181d8 <__assert_func>
    assert(x <= 0xffffff);
   1a2ea:	2300      	movs	r3, #0
   1a2ec:	461a      	mov	r2, r3
   1a2ee:	4619      	mov	r1, r3
   1a2f0:	4618      	mov	r0, r3
   1a2f2:	f7fd ff71 	bl	181d8 <__assert_func>
    assert(y <= 0xffffff);
   1a2f6:	2300      	movs	r3, #0
   1a2f8:	461a      	mov	r2, r3
   1a2fa:	4619      	mov	r1, r3
   1a2fc:	4618      	mov	r0, r3
   1a2fe:	f7fd ff6b 	bl	181d8 <__assert_func>
        return (result | 0xff800000);
   1a302:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1a306:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1a30a:	e7d2      	b.n	1a2b2 <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1a30c:	2300      	movs	r3, #0
   1a30e:	461a      	mov	r2, r3
   1a310:	4619      	mov	r1, r3
   1a312:	4618      	mov	r0, r3
   1a314:	f7fd ff60 	bl	181d8 <__assert_func>
        return (result | 0xff800000);
   1a318:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1a31c:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1a320:	2a02      	cmp	r2, #2
   1a322:	dc13      	bgt.n	1a34c <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1a324:	4a0c      	ldr	r2, [pc, #48]	; (1a358 <nrf52_timer_handler+0xd0>)
   1a326:	6814      	ldr	r4, [r2, #0]
   1a328:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1a32a:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1a32e:	4a09      	ldr	r2, [pc, #36]	; (1a354 <nrf52_timer_handler+0xcc>)
   1a330:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1a334:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1a338:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1a33c:	d2e6      	bcs.n	1a30c <nrf52_timer_handler+0x84>
    result = x - y;
   1a33e:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1a340:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1a344:	d1e8      	bne.n	1a318 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1a346:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1a34a:	e7e9      	b.n	1a320 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1a34c:	4630      	mov	r0, r6
   1a34e:	f7ff f9df 	bl	19710 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1a352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a354:	40011000 	.word	0x40011000
   1a358:	2000dec4 	.word	0x2000dec4

0001a35c <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1a35c:	b538      	push	{r3, r4, r5, lr}
   1a35e:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1a360:	f7ff f9d9 	bl	19716 <os_arch_in_critical>
   1a364:	b1a0      	cbz	r0, 1a390 <os_tick_idle+0x34>

    if (ticks > 0) {
   1a366:	2d00      	cmp	r5, #0
   1a368:	d038      	beq.n	1a3dc <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1a36a:	4b20      	ldr	r3, [pc, #128]	; (1a3ec <os_tick_idle+0x90>)
   1a36c:	685b      	ldr	r3, [r3, #4]
   1a36e:	42ab      	cmp	r3, r5
   1a370:	d200      	bcs.n	1a374 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1a372:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1a374:	4b1d      	ldr	r3, [pc, #116]	; (1a3ec <os_tick_idle+0x90>)
   1a376:	689c      	ldr	r4, [r3, #8]
   1a378:	681a      	ldr	r2, [r3, #0]
   1a37a:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1a37e:	f7ff f9ca 	bl	19716 <os_arch_in_critical>
   1a382:	b9d0      	cbnz	r0, 1a3ba <os_tick_idle+0x5e>
   1a384:	2300      	movs	r3, #0
   1a386:	461a      	mov	r2, r3
   1a388:	4619      	mov	r1, r3
   1a38a:	4618      	mov	r0, r3
   1a38c:	f7fd ff24 	bl	181d8 <__assert_func>
    OS_ASSERT_CRITICAL();
   1a390:	2300      	movs	r3, #0
   1a392:	461a      	mov	r2, r3
   1a394:	4619      	mov	r1, r3
   1a396:	4618      	mov	r0, r3
   1a398:	f7fd ff1e 	bl	181d8 <__assert_func>
    assert(y <= 0xffffff);
   1a39c:	2300      	movs	r3, #0
   1a39e:	461a      	mov	r2, r3
   1a3a0:	4619      	mov	r1, r3
   1a3a2:	4618      	mov	r0, r3
   1a3a4:	f7fd ff18 	bl	181d8 <__assert_func>
        return (result | 0xff800000);
   1a3a8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1a3ac:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1a3b0:	2b02      	cmp	r3, #2
   1a3b2:	dc13      	bgt.n	1a3dc <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1a3b4:	4b0d      	ldr	r3, [pc, #52]	; (1a3ec <os_tick_idle+0x90>)
   1a3b6:	681c      	ldr	r4, [r3, #0]
   1a3b8:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1a3ba:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1a3be:	4b0c      	ldr	r3, [pc, #48]	; (1a3f0 <os_tick_idle+0x94>)
   1a3c0:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1a3c4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1a3c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a3cc:	d2e6      	bcs.n	1a39c <os_tick_idle+0x40>
    result = x - y;
   1a3ce:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1a3d0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1a3d4:	d1e8      	bne.n	1a3a8 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1a3d6:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1a3da:	e7e9      	b.n	1a3b0 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1a3dc:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1a3e0:	bf30      	wfi

    if (ticks > 0) {
   1a3e2:	b905      	cbnz	r5, 1a3e6 <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1a3e4:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1a3e6:	f7ff ff4f 	bl	1a288 <nrf52_timer_handler>
}
   1a3ea:	e7fb      	b.n	1a3e4 <os_tick_idle+0x88>
   1a3ec:	2000dec4 	.word	0x2000dec4
   1a3f0:	40011000 	.word	0x40011000

0001a3f4 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1a3f4:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1a3f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a3fa:	fbb3 f3f0 	udiv	r3, r3, r0
   1a3fe:	fb00 f303 	mul.w	r3, r0, r3
   1a402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a406:	d136      	bne.n	1a476 <os_tick_init+0x82>
   1a408:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1a40a:	4d1e      	ldr	r5, [pc, #120]	; (1a484 <os_tick_init+0x90>)
   1a40c:	2600      	movs	r6, #0
   1a40e:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1a410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a414:	fbb3 f0f0 	udiv	r0, r3, r0
   1a418:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1a41a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a41e:	fbb3 f0f0 	udiv	r0, r3, r0
   1a422:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1a424:	f7ff f96e 	bl	19704 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a428:	0164      	lsls	r4, r4, #5
   1a42a:	b2e4      	uxtb	r4, r4
   1a42c:	4b16      	ldr	r3, [pc, #88]	; (1a488 <os_tick_init+0x94>)
   1a42e:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a432:	4a16      	ldr	r2, [pc, #88]	; (1a48c <os_tick_init+0x98>)
   1a434:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a436:	4916      	ldr	r1, [pc, #88]	; (1a490 <os_tick_init+0x9c>)
   1a438:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a43c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a440:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1a442:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1a446:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1a44a:	2201      	movs	r2, #1
   1a44c:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1a44e:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1a450:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a454:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1a458:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1a45c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1a460:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1a464:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1a468:	6829      	ldr	r1, [r5, #0]
   1a46a:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1a46e:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1a470:	f7ff f94e 	bl	19710 <os_arch_restore_sr>
}
   1a474:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1a476:	2300      	movs	r3, #0
   1a478:	461a      	mov	r2, r3
   1a47a:	4619      	mov	r1, r3
   1a47c:	4618      	mov	r0, r3
   1a47e:	f7fd feab 	bl	181d8 <__assert_func>
   1a482:	bf00      	nop
   1a484:	2000dec4 	.word	0x2000dec4
   1a488:	e000e100 	.word	0xe000e100
   1a48c:	e000ed00 	.word	0xe000ed00
   1a490:	0001a289 	.word	0x0001a289

0001a494 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1a494:	2301      	movs	r3, #1
   1a496:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1a498:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1a49c:	4770      	bx	lr
	...

0001a4a0 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1a4a0:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1a4a2:	7883      	ldrb	r3, [r0, #2]
   1a4a4:	b393      	cbz	r3, 1a50c <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1a4a6:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a4a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a4ac:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1a4b0:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1a4b2:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1a4b6:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1a4ba:	b11d      	cbz	r5, 1a4c4 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1a4bc:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1a4c0:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1a4c4:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1a4c6:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1a4c8:	2b02      	cmp	r3, #2
   1a4ca:	dc0e      	bgt.n	1a4ea <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a4cc:	7842      	ldrb	r2, [r0, #1]
   1a4ce:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a4d0:	2b00      	cmp	r3, #0
   1a4d2:	db15      	blt.n	1a500 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a4d4:	f002 021f 	and.w	r2, r2, #31
   1a4d8:	095b      	lsrs	r3, r3, #5
   1a4da:	2101      	movs	r1, #1
   1a4dc:	fa01 f202 	lsl.w	r2, r1, r2
   1a4e0:	3340      	adds	r3, #64	; 0x40
   1a4e2:	491b      	ldr	r1, [pc, #108]	; (1a550 <nrf_timer_set_ocmp+0xb0>)
   1a4e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1a4e8:	e00a      	b.n	1a500 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1a4ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a4ee:	d208      	bcs.n	1a502 <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1a4f0:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1a4f4:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a4f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a4fc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1a500:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1a502:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1a506:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1a50a:	e7f5      	b.n	1a4f8 <nrf_timer_set_ocmp+0x58>
   1a50c:	460d      	mov	r5, r1
   1a50e:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1a510:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a512:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1a516:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1a51a:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1a51e:	2200      	movs	r2, #0
   1a520:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a524:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1a528:	f7ff ffb4 	bl	1a494 <nrf_read_timer_cntr>
   1a52c:	1b40      	subs	r0, r0, r5
   1a52e:	2800      	cmp	r0, #0
   1a530:	dbe6      	blt.n	1a500 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a532:	7862      	ldrb	r2, [r4, #1]
   1a534:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a536:	2b00      	cmp	r3, #0
   1a538:	dbe2      	blt.n	1a500 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a53a:	f002 021f 	and.w	r2, r2, #31
   1a53e:	095b      	lsrs	r3, r3, #5
   1a540:	2101      	movs	r1, #1
   1a542:	fa01 f202 	lsl.w	r2, r1, r2
   1a546:	3340      	adds	r3, #64	; 0x40
   1a548:	4901      	ldr	r1, [pc, #4]	; (1a550 <nrf_timer_set_ocmp+0xb0>)
   1a54a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1a54e:	e7d7      	b.n	1a500 <nrf_timer_set_ocmp+0x60>
   1a550:	e000e100 	.word	0xe000e100

0001a554 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a554:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1a558:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1a55c:	4770      	bx	lr

0001a55e <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a55e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a562:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1a566:	4770      	bx	lr

0001a568 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1a568:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1a56a:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a56c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a570:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1a572:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1a574:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1a578:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1a57c:	b1ad      	cbz	r5, 1a5aa <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1a57e:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1a582:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1a584:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1a588:	2500      	movs	r5, #0
   1a58a:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a58e:	7840      	ldrb	r0, [r0, #1]
   1a590:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1a592:	42aa      	cmp	r2, r5
   1a594:	db09      	blt.n	1a5aa <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a596:	f000 001f 	and.w	r0, r0, #31
   1a59a:	0952      	lsrs	r2, r2, #5
   1a59c:	2501      	movs	r5, #1
   1a59e:	fa05 f000 	lsl.w	r0, r5, r0
   1a5a2:	3240      	adds	r2, #64	; 0x40
   1a5a4:	4d04      	ldr	r5, [pc, #16]	; (1a5b8 <hal_timer_read_bsptimer+0x50>)
   1a5a6:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1a5aa:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1a5ae:	b904      	cbnz	r4, 1a5b2 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1a5b0:	b662      	cpsie	i

    return tcntr;
}
   1a5b2:	bc30      	pop	{r4, r5}
   1a5b4:	4770      	bx	lr
   1a5b6:	bf00      	nop
   1a5b8:	e000e100 	.word	0xe000e100

0001a5bc <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1a5bc:	b570      	push	{r4, r5, r6, lr}
   1a5be:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a5c0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a5c4:	b672      	cpsid	i
   1a5c6:	e013      	b.n	1a5f0 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1a5c8:	6928      	ldr	r0, [r5, #16]
   1a5ca:	f7ff ff63 	bl	1a494 <nrf_read_timer_cntr>
            delta = 0;
   1a5ce:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1a5d0:	68e3      	ldr	r3, [r4, #12]
   1a5d2:	1ac0      	subs	r0, r0, r3
   1a5d4:	4290      	cmp	r0, r2
   1a5d6:	db19      	blt.n	1a60c <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1a5d8:	6923      	ldr	r3, [r4, #16]
   1a5da:	b1a3      	cbz	r3, 1a606 <hal_timer_chk_queue+0x4a>
   1a5dc:	6962      	ldr	r2, [r4, #20]
   1a5de:	615a      	str	r2, [r3, #20]
   1a5e0:	6963      	ldr	r3, [r4, #20]
   1a5e2:	6922      	ldr	r2, [r4, #16]
   1a5e4:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1a5e6:	2300      	movs	r3, #0
   1a5e8:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1a5ea:	6863      	ldr	r3, [r4, #4]
   1a5ec:	68a0      	ldr	r0, [r4, #8]
   1a5ee:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1a5f0:	696c      	ldr	r4, [r5, #20]
   1a5f2:	b15c      	cbz	r4, 1a60c <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1a5f4:	78ab      	ldrb	r3, [r5, #2]
   1a5f6:	2b00      	cmp	r3, #0
   1a5f8:	d0e6      	beq.n	1a5c8 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1a5fa:	4628      	mov	r0, r5
   1a5fc:	f7ff ffb4 	bl	1a568 <hal_timer_read_bsptimer>
            delta = -3;
   1a600:	f06f 0202 	mvn.w	r2, #2
   1a604:	e7e4      	b.n	1a5d0 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1a606:	6963      	ldr	r3, [r4, #20]
   1a608:	61ab      	str	r3, [r5, #24]
   1a60a:	e7e9      	b.n	1a5e0 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1a60c:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1a60e:	b133      	cbz	r3, 1a61e <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1a610:	68d9      	ldr	r1, [r3, #12]
   1a612:	4628      	mov	r0, r5
   1a614:	f7ff ff44 	bl	1a4a0 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1a618:	b906      	cbnz	r6, 1a61c <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1a61a:	b662      	cpsie	i
}
   1a61c:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1a61e:	78ab      	ldrb	r3, [r5, #2]
   1a620:	b11b      	cbz	r3, 1a62a <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1a622:	6928      	ldr	r0, [r5, #16]
   1a624:	f7ff ff9b 	bl	1a55e <nrf_rtc_disable_ocmp>
   1a628:	e7f6      	b.n	1a618 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1a62a:	6928      	ldr	r0, [r5, #16]
   1a62c:	f7ff ff92 	bl	1a554 <nrf_timer_disable_ocmp>
   1a630:	e7f2      	b.n	1a618 <hal_timer_chk_queue+0x5c>

0001a632 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1a632:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1a634:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1a636:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1a63a:	b113      	cbz	r3, 1a642 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1a63c:	2300      	movs	r3, #0
   1a63e:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1a642:	6883      	ldr	r3, [r0, #8]
   1a644:	3301      	adds	r3, #1
   1a646:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1a648:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1a64c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1a650:	d100      	bne.n	1a654 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1a652:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1a654:	f7ff ffb2 	bl	1a5bc <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1a658:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1a65c:	e7f9      	b.n	1a652 <hal_timer_irq_handler+0x20>
	...

0001a660 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1a660:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1a662:	4802      	ldr	r0, [pc, #8]	; (1a66c <nrf52_timer0_irq_handler+0xc>)
   1a664:	f7ff ffe5 	bl	1a632 <hal_timer_irq_handler>
}
   1a668:	bd08      	pop	{r3, pc}
   1a66a:	bf00      	nop
   1a66c:	2000ded0 	.word	0x2000ded0

0001a670 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a670:	2805      	cmp	r0, #5
   1a672:	dc1c      	bgt.n	1a6ae <hal_timer_init+0x3e>
   1a674:	4b12      	ldr	r3, [pc, #72]	; (1a6c0 <hal_timer_init+0x50>)
   1a676:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a67a:	b1d3      	cbz	r3, 1a6b2 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1a67c:	781a      	ldrb	r2, [r3, #0]
   1a67e:	b9d2      	cbnz	r2, 1a6b6 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1a680:	b9d8      	cbnz	r0, 1a6ba <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1a682:	4a10      	ldr	r2, [pc, #64]	; (1a6c4 <hal_timer_init+0x54>)
   1a684:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1a686:	2208      	movs	r2, #8
   1a688:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a68a:	4b0f      	ldr	r3, [pc, #60]	; (1a6c8 <hal_timer_init+0x58>)
   1a68c:	f44f 7280 	mov.w	r2, #256	; 0x100
   1a690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1a694:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1a698:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a69c:	22e0      	movs	r2, #224	; 0xe0
   1a69e:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a6a2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1a6a6:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a6a8:	4a08      	ldr	r2, [pc, #32]	; (1a6cc <hal_timer_init+0x5c>)
   1a6aa:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1a6ac:	4770      	bx	lr

err:
    return rc;
   1a6ae:	2016      	movs	r0, #22
   1a6b0:	4770      	bx	lr
   1a6b2:	2016      	movs	r0, #22
   1a6b4:	4770      	bx	lr
   1a6b6:	2016      	movs	r0, #22
   1a6b8:	4770      	bx	lr
   1a6ba:	2016      	movs	r0, #22
}
   1a6bc:	4770      	bx	lr
   1a6be:	bf00      	nop
   1a6c0:	00020414 	.word	0x00020414
   1a6c4:	40008000 	.word	0x40008000
   1a6c8:	e000e100 	.word	0xe000e100
   1a6cc:	0001a661 	.word	0x0001a661

0001a6d0 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a6d0:	2805      	cmp	r0, #5
   1a6d2:	dc65      	bgt.n	1a7a0 <hal_timer_config+0xd0>
   1a6d4:	4b39      	ldr	r3, [pc, #228]	; (1a7bc <hal_timer_config+0xec>)
   1a6d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a6da:	2800      	cmp	r0, #0
   1a6dc:	d062      	beq.n	1a7a4 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1a6de:	4b38      	ldr	r3, [pc, #224]	; (1a7c0 <hal_timer_config+0xf0>)
   1a6e0:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1a6e4:	7803      	ldrb	r3, [r0, #0]
   1a6e6:	2b00      	cmp	r3, #0
   1a6e8:	d15e      	bne.n	1a7a8 <hal_timer_config+0xd8>
   1a6ea:	2900      	cmp	r1, #0
   1a6ec:	d05e      	beq.n	1a7ac <hal_timer_config+0xdc>
   1a6ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1a6f2:	d85d      	bhi.n	1a7b0 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1a6f4:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1a6f6:	2a00      	cmp	r2, #0
   1a6f8:	d05c      	beq.n	1a7b4 <hal_timer_config+0xe4>
{
   1a6fa:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1a6fc:	2901      	cmp	r1, #1
   1a6fe:	d013      	beq.n	1a728 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1a700:	2301      	movs	r3, #1
   1a702:	2b09      	cmp	r3, #9
   1a704:	d810      	bhi.n	1a728 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1a706:	2201      	movs	r2, #1
   1a708:	409a      	lsls	r2, r3
   1a70a:	428a      	cmp	r2, r1
   1a70c:	d202      	bcs.n	1a714 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1a70e:	3301      	adds	r3, #1
   1a710:	b2db      	uxtb	r3, r3
   1a712:	e7f6      	b.n	1a702 <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1a714:	1e5c      	subs	r4, r3, #1
   1a716:	2501      	movs	r5, #1
   1a718:	fa05 f404 	lsl.w	r4, r5, r4
   1a71c:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1a71e:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1a720:	428c      	cmp	r4, r1
   1a722:	d201      	bcs.n	1a728 <hal_timer_config+0x58>
                    prescaler -= 1;
   1a724:	3b01      	subs	r3, #1
   1a726:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1a728:	4a25      	ldr	r2, [pc, #148]	; (1a7c0 <hal_timer_config+0xf0>)
   1a72a:	411a      	asrs	r2, r3
   1a72c:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1a72e:	2201      	movs	r2, #1
   1a730:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a732:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a736:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1a738:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a73c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1a740:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1a744:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1a748:	d00c      	beq.n	1a764 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1a74a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a74e:	2100      	movs	r1, #0
   1a750:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1a754:	2101      	movs	r1, #1
   1a756:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1a758:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a75c:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1a760:	2a00      	cmp	r2, #0
   1a762:	d0f9      	beq.n	1a758 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1a764:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1a766:	2101      	movs	r1, #1
   1a768:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1a76a:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1a76c:	2500      	movs	r5, #0
   1a76e:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1a772:	2503      	movs	r5, #3
   1a774:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1a778:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1a77c:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1a77e:	7842      	ldrb	r2, [r0, #1]
   1a780:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a782:	2b00      	cmp	r3, #0
   1a784:	db07      	blt.n	1a796 <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a786:	f002 021f 	and.w	r2, r2, #31
   1a78a:	095b      	lsrs	r3, r3, #5
   1a78c:	fa01 f202 	lsl.w	r2, r1, r2
   1a790:	490c      	ldr	r1, [pc, #48]	; (1a7c4 <hal_timer_config+0xf4>)
   1a792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1a796:	b97c      	cbnz	r4, 1a7b8 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1a798:	b662      	cpsie	i

    return 0;
   1a79a:	2000      	movs	r0, #0

err:
    return rc;
}
   1a79c:	bc30      	pop	{r4, r5}
   1a79e:	4770      	bx	lr
    return rc;
   1a7a0:	2016      	movs	r0, #22
   1a7a2:	4770      	bx	lr
   1a7a4:	2016      	movs	r0, #22
   1a7a6:	4770      	bx	lr
   1a7a8:	2016      	movs	r0, #22
   1a7aa:	4770      	bx	lr
   1a7ac:	2016      	movs	r0, #22
   1a7ae:	4770      	bx	lr
   1a7b0:	2016      	movs	r0, #22
   1a7b2:	4770      	bx	lr
   1a7b4:	2016      	movs	r0, #22
}
   1a7b6:	4770      	bx	lr
    return 0;
   1a7b8:	2000      	movs	r0, #0
   1a7ba:	e7ef      	b.n	1a79c <hal_timer_config+0xcc>
   1a7bc:	00020414 	.word	0x00020414
   1a7c0:	00f42400 	.word	0x00f42400
   1a7c4:	e000e100 	.word	0xe000e100

0001a7c8 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1a7c8:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a7ca:	2805      	cmp	r0, #5
   1a7cc:	dc0c      	bgt.n	1a7e8 <hal_timer_read+0x20>
   1a7ce:	4b09      	ldr	r3, [pc, #36]	; (1a7f4 <hal_timer_read+0x2c>)
   1a7d0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a7d4:	b140      	cbz	r0, 1a7e8 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1a7d6:	7883      	ldrb	r3, [r0, #2]
   1a7d8:	b91b      	cbnz	r3, 1a7e2 <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1a7da:	6900      	ldr	r0, [r0, #16]
   1a7dc:	f7ff fe5a 	bl	1a494 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1a7e0:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1a7e2:	f7ff fec1 	bl	1a568 <hal_timer_read_bsptimer>
   1a7e6:	e7fb      	b.n	1a7e0 <hal_timer_read+0x18>
    assert(0);
   1a7e8:	2300      	movs	r3, #0
   1a7ea:	461a      	mov	r2, r3
   1a7ec:	4619      	mov	r1, r3
   1a7ee:	4618      	mov	r0, r3
   1a7f0:	f7fd fcf2 	bl	181d8 <__assert_func>
   1a7f4:	00020414 	.word	0x00020414

0001a7f8 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1a7f8:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1a7fa:	2100      	movs	r1, #0
   1a7fc:	4608      	mov	r0, r1
   1a7fe:	f7ff ff37 	bl	1a670 <hal_timer_init>
    assert(rc == 0);
   1a802:	b920      	cbnz	r0, 1a80e <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1a804:	4808      	ldr	r0, [pc, #32]	; (1a828 <nrf52_periph_create_timers+0x30>)
   1a806:	f7fd ff11 	bl	1862c <os_cputime_init>
    assert(rc == 0);
   1a80a:	b930      	cbnz	r0, 1a81a <nrf52_periph_create_timers+0x22>
#endif
}
   1a80c:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1a80e:	2300      	movs	r3, #0
   1a810:	461a      	mov	r2, r3
   1a812:	4619      	mov	r1, r3
   1a814:	4618      	mov	r0, r3
   1a816:	f7fd fcdf 	bl	181d8 <__assert_func>
    assert(rc == 0);
   1a81a:	2300      	movs	r3, #0
   1a81c:	461a      	mov	r2, r3
   1a81e:	4619      	mov	r1, r3
   1a820:	4618      	mov	r0, r3
   1a822:	f7fd fcd9 	bl	181d8 <__assert_func>
   1a826:	bf00      	nop
   1a828:	000f4240 	.word	0x000f4240

0001a82c <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1a82c:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1a82e:	4906      	ldr	r1, [pc, #24]	; (1a848 <nrf52_periph_create_i2c+0x1c>)
   1a830:	2001      	movs	r0, #1
   1a832:	f7fd f82b 	bl	1788c <hal_i2c_init>
    assert(rc == 0);
   1a836:	b900      	cbnz	r0, 1a83a <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1a838:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1a83a:	2300      	movs	r3, #0
   1a83c:	461a      	mov	r2, r3
   1a83e:	4619      	mov	r1, r3
   1a840:	4618      	mov	r0, r3
   1a842:	f7fd fcc9 	bl	181d8 <__assert_func>
   1a846:	bf00      	nop
   1a848:	0002042c 	.word	0x0002042c

0001a84c <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1a84c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1a84e:	2200      	movs	r2, #0
   1a850:	4905      	ldr	r1, [pc, #20]	; (1a868 <nrf52_periph_create_spi+0x1c>)
   1a852:	4610      	mov	r0, r2
   1a854:	f7fd fb4e 	bl	17ef4 <hal_spi_init>
    assert(rc == 0);
   1a858:	b900      	cbnz	r0, 1a85c <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1a85a:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1a85c:	2300      	movs	r3, #0
   1a85e:	461a      	mov	r2, r3
   1a860:	4619      	mov	r1, r3
   1a862:	4618      	mov	r0, r3
   1a864:	f7fd fcb8 	bl	181d8 <__assert_func>
   1a868:	00020438 	.word	0x00020438

0001a86c <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1a86c:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1a86e:	f7ff ffc3 	bl	1a7f8 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1a872:	f7ff ffdb 	bl	1a82c <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1a876:	f7ff ffe9 	bl	1a84c <nrf52_periph_create_spi>
}
   1a87a:	bd08      	pop	{r3, pc}

0001a87c <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1a87c:	4770      	bx	lr
	...

0001a880 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1a880:	4b08      	ldr	r3, [pc, #32]	; (1a8a4 <sensor_mgr_remove+0x24>)
   1a882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a884:	4282      	cmp	r2, r0
   1a886:	d104      	bne.n	1a892 <sensor_mgr_remove+0x12>
   1a888:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1a88c:	631a      	str	r2, [r3, #48]	; 0x30
   1a88e:	4770      	bx	lr
   1a890:	461a      	mov	r2, r3
   1a892:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1a896:	4283      	cmp	r3, r0
   1a898:	d1fa      	bne.n	1a890 <sensor_mgr_remove+0x10>
   1a89a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a89e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1a8a2:	4770      	bx	lr
   1a8a4:	2000def0 	.word	0x2000def0

0001a8a8 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1a8a8:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1a8aa:	6a03      	ldr	r3, [r0, #32]
   1a8ac:	b993      	cbnz	r3, 1a8d4 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a8ae:	4b15      	ldr	r3, [pc, #84]	; (1a904 <sensor_mgr_insert+0x5c>)
   1a8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1a8b2:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a8b4:	e002      	b.n	1a8bc <sensor_mgr_insert+0x14>
            prev = cursor;
   1a8b6:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a8b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a8bc:	2b00      	cmp	r3, #0
   1a8be:	d1fa      	bne.n	1a8b6 <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1a8c0:	b1c9      	cbz	r1, 1a8f6 <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1a8c2:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1a8c6:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1a8ca:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1a8ce:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a8d2:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a8d4:	4b0b      	ldr	r3, [pc, #44]	; (1a904 <sensor_mgr_insert+0x5c>)
   1a8d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1a8d8:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a8da:	2b00      	cmp	r3, #0
   1a8dc:	d0f0      	beq.n	1a8c0 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1a8de:	6a1a      	ldr	r2, [r3, #32]
   1a8e0:	2a00      	cmp	r2, #0
   1a8e2:	d0ed      	beq.n	1a8c0 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1a8e4:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1a8e6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1a8e8:	1b12      	subs	r2, r2, r4
   1a8ea:	2a00      	cmp	r2, #0
   1a8ec:	dbe8      	blt.n	1a8c0 <sensor_mgr_insert+0x18>
        prev = cursor;
   1a8ee:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a8f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a8f4:	e7f1      	b.n	1a8da <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1a8f6:	4b03      	ldr	r3, [pc, #12]	; (1a904 <sensor_mgr_insert+0x5c>)
   1a8f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a8fa:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1a8fe:	6318      	str	r0, [r3, #48]	; 0x30
   1a900:	e7e5      	b.n	1a8ce <sensor_mgr_insert+0x26>
   1a902:	bf00      	nop
   1a904:	2000def0 	.word	0x2000def0

0001a908 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1a908:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1a90a:	fab0 f080 	clz	r0, r0
   1a90e:	0940      	lsrs	r0, r0, #5
   1a910:	4770      	bx	lr
	...

0001a914 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1a914:	4b01      	ldr	r3, [pc, #4]	; (1a91c <sensor_mgr_evq_set+0x8>)
   1a916:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1a918:	4770      	bx	lr
   1a91a:	bf00      	nop
   1a91c:	2000def0 	.word	0x2000def0

0001a920 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1a920:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1a924:	e9d1 2300 	ldrd	r2, r3, [r1]
   1a928:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1a92c:	ea02 0b04 	and.w	fp, r2, r4
   1a930:	ea03 0c05 	and.w	ip, r3, r5
   1a934:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1a938:	ea0b 0200 	and.w	r2, fp, r0
   1a93c:	ea0c 0301 	and.w	r3, ip, r1
   1a940:	4313      	orrs	r3, r2
}
   1a942:	bf14      	ite	ne
   1a944:	2001      	movne	r0, #1
   1a946:	2000      	moveq	r0, #0
   1a948:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1a94c:	4770      	bx	lr

0001a94e <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1a94e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a952:	b083      	sub	sp, #12
   1a954:	4605      	mov	r5, r0
   1a956:	4689      	mov	r9, r1
   1a958:	4690      	mov	r8, r2
   1a95a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1a95e:	790b      	ldrb	r3, [r1, #4]
   1a960:	2b01      	cmp	r3, #1
   1a962:	d013      	beq.n	1a98c <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1a964:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1a966:	e000      	b.n	1a96a <sensor_read_data_func+0x1c>
   1a968:	6924      	ldr	r4, [r4, #16]
   1a96a:	b17c      	cbz	r4, 1a98c <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1a96c:	e9d4 0100 	ldrd	r0, r1, [r4]
   1a970:	ea00 0206 	and.w	r2, r0, r6
   1a974:	ea01 0307 	and.w	r3, r1, r7
   1a978:	4313      	orrs	r3, r2
   1a97a:	d0f5      	beq.n	1a968 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1a97c:	68a3      	ldr	r3, [r4, #8]
   1a97e:	68e1      	ldr	r1, [r4, #12]
   1a980:	e9cd 6700 	strd	r6, r7, [sp]
   1a984:	4642      	mov	r2, r8
   1a986:	4628      	mov	r0, r5
   1a988:	4798      	blx	r3
   1a98a:	e7ed      	b.n	1a968 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1a98c:	f8d9 3000 	ldr.w	r3, [r9]
   1a990:	b14b      	cbz	r3, 1a9a6 <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1a992:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1a996:	e9cd 6700 	strd	r6, r7, [sp]
   1a99a:	4642      	mov	r2, r8
   1a99c:	4628      	mov	r0, r5
   1a99e:	4798      	blx	r3
    }

    return (0);
}
   1a9a0:	b003      	add	sp, #12
   1a9a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1a9a6:	2000      	movs	r0, #0
   1a9a8:	e7fa      	b.n	1a9a0 <sensor_read_data_func+0x52>
	...

0001a9ac <sensor_base_ts_update_event>:
{
   1a9ac:	b530      	push	{r4, r5, lr}
   1a9ae:	b087      	sub	sp, #28
    ticks = os_time_get();
   1a9b0:	f7fe fe30 	bl	19614 <os_time_get>
   1a9b4:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1a9b6:	a901      	add	r1, sp, #4
   1a9b8:	a802      	add	r0, sp, #8
   1a9ba:	f7fe fe65 	bl	19688 <os_gettimeofday>
    if (rc) {
   1a9be:	b138      	cbz	r0, 1a9d0 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1a9c0:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1a9c4:	4621      	mov	r1, r4
   1a9c6:	4809      	ldr	r0, [pc, #36]	; (1a9ec <sensor_base_ts_update_event+0x40>)
   1a9c8:	f7fd fdac 	bl	18524 <os_callout_reset>
}
   1a9cc:	b007      	add	sp, #28
   1a9ce:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1a9d0:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1a9d4:	4d06      	ldr	r5, [pc, #24]	; (1a9f0 <sensor_base_ts_update_event+0x44>)
   1a9d6:	ab06      	add	r3, sp, #24
   1a9d8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1a9dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1a9e0:	9b01      	ldr	r3, [sp, #4]
   1a9e2:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1a9e4:	f7fd fe28 	bl	18638 <os_cputime_get32>
   1a9e8:	6168      	str	r0, [r5, #20]
   1a9ea:	e7eb      	b.n	1a9c4 <sensor_base_ts_update_event+0x18>
   1a9ec:	2000df24 	.word	0x2000df24
   1a9f0:	2000df48 	.word	0x2000df48

0001a9f4 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1a9f4:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1a9f8:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1a9fa:	f7fd fe1d 	bl	18638 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1a9fe:	4a0e      	ldr	r2, [pc, #56]	; (1aa38 <sensor_up_timestamp+0x44>)
   1aa00:	6955      	ldr	r5, [r2, #20]
   1aa02:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1aa04:	6460      	str	r0, [r4, #68]	; 0x44
   1aa06:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1aa08:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1aa0c:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1aa0e:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1aa10:	4b0a      	ldr	r3, [pc, #40]	; (1aa3c <sensor_up_timestamp+0x48>)
   1aa12:	fba3 c305 	umull	ip, r3, r3, r5
   1aa16:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1aa18:	eb10 0b03 	adds.w	fp, r0, r3
   1aa1c:	f141 0c00 	adc.w	ip, r1, #0
   1aa20:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1aa24:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1aa28:	4905      	ldr	r1, [pc, #20]	; (1aa40 <sensor_up_timestamp+0x4c>)
   1aa2a:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1aa2e:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1aa30:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1aa32:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1aa36:	bf00      	nop
   1aa38:	2000df48 	.word	0x2000df48
   1aa3c:	431bde83 	.word	0x431bde83
   1aa40:	000f4240 	.word	0x000f4240

0001aa44 <sensor_mgr_lock>:
{
   1aa44:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1aa46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1aa4a:	4804      	ldr	r0, [pc, #16]	; (1aa5c <sensor_mgr_lock+0x18>)
   1aa4c:	f7fe fa5c 	bl	18f08 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1aa50:	b108      	cbz	r0, 1aa56 <sensor_mgr_lock+0x12>
   1aa52:	2809      	cmp	r0, #9
   1aa54:	d000      	beq.n	1aa58 <sensor_mgr_lock+0x14>
}
   1aa56:	bd08      	pop	{r3, pc}
        return (0);
   1aa58:	2000      	movs	r0, #0
   1aa5a:	e7fc      	b.n	1aa56 <sensor_mgr_lock+0x12>
   1aa5c:	2000def0 	.word	0x2000def0

0001aa60 <sensor_mgr_unlock>:
{
   1aa60:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1aa62:	4802      	ldr	r0, [pc, #8]	; (1aa6c <sensor_mgr_unlock+0xc>)
   1aa64:	f7fe f9f4 	bl	18e50 <os_mutex_release>
}
   1aa68:	bd08      	pop	{r3, pc}
   1aa6a:	bf00      	nop
   1aa6c:	2000def0 	.word	0x2000def0

0001aa70 <sensor_mgr_evq_get>:
}
   1aa70:	4b01      	ldr	r3, [pc, #4]	; (1aa78 <sensor_mgr_evq_get+0x8>)
   1aa72:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1aa74:	4770      	bx	lr
   1aa76:	bf00      	nop
   1aa78:	2000def0 	.word	0x2000def0

0001aa7c <sensor_mgr_init>:
{
   1aa7c:	b570      	push	{r4, r5, r6, lr}
   1aa7e:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1aa80:	f7fd ff68 	bl	18954 <os_eventq_dflt_get>
   1aa84:	f7ff ff46 	bl	1a914 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1aa88:	4b1c      	ldr	r3, [pc, #112]	; (1aafc <sensor_mgr_init+0x80>)
   1aa8a:	9300      	str	r3, [sp, #0]
   1aa8c:	4b1c      	ldr	r3, [pc, #112]	; (1ab00 <sensor_mgr_init+0x84>)
   1aa8e:	2218      	movs	r2, #24
   1aa90:	2105      	movs	r1, #5
   1aa92:	481c      	ldr	r0, [pc, #112]	; (1ab04 <sensor_mgr_init+0x88>)
   1aa94:	f7fe f8e8 	bl	18c68 <os_mempool_init>
    assert(rc == OS_OK);
   1aa98:	bb50      	cbnz	r0, 1aaf0 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1aa9a:	f7ff ffe9 	bl	1aa70 <sensor_mgr_evq_get>
   1aa9e:	4e1a      	ldr	r6, [pc, #104]	; (1ab08 <sensor_mgr_init+0x8c>)
   1aaa0:	2300      	movs	r3, #0
   1aaa2:	4a1a      	ldr	r2, [pc, #104]	; (1ab0c <sensor_mgr_init+0x90>)
   1aaa4:	4601      	mov	r1, r0
   1aaa6:	4630      	mov	r0, r6
   1aaa8:	f7fd fd10 	bl	184cc <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1aaac:	ad04      	add	r5, sp, #16
   1aaae:	a903      	add	r1, sp, #12
   1aab0:	4628      	mov	r0, r5
   1aab2:	f7fe fde9 	bl	19688 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1aab6:	4c16      	ldr	r4, [pc, #88]	; (1ab10 <sensor_mgr_init+0x94>)
   1aab8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1aabc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1aac0:	9b03      	ldr	r3, [sp, #12]
   1aac2:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1aac4:	f7fd fdb8 	bl	18638 <os_cputime_get32>
   1aac8:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1aaca:	f7ff ffd1 	bl	1aa70 <sensor_mgr_evq_get>
   1aace:	4c11      	ldr	r4, [pc, #68]	; (1ab14 <sensor_mgr_init+0x98>)
   1aad0:	2300      	movs	r3, #0
   1aad2:	4a11      	ldr	r2, [pc, #68]	; (1ab18 <sensor_mgr_init+0x9c>)
   1aad4:	4601      	mov	r1, r0
   1aad6:	4620      	mov	r0, r4
   1aad8:	f7fd fcf8 	bl	184cc <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1aadc:	2180      	movs	r1, #128	; 0x80
   1aade:	4620      	mov	r0, r4
   1aae0:	f7fd fd20 	bl	18524 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1aae4:	f1a6 000c 	sub.w	r0, r6, #12
   1aae8:	f7fe f9a8 	bl	18e3c <os_mutex_init>
}
   1aaec:	b008      	add	sp, #32
   1aaee:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1aaf0:	2300      	movs	r3, #0
   1aaf2:	461a      	mov	r2, r3
   1aaf4:	4619      	mov	r1, r3
   1aaf6:	4618      	mov	r0, r3
   1aaf8:	f7fd fb6e 	bl	181d8 <__assert_func>
   1aafc:	0002043c 	.word	0x0002043c
   1ab00:	2000d9ec 	.word	0x2000d9ec
   1ab04:	2000da64 	.word	0x2000da64
   1ab08:	2000defc 	.word	0x2000defc
   1ab0c:	0001ace9 	.word	0x0001ace9
   1ab10:	2000df48 	.word	0x2000df48
   1ab14:	2000df24 	.word	0x2000df24
   1ab18:	0001a9ad 	.word	0x0001a9ad

0001ab1c <sensor_pkg_init>:
{
   1ab1c:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1ab1e:	f7ff ffad 	bl	1aa7c <sensor_mgr_init>
}
   1ab22:	bd08      	pop	{r3, pc}

0001ab24 <sensor_lock>:
{
   1ab24:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1ab26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ab2a:	3004      	adds	r0, #4
   1ab2c:	f7fe f9ec 	bl	18f08 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1ab30:	b108      	cbz	r0, 1ab36 <sensor_lock+0x12>
   1ab32:	2809      	cmp	r0, #9
   1ab34:	d000      	beq.n	1ab38 <sensor_lock+0x14>
}
   1ab36:	bd08      	pop	{r3, pc}
        return (0);
   1ab38:	2000      	movs	r0, #0
   1ab3a:	e7fc      	b.n	1ab36 <sensor_lock+0x12>

0001ab3c <sensor_unlock>:
{
   1ab3c:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1ab3e:	3004      	adds	r0, #4
   1ab40:	f7fe f986 	bl	18e50 <os_mutex_release>
}
   1ab44:	bd08      	pop	{r3, pc}

0001ab46 <sensor_update_nextrun>:
{
   1ab46:	b530      	push	{r4, r5, lr}
   1ab48:	b083      	sub	sp, #12
   1ab4a:	4604      	mov	r4, r0
   1ab4c:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1ab4e:	a901      	add	r1, sp, #4
   1ab50:	6a00      	ldr	r0, [r0, #32]
   1ab52:	f7fe fdb5 	bl	196c0 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1ab56:	4620      	mov	r0, r4
   1ab58:	f7ff ffe4 	bl	1ab24 <sensor_lock>
    sensor_mgr_remove(sensor);
   1ab5c:	4620      	mov	r0, r4
   1ab5e:	f7ff fe8f 	bl	1a880 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1ab62:	9b01      	ldr	r3, [sp, #4]
   1ab64:	441d      	add	r5, r3
   1ab66:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1ab68:	4620      	mov	r0, r4
   1ab6a:	f7ff fe9d 	bl	1a8a8 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1ab6e:	4620      	mov	r0, r4
   1ab70:	f7ff ffe4 	bl	1ab3c <sensor_unlock>
}
   1ab74:	b003      	add	sp, #12
   1ab76:	bd30      	pop	{r4, r5, pc}

0001ab78 <sensor_calc_nextrun_delta>:
{
   1ab78:	b538      	push	{r3, r4, r5, lr}
   1ab7a:	4605      	mov	r5, r0
   1ab7c:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1ab7e:	f7ff ffd1 	bl	1ab24 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1ab82:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1ab84:	1b0c      	subs	r4, r1, r4
   1ab86:	d404      	bmi.n	1ab92 <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1ab88:	4628      	mov	r0, r5
   1ab8a:	f7ff ffd7 	bl	1ab3c <sensor_unlock>
}
   1ab8e:	4620      	mov	r0, r4
   1ab90:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1ab92:	2400      	movs	r4, #0
   1ab94:	e7f8      	b.n	1ab88 <sensor_calc_nextrun_delta+0x10>
	...

0001ab98 <sensor_find_min_nextrun_sensor>:
{
   1ab98:	b570      	push	{r4, r5, r6, lr}
   1ab9a:	4606      	mov	r6, r0
   1ab9c:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1ab9e:	f7ff ff51 	bl	1aa44 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1aba2:	4b05      	ldr	r3, [pc, #20]	; (1abb8 <sensor_find_min_nextrun_sensor+0x20>)
   1aba4:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1aba6:	4631      	mov	r1, r6
   1aba8:	4620      	mov	r0, r4
   1abaa:	f7ff ffe5 	bl	1ab78 <sensor_calc_nextrun_delta>
   1abae:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1abb0:	f7ff ff56 	bl	1aa60 <sensor_mgr_unlock>
}
   1abb4:	4620      	mov	r0, r4
   1abb6:	bd70      	pop	{r4, r5, r6, pc}
   1abb8:	2000def0 	.word	0x2000def0

0001abbc <sensor_mgr_register>:
{
   1abbc:	b538      	push	{r3, r4, r5, lr}
   1abbe:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1abc0:	f7ff ff40 	bl	1aa44 <sensor_mgr_lock>
    if (rc != 0) {
   1abc4:	4604      	mov	r4, r0
   1abc6:	b108      	cbz	r0, 1abcc <sensor_mgr_register+0x10>
}
   1abc8:	4620      	mov	r0, r4
   1abca:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1abcc:	4628      	mov	r0, r5
   1abce:	f7ff ffa9 	bl	1ab24 <sensor_lock>
    if (rc != 0) {
   1abd2:	4604      	mov	r4, r0
   1abd4:	2800      	cmp	r0, #0
   1abd6:	d1f7      	bne.n	1abc8 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1abd8:	4628      	mov	r0, r5
   1abda:	f7ff fe65 	bl	1a8a8 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1abde:	4628      	mov	r0, r5
   1abe0:	f7ff ffac 	bl	1ab3c <sensor_unlock>
    sensor_mgr_unlock();
   1abe4:	f7ff ff3c 	bl	1aa60 <sensor_mgr_unlock>
    return (0);
   1abe8:	e7ee      	b.n	1abc8 <sensor_mgr_register+0xc>

0001abea <sensor_init>:
{
   1abea:	b538      	push	{r3, r4, r5, lr}
   1abec:	4604      	mov	r4, r0
   1abee:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1abf0:	2288      	movs	r2, #136	; 0x88
   1abf2:	2100      	movs	r1, #0
   1abf4:	f7fe fef3 	bl	199de <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1abf8:	1d20      	adds	r0, r4, #4
   1abfa:	f7fe f91f 	bl	18e3c <os_mutex_init>
    if (rc != 0) {
   1abfe:	4603      	mov	r3, r0
   1ac00:	b900      	cbnz	r0, 1ac04 <sensor_init+0x1a>
    sensor->s_dev = dev;
   1ac02:	6025      	str	r5, [r4, #0]
}
   1ac04:	4618      	mov	r0, r3
   1ac06:	bd38      	pop	{r3, r4, r5, pc}

0001ac08 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1ac08:	b530      	push	{r4, r5, lr}
   1ac0a:	b089      	sub	sp, #36	; 0x24
   1ac0c:	4604      	mov	r4, r0
   1ac0e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1ac12:	f7ff ff87 	bl	1ab24 <sensor_lock>
    if (rc) {
   1ac16:	4605      	mov	r5, r0
   1ac18:	b9f8      	cbnz	r0, 1ac5a <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1ac1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ac1c:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1ac1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ac20:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1ac22:	a904      	add	r1, sp, #16
   1ac24:	4620      	mov	r0, r4
   1ac26:	f7ff fe7b 	bl	1a920 <sensor_mgr_match_bytype>
   1ac2a:	b1e0      	cbz	r0, 1ac66 <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1ac2c:	4620      	mov	r0, r4
   1ac2e:	f7ff fee1 	bl	1a9f4 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1ac32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1ac34:	6819      	ldr	r1, [r3, #0]
   1ac36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ac38:	9302      	str	r3, [sp, #8]
   1ac3a:	ab06      	add	r3, sp, #24
   1ac3c:	9301      	str	r3, [sp, #4]
   1ac3e:	4b0b      	ldr	r3, [pc, #44]	; (1ac6c <sensor_read+0x64>)
   1ac40:	9300      	str	r3, [sp, #0]
   1ac42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1ac46:	4620      	mov	r0, r4
   1ac48:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1ac4a:	4605      	mov	r5, r0
   1ac4c:	b128      	cbz	r0, 1ac5a <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1ac4e:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1ac50:	b11b      	cbz	r3, 1ac5a <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1ac52:	4602      	mov	r2, r0
   1ac54:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1ac56:	4620      	mov	r0, r4
   1ac58:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1ac5a:	4620      	mov	r0, r4
   1ac5c:	f7ff ff6e 	bl	1ab3c <sensor_unlock>
    return (rc);
}
   1ac60:	4628      	mov	r0, r5
   1ac62:	b009      	add	sp, #36	; 0x24
   1ac64:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1ac66:	f06f 0503 	mvn.w	r5, #3
   1ac6a:	e7f6      	b.n	1ac5a <sensor_read+0x52>
   1ac6c:	0001a94f 	.word	0x0001a94f

0001ac70 <sensor_mgr_poll_bytype>:
{
   1ac70:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac72:	b085      	sub	sp, #20
   1ac74:	4616      	mov	r6, r2
   1ac76:	461f      	mov	r7, r3
   1ac78:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1ac7a:	b10c      	cbz	r4, 1ac80 <sensor_mgr_poll_bytype+0x10>
   1ac7c:	8aa3      	ldrh	r3, [r4, #20]
   1ac7e:	b9cb      	cbnz	r3, 1acb4 <sensor_mgr_poll_bytype+0x44>
   1ac80:	4632      	mov	r2, r6
   1ac82:	463b      	mov	r3, r7
   1ac84:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1ac86:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ac8a:	9102      	str	r1, [sp, #8]
   1ac8c:	2100      	movs	r1, #0
   1ac8e:	9101      	str	r1, [sp, #4]
   1ac90:	9100      	str	r1, [sp, #0]
   1ac92:	f7ff ffb9 	bl	1ac08 <sensor_read>
        sensor_lock(sensor);
   1ac96:	4628      	mov	r0, r5
   1ac98:	f7ff ff44 	bl	1ab24 <sensor_lock>
        if (stt) {
   1ac9c:	b12c      	cbz	r4, 1acaa <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1ac9e:	8aa3      	ldrh	r3, [r4, #20]
   1aca0:	b91b      	cbnz	r3, 1acaa <sensor_mgr_poll_bytype+0x3a>
   1aca2:	8a63      	ldrh	r3, [r4, #18]
   1aca4:	b10b      	cbz	r3, 1acaa <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1aca6:	3b01      	subs	r3, #1
   1aca8:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1acaa:	4628      	mov	r0, r5
   1acac:	f7ff ff46 	bl	1ab3c <sensor_unlock>
}
   1acb0:	b005      	add	sp, #20
   1acb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1acb4:	3b01      	subs	r3, #1
   1acb6:	82a3      	strh	r3, [r4, #20]
}
   1acb8:	e7fa      	b.n	1acb0 <sensor_mgr_poll_bytype+0x40>

0001acba <sensor_poll_per_type_trait>:
{
   1acba:	b570      	push	{r4, r5, r6, lr}
   1acbc:	b082      	sub	sp, #8
   1acbe:	4605      	mov	r5, r0
   1acc0:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1acc2:	f7ff ff2f 	bl	1ab24 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1acc6:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1acc8:	e007      	b.n	1acda <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1acca:	e9d4 2300 	ldrd	r2, r3, [r4]
   1acce:	9601      	str	r6, [sp, #4]
   1acd0:	9400      	str	r4, [sp, #0]
   1acd2:	4628      	mov	r0, r5
   1acd4:	f7ff ffcc 	bl	1ac70 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1acd8:	6a24      	ldr	r4, [r4, #32]
   1acda:	2c00      	cmp	r4, #0
   1acdc:	d1f5      	bne.n	1acca <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1acde:	4628      	mov	r0, r5
   1ace0:	f7ff ff2c 	bl	1ab3c <sensor_unlock>
}
   1ace4:	b002      	add	sp, #8
   1ace6:	bd70      	pop	{r4, r5, r6, pc}

0001ace8 <sensor_mgr_wakeup_event>:
{
   1ace8:	b570      	push	{r4, r5, r6, lr}
   1acea:	b084      	sub	sp, #16
    now = os_time_get();
   1acec:	f7fe fc92 	bl	19614 <os_time_get>
   1acf0:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1acf2:	f7ff fea7 	bl	1aa44 <sensor_mgr_lock>
   1acf6:	e012      	b.n	1ad1e <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1acf8:	4620      	mov	r0, r4
   1acfa:	f7ff ff1f 	bl	1ab3c <sensor_unlock>
            sensor_mgr_unlock();
   1acfe:	f7ff feaf 	bl	1aa60 <sensor_mgr_unlock>
}
   1ad02:	b004      	add	sp, #16
   1ad04:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1ad06:	4632      	mov	r2, r6
   1ad08:	4629      	mov	r1, r5
   1ad0a:	4620      	mov	r0, r4
   1ad0c:	f7ff ffd5 	bl	1acba <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1ad10:	4629      	mov	r1, r5
   1ad12:	4620      	mov	r0, r4
   1ad14:	f7ff ff17 	bl	1ab46 <sensor_update_nextrun>
        sensor_unlock(cursor);
   1ad18:	4620      	mov	r0, r4
   1ad1a:	f7ff ff0f 	bl	1ab3c <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1ad1e:	a903      	add	r1, sp, #12
   1ad20:	4628      	mov	r0, r5
   1ad22:	f7ff ff39 	bl	1ab98 <sensor_find_min_nextrun_sensor>
   1ad26:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1ad28:	f7ff fefc 	bl	1ab24 <sensor_lock>
        if (!cursor->s_poll_rate) {
   1ad2c:	6a23      	ldr	r3, [r4, #32]
   1ad2e:	2b00      	cmp	r3, #0
   1ad30:	d0e2      	beq.n	1acf8 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1ad32:	9e03      	ldr	r6, [sp, #12]
   1ad34:	b96e      	cbnz	r6, 1ad52 <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1ad36:	4620      	mov	r0, r4
   1ad38:	f7ff fde6 	bl	1a908 <sensor_type_traits_empty>
   1ad3c:	2800      	cmp	r0, #0
   1ad3e:	d0e2      	beq.n	1ad06 <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1ad40:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1ad44:	9501      	str	r5, [sp, #4]
   1ad46:	2100      	movs	r1, #0
   1ad48:	9100      	str	r1, [sp, #0]
   1ad4a:	4620      	mov	r0, r4
   1ad4c:	f7ff ff90 	bl	1ac70 <sensor_mgr_poll_bytype>
   1ad50:	e7de      	b.n	1ad10 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1ad52:	f7ff fe85 	bl	1aa60 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1ad56:	9903      	ldr	r1, [sp, #12]
   1ad58:	4801      	ldr	r0, [pc, #4]	; (1ad60 <sensor_mgr_wakeup_event+0x78>)
   1ad5a:	f7fd fbe3 	bl	18524 <os_callout_reset>
   1ad5e:	e7d0      	b.n	1ad02 <sensor_mgr_wakeup_event+0x1a>
   1ad60:	2000defc 	.word	0x2000defc

0001ad64 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1ad64:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1ad66:	2101      	movs	r1, #1
   1ad68:	4806      	ldr	r0, [pc, #24]	; (1ad84 <init_sensor_coap+0x20>)
   1ad6a:	f7fe faf1 	bl	19350 <os_sem_init>
    assert(rc == OS_OK);
   1ad6e:	b918      	cbnz	r0, 1ad78 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1ad70:	4b05      	ldr	r3, [pc, #20]	; (1ad88 <init_sensor_coap+0x24>)
   1ad72:	2201      	movs	r2, #1
   1ad74:	701a      	strb	r2, [r3, #0]
}
   1ad76:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1ad78:	2300      	movs	r3, #0
   1ad7a:	461a      	mov	r2, r3
   1ad7c:	4619      	mov	r1, r3
   1ad7e:	4618      	mov	r0, r3
   1ad80:	f7fd fa2a 	bl	181d8 <__assert_func>
   1ad84:	2000da80 	.word	0x2000da80
   1ad88:	2000da88 	.word	0x2000da88

0001ad8c <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1ad8c:	4b04      	ldr	r3, [pc, #16]	; (1ada0 <is_sensor_node+0x14>)
   1ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ad92:	4313      	orrs	r3, r2
   1ad94:	d101      	bne.n	1ad9a <is_sensor_node+0xe>
    return false;
   1ad96:	2000      	movs	r0, #0
}
   1ad98:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1ad9a:	2001      	movs	r0, #1
   1ad9c:	4770      	bx	lr
   1ad9e:	bf00      	nop
   1ada0:	2000daa0 	.word	0x2000daa0

0001ada4 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1ada4:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1ada6:	4b16      	ldr	r3, [pc, #88]	; (1ae00 <get_hardware_id+0x5c>)
   1ada8:	681b      	ldr	r3, [r3, #0]
   1adaa:	b10b      	cbz	r3, 1adb0 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1adac:	4815      	ldr	r0, [pc, #84]	; (1ae04 <get_hardware_id+0x60>)
   1adae:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1adb0:	f000 fcee 	bl	1b790 <hal_bsp_hw_id_len>
   1adb4:	4b12      	ldr	r3, [pc, #72]	; (1ae00 <get_hardware_id+0x5c>)
   1adb6:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1adb8:	280b      	cmp	r0, #11
   1adba:	d914      	bls.n	1ade6 <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1adbc:	210c      	movs	r1, #12
   1adbe:	4811      	ldr	r0, [pc, #68]	; (1ae04 <get_hardware_id+0x60>)
   1adc0:	f000 fce8 	bl	1b794 <hal_bsp_hw_id>
   1adc4:	4b0e      	ldr	r3, [pc, #56]	; (1ae00 <get_hardware_id+0x5c>)
   1adc6:	6018      	str	r0, [r3, #0]
   1adc8:	2800      	cmp	r0, #0
   1adca:	dd12      	ble.n	1adf2 <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1adcc:	490e      	ldr	r1, [pc, #56]	; (1ae08 <get_hardware_id+0x64>)
   1adce:	480f      	ldr	r0, [pc, #60]	; (1ae0c <get_hardware_id+0x68>)
   1add0:	f7fc fb3a 	bl	17448 <console_printf>
   1add4:	4b0a      	ldr	r3, [pc, #40]	; (1ae00 <get_hardware_id+0x5c>)
   1add6:	6819      	ldr	r1, [r3, #0]
   1add8:	480a      	ldr	r0, [pc, #40]	; (1ae04 <get_hardware_id+0x60>)
   1adda:	f7fc fac5 	bl	17368 <console_dump>
   1adde:	480c      	ldr	r0, [pc, #48]	; (1ae10 <get_hardware_id+0x6c>)
   1ade0:	f7fc fb32 	bl	17448 <console_printf>
   1ade4:	e7e2      	b.n	1adac <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1ade6:	2300      	movs	r3, #0
   1ade8:	461a      	mov	r2, r3
   1adea:	4619      	mov	r1, r3
   1adec:	4618      	mov	r0, r3
   1adee:	f7fd f9f3 	bl	181d8 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1adf2:	2300      	movs	r3, #0
   1adf4:	461a      	mov	r2, r3
   1adf6:	4619      	mov	r1, r3
   1adf8:	4618      	mov	r0, r3
   1adfa:	f7fd f9ed 	bl	181d8 <__assert_func>
   1adfe:	bf00      	nop
   1ae00:	2000da98 	.word	0x2000da98
   1ae04:	2000da8c 	.word	0x2000da8c
   1ae08:	000204e0 	.word	0x000204e0
   1ae0c:	00020498 	.word	0x00020498
   1ae10:	000205f8 	.word	0x000205f8

0001ae14 <is_collector_node>:
bool is_collector_node(void) {
   1ae14:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1ae16:	f7ff ffc5 	bl	1ada4 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1ae1a:	220c      	movs	r2, #12
   1ae1c:	4903      	ldr	r1, [pc, #12]	; (1ae2c <is_collector_node+0x18>)
   1ae1e:	f7fe fdad 	bl	1997c <memcmp>
   1ae22:	b108      	cbz	r0, 1ae28 <is_collector_node+0x14>
    return false; 
   1ae24:	2000      	movs	r0, #0
}
   1ae26:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1ae28:	2001      	movs	r0, #1
   1ae2a:	e7fc      	b.n	1ae26 <is_collector_node+0x12>
   1ae2c:	00020450 	.word	0x00020450

0001ae30 <is_standalone_node>:
bool is_standalone_node(void) {
   1ae30:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1ae32:	f7ff ffef 	bl	1ae14 <is_collector_node>
   1ae36:	b928      	cbnz	r0, 1ae44 <is_standalone_node+0x14>
   1ae38:	4604      	mov	r4, r0
   1ae3a:	f7ff ffa7 	bl	1ad8c <is_sensor_node>
   1ae3e:	b910      	cbnz	r0, 1ae46 <is_standalone_node+0x16>
   1ae40:	2401      	movs	r4, #1
   1ae42:	e000      	b.n	1ae46 <is_standalone_node+0x16>
    return false;
   1ae44:	2400      	movs	r4, #0
}
   1ae46:	4620      	mov	r0, r4
   1ae48:	bd10      	pop	{r4, pc}
	...

0001ae4c <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1ae4c:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1ae4e:	2400      	movs	r4, #0
   1ae50:	2c04      	cmp	r4, #4
   1ae52:	dc15      	bgt.n	1ae80 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1ae54:	4b23      	ldr	r3, [pc, #140]	; (1aee4 <sensor_network_init+0x98>)
   1ae56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1ae5e:	4922      	ldr	r1, [pc, #136]	; (1aee8 <sensor_network_init+0x9c>)
   1ae60:	4822      	ldr	r0, [pc, #136]	; (1aeec <sensor_network_init+0xa0>)
   1ae62:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1ae66:	f000 fcaf 	bl	1b7c8 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1ae6a:	3001      	adds	r0, #1
   1ae6c:	280b      	cmp	r0, #11
   1ae6e:	dc01      	bgt.n	1ae74 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1ae70:	3401      	adds	r4, #1
   1ae72:	e7ed      	b.n	1ae50 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1ae74:	2300      	movs	r3, #0
   1ae76:	461a      	mov	r2, r3
   1ae78:	4619      	mov	r1, r3
   1ae7a:	4618      	mov	r0, r3
   1ae7c:	f7fd f9ac 	bl	181d8 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1ae80:	f7ff ff90 	bl	1ada4 <get_hardware_id>
   1ae84:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1ae86:	2400      	movs	r4, #0
   1ae88:	2c04      	cmp	r4, #4
   1ae8a:	dc19      	bgt.n	1aec0 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1ae8c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ae90:	0093      	lsls	r3, r2, #2
   1ae92:	220c      	movs	r2, #12
   1ae94:	4916      	ldr	r1, [pc, #88]	; (1aef0 <sensor_network_init+0xa4>)
   1ae96:	4419      	add	r1, r3
   1ae98:	4628      	mov	r0, r5
   1ae9a:	f7fe fd6f 	bl	1997c <memcmp>
   1ae9e:	b108      	cbz	r0, 1aea4 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1aea0:	3401      	adds	r4, #1
   1aea2:	e7f1      	b.n	1ae88 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1aea4:	4b0f      	ldr	r3, [pc, #60]	; (1aee4 <sensor_network_init+0x98>)
   1aea6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1aeaa:	e9d3 0100 	ldrd	r0, r1, [r3]
   1aeae:	4b11      	ldr	r3, [pc, #68]	; (1aef4 <sensor_network_init+0xa8>)
   1aeb0:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1aeb4:	1c63      	adds	r3, r4, #1
   1aeb6:	4a10      	ldr	r2, [pc, #64]	; (1aef8 <sensor_network_init+0xac>)
   1aeb8:	4910      	ldr	r1, [pc, #64]	; (1aefc <sensor_network_init+0xb0>)
   1aeba:	4811      	ldr	r0, [pc, #68]	; (1af00 <sensor_network_init+0xb4>)
   1aebc:	f7fc fac4 	bl	17448 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1aec0:	f7ff ffa8 	bl	1ae14 <is_collector_node>
   1aec4:	b940      	cbnz	r0, 1aed8 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1aec6:	f7ff ffb3 	bl	1ae30 <is_standalone_node>
   1aeca:	b150      	cbz	r0, 1aee2 <sensor_network_init+0x96>
   1aecc:	4a0a      	ldr	r2, [pc, #40]	; (1aef8 <sensor_network_init+0xac>)
   1aece:	490b      	ldr	r1, [pc, #44]	; (1aefc <sensor_network_init+0xb0>)
   1aed0:	480c      	ldr	r0, [pc, #48]	; (1af04 <sensor_network_init+0xb8>)
   1aed2:	f7fc fab9 	bl	17448 <console_printf>
}
   1aed6:	e004      	b.n	1aee2 <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1aed8:	4a07      	ldr	r2, [pc, #28]	; (1aef8 <sensor_network_init+0xac>)
   1aeda:	4908      	ldr	r1, [pc, #32]	; (1aefc <sensor_network_init+0xb0>)
   1aedc:	480a      	ldr	r0, [pc, #40]	; (1af08 <sensor_network_init+0xbc>)
   1aede:	f7fc fab3 	bl	17448 <console_printf>
}
   1aee2:	bd38      	pop	{r3, r4, r5, pc}
   1aee4:	000204f8 	.word	0x000204f8
   1aee8:	000204a0 	.word	0x000204a0
   1aeec:	20000130 	.word	0x20000130
   1aef0:	0002045c 	.word	0x0002045c
   1aef4:	2000daa0 	.word	0x2000daa0
   1aef8:	000204a8 	.word	0x000204a8
   1aefc:	000204e0 	.word	0x000204e0
   1af00:	000204b0 	.word	0x000204b0
   1af04:	000204d0 	.word	0x000204d0
   1af08:	000204c0 	.word	0x000204c0

0001af0c <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1af0c:	b530      	push	{r4, r5, lr}
   1af0e:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1af10:	2200      	movs	r2, #0
   1af12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1af16:	4810      	ldr	r0, [pc, #64]	; (1af58 <config_device+0x4c>)
   1af18:	f7fd fc2c 	bl	18774 <os_dev_open>
    assert(dev != NULL);
   1af1c:	b178      	cbz	r0, 1af3e <config_device+0x32>
   1af1e:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1af20:	4668      	mov	r0, sp
   1af22:	f000 f86c 	bl	1affe <temp_stub_default_cfg>
    assert(rc == 0);
   1af26:	b980      	cbnz	r0, 1af4a <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1af28:	4669      	mov	r1, sp
   1af2a:	4620      	mov	r0, r4
   1af2c:	f000 f900 	bl	1b130 <temp_stub_config>
   1af30:	4605      	mov	r5, r0
    os_dev_close(dev);
   1af32:	4620      	mov	r0, r4
   1af34:	f7fd fc40 	bl	187b8 <os_dev_close>
    return rc;
}
   1af38:	4628      	mov	r0, r5
   1af3a:	b003      	add	sp, #12
   1af3c:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1af3e:	2300      	movs	r3, #0
   1af40:	461a      	mov	r2, r3
   1af42:	4619      	mov	r1, r3
   1af44:	4618      	mov	r0, r3
   1af46:	f7fd f947 	bl	181d8 <__assert_func>
    assert(rc == 0);
   1af4a:	2300      	movs	r3, #0
   1af4c:	461a      	mov	r2, r3
   1af4e:	4619      	mov	r1, r3
   1af50:	4618      	mov	r0, r3
   1af52:	f7fd f941 	bl	181d8 <__assert_func>
   1af56:	bf00      	nop
   1af58:	00020520 	.word	0x00020520

0001af5c <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1af5c:	b510      	push	{r4, lr}
   1af5e:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1af60:	4c10      	ldr	r4, [pc, #64]	; (1afa4 <temp_stub_create+0x48>)
   1af62:	4621      	mov	r1, r4
   1af64:	4810      	ldr	r0, [pc, #64]	; (1afa8 <temp_stub_create+0x4c>)
   1af66:	f7fc fa6f 	bl	17448 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1af6a:	4b10      	ldr	r3, [pc, #64]	; (1afac <temp_stub_create+0x50>)
   1af6c:	9301      	str	r3, [sp, #4]
   1af6e:	4b10      	ldr	r3, [pc, #64]	; (1afb0 <temp_stub_create+0x54>)
   1af70:	9300      	str	r3, [sp, #0]
   1af72:	2300      	movs	r3, #0
   1af74:	2201      	movs	r2, #1
   1af76:	4621      	mov	r1, r4
   1af78:	480e      	ldr	r0, [pc, #56]	; (1afb4 <temp_stub_create+0x58>)
   1af7a:	f7fd fbb5 	bl	186e8 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1af7e:	b920      	cbnz	r0, 1af8a <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1af80:	f7ff ffc4 	bl	1af0c <config_device>
    assert(rc == 0);
   1af84:	b938      	cbnz	r0, 1af96 <temp_stub_create+0x3a>
}
   1af86:	b002      	add	sp, #8
   1af88:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1af8a:	2300      	movs	r3, #0
   1af8c:	461a      	mov	r2, r3
   1af8e:	4619      	mov	r1, r3
   1af90:	4618      	mov	r0, r3
   1af92:	f7fd f921 	bl	181d8 <__assert_func>
    assert(rc == 0);
   1af96:	2300      	movs	r3, #0
   1af98:	461a      	mov	r2, r3
   1af9a:	4619      	mov	r1, r3
   1af9c:	4618      	mov	r0, r3
   1af9e:	f7fd f91b 	bl	181d8 <__assert_func>
   1afa2:	bf00      	nop
   1afa4:	00020520 	.word	0x00020520
   1afa8:	0002052c 	.word	0x0002052c
   1afac:	2000dae0 	.word	0x2000dae0
   1afb0:	0001b00d 	.word	0x0001b00d
   1afb4:	2000daf8 	.word	0x2000daf8

0001afb8 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1afb8:	2000      	movs	r0, #0
   1afba:	4770      	bx	lr

0001afbc <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1afbc:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1afc0:	2100      	movs	r1, #0
   1afc2:	ea50 0301 	orrs.w	r3, r0, r1
   1afc6:	d004      	beq.n	1afd2 <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1afc8:	9b00      	ldr	r3, [sp, #0]
   1afca:	2201      	movs	r2, #1
   1afcc:	701a      	strb	r2, [r3, #0]
    return (0);
   1afce:	2000      	movs	r0, #0
   1afd0:	4770      	bx	lr
err:
    return (rc);
   1afd2:	f06f 0001 	mvn.w	r0, #1
}
   1afd6:	4770      	bx	lr

0001afd8 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1afd8:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1afda:	b120      	cbz	r0, 1afe6 <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1afdc:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1afe0:	d007      	beq.n	1aff2 <temp_stub_open+0x1a>
}
   1afe2:	2000      	movs	r0, #0
   1afe4:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1afe6:	2300      	movs	r3, #0
   1afe8:	461a      	mov	r2, r3
   1afea:	4619      	mov	r1, r3
   1afec:	4618      	mov	r0, r3
   1afee:	f7fd f8f3 	bl	181d8 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1aff2:	2300      	movs	r3, #0
   1aff4:	461a      	mov	r2, r3
   1aff6:	4619      	mov	r1, r3
   1aff8:	4618      	mov	r0, r3
   1affa:	f7fd f8ed 	bl	181d8 <__assert_func>

0001affe <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1affe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b002:	2300      	movs	r3, #0
   1b004:	e9c0 2300 	strd	r2, r3, [r0]
}
   1b008:	2000      	movs	r0, #0
   1b00a:	4770      	bx	lr

0001b00c <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1b00e:	b379      	cbz	r1, 1b070 <temp_stub_init+0x64>
   1b010:	460d      	mov	r5, r1
   1b012:	b380      	cbz	r0, 1b076 <temp_stub_init+0x6a>
   1b014:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1b016:	30b0      	adds	r0, #176	; 0xb0
   1b018:	f7ff fff1 	bl	1affe <temp_stub_default_cfg>
    if (rc) { goto err; }
   1b01c:	4603      	mov	r3, r0
   1b01e:	b108      	cbz	r0, 1b024 <temp_stub_init+0x18>
}
   1b020:	4618      	mov	r0, r3
   1b022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1b024:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1b028:	4621      	mov	r1, r4
   1b02a:	4630      	mov	r0, r6
   1b02c:	f7ff fddd 	bl	1abea <sensor_init>
    if (rc != 0) { goto err; }
   1b030:	4603      	mov	r3, r0
   1b032:	2800      	cmp	r0, #0
   1b034:	d1f4      	bne.n	1b020 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1b036:	4b11      	ldr	r3, [pc, #68]	; (1b07c <temp_stub_init+0x70>)
   1b038:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1b03a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1b03e:	2300      	movs	r3, #0
   1b040:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1b044:	682a      	ldr	r2, [r5, #0]
   1b046:	686f      	ldr	r7, [r5, #4]
   1b048:	68a8      	ldr	r0, [r5, #8]
   1b04a:	68e9      	ldr	r1, [r5, #12]
   1b04c:	6722      	str	r2, [r4, #112]	; 0x70
   1b04e:	6767      	str	r7, [r4, #116]	; 0x74
   1b050:	67a0      	str	r0, [r4, #120]	; 0x78
   1b052:	67e1      	str	r1, [r4, #124]	; 0x7c
   1b054:	692a      	ldr	r2, [r5, #16]
   1b056:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1b05a:	4630      	mov	r0, r6
   1b05c:	f7ff fdae 	bl	1abbc <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1b060:	4603      	mov	r3, r0
   1b062:	2800      	cmp	r0, #0
   1b064:	d1dc      	bne.n	1b020 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1b066:	4a06      	ldr	r2, [pc, #24]	; (1b080 <temp_stub_init+0x74>)
   1b068:	6022      	str	r2, [r4, #0]
   1b06a:	4a06      	ldr	r2, [pc, #24]	; (1b084 <temp_stub_init+0x78>)
   1b06c:	60e2      	str	r2, [r4, #12]
    return (0);
   1b06e:	e7d7      	b.n	1b020 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1b070:	f06f 0308 	mvn.w	r3, #8
   1b074:	e7d4      	b.n	1b020 <temp_stub_init+0x14>
   1b076:	f06f 0308 	mvn.w	r3, #8
   1b07a:	e7d1      	b.n	1b020 <temp_stub_init+0x14>
   1b07c:	0002053c 	.word	0x0002053c
   1b080:	0001afd9 	.word	0x0001afd9
   1b084:	0001afb9 	.word	0x0001afb9

0001b088 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1b088:	b538      	push	{r3, r4, r5, lr}
   1b08a:	460d      	mov	r5, r1
   1b08c:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1b08e:	4808      	ldr	r0, [pc, #32]	; (1b0b0 <temp_stub_get_raw_temperature+0x28>)
   1b090:	f7fc f9da 	bl	17448 <console_printf>
    assert(temp_sum);
   1b094:	b134      	cbz	r4, 1b0a4 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1b096:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1b09a:	fb01 f105 	mul.w	r1, r1, r5
   1b09e:	6021      	str	r1, [r4, #0]
}
   1b0a0:	2000      	movs	r0, #0
   1b0a2:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1b0a4:	2300      	movs	r3, #0
   1b0a6:	461a      	mov	r2, r3
   1b0a8:	4619      	mov	r1, r3
   1b0aa:	4618      	mov	r0, r3
   1b0ac:	f7fd f894 	bl	181d8 <__assert_func>
   1b0b0:	00020564 	.word	0x00020564

0001b0b4 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1b0b4:	b530      	push	{r4, r5, lr}
   1b0b6:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1b0b8:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1b0bc:	2500      	movs	r5, #0
   1b0be:	ea54 0305 	orrs.w	r3, r4, r5
   1b0c2:	d032      	beq.n	1b12a <temp_stub_sensor_read+0x76>
   1b0c4:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1b0c6:	6805      	ldr	r5, [r0, #0]
   1b0c8:	b165      	cbz	r5, 1b0e4 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1b0ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b0ce:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1b0d0:	2200      	movs	r2, #0
   1b0d2:	4611      	mov	r1, r2
   1b0d4:	4628      	mov	r0, r5
   1b0d6:	f7ff ff7f 	bl	1afd8 <temp_stub_open>
        if (rc) { goto err; }
   1b0da:	4603      	mov	r3, r0
   1b0dc:	b140      	cbz	r0, 1b0f0 <temp_stub_sensor_read+0x3c>
}
   1b0de:	4618      	mov	r0, r3
   1b0e0:	b007      	add	sp, #28
   1b0e2:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1b0e4:	2300      	movs	r3, #0
   1b0e6:	461a      	mov	r2, r3
   1b0e8:	4619      	mov	r1, r3
   1b0ea:	4618      	mov	r0, r3
   1b0ec:	f7fd f874 	bl	181d8 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1b0f0:	2300      	movs	r3, #0
   1b0f2:	aa03      	add	r2, sp, #12
   1b0f4:	2101      	movs	r1, #1
   1b0f6:	4628      	mov	r0, r5
   1b0f8:	f7ff ffc6 	bl	1b088 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1b0fc:	4603      	mov	r3, r0
   1b0fe:	2800      	cmp	r0, #0
   1b100:	d1ed      	bne.n	1b0de <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1b102:	9a03      	ldr	r2, [sp, #12]
   1b104:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1b106:	2201      	movs	r2, #1
   1b108:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1b10c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1b10e:	2a00      	cmp	r2, #0
   1b110:	d0e5      	beq.n	1b0de <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1b112:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1b116:	2300      	movs	r3, #0
   1b118:	e9cd 2300 	strd	r2, r3, [sp]
   1b11c:	aa04      	add	r2, sp, #16
   1b11e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1b120:	4620      	mov	r0, r4
   1b122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b124:	4798      	blx	r3
   1b126:	4603      	mov	r3, r0
   1b128:	e7d9      	b.n	1b0de <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1b12a:	f06f 0301 	mvn.w	r3, #1
   1b12e:	e7d6      	b.n	1b0de <temp_stub_sensor_read+0x2a>

0001b130 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1b130:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1b132:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1b136:	d009      	beq.n	1b14c <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1b138:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1b13c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1b140:	e9d1 2300 	ldrd	r2, r3, [r1]
   1b144:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1b148:	2000      	movs	r0, #0
   1b14a:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1b14c:	2300      	movs	r3, #0
   1b14e:	461a      	mov	r2, r3
   1b150:	4619      	mov	r1, r3
   1b152:	4618      	mov	r0, r3
   1b154:	f7fd f840 	bl	181d8 <__assert_func>

0001b158 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1b158:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1b15a:	e002      	b.n	1b162 <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1b15c:	4618      	mov	r0, r3
   1b15e:	f000 f85b 	bl	1b218 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1b162:	4808      	ldr	r0, [pc, #32]	; (1b184 <oc_buffer_tx+0x2c>)
   1b164:	f7fd fc03 	bl	1896e <os_mqueue_get>
   1b168:	4603      	mov	r3, r0
   1b16a:	b148      	cbz	r0, 1b180 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1b16c:	2200      	movs	r2, #0
   1b16e:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1b170:	7e1a      	ldrb	r2, [r3, #24]
   1b172:	f012 0f08 	tst.w	r2, #8
   1b176:	d0f1      	beq.n	1b15c <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1b178:	4618      	mov	r0, r3
   1b17a:	f000 f85d 	bl	1b238 <oc_send_multicast_message>
   1b17e:	e7f0      	b.n	1b162 <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1b180:	bd08      	pop	{r3, pc}
   1b182:	bf00      	nop
   1b184:	2000dbd0 	.word	0x2000dbd0

0001b188 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1b188:	b500      	push	{lr}
   1b18a:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1b18c:	4808      	ldr	r0, [pc, #32]	; (1b1b0 <oc_buffer_rx+0x28>)
   1b18e:	f7fd fbee 	bl	1896e <os_mqueue_get>
   1b192:	9001      	str	r0, [sp, #4]
   1b194:	b140      	cbz	r0, 1b1a8 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1b196:	a801      	add	r0, sp, #4
   1b198:	f000 faa2 	bl	1b6e0 <__wrap_coap_receive>
#endif
        if (m) {
   1b19c:	9801      	ldr	r0, [sp, #4]
   1b19e:	2800      	cmp	r0, #0
   1b1a0:	d0f4      	beq.n	1b18c <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1b1a2:	f7fd fc59 	bl	18a58 <os_mbuf_free_chain>
   1b1a6:	e7f1      	b.n	1b18c <oc_buffer_rx+0x4>
        }
    }
}
   1b1a8:	b003      	add	sp, #12
   1b1aa:	f85d fb04 	ldr.w	pc, [sp], #4
   1b1ae:	bf00      	nop
   1b1b0:	2000dbb8 	.word	0x2000dbb8

0001b1b4 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1b1b4:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1b1b6:	2200      	movs	r2, #0
   1b1b8:	4904      	ldr	r1, [pc, #16]	; (1b1cc <oc_buffer_init+0x18>)
   1b1ba:	4805      	ldr	r0, [pc, #20]	; (1b1d0 <oc_buffer_init+0x1c>)
   1b1bc:	f7fd fbce 	bl	1895c <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1b1c0:	2200      	movs	r2, #0
   1b1c2:	4904      	ldr	r1, [pc, #16]	; (1b1d4 <oc_buffer_init+0x20>)
   1b1c4:	4804      	ldr	r0, [pc, #16]	; (1b1d8 <oc_buffer_init+0x24>)
   1b1c6:	f7fd fbc9 	bl	1895c <os_mqueue_init>
}
   1b1ca:	bd08      	pop	{r3, pc}
   1b1cc:	0001b189 	.word	0x0001b189
   1b1d0:	2000dbb8 	.word	0x2000dbb8
   1b1d4:	0001b159 	.word	0x0001b159
   1b1d8:	2000dbd0 	.word	0x2000dbd0

0001b1dc <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1b1dc:	b500      	push	{lr}
   1b1de:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1b1e0:	4b07      	ldr	r3, [pc, #28]	; (1b200 <oc_ri_mem_init+0x24>)
   1b1e2:	9300      	str	r3, [sp, #0]
   1b1e4:	4b07      	ldr	r3, [pc, #28]	; (1b204 <oc_ri_mem_init+0x28>)
   1b1e6:	2264      	movs	r2, #100	; 0x64
   1b1e8:	2102      	movs	r1, #2
   1b1ea:	4807      	ldr	r0, [pc, #28]	; (1b208 <oc_ri_mem_init+0x2c>)
   1b1ec:	f7fd fd3c 	bl	18c68 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1b1f0:	f000 f860 	bl	1b2b4 <oc_rep_init>
#endif
    oc_buffer_init();
   1b1f4:	f7ff ffde 	bl	1b1b4 <oc_buffer_init>
}
   1b1f8:	b003      	add	sp, #12
   1b1fa:	f85d fb04 	ldr.w	pc, [sp], #4
   1b1fe:	bf00      	nop
   1b200:	0002057c 	.word	0x0002057c
   1b204:	2000dbe8 	.word	0x2000dbe8
   1b208:	2000dcb0 	.word	0x2000dcb0

0001b20c <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1b20c:	4b01      	ldr	r3, [pc, #4]	; (1b214 <oc_evq_set+0x8>)
   1b20e:	6018      	str	r0, [r3, #0]
}
   1b210:	4770      	bx	lr
   1b212:	bf00      	nop
   1b214:	2000dccc 	.word	0x2000dccc

0001b218 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1b218:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1b21a:	7e03      	ldrb	r3, [r0, #24]
   1b21c:	f003 0307 	and.w	r3, r3, #7
   1b220:	4a04      	ldr	r2, [pc, #16]	; (1b234 <oc_send_buffer+0x1c>)
   1b222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1b226:	b113      	cbz	r3, 1b22e <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1b228:	68db      	ldr	r3, [r3, #12]
   1b22a:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1b22c:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1b22e:	f7fd fc13 	bl	18a58 <os_mbuf_free_chain>
}
   1b232:	e7fb      	b.n	1b22c <oc_send_buffer+0x14>
   1b234:	2000df60 	.word	0x2000df60

0001b238 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1b238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b23c:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1b23e:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1b240:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1b242:	e002      	b.n	1b24a <oc_send_multicast_message+0x12>
   1b244:	4635      	mov	r5, r6
   1b246:	3401      	adds	r4, #1
   1b248:	462e      	mov	r6, r5
   1b24a:	2c07      	cmp	r4, #7
   1b24c:	dc12      	bgt.n	1b274 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1b24e:	4b0c      	ldr	r3, [pc, #48]	; (1b280 <oc_send_multicast_message+0x48>)
   1b250:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1b254:	2d00      	cmp	r5, #0
   1b256:	d0f5      	beq.n	1b244 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1b258:	2e00      	cmp	r6, #0
   1b25a:	d0f4      	beq.n	1b246 <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1b25c:	4638      	mov	r0, r7
   1b25e:	f7fd fc6b 	bl	18b38 <os_mbuf_dup>
   1b262:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1b264:	6933      	ldr	r3, [r6, #16]
   1b266:	4638      	mov	r0, r7
   1b268:	4798      	blx	r3
            if (!n) {
   1b26a:	f1b8 0f00 	cmp.w	r8, #0
   1b26e:	d005      	beq.n	1b27c <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1b270:	4647      	mov	r7, r8
   1b272:	e7e8      	b.n	1b246 <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1b274:	b116      	cbz	r6, 1b27c <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1b276:	6933      	ldr	r3, [r6, #16]
   1b278:	4638      	mov	r0, r7
   1b27a:	4798      	blx	r3
    }
}
   1b27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b280:	2000df60 	.word	0x2000df60

0001b284 <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1b284:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1b286:	4b07      	ldr	r3, [pc, #28]	; (1b2a4 <oc_init+0x20>)
   1b288:	781b      	ldrb	r3, [r3, #0]
   1b28a:	b133      	cbz	r3, 1b29a <oc_init+0x16>
    oc_ri_mem_init();
   1b28c:	f7ff ffa6 	bl	1b1dc <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1b290:	f7fd fb60 	bl	18954 <os_eventq_dflt_get>
   1b294:	f7ff ffba 	bl	1b20c <oc_evq_set>
}
   1b298:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b29a:	461a      	mov	r2, r3
   1b29c:	4619      	mov	r1, r3
   1b29e:	4618      	mov	r0, r3
   1b2a0:	f7fc ff9a 	bl	181d8 <__assert_func>
   1b2a4:	2000ddbc 	.word	0x2000ddbc

0001b2a8 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1b2a8:	4770      	bx	lr

0001b2aa <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1b2aa:	4770      	bx	lr

0001b2ac <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1b2ac:	4770      	bx	lr

0001b2ae <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1b2ae:	4770      	bx	lr

0001b2b0 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1b2b0:	4770      	bx	lr
	...

0001b2b4 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1b2b4:	b500      	push	{lr}
   1b2b6:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1b2b8:	4b05      	ldr	r3, [pc, #20]	; (1b2d0 <oc_rep_init+0x1c>)
   1b2ba:	9300      	str	r3, [sp, #0]
   1b2bc:	4b05      	ldr	r3, [pc, #20]	; (1b2d4 <oc_rep_init+0x20>)
   1b2be:	2218      	movs	r2, #24
   1b2c0:	2102      	movs	r1, #2
   1b2c2:	4805      	ldr	r0, [pc, #20]	; (1b2d8 <oc_rep_init+0x24>)
   1b2c4:	f7fd fcd0 	bl	18c68 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1b2c8:	b003      	add	sp, #12
   1b2ca:	f85d fb04 	ldr.w	pc, [sp], #4
   1b2ce:	bf00      	nop
   1b2d0:	00020588 	.word	0x00020588
   1b2d4:	2000dcec 	.word	0x2000dcec
   1b2d8:	2000dcd0 	.word	0x2000dcd0

0001b2dc <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1b2dc:	b570      	push	{r4, r5, r6, lr}
   1b2de:	b086      	sub	sp, #24
   1b2e0:	4605      	mov	r5, r0
   1b2e2:	460e      	mov	r6, r1
   1b2e4:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1b2e6:	2300      	movs	r3, #0
   1b2e8:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1b2ea:	f000 f9ad 	bl	1b648 <mfg_init>

    mfg_open(&reader);
   1b2ee:	a801      	add	r0, sp, #4
   1b2f0:	f000 f9c6 	bl	1b680 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1b2f4:	6823      	ldr	r3, [r4, #0]
   1b2f6:	42ab      	cmp	r3, r5
   1b2f8:	da29      	bge.n	1b34e <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1b2fa:	2102      	movs	r1, #2
   1b2fc:	a801      	add	r0, sp, #4
   1b2fe:	f000 f98c 	bl	1b61a <mfg_seek_next_with_type>
   1b302:	4603      	mov	r3, r0
        switch (rc) {
   1b304:	f110 0f0f 	cmn.w	r0, #15
   1b308:	d003      	beq.n	1b312 <flash_map_read_mfg+0x36>
   1b30a:	b120      	cbz	r0, 1b316 <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1b30c:	4618      	mov	r0, r3
   1b30e:	b006      	add	sp, #24
   1b310:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1b312:	2300      	movs	r3, #0
   1b314:	e7fa      	b.n	1b30c <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1b316:	a903      	add	r1, sp, #12
   1b318:	a801      	add	r0, sp, #4
   1b31a:	f000 f98b 	bl	1b634 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1b31e:	4603      	mov	r3, r0
   1b320:	2800      	cmp	r0, #0
   1b322:	d1f3      	bne.n	1b30c <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1b324:	6823      	ldr	r3, [r4, #0]
   1b326:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b32a:	009a      	lsls	r2, r3, #2
   1b32c:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1b32e:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1b332:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1b334:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1b338:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1b33a:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1b33e:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1b340:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1b344:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1b346:	6823      	ldr	r3, [r4, #0]
   1b348:	3301      	adds	r3, #1
   1b34a:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1b34c:	e7d2      	b.n	1b2f4 <flash_map_read_mfg+0x18>
            return -1;
   1b34e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b352:	e7db      	b.n	1b30c <flash_map_read_mfg+0x30>

0001b354 <flash_area_open>:
{
   1b354:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1b356:	4b0d      	ldr	r3, [pc, #52]	; (1b38c <flash_area_open+0x38>)
   1b358:	681d      	ldr	r5, [r3, #0]
   1b35a:	b1a5      	cbz	r5, 1b386 <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1b35c:	2300      	movs	r3, #0
   1b35e:	4a0c      	ldr	r2, [pc, #48]	; (1b390 <flash_area_open+0x3c>)
   1b360:	6812      	ldr	r2, [r2, #0]
   1b362:	429a      	cmp	r2, r3
   1b364:	dd0b      	ble.n	1b37e <flash_area_open+0x2a>
        area = flash_map + i;
   1b366:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1b36a:	00a2      	lsls	r2, r4, #2
   1b36c:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1b36e:	5caa      	ldrb	r2, [r5, r2]
   1b370:	4282      	cmp	r2, r0
   1b372:	d001      	beq.n	1b378 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1b374:	3301      	adds	r3, #1
   1b376:	e7f2      	b.n	1b35e <flash_area_open+0xa>
            *fap = area;
   1b378:	600c      	str	r4, [r1, #0]
            return 0;
   1b37a:	2000      	movs	r0, #0
   1b37c:	e001      	b.n	1b382 <flash_area_open+0x2e>
    return SYS_ENOENT;
   1b37e:	f06f 0003 	mvn.w	r0, #3
}
   1b382:	bc30      	pop	{r4, r5}
   1b384:	4770      	bx	lr
        return SYS_EACCES;
   1b386:	f06f 0006 	mvn.w	r0, #6
   1b38a:	e7fa      	b.n	1b382 <flash_area_open+0x2e>
   1b38c:	2000df84 	.word	0x2000df84
   1b390:	2000df80 	.word	0x2000df80

0001b394 <flash_area_read>:
{
   1b394:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1b396:	6884      	ldr	r4, [r0, #8]
   1b398:	428c      	cmp	r4, r1
   1b39a:	d308      	bcc.n	1b3ae <flash_area_read+0x1a>
   1b39c:	18cd      	adds	r5, r1, r3
   1b39e:	42ac      	cmp	r4, r5
   1b3a0:	d308      	bcc.n	1b3b4 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1b3a2:	6844      	ldr	r4, [r0, #4]
   1b3a4:	4421      	add	r1, r4
   1b3a6:	7840      	ldrb	r0, [r0, #1]
   1b3a8:	f000 f9c8 	bl	1b73c <hal_flash_read>
}
   1b3ac:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1b3ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b3b2:	e7fb      	b.n	1b3ac <flash_area_read+0x18>
   1b3b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b3b8:	e7f8      	b.n	1b3ac <flash_area_read+0x18>
	...

0001b3bc <flash_map_init>:

void
flash_map_init(void)
{
   1b3bc:	b510      	push	{r4, lr}
   1b3be:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b3c0:	4b14      	ldr	r3, [pc, #80]	; (1b414 <flash_map_init+0x58>)
   1b3c2:	781b      	ldrb	r3, [r3, #0]
   1b3c4:	b303      	cbz	r3, 1b408 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1b3c6:	f000 f9a5 	bl	1b714 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b3ca:	b138      	cbz	r0, 1b3dc <flash_map_init+0x20>
   1b3cc:	2000      	movs	r0, #0
   1b3ce:	9000      	str	r0, [sp, #0]
   1b3d0:	4b11      	ldr	r3, [pc, #68]	; (1b418 <flash_map_init+0x5c>)
   1b3d2:	681c      	ldr	r4, [r3, #0]
   1b3d4:	4603      	mov	r3, r0
   1b3d6:	4602      	mov	r2, r0
   1b3d8:	4601      	mov	r1, r0
   1b3da:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1b3dc:	4b0f      	ldr	r3, [pc, #60]	; (1b41c <flash_map_init+0x60>)
   1b3de:	4a10      	ldr	r2, [pc, #64]	; (1b420 <flash_map_init+0x64>)
   1b3e0:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1b3e2:	4b10      	ldr	r3, [pc, #64]	; (1b424 <flash_map_init+0x68>)
   1b3e4:	2206      	movs	r2, #6
   1b3e6:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1b3e8:	aa03      	add	r2, sp, #12
   1b3ea:	490f      	ldr	r1, [pc, #60]	; (1b428 <flash_map_init+0x6c>)
   1b3ec:	200a      	movs	r0, #10
   1b3ee:	f7ff ff75 	bl	1b2dc <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1b3f2:	b938      	cbnz	r0, 1b404 <flash_map_init+0x48>
   1b3f4:	9b03      	ldr	r3, [sp, #12]
   1b3f6:	2b00      	cmp	r3, #0
   1b3f8:	dd04      	ble.n	1b404 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1b3fa:	4a08      	ldr	r2, [pc, #32]	; (1b41c <flash_map_init+0x60>)
   1b3fc:	490a      	ldr	r1, [pc, #40]	; (1b428 <flash_map_init+0x6c>)
   1b3fe:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1b400:	4a08      	ldr	r2, [pc, #32]	; (1b424 <flash_map_init+0x68>)
   1b402:	6013      	str	r3, [r2, #0]
    }
}
   1b404:	b004      	add	sp, #16
   1b406:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b408:	461a      	mov	r2, r3
   1b40a:	4619      	mov	r1, r3
   1b40c:	4618      	mov	r0, r3
   1b40e:	f7fc fee3 	bl	181d8 <__assert_func>
   1b412:	bf00      	nop
   1b414:	2000ddbc 	.word	0x2000ddbc
   1b418:	20000104 	.word	0x20000104
   1b41c:	2000df84 	.word	0x2000df84
   1b420:	00020594 	.word	0x00020594
   1b424:	2000df80 	.word	0x2000df80
   1b428:	2000dd1c 	.word	0x2000dd1c

0001b42c <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1b42c:	4770      	bx	lr
	...

0001b430 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1b430:	b530      	push	{r4, r5, lr}
   1b432:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1b434:	7885      	ldrb	r5, [r0, #2]
   1b436:	4b21      	ldr	r3, [pc, #132]	; (1b4bc <mfg_seek_next_aux+0x8c>)
   1b438:	681b      	ldr	r3, [r3, #0]
   1b43a:	429d      	cmp	r5, r3
   1b43c:	da32      	bge.n	1b4a4 <mfg_seek_next_aux+0x74>
   1b43e:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1b440:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1b444:	0093      	lsls	r3, r2, #2
   1b446:	a901      	add	r1, sp, #4
   1b448:	4a1d      	ldr	r2, [pc, #116]	; (1b4c0 <mfg_seek_next_aux+0x90>)
   1b44a:	5cd0      	ldrb	r0, [r2, r3]
   1b44c:	f7ff ff82 	bl	1b354 <flash_area_open>
    if (rc != 0) {
   1b450:	bb58      	cbnz	r0, 1b4aa <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1b452:	6862      	ldr	r2, [r4, #4]
   1b454:	b9c2      	cbnz	r2, 1b488 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1b456:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1b45a:	00aa      	lsls	r2, r5, #2
   1b45c:	4b18      	ldr	r3, [pc, #96]	; (1b4c0 <mfg_seek_next_aux+0x90>)
   1b45e:	4413      	add	r3, r2
   1b460:	685b      	ldr	r3, [r3, #4]
   1b462:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1b464:	6861      	ldr	r1, [r4, #4]
   1b466:	9801      	ldr	r0, [sp, #4]
   1b468:	6883      	ldr	r3, [r0, #8]
   1b46a:	3b08      	subs	r3, #8
   1b46c:	4299      	cmp	r1, r3
   1b46e:	d310      	bcc.n	1b492 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1b470:	78a3      	ldrb	r3, [r4, #2]
   1b472:	1c59      	adds	r1, r3, #1
   1b474:	4a11      	ldr	r2, [pc, #68]	; (1b4bc <mfg_seek_next_aux+0x8c>)
   1b476:	6812      	ldr	r2, [r2, #0]
   1b478:	4291      	cmp	r1, r2
   1b47a:	da19      	bge.n	1b4b0 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1b47c:	2200      	movs	r2, #0
   1b47e:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1b480:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1b482:	f06f 0305 	mvn.w	r3, #5
   1b486:	e015      	b.n	1b4b4 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1b488:	7863      	ldrb	r3, [r4, #1]
   1b48a:	4413      	add	r3, r2
   1b48c:	3302      	adds	r3, #2
   1b48e:	6063      	str	r3, [r4, #4]
   1b490:	e7e8      	b.n	1b464 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1b492:	2302      	movs	r3, #2
   1b494:	4622      	mov	r2, r4
   1b496:	f7ff ff7d 	bl	1b394 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1b49a:	4603      	mov	r3, r0
   1b49c:	b150      	cbz	r0, 1b4b4 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1b49e:	f06f 0304 	mvn.w	r3, #4
   1b4a2:	e007      	b.n	1b4b4 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1b4a4:	f06f 0301 	mvn.w	r3, #1
   1b4a8:	e004      	b.n	1b4b4 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1b4aa:	f06f 0304 	mvn.w	r3, #4
   1b4ae:	e001      	b.n	1b4b4 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1b4b0:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1b4b4:	4618      	mov	r0, r3
   1b4b6:	b003      	add	sp, #12
   1b4b8:	bd30      	pop	{r4, r5, pc}
   1b4ba:	bf00      	nop
   1b4bc:	2000ddb0 	.word	0x2000ddb0
   1b4c0:	2000dd98 	.word	0x2000dd98

0001b4c4 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1b4c4:	b530      	push	{r4, r5, lr}
   1b4c6:	b085      	sub	sp, #20
   1b4c8:	4605      	mov	r5, r0
   1b4ca:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1b4cc:	a903      	add	r1, sp, #12
   1b4ce:	f7ff ff41 	bl	1b354 <flash_area_open>
    if (rc != 0) {
   1b4d2:	b9e8      	cbnz	r0, 1b510 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1b4d4:	9803      	ldr	r0, [sp, #12]
   1b4d6:	6881      	ldr	r1, [r0, #8]
   1b4d8:	2308      	movs	r3, #8
   1b4da:	aa01      	add	r2, sp, #4
   1b4dc:	3908      	subs	r1, #8
   1b4de:	f7ff ff59 	bl	1b394 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1b4e2:	4601      	mov	r1, r0
   1b4e4:	b9b8      	cbnz	r0, 1b516 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1b4e6:	9a02      	ldr	r2, [sp, #8]
   1b4e8:	4b11      	ldr	r3, [pc, #68]	; (1b530 <mfg_read_mmr+0x6c>)
   1b4ea:	429a      	cmp	r2, r3
   1b4ec:	d116      	bne.n	1b51c <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1b4ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1b4f2:	2b02      	cmp	r3, #2
   1b4f4:	d115      	bne.n	1b522 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1b4f6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1b4fa:	9b03      	ldr	r3, [sp, #12]
   1b4fc:	689b      	ldr	r3, [r3, #8]
   1b4fe:	429a      	cmp	r2, r3
   1b500:	d812      	bhi.n	1b528 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1b502:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1b504:	7025      	strb	r5, [r4, #0]
   1b506:	6063      	str	r3, [r4, #4]
   1b508:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1b50a:	4608      	mov	r0, r1
   1b50c:	b005      	add	sp, #20
   1b50e:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1b510:	f06f 0104 	mvn.w	r1, #4
   1b514:	e7f9      	b.n	1b50a <mfg_read_mmr+0x46>
        return SYS_EIO;
   1b516:	f06f 0104 	mvn.w	r1, #4
   1b51a:	e7f6      	b.n	1b50a <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1b51c:	f06f 0108 	mvn.w	r1, #8
   1b520:	e7f3      	b.n	1b50a <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1b522:	f06f 010b 	mvn.w	r1, #11
   1b526:	e7f0      	b.n	1b50a <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1b528:	f06f 0108 	mvn.w	r1, #8
   1b52c:	e7ed      	b.n	1b50a <mfg_read_mmr+0x46>
   1b52e:	bf00      	nop
   1b530:	3bb2a269 	.word	0x3bb2a269

0001b534 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1b534:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1b536:	2300      	movs	r3, #0
   1b538:	4a11      	ldr	r2, [pc, #68]	; (1b580 <mfg_read_next_mmr+0x4c>)
   1b53a:	6812      	ldr	r2, [r2, #0]
   1b53c:	429a      	cmp	r2, r3
   1b53e:	dd08      	ble.n	1b552 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1b540:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1b544:	008a      	lsls	r2, r1, #2
   1b546:	490f      	ldr	r1, [pc, #60]	; (1b584 <mfg_read_next_mmr+0x50>)
   1b548:	5c8a      	ldrb	r2, [r1, r2]
   1b54a:	4282      	cmp	r2, r0
   1b54c:	d011      	beq.n	1b572 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1b54e:	3301      	adds	r3, #1
   1b550:	e7f2      	b.n	1b538 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1b552:	2a01      	cmp	r2, #1
   1b554:	dc11      	bgt.n	1b57a <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1b556:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1b55a:	0093      	lsls	r3, r2, #2
   1b55c:	4909      	ldr	r1, [pc, #36]	; (1b584 <mfg_read_next_mmr+0x50>)
   1b55e:	4419      	add	r1, r3
   1b560:	f7ff ffb0 	bl	1b4c4 <mfg_read_mmr>
    if (rc != 0) {
   1b564:	4603      	mov	r3, r0
   1b566:	b930      	cbnz	r0, 1b576 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1b568:	4905      	ldr	r1, [pc, #20]	; (1b580 <mfg_read_next_mmr+0x4c>)
   1b56a:	680a      	ldr	r2, [r1, #0]
   1b56c:	3201      	adds	r2, #1
   1b56e:	600a      	str	r2, [r1, #0]
    return 0;
   1b570:	e001      	b.n	1b576 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1b572:	f06f 030a 	mvn.w	r3, #10
}
   1b576:	4618      	mov	r0, r3
   1b578:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1b57a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b57e:	e7fa      	b.n	1b576 <mfg_read_next_mmr+0x42>
   1b580:	2000ddb0 	.word	0x2000ddb0
   1b584:	2000dd98 	.word	0x2000dd98

0001b588 <mfg_open_flash_area>:
{
   1b588:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1b58a:	7883      	ldrb	r3, [r0, #2]
   1b58c:	4a0b      	ldr	r2, [pc, #44]	; (1b5bc <mfg_open_flash_area+0x34>)
   1b58e:	6812      	ldr	r2, [r2, #0]
   1b590:	4293      	cmp	r3, r2
   1b592:	da0a      	bge.n	1b5aa <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1b594:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b598:	009a      	lsls	r2, r3, #2
   1b59a:	4b09      	ldr	r3, [pc, #36]	; (1b5c0 <mfg_open_flash_area+0x38>)
   1b59c:	5c98      	ldrb	r0, [r3, r2]
   1b59e:	f7ff fed9 	bl	1b354 <flash_area_open>
    if (rc != 0) {
   1b5a2:	4603      	mov	r3, r0
   1b5a4:	b938      	cbnz	r0, 1b5b6 <mfg_open_flash_area+0x2e>
}
   1b5a6:	4618      	mov	r0, r3
   1b5a8:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1b5aa:	2300      	movs	r3, #0
   1b5ac:	461a      	mov	r2, r3
   1b5ae:	4619      	mov	r1, r3
   1b5b0:	4618      	mov	r0, r3
   1b5b2:	f7fc fe11 	bl	181d8 <__assert_func>
        return SYS_EIO;
   1b5b6:	f06f 0304 	mvn.w	r3, #4
   1b5ba:	e7f4      	b.n	1b5a6 <mfg_open_flash_area+0x1e>
   1b5bc:	2000ddb0 	.word	0x2000ddb0
   1b5c0:	2000dd98 	.word	0x2000dd98

0001b5c4 <mfg_read_tlv_body>:
{
   1b5c4:	b570      	push	{r4, r5, r6, lr}
   1b5c6:	b082      	sub	sp, #8
   1b5c8:	4606      	mov	r6, r0
   1b5ca:	460c      	mov	r4, r1
   1b5cc:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1b5ce:	a901      	add	r1, sp, #4
   1b5d0:	f7ff ffda 	bl	1b588 <mfg_open_flash_area>
    if (rc != 0) {
   1b5d4:	4603      	mov	r3, r0
   1b5d6:	b110      	cbz	r0, 1b5de <mfg_read_tlv_body+0x1a>
}
   1b5d8:	4618      	mov	r0, r3
   1b5da:	b002      	add	sp, #8
   1b5dc:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1b5de:	462a      	mov	r2, r5
   1b5e0:	2100      	movs	r1, #0
   1b5e2:	4620      	mov	r0, r4
   1b5e4:	f7fe f9fb 	bl	199de <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1b5e8:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1b5ea:	6871      	ldr	r1, [r6, #4]
   1b5ec:	42ab      	cmp	r3, r5
   1b5ee:	bfa8      	it	ge
   1b5f0:	462b      	movge	r3, r5
   1b5f2:	4622      	mov	r2, r4
   1b5f4:	3102      	adds	r1, #2
   1b5f6:	9801      	ldr	r0, [sp, #4]
   1b5f8:	f7ff fecc 	bl	1b394 <flash_area_read>
    if (rc != 0) {
   1b5fc:	4603      	mov	r3, r0
   1b5fe:	2800      	cmp	r0, #0
   1b600:	d0ea      	beq.n	1b5d8 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1b602:	f06f 0304 	mvn.w	r3, #4
   1b606:	e7e7      	b.n	1b5d8 <mfg_read_tlv_body+0x14>

0001b608 <mfg_seek_next>:
{
   1b608:	b510      	push	{r4, lr}
   1b60a:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1b60c:	4620      	mov	r0, r4
   1b60e:	f7ff ff0f 	bl	1b430 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1b612:	f110 0f06 	cmn.w	r0, #6
   1b616:	d0f9      	beq.n	1b60c <mfg_seek_next+0x4>
}
   1b618:	bd10      	pop	{r4, pc}

0001b61a <mfg_seek_next_with_type>:
{
   1b61a:	b538      	push	{r3, r4, r5, lr}
   1b61c:	4604      	mov	r4, r0
   1b61e:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1b620:	4620      	mov	r0, r4
   1b622:	f7ff fff1 	bl	1b608 <mfg_seek_next>
        if (rc != 0) {
   1b626:	4602      	mov	r2, r0
   1b628:	b910      	cbnz	r0, 1b630 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1b62a:	7823      	ldrb	r3, [r4, #0]
   1b62c:	42ab      	cmp	r3, r5
   1b62e:	d1f7      	bne.n	1b620 <mfg_seek_next_with_type+0x6>
}
   1b630:	4610      	mov	r0, r2
   1b632:	bd38      	pop	{r3, r4, r5, pc}

0001b634 <mfg_read_tlv_flash_area>:
{
   1b634:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1b636:	220a      	movs	r2, #10
   1b638:	f7ff ffc4 	bl	1b5c4 <mfg_read_tlv_body>
}
   1b63c:	bd08      	pop	{r3, pc}

0001b63e <mfg_read_tlv_mmr_ref>:
{
   1b63e:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1b640:	2201      	movs	r2, #1
   1b642:	f7ff ffbf 	bl	1b5c4 <mfg_read_tlv_body>
}
   1b646:	bd08      	pop	{r3, pc}

0001b648 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1b648:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1b64a:	4b0b      	ldr	r3, [pc, #44]	; (1b678 <mfg_init+0x30>)
   1b64c:	781b      	ldrb	r3, [r3, #0]
   1b64e:	b94b      	cbnz	r3, 1b664 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1b650:	4b09      	ldr	r3, [pc, #36]	; (1b678 <mfg_init+0x30>)
   1b652:	2201      	movs	r2, #1
   1b654:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b656:	4b09      	ldr	r3, [pc, #36]	; (1b67c <mfg_init+0x34>)
   1b658:	781b      	ldrb	r3, [r3, #0]
   1b65a:	b123      	cbz	r3, 1b666 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1b65c:	2000      	movs	r0, #0
   1b65e:	f7ff ff69 	bl	1b534 <mfg_read_next_mmr>
    if (rc != 0) {
   1b662:	b128      	cbz	r0, 1b670 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1b664:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b666:	461a      	mov	r2, r3
   1b668:	4619      	mov	r1, r3
   1b66a:	4618      	mov	r0, r3
   1b66c:	f7fc fdb4 	bl	181d8 <__assert_func>
    rc = mfg_read_mmr_refs();
   1b670:	f000 f80e 	bl	1b690 <mfg_read_mmr_refs>
err:
   1b674:	e7f6      	b.n	1b664 <mfg_init+0x1c>
   1b676:	bf00      	nop
   1b678:	2000dd94 	.word	0x2000dd94
   1b67c:	2000ddbc 	.word	0x2000ddbc

0001b680 <mfg_open>:
{
   1b680:	b510      	push	{r4, lr}
   1b682:	4604      	mov	r4, r0
    mfg_init();
   1b684:	f7ff ffe0 	bl	1b648 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1b688:	2300      	movs	r3, #0
   1b68a:	6023      	str	r3, [r4, #0]
   1b68c:	6063      	str	r3, [r4, #4]
}
   1b68e:	bd10      	pop	{r4, pc}

0001b690 <mfg_read_mmr_refs>:
{
   1b690:	b500      	push	{lr}
   1b692:	b085      	sub	sp, #20
    mfg_open(&reader);
   1b694:	a801      	add	r0, sp, #4
   1b696:	f7ff fff3 	bl	1b680 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1b69a:	2104      	movs	r1, #4
   1b69c:	eb0d 0001 	add.w	r0, sp, r1
   1b6a0:	f7ff ffbb 	bl	1b61a <mfg_seek_next_with_type>
   1b6a4:	4603      	mov	r3, r0
        switch (rc) {
   1b6a6:	f110 0f0f 	cmn.w	r0, #15
   1b6aa:	d004      	beq.n	1b6b6 <mfg_read_mmr_refs+0x26>
   1b6ac:	b128      	cbz	r0, 1b6ba <mfg_read_mmr_refs+0x2a>
}
   1b6ae:	4618      	mov	r0, r3
   1b6b0:	b005      	add	sp, #20
   1b6b2:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1b6b6:	2300      	movs	r3, #0
   1b6b8:	e7f9      	b.n	1b6ae <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1b6ba:	a903      	add	r1, sp, #12
   1b6bc:	a801      	add	r0, sp, #4
   1b6be:	f7ff ffbe 	bl	1b63e <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1b6c2:	4603      	mov	r3, r0
   1b6c4:	2800      	cmp	r0, #0
   1b6c6:	d1f2      	bne.n	1b6ae <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1b6c8:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1b6cc:	f7ff ff32 	bl	1b534 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1b6d0:	4603      	mov	r3, r0
   1b6d2:	2800      	cmp	r0, #0
   1b6d4:	d0e1      	beq.n	1b69a <mfg_read_mmr_refs+0xa>
   1b6d6:	f110 0f0b 	cmn.w	r0, #11
   1b6da:	d0de      	beq.n	1b69a <mfg_read_mmr_refs+0xa>
   1b6dc:	e7e7      	b.n	1b6ae <mfg_read_mmr_refs+0x1e>
	...

0001b6e0 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1b6e0:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1b6e2:	4803      	ldr	r0, [pc, #12]	; (1b6f0 <__wrap_coap_receive+0x10>)
   1b6e4:	f7fb feb0 	bl	17448 <console_printf>
    return -1;
}
   1b6e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b6ec:	bd08      	pop	{r3, pc}
   1b6ee:	bf00      	nop
   1b6f0:	000205dc 	.word	0x000205dc

0001b6f4 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1b6f4:	4770      	bx	lr

0001b6f6 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1b6f6:	6843      	ldr	r3, [r0, #4]
   1b6f8:	428b      	cmp	r3, r1
   1b6fa:	d808      	bhi.n	1b70e <hal_flash_check_addr+0x18>
   1b6fc:	6882      	ldr	r2, [r0, #8]
   1b6fe:	4413      	add	r3, r2
   1b700:	428b      	cmp	r3, r1
   1b702:	d301      	bcc.n	1b708 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1b704:	2000      	movs	r0, #0
}
   1b706:	4770      	bx	lr
        return SYS_EINVAL;
   1b708:	f06f 0001 	mvn.w	r0, #1
   1b70c:	4770      	bx	lr
   1b70e:	f06f 0001 	mvn.w	r0, #1
   1b712:	4770      	bx	lr

0001b714 <hal_flash_init>:
{
   1b714:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1b716:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1b718:	462c      	mov	r4, r5
   1b71a:	e001      	b.n	1b720 <hal_flash_init+0xc>
   1b71c:	3401      	adds	r4, #1
   1b71e:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1b720:	4620      	mov	r0, r4
   1b722:	f7fe fce3 	bl	1a0ec <hal_bsp_flash_dev>
        if (!hf) {
   1b726:	b138      	cbz	r0, 1b738 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1b728:	6802      	ldr	r2, [r0, #0]
   1b72a:	6952      	ldr	r2, [r2, #20]
   1b72c:	4790      	blx	r2
   1b72e:	2800      	cmp	r0, #0
   1b730:	d0f4      	beq.n	1b71c <hal_flash_init+0x8>
            rc = SYS_EIO;
   1b732:	f06f 0504 	mvn.w	r5, #4
   1b736:	e7f1      	b.n	1b71c <hal_flash_init+0x8>
}
   1b738:	4628      	mov	r0, r5
   1b73a:	bd38      	pop	{r3, r4, r5, pc}

0001b73c <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1b73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b740:	460d      	mov	r5, r1
   1b742:	4690      	mov	r8, r2
   1b744:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1b746:	f7fe fcd1 	bl	1a0ec <hal_bsp_flash_dev>
    if (!hf) {
   1b74a:	b1c0      	cbz	r0, 1b77e <hal_flash_read+0x42>
   1b74c:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1b74e:	4629      	mov	r1, r5
   1b750:	f7ff ffd1 	bl	1b6f6 <hal_flash_check_addr>
   1b754:	b9b0      	cbnz	r0, 1b784 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1b756:	19a9      	adds	r1, r5, r6
   1b758:	4620      	mov	r0, r4
   1b75a:	f7ff ffcc 	bl	1b6f6 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1b75e:	b9a0      	cbnz	r0, 1b78a <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1b760:	6823      	ldr	r3, [r4, #0]
   1b762:	681f      	ldr	r7, [r3, #0]
   1b764:	4633      	mov	r3, r6
   1b766:	4642      	mov	r2, r8
   1b768:	4629      	mov	r1, r5
   1b76a:	4620      	mov	r0, r4
   1b76c:	47b8      	blx	r7
    if (rc != 0) {
   1b76e:	4603      	mov	r3, r0
   1b770:	b910      	cbnz	r0, 1b778 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1b772:	4618      	mov	r0, r3
   1b774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1b778:	f06f 0304 	mvn.w	r3, #4
   1b77c:	e7f9      	b.n	1b772 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1b77e:	f06f 0301 	mvn.w	r3, #1
   1b782:	e7f6      	b.n	1b772 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1b784:	f06f 0301 	mvn.w	r3, #1
   1b788:	e7f3      	b.n	1b772 <hal_flash_read+0x36>
   1b78a:	f06f 0301 	mvn.w	r3, #1
   1b78e:	e7f0      	b.n	1b772 <hal_flash_read+0x36>

0001b790 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1b790:	2010      	movs	r0, #16
   1b792:	4770      	bx	lr

0001b794 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1b794:	b570      	push	{r4, r5, r6, lr}
   1b796:	4606      	mov	r6, r0
   1b798:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1b79a:	460d      	mov	r5, r1
   1b79c:	2908      	cmp	r1, #8
   1b79e:	bf28      	it	cs
   1b7a0:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1b7a2:	462a      	mov	r2, r5
   1b7a4:	4906      	ldr	r1, [pc, #24]	; (1b7c0 <hal_bsp_hw_id+0x2c>)
   1b7a6:	f7fe f90d 	bl	199c4 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1b7aa:	1b64      	subs	r4, r4, r5
   1b7ac:	2c08      	cmp	r4, #8
   1b7ae:	bf28      	it	cs
   1b7b0:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1b7b2:	4622      	mov	r2, r4
   1b7b4:	4903      	ldr	r1, [pc, #12]	; (1b7c4 <hal_bsp_hw_id+0x30>)
   1b7b6:	1970      	adds	r0, r6, r5
   1b7b8:	f7fe f904 	bl	199c4 <memcpy>

    return len + cnt;
}
   1b7bc:	1928      	adds	r0, r5, r4
   1b7be:	bd70      	pop	{r4, r5, r6, pc}
   1b7c0:	10000060 	.word	0x10000060
   1b7c4:	100000a4 	.word	0x100000a4

0001b7c8 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1b7c8:	b40e      	push	{r1, r2, r3}
   1b7ca:	b500      	push	{lr}
   1b7cc:	b082      	sub	sp, #8
   1b7ce:	ab03      	add	r3, sp, #12
   1b7d0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1b7d4:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1b7d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b7da:	f7fe fbef 	bl	19fbc <vsnprintf>
	va_end(ap);

	return rv;
}
   1b7de:	b002      	add	sp, #8
   1b7e0:	f85d eb04 	ldr.w	lr, [sp], #4
   1b7e4:	b003      	add	sp, #12
   1b7e6:	4770      	bx	lr

0001b7e8 <__aeabi_uldivmod>:
   1b7e8:	b953      	cbnz	r3, 1b800 <__aeabi_uldivmod+0x18>
   1b7ea:	b94a      	cbnz	r2, 1b800 <__aeabi_uldivmod+0x18>
   1b7ec:	2900      	cmp	r1, #0
   1b7ee:	bf08      	it	eq
   1b7f0:	2800      	cmpeq	r0, #0
   1b7f2:	bf1c      	itt	ne
   1b7f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1b7f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1b7fc:	f000 b972 	b.w	1bae4 <__aeabi_idiv0>
   1b800:	f1ad 0c08 	sub.w	ip, sp, #8
   1b804:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1b808:	f000 f806 	bl	1b818 <__udivmoddi4>
   1b80c:	f8dd e004 	ldr.w	lr, [sp, #4]
   1b810:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b814:	b004      	add	sp, #16
   1b816:	4770      	bx	lr

0001b818 <__udivmoddi4>:
   1b818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b81c:	9e08      	ldr	r6, [sp, #32]
   1b81e:	4604      	mov	r4, r0
   1b820:	4688      	mov	r8, r1
   1b822:	2b00      	cmp	r3, #0
   1b824:	d14b      	bne.n	1b8be <__udivmoddi4+0xa6>
   1b826:	428a      	cmp	r2, r1
   1b828:	4615      	mov	r5, r2
   1b82a:	d967      	bls.n	1b8fc <__udivmoddi4+0xe4>
   1b82c:	fab2 f282 	clz	r2, r2
   1b830:	b14a      	cbz	r2, 1b846 <__udivmoddi4+0x2e>
   1b832:	f1c2 0720 	rsb	r7, r2, #32
   1b836:	fa01 f302 	lsl.w	r3, r1, r2
   1b83a:	fa20 f707 	lsr.w	r7, r0, r7
   1b83e:	4095      	lsls	r5, r2
   1b840:	ea47 0803 	orr.w	r8, r7, r3
   1b844:	4094      	lsls	r4, r2
   1b846:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1b84a:	0c23      	lsrs	r3, r4, #16
   1b84c:	fbb8 f7fe 	udiv	r7, r8, lr
   1b850:	fa1f fc85 	uxth.w	ip, r5
   1b854:	fb0e 8817 	mls	r8, lr, r7, r8
   1b858:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1b85c:	fb07 f10c 	mul.w	r1, r7, ip
   1b860:	4299      	cmp	r1, r3
   1b862:	d909      	bls.n	1b878 <__udivmoddi4+0x60>
   1b864:	18eb      	adds	r3, r5, r3
   1b866:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1b86a:	f080 811b 	bcs.w	1baa4 <__udivmoddi4+0x28c>
   1b86e:	4299      	cmp	r1, r3
   1b870:	f240 8118 	bls.w	1baa4 <__udivmoddi4+0x28c>
   1b874:	3f02      	subs	r7, #2
   1b876:	442b      	add	r3, r5
   1b878:	1a5b      	subs	r3, r3, r1
   1b87a:	b2a4      	uxth	r4, r4
   1b87c:	fbb3 f0fe 	udiv	r0, r3, lr
   1b880:	fb0e 3310 	mls	r3, lr, r0, r3
   1b884:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1b888:	fb00 fc0c 	mul.w	ip, r0, ip
   1b88c:	45a4      	cmp	ip, r4
   1b88e:	d909      	bls.n	1b8a4 <__udivmoddi4+0x8c>
   1b890:	192c      	adds	r4, r5, r4
   1b892:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1b896:	f080 8107 	bcs.w	1baa8 <__udivmoddi4+0x290>
   1b89a:	45a4      	cmp	ip, r4
   1b89c:	f240 8104 	bls.w	1baa8 <__udivmoddi4+0x290>
   1b8a0:	3802      	subs	r0, #2
   1b8a2:	442c      	add	r4, r5
   1b8a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1b8a8:	eba4 040c 	sub.w	r4, r4, ip
   1b8ac:	2700      	movs	r7, #0
   1b8ae:	b11e      	cbz	r6, 1b8b8 <__udivmoddi4+0xa0>
   1b8b0:	40d4      	lsrs	r4, r2
   1b8b2:	2300      	movs	r3, #0
   1b8b4:	e9c6 4300 	strd	r4, r3, [r6]
   1b8b8:	4639      	mov	r1, r7
   1b8ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b8be:	428b      	cmp	r3, r1
   1b8c0:	d909      	bls.n	1b8d6 <__udivmoddi4+0xbe>
   1b8c2:	2e00      	cmp	r6, #0
   1b8c4:	f000 80eb 	beq.w	1ba9e <__udivmoddi4+0x286>
   1b8c8:	2700      	movs	r7, #0
   1b8ca:	e9c6 0100 	strd	r0, r1, [r6]
   1b8ce:	4638      	mov	r0, r7
   1b8d0:	4639      	mov	r1, r7
   1b8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b8d6:	fab3 f783 	clz	r7, r3
   1b8da:	2f00      	cmp	r7, #0
   1b8dc:	d147      	bne.n	1b96e <__udivmoddi4+0x156>
   1b8de:	428b      	cmp	r3, r1
   1b8e0:	d302      	bcc.n	1b8e8 <__udivmoddi4+0xd0>
   1b8e2:	4282      	cmp	r2, r0
   1b8e4:	f200 80fa 	bhi.w	1badc <__udivmoddi4+0x2c4>
   1b8e8:	1a84      	subs	r4, r0, r2
   1b8ea:	eb61 0303 	sbc.w	r3, r1, r3
   1b8ee:	2001      	movs	r0, #1
   1b8f0:	4698      	mov	r8, r3
   1b8f2:	2e00      	cmp	r6, #0
   1b8f4:	d0e0      	beq.n	1b8b8 <__udivmoddi4+0xa0>
   1b8f6:	e9c6 4800 	strd	r4, r8, [r6]
   1b8fa:	e7dd      	b.n	1b8b8 <__udivmoddi4+0xa0>
   1b8fc:	b902      	cbnz	r2, 1b900 <__udivmoddi4+0xe8>
   1b8fe:	deff      	udf	#255	; 0xff
   1b900:	fab2 f282 	clz	r2, r2
   1b904:	2a00      	cmp	r2, #0
   1b906:	f040 808f 	bne.w	1ba28 <__udivmoddi4+0x210>
   1b90a:	1b49      	subs	r1, r1, r5
   1b90c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1b910:	fa1f f885 	uxth.w	r8, r5
   1b914:	2701      	movs	r7, #1
   1b916:	fbb1 fcfe 	udiv	ip, r1, lr
   1b91a:	0c23      	lsrs	r3, r4, #16
   1b91c:	fb0e 111c 	mls	r1, lr, ip, r1
   1b920:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1b924:	fb08 f10c 	mul.w	r1, r8, ip
   1b928:	4299      	cmp	r1, r3
   1b92a:	d907      	bls.n	1b93c <__udivmoddi4+0x124>
   1b92c:	18eb      	adds	r3, r5, r3
   1b92e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1b932:	d202      	bcs.n	1b93a <__udivmoddi4+0x122>
   1b934:	4299      	cmp	r1, r3
   1b936:	f200 80cd 	bhi.w	1bad4 <__udivmoddi4+0x2bc>
   1b93a:	4684      	mov	ip, r0
   1b93c:	1a59      	subs	r1, r3, r1
   1b93e:	b2a3      	uxth	r3, r4
   1b940:	fbb1 f0fe 	udiv	r0, r1, lr
   1b944:	fb0e 1410 	mls	r4, lr, r0, r1
   1b948:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1b94c:	fb08 f800 	mul.w	r8, r8, r0
   1b950:	45a0      	cmp	r8, r4
   1b952:	d907      	bls.n	1b964 <__udivmoddi4+0x14c>
   1b954:	192c      	adds	r4, r5, r4
   1b956:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1b95a:	d202      	bcs.n	1b962 <__udivmoddi4+0x14a>
   1b95c:	45a0      	cmp	r8, r4
   1b95e:	f200 80b6 	bhi.w	1bace <__udivmoddi4+0x2b6>
   1b962:	4618      	mov	r0, r3
   1b964:	eba4 0408 	sub.w	r4, r4, r8
   1b968:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1b96c:	e79f      	b.n	1b8ae <__udivmoddi4+0x96>
   1b96e:	f1c7 0c20 	rsb	ip, r7, #32
   1b972:	40bb      	lsls	r3, r7
   1b974:	fa22 fe0c 	lsr.w	lr, r2, ip
   1b978:	ea4e 0e03 	orr.w	lr, lr, r3
   1b97c:	fa01 f407 	lsl.w	r4, r1, r7
   1b980:	fa20 f50c 	lsr.w	r5, r0, ip
   1b984:	fa21 f30c 	lsr.w	r3, r1, ip
   1b988:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1b98c:	4325      	orrs	r5, r4
   1b98e:	fbb3 f9f8 	udiv	r9, r3, r8
   1b992:	0c2c      	lsrs	r4, r5, #16
   1b994:	fb08 3319 	mls	r3, r8, r9, r3
   1b998:	fa1f fa8e 	uxth.w	sl, lr
   1b99c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1b9a0:	fb09 f40a 	mul.w	r4, r9, sl
   1b9a4:	429c      	cmp	r4, r3
   1b9a6:	fa02 f207 	lsl.w	r2, r2, r7
   1b9aa:	fa00 f107 	lsl.w	r1, r0, r7
   1b9ae:	d90b      	bls.n	1b9c8 <__udivmoddi4+0x1b0>
   1b9b0:	eb1e 0303 	adds.w	r3, lr, r3
   1b9b4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1b9b8:	f080 8087 	bcs.w	1baca <__udivmoddi4+0x2b2>
   1b9bc:	429c      	cmp	r4, r3
   1b9be:	f240 8084 	bls.w	1baca <__udivmoddi4+0x2b2>
   1b9c2:	f1a9 0902 	sub.w	r9, r9, #2
   1b9c6:	4473      	add	r3, lr
   1b9c8:	1b1b      	subs	r3, r3, r4
   1b9ca:	b2ad      	uxth	r5, r5
   1b9cc:	fbb3 f0f8 	udiv	r0, r3, r8
   1b9d0:	fb08 3310 	mls	r3, r8, r0, r3
   1b9d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1b9d8:	fb00 fa0a 	mul.w	sl, r0, sl
   1b9dc:	45a2      	cmp	sl, r4
   1b9de:	d908      	bls.n	1b9f2 <__udivmoddi4+0x1da>
   1b9e0:	eb1e 0404 	adds.w	r4, lr, r4
   1b9e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1b9e8:	d26b      	bcs.n	1bac2 <__udivmoddi4+0x2aa>
   1b9ea:	45a2      	cmp	sl, r4
   1b9ec:	d969      	bls.n	1bac2 <__udivmoddi4+0x2aa>
   1b9ee:	3802      	subs	r0, #2
   1b9f0:	4474      	add	r4, lr
   1b9f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1b9f6:	fba0 8902 	umull	r8, r9, r0, r2
   1b9fa:	eba4 040a 	sub.w	r4, r4, sl
   1b9fe:	454c      	cmp	r4, r9
   1ba00:	46c2      	mov	sl, r8
   1ba02:	464b      	mov	r3, r9
   1ba04:	d354      	bcc.n	1bab0 <__udivmoddi4+0x298>
   1ba06:	d051      	beq.n	1baac <__udivmoddi4+0x294>
   1ba08:	2e00      	cmp	r6, #0
   1ba0a:	d069      	beq.n	1bae0 <__udivmoddi4+0x2c8>
   1ba0c:	ebb1 050a 	subs.w	r5, r1, sl
   1ba10:	eb64 0403 	sbc.w	r4, r4, r3
   1ba14:	fa04 fc0c 	lsl.w	ip, r4, ip
   1ba18:	40fd      	lsrs	r5, r7
   1ba1a:	40fc      	lsrs	r4, r7
   1ba1c:	ea4c 0505 	orr.w	r5, ip, r5
   1ba20:	e9c6 5400 	strd	r5, r4, [r6]
   1ba24:	2700      	movs	r7, #0
   1ba26:	e747      	b.n	1b8b8 <__udivmoddi4+0xa0>
   1ba28:	f1c2 0320 	rsb	r3, r2, #32
   1ba2c:	fa20 f703 	lsr.w	r7, r0, r3
   1ba30:	4095      	lsls	r5, r2
   1ba32:	fa01 f002 	lsl.w	r0, r1, r2
   1ba36:	fa21 f303 	lsr.w	r3, r1, r3
   1ba3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1ba3e:	4338      	orrs	r0, r7
   1ba40:	0c01      	lsrs	r1, r0, #16
   1ba42:	fbb3 f7fe 	udiv	r7, r3, lr
   1ba46:	fa1f f885 	uxth.w	r8, r5
   1ba4a:	fb0e 3317 	mls	r3, lr, r7, r3
   1ba4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1ba52:	fb07 f308 	mul.w	r3, r7, r8
   1ba56:	428b      	cmp	r3, r1
   1ba58:	fa04 f402 	lsl.w	r4, r4, r2
   1ba5c:	d907      	bls.n	1ba6e <__udivmoddi4+0x256>
   1ba5e:	1869      	adds	r1, r5, r1
   1ba60:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1ba64:	d22f      	bcs.n	1bac6 <__udivmoddi4+0x2ae>
   1ba66:	428b      	cmp	r3, r1
   1ba68:	d92d      	bls.n	1bac6 <__udivmoddi4+0x2ae>
   1ba6a:	3f02      	subs	r7, #2
   1ba6c:	4429      	add	r1, r5
   1ba6e:	1acb      	subs	r3, r1, r3
   1ba70:	b281      	uxth	r1, r0
   1ba72:	fbb3 f0fe 	udiv	r0, r3, lr
   1ba76:	fb0e 3310 	mls	r3, lr, r0, r3
   1ba7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1ba7e:	fb00 f308 	mul.w	r3, r0, r8
   1ba82:	428b      	cmp	r3, r1
   1ba84:	d907      	bls.n	1ba96 <__udivmoddi4+0x27e>
   1ba86:	1869      	adds	r1, r5, r1
   1ba88:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1ba8c:	d217      	bcs.n	1babe <__udivmoddi4+0x2a6>
   1ba8e:	428b      	cmp	r3, r1
   1ba90:	d915      	bls.n	1babe <__udivmoddi4+0x2a6>
   1ba92:	3802      	subs	r0, #2
   1ba94:	4429      	add	r1, r5
   1ba96:	1ac9      	subs	r1, r1, r3
   1ba98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1ba9c:	e73b      	b.n	1b916 <__udivmoddi4+0xfe>
   1ba9e:	4637      	mov	r7, r6
   1baa0:	4630      	mov	r0, r6
   1baa2:	e709      	b.n	1b8b8 <__udivmoddi4+0xa0>
   1baa4:	4607      	mov	r7, r0
   1baa6:	e6e7      	b.n	1b878 <__udivmoddi4+0x60>
   1baa8:	4618      	mov	r0, r3
   1baaa:	e6fb      	b.n	1b8a4 <__udivmoddi4+0x8c>
   1baac:	4541      	cmp	r1, r8
   1baae:	d2ab      	bcs.n	1ba08 <__udivmoddi4+0x1f0>
   1bab0:	ebb8 0a02 	subs.w	sl, r8, r2
   1bab4:	eb69 020e 	sbc.w	r2, r9, lr
   1bab8:	3801      	subs	r0, #1
   1baba:	4613      	mov	r3, r2
   1babc:	e7a4      	b.n	1ba08 <__udivmoddi4+0x1f0>
   1babe:	4660      	mov	r0, ip
   1bac0:	e7e9      	b.n	1ba96 <__udivmoddi4+0x27e>
   1bac2:	4618      	mov	r0, r3
   1bac4:	e795      	b.n	1b9f2 <__udivmoddi4+0x1da>
   1bac6:	4667      	mov	r7, ip
   1bac8:	e7d1      	b.n	1ba6e <__udivmoddi4+0x256>
   1baca:	4681      	mov	r9, r0
   1bacc:	e77c      	b.n	1b9c8 <__udivmoddi4+0x1b0>
   1bace:	3802      	subs	r0, #2
   1bad0:	442c      	add	r4, r5
   1bad2:	e747      	b.n	1b964 <__udivmoddi4+0x14c>
   1bad4:	f1ac 0c02 	sub.w	ip, ip, #2
   1bad8:	442b      	add	r3, r5
   1bada:	e72f      	b.n	1b93c <__udivmoddi4+0x124>
   1badc:	4638      	mov	r0, r7
   1bade:	e708      	b.n	1b8f2 <__udivmoddi4+0xda>
   1bae0:	4637      	mov	r7, r6
   1bae2:	e6e9      	b.n	1b8b8 <__udivmoddi4+0xa0>

0001bae4 <__aeabi_idiv0>:
   1bae4:	4770      	bx	lr
   1bae6:	bf00      	nop

0001bae8 <__aeabi_memclr>:
   1bae8:	2200      	movs	r2, #0
   1baea:	f000 b803 	b.w	1baf4 <__aeabi_memset>
   1baee:	bf00      	nop

0001baf0 <__aeabi_memcpy>:
   1baf0:	f7fd bf68 	b.w	199c4 <memcpy>

0001baf4 <__aeabi_memset>:
   1baf4:	b470      	push	{r4, r5, r6}
   1baf6:	0784      	lsls	r4, r0, #30
   1baf8:	d046      	beq.n	1bb88 <__aeabi_memset+0x94>
   1bafa:	1e4c      	subs	r4, r1, #1
   1bafc:	2900      	cmp	r1, #0
   1bafe:	d041      	beq.n	1bb84 <__aeabi_memset+0x90>
   1bb00:	b2d5      	uxtb	r5, r2
   1bb02:	4603      	mov	r3, r0
   1bb04:	e002      	b.n	1bb0c <__aeabi_memset+0x18>
   1bb06:	1e61      	subs	r1, r4, #1
   1bb08:	b3e4      	cbz	r4, 1bb84 <__aeabi_memset+0x90>
   1bb0a:	460c      	mov	r4, r1
   1bb0c:	f803 5b01 	strb.w	r5, [r3], #1
   1bb10:	0799      	lsls	r1, r3, #30
   1bb12:	d1f8      	bne.n	1bb06 <__aeabi_memset+0x12>
   1bb14:	2c03      	cmp	r4, #3
   1bb16:	d92e      	bls.n	1bb76 <__aeabi_memset+0x82>
   1bb18:	b2d5      	uxtb	r5, r2
   1bb1a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1bb1e:	2c0f      	cmp	r4, #15
   1bb20:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1bb24:	d919      	bls.n	1bb5a <__aeabi_memset+0x66>
   1bb26:	4626      	mov	r6, r4
   1bb28:	f103 0110 	add.w	r1, r3, #16
   1bb2c:	3e10      	subs	r6, #16
   1bb2e:	2e0f      	cmp	r6, #15
   1bb30:	f841 5c10 	str.w	r5, [r1, #-16]
   1bb34:	f841 5c0c 	str.w	r5, [r1, #-12]
   1bb38:	f841 5c08 	str.w	r5, [r1, #-8]
   1bb3c:	f841 5c04 	str.w	r5, [r1, #-4]
   1bb40:	f101 0110 	add.w	r1, r1, #16
   1bb44:	d8f2      	bhi.n	1bb2c <__aeabi_memset+0x38>
   1bb46:	f1a4 0110 	sub.w	r1, r4, #16
   1bb4a:	f021 010f 	bic.w	r1, r1, #15
   1bb4e:	f004 040f 	and.w	r4, r4, #15
   1bb52:	3110      	adds	r1, #16
   1bb54:	2c03      	cmp	r4, #3
   1bb56:	440b      	add	r3, r1
   1bb58:	d90d      	bls.n	1bb76 <__aeabi_memset+0x82>
   1bb5a:	461e      	mov	r6, r3
   1bb5c:	4621      	mov	r1, r4
   1bb5e:	3904      	subs	r1, #4
   1bb60:	2903      	cmp	r1, #3
   1bb62:	f846 5b04 	str.w	r5, [r6], #4
   1bb66:	d8fa      	bhi.n	1bb5e <__aeabi_memset+0x6a>
   1bb68:	1f21      	subs	r1, r4, #4
   1bb6a:	f021 0103 	bic.w	r1, r1, #3
   1bb6e:	3104      	adds	r1, #4
   1bb70:	440b      	add	r3, r1
   1bb72:	f004 0403 	and.w	r4, r4, #3
   1bb76:	b12c      	cbz	r4, 1bb84 <__aeabi_memset+0x90>
   1bb78:	b2d2      	uxtb	r2, r2
   1bb7a:	441c      	add	r4, r3
   1bb7c:	f803 2b01 	strb.w	r2, [r3], #1
   1bb80:	42a3      	cmp	r3, r4
   1bb82:	d1fb      	bne.n	1bb7c <__aeabi_memset+0x88>
   1bb84:	bc70      	pop	{r4, r5, r6}
   1bb86:	4770      	bx	lr
   1bb88:	460c      	mov	r4, r1
   1bb8a:	4603      	mov	r3, r0
   1bb8c:	e7c2      	b.n	1bb14 <__aeabi_memset+0x20>
   1bb8e:	5344      	.short	0x5344
   1bb90:	61662050 	.word	0x61662050
   1bb94:	43546c69 	.word	0x43546c69
   1bb98:	61662048 	.word	0x61662048
   1bb9c:	45476c69 	.word	0x45476c69
   1bba0:	61662054 	.word	0x61662054
   1bba4:	55526c69 	.word	0x55526c69
   1bba8:	6166204e 	.word	0x6166204e
   1bbac:	6c69      	.short	0x6c69
   1bbae:	7572      	.short	0x7572
   1bbb0:	612f7473 	.word	0x612f7473
   1bbb4:	732f7070 	.word	0x732f7070
   1bbb8:	6c2f6372 	.word	0x6c2f6372
   1bbbc:	722e6269 	.word	0x722e6269
   1bbc0:	00000073 	.word	0x00000073
   1bbc4:	0001bbae 	.word	0x0001bbae
   1bbc8:	00000013 	.word	0x00000013
   1bbcc:	0000005c 	.word	0x0000005c
   1bbd0:	00000005 	.word	0x00000005
   1bbd4:	0001bbae 	.word	0x0001bbae
   1bbd8:	00000013 	.word	0x00000013
   1bbdc:	00000065 	.word	0x00000065
   1bbe0:	00000005 	.word	0x00000005
   1bbe4:	50494843 	.word	0x50494843
   1bbe8:	61662038 	.word	0x61662038
   1bbec:	00006c69 	.word	0x00006c69
   1bbf0:	0001bbae 	.word	0x0001bbae
   1bbf4:	00000013 	.word	0x00000013
   1bbf8:	00000077 	.word	0x00000077
   1bbfc:	00000005 	.word	0x00000005
   1bc00:	0001bbae 	.word	0x0001bbae
   1bc04:	00000013 	.word	0x00000013
   1bc08:	0000007d 	.word	0x0000007d
   1bc0c:	0000000d 	.word	0x0000000d
   1bc10:	0001bbae 	.word	0x0001bbae
   1bc14:	00000013 	.word	0x00000013
   1bc18:	0000007c 	.word	0x0000007c
   1bc1c:	00000009 	.word	0x00000009
   1bc20:	696e6170 	.word	0x696e6170
   1bc24:	2063      	.short	0x2063
   1bc26:	6f6e      	.short	0x6f6e
   1bc28:	636f6c20 	.word	0x636f6c20
   1bc2c:	0a          	.byte	0x0a
   1bc2d:	61          	.byte	0x61
   1bc2e:	2074      	.short	0x2074
   1bc30:	6e696c20 	.word	0x6e696c20
   1bc34:	2065      	.short	0x2065
   1bc36:	000a      	.short	0x000a
   1bc38:	0001bbae 	.word	0x0001bbae
   1bc3c:	00000013 	.word	0x00000013
   1bc40:	00000095 	.word	0x00000095
   1bc44:	00000014 	.word	0x00000014
   1bc48:	6c6c6163 	.word	0x6c6c6163
   1bc4c:	60206465 	.word	0x60206465
   1bc50:	6974704f 	.word	0x6974704f
   1bc54:	3a3a6e6f 	.word	0x3a3a6e6f
   1bc58:	72776e75 	.word	0x72776e75
   1bc5c:	29287061 	.word	0x29287061
   1bc60:	6e6f2060 	.word	0x6e6f2060
   1bc64:	60206120 	.word	0x60206120
   1bc68:	656e6f4e 	.word	0x656e6f4e
   1bc6c:	61762060 	.word	0x61762060
   1bc70:	756c      	.short	0x756c
   1bc72:	65          	.byte	0x65
   1bc73:	00          	.byte	0x00
   1bc74:	0001bc73 	.word	0x0001bc73
   1bc78:	0001bc74 	.word	0x0001bc74
   1bc7c:	65737361 	.word	0x65737361
   1bc80:	6f697472 	.word	0x6f697472
   1bc84:	6166206e 	.word	0x6166206e
   1bc88:	64656c69 	.word	0x64656c69
   1bc8c:	2860203a 	.word	0x2860203a
   1bc90:	7466656c 	.word	0x7466656c
   1bc94:	203d3d20 	.word	0x203d3d20
   1bc98:	68676972 	.word	0x68676972
   1bc9c:	0a602974 	.word	0x0a602974
   1bca0:	656c2020 	.word	0x656c2020
   1bca4:	203a7466 	.word	0x203a7466
   1bca8:	60          	.byte	0x60
   1bca9:	60          	.byte	0x60
   1bcaa:	0a2c      	.short	0x0a2c
   1bcac:	67697220 	.word	0x67697220
   1bcb0:	203a7468 	.word	0x203a7468
   1bcb4:	60          	.byte	0x60
   1bcb5:	60          	.byte	0x60
   1bcb6:	203a      	.short	0x203a
   1bcb8:	0001bc7c 	.word	0x0001bc7c
   1bcbc:	0000002d 	.word	0x0000002d
   1bcc0:	0001bca9 	.word	0x0001bca9
   1bcc4:	0000000c 	.word	0x0000000c
   1bcc8:	0001bcb5 	.word	0x0001bcb5
   1bccc:	00000003 	.word	0x00000003
   1bcd0:	0001bcb8 	.word	0x0001bcb8
   1bcd4:	6e206f6e 	.word	0x6e206f6e
   1bcd8:	006c6c75 	.word	0x006c6c75
   1bcdc:	0001bcd4 	.word	0x0001bcd4
   1bce0:	00000007 	.word	0x00000007
   1bce4:	0001bcdc 	.word	0x0001bcdc
   1bce8:	0001bce8 	.word	0x0001bce8
   1bcec:	74737572 	.word	0x74737572
   1bcf0:	6e796d2f 	.word	0x6e796d2f
   1bcf4:	2f747765 	.word	0x2f747765
   1bcf8:	2f637273 	.word	0x2f637273
   1bcfc:	2e62696c 	.word	0x2e62696c
   1bd00:	00007372 	.word	0x00007372
   1bd04:	0001bcec 	.word	0x0001bcec
   1bd08:	00000016 	.word	0x00000016
   1bd0c:	000000db 	.word	0x000000db
   1bd10:	00000011 	.word	0x00000011
   1bd14:	00008e55 	.word	0x00008e55
   1bd18:	00000004 	.word	0x00000004
   1bd1c:	00000004 	.word	0x00000004
   1bd20:	00012413 	.word	0x00012413
   1bd24:	65737361 	.word	0x65737361
   1bd28:	6f697472 	.word	0x6f697472
   1bd2c:	6166206e 	.word	0x6166206e
   1bd30:	64656c69 	.word	0x64656c69
   1bd34:	2860203a 	.word	0x2860203a
   1bd38:	7466656c 	.word	0x7466656c
   1bd3c:	203d3d20 	.word	0x203d3d20
   1bd40:	68676972 	.word	0x68676972
   1bd44:	0a602974 	.word	0x0a602974
   1bd48:	656c2020 	.word	0x656c2020
   1bd4c:	203a7466 	.word	0x203a7466
   1bd50:	60          	.byte	0x60
   1bd51:	60          	.byte	0x60
   1bd52:	0a2c      	.short	0x0a2c
   1bd54:	67697220 	.word	0x67697220
   1bd58:	203a7468 	.word	0x203a7468
   1bd5c:	60          	.byte	0x60
   1bd5d:	60          	.byte	0x60
   1bd5e:	203a      	.short	0x203a
   1bd60:	0001bd24 	.word	0x0001bd24
   1bd64:	0000002d 	.word	0x0000002d
   1bd68:	0001bd51 	.word	0x0001bd51
   1bd6c:	0000000c 	.word	0x0000000c
   1bd70:	0001bd5d 	.word	0x0001bd5d
   1bd74:	00000003 	.word	0x00000003
   1bd78:	0001bd60 	.word	0x0001bd60
   1bd7c:	74736564 	.word	0x74736564
   1bd80:	74616e69 	.word	0x74616e69
   1bd84:	206e6f69 	.word	0x206e6f69
   1bd88:	20646e61 	.word	0x20646e61
   1bd8c:	72756f73 	.word	0x72756f73
   1bd90:	73206563 	.word	0x73206563
   1bd94:	6563696c 	.word	0x6563696c
   1bd98:	61682073 	.word	0x61682073
   1bd9c:	64206576 	.word	0x64206576
   1bda0:	65666669 	.word	0x65666669
   1bda4:	746e6572 	.word	0x746e6572
   1bda8:	6e656c20 	.word	0x6e656c20
   1bdac:	73687467 	.word	0x73687467
   1bdb0:	0001bd7c 	.word	0x0001bd7c
   1bdb4:	00000034 	.word	0x00000034
   1bdb8:	0001bdb0 	.word	0x0001bdb0
   1bdbc:	0001bdbc 	.word	0x0001bdbc
   1bdc0:	7375722f 	.word	0x7375722f
   1bdc4:	352f6374 	.word	0x352f6374
   1bdc8:	66613765 	.word	0x66613765
   1bdcc:	39363634 	.word	0x39363634
   1bdd0:	65303866 	.word	0x65303866
   1bdd4:	38366635 	.word	0x38366635
   1bdd8:	31343132 	.word	0x31343132
   1bddc:	30353066 	.word	0x30353066
   1bde0:	61333931 	.word	0x61333931
   1bde4:	39373662 	.word	0x39373662
   1bde8:	62646661 	.word	0x62646661
   1bdec:	2f316234 	.word	0x2f316234
   1bdf0:	2f637273 	.word	0x2f637273
   1bdf4:	6362696c 	.word	0x6362696c
   1bdf8:	2f65726f 	.word	0x2f65726f
   1bdfc:	7263616d 	.word	0x7263616d
   1be00:	6d2f736f 	.word	0x6d2f736f
   1be04:	722e646f 	.word	0x722e646f
   1be08:	00000073 	.word	0x00000073
   1be0c:	0001bdc0 	.word	0x0001bdc0
   1be10:	00000049 	.word	0x00000049
   1be14:	00000012 	.word	0x00000012
   1be18:	0000000d 	.word	0x0000000d
   1be1c:	656d6f53 	.word	0x656d6f53
   1be20:	656e6f4e 	.word	0x656e6f4e
   1be24:	00008e4d 	.word	0x00008e4d
   1be28:	00000004 	.word	0x00000004
   1be2c:	00000004 	.word	0x00000004
   1be30:	0000942b 	.word	0x0000942b
   1be34:	00000060 	.word	0x00000060
   1be38:	0001be34 	.word	0x0001be34
   1be3c:	20697073 	.word	0x20697073
   1be40:	73756c66 	.word	0x73756c66
   1be44:	61662068 	.word	0x61662068
   1be48:	6c69      	.short	0x6c69
   1be4a:	552f      	.short	0x552f
   1be4c:	73726573 	.word	0x73726573
   1be50:	70754c2f 	.word	0x70754c2f
   1be54:	502f7970 	.word	0x502f7970
   1be58:	54656e69 	.word	0x54656e69
   1be5c:	2f656d69 	.word	0x2f656d69
   1be60:	656e6970 	.word	0x656e6970
   1be64:	656d6974 	.word	0x656d6974
   1be68:	7375722d 	.word	0x7375722d
   1be6c:	796d2d74 	.word	0x796d2d74
   1be70:	7477656e 	.word	0x7477656e
   1be74:	7375722f 	.word	0x7375722f
   1be78:	74732f74 	.word	0x74732f74
   1be7c:	35333737 	.word	0x35333737
   1be80:	64636c2d 	.word	0x64636c2d
   1be84:	7461622d 	.word	0x7461622d
   1be88:	722d6863 	.word	0x722d6863
   1be8c:	72732f73 	.word	0x72732f73
   1be90:	696c2f63 	.word	0x696c2f63
   1be94:	73722e62 	.word	0x73722e62
   1be98:	20697073 	.word	0x20697073
   1be9c:	61746164 	.word	0x61746164
   1bea0:	69616620 	.word	0x69616620
   1bea4:	0000006c 	.word	0x0000006c
   1bea8:	0001be4a 	.word	0x0001be4a
   1beac:	0000004e 	.word	0x0000004e
   1beb0:	000000b0 	.word	0x000000b0
   1beb4:	00000009 	.word	0x00000009
   1beb8:	0001be4a 	.word	0x0001be4a
   1bebc:	0000004e 	.word	0x0000004e
   1bec0:	00000098 	.word	0x00000098
   1bec4:	0000000d 	.word	0x0000000d
   1bec8:	20697073 	.word	0x20697073
   1becc:	20646d63 	.word	0x20646d63
   1bed0:	6c696166 	.word	0x6c696166
   1bed4:	0001be4a 	.word	0x0001be4a
   1bed8:	0000004e 	.word	0x0000004e
   1bedc:	00000097 	.word	0x00000097
   1bee0:	00000009 	.word	0x00000009
   1bee4:	0001be4a 	.word	0x0001be4a
   1bee8:	0000004e 	.word	0x0000004e
   1beec:	0000009d 	.word	0x0000009d
   1bef0:	00000011 	.word	0x00000011
   1bef4:	0001be4a 	.word	0x0001be4a
   1bef8:	0000004e 	.word	0x0000004e
   1befc:	0000009c 	.word	0x0000009c
   1bf00:	0000000d 	.word	0x0000000d
   1bf04:	0001be4a 	.word	0x0001be4a
   1bf08:	0000004e 	.word	0x0000004e
   1bf0c:	000000c5 	.word	0x000000c5
   1bf10:	0000002d 	.word	0x0000002d
   1bf14:	0001be4a 	.word	0x0001be4a
   1bf18:	0000004e 	.word	0x0000004e
   1bf1c:	000000c9 	.word	0x000000c9
   1bf20:	0000002d 	.word	0x0000002d
   1bf24:	0001be4a 	.word	0x0001be4a
   1bf28:	0000004e 	.word	0x0000004e
   1bf2c:	000000d8 	.word	0x000000d8
   1bf30:	00000019 	.word	0x00000019
	...

0001bf40 <str.0>:
   1bf40:	65747461 2074706d 61206f74 77206464     attempt to add w
   1bf50:	20687469 7265766f 776f6c66 0001be4a     ith overflowJ...
   1bf60:	0000004e 000000d9 00000019 0001be4a     N...........J...
   1bf70:	0000004e 000000db 00000019 0001be4a     N...........J...
   1bf80:	0000004e 000000dc 00000019 20697073     N...........spi 
   1bf90:	74696e69 69616620 0000006c 0001be4a     init fail...J...
   1bfa0:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1bfb0:	0001bfac 012d2c01 00002d2c 0001bfb4     .....,-.,-......
   1bfc0:	00000007 0001bfc0 008402a2 0001bfc8     ................
   1bfd0:	000000c5 0001bfd0 0000000a 0001bfd8     ................
   1bfe0:	00002a8a 0001bfe0 0000ee8a 0001bfe8     .*..............
   1bff0:	0000000e 0001bff0 00000000 0001bff8     ................
   1c000:	00000008 0001c000 00000005 0001c008     ................
   1c010:	0001be4a 0000004e 00000088 00000009     J...N...........
   1c020:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   1c030:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   1c040:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   1c050:	39393236 65396264 33323863 62696c2f     6299db9ec823/lib
   1c060:	70696863 2e302d38 2f322e31 2f637273     chip8-0.1.2/src/
   1c070:	2e62696c 00007372 0001c020 00000056     lib.rs.. ...V...
   1c080:	0000009d 00000014 0001c020 00000056     ........ ...V...
   1c090:	000000d4 00000011 0001c020 00000056     ........ ...V...
   1c0a0:	000000d5 0000001a 00000000 00000000     ................

0001c0b0 <str.0>:
   1c0b0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1c0c0:	20687469 7265766f 776f6c66 0001c020     ith overflow ...
   1c0d0:	00000056 000000d5 00000011 00000005     V...............
   1c0e0:	0001c0dc 4c205d5b 78562044 495b202c     ....[] LD Vx, [I
   1c0f0:	0000005d 0001c0e4 00000001 0001c0e5     ]...............
   1c100:	0000000c 0001c0f4 00000000 00000020     ............ ...
   1c110:	00000008 00000002 00000000 00000000     ................
   1c120:	00000004 00000003 0001c108 6362696c     ............libc
   1c130:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1c140:	6e6e6e20 00000040 00000020 0001c12c      nnn@... ...,...
   1c150:	00000008 0001c12c 00000008 0001c020     ....,....... ...
   1c160:	00000056 000001a1 0001c14c 0001c020     V.......L... ...
   1c170:	00000056 000001a3 0000001d 0001c020     V........... ...
   1c180:	00000056 000001a4 0000002a 0001c020     V.......*... ...
   1c190:	00000056 000001a4 00000021 0001c020     V.......!... ...
   1c1a0:	00000056 000001a4 00000015 444c205d     V...........] LD
   1c1b0:	5d495b20 7856202c 0001c0e4 00000001      [I], Vx........
   1c1c0:	0001c1ac 0000000c 0001c1b8 0001c12c     ............,...
   1c1d0:	00000008 0001c12c 00000008 0001c020     ....,....... ...
   1c1e0:	00000056 0000019a 0001c1cc 0001c020     V........... ...
   1c1f0:	00000056 0000019c 0000001d 0001c020     V........... ...
   1c200:	00000056 0000019d 00000035 0001c020     V.......5... ...
   1c210:	00000056 0000019d 0000001e 0001c020     V........... ...
   1c220:	00000056 0000019d 00000015 444c205d     V...........] LD
   1c230:	202c4220 00007856 0001c0e4 00000001      B, Vx..........
   1c240:	0001c22c 0000000a 0001c238 0001c12c     ,.......8...,...
   1c250:	00000008 0001c12c 00000008 0001c020     ....,....... ...
   1c260:	00000056 00000193 0001c24c 0001c020     V.......L... ...
   1c270:	00000056 00000194 0000001b 0001c020     V........... ...
   1c280:	00000056 00000195 00000011 0001c020     V........... ...
   1c290:	00000056 00000196 0000001a 0001c020     V........... ...
   1c2a0:	00000056 00000196 00000011 0001c020     V........... ...
   1c2b0:	00000056 00000197 0000001a 0001c020     V........... ...
   1c2c0:	00000056 00000197 00000011 444c205d     V...........] LD
   1c2d0:	202c4620 00007856 0001c0e4 00000001      F, Vx..........
   1c2e0:	0001c2cc 0000000a 0001c2d8 0001c12c     ............,...
   1c2f0:	00000008 0001c12c 00000008 0001c020     ....,....... ...
   1c300:	00000056 0000018f 0001c2ec 0001c020     V........... ...
   1c310:	00000056 00000190 0000001b 0001c020     V........... ...
   1c320:	00000056 00000190 0000001a 00000000     V...............

0001c330 <str.1>:
   1c330:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1c340:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1c350:	41205d77 49204444 7856202c 0001c0e4     w] ADD I, Vx....
   1c360:	00000001 0001c351 0000000b 0001c35c     ....Q.......\...
   1c370:	0001c12c 00000008 0001c12c 00000008     ,.......,.......
   1c380:	0001c020 00000056 0000018b 0001c370      ...V.......p...
   1c390:	0001c020 00000056 0000018c 0000002e      ...V...........
   1c3a0:	444c205d 2c545320 00785620 0001c0e4     ] LD ST, Vx.....
   1c3b0:	00000001 0001c3a0 0000000b 0001c3ac     ................
   1c3c0:	0001c12c 00000008 0001c12c 00000008     ,.......,.......
   1c3d0:	0001c020 00000056 00000187 0001c3c0      ...V...........
   1c3e0:	0001c020 00000056 00000188 0000001b      ...V...........
   1c3f0:	444c205d 2c544420 00785620 0001c0e4     ] LD DT, Vx.....
   1c400:	00000001 0001c3f0 0000000b 0001c3fc     ................
   1c410:	0001c12c 00000008 0001c12c 00000008     ,.......,.......
   1c420:	0001c020 00000056 00000183 0001c410      ...V...........
   1c430:	0001c020 00000056 00000184 0000001b      ...V...........
   1c440:	444c205d 2c785620 00004b20 0001c0e4     ] LD Vx, K......
   1c450:	00000001 0001c440 0000000a 0001c44c     ....@.......L...
   1c460:	0001c12c 00000008 0001c12c 00000008     ,.......,.......
   1c470:	0001c020 00000056 0000017f 0001c460      ...V.......`...
   1c480:	0001c020 00000056 00000180 00000011      ...V...........
   1c490:	444c205d 2c785620 00544420 0001c0e4     ] LD Vx, DT.....
   1c4a0:	00000001 0001c490 0000000b 0001c49c     ................
   1c4b0:	0001c12c 00000008 0001c12c 00000008     ,.......,.......
   1c4c0:	0001c020 00000056 0000017b 0001c4b0      ...V...{.......
   1c4d0:	0001c020 00000056 0000017c 00000011      ...V...|.......
   1c4e0:	4b53205d 5620504e 00000078 0001c0e4     ] SKNP Vx.......
   1c4f0:	00000001 0001c4e0 00000009 0001c4ec     ................
   1c500:	0001c12c 00000008 0001c12c 00000008     ,.......,.......
   1c510:	0001c020 00000056 00000175 0001c500      ...V...u.......
   1c520:	0001c020 00000056 00000176 00000021      ...V...v...!...
   1c530:	0001c0e4 00000001 0001c134 00000008     ........4.......
   1c540:	0001c530 0001c12c 00000008 0001c12c     0...,.......,...
   1c550:	00000008 0001c020 00000056 0000016f     .... ...V...o...
   1c560:	0001c544 0001c020 00000056 00000170     D... ...V...p...
   1c570:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1c580:	006e202c 0001c0e4 00000001 0001c574     , n.........t...
   1c590:	0000000f 0001c584 0001c12c 00000008     ........,.......
   1c5a0:	0001c12c 00000008 0001c020 00000056     ,....... ...V...
   1c5b0:	00000156 0001c598 0001c020 00000056     V....... ...V...
   1c5c0:	00000157 0000001d 0001c020 00000056     W....... ...V...
   1c5d0:	00000158 0000001d 0001c020 00000056     X....... ...V...
   1c5e0:	0000015e 00000026 0001c020 00000056     ^...&... ...V...
   1c5f0:	0000015e 0000001d 0001c020 00000056     ^....... ...V...
   1c600:	00000160 00000021 00000000 00000000     `...!...........

0001c610 <str.2>:
   1c610:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1c620:	6574616c 65687420 6d657220 646e6961     late the remaind
   1c630:	77207265 20687469 69642061 6f736976     er with a diviso
   1c640:	666f2072 72657a20 0000006f 0001c020     r of zero... ...
   1c650:	00000056 00000163 00000025 0001c020     V...c...%... ...
   1c660:	00000056 00000165 0000002d 00000000     V...e...-.......

0001c670 <str.3>:
   1c670:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1c680:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1c690:	00000077 0001c020 00000056 00000165     w... ...V...e...
   1c6a0:	00000028 00000000 00000000 00000000     (...............

0001c6b0 <str.4>:
   1c6b0:	65747461 2074706d 73206f74 74666968     attempt to shift
   1c6c0:	66656c20 69772074 6f206874 66726576      left with overf
   1c6d0:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1c6e0:	0001c0e4 00000001 0001c6d3 0000000c     ................
   1c6f0:	0001c6e0 0001c12c 00000008 0001c12c     ....,.......,...
   1c700:	00000008 0001c020 00000056 00000152     .... ...V...R...
   1c710:	0001c6f4 0001c020 00000056 00000153     .... ...V...S...
   1c720:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1c730:	0001c0e4 00000001 0001c724 0000000c     ........$.......
   1c740:	0001c730 0001c12c 00000008 0001c12c     0...,.......,...
   1c750:	00000008 0001c020 00000056 0000014e     .... ...V...N...
   1c760:	0001c744 444c205d 202c4920 006e6e6e     D...] LD I, nnn.
   1c770:	0001c0e4 00000001 0001c764 0000000b     ........d.......
   1c780:	0001c770 0001c12c 00000008 0001c12c     p...,.......,...
   1c790:	00000008 0001c020 00000056 0000014a     .... ...V...J...
   1c7a0:	0001c784 4e53205d 78562045 7956202c     ....] SNE Vx, Vy
   1c7b0:	0001c0e4 00000001 0001c7a4 0000000c     ................
   1c7c0:	0001c7b0 0001c12c 00000008 0001c12c     ....,.......,...
   1c7d0:	00000008 0001c020 00000056 00000144     .... ...V...D...
   1c7e0:	0001c7c4 0001c020 00000056 00000145     .... ...V...E...
   1c7f0:	00000014 0001c020 00000056 00000145     .... ...V...E...
   1c800:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1c810:	0001c0e4 00000001 0001c804 0000000c     ................
   1c820:	0001c810 0001c12c 00000008 0001c12c     ....,.......,...
   1c830:	00000008 0001c020 00000056 0000013f     .... ...V...?...
   1c840:	0001c824 0001c020 00000056 00000140     $... ...V...@...
   1c850:	00000020 0001c020 00000056 00000141      ... ...V...A...
   1c860:	0000001d 0001c020 00000056 00000141     .... ...V...A...
   1c870:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1c880:	00000079 0001c0e4 00000001 0001c874     y...........t...
   1c890:	0000000d 0001c884 0001c12c 00000008     ........,.......
   1c8a0:	0001c12c 00000008 0001c020 00000056     ,....... ...V...
   1c8b0:	00000139 0001c898 0001c020 00000056     9....... ...V...
   1c8c0:	0000013a 0000001e 0001c020 00000056     :....... ...V...
   1c8d0:	0000013a 00000038 0001c020 00000056     :...8... ...V...
   1c8e0:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1c8f0:	7956202c 0001c0e4 00000001 0001c8e8     , Vy............
   1c900:	0000000c 0001c8f4 0001c12c 00000008     ........,.......
   1c910:	0001c12c 00000008 0001c020 00000056     ,....... ...V...
   1c920:	00000134 0001c908 0001c020 00000056     4....... ...V...
   1c930:	00000135 0000001f 0001c020 00000056     5....... ...V...
   1c940:	00000136 0000001d 0001c020 00000056     6....... ...V...
   1c950:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1c960:	7956202c 0001c0e4 00000001 0001c958     , Vy........X...
   1c970:	0000000c 0001c964 0001c12c 00000008     ....d...,.......
   1c980:	0001c12c 00000008 0001c020 00000056     ,....... ...V...
   1c990:	0000012e 0001c978 0001c020 00000056     ....x... ...V...
   1c9a0:	0000012f 0000001e 0001c020 00000056     /....... ...V...
   1c9b0:	0000012f 00000038 0001c020 00000056     /...8... ...V...
   1c9c0:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1c9d0:	7956202c 0001c0e4 00000001 0001c9c8     , Vy............
   1c9e0:	0000000c 0001c9d4 0001c12c 00000008     ........,.......
   1c9f0:	0001c12c 00000008 0001c020 00000056     ,....... ...V...
   1ca00:	00000128 0001c9e8 0001c020 00000056     (....... ...V...
   1ca10:	00000129 0000001e 0001c020 00000056     )....... ...V...
   1ca20:	00000129 00000038 0001c020 00000056     )...8... ...V...
   1ca30:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1ca40:	7956202c 0001c0e4 00000001 0001ca38     , Vy........8...
   1ca50:	0000000c 0001ca44 0001c12c 00000008     ....D...,.......
   1ca60:	0001c12c 00000008 0001c020 00000056     ,....... ...V...
   1ca70:	00000124 0001ca58 0001c020 00000056     $...X... ...V...
   1ca80:	00000125 0000001e 0001c020 00000056     %....... ...V...
   1ca90:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1caa0:	7956202c 0001c0e4 00000001 0001ca98     , Vy............
   1cab0:	0000000c 0001caa4 0001c12c 00000008     ........,.......
   1cac0:	0001c12c 00000008 0001c020 00000056     ,....... ...V...
   1cad0:	00000120 0001cab8 0001c020 00000056      ....... ...V...
   1cae0:	00000121 0000001e 0001c020 00000056     !....... ...V...
   1caf0:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1cb00:	00795620 0001c0e4 00000001 0001caf8      Vy.............
   1cb10:	0000000b 0001cb04 0001c12c 00000008     ........,.......
   1cb20:	0001c12c 00000008 0001c020 00000056     ,....... ...V...
   1cb30:	0000011c 0001cb18 0001c020 00000056     ........ ...V...
   1cb40:	0000011d 0000001e 0001c020 00000056     ........ ...V...
   1cb50:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1cb60:	00795620 0001c0e4 00000001 0001cb58      Vy.........X...
   1cb70:	0000000b 0001cb64 0001c12c 00000008     ....d...,.......
   1cb80:	0001c12c 00000008 0001c020 00000056     ,....... ...V...
   1cb90:	00000118 0001cb78 0001c020 00000056     ....x... ...V...
   1cba0:	00000119 0000001d 0001c020 00000056     ........ ...V...
   1cbb0:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1cbc0:	6b6b202c 0001c0e4 00000001 0001cbb8     , kk............
   1cbd0:	0000000c 0001cbc4 0001c12c 00000008     ........,.......
   1cbe0:	0001c12c 00000008 0001c020 00000056     ,....... ...V...
   1cbf0:	00000114 0001cbd8 0001c020 00000056     ........ ...V...
   1cc00:	00000115 0000001d 0001c020 00000056     ........ ...V...
   1cc10:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1cc20:	006b6b20 0001c0e4 00000001 0001cc18      kk.............
   1cc30:	0000000b 0001cc24 0001c12c 00000008     ....$...,.......
   1cc40:	0001c12c 00000008 0001c020 00000056     ,....... ...V...
   1cc50:	00000110 0001cc38 0001c020 00000056     ....8... ...V...
   1cc60:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1cc70:	706f2064 0000203a 0001c0e4 00000001     d op: ..........
   1cc80:	0001cc68 0000000e 0001cc78 00000000     h.......x.......
   1cc90:	00000020 00000008 00000002 00000000      ...............
   1cca0:	00000000 00000004 00000003 00000001     ................
   1ccb0:	00000020 00000008 00000002 00000000      ...............
   1ccc0:	00000000 00000004 00000003 0001cc8c     ................
   1ccd0:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   1cce0:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   1ccf0:	0001ccd0 0000001e 00000005 00000032     ............2...
   1cd00:	4553205d 2c785620 00795620 0001c0e4     ] SE Vx, Vy.....
   1cd10:	00000001 0001cd00 0000000b 0001cd0c     ................
   1cd20:	0001c12c 00000008 0001c12c 00000008     ,.......,.......
   1cd30:	0001c020 00000056 0000010a 0001cd20      ...V....... ...
   1cd40:	0001c020 00000056 0000010b 00000014      ...V...........
   1cd50:	0001c020 00000056 0000010b 00000021      ...V.......!...
   1cd60:	4e53205d 78562045 6b6b202c 0001c0e4     ] SNE Vx, kk....
   1cd70:	00000001 0001cd60 0000000c 0001cd6c     ....`.......l...
   1cd80:	0001c12c 00000008 0001c12c 00000008     ,.......,.......
   1cd90:	0001c020 00000056 00000104 0001cd80      ...V...........
   1cda0:	0001c020 00000056 00000105 00000014      ...V...........
   1cdb0:	4553205d 20785620 00006b6b 0001c0e4     ] SE Vx kk......
   1cdc0:	00000001 0001cdb0 0000000a 0001cdbc     ................
   1cdd0:	0001c12c 00000008 0001c12c 00000008     ,.......,.......
   1cde0:	0001c020 00000056 000000fe 0001cdd0      ...V...........
   1cdf0:	0001c020 00000056 000000ff 00000014      ...V...........
   1ce00:	4143205d 6e204c4c 00006e6e 0001c0e4     ] CALL nnn......
   1ce10:	00000001 0001ce00 0000000a 0001ce0c     ................
   1ce20:	0001c12c 00000008 0001c12c 00000008     ,.......,.......
   1ce30:	0001c020 00000056 000000f9 0001ce20      ...V....... ...
   1ce40:	0001c0e4 00000001 0001c13c 00000008     ........<.......
   1ce50:	0001ce40 0001c12c 00000008 0001c12c     @...,.......,...
   1ce60:	00000008 0001c020 00000056 000000f5     .... ...V.......
   1ce70:	0001ce54 5953205d 6e6e2053 0000006e     T...] SYS nnn...
   1ce80:	0001c0e4 00000001 0001ce74 00000009     ........t.......
   1ce90:	0001ce80 0001c12c 00000008 0001c12c     ....,.......,...
   1cea0:	00000008 0001c020 00000056 000000f1     .... ...V.......
   1ceb0:	0001ce94 20746f6e 6c706d69 6e656d65     ....not implemen
   1cec0:	00646574 0001ccd0 0000001e 00000002     ted.............
   1ced0:	00000002 4552205d 00000054 0001c0e4     ....] RET.......
   1cee0:	00000001 0001ced4 00000005 0001cedc     ................
   1cef0:	0001c12c 00000008 0001c12c 00000008     ,.......,.......
   1cf00:	0001c020 00000056 000000ec 0001cef0      ...V...........
   1cf10:	4c43205d 00000053 0001c0e4 00000001     ] CLS...........
   1cf20:	0001cf10 00000005 0001cf18 0001c12c     ............,...
   1cf30:	00000008 0001c12c 00000008 0001c020     ....,....... ...
   1cf40:	00000056 000000e5 0001cf2c 0001c020     V.......,... ...
   1cf50:	00000056 00000093 0000001b 0001c020     V........... ...
   1cf60:	00000056 00000097 00000009 0001c020     V........... ...
   1cf70:	00000056 000000bb 0000000d 0001c020     V........... ...
   1cf80:	00000056 000000be 0000000d 00011289     V...............
   1cf90:	00000004 00000004 00012413 74737552     .........$..Rust
   1cfa0:	49484320 630a3850 38706968 00000000      CHIP8.chip8....
   1cfb0:	00000000 0001cfa7 00000006 0001cfb0     ................
   1cfc0:	50494843 74732038 65747261 1a120a64     CHIP8 started...
   1cfd0:	30302e32 202e4320 62656745 20677265     2.00 C. Egeberg 
   1cfe0:	382f3831 3139272d 13810380 55f1c8a8     18/8-'91.......U
   1cff0:	cca80560 738755f0 72276386 9427e000     `....U.s.c'r..'.
   1d000:	e287406e e187276e 0c691a68 006b386a     n@..n'..h.i.j8k.
   1d010:	1a6d026c eda85027 d4dcb4da 003ed023     l.m.'P......#.>.
   1d020:	cca87c12 008565f0 5284ffc4 ffc4f624     .|...e.....R$...
   1d030:	1e265284 a1e00160 f736d627 608e4e12     .R&.`...'.6..N.`
   1d040:	646e7a28 d6277a28 07f02a12 10130040     (znd(z'..*..@...
   1d050:	06808080 0681a081 00401580 01409a12     ..........@...@.
   1d060:	ff409a12 c8129a12 06809080 0681b081     ..@.............
   1d070:	00401580 0140b212 ff40b212 c812b212     ..@...@...@.....
   1d080:	b4daeda8 006b386a f36eb4da 046ee287     ....j8k...n...n.
   1d090:	326ee187 80807a28 c0810680 15800681     ..n2(z..........
   1d0a0:	e0120040 e0120140 e012ff40 90805412     @...@...@....T..
   1d0b0:	d0810680 15800681 f8120040 f8120140     ........@...@...
   1d0c0:	f812ff40 eda85412 026cd4dc d4dc1a6d     @....T....l.m...
   1d0d0:	e287cf6e e187206e 7a28196e 3f605412     n...n ..n.(z.T`?
   1d0e0:	5027a828 b4daeda8 406ed4dc 7080e387     (.'P......n@...p
   1d0f0:	0030e280 608e3212 8a287a28 1166e000     ..0..2.`(z(...f.
   1d100:	caa80a67 1166e627 c8a81067 0064e627     g...'.f.g...'.d.
   1d110:	00660865 19ab0f67 22ab69d4 036069d5     e.f.g....i.".i`.
   1d120:	003ea828 19abc613 22ab69d4 027469d5     (.>......i.".it.
   1d130:	30340275 19ab4813 22ab69d4 036069d5     u.40.H...i.".i`.
   1d140:	003ea828 19abc613 22ab69d4 027669d5     (.>......i.".iv.
   1d150:	68131636 69d419ab 69d522ab a8280360     6..h...i.".i`.(.
   1d160:	c613003e 69d419ab 69d522ab fe75fe74     >......i.".it.u.
   1d170:	86130034 69d419ab 69d522ab a8280360     4......i.".i`.(.
   1d180:	c613003e 69d419ab 69d522ab 0036fe76     >......i.".iv.6.
   1d190:	4813a613 69d522ab 69d52bab 70831a12     ...H.".i.+.i...p
   1d1a0:	e283036e 90858084 a1ee066e 036e3214     n.......n....2n.
   1d1b0:	4a14a1ee a1ee086e 076e6214 7a14a1ee     ...Jn....bn....z
   1d1c0:	02750343 fe750043 02740243 fe740143     C.u.C.u.C.t.C.t.
   1d1d0:	50814080 0082ba27 e280086e 92140030     .@.P'...n...0...
   1d1e0:	2080076e 0542e282 06429a14 0742b214     n.. ..B...B...B.
   1d1f0:	5027ec14 e287fc6e 40883187 50175089     ..'Pn....1.@.P.P
   1d200:	50814080 ba270271 086e0082 0030e280     .@.Pq.'...n...0.
   1d210:	0363f213 0e140275 50814080 ba27fe71     ..c.u....@.Pq.'.
   1d220:	086e0082 0030e280 0063f213 0e14fe75     ..n...0...c.u...
   1d230:	50814080 ba270270 086e0082 0030e280     .@.Pp.'...n...0.
   1d240:	0263f213 0e140274 50814080 ba27fe70     ..c.t....@.Pp.'.
   1d250:	086e0082 0030e280 0163f213 0e14fe74     ..n...0...c.t...
   1d260:	94d85027 ee00f08e e280f06e 55f03180     'P......n....1.U
   1d270:	54d4f1a8 05610176 004007f0 241418f1     ...Tv.a...@....$
   1d280:	e280f06e 55f03180 54d4f5a8 a0800476     n....1.U...Tv...
   1d290:	ba27b081 e280f06e d2140030 e3870c6e     ..'.n...0...n...
   1d2a0:	d081c080 f06eba27 0030e280 306ee414     ....'.n...0...n0
   1d2b0:	ff60e387 15f018f0 01432414 02433a64     ..`......$C.d:C.
   1d2c0:	24140064 70837082 e2820c6e b081a080     d..$.p.pn.......
   1d2d0:	eda8ba27 e280f06e 24150030 0c42b4da     '...n...0..$..B.
   1d2e0:	0042027b 0842fe7b 0442027a b4dafe7a     {.B.{.B.z.B.z...
   1d2f0:	806eee00 003107f1 0034d415 0081d415     ..n...1...4.....
   1d300:	003f0e83 90835615 004fb583 00338c15     ..?..V....O...3.
   1d310:	e3877415 a5838083 bc15004f a4150033     .t......O...3...
   1d320:	d415e387 a5838083 bc15004f a4150033     ........O...3...
   1d330:	9083e387 004fb583 00338c15 e3877415     ......O...3..t..
   1d340:	4063d415 00413281 b4dad415 b4da027b     ..c@.2A.....{...
   1d350:	e287f36e 21870c62 1063ee00 00413281     n...b..!..c..2A.
   1d360:	b4dad415 b4dafe7b e287f36e 21870062     ....{...n...b..!
   1d370:	2063ee00 00413281 b4dad415 b4da027a     ..c .2A.....z...
   1d380:	e287f36e 21870862 8063ee00 00413281     n...b..!..c..2A.
   1d390:	b4dad415 b4dafe7a e287f36e 21870462     ....z...n...b..!
   1d3a0:	f0c1ee00 00301280 0c6ee415 e382e387     ......0...n.....
   1d3b0:	b4da0e15 004f0e80 0462f215 1416fe7a     ......O...b.z...
   1d3c0:	004f0e80 0c62fe15 1416027b 004f0e80     ..O...b.{.....O.
   1d3d0:	08620a16 1416027a 004f0e80 0062dc15     ..b.z.....O...b.
   1d3e0:	b4dafe7b e287f36e ee002187 70837082     {...n....!...p.p
   1d3f0:	e282306e d081c080 eda8ba27 e280f06e     n0......'...n...
   1d400:	4c160030 3042d4dc 0042027d 2042fe7d     0..L..B0}.B.}.B 
   1d410:	1042027c d4dcfe7c 806eee00 003107f1     |.B.|.....n...1.
   1d420:	00340417 00810417 004f0e83 90837e16     ..4.......O..~..
   1d430:	004fd583 0033b616 e3879c16 c5838083     ..O...3.........
   1d440:	ea16004f d0160033 0417e387 c5838083     O...3...........
   1d450:	ea16004f d0160033 9083e387 004fd583     O...3.........O.
   1d460:	0033b616 e3879c16 40630417 00413281     ..3.......c@.2A.
   1d470:	d4dc0417 d4dc027d cf6ee387 3062e287     ....}.....n...b0
   1d480:	ee002187 32811063 04170041 fe7dd4dc     .!..c..2A.....}.
   1d490:	e387d4dc e287cf6e 21870062 2063ee00     ....n...b..!..c 
   1d4a0:	00413281 d4dc0417 d4dc027c cf6ee387     .2A.....|.....n.
   1d4b0:	2062e287 ee002187 32818063 04170041     ..b .!..c..2A...
   1d4c0:	fe7cd4dc e387d4dc e287cf6e 21871062     ..|.....n...b..!
   1d4d0:	f0c1ee00 00301280 e3871617 e387306e     ......0.....n0..
   1d4e0:	3616e382 0e80d4dc 2417004f fe7c9062     ...6....O..$b.|.
   1d4f0:	0e804617 3017004f 027d3062 0e804617     .F..O..0b0}..F..
   1d500:	3c17004f 027ca062 0e804617 0c17004f     O..<b.|..F..O...
   1d510:	fe7d0062 4f6ed4dc 2187e287 7080ee00     b.}...nO...!...p
   1d520:	e280036e 80810e80 026e9481 0041e281     n.........n...A.
   1d530:	0e800170 cda80e80 94d81ef0 ee00f08e     p...............
   1d540:	19a9006e 1efe1efe 1efe1efe 34ab65f3     n............e.4
   1d550:	1efe1efe 1efe1efe 017e55f3 7417803e     .........U~.>..t
   1d560:	2382ee00 0f6e3383 30812080 e280be27     ...#.3n.. .0'...
   1d570:	f9a80e80 32d21ef0 40320272 23829a17     .......2r.2@...#
   1d580:	20430273 9a17ee00 02710270 06810680     s.C ....p.q.....
   1d590:	0e810e81 0e810e81 1ef134ab 1ef01ef1     .........4......
   1d5a0:	ee0065f0 65f0cca8 55f00680 a1e00160     .e.....e...U`...
   1d5b0:	ee00e017 016e65f1 00824384 10651083     .....en..C....e.
   1d5c0:	004f5583 004fe582 27650c18 004f5582     .UO...O...e'.UO.
   1d5d0:	20800c18 e4843081 29f4f017 067675d6     ... .0.....).uv.
   1d5e0:	00824384 e8651083 004f5583 004fe582     .C....e..UO...O.
   1d5f0:	03653418 004f5582 20803418 e4843081     .4e..UO..4. .0..
   1d600:	29f41818 067675d6 00824384 64651083     ...).uv..C....ed
   1d610:	004f5583 004fe582 20805418 e4843081     .UO...O..T. .0..
   1d620:	29f44018 067675d6 00824384 0a651083     .@.).uv..C....e.
   1d630:	004f5583 30816e18 6018e484 75d629f4     .UO..n.0...`.).u
   1d640:	29f10676 ee0075d6 65f1c8a8 003fe481     v..).u.....e..?.
   1d650:	c8a80170 ee0055f1 65f3c8a8 258e008e     p....U.....e...%
   1d660:	ee00004f a218003e 358e108e ee00004f     O...>......5O...
   1d670:	55f1caa8 e38eee00 ff630f62 a1e21061     ...U....b.c.a...
   1d680:	3481c418 b0180031 34801061 b0180030     ...41...a..40...
   1d690:	016eee00 0000ee00 00050000 00207050     ..n.........Pp .
   1d6a0:	00207050 00603060 00603060 00306030     Pp .`0`.`0`.0`0.
   1d6b0:	00306030 00507020 00507020 00707020     0`0. pP. pP. pp.
   1d6c0:	00002000 00000000 00000000 00000000     . ..............
   1d6d0:	00008000 c0000000 80000000 c0000080     ................
   1d6e0:	c0808080 0c008000 08080808 08080808     ................
   1d6f0:	08080808 0c0d0808 08080808 08080808     ................
   1d700:	08080808 0a0d0808 05050565 0505e505     ........e.......
   1d710:	050505e5 0a0ac505 05050565 0505e505     ........e.......
   1d720:	050505e5 0a0ac505 08080c05 0d0c050f     ................
   1d730:	08080805 0f0e050d 08080c05 0d0c050f     ................
   1d740:	08080805 0a0a050d 06650a05 0a0a9505     ..........e.....
   1d750:	c5050535 0505350a 05650a95 0a0a9505     5....5....e.....
   1d760:	c5060535 0a0a050a 08050f05 08080808     5...............
   1d770:	050f080c 08080808 08050f08 08080c08     ................
   1d780:	050f0808 0a0a050f 05b50575 c5050505     ........u.......
   1d790:	b505650a 0505e505 05b505e5 05650ac5     .e............e.
   1d7a0:	b5050505 0a0ad505 08080c05 050d0808     ................
   1d7b0:	080c050f 0f08050f 0d080805 0c050f05     ................
   1d7c0:	08080808 0f0a050d 05650f05 350ac505     ..........e....5
   1d7d0:	650a95e5 0505b005 0ac505b5 0a95e535     ...e........5...
   1d7e0:	c5050565 070f050f 08d50574 0f0e050f     e.......t.......
   1d7f0:	050f0805 0808080c 08050d08 0f08050f     ................
   1d800:	750f0805 0a07d405 05350a05 0505f505     ...u......5.....
   1d810:	d50505b5 0c0d0808 05750f08 0505b505     ..........u.....
   1d820:	950505f5 0a0a050a 08080805 080c050d     ................
   1d830:	350d0808 0a0ac505 0c950565 0d080808     ...5....e.......
   1d840:	08080c05 0a0a050f c5060575 0808050a     ........u.......
   1d850:	08080808 0f08050f 08080805 0f080808     ................
   1d860:	06650a05 0a0ad505 050d0c05 0505350a     ..e..........5..
   1d870:	05e50505 0505f505 e50505f5 05050505     ................
   1d880:	0c050a95 0a0a050d 050f0805 08080808     ................
   1d890:	0c050f08 0f08050d 050d0c05 08080808     ................
   1d8a0:	08050f08 0a0a050f b5050535 05050505     ........5.......
   1d8b0:	0a950505 0505350a 350a0a95 05050505     .....5.....5....
   1d8c0:	05b50505 080a9505 08080808 08080808     ................
   1d8d0:	0f080808 08080808 08080f08 08080808     ................
   1d8e0:	08080808 3c0f0808 42999942 0f10013c     .......<B..B<...
   1d8f0:	32328478 10007884 fefc78e0 007884fe     x.22.x...x....x.
   1d900:	4843e010 20385049 656e6f64 4948430a     ..CHIP8 done.CHI
   1d910:	73203850 6c756f68 6f6e2064 6e652074     P8 should not en
   1d920:	73757264 70612f74 72732f70 68632f63     drust/app/src/ch
   1d930:	2e387069 00007372 0001d921 00000015     ip8.rs..!.......
   1d940:	00000059 00000005 0a79656b 766f2078     Y.......key.x ov
   1d950:	6c667265 0000776f 0001d921 00000015     erflow..!.......
   1d960:	000000a4 00000009 766f2079 6c667265     ........y overfl
   1d970:	0000776f 0001d921 00000015 000000a5     ow..!...........
   1d980:	00000009 0001d921 00000015 000000a6     ....!...........
   1d990:	00000015 00000000 00000000 00000000     ................

0001d9a0 <str.0>:
   1d9a0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1d9b0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1d9c0:	00000077 0001d921 00000015 000000a6     w...!...........
   1d9d0:	00000011 00000000 00000000 00000000     ................

0001d9e0 <str.1>:
   1d9e0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1d9f0:	20687469 7265766f 776f6c66 0001d921     ith overflow!...
   1da00:	00000015 000000a7 00000012 0001d921     ............!...
   1da10:	00000015 000000c3 00000009 0001d921     ............!...
   1da20:	00000015 000000c4 00000009 0001d921     ............!...
   1da30:	00000015 000000c5 00000015 0001d921     ............!...
   1da40:	00000015 000000c5 00000011 0001d921     ............!...
   1da50:	00000015 000000c6 00000012 20646162     ............bad 
   1da60:	657a6973 73746573 20657a69 7265766f     sizesetsize over
   1da70:	776f6c66 666f5f78 74657366 666f5f79     flowx_offsety_of
   1da80:	74657366 0001d921 00000015 000000cc     fset!...........
   1da90:	00000009 000a202c 0001d921 00000015     ...., ..!.......
   1daa0:	000000d7 00000012 0001d921 00000015     ........!.......
   1dab0:	00000109 00000011 00000000 00000000     ................

0001dac0 <str.2>:
   1dac0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1dad0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1dae0:	00000077 0001d921 00000015 0000010a     w...!...........
   1daf0:	00000012 0001d921 00000015 0000010c     ....!...........
   1db00:	00000008 0001d921 00000015 00000113     ....!...........
   1db10:	0000001f 0001d921 00000015 00000114     ....!...........
   1db20:	00000020 0001d921 00000015 00000119      ...!...........
   1db30:	0000000d 0001d921 00000015 0000011c     ....!...........
   1db40:	00000011 20746573 65786970 6620736c     ....set pixels f
   1db50:	656c6961 00000064 0001d921 00000015     ailed...!.......
   1db60:	0000012d 00000005 0001d921 00000015     -.......!.......
   1db70:	00000182 00000021 0001d921 00000015     ....!...!.......
   1db80:	00000183 00000025 0001d921 00000015     ....%...!.......
   1db90:	0000018a 00000009 0001d921 00000015     ........!.......
   1dba0:	0000019f 00000009 0001d921 00000015     ........!.......
   1dbb0:	000001a0 00000009 0001d921 00000015     ........!.......
   1dbc0:	000001a1 00000023 0001d921 00000015     ....#...!.......
   1dbd0:	000001a1 00000011 0001d921 00000015     ........!.......
   1dbe0:	000001a2 0000002c 0001d921 00000015     ....,...!.......
   1dbf0:	000001a4 00000036 0001d921 00000015     ....6...!.......
   1dc00:	000001a4 00000016 0001d921 00000015     ........!.......
   1dc10:	000001a7 00000009 0001d921 00000015     ........!.......
   1dc20:	000001ac 0000000d 0001d921 00000015     ........!.......
   1dc30:	000001b1 00000011 0001d921 00000015     ........!.......
   1dc40:	000001b6 00000015 0001d921 00000015     ........!.......
   1dc50:	000001c3 00000024 0001d921 00000015     ....$...!.......
   1dc60:	000001c3 00000036 0001d921 00000015     ....6...!.......
   1dc70:	000001cb 00000016 50494843 6f742038     ........CHIP8 to
   1dc80:	20686375 20746f6e 646e6168 0a64656c     uch not handled.
   1dc90:	06040000 06080005 060c0009 0610000d     ................
   1dca0:	06150011 06190016 061d001a 0621001d     ..............!.
   1dcb0:	06240021 06280025 062d002a 0631002e     !.$.%.(.*.-...1.
   1dcc0:	06340031 06380035 063c0038 0640003c     1.4.5.8.8.<.<.@.
   1dcd0:	06440040 06470043 064b0047 064f004a     @.D.C.G.G.K.J.O.
   1dce0:	0652004d 06560051 065a0055 055d0058     M.R.Q.V.U.Z.X.].
   1dcf0:	0560005c 0563005f 05660063 056a0066     \.`._.c.c.f.f.j.
   1dd00:	056d006a 0470006e 04740071 04770074     j.m.n.p.q.t.t.w.
   1dd10:	0c040700 0c080705 0c0c0709 0c10070d     ................
   1dd20:	0c150711 0c190716 0c1c0719 0c20071d     .............. .
   1dd30:	0c240721 0c280725 0c2d072a 0c30072d     !.$.%.(.*.-.-.0.
   1dd40:	0c340731 0c380735 0b3b0738 0b40073c     1.4.5.8.8.;.<.@.
   1dd50:	0b430740 0b470744 0b4b0748 0b4e074b     @.C.D.G.H.K.K.N.
   1dd60:	0b52074f 0b560752 0b590657 0b5c065a     O.R.R.V.W.Y.Z.\.
   1dd70:	0a60065d 0a630660 0a660663 0a6a0667     ].`.`.c.c.f.g.j.
   1dd80:	096d056b 0970056e 09730571 09770574     k.m.n.p.q.s.t.w.
   1dd90:	13040d00 12080d05 120c0d09 12100d0d     ................
   1dda0:	12150d11 12180d15 121c0d19 12200d1d     .............. .
   1ddb0:	12240d21 12280d25 122c0d28 12300d2d     !.$.%.(.(.,.-.0.
   1ddc0:	12340d31 12370c34 113b0c38 113f0c3c     1.4.4.7.8.;.<.?.
   1ddd0:	11430c40 11470c44 114a0c47 114e0c4b     @.C.D.G.G.J.K.N.
   1dde0:	11510c4e 10560c52 10590c56 105c0b5a     N.Q.R.V.V.Y.Z.\.
   1ddf0:	0f5f0b5d 0f620b60 0f660b63 0f6a0a66     ]._.`.b.c.f.f.j.
   1de00:	0e6d0a6b 0e700a6e 0e730a71 0d760a74     k.m.n.p.q.s.t.v.
   1de10:	1a041500 1a081305 1a0c1309 1a10130d     ................
   1de20:	1a131310 1a181315 1a1c1319 1920131d     .............. .
   1de30:	19231320 19271324 192c1328 1930132d      .#.$.'.(.,.-.0.
   1de40:	19331330 19371234 183a1238 183f123b     0.3.4.7.8.:.;.?.
   1de50:	18431240 18461243 174a1247 174d124b     @.C.C.F.G.J.K.M.
   1de60:	1751114e 17551152 17591156 165c1159     N.Q.R.U.V.Y.Y.\.
   1de70:	165f105c 15621060 15651063 156a0f66     \._.`.b.c.e.f.j.
   1de80:	136d0f6a 13700f6d 12730f71 12760e74     j.m.m.p.q.s.t.v.
   1de90:	20041b00 20081b05 200c1b09 200f1b0d     ... ... ... ... 
   1dea0:	20131b10 20181b15 201c1a19 201f1a1c     ... ... ... ... 
   1deb0:	20231a20 20271a24 1f2c1a28 1f2f1a2c      .# $.' (.,.,./.
   1dec0:	1f331a30 1f361933 1e3a1937 1e3f193b     0.3.3.6.7.:.;.?.
   1ded0:	1e42193f 1e461943 1d491846 1d4d184a     ?.B.C.F.F.I.J.M.
   1dee0:	1d51184e 1c551851 1c581756 1b5b1759     N.Q.Q.U.V.X.Y.[.
   1def0:	1b5f165c 1a62165f 1a651662 1a691565     \._._.b.b.e.e.i.
   1df00:	196c156a 1970156d 18731370 18761374     j.l.m.p.p.s.t.v.
   1df10:	26042100 26082105 260c2109 260f210c     .!.&.!.&.!.&.!.&
   1df20:	26132110 26182115 261b2118 261f211c     .!.&.!.&.!.&.!.&
   1df30:	26232120 26272023 252b2027 252f202c      !#&# '&' +%, /%
   1df40:	2532202f 25362033 25391f36 243d1f3a     / 2%3 6%6.9%:.=$
   1df50:	24421f3d 24451e42 23491e46 234d1e49     =.B$B.E$F.I#I.M#
   1df60:	23501d4d 22551d51 21581c55 215b1c58     M.P#Q.U"U.X!X.[!
   1df70:	205e1c5b 20611b5e 1f641b61 1f671a64     [.^ ^.a a.d.d.g.
   1df80:	1e6c1a69 1e6f196c 1d72196f 1d761973     i.l.l.o.o.r.s.v.
   1df90:	2e042700 2d082705 2d0b2709 2d0f270c     .'...'.-.'.-.'.-
   1dfa0:	2d132710 2d172713 2d1b2718 2d1f271b     .'.-.'.-.'.-.'.-
   1dfb0:	2d22271f 2c262623 2c2b2626 2c2e262b     .'"-#&&,&&+,+&.,
   1dfc0:	2c32262e 2c352632 2c392535 2c3c2539     .&2,2&5,5%9,9%<,
   1dfd0:	2b41253d 2b442541 2b482445 2b4c2448     =%A+A%D+E$H+H$L+
   1dfe0:	2a4f244c 2a52234f 28572252 275a2157     L$O*O#R*R"W(W!Z'
   1dff0:	265d215a 2560205d 24632060 24671f63     Z!]&] `%` c$c.g$
   1e000:	236b1f67 236e1e6b 22711e6e 22751d71     g.k#k.n#n.q"q.u"
   1e010:	34042f00 34082e05 330b2e08 330f2e0c     ./.4...4...3...3
   1e020:	33122e0f 33172e13 331a2e17 331e2e1b     ...3...3...3...3
   1e030:	33222d1e 32252d22 322a2d26 322d2d2a     .-"3"-%2&-*2*--2
   1e040:	32312d2e 32342d31 32382d35 323b2c38     .-121-425-828,;2
   1e050:	32402c3b 31432c40 31472c44 314b2b47     ;,@2@,C1D,G1G+K1
   1e060:	314e2b4a 30512a4e 2f552851 2e592755     J+N1N*Q0Q(U/U'Y.
   1e070:	2d5c2659 2c5f255c 2b62255f 2a652462     Y&\-\%_,_%b+b$e*
   1e080:	28692465 286d2369 2770236c 27732270     e$i(i#m(l#p'p"s'
   1e090:	3a043500 3a073505 3a0b3408 390e340c     .5.:.5.:.4.:.4.9
   1e0a0:	3912340f 39163413 391a3417 391d341a     .4.9.4.9.4.9.4.9
   1e0b0:	3821331e 38243321 38283325 382c3328     .3!8!3$8%3(8(3,8
   1e0c0:	3830332d 38333330 38373334 383a3337     -3080338437873:8
   1e0d0:	383f323b 3842323f 38463243 37493246     ;2?8?2B8C2F8F2I7
   1e0e0:	374d314a 3650304d 36543050 34572e54     J1M7M0P6P0T6T.W4
   1e0f0:	335a2d57 325e2c5a 31612b5d 30642a60     W-Z3Z,^2]+a1`*d0
   1e100:	2f672a64 2e6b2867 2d6e286b 2c72276e     d*g/g(k.k(n-n'r,
   1e110:	41043b00 41073b05 410b3a08 400e3a0b     .;.A.;.A.:.A.:.@
   1e120:	40113a0f 40163a12 40193a16 401d3a1a     .:.@.:.@.:.@.:.@
   1e130:	3f20391d 3f243921 3f273924 3f2c3928     .9 ?!9$?$9'?(9,?
   1e140:	3f2f392c 3f32392f 3f363933 3f393936     ,9/?/92?396?699?
   1e150:	3d3d393a 3d41393d 3f453842 3f483845     :9===9A=B8E?E8H?
   1e160:	3f4c3848 3d4f374c 3c52364f 3b563552     H8L?L7O=O6R<R5V;
   1e170:	39593356 385c3259 375f315c 3562305f     V3Y9Y2\8\1_7_0b5
   1e180:	34662f62 336a2e65 326d2e6a 31702d6d     b/f4e.j3j.m2m-p1
   1e190:	47044200 47074205 470a4208 460e410b     .B.G.B.G.B.G.A.F
   1e1a0:	4611410e 46154112 46194116 451c4019     .A.F.A.F.A.F.@.E
   1e1b0:	4520401d 45234020 45264023 442b4027     .@ E @#E#@&E'@+D
   1e1c0:	442e402b 4431402e 44354031 44383f35     +@.D.@1D1@5D5?8D
   1e1d0:	443c3f38 44403f3b 44443f40 44474044     8?<D;?@D@?DDD@GD
   1e1e0:	444b3f47 444e3f4b 43513c4e 41553b51     G?KDK?NDN<QCQ;UA
   1e1f0:	40583955 3f5b3857 3c5e375b 3b61365e     U9X@W8[?[7^<^6a;
   1e200:	3a643561 39673464 386b3367 376f326b     a5d:d4g9g3k8k2o7
   1e210:	4c044800 4c074804 4c0a4708 4c0d470b     .H.L.H.L.G.L.G.L
   1e220:	4b11470e 4b154711 4b184615 4b1b4618     .G.K.G.K.F.K.F.K
   1e230:	4b1f461c 4a22461f 4a254622 4a2a4525     .F.K.F"J"F%J%E*J
   1e240:	492d452a 4930452d 49334530 49374533     *E-I-E0I0E3I3E7I
   1e250:	493a4536 493f453a 4942453d 49464542     6E:I:E?I=EBIBEFI
   1e260:	49494545 484c4549 484f444c 4752424f     EEIIIELHLDOHOBRG
   1e270:	45564052 44593f56 435c3d59 415f3b5c     R@VEV?YDY=\C\;_A
   1e280:	40623a5f 3f653962 3d6a3865 3c6d3769     _:b@b9e?e8j=i7m<
   1e290:	52034d00 51074d04 510a4d07 510d4d0a     .M.R.M.Q.M.Q.M.Q
   1e2a0:	51104c0d 51134c10 50174c15 501a4c18     .L.Q.L.Q.L.P.L.P
   1e2b0:	501e4b1b 50214b1e 4f244b21 4f274b24     .K.P.K!P!K$O$K'O
   1e2c0:	4f2c4a27 4e2f4a2b 4e324a2e 4e354a32     'J,O+J/N.J2N2J5N
   1e2d0:	4e384a35 4d3c4a38 4d404a3c 4d444a40     5J8N8J<M<J@M@JDM
   1e2e0:	4d474a43 4d4a4946 4c4d484a 4b50474d     CJGMFIJMJHMLMGPK
   1e2f0:	4a554550 49574554 485a4357 465e415a     PEUJTEWIWCZHZA^F
   1e300:	4560415d 44633f60 43673d63 416b3c66     ]A`E`?cDc=gCf<kA
   1e310:	58035200 58065204 57095207 570c520a     .R.X.R.X.R.W.R.W
   1e320:	570f520d 57125210 57175113 571a5117     .R.W.R.W.Q.W.Q.W
   1e330:	561d511a 5620511d 56235020 56265023     .Q.V.Q V P#V#P&V
   1e340:	552a4f26 552d4f2a 54304f2d 54334f30     &O*U*O-U-O0T0O3T
   1e350:	54374e33 523a4e36 523d4e3a 52424e3d     3N7T6N:R:N=R=NBR
   1e360:	52454e41 51484d44 514b4d47 4f4e4c4b     ANERDMHQGMKQKLNO
   1e370:	4e514b4e 4d554951 4c584855 4b5b4758     NKQNQIUMUHXLXG[K
   1e380:	4a5f455b 4961445e 47644361 46674264     [E_J^DaIaCdGdBgF
   1e390:	5d035900 5d065904 5d095807 5d0c580a     .Y.].Y.].X.].X.]
   1e3a0:	5c0f580d 5c125810 5c165812 5c195716     .X.\.X.\.X.\.W.\
   1e3b0:	5c1c5719 5c1f571c 5b22571f 5b255622     .W.\.W.\.W"["V%[
   1e3c0:	5a285625 5a2c5528 5a2f552c 5932552f     %V(Z(U,Z,U/Z/U2Y
   1e3d0:	59355432 58385435 583b5438 573f543b     2T5Y5T8X8T;X;T?W
   1e3e0:	5743523f 57465242 56495146 554c5049     ?RCWBRFWFQIVIPLU
   1e3f0:	544f4f4c 52544d4f 51564d52 4f594c56     LOOTOMTRRMVQVLYO
   1e400:	4e5c4a59 4d5f495c 4c62485f 4b664662     YJ\N\I_M_HbLbFfK
   1e410:	62035e00 62065e04 62095e07 620c5d0a     .^.b.^.b.^.b.].b
   1e420:	620e5d0d 62115d0f 61155d12 61185d16     .].b.].b.].a.].a
   1e430:	611b5d19 611e5c1b 61215c1e 60245c21     .].a.\.a.\!a!\$`
   1e440:	60275b24 5f2b5b27 5f2e5a2b 5e305a2e     $['`'[+_+Z._.Z0^
   1e450:	5e345931 5e375933 5d395937 5d3d5839     1Y4^3Y7^7Y9]9X=]
   1e460:	5c41583c 5c445740 5b475743 5a4a5546     <XA\@WD\CWG[FUJZ
   1e470:	594d5449 5750524d 56545150 55575054     ITMYMRPWPQTVTPWU
   1e480:	545a4f57 525e4d5a 51604d5d 4f634b60     WOZTZM^R]M`Q`KcO

0001e490 <_ZN3app5chip823VIRTUAL_TO_PHYSICAL_MAP17h40eacc1cd7c38417E>:
   1e490:	0001dc90 74737552 756f7420 73206863     ....Rust touch s
   1e4a0:	6f736e65 00000a72 00000000 0001e4a8     ensor...........
   1e4b0:	65737361 6f697472 6166206e 64656c69     assertion failed
   1e4c0:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   1e4d0:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   1e4e0:	67697220 203a7468 203a6060 0001e4b0      right: ``: ....
   1e4f0:	0000002d 0001e4dd 0000000c 0001e4e9     -...............
   1e500:	00000003 0001e4ec 20515249 74696e69     ........IRQ init
   1e510:	69616620 0000006c 0001e508 0000000d      fail...........
   1e520:	0001e518 0001e524 74737572 7070612f     ....$...rust/app
   1e530:	6372732f 756f742f 735f6863 6f736e65     /src/touch_senso
   1e540:	73722e72 0001e528 0000001c 0000003f     r.rs(.......?...
   1e550:	00000005 20633269 72646461 0001e528     ....i2c addr(...
   1e560:	0000001c 0000004b 00000011 63756f74     ....K.......touc
   1e570:	74616468 61662061 00006c69 0001e528     hdata fail..(...
   1e580:	0000001c 00000056 00000009 0001e528     ....V.......(...
   1e590:	0000001c 0000005a 00000031 64616572     ....Z...1...read
   1e5a0:	756f7420 61646863 66206174 006c6961      touchdata fail.
   1e5b0:	0001e528 0000001c 00000089 00000005     (...............
   1e5c0:	0001e528 0000001c 00000095 00000037     (...........7...

0001e5d0 <str.0>:
   1e5d0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1e5e0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1e5f0:	00000077 0001e528 0000001c 00000095     w...(...........
   1e600:	00000024 00000000 00000000 00000000     $...............

0001e610 <str.1>:
   1e610:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e620:	20687469 7265766f 776f6c66 0001e528     ith overflow(...
   1e630:	0000001c 00000095 00000020 0001e528     ........ ...(...
   1e640:	0000001c 00000099 00000009 0001e528     ............(...
   1e650:	0000001c 0000009a 00000037 0001e528     ........7...(...
   1e660:	0000001c 0000009a 00000023 0001e528     ........#...(...
   1e670:	0000001c 0000009a 0000001f 0001e528     ............(...
   1e680:	0000001c 0000009b 00000037 0001e528     ........7...(...
   1e690:	0000001c 0000009b 00000023 0001e528     ........#...(...
   1e6a0:	0000001c 0000009b 0000001f 0001e528     ............(...
   1e6b0:	0000001c 0000009c 00000009 0001e528     ............(...
   1e6c0:	0000001c 0000009e 00000037 0001e528     ........7...(...
   1e6d0:	0000001c 0000009e 00000023 0001e528     ........#...(...
   1e6e0:	0000001c 0000009e 0000001f 0001e528     ............(...
   1e6f0:	0000001c 0000009f 00000037 0001e528     ........7...(...
   1e700:	0000001c 0000009f 00000023 0001e528     ........#...(...
   1e710:	0000001c 0000009f 0000001f 0001e528     ............(...
   1e720:	0000001c 000000a0 00000009 0001e528     ............(...
   1e730:	0000001c 000000a4 00000030 0001e528     ........0...(...
   1e740:	0000001c 000000a4 0000001a 0001e528     ............(...
   1e750:	0000001c 000000a4 00000016 0001e528     ............(...
   1e760:	0000001c 000000a3 00000009 0001e528     ............(...
   1e770:	0000001c 000000a6 00000030 0001e528     ........0...(...
   1e780:	0000001c 000000a6 0000001a 0001e528     ............(...
   1e790:	0000001c 000000a6 00000016 0001e528     ............(...
   1e7a0:	0000001c 000000a5 00000009 0001e528     ............(...
   1e7b0:	0000001c 000000aa 0000002d 0001e528     ........-...(...
   1e7c0:	0000001c 000000aa 0000001a 0001e528     ............(...
   1e7d0:	0000001c 000000aa 00000016 0001e528     ............(...
   1e7e0:	0000001c 000000a9 00000009 0001e528     ............(...
   1e7f0:	0000001c 000000ac 0000002d 0001e528     ........-...(...
   1e800:	0000001c 000000ac 0000001a 0001e528     ............(...
   1e810:	0000001c 000000ac 00000016 0001e528     ............(...
   1e820:	0000001c 000000ab 00000009 0001e528     ............(...
   1e830:	0000001c 000000af 0000000d 0001e528     ............(...
   1e840:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1e850:	00667562 0001e528 0000001c 000000f1     buf.(...........
   1e860:	00000005 0001e528 0000001c 000000f2     ....(...........
   1e870:	0000000d 0001e528 0000001c 000000f2     ....(...........
   1e880:	00000005 20633269 6c696166               ....i2c fail.

0001e88d <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   1e88d:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   1e89d:	f010f010 10f09090 f080f010 80f0f010     ................
   1e8ad:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   1e8bd:	90f0f010 e09090f0 e090e090 808080f0     ................
   1e8cd:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   1e8dd:	72656874 73692065 206f6e20 68637573     there is no such
   1e8ed:	69687420 6120676e 6e612073 71636120      thing as an acq
   1e8fd:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   1e90d:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   1e91d:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   1e92d:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   1e93d:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   1e94d:	2f736f72 2e646f6d 0e007372 490001e9     ros/mod.rs.....I
   1e95d:	0a000000 09000000 74000000 65726568     ...........there
   1e96d:	20736920 73206f6e 20686375 6e696874      is no such thin
   1e97d:	73612067 72206120 61656c65 6c206573     g as a release l
   1e98d:	9b64616f 0000011c 01000000 5d000000     oad............]
   1e99d:	69000120 73000120 90000120 9b0001e9      ..i ..s .......
   1e9ad:	0000011c 01000000 5d000000 69000120     ...........] ..i
   1e9bd:	73000120                                  ..s ..

0001e9c4 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   1e9c4:	00697073 0001e4a8 65737361 6f697472     spi.....assertio
   1e9d4:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   1e9e4:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   1e9f4:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   1ea04:	203a6060 0001e9cc 0000002d 0001e9f9     ``: ....-.......
   1ea14:	0000000c 0001ea05 00000003 0001ea08     ................
   1ea24:	20697073 666e6f63 66206769 006c6961     spi config fail.
   1ea34:	0001ea24 0000000f 0001ea34 0001ea40     $.......4...@...
   1ea44:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   1ea54:	2e697073 00007372 0001ea44 00000016     spi.rs..D.......
   1ea64:	00000050 0000004a 20697073 66206263     P...J...spi cb f
   1ea74:	006c6961 0001ea6c 0000000b 0001ea78     ail.l.......x...
   1ea84:	0001ea44 00000016 00000057 00000005     D.......W.......
   1ea94:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1eaa4:	0001ea94 0000000f 0001eaa4 0001ea44     ............D...
   1eab4:	00000016 0000005a 00000037 6f697067     ....Z...7...gpio
   1eac4:	69616620 0000006c 0001eac0 00000009      fail...........
   1ead4:	0001eacc 0001ea44 00000016 0000005b     ....D.......[...
   1eae4:	00000040 0001ea44 00000016 0000005c     @...D.......\...
   1eaf4:	00000040 6575716d 66206575 006c6961     @...mqueue fail.
   1eb04:	0001eaf8 0000000b 0001eb04 0001ea44     ............D...
   1eb14:	00000016 00000065 00000005 206d6573     ....e.......sem 
   1eb24:	6c696166 20697073 6c696166 0001eb20     failspi fail ...
   1eb34:	00000008 0001eb30 0001ea44 00000016     ....0...D.......
   1eb44:	00000069 00000005 0001ea44 00000016     i.......D.......
   1eb54:	0000006d 00000005 00000000 0001e9c4     m...............
   1eb64:	00000004 0001eb5c 6e657665 66207174     ....\...eventq f
   1eb74:	006c6961 0001ea44 00000016 00000081     ail.D...........
   1eb84:	00000009 63206f6e 6220646d 00657479     ....no cmd byte.
   1eb94:	0001ea44 00000016 00000097 00000005     D...............
   1eba4:	0001ea44 00000016 00000099 00000016     D...............
	...

0001ebc0 <str.0>:
   1ebc0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1ebd0:	20687469 7265766f 776f6c66 20697073     ith overflowspi 
   1ebe0:	7265766f 776f6c66 0001ea44 00000016     overflowD.......
   1ebf0:	00000099 00000005 0001ea44 00000016     ........D.......
   1ec00:	000000a8 00000012 0001ea44 00000016     ........D.......
   1ec10:	000000c1 00000035 00000000 00000000     ....5...........

0001ec20 <str.1>:
   1ec20:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1ec30:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1ec40:	00000077 0001ea44 00000016 000000c4     w...D...........
   1ec50:	0000000f 20746e69 20697073 6c696166     ....int spi fail
   1ec60:	0001ea44 00000016 00000101 00000011     D...............
   1ec70:	0001ea44 00000016 00000111 00000015     D...............

0001ec80 <str.2>:
   1ec80:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1ec90:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1eca0:	00000077 0001ea44 00000016 0000010f     w...D...........
   1ecb0:	00000011 0001ea44 00000016 00000117     ....D...........
   1ecc0:	00000011 0001ea44 00000016 00000124     ....D.......$...
   1ecd0:	00000009 20646162 20697073 006e656c     ....bad spi len.
   1ece0:	0001ea44 00000016 0000012b 00000005     D.......+.......
   1ecf0:	0001eb28 00000008 0001ecf0 0001ea44     (...........D...
   1ed00:	00000016 00000141 00000009 0001ea44     ....A.......D...
   1ed10:	00000016 0000014a 00000009 0001ea44     ....J.......D...
   1ed20:	00000016 0000014e 00000030 0001ea44     ....N...0...D...
   1ed30:	00000016 0000015a 00000005 0001ea44     ....Z.......D...
   1ed40:	00000016 0000015f 00000017 0001e4a8     ...._...........
   1ed50:	65737361 6f697472 6166206e 64656c69     assertion failed
   1ed60:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   1ed70:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   1ed80:	67697220 203a7468 203a6060 0001ed50      right: ``: P...
   1ed90:	0000002d 0001ed7d 0000000c 0001ed89     -...}...........
   1eda0:	00000003 0001ed8c 20697073 666e6f63     ........spi conf
   1edb0:	66206769 006c6961 0001eda8 0000000f     ig fail.........
   1edc0:	0001edb8 0001edc4 74737572 6e796d2f     ........rust/myn
   1edd0:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   1ede0:	0001edc8 00000016 00000016 00000009     ................
   1edf0:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1ee00:	0001edf0 0000000f 0001ee00 0001edc8     ................
   1ee10:	00000016 00000019 00000009 20697073     ............spi 
   1ee20:	74696e69 69616620 0000006c 0001ee1c     init fail.......
   1ee30:	0000000d 0001ee2c 0001edc8 00000016     ....,...........
   1ee40:	0000001c 00000009 6f697067 69616620     ........gpio fai
   1ee50:	0000006c 0001ee48 00000009 0001ee54     l...H.......T...
   1ee60:	0001edc8 00000016 00000045 00000009     ........E.......
   1ee70:	0001edc8 00000016 0000006c 0000001b     ........l.......

0001ee80 <str.0>:
   1ee80:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1ee90:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1eea0:	6c616377 2064656c 74704f60 3a6e6f69     wcalled `Option:
   1eeb0:	776e753a 28706172 6f206029 2061206e     :unwrap()` on a 
   1eec0:	6e6f4e60 76206065 65756c61 00002928     `None` value()..
   1eed0:	0000a593 00000000 00000001 000144af     .............D..
   1eee0:	20697073 73756c66 61662068 552f6c69     spi flush fail/U
   1eef0:	73726573 70754c2f 502f7970 54656e69     sers/Luppy/PineT
   1ef00:	2f656d69 656e6970 656d6974 7375722d     ime/pinetime-rus
   1ef10:	796d2d74 7477656e 7375722f 74732f74     t-mynewt/rust/st
   1ef20:	35333737 64636c2d 7461622d 722d6863     7735-lcd-batch-r
   1ef30:	72732f73 696c2f63 73722e62 0001eeee     s/src/lib.rs....
   1ef40:	0000004e 000000fe 00000009 0001eeee     N...............
   1ef50:	0000004e 000000f3 00000009 6573552f     N.........../Use
   1ef60:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   1ef70:	69676572 79727473 6372732f 7469672f     registry/src/git
   1ef80:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   1ef90:	65396264 33323863 6165682f 73656c70     db9ec823/heaples
   1efa0:	2e302d73 2f312e35 2f637273 2e636576     s-0.5.1/src/vec.
   1efb0:	00007372 0001ef5c 00000056 00000066     rs..\...V...f...
   1efc0:	00000009 00000000 00000000 00000000     ................

0001efd0 <str.0>:
   1efd0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1efe0:	20687469 7265766f 776f6c66 0001ef5c     ith overflow\...
   1eff0:	00000056 0000003e 0000000c 0001ef5c     V...>.......\...
   1f000:	00000056 0000007e 00000011 00000000     V...~...........

0001f010 <str.1>:
   1f010:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f020:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1f030:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   1f040:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   1f050:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   1f060:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   1f070:	20736920 00000000 00000020 00000008      is .... .......
   1f080:	00000002 00000000 00000000 00000002     ................
   1f090:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   1f0a0:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   1f0b0:	73722e65 00000000 00000020 00000004     e.rs.... .......
   1f0c0:	00000002 00000000 00000002 00000000     ................
   1f0d0:	00000003 00000000 00000020 00000008     ........ .......
   1f0e0:	00000002 00000000 00000001 00000001     ................
   1f0f0:	00000003 002e2e60 0001f0f5 00000002     ....`...........
   1f100:	65726c61 20796461 72726f62 6465776f     already borrowed
   1f110:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   1f120:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   1f130:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

0001f140 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   1f140:	00010201 00000000 00000000 00000000     ................
   1f150:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   1f160:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   1f170:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   1f180:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   1f190:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   1f1a0:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   1f1b0:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   1f1c0:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   1f1d0:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   1f1e0:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   1f1f0:	656e6f4e 61762060 3a65756c 00000020     None` value: ...
   1f200:	0001f034 00000000 0001f1fb 00000002     4...............
   1f210:	00015307 00000000 00000001 00015357     .S..........WS..
   1f220:	74756220 65687420 646e6920 69207865      but the index i
   1f230:	00002073 0001f054 00000020 0001f220     s ..T... ... ...
   1f240:	00000012 00015307 0000000c 00000004     .....S..........
   1f250:	00015567 000158bd 0001596d 202c0a2c     gU...X..mY..,., 
   1f260:	2c280a28 30783029 30313030 30333032     (.(,)0x000102030
   1f270:	30353034 30373036 31393038 31313130     4050607080910111
   1f280:	31333132 31353134 31373136 32393138     2131415161718192
   1f290:	32313230 32333232 32353234 32373236     0212223242526272
   1f2a0:	33393238 33313330 33333332 33353334     8293031323334353
   1f2b0:	33373336 34393338 34313430 34333432     6373839404142434
   1f2c0:	34353434 34373436 35393438 35313530     4454647484950515
   1f2d0:	35333532 35353534 35373536 36393538     2535455565758596
   1f2e0:	36313630 36333632 36353634 36373636     0616263646566676
   1f2f0:	37393638 37313730 37333732 37353734     8697071727374757
   1f300:	37373736 38393738 38313830 38333832     6777879808182838
   1f310:	38353834 38373836 39393838 39313930     4858687888990919
   1f320:	39333932 39353934 39373936 00393938     293949596979899.
   1f330:	00015307 00000004 00000004 00015991     .S...........Y..
   1f340:	00015997 0001599d 2f637273 6362696c     .Y...Y..src/libc
   1f350:	2f65726f 2f746d66 2e646f6d 00007372     ore/fmt/mod.rs..
   1f360:	0001f348 00000016 0000043b 00000011     H.......;.......
   1f370:	0001f348 00000016 00000445 00000024     H.......E...$...
   1f380:	2f637273 6362696c 2f65726f 63696c73     src/libcore/slic
   1f390:	6f6d2f65 73722e64 65646e69 6f202078     e/mod.rsindex  o
   1f3a0:	6f207475 61722066 2065676e 20726f66     ut of range for 
   1f3b0:	63696c73 666f2065 6e656c20 20687467     slice of length 
   1f3c0:	0001f398 00000006 0001f39e 00000022     ............"...
   1f3d0:	0001f380 00000018 00000a72 00000005     ........r.......
   1f3e0:	63696c73 6e692065 20786564 72617473     slice index star
   1f3f0:	61207374 62202074 65207475 2073646e     ts at  but ends 
   1f400:	00207461 0001f3e0 00000016 0001f3f6     at .............
   1f410:	0000000d 0001f380 00000018 00000a78     ............x...
   1f420:	00000005 696e6966 64656873 73796168     ....finishedhays
   1f430:	6b636174 79622820 20736574 6167654e     tack (bytes Nega
   1f440:	65766974 69736f50 65766974 65746e69     tivePositiveinte
   1f450:	6c617267 61706e55 64656b63 69666e49     gralUnpackedInfi
   1f460:	6574696e 756e694d 77615273 7265764f     niteMinusRawOver
   1f470:	776f6c66 6b636162 72657469 6f746e49     flowbackiterInto
   1f480:	72657449 61636f6c 6e6f6974 61636f4c     IterlocationLoca
   1f490:	6e6f6974 72616573 72656863 69736f70     tionsearcherposi
   1f4a0:	6e6f6974 74697263 736f705f 656e694c     tioncrit_posLine
   1f4b0:	796e4173 57776152 72656b61 6f6c6c41     sAnyRawWakerAllo
   1f4c0:	72724563 38746e69 745f3478 2f637273     cErrint8x4_tsrc/
   1f4d0:	6362696c 2f65726f 2f727473 2e646f6d     libcore/str/mod.
   1f4e0:	2e5b7372 625d2e2e 20657479 65646e69     rs[...]byte inde
   1f4f0:	69202078 756f2073 666f2074 756f6220     x  is out of bou
   1f500:	2073646e 6020666f 0001f4e7 0000000b     nds of `........
   1f510:	0001f4f2 00000016 0001f0f4 00000001     ................
   1f520:	0001f4cc 00000016 00000853 00000009     ........S.......
   1f530:	69676562 3d3c206e 646e6520 00002820     begin <= end (..
   1f540:	0001f530 0000000e 0001f164 00000004     0.......d.......
   1f550:	0001f110 00000010 0001f0f4 00000001     ................
   1f560:	0001f4cc 00000016 00000857 00000005     ........W.......
   1f570:	0001f4cc 00000016 00000868 0000000e     ........h.......
   1f580:	20736920 20746f6e 68632061 62207261      is not a char b
   1f590:	646e756f 3b797261 20746920 69207369     oundary; it is i
   1f5a0:	6469736e 20292065 6020666f 0001f4e7     nside ) of `....
   1f5b0:	0000000b 0001f580 00000026 0001f434     ........&...4...
   1f5c0:	00000008 0001f5a6 00000006 0001f0f4     ................
   1f5d0:	00000001 0001f4cc 00000016 0000086a     ............j...
   1f5e0:	00000005 0001f094 00000020 0000001a     ........ .......
   1f5f0:	00000028 05030100 03060605 08080607     (...............
   1f600:	1c0a1109 140c190b 0d0e120d 0310040f     ................
   1f610:	09131212 05170116 03190218 021c071a     ................
   1f620:	161f011d 042b0320 0b2d022c 0330012e     .... .+.,.-...0.
   1f630:	01320231 02a902a7 08ab04aa 05fb02fa     1.2.............
   1f640:	03fe04fd 78ad09ff a28d8b79 8b585730     .......xy...0WX.
   1f650:	1d1c908c 4b0f0edd 2efcfb4c 5d5c3f2f     .......KL.../?\]
   1f660:	84e2b55f 92918e8d bbbab1a9 cac9c6c5     _...............
   1f670:	ffe5e4de 12110400 37343129 493d3b3a     ........)147:;=I
   1f680:	8e845d4a b4b1a992 cac6bbba e5e4cfce     J]..............
   1f690:	0e0d0400 31291211 453b3a34 5e4a4946     ......)14:;EFIJ^
   1f6a0:	91846564 cec99d9b 29110dcf 64574945     de.........)EIWd
   1f6b0:	a9918d65 c5bbbab4 e5e4dfc9 110d04f0     e...............
   1f6c0:	65644945 b2848180 d5bfbebc 83f1f0d7     EIde............
   1f6d0:	a6a48b85 c7c5bfbe dbdacfce cdbd9848     ............H...
   1f6e0:	49cfcec6 59574f4e 8e895f5e b7b6b18f     ...INOWY^_......
   1f6f0:	c7c6c1bf 171611d7 f7f65c5b 0d80fffe     ........[\......
   1f700:	dfde716d 6e1f0f0e 5f1d1c6f afae7e7d     mq.....no.._}~..
   1f710:	16fabcbb 461f1e17 584f4e47 7e5e5c5a     .......FGNOXZ\^~
   1f720:	d4c5b57f f1f0dcd5 8f7372f5 97967574     .........rs.tu..
   1f730:	2e265f2f b7afa72f d7cfc7bf 97409adf     /_&./.........@.
   1f740:	1f8f3098 ffcec1c0 5b5a4f4e 100f0807     .0......NOZ[....
   1f750:	efee2f27 3d376f6e 9045423f 53fffe91     '/..no7=?BE....S
   1f760:	c9c87567 d9d8d1d0 00fffee7 82225f20     gu.......... _".
   1f770:	448204df 06041b08 0eac8111 1e35ab80     ...D..........5.
   1f780:	03e08015 04010819 0434042f 07010307     ......../.4.....
   1f790:	0a110706 07120f50 04020855 03090a1c     ....P...U.......
   1f7a0:	03070308 03030302 0305040c 0e01060b     ................
   1f7b0:	033a0515 05060711 07570710 0d150702     ..:.......W.....
   1f7c0:	03430450 0401032d 0c0f0611 251d043a     P.C.-.......:..%
   1f7d0:	046d205f c880256a 03b08205 fd82061a     _ m.j%..........
   1f7e0:	15075903 1409170b 6a0c140c 1a060a06     .Y.........j....
   1f7f0:	2b075906 2c0a4605 01040c04 2c0b3103     .Y.+.F.,.....1.,
   1f800:	0b061a04 06ac8003 411f060a 032d044c     ...........AL.-.
   1f810:	033c0874 073c030f 052b0838 1811ff82     t.<...<.8.+.....
   1f820:	2d112f08 21102003 048c800f 0b199782     ./.-. .!........
   1f830:	05948815 073b052f 09180e02 7430b080     ..../.;.......0t
   1f840:	1ad6800c ff80050c 05b68005 c69b0c24     ............$...
   1f850:	1030d20a 37038d84 145c8109 8008b880     ..0....7..\.....
   1f860:	043530c7 0838060a 060c0846 031e0b74     .05...8.F...t...
   1f870:	0959045a 1c188380 4809160a 068a8008     Z.Y........H....
   1f880:	170ca4ab 04a13104 0726da81 8005050c     .....1....&.....
   1f890:	6d8111a5 2a287810 80044c06 be80048d     ...m.x(*.L......
   1f8a0:	0f031b03 0106000d 04010301 09080802     ................
   1f8b0:	0b050a02 11011002 13051204 15021411     ................
   1f8c0:	19021702 1d051c04 6a012408 bc026b03     .........$.j.k..
   1f8d0:	d402d102 d609d50c da02d702 e105e001     ................
   1f8e0:	ee02e802 f904f020 0c02fa06 4e3e3b27     .... .......';>N
   1f8f0:	9e9e8f4f 0907069f 563e3d36 04d1d0f3     O.......6=>V....
   1f900:	37361814 35bd5756 12e0cfce 9e8e8987     ..67VW.5........
   1f910:	110e0d04 34312912 4946453a 644f4e4a     .....)14:EFIJNOd
   1f920:	b65c5a65 a81c1bb7 09d9d8a9 a8919037     eZ\.........7...
   1f930:	3e3b0a07 928f6966 efee5f6f 9b9a625a     ..;>fi..o_..Zb..
   1f940:	9d552827 a4a3a1a0 baada8a7 0b06c4bc     '(U.............
   1f950:	3a1d150c a651453f a0cdcca7 221a1907     ...:?EQ........"
   1f960:	c53f3e25 232004c6 33282625 4a483a38     %>?... #%&(38:HJ
   1f970:	5553504c 5c5a5856 6563605e 78736b66     LPSUVXZ\^`cefksx
   1f980:	a48a7f7d c0b0afaa a3720cd0 6ecccba4     }.........r....n
   1f990:	7b225e6f 2d040305 01046503 82802e2f     o^"{...-.e../...
   1f9a0:	0f31031d 0924041c 052b051e 2a0e0444     ..1...$...+.D..*
   1f9b0:	2406aa80 28042404 010b3408 37819080     ...$.$.(.4.....7
   1f9c0:	080a1609 03399880 30090863 03210516     ......9.c..0..!.
   1f9d0:	4001051b 054b0438 070a042f 20400709     ...@8.K./.....@ 
   1f9e0:	090c0427 053a0336 0c04071a 37495007     '...6.:......PI7
   1f9f0:	07330d33 810a082e 81801f26 802a0828     3.3.....&...(.*.
   1fa00:	4e091786 430f1e04 0a07190e 27094706     ...N...C.....G.'
   1fa10:	3f0b7509 3b062a41 51060a05 10050106     .u.?A*.;...Q....
   1fa20:	8b800503 08482060 5ea6800a 0a0b4522     ....` H....^"E..
   1fa30:	39130d06 2c360a07 c0801004 0c53643c     ...9..6,....<dS.
   1fa40:	45a08001 5308481b 0781391d 031d0a46     ...E.H.S.9..F...
   1fa50:	03374947 060a080e 810a0739 c7801936     GI7.....9...6...
   1fa60:	9b830d32 800b7566 84bc8ac4 82d18f2f     2...fu....../...
   1fa70:	82b9a147 042a0739 0a266002 05280a46     G...9.*..`&.F.(.
   1fa80:	5bb08213 39044b65 04401107 08f8971c     ...[eK.9..@.....
   1fa90:	0da5f382 03311f81 81080411 6b04898c     ......1........k
   1faa0:	09030d05 60931007 730af680 46176e08     .......`...s.n.F
   1fab0:	0c149a80 80190957 03478187 150f4285     ....W.....G..B..
   1fac0:	802b5085 1a032dd5 70810204 8501053a     .P+..-.....p:...
   1fad0:	29d78000 040a044c 44118302 c2803d4c     ...)L......DL=..
   1fae0:	0401063c 341b0555 2c0e8102 560c6404     <...U..4...,.d.V
   1faf0:	5d030d0a 1d393d03 09042c0d 060e0207     ...].=9..,......
   1fb00:	d6839a80 0b030d0a 590c7405 0c140c07     .........t.Y....
   1fb10:	0a083804 1e082806 31037752 0ca68003     .8...(..Rw.1....
   1fb20:	05030414 85060d03 6372736a 62696c2f     ........jsrc/lib
   1fb30:	65726f63 696e752f 65646f63 646f6d2f     core/unicode/mod
   1fb40:	0073722e 0001fb29 0000001a 00000038     .rs.).......8...
   1fb50:	0000000f 0001fb29 0000001a 00000039     ....).......9...
   1fb60:	00000010                                ....

0001fb64 <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   1fb64:	1b150f04 17120319 0e000011 00000016     ................
	...
   1fb8c:	00130600 00000000 00000000 00000000     ................
   1fb9c:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   1fbbc:	01050000 00000000 00000000 00000000     ................
   1fbcc:	00000000 10000000 00000000 0009000b     ................
   1fbdc:	                                         ...

0001fbdf <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   1fbfb:	00120f00 00000000 00000000 00000000     ................
   1fc0b:	0000001f 00000000 00000000 00000000     ................
   1fc1b:	1d664649 00000000 00000000 00000000     IFf.............
   1fc2b:	00003e8a 00000000 00000000 4b000000     .>.............K
   1fc3b:	00000053 00000000 00000000 42236700     S............g#B
	...
   1fc57:	0000003d 00230000 00000000 00000000     =.....#.........
   1fc67:	2d000075 00000000 00000000 00000000     u..-............
   1fc77:	003c4e82 00000000 00000000 63000000     .N<............c
   1fc87:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   1fc97:	00000300 00000000 00000000 0000002f     ............/...
   1fca7:	00000000 00001000 13000000 00000800     ................
	...
   1fcbf:	43000000 89007200 00000000 00000000     ...C.r..........
   1fccf:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   1fcdf:	00210000 00000000 00000000 00000000     ..!.............
   1fcef:	4100000a 00000000 00000000 00000000     ...A............
   1fcff:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   1fd0f:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   1fd1f:	00000031 00000053 3a000000 00000000     1...S......:....
   1fd2f:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   1fd3f:	0017003b 00000000 00000000 00000000     ;...............
   1fd4f:	57000055 83000000 00000000 00000000     U..W............
   1fd5f:	00000059 26000000 00161b6e 00000000     Y......&n.......
   1fd6f:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   1fd7f:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   1fd8f:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   1fd9f:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   1fdaf:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   1fdbf:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

0001fdd0 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   1fdd8:	00000001 00000000 0000000d 00000000     ................
   1fde8:	0000001c 00000000 00000040 00000000     ........@.......
   1fdf8:	000000b6 00000000 000000bf 00000000     ................
   1fe08:	000003f8 00000000 000007f0 00000000     ................
   1fe18:	000007ff 00000000 00001000 00000000     ................
   1fe28:	00001e00 00000000 00003800 00000000     .........8......
   1fe38:	00003f00 00000000 00007f80 00000000     .?..............
   1fe48:	00008000 00000000 0001ffc0 00000000     ................
   1fe58:	0003ff80 00000000 00078000 00000000     ................
   1fe68:	007f0000 00000000 00802001 00000000     ......... ......
   1fe78:	00a30000 00000000 037ffc00 00000000     ................
   1fe88:	06000000 00000000 07ff0000 00000000     ................
   1fe98:	09800000 00000000 0e000000 00000000     ................
   1fea8:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   1feb8:	200ffe40 00000000 30000001 00000000     @.. .......0....
   1fec8:	40000000 00000000 4000005c 00000000     ...@....\..@....
   1fed8:	60000000 00000000 805c8400 00000000     ...`......\.....
   1fee8:	c0000000 00000000 e0000000 00000000     ................
   1fef8:	00000000 00000001 0cf00000 00000001     ................
   1ff08:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   1ff18:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   1ff28:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   1ff38:	00000000 00000060 00000844 00000060     ....`...D...`...
   1ff48:	00000000 000000f0 00000060 00000200     ........`.......
   1ff58:	f9ffff7f 000007db 80000000 000007f8     ................
   1ff68:	e0000000 00000fbc 00000000 00002120     ............ !..
   1ff78:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   1ff88:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   1ff98:	00000000 00003fc0 00000000 0000f000     .....?..........
   1ffa8:	00000000 0000fc00 f8000010 0000fffe     ................
   1ffb8:	0000ffff 0000ffff ffffffff 0000ffff     ................
   1ffc8:	fffff800 00010000 00000000 0001ffc0     ................
   1ffd8:	ffff0000 0001ffff 00000000 00030000     ................
   1ffe8:	00000000 00038000 00000000 0003a340     ............@...
   1fff8:	00000000 00080000 000c0000 000c0000     ................
   20008:	00000004 000ff800 00000000 00180000     ................
   20018:	001c0000 001c0000 c3000000 001e0001     ................
   20028:	00000000 001f0000 00800001 001f1fc0     ................
   20038:	00000007 001fef80 ffffffff 00201fff     .............. .
   20048:	00023986 00230000 00000002 00403000     .9....#......0@.
   20058:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   20068:	00000000 007f0000 00000000 00bf2800     .............(..
   20078:	00000000 00cff000 03000000 02a00000     ................
   20088:	fff70000 031021fd 00000003 06780000     .....!........x.
   20098:	00000000 06ff8000 00000000 07c00000     ................
   200a8:	00000000 07f20000 00000000 0e040187     ................
   200b8:	00000006 10000000 00001008 10000000     ................
   200c8:	00000007 14000000 0000000f 17f00000     ................
   200d8:	00000000 1ff20000 feffe0df 1fffffff     ................
   200e8:	00000000 20000000 00000000 200ff800     ....... ....... 
   200f8:	00000007 33c80000 00000000 3fb00000     .......3.......?
   20108:	00000000 3ff78000 00000004 40000000     .......?.......@
   20118:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   20128:	00000002 50000000 00000003 58000000     .......P.......X
   20138:	00000000 66fde000 000007fe 79f80000     .......f.......y
   20148:	00000003 7fc00000 00000000 7ffe0000     ................
   20158:	00000000 7fff0000 00000000 80000000     ................
   20168:	0000007f 80000000 00000030 8003ffff     ........0.......
   20178:	0000f06e 87000000 00000002 90000000     n...............
   20188:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   20198:	00000000 a7f80000 00000000 b03c8000     ..............<.
   201a8:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   201b8:	fffe0000 bfffffff 00000011 c0000000     ................
   201c8:	00000000 c19d0000 00000002 d0000000     ................
   201d8:	00000000 f807c3a0 ffffffff f87fffff     ................
   201e8:	ffffffff fbffffff 000021be fc00000c     .........!......
   201f8:	00000000 ff000000 00000002 ff000000     ................
   20208:	00020000 ffff0000 fff80000 fffffffb     ................
   20218:	00000000 ffffffff ffffffff ffffffff     ................
   20228:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

00020238 <nrf52_hal_i2cs>:
   20238:	00000000 20000108                       ....... 

00020240 <nrf52_hal_spis>:
   20240:	2000ddc0 00000000 00000000 65737341     ... ........Asse
   20250:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   20260:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   20270:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   20280:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   20290:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   202a0:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   202b0:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   202c0:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   202d0:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   202e0:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   202f0:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   20300:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   20310:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   20320:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   20330:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   20340:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   20350:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   20360:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   20370:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   20380:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   20390:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   203a0:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   203b0:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   203c0:	00000000 656c6469 00000000 7379736d     ....idle....msys
   203d0:	0000315f                                _1..

000203d4 <MemFile_methods>:
   203d4:	0001a00d 00000000                       ........

000203dc <stdout>:
   203dc:	20000124                                $.. 

000203e0 <nrf52k_flash_dev>:
   203e0:	000203f8 00000000 00080000 00000080     ................
   203f0:	00000001 000000ff                       ........

000203f8 <nrf52k_flash_funcs>:
   203f8:	0001a279 0001a1a9 0001a131 0001a189     y.......1.......
   20408:	00000000 0001a185 00000000              ............

00020414 <nrf52_hal_timers>:
   20414:	2000ded0 00000000 00000000 00000000     ... ............
	...

0002042c <hal_i2c1_cfg>:
   2042c:	00000007 00000006 00000064              ........d...

00020438 <os_bsp_spi0m_cfg>:
   20438:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   20448:	7476655f 00000073                       _evts...

00020450 <COLLECTOR_NODE_HW_ID>:
   20450:	066aff57 50547878 67242949              W.j.xxTPI)$g

0002045c <SENSOR_NODE_HW_IDS>:
   2045c:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   2046c:	08070605 020b0a09 04030201 08070605     ................
   2047c:	030b0a09 04030201 08070605 040b0a09     ................
   2048c:	04030201 08070605 050b0a09 77687325     ............%shw
   2049c:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   204ac:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   204bc:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   204cc:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   204dc:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   204ec:	0a732520 00000000 00000000               %s.........

000204f8 <sensor_node_addresses>:
   204f8:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   20508:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   20518:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   20528:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   20538:	00000a73                                s...

0002053c <g_temp_stub_sensor_driver>:
   2053c:	0001b0b5 0001afbd 00000000 00000000     ................
	...
   20564:	20425453 64616572 6d657420 65732070     STB read temp se
   20574:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   20584:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

00020594 <sysflash_map_dflt>:
	...
   2059c:	00004000 00000001 00008000 00073c00     .@...........<..
   205ac:	00000002 0007bc00 00000400 00000003     ................
   205bc:	0007c000 00001000 00000010 00004000     .............@..
   205cc:	00004000 00000011 0007d000 00003000     .@...........0..
   205dc:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   205ec:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  99828	    108	  57144	 157080	  26598	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
