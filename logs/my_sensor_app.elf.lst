
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x0001e734 vaddr 0x0001e734 paddr 0x0001e734 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0001e74c memsz 0x0001e74c flags rwx
    LOAD off    0x000200d8 vaddr 0x200000d8 paddr 0x0001e74c align 2**16
         filesz 0x00000064 memsz 0x00000064 flags rw-
    LOAD off    0x00020140 vaddr 0x20000140 paddr 0x0001e7b0 align 2**16
         filesz 0x00000000 memsz 0x0000b5e8 flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              00016714  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  0001e734  0001e734  0002013c  2**0  CONTENTS
  3 .ARM.exidx         00000018  0001e734  0001e734  0001e734  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00030000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  0002013c  2**0  CONTENTS
  6 .data              00000064  200000d8  0001e74c  000200d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  2000013c  2000013c  0002013c  2**0  CONTENTS
  8 .bss               0000b5e8  20000140  0001e7b0  00020140  2**3  ALLOC
  9 .stack_dummy       000001b0  2000b728  2000b728  00020140  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000202f0  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  0002032b  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000203aa  2**0  CONTENTS, READONLY
 13 .debug_line        00046086  00000000  00000000  000203ae  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        00083ea2  00000000  00000000  00066434  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000e34e  00000000  00000000  000ea2d6  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005540  00000000  00000000  000f8628  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         0005c073  00000000  00000000  000fdb68  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         000135d5  00000000  00000000  00159bdb  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      00019b18  00000000  00000000  0016d1b0  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000dcf0  00000000  00000000  00186cc8  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000056  00000000  00000000  001949b8  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00018cb6  00000000  00000000  00194a0e  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    0003efab  00000000  00000000  001ad6c4  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
0001e734 l    d  .ARM.extab	00000000 .ARM.extab
0001e734 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
2000013c l    d  .bssnz	00000000 .bssnz
20000140 l    d  .bss	00000000 .bss
2000b728 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 gz0fksn1u8kmg17
0000508c l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00000d28 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d3b l       .debug_str	00000000 
00000d44 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d69 l       .debug_str	00000000 
00000d7a l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000db7 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e15 l       .debug_str	00000000 
00000e32 l       .debug_str	00000000 
0002ea09 l       .debug_str	00000000 
0002e9fd l       .debug_str	00000000 
0002ea6e l       .debug_str	00000000 
0005488e l       .debug_str	00000000 
00054ff5 l       .debug_str	00000000 
000542c2 l       .debug_str	00000000 
00000e4b l       .debug_str	00000000 
0002ea9b l       .debug_str	00000000 
0002ea8d l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00000e4f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000574ef l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000be9 l       .debug_str	00000000 
00056370 l       .debug_str	00000000 
00000bf6 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00001de8 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00001dee l       .debug_str	00000000 
0000363b l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000c16 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0002ea5a l       .debug_str	00000000 
00059fb0 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c70 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00033b92 l       .debug_str	00000000 
00057399 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00000c8e l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000c95 l       .debug_str	00000000 
00000c9b l       .debug_str	00000000 
00000ca3 l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00000ca9 l       .debug_str	00000000 
00000cce l       .debug_str	00000000 
00000cb4 l       .debug_str	00000000 
00000cd7 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00055003 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00000d22 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000cb4 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c70 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00033b92 l       .debug_str	00000000 
00057399 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00000c8e l       .debug_str	00000000 
00000c95 l       .debug_str	00000000 
00000c9b l       .debug_str	00000000 
00000ca3 l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00000ca9 l       .debug_str	00000000 
00000cce l       .debug_str	00000000 
00000cd7 l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00055003 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00000d22 l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00000d28 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d3b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d44 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d69 l       .debug_str	00000000 
00000d7a l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000db7 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e15 l       .debug_str	00000000 
00000e32 l       .debug_str	00000000 
0002ea09 l       .debug_str	00000000 
0002e9fd l       .debug_str	00000000 
00000fc1 l       .debug_str	00000000 
00011511 l       .debug_str	00000000 
00010834 l       .debug_str	00000000 
000577c6 l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
0000118e l       .debug_str	00000000 
0005b9cc l       .debug_str	00000000 
00001199 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005a6af l       .debug_str	00000000 
00000e7e l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0005b68b l       .debug_str	00000000 
00000e94 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
00013b09 l       .debug_str	00000000 
00000e9c l       .debug_str	00000000 
00001147 l       .debug_str	00000000 
00000ea4 l       .debug_str	00000000 
00000f29 l       .debug_str	00000000 
00000f3f l       .debug_str	00000000 
000574f8 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0003a01e l       .debug_str	00000000 
00000f8e l       .debug_str	00000000 
00000fbc l       .debug_str	00000000 
00000fc6 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00000ff8 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
0005ba4c l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
0000104d l       .debug_str	00000000 
00001079 l       .debug_str	00000000 
00001081 l       .debug_str	00000000 
000010b1 l       .debug_str	00000000 
000010bc l       .debug_str	00000000 
000010e9 l       .debug_str	00000000 
000010f2 l       .debug_str	00000000 
00001128 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0000113e l       .debug_str	00000000 
00000fc0 l       .debug_str	00000000 
0005440f l       .debug_str	00000000 
0000114c l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00001174 l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001155 l       .debug_str	00000000 
0000115f l       .debug_str	00000000 
00001164 l       .debug_str	00000000 
00001180 l       .debug_str	00000000 
00001185 l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d44 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e15 l       .debug_str	00000000 
00000e32 l       .debug_str	00000000 
0002ea09 l       .debug_str	00000000 
000011a0 l       .debug_str	00000000 
000011d2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c70 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00033b92 l       .debug_str	00000000 
00057399 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00000c8e l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000c95 l       .debug_str	00000000 
00000c9b l       .debug_str	00000000 
00000ca3 l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00000ca9 l       .debug_str	00000000 
00000cce l       .debug_str	00000000 
00000cb4 l       .debug_str	00000000 
00000cd7 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00055003 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00000d22 l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00000d28 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d3b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d69 l       .debug_str	00000000 
00000d7a l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000db7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
00002ba4 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
00003165 l       .debug_str	00000000 
000031a5 l       .debug_str	00000000 
000031f3 l       .debug_str	00000000 
00003233 l       .debug_str	00000000 
0000325a l       .debug_str	00000000 
0000329a l       .debug_str	00000000 
000032a8 l       .debug_str	00000000 
00003317 l       .debug_str	00000000 
00003342 l       .debug_str	00000000 
000033b2 l       .debug_str	00000000 
000033c5 l       .debug_str	00000000 
00003435 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00003461 l       .debug_str	00000000 
0000347f l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
000149e9 l       .debug_str	00000000 
00003a7b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
000011d9 l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
000011ec l       .debug_str	00000000 
000011f7 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
0000122d l       .debug_str	00000000 
00001237 l       .debug_str	00000000 
00001242 l       .debug_str	00000000 
0000124d l       .debug_str	00000000 
0000125a l       .debug_str	00000000 
00001266 l       .debug_str	00000000 
00001273 l       .debug_str	00000000 
00001281 l       .debug_str	00000000 
0000128b l       .debug_str	00000000 
0000a05c l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00001298 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0000129c l       .debug_str	00000000 
000012a7 l       .debug_str	00000000 
000012e6 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
00003470 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
000553b5 l       .debug_str	00000000 
0000309b l       .debug_str	00000000 
000012b2 l       .debug_str	00000000 
0000161e l       .debug_str	00000000 
000012bb l       .debug_str	00000000 
0003cd4c l       .debug_str	00000000 
000012c2 l       .debug_str	00000000 
000012ce l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
000012d6 l       .debug_str	00000000 
000012ed l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00001347 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013b4 l       .debug_str	00000000 
000013fb l       .debug_str	00000000 
0000144a l       .debug_str	00000000 
00001454 l       .debug_str	00000000 
00001491 l       .debug_str	00000000 
000014d6 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014ef l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
000015a9 l       .debug_str	00000000 
000015b5 l       .debug_str	00000000 
000015be l       .debug_str	00000000 
000015ca l       .debug_str	00000000 
000015d6 l       .debug_str	00000000 
000015df l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
000015e7 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000015ef l       .debug_str	00000000 
0000161d l       .debug_str	00000000 
00001604 l       .debug_str	00000000 
00001624 l       .debug_str	00000000 
0000162b l       .debug_str	00000000 
00001633 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
0000163d l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00059c8b l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
000546c8 l       .debug_str	00000000 
00001646 l       .debug_str	00000000 
00001673 l       .debug_str	00000000 
000015af l       .debug_str	00000000 
0005aac6 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
000016a8 l       .debug_str	00000000 
000016d1 l       .debug_str	00000000 
0000172f l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001795 l       .debug_str	00000000 
000016c1 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
000017b3 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000017c9 l       .debug_str	00000000 
000017ef l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001805 l       .debug_str	00000000 
00004f9a l       .debug_str	00000000 
000017ce l       .debug_str	00000000 
0000181b l       .debug_str	00000000 
00049d58 l       .debug_str	00000000 
00001832 l       .debug_str	00000000 
0000183a l       .debug_str	00000000 
00001843 l       .debug_str	00000000 
00002c47 l       .debug_str	00000000 
0000184c l       .debug_str	00000000 
0000b3da l       .debug_str	00000000 
0005a779 l       .debug_str	00000000 
00001854 l       .debug_str	00000000 
00001860 l       .debug_str	00000000 
0000186b l       .debug_str	00000000 
00001873 l       .debug_str	00000000 
0000aa6a l       .debug_str	00000000 
0000af9b l       .debug_str	00000000 
0000187b l       .debug_str	00000000 
00001977 l       .debug_str	00000000 
00001a7b l       .debug_str	00000000 
00001a89 l       .debug_str	00000000 
00001a94 l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00001ac1 l       .debug_str	00000000 
00001a9e l       .debug_str	00000000 
00001acc l       .debug_str	00000000 
00001b47 l       .debug_str	00000000 
00001bca l       .debug_str	00000000 
00001bd8 l       .debug_str	00000000 
00001c37 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00001cb4 l       .debug_str	00000000 
00001cc4 l       .debug_str	00000000 
00058faf l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00001cd3 l       .debug_str	00000000 
0001d878 l       .debug_str	00000000 
00001cd9 l       .debug_str	00000000 
00001cdf l       .debug_str	00000000 
00001ce5 l       .debug_str	00000000 
00001cf1 l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
00001cf9 l       .debug_str	00000000 
00001d01 l       .debug_str	00000000 
00001d07 l       .debug_str	00000000 
00001d4d l       .debug_str	00000000 
00001d2a l       .debug_str	00000000 
00001d5d l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00058b3c l       .debug_str	00000000 
00001de5 l       .debug_str	00000000 
00001deb l       .debug_str	00000000 
00001df1 l       .debug_str	00000000 
00001e1a l       .debug_str	00000000 
00001df7 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e6e l       .debug_str	00000000 
00058a25 l       .debug_str	00000000 
00001eb8 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001ec4 l       .debug_str	00000000 
00001eed l       .debug_str	00000000 
00001eca l       .debug_str	00000000 
00001eff l       .debug_str	00000000 
00001f41 l       .debug_str	00000000 
00057ee9 l       .debug_str	00000000 
00001f8b l       .debug_str	00000000 
00001f91 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
00001f9d l       .debug_str	00000000 
00001fc6 l       .debug_str	00000000 
00001fa3 l       .debug_str	00000000 
00001fd7 l       .debug_str	00000000 
00002018 l       .debug_str	00000000 
00002061 l       .debug_str	00000000 
00002066 l       .debug_str	00000000 
00058d73 l       .debug_str	00000000 
0000206b l       .debug_str	00000000 
00002071 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000020a0 l       .debug_str	00000000 
0000207d l       .debug_str	00000000 
000020b1 l       .debug_str	00000000 
000020f2 l       .debug_str	00000000 
00057fa1 l       .debug_str	00000000 
0000213b l       .debug_str	00000000 
00002167 l       .debug_str	00000000 
00002144 l       .debug_str	00000000 
00002178 l       .debug_str	00000000 
000021b9 l       .debug_str	00000000 
00002202 l       .debug_str	00000000 
00058f47 l       .debug_str	00000000 
00002207 l       .debug_str	00000000 
00002210 l       .debug_str	00000000 
00002217 l       .debug_str	00000000 
00002242 l       .debug_str	00000000 
0000221f l       .debug_str	00000000 
00002254 l       .debug_str	00000000 
00002296 l       .debug_str	00000000 
00058c0f l       .debug_str	00000000 
000022e0 l       .debug_str	00000000 
000022e6 l       .debug_str	00000000 
000022ec l       .debug_str	00000000 
000022f2 l       .debug_str	00000000 
000022f8 l       .debug_str	00000000 
00002300 l       .debug_str	00000000 
0000230e l       .debug_str	00000000 
0000231d l       .debug_str	00000000 
0000232e l       .debug_str	00000000 
00002339 l       .debug_str	00000000 
00002344 l       .debug_str	00000000 
0000234f l       .debug_str	00000000 
00002356 l       .debug_str	00000000 
0000239c l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
000023f0 l       .debug_str	00000000 
000580a4 l       .debug_str	00000000 
0000243a l       .debug_str	00000000 
00002467 l       .debug_str	00000000 
00002444 l       .debug_str	00000000 
00002479 l       .debug_str	00000000 
000024bb l       .debug_str	00000000 
00002505 l       .debug_str	00000000 
0000250a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
00002514 l       .debug_str	00000000 
00002549 l       .debug_str	00000000 
0000258b l       .debug_str	00000000 
000025d5 l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
00002654 l       .debug_str	00000000 
000025e9 l       .debug_str	00000000 
000025f9 l       .debug_str	00000000 
00002602 l       .debug_str	00000000 
0000260d l       .debug_str	00000000 
0000261c l       .debug_str	00000000 
00002631 l       .debug_str	00000000 
00002662 l       .debug_str	00000000 
000026ff l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027af l       .debug_str	00000000 
000027b8 l       .debug_str	00000000 
000027fc l       .debug_str	00000000 
000027d9 l       .debug_str	00000000 
0000280f l       .debug_str	00000000 
00002892 l       .debug_str	00000000 
0000291d l       .debug_str	00000000 
00002939 l       .debug_str	00000000 
00002985 l       .debug_str	00000000 
000029d9 l       .debug_str	00000000 
000029f6 l       .debug_str	00000000 
00002a0a l       .debug_str	00000000 
00002a56 l       .debug_str	00000000 
00002aaa l       .debug_str	00000000 
00002ac0 l       .debug_str	00000000 
00002ad4 l       .debug_str	00000000 
00002b1b l       .debug_str	00000000 
00002b6a l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002b73 l       .debug_str	00000000 
00002baa l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
00002bb9 l       .debug_str	00000000 
0000351e l       .debug_str	00000000 
00002bc1 l       .debug_str	00000000 
00002bc9 l       .debug_str	00000000 
0002e542 l       .debug_str	00000000 
00002bd8 l       .debug_str	00000000 
00003550 l       .debug_str	00000000 
00002be3 l       .debug_str	00000000 
00002bee l       .debug_str	00000000 
00002bff l       .debug_str	00000000 
00002c05 l       .debug_str	00000000 
00002c0d l       .debug_str	00000000 
00002c14 l       .debug_str	00000000 
00002c1e l       .debug_str	00000000 
00002c26 l       .debug_str	00000000 
00002c2e l       .debug_str	00000000 
00002c50 l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002c67 l       .debug_str	00000000 
00002c6f l       .debug_str	00000000 
00002c78 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00002c83 l       .debug_str	00000000 
00002c8e l       .debug_str	00000000 
00002c99 l       .debug_str	00000000 
00002ca9 l       .debug_str	00000000 
00058015 l       .debug_str	00000000 
0000393f l       .debug_str	00000000 
00002cb3 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002d2b l       .debug_str	00000000 
00002d32 l       .debug_str	00000000 
00002d3a l       .debug_str	00000000 
00003958 l       .debug_str	00000000 
00002d51 l       .debug_str	00000000 
00002d61 l       .debug_str	00000000 
00002d70 l       .debug_str	00000000 
00002d78 l       .debug_str	00000000 
00002d7f l       .debug_str	00000000 
00002d87 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002da5 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
00002ded l       .debug_str	00000000 
00002df6 l       .debug_str	00000000 
00002e53 l       .debug_str	00000000 
00002eb8 l       .debug_str	00000000 
00002ec2 l       .debug_str	00000000 
00002ed2 l       .debug_str	00000000 
00002ee7 l       .debug_str	00000000 
00002eef l       .debug_str	00000000 
00002f53 l       .debug_str	00000000 
00002fbf l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fce l       .debug_str	00000000 
0000300f l       .debug_str	00000000 
00002fec l       .debug_str	00000000 
0000301f l       .debug_str	00000000 
00003034 l       .debug_str	00000000 
00003047 l       .debug_str	00000000 
0000305c l       .debug_str	00000000 
00003063 l       .debug_str	00000000 
00003078 l       .debug_str	00000000 
000030a2 l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00003119 l       .debug_str	00000000 
00003158 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
000041c6 l       .debug_str	00000000 
000041f3 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
000041fe l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00004212 l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
0000422d l       .debug_str	00000000 
0000424e l       .debug_str	00000000 
00004264 l       .debug_str	00000000 
000042cc l       .debug_str	00000000 
00004344 l       .debug_str	00000000 
00004371 l       .debug_str	00000000 
00004389 l       .debug_str	00000000 
000043f3 l       .debug_str	00000000 
000043fb l       .debug_str	00000000 
00004401 l       .debug_str	00000000 
0000440b l       .debug_str	00000000 
00004485 l       .debug_str	00000000 
000044f1 l       .debug_str	00000000 
0000456a l       .debug_str	00000000 
000045e3 l       .debug_str	00000000 
0000464e l       .debug_str	00000000 
000046bd l       .debug_str	00000000 
000046c4 l       .debug_str	00000000 
000046cf l       .debug_str	00000000 
000046f7 l       .debug_str	00000000 
0000476c l       .debug_str	00000000 
000047e9 l       .debug_str	00000000 
000046e8 l       .debug_str	00000000 
000047f5 l       .debug_str	00000000 
0000181b l       .debug_str	00000000 
0000486c l       .debug_str	00000000 
0000162b l       .debug_str	00000000 
00049d58 l       .debug_str	00000000 
00001832 l       .debug_str	00000000 
0000183a l       .debug_str	00000000 
00001843 l       .debug_str	00000000 
00002c47 l       .debug_str	00000000 
000048d5 l       .debug_str	00000000 
00004953 l       .debug_str	00000000 
000049c3 l       .debug_str	00000000 
00004a3d l       .debug_str	00000000 
00004a57 l       .debug_str	00000000 
00004ac3 l       .debug_str	00000000 
00004acc l       .debug_str	00000000 
00004ad8 l       .debug_str	00000000 
00004b4e l       .debug_str	00000000 
00004bc4 l       .debug_str	00000000 
00004c3a l       .debug_str	00000000 
00004ca2 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00004d11 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
00004d7e l       .debug_str	00000000 
00004df3 l       .debug_str	00000000 
00004e08 l       .debug_str	00000000 
00004e6f l       .debug_str	00000000 
00004e78 l       .debug_str	00000000 
00004e83 l       .debug_str	00000000 
00004e8a l       .debug_str	00000000 
00056378 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
00004ebf l       .debug_str	00000000 
00055db1 l       .debug_str	00000000 
00004ef9 l       .debug_str	00000000 
00004f41 l       .debug_str	00000000 
00055c58 l       .debug_str	00000000 
0005b0ff l       .debug_str	00000000 
00004f74 l       .debug_str	00000000 
00001180 l       .debug_str	00000000 
00004f81 l       .debug_str	00000000 
00001185 l       .debug_str	00000000 
0005b68b l       .debug_str	00000000 
00000e94 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
00013b09 l       .debug_str	00000000 
00000e9c l       .debug_str	00000000 
00001147 l       .debug_str	00000000 
0000113e l       .debug_str	00000000 
00004fa2 l       .debug_str	00000000 
00004fa7 l       .debug_str	00000000 
00004fac l       .debug_str	00000000 
00004fb1 l       .debug_str	00000000 
00004fb6 l       .debug_str	00000000 
00004fbb l       .debug_str	00000000 
00004fc6 l       .debug_str	00000000 
00004fd1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00001298 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0000129c l       .debug_str	00000000 
000012a7 l       .debug_str	00000000 
000012e6 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
000011d9 l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
000011ec l       .debug_str	00000000 
000011f7 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
0000122d l       .debug_str	00000000 
00001237 l       .debug_str	00000000 
00001242 l       .debug_str	00000000 
0000124d l       .debug_str	00000000 
0000125a l       .debug_str	00000000 
00001266 l       .debug_str	00000000 
00001273 l       .debug_str	00000000 
00001281 l       .debug_str	00000000 
0000128b l       .debug_str	00000000 
0000a05c l       .debug_str	00000000 
000012bb l       .debug_str	00000000 
0003cd4c l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00003483 l       .debug_str	00000000 
00011677 l       .debug_str	00000000 
000034f7 l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
0000b3da l       .debug_str	00000000 
00002bb9 l       .debug_str	00000000 
0000351e l       .debug_str	00000000 
00003503 l       .debug_str	00000000 
00003529 l       .debug_str	00000000 
00002bc9 l       .debug_str	00000000 
0002e542 l       .debug_str	00000000 
00002bd8 l       .debug_str	00000000 
00003550 l       .debug_str	00000000 
00003535 l       .debug_str	00000000 
0000355c l       .debug_str	00000000 
00003567 l       .debug_str	00000000 
00003572 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
0000362c l       .debug_str	00000000 
00003583 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000360a l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00003611 l       .debug_str	00000000 
000012d6 l       .debug_str	00000000 
00003640 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000369d l       .debug_str	00000000 
00003702 l       .debug_str	00000000 
0000370a l       .debug_str	00000000 
0000372c l       .debug_str	00000000 
00003713 l       .debug_str	00000000 
00003744 l       .debug_str	00000000 
0000376a l       .debug_str	00000000 
000037e2 l       .debug_str	00000000 
00002ca9 l       .debug_str	00000000 
00058015 l       .debug_str	00000000 
00002cb3 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002d2b l       .debug_str	00000000 
00002d32 l       .debug_str	00000000 
00003958 l       .debug_str	00000000 
0000393f l       .debug_str	00000000 
00002d3a l       .debug_str	00000000 
00003859 l       .debug_str	00000000 
000038c2 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
0000393a l       .debug_str	00000000 
00003961 l       .debug_str	00000000 
00003979 l       .debug_str	00000000 
000039e3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
0000163d l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00059c8b l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
000546c8 l       .debug_str	00000000 
00001646 l       .debug_str	00000000 
00001673 l       .debug_str	00000000 
000015af l       .debug_str	00000000 
0005aac6 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
000016a8 l       .debug_str	00000000 
000016d1 l       .debug_str	00000000 
0000172f l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001795 l       .debug_str	00000000 
000016c1 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
000017b3 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000017c9 l       .debug_str	00000000 
000017ef l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001805 l       .debug_str	00000000 
00004f9a l       .debug_str	00000000 
000017ce l       .debug_str	00000000 
000039ed l       .debug_str	00000000 
000039f6 l       .debug_str	00000000 
00003a96 l       .debug_str	00000000 
000039ff l       .debug_str	00000000 
00003a78 l       .debug_str	00000000 
0005b0fd l       .debug_str	00000000 
00003a7d l       .debug_str	00000000 
00003aa0 l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
00003ac6 l       .debug_str	00000000 
00003aad l       .debug_str	00000000 
00003aa8 l       .debug_str	00000000 
00003ad1 l       .debug_str	00000000 
00003aea l       .debug_str	00000000 
00003b55 l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
00003bc5 l       .debug_str	00000000 
00003bd5 l       .debug_str	00000000 
00003c4d l       .debug_str	00000000 
00055908 l       .debug_str	00000000 
00055662 l       .debug_str	00000000 
00003c57 l       .debug_str	00000000 
00003c5e l       .debug_str	00000000 
00003c81 l       .debug_str	00000000 
00003c68 l       .debug_str	00000000 
00003c63 l       .debug_str	00000000 
00003c8b l       .debug_str	00000000 
00003ca3 l       .debug_str	00000000 
00003d0d l       .debug_str	00000000 
000012c2 l       .debug_str	00000000 
000012ce l       .debug_str	00000000 
000012ed l       .debug_str	00000000 
00001347 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013b4 l       .debug_str	00000000 
000013fb l       .debug_str	00000000 
0000144a l       .debug_str	00000000 
00001454 l       .debug_str	00000000 
00001491 l       .debug_str	00000000 
000014d6 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014ef l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
000015a9 l       .debug_str	00000000 
000015b5 l       .debug_str	00000000 
000015be l       .debug_str	00000000 
000015ca l       .debug_str	00000000 
000015d6 l       .debug_str	00000000 
000015df l       .debug_str	00000000 
000015e7 l       .debug_str	00000000 
0000161d l       .debug_str	00000000 
00001604 l       .debug_str	00000000 
000015ef l       .debug_str	00000000 
00003d82 l       .debug_str	00000000 
00003de9 l       .debug_str	00000000 
00003e64 l       .debug_str	00000000 
00003e74 l       .debug_str	00000000 
00003e7d l       .debug_str	00000000 
00003e8b l       .debug_str	00000000 
00003e99 l       .debug_str	00000000 
00003ea5 l       .debug_str	00000000 
000040b3 l       .debug_str	00000000 
00003eb1 l       .debug_str	00000000 
00003ec0 l       .debug_str	00000000 
00003ec8 l       .debug_str	00000000 
00003ee1 l       .debug_str	00000000 
00001633 l       .debug_str	00000000 
00003ef2 l       .debug_str	00000000 
00003efa l       .debug_str	00000000 
00003f2d l       .debug_str	00000000 
00003f14 l       .debug_str	00000000 
00003f39 l       .debug_str	00000000 
000015e2 l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00003f6b l       .debug_str	00000000 
00003f52 l       .debug_str	00000000 
00003f76 l       .debug_str	00000000 
00003f98 l       .debug_str	00000000 
00003f7f l       .debug_str	00000000 
00003fa5 l       .debug_str	00000000 
00003fc0 l       .debug_str	00000000 
0000402d l       .debug_str	00000000 
000040aa l       .debug_str	00000000 
000040b2 l       .debug_str	00000000 
00004362 l       .debug_str	00000000 
00004349 l       .debug_str	00000000 
000040bc l       .debug_str	00000000 
000040d9 l       .debug_str	00000000 
00004148 l       .debug_str	00000000 
000041be l       .debug_str	00000000 
000041cf l       .debug_str	00000000 
000041dd l       .debug_str	00000000 
000041e4 l       .debug_str	00000000 
000041eb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
00006fc1 l       .debug_str	00000000 
00009393 l       .debug_str	00000000 
000095dc l       .debug_str	00000000 
00009842 l       .debug_str	00000000 
0002b692 l       .debug_str	00000000 
0001a54e l       .debug_str	00000000 
00009aa7 l       .debug_str	00000000 
00009ad7 l       .debug_str	00000000 
00009d35 l       .debug_str	00000000 
00009d65 l       .debug_str	00000000 
00009d90 l       .debug_str	00000000 
00009d9a l       .debug_str	00000000 
00009df3 l       .debug_str	00000000 
0000a047 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
000011d9 l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
000011ec l       .debug_str	00000000 
000011f7 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
0000122d l       .debug_str	00000000 
00001237 l       .debug_str	00000000 
00001242 l       .debug_str	00000000 
0000124d l       .debug_str	00000000 
0000125a l       .debug_str	00000000 
00001266 l       .debug_str	00000000 
00001273 l       .debug_str	00000000 
00001281 l       .debug_str	00000000 
0000128b l       .debug_str	00000000 
0000a05c l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
00009d95 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00004fd6 l       .debug_str	00000000 
00005006 l       .debug_str	00000000 
0000501a l       .debug_str	00000000 
0000ba76 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0005a911 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
00005042 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00005050 l       .debug_str	00000000 
00005058 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
00005062 l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00005093 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00005099 l       .debug_str	00000000 
0000509c l       .debug_str	00000000 
000050c5 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
000050fb l       .debug_str	00000000 
00005128 l       .debug_str	00000000 
00005176 l       .debug_str	00000000 
000051e1 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
0002b61e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0001a7a2 l       .debug_str	00000000 
0000524b l       .debug_str	00000000 
0000527b l       .debug_str	00000000 
000041fe l       .debug_str	00000000 
000052de l       .debug_str	00000000 
00005323 l       .debug_str	00000000 
00005391 l       .debug_str	00000000 
00005428 l       .debug_str	00000000 
000054e8 l       .debug_str	00000000 
000055d1 l       .debug_str	00000000 
000056e3 l       .debug_str	00000000 
0000581e l       .debug_str	00000000 
00005982 l       .debug_str	00000000 
00005b0f l       .debug_str	00000000 
00005cc5 l       .debug_str	00000000 
00005ea4 l       .debug_str	00000000 
000060ac l       .debug_str	00000000 
000062dd l       .debug_str	00000000 
000062e0 l       .debug_str	00000000 
00006330 l       .debug_str	00000000 
0000638d l       .debug_str	00000000 
000063e1 l       .debug_str	00000000 
00006458 l       .debug_str	00000000 
000064dc l       .debug_str	00000000 
00006557 l       .debug_str	00000000 
000065f5 l       .debug_str	00000000 
000066a0 l       .debug_str	00000000 
00006742 l       .debug_str	00000000 
00006807 l       .debug_str	00000000 
000068d9 l       .debug_str	00000000 
000069a2 l       .debug_str	00000000 
00006a8e l       .debug_str	00000000 
00006b87 l       .debug_str	00000000 
00006c77 l       .debug_str	00000000 
00006d8a l       .debug_str	00000000 
00006eaa l       .debug_str	00000000 
000070fb l       .debug_str	00000000 
00007242 l       .debug_str	00000000 
00007380 l       .debug_str	00000000 
000074e1 l       .debug_str	00000000 
0000764f l       .debug_str	00000000 
000077b4 l       .debug_str	00000000 
0000793c l       .debug_str	00000000 
00007ad1 l       .debug_str	00000000 
00007c5d l       .debug_str	00000000 
00007e0c l       .debug_str	00000000 
00007fc8 l       .debug_str	00000000 
0000817b l       .debug_str	00000000 
00008351 l       .debug_str	00000000 
00008534 l       .debug_str	00000000 
0000870e l       .debug_str	00000000 
0000890b l       .debug_str	00000000 
00008b15 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008f3a l       .debug_str	00000000 
0000916b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000ca9 l       .debug_str	00000000 
00000cce l       .debug_str	00000000 
00000cb4 l       .debug_str	00000000 
00000cd7 l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00055003 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00000d22 l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00000d28 l       .debug_str	00000000 
00000d3b l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d44 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d69 l       .debug_str	00000000 
00000d7a l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000db7 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e15 l       .debug_str	00000000 
00000e32 l       .debug_str	00000000 
0002ea09 l       .debug_str	00000000 
0002e9fd l       .debug_str	00000000 
00054e47 l       .debug_str	00000000 
00055611 l       .debug_str	00000000 
0000a499 l       .debug_str	00000000 
0005b9cc l       .debug_str	00000000 
0000a4a3 l       .debug_str	00000000 
0000a4ac l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000a068 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000a06e l       .debug_str	00000000 
0000a9b5 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0000a0a5 l       .debug_str	00000000 
0000a0af l       .debug_str	00000000 
0000a102 l       .debug_str	00000000 
0001b612 l       .debug_str	00000000 
0000a116 l       .debug_str	00000000 
0000a15c l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00001174 l       .debug_str	00000000 
0000a16a l       .debug_str	00000000 
0000a1b1 l       .debug_str	00000000 
0000a1ba l       .debug_str	00000000 
0000a203 l       .debug_str	00000000 
00004fbb l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00010834 l       .debug_str	00000000 
0000a20f l       .debug_str	00000000 
0000a219 l       .debug_str	00000000 
0000a295 l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
0000a2bf l       .debug_str	00000000 
0000a2ce l       .debug_str	00000000 
0000a34a l       .debug_str	00000000 
0000a379 l       .debug_str	00000000 
0000a3ff l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
0000a40d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0002fde8 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
0000a416 l       .debug_str	00000000 
00011667 l       .debug_str	00000000 
0000a427 l       .debug_str	00000000 
0000a489 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
0000114c l       .debug_str	00000000 
0001414b l       .debug_str	00000000 
00001155 l       .debug_str	00000000 
0000115f l       .debug_str	00000000 
0000a491 l       .debug_str	00000000 
00001180 l       .debug_str	00000000 
00001185 l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c70 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00033b92 l       .debug_str	00000000 
00057399 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00000c8e l       .debug_str	00000000 
00000c95 l       .debug_str	00000000 
00000c9b l       .debug_str	00000000 
00000ca3 l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
000577db l       .debug_str	00000000 
0000a6bf l       .debug_str	00000000 
00054389 l       .debug_str	00000000 
0000347f l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
0005be11 l       .debug_str	00000000 
0005be10 l       .debug_str	00000000 
0005b68b l       .debug_str	00000000 
00000e94 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
00013b09 l       .debug_str	00000000 
00000e9c l       .debug_str	00000000 
00001147 l       .debug_str	00000000 
0000113e l       .debug_str	00000000 
00003a7b l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0001d878 l       .debug_str	00000000 
0001d87d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000a4b3 l       .debug_str	00000000 
000542ac l       .debug_str	00000000 
0000a4b7 l       .debug_str	00000000 
0000a4e8 l       .debug_str	00000000 
0000a4ee l       .debug_str	00000000 
0000a52f l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
0000a544 l       .debug_str	00000000 
0000a57b l       .debug_str	00000000 
0000a586 l       .debug_str	00000000 
0005a911 l       .debug_str	00000000 
0000a5b8 l       .debug_str	00000000 
000543f0 l       .debug_str	00000000 
0000a5ec l       .debug_str	00000000 
000543df l       .debug_str	00000000 
0000a620 l       .debug_str	00000000 
00054397 l       .debug_str	00000000 
0000a657 l       .debug_str	00000000 
00054429 l       .debug_str	00000000 
0000a68f l       .debug_str	00000000 
0005425a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
00003550 l       .debug_str	00000000 
0000aa06 l       .debug_str	00000000 
0000aa2d l       .debug_str	00000000 
0000aa38 l       .debug_str	00000000 
0000aa5f l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0000aa6a l       .debug_str	00000000 
0000aa69 l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
00001def l       .debug_str	00000000 
00055398 l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
00001df5 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00004fbb l       .debug_str	00000000 
000582f0 l       .debug_str	00000000 
000555f2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00001298 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0000129c l       .debug_str	00000000 
000012a7 l       .debug_str	00000000 
000012e6 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000a6f0 l       .debug_str	00000000 
0000a719 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
0000a726 l       .debug_str	00000000 
0000a738 l       .debug_str	00000000 
0000a749 l       .debug_str	00000000 
0000a795 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000a7a1 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000553b5 l       .debug_str	00000000 
0000309b l       .debug_str	00000000 
000012b2 l       .debug_str	00000000 
0000161e l       .debug_str	00000000 
000012bb l       .debug_str	00000000 
0003cd4c l       .debug_str	00000000 
000012c2 l       .debug_str	00000000 
000012ce l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
000012d6 l       .debug_str	00000000 
000012ed l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00001347 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013b4 l       .debug_str	00000000 
000013fb l       .debug_str	00000000 
0000144a l       .debug_str	00000000 
00001454 l       .debug_str	00000000 
00001491 l       .debug_str	00000000 
000014d6 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014ef l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
000015a9 l       .debug_str	00000000 
000015b5 l       .debug_str	00000000 
000015be l       .debug_str	00000000 
000015ca l       .debug_str	00000000 
000015d6 l       .debug_str	00000000 
000015df l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
000015e7 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000015ef l       .debug_str	00000000 
0000161d l       .debug_str	00000000 
00001604 l       .debug_str	00000000 
00001624 l       .debug_str	00000000 
0000162b l       .debug_str	00000000 
00001633 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
0000163d l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00059c8b l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
000546c8 l       .debug_str	00000000 
00001646 l       .debug_str	00000000 
00001673 l       .debug_str	00000000 
000015af l       .debug_str	00000000 
0005aac6 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
000016a8 l       .debug_str	00000000 
000016d1 l       .debug_str	00000000 
0000172f l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001795 l       .debug_str	00000000 
000016c1 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
000017b3 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000017c9 l       .debug_str	00000000 
000017ef l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001805 l       .debug_str	00000000 
00004f9a l       .debug_str	00000000 
000017ce l       .debug_str	00000000 
0000181b l       .debug_str	00000000 
00049d58 l       .debug_str	00000000 
00001832 l       .debug_str	00000000 
0000183a l       .debug_str	00000000 
00001843 l       .debug_str	00000000 
00002c47 l       .debug_str	00000000 
0000184c l       .debug_str	00000000 
0000b3da l       .debug_str	00000000 
0005a779 l       .debug_str	00000000 
00001854 l       .debug_str	00000000 
00001860 l       .debug_str	00000000 
0000186b l       .debug_str	00000000 
00001873 l       .debug_str	00000000 
0000a7a5 l       .debug_str	00000000 
0000af9b l       .debug_str	00000000 
0000187b l       .debug_str	00000000 
00001977 l       .debug_str	00000000 
00001a7b l       .debug_str	00000000 
00001a89 l       .debug_str	00000000 
00001a94 l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00001ac1 l       .debug_str	00000000 
00001a9e l       .debug_str	00000000 
00001acc l       .debug_str	00000000 
00001b47 l       .debug_str	00000000 
00001bca l       .debug_str	00000000 
00001bd8 l       .debug_str	00000000 
00001c37 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00001cb4 l       .debug_str	00000000 
00001cc4 l       .debug_str	00000000 
00058faf l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00001cd3 l       .debug_str	00000000 
0001d878 l       .debug_str	00000000 
00001cd9 l       .debug_str	00000000 
00001cdf l       .debug_str	00000000 
00001ce5 l       .debug_str	00000000 
00001cf1 l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
00001cf9 l       .debug_str	00000000 
00001d01 l       .debug_str	00000000 
00001d07 l       .debug_str	00000000 
00001d4d l       .debug_str	00000000 
00001d2a l       .debug_str	00000000 
00001d5d l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00058b3c l       .debug_str	00000000 
00001de5 l       .debug_str	00000000 
00001deb l       .debug_str	00000000 
00001df1 l       .debug_str	00000000 
00001e1a l       .debug_str	00000000 
00001df7 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e6e l       .debug_str	00000000 
00058a25 l       .debug_str	00000000 
00001eb8 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001ec4 l       .debug_str	00000000 
00001eed l       .debug_str	00000000 
00001eca l       .debug_str	00000000 
00001eff l       .debug_str	00000000 
00001f41 l       .debug_str	00000000 
00057ee9 l       .debug_str	00000000 
00001f8b l       .debug_str	00000000 
00001f91 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
00001f9d l       .debug_str	00000000 
00001fc6 l       .debug_str	00000000 
00001fa3 l       .debug_str	00000000 
00001fd7 l       .debug_str	00000000 
00002018 l       .debug_str	00000000 
00002061 l       .debug_str	00000000 
00002066 l       .debug_str	00000000 
00058d73 l       .debug_str	00000000 
0000206b l       .debug_str	00000000 
00002071 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000020a0 l       .debug_str	00000000 
0000207d l       .debug_str	00000000 
000020b1 l       .debug_str	00000000 
000020f2 l       .debug_str	00000000 
00057fa1 l       .debug_str	00000000 
0000213b l       .debug_str	00000000 
00002167 l       .debug_str	00000000 
00002144 l       .debug_str	00000000 
00002178 l       .debug_str	00000000 
000021b9 l       .debug_str	00000000 
00002202 l       .debug_str	00000000 
00058f47 l       .debug_str	00000000 
00002207 l       .debug_str	00000000 
00002210 l       .debug_str	00000000 
00002217 l       .debug_str	00000000 
00002242 l       .debug_str	00000000 
0000221f l       .debug_str	00000000 
00002254 l       .debug_str	00000000 
00002296 l       .debug_str	00000000 
00058c0f l       .debug_str	00000000 
000022e0 l       .debug_str	00000000 
000022e6 l       .debug_str	00000000 
000022ec l       .debug_str	00000000 
000022f2 l       .debug_str	00000000 
000022f8 l       .debug_str	00000000 
00002300 l       .debug_str	00000000 
0000230e l       .debug_str	00000000 
0000231d l       .debug_str	00000000 
0000232e l       .debug_str	00000000 
00002339 l       .debug_str	00000000 
00002344 l       .debug_str	00000000 
0000234f l       .debug_str	00000000 
00002356 l       .debug_str	00000000 
0000239c l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
000023f0 l       .debug_str	00000000 
000580a4 l       .debug_str	00000000 
0000243a l       .debug_str	00000000 
00002467 l       .debug_str	00000000 
00002444 l       .debug_str	00000000 
00002479 l       .debug_str	00000000 
000024bb l       .debug_str	00000000 
00002505 l       .debug_str	00000000 
0000250a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
00002514 l       .debug_str	00000000 
00002549 l       .debug_str	00000000 
0000258b l       .debug_str	00000000 
000025d5 l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
00002654 l       .debug_str	00000000 
000025e9 l       .debug_str	00000000 
000025f9 l       .debug_str	00000000 
00002602 l       .debug_str	00000000 
0000260d l       .debug_str	00000000 
0000261c l       .debug_str	00000000 
00002631 l       .debug_str	00000000 
00002662 l       .debug_str	00000000 
000026ff l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027af l       .debug_str	00000000 
000027b8 l       .debug_str	00000000 
000027fc l       .debug_str	00000000 
000027d9 l       .debug_str	00000000 
0000280f l       .debug_str	00000000 
00002892 l       .debug_str	00000000 
0000291d l       .debug_str	00000000 
00002939 l       .debug_str	00000000 
00002985 l       .debug_str	00000000 
000029d9 l       .debug_str	00000000 
000029f6 l       .debug_str	00000000 
00002a0a l       .debug_str	00000000 
00002a56 l       .debug_str	00000000 
00002aaa l       .debug_str	00000000 
00002ac0 l       .debug_str	00000000 
00002ad4 l       .debug_str	00000000 
00002b1b l       .debug_str	00000000 
00002b6a l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002b73 l       .debug_str	00000000 
00002ba4 l       .debug_str	00000000 
00002baa l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
00002bb9 l       .debug_str	00000000 
0000351e l       .debug_str	00000000 
00002bc1 l       .debug_str	00000000 
00002bc9 l       .debug_str	00000000 
0002e542 l       .debug_str	00000000 
00002bd8 l       .debug_str	00000000 
00002be3 l       .debug_str	00000000 
00002bee l       .debug_str	00000000 
00002bff l       .debug_str	00000000 
00002c05 l       .debug_str	00000000 
00002c0d l       .debug_str	00000000 
00002c14 l       .debug_str	00000000 
00002c1e l       .debug_str	00000000 
00002c26 l       .debug_str	00000000 
00002c2e l       .debug_str	00000000 
00002c50 l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002c67 l       .debug_str	00000000 
00002c6f l       .debug_str	00000000 
00002c78 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00002c83 l       .debug_str	00000000 
00002c8e l       .debug_str	00000000 
00002c99 l       .debug_str	00000000 
00002ca9 l       .debug_str	00000000 
00058015 l       .debug_str	00000000 
0000393f l       .debug_str	00000000 
00002cb3 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002d2b l       .debug_str	00000000 
00002d32 l       .debug_str	00000000 
00002d3a l       .debug_str	00000000 
00003958 l       .debug_str	00000000 
00002d51 l       .debug_str	00000000 
00002d61 l       .debug_str	00000000 
00002d70 l       .debug_str	00000000 
00002d78 l       .debug_str	00000000 
00002d7f l       .debug_str	00000000 
00002d87 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002da5 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
00002ded l       .debug_str	00000000 
00002df6 l       .debug_str	00000000 
00002e53 l       .debug_str	00000000 
00002eb8 l       .debug_str	00000000 
00002ec2 l       .debug_str	00000000 
00002ed2 l       .debug_str	00000000 
00002ee7 l       .debug_str	00000000 
00002eef l       .debug_str	00000000 
00002f53 l       .debug_str	00000000 
00002fbf l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fce l       .debug_str	00000000 
0000300f l       .debug_str	00000000 
00002fec l       .debug_str	00000000 
0000301f l       .debug_str	00000000 
00003034 l       .debug_str	00000000 
00003047 l       .debug_str	00000000 
0000305c l       .debug_str	00000000 
00003063 l       .debug_str	00000000 
00003078 l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
00055115 l       .debug_str	00000000 
0000a7b2 l       .debug_str	00000000 
0000a86a l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
0000a8ce l       .debug_str	00000000 
0000a904 l       .debug_str	00000000 
0000a91d l       .debug_str	00000000 
0000a957 l       .debug_str	00000000 
0000a974 l       .debug_str	00000000 
0000a9af l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
0000a9cc l       .debug_str	00000000 
0000a9d6 l       .debug_str	00000000 
0000a9fc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
00059e49 l       .debug_str	00000000 
0000ab36 l       .debug_str	00000000 
0000ab72 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00000c78 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000aaec l       .debug_str	00000000 
0000ab2d l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
00002bc1 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00055611 l       .debug_str	00000000 
00003a7b l       .debug_str	00000000 
0000af50 l       .debug_str	00000000 
0000af64 l       .debug_str	00000000 
0001436f l       .debug_str	00000000 
0000af6d l       .debug_str	00000000 
0000af78 l       .debug_str	00000000 
0000af83 l       .debug_str	00000000 
0000af8c l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
0000b01f l       .debug_str	00000000 
0000b029 l       .debug_str	00000000 
0000b02f l       .debug_str	00000000 
0000aa69 l       .debug_str	00000000 
0000b03a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
00009d95 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001298 l       .debug_str	00000000 
0000129c l       .debug_str	00000000 
000012a7 l       .debug_str	00000000 
000012e6 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00001174 l       .debug_str	00000000 
0000abb1 l       .debug_str	00000000 
0000abf9 l       .debug_str	00000000 
0000a499 l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
0000ac18 l       .debug_str	00000000 
0000ac53 l       .debug_str	00000000 
0000ac78 l       .debug_str	00000000 
0000ac9f l       .debug_str	00000000 
0000acff l       .debug_str	00000000 
0000ad08 l       .debug_str	00000000 
0000ad73 l       .debug_str	00000000 
0000ad83 l       .debug_str	00000000 
0000adef l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000553b5 l       .debug_str	00000000 
0000309b l       .debug_str	00000000 
000012b2 l       .debug_str	00000000 
0000161e l       .debug_str	00000000 
000012bb l       .debug_str	00000000 
0003cd4c l       .debug_str	00000000 
000012c2 l       .debug_str	00000000 
000012ce l       .debug_str	00000000 
000012d6 l       .debug_str	00000000 
000012ed l       .debug_str	00000000 
00001347 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013b4 l       .debug_str	00000000 
000013fb l       .debug_str	00000000 
0000144a l       .debug_str	00000000 
00001454 l       .debug_str	00000000 
00001491 l       .debug_str	00000000 
000014d6 l       .debug_str	00000000 
000014df l       .debug_str	00000000 
000014ef l       .debug_str	00000000 
000014f7 l       .debug_str	00000000 
0000154c l       .debug_str	00000000 
000015a9 l       .debug_str	00000000 
000015b5 l       .debug_str	00000000 
000015be l       .debug_str	00000000 
000015ca l       .debug_str	00000000 
000015d6 l       .debug_str	00000000 
000015df l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
000015e7 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000015ef l       .debug_str	00000000 
0000161d l       .debug_str	00000000 
00001604 l       .debug_str	00000000 
00001624 l       .debug_str	00000000 
0000162b l       .debug_str	00000000 
00001633 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
0000163d l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00059c8b l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
000546c8 l       .debug_str	00000000 
00001646 l       .debug_str	00000000 
00001673 l       .debug_str	00000000 
000015af l       .debug_str	00000000 
0005aac6 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
000016a8 l       .debug_str	00000000 
000016d1 l       .debug_str	00000000 
0000172f l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001795 l       .debug_str	00000000 
000016c1 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
000017b3 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000017c9 l       .debug_str	00000000 
000017ef l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001805 l       .debug_str	00000000 
00004f9a l       .debug_str	00000000 
000017ce l       .debug_str	00000000 
0000181b l       .debug_str	00000000 
00049d58 l       .debug_str	00000000 
00001832 l       .debug_str	00000000 
0000183a l       .debug_str	00000000 
00001843 l       .debug_str	00000000 
00002c47 l       .debug_str	00000000 
0000184c l       .debug_str	00000000 
0000b3da l       .debug_str	00000000 
0005a779 l       .debug_str	00000000 
00001854 l       .debug_str	00000000 
00001860 l       .debug_str	00000000 
0000186b l       .debug_str	00000000 
00001873 l       .debug_str	00000000 
0000af9b l       .debug_str	00000000 
0000187b l       .debug_str	00000000 
00001977 l       .debug_str	00000000 
00001a7b l       .debug_str	00000000 
00001a89 l       .debug_str	00000000 
00001a94 l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00001ac1 l       .debug_str	00000000 
00001a9e l       .debug_str	00000000 
00001acc l       .debug_str	00000000 
00001b47 l       .debug_str	00000000 
00001bca l       .debug_str	00000000 
00001bd8 l       .debug_str	00000000 
00001c37 l       .debug_str	00000000 
00001c9e l       .debug_str	00000000 
00001cb4 l       .debug_str	00000000 
00001cc4 l       .debug_str	00000000 
00058faf l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00001cd3 l       .debug_str	00000000 
0001d878 l       .debug_str	00000000 
00001cd9 l       .debug_str	00000000 
00001cdf l       .debug_str	00000000 
00001ce5 l       .debug_str	00000000 
00001cf1 l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
00001cf9 l       .debug_str	00000000 
00001d01 l       .debug_str	00000000 
00001d07 l       .debug_str	00000000 
00001d4d l       .debug_str	00000000 
00001d2a l       .debug_str	00000000 
00001d5d l       .debug_str	00000000 
00001d9d l       .debug_str	00000000 
00058b3c l       .debug_str	00000000 
00001de5 l       .debug_str	00000000 
00001deb l       .debug_str	00000000 
00001df1 l       .debug_str	00000000 
00001e1a l       .debug_str	00000000 
00001df7 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e6e l       .debug_str	00000000 
00058a25 l       .debug_str	00000000 
00001eb8 l       .debug_str	00000000 
00001ebe l       .debug_str	00000000 
00001ec4 l       .debug_str	00000000 
00001eed l       .debug_str	00000000 
00001eca l       .debug_str	00000000 
00001eff l       .debug_str	00000000 
00001f41 l       .debug_str	00000000 
00057ee9 l       .debug_str	00000000 
00001f8b l       .debug_str	00000000 
00001f91 l       .debug_str	00000000 
00001f97 l       .debug_str	00000000 
00001f9d l       .debug_str	00000000 
00001fc6 l       .debug_str	00000000 
00001fa3 l       .debug_str	00000000 
00001fd7 l       .debug_str	00000000 
00002018 l       .debug_str	00000000 
00002061 l       .debug_str	00000000 
00002066 l       .debug_str	00000000 
00058d73 l       .debug_str	00000000 
0000206b l       .debug_str	00000000 
00002071 l       .debug_str	00000000 
00002077 l       .debug_str	00000000 
000020a0 l       .debug_str	00000000 
0000207d l       .debug_str	00000000 
000020b1 l       .debug_str	00000000 
000020f2 l       .debug_str	00000000 
00057fa1 l       .debug_str	00000000 
0000213b l       .debug_str	00000000 
00002167 l       .debug_str	00000000 
00002144 l       .debug_str	00000000 
00002178 l       .debug_str	00000000 
000021b9 l       .debug_str	00000000 
00002202 l       .debug_str	00000000 
00058f47 l       .debug_str	00000000 
00002207 l       .debug_str	00000000 
00002210 l       .debug_str	00000000 
00002217 l       .debug_str	00000000 
00002242 l       .debug_str	00000000 
0000221f l       .debug_str	00000000 
00002254 l       .debug_str	00000000 
00002296 l       .debug_str	00000000 
00058c0f l       .debug_str	00000000 
000022e0 l       .debug_str	00000000 
000022e6 l       .debug_str	00000000 
000022ec l       .debug_str	00000000 
000022f2 l       .debug_str	00000000 
000022f8 l       .debug_str	00000000 
00002300 l       .debug_str	00000000 
0000230e l       .debug_str	00000000 
0000231d l       .debug_str	00000000 
0000232e l       .debug_str	00000000 
00002339 l       .debug_str	00000000 
00002344 l       .debug_str	00000000 
0000234f l       .debug_str	00000000 
00002356 l       .debug_str	00000000 
0000239c l       .debug_str	00000000 
00002379 l       .debug_str	00000000 
000023ae l       .debug_str	00000000 
000023f0 l       .debug_str	00000000 
000580a4 l       .debug_str	00000000 
0000243a l       .debug_str	00000000 
00002467 l       .debug_str	00000000 
00002444 l       .debug_str	00000000 
00002479 l       .debug_str	00000000 
000024bb l       .debug_str	00000000 
00002505 l       .debug_str	00000000 
0000250a l       .debug_str	00000000 
00002537 l       .debug_str	00000000 
00002514 l       .debug_str	00000000 
00002549 l       .debug_str	00000000 
0000258b l       .debug_str	00000000 
000025d5 l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
00002654 l       .debug_str	00000000 
000025e9 l       .debug_str	00000000 
000025f9 l       .debug_str	00000000 
00002602 l       .debug_str	00000000 
0000260d l       .debug_str	00000000 
0000261c l       .debug_str	00000000 
00002631 l       .debug_str	00000000 
00002662 l       .debug_str	00000000 
000026ff l       .debug_str	00000000 
000027a4 l       .debug_str	00000000 
000027af l       .debug_str	00000000 
000027b8 l       .debug_str	00000000 
000027fc l       .debug_str	00000000 
000027d9 l       .debug_str	00000000 
0000280f l       .debug_str	00000000 
00002892 l       .debug_str	00000000 
0000291d l       .debug_str	00000000 
00002939 l       .debug_str	00000000 
00002985 l       .debug_str	00000000 
000029d9 l       .debug_str	00000000 
000029f6 l       .debug_str	00000000 
00002a0a l       .debug_str	00000000 
00002a56 l       .debug_str	00000000 
00002aaa l       .debug_str	00000000 
00002ac0 l       .debug_str	00000000 
00002ad4 l       .debug_str	00000000 
00002b1b l       .debug_str	00000000 
00002b6a l       .debug_str	00000000 
00002b96 l       .debug_str	00000000 
00002b73 l       .debug_str	00000000 
00002ba4 l       .debug_str	00000000 
00002baa l       .debug_str	00000000 
00002bb2 l       .debug_str	00000000 
00002bb9 l       .debug_str	00000000 
0000351e l       .debug_str	00000000 
00002bc9 l       .debug_str	00000000 
0002e542 l       .debug_str	00000000 
00002bd8 l       .debug_str	00000000 
00003550 l       .debug_str	00000000 
00002be3 l       .debug_str	00000000 
00002bee l       .debug_str	00000000 
00002bff l       .debug_str	00000000 
00002c05 l       .debug_str	00000000 
00002c0d l       .debug_str	00000000 
00002c14 l       .debug_str	00000000 
00002c1e l       .debug_str	00000000 
00002c26 l       .debug_str	00000000 
00002c2e l       .debug_str	00000000 
00002c50 l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002c67 l       .debug_str	00000000 
00002c6f l       .debug_str	00000000 
00002c78 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
00002c83 l       .debug_str	00000000 
00002c8e l       .debug_str	00000000 
00002c99 l       .debug_str	00000000 
00002ca9 l       .debug_str	00000000 
00058015 l       .debug_str	00000000 
0000393f l       .debug_str	00000000 
00002cb3 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002d2b l       .debug_str	00000000 
00002d32 l       .debug_str	00000000 
00002d3a l       .debug_str	00000000 
00003958 l       .debug_str	00000000 
00002d51 l       .debug_str	00000000 
00002d61 l       .debug_str	00000000 
00002d70 l       .debug_str	00000000 
00002d78 l       .debug_str	00000000 
00002d7f l       .debug_str	00000000 
00002d87 l       .debug_str	00000000 
00002dc8 l       .debug_str	00000000 
00002da5 l       .debug_str	00000000 
00002dd8 l       .debug_str	00000000 
00002ded l       .debug_str	00000000 
00002df6 l       .debug_str	00000000 
00002e53 l       .debug_str	00000000 
00002eb8 l       .debug_str	00000000 
00002ec2 l       .debug_str	00000000 
00002ed2 l       .debug_str	00000000 
00002ee7 l       .debug_str	00000000 
00002eef l       .debug_str	00000000 
00002f53 l       .debug_str	00000000 
00002fbf l       .debug_str	00000000 
00002fc6 l       .debug_str	00000000 
00002fce l       .debug_str	00000000 
0000300f l       .debug_str	00000000 
00002fec l       .debug_str	00000000 
0000301f l       .debug_str	00000000 
00003034 l       .debug_str	00000000 
00003047 l       .debug_str	00000000 
0000305c l       .debug_str	00000000 
00003063 l       .debug_str	00000000 
00003078 l       .debug_str	00000000 
0000aa6a l       .debug_str	00000000 
0000ae02 l       .debug_str	00000000 
0000ae65 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
0000aee5 l       .debug_str	00000000 
0000af48 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001164 l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000ca3 l       .debug_str	00000000 
00000e15 l       .debug_str	00000000 
00000e32 l       .debug_str	00000000 
0002ea09 l       .debug_str	00000000 
0000b2df l       .debug_str	00000000 
0000b310 l       .debug_str	00000000 
0000b5a3 l       .debug_str	00000000 
0000b32a l       .debug_str	00000000 
0000b35b l       .debug_str	00000000 
0000b3d9 l       .debug_str	00000000 
0000b38b l       .debug_str	00000000 
0000b3bc l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0000b3c6 l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00009d95 l       .debug_str	00000000 
0000b3cc l       .debug_str	00000000 
0000b3d2 l       .debug_str	00000000 
0000b3d8 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0000b3de l       .debug_str	00000000 
0000b430 l       .debug_str	00000000 
00001164 l       .debug_str	00000000 
0000b483 l       .debug_str	00000000 
0000b4ec l       .debug_str	00000000 
0002e9fd l       .debug_str	00000000 
0000b53f l       .debug_str	00000000 
0000b5a2 l       .debug_str	00000000 
0000b5ce l       .debug_str	00000000 
0000b647 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005a6af l       .debug_str	00000000 
00000e7e l       .debug_str	00000000 
000011de l       .debug_str	00000000 
0000b044 l       .debug_str	00000000 
0000b5c4 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00000d22 l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00000d28 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d3b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d44 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d69 l       .debug_str	00000000 
00000d7a l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000db7 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000b053 l       .debug_str	00000000 
0000b09b l       .debug_str	00000000 
0000b0a4 l       .debug_str	00000000 
0000b0ec l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
0000b0f4 l       .debug_str	00000000 
0000acff l       .debug_str	00000000 
0000b13c l       .debug_str	00000000 
0000b184 l       .debug_str	00000000 
0000b3da l       .debug_str	00000000 
0000b18d l       .debug_str	00000000 
0000b1d5 l       .debug_str	00000000 
0000b1de l       .debug_str	00000000 
0000b20f l       .debug_str	00000000 
00016c35 l       .debug_str	00000000 
0000b218 l       .debug_str	00000000 
0000b249 l       .debug_str	00000000 
00001174 l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
0000b253 l       .debug_str	00000000 
0000b284 l       .debug_str	00000000 
00016c49 l       .debug_str	00000000 
0000b2a4 l       .debug_str	00000000 
0000b2d5 l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c70 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00033b92 l       .debug_str	00000000 
00057399 l       .debug_str	00000000 
00000c8e l       .debug_str	00000000 
00000c95 l       .debug_str	00000000 
00000c9b l       .debug_str	00000000 
00000ca9 l       .debug_str	00000000 
00000cce l       .debug_str	00000000 
00000cb4 l       .debug_str	00000000 
00000cd7 l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00055003 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0000b7fa l       .debug_str	00000000 
0000b6f7 l       .debug_str	00000000 
0000b740 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
0000b750 l       .debug_str	00000000 
0000b75c l       .debug_str	00000000 
0000b7a3 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
0000b7af l       .debug_str	00000000 
0000b80a l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
00057387 l       .debug_str	00000000 
000022f0 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005919d l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000b69a l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000b6eb l       .debug_str	00000000 
000090d6 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
0000baca l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
0000bae6 l       .debug_str	00000000 
0000baec l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0001e82b l       .debug_str	00000000 
0000bb09 l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
0002f0ee l       .debug_str	00000000 
00028992 l       .debug_str	00000000 
0000bb23 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
0000bb29 l       .debug_str	00000000 
00016de8 l       .debug_str	00000000 
0000bb33 l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
00016e23 l       .debug_str	00000000 
0001e0ab l       .debug_str	00000000 
0000bb73 l       .debug_str	00000000 
0000115f l       .debug_str	00000000 
00016c3f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b851 l       .debug_str	00000000 
00014456 l       .debug_str	00000000 
0000b868 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000553b5 l       .debug_str	00000000 
0000b875 l       .debug_str	00000000 
0000b879 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0000b883 l       .debug_str	00000000 
0000b88e l       .debug_str	00000000 
0000b898 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
0001b62a l       .debug_str	00000000 
0000b8a1 l       .debug_str	00000000 
0000b8e7 l       .debug_str	00000000 
0000b8ef l       .debug_str	00000000 
00057daa l       .debug_str	00000000 
0000b8fa l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
00002c17 l       .debug_str	00000000 
0001b610 l       .debug_str	00000000 
0000b902 l       .debug_str	00000000 
000551d5 l       .debug_str	00000000 
0001b653 l       .debug_str	00000000 
0005ac85 l       .debug_str	00000000 
0000b906 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
0000b90a l       .debug_str	00000000 
0000118b l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
0005a0c1 l       .debug_str	00000000 
0000b913 l       .debug_str	00000000 
00059719 l       .debug_str	00000000 
0000de28 l       .debug_str	00000000 
0000b916 l       .debug_str	00000000 
0000b956 l       .debug_str	00000000 
0000b965 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
000011d9 l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
000011ec l       .debug_str	00000000 
000011f7 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
0000122d l       .debug_str	00000000 
00001237 l       .debug_str	00000000 
00001242 l       .debug_str	00000000 
0000124d l       .debug_str	00000000 
0000125a l       .debug_str	00000000 
00001266 l       .debug_str	00000000 
00001273 l       .debug_str	00000000 
00001281 l       .debug_str	00000000 
0000128b l       .debug_str	00000000 
0000a05c l       .debug_str	00000000 
0000b9ad l       .debug_str	00000000 
0000b9f4 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
0000ba02 l       .debug_str	00000000 
0000ba46 l       .debug_str	00000000 
0000ba51 l       .debug_str	00000000 
0000ba5a l       .debug_str	00000000 
0000ba62 l       .debug_str	00000000 
00056fc2 l       .debug_str	00000000 
0000deaa l       .debug_str	00000000 
00055611 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0000ba6b l       .debug_str	00000000 
0000ba71 l       .debug_str	00000000 
0000ba7a l       .debug_str	00000000 
0000ba87 l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0003e2cf l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
0000ba8a l       .debug_str	00000000 
0000baa1 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
0000fbfb l       .debug_str	00000000 
0000bab7 l       .debug_str	00000000 
0000babd l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000bac4 l       .debug_str	00000000 
00014367 l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00016cae l       .debug_str	00000000 
0005a542 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
200000e8 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000158 l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0000da96 l       .debug_str	00000000 
0000d9fa l       .debug_str	00000000 
0000da40 l       .debug_str	00000000 
0000dadf l       .debug_str	00000000 
0000db25 l       .debug_str	00000000 
0000deaa l       .debug_str	00000000 
000104e6 l       .debug_str	00000000 
0000db5f l       .debug_str	00000000 
0000dba6 l       .debug_str	00000000 
0000dbf4 l       .debug_str	00000000 
0000dc40 l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000bac4 l       .debug_str	00000000 
0000baca l       .debug_str	00000000 
00014367 l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
00016cae l       .debug_str	00000000 
0005a542 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
0000bae6 l       .debug_str	00000000 
0000baec l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
0001e82b l       .debug_str	00000000 
0000bb09 l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
00028992 l       .debug_str	00000000 
0000bb23 l       .debug_str	00000000 
0000bb29 l       .debug_str	00000000 
00016de8 l       .debug_str	00000000 
0000bb33 l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
00016e23 l       .debug_str	00000000 
0001e0ab l       .debug_str	00000000 
0000dc80 l       .debug_str	00000000 
0000dd2c l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0000ddfe l       .debug_str	00000000 
0000de17 l       .debug_str	00000000 
00055611 l       .debug_str	00000000 
0000de67 l       .debug_str	00000000 
00012b7f l       .debug_str	00000000 
0000de71 l       .debug_str	00000000 
0000de7b l       .debug_str	00000000 
0003b476 l       .debug_str	00000000 
00017ee9 l       .debug_str	00000000 
00037fd9 l       .debug_str	00000000 
0000de7e l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
00014948 l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00011511 l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
00020d7d l       .debug_str	00000000 
0005b9cc l       .debug_str	00000000 
00001199 l       .debug_str	00000000 
0000bb10 l       .debug_str	00000000 
0001b12c l       .debug_str	00000000 
0000de85 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
0001e870 l       .debug_str	00000000 
0000de8c l       .debug_str	00000000 
00057dab l       .debug_str	00000000 
0000b903 l       .debug_str	00000000 
00014456 l       .debug_str	00000000 
00056fc2 l       .debug_str	00000000 
0000de98 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0000deb0 l       .debug_str	00000000 
0000debc l       .debug_str	00000000 
0000dec8 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000ded5 l       .debug_str	00000000 
0005bf39 l       .debug_str	00000000 
0001e14a l       .debug_str	00000000 
0000dee2 l       .debug_str	00000000 
0000deeb l       .debug_str	00000000 
0000def9 l       .debug_str	00000000 
00016d5f l       .debug_str	00000000 
0000df11 l       .debug_str	00000000 
0000df46 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b8ef l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0000bb7a l       .debug_str	00000000 
0000bb83 l       .debug_str	00000000 
0000bb8d l       .debug_str	00000000 
0000bb9d l       .debug_str	00000000 
0000de0b l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
000011d9 l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
000011ec l       .debug_str	00000000 
000011f7 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
0000122d l       .debug_str	00000000 
00001237 l       .debug_str	00000000 
00001242 l       .debug_str	00000000 
0000124d l       .debug_str	00000000 
0000125a l       .debug_str	00000000 
00001266 l       .debug_str	00000000 
00001273 l       .debug_str	00000000 
00001281 l       .debug_str	00000000 
0000128b l       .debug_str	00000000 
0000a05c l       .debug_str	00000000 
0000bbae l       .debug_str	00000000 
0000bbba l       .debug_str	00000000 
0000bbbe l       .debug_str	00000000 
0000bbc6 l       .debug_str	00000000 
0000bbcc l       .debug_str	00000000 
0000bbd2 l       .debug_str	00000000 
0000bbd8 l       .debug_str	00000000 
0000bbdf l       .debug_str	00000000 
0000bbe5 l       .debug_str	00000000 
0000bbeb l       .debug_str	00000000 
0000bbf2 l       .debug_str	00000000 
0000bbf8 l       .debug_str	00000000 
0000bc00 l       .debug_str	00000000 
0000bc07 l       .debug_str	00000000 
0000bc0d l       .debug_str	00000000 
0000bc13 l       .debug_str	00000000 
0000bc19 l       .debug_str	00000000 
0000bc1f l       .debug_str	00000000 
0000bc25 l       .debug_str	00000000 
0000bc2c l       .debug_str	00000000 
0000bc33 l       .debug_str	00000000 
0000bc3b l       .debug_str	00000000 
0000bc43 l       .debug_str	00000000 
0000bc4b l       .debug_str	00000000 
0000bc52 l       .debug_str	00000000 
0000bc5a l       .debug_str	00000000 
0000bc61 l       .debug_str	00000000 
0000bc68 l       .debug_str	00000000 
0000bc6f l       .debug_str	00000000 
0000bc76 l       .debug_str	00000000 
0000bc7d l       .debug_str	00000000 
0000bc84 l       .debug_str	00000000 
0000bc8a l       .debug_str	00000000 
0000bc90 l       .debug_str	00000000 
0000bc96 l       .debug_str	00000000 
0000bc9c l       .debug_str	00000000 
0000bca3 l       .debug_str	00000000 
0000bcab l       .debug_str	00000000 
0000dfd4 l       .debug_str	00000000 
0000bcb3 l       .debug_str	00000000 
0005961e l       .debug_str	00000000 
0000bcbe l       .debug_str	00000000 
00057daa l       .debug_str	00000000 
0000b875 l       .debug_str	00000000 
0000b8fa l       .debug_str	00000000 
00002c17 l       .debug_str	00000000 
0001b610 l       .debug_str	00000000 
0000b902 l       .debug_str	00000000 
000551d5 l       .debug_str	00000000 
0001b653 l       .debug_str	00000000 
0005ac85 l       .debug_str	00000000 
0000b906 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
0000b90a l       .debug_str	00000000 
0000118b l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
0005a0c1 l       .debug_str	00000000 
0000b913 l       .debug_str	00000000 
00059719 l       .debug_str	00000000 
0000de28 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000bcca l       .debug_str	00000000 
0000bcd5 l       .debug_str	00000000 
0000bcda l       .debug_str	00000000 
0000bd16 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000e099 l       .debug_str	00000000 
0000bd35 l       .debug_str	00000000 
0000bd83 l       .debug_str	00000000 
0000bdc4 l       .debug_str	00000000 
0000be30 l       .debug_str	00000000 
0000be72 l       .debug_str	00000000 
0000bede l       .debug_str	00000000 
0000501a l       .debug_str	00000000 
0000ba76 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0005a911 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
00005042 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00005050 l       .debug_str	00000000 
00005058 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
0000bf4a l       .debug_str	00000000 
0000bf67 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
0000bfad l       .debug_str	00000000 
0000bfbe l       .debug_str	00000000 
0000c02e l       .debug_str	00000000 
0000c0c8 l       .debug_str	00000000 
0000c18b l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
00005093 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00005099 l       .debug_str	00000000 
0000509c l       .debug_str	00000000 
000050c5 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
000050fb l       .debug_str	00000000 
0000c38f l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000c43c l       .debug_str	00000000 
000062dd l       .debug_str	00000000 
0000c490 l       .debug_str	00000000 
0000c507 l       .debug_str	00000000 
0000c58b l       .debug_str	00000000 
0000c606 l       .debug_str	00000000 
0000c6a4 l       .debug_str	00000000 
0000c74f l       .debug_str	00000000 
0000c7f1 l       .debug_str	00000000 
0000c8b6 l       .debug_str	00000000 
0000c988 l       .debug_str	00000000 
0000ca51 l       .debug_str	00000000 
0000cb3d l       .debug_str	00000000 
0000cc36 l       .debug_str	00000000 
0000cd26 l       .debug_str	00000000 
0000ce39 l       .debug_str	00000000 
0000cf59 l       .debug_str	00000000 
0000d070 l       .debug_str	00000000 
0000d1a9 l       .debug_str	00000000 
0000d2ff l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
00024db2 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00020c39 l       .debug_str	00000000 
0002f0ee l       .debug_str	00000000 
0000d454 l       .debug_str	00000000 
0000d4a2 l       .debug_str	00000000 
0000d622 l       .debug_str	00000000 
0000d670 l       .debug_str	00000000 
0000d6b1 l       .debug_str	00000000 
0000d6ff l       .debug_str	00000000 
0000d740 l       .debug_str	00000000 
0000d790 l       .debug_str	00000000 
0000d912 l       .debug_str	00000000 
0000d963 l       .debug_str	00000000 
0000d9a7 l       .debug_str	00000000 
0001a820 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0000bcbe l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000e099 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0000dfba l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b8ef l       .debug_str	00000000 
0000bbae l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0000bbba l       .debug_str	00000000 
0000bbbe l       .debug_str	00000000 
0000bbc6 l       .debug_str	00000000 
0000bbcc l       .debug_str	00000000 
0000bbd2 l       .debug_str	00000000 
0000bbd8 l       .debug_str	00000000 
0000bbdf l       .debug_str	00000000 
0000bbe5 l       .debug_str	00000000 
0000bbeb l       .debug_str	00000000 
0000bbf2 l       .debug_str	00000000 
0000bbf8 l       .debug_str	00000000 
0000bc00 l       .debug_str	00000000 
0000bc07 l       .debug_str	00000000 
0000bc0d l       .debug_str	00000000 
0000bc13 l       .debug_str	00000000 
0000bc19 l       .debug_str	00000000 
0000bc1f l       .debug_str	00000000 
0000bc25 l       .debug_str	00000000 
0000bc2c l       .debug_str	00000000 
0000bc33 l       .debug_str	00000000 
0000bc3b l       .debug_str	00000000 
0000bc43 l       .debug_str	00000000 
0000bc4b l       .debug_str	00000000 
0000bc52 l       .debug_str	00000000 
0000bc5a l       .debug_str	00000000 
0000bc61 l       .debug_str	00000000 
0000bc68 l       .debug_str	00000000 
0000bc6f l       .debug_str	00000000 
0000bc76 l       .debug_str	00000000 
0000bc7d l       .debug_str	00000000 
0000bc84 l       .debug_str	00000000 
0000bc8a l       .debug_str	00000000 
0000bc90 l       .debug_str	00000000 
0000bc96 l       .debug_str	00000000 
0000bc9c l       .debug_str	00000000 
0000bca3 l       .debug_str	00000000 
0000bcab l       .debug_str	00000000 
0000dfd4 l       .debug_str	00000000 
0000bcb3 l       .debug_str	00000000 
0005961e l       .debug_str	00000000 
0000bcd5 l       .debug_str	00000000 
0000df52 l       .debug_str	00000000 
0000df8e l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0000e02f l       .debug_str	00000000 
0000e024 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
0000e06d l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005919d l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000dfe0 l       .debug_str	00000000 
0000a344 l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0000ead8 l       .debug_str	00000000 
0000f0fc l       .debug_str	00000000 
0000f24f l       .debug_str	00000000 
0000f27f l       .debug_str	00000000 
0000ba71 l       .debug_str	00000000 
0000ba7a l       .debug_str	00000000 
0000ba87 l       .debug_str	00000000 
0003e2cf l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
0000ba8a l       .debug_str	00000000 
0000baa1 l       .debug_str	00000000 
0000fbfb l       .debug_str	00000000 
0000fbde l       .debug_str	00000000 
0000f3a6 l       .debug_str	00000000 
0000f3d6 l       .debug_str	00000000 
0000fc82 l       .debug_str	00000000 
0000fc24 l       .debug_str	00000000 
0000f418 l       .debug_str	00000000 
0000f448 l       .debug_str	00000000 
0000f497 l       .debug_str	00000000 
0000f4c7 l       .debug_str	00000000 
0000f4d9 l       .debug_str	00000000 
0000f509 l       .debug_str	00000000 
0000f542 l       .debug_str	00000000 
0000f54b l       .debug_str	00000000 
0000f578 l       .debug_str	00000000 
0000f5bb l       .debug_str	00000000 
0000f5d1 l       .debug_str	00000000 
0000f715 l       .debug_str	00000000 
0000f7b1 l       .debug_str	00000000 
0000f87b l       .debug_str	00000000 
0000f894 l       .debug_str	00000000 
0000f973 l       .debug_str	00000000 
0000fabc l       .debug_str	00000000 
0000fbd9 l       .debug_str	00000000 
0000fc11 l       .debug_str	00000000 
0000fc56 l       .debug_str	00000000 
0000fc5e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d3b l       .debug_str	00000000 
0000e073 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000e099 l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
0000e07a l       .debug_str	00000000 
0000e07f l       .debug_str	00000000 
0000bcd5 l       .debug_str	00000000 
0000e0a4 l       .debug_str	00000000 
0000e0ab l       .debug_str	00000000 
0000e0b0 l       .debug_str	00000000 
0000e0eb l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
0000e122 l       .debug_str	00000000 
0000e152 l       .debug_str	00000000 
0000b851 l       .debug_str	00000000 
0000e165 l       .debug_str	00000000 
0000e16b l       .debug_str	00000000 
0000e172 l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0000de7e l       .debug_str	00000000 
0000501a l       .debug_str	00000000 
0000ba76 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0005a911 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
00005042 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00005050 l       .debug_str	00000000 
00005058 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
0000bf4a l       .debug_str	00000000 
0000bf67 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
0000bfad l       .debug_str	00000000 
0000bfbe l       .debug_str	00000000 
0000c02e l       .debug_str	00000000 
0000c0c8 l       .debug_str	00000000 
0000c18b l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
00005093 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00005099 l       .debug_str	00000000 
0000509c l       .debug_str	00000000 
000050c5 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
000050fb l       .debug_str	00000000 
0000c38f l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000c43c l       .debug_str	00000000 
000062dd l       .debug_str	00000000 
0000c490 l       .debug_str	00000000 
0000c507 l       .debug_str	00000000 
0000c58b l       .debug_str	00000000 
0000c606 l       .debug_str	00000000 
0000c6a4 l       .debug_str	00000000 
0000c74f l       .debug_str	00000000 
0000c7f1 l       .debug_str	00000000 
0000c8b6 l       .debug_str	00000000 
0000c988 l       .debug_str	00000000 
0000ca51 l       .debug_str	00000000 
0000cb3d l       .debug_str	00000000 
0000cc36 l       .debug_str	00000000 
0000e17a l       .debug_str	00000000 
0000e28c l       .debug_str	00000000 
0000e3bb l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
00024c7a l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00020b1c l       .debug_str	00000000 
0000f56f l       .debug_str	00000000 
0000e4e9 l       .debug_str	00000000 
0000e519 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
0000f58b l       .debug_str	00000000 
0000e550 l       .debug_str	00000000 
0000e580 l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00013d6f l       .debug_str	00000000 
0000e5cd l       .debug_str	00000000 
0000e5fd l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0000cd26 l       .debug_str	00000000 
0000ce39 l       .debug_str	00000000 
0000cf59 l       .debug_str	00000000 
0000d070 l       .debug_str	00000000 
0000d1a9 l       .debug_str	00000000 
0000d2ff l       .debug_str	00000000 
00024db2 l       .debug_str	00000000 
00020c39 l       .debug_str	00000000 
0000e61d l       .debug_str	00000000 
0000e64d l       .debug_str	00000000 
0000df4b l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0000e7a6 l       .debug_str	00000000 
0000e7b0 l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
00016cae l       .debug_str	00000000 
0000e7b9 l       .debug_str	00000000 
0000bae6 l       .debug_str	00000000 
0000baec l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
0001e82b l       .debug_str	00000000 
0000bb09 l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
0002f0ee l       .debug_str	00000000 
00028992 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
0002891b l       .debug_str	00000000 
0000e7c6 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
000270b0 l       .debug_str	00000000 
0000e7d2 l       .debug_str	00000000 
0000e802 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
0000e8ad l       .debug_str	00000000 
0000e8b3 l       .debug_str	00000000 
0000e8bc l       .debug_str	00000000 
00057a23 l       .debug_str	00000000 
00027157 l       .debug_str	00000000 
0000e8c6 l       .debug_str	00000000 
0000e8f6 l       .debug_str	00000000 
0000e9ca l       .debug_str	00000000 
00059261 l       .debug_str	00000000 
0001d87d l       .debug_str	00000000 
0001ea42 l       .debug_str	00000000 
0000e9d0 l       .debug_str	00000000 
0000ea00 l       .debug_str	00000000 
0000ea23 l       .debug_str	00000000 
0000ea50 l       .debug_str	00000000 
0000ea71 l       .debug_str	00000000 
0000eb78 l       .debug_str	00000000 
000062e0 l       .debug_str	00000000 
00006330 l       .debug_str	00000000 
0000638d l       .debug_str	00000000 
0000ec52 l       .debug_str	00000000 
0000ecc9 l       .debug_str	00000000 
0000ed4d l       .debug_str	00000000 
0000edc8 l       .debug_str	00000000 
0000ee66 l       .debug_str	00000000 
0000ef11 l       .debug_str	00000000 
0002218c l       .debug_str	00000000 
000218c3 l       .debug_str	00000000 
00021bfa l       .debug_str	00000000 
00024b80 l       .debug_str	00000000 
000207e4 l       .debug_str	00000000 
0000efb3 l       .debug_str	00000000 
0000efe3 l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
00020d7d l       .debug_str	00000000 
0000f0cc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5am717uu9pfm1ga7
00000ff1 l       .debug_str	00000000 
0000a416 l       .debug_str	00000000 
00011667 l       .debug_str	00000000 
00028118 l       .debug_str	00000000 
0000fd51 l       .debug_str	00000000 
0000fd90 l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000ded5 l       .debug_str	00000000 
00003a7b l       .debug_str	00000000 
00028108 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00000c78 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000aaec l       .debug_str	00000000 
0000ab2d l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
0000fc8d l       .debug_str	00000000 
0000fcc3 l       .debug_str	00000000 
0000fcd7 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
0000fd13 l       .debug_str	00000000 
000546f4 l       .debug_str	00000000 
00011511 l       .debug_str	00000000 
0000a068 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
0000a40d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002fde8 l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
00011350 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000b3da l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000ff0c l       .debug_str	00000000 
0000ff18 l       .debug_str	00000000 
0000ffd9 l       .debug_str	00000000 
0001e810 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0000dfba l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000fdfa l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b8ef l       .debug_str	00000000 
0000bbae l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0000bbba l       .debug_str	00000000 
0000bbbe l       .debug_str	00000000 
0000bbc6 l       .debug_str	00000000 
0000bbcc l       .debug_str	00000000 
0000bbd2 l       .debug_str	00000000 
0000bbd8 l       .debug_str	00000000 
0000bbdf l       .debug_str	00000000 
0000bbe5 l       .debug_str	00000000 
0000bbeb l       .debug_str	00000000 
0000bbf2 l       .debug_str	00000000 
0000bbf8 l       .debug_str	00000000 
0000bc00 l       .debug_str	00000000 
0000bc07 l       .debug_str	00000000 
0000bc0d l       .debug_str	00000000 
0000bc13 l       .debug_str	00000000 
0000bc19 l       .debug_str	00000000 
0000bc1f l       .debug_str	00000000 
0000bc25 l       .debug_str	00000000 
0000bc2c l       .debug_str	00000000 
0000bc33 l       .debug_str	00000000 
0000bc3b l       .debug_str	00000000 
0000bc43 l       .debug_str	00000000 
0000bc4b l       .debug_str	00000000 
0000bc52 l       .debug_str	00000000 
0000bc5a l       .debug_str	00000000 
0000bc61 l       .debug_str	00000000 
0000bc68 l       .debug_str	00000000 
0000bc6f l       .debug_str	00000000 
0000bc76 l       .debug_str	00000000 
0000bc7d l       .debug_str	00000000 
0000bc84 l       .debug_str	00000000 
0000bc8a l       .debug_str	00000000 
0000bc90 l       .debug_str	00000000 
0000bc96 l       .debug_str	00000000 
0000bc9c l       .debug_str	00000000 
0000bca3 l       .debug_str	00000000 
0000bcab l       .debug_str	00000000 
0000dfd4 l       .debug_str	00000000 
0000fe1e l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000fe44 l       .debug_str	00000000 
0000ff05 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
0001e810 l       .debug_str	00000000 
0000ffd9 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0000ddfe l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000fdfa l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b8ef l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0000bb7a l       .debug_str	00000000 
0000bb83 l       .debug_str	00000000 
0000bb8d l       .debug_str	00000000 
0000bb9d l       .debug_str	00000000 
0000de0b l       .debug_str	00000000 
0000ffe0 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00010006 l       .debug_str	00000000 
0000ff05 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000b3da l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000ff0c l       .debug_str	00000000 
000100ad l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
00001139 l       .debug_str	00000000 
000101a4 l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000fdfa l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000b3da l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000ff0c l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
0000b8ef l       .debug_str	00000000 
0000bbae l       .debug_str	00000000 
0000fe1e l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000ffd9 l       .debug_str	00000000 
00012b7f l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
00010154 l       .debug_str	00000000 
0001018d l       .debug_str	00000000 
0001e810 l       .debug_str	00000000 
0000ffe0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
00001de9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000fdfa l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b8ef l       .debug_str	00000000 
0000bbae l       .debug_str	00000000 
0000fe1e l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000b3da l       .debug_str	00000000 
0000ffd9 l       .debug_str	00000000 
000101dd l       .debug_str	00000000 
000102bc l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
00012b7f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1nybspfq3i3xt8nx
00001139 l       .debug_str	00000000 
00010336 l       .debug_str	00000000 
00010372 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
0001037b l       .debug_str	00000000 
000103a6 l       .debug_str	00000000 
000103af l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0002ea5a l       .debug_str	00000000 
0001040d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00000c16 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
0001090c l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000102c8 l       .debug_str	00000000 
0001030f l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00010322 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00010328 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 24jd757gv3643ar5
00002ca9 l       .debug_str	00000000 
00010416 l       .debug_str	00000000 
00010456 l       .debug_str	00000000 
0000347f l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
000149e9 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
000011d9 l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
000011ec l       .debug_str	00000000 
000011f7 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
0000122d l       .debug_str	00000000 
00001237 l       .debug_str	00000000 
00001242 l       .debug_str	00000000 
0000124d l       .debug_str	00000000 
0000125a l       .debug_str	00000000 
00001266 l       .debug_str	00000000 
00001273 l       .debug_str	00000000 
00001281 l       .debug_str	00000000 
0000128b l       .debug_str	00000000 
0000a05c l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00001298 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0000129c l       .debug_str	00000000 
000012a7 l       .debug_str	00000000 
000012e6 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
000012bb l       .debug_str	00000000 
0003cd4c l       .debug_str	00000000 
000039e3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
0000163d l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00059c8b l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
000546c8 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
000012d6 l       .debug_str	00000000 
00001646 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00001673 l       .debug_str	00000000 
000015af l       .debug_str	00000000 
0005aac6 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
000016a8 l       .debug_str	00000000 
000016d1 l       .debug_str	00000000 
0000172f l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001795 l       .debug_str	00000000 
000016c1 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000017b3 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000017c9 l       .debug_str	00000000 
000017ef l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001805 l       .debug_str	00000000 
00004f9a l       .debug_str	00000000 
000017ce l       .debug_str	00000000 
000039ed l       .debug_str	00000000 
000039f6 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00058015 l       .debug_str	00000000 
00002cb3 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002d2b l       .debug_str	00000000 
00002d32 l       .debug_str	00000000 
00002d3a l       .debug_str	00000000 
00003958 l       .debug_str	00000000 
0000393f l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
0000393a l       .debug_str	00000000 
00003961 l       .debug_str	00000000 
00003a96 l       .debug_str	00000000 
00003a7d l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00004ef9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2a31e4ywq66vvgwq
00000db7 l       .debug_str	00000000 
00000d22 l       .debug_str	00000000 
00000d28 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d3b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d44 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d69 l       .debug_str	00000000 
00000d7a l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e15 l       .debug_str	00000000 
00000e32 l       .debug_str	00000000 
0002ea09 l       .debug_str	00000000 
0002e9fd l       .debug_str	00000000 
0005a7e7 l       .debug_str	00000000 
00057ca2 l       .debug_str	00000000 
000039e3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
0000163d l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00059c8b l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
000546c8 l       .debug_str	00000000 
00001646 l       .debug_str	00000000 
00001673 l       .debug_str	00000000 
000015af l       .debug_str	00000000 
0005aac6 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
000016a8 l       .debug_str	00000000 
000016d1 l       .debug_str	00000000 
0000172f l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001795 l       .debug_str	00000000 
000016c1 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
000017b3 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000017c9 l       .debug_str	00000000 
000017ef l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001805 l       .debug_str	00000000 
00004f9a l       .debug_str	00000000 
000017ce l       .debug_str	00000000 
000039ed l       .debug_str	00000000 
000039f6 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
0000393a l       .debug_str	00000000 
00003961 l       .debug_str	00000000 
00003a96 l       .debug_str	00000000 
00003a7d l       .debug_str	00000000 
00058df2 l       .debug_str	00000000 
00011511 l       .debug_str	00000000 
00010834 l       .debug_str	00000000 
000577c6 l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00014270 l       .debug_str	00000000 
0005b9cc l       .debug_str	00000000 
00001199 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
0001083a l       .debug_str	00000000 
00010861 l       .debug_str	00000000 
00010869 l       .debug_str	00000000 
00010870 l       .debug_str	00000000 
00010876 l       .debug_str	00000000 
0001087d l       .debug_str	00000000 
000577dc l       .debug_str	00000000 
00010883 l       .debug_str	00000000 
00010892 l       .debug_str	00000000 
0000a0a5 l       .debug_str	00000000 
000108a0 l       .debug_str	00000000 
000108a5 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000574ef l       .debug_str	00000000 
000106e1 l       .debug_str	00000000 
0001049d l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000b875 l       .debug_str	00000000 
000551d5 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0001b653 l       .debug_str	00000000 
000104a9 l       .debug_str	00000000 
000104e0 l       .debug_str	00000000 
0000deaa l       .debug_str	00000000 
000104ec l       .debug_str	00000000 
00010523 l       .debug_str	00000000 
0001052e l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00001def l       .debug_str	00000000 
00010536 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0001053d l       .debug_str	00000000 
00010544 l       .debug_str	00000000 
0005ab64 l       .debug_str	00000000 
0001054d l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00055398 l       .debug_str	00000000 
00010557 l       .debug_str	00000000 
00010852 l       .debug_str	00000000 
00010561 l       .debug_str	00000000 
00010597 l       .debug_str	00000000 
0001059b l       .debug_str	00000000 
000105c9 l       .debug_str	00000000 
000012bb l       .debug_str	00000000 
0003cd4c l       .debug_str	00000000 
00002ca9 l       .debug_str	00000000 
00058015 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000393f l       .debug_str	00000000 
00002cb3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002d2b l       .debug_str	00000000 
00001298 l       .debug_str	00000000 
0000129c l       .debug_str	00000000 
000012a7 l       .debug_str	00000000 
000012e6 l       .debug_str	00000000 
000012d6 l       .debug_str	00000000 
00002d32 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00002d3a l       .debug_str	00000000 
00003958 l       .debug_str	00000000 
000105d5 l       .debug_str	00000000 
0001060c l       .debug_str	00000000 
000553b5 l       .debug_str	00000000 
0005a698 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
0005a911 l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00010615 l       .debug_str	00000000 
00010629 l       .debug_str	00000000 
0001065c l       .debug_str	00000000 
00010667 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
000011d9 l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
000011ec l       .debug_str	00000000 
000011f7 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
0000122d l       .debug_str	00000000 
00001237 l       .debug_str	00000000 
00001242 l       .debug_str	00000000 
0000124d l       .debug_str	00000000 
0000125a l       .debug_str	00000000 
00001266 l       .debug_str	00000000 
00001273 l       .debug_str	00000000 
00001281 l       .debug_str	00000000 
0000128b l       .debug_str	00000000 
0000a05c l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001069d l       .debug_str	00000000 
000106db l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
000106ee l       .debug_str	00000000 
00010731 l       .debug_str	00000000 
00010749 l       .debug_str	00000000 
00010789 l       .debug_str	00000000 
0001079e l       .debug_str	00000000 
000107d8 l       .debug_str	00000000 
000107e7 l       .debug_str	00000000 
00010826 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
00055611 l       .debug_str	00000000 
0000114c l       .debug_str	00000000 
00016c35 l       .debug_str	00000000 
00001155 l       .debug_str	00000000 
0000115f l       .debug_str	00000000 
0000b3c6 l       .debug_str	00000000 
00001180 l       .debug_str	00000000 
00001185 l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c70 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00033b92 l       .debug_str	00000000 
00057399 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00000c8e l       .debug_str	00000000 
00000c95 l       .debug_str	00000000 
00000c9b l       .debug_str	00000000 
00000ca3 l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00000ca9 l       .debug_str	00000000 
00000cce l       .debug_str	00000000 
00000cb4 l       .debug_str	00000000 
00000cd7 l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00055003 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
2000020c l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17ha0afe02870fae22eE
20000160 l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17ha1b86376d490f8c6E
20000160 l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17ha5f301920443a6b0E
200001f4 l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17he09bdb91a2637dffE
2000015c l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17hc90671e785a82287E
0000afc2 l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E
0000b714 l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E
0000ae88 l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E
0000ae3c l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17hd146f06bc0a75300E
200001b2 l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h8c5d60ff1550bdc6E
20000204 l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17h6689790c0cb370ccE
0001aa50 l     O .text	00000021 str.0
0001aa90 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 4llx4r7qytqelcmh
0001091e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00000c16 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
000108a9 l       .debug_str	00000000 
0002e2d0 l       .debug_str	00000000 
0000e07a l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
0001090c l       .debug_str	00000000 
00010900 l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
00010913 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4lwd5ip31jg2jkjw
00029436 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
0000bb23 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
0000bb29 l       .debug_str	00000000 
00016de8 l       .debug_str	00000000 
0000bb33 l       .debug_str	00000000 
00016e23 l       .debug_str	00000000 
0001e0ab l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
000011d9 l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
000011ec l       .debug_str	00000000 
000011f7 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
0000122d l       .debug_str	00000000 
00001237 l       .debug_str	00000000 
00001242 l       .debug_str	00000000 
0000124d l       .debug_str	00000000 
0000125a l       .debug_str	00000000 
00001266 l       .debug_str	00000000 
00001273 l       .debug_str	00000000 
00001281 l       .debug_str	00000000 
0000128b l       .debug_str	00000000 
0000a05c l       .debug_str	00000000 
000574ef l       .debug_str	00000000 
00014456 l       .debug_str	00000000 
00010929 l       .debug_str	00000000 
0001095b l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
00010968 l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0000e7a6 l       .debug_str	00000000 
0000e7b0 l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00016cae l       .debug_str	00000000 
0000e7b9 l       .debug_str	00000000 
0000bae6 l       .debug_str	00000000 
0000baec l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0001e82b l       .debug_str	00000000 
0000bb09 l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0002f0ee l       .debug_str	00000000 
00028992 l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
000288b3 l       .debug_str	00000000 
00010973 l       .debug_str	00000000 
0001097a l       .debug_str	00000000 
00029383 l       .debug_str	00000000 
00010981 l       .debug_str	00000000 
0005a542 l       .debug_str	00000000 
0000bac4 l       .debug_str	00000000 
0000baca l       .debug_str	00000000 
00014367 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4v1crl5w7cnl6r5n
00059f0c l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
00012b7f l       .debug_str	00000000 
000109c6 l       .debug_str	00000000 
000109ff l       .debug_str	00000000 
00010a9a l       .debug_str	00000000 
00010af4 l       .debug_str	00000000 
00010b30 l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00010988 l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
0001098c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0001e88d l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00010322 l       .debug_str	00000000 
00010328 l       .debug_str	00000000 
0000dee2 l       .debug_str	00000000 
0000deeb l       .debug_str	00000000 
0000def9 l       .debug_str	00000000 
00016d5f l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
0000df11 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
00010973 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nke66h77r90u0v3
00024c7a l       .debug_str	00000000 
0000e8bc l       .debug_str	00000000 
00057a23 l       .debug_str	00000000 
0002a2a9 l       .debug_str	00000000 
00010c78 l       .debug_str	00000000 
00010ca8 l       .debug_str	00000000 
0002a36d l       .debug_str	00000000 
00010d76 l       .debug_str	00000000 
00010da6 l       .debug_str	00000000 
00010eae l       .debug_str	00000000 
00010ede l       .debug_str	00000000 
0000a047 l       .debug_str	00000000 
00010f7e l       .debug_str	00000000 
0001104e l       .debug_str	00000000 
00011112 l       .debug_str	00000000 
00011210 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
000011d9 l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
000011ec l       .debug_str	00000000 
000011f7 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
0000122d l       .debug_str	00000000 
00001237 l       .debug_str	00000000 
00001242 l       .debug_str	00000000 
0000124d l       .debug_str	00000000 
0000125a l       .debug_str	00000000 
00001266 l       .debug_str	00000000 
00001273 l       .debug_str	00000000 
00001281 l       .debug_str	00000000 
0000128b l       .debug_str	00000000 
0000a05c l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00010b3e l       .debug_str	00000000 
00009d65 l       .debug_str	00000000 
0000b851 l       .debug_str	00000000 
0000e165 l       .debug_str	00000000 
0000df4b l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000bac4 l       .debug_str	00000000 
0000baca l       .debug_str	00000000 
0000deb0 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
0000debc l       .debug_str	00000000 
0000dec8 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000ded5 l       .debug_str	00000000 
0005bf39 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00014367 l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00016cae l       .debug_str	00000000 
0005a542 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
0000bae6 l       .debug_str	00000000 
0000baec l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
0001e82b l       .debug_str	00000000 
0000bb09 l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
0002f0ee l       .debug_str	00000000 
00028992 l       .debug_str	00000000 
0000bb23 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
0000bb29 l       .debug_str	00000000 
00016de8 l       .debug_str	00000000 
0000bb33 l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
00016e23 l       .debug_str	00000000 
0001e14a l       .debug_str	00000000 
0000e16b l       .debug_str	00000000 
0000e172 l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0000de7e l       .debug_str	00000000 
0000501a l       .debug_str	00000000 
0000ba76 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0005a911 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
00005042 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00005050 l       .debug_str	00000000 
00005058 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
0000bf4a l       .debug_str	00000000 
0000bf67 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000bfad l       .debug_str	00000000 
0000bfbe l       .debug_str	00000000 
0000c02e l       .debug_str	00000000 
0000c0c8 l       .debug_str	00000000 
0000c18b l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
00005093 l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00005099 l       .debug_str	00000000 
0000509c l       .debug_str	00000000 
000050c5 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
000050fb l       .debug_str	00000000 
0000c38f l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000c43c l       .debug_str	00000000 
000062dd l       .debug_str	00000000 
0000c490 l       .debug_str	00000000 
0000c507 l       .debug_str	00000000 
0000c58b l       .debug_str	00000000 
0000c606 l       .debug_str	00000000 
0000c6a4 l       .debug_str	00000000 
0000c74f l       .debug_str	00000000 
0000c7f1 l       .debug_str	00000000 
0000c8b6 l       .debug_str	00000000 
0000c988 l       .debug_str	00000000 
0000ca51 l       .debug_str	00000000 
0000cb3d l       .debug_str	00000000 
0000cc36 l       .debug_str	00000000 
0000e17a l       .debug_str	00000000 
0000e28c l       .debug_str	00000000 
0000e3bb l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00020b1c l       .debug_str	00000000 
0000e7c6 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
0002a143 l       .debug_str	00000000 
00010b6e l       .debug_str	00000000 
00010b9e l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
00010973 l       .debug_str	00000000 
0001097a l       .debug_str	00000000 
00029436 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
000293e5 l       .debug_str	00000000 
0002a213 l       .debug_str	00000000 
0000e8ad l       .debug_str	00000000 
0000e8b3 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0000cd26 l       .debug_str	00000000 
0000ce39 l       .debug_str	00000000 
0000cf59 l       .debug_str	00000000 
0000d070 l       .debug_str	00000000 
0000d1a9 l       .debug_str	00000000 
0000d2ff l       .debug_str	00000000 
00024db2 l       .debug_str	00000000 
00020c39 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
00012943 l       .debug_str	00000000 
00011934 l       .debug_str	00000000 
0001195e l       .debug_str	00000000 
000119ac l       .debug_str	00000000 
000119b4 l       .debug_str	00000000 
0000b7ab l       .debug_str	00000000 
00011a01 l       .debug_str	00000000 
00011a5b l       .debug_str	00000000 
00011a69 l       .debug_str	00000000 
00011abc l       .debug_str	00000000 
00011ac4 l       .debug_str	00000000 
00011b19 l       .debug_str	00000000 
00011b23 l       .debug_str	00000000 
00011b61 l       .debug_str	00000000 
00011b7c l       .debug_str	00000000 
00011bdb l       .debug_str	00000000 
00014073 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
00011c40 l       .debug_str	00000000 
00011c71 l       .debug_str	00000000 
00011c7c l       .debug_str	00000000 
000011d2 l       .debug_str	00000000 
00011cae l       .debug_str	00000000 
00011cdc l       .debug_str	00000000 
00011cee l       .debug_str	00000000 
00011d14 l       .debug_str	00000000 
00011d20 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
00011d67 l       .debug_str	00000000 
0000b740 l       .debug_str	00000000 
0000b80a l       .debug_str	00000000 
00011db2 l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
00011db8 l       .debug_str	00000000 
00011e44 l       .debug_str	00000000 
00011e5f l       .debug_str	00000000 
00011e8f l       .debug_str	00000000 
00011ec4 l       .debug_str	00000000 
00011ef4 l       .debug_str	00000000 
00011f0a l       .debug_str	00000000 
00011f40 l       .debug_str	00000000 
00011f5b l       .debug_str	00000000 
00011f95 l       .debug_str	00000000 
00011fb4 l       .debug_str	00000000 
00011ff0 l       .debug_str	00000000 
00012016 l       .debug_str	00000000 
00012022 l       .debug_str	00000000 
00012049 l       .debug_str	00000000 
00012056 l       .debug_str	00000000 
00012263 l       .debug_str	00000000 
000120a4 l       .debug_str	00000000 
000122d3 l       .debug_str	00000000 
000120f5 l       .debug_str	00000000 
00012147 l       .debug_str	00000000 
00012153 l       .debug_str	00000000 
0001219e l       .debug_str	00000000 
000121b0 l       .debug_str	00000000 
000121f3 l       .debug_str	00000000 
000121fe l       .debug_str	00000000 
0001225a l       .debug_str	00000000 
0001226b l       .debug_str	00000000 
000122ca l       .debug_str	00000000 
000122de l       .debug_str	00000000 
00012334 l       .debug_str	00000000 
000123c9 l       .debug_str	00000000 
000123d5 l       .debug_str	00000000 
0001246f l       .debug_str	00000000 
00012480 l       .debug_str	00000000 
000124a5 l       .debug_str	00000000 
0001254e l       .debug_str	00000000 
0000bcd5 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
0001255f l       .debug_str	00000000 
000125e7 l       .debug_str	00000000 
0001259e l       .debug_str	00000000 
000125e2 l       .debug_str	00000000 
0001262c l       .debug_str	00000000 
0001266d l       .debug_str	00000000 
00012692 l       .debug_str	00000000 
000126e3 l       .debug_str	00000000 
00012728 l       .debug_str	00000000 
0001277b l       .debug_str	00000000 
000127dc l       .debug_str	00000000 
00012843 l       .debug_str	00000000 
0000a404 l       .debug_str	00000000 
0001288a l       .debug_str	00000000 
000128d5 l       .debug_str	00000000 
000128e2 l       .debug_str	00000000 
000129bc l       .debug_str	00000000 
000129b4 l       .debug_str	00000000 
000129c4 l       .debug_str	00000000 
0000a2bf l       .debug_str	00000000 
000129e0 l       .debug_str	00000000 
00012a55 l       .debug_str	00000000 
00012a80 l       .debug_str	00000000 
00012af9 l       .debug_str	00000000 
00012b03 l       .debug_str	00000000 
00012b29 l       .debug_str	00000000 
00012b62 l       .debug_str	00000000 
00012b7a l       .debug_str	00000000 
00012b89 l       .debug_str	00000000 
00012bc2 l       .debug_str	00000000 
00012bfa l       .debug_str	00000000 
0000a499 l       .debug_str	00000000 
00012c33 l       .debug_str	00000000 
00012c6e l       .debug_str	00000000 
00012cb2 l       .debug_str	00000000 
00012cf8 l       .debug_str	00000000 
00012d34 l       .debug_str	00000000 
00012d5c l       .debug_str	00000000 
00012d98 l       .debug_str	00000000 
00012dbc l       .debug_str	00000000 
00012e19 l       .debug_str	00000000 
00012e2d l       .debug_str	00000000 
00012e7e l       .debug_str	00000000 
00013d6f l       .debug_str	00000000 
00012e8a l       .debug_str	00000000 
00012edb l       .debug_str	00000000 
00012ef2 l       .debug_str	00000000 
00012f43 l       .debug_str	00000000 
00012f61 l       .debug_str	00000000 
00012fb2 l       .debug_str	00000000 
00012fc4 l       .debug_str	00000000 
0001301c l       .debug_str	00000000 
00013032 l       .debug_str	00000000 
00013095 l       .debug_str	00000000 
000130c0 l       .debug_str	00000000 
00013123 l       .debug_str	00000000 
00013198 l       .debug_str	00000000 
000131fc l       .debug_str	00000000 
00013206 l       .debug_str	00000000 
00013271 l       .debug_str	00000000 
00013280 l       .debug_str	00000000 
000132ec l       .debug_str	00000000 
0001331e l       .debug_str	00000000 
00013344 l       .debug_str	00000000 
000133b3 l       .debug_str	00000000 
000133d3 l       .debug_str	00000000 
00013443 l       .debug_str	00000000 
00013464 l       .debug_str	00000000 
000134d8 l       .debug_str	00000000 
000134e1 l       .debug_str	00000000 
00013561 l       .debug_str	00000000 
000135a7 l       .debug_str	00000000 
000135d0 l       .debug_str	00000000 
000135d7 l       .debug_str	00000000 
0001360f l       .debug_str	00000000 
0001364e l       .debug_str	00000000 
00013655 l       .debug_str	00000000 
000136ce l       .debug_str	00000000 
000102bc l       .debug_str	00000000 
00013765 l       .debug_str	00000000 
000137e3 l       .debug_str	00000000 
000137ed l       .debug_str	00000000 
0001387b l       .debug_str	00000000 
00013927 l       .debug_str	00000000 
0001396e l       .debug_str	00000000 
0001397b l       .debug_str	00000000 
000139c8 l       .debug_str	00000000 
000139db l       .debug_str	00000000 
00013a2d l       .debug_str	00000000 
00013a9d l       .debug_str	00000000 
00011677 l       .debug_str	00000000 
00013afd l       .debug_str	00000000 
00013b0e l       .debug_str	00000000 
00013b73 l       .debug_str	00000000 
00013ba3 l       .debug_str	00000000 
00013bac l       .debug_str	00000000 
00013be8 l       .debug_str	00000000 
00013bfc l       .debug_str	00000000 
00013c37 l       .debug_str	00000000 
00013c7d l       .debug_str	00000000 
00013c9b l       .debug_str	00000000 
00013ccb l       .debug_str	00000000 
00013cd4 l       .debug_str	00000000 
00013d0e l       .debug_str	00000000 
00013d20 l       .debug_str	00000000 
00013d4e l       .debug_str	00000000 
00000c78 l       .debug_str	00000000 
00013d55 l       .debug_str	00000000 
00013d61 l       .debug_str	00000000 
00013d6b l       .debug_str	00000000 
00013d75 l       .debug_str	00000000 
00013d98 l       .debug_str	00000000 
0002e2d0 l       .debug_str	00000000 
00013ded l       .debug_str	00000000 
00013e4d l       .debug_str	00000000 
00013e59 l       .debug_str	00000000 
00013ea9 l       .debug_str	00000000 
00013f0c l       .debug_str	00000000 
00013f73 l       .debug_str	00000000 
00013fe2 l       .debug_str	00000000 
00055611 l       .debug_str	00000000 
00014072 l       .debug_str	00000000 
00014076 l       .debug_str	00000000 
000566ae l       .debug_str	00000000 
0004abfa l       .debug_str	00000000 
0000b888 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
00054e76 l       .debug_str	00000000 
0001409d l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000140a4 l       .debug_str	00000000 
000555f2 l       .debug_str	00000000 
000140b1 l       .debug_str	00000000 
00055398 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
000140bc l       .debug_str	00000000 
0005b9cc l       .debug_str	00000000 
00014110 l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
00057387 l       .debug_str	00000000 
000022f0 l       .debug_str	00000000 
0001411b l       .debug_str	00000000 
00014146 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
00001df5 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00014152 l       .debug_str	00000000 
0001418c l       .debug_str	00000000 
000141c5 l       .debug_str	00000000 
000141d4 l       .debug_str	00000000 
00014217 l       .debug_str	00000000 
000568c3 l       .debug_str	00000000 
000330fd l       .debug_str	00000000 
000582f0 l       .debug_str	00000000 
00014259 l       .debug_str	00000000 
0001427d l       .debug_str	00000000 
000137e8 l       .debug_str	00000000 
00054e47 l       .debug_str	00000000 
00003a7b l       .debug_str	00000000 
0001429d l       .debug_str	00000000 
00040f72 l       .debug_str	00000000 
000142d8 l       .debug_str	00000000 
000142df l       .debug_str	00000000 
00031a93 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00014320 l       .debug_str	00000000 
00014367 l       .debug_str	00000000 
00001199 l       .debug_str	00000000 
000181b1 l       .debug_str	00000000 
00014341 l       .debug_str	00000000 
0000115f l       .debug_str	00000000 
00014948 l       .debug_str	00000000 
00014363 l       .debug_str	00000000 
0000af50 l       .debug_str	00000000 
0000af64 l       .debug_str	00000000 
0001436b l       .debug_str	00000000 
00014376 l       .debug_str	00000000 
0001091e l       .debug_str	00000000 
0001436f l       .debug_str	00000000 
0000af6d l       .debug_str	00000000 
0000af78 l       .debug_str	00000000 
0000af83 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000112a6 l       .debug_str	00000000 
000112fe l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
0001134b l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00011355 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00011361 l       .debug_str	00000000 
0001412c l       .debug_str	00000000 
00014120 l       .debug_str	00000000 
0001414b l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058f81 l       .debug_str	00000000 
0002fe0e l       .debug_str	00000000 
00011372 l       .debug_str	00000000 
00011377 l       .debug_str	00000000 
0001137d l       .debug_str	00000000 
0001464b l       .debug_str	00000000 
0000a068 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00011511 l       .debug_str	00000000 
00011385 l       .debug_str	00000000 
0001138e l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00011396 l       .debug_str	00000000 
00010834 l       .debug_str	00000000 
0001139c l       .debug_str	00000000 
000113a7 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00000d22 l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00000d28 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00000d3b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d44 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d69 l       .debug_str	00000000 
00000d7a l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000db7 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c70 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00033b92 l       .debug_str	00000000 
00057399 l       .debug_str	00000000 
00000c8e l       .debug_str	00000000 
00000c95 l       .debug_str	00000000 
00000c9b l       .debug_str	00000000 
00000ca3 l       .debug_str	00000000 
00000ca9 l       .debug_str	00000000 
00000cce l       .debug_str	00000000 
00000cb4 l       .debug_str	00000000 
00000cd7 l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00055003 l       .debug_str	00000000 
00000e15 l       .debug_str	00000000 
00000e32 l       .debug_str	00000000 
0002ea09 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
0005919d l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
000113ad l       .debug_str	00000000 
000113d6 l       .debug_str	00000000 
000113e5 l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00010988 l       .debug_str	00000000 
000113ff l       .debug_str	00000000 
000141ce l       .debug_str	00000000 
00011403 l       .debug_str	00000000 
0001142c l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
00011461 l       .debug_str	00000000 
00011475 l       .debug_str	00000000 
00011488 l       .debug_str	00000000 
000114d4 l       .debug_str	00000000 
000114e2 l       .debug_str	00000000 
0000a40d l       .debug_str	00000000 
0002fde8 l       .debug_str	00000000 
000114ea l       .debug_str	00000000 
00002808 l       .debug_str	00000000 
000114f4 l       .debug_str	00000000 
00030c6c l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
0000a416 l       .debug_str	00000000 
00011667 l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00012b7f l       .debug_str	00000000 
0001b612 l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
000142fa l       .debug_str	00000000 
0003e2cf l       .debug_str	00000000 
000114fd l       .debug_str	00000000 
00011507 l       .debug_str	00000000 
000577c6 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00014270 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00012b1b l       .debug_str	00000000 
000142b0 l       .debug_str	00000000 
0001150d l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
00014006 l       .debug_str	00000000 
00013f97 l       .debug_str	00000000 
00011516 l       .debug_str	00000000 
0001151c l       .debug_str	00000000 
00011545 l       .debug_str	00000000 
00001174 l       .debug_str	00000000 
00012b04 l       .debug_str	00000000 
00011551 l       .debug_str	00000000 
0001157e l       .debug_str	00000000 
00011586 l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
00011591 l       .debug_str	00000000 
000115ba l       .debug_str	00000000 
000115c2 l       .debug_str	00000000 
000115c9 l       .debug_str	00000000 
000115f3 l       .debug_str	00000000 
00018fa2 l       .debug_str	00000000 
000115f7 l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
00011600 l       .debug_str	00000000 
00011642 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00011655 l       .debug_str	00000000 
00059e16 l       .debug_str	00000000 
0000b029 l       .debug_str	00000000 
0004567d l       .debug_str	00000000 
00011670 l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
0001167f l       .debug_str	00000000 
00011689 l       .debug_str	00000000 
0001434d l       .debug_str	00000000 
00013b09 l       .debug_str	00000000 
0001168e l       .debug_str	00000000 
00011714 l       .debug_str	00000000 
0001171e l       .debug_str	00000000 
000117b0 l       .debug_str	00000000 
0000e099 l       .debug_str	00000000 
000117f6 l       .debug_str	00000000 
0001188a l       .debug_str	00000000 
000118ec l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
00014d40 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
0005919d l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c70 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00033b92 l       .debug_str	00000000 
00057399 l       .debug_str	00000000 
00000c8e l       .debug_str	00000000 
00000c95 l       .debug_str	00000000 
00000c9b l       .debug_str	00000000 
00000ca3 l       .debug_str	00000000 
00000ca9 l       .debug_str	00000000 
00000cce l       .debug_str	00000000 
00000cb4 l       .debug_str	00000000 
00000cd7 l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00055003 l       .debug_str	00000000 
00000e15 l       .debug_str	00000000 
00000e32 l       .debug_str	00000000 
0002ea09 l       .debug_str	00000000 
0000e073 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00016cae l       .debug_str	00000000 
0000bac4 l       .debug_str	00000000 
0000bb29 l       .debug_str	00000000 
00014437 l       .debug_str	00000000 
00014440 l       .debug_str	00000000 
00014448 l       .debug_str	00000000 
00014451 l       .debug_str	00000000 
0002f0ee l       .debug_str	00000000 
0001445e l       .debug_str	00000000 
0001446e l       .debug_str	00000000 
0001447f l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
00014490 l       .debug_str	00000000 
0000deeb l       .debug_str	00000000 
0000def9 l       .debug_str	00000000 
00016d5f l       .debug_str	00000000 
00014499 l       .debug_str	00000000 
0001449f l       .debug_str	00000000 
000144aa l       .debug_str	00000000 
000144b4 l       .debug_str	00000000 
000144be l       .debug_str	00000000 
0000b09b l       .debug_str	00000000 
00014506 l       .debug_str	00000000 
0000b184 l       .debug_str	00000000 
0001454e l       .debug_str	00000000 
00014596 l       .debug_str	00000000 
0000bcd5 l       .debug_str	00000000 
0001459f l       .debug_str	00000000 
000145c8 l       .debug_str	00000000 
000145d1 l       .debug_str	00000000 
0001462e l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
00014654 l       .debug_str	00000000 
0001467c l       .debug_str	00000000 
000146ae l       .debug_str	00000000 
00011c71 l       .debug_str	00000000 
000146df l       .debug_str	00000000 
0001473c l       .debug_str	00000000 
00014799 l       .debug_str	00000000 
000147f6 l       .debug_str	00000000 
000011d2 l       .debug_str	00000000 
00014828 l       .debug_str	00000000 
0001486d l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
00014879 l       .debug_str	00000000 
0005440e l       .debug_str	00000000 
000148b5 l       .debug_str	00000000 
0000e024 l       .debug_str	00000000 
000148f9 l       .debug_str	00000000 
00014940 l       .debug_str	00000000 
0001494e l       .debug_str	00000000 
00014995 l       .debug_str	00000000 
000149a3 l       .debug_str	00000000 
000149e3 l       .debug_str	00000000 
000149eb l       .debug_str	00000000 
0000e0ab l       .debug_str	00000000 
000149f8 l       .debug_str	00000000 
00014a33 l       .debug_str	00000000 
00014a71 l       .debug_str	00000000 
00014aa1 l       .debug_str	00000000 
00014ab5 l       .debug_str	00000000 
00014ae5 l       .debug_str	00000000 
00014af9 l       .debug_str	00000000 
00014b29 l       .debug_str	00000000 
00014b3d l       .debug_str	00000000 
0003a01e l       .debug_str	00000000 
00014b88 l       .debug_str	00000000 
00014bdf l       .debug_str	00000000 
00014bee l       .debug_str	00000000 
00014c39 l       .debug_str	00000000 
0000b6e7 l       .debug_str	00000000 
00014cb0 l       .debug_str	00000000 
00014d35 l       .debug_str	00000000 
0000b7ab l       .debug_str	00000000 
00014db7 l       .debug_str	00000000 
00014e3c l       .debug_str	00000000 
00014e47 l       .debug_str	00000000 
00054e47 l       .debug_str	00000000 
00014ed0 l       .debug_str	00000000 
0001868c l       .debug_str	00000000 
00014f47 l       .debug_str	00000000 
00056835 l       .debug_str	00000000 
00014fdc l       .debug_str	00000000 
00015073 l       .debug_str	00000000 
0001510e l       .debug_str	00000000 
000151a3 l       .debug_str	00000000 
0001523a l       .debug_str	00000000 
000152d5 l       .debug_str	00000000 
0001539d l       .debug_str	00000000 
000153a8 l       .debug_str	00000000 
00015474 l       .debug_str	00000000 
00015504 l       .debug_str	00000000 
00015510 l       .debug_str	00000000 
000155b6 l       .debug_str	00000000 
000155c2 l       .debug_str	00000000 
00015666 l       .debug_str	00000000 
00015708 l       .debug_str	00000000 
000157ac l       .debug_str	00000000 
00015800 l       .debug_str	00000000 
00015855 l       .debug_str	00000000 
000158aa l       .debug_str	00000000 
00011677 l       .debug_str	00000000 
0001592d l       .debug_str	00000000 
000159b1 l       .debug_str	00000000 
00015a35 l       .debug_str	00000000 
000022e4 l       .debug_str	00000000 
00015a7c l       .debug_str	00000000 
000022ea l       .debug_str	00000000 
00015ac3 l       .debug_str	00000000 
000022f0 l       .debug_str	00000000 
00015b0a l       .debug_str	00000000 
00015b88 l       .debug_str	00000000 
00015c07 l       .debug_str	00000000 
00015ca2 l       .debug_str	00000000 
00015d36 l       .debug_str	00000000 
00015d83 l       .debug_str	00000000 
00015d8f l       .debug_str	00000000 
00015df2 l       .debug_str	00000000 
00015e3a l       .debug_str	00000000 
00010988 l       .debug_str	00000000 
00015e42 l       .debug_str	00000000 
00015ed6 l       .debug_str	00000000 
00015f3c l       .debug_str	00000000 
00015fcd l       .debug_str	00000000 
0001606c l       .debug_str	00000000 
000160fd l       .debug_str	00000000 
0001619c l       .debug_str	00000000 
0001623e l       .debug_str	00000000 
000162cf l       .debug_str	00000000 
0001637d l       .debug_str	00000000 
0001642d l       .debug_str	00000000 
000164e1 l       .debug_str	00000000 
000165d4 l       .debug_str	00000000 
000165df l       .debug_str	00000000 
000166d6 l       .debug_str	00000000 
00016782 l       .debug_str	00000000 
0001678c l       .debug_str	00000000 
000167fe l       .debug_str	00000000 
00016873 l       .debug_str	00000000 
000168e6 l       .debug_str	00000000 
00016957 l       .debug_str	00000000 
000169ca l       .debug_str	00000000 
00016a41 l       .debug_str	00000000 
00016ab6 l       .debug_str	00000000 
00016b2b l       .debug_str	00000000 
00016b9b l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0000b3c6 l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
0000b3d2 l       .debug_str	00000000 
00016c27 l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
00016c2d l       .debug_str	00000000 
000119ac l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0001414b l       .debug_str	00000000 
000140bc l       .debug_str	00000000 
00014948 l       .debug_str	00000000 
00016c30 l       .debug_str	00000000 
00016c3a l       .debug_str	00000000 
00016c44 l       .debug_str	00000000 
00001def l       .debug_str	00000000 
00016c4e l       .debug_str	00000000 
00016c7f l       .debug_str	00000000 
0005bf39 l       .debug_str	00000000 
0000115f l       .debug_str	00000000 
00016cb4 l       .debug_str	00000000 
00016cbe l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00016cc8 l       .debug_str	00000000 
00016cd1 l       .debug_str	00000000 
00016d00 l       .debug_str	00000000 
00016d0d l       .debug_str	00000000 
00016d10 l       .debug_str	00000000 
00016d13 l       .debug_str	00000000 
00016d16 l       .debug_str	00000000 
00016d19 l       .debug_str	00000000 
00016d1c l       .debug_str	00000000 
00016d1f l       .debug_str	00000000 
00016d6d l       .debug_str	00000000 
0000af50 l       .debug_str	00000000 
0000af64 l       .debug_str	00000000 
0001436f l       .debug_str	00000000 
0000af6d l       .debug_str	00000000 
0000af78 l       .debug_str	00000000 
0001091e l       .debug_str	00000000 
00016db7 l       .debug_str	00000000 
00016de8 l       .debug_str	00000000 
00016dc2 l       .debug_str	00000000 
00016e1b l       .debug_str	00000000 
00016df6 l       .debug_str	00000000 
00016e4c l       .debug_str	00000000 
00016e28 l       .debug_str	00000000 
00016e7d l       .debug_str	00000000 
00016e58 l       .debug_str	00000000 
00016eb1 l       .debug_str	00000000 
00016e8a l       .debug_str	00000000 
00016ee6 l       .debug_str	00000000 
00016ec0 l       .debug_str	00000000 
00016f1a l       .debug_str	00000000 
00016ef4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00014382 l       .debug_str	00000000 
000143e2 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
00016c35 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00016c3f l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00016c49 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058f81 l       .debug_str	00000000 
0002fe0e l       .debug_str	00000000 
00011372 l       .debug_str	00000000 
00011377 l       .debug_str	00000000 
0001137d l       .debug_str	00000000 
0001464b l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00032d0d l       .debug_str	00000000 
000113a7 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00000d22 l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00000d28 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d3b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d44 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d69 l       .debug_str	00000000 
00000d7a l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000db7 l       .debug_str	00000000 
0000bec0 l     F .text	00000044 _ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE
0000bfb4 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
0000c022 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE
0000c05a l     F .text	0000001a _ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E
0001add0 l     O .text	0000001c str.1
0001ae00 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00012fb2 l       .debug_str	00000000 
00017402 l       .debug_str	00000000 
0000b740 l       .debug_str	00000000 
0000b80a l       .debug_str	00000000 
0001744d l       .debug_str	00000000 
00011f40 l       .debug_str	00000000 
00017483 l       .debug_str	00000000 
00011f95 l       .debug_str	00000000 
000174bd l       .debug_str	00000000 
000174f9 l       .debug_str	00000000 
00012016 l       .debug_str	00000000 
0001751f l       .debug_str	00000000 
00012049 l       .debug_str	00000000 
00017546 l       .debug_str	00000000 
00012263 l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00017594 l       .debug_str	00000000 
000122d3 l       .debug_str	00000000 
000175e5 l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
00017637 l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
0001768c l       .debug_str	00000000 
000123c9 l       .debug_str	00000000 
00017721 l       .debug_str	00000000 
0001776f l       .debug_str	00000000 
0001b612 l       .debug_str	00000000 
0001777e l       .debug_str	00000000 
000177cf l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
000177e7 l       .debug_str	00000000 
0001783c l       .debug_str	00000000 
00017858 l       .debug_str	00000000 
00017860 l       .debug_str	00000000 
000178a6 l       .debug_str	00000000 
000178ae l       .debug_str	00000000 
000121f3 l       .debug_str	00000000 
000178f7 l       .debug_str	00000000 
00056835 l       .debug_str	00000000 
00017966 l       .debug_str	00000000 
00012e7e l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
000179b7 l       .debug_str	00000000 
00017a08 l       .debug_str	00000000 
0001301c l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00011586 l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
00011591 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
000577c6 l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
00014270 l       .debug_str	00000000 
00017a60 l       .debug_str	00000000 
00017ac3 l       .debug_str	00000000 
00017aed l       .debug_str	00000000 
00017b50 l       .debug_str	00000000 
00017b59 l       .debug_str	00000000 
00017bc6 l       .debug_str	00000000 
00017bd8 l       .debug_str	00000000 
00017c49 l       .debug_str	00000000 
00017c5f l       .debug_str	00000000 
00011677 l       .debug_str	00000000 
00017cbf l       .debug_str	00000000 
00017cf2 l       .debug_str	00000000 
00017d5c l       .debug_str	00000000 
00017d8f l       .debug_str	00000000 
00017d94 l       .debug_str	00000000 
00017df8 l       .debug_str	00000000 
000590f6 l       .debug_str	00000000 
00017e53 l       .debug_str	00000000 
00017e8f l       .debug_str	00000000 
00017e9d l       .debug_str	00000000 
00017ecc l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0001414b l       .debug_str	00000000 
00054e76 l       .debug_str	00000000 
0001409d l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000555f2 l       .debug_str	00000000 
00055398 l       .debug_str	00000000 
000140a4 l       .debug_str	00000000 
000140b1 l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
00014110 l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
00057387 l       .debug_str	00000000 
000022f0 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
00001df5 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00014152 l       .debug_str	00000000 
0001418c l       .debug_str	00000000 
000141c5 l       .debug_str	00000000 
000141d4 l       .debug_str	00000000 
00014217 l       .debug_str	00000000 
000568c3 l       .debug_str	00000000 
000330fd l       .debug_str	00000000 
000582f0 l       .debug_str	00000000 
0000b029 l       .debug_str	00000000 
00014259 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
0000a0a5 l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
00030381 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00017ed4 l       .debug_str	00000000 
00017eec l       .debug_str	00000000 
0005b9cc l       .debug_str	00000000 
00001199 l       .debug_str	00000000 
00017f09 l       .debug_str	00000000 
00017e97 l       .debug_str	00000000 
00017f22 l       .debug_str	00000000 
00017f3e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00016f28 l       .debug_str	00000000 
00016f7d l       .debug_str	00000000 
00016fc7 l       .debug_str	00000000 
00016fce l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00010926 l       .debug_str	00000000 
00016dbf l       .debug_str	00000000 
00028974 l       .debug_str	00000000 
00058990 l       .debug_str	00000000 
00017ee6 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00011511 l       .debug_str	00000000 
00010834 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0001139c l       .debug_str	00000000 
00058f81 l       .debug_str	00000000 
000113a7 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
0005919d l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00016fd6 l       .debug_str	00000000 
000113d6 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
000113e5 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00010988 l       .debug_str	00000000 
000113ff l       .debug_str	00000000 
000141ce l       .debug_str	00000000 
00016fff l       .debug_str	00000000 
0001142c l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
00011461 l       .debug_str	00000000 
00011475 l       .debug_str	00000000 
00017028 l       .debug_str	00000000 
000114d4 l       .debug_str	00000000 
000114e2 l       .debug_str	00000000 
000114ea l       .debug_str	00000000 
0000a068 l       .debug_str	00000000 
0001157e l       .debug_str	00000000 
00002808 l       .debug_str	00000000 
000115ba l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00017074 l       .debug_str	00000000 
0000a719 l       .debug_str	00000000 
0001709d l       .debug_str	00000000 
000170a7 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00014948 l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
00054e47 l       .debug_str	00000000 
000170ab l       .debug_str	00000000 
0005536c l       .debug_str	00000000 
00017f38 l       .debug_str	00000000 
00017f02 l       .debug_str	00000000 
000170b5 l       .debug_str	00000000 
00011b19 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
0001710a l       .debug_str	00000000 
00017148 l       .debug_str	00000000 
00017160 l       .debug_str	00000000 
00011b61 l       .debug_str	00000000 
0001719e l       .debug_str	00000000 
00014073 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
00017203 l       .debug_str	00000000 
00017233 l       .debug_str	00000000 
0001725a l       .debug_str	00000000 
00011d14 l       .debug_str	00000000 
00017280 l       .debug_str	00000000 
000172c5 l       .debug_str	00000000 
000172d1 l       .debug_str	00000000 
00017317 l       .debug_str	00000000 
00017324 l       .debug_str	00000000 
0001736a l       .debug_str	00000000 
00017377 l       .debug_str	00000000 
000173b5 l       .debug_str	00000000 
000173bb l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
0000c308 l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
0000c372 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
0000c39c l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
0000c3da l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
0000c4aa l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
00017fc2 l       .debug_str	00000000 
00017fc0 l       .debug_str	00000000 
00018013 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00017f47 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0001157e l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00017f66 l       .debug_str	00000000 
00017fb7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
000186db l       .debug_str	00000000 
000115c2 l       .debug_str	00000000 
00016cc8 l       .debug_str	00000000 
000180ba l       .debug_str	00000000 
000180ef l       .debug_str	00000000 
000022f0 l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
00012b7f l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
000180fb l       .debug_str	00000000 
00018133 l       .debug_str	00000000 
0001814d l       .debug_str	00000000 
00018157 l       .debug_str	00000000 
0001815f l       .debug_str	00000000 
00018167 l       .debug_str	00000000 
000181a3 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
000181b6 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
000181be l       .debug_str	00000000 
000181f6 l       .debug_str	00000000 
00010988 l       .debug_str	00000000 
000181fe l       .debug_str	00000000 
00018236 l       .debug_str	00000000 
0001823e l       .debug_str	00000000 
00018276 l       .debug_str	00000000 
00018290 l       .debug_str	00000000 
00018299 l       .debug_str	00000000 
000182d1 l       .debug_str	00000000 
000182da l       .debug_str	00000000 
00018312 l       .debug_str	00000000 
00011714 l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
0001839a l       .debug_str	00000000 
000183e2 l       .debug_str	00000000 
000183ed l       .debug_str	00000000 
00017148 l       .debug_str	00000000 
0000bcd5 l       .debug_str	00000000 
0001842b l       .debug_str	00000000 
00018454 l       .debug_str	00000000 
0001845f l       .debug_str	00000000 
00018484 l       .debug_str	00000000 
0001414b l       .debug_str	00000000 
000184e3 l       .debug_str	00000000 
0001850d l       .debug_str	00000000 
00018535 l       .debug_str	00000000 
0001856d l       .debug_str	00000000 
0001859e l       .debug_str	00000000 
000185aa l       .debug_str	00000000 
00018609 l       .debug_str	00000000 
000011d2 l       .debug_str	00000000 
0001863b l       .debug_str	00000000 
00018683 l       .debug_str	00000000 
0000b029 l       .debug_str	00000000 
00018690 l       .debug_str	00000000 
000186eb l       .debug_str	00000000 
000186f9 l       .debug_str	00000000 
00018741 l       .debug_str	00000000 
0001874e l       .debug_str	00000000 
0000e0ab l       .debug_str	00000000 
0001875f l       .debug_str	00000000 
0001879a l       .debug_str	00000000 
000187e0 l       .debug_str	00000000 
00018817 l       .debug_str	00000000 
00018830 l       .debug_str	00000000 
0001883c l       .debug_str	00000000 
00012263 l       .debug_str	00000000 
0001888e l       .debug_str	00000000 
000122d3 l       .debug_str	00000000 
000188e3 l       .debug_str	00000000 
0001881d l       .debug_str	00000000 
00018916 l       .debug_str	00000000 
000178a6 l       .debug_str	00000000 
0001895c l       .debug_str	00000000 
000121f3 l       .debug_str	00000000 
00010834 l       .debug_str	00000000 
000577c6 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
000189a5 l       .debug_str	00000000 
0001b612 l       .debug_str	00000000 
000189b6 l       .debug_str	00000000 
00018a2b l       .debug_str	00000000 
00018a58 l       .debug_str	00000000 
00017bc6 l       .debug_str	00000000 
00018ae4 l       .debug_str	00000000 
00018b67 l       .debug_str	00000000 
00018b96 l       .debug_str	00000000 
000102bc l       .debug_str	00000000 
00018be3 l       .debug_str	00000000 
00018c13 l       .debug_str	00000000 
00018c61 l       .debug_str	00000000 
00018c91 l       .debug_str	00000000 
00018cdf l       .debug_str	00000000 
00018d0f l       .debug_str	00000000 
00018d5d l       .debug_str	00000000 
00018d8e l       .debug_str	00000000 
00018ddd l       .debug_str	00000000 
00018e0e l       .debug_str	00000000 
00018e5d l       .debug_str	00000000 
00018e8d l       .debug_str	00000000 
00018e95 l       .debug_str	00000000 
00018ec5 l       .debug_str	00000000 
00018ecd l       .debug_str	00000000 
00018f0b l       .debug_str	00000000 
00018f20 l       .debug_str	00000000 
0000b7ab l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0000a491 l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000555f2 l       .debug_str	00000000 
00055398 l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
00016c2d l       .debug_str	00000000 
000119ac l       .debug_str	00000000 
00018f4c l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
00054e47 l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
00014270 l       .debug_str	00000000 
00018fa2 l       .debug_str	00000000 
000115f7 l       .debug_str	00000000 
00018fa1 l       .debug_str	00000000 
00018fa5 l       .debug_str	00000000 
00018faf l       .debug_str	00000000 
0000114c l       .debug_str	00000000 
00001155 l       .debug_str	00000000 
00057387 l       .debug_str	00000000 
0000115f l       .debug_str	00000000 
00001180 l       .debug_str	00000000 
00018fb5 l       .debug_str	00000000 
00018fb9 l       .debug_str	00000000 
000181b1 l       .debug_str	00000000 
00018fbe l       .debug_str	00000000 
00018fbd l       .debug_str	00000000 
00018fc1 l       .debug_str	00000000 
00018fc5 l       .debug_str	00000000 
00018fca l       .debug_str	00000000 
00018fc9 l       .debug_str	00000000 
00018fcd l       .debug_str	00000000 
00018fd1 l       .debug_str	00000000 
00054e76 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001801b l       .debug_str	00000000 
00018070 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058f81 l       .debug_str	00000000 
0002fe0e l       .debug_str	00000000 
00011372 l       .debug_str	00000000 
00011377 l       .debug_str	00000000 
0001137d l       .debug_str	00000000 
0001464b l       .debug_str	00000000 
0000a068 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0001139c l       .debug_str	00000000 
00032d0d l       .debug_str	00000000 
000113a7 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00000d22 l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00000d28 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d3b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d44 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d69 l       .debug_str	00000000 
00000d7a l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000db7 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
0005919d l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c70 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00033b92 l       .debug_str	00000000 
00057399 l       .debug_str	00000000 
00000c8e l       .debug_str	00000000 
00000c95 l       .debug_str	00000000 
00000c9b l       .debug_str	00000000 
00000ca3 l       .debug_str	00000000 
00000ca9 l       .debug_str	00000000 
00000cce l       .debug_str	00000000 
00000cb4 l       .debug_str	00000000 
00000cd7 l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00055003 l       .debug_str	00000000 
00000e15 l       .debug_str	00000000 
00000e32 l       .debug_str	00000000 
0002ea09 l       .debug_str	00000000 
0000e073 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
000114ea l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c51 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
000011d9 l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
000011ec l       .debug_str	00000000 
000011f7 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
0000122d l       .debug_str	00000000 
00001237 l       .debug_str	00000000 
00001242 l       .debug_str	00000000 
0000124d l       .debug_str	00000000 
0000125a l       .debug_str	00000000 
00001266 l       .debug_str	00000000 
00001273 l       .debug_str	00000000 
00001281 l       .debug_str	00000000 
0000128b l       .debug_str	00000000 
0000a05c l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00018fd5 l       .debug_str	00000000 
00056835 l       .debug_str	00000000 
0001905a l       .debug_str	00000000 
000190c7 l       .debug_str	00000000 
00019139 l       .debug_str	00000000 
00055611 l       .debug_str	00000000 
0005919d l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00019197 l       .debug_str	00000000 
000491ce l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0000aae6 l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00016c49 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00058f81 l       .debug_str	00000000 
000113a7 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
000191b4 l       .debug_str	00000000 
0002e2d0 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
00019215 l       .debug_str	00000000 
00014073 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
0002b61e l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
00019879 l       .debug_str	00000000 
000198e4 l       .debug_str	00000000 
0001992a l       .debug_str	00000000 
0001999c l       .debug_str	00000000 
0000a0a5 l       .debug_str	00000000 
00019be1 l       .debug_str	00000000 
00019c53 l       .debug_str	00000000 
00019c9d l       .debug_str	00000000 
00019ce7 l       .debug_str	00000000 
00019f34 l       .debug_str	00000000 
00019f70 l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
00003470 l       .debug_str	00000000 
00019fb5 l       .debug_str	00000000 
00019ff2 l       .debug_str	00000000 
0001a038 l       .debug_str	00000000 
0001a075 l       .debug_str	00000000 
0001a2b6 l       .debug_str	00000000 
0001a2f6 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0001a53a l       .debug_str	00000000 
0001a78e l       .debug_str	00000000 
0001a7e7 l       .debug_str	00000000 
0001aa37 l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
0001aa8c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000501a l       .debug_str	00000000 
0000ba76 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0005a911 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
00005042 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00005050 l       .debug_str	00000000 
00005058 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
00005062 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
000041fe l       .debug_str	00000000 
000052de l       .debug_str	00000000 
00005323 l       .debug_str	00000000 
00005391 l       .debug_str	00000000 
00005428 l       .debug_str	00000000 
000054e8 l       .debug_str	00000000 
000055d1 l       .debug_str	00000000 
000056e3 l       .debug_str	00000000 
0000581e l       .debug_str	00000000 
00005982 l       .debug_str	00000000 
00005b0f l       .debug_str	00000000 
00005cc5 l       .debug_str	00000000 
00005ea4 l       .debug_str	00000000 
000060ac l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
00005093 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00005099 l       .debug_str	00000000 
0000509c l       .debug_str	00000000 
000050c5 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
000050fb l       .debug_str	00000000 
000062dd l       .debug_str	00000000 
000062e0 l       .debug_str	00000000 
00006330 l       .debug_str	00000000 
0000638d l       .debug_str	00000000 
000063e1 l       .debug_str	00000000 
00006458 l       .debug_str	00000000 
000064dc l       .debug_str	00000000 
00006557 l       .debug_str	00000000 
000065f5 l       .debug_str	00000000 
000066a0 l       .debug_str	00000000 
00006742 l       .debug_str	00000000 
00006807 l       .debug_str	00000000 
000068d9 l       .debug_str	00000000 
000069a2 l       .debug_str	00000000 
00006a8e l       .debug_str	00000000 
00006b87 l       .debug_str	00000000 
00006c77 l       .debug_str	00000000 
00006d8a l       .debug_str	00000000 
00006eaa l       .debug_str	00000000 
00006fc1 l       .debug_str	00000000 
000070fb l       .debug_str	00000000 
00007242 l       .debug_str	00000000 
00007380 l       .debug_str	00000000 
000074e1 l       .debug_str	00000000 
0000764f l       .debug_str	00000000 
000077b4 l       .debug_str	00000000 
0000793c l       .debug_str	00000000 
00007ad1 l       .debug_str	00000000 
00007c5d l       .debug_str	00000000 
00007e0c l       .debug_str	00000000 
00007fc8 l       .debug_str	00000000 
0000817b l       .debug_str	00000000 
00008351 l       .debug_str	00000000 
00008534 l       .debug_str	00000000 
0000870e l       .debug_str	00000000 
0000890b l       .debug_str	00000000 
00008b15 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008f3a l       .debug_str	00000000 
0000916b l       .debug_str	00000000 
00009393 l       .debug_str	00000000 
000095dc l       .debug_str	00000000 
00009842 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
0002b692 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0001a54e l       .debug_str	00000000 
00005128 l       .debug_str	00000000 
00005176 l       .debug_str	00000000 
000051e1 l       .debug_str	00000000 
0001a7a2 l       .debug_str	00000000 
00019278 l       .debug_str	00000000 
000192e0 l       .debug_str	00000000 
00019520 l       .debug_str	00000000 
00019588 l       .debug_str	00000000 
000195cd l       .debug_str	00000000 
00019638 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
0001aae2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
000011d9 l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
000011ec l       .debug_str	00000000 
000011f7 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
0000122d l       .debug_str	00000000 
00001237 l       .debug_str	00000000 
00001242 l       .debug_str	00000000 
0000124d l       .debug_str	00000000 
0000125a l       .debug_str	00000000 
00001266 l       .debug_str	00000000 
00001273 l       .debug_str	00000000 
00001281 l       .debug_str	00000000 
0000128b l       .debug_str	00000000 
0000a05c l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0001157e l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001aa91 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000c22 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
00016c35 l       .debug_str	00000000 
0000b3da l       .debug_str	00000000 
0000b3d9 l       .debug_str	00000000 
00016c49 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005919d l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0001ab04 l       .debug_str	00000000 
0001ab60 l       .debug_str	00000000 
0001abbd l       .debug_str	00000000 
0001ac1a l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
00010322 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
00009d95 l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
0001ade4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00058f81 l       .debug_str	00000000 
000113a7 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0002fe0e l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
0001ac77 l       .debug_str	00000000 
0001ace8 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0001acf4 l       .debug_str	00000000 
00012af9 l       .debug_str	00000000 
0001ad65 l       .debug_str	00000000 
0001add6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
0001b16f l       .debug_str	00000000 
0001b1da l       .debug_str	00000000 
0001b2a2 l       .debug_str	00000000 
0001b210 l       .debug_str	00000000 
0001b247 l       .debug_str	00000000 
0001b25a l       .debug_str	00000000 
0001b299 l       .debug_str	00000000 
0001b2b4 l       .debug_str	00000000 
0001b2ec l       .debug_str	00000000 
0001b300 l       .debug_str	00000000 
0001b32c l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0000114c l       .debug_str	00000000 
00016c35 l       .debug_str	00000000 
00001155 l       .debug_str	00000000 
0005a7e7 l       .debug_str	00000000 
0000115f l       .debug_str	00000000 
0000b3c6 l       .debug_str	00000000 
00001180 l       .debug_str	00000000 
00001185 l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c70 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00033b92 l       .debug_str	00000000 
00057399 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00000c8e l       .debug_str	00000000 
00000c95 l       .debug_str	00000000 
00000c9b l       .debug_str	00000000 
00000ca3 l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00000ca9 l       .debug_str	00000000 
00000cce l       .debug_str	00000000 
00000cb4 l       .debug_str	00000000 
00000cd7 l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00055003 l       .debug_str	00000000 
00000d22 l       .debug_str	00000000 
00000d28 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d3b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d44 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d69 l       .debug_str	00000000 
00000d7a l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000db7 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e15 l       .debug_str	00000000 
00000e32 l       .debug_str	00000000 
0002ea09 l       .debug_str	00000000 
0002e9fd l       .debug_str	00000000 
00016c49 l       .debug_str	00000000 
0000b3d2 l       .debug_str	00000000 
00055611 l       .debug_str	00000000 
0005a7e6 l       .debug_str	00000000 
0001b335 l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
000149e9 l       .debug_str	00000000 
0001b339 l       .debug_str	00000000 
00059d14 l       .debug_str	00000000 
000041be l       .debug_str	00000000 
000041c6 l       .debug_str	00000000 
000041cf l       .debug_str	00000000 
000041dd l       .debug_str	00000000 
000041e4 l       .debug_str	00000000 
00003e64 l       .debug_str	00000000 
00003e74 l       .debug_str	00000000 
00003e7d l       .debug_str	00000000 
00003e8b l       .debug_str	00000000 
00003e99 l       .debug_str	00000000 
00003ea5 l       .debug_str	00000000 
000040b3 l       .debug_str	00000000 
00003eb1 l       .debug_str	00000000 
00003ec0 l       .debug_str	00000000 
00003ec8 l       .debug_str	00000000 
00003ee1 l       .debug_str	00000000 
00003ef2 l       .debug_str	00000000 
00003efa l       .debug_str	00000000 
00003f2d l       .debug_str	00000000 
00003f14 l       .debug_str	00000000 
00003f39 l       .debug_str	00000000 
000015e2 l       .debug_str	00000000 
00003f6b l       .debug_str	00000000 
00003f52 l       .debug_str	00000000 
00003fa5 l       .debug_str	00000000 
00003f98 l       .debug_str	00000000 
00003f7f l       .debug_str	00000000 
000041eb l       .debug_str	00000000 
0000424e l       .debug_str	00000000 
000041f3 l       .debug_str	00000000 
00004212 l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
0000422d l       .debug_str	00000000 
00058df2 l       .debug_str	00000000 
00047419 l       .debug_str	00000000 
0001bf16 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
000565fc l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
0001b341 l       .debug_str	00000000 
00059e48 l       .debug_str	00000000 
00058188 l       .debug_str	00000000 
00056072 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00057dab l       .debug_str	00000000 
0000b868 l       .debug_str	00000000 
000553b5 l       .debug_str	00000000 
0000b875 l       .debug_str	00000000 
0000b879 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0000b883 l       .debug_str	00000000 
0000b88e l       .debug_str	00000000 
0000b898 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
0001b62a l       .debug_str	00000000 
0001adeb l       .debug_str	00000000 
0001ae1c l       .debug_str	00000000 
0000501a l       .debug_str	00000000 
0000ba76 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0005a911 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
00005042 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00005050 l       .debug_str	00000000 
00005058 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
00005062 l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00005093 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00005099 l       .debug_str	00000000 
0000509c l       .debug_str	00000000 
000050c5 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
000050fb l       .debug_str	00000000 
00005128 l       .debug_str	00000000 
00005176 l       .debug_str	00000000 
000051e1 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
0002b61e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0001a7a2 l       .debug_str	00000000 
0001ae28 l       .debug_str	00000000 
0001ae58 l       .debug_str	00000000 
000041fe l       .debug_str	00000000 
000052de l       .debug_str	00000000 
00005323 l       .debug_str	00000000 
00005391 l       .debug_str	00000000 
00005428 l       .debug_str	00000000 
000054e8 l       .debug_str	00000000 
000055d1 l       .debug_str	00000000 
000056e3 l       .debug_str	00000000 
0000581e l       .debug_str	00000000 
00005982 l       .debug_str	00000000 
00005b0f l       .debug_str	00000000 
00005cc5 l       .debug_str	00000000 
00005ea4 l       .debug_str	00000000 
000060ac l       .debug_str	00000000 
000062dd l       .debug_str	00000000 
000062e0 l       .debug_str	00000000 
00006330 l       .debug_str	00000000 
0000638d l       .debug_str	00000000 
000063e1 l       .debug_str	00000000 
00006458 l       .debug_str	00000000 
000064dc l       .debug_str	00000000 
00006557 l       .debug_str	00000000 
000065f5 l       .debug_str	00000000 
000066a0 l       .debug_str	00000000 
00006742 l       .debug_str	00000000 
00006807 l       .debug_str	00000000 
000068d9 l       .debug_str	00000000 
000069a2 l       .debug_str	00000000 
00006a8e l       .debug_str	00000000 
00006b87 l       .debug_str	00000000 
00006c77 l       .debug_str	00000000 
00006d8a l       .debug_str	00000000 
00006eaa l       .debug_str	00000000 
00006fc1 l       .debug_str	00000000 
000070fb l       .debug_str	00000000 
00007242 l       .debug_str	00000000 
00007380 l       .debug_str	00000000 
000074e1 l       .debug_str	00000000 
0000764f l       .debug_str	00000000 
000077b4 l       .debug_str	00000000 
0000793c l       .debug_str	00000000 
00007ad1 l       .debug_str	00000000 
00007c5d l       .debug_str	00000000 
00007e0c l       .debug_str	00000000 
00007fc8 l       .debug_str	00000000 
0000817b l       .debug_str	00000000 
00008351 l       .debug_str	00000000 
00008534 l       .debug_str	00000000 
0000870e l       .debug_str	00000000 
0000890b l       .debug_str	00000000 
00008b15 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008f3a l       .debug_str	00000000 
0000916b l       .debug_str	00000000 
00009393 l       .debug_str	00000000 
000095dc l       .debug_str	00000000 
00009842 l       .debug_str	00000000 
0002b692 l       .debug_str	00000000 
0001a54e l       .debug_str	00000000 
0001ae65 l       .debug_str	00000000 
0001ae96 l       .debug_str	00000000 
000012bb l       .debug_str	00000000 
0003cd4c l       .debug_str	00000000 
00004e6f l       .debug_str	00000000 
00001633 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
0000163d l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
00059c8b l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
000546c8 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00001298 l       .debug_str	00000000 
0000129c l       .debug_str	00000000 
000012a7 l       .debug_str	00000000 
000012e6 l       .debug_str	00000000 
000012d6 l       .debug_str	00000000 
00001646 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00001673 l       .debug_str	00000000 
000015af l       .debug_str	00000000 
0005aac6 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
000016a8 l       .debug_str	00000000 
000016d1 l       .debug_str	00000000 
0000172f l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001795 l       .debug_str	00000000 
000016c1 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
000017b3 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
000017c9 l       .debug_str	00000000 
000017ef l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001805 l       .debug_str	00000000 
00004f9a l       .debug_str	00000000 
000017ce l       .debug_str	00000000 
00004df3 l       .debug_str	00000000 
00049d58 l       .debug_str	00000000 
00004e78 l       .debug_str	00000000 
00004e83 l       .debug_str	00000000 
0001ae9e l       .debug_str	00000000 
0001aec9 l       .debug_str	00000000 
0001aeda l       .debug_str	00000000 
0001af0f l       .debug_str	00000000 
000043f3 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
000040aa l       .debug_str	00000000 
000040b2 l       .debug_str	00000000 
00003f76 l       .debug_str	00000000 
000040bc l       .debug_str	00000000 
00004362 l       .debug_str	00000000 
00004349 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
00004344 l       .debug_str	00000000 
00004371 l       .debug_str	00000000 
000043fb l       .debug_str	00000000 
00002ca9 l       .debug_str	00000000 
00058015 l       .debug_str	00000000 
0000393f l       .debug_str	00000000 
00002cb3 l       .debug_str	00000000 
00002ceb l       .debug_str	00000000 
00002d2b l       .debug_str	00000000 
00002d32 l       .debug_str	00000000 
00002d3a l       .debug_str	00000000 
00003958 l       .debug_str	00000000 
00004401 l       .debug_str	00000000 
0001af1e l       .debug_str	00000000 
0001af51 l       .debug_str	00000000 
000039e3 l       .debug_str	00000000 
000039ed l       .debug_str	00000000 
000039f6 l       .debug_str	00000000 
0000393a l       .debug_str	00000000 
00003961 l       .debug_str	00000000 
00003a96 l       .debug_str	00000000 
0001af61 l       .debug_str	00000000 
0001af95 l       .debug_str	00000000 
0001af9e l       .debug_str	00000000 
0001afca l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
0001afd9 l       .debug_str	00000000 
0001b00c l       .debug_str	00000000 
0001b019 l       .debug_str	00000000 
0001b025 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
000011d9 l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
000011ec l       .debug_str	00000000 
000011f7 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
0000122d l       .debug_str	00000000 
00001237 l       .debug_str	00000000 
00001242 l       .debug_str	00000000 
0000124d l       .debug_str	00000000 
0000125a l       .debug_str	00000000 
00001266 l       .debug_str	00000000 
00001273 l       .debug_str	00000000 
00001281 l       .debug_str	00000000 
0000128b l       .debug_str	00000000 
0000a05c l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0001b056 l       .debug_str	00000000 
0001b08b l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
0001b09c l       .debug_str	00000000 
0001b0ce l       .debug_str	00000000 
0001b0dc l       .debug_str	00000000 
0001b11a l       .debug_str	00000000 
0001b134 l       .debug_str	00000000 
0001b186 l       .debug_str	00000000 
0001b1c2 l       .debug_str	00000000 
20000210 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20000218 l     O .bss	00002004 _ZN6mynewt3spi12PENDING_DATA17hf749c482f1fd6e90E
200026a4 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f0 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
0000d51c l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
2000222c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
200022a4 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20002244 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20002224 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
0000d834 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
0000da1e l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
0000e03c l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
0000dd06 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
2000221c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20002254 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
0000e164 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
0001b0c0 l     O .text	0000001c str.0
0001b120 l     O .text	00000021 str.1
0001b180 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c84 l       .debug_str	00000000 
00033b92 l       .debug_str	00000000 
00057399 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00000c8e l       .debug_str	00000000 
00000c95 l       .debug_str	00000000 
00000c9b l       .debug_str	00000000 
00000ca3 l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00000ca9 l       .debug_str	00000000 
00000cce l       .debug_str	00000000 
00000cb4 l       .debug_str	00000000 
00000cd7 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00055003 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00000d22 l       .debug_str	00000000 
00000d28 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d3b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d44 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d69 l       .debug_str	00000000 
00000d7a l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000db7 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e15 l       .debug_str	00000000 
00000e32 l       .debug_str	00000000 
0002ea09 l       .debug_str	00000000 
0002e9fd l       .debug_str	00000000 
0001b63b l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
0001b641 l       .debug_str	00000000 
0000de98 l       .debug_str	00000000 
00058188 l       .debug_str	00000000 
00056072 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00001298 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0000129c l       .debug_str	00000000 
000012a7 l       .debug_str	00000000 
000012e6 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
000011d9 l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
000011ec l       .debug_str	00000000 
000011f7 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
0000122d l       .debug_str	00000000 
00001237 l       .debug_str	00000000 
00001242 l       .debug_str	00000000 
0000124d l       .debug_str	00000000 
0000125a l       .debug_str	00000000 
00001266 l       .debug_str	00000000 
00001273 l       .debug_str	00000000 
00001281 l       .debug_str	00000000 
0000128b l       .debug_str	00000000 
0000a05c l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000b875 l       .debug_str	00000000 
0000b8fa l       .debug_str	00000000 
00002c17 l       .debug_str	00000000 
0001b610 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
000551d5 l       .debug_str	00000000 
0001b653 l       .debug_str	00000000 
0000deaa l       .debug_str	00000000 
0001b34c l       .debug_str	00000000 
0003a01e l       .debug_str	00000000 
0001b377 l       .debug_str	00000000 
0005a820 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
0001b3a3 l       .debug_str	00000000 
0005bb24 l       .debug_str	00000000 
0001b414 l       .debug_str	00000000 
0001b440 l       .debug_str	00000000 
0001b46d l       .debug_str	00000000 
0001b4d9 l       .debug_str	00000000 
0001b4e1 l       .debug_str	00000000 
0001b54e l       .debug_str	00000000 
0001b557 l       .debug_str	00000000 
0001b584 l       .debug_str	00000000 
0001b32c l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0001b5fe l       .debug_str	00000000 
0001b62e l       .debug_str	00000000 
000553b5 l       .debug_str	00000000 
0000b879 l       .debug_str	00000000 
0000b883 l       .debug_str	00000000 
0000b88e l       .debug_str	00000000 
0000b898 l       .debug_str	00000000 
0001b62a l       .debug_str	00000000 
0001b614 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0000114c l       .debug_str	00000000 
00016c35 l       .debug_str	00000000 
00001155 l       .debug_str	00000000 
0000115f l       .debug_str	00000000 
0000b3c6 l       .debug_str	00000000 
00001180 l       .debug_str	00000000 
00001185 l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c70 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0001b380 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
000041f3 l       .debug_str	00000000 
00004212 l       .debug_str	00000000 
00004246 l       .debug_str	00000000 
0001b658 l       .debug_str	00000000 
0001b6aa l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
000114e2 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000012bb l       .debug_str	00000000 
0003cd4c l       .debug_str	00000000 
000041be l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
000041c6 l       .debug_str	00000000 
000041cf l       .debug_str	00000000 
000041dd l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
000041e4 l       .debug_str	00000000 
00003e64 l       .debug_str	00000000 
00003e74 l       .debug_str	00000000 
00003e7d l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00003e8b l       .debug_str	00000000 
00003e99 l       .debug_str	00000000 
00003ea5 l       .debug_str	00000000 
000040b3 l       .debug_str	00000000 
00003eb1 l       .debug_str	00000000 
00003ec0 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00003ec8 l       .debug_str	00000000 
00003ee1 l       .debug_str	00000000 
00001633 l       .debug_str	00000000 
00003ef2 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00003efa l       .debug_str	00000000 
00003f2d l       .debug_str	00000000 
00003f14 l       .debug_str	00000000 
00003f39 l       .debug_str	00000000 
000015e2 l       .debug_str	00000000 
00003f6b l       .debug_str	00000000 
00003f52 l       .debug_str	00000000 
00003f76 l       .debug_str	00000000 
00003fa5 l       .debug_str	00000000 
00003f98 l       .debug_str	00000000 
00003f7f l       .debug_str	00000000 
000041eb l       .debug_str	00000000 
0000422d l       .debug_str	00000000 
0000424e l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000041fe l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
0001ca1c l       .debug_str	00000000 
0001bc51 l       .debug_str	00000000 
000121f3 l       .debug_str	00000000 
0001bc94 l       .debug_str	00000000 
0001225a l       .debug_str	00000000 
0001bcf0 l       .debug_str	00000000 
000122ca l       .debug_str	00000000 
0001bd4f l       .debug_str	00000000 
00012263 l       .debug_str	00000000 
0001bda1 l       .debug_str	00000000 
0001bdf6 l       .debug_str	00000000 
0001be4c l       .debug_str	00000000 
0001be7a l       .debug_str	00000000 
0001be86 l       .debug_str	00000000 
0001beb8 l       .debug_str	00000000 
0001bedf l       .debug_str	00000000 
0001bf11 l       .debug_str	00000000 
0001bf21 l       .debug_str	00000000 
0001bf56 l       .debug_str	00000000 
0001bf69 l       .debug_str	00000000 
0000fcc3 l       .debug_str	00000000 
0001bf9f l       .debug_str	00000000 
0001bfe9 l       .debug_str	00000000 
0001bffa l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
0001c036 l       .debug_str	00000000 
000546f4 l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
0001c074 l       .debug_str	00000000 
0001c0b2 l       .debug_str	00000000 
00011689 l       .debug_str	00000000 
0001c0bf l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
0001c0cd l       .debug_str	00000000 
0001c0f5 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0001c134 l       .debug_str	00000000 
0001c162 l       .debug_str	00000000 
0001c169 l       .debug_str	00000000 
0001c20c l       .debug_str	00000000 
0001c21a l       .debug_str	00000000 
0003b548 l       .debug_str	00000000 
0001c2b2 l       .debug_str	00000000 
0001c34c l       .debug_str	00000000 
000102bc l       .debug_str	00000000 
0001c404 l       .debug_str	00000000 
0002e2d0 l       .debug_str	00000000 
00010834 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
000189a5 l       .debug_str	00000000 
0001c467 l       .debug_str	00000000 
0001c4d9 l       .debug_str	00000000 
0001c503 l       .debug_str	00000000 
0001c541 l       .debug_str	00000000 
0001c554 l       .debug_str	00000000 
0001c59f l       .debug_str	00000000 
0000bcd5 l       .debug_str	00000000 
0001c5a8 l       .debug_str	00000000 
0001c5ea l       .debug_str	00000000 
0001d8ab l       .debug_str	00000000 
0001c624 l       .debug_str	00000000 
0001c669 l       .debug_str	00000000 
0001c685 l       .debug_str	00000000 
0001c6c8 l       .debug_str	00000000 
0001c6de l       .debug_str	00000000 
0001c743 l       .debug_str	00000000 
0001c7a8 l       .debug_str	00000000 
0001c7e3 l       .debug_str	00000000 
0001c7f0 l       .debug_str	00000000 
0001881d l       .debug_str	00000000 
0001c823 l       .debug_str	00000000 
0000a15c l       .debug_str	00000000 
0001c869 l       .debug_str	00000000 
000178a6 l       .debug_str	00000000 
0001c8af l       .debug_str	00000000 
0000a404 l       .debug_str	00000000 
0001c8f6 l       .debug_str	00000000 
0001c93f l       .debug_str	00000000 
00012af9 l       .debug_str	00000000 
00010322 l       .debug_str	00000000 
0001414b l       .debug_str	00000000 
00010988 l       .debug_str	00000000 
00012b7f l       .debug_str	00000000 
0001c9b8 l       .debug_str	00000000 
0001c9fd l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
0001ca55 l       .debug_str	00000000 
0000a499 l       .debug_str	00000000 
0001ca6d l       .debug_str	00000000 
0001caa8 l       .debug_str	00000000 
0001cacc l       .debug_str	00000000 
0001caf2 l       .debug_str	00000000 
0001cb2d l       .debug_str	00000000 
0001cb50 l       .debug_str	00000000 
0001cb75 l       .debug_str	00000000 
0001cbb2 l       .debug_str	00000000 
0001cbc9 l       .debug_str	00000000 
0001cc06 l       .debug_str	00000000 
0001cc1d l       .debug_str	00000000 
00012f43 l       .debug_str	00000000 
0001cc6e l       .debug_str	00000000 
00014d35 l       .debug_str	00000000 
0001ccc9 l       .debug_str	00000000 
0001cd2c l       .debug_str	00000000 
0001cd6e l       .debug_str	00000000 
000131fc l       .debug_str	00000000 
0001cdd2 l       .debug_str	00000000 
00017bc6 l       .debug_str	00000000 
0001ce3f l       .debug_str	00000000 
0000a489 l       .debug_str	00000000 
0001cea1 l       .debug_str	00000000 
0001ceaf l       .debug_str	00000000 
0001cf1a l       .debug_str	00000000 
0001cf34 l       .debug_str	00000000 
0001cf4a l       .debug_str	00000000 
0001cfb5 l       .debug_str	00000000 
0001cfc5 l       .debug_str	00000000 
0001d031 l       .debug_str	00000000 
0001d043 l       .debug_str	00000000 
0001d0af l       .debug_str	00000000 
0001d0c0 l       .debug_str	00000000 
0001d127 l       .debug_str	00000000 
0001d15f l       .debug_str	00000000 
0001d1c9 l       .debug_str	00000000 
0001d251 l       .debug_str	00000000 
000134d8 l       .debug_str	00000000 
0001d2c5 l       .debug_str	00000000 
0001d347 l       .debug_str	00000000 
0001d35e l       .debug_str	00000000 
0001d39c l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
0002e542 l       .debug_str	00000000 
0002fe0e l       .debug_str	00000000 
0001d3af l       .debug_str	00000000 
0001d3be l       .debug_str	00000000 
0001d3fc l       .debug_str	00000000 
0001d40f l       .debug_str	00000000 
0001d43b l       .debug_str	00000000 
0001d444 l       .debug_str	00000000 
0001d470 l       .debug_str	00000000 
0001d479 l       .debug_str	00000000 
0001d4d9 l       .debug_str	00000000 
0002df79 l       .debug_str	00000000 
0001d52a l       .debug_str	00000000 
0001d57b l       .debug_str	00000000 
0001d5d8 l       .debug_str	00000000 
0001d636 l       .debug_str	00000000 
0001d905 l       .debug_str	00000000 
0001d687 l       .debug_str	00000000 
0001d6b0 l       .debug_str	00000000 
0001d713 l       .debug_str	00000000 
0001d724 l       .debug_str	00000000 
0001d731 l       .debug_str	00000000 
0001d746 l       .debug_str	00000000 
0001d797 l       .debug_str	00000000 
0001d7c0 l       .debug_str	00000000 
0001d823 l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
0001ade4 l       .debug_str	00000000 
0005b9cc l       .debug_str	00000000 
0000b818 l       .debug_str	00000000 
0001d840 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00033952 l       .debug_str	00000000 
000181b1 l       .debug_str	00000000 
00014948 l       .debug_str	00000000 
00055611 l       .debug_str	00000000 
000543c8 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0005a820 l       .debug_str	00000000 
00001def l       .debug_str	00000000 
00001df5 l       .debug_str	00000000 
0001d861 l       .debug_str	00000000 
00001fa1 l       .debug_str	00000000 
00003a7b l       .debug_str	00000000 
000022f0 l       .debug_str	00000000 
0001d865 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0001b8e6 l       .debug_str	00000000 
0001d877 l       .debug_str	00000000 
0001d87c l       .debug_str	00000000 
0001d881 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00014110 l       .debug_str	00000000 
0001d8a6 l       .debug_str	00000000 
00028108 l       .debug_str	00000000 
00057387 l       .debug_str	00000000 
000383ba l       .debug_str	00000000 
0001d8e2 l       .debug_str	00000000 
0001d8eb l       .debug_str	00000000 
00031944 l       .debug_str	00000000 
00055464 l       .debug_str	00000000 
0004768d l       .debug_str	00000000 
0001d8f4 l       .debug_str	00000000 
0001d8f8 l       .debug_str	00000000 
00031c0a l       .debug_str	00000000 
0000af50 l       .debug_str	00000000 
0000af64 l       .debug_str	00000000 
0001436f l       .debug_str	00000000 
0000af6d l       .debug_str	00000000 
0000af78 l       .debug_str	00000000 
0001436b l       .debug_str	00000000 
00014376 l       .debug_str	00000000 
0001091e l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0001d91a l       .debug_str	00000000 
0001d915 l       .debug_str	00000000 
000551e5 l       .debug_str	00000000 
0001d91e l       .debug_str	00000000 
00033720 l       .debug_str	00000000 
0001d927 l       .debug_str	00000000 
00001199 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0003620a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001b6cf l       .debug_str	00000000 
0001b729 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
0000bcb3 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0002e1ed l       .debug_str	00000000 
0001b778 l       .debug_str	00000000 
0001d852 l       .debug_str	00000000 
0001d845 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005919d l       .debug_str	00000000 
0001b780 l       .debug_str	00000000 
0001b78d l       .debug_str	00000000 
0001b796 l       .debug_str	00000000 
000542e2 l       .debug_str	00000000 
0002e5b9 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00011396 l       .debug_str	00000000 
00058f81 l       .debug_str	00000000 
000113a7 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
000114e2 l       .debug_str	00000000 
0000a40d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002fde8 l       .debug_str	00000000 
000114ea l       .debug_str	00000000 
00000c78 l       .debug_str	00000000 
0000aaec l       .debug_str	00000000 
0000ab2d l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00011511 l       .debug_str	00000000 
0000a068 l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
0000a416 l       .debug_str	00000000 
00011667 l       .debug_str	00000000 
00028118 l       .debug_str	00000000 
00002808 l       .debug_str	00000000 
00054e47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0001157e l       .debug_str	00000000 
00057415 l       .debug_str	00000000 
000114f4 l       .debug_str	00000000 
00030c6c l       .debug_str	00000000 
00011385 l       .debug_str	00000000 
00055398 l       .debug_str	00000000 
0001b612 l       .debug_str	00000000 
0001d8c6 l       .debug_str	00000000 
00011516 l       .debug_str	00000000 
0001b7a0 l       .debug_str	00000000 
0001b7de l       .debug_str	00000000 
0001b7ed l       .debug_str	00000000 
000577c6 l       .debug_str	00000000 
00040f72 l       .debug_str	00000000 
0005a89a l       .debug_str	00000000 
0001b804 l       .debug_str	00000000 
00011545 l       .debug_str	00000000 
0001b82d l       .debug_str	00000000 
0001b85f l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0001b871 l       .debug_str	00000000 
0000b6eb l       .debug_str	00000000 
0000ded5 l       .debug_str	00000000 
00001174 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
0001b87e l       .debug_str	00000000 
0001d890 l       .debug_str	00000000 
000115ba l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
0001b88c l       .debug_str	00000000 
00011642 l       .debug_str	00000000 
00011655 l       .debug_str	00000000 
00059e16 l       .debug_str	00000000 
0000b029 l       .debug_str	00000000 
0004567d l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
0005447d l       .debug_str	00000000 
0001b8ce l       .debug_str	00000000 
0001b8d2 l       .debug_str	00000000 
0001b8dd l       .debug_str	00000000 
0001b8ec l       .debug_str	00000000 
0001b934 l       .debug_str	00000000 
0001b954 l       .debug_str	00000000 
00034497 l       .debug_str	00000000 
0001d878 l       .debug_str	00000000 
0001b99f l       .debug_str	00000000 
0001d87d l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
0001b9ea l       .debug_str	00000000 
0001add6 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
0001ba5b l       .debug_str	00000000 
00011cdc l       .debug_str	00000000 
0001ba89 l       .debug_str	00000000 
00018741 l       .debug_str	00000000 
0001bad1 l       .debug_str	00000000 
0001bb01 l       .debug_str	00000000 
0001bb2c l       .debug_str	00000000 
00018817 l       .debug_str	00000000 
00018830 l       .debug_str	00000000 
0001bb63 l       .debug_str	00000000 
000122d3 l       .debug_str	00000000 
0001bbb4 l       .debug_str	00000000 
00012147 l       .debug_str	00000000 
0001bc06 l       .debug_str	00000000 
0001219e l       .debug_str	00000000 
0000e7ac l     F .text	00000036 _ZN4core3str11unwrap_or_017h4928c04127a0a0e5E
0000e91a l     F .text	0000001c _ZN4core3str15utf8_first_byte17h7c04e20cd0f42409E
0000e936 l     F .text	00000016 _ZN4core3str18utf8_acc_cont_byte17hbe5b180398a534eeE
0000e94c l     F .text	00000012 _ZN4core4char7convert18from_u32_unchecked17hdfaf04c9ffabd56fE
00000000 l    df *ABS*	00000000 14b1fh7fu0yejetg
0001ddff l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
0000bb33 l       .debug_str	00000000 
0001e0ab l       .debug_str	00000000 
0001da26 l       .debug_str	00000000 
0001dacc l       .debug_str	00000000 
0001db39 l       .debug_str	00000000 
0001dbdd l       .debug_str	00000000 
0001dc49 l       .debug_str	00000000 
0001dcef l       .debug_str	00000000 
0000deb0 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
0000debc l       .debug_str	00000000 
0000dec8 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000ded5 l       .debug_str	00000000 
0005bf39 l       .debug_str	00000000 
0001e14a l       .debug_str	00000000 
0001dd5b l       .debug_str	00000000 
0001de66 l       .debug_str	00000000 
0001df0c l       .debug_str	00000000 
0001df75 l       .debug_str	00000000 
0001e01b l       .debug_str	00000000 
0000dee2 l       .debug_str	00000000 
0000deeb l       .debug_str	00000000 
0000def9 l       .debug_str	00000000 
00016d5f l       .debug_str	00000000 
0000df11 l       .debug_str	00000000 
00010a9a l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0001e082 l       .debug_str	00000000 
0001e11a l       .debug_str	00000000 
0000bb10 l       .debug_str	00000000 
0001e11d l       .debug_str	00000000 
0000e7cc l       .debug_str	00000000 
0001e1c1 l       .debug_str	00000000 
000155b6 l       .debug_str	00000000 
0001e1ca l       .debug_str	00000000 
0001e1ce l       .debug_str	00000000 
0001e1d5 l       .debug_str	00000000 
0001e1dc l       .debug_str	00000000 
0001e1ed l       .debug_str	00000000 
0001e1f9 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
00001def l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000bac4 l       .debug_str	00000000 
0000baca l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
0000bb29 l       .debug_str	00000000 
00016de8 l       .debug_str	00000000 
00016e23 l       .debug_str	00000000 
0001d933 l       .debug_str	00000000 
0001d9be l       .debug_str	00000000 
00014367 l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00016cae l       .debug_str	00000000 
0005a542 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
0000bae6 l       .debug_str	00000000 
0000baec l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0001e82b l       .debug_str	00000000 
0000bb09 l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
0002f0ee l       .debug_str	00000000 
00028992 l       .debug_str	00000000 
0000bb23 l       .debug_str	00000000 
0001b420 l     O .text	00000021 str.0
0001b460 l     O .text	0000001c str.1
0001b4b0 l     O .text	00000021 str.2
0001c810 l     O .text	00000023 str.3
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0000e07a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001e204 l       .debug_str	00000000 
0001e22d l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0001e2be l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0001e23a l       .debug_str	00000000 
00011545 l       .debug_str	00000000 
0000bcb3 l       .debug_str	00000000 
0005961e l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0001e263 l       .debug_str	00000000 
0001e2b8 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000e099 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
0001e504 l       .debug_str	00000000 
0001e36c l       .debug_str	00000000 
0001e3a8 l       .debug_str	00000000 
0001e3c4 l       .debug_str	00000000 
0001e400 l       .debug_str	00000000 
0001e436 l       .debug_str	00000000 
0001e472 l       .debug_str	00000000 
0001e47d l       .debug_str	00000000 
0001e4b9 l       .debug_str	00000000 
0001e4c7 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
0001e53b l       .debug_str	00000000 
0001e578 l       .debug_str	00000000 
0001e587 l       .debug_str	00000000 
0001e5c4 l       .debug_str	00000000 
0001e607 l       .debug_str	00000000 
0001e644 l       .debug_str	00000000 
0000e07f l       .debug_str	00000000 
0001e67b l       .debug_str	00000000 
0001e6b9 l       .debug_str	00000000 
0001e6f0 l       .debug_str	00000000 
0001e72f l       .debug_str	00000000 
0001e768 l       .debug_str	00000000 
0001e7cc l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0001e801 l       .debug_str	00000000 
0000347f l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
0001e81c l       .debug_str	00000000 
0001e861 l       .debug_str	00000000 
0001e87e l       .debug_str	00000000 
00011677 l       .debug_str	00000000 
00016cd1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00010988 l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
0001098c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0001e88d l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
0001e810 l       .debug_str	00000000 
0000e9ca l       .debug_str	00000000 
00059261 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0001d87d l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0001ea42 l       .debug_str	00000000 
0001e2c2 l       .debug_str	00000000 
0001e82b l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0000e099 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
0001e870 l       .debug_str	00000000 
0000e07a l       .debug_str	00000000 
0001e2de l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000dee2 l       .debug_str	00000000 
0000deeb l       .debug_str	00000000 
0000def9 l       .debug_str	00000000 
00016d5f l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
0000df11 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0000e7a6 l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
00012b7f l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
0001e2eb l       .debug_str	00000000 
000109ff l       .debug_str	00000000 
00010a9a l       .debug_str	00000000 
0001e324 l       .debug_str	00000000 
0001e360 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1i10ukgv8hgyc1v7
0005912a l       .debug_str	00000000 
0001f35c l       .debug_str	00000000 
0001f367 l       .debug_str	00000000 
0001f36e l       .debug_str	00000000 
0001f3d9 l       .debug_str	00000000 
0001f50a l       .debug_str	00000000 
0001f577 l       .debug_str	00000000 
0001f5e9 l       .debug_str	00000000 
0001f6f7 l       .debug_str	00000000 
0001f702 l       .debug_str	00000000 
0001f774 l       .debug_str	00000000 
0001f8a9 l       .debug_str	00000000 
0001f91b l       .debug_str	00000000 
0001f9eb l       .debug_str	00000000 
0001fa06 l       .debug_str	00000000 
0001fa50 l       .debug_str	00000000 
0001fb8d l       .debug_str	00000000 
0001fbc8 l       .debug_str	00000000 
0001fcd0 l       .debug_str	00000000 
0001fd0b l       .debug_str	00000000 
0001fe3a l       .debug_str	00000000 
0001fe75 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0001e2c2 l       .debug_str	00000000 
0001ff3f l       .debug_str	00000000 
0001ff7b l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
00020046 l       .debug_str	00000000 
00020066 l       .debug_str	00000000 
000200a2 l       .debug_str	00000000 
00025f4c l       .debug_str	00000000 
000201ab l       .debug_str	00000000 
000201e8 l       .debug_str	00000000 
000202f2 l       .debug_str	00000000 
0002032f l       .debug_str	00000000 
00020460 l       .debug_str	00000000 
000204e1 l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
00020d7d l       .debug_str	00000000 
00020616 l       .debug_str	00000000 
00020694 l       .debug_str	00000000 
000207c4 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
000207d0 l       .debug_str	00000000 
000208af l       .debug_str	00000000 
000209c8 l       .debug_str	00000000 
00020b08 l       .debug_str	00000000 
00020c25 l       .debug_str	00000000 
00020d69 l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
0001aa8c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000501a l       .debug_str	00000000 
0000ba76 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0005a911 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
00005042 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00005050 l       .debug_str	00000000 
00005058 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
0000bf4a l       .debug_str	00000000 
0000bf67 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
0000bfad l       .debug_str	00000000 
0000bfbe l       .debug_str	00000000 
0000c02e l       .debug_str	00000000 
0000c0c8 l       .debug_str	00000000 
0000c18b l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
00005093 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00005099 l       .debug_str	00000000 
0000509c l       .debug_str	00000000 
000050c5 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
000050fb l       .debug_str	00000000 
0000c38f l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000c43c l       .debug_str	00000000 
000062dd l       .debug_str	00000000 
0000c490 l       .debug_str	00000000 
0000c507 l       .debug_str	00000000 
0000c58b l       .debug_str	00000000 
0000c606 l       .debug_str	00000000 
0000c6a4 l       .debug_str	00000000 
0000c74f l       .debug_str	00000000 
0000c7f1 l       .debug_str	00000000 
0000c8b6 l       .debug_str	00000000 
0000c988 l       .debug_str	00000000 
0000ca51 l       .debug_str	00000000 
0000cb3d l       .debug_str	00000000 
0000cc36 l       .debug_str	00000000 
0000cd26 l       .debug_str	00000000 
0000ce39 l       .debug_str	00000000 
0000cf59 l       .debug_str	00000000 
0000d070 l       .debug_str	00000000 
0000d1a9 l       .debug_str	00000000 
0000d2ff l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
00024db2 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00020c39 l       .debug_str	00000000 
0000e17a l       .debug_str	00000000 
0000e28c l       .debug_str	00000000 
0000e3bb l       .debug_str	00000000 
00024c7a l       .debug_str	00000000 
00020b1c l       .debug_str	00000000 
0000e9ca l       .debug_str	00000000 
00059261 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0001d87d l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0001ea42 l       .debug_str	00000000 
0000ea23 l       .debug_str	00000000 
0000ea50 l       .debug_str	00000000 
0000ea71 l       .debug_str	00000000 
0000ead8 l       .debug_str	00000000 
0000eb78 l       .debug_str	00000000 
000062e0 l       .debug_str	00000000 
00006330 l       .debug_str	00000000 
0000638d l       .debug_str	00000000 
0000ec52 l       .debug_str	00000000 
0000ecc9 l       .debug_str	00000000 
0000ed4d l       .debug_str	00000000 
0000edc8 l       .debug_str	00000000 
0000ee66 l       .debug_str	00000000 
0000ef11 l       .debug_str	00000000 
0002218c l       .debug_str	00000000 
000218c3 l       .debug_str	00000000 
00021bfa l       .debug_str	00000000 
00024b80 l       .debug_str	00000000 
000207e4 l       .debug_str	00000000 
0001e8cf l       .debug_str	00000000 
0001e95d l       .debug_str	00000000 
0000a068 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
0000a40d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001ea2d l       .debug_str	00000000 
0001ea48 l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
0000f87b l       .debug_str	00000000 
0001ea65 l       .debug_str	00000000 
0001ea7e l       .debug_str	00000000 
0002791f l       .debug_str	00000000 
0001eaa4 l       .debug_str	00000000 
0001eb0a l       .debug_str	00000000 
0001ec14 l       .debug_str	00000000 
0001ec7a l       .debug_str	00000000 
0001edab l       .debug_str	00000000 
0001ee13 l       .debug_str	00000000 
0001eede l       .debug_str	00000000 
0001ef46 l       .debug_str	00000000 
0001f04f l       .debug_str	00000000 
0001f0b7 l       .debug_str	00000000 
0001f1e7 l       .debug_str	00000000 
0001f252 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
0001c930 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d69 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e15 l       .debug_str	00000000 
00000e32 l       .debug_str	00000000 
0002ea09 l       .debug_str	00000000 
00020eb2 l       .debug_str	00000000 
00020efd l       .debug_str	00000000 
000011d2 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00020f2f l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c70 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00033b92 l       .debug_str	00000000 
00057399 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00000c8e l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000c95 l       .debug_str	00000000 
00000c9b l       .debug_str	00000000 
00000ca3 l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00000ca9 l       .debug_str	00000000 
00000cce l       .debug_str	00000000 
00000cb4 l       .debug_str	00000000 
00000cd7 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00055003 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00000d22 l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00000d28 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d3b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d44 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d7a l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000db7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 24fd677mu7rr1lzm
0001fa50 l       .debug_str	00000000 
000231bd l       .debug_str	00000000 
00023246 l       .debug_str	00000000 
00023380 l       .debug_str	00000000 
00023409 l       .debug_str	00000000 
0002351c l       .debug_str	00000000 
000235a8 l       .debug_str	00000000 
00023634 l       .debug_str	00000000 
0002374a l       .debug_str	00000000 
000237d6 l       .debug_str	00000000 
000238c4 l       .debug_str	00000000 
0001ff7b l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
00020046 l       .debug_str	00000000 
00023942 l       .debug_str	00000000 
000200a2 l       .debug_str	00000000 
00025f4c l       .debug_str	00000000 
000239c0 l       .debug_str	00000000 
000201e8 l       .debug_str	00000000 
00023a3f l       .debug_str	00000000 
0002032f l       .debug_str	00000000 
00023abe l       .debug_str	00000000 
0001eb0a l       .debug_str	00000000 
00023b3d l       .debug_str	00000000 
0001ec7a l       .debug_str	00000000 
00023bbc l       .debug_str	00000000 
00023c3e l       .debug_str	00000000 
0001f367 l       .debug_str	00000000 
00023d4b l       .debug_str	00000000 
00023dcd l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
00023eb2 l       .debug_str	00000000 
00023f34 l       .debug_str	00000000 
00024003 l       .debug_str	00000000 
0002401a l       .debug_str	00000000 
0002409c l       .debug_str	00000000 
000241d0 l       .debug_str	00000000 
00024252 l       .debug_str	00000000 
00024337 l       .debug_str	00000000 
000243b9 l       .debug_str	00000000 
000244c6 l       .debug_str	00000000 
00024548 l       .debug_str	00000000 
0002467c l       .debug_str	00000000 
000246fe l       .debug_str	00000000 
000247cd l       .debug_str	00000000 
0002484f l       .debug_str	00000000 
00024983 l       .debug_str	00000000 
00024a05 l       .debug_str	00000000 
00024b12 l       .debug_str	00000000 
00024b6e l       .debug_str	00000000 
00024c68 l       .debug_str	00000000 
00024da0 l       .debug_str	00000000 
0001aa8c l       .debug_str	00000000 
00024eff l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
00011511 l       .debug_str	00000000 
0000a068 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
0000a40d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0002500f l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
00016c3f l       .debug_str	00000000 
0002501c l       .debug_str	00000000 
00027854 l       .debug_str	00000000 
0005b9cc l       .debug_str	00000000 
00001199 l       .debug_str	00000000 
0002502e l       .debug_str	00000000 
0002fde8 l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
0000a416 l       .debug_str	00000000 
00011667 l       .debug_str	00000000 
00025033 l       .debug_str	00000000 
0003a01e l       .debug_str	00000000 
00025167 l       .debug_str	00000000 
000252c2 l       .debug_str	00000000 
000253ce l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000501a l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0005a911 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
00005042 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00005050 l       .debug_str	00000000 
00005058 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
00005062 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
000041fe l       .debug_str	00000000 
000052de l       .debug_str	00000000 
00020f33 l       .debug_str	00000000 
00020fa0 l       .debug_str	00000000 
00021036 l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00005093 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00005099 l       .debug_str	00000000 
0000509c l       .debug_str	00000000 
000050c5 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
000050fb l       .debug_str	00000000 
000062dd l       .debug_str	00000000 
000062e0 l       .debug_str	00000000 
00006330 l       .debug_str	00000000 
0000638d l       .debug_str	00000000 
0000ec52 l       .debug_str	00000000 
0000ecc9 l       .debug_str	00000000 
0000ed4d l       .debug_str	00000000 
0000edc8 l       .debug_str	00000000 
0000ee66 l       .debug_str	00000000 
0000ef11 l       .debug_str	00000000 
000210f5 l       .debug_str	00000000 
000211ba l       .debug_str	00000000 
0002128c l       .debug_str	00000000 
00021355 l       .debug_str	00000000 
0002143f l       .debug_str	00000000 
00021546 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
00024f11 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
0000bf4a l       .debug_str	00000000 
0000bf67 l       .debug_str	00000000 
0000bfad l       .debug_str	00000000 
0000bfbe l       .debug_str	00000000 
0000c02e l       .debug_str	00000000 
0000c0c8 l       .debug_str	00000000 
0000c18b l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0000c38f l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000c43c l       .debug_str	00000000 
0000c490 l       .debug_str	00000000 
0000c507 l       .debug_str	00000000 
0000c58b l       .debug_str	00000000 
0000c606 l       .debug_str	00000000 
0000c6a4 l       .debug_str	00000000 
0000c74f l       .debug_str	00000000 
0000c7f1 l       .debug_str	00000000 
0000c8b6 l       .debug_str	00000000 
0000c988 l       .debug_str	00000000 
0000ca51 l       .debug_str	00000000 
0000cb3d l       .debug_str	00000000 
0000cc36 l       .debug_str	00000000 
0000cd26 l       .debug_str	00000000 
0000ce39 l       .debug_str	00000000 
0000cf59 l       .debug_str	00000000 
0000d070 l       .debug_str	00000000 
0000d1a9 l       .debug_str	00000000 
0000d2ff l       .debug_str	00000000 
00024db2 l       .debug_str	00000000 
0000e17a l       .debug_str	00000000 
0000e28c l       .debug_str	00000000 
0000e3bb l       .debug_str	00000000 
00024c7a l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000e9ca l       .debug_str	00000000 
00059261 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0001d87d l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0001ea42 l       .debug_str	00000000 
0000ea23 l       .debug_str	00000000 
0000ea50 l       .debug_str	00000000 
0000ea71 l       .debug_str	00000000 
0000ead8 l       .debug_str	00000000 
0000eb78 l       .debug_str	00000000 
0002218c l       .debug_str	00000000 
0002164c l       .debug_str	00000000 
000216ce l       .debug_str	00000000 
000217bc l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
000218c3 l       .debug_str	00000000 
000218a4 l       .debug_str	00000000 
00021bfa l       .debug_str	00000000 
000219b4 l       .debug_str	00000000 
00021a05 l       .debug_str	00000000 
00021af4 l       .debug_str	00000000 
00021bdc l       .debug_str	00000000 
00024b80 l       .debug_str	00000000 
00021cea l       .debug_str	00000000 
00021d65 l       .debug_str	00000000 
00021e4f l       .debug_str	00000000 
00021f33 l       .debug_str	00000000 
0002203f l       .debug_str	00000000 
0002208b l       .debug_str	00000000 
00022176 l       .debug_str	00000000 
00022260 l       .debug_str	00000000 
0000ba76 l       .debug_str	00000000 
0002236a l       .debug_str	00000000 
0002246b l       .debug_str	00000000 
000224c1 l       .debug_str	00000000 
000225bf l       .debug_str	00000000 
00022615 l       .debug_str	00000000 
00022762 l       .debug_str	00000000 
000227b8 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000228de l       .debug_str	00000000 
00022965 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
0001ea2d l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
0001f9eb l       .debug_str	00000000 
00022a38 l       .debug_str	00000000 
00022abf l       .debug_str	00000000 
0001f35c l       .debug_str	00000000 
0001f6f7 l       .debug_str	00000000 
00022bd0 l       .debug_str	00000000 
00022c57 l       .debug_str	00000000 
00022d8f l       .debug_str	00000000 
00022e17 l       .debug_str	00000000 
00022eeb l       .debug_str	00000000 
00022f74 l       .debug_str	00000000 
00023049 l       .debug_str	00000000 
000230d2 l       .debug_str	00000000 
0001c9b0 l     O .text	00000021 str.0
0001c9f0 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
0002e56b l       .debug_str	00000000 
000257c9 l       .debug_str	00000000 
000257d6 l       .debug_str	00000000 
00025816 l       .debug_str	00000000 
00025913 l       .debug_str	00000000 
00025953 l       .debug_str	00000000 
00025962 l       .debug_str	00000000 
000259a2 l       .debug_str	00000000 
000259c1 l       .debug_str	00000000 
00025a01 l       .debug_str	00000000 
00025a1d l       .debug_str	00000000 
00025a5d l       .debug_str	00000000 
00025a6b l       .debug_str	00000000 
00025aab l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
0000b8ef l       .debug_str	00000000 
0000bcca l       .debug_str	00000000 
0000de71 l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
00025ab9 l       .debug_str	00000000 
00025afa l       .debug_str	00000000 
0000ba7a l       .debug_str	00000000 
00025b2f l       .debug_str	00000000 
00012b7f l       .debug_str	00000000 
00025b39 l       .debug_str	00000000 
00025b7a l       .debug_str	00000000 
0000de67 l       .debug_str	00000000 
00025bc7 l       .debug_str	00000000 
00025c08 l       .debug_str	00000000 
00025c3d l       .debug_str	00000000 
00025c48 l       .debug_str	00000000 
00025c89 l       .debug_str	00000000 
00025cd6 l       .debug_str	00000000 
00025d17 l       .debug_str	00000000 
00025d4c l       .debug_str	00000000 
00025dbb l       .debug_str	00000000 
00025ebc l       .debug_str	00000000 
00025f2b l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00025f3d l       .debug_str	00000000 
00025f5c l       .debug_str	00000000 
0000347f l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000149e9 l       .debug_str	00000000 
00055250 l       .debug_str	00000000 
00003a7b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
0000e9ca l       .debug_str	00000000 
00059261 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0001d87d l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0001ea42 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00013d6f l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
000011d9 l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
000011ec l       .debug_str	00000000 
000011f7 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
0000120f l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001222 l       .debug_str	00000000 
0000122d l       .debug_str	00000000 
00001237 l       .debug_str	00000000 
00001242 l       .debug_str	00000000 
0000124d l       .debug_str	00000000 
0000125a l       .debug_str	00000000 
00001266 l       .debug_str	00000000 
00001273 l       .debug_str	00000000 
00001281 l       .debug_str	00000000 
0000128b l       .debug_str	00000000 
0000a05c l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
00025f4c l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
0000501a l       .debug_str	00000000 
0005b2cb l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0000ba76 l       .debug_str	00000000 
0005a911 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
00005042 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00005050 l       .debug_str	00000000 
00005058 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
00005062 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
000041fe l       .debug_str	00000000 
000052de l       .debug_str	00000000 
00020f33 l       .debug_str	00000000 
00020fa0 l       .debug_str	00000000 
00021036 l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
00005093 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00005099 l       .debug_str	00000000 
0000509c l       .debug_str	00000000 
000050c5 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
000050fb l       .debug_str	00000000 
000062dd l       .debug_str	00000000 
000062e0 l       .debug_str	00000000 
00006330 l       .debug_str	00000000 
0000638d l       .debug_str	00000000 
0000ec52 l       .debug_str	00000000 
0000ecc9 l       .debug_str	00000000 
0000ed4d l       .debug_str	00000000 
0000edc8 l       .debug_str	00000000 
0000ee66 l       .debug_str	00000000 
0000ef11 l       .debug_str	00000000 
000210f5 l       .debug_str	00000000 
000211ba l       .debug_str	00000000 
0002128c l       .debug_str	00000000 
00021355 l       .debug_str	00000000 
0002143f l       .debug_str	00000000 
00021546 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
00024f11 l       .debug_str	00000000 
0002236a l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000254c4 l       .debug_str	00000000 
000255a4 l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
00020046 l       .debug_str	00000000 
000030f1 l       .debug_str	00000000 
0000ba71 l       .debug_str	00000000 
000256a2 l       .debug_str	00000000 
000256a9 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
000256b1 l       .debug_str	00000000 
000256c5 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000256f7 l       .debug_str	00000000 
0002570b l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0002573d l       .debug_str	00000000 
0002577c l       .debug_str	00000000 
0002578a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2nk42jtdlqpdrpvo
0000ec52 l       .debug_str	00000000 
000260e8 l       .debug_str	00000000 
0000ca51 l       .debug_str	00000000 
0000cb3d l       .debug_str	00000000 
0000cc36 l       .debug_str	00000000 
000261db l       .debug_str	00000000 
00026253 l       .debug_str	00000000 
0002636d l       .debug_str	00000000 
000263e5 l       .debug_str	00000000 
0000ecc9 l       .debug_str	00000000 
0000ed4d l       .debug_str	00000000 
0000edc8 l       .debug_str	00000000 
0000ee66 l       .debug_str	00000000 
0000ef11 l       .debug_str	00000000 
000264b1 l       .debug_str	00000000 
00026529 l       .debug_str	00000000 
000265f5 l       .debug_str	00000000 
0002666d l       .debug_str	00000000 
00026712 l       .debug_str	00000000 
0002678a l       .debug_str	00000000 
00026808 l       .debug_str	00000000 
00026880 l       .debug_str	00000000 
000268d7 l       .debug_str	00000000 
0002694f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00005093 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00005099 l       .debug_str	00000000 
0000509c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000050c5 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
000050fb l       .debug_str	00000000 
000062dd l       .debug_str	00000000 
000062e0 l       .debug_str	00000000 
00006330 l       .debug_str	00000000 
0000638d l       .debug_str	00000000 
00025f7a l       .debug_str	00000000 
00025ff2 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0000c38f l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000c43c l       .debug_str	00000000 
0000c490 l       .debug_str	00000000 
0000c507 l       .debug_str	00000000 
0000c58b l       .debug_str	00000000 
0000c606 l       .debug_str	00000000 
0000c6a4 l       .debug_str	00000000 
0000c74f l       .debug_str	00000000 
0000c7f1 l       .debug_str	00000000 
0000c8b6 l       .debug_str	00000000 
0000c988 l       .debug_str	00000000 
00026070 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2tupw4qr6cy3al7x
00000c6d l       .debug_str	00000000 
0001e82b l       .debug_str	00000000 
0000bb09 l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
0002f0ee l       .debug_str	00000000 
00028992 l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
000288b3 l       .debug_str	00000000 
000269f4 l       .debug_str	00000000 
00026a3d l       .debug_str	00000000 
0001aa8c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b851 l       .debug_str	00000000 
00014456 l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0000e7a6 l       .debug_str	00000000 
0000e7b0 l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00016cae l       .debug_str	00000000 
0000e7b9 l       .debug_str	00000000 
0000bae6 l       .debug_str	00000000 
0000baec l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 32m5mr5zne5f73k7
0000b913 l       .debug_str	00000000 
0000b8ef l       .debug_str	00000000 
00057daa l       .debug_str	00000000 
0000b902 l       .debug_str	00000000 
0005ac85 l       .debug_str	00000000 
0000b906 l       .debug_str	00000000 
0000b90a l       .debug_str	00000000 
0000118b l       .debug_str	00000000 
0005a0c1 l       .debug_str	00000000 
0000de28 l       .debug_str	00000000 
0000de17 l       .debug_str	00000000 
00056760 l       .debug_str	00000000 
00001199 l       .debug_str	00000000 
0005b9cc l       .debug_str	00000000 
00055611 l       .debug_str	00000000 
0000df46 l       .debug_str	00000000 
0002708c l       .debug_str	00000000 
00027128 l       .debug_str	00000000 
0000dee2 l       .debug_str	00000000 
0000deeb l       .debug_str	00000000 
0000def9 l       .debug_str	00000000 
00016d5f l       .debug_str	00000000 
0000df11 l       .debug_str	00000000 
00010a9a l       .debug_str	00000000 
0001e1ca l       .debug_str	00000000 
0000bb10 l       .debug_str	00000000 
00027133 l       .debug_str	00000000 
000271fd l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00011511 l       .debug_str	00000000 
00002808 l       .debug_str	00000000 
000115ba l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000b851 l       .debug_str	00000000 
0000e165 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
0000df4b l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0000e7a6 l       .debug_str	00000000 
0000e7b0 l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00016cae l       .debug_str	00000000 
0000e7b9 l       .debug_str	00000000 
0000bae6 l       .debug_str	00000000 
0000baec l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0001e82b l       .debug_str	00000000 
0000bb09 l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
0002f0ee l       .debug_str	00000000 
00028992 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
0002891b l       .debug_str	00000000 
0000e16b l       .debug_str	00000000 
0000e172 l       .debug_str	00000000 
0000de7e l       .debug_str	00000000 
0000501a l       .debug_str	00000000 
0000ba76 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0005a911 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
00005042 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00005050 l       .debug_str	00000000 
00005058 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
0000bf4a l       .debug_str	00000000 
0000bf67 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
0000bfad l       .debug_str	00000000 
0000bfbe l       .debug_str	00000000 
0000c02e l       .debug_str	00000000 
0000c0c8 l       .debug_str	00000000 
0000c18b l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
00005093 l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00005099 l       .debug_str	00000000 
0000509c l       .debug_str	00000000 
000050c5 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
000050fb l       .debug_str	00000000 
0000c38f l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000c43c l       .debug_str	00000000 
000062dd l       .debug_str	00000000 
0000c490 l       .debug_str	00000000 
0000c507 l       .debug_str	00000000 
0000c58b l       .debug_str	00000000 
0000c606 l       .debug_str	00000000 
0000c6a4 l       .debug_str	00000000 
0000c74f l       .debug_str	00000000 
0000c7f1 l       .debug_str	00000000 
0000c8b6 l       .debug_str	00000000 
0000c988 l       .debug_str	00000000 
0000ca51 l       .debug_str	00000000 
0000cb3d l       .debug_str	00000000 
0000cc36 l       .debug_str	00000000 
0000e17a l       .debug_str	00000000 
0000e28c l       .debug_str	00000000 
0000e3bb l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
00024c7a l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00020b1c l       .debug_str	00000000 
0000e7c6 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
000270b0 l       .debug_str	00000000 
0000e8ad l       .debug_str	00000000 
0000e8b3 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0000cd26 l       .debug_str	00000000 
0000ce39 l       .debug_str	00000000 
0000cf59 l       .debug_str	00000000 
0000d070 l       .debug_str	00000000 
0000d1a9 l       .debug_str	00000000 
0000d2ff l       .debug_str	00000000 
00024db2 l       .debug_str	00000000 
00020c39 l       .debug_str	00000000 
0000e8bc l       .debug_str	00000000 
00057a23 l       .debug_str	00000000 
00027157 l       .debug_str	00000000 
0001b612 l       .debug_str	00000000 
00026ab1 l       .debug_str	00000000 
00026b14 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000b875 l       .debug_str	00000000 
0000b8fa l       .debug_str	00000000 
00002c17 l       .debug_str	00000000 
0001b610 l       .debug_str	00000000 
000551d5 l       .debug_str	00000000 
0001b653 l       .debug_str	00000000 
00059719 l       .debug_str	00000000 
000288b3 l       .debug_str	00000000 
00026be4 l       .debug_str	00000000 
00026c27 l       .debug_str	00000000 
00026ccc l       .debug_str	00000000 
00026d0a l       .debug_str	00000000 
00026d7e l       .debug_str	00000000 
00026dbe l       .debug_str	00000000 
00026e60 l       .debug_str	00000000 
00026eee l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
0000f56f l       .debug_str	00000000 
0000f58b l       .debug_str	00000000 
00026f5f l       .debug_str	00000000 
00026fef l       .debug_str	00000000 
0000fc82 l       .debug_str	00000000 
0000fc24 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00014456 l       .debug_str	00000000 
0001cb40 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3ff1drew07lsxzqq
00027275 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00027206 l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000bac4 l       .debug_str	00000000 
0000bb29 l       .debug_str	00000000 
00016de8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ulq1z5tkxz9njop
00001139 l       .debug_str	00000000 
0002737a l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
00016c49 l       .debug_str	00000000 
00016c3f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00011516 l       .debug_str	00000000 
000113a7 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
000272b1 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00027315 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3v8l3aq2sstsyskg
00000c51 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000ded5 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0002749a l       .debug_str	00000000 
000274cc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00011511 l       .debug_str	00000000 
00011385 l       .debug_str	00000000 
00000c78 l       .debug_str	00000000 
0000a068 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
0000a40d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002fde8 l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
0000a416 l       .debug_str	00000000 
00011667 l       .debug_str	00000000 
00028118 l       .debug_str	00000000 
00054e76 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0001b612 l       .debug_str	00000000 
000274b5 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
000273df l       .debug_str	00000000 
0001c6c8 l       .debug_str	00000000 
0002741d l       .debug_str	00000000 
0001d347 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4f0czol4b3uljl4v
00000d37 l       .debug_str	00000000 
000275eb l       .debug_str	00000000 
0001ea2d l       .debug_str	00000000 
0001f9eb l       .debug_str	00000000 
0002760a l       .debug_str	00000000 
00027688 l       .debug_str	00000000 
00027718 l       .debug_str	00000000 
0002772f l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00010834 l       .debug_str	00000000 
000577c6 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
000189a5 l       .debug_str	00000000 
0000a20f l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
00014270 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0000a068 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000274d2 l       .debug_str	00000000 
0002755e l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
0001f35c l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0001f6f7 l       .debug_str	00000000 
0000e9ca l       .debug_str	00000000 
00059261 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0001d87d l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0001ea42 l       .debug_str	00000000 
0002756d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n9jsiq8blzioqfk
00027b7f l       .debug_str	00000000 
00027ac3 l       .debug_str	00000000 
00027ae0 l       .debug_str	00000000 
00027ae9 l       .debug_str	00000000 
00027b2f l       .debug_str	00000000 
00027b38 l       .debug_str	00000000 
00027db4 l       .debug_str	00000000 
00027bc8 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00010834 l       .debug_str	00000000 
0000a20f l       .debug_str	00000000 
00027bd4 l       .debug_str	00000000 
00027c50 l       .debug_str	00000000 
000577c6 l       .debug_str	00000000 
0000118a l       .debug_str	00000000 
000189a5 l       .debug_str	00000000 
00027c7b l       .debug_str	00000000 
00027cf7 l       .debug_str	00000000 
00027d29 l       .debug_str	00000000 
00027daf l       .debug_str	00000000 
00027dbe l       .debug_str	00000000 
00027718 l       .debug_str	00000000 
00027e2f l       .debug_str	00000000 
00027ea3 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00027ead l       .debug_str	00000000 
00027eba l       .debug_str	00000000 
00027f31 l       .debug_str	00000000 
00027f4b l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
00054e47 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0000a068 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000277b6 l       .debug_str	00000000 
000277df l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
0000a40d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001f35c l       .debug_str	00000000 
0002500f l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00016c3f l       .debug_str	00000000 
0002501c l       .debug_str	00000000 
00027854 l       .debug_str	00000000 
000277ec l       .debug_str	00000000 
0002782e l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00027842 l       .debug_str	00000000 
00059e16 l       .debug_str	00000000 
0000b029 l       .debug_str	00000000 
0004567d l       .debug_str	00000000 
0000f542 l       .debug_str	00000000 
0000e9ca l       .debug_str	00000000 
00059261 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0001d87d l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0001ea42 l       .debug_str	00000000 
0002785e l       .debug_str	00000000 
00027887 l       .debug_str	00000000 
0001ea2d l       .debug_str	00000000 
0001ea48 l       .debug_str	00000000 
0000f87b l       .debug_str	00000000 
0001ea65 l       .debug_str	00000000 
0001ea7e l       .debug_str	00000000 
0002791f l       .debug_str	00000000 
000278a4 l       .debug_str	00000000 
000278e9 l       .debug_str	00000000 
0002790d l       .debug_str	00000000 
0002793c l       .debug_str	00000000 
0002d7d6 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
0001f367 l       .debug_str	00000000 
0002796f l       .debug_str	00000000 
0002d834 l       .debug_str	00000000 
00024003 l       .debug_str	00000000 
000279a2 l       .debug_str	00000000 
0002d8b6 l       .debug_str	00000000 
0001f9eb l       .debug_str	00000000 
000279d9 l       .debug_str	00000000 
0002d93a l       .debug_str	00000000 
0001f6f7 l       .debug_str	00000000 
00027a10 l       .debug_str	00000000 
00027a5e l       .debug_str	00000000 
0001b612 l       .debug_str	00000000 
00027a6e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4wsv974b28b6brmj
0001b612 l       .debug_str	00000000 
00054e76 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
000274b5 l       .debug_str	00000000 
00028108 l       .debug_str	00000000 
00028018 l       .debug_str	00000000 
0002807b l       .debug_str	00000000 
0002809c l       .debug_str	00000000 
0001d347 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0005b9cc l       .debug_str	00000000 
00001199 l       .debug_str	00000000 
00028103 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00011511 l       .debug_str	00000000 
00002808 l       .debug_str	00000000 
000114f4 l       .debug_str	00000000 
00030c6c l       .debug_str	00000000 
000115ba l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00000c78 l       .debug_str	00000000 
0000a068 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
0000a40d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002fde8 l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
0000a416 l       .debug_str	00000000 
00011667 l       .debug_str	00000000 
00028118 l       .debug_str	00000000 
0000bcd5 l       .debug_str	00000000 
00027f6c l       .debug_str	00000000 
00027fab l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000ded5 l       .debug_str	00000000 
00027fc1 l       .debug_str	00000000 
00028001 l       .debug_str	00000000 
00011385 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z4uczzv8d994j8w
00001139 l       .debug_str	00000000 
0002822d l       .debug_str	00000000 
0002827f l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
00055398 l       .debug_str	00000000 
0000b029 l       .debug_str	00000000 
0005b9cc l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
000114e2 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002811e l       .debug_str	00000000 
0002816c l       .debug_str	00000000 
0000f542 l       .debug_str	00000000 
00028175 l       .debug_str	00000000 
000281c5 l       .debug_str	00000000 
000281d0 l       .debug_str	00000000 
00028221 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
00028805 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
0000dee2 l       .debug_str	00000000 
0000deeb l       .debug_str	00000000 
0000def9 l       .debug_str	00000000 
00016d5f l       .debug_str	00000000 
0000df11 l       .debug_str	00000000 
00010a9a l       .debug_str	00000000 
00028681 l       .debug_str	00000000 
0002873e l       .debug_str	00000000 
00028779 l       .debug_str	00000000 
000287d2 l       .debug_str	00000000 
0001e7cc l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00028888 l       .debug_str	00000000 
0001e11a l       .debug_str	00000000 
0000bb10 l       .debug_str	00000000 
000288ec l       .debug_str	00000000 
0000e7cc l       .debug_str	00000000 
00010988 l       .debug_str	00000000 
0001098c l       .debug_str	00000000 
0001e88d l       .debug_str	00000000 
000545f3 l       .debug_str	00000000 
0005bf23 l       .debug_str	00000000 
0002895c l       .debug_str	00000000 
0002895f l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
00012b7f l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0001091e l       .debug_str	00000000 
00016c4e l       .debug_str	00000000 
00016db7 l       .debug_str	00000000 
0002896c l       .debug_str	00000000 
00028977 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0000e7a6 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
0000e7b0 l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00016cae l       .debug_str	00000000 
0000e7b9 l       .debug_str	00000000 
0000bae6 l       .debug_str	00000000 
0000baec l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0001e82b l       .debug_str	00000000 
0000bb09 l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0002f0ee l       .debug_str	00000000 
00028992 l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
000288b3 l       .debug_str	00000000 
0002828c l       .debug_str	00000000 
00028329 l       .debug_str	00000000 
00028362 l       .debug_str	00000000 
00028401 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0002891b l       .debug_str	00000000 
0002843a l       .debug_str	00000000 
000284d7 l       .debug_str	00000000 
0002850b l       .debug_str	00000000 
000285ae l       .debug_str	00000000 
0002864d l       .debug_str	00000000 
0001cc20 l     O .text	0000001c str.0
0001cc50 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 kgrwit76a3gp623
00001139 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0001157e l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00028a18 l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
000289c7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
00028977 l       .debug_str	00000000 
00028992 l       .debug_str	00000000 
00028abe l       .debug_str	00000000 
00028b33 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0001091e l       .debug_str	00000000 
0001e81c l       .debug_str	00000000 
00016db7 l       .debug_str	00000000 
0002896c l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000bae6 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
0002f0ee l       .debug_str	00000000 
00028a4f l       .debug_str	00000000 
0001e7cc l       .debug_str	00000000 
0000baec l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0001e82b l       .debug_str	00000000 
0000bb09 l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 vnkfcw75uydipan
00028c79 l       .debug_str	00000000 
0001ea42 l       .debug_str	00000000 
0001ea2d l       .debug_str	00000000 
0001ea48 l       .debug_str	00000000 
00028b6a l       .debug_str	00000000 
00028bb5 l       .debug_str	00000000 
00028bc8 l       .debug_str	00000000 
00028c13 l       .debug_str	00000000 
00028c36 l       .debug_str	00000000 
0000f87b l       .debug_str	00000000 
00028c95 l       .debug_str	00000000 
00027bc8 l       .debug_str	00000000 
0000f542 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
0000a40d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
0001f35c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002500f l       .debug_str	00000000 
0000e9ca l       .debug_str	00000000 
00059261 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0001d87d l       .debug_str	00000000 
00001def l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 z0qw54vnrq0no9t
00001139 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00016cd1 l       .debug_str	00000000 
00028cd8 l       .debug_str	00000000 
00011516 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
0000b3da l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000fdfa l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b8ef l       .debug_str	00000000 
0000ffe0 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0000ffd9 l       .debug_str	00000000 
00028d4c l       .debug_str	00000000 
000102bc l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
00012b7f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19138b0wku1kf1j2
00000c77 l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0000bb23 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
0000bb29 l       .debug_str	00000000 
00016de8 l       .debug_str	00000000 
0000bb33 l       .debug_str	00000000 
00016e23 l       .debug_str	00000000 
0001e0ab l       .debug_str	00000000 
00028ec8 l       .debug_str	00000000 
00028f11 l       .debug_str	00000000 
0001aa8c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b851 l       .debug_str	00000000 
00014456 l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
00010973 l       .debug_str	00000000 
0001097a l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00016cae l       .debug_str	00000000 
00029436 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
0000bae6 l       .debug_str	00000000 
0000baec l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0001e82b l       .debug_str	00000000 
0000bb09 l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0002f0ee l       .debug_str	00000000 
00028992 l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
00029383 l       .debug_str	00000000 
00028e11 l       .debug_str	00000000 
00028e5a l       .debug_str	00000000 
0000bac4 l       .debug_str	00000000 
0000baca l       .debug_str	00000000 
00014367 l       .debug_str	00000000 
0005a542 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 26804uhokgeqc1sz
00000d44 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e15 l       .debug_str	00000000 
00000e32 l       .debug_str	00000000 
0002ea09 l       .debug_str	00000000 
00028fb9 l       .debug_str	00000000 
000011d2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c70 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
00033b92 l       .debug_str	00000000 
00057399 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00000c8e l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000c95 l       .debug_str	00000000 
00000c9b l       .debug_str	00000000 
00000ca3 l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00000ca9 l       .debug_str	00000000 
00000cce l       .debug_str	00000000 
00000cb4 l       .debug_str	00000000 
00000cd7 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00055003 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00000d22 l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00000d28 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d3b l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d69 l       .debug_str	00000000 
00000d7a l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000db7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4e4lo6o3nv8rarzb
0002873e l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
00029383 l       .debug_str	00000000 
00028feb l       .debug_str	00000000 
00028401 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
00001def l       .debug_str	00000000 
000293e5 l       .debug_str	00000000 
00029084 l       .debug_str	00000000 
000284d7 l       .debug_str	00000000 
0002911b l       .debug_str	00000000 
000291b8 l       .debug_str	00000000 
0002864d l       .debug_str	00000000 
0000dee2 l       .debug_str	00000000 
0000deeb l       .debug_str	00000000 
0000def9 l       .debug_str	00000000 
00016d5f l       .debug_str	00000000 
0000df11 l       .debug_str	00000000 
00010a9a l       .debug_str	00000000 
00029251 l       .debug_str	00000000 
00029308 l       .debug_str	00000000 
000287d2 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0000bb10 l       .debug_str	00000000 
0002935b l       .debug_str	00000000 
000293b9 l       .debug_str	00000000 
0001aa8c l       .debug_str	00000000 
00010988 l       .debug_str	00000000 
0001098c l       .debug_str	00000000 
0001e88d l       .debug_str	00000000 
00029423 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0002942d l       .debug_str	00000000 
0005527c l       .debug_str	00000000 
00029430 l       .debug_str	00000000 
00029443 l       .debug_str	00000000 
0002943d l       .debug_str	00000000 
0005a92d l       .debug_str	00000000 
00055642 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
0002944d l       .debug_str	00000000 
00012b7f l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
00010973 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
0001097a l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00016cae l       .debug_str	00000000 
00029436 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
0000bae6 l       .debug_str	00000000 
0000baec l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0001e82b l       .debug_str	00000000 
0000bb09 l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0002f0ee l       .debug_str	00000000 
00028992 l       .debug_str	00000000 
0001cdd0 l     O .text	0000001f str.0
0001ce10 l     O .text	00000021 str.1
0001ce40 l     O .text	0000001c str.2
0001ce70 l     O .text	00000021 str.3
00000000 l    df *ABS*	00000000 cr0kuem5x1cmxnb
0001b610 l       .debug_str	00000000 
00029daf l       .debug_str	00000000 
00029def l       .debug_str	00000000 
0002a2a9 l       .debug_str	00000000 
0001b612 l       .debug_str	00000000 
00029e8b l       .debug_str	00000000 
00029eee l       .debug_str	00000000 
00029ff2 l       .debug_str	00000000 
0002a055 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0002a11f l       .debug_str	00000000 
00027128 l       .debug_str	00000000 
0000dee2 l       .debug_str	00000000 
0000deeb l       .debug_str	00000000 
0000def9 l       .debug_str	00000000 
00016d5f l       .debug_str	00000000 
0000df11 l       .debug_str	00000000 
00010a9a l       .debug_str	00000000 
0001e1ca l       .debug_str	00000000 
0000bb10 l       .debug_str	00000000 
0002a1ef l       .debug_str	00000000 
0002a285 l       .debug_str	00000000 
000271fd l       .debug_str	00000000 
0002a349 l       .debug_str	00000000 
00014456 l       .debug_str	00000000 
0000b8ef l       .debug_str	00000000 
00057daa l       .debug_str	00000000 
0000b902 l       .debug_str	00000000 
0005ac85 l       .debug_str	00000000 
0000b906 l       .debug_str	00000000 
0000b90a l       .debug_str	00000000 
0000118b l       .debug_str	00000000 
0005a0c1 l       .debug_str	00000000 
0000de28 l       .debug_str	00000000 
0000de17 l       .debug_str	00000000 
00056760 l       .debug_str	00000000 
00001199 l       .debug_str	00000000 
0005b9cc l       .debug_str	00000000 
00055611 l       .debug_str	00000000 
0000df46 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000b851 l       .debug_str	00000000 
0000e165 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00011511 l       .debug_str	00000000 
00002808 l       .debug_str	00000000 
000115ba l       .debug_str	00000000 
0000b856 l       .debug_str	00000000 
0000bac4 l       .debug_str	00000000 
0000baca l       .debug_str	00000000 
0000deb0 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
0000debc l       .debug_str	00000000 
0000dec8 l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000ded5 l       .debug_str	00000000 
0005bf39 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00014367 l       .debug_str	00000000 
0000df0b l       .debug_str	00000000 
0000bad7 l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
00016cae l       .debug_str	00000000 
0005a542 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
0000bae6 l       .debug_str	00000000 
0000baec l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
0000baf7 l       .debug_str	00000000 
0000bb02 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
0001e82b l       .debug_str	00000000 
0000bb09 l       .debug_str	00000000 
0000bb16 l       .debug_str	00000000 
0002f0ee l       .debug_str	00000000 
00028992 l       .debug_str	00000000 
0000bb23 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
0000bb29 l       .debug_str	00000000 
00016de8 l       .debug_str	00000000 
0000bb33 l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
00016e23 l       .debug_str	00000000 
0001e14a l       .debug_str	00000000 
00029455 l       .debug_str	00000000 
000294e3 l       .debug_str	00000000 
0000e16b l       .debug_str	00000000 
0000e172 l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0000de7e l       .debug_str	00000000 
0000501a l       .debug_str	00000000 
0000ba76 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0005a911 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
00005042 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00005050 l       .debug_str	00000000 
00005058 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
0000bf4a l       .debug_str	00000000 
0000bf67 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000bfad l       .debug_str	00000000 
0000bfbe l       .debug_str	00000000 
0000c02e l       .debug_str	00000000 
0000c0c8 l       .debug_str	00000000 
0000c18b l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
00005093 l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00005099 l       .debug_str	00000000 
0000509c l       .debug_str	00000000 
000050c5 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
000050fb l       .debug_str	00000000 
0000c38f l       .debug_str	00000000 
0000c3df l       .debug_str	00000000 
0000c43c l       .debug_str	00000000 
000062dd l       .debug_str	00000000 
0000c490 l       .debug_str	00000000 
0000c507 l       .debug_str	00000000 
0000c58b l       .debug_str	00000000 
0000c606 l       .debug_str	00000000 
0000c6a4 l       .debug_str	00000000 
0000c74f l       .debug_str	00000000 
0000c7f1 l       .debug_str	00000000 
0000c8b6 l       .debug_str	00000000 
0000c988 l       .debug_str	00000000 
0000ca51 l       .debug_str	00000000 
0000cb3d l       .debug_str	00000000 
0000cc36 l       .debug_str	00000000 
0000e17a l       .debug_str	00000000 
0000e28c l       .debug_str	00000000 
0000e3bb l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
00024c7a l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00020b1c l       .debug_str	00000000 
0000f56f l       .debug_str	00000000 
0000f58b l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
00010973 l       .debug_str	00000000 
0001097a l       .debug_str	00000000 
00029436 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
000293e5 l       .debug_str	00000000 
00029588 l       .debug_str	00000000 
00029616 l       .debug_str	00000000 
0000df4b l       .debug_str	00000000 
0000e7c6 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
0002a213 l       .debug_str	00000000 
00057a23 l       .debug_str	00000000 
00029681 l       .debug_str	00000000 
00029711 l       .debug_str	00000000 
0000e8ad l       .debug_str	00000000 
0000e8b3 l       .debug_str	00000000 
0000c278 l       .debug_str	00000000 
0000cd26 l       .debug_str	00000000 
0000ce39 l       .debug_str	00000000 
0000cf59 l       .debug_str	00000000 
0000d070 l       .debug_str	00000000 
0000d1a9 l       .debug_str	00000000 
0000d2ff l       .debug_str	00000000 
00024db2 l       .debug_str	00000000 
00020c39 l       .debug_str	00000000 
0000fc82 l       .debug_str	00000000 
0000fc24 l       .debug_str	00000000 
0002a143 l       .debug_str	00000000 
000297a8 l       .debug_str	00000000 
00029838 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000b875 l       .debug_str	00000000 
0000b8fa l       .debug_str	00000000 
00002c17 l       .debug_str	00000000 
000551d5 l       .debug_str	00000000 
0001b653 l       .debug_str	00000000 
0000b913 l       .debug_str	00000000 
00059719 l       .debug_str	00000000 
0001e0ab l       .debug_str	00000000 
00029909 l       .debug_str	00000000 
0002994c l       .debug_str	00000000 
00029383 l       .debug_str	00000000 
00029a25 l       .debug_str	00000000 
00029a68 l       .debug_str	00000000 
00029b07 l       .debug_str	00000000 
00029b45 l       .debug_str	00000000 
00029bb3 l       .debug_str	00000000 
00029bf1 l       .debug_str	00000000 
00029c99 l       .debug_str	00000000 
00029cd9 l       .debug_str	00000000 
0000e8a8 l       .debug_str	00000000 
0000e8bc l       .debug_str	00000000 
0002a36d l       .debug_str	00000000 
0001d030 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
0002a94b l       .debug_str	00000000 
00038d02 l       .debug_str	00000000 
00003470 l       .debug_str	00000000 
0002ac9f l       .debug_str	00000000 
00019ff2 l       .debug_str	00000000 
0002ad1e l       .debug_str	00000000 
0001a075 l       .debug_str	00000000 
0002ad9d l       .debug_str	00000000 
0002ae1f l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
0002b063 l       .debug_str	00000000 
0002b0e5 l       .debug_str	00000000 
0002b12e l       .debug_str	00000000 
0002b1b0 l       .debug_str	00000000 
0002b1f9 l       .debug_str	00000000 
0001a2f6 l       .debug_str	00000000 
0002b27b l       .debug_str	00000000 
0002b2fd l       .debug_str	00000000 
0002b541 l       .debug_str	00000000 
0002b5c3 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0002b60c l       .debug_str	00000000 
0002b680 l       .debug_str	00000000 
0001aa8c l       .debug_str	00000000 
0000aae6 l       .debug_str	00000000 
00011511 l       .debug_str	00000000 
0000a068 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
0000a40d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0002fde8 l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
0000a416 l       .debug_str	00000000 
00011667 l       .debug_str	00000000 
0005b9cc l       .debug_str	00000000 
00001199 l       .debug_str	00000000 
0002502e l       .debug_str	00000000 
0002b8ef l       .debug_str	00000000 
0002bb5a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000501a l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
0005a911 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
00005042 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00005050 l       .debug_str	00000000 
00005058 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
00005062 l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00005093 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00005099 l       .debug_str	00000000 
0000509c l       .debug_str	00000000 
000050c5 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
000050fb l       .debug_str	00000000 
00005128 l       .debug_str	00000000 
00005176 l       .debug_str	00000000 
000051e1 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
0002b61e l       .debug_str	00000000 
000041fe l       .debug_str	00000000 
000052de l       .debug_str	00000000 
00005323 l       .debug_str	00000000 
00005391 l       .debug_str	00000000 
00005428 l       .debug_str	00000000 
000054e8 l       .debug_str	00000000 
000055d1 l       .debug_str	00000000 
000056e3 l       .debug_str	00000000 
0000581e l       .debug_str	00000000 
00005982 l       .debug_str	00000000 
00005b0f l       .debug_str	00000000 
00005cc5 l       .debug_str	00000000 
00005ea4 l       .debug_str	00000000 
000060ac l       .debug_str	00000000 
000062dd l       .debug_str	00000000 
000062e0 l       .debug_str	00000000 
00006330 l       .debug_str	00000000 
0000638d l       .debug_str	00000000 
000063e1 l       .debug_str	00000000 
00006458 l       .debug_str	00000000 
000064dc l       .debug_str	00000000 
00006557 l       .debug_str	00000000 
000065f5 l       .debug_str	00000000 
000066a0 l       .debug_str	00000000 
00006742 l       .debug_str	00000000 
00006807 l       .debug_str	00000000 
000068d9 l       .debug_str	00000000 
000069a2 l       .debug_str	00000000 
00006a8e l       .debug_str	00000000 
00006b87 l       .debug_str	00000000 
00006c77 l       .debug_str	00000000 
00006d8a l       .debug_str	00000000 
00006eaa l       .debug_str	00000000 
00006fc1 l       .debug_str	00000000 
000070fb l       .debug_str	00000000 
00007242 l       .debug_str	00000000 
00007380 l       .debug_str	00000000 
000074e1 l       .debug_str	00000000 
0000764f l       .debug_str	00000000 
000077b4 l       .debug_str	00000000 
0000793c l       .debug_str	00000000 
00007ad1 l       .debug_str	00000000 
00007c5d l       .debug_str	00000000 
00007e0c l       .debug_str	00000000 
00007fc8 l       .debug_str	00000000 
0000817b l       .debug_str	00000000 
00008351 l       .debug_str	00000000 
00008534 l       .debug_str	00000000 
0000870e l       .debug_str	00000000 
0000890b l       .debug_str	00000000 
00008b15 l       .debug_str	00000000 
00008d16 l       .debug_str	00000000 
00008f3a l       .debug_str	00000000 
0000916b l       .debug_str	00000000 
00009393 l       .debug_str	00000000 
000095dc l       .debug_str	00000000 
00009842 l       .debug_str	00000000 
0002b692 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002a447 l       .debug_str	00000000 
0002a4ce l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
0000a0a5 l       .debug_str	00000000 
0002a51b l       .debug_str	00000000 
0002a5a2 l       .debug_str	00000000 
0002a7ea l       .debug_str	00000000 
0002a873 l       .debug_str	00000000 
0002a8c2 l       .debug_str	00000000 
0002ab95 l       .debug_str	00000000 
00019ce7 l       .debug_str	00000000 
0002ac21 l       .debug_str	00000000 
00019f70 l       .debug_str	00000000 
0001d100 l     O .text	0000001c str.0
0001d140 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000c22 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
000114e2 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0005b9cc l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002bbca l       .debug_str	00000000 
0000aa5f l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
00001139 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00011516 l       .debug_str	00000000 
000113a7 l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0002bc1a l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
0002bedf l       .debug_str	00000000 
00007ad1 l       .debug_str	00000000 
00007c5d l       .debug_str	00000000 
00007e0c l       .debug_str	00000000 
00007fc8 l       .debug_str	00000000 
0000817b l       .debug_str	00000000 
00008351 l       .debug_str	00000000 
00008534 l       .debug_str	00000000 
0000870e l       .debug_str	00000000 
0000890b l       .debug_str	00000000 
00008b15 l       .debug_str	00000000 
0002bf57 l       .debug_str	00000000 
0002c182 l       .debug_str	00000000 
0002c1fa l       .debug_str	00000000 
0002c389 l       .debug_str	00000000 
0002c401 l       .debug_str	00000000 
0002c569 l       .debug_str	00000000 
0002c5e1 l       .debug_str	00000000 
0002c65f l       .debug_str	00000000 
0002c6d7 l       .debug_str	00000000 
0002c7ca l       .debug_str	00000000 
0002c842 l       .debug_str	00000000 
0002ca1f l       .debug_str	00000000 
0002ca97 l       .debug_str	00000000 
0002cb63 l       .debug_str	00000000 
0002cbdb l       .debug_str	00000000 
0002cc0b l       .debug_str	00000000 
0002cc83 l       .debug_str	00000000 
0002cd28 l       .debug_str	00000000 
0002cda0 l       .debug_str	00000000 
0002cee1 l       .debug_str	00000000 
0002cf59 l       .debug_str	00000000 
0002d10f l       .debug_str	00000000 
0002d187 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00005093 l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00005099 l       .debug_str	00000000 
0000509c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000050c5 l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
000050fb l       .debug_str	00000000 
000062dd l       .debug_str	00000000 
0002bc7e l       .debug_str	00000000 
0002bcf6 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
000062e0 l       .debug_str	00000000 
00006330 l       .debug_str	00000000 
0000638d l       .debug_str	00000000 
000063e1 l       .debug_str	00000000 
00006458 l       .debug_str	00000000 
000064dc l       .debug_str	00000000 
00006557 l       .debug_str	00000000 
000065f5 l       .debug_str	00000000 
000066a0 l       .debug_str	00000000 
00006742 l       .debug_str	00000000 
00006807 l       .debug_str	00000000 
000068d9 l       .debug_str	00000000 
000069a2 l       .debug_str	00000000 
00006a8e l       .debug_str	00000000 
00006b87 l       .debug_str	00000000 
0002bd4d l       .debug_str	00000000 
0002bdc5 l       .debug_str	00000000 
00006c77 l       .debug_str	00000000 
00006d8a l       .debug_str	00000000 
00006eaa l       .debug_str	00000000 
00006fc1 l       .debug_str	00000000 
000070fb l       .debug_str	00000000 
00007242 l       .debug_str	00000000 
00007380 l       .debug_str	00000000 
000074e1 l       .debug_str	00000000 
0000764f l       .debug_str	00000000 
000077b4 l       .debug_str	00000000 
0000793c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16gyyaet005v3lvf
0001e2b8 l       .debug_str	00000000 
0002d38b l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0002d3eb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1gec8qpvo4ti2nbg
0002e56b l       .debug_str	00000000 
00028221 l       .debug_str	00000000 
0002d54f l       .debug_str	00000000 
0002827f l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0000b029 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00055398 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
000114ea l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d44b l       .debug_str	00000000 
0002816c l       .debug_str	00000000 
0001f35c l       .debug_str	00000000 
0002d49d l       .debug_str	00000000 
0002d4f0 l       .debug_str	00000000 
0002d4fa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 28buxl9xaffr9rke
00054f7a l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005919d l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0002d5a5 l       .debug_str	00000000 
00001139 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00016c3f l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2leljxexqh8ze7wz
00030381 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0001157e l       .debug_str	00000000 
0005919d l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0002d602 l       .debug_str	00000000 
00056835 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cgt5uexdtuxl7pe
0002d952 l       .debug_str	00000000 
0002d858 l       .debug_str	00000000 
0002d875 l       .debug_str	00000000 
0002d8b0 l       .debug_str	00000000 
0002d8de l       .debug_str	00000000 
0002d8f9 l       .debug_str	00000000 
0002d934 l       .debug_str	00000000 
0002d95d l       .debug_str	00000000 
0002d4f0 l       .debug_str	00000000 
0002d983 l       .debug_str	00000000 
0002d9a9 l       .debug_str	00000000 
0002d9c3 l       .debug_str	00000000 
000281c5 l       .debug_str	00000000 
0002d9ea l       .debug_str	00000000 
0002da11 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
0000f87b l       .debug_str	00000000 
0000f542 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000582f0 l       .debug_str	00000000 
000555f2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d673 l       .debug_str	00000000 
0002d685 l       .debug_str	00000000 
0002d696 l       .debug_str	00000000 
0002d6e2 l       .debug_str	00000000 
0000e9ca l       .debug_str	00000000 
00059261 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0001d87d l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0001ea42 l       .debug_str	00000000 
0002d6ee l       .debug_str	00000000 
0002d710 l       .debug_str	00000000 
0002d731 l       .debug_str	00000000 
0002d77d l       .debug_str	00000000 
0002d799 l       .debug_str	00000000 
0002d7d0 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
0001f35c l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0002d7ea l       .debug_str	00000000 
0002d7f7 l       .debug_str	00000000 
0002d82e l       .debug_str	00000000 
0001ea2d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
0001e2b8 l       .debug_str	00000000 
0002da2c l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
0002da8c l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
0001e200 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
0002db58 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000507e l       .debug_str	00000000 
00005086 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0002daec l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
00030381 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000e67 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0001157e l       .debug_str	00000000 
0005919d l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0002db61 l       .debug_str	00000000 
00056835 l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 25lz0dio8kzdubcg
000140ab l       .debug_str	00000000 
00055398 l       .debug_str	00000000 
0001ea2d l       .debug_str	00000000 
0000f87b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000b81c l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0001139c l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002dbd2 l       .debug_str	00000000 
0002dc10 l       .debug_str	00000000 
0000e9ca l       .debug_str	00000000 
00059261 l       .debug_str	00000000 
00001de9 l       .debug_str	00000000 
0001d87d l       .debug_str	00000000 
00001def l       .debug_str	00000000 
0001ea42 l       .debug_str	00000000 
0002dc29 l       .debug_str	00000000 
0002dc67 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0001f35c l       .debug_str	00000000 
000555f2 l       .debug_str	00000000 
0000f542 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
0002dc90 l       .debug_str	00000000 
0002dca3 l       .debug_str	00000000 
00011350 l       .debug_str	00000000 
0005919d l       .debug_str	00000000 
0002dcd4 l       .debug_str	00000000 
0002dcdc l       .debug_str	00000000 
0002dce5 l       .debug_str	00000000 
0002dd2e l       .debug_str	00000000 
00004768 l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
0002dcec l       .debug_str	00000000 
0002dd2b l       .debug_str	00000000 
0002dd34 l       .debug_str	00000000 
0002dd76 l       .debug_str	00000000 
0002dd80 l       .debug_str	00000000 
0002ddc3 l       .debug_str	00000000 
0002ddcd l       .debug_str	00000000 
0002de10 l       .debug_str	00000000 
0002de1a l       .debug_str	00000000 
0002de5d l       .debug_str	00000000 
0002de68 l       .debug_str	00000000 
0002dead l       .debug_str	00000000 
0002deb8 l       .debug_str	00000000 
0002defd l       .debug_str	00000000 
0002df03 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
0000e07b l       .debug_str	00000000 
0000420e l       .debug_str	00000000 
0002e542 l       .debug_str	00000000 
00010988 l       .debug_str	00000000 
0002df10 l       .debug_str	00000000 
0002df20 l       .debug_str	00000000 
00000c2a l       .debug_str	00000000 
00011511 l       .debug_str	00000000 
00011385 l       .debug_str	00000000 
0001138e l       .debug_str	00000000 
00000c78 l       .debug_str	00000000 
0000a068 l       .debug_str	00000000 
00000c62 l       .debug_str	00000000 
0000a40d l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c6d l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002fde8 l       .debug_str	00000000 
0005bac1 l       .debug_str	00000000 
0000508b l       .debug_str	00000000 
0000508c l       .debug_str	00000000 
00009d96 l       .debug_str	00000000 
0000a416 l       .debug_str	00000000 
00011667 l       .debug_str	00000000 
00028118 l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
0002df66 l       .debug_str	00000000 
0001b612 l       .debug_str	00000000 
00059f0c l       .debug_str	00000000 
0002e946 l       .debug_str	00000000 
000114fd l       .debug_str	00000000 
00059b1e l       .debug_str	00000000 
00000c51 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005536c l       .debug_str	00000000 
0002df78 l       .debug_str	00000000 
0002df7d l       .debug_str	00000000 
0005b49c l       .debug_str	00000000 
0002df88 l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
0002df92 l       .debug_str	00000000 
0002e610 l       .debug_str	00000000 
0002df9c l       .debug_str	00000000 
000140ab l       .debug_str	00000000 
0002e650 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
0002e989 l       .debug_str	00000000 
0001150d l       .debug_str	00000000 
00005060 l       .debug_str	00000000 
0002dfaa l       .debug_str	00000000 
0002e01e l       .debug_str	00000000 
0002e86a l       .debug_str	00000000 
0002e030 l       .debug_str	00000000 
0002e656 l       .debug_str	00000000 
0002e630 l       .debug_str	00000000 
00012b1b l       .debug_str	00000000 
0002e8ad l       .debug_str	00000000 
0002e035 l       .debug_str	00000000 
0002e0a9 l       .debug_str	00000000 
0002e9c2 l       .debug_str	00000000 
0002ea20 l       .debug_str	00000000 
0002e90f l       .debug_str	00000000 
0002e0c1 l       .debug_str	00000000 
0003e2cf l       .debug_str	00000000 
00033952 l       .debug_str	00000000 
0005531b l       .debug_str	00000000 
0002ea3b l       .debug_str	00000000 
0002e8de l       .debug_str	00000000 
0002e139 l       .debug_str	00000000 
00003a7b l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
0005912a l       .debug_str	00000000 
0001ade5 l       .debug_str	00000000 
0002e191 l       .debug_str	00000000 
0002e196 l       .debug_str	00000000 
0002e1a8 l       .debug_str	00000000 
0002e56b l       .debug_str	00000000 
0002f0ee l       .debug_str	00000000 
0002e1b1 l       .debug_str	00000000 
0002e1d9 l       .debug_str	00000000 
0002e1e3 l       .debug_str	00000000 
0002e1f3 l       .debug_str	00000000 
000577c6 l       .debug_str	00000000 
0002e24c l       .debug_str	00000000 
0002e254 l       .debug_str	00000000 
000115f7 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
0001053d l       .debug_str	00000000 
0002e25c l       .debug_str	00000000 
000142d8 l       .debug_str	00000000 
0002e268 l       .debug_str	00000000 
0002e272 l       .debug_str	00000000 
0002e27f l       .debug_str	00000000 
0002e28c l       .debug_str	00000000 
0002e2a1 l       .debug_str	00000000 
0002e2b5 l       .debug_str	00000000 
0002e2cb l       .debug_str	00000000 
0002e2d3 l       .debug_str	00000000 
0002e2e0 l       .debug_str	00000000 
0002e2ed l       .debug_str	00000000 
0002ec0d l       .debug_str	00000000 
0000b914 l       .debug_str	00000000 
0002e2fa l       .debug_str	00000000 
0002e327 l       .debug_str	00000000 
0002e356 l       .debug_str	00000000 
0002e37d l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000e8b l       .debug_str	00000000 
0002e39c l       .debug_str	00000000 
0002e3b1 l       .debug_str	00000000 
00017fc0 l       .debug_str	00000000 
000491cf l       .debug_str	00000000 
0000af64 l       .debug_str	00000000 
00054f7a l       .debug_str	00000000 
00000c22 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
00000d92 l       .debug_str	00000000 
0002e3bb l       .debug_str	00000000 
0002e3e0 l       .debug_str	00000000 
0002e3c6 l       .debug_str	00000000 
0002e45f l       .debug_str	00000000 
0002e3f0 l       .debug_str	00000000 
0002e3f6 l       .debug_str	00000000 
0002e405 l       .debug_str	00000000 
0002e410 l       .debug_str	00000000 
0002e445 l       .debug_str	00000000 
0002e46a l       .debug_str	00000000 
0002e47a l       .debug_str	00000000 
00055b84 l       .debug_str	00000000 
0002e4ac l       .debug_str	00000000 
0002e4b1 l       .debug_str	00000000 
00056a27 l       .debug_str	00000000 
0002fd62 l       .debug_str	00000000 
0002fd5b l       .debug_str	00000000 
00011516 l       .debug_str	00000000 
0002fd89 l       .debug_str	00000000 
0002fdbd l       .debug_str	00000000 
0002e4b7 l       .debug_str	00000000 
0000503d l       .debug_str	00000000 
0002e4f5 l       .debug_str	00000000 
0002fd66 l       .debug_str	00000000 
0002fdb3 l       .debug_str	00000000 
0002e4d6 l       .debug_str	00000000 
0002e4c3 l       .debug_str	00000000 
0002e4dc l       .debug_str	00000000 
0001ade4 l       .debug_str	00000000 
0000b3da l       .debug_str	00000000 
0000b3d9 l       .debug_str	00000000 
0002e504 l       .debug_str	00000000 
0002e50c l       .debug_str	00000000 
00039ad2 l       .debug_str	00000000 
0002e512 l       .debug_str	00000000 
0004768d l       .debug_str	00000000 
0002e539 l       .debug_str	00000000 
0002e51d l       .debug_str	00000000 
0000e07a l       .debug_str	00000000 
0002e541 l       .debug_str	00000000 
0002e1ed l       .debug_str	00000000 
0001b778 l       .debug_str	00000000 
0001d852 l       .debug_str	00000000 
0002e546 l       .debug_str	00000000 
0002e56a l       .debug_str	00000000 
0002e570 l       .debug_str	00000000 
0002e578 l       .debug_str	00000000 
00049d03 l       .debug_str	00000000 
000396ce l       .debug_str	00000000 
0002e57d l       .debug_str	00000000 
0002e5a5 l       .debug_str	00000000 
0002e587 l       .debug_str	00000000 
0001f363 l       .debug_str	00000000 
00016c3f l       .debug_str	00000000 
0001414b l       .debug_str	00000000 
00020f2f l       .debug_str	00000000 
0001b780 l       .debug_str	00000000 
0001b78d l       .debug_str	00000000 
0001b796 l       .debug_str	00000000 
000542e2 l       .debug_str	00000000 
0002e5b9 l       .debug_str	00000000 
0002e5ad l       .debug_str	00000000 
0001157e l       .debug_str	00000000 
0002e5c6 l       .debug_str	00000000 
0002e5d2 l       .debug_str	00000000 
0002e5f5 l       .debug_str	00000000 
0002e5df l       .debug_str	00000000 
0002e603 l       .debug_str	00000000 
0002e623 l       .debug_str	00000000 
0002e643 l       .debug_str	00000000 
0002e65e l       .debug_str	00000000 
0002e679 l       .debug_str	00000000 
0002e67f l       .debug_str	00000000 
0002e683 l       .debug_str	00000000 
0002e694 l       .debug_str	00000000 
0002e687 l       .debug_str	00000000 
00001298 l       .debug_str	00000000 
0000129c l       .debug_str	00000000 
000012a7 l       .debug_str	00000000 
000012e6 l       .debug_str	00000000 
000012d6 l       .debug_str	00000000 
0002e6a9 l       .debug_str	00000000 
0002e6a4 l       .debug_str	00000000 
0002e6bc l       .debug_str	00000000 
0002e708 l       .debug_str	00000000 
0002e6e1 l       .debug_str	00000000 
0002e6f8 l       .debug_str	00000000 
0002e722 l       .debug_str	00000000 
0002e713 l       .debug_str	00000000 
0002e76a l       .debug_str	00000000 
0002e74a l       .debug_str	00000000 
0002e7c3 l       .debug_str	00000000 
0002e7a3 l       .debug_str	00000000 
000542d4 l       .debug_str	00000000 
0002e81a l       .debug_str	00000000 
0002e81f l       .debug_str	00000000 
0002e825 l       .debug_str	00000000 
0002e848 l       .debug_str	00000000 
0002e82a l       .debug_str	00000000 
0002e853 l       .debug_str	00000000 
0002e89e l       .debug_str	00000000 
0002e8cf l       .debug_str	00000000 
0002e900 l       .debug_str	00000000 
0002e92f l       .debug_str	00000000 
0002e97a l       .debug_str	00000000 
0002e9ab l       .debug_str	00000000 
0001b7ed l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c70 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000011d6 l       .debug_str	00000000 
00033b92 l       .debug_str	00000000 
00057399 l       .debug_str	00000000 
00029450 l       .debug_str	00000000 
0005b9db l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
000015d9 l       .debug_str	00000000 
00000c84 l       .debug_str	00000000 
00000c8e l       .debug_str	00000000 
00000c95 l       .debug_str	00000000 
00000c9b l       .debug_str	00000000 
00000ca3 l       .debug_str	00000000 
0000bb1d l       .debug_str	00000000 
00000ca9 l       .debug_str	00000000 
00000cce l       .debug_str	00000000 
00000cb4 l       .debug_str	00000000 
00000cd7 l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00055003 l       .debug_str	00000000 
00054f04 l       .debug_str	00000000 
00000d22 l       .debug_str	00000000 
00000d28 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d3b l       .debug_str	00000000 
00000d44 l       .debug_str	00000000 
00000d50 l       .debug_str	00000000 
00000d75 l       .debug_str	00000000 
00000d69 l       .debug_str	00000000 
00000d7a l       .debug_str	00000000 
0005554c l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000d84 l       .debug_str	00000000 
00000dad l       .debug_str	00000000 
00000d9d l       .debug_str	00000000 
00000db7 l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000e15 l       .debug_str	00000000 
00000e32 l       .debug_str	00000000 
0002ea09 l       .debug_str	00000000 
0002e9fd l       .debug_str	00000000 
0002e9fc l       .debug_str	00000000 
0002ea13 l       .debug_str	00000000 
0002ea2c l       .debug_str	00000000 
00000c16 l       .debug_str	00000000 
0002ea5a l       .debug_str	00000000 
0002ea59 l       .debug_str	00000000 
0002ea6e l       .debug_str	00000000 
0002ea5f l       .debug_str	00000000 
00054ff5 l       .debug_str	00000000 
000542c2 l       .debug_str	00000000 
00000e4b l       .debug_str	00000000 
0002ea9b l       .debug_str	00000000 
0002ea8d l       .debug_str	00000000 
0002ea8c l       .debug_str	00000000 
00010322 l       .debug_str	00000000 
00016c49 l       .debug_str	00000000 
0005be11 l       .debug_str	00000000 
0002eaa4 l       .debug_str	00000000 
0002eaa8 l       .debug_str	00000000 
0002eaab l       .debug_str	00000000 
0005a8f9 l       .debug_str	00000000 
00016c2d l       .debug_str	00000000 
0002eaae l       .debug_str	00000000 
00017f38 l       .debug_str	00000000 
0002eab2 l       .debug_str	00000000 
0002eab1 l       .debug_str	00000000 
0002eab7 l       .debug_str	00000000 
0002eb89 l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
0002ead5 l       .debug_str	00000000 
0002eac3 l       .debug_str	00000000 
0002eafa l       .debug_str	00000000 
0002ebc2 l       .debug_str	00000000 
0002eb18 l       .debug_str	00000000 
0002eb06 l       .debug_str	00000000 
0002eb3d l       .debug_str	00000000 
0002eb56 l       .debug_str	00000000 
0002eb44 l       .debug_str	00000000 
0002eb62 l       .debug_str	00000000 
0002eb7a l       .debug_str	00000000 
0002ebb3 l       .debug_str	00000000 
00017f3e l       .debug_str	00000000 
0002ebec l       .debug_str	00000000 
0002ebf9 l       .debug_str	00000000 
0002ebf8 l       .debug_str	00000000 
0002ec01 l       .debug_str	00000000 
0002ec2e l       .debug_str	00000000 
0002ec19 l       .debug_str	00000000 
0002ec4b l       .debug_str	00000000 
0002ec57 l       .debug_str	00000000 
0002ed01 l       .debug_str	00000000 
0002ec63 l       .debug_str	00000000 
0002ec6a l       .debug_str	00000000 
0002ec73 l       .debug_str	00000000 
0002ec81 l       .debug_str	00000000 
0002ec88 l       .debug_str	00000000 
0002ec90 l       .debug_str	00000000 
0002ec97 l       .debug_str	00000000 
0002ecdd l       .debug_str	00000000 
0002ecb8 l       .debug_str	00000000 
0002eca3 l       .debug_str	00000000 
0002ecc8 l       .debug_str	00000000 
0002ecec l       .debug_str	00000000 
0000e099 l       .debug_str	00000000 
0002ed0d l       .debug_str	00000000 
0001d865 l       .debug_str	00000000 
000587e3 l       .debug_str	00000000 
0002ed3e l       .debug_str	00000000 
0002ed27 l       .debug_str	00000000 
0002ed5c l       .debug_str	00000000 
0002ed7f l       .debug_str	00000000 
0002ed68 l       .debug_str	00000000 
0002edc9 l       .debug_str	00000000 
0002edbd l       .debug_str	00000000 
0002e1e8 l       .debug_str	00000000 
0002ede6 l       .debug_str	00000000 
0002edcf l       .debug_str	00000000 
0002ee2f l       .debug_str	00000000 
0002ee57 l       .debug_str	00000000 
0002ee40 l       .debug_str	00000000 
00057387 l       .debug_str	00000000 
000022f0 l       .debug_str	00000000 
0005540a l       .debug_str	00000000 
0002ef06 l       .debug_str	00000000 
0002eee8 l       .debug_str	00000000 
0002effc l       .debug_str	00000000 
0002efdc l       .debug_str	00000000 
0002f06f l       .debug_str	00000000 
0002f04f l       .debug_str	00000000 
000457b6 l       .debug_str	00000000 
0002f0c2 l       .debug_str	00000000 
0002f0cf l       .debug_str	00000000 
0002f0da l       .debug_str	00000000 
0002f0f0 l       .debug_str	00000000 
0002f0fa l       .debug_str	00000000 
0002f150 l       .debug_str	00000000 
0002f162 l       .debug_str	00000000 
0002f1b4 l       .debug_str	00000000 
0002f1c8 l       .debug_str	00000000 
0002f21c l       .debug_str	00000000 
0002f223 l       .debug_str	00000000 
0002f269 l       .debug_str	00000000 
0002f278 l       .debug_str	00000000 
0002f2d2 l       .debug_str	00000000 
0002f328 l       .debug_str	00000000 
0002f380 l       .debug_str	00000000 
0002f3ca l       .debug_str	00000000 
0002f3d0 l       .debug_str	00000000 
0002f420 l       .debug_str	00000000 
0002f46c l       .debug_str	00000000 
0002f4ba l       .debug_str	00000000 
0001d8f5 l       .debug_str	00000000 
0002f4fa l       .debug_str	00000000 
0002f547 l       .debug_str	00000000 
0002f590 l       .debug_str	00000000 
0002f5db l       .debug_str	00000000 
0002f618 l       .debug_str	00000000 
0002f628 l       .debug_str	00000000 
0002f683 l       .debug_str	00000000 
0002f6da l       .debug_str	00000000 
0002f733 l       .debug_str	00000000 
0003caee l       .debug_str	00000000 
0002f77e l       .debug_str	00000000 
0002f7d2 l       .debug_str	00000000 
0002f822 l       .debug_str	00000000 
0002f874 l       .debug_str	00000000 
00054e76 l       .debug_str	00000000 
0002f8b8 l       .debug_str	00000000 
0002f904 l       .debug_str	00000000 
0002f94c l       .debug_str	00000000 
0002f996 l       .debug_str	00000000 
0003c911 l       .debug_str	00000000 
0002f9d2 l       .debug_str	00000000 
0002fa26 l       .debug_str	00000000 
0002fa76 l       .debug_str	00000000 
0002fac8 l       .debug_str	00000000 
0002fb0c l       .debug_str	00000000 
0002fb18 l       .debug_str	00000000 
0002fb6f l       .debug_str	00000000 
0002fbc2 l       .debug_str	00000000 
0002fc17 l       .debug_str	00000000 
0002fc5e l       .debug_str	00000000 
0002fc6a l       .debug_str	00000000 
0002fc81 l       .debug_str	00000000 
0002fc7a l       .debug_str	00000000 
0002fc93 l       .debug_str	00000000 
0002fca8 l       .debug_str	00000000 
0002fcf9 l       .debug_str	00000000 
0002fd09 l       .debug_str	00000000 
0002fd5a l       .debug_str	00000000 
0002fd65 l       .debug_str	00000000 
0002fd88 l       .debug_str	00000000 
0002fdbc l       .debug_str	00000000 
0002fdd2 l       .debug_str	00000000 
0002fe00 l       .debug_str	00000000 
0002fdf4 l       .debug_str	00000000 
0002fe0e l       .debug_str	00000000 
0002fe0d l       .debug_str	00000000 
000013f7 l       .debug_str	00000000 
00016c35 l       .debug_str	00000000 
0001d878 l       .debug_str	00000000 
0001d877 l       .debug_str	00000000 
0001d87d l       .debug_str	00000000 
0001d87c l       .debug_str	00000000 
0002fe11 l       .debug_str	00000000 
0002fe51 l       .debug_str	00000000 
0002fe59 l       .debug_str	00000000 
0002fe99 l       .debug_str	00000000 
0002fea3 l       .debug_str	00000000 
0005440e l       .debug_str	00000000 
00058f81 l       .debug_str	00000000 
0002fedf l       .debug_str	00000000 
00018535 l       .debug_str	00000000 
00032d0d l       .debug_str	00000000 
0002ff07 l       .debug_str	00000000 
00018454 l       .debug_str	00000000 
0002ff30 l       .debug_str	00000000 
0002ff55 l       .debug_str	00000000 
00040f72 l       .debug_str	00000000 
00055464 l       .debug_str	00000000 
0002ff5c l       .debug_str	00000000 
0002ff65 l       .debug_str	00000000 
0002ff9e l       .debug_str	00000000 
00010834 l       .debug_str	00000000 
0002ffa6 l       .debug_str	00000000 
000123c9 l       .debug_str	00000000 
0003003b l       .debug_str	00000000 
0000b740 l       .debug_str	00000000 
00030086 l       .debug_str	00000000 
0000b6df l       .debug_str	00000000 
000300cd l       .debug_str	00000000 
00011b19 l       .debug_str	00000000 
00030122 l       .debug_str	00000000 
0003015f l       .debug_str	00000000 
000114ea l       .debug_str	00000000 
0003016a l       .debug_str	00000000 
000122d3 l       .debug_str	00000000 
000301bf l       .debug_str	00000000 
00012263 l       .debug_str	00000000 
00030211 l       .debug_str	00000000 
0000a404 l       .debug_str	00000000 
00030258 l       .debug_str	00000000 
0000a3ff l       .debug_str	00000000 
00002808 l       .debug_str	00000000 
000114f4 l       .debug_str	00000000 
00030c6c l       .debug_str	00000000 
000302de l       .debug_str	00000000 
0003031f l       .debug_str	00000000 
00030342 l       .debug_str	00000000 
0003037d l       .debug_str	00000000 
00030387 l       .debug_str	00000000 
00030411 l       .debug_str	00000000 
00030443 l       .debug_str	00000000 
000134d8 l       .debug_str	00000000 
000114e2 l       .debug_str	00000000 
000304b7 l       .debug_str	00000000 
00030508 l       .debug_str	00000000 
00011642 l       .debug_str	00000000 
0003054a l       .debug_str	00000000 
000305d1 l       .debug_str	00000000 
000305e0 l       .debug_str	00000000 
0003066a l       .debug_str	00000000 
000306e6 l       .debug_str	00000000 
00030716 l       .debug_str	00000000 
00030751 l       .debug_str	00000000 
0003075b l       .debug_str	00000000 
000307d2 l       .debug_str	00000000 
000307dc l       .debug_str	00000000 
00030831 l       .debug_str	00000000 
0003083a l       .debug_str	00000000 
0003088b l       .debug_str	00000000 
00004fbb l       .debug_str	00000000 
00030897 l       .debug_str	00000000 
0000163d l       .debug_str	00000000 
000308a4 l       .debug_str	00000000 
000308ad l       .debug_str	00000000 
000308c3 l       .debug_str	00000000 
000308d0 l       .debug_str	00000000 
00030915 l       .debug_str	00000000 
00030929 l       .debug_str	00000000 
0003097e l       .debug_str	00000000 
00030987 l       .debug_str	00000000 
00047c6d l       .debug_str	00000000 
000309bf l       .debug_str	00000000 
000309fc l       .debug_str	00000000 
00030a07 l       .debug_str	00000000 
00030a8a l       .debug_str	00000000 
00030a95 l       .debug_str	00000000 
00030b1b l       .debug_str	00000000 
00030b90 l       .debug_str	00000000 
00030bbc l       .debug_str	00000000 
00030c45 l       .debug_str	00000000 
00030c54 l       .debug_str	00000000 
00030c61 l       .debug_str	00000000 
00030c75 l       .debug_str	00000000 
00030ccb l       .debug_str	00000000 
00030d3a l       .debug_str	00000000 
00030dba l       .debug_str	00000000 
00030e28 l       .debug_str	00000000 
00030eb3 l       .debug_str	00000000 
00030f28 l       .debug_str	00000000 
00030f68 l       .debug_str	00000000 
00030feb l       .debug_str	00000000 
0003102c l       .debug_str	00000000 
00045678 l       .debug_str	00000000 
00049192 l       .debug_str	00000000 
00031091 l       .debug_str	00000000 
00031140 l       .debug_str	00000000 
0003118b l       .debug_str	00000000 
0001254e l       .debug_str	00000000 
00031234 l       .debug_str	00000000 
000312b0 l       .debug_str	00000000 
00011396 l       .debug_str	00000000 
000312d5 l       .debug_str	00000000 
0000b7ab l       .debug_str	00000000 
00031322 l       .debug_str	00000000 
00011abc l       .debug_str	00000000 
00031375 l       .debug_str	00000000 
000313b0 l       .debug_str	00000000 
000313bb l       .debug_str	00000000 
00017bc6 l       .debug_str	00000000 
00031447 l       .debug_str	00000000 
00011714 l       .debug_str	00000000 
000314ca l       .debug_str	00000000 
00031552 l       .debug_str	00000000 
00018a2b l       .debug_str	00000000 
000315c7 l       .debug_str	00000000 
0003164d l       .debug_str	00000000 
00012a55 l       .debug_str	00000000 
000316c2 l       .debug_str	00000000 
0000af48 l       .debug_str	00000000 
00031725 l       .debug_str	00000000 
0000a489 l       .debug_str	00000000 
00031787 l       .debug_str	00000000 
0000a15c l       .debug_str	00000000 
000317cd l       .debug_str	00000000 
00031815 l       .debug_str	00000000 
0003181f l       .debug_str	00000000 
00031860 l       .debug_str	00000000 
0003187a l       .debug_str	00000000 
0001d91a l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00031880 l       .debug_str	00000000 
00031889 l       .debug_str	00000000 
000318ee l       .debug_str	00000000 
000318fd l       .debug_str	00000000 
0003193f l       .debug_str	00000000 
00031949 l       .debug_str	00000000 
000319ae l       .debug_str	00000000 
000319f0 l       .debug_str	00000000 
00031a3a l       .debug_str	00000000 
00031a49 l       .debug_str	00000000 
00031a7f l       .debug_str	00000000 
00031a88 l       .debug_str	00000000 
000149e9 l       .debug_str	00000000 
00031a92 l       .debug_str	00000000 
00031a95 l       .debug_str	00000000 
00031acd l       .debug_str	00000000 
00031ad7 l       .debug_str	00000000 
00031b1b l       .debug_str	00000000 
00031b31 l       .debug_str	00000000 
00031b7a l       .debug_str	00000000 
00011689 l       .debug_str	00000000 
0001d905 l       .debug_str	00000000 
00031bbf l       .debug_str	00000000 
00031c08 l       .debug_str	00000000 
00031c16 l       .debug_str	00000000 
00031c5e l       .debug_str	00000000 
0001bfe9 l       .debug_str	00000000 
00031ca8 l       .debug_str	00000000 
0003b548 l       .debug_str	00000000 
00031d40 l       .debug_str	00000000 
00054e47 l       .debug_str	00000000 
00031dda l       .debug_str	00000000 
0001c4d9 l       .debug_str	00000000 
00031e4c l       .debug_str	00000000 
0001c20c l       .debug_str	00000000 
00031eef l       .debug_str	00000000 
000011d2 l       .debug_str	00000000 
00031f21 l       .debug_str	00000000 
00031f68 l       .debug_str	00000000 
00031f76 l       .debug_str	00000000 
00031f80 l       .debug_str	00000000 
00031fce l       .debug_str	00000000 
00031fde l       .debug_str	00000000 
00032029 l       .debug_str	00000000 
00032037 l       .debug_str	00000000 
000320c5 l       .debug_str	00000000 
000320d4 l       .debug_str	00000000 
0000b7fa l       .debug_str	00000000 
0003211d l       .debug_str	00000000 
0000b7a3 l       .debug_str	00000000 
00032162 l       .debug_str	00000000 
0003219c l       .debug_str	00000000 
000321a5 l       .debug_str	00000000 
000321f1 l       .debug_str	00000000 
00032209 l       .debug_str	00000000 
0003226b l       .debug_str	00000000 
0000b6e7 l       .debug_str	00000000 
000322a0 l       .debug_str	00000000 
000322c8 l       .debug_str	00000000 
00032300 l       .debug_str	00000000 
00032329 l       .debug_str	00000000 
00032334 l       .debug_str	00000000 
00032359 l       .debug_str	00000000 
0003235d l       .debug_str	00000000 
000323ec l       .debug_str	00000000 
00032423 l       .debug_str	00000000 
000324a9 l       .debug_str	00000000 
000324f7 l       .debug_str	00000000 
00032500 l       .debug_str	00000000 
00032586 l       .debug_str	00000000 
00032599 l       .debug_str	00000000 
00032622 l       .debug_str	00000000 
0003267e l       .debug_str	00000000 
000326c0 l       .debug_str	00000000 
00032772 l       .debug_str	00000000 
000327b1 l       .debug_str	00000000 
00032856 l       .debug_str	00000000 
000328ea l       .debug_str	00000000 
00032910 l       .debug_str	00000000 
0003298c l       .debug_str	00000000 
000329c7 l       .debug_str	00000000 
000329d4 l       .debug_str	00000000 
00032a0d l       .debug_str	00000000 
00032a25 l       .debug_str	00000000 
00032a65 l       .debug_str	00000000 
000113a7 l       .debug_str	00000000 
00032a71 l       .debug_str	00000000 
00032ace l       .debug_str	00000000 
00032b2b l       .debug_str	00000000 
00032bd8 l       .debug_str	00000000 
00032c35 l       .debug_str	00000000 
00013e4d l       .debug_str	00000000 
00032ca2 l       .debug_str	00000000 
00032d06 l       .debug_str	00000000 
00032d11 l       .debug_str	00000000 
00032d41 l       .debug_str	00000000 
00032d6d l       .debug_str	00000000 
00032dd9 l       .debug_str	00000000 
00032e09 l       .debug_str	00000000 
00032e45 l       .debug_str	00000000 
00032e8f l       .debug_str	00000000 
00032e9f l       .debug_str	00000000 
00032ed4 l       .debug_str	00000000 
00032f19 l       .debug_str	00000000 
00032f24 l       .debug_str	00000000 
00032f64 l       .debug_str	00000000 
00032f72 l       .debug_str	00000000 
00032ffe l       .debug_str	00000000 
0003307a l       .debug_str	00000000 
0003309a l       .debug_str	00000000 
000330f4 l       .debug_str	00000000 
00033101 l       .debug_str	00000000 
0003313a l       .debug_str	00000000 
00033142 l       .debug_str	00000000 
00033197 l       .debug_str	00000000 
000331e9 l       .debug_str	00000000 
000320ca l       .debug_str	00000000 
00033230 l       .debug_str	00000000 
000332a4 l       .debug_str	00000000 
000332e8 l       .debug_str	00000000 
00033334 l       .debug_str	00000000 
00033373 l       .debug_str	00000000 
00033399 l       .debug_str	00000000 
000333ab l       .debug_str	00000000 
000333b5 l       .debug_str	00000000 
000333f7 l       .debug_str	00000000 
0003347e l       .debug_str	00000000 
0003348c l       .debug_str	00000000 
00033508 l       .debug_str	00000000 
00033535 l       .debug_str	00000000 
000335ac l       .debug_str	00000000 
000335fa l       .debug_str	00000000 
00017c49 l       .debug_str	00000000 
0003368a l       .debug_str	00000000 
000336c6 l       .debug_str	00000000 
000336d3 l       .debug_str	00000000 
00033719 l       .debug_str	00000000 
00033726 l       .debug_str	00000000 
00034497 l       .debug_str	00000000 
00033758 l       .debug_str	00000000 
000337a8 l       .debug_str	00000000 
000337bf l       .debug_str	00000000 
00033849 l       .debug_str	00000000 
0000a34a l       .debug_str	00000000 
000338c5 l       .debug_str	00000000 
000338d9 l       .debug_str	00000000 
00033936 l       .debug_str	00000000 
00033945 l       .debug_str	00000000 
00033956 l       .debug_str	00000000 
000339b0 l       .debug_str	00000000 
000339bf l       .debug_str	00000000 
00033a48 l       .debug_str	00000000 
00033a56 l       .debug_str	00000000 
00033aac l       .debug_str	00000000 
00033b00 l       .debug_str	00000000 
00033b79 l       .debug_str	00000000 
00033b91 l       .debug_str	00000000 
00033b9b l       .debug_str	00000000 
00033c32 l       .debug_str	00000000 
00033c4c l       .debug_str	00000000 
00033c85 l       .debug_str	00000000 
00033ca0 l       .debug_str	00000000 
00014073 l       .debug_str	00000000 
00033d05 l       .debug_str	00000000 
00033d9c l       .debug_str	00000000 
00033da0 l       .debug_str	00000000 
00034095 l       .debug_str	00000000 
00033da5 l       .debug_str	00000000 
00059e49 l       .debug_str	00000000 
0001139c l       .debug_str	00000000 
00033dd7 l       .debug_str	00000000 
00017148 l       .debug_str	00000000 
00033e15 l       .debug_str	00000000 
0000a102 l       .debug_str	00000000 
00033e68 l       .debug_str	00000000 
00033ef4 l       .debug_str	00000000 
00033f70 l       .debug_str	00000000 
00033f8f l       .debug_str	00000000 
00033fda l       .debug_str	00000000 
00033fe7 l       .debug_str	00000000 
0003405b l       .debug_str	00000000 
000383ba l       .debug_str	00000000 
00049bbc l       .debug_str	00000000 
0003407a l       .debug_str	00000000 
0003409a l       .debug_str	00000000 
000340b6 l       .debug_str	00000000 
000340c0 l       .debug_str	00000000 
0003414c l       .debug_str	00000000 
000341c8 l       .debug_str	00000000 
000341f9 l       .debug_str	00000000 
0003427c l       .debug_str	00000000 
0003429c l       .debug_str	00000000 
00034322 l       .debug_str	00000000 
00034397 l       .debug_str	00000000 
000343d8 l       .debug_str	00000000 
00057415 l       .debug_str	00000000 
000343e8 l       .debug_str	00000000 
0001c59f l       .debug_str	00000000 
00034433 l       .debug_str	00000000 
0003448f l       .debug_str	00000000 
0003449b l       .debug_str	00000000 
000344e4 l       .debug_str	00000000 
000344f4 l       .debug_str	00000000 
00034539 l       .debug_str	00000000 
00034582 l       .debug_str	00000000 
000345c7 l       .debug_str	00000000 
00034623 l       .debug_str	00000000 
0003466e l       .debug_str	00000000 
000346b5 l       .debug_str	00000000 
00034713 l       .debug_str	00000000 
0003475e l       .debug_str	00000000 
000347a5 l       .debug_str	00000000 
00034803 l       .debug_str	00000000 
0003484e l       .debug_str	00000000 
00034895 l       .debug_str	00000000 
000348f3 l       .debug_str	00000000 
0003493c l       .debug_str	00000000 
00034981 l       .debug_str	00000000 
000349dd l       .debug_str	00000000 
00034a26 l       .debug_str	00000000 
00034a6b l       .debug_str	00000000 
00034ac7 l       .debug_str	00000000 
00034b11 l       .debug_str	00000000 
00034b57 l       .debug_str	00000000 
00034bb4 l       .debug_str	00000000 
00034bfe l       .debug_str	00000000 
00034c44 l       .debug_str	00000000 
00034ca1 l       .debug_str	00000000 
00034cfc l       .debug_str	00000000 
00034d44 l       .debug_str	00000000 
00034d88 l       .debug_str	00000000 
00034dd0 l       .debug_str	00000000 
00034e14 l       .debug_str	00000000 
00034e6f l       .debug_str	00000000 
00034eb8 l       .debug_str	00000000 
00034efd l       .debug_str	00000000 
00034f59 l       .debug_str	00000000 
00034fa2 l       .debug_str	00000000 
00034fe7 l       .debug_str	00000000 
00035043 l       .debug_str	00000000 
0003508c l       .debug_str	00000000 
000350d1 l       .debug_str	00000000 
0003512d l       .debug_str	00000000 
00035177 l       .debug_str	00000000 
000351bd l       .debug_str	00000000 
0003521a l       .debug_str	00000000 
00035264 l       .debug_str	00000000 
000352aa l       .debug_str	00000000 
00035307 l       .debug_str	00000000 
00035351 l       .debug_str	00000000 
00035397 l       .debug_str	00000000 
000353f4 l       .debug_str	00000000 
0003544f l       .debug_str	00000000 
00035497 l       .debug_str	00000000 
000354db l       .debug_str	00000000 
00035523 l       .debug_str	00000000 
00035567 l       .debug_str	00000000 
000355c2 l       .debug_str	00000000 
0003561d l       .debug_str	00000000 
00035665 l       .debug_str	00000000 
000356a9 l       .debug_str	00000000 
000356f2 l       .debug_str	00000000 
00035737 l       .debug_str	00000000 
00035793 l       .debug_str	00000000 
000357ef l       .debug_str	00000000 
00035838 l       .debug_str	00000000 
0003587d l       .debug_str	00000000 
000358d9 l       .debug_str	00000000 
00035922 l       .debug_str	00000000 
00035967 l       .debug_str	00000000 
000359c3 l       .debug_str	00000000 
00035a0c l       .debug_str	00000000 
00035a51 l       .debug_str	00000000 
0001c0bf l       .debug_str	00000000 
00035aad l       .debug_str	00000000 
00035aec l       .debug_str	00000000 
00035b21 l       .debug_str	00000000 
0000504a l       .debug_str	00000000 
00011507 l       .debug_str	00000000 
00011670 l       .debug_str	00000000 
00035b2b l       .debug_str	00000000 
0001364e l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
00035b65 l       .debug_str	00000000 
000102bc l       .debug_str	00000000 
00035bf7 l       .debug_str	00000000 
00012b62 l       .debug_str	00000000 
00035c30 l       .debug_str	00000000 
00012049 l       .debug_str	00000000 
00035c57 l       .debug_str	00000000 
00011f95 l       .debug_str	00000000 
00005023 l       .debug_str	00000000 
00035c91 l       .debug_str	00000000 
00011d14 l       .debug_str	00000000 
00035cb7 l       .debug_str	00000000 
00011a5b l       .debug_str	00000000 
00035d11 l       .debug_str	00000000 
0001246f l       .debug_str	00000000 
00035dab l       .debug_str	00000000 
0001167f l       .debug_str	00000000 
00035e34 l       .debug_str	00000000 
00035edb l       .debug_str	00000000 
00035f14 l       .debug_str	00000000 
00035f89 l       .debug_str	00000000 
00035fb2 l       .debug_str	00000000 
00025b2f l       .debug_str	00000000 
00035fe7 l       .debug_str	00000000 
00036023 l       .debug_str	00000000 
00036034 l       .debug_str	00000000 
0003606d l       .debug_str	00000000 
0003607a l       .debug_str	00000000 
0003607f l       .debug_str	00000000 
0003608e l       .debug_str	00000000 
000318f6 l       .debug_str	00000000 
000360d7 l       .debug_str	00000000 
0003610a l       .debug_str	00000000 
00036117 l       .debug_str	00000000 
0005b110 l       .debug_str	00000000 
00036162 l       .debug_str	00000000 
000361ba l       .debug_str	00000000 
000361cf l       .debug_str	00000000 
00036205 l       .debug_str	00000000 
00036210 l       .debug_str	00000000 
00025c3d l       .debug_str	00000000 
0003626f l       .debug_str	00000000 
000362e2 l       .debug_str	00000000 
00036349 l       .debug_str	00000000 
00036369 l       .debug_str	00000000 
000363a8 l       .debug_str	00000000 
000363c7 l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
0003643a l       .debug_str	00000000 
000364b7 l       .debug_str	00000000 
0003651c l       .debug_str	00000000 
0003657c l       .debug_str	00000000 
000365ef l       .debug_str	00000000 
0003666c l       .debug_str	00000000 
000137e3 l       .debug_str	00000000 
000366e4 l       .debug_str	00000000 
00036759 l       .debug_str	00000000 
000367d3 l       .debug_str	00000000 
0001436b l       .debug_str	00000000 
00014376 l       .debug_str	00000000 
00036833 l       .debug_str	00000000 
000590f6 l       .debug_str	00000000 
00036871 l       .debug_str	00000000 
000368b3 l       .debug_str	00000000 
000368de l       .debug_str	00000000 
0003691f l       .debug_str	00000000 
00036929 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00059fb0 l       .debug_str	00000000 
0005488e l       .debug_str	00000000 
00000e5d l       .debug_str	00000000 
00036985 l       .debug_str	00000000 
00010372 l       .debug_str	00000000 
000369c1 l       .debug_str	00000000 
0001030f l       .debug_str	00000000 
00036a08 l       .debug_str	00000000 
00036a66 l       .debug_str	00000000 
0002e2d0 l       .debug_str	00000000 
00036abd l       .debug_str	00000000 
00036b17 l       .debug_str	00000000 
00036b21 l       .debug_str	00000000 
00036b64 l       .debug_str	00000000 
00036b69 l       .debug_str	00000000 
00036b70 l       .debug_str	00000000 
00036ba6 l       .debug_str	00000000 
00036bb6 l       .debug_str	00000000 
00036bc5 l       .debug_str	00000000 
00036bd0 l       .debug_str	00000000 
0002e3b6 l       .debug_str	00000000 
00036c0a l       .debug_str	00000000 
00036c53 l       .debug_str	00000000 
0001e870 l       .debug_str	00000000 
00036c9a l       .debug_str	00000000 
00036cd5 l       .debug_str	00000000 
00036cfa l       .debug_str	00000000 
00036d66 l       .debug_str	00000000 
00036d79 l       .debug_str	00000000 
00036df0 l       .debug_str	00000000 
00036dfb l       .debug_str	00000000 
00036e38 l       .debug_str	00000000 
00036e43 l       .debug_str	00000000 
00036ec4 l       .debug_str	00000000 
00036f0a l       .debug_str	00000000 
00036f31 l       .debug_str	00000000 
00036f60 l       .debug_str	00000000 
00036f71 l       .debug_str	00000000 
000115c2 l       .debug_str	00000000 
00036fcd l       .debug_str	00000000 
00036ffe l       .debug_str	00000000 
00018741 l       .debug_str	00000000 
00037046 l       .debug_str	00000000 
000181a3 l       .debug_str	00000000 
00037084 l       .debug_str	00000000 
000370c8 l       .debug_str	00000000 
0003711b l       .debug_str	00000000 
00033b7a l       .debug_str	00000000 
00037193 l       .debug_str	00000000 
000371e2 l       .debug_str	00000000 
00037278 l       .debug_str	00000000 
000372bc l       .debug_str	00000000 
0003b047 l       .debug_str	00000000 
00037334 l       .debug_str	00000000 
00037383 l       .debug_str	00000000 
00037419 l       .debug_str	00000000 
00037433 l       .debug_str	00000000 
00037482 l       .debug_str	00000000 
000374bb l       .debug_str	00000000 
000374d6 l       .debug_str	00000000 
000131fc l       .debug_str	00000000 
0003753a l       .debug_str	00000000 
00012af9 l       .debug_str	00000000 
000375b3 l       .debug_str	00000000 
0001add6 l       .debug_str	00000000 
00037624 l       .debug_str	00000000 
000376ba l       .debug_str	00000000 
00037752 l       .debug_str	00000000 
000377c4 l       .debug_str	00000000 
000377ec l       .debug_str	00000000 
0001b871 l       .debug_str	00000000 
000378a4 l       .debug_str	00000000 
0001c9fd l       .debug_str	00000000 
000378e9 l       .debug_str	00000000 
0003799f l       .debug_str	00000000 
000379e4 l       .debug_str	00000000 
000025e3 l       .debug_str	00000000 
00037a26 l       .debug_str	00000000 
00037a81 l       .debug_str	00000000 
00037a86 l       .debug_str	00000000 
00037adf l       .debug_str	00000000 
00037b13 l       .debug_str	00000000 
00037b27 l       .debug_str	00000000 
00037b62 l       .debug_str	00000000 
00037ba4 l       .debug_str	00000000 
00037bba l       .debug_str	00000000 
00037c26 l       .debug_str	00000000 
0001436f l       .debug_str	00000000 
0000af6d l       .debug_str	00000000 
0000af78 l       .debug_str	00000000 
00037c68 l       .debug_str	00000000 
00037ca8 l       .debug_str	00000000 
00037d02 l       .debug_str	00000000 
00037d44 l       .debug_str	00000000 
00037d9f l       .debug_str	00000000 
00037de1 l       .debug_str	00000000 
00037dec l       .debug_str	00000000 
00037e2c l       .debug_str	00000000 
00037e32 l       .debug_str	00000000 
00037e8c l       .debug_str	00000000 
00037e95 l       .debug_str	00000000 
00037ed7 l       .debug_str	00000000 
00037f2f l       .debug_str	00000000 
00037f71 l       .debug_str	00000000 
00037fca l       .debug_str	00000000 
00037fd4 l       .debug_str	00000000 
00037fdc l       .debug_str	00000000 
00037fe5 l       .debug_str	00000000 
00037fd8 l       .debug_str	00000000 
00038027 l       .debug_str	00000000 
0003807c l       .debug_str	00000000 
000380b9 l       .debug_str	00000000 
000380fb l       .debug_str	00000000 
00038152 l       .debug_str	00000000 
00038194 l       .debug_str	00000000 
000381ec l       .debug_str	00000000 
00038224 l       .debug_str	00000000 
00038230 l       .debug_str	00000000 
0003826d l       .debug_str	00000000 
000382cf l       .debug_str	00000000 
00038310 l       .debug_str	00000000 
00038319 l       .debug_str	00000000 
00038377 l       .debug_str	00000000 
000383b0 l       .debug_str	00000000 
000383bf l       .debug_str	00000000 
000383fe l       .debug_str	00000000 
00038413 l       .debug_str	00000000 
00038459 l       .debug_str	00000000 
00038466 l       .debug_str	00000000 
0003846c l       .debug_str	00000000 
000384a5 l       .debug_str	00000000 
00038531 l       .debug_str	00000000 
0003856d l       .debug_str	00000000 
0005447d l       .debug_str	00000000 
0003857f l       .debug_str	00000000 
000385b7 l       .debug_str	00000000 
000385c3 l       .debug_str	00000000 
00038600 l       .debug_str	00000000 
00038662 l       .debug_str	00000000 
000386a3 l       .debug_str	00000000 
00038701 l       .debug_str	00000000 
0003873b l       .debug_str	00000000 
00038795 l       .debug_str	00000000 
000387de l       .debug_str	00000000 
000387ee l       .debug_str	00000000 
00038827 l       .debug_str	00000000 
000388a9 l       .debug_str	00000000 
000388e3 l       .debug_str	00000000 
0003893d l       .debug_str	00000000 
00038978 l       .debug_str	00000000 
000389d8 l       .debug_str	00000000 
00038a13 l       .debug_str	00000000 
00038a73 l       .debug_str	00000000 
00038ab1 l       .debug_str	00000000 
00038b0f l       .debug_str	00000000 
00038b4d l       .debug_str	00000000 
00038bab l       .debug_str	00000000 
00038bf6 l       .debug_str	00000000 
00038bff l       .debug_str	00000000 
00038c4e l       .debug_str	00000000 
00000d97 l       .debug_str	00000000 
00038c5a l       .debug_str	00000000 
00038c8b l       .debug_str	00000000 
00038cb6 l       .debug_str	00000000 
00038d04 l       .debug_str	00000000 
000115f3 l       .debug_str	00000000 
00038d0b l       .debug_str	00000000 
00038d70 l       .debug_str	00000000 
00038da1 l       .debug_str	00000000 
00038da9 l       .debug_str	00000000 
00011c71 l       .debug_str	00000000 
00038dda l       .debug_str	00000000 
00038e33 l       .debug_str	00000000 
00038ec1 l       .debug_str	00000000 
00038f0d l       .debug_str	00000000 
00038f32 l       .debug_str	00000000 
00038f4f l       .debug_str	00000000 
00038f79 l       .debug_str	00000000 
00038f9b l       .debug_str	00000000 
00038fa9 l       .debug_str	00000000 
00038fbc l       .debug_str	00000000 
00038fc7 l       .debug_str	00000000 
00039014 l       .debug_str	00000000 
00039059 l       .debug_str	00000000 
00039098 l       .debug_str	00000000 
000390e4 l       .debug_str	00000000 
00039173 l       .debug_str	00000000 
000391c0 l       .debug_str	00000000 
00039246 l       .debug_str	00000000 
0005637f l       .debug_str	00000000 
0003926b l       .debug_str	00000000 
00039295 l       .debug_str	00000000 
0003929e l       .debug_str	00000000 
000392d4 l       .debug_str	00000000 
000392dd l       .debug_str	00000000 
0003936b l       .debug_str	00000000 
000393b1 l       .debug_str	00000000 
000393d0 l       .debug_str	00000000 
000393e7 l       .debug_str	00000000 
0003940b l       .debug_str	00000000 
00039427 l       .debug_str	00000000 
0003946e l       .debug_str	00000000 
000394b3 l       .debug_str	00000000 
000394f2 l       .debug_str	00000000 
00039538 l       .debug_str	00000000 
000395c7 l       .debug_str	00000000 
0003960e l       .debug_str	00000000 
00039694 l       .debug_str	00000000 
000396c9 l       .debug_str	00000000 
000396d3 l       .debug_str	00000000 
00055398 l       .debug_str	00000000 
0003973e l       .debug_str	00000000 
00039773 l       .debug_str	00000000 
0003977d l       .debug_str	00000000 
000397b0 l       .debug_str	00000000 
000397b8 l       .debug_str	00000000 
000397ec l       .debug_str	00000000 
000397fe l       .debug_str	00000000 
00039838 l       .debug_str	00000000 
00039856 l       .debug_str	00000000 
0003987c l       .debug_str	00000000 
00039887 l       .debug_str	00000000 
000398b0 l       .debug_str	00000000 
000398be l       .debug_str	00000000 
000398f8 l       .debug_str	00000000 
0003992e l       .debug_str	00000000 
00039954 l       .debug_str	00000000 
00039977 l       .debug_str	00000000 
000399a0 l       .debug_str	00000000 
000399c6 l       .debug_str	00000000 
00039a04 l       .debug_str	00000000 
00039a1e l       .debug_str	00000000 
00039a5c l       .debug_str	00000000 
00039a8e l       .debug_str	00000000 
00039a9a l       .debug_str	00000000 
0005bb24 l       .debug_str	00000000 
00039ace l       .debug_str	00000000 
00039adb l       .debug_str	00000000 
0001beb8 l       .debug_str	00000000 
00039b0d l       .debug_str	00000000 
00039b77 l       .debug_str	00000000 
00039be7 l       .debug_str	00000000 
00039c4e l       .debug_str	00000000 
00039c6b l       .debug_str	00000000 
00039caa l       .debug_str	00000000 
00039cc6 l       .debug_str	00000000 
0001be7a l       .debug_str	00000000 
00039cf4 l       .debug_str	00000000 
0001bf56 l       .debug_str	00000000 
00039d29 l       .debug_str	00000000 
00039d65 l       .debug_str	00000000 
00039d8b l       .debug_str	00000000 
00039dca l       .debug_str	00000000 
00039dda l       .debug_str	00000000 
00039e3e l       .debug_str	00000000 
00039e75 l       .debug_str	00000000 
00039e8b l       .debug_str	00000000 
00039eda l       .debug_str	00000000 
00039ee6 l       .debug_str	00000000 
00039fb8 l       .debug_str	00000000 
00039f2d l       .debug_str	00000000 
00039fb3 l       .debug_str	00000000 
00039fd7 l       .debug_str	00000000 
0003a012 l       .debug_str	00000000 
0003a022 l       .debug_str	00000000 
0005ba4c l       .debug_str	00000000 
0003a063 l       .debug_str	00000000 
0003a09d l       .debug_str	00000000 
0003a0ac l       .debug_str	00000000 
0003a0e5 l       .debug_str	00000000 
0003a0f3 l       .debug_str	00000000 
0003a12c l       .debug_str	00000000 
0003a13a l       .debug_str	00000000 
0003a18a l       .debug_str	00000000 
0003a197 l       .debug_str	00000000 
0003a20d l       .debug_str	00000000 
0003a218 l       .debug_str	00000000 
0003a22a l       .debug_str	00000000 
0003a276 l       .debug_str	00000000 
0003a293 l       .debug_str	00000000 
0003a327 l       .debug_str	00000000 
0003a3bd l       .debug_str	00000000 
0003a42f l       .debug_str	00000000 
0003a455 l       .debug_str	00000000 
0003a4f4 l       .debug_str	00000000 
0003a565 l       .debug_str	00000000 
000115ba l       .debug_str	00000000 
0003a5aa l       .debug_str	00000000 
0003a60d l       .debug_str	00000000 
0003a630 l       .debug_str	00000000 
0003a684 l       .debug_str	00000000 
0003a69b l       .debug_str	00000000 
0001e2b8 l       .debug_str	00000000 
0003a6e8 l       .debug_str	00000000 
0003a6f5 l       .debug_str	00000000 
0003a730 l       .debug_str	00000000 
0003a758 l       .debug_str	00000000 
0003a7ba l       .debug_str	00000000 
0003620a l       .debug_str	00000000 
0003a823 l       .debug_str	00000000 
0003d085 l       .debug_str	00000000 
00005027 l       .debug_str	00000000 
0000502d l       .debug_str	00000000 
00005034 l       .debug_str	00000000 
0003a870 l       .debug_str	00000000 
0003a881 l       .debug_str	00000000 
0003a891 l       .debug_str	00000000 
0000aa5f l       .debug_str	00000000 
0003a8dc l       .debug_str	00000000 
0003a95f l       .debug_str	00000000 
0003a98f l       .debug_str	00000000 
0003aa17 l       .debug_str	00000000 
0003aa8c l       .debug_str	00000000 
0003aadf l       .debug_str	00000000 
0003ab6b l       .debug_str	00000000 
0003aba3 l       .debug_str	00000000 
0003abf8 l       .debug_str	00000000 
0003ac29 l       .debug_str	00000000 
0003ac7b l       .debug_str	00000000 
0003aca9 l       .debug_str	00000000 
0003acfd l       .debug_str	00000000 
0003ad23 l       .debug_str	00000000 
000180ef l       .debug_str	00000000 
0003ad5a l       .debug_str	00000000 
0003ada5 l       .debug_str	00000000 
0003adc1 l       .debug_str	00000000 
0003ae17 l       .debug_str	00000000 
00018236 l       .debug_str	00000000 
0003ae90 l       .debug_str	00000000 
0003aee0 l       .debug_str	00000000 
0003af77 l       .debug_str	00000000 
0003afcd l       .debug_str	00000000 
0003b046 l       .debug_str	00000000 
0003b05e l       .debug_str	00000000 
0003b0f5 l       .debug_str	00000000 
0003b12e l       .debug_str	00000000 
0003b35e l       .debug_str	00000000 
0003b177 l       .debug_str	00000000 
0003a01e l       .debug_str	00000000 
0003b1b4 l       .debug_str	00000000 
0003b1f8 l       .debug_str	00000000 
0003b243 l       .debug_str	00000000 
0003b283 l       .debug_str	00000000 
0003b2ad l       .debug_str	00000000 
0003b2f6 l       .debug_str	00000000 
0003b305 l       .debug_str	00000000 
0003b356 l       .debug_str	00000000 
0003b36d l       .debug_str	00000000 
0004567c l       .debug_str	00000000 
00056c41 l       .debug_str	00000000 
0003b3d4 l       .debug_str	00000000 
0003b435 l       .debug_str	00000000 
0003b454 l       .debug_str	00000000 
0003b45d l       .debug_str	00000000 
0003b469 l       .debug_str	00000000 
00014948 l       .debug_str	00000000 
0003b46f l       .debug_str	00000000 
0003b479 l       .debug_str	00000000 
0003b4ab l       .debug_str	00000000 
0003b4bb l       .debug_str	00000000 
0003b543 l       .debug_str	00000000 
0003b54c l       .debug_str	00000000 
00001174 l       .debug_str	00000000 
0003b5b9 l       .debug_str	00000000 
0003b5f8 l       .debug_str	00000000 
00013d55 l       .debug_str	00000000 
00013d61 l       .debug_str	00000000 
00013d6b l       .debug_str	00000000 
0003b607 l       .debug_str	00000000 
0003b677 l       .debug_str	00000000 
0003b69c l       .debug_str	00000000 
0003b70b l       .debug_str	00000000 
0003b731 l       .debug_str	00000000 
0003b7a0 l       .debug_str	00000000 
0003b7ca l       .debug_str	00000000 
0003b801 l       .debug_str	00000000 
0003b80c l       .debug_str	00000000 
0003b848 l       .debug_str	00000000 
0003b867 l       .debug_str	00000000 
0003b8a1 l       .debug_str	00000000 
0003b8dc l       .debug_str	00000000 
0003b918 l       .debug_str	00000000 
0000ded5 l       .debug_str	00000000 
0003b932 l       .debug_str	00000000 
0003b96e l       .debug_str	00000000 
0003b97b l       .debug_str	00000000 
000546f4 l       .debug_str	00000000 
0003b9b9 l       .debug_str	00000000 
0003b9ff l       .debug_str	00000000 
0003ba87 l       .debug_str	00000000 
0003baa0 l       .debug_str	00000000 
0003bafa l       .debug_str	00000000 
0003bb40 l       .debug_str	00000000 
0003bb58 l       .debug_str	00000000 
0003bbd8 l       .debug_str	00000000 
0003c0ac l       .debug_str	00000000 
0003bbe8 l       .debug_str	00000000 
0003bc27 l       .debug_str	00000000 
0003bc67 l       .debug_str	00000000 
0003bcf1 l       .debug_str	00000000 
0003bd08 l       .debug_str	00000000 
0003bd59 l       .debug_str	00000000 
0003bd67 l       .debug_str	00000000 
0003bd6c l       .debug_str	00000000 
0003bdc7 l       .debug_str	00000000 
0003c781 l       .debug_str	00000000 
0003be1e l       .debug_str	00000000 
0003be51 l       .debug_str	00000000 
0003be98 l       .debug_str	00000000 
0003bed2 l       .debug_str	00000000 
0003bf01 l       .debug_str	00000000 
0003bf7f l       .debug_str	00000000 
0003c003 l       .debug_str	00000000 
0003c090 l       .debug_str	00000000 
0003c0a5 l       .debug_str	00000000 
0003c0b5 l       .debug_str	00000000 
0003c101 l       .debug_str	00000000 
0003c146 l       .debug_str	00000000 
0003c1dd l       .debug_str	00000000 
0003c1f9 l       .debug_str	00000000 
0003c240 l       .debug_str	00000000 
0003c26e l       .debug_str	00000000 
0003c2a7 l       .debug_str	00000000 
0003c2c9 l       .debug_str	00000000 
000178a6 l       .debug_str	00000000 
0003c347 l       .debug_str	00000000 
0003c3c7 l       .debug_str	00000000 
0003c406 l       .debug_str	00000000 
0003c490 l       .debug_str	00000000 
0003c4dc l       .debug_str	00000000 
0003c4fa l       .debug_str	00000000 
0003c505 l       .debug_str	00000000 
0003c567 l       .debug_str	00000000 
0003c5be l       .debug_str	00000000 
0003c64b l       .debug_str	00000000 
0003c697 l       .debug_str	00000000 
0003c72e l       .debug_str	00000000 
0003c778 l       .debug_str	00000000 
0003c794 l       .debug_str	00000000 
0003c7ee l       .debug_str	00000000 
0003c7f7 l       .debug_str	00000000 
0003c856 l       .debug_str	00000000 
0003c8ad l       .debug_str	00000000 
0003c906 l       .debug_str	00000000 
0003c91b l       .debug_str	00000000 
0003c968 l       .debug_str	00000000 
0003c9b3 l       .debug_str	00000000 
0003c9c6 l       .debug_str	00000000 
0003ca11 l       .debug_str	00000000 
00017858 l       .debug_str	00000000 
0003ca24 l       .debug_str	00000000 
0003ca39 l       .debug_str	00000000 
0003ca45 l       .debug_str	00000000 
0003ca8a l       .debug_str	00000000 
0003cae3 l       .debug_str	00000000 
0003caf8 l       .debug_str	00000000 
0003cb45 l       .debug_str	00000000 
0003cb90 l       .debug_str	00000000 
0003cba3 l       .debug_str	00000000 
0003cbee l       .debug_str	00000000 
0003cc01 l       .debug_str	00000000 
0003cc65 l       .debug_str	00000000 
0003cc9e l       .debug_str	00000000 
0003ccca l       .debug_str	00000000 
0005a771 l       .debug_str	00000000 
00055b2e l       .debug_str	00000000 
0003cd49 l       .debug_str	00000000 
0003cd4f l       .debug_str	00000000 
0003cd58 l       .debug_str	00000000 
0003cd90 l       .debug_str	00000000 
0003cdad l       .debug_str	00000000 
0003cde9 l       .debug_str	00000000 
0003ce06 l       .debug_str	00000000 
0003ce62 l       .debug_str	00000000 
0003ce9a l       .debug_str	00000000 
0003cef6 l       .debug_str	00000000 
0001e810 l       .debug_str	00000000 
0003cf2e l       .debug_str	00000000 
0003cf6c l       .debug_str	00000000 
0003cf88 l       .debug_str	00000000 
0003cfde l       .debug_str	00000000 
0003d045 l       .debug_str	00000000 
0003d07d l       .debug_str	00000000 
0003d089 l       .debug_str	00000000 
0003d0f0 l       .debug_str	00000000 
0003d12f l       .debug_str	00000000 
0003d140 l       .debug_str	00000000 
0003d179 l       .debug_str	00000000 
0004b188 l       .debug_str	00000000 
0003d194 l       .debug_str	00000000 
0003d1d0 l       .debug_str	00000000 
0003d1c9 l       .debug_str	00000000 
0003d1d9 l       .debug_str	00000000 
0003d1eb l       .debug_str	00000000 
0003d236 l       .debug_str	00000000 
0003d24e l       .debug_str	00000000 
0003d258 l       .debug_str	00000000 
0003d26f l       .debug_str	00000000 
0003d27e l       .debug_str	00000000 
0003d2c0 l       .debug_str	00000000 
0003d2d9 l       .debug_str	00000000 
0003d34d l       .debug_str	00000000 
0003d35c l       .debug_str	00000000 
0003d395 l       .debug_str	00000000 
0003d3ab l       .debug_str	00000000 
0003d3eb l       .debug_str	00000000 
0003d3f6 l       .debug_str	00000000 
0003d475 l       .debug_str	00000000 
000552a7 l       .debug_str	00000000 
0003d494 l       .debug_str	00000000 
0003d4a9 l       .debug_str	00000000 
0003d4b3 l       .debug_str	00000000 
00017ee9 l       .debug_str	00000000 
0003d4b8 l       .debug_str	00000000 
0003d4e9 l       .debug_str	00000000 
0003d4fc l       .debug_str	00000000 
0003d506 l       .debug_str	00000000 
0003d523 l       .debug_str	00000000 
0003d55e l       .debug_str	00000000 
0003d593 l       .debug_str	00000000 
0003d5c4 l       .debug_str	00000000 
0003d5d8 l       .debug_str	00000000 
0003d5e3 l       .debug_str	00000000 
0003d601 l       .debug_str	00000000 
0003d63c l       .debug_str	00000000 
0003d672 l       .debug_str	00000000 
0003d6a3 l       .debug_str	00000000 
0003d6b7 l       .debug_str	00000000 
0003d6c2 l       .debug_str	00000000 
0003d6e0 l       .debug_str	00000000 
0003d71b l       .debug_str	00000000 
0003d751 l       .debug_str	00000000 
0003d782 l       .debug_str	00000000 
0003d796 l       .debug_str	00000000 
0003d7a1 l       .debug_str	00000000 
0003d7bf l       .debug_str	00000000 
0003d7fa l       .debug_str	00000000 
0003d830 l       .debug_str	00000000 
0003d861 l       .debug_str	00000000 
000420df l       .debug_str	00000000 
0003d876 l       .debug_str	00000000 
0003d882 l       .debug_str	00000000 
0003d8a1 l       .debug_str	00000000 
0003d8dc l       .debug_str	00000000 
0003d913 l       .debug_str	00000000 
0003d944 l       .debug_str	00000000 
0003d957 l       .debug_str	00000000 
0003d961 l       .debug_str	00000000 
0003d97e l       .debug_str	00000000 
0003d9b9 l       .debug_str	00000000 
0003d9ee l       .debug_str	00000000 
0003da1f l       .debug_str	00000000 
0003da33 l       .debug_str	00000000 
0003da3e l       .debug_str	00000000 
0003da5c l       .debug_str	00000000 
0003da97 l       .debug_str	00000000 
0003dacd l       .debug_str	00000000 
0003dafe l       .debug_str	00000000 
0003db12 l       .debug_str	00000000 
0003db81 l       .debug_str	00000000 
0003dbbc l       .debug_str	00000000 
0003dc05 l       .debug_str	00000000 
0003dc4a l       .debug_str	00000000 
0003dca6 l       .debug_str	00000000 
0003dcef l       .debug_str	00000000 
0003dd34 l       .debug_str	00000000 
0003dd90 l       .debug_str	00000000 
0003ddd9 l       .debug_str	00000000 
0003de1e l       .debug_str	00000000 
0003de7a l       .debug_str	00000000 
0003de85 l       .debug_str	00000000 
0003dea3 l       .debug_str	00000000 
0003dede l       .debug_str	00000000 
0003df14 l       .debug_str	00000000 
0003df45 l       .debug_str	00000000 
0003df59 l       .debug_str	00000000 
0003df64 l       .debug_str	00000000 
0003df82 l       .debug_str	00000000 
0003dfbd l       .debug_str	00000000 
0003dff3 l       .debug_str	00000000 
0003e062 l       .debug_str	00000000 
0003e09d l       .debug_str	00000000 
0003e0ce l       .debug_str	00000000 
0003e0e3 l       .debug_str	00000000 
0003e0e8 l       .debug_str	00000000 
0003e0f4 l       .debug_str	00000000 
0003e113 l       .debug_str	00000000 
0003e14e l       .debug_str	00000000 
0003e185 l       .debug_str	00000000 
0003e1f4 l       .debug_str	00000000 
0003e230 l       .debug_str	00000000 
0000a203 l       .debug_str	00000000 
0003e279 l       .debug_str	00000000 
0003e284 l       .debug_str	00000000 
0003e2cb l       .debug_str	00000000 
0003e2d5 l       .debug_str	00000000 
0003e357 l       .debug_str	00000000 
0003e374 l       .debug_str	00000000 
00014d35 l       .debug_str	00000000 
0003e3cf l       .debug_str	00000000 
0003e429 l       .debug_str	00000000 
0003e436 l       .debug_str	00000000 
0003e4a8 l       .debug_str	00000000 
0003e50c l       .debug_str	00000000 
0003e517 l       .debug_str	00000000 
0003e590 l       .debug_str	00000000 
0003e59c l       .debug_str	00000000 
0003e618 l       .debug_str	00000000 
0003e61e l       .debug_str	00000000 
0003e625 l       .debug_str	00000000 
0003e661 l       .debug_str	00000000 
000121f3 l       .debug_str	00000000 
0003e6aa l       .debug_str	00000000 
0003e6ee l       .debug_str	00000000 
0003e739 l       .debug_str	00000000 
0003e778 l       .debug_str	00000000 
0003e79d l       .debug_str	00000000 
0003e7f3 l       .debug_str	00000000 
0003e861 l       .debug_str	00000000 
0003e8e1 l       .debug_str	00000000 
0003e94e l       .debug_str	00000000 
0003e9d9 l       .debug_str	00000000 
0003ea4d l       .debug_str	00000000 
0003ea8d l       .debug_str	00000000 
0003eb0e l       .debug_str	00000000 
0003eb4f l       .debug_str	00000000 
0003ebb3 l       .debug_str	00000000 
0003ec62 l       .debug_str	00000000 
0003ecac l       .debug_str	00000000 
0003ecf9 l       .debug_str	00000000 
0003ed3f l       .debug_str	00000000 
0003ed49 l       .debug_str	00000000 
0003ed82 l       .debug_str	00000000 
0003edb1 l       .debug_str	00000000 
0003ee12 l       .debug_str	00000000 
0003ee41 l       .debug_str	00000000 
0003ee7e l       .debug_str	00000000 
0003ef0d l       .debug_str	00000000 
0003ef42 l       .debug_str	00000000 
0003efc8 l       .debug_str	00000000 
0003f04e l       .debug_str	00000000 
0003f0a2 l       .debug_str	00000000 
0003f12b l       .debug_str	00000000 
0001776f l       .debug_str	00000000 
0003f179 l       .debug_str	00000000 
0003f207 l       .debug_str	00000000 
0003f25b l       .debug_str	00000000 
0003f29a l       .debug_str	00000000 
0003f2e5 l       .debug_str	00000000 
0003f367 l       .debug_str	00000000 
0003f383 l       .debug_str	00000000 
0003f3dc l       .debug_str	00000000 
0003f435 l       .debug_str	00000000 
0003f472 l       .debug_str	00000000 
0003f4b3 l       .debug_str	00000000 
0003f514 l       .debug_str	00000000 
0003f585 l       .debug_str	00000000 
0003f5b5 l       .debug_str	00000000 
0003f5fb l       .debug_str	00000000 
0003f66d l       .debug_str	00000000 
0003f701 l       .debug_str	00000000 
0003f725 l       .debug_str	00000000 
0003f7a1 l       .debug_str	00000000 
0003f7db l       .debug_str	00000000 
0003f81d l       .debug_str	00000000 
0003f8cd l       .debug_str	00000000 
0003f90c l       .debug_str	00000000 
0003f9af l       .debug_str	00000000 
0003fa0b l       .debug_str	00000000 
0003fa68 l       .debug_str	00000000 
0003fb13 l       .debug_str	00000000 
0003fb4c l       .debug_str	00000000 
0003fbc8 l       .debug_str	00000000 
0003fc00 l       .debug_str	00000000 
0003fc0c l       .debug_str	00000000 
0003fc49 l       .debug_str	00000000 
0003fca1 l       .debug_str	00000000 
0003fcc1 l       .debug_str	00000000 
0003fd1a l       .debug_str	00000000 
0003fd73 l       .debug_str	00000000 
0003fdcc l       .debug_str	00000000 
0003fe26 l       .debug_str	00000000 
0003fe5c l       .debug_str	00000000 
0003fe6c l       .debug_str	00000000 
0003fe7b l       .debug_str	00000000 
0003fe84 l       .debug_str	00000000 
0003febb l       .debug_str	00000000 
0003fef7 l       .debug_str	00000000 
0003ff07 l       .debug_str	00000000 
0003ff63 l       .debug_str	00000000 
0003ffc5 l       .debug_str	00000000 
000330fd l       .debug_str	00000000 
0004000f l       .debug_str	00000000 
0004004a l       .debug_str	00000000 
0004006f l       .debug_str	00000000 
000400ce l       .debug_str	00000000 
00040118 l       .debug_str	00000000 
00040153 l       .debug_str	00000000 
00040178 l       .debug_str	00000000 
000401d7 l       .debug_str	00000000 
00040240 l       .debug_str	00000000 
00040249 l       .debug_str	00000000 
00040280 l       .debug_str	00000000 
000402dc l       .debug_str	00000000 
0004033e l       .debug_str	00000000 
0004039d l       .debug_str	00000000 
000403fc l       .debug_str	00000000 
00040432 l       .debug_str	00000000 
00040443 l       .debug_str	00000000 
00040453 l       .debug_str	00000000 
0004045d l       .debug_str	00000000 
00040495 l       .debug_str	00000000 
000404f2 l       .debug_str	00000000 
00040555 l       .debug_str	00000000 
000405a0 l       .debug_str	00000000 
000405db l       .debug_str	00000000 
00040601 l       .debug_str	00000000 
00040661 l       .debug_str	00000000 
000406ac l       .debug_str	00000000 
000406e7 l       .debug_str	00000000 
0004070d l       .debug_str	00000000 
0004076d l       .debug_str	00000000 
000407a3 l       .debug_str	00000000 
000407b4 l       .debug_str	00000000 
000407c4 l       .debug_str	00000000 
000407ce l       .debug_str	00000000 
00040806 l       .debug_str	00000000 
00040863 l       .debug_str	00000000 
000408c6 l       .debug_str	00000000 
00040926 l       .debug_str	00000000 
00040986 l       .debug_str	00000000 
000409bc l       .debug_str	00000000 
000409cd l       .debug_str	00000000 
000409dd l       .debug_str	00000000 
000409e7 l       .debug_str	00000000 
00040a1f l       .debug_str	00000000 
00040a7c l       .debug_str	00000000 
00040adf l       .debug_str	00000000 
00040b2a l       .debug_str	00000000 
00040b65 l       .debug_str	00000000 
00040b8b l       .debug_str	00000000 
00040beb l       .debug_str	00000000 
00040c36 l       .debug_str	00000000 
00040c71 l       .debug_str	00000000 
00040c97 l       .debug_str	00000000 
00040cf7 l       .debug_str	00000000 
00040d2d l       .debug_str	00000000 
00040d3e l       .debug_str	00000000 
00040d4e l       .debug_str	00000000 
00040d58 l       .debug_str	00000000 
00040d90 l       .debug_str	00000000 
00040ded l       .debug_str	00000000 
00040e50 l       .debug_str	00000000 
00040eb0 l       .debug_str	00000000 
00040f10 l       .debug_str	00000000 
00040f46 l       .debug_str	00000000 
0000b029 l       .debug_str	00000000 
00040f59 l       .debug_str	00000000 
00040f6b l       .debug_str	00000000 
00040f77 l       .debug_str	00000000 
00040fb2 l       .debug_str	00000000 
00041011 l       .debug_str	00000000 
00041076 l       .debug_str	00000000 
000410d8 l       .debug_str	00000000 
00041113 l       .debug_str	00000000 
0004113b l       .debug_str	00000000 
0004119d l       .debug_str	00000000 
000411d3 l       .debug_str	00000000 
000411e6 l       .debug_str	00000000 
000411f8 l       .debug_str	00000000 
00041204 l       .debug_str	00000000 
0004123f l       .debug_str	00000000 
0004127f l       .debug_str	00000000 
0004129c l       .debug_str	00000000 
000412e0 l       .debug_str	00000000 
00041301 l       .debug_str	00000000 
00041341 l       .debug_str	00000000 
0004135e l       .debug_str	00000000 
000413a2 l       .debug_str	00000000 
000413c3 l       .debug_str	00000000 
00041425 l       .debug_str	00000000 
0004148c l       .debug_str	00000000 
000414c7 l       .debug_str	00000000 
000414ea l       .debug_str	00000000 
00041550 l       .debug_str	00000000 
0004158b l       .debug_str	00000000 
000415ad l       .debug_str	00000000 
000415e8 l       .debug_str	00000000 
0004160c l       .debug_str	00000000 
00041647 l       .debug_str	00000000 
0004166a l       .debug_str	00000000 
000416a5 l       .debug_str	00000000 
000416c9 l       .debug_str	00000000 
00041704 l       .debug_str	00000000 
00041727 l       .debug_str	00000000 
00041762 l       .debug_str	00000000 
00041786 l       .debug_str	00000000 
000417d1 l       .debug_str	00000000 
00041833 l       .debug_str	00000000 
0004186e l       .debug_str	00000000 
00041891 l       .debug_str	00000000 
000418dc l       .debug_str	00000000 
00041917 l       .debug_str	00000000 
0004193d l       .debug_str	00000000 
00041978 l       .debug_str	00000000 
0004199e l       .debug_str	00000000 
000419ef l       .debug_str	00000000 
00041a3d l       .debug_str	00000000 
00041a88 l       .debug_str	00000000 
00041abb l       .debug_str	00000000 
00041af6 l       .debug_str	00000000 
00041b1b l       .debug_str	00000000 
00041ba7 l       .debug_str	00000000 
00041bdb l       .debug_str	00000000 
00041c57 l       .debug_str	00000000 
00041c9c l       .debug_str	00000000 
00041ce8 l       .debug_str	00000000 
00041d4b l       .debug_str	00000000 
00041d86 l       .debug_str	00000000 
00041daa l       .debug_str	00000000 
00041de5 l       .debug_str	00000000 
00041e0c l       .debug_str	00000000 
00041e58 l       .debug_str	00000000 
00041e93 l       .debug_str	00000000 
00041eba l       .debug_str	00000000 
00041f05 l       .debug_str	00000000 
00041f51 l       .debug_str	00000000 
00041f9d l       .debug_str	00000000 
00041fce l       .debug_str	00000000 
00041fd6 l       .debug_str	00000000 
0000ffd9 l       .debug_str	00000000 
00042022 l       .debug_str	00000000 
00042057 l       .debug_str	00000000 
00042085 l       .debug_str	00000000 
0004208e l       .debug_str	00000000 
000420dc l       .debug_str	00000000 
000420e4 l       .debug_str	00000000 
00042149 l       .debug_str	00000000 
0004219c l       .debug_str	00000000 
000421fc l       .debug_str	00000000 
0004221b l       .debug_str	00000000 
0004227e l       .debug_str	00000000 
000422a0 l       .debug_str	00000000 
000422eb l       .debug_str	00000000 
00042350 l       .debug_str	00000000 
00042372 l       .debug_str	00000000 
000423db l       .debug_str	00000000 
00042418 l       .debug_str	00000000 
00042481 l       .debug_str	00000000 
00042511 l       .debug_str	00000000 
0000b0ec l       .debug_str	00000000 
00042571 l       .debug_str	00000000 
000425d4 l       .debug_str	00000000 
0004263d l       .debug_str	00000000 
00042670 l       .debug_str	00000000 
000426b8 l       .debug_str	00000000 
00042732 l       .debug_str	00000000 
00042783 l       .debug_str	00000000 
000427da l       .debug_str	00000000 
00042822 l       .debug_str	00000000 
0004283c l       .debug_str	00000000 
0004289a l       .debug_str	00000000 
000428b7 l       .debug_str	00000000 
00042923 l       .debug_str	00000000 
00042968 l       .debug_str	00000000 
000429b6 l       .debug_str	00000000 
000429fe l       .debug_str	00000000 
00042a08 l       .debug_str	00000000 
00042a76 l       .debug_str	00000000 
00042ab2 l       .debug_str	00000000 
00042ad5 l       .debug_str	00000000 
00042b45 l       .debug_str	00000000 
00042b8d l       .debug_str	00000000 
00042b96 l       .debug_str	00000000 
00042bf3 l       .debug_str	00000000 
00042c56 l       .debug_str	00000000 
00042cb6 l       .debug_str	00000000 
00042d16 l       .debug_str	00000000 
00042d72 l       .debug_str	00000000 
00042dd1 l       .debug_str	00000000 
00042e31 l       .debug_str	00000000 
00042e4c l       .debug_str	00000000 
00042ea0 l       .debug_str	00000000 
00042ea8 l       .debug_str	00000000 
00042f26 l       .debug_str	00000000 
00042f50 l       .debug_str	00000000 
00042fb2 l       .debug_str	00000000 
00043013 l       .debug_str	00000000 
0004306d l       .debug_str	00000000 
000430d2 l       .debug_str	00000000 
00043124 l       .debug_str	00000000 
0004316c l       .debug_str	00000000 
00043187 l       .debug_str	00000000 
00043201 l       .debug_str	00000000 
0004324e l       .debug_str	00000000 
000432c8 l       .debug_str	00000000 
00043315 l       .debug_str	00000000 
00043369 l       .debug_str	00000000 
000433bb l       .debug_str	00000000 
00043423 l       .debug_str	00000000 
00043483 l       .debug_str	00000000 
000434dd l       .debug_str	00000000 
0004353c l       .debug_str	00000000 
00043596 l       .debug_str	00000000 
000435f3 l       .debug_str	00000000 
0001b7de l       .debug_str	00000000 
00043631 l       .debug_str	00000000 
0001c7e3 l       .debug_str	00000000 
0004366c l       .debug_str	00000000 
000436de l       .debug_str	00000000 
000437b1 l       .debug_str	00000000 
000437f9 l       .debug_str	00000000 
00043802 l       .debug_str	00000000 
00043850 l       .debug_str	00000000 
0004385a l       .debug_str	00000000 
000438a2 l       .debug_str	00000000 
000438ae l       .debug_str	00000000 
00043922 l       .debug_str	00000000 
0004392d l       .debug_str	00000000 
00043969 l       .debug_str	00000000 
00043990 l       .debug_str	00000000 
000439e1 l       .debug_str	00000000 
000439ee l       .debug_str	00000000 
000439fc l       .debug_str	00000000 
00043a0f l       .debug_str	00000000 
00043a1a l       .debug_str	00000000 
00043a5c l       .debug_str	00000000 
00043a71 l       .debug_str	00000000 
00043adb l       .debug_str	00000000 
00043b38 l       .debug_str	00000000 
00043b98 l       .debug_str	00000000 
00043bf8 l       .debug_str	00000000 
00043c6a l       .debug_str	00000000 
00043cb7 l       .debug_str	00000000 
00043d16 l       .debug_str	00000000 
00043d70 l       .debug_str	00000000 
00043de3 l       .debug_str	00000000 
00043df0 l       .debug_str	00000000 
00043e50 l       .debug_str	00000000 
00043e6f l       .debug_str	00000000 
00043ed7 l       .debug_str	00000000 
00043ef2 l       .debug_str	00000000 
00043f4a l       .debug_str	00000000 
00043f94 l       .debug_str	00000000 
00043ff8 l       .debug_str	00000000 
00044017 l       .debug_str	00000000 
00044079 l       .debug_str	00000000 
000440df l       .debug_str	00000000 
0004415f l       .debug_str	00000000 
000441ae l       .debug_str	00000000 
00044224 l       .debug_str	00000000 
0004429a l       .debug_str	00000000 
0004436f l       .debug_str	00000000 
000443cc l       .debug_str	00000000 
0004442a l       .debug_str	00000000 
000444aa l       .debug_str	00000000 
00044519 l       .debug_str	00000000 
00044597 l       .debug_str	00000000 
000445ea l       .debug_str	00000000 
0004464f l       .debug_str	00000000 
000446af l       .debug_str	00000000 
0004471d l       .debug_str	00000000 
000447b5 l       .debug_str	00000000 
00044844 l       .debug_str	00000000 
000448d2 l       .debug_str	00000000 
00044960 l       .debug_str	00000000 
00044a70 l       .debug_str	00000000 
00044ae4 l       .debug_str	00000000 
00044b26 l       .debug_str	00000000 
00044b6f l       .debug_str	00000000 
00044bc9 l       .debug_str	00000000 
00044c42 l       .debug_str	00000000 
00044c4f l       .debug_str	00000000 
00044c54 l       .debug_str	00000000 
00044cc0 l       .debug_str	00000000 
00044d07 l       .debug_str	00000000 
00044d91 l       .debug_str	00000000 
00044db0 l       .debug_str	00000000 
00044e3a l       .debug_str	00000000 
00044e5e l       .debug_str	00000000 
00044ea2 l       .debug_str	00000000 
00044f06 l       .debug_str	00000000 
00044f4a l       .debug_str	00000000 
00044fbc l       .debug_str	00000000 
0004507a l       .debug_str	00000000 
000450dc l       .debug_str	00000000 
00045174 l       .debug_str	00000000 
00045223 l       .debug_str	00000000 
000452b9 l       .debug_str	00000000 
0004534c l       .debug_str	00000000 
00045390 l       .debug_str	00000000 
000453e3 l       .debug_str	00000000 
00045467 l       .debug_str	00000000 
000454f5 l       .debug_str	00000000 
00045549 l       .debug_str	00000000 
0004555a l       .debug_str	00000000 
000455df l       .debug_str	00000000 
0004566b l       .debug_str	00000000 
00045674 l       .debug_str	00000000 
00045681 l       .debug_str	00000000 
000456d8 l       .debug_str	00000000 
0004575d l       .debug_str	00000000 
000457af l       .debug_str	00000000 
000457be l       .debug_str	00000000 
00045805 l       .debug_str	00000000 
00045869 l       .debug_str	00000000 
0004588a l       .debug_str	00000000 
0004590a l       .debug_str	00000000 
00045975 l       .debug_str	00000000 
000459f3 l       .debug_str	00000000 
00045a42 l       .debug_str	00000000 
00045aa1 l       .debug_str	00000000 
00045b39 l       .debug_str	00000000 
00045bdf l       .debug_str	00000000 
00045c75 l       .debug_str	00000000 
00045cff l       .debug_str	00000000 
00045d75 l       .debug_str	00000000 
00045dbe l       .debug_str	00000000 
00045e1a l       .debug_str	00000000 
00045e95 l       .debug_str	00000000 
00045f01 l       .debug_str	00000000 
00045f8b l       .debug_str	00000000 
00045fcf l       .debug_str	00000000 
00046030 l       .debug_str	00000000 
00046074 l       .debug_str	00000000 
000460f8 l       .debug_str	00000000 
00046182 l       .debug_str	00000000 
000461d4 l       .debug_str	00000000 
00046252 l       .debug_str	00000000 
000462d7 l       .debug_str	00000000 
0004632e l       .debug_str	00000000 
000463af l       .debug_str	00000000 
0004646d l       .debug_str	00000000 
000464cc l       .debug_str	00000000 
0004652f l       .debug_str	00000000 
00046554 l       .debug_str	00000000 
000465b8 l       .debug_str	00000000 
000465d9 l       .debug_str	00000000 
00046659 l       .debug_str	00000000 
000466c4 l       .debug_str	00000000 
00046742 l       .debug_str	00000000 
00046791 l       .debug_str	00000000 
000467f0 l       .debug_str	00000000 
00046888 l       .debug_str	00000000 
0004692e l       .debug_str	00000000 
000469c4 l       .debug_str	00000000 
00046a4e l       .debug_str	00000000 
00046ac4 l       .debug_str	00000000 
00046b0d l       .debug_str	00000000 
00046b69 l       .debug_str	00000000 
00046be4 l       .debug_str	00000000 
00046c50 l       .debug_str	00000000 
00046cda l       .debug_str	00000000 
00046d1e l       .debug_str	00000000 
00046d7f l       .debug_str	00000000 
00046dc3 l       .debug_str	00000000 
00046e47 l       .debug_str	00000000 
00046ed1 l       .debug_str	00000000 
00046f4f l       .debug_str	00000000 
00046fd4 l       .debug_str	00000000 
0004702b l       .debug_str	00000000 
000470ac l       .debug_str	00000000 
0004716a l       .debug_str	00000000 
000471c9 l       .debug_str	00000000 
000471fc l       .debug_str	00000000 
0004722f l       .debug_str	00000000 
00047262 l       .debug_str	00000000 
00047295 l       .debug_str	00000000 
000472c8 l       .debug_str	00000000 
000472fb l       .debug_str	00000000 
0004732e l       .debug_str	00000000 
00047382 l       .debug_str	00000000 
000473b0 l       .debug_str	00000000 
00047404 l       .debug_str	00000000 
00059e07 l       .debug_str	00000000 
00010896 l       .debug_str	00000000 
00047417 l       .debug_str	00000000 
0004741b l       .debug_str	00000000 
0004741f l       .debug_str	00000000 
00047423 l       .debug_str	00000000 
0004742a l       .debug_str	00000000 
0004742f l       .debug_str	00000000 
0004745f l       .debug_str	00000000 
000474b1 l       .debug_str	00000000 
000474f2 l       .debug_str	00000000 
000474ff l       .debug_str	00000000 
0004753e l       .debug_str	00000000 
00047549 l       .debug_str	00000000 
00047585 l       .debug_str	00000000 
00047593 l       .debug_str	00000000 
000475c7 l       .debug_str	00000000 
00047602 l       .debug_str	00000000 
00047640 l       .debug_str	00000000 
0004764e l       .debug_str	00000000 
00047687 l       .debug_str	00000000 
00047691 l       .debug_str	00000000 
000476cd l       .debug_str	00000000 
00047729 l       .debug_str	00000000 
00047730 l       .debug_str	00000000 
0004778e l       .debug_str	00000000 
00047797 l       .debug_str	00000000 
000477fe l       .debug_str	00000000 
0004780f l       .debug_str	00000000 
0004786c l       .debug_str	00000000 
000478cb l       .debug_str	00000000 
00047927 l       .debug_str	00000000 
00047985 l       .debug_str	00000000 
000479ec l       .debug_str	00000000 
00047a49 l       .debug_str	00000000 
00047aa8 l       .debug_str	00000000 
00047ae1 l       .debug_str	00000000 
00047aeb l       .debug_str	00000000 
00047b53 l       .debug_str	00000000 
00047b86 l       .debug_str	00000000 
00047b90 l       .debug_str	00000000 
00047bc6 l       .debug_str	00000000 
00047bd2 l       .debug_str	00000000 
00047c09 l       .debug_str	00000000 
00047c16 l       .debug_str	00000000 
00047c5a l       .debug_str	00000000 
00047c74 l       .debug_str	00000000 
00047ce5 l       .debug_str	00000000 
00047cf8 l       .debug_str	00000000 
00047d69 l       .debug_str	00000000 
00047dac l       .debug_str	00000000 
00047db6 l       .debug_str	00000000 
00047e00 l       .debug_str	00000000 
00047e47 l       .debug_str	00000000 
00047e94 l       .debug_str	00000000 
00047ede l       .debug_str	00000000 
00047f10 l       .debug_str	00000000 
00047f19 l       .debug_str	00000000 
00047f4d l       .debug_str	00000000 
00047f86 l       .debug_str	00000000 
00047fc2 l       .debug_str	00000000 
00047fd4 l       .debug_str	00000000 
00048015 l       .debug_str	00000000 
00048074 l       .debug_str	00000000 
000480a5 l       .debug_str	00000000 
000480bb l       .debug_str	00000000 
000480f0 l       .debug_str	00000000 
0004814d l       .debug_str	00000000 
000481b1 l       .debug_str	00000000 
00048210 l       .debug_str	00000000 
00048270 l       .debug_str	00000000 
000482ce l       .debug_str	00000000 
000183e2 l       .debug_str	00000000 
00048333 l       .debug_str	00000000 
00048379 l       .debug_str	00000000 
000483b9 l       .debug_str	00000000 
00048441 l       .debug_str	00000000 
00056835 l       .debug_str	00000000 
000484c8 l       .debug_str	00000000 
000484fb l       .debug_str	00000000 
0004856f l       .debug_str	00000000 
000485e8 l       .debug_str	00000000 
0004865c l       .debug_str	00000000 
000486bb l       .debug_str	00000000 
00048718 l       .debug_str	00000000 
00048772 l       .debug_str	00000000 
000487ce l       .debug_str	00000000 
0004882b l       .debug_str	00000000 
0004888a l       .debug_str	00000000 
000488f2 l       .debug_str	00000000 
0004895c l       .debug_str	00000000 
000489c5 l       .debug_str	00000000 
00048a23 l       .debug_str	00000000 
00048a95 l       .debug_str	00000000 
00048a99 l       .debug_str	00000000 
00048b0c l       .debug_str	00000000 
00048b6a l       .debug_str	00000000 
00048bc6 l       .debug_str	00000000 
00048c37 l       .debug_str	00000000 
00048cad l       .debug_str	00000000 
00048ce4 l       .debug_str	00000000 
00048d40 l       .debug_str	00000000 
00048d94 l       .debug_str	00000000 
00048df2 l       .debug_str	00000000 
00048e5e l       .debug_str	00000000 
00048eb3 l       .debug_str	00000000 
00048ee6 l       .debug_str	00000000 
00048ef4 l       .debug_str	00000000 
00048f2c l       .debug_str	00000000 
00048f3f l       .debug_str	00000000 
00048f74 l       .debug_str	00000000 
00048faa l       .debug_str	00000000 
00049005 l       .debug_str	00000000 
00049038 l       .debug_str	00000000 
0004903f l       .debug_str	00000000 
00049081 l       .debug_str	00000000 
000490b2 l       .debug_str	00000000 
000490e3 l       .debug_str	00000000 
00049116 l       .debug_str	00000000 
0004911d l       .debug_str	00000000 
0004914a l       .debug_str	00000000 
00049185 l       .debug_str	00000000 
00049198 l       .debug_str	00000000 
000491c9 l       .debug_str	00000000 
000491d3 l       .debug_str	00000000 
00049234 l       .debug_str	00000000 
0004929c l       .debug_str	00000000 
000492d9 l       .debug_str	00000000 
00049327 l       .debug_str	00000000 
00049363 l       .debug_str	00000000 
0004939f l       .debug_str	00000000 
000493d8 l       .debug_str	00000000 
00049412 l       .debug_str	00000000 
0004944b l       .debug_str	00000000 
00049482 l       .debug_str	00000000 
000494bb l       .debug_str	00000000 
000494f5 l       .debug_str	00000000 
0004953b l       .debug_str	00000000 
0004955e l       .debug_str	00000000 
000495a4 l       .debug_str	00000000 
000495c7 l       .debug_str	00000000 
00049610 l       .debug_str	00000000 
00049636 l       .debug_str	00000000 
0004967f l       .debug_str	00000000 
000496a5 l       .debug_str	00000000 
000496ef l       .debug_str	00000000 
00049716 l       .debug_str	00000000 
00049760 l       .debug_str	00000000 
00049787 l       .debug_str	00000000 
000497d4 l       .debug_str	00000000 
000497fe l       .debug_str	00000000 
0004984b l       .debug_str	00000000 
00049875 l       .debug_str	00000000 
000498a8 l       .debug_str	00000000 
000498d4 l       .debug_str	00000000 
0004992a l       .debug_str	00000000 
00049955 l       .debug_str	00000000 
000499ad l       .debug_str	00000000 
00049a03 l       .debug_str	00000000 
00049a3c l       .debug_str	00000000 
00049a47 l       .debug_str	00000000 
00049a80 l       .debug_str	00000000 
00049a8b l       .debug_str	00000000 
00049ab2 l       .debug_str	00000000 
00049aeb l       .debug_str	00000000 
00049b32 l       .debug_str	00000000 
00049b3f l       .debug_str	00000000 
00049d59 l       .debug_str	00000000 
00049b6e l       .debug_str	00000000 
00049bae l       .debug_str	00000000 
00049bc2 l       .debug_str	00000000 
00049c04 l       .debug_str	00000000 
00049c35 l       .debug_str	00000000 
00049c65 l       .debug_str	00000000 
00049c96 l       .debug_str	00000000 
00049cc7 l       .debug_str	00000000 
00049cfe l       .debug_str	00000000 
00049d09 l       .debug_str	00000000 
00049d49 l       .debug_str	00000000 
00049d5d l       .debug_str	00000000 
00049d99 l       .debug_str	00000000 
00049da9 l       .debug_str	00000000 
00049dde l       .debug_str	00000000 
00049de8 l       .debug_str	00000000 
00049e1d l       .debug_str	00000000 
00049e27 l       .debug_str	00000000 
00049e7c l       .debug_str	00000000 
00049ec4 l       .debug_str	00000000 
00049f0a l       .debug_str	00000000 
00049f51 l       .debug_str	00000000 
00049f9a l       .debug_str	00000000 
00049fec l       .debug_str	00000000 
0004a03e l       .debug_str	00000000 
0004a0dc l       .debug_str	00000000 
0004a10e l       .debug_str	00000000 
0004a147 l       .debug_str	00000000 
0004a15c l       .debug_str	00000000 
0004a197 l       .debug_str	00000000 
0004a1ae l       .debug_str	00000000 
0004a1ec l       .debug_str	00000000 
0004a206 l       .debug_str	00000000 
0004a268 l       .debug_str	00000000 
0004a28d l       .debug_str	00000000 
0004a2e8 l       .debug_str	00000000 
0004a2f7 l       .debug_str	00000000 
0004a36c l       .debug_str	00000000 
0004a389 l       .debug_str	00000000 
0004a3c3 l       .debug_str	00000000 
0004a400 l       .debug_str	00000000 
0004a40b l       .debug_str	00000000 
0004a443 l       .debug_str	00000000 
0004a44a l       .debug_str	00000000 
0004a4c9 l       .debug_str	00000000 
0004a529 l       .debug_str	00000000 
0004a587 l       .debug_str	00000000 
0004a5e5 l       .debug_str	00000000 
0004a61d l       .debug_str	00000000 
0004a652 l       .debug_str	00000000 
0004a67d l       .debug_str	00000000 
0004a687 l       .debug_str	00000000 
0004a6b7 l       .debug_str	00000000 
0004a6c5 l       .debug_str	00000000 
0004a71e l       .debug_str	00000000 
0004a771 l       .debug_str	00000000 
0004a7ed l       .debug_str	00000000 
0004a851 l       .debug_str	00000000 
0004a8b5 l       .debug_str	00000000 
0004a8eb l       .debug_str	00000000 
0004a8ff l       .debug_str	00000000 
0004a940 l       .debug_str	00000000 
0004a958 l       .debug_str	00000000 
0004aa0c l       .debug_str	00000000 
0004aa3f l       .debug_str	00000000 
0004aa50 l       .debug_str	00000000 
0004aa96 l       .debug_str	00000000 
0004aaa3 l       .debug_str	00000000 
0004aae0 l       .debug_str	00000000 
0004ab24 l       .debug_str	00000000 
0004ab65 l       .debug_str	00000000 
0004aba7 l       .debug_str	00000000 
0004abb1 l       .debug_str	00000000 
0004abf5 l       .debug_str	00000000 
0004ac00 l       .debug_str	00000000 
0004ac4e l       .debug_str	00000000 
0004ac9c l       .debug_str	00000000 
0004ace2 l       .debug_str	00000000 
0004ad2a l       .debug_str	00000000 
0004ad72 l       .debug_str	00000000 
00011677 l       .debug_str	00000000 
0004add9 l       .debug_str	00000000 
0004ae32 l       .debug_str	00000000 
0004ae9c l       .debug_str	00000000 
00014e3c l       .debug_str	00000000 
0004af06 l       .debug_str	00000000 
0004af81 l       .debug_str	00000000 
0004aff6 l       .debug_str	00000000 
0004b001 l       .debug_str	00000000 
0004b076 l       .debug_str	00000000 
0004b081 l       .debug_str	00000000 
0004b0d8 l       .debug_str	00000000 
0004b13c l       .debug_str	00000000 
0004b148 l       .debug_str	00000000 
0004b185 l       .debug_str	00000000 
0004b192 l       .debug_str	00000000 
0004b1c6 l       .debug_str	00000000 
0004b201 l       .debug_str	00000000 
0004b25d l       .debug_str	00000000 
0004b2b8 l       .debug_str	00000000 
0004b312 l       .debug_str	00000000 
00031c0a l       .debug_str	00000000 
0004b358 l       .debug_str	00000000 
0004b3be l       .debug_str	00000000 
0004b3f5 l       .debug_str	00000000 
0004b3fd l       .debug_str	00000000 
0004b435 l       .debug_str	00000000 
0004b43e l       .debug_str	00000000 
0004b476 l       .debug_str	00000000 
0004b47f l       .debug_str	00000000 
0004b4b6 l       .debug_str	00000000 
0004b4be l       .debug_str	00000000 
0004b4f6 l       .debug_str	00000000 
0004b4ff l       .debug_str	00000000 
0004b537 l       .debug_str	00000000 
0004b540 l       .debug_str	00000000 
0004b577 l       .debug_str	00000000 
0004b57f l       .debug_str	00000000 
0004b5f9 l       .debug_str	00000000 
0004b673 l       .debug_str	00000000 
0004b6ed l       .debug_str	00000000 
0004b769 l       .debug_str	00000000 
0004b7c7 l       .debug_str	00000000 
0004b7d0 l       .debug_str	00000000 
0004b82f l       .debug_str	00000000 
0004b88e l       .debug_str	00000000 
0004b8ed l       .debug_str	00000000 
0004b94d l       .debug_str	00000000 
0004b9ab l       .debug_str	00000000 
0004ba0a l       .debug_str	00000000 
0004ba69 l       .debug_str	00000000 
0004bac8 l       .debug_str	00000000 
0004bb28 l       .debug_str	00000000 
0004bb7d l       .debug_str	00000000 
0004bbd2 l       .debug_str	00000000 
0004bc2c l       .debug_str	00000000 
0004bc86 l       .debug_str	00000000 
0004bcc0 l       .debug_str	00000000 
0004bcc9 l       .debug_str	00000000 
0004bd03 l       .debug_str	00000000 
0004bd0c l       .debug_str	00000000 
0004bd49 l       .debug_str	00000000 
000330f9 l       .debug_str	00000000 
0004bd82 l       .debug_str	00000000 
0004bde3 l       .debug_str	00000000 
0004be41 l       .debug_str	00000000 
0004be82 l       .debug_str	00000000 
0004bec0 l       .debug_str	00000000 
0004bef9 l       .debug_str	00000000 
0004bf38 l       .debug_str	00000000 
0004bf76 l       .debug_str	00000000 
0004bfb4 l       .debug_str	00000000 
0004bff5 l       .debug_str	00000000 
0004c039 l       .debug_str	00000000 
0004c076 l       .debug_str	00000000 
0004c0dc l       .debug_str	00000000 
0004c143 l       .debug_str	00000000 
0004c1a6 l       .debug_str	00000000 
0004c208 l       .debug_str	00000000 
0004c26d l       .debug_str	00000000 
0004c2d6 l       .debug_str	00000000 
0004c33c l       .debug_str	00000000 
0004c3a2 l       .debug_str	00000000 
0004c3fd l       .debug_str	00000000 
0004c464 l       .debug_str	00000000 
0004c4cf l       .debug_str	00000000 
0004c52a l       .debug_str	00000000 
0004c585 l       .debug_str	00000000 
0001b8dd l       .debug_str	00000000 
0004c5cc l       .debug_str	00000000 
0004c614 l       .debug_str	00000000 
0004c65c l       .debug_str	00000000 
0004c6a4 l       .debug_str	00000000 
0004c6ed l       .debug_str	00000000 
0004c737 l       .debug_str	00000000 
0004c77e l       .debug_str	00000000 
0004c7d1 l       .debug_str	00000000 
0004c7ec l       .debug_str	00000000 
0004c834 l       .debug_str	00000000 
0004c888 l       .debug_str	00000000 
0004c8d0 l       .debug_str	00000000 
0004c924 l       .debug_str	00000000 
0004c96c l       .debug_str	00000000 
0004c9c0 l       .debug_str	00000000 
0004ca09 l       .debug_str	00000000 
0004ca5e l       .debug_str	00000000 
0004caa8 l       .debug_str	00000000 
0004cb00 l       .debug_str	00000000 
0004cb62 l       .debug_str	00000000 
0004cbc1 l       .debug_str	00000000 
0004cc21 l       .debug_str	00000000 
0004cc81 l       .debug_str	00000000 
0004cce1 l       .debug_str	00000000 
0004cd42 l       .debug_str	00000000 
0004cda1 l       .debug_str	00000000 
0004ce01 l       .debug_str	00000000 
0004ce61 l       .debug_str	00000000 
0004cec1 l       .debug_str	00000000 
0004cf22 l       .debug_str	00000000 
0004cf7f l       .debug_str	00000000 
0004cfda l       .debug_str	00000000 
0004d030 l       .debug_str	00000000 
0004d08e l       .debug_str	00000000 
0004d0e2 l       .debug_str	00000000 
0004d143 l       .debug_str	00000000 
0004d1a9 l       .debug_str	00000000 
0004d211 l       .debug_str	00000000 
0004d278 l       .debug_str	00000000 
0004d2d4 l       .debug_str	00000000 
0004d335 l       .debug_str	00000000 
0004d38f l       .debug_str	00000000 
0004d3e9 l       .debug_str	00000000 
0004d447 l       .debug_str	00000000 
0004d49b l       .debug_str	00000000 
0004d517 l       .debug_str	00000000 
0004d580 l       .debug_str	00000000 
0004d5fc l       .debug_str	00000000 
0004d678 l       .debug_str	00000000 
0004d6e1 l       .debug_str	00000000 
0004d75d l       .debug_str	00000000 
0004d7ca l       .debug_str	00000000 
0004d824 l       .debug_str	00000000 
0004d87d l       .debug_str	00000000 
0004d8d5 l       .debug_str	00000000 
0004d934 l       .debug_str	00000000 
0004d993 l       .debug_str	00000000 
0004d9f2 l       .debug_str	00000000 
0004da52 l       .debug_str	00000000 
0004dab2 l       .debug_str	00000000 
0004db12 l       .debug_str	00000000 
0004db72 l       .debug_str	00000000 
0004dbd4 l       .debug_str	00000000 
0004dc36 l       .debug_str	00000000 
0004dc97 l       .debug_str	00000000 
0004dcf9 l       .debug_str	00000000 
0004dd5b l       .debug_str	00000000 
0004ddbc l       .debug_str	00000000 
0004de1e l       .debug_str	00000000 
0004de80 l       .debug_str	00000000 
0003313d l       .debug_str	00000000 
0004dec9 l       .debug_str	00000000 
0004df15 l       .debug_str	00000000 
0004df1d l       .debug_str	00000000 
0004df67 l       .debug_str	00000000 
0004dfb2 l       .debug_str	00000000 
0004dfb9 l       .debug_str	00000000 
0004e004 l       .debug_str	00000000 
0004e04f l       .debug_str	00000000 
0004e09b l       .debug_str	00000000 
0004e0e5 l       .debug_str	00000000 
0004e132 l       .debug_str	00000000 
0004e17d l       .debug_str	00000000 
0004e1c9 l       .debug_str	00000000 
0004e215 l       .debug_str	00000000 
0004e261 l       .debug_str	00000000 
0004e2ae l       .debug_str	00000000 
0004e2f8 l       .debug_str	00000000 
0004e345 l       .debug_str	00000000 
0004e390 l       .debug_str	00000000 
0004e3dc l       .debug_str	00000000 
0004e428 l       .debug_str	00000000 
0004e474 l       .debug_str	00000000 
0004e4c1 l       .debug_str	00000000 
0004e50b l       .debug_str	00000000 
0004e558 l       .debug_str	00000000 
0004e5a3 l       .debug_str	00000000 
0004e5ef l       .debug_str	00000000 
0004e63b l       .debug_str	00000000 
0004e687 l       .debug_str	00000000 
0004e6d4 l       .debug_str	00000000 
0004e71f l       .debug_str	00000000 
0004e76d l       .debug_str	00000000 
0004e7b9 l       .debug_str	00000000 
0004e806 l       .debug_str	00000000 
0004e853 l       .debug_str	00000000 
0004e8a0 l       .debug_str	00000000 
0004e8ee l       .debug_str	00000000 
0004e939 l       .debug_str	00000000 
0004e984 l       .debug_str	00000000 
0004e9d0 l       .debug_str	00000000 
0004ea1c l       .debug_str	00000000 
0004ea69 l       .debug_str	00000000 
0004eab5 l       .debug_str	00000000 
0004eb02 l       .debug_str	00000000 
0004eb4f l       .debug_str	00000000 
0004ebae l       .debug_str	00000000 
0004ec0b l       .debug_str	00000000 
0004ec67 l       .debug_str	00000000 
0004ecc5 l       .debug_str	00000000 
0004ed22 l       .debug_str	00000000 
0004ed80 l       .debug_str	00000000 
0004eddd l       .debug_str	00000000 
0004ee3b l       .debug_str	00000000 
0004ee98 l       .debug_str	00000000 
0004eef7 l       .debug_str	00000000 
0004ef55 l       .debug_str	00000000 
0004efb6 l       .debug_str	00000000 
0004f017 l       .debug_str	00000000 
0004f07a l       .debug_str	00000000 
0004f0ab l       .debug_str	00000000 
0004f0b3 l       .debug_str	00000000 
0004f116 l       .debug_str	00000000 
0004f179 l       .debug_str	00000000 
0004f1dd l       .debug_str	00000000 
0004f241 l       .debug_str	00000000 
0004f2a5 l       .debug_str	00000000 
0004f309 l       .debug_str	00000000 
0004f36c l       .debug_str	00000000 
0004f3cf l       .debug_str	00000000 
0004f433 l       .debug_str	00000000 
0004f497 l       .debug_str	00000000 
0004f4fb l       .debug_str	00000000 
0004f55f l       .debug_str	00000000 
0004f590 l       .debug_str	00000000 
0004f598 l       .debug_str	00000000 
0004f5fc l       .debug_str	00000000 
0004f660 l       .debug_str	00000000 
0004f6c4 l       .debug_str	00000000 
0004f728 l       .debug_str	00000000 
0004f788 l       .debug_str	00000000 
0004f7e8 l       .debug_str	00000000 
0004f816 l       .debug_str	00000000 
0004f81f l       .debug_str	00000000 
0004f880 l       .debug_str	00000000 
0004f8e1 l       .debug_str	00000000 
0004f942 l       .debug_str	00000000 
0004f9a3 l       .debug_str	00000000 
0004f9fa l       .debug_str	00000000 
0004fa4d l       .debug_str	00000000 
0004fa95 l       .debug_str	00000000 
0004fabd l       .debug_str	00000000 
0004fb05 l       .debug_str	00000000 
0004fb1b l       .debug_str	00000000 
0004fb63 l       .debug_str	00000000 
0004fb98 l       .debug_str	00000000 
0004fbe0 l       .debug_str	00000000 
0004fc1b l       .debug_str	00000000 
0004fc63 l       .debug_str	00000000 
0004fcab l       .debug_str	00000000 
0004fccc l       .debug_str	00000000 
0004fd14 l       .debug_str	00000000 
0004fd1f l       .debug_str	00000000 
0004fd67 l       .debug_str	00000000 
0004fda4 l       .debug_str	00000000 
0004fdec l       .debug_str	00000000 
0004fe45 l       .debug_str	00000000 
0004fe8d l       .debug_str	00000000 
0004fea9 l       .debug_str	00000000 
0004fef1 l       .debug_str	00000000 
0004ff9d l       .debug_str	00000000 
0004ffe5 l       .debug_str	00000000 
00050003 l       .debug_str	00000000 
0005004b l       .debug_str	00000000 
00050055 l       .debug_str	00000000 
0005009d l       .debug_str	00000000 
000500d8 l       .debug_str	00000000 
00050120 l       .debug_str	00000000 
0005016f l       .debug_str	00000000 
000501b7 l       .debug_str	00000000 
000501de l       .debug_str	00000000 
00050226 l       .debug_str	00000000 
00050250 l       .debug_str	00000000 
00050298 l       .debug_str	00000000 
00050313 l       .debug_str	00000000 
0005035b l       .debug_str	00000000 
000503a3 l       .debug_str	00000000 
000503b9 l       .debug_str	00000000 
00014596 l       .debug_str	00000000 
00050401 l       .debug_str	00000000 
00050449 l       .debug_str	00000000 
00050491 l       .debug_str	00000000 
000504c2 l       .debug_str	00000000 
0005050a l       .debug_str	00000000 
0005056e l       .debug_str	00000000 
000505b6 l       .debug_str	00000000 
0000b09b l       .debug_str	00000000 
000505fe l       .debug_str	00000000 
00050646 l       .debug_str	00000000 
00050653 l       .debug_str	00000000 
0005069b l       .debug_str	00000000 
000506a5 l       .debug_str	00000000 
000506ed l       .debug_str	00000000 
000506f6 l       .debug_str	00000000 
0005073e l       .debug_str	00000000 
00050766 l       .debug_str	00000000 
000507ae l       .debug_str	00000000 
000507f6 l       .debug_str	00000000 
00050818 l       .debug_str	00000000 
00050860 l       .debug_str	00000000 
00050891 l       .debug_str	00000000 
000508d9 l       .debug_str	00000000 
00050921 l       .debug_str	00000000 
00050959 l       .debug_str	00000000 
000509a1 l       .debug_str	00000000 
000509d6 l       .debug_str	00000000 
00050a1e l       .debug_str	00000000 
00050a47 l       .debug_str	00000000 
00050a8f l       .debug_str	00000000 
00050ab3 l       .debug_str	00000000 
00050afb l       .debug_str	00000000 
00050b20 l       .debug_str	00000000 
00050b68 l       .debug_str	00000000 
00050b85 l       .debug_str	00000000 
00050bcd l       .debug_str	00000000 
00050bd8 l       .debug_str	00000000 
00050c20 l       .debug_str	00000000 
00050c48 l       .debug_str	00000000 
00050c90 l       .debug_str	00000000 
00050c9f l       .debug_str	00000000 
00050ce7 l       .debug_str	00000000 
00050d2f l       .debug_str	00000000 
00050d4b l       .debug_str	00000000 
00050d93 l       .debug_str	00000000 
00050e0a l       .debug_str	00000000 
00050e52 l       .debug_str	00000000 
00050ec9 l       .debug_str	00000000 
00050f11 l       .debug_str	00000000 
00050f1a l       .debug_str	00000000 
00050f62 l       .debug_str	00000000 
00050f88 l       .debug_str	00000000 
00050fd0 l       .debug_str	00000000 
00051003 l       .debug_str	00000000 
0005104b l       .debug_str	00000000 
00051068 l       .debug_str	00000000 
000510b0 l       .debug_str	00000000 
000510b9 l       .debug_str	00000000 
00051101 l       .debug_str	00000000 
00051149 l       .debug_str	00000000 
0005116d l       .debug_str	00000000 
0000b184 l       .debug_str	00000000 
000511b5 l       .debug_str	00000000 
000511fd l       .debug_str	00000000 
00051245 l       .debug_str	00000000 
0005133d l       .debug_str	00000000 
00051385 l       .debug_str	00000000 
0005138f l       .debug_str	00000000 
000513d7 l       .debug_str	00000000 
0005141f l       .debug_str	00000000 
0005144c l       .debug_str	00000000 
0000b1d5 l       .debug_str	00000000 
00051494 l       .debug_str	00000000 
000514dc l       .debug_str	00000000 
00051539 l       .debug_str	00000000 
00051581 l       .debug_str	00000000 
0005158a l       .debug_str	00000000 
000515d2 l       .debug_str	00000000 
000515ef l       .debug_str	00000000 
00051637 l       .debug_str	00000000 
0005166d l       .debug_str	00000000 
000516b5 l       .debug_str	00000000 
000516ea l       .debug_str	00000000 
00051732 l       .debug_str	00000000 
0005176b l       .debug_str	00000000 
000517b3 l       .debug_str	00000000 
000517cf l       .debug_str	00000000 
00051817 l       .debug_str	00000000 
0005181f l       .debug_str	00000000 
00051867 l       .debug_str	00000000 
00051882 l       .debug_str	00000000 
000518ca l       .debug_str	00000000 
000518f2 l       .debug_str	00000000 
0005193c l       .debug_str	00000000 
00051986 l       .debug_str	00000000 
000519e5 l       .debug_str	00000000 
00051a42 l       .debug_str	00000000 
00051a9b l       .debug_str	00000000 
00051afa l       .debug_str	00000000 
00051b59 l       .debug_str	00000000 
00051bba l       .debug_str	00000000 
00051c1d l       .debug_str	00000000 
00051c85 l       .debug_str	00000000 
00051ce7 l       .debug_str	00000000 
00051d4d l       .debug_str	00000000 
00051daf l       .debug_str	00000000 
00051e14 l       .debug_str	00000000 
00051e77 l       .debug_str	00000000 
00051ed3 l       .debug_str	00000000 
00051f2a l       .debug_str	00000000 
00051f83 l       .debug_str	00000000 
00051fd6 l       .debug_str	00000000 
00052032 l       .debug_str	00000000 
00052098 l       .debug_str	00000000 
000520ee l       .debug_str	00000000 
0005214b l       .debug_str	00000000 
000521ad l       .debug_str	00000000 
00052206 l       .debug_str	00000000 
00052261 l       .debug_str	00000000 
000522bc l       .debug_str	00000000 
00052317 l       .debug_str	00000000 
00052374 l       .debug_str	00000000 
000523d1 l       .debug_str	00000000 
00052417 l       .debug_str	00000000 
00052461 l       .debug_str	00000000 
000524a1 l       .debug_str	00000000 
000524de l       .debug_str	00000000 
00052522 l       .debug_str	00000000 
0005255e l       .debug_str	00000000 
000525a2 l       .debug_str	00000000 
000525eb l       .debug_str	00000000 
000525f4 l       .debug_str	00000000 
0005263d l       .debug_str	00000000 
00052646 l       .debug_str	00000000 
000526af l       .debug_str	00000000 
0005270c l       .debug_str	00000000 
0005276f l       .debug_str	00000000 
000527c5 l       .debug_str	00000000 
0005281b l       .debug_str	00000000 
00052874 l       .debug_str	00000000 
000528cc l       .debug_str	00000000 
00052930 l       .debug_str	00000000 
000529b6 l       .debug_str	00000000 
000529bc l       .debug_str	00000000 
00052a42 l       .debug_str	00000000 
00052a48 l       .debug_str	00000000 
00052aca l       .debug_str	00000000 
00052b4c l       .debug_str	00000000 
00052bcf l       .debug_str	00000000 
00052bd6 l       .debug_str	00000000 
00052c59 l       .debug_str	00000000 
00052c60 l       .debug_str	00000000 
00052ce6 l       .debug_str	00000000 
00052d6c l       .debug_str	00000000 
00052def l       .debug_str	00000000 
00052e72 l       .debug_str	00000000 
00052ef4 l       .debug_str	00000000 
00052f7a l       .debug_str	00000000 
00053000 l       .debug_str	00000000 
0005308a l       .debug_str	00000000 
00053112 l       .debug_str	00000000 
0005319a l       .debug_str	00000000 
00053202 l       .debug_str	00000000 
0005326b l       .debug_str	00000000 
000532d5 l       .debug_str	00000000 
00053340 l       .debug_str	00000000 
0005339e l       .debug_str	00000000 
000533fc l       .debug_str	00000000 
0005345a l       .debug_str	00000000 
000534b9 l       .debug_str	00000000 
00053517 l       .debug_str	00000000 
00053576 l       .debug_str	00000000 
000535d4 l       .debug_str	00000000 
00053633 l       .debug_str	00000000 
00053692 l       .debug_str	00000000 
000536f1 l       .debug_str	00000000 
0005374f l       .debug_str	00000000 
000537ae l       .debug_str	00000000 
0005380d l       .debug_str	00000000 
0005386c l       .debug_str	00000000 
000538cb l       .debug_str	00000000 
0005392a l       .debug_str	00000000 
00053989 l       .debug_str	00000000 
000539e8 l       .debug_str	00000000 
00053a47 l       .debug_str	00000000 
00053aa6 l       .debug_str	00000000 
00053b05 l       .debug_str	00000000 
00053b64 l       .debug_str	00000000 
00053bc3 l       .debug_str	00000000 
00053c22 l       .debug_str	00000000 
00053c81 l       .debug_str	00000000 
00053ce0 l       .debug_str	00000000 
00053d3f l       .debug_str	00000000 
00053d9e l       .debug_str	00000000 
00053dfd l       .debug_str	00000000 
00053e5c l       .debug_str	00000000 
00053ebc l       .debug_str	00000000 
00053f1b l       .debug_str	00000000 
00053f7a l       .debug_str	00000000 
00053fd9 l       .debug_str	00000000 
00054039 l       .debug_str	00000000 
00054098 l       .debug_str	00000000 
000540f7 l       .debug_str	00000000 
00054156 l       .debug_str	00000000 
000541b6 l       .debug_str	00000000 
00013b66 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
00015b84 l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
00015b8e l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
0001420a l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00015232 l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00014104 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
000141b4 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
0001472c l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
00013b16 l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
00013b78 l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
0001dc9c l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
0001dd17 l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
0001df08 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
0001d270 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
000141de l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
000141e4 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
000141d8 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
00013b18 l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
00015b9c l     F .text	00000024 __semihost
00015bc0 l     F .text	00000010 debugger_connected
00015bd0 l     F .text	0000002e semihost_write
00015ca4 l     F .text	0000001c semihosting_console_write_ch
200026a4 l     O .bss	00000004 semihost_mbuf
200000f8 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
200026a8 l     O .bss	00000010 avail_queue
200026b8 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
200026c4 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00015e74 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00015ec8 l     F .text	00000050 hal_gpio_irq_handler
00015f18 l     F .text	0000002c hal_gpio_irq_setup
00015f44 l     F .text	0000001c hal_gpio_find_empty_slot
00015f60 l     F .text	00000038 hal_gpio_find_pin
200026c8 l     O .bss	00000040 hal_gpio_irqs
20002708 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
000160f4 l     F .text	0000007a hal_i2c_delay_us
00016170 l     F .text	00000024 hal_i2c_resolve
00016194 l     F .text	0000001c hal_i2c_convert_status
000161b0 l     F .text	00000012 read_gpio_inbuffer
000161c2 l     F .text	000000a2 hal_i2c_clear_bus
0001e370 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
00016560 l     F .text	0000006e nrf52_irqm_handler
000165e8 l     F .text	00000014 hal_spi_stop_transfer
000165fc l     F .text	0000004c hal_spi_config_slave
00016648 l     F .text	000000b8 hal_spi_init_master
00016700 l     F .text	000000e0 hal_spi_config_master
0001e378 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
00016ae4 l     F .text	0000000e nrf52_hal_wdt_default_handler
00016af4 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00016d0c l     F .text	00000016 os_main
20002810 l     O .bss	00004000 g_os_main_stack
20002710 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0001701c l     F .text	0000005c os_dev_add
00017078 l     F .text	00000026 os_dev_initialize
0001709e l     F .text	00000020 os_dev_init
20006810 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20006818 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
000175c8 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
000176dc l     F .text	00000010 os_msys_find_biggest_pool
000176ec l     F .text	0000002c os_msys_find_pool
00017764 l     F .text	00000044 os_msys_init_once
20006828 l     O .bss	00004900 os_msys_1_data
2000b128 l     O .bss	0000000c os_msys_1_mbuf_pool
2000b134 l     O .bss	0000001c os_msys_1_mempool
20000104 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
000179c0 l     F .text	00000020 os_sanity_check_list_lock
000179e0 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00017e54 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
00017f44 l     F .text	0000004c os_deltatime
00017f90 l     F .text	0000005c os_time_tick
2000b158 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
000182ac l       .text	00000000 SVC_User
000182ca l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0001836c l       .text	00000000 test1
00018360 l       .text	00000000 loop1
00018372 l       .text	00000000 res1
0001838e l       .text	00000000 test2
00018396 l       .text	00000000 done
00018382 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
000183a2 l       .text	00000000 test1
0001839e l       .text	00000000 loop1
000183b0 l       .text	00000000 test2
000183ac l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001841a l     F .text	000000c0 ui2a
000184da l     F .text	00000020 i2a
000184fa l     F .text	00000030 a2d
0001852a l     F .text	00000036 a2i
00018560 l     F .text	0000002a putf
0001858c l     F .text	0000011c putchw
000186a8 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
00018a2c l     F .text	00000004 stdin_read
00018a30 l     F .text	00000010 stdout_write
2000011c l     O .data	00000004 _stdin
20000120 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
00018ae0 l     F .text	00000028 nrf52k_flash_wait_ready
00018b08 l     F .text	00000054 nrf52k_flash_erase_sector
00018b5c l     F .text	00000004 nrf52k_flash_init
00018b60 l     F .text	00000020 nrf52k_flash_sector_info
00018b80 l     F .text	000000d0 nrf52k_flash_write
00018c50 l     F .text	0000000e nrf52k_flash_read
0001e530 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
00018c60 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
00018e6c l     F .text	0000000a nrf_read_timer_cntr
00018e78 l     F .text	000000b4 nrf_timer_set_ocmp
00018f2c l     F .text	0000000a nrf_timer_disable_ocmp
00018f36 l     F .text	0000000a nrf_rtc_disable_ocmp
00018f40 l     F .text	00000054 hal_timer_read_bsptimer
00018f94 l     F .text	00000076 hal_timer_chk_queue
0001900a l     F .text	0000002c hal_timer_irq_handler
0001e54c l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
000191d0 l     F .text	00000034 nrf52_periph_create_timers
00019204 l     F .text	00000020 nrf52_periph_create_i2c
00019224 l     F .text	00000020 nrf52_periph_create_spi
0001e564 l     O .text	0000000c hal_i2c1_cfg
0001e570 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
00019258 l     F .text	00000028 sensor_mgr_remove
00019280 l     F .text	00000060 sensor_mgr_insert
000192e0 l     F .text	0000000a sensor_type_traits_empty
000192ec l     F .text	0000000c sensor_mgr_evq_set
00019326 l     F .text	0000005c sensor_read_data_func
00019384 l     F .text	00000048 sensor_base_ts_update_event
000193cc l     F .text	00000050 sensor_up_timestamp
00019454 l     F .text	000000a0 sensor_mgr_init
000196c0 l     F .text	0000007c sensor_mgr_wakeup_event
0001951e l     F .text	00000032 sensor_update_nextrun
00019550 l     F .text	0000001e sensor_calc_nextrun_delta
00019570 l     F .text	00000024 sensor_find_min_nextrun_sensor
00019648 l     F .text	0000004a sensor_mgr_poll_bytype
00019692 l     F .text	0000002e sensor_poll_per_type_trait
2000b18c l     O .bss	00000078 sensor_notify_evt_area
2000b204 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000b220 l     O .bss	00000008 oc_sem
2000b228 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000b22c l     O .bss	0000000c hw_id
2000b238 l     O .bss	00000004 hw_id_len
2000b240 l     O .bss	00000008 sensor_node_address
2000b248 l     O .bss	00000037 sensor_node_names_buf
20000128 l     O .data	00000014 sensor_node_names
0001e588 l     O .text	0000000c COLLECTOR_NODE_HW_ID
0001e594 l     O .text	0000003c SENSOR_NODE_HW_IDS
0001e630 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
000198e4 l     F .text	00000050 config_device
2000b280 l     O .bss	00000014 adc_1_itf_temp_stub
2000b298 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
00019990 l     F .text	00000004 temp_stub_close
00019994 l     F .text	0000001c temp_stub_sensor_get_config
000199b0 l     F .text	00000026 temp_stub_open
00019a8c l     F .text	0000007c temp_stub_sensor_read
0001e674 l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
00019b30 l     F .text	00000030 oc_buffer_tx
00019b60 l     F .text	0000002c oc_buffer_rx
2000b358 l     O .bss	00000018 oc_inq
2000b370 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000b388 l     O .bss	000000c8 oc_client_cb_area
2000b450 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000b46c l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000b470 l     O .bss	0000001c oc_rep_objects
2000b48c l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
00019cb4 l     F .text	00000078 flash_map_read_mfg
2000b4bc l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
00019e08 l     F .text	00000094 mfg_seek_next_aux
00019e9c l     F .text	00000070 mfg_read_mmr
00019f0c l     F .text	00000054 mfg_read_next_mmr
00019f60 l     F .text	0000003c mfg_open_flash_area
00019f9c l     F .text	00000044 mfg_read_tlv_body
0001a068 l     F .text	0000004e mfg_read_mmr_refs
2000b534 l     O .bss	00000001 mfg_initialized
2000b538 l     O .bss	00000018 mfg_mmrs
2000b550 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001a0ce l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00013d1c g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
0001047e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE
00008644 g     F .text	000000ba main
0000fbaa g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE
00011a6e g     F .text	00000042 _ZN22piet_embedded_graphics7display15draw_to_display17h2860069dec5245b0E
00009c04 g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
000172ec g     F .text	00000040 os_eventq_remove
0000f78a g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE
0000a39a g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE
00018138 g     F .text	00000018 os_arch_init
00010dba g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17hafb8e34694f2826dE
00018354 g     F .text	00000048 memcmp
000139de g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE
0000ab32 g     F .text	00000030 _ZN4core3any6TypeId2of17hfaa6ba6a592dc19eE
0001126e g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
0000bcc0 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
0000f6ac g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E
000136be g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
00013546 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
0000e740 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE
0000e696 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
00013d4c g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
0000a37c g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
00008d36 g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
0000f578 g     F .text	0000005a _ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE
000159ac g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000b670 g     O .bss	0000001c nrf52_hal_timer0
0000f9f6 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E
00008d1c g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
0000f86c g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE
00019514 g     F .text	0000000a sensor_unlock
0000eb0c g     F .text	0000000e _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h36eac1ea773cedc8E
0000a88a g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
0000f99a g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E
0000948c g     F .text	00000118 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E
0000c1de g     F .text	00000058 _ZN126_$LT$embedded_graphics..fonts..font12x16..Font12x16Conf$u20$as$u20$embedded_graphics..fonts..font_builder..FontBuilderConf$GT$11char_offset17hb09a44d3d4c791ccE
0000bd14 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
0000f97e g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE
00011a4e g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E
00008bb0 g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
00017a0c g     F .text	00000024 os_sanity_check_register
000199e4 g     F .text	0000007c temp_stub_init
00017aac g     F .text	00000054 os_sched_insert
2000b554 g     O .bss	00000001 g_silence_console
0000fec4 g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E
0001079c g     F .text	0000028a _ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E
0000eb1a g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h4a298e2ae73b4122E
0000ff7c g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E
0000c846 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
0001333c g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001a16c g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
00013ae8 g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
0000f670 g     F .text	00000018 _ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E
00009616 g     F .text	00000162 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE
00010f6c g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE
00008a7c g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
00010304 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
000155f8 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE
00013afa g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E
00011c10 g     F .text	0000055a _ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E
0000fc0e g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE
00010068 g     F .text	00000024 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE
0000bf04 g     F .text	00000086 _ZN4core3cmp6max_by17h3c9686db40e0f078E
00008998 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
2000010c g     O .data	00000008 g_os_run_list
000104de g     F .text	0000004a _ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E
00019bf0 g     F .text	00000020 oc_send_buffer
000181e0 g     F .text	00000030 os_arch_start
0000f824 g     F .text	00000048 _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h22ceb477e38723abE
00012e32 g     F .text	000001ba _ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E
000103ee g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE
0000a40e g     F .text	0000001a _ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E
00019808 g     F .text	0000001a is_standalone_node
000171d8 g     F .text	00000010 os_eventq_init
00014c0a g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
0000c8fe g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
000142ee g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
0000bcfe g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
00008b72 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
0000e718 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h28f25fdf3a10b211E
0001216a g     F .text	00000048 _ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17hb4823a008a69b1a5E
0000edca g     F .text	00000024 _ZN132_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$6stroke17h533a8dd4991b2a2aE
000138c0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001973c g     F .text	00000028 init_sensor_coap
000135d2 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE
00019c10 g     F .text	0000004c oc_send_multicast_message
00010f7c g     F .text	0000008c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE
0000c604 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
00014bc6 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000b690 g     O .bss	00000034 sensor_mgr
00015d40 g     F .text	0000002c console_dump
00017bd8 g     F .text	00000078 os_sched_wakeup
0000c7d6 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
0001578c g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
000089d0 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001a0cc g     F .text	00000002 _fini
00017010 g     F .text	0000000a os_cputime_get32
00010de0 g     F .text	00000036 _ZN94_$LT$core..iter..adapters..Skip$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hffd3ee1a09d0b53aE
0000bdc4 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
0000e538 g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000b555 g     O .bss	00000001 g_console_input_ignore
000180c8 g     F .text	00000014 os_arch_ctx_sw
0000c81c g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
0000c236 g     F .text	00000032 _ZN95_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$u8$GT$$GT$4from17ha820ed885a85d2b3E
0000fd38 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE
00018316 g     F .text	0000000c SysTick_Handler
00013306 g     F .text	0000000c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h534b8e9ee92b030bE
0001977c g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
0000bd2a g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
0000906e g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
00010dce g     F .text	00000012 _ZN4core4iter8adapters13Skip$LT$I$GT$3new17he3da92634e891f7dE
0000c850 g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
000183ee g     F .text	0000001c strcmp
00010f48 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE
2000b588 g     O .bss	00000050 g_idle_task
000171c8 g     F .text	00000010 os_dev_reset
00013ad0 g     F .text	00000010 _ZN4core3ptr5write17h147d4643d861e927E
0000911a g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
00017d28 g     F .text	00000010 os_sem_init
00015cc0 g     F .text	00000070 console_printhex
0000eb06 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
0001e734 g       .text	00000000 __exidx_start
000197ec g     F .text	0000001c is_collector_node
0001074c g     F .text	00000050 _ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E
000183b6 g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
000154dc g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
00015c50 g     F .text	00000054 console_buffer
000171e8 g     F .text	0000000a os_eventq_inited
00015e88 g     F .text	0000000c sysinit_end
000134f4 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
00013950 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
00013cc4 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000b728 g       .bss	00000000 __HeapBase
0000ff14 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE
0000fe62 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E
0000901a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
0000a49a g     F .text	00000038 .hidden _ZN4core3str21_$LT$impl$u20$str$GT$5chars17h5612c26d24354453E
0000a3e0 g     F .text	00000012 _ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E
0000abcc g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E
0000e66a g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
0000f6f4 g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0000e76c g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h691a68d65b7ac2e0E
00019d6c g     F .text	00000026 flash_area_read
0000c806 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
00019c82 g     F .text	00000002 oc_register_ip4
00008c40 g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
00019c84 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
000133ca g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE
0001a0ec g     F .text	00000028 hal_flash_init
000111d8 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator4skip17h78c4b5071866f986E
00017190 g     F .text	00000036 os_dev_close
0001e6cc g     O .text	00000048 sysflash_map_dflt
00012484 g     F .text	0000028a _ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E
00018ad4 g     F .text	0000000c hal_bsp_init
0000aaca g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h0882b01a3344b9ecE
0001131a g     F .text	000005e0 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE
0000c700 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
0000982e g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
0000c5c6 g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001a4c8 g     F .text	00000004 __aeabi_memcpy4
00011098 g     F .text	000000c6 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE
0000bc1a g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17h4ef46bc50523a294E
0001692c g     F .text	0000002c hal_spi_set_txrx_cb
0001a4c0 g     F .text	00000006 __aeabi_memclr8
000086fe g     F .text	00000102 rust_begin_unwind
00012fec g     F .text	000001b2 _ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E
2000b558 g     O .bss	00000004 console_is_midline
0001a4c0 g     F .text	00000006 __aeabi_memclr4
0000a3d0 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h22ac77b3595708cdE
000080f8 g       .text	00000000 __isr_vector_end
00016424 g     F .text	0000013c hal_i2c_master_read
0000fffc g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E
0000bc92 g     F .text	0000001c _ZN4core3ptr13drop_in_place17he97a34a4d7ae7cacE
0001870c g     F .text	0000025c tfp_format
0000c086 g     F .text	00000074 _ZN89_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..arith..Add$GT$3add17hab4ee8a701a8c787E
00013890 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
000195e0 g     F .text	00000068 sensor_read
00008d02 g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
0000fa06 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E
00010ea0 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE
0001a4c8 g     F .text	00000004 __aeabi_memcpy
0001a4c8 g     F .text	00000004 __aeabi_memcpy8
0000edee g     F .text	00000628 _ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E
2000b6c4 g     O .bss	00000020 st_up_osco
00018210 g     F .text	0000005c os_arch_os_start
000195c2 g     F .text	0000001e sensor_init
20000000 g       .bss	00000000 _ram_start
00018038 g     F .text	00000026 os_time_delay
0000fa16 g     F .text	0000002c _ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE
0000b8ae g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7f96ad6a83c37f74E
00019c80 g     F .text	00000002 oc_register_gatt
0001a168 g     F .text	00000004 hal_bsp_hw_id_len
00016fd0 g     F .text	00000034 os_callout_wakeup_ticks
00017346 g     F .text	00000026 os_mqueue_get
00016264 g     F .text	00000098 hal_i2c_init
0000e7e2 g     F .text	00000138 _ZN4core3str15next_code_point17h3f90b08743d448d4E
00014a98 g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
000154dc g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0000c0fa g     F .text	00000092 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E
000118fa g     F .text	00000048 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E
00013860 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
00017cd8 g     F .text	00000022 os_sched
00008a8e g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
0000bf8a g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h5567184bcc425327E
0000c746 g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
0000a45e g     F .text	00000010 _ZN4core3ptr13drop_in_place17hf625580841d3425eE
2000fe50 g       *ABS*	000001b0 __StackLimit
000192f8 g     F .text	0000002e sensor_mgr_match_bytype
0000c61a g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
0000f91c g     F .text	00000032 _ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E
0000aa0c g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
00017814 g     F .text	00000014 os_mutex_init
00008c1c g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
00009bc0 g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
2000b560 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
0001008c g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E
00008164  w    F .text	00000002 RTC1_IRQHandler
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
000137d0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
2000011c g       .data	00000000 __aeabi_unwind_cpp_pr0
00008eaa g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
00008ff0 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
00008a74 g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
0000ca16 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
000177b8 g     F .text	00000028 os_msys_get_pkthdr
00019a60 g     F .text	0000002c temp_stub_get_raw_temperature
00017c50 g     F .text	0000003c os_sched_os_timer_exp
000170c0 g     F .text	00000040 os_dev_create
0000a3f2 g     F .text	0000001c _ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E
00013a5a g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
000179fc g     F .text	00000010 os_sanity_check_init
00013dae g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
00017004 g     F .text	0000000c os_cputime_init
000172d4 g     F .text	00000018 os_eventq_run
000177e0 g     F .text	00000034 os_msys_init
0000e9fe g     F .text	0000008c _ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E
00011a60 g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
00013366 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
000180be g     F .text	0000000a timer_handler
0000be8e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
00013aec g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
00008f80 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
0000f94e g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E
00013ae4 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
00013d8c g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
00011a16 g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
0001578c g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
0000faf0 g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
00018968 g     F .text	00000008 vfprintf
0000e6ee g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
0000c772 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
0000c7d0 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
000173e6 g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
00013830 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
00014f9a g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
00011292 g     F .text	00000088 _ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE
00013d20 g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
000180ee g     F .text	0000000a os_arch_in_critical
0000ff68 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E
00017a9c g     F .text	00000010 os_sanity_init
00011a42 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE
0000fb1a g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE
0001578c g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
0000f9b8 g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE
00016bb0 g     F .text	0000004c __assert_func
000135be g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
0001025a g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
0000fb38 g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE
00017686 g     F .text	0000001e os_memblock_put_from_cb
00018270 g     F .text	00000014 os_set_env
2000b64c g     O .bss	00000004 g_os_last_ctx_sw_time
0000e95e g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h96e3034106d1de14E
0000c862 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
00015e20 g     F .text	00000048 console_printf
0000c878 g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
0000a95c g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
0000c646 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
00013770 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
00018284 g     F .text	00000006 os_arch_init_task_stack
0001a058 g     F .text	00000010 mfg_open
0001578c g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
00019bb4 g     F .text	00000030 oc_ri_mem_init
0000937c g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
00018ac4 g     F .text	00000010 hal_bsp_flash_dev
00019d94 g     F .text	00000070 flash_map_init
2000b660 g     O .bss	00000004 g_os_time
0000f904 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E
00010a26 g     F .text	00000392 _ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E
00018322 g     F .text	0000001e os_default_irq_asm
00016bfc g     F .text	00000098 os_default_irq
0000bcae g     F .text	00000012 _ZN4core3ptr13drop_in_place17hf2bbef3a3279f316E
200000e4 g     O .data	00000004 SystemCoreClock
00016864 g     F .text	00000068 hal_spi_disable
0001106e g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E
0000c8be g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E
00008cd4 g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
00019c86 g     F .text	00000002 oc_register_lora
000155f8 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hc265973c39f711faE
00017468 g     F .text	000000a8 os_mbuf_append
00019934 g     F .text	0000005c temp_stub_create
0001a114 g     F .text	00000054 hal_flash_read
00015c00 g     F .text	00000048 console_flush
000139b2 g     F .text	00000018 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE
0000f966 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E
00016e50 g     F .text	0000001a os_start
00019048 g     F .text	00000060 hal_timer_init
0000bd3e g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
00018a40 g     F .text	00000010 rust_sysinit
00008164  w    F .text	00000002 I2S_IRQHandler
00015d30 g     F .text	00000010 console_printint
00017cfc g     F .text	0000002c os_sched_resort
0001e50c g     O .text	00000008 MemFile_methods
00018a14 g     F .text	00000018 fmemopen_w
0000d70e g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
000167e0 g     F .text	00000038 hal_spi_config
0001a4bc  w    F .text	00000002 .hidden __aeabi_ldiv0
000176cc g     F .text	00000010 os_mempool_module_init
00017ccc g     F .text	0000000c os_sched_next_task
00011012 g     F .text	0000001a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E
0000a428 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E
0000e96e g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE
0001601e g     F .text	00000034 hal_gpio_read
00016ea4 g     F .text	0000001a os_callout_init
000177a8 g     F .text	00000010 os_msys_reset
00018970 g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001a1c0 g     F .text	00000000 .hidden __aeabi_uldivmod
00018060 g     F .text	00000038 os_gettimeofday
00015dac g     F .text	0000001e console_write
00011b5c g     F .text	000000b4 _ZN120_$LT$$RF$embedded_graphics..primitives..circle..Circle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha04ece643e22d5bbE
00013920 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
00014a62 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
00009478 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
00016d30 g     F .text	00000070 os_init_idle_task
00018150 g     F .text	0000008c os_arch_os_init
00010534 g     F .text	000001ba _ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE
00008fb8 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
00016da0 g     F .text	000000b0 os_init
2000b638 g     O .bss	00000008 g_os_mempool_list
0000946e g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
0000a438 g     F .text	0000001e _ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE
0000c65c g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
00015da8 g     F .text	00000004 semihosting_console_init
00019ff2 g     F .text	0000001a mfg_seek_next_with_type
000178e0 g     F .text	000000e0 os_mutex_pend
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00015ffc g     F .text	00000022 hal_gpio_write
0000e782 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h91199f57d008dd73E
00008600 g     F .text	00000014 _start
0000c73e g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
0000c7a6 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001a0b8 g     F .text	00000014 __wrap_coap_receive
000137a0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000b55c g     O .bss	00000001 sysinit_active
0000c93a g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
0000f54e g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
000189e4 g     F .text	0000002e memfile_write
0001a4bc  w    F .text	00000002 .hidden __aeabi_idiv0
00011238 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE
0000bb60 g     F .text	000000ba _ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E
00016d24 g     F .text	0000000c os_started
00010dc4 g     F .text	0000000a .hidden _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE
00019b8c g     F .text	00000028 oc_buffer_init
0000e698 g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
0001270e g     F .text	00000392 _ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E
00008f9c g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000b640 g     O .bss	0000000c g_os_sanity_check_mu
00008d46 g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
00008616 g     F .text	0000002e _ZN3app12handle_touch17h8b78104f4aedbf0fE
0001325a g     F .text	00000050 _ZN22piet_embedded_graphics5batch9to_blocks17h3510a8630bd6634bE
0001a4c0 g     F .text	00000006 __aeabi_memclr
0001a4cc g     F .text	0000009a __aeabi_memset4
0000caa2 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
00014a6a g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
000139ca g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E
0000c88e g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E
00011ab0 g     F .text	0000004a _ZN22piet_embedded_graphics7display15draw_to_display17h34594f1d8e74e802E
00017ff8 g     F .text	00000040 os_time_advance
00016818 g     F .text	0000004c hal_spi_enable
0001a020 g     F .text	00000038 mfg_init
00011b32 g     F .text	0000000a _ZN116_$LT$embedded_graphics..primitives..circle..Circle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h24faeeb9f54e81acE
0000e1b8 g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
0000ed1a g     F .text	0000008c _ZN129_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hd063247fe992676fE
2000b5d8 g     O .bss	00000050 g_os_main_task
000111f4 g     F .text	00000016 _ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00584595d104a428E
0001a4cc g     F .text	0000009a __aeabi_memset8
0001553a g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
0000aaf8 g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17h2121c22b5f8e5defE
00008a68 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
0001e74c g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
0000a4d2 g     F .text	00000022 .hidden _ZN75_$LT$core..str..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h90c7de42971d7e48E
20000140 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
000140ac g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
000089f6 g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
00015aa0 g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
00015e94 g     F .text	00000034 NVIC_Relocate
00015e7c g     F .text	0000000c sysinit_start
00011220 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E
00011250 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE
0001e518 g     O .text	00000018 nrf52k_flash_dev
000190a8 g     F .text	000000f8 hal_timer_config
0000f8ec g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E
0000f624 g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
000189d0 g     F .text	00000014 vprintf
00008c26 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
00015c48 g     F .text	00000008 disable_buffer
000135e6 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E
2000b628 g     O .bss	00000004 g_os_started
00013d14 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
0000f8ac g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E
2000013c g       .bssnz	00000000 __bssnz_end__
0001712c g     F .text	00000020 os_dev_lookup
0001044e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E
00008e9e g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
00016b8c g     F .text	00000010 hal_watchdog_enable
2000b664 g     O .bss	0000000c g_hal_os_tick
00013558 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E
000132aa g     F .text	00000050 _ZN22piet_embedded_graphics5batch9to_blocks17h5688ceff670375ccE
000180e8 g     F .text	00000006 os_arch_restore_sr
00016efc g     F .text	00000078 os_callout_reset
00009482 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001a00c g     F .text	0000000a mfg_read_tlv_flash_area
0000c8da g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
00011b3c g     F .text	00000020 _ZN119_$LT$embedded_graphics..primitives..circle..Circle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17h16ccda9e1b3b6eadE
0000815a  w    F .text	00000002 BusFault_Handler
0001120a g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E
00017334 g     F .text	00000012 os_mqueue_init
0000c18c g     F .text	00000052 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE
00013800 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
00010114 g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
000199d6 g     F .text	0000000e temp_stub_default_cfg
0000c90e g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E
0000ec06 g     F .text	00000060 _ZN106_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hbb46c11534efa1f0E
00008020 g       .imghdr	00000000 __text
00016ec0 g     F .text	0000003c os_callout_stop
000119b4 g     F .text	00000062 _ZN79_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7298be2e66d2e6f3E
000100b2 g     F .text	00000062 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E
000081c0 g     F .text	0000004c hal_system_clock_start
00017430 g     F .text	00000024 os_mbuf_free_chain
00008d72 g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
00018a50 g     F .text	00000030 mem_init_mbuf_pool
0000c932 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
0000c86c g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
0001356a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E
000162fc g     F .text	00000128 hal_i2c_master_write
000104ae g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E
00008164  w    F .text	00000002 QDEC_IRQHandler
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
0000a46e g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h526d0e5e5afce60aE
0000ca84 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
0000c41a g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
00010f0a g     F .text	0000001a _ZN4core5slice14from_raw_parts17h1425df913744b73aE
0001732c g     F .text	00000008 os_eventq_dflt_get
000194fc g     F .text	00000018 sensor_lock
0000bcd6 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
0000ea8a g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E
00015dd4 g     F .text	0000004c console_pkg_init
200000fc g     O .data	00000004 sysinit_panic_cb
00017454 g     F .text	00000014 os_mbuf_len
0001741c g     F .text	00000014 os_mbuf_free
000106ee g     F .text	0000005e _ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E
0000b8d2 g     F .text	0000028e .hidden _ZN3app7display12test_display17h5d1f8edc1ef53359E
0000fa42 g     F .text	000000ae _ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E
0000c630 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
00008194 g     F .text	0000002c hal_system_reset
00015dca g     F .text	00000008 console_blocking_mode
00010528 g     F .text	0000000c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E
0000995a g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
0000bcea g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
00019244 g     F .text	00000010 nrf52_periph_create
00010e5e g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E
00017a30 g     F .text	0000006c os_sanity_run
0000841c g     F .text	00000010 SystemCoreClockUpdate
0000eb2e g     F .text	00000014 _ZN75_$LT$core..str..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h0400b6ad59742233E
0000f416 g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
0000f688 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
00013a74 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE
00017640 g     F .text	00000014 os_mempool_init
0001e514 g     O .text	00000004 stdout
0000aabc g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
00017100 g     F .text	0000002c os_dev_initialize_all
00008aae g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
0000f88c g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E
00013594 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
00016c94 g     F .text	00000078 os_idle_task
00008b62 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
000136d6 g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
0000a3b2 g     F .text	0000001e _ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE
0001399e g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E
00009778 g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
00014760 g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
00019d2c g     F .text	00000040 flash_area_open
0001102c g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E
00010e54 g     F .text	0000000a _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E
0000f6d0 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE
00008164 g     F .text	00000002 Default_Handler
00013d12 g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
00008ec4 g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
00017718 g     F .text	0000004c os_msys_register
00011054 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE
00008d7c g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
0000ab78 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h999fe3470f07fb23E
2000b150 g     O .bss	00000004 g_os_sanity_check_list
0000a8c0 g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
0000c77c g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
0000c356 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
000168cc g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
00019438 g     F .text	00000010 sensor_mgr_unlock
2000b720 g     O .bss	00000004 flash_map_entries
0001547e g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
000136e0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
0000fe74 g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE
00019c88 g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
000103ae g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0000a4f4 g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
0000e756 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE
0000fb56 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
00019fe0 g     F .text	00000012 mfg_seek_next
0000e9f4 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17he6fb0833e9643f35E
00010166 g     F .text	0000004a _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E
0001041e g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E
0000fb80 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE
20000114 g     O .data	00000008 g_os_sleep_list
0000ec66 g     F .text	0000005a _ZN127_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..fonts..Font$LT$C$GT$$GT$10render_str17h35bcfccc03ed936fE
000144d0 g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
000173aa g     F .text	0000000a os_mbuf_pool_init
2000b630 g     O .bss	00000008 g_callout_list
00017b3c g     F .text	0000000c os_sched_set_current_task
00016f74 g     F .text	0000005c os_callout_tick
00008d98 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
00013988 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E
00016b14 g     F .text	00000078 hal_watchdog_init
2000b654 g     O .bss	00000001 g_task_id
00015862 g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
0001199a g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h542235707a00637fE
0000a456 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
0001714c g     F .text	00000044 os_dev_open
2000b650 g     O .bss	00000004 g_current_task
00013ae0 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000140 g       .bss	00000000 __bss_start__
00013652 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
00011afa g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117heb928dedbf3bbf0bE
0000ab62 g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17hd6f456243f579479E
00008a5c g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
000165d0 g     F .text	00000018 nrf52_spi0_irq_handler
0000e798 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h06724165ef78af3dE
000194f4 g     F .text	00000008 sensor_pkg_init
00019b08 g     F .text	00000028 temp_stub_config
0001736c g     F .text	0000003e os_mqueue_put
00015aa0 g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
0000bc64 g     F .text	00000012 _ZN4core3ptr13drop_in_place17h2cd1c282464046dcE
00016958 g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
000131fc g     F .text	0000005e _ZN22piet_embedded_graphics5batch7to_rows17hdb266cd0c1904847E
00017b30 g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0000e702 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hac12a3f0eb07af6cE
00019e04 g     F .text	00000002 modlog_init
0000fdfe g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E
00010e16 g     F .text	0000003e _ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE
00016a04 g     F .text	000000e0 hal_spi_txrx_noblock
00013c8c g     F .text	00000038 _ZN4core6option13expect_failed17had6579abaad447b4E
00014a72 g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
00008d12 g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
00008b8c g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
00017b00 g     F .text	00000030 os_sched_ctx_sw_hook
00019594 g     F .text	0000002e sensor_mgr_register
00013cc4 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
00014310 g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
00008154  w    F .text	00000002 NMI_Handler
0000e680 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
00008e14 g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
00013a4c g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E
00008b6a g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
0000c5f8 g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
000173b4 g     F .text	00000032 os_mbuf_get
2000b658 g     O .bss	00000008 g_os_task_list
0000884c g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
00013fda g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
00018994 g     F .text	0000003a vsnprintf
0000e738 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hb9a699ef41e62aa9E
0000d556 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
00017828 g     F .text	000000b8 os_mutex_release
0000bc76 g     F .text	0000001c _ZN4core3ptr13drop_in_place17hb9a3bbc44f2775d6E
00019448 g     F .text	0000000c sensor_mgr_evq_get
00011942 g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
0000c75a g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
0000ff90 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE
2000b62c g     O .bss	00000004 g_os_idle_ctr
00015f98 g     F .text	0000002c hal_gpio_init_in
0000c6f6 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
000095a4 g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00012aa0 g     F .text	00000392 _ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E
00008164  w    F .text	00000002 TIMER1_IRQHandler
00019254 g     F .text	00000002 sensor_dev_create
0000c268 g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
00008800 g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
00015fc4 g     F .text	00000038 hal_gpio_init_out
0000c38a g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
00013980 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E
00011008 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E
00009098 g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
00017fec g     F .text	0000000c os_time_get
00013d14 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
0000a30e g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
000176a4 g     F .text	00000026 os_memblock_put
0000d5e6 g     F .text	00000128 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
00017b48 g     F .text	00000090 os_sched_sleep
0000c734 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001941c g     F .text	0000001c sensor_mgr_lock
0001a1f0 g     F .text	000002cc .hidden __udivmoddi4
0000bcf6 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
00018dcc g     F .text	000000a0 os_tick_init
0000f5d2 g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
00013d0e g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
00008c86 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
00017c8c g     F .text	00000040 os_sched_wakeup_ticks
00008fd4 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
000191a0 g     F .text	00000030 hal_timer_read
2000013c g       .data	00000000 __data_end__
000160cc g     F .text	00000028 hal_gpio_irq_enable
0000eda6 g     F .text	00000024 _ZN132_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17h0c5fde36a685a59fE
00010db8 g     F .text	00000002 _ZN77_$LT$core..marker..PhantomData$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17hf965c475a96f2137E
00019be4 g     F .text	0000000c oc_evq_set
00019764 g     F .text	00000018 is_sensor_node
0001547e g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
00019c5c g     F .text	00000024 oc_init
000156b6 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
000156b6 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
000093b2 g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
00014c4e g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
00013740 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E
2000b6e8 g     O .bss	00000018 sensor_base_ts
000159ac g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
0001342e g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E
0001e74c g       .ARM.exidx	00000000 __etext
0001553a g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
00015e68 g     F .text	0000000c console_get_ticks
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00008cca g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
20000100 g     O .data	00000004 hal_twi_i2c1
0000fc72 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E
00017e6c g     F .text	000000d8 os_task_init
00011264 g     F .text	0000000a _ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E
0000c33c g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
0000eb42 g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE
0000c724 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
00013a8e g     F .text	00000042 _ZN4core3ptr4read17h27a035d1812d8297E
000138f0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
00017d38 g     F .text	00000064 os_sem_release
0001a4cc g     F .text	0000009a __aeabi_memset
00017510 g     F .text	000000b8 os_mbuf_dup
000182d0 g     F .text	00000046 PendSV_Handler
0000c91e g     F .text	00000014 _ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E
0001828a g     F .text	00000046 SVC_Handler
000180dc g     F .text	0000000c os_arch_save_sr
0000f8cc g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E
00008164  w    F .text	00000002 PWM2_IRQHandler
0000815c  w    F .text	00000002 UsageFault_Handler
00019038 g     F .text	00000010 nrf52_timer0_irq_handler
000180f8 g     F .text	00000040 os_arch_task_stack_init
0000bc5c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h235866e800505e38E
2000b728 g       .bss	00000000 __bss_end__
00017654 g     F .text	00000032 os_memblock_get
2000b724 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
0000c454 g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
0000bdca g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
00016b9c g     F .text	00000014 hal_watchdog_tickle
0000a3a2 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h0697ea54608a328fE
000103be g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE
0001725a g     F .text	0000007a os_eventq_get
0001a1a0 g     F .text	00000020 sprintf
00018098 g     F .text	00000026 os_time_ms_to_ticks
00008810 g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
00013984 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E
0000a926 g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
0001115e g     F .text	0000007a _ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E
2000b188 g     O .bss	00000004 os_flags
00019c8c g     F .text	00000028 oc_rep_init
0001839c g     F .text	0000001a memcpy
00018a80 g     F .text	00000044 sysinit_app
00010f3e g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE
00011a56 g     F .text	0000000a .hidden _ZN84_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..clone..Clone$GT$5clone17h0724d1c23a2b4d0dE
00013710 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
000158dc g     F .text	000000d0 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E
0000e1c8 g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
0000c7f0 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
00015d6c g     F .text	0000003c console_out_nolock
2000b700 g     O .bss	00000020 oc_transports
00016054 g     F .text	00000078 hal_gpio_irq_init
0000f9d6 g     F .text	00000020 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE
0001840a g     F .text	00000010 strlen
00017d9c g     F .text	000000b8 os_sem_pend
0000beaa g     F .text	00000016 _ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE
00018d34 g     F .text	00000098 os_tick_idle
0000c836 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
000121fa g     F .text	0000028a _ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE
0000e72c g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17ha1a9213488b5cfb8E
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
0000c9a8 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
0000ecc0 g     F .text	0000005a _ZN127_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..transform..Transform$GT$9translate17h41f7fc2ef13b72b5E
00010f24 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E
2000fe50 g       *ABS*	00000000 __HeapLimit
000111ec g     F .text	00000008 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a071d74d69998d3E
00016e6c g     F .text	00000038 os_pkg_init
2000013c g       .bssnz	00000000 __bssnz_start__
00009044 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
0000c2f6 g     F .text	00000012 _ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E
0000a362 g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
000121b2 g     F .text	00000048 _ZN17embedded_graphics10primitives6circle15Circle$LT$C$GT$3new17hd0fdd32bac55188aE
000101b0 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
0000e534 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
0001319e g     F .text	0000005e _ZN22piet_embedded_graphics5batch7to_rows17h2d8ec8beb5c5314cE
00008158  w    F .text	00000002 MemoryManagement_Handler
000156b6 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
0000f494 g     F .text	000000ba _ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE
000171f2 g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
0000ff3e g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E
000095da g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
0000c074 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
0000fe50 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE
0001a016 g     F .text	0000000a mfg_read_tlv_mmr_ref
00008a44 g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
000132fa g     F .text	0000000c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h121598282e9f6cfdE
00019824 g     F .text	000000c0 sensor_network_init
000156b6 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00013312 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
0000c8a6 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0001828b 	.word	0x0001828b
	...
    8058:	000182d1 	.word	0x000182d1
    805c:	00018317 	.word	0x00018317
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000140 	.word	0x20000140
    ldr     r3, =__bss_end__
    8134:	2000b728 	.word	0x2000b728
    ldr    r1, =__etext
    8138:	0001e74c 	.word	0x0001e74c
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	2000013c 	.word	0x2000013c
    LDR     R0, =__HeapBase
    8144:	2000b728 	.word	0x2000b728
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f00d fc91 	bl	15e94 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f00e fbcc 	bl	16da0 <os_init>
    os_start();
    8608:	f00e fc22 	bl	16e50 <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008645 	.word	0x00008645

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <_ZN3app12handle_touch17h8b78104f4aedbf0fE>:

#[cfg(feature = "chip8_app")]   //  If CHIP8 Emulator app is enabled...
use chip8::handle_touch;        //  Use the touch handler from the CHIP8 Emulator app

#[cfg(not(any(feature = "ui_app", feature = "visual_app", feature = "chip8_app")))]  //  If neither druid UI app nor Visual Rust app are enabled...
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing
    8616:	b580      	push	{r7, lr}
    8618:	b084      	sub	sp, #16
    861a:	460a      	mov	r2, r1
    861c:	4603      	mov	r3, r0
    861e:	f8ad 000c 	strh.w	r0, [sp, #12]
    8622:	f8ad 100e 	strh.w	r1, [sp, #14]
    8626:	f24a 5066 	movw	r0, #42342	; 0xa566
    862a:	f2c0 0001 	movt	r0, #1
    862e:	2112      	movs	r1, #18
    8630:	9202      	str	r2, [sp, #8]
    8632:	9301      	str	r3, [sp, #4]
    8634:	f000 fb27 	bl	8c86 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8638:	e7ff      	b.n	863a <_ZN3app12handle_touch17h8b78104f4aedbf0fE+0x24>
    863a:	f000 fb6a 	bl	8d12 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    863e:	e7ff      	b.n	8640 <_ZN3app12handle_touch17h8b78104f4aedbf0fE+0x2a>
    8640:	b004      	add	sp, #16
    8642:	bd80      	pop	{r7, pc}

00008644 <main>:

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8644:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8646:	f000 f8db 	bl	8800 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    864a:	e7ff      	b.n	864c <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    864c:	f000 fd65 	bl	911a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8650:	9005      	str	r0, [sp, #20]
    8652:	e7ff      	b.n	8654 <main+0x10>
    8654:	f24a 5178 	movw	r1, #42360	; 0xa578
    8658:	f2c0 0101 	movt	r1, #1
    865c:	f24a 53ac 	movw	r3, #42412	; 0xa5ac
    8660:	f2c0 0301 	movt	r3, #1
    8664:	2208      	movs	r2, #8
    8666:	9805      	ldr	r0, [sp, #20]
    8668:	f000 f9c5 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    866c:	e7ff      	b.n	866e <main+0x2a>
        .expect("DSP fail");

    //  Test the display
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
    866e:	f003 f930 	bl	b8d2 <_ZN3app7display12test_display17h5d1f8edc1ef53359E>
    8672:	9004      	str	r0, [sp, #16]
    8674:	e7ff      	b.n	8676 <main+0x32>
    8676:	f24a 51bc 	movw	r1, #42428	; 0xa5bc
    867a:	f2c0 0101 	movt	r1, #1
    867e:	f24a 53cc 	movw	r3, #42444	; 0xa5cc
    8682:	f2c0 0301 	movt	r3, #1
    8686:	220d      	movs	r2, #13
    8688:	9804      	ldr	r0, [sp, #16]
    868a:	f000 f9b4 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    868e:	e7ff      	b.n	8690 <main+0x4c>
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8690:	f002 fa9c 	bl	abcc <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E>
    8694:	9003      	str	r0, [sp, #12]
    8696:	e7ff      	b.n	8698 <main+0x54>
    8698:	f24a 5180 	movw	r1, #42368	; 0xa580
    869c:	f2c0 0101 	movt	r1, #1
    86a0:	f24a 53dc 	movw	r3, #42460	; 0xa5dc
    86a4:	f2c0 0301 	movt	r3, #1
    86a8:	2208      	movs	r2, #8
    86aa:	9803      	ldr	r0, [sp, #12]
    86ac:	f000 f9a3 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86b0:	e7ff      	b.n	86b2 <main+0x6e>
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    86b2:	e7ff      	b.n	86b4 <main+0x70>
    86b4:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    86b6:	f000 f9ea 	bl	8a8e <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    86ba:	e7ff      	b.n	86bc <main+0x78>
    86bc:	f24a 5188 	movw	r1, #42376	; 0xa588
    86c0:	f2c0 0101 	movt	r1, #1
    86c4:	f24a 53ec 	movw	r3, #42476	; 0xa5ec
    86c8:	f2c0 0301 	movt	r3, #1
    86cc:	a806      	add	r0, sp, #24
    86ce:	2208      	movs	r2, #8
    86d0:	f002 fa52 	bl	ab78 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h999fe3470f07fb23E>
    86d4:	9002      	str	r0, [sp, #8]
    86d6:	e7ff      	b.n	86d8 <main+0x94>
        os::eventq_run(               //  Processing events...
    86d8:	9802      	ldr	r0, [sp, #8]
    86da:	f000 f9cf 	bl	8a7c <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86de:	9001      	str	r0, [sp, #4]
    86e0:	e7ff      	b.n	86e2 <main+0x9e>
    86e2:	f24a 5190 	movw	r1, #42384	; 0xa590
    86e6:	f2c0 0101 	movt	r1, #1
    86ea:	f24a 53fc 	movw	r3, #42492	; 0xa5fc
    86ee:	f2c0 0301 	movt	r3, #1
    86f2:	2208      	movs	r2, #8
    86f4:	9801      	ldr	r0, [sp, #4]
    86f6:	f000 f97e 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86fa:	e7ff      	b.n	86fc <main+0xb8>
    loop {                            //  Loop forever...
    86fc:	e7da      	b.n	86b4 <main+0x70>

000086fe <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86fe:	b08e      	sub	sp, #56	; 0x38
    8700:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    8702:	f24a 610c 	movw	r1, #42508	; 0xa60c
    8706:	f2c0 0101 	movt	r1, #1
    870a:	2206      	movs	r2, #6
    870c:	9007      	str	r0, [sp, #28]
    870e:	4608      	mov	r0, r1
    8710:	4611      	mov	r1, r2
    8712:	f000 fab8 	bl	8c86 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8716:	e7ff      	b.n	8718 <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    8718:	9807      	ldr	r0, [sp, #28]
    871a:	f00b faf8 	bl	13d0e <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    871e:	9008      	str	r0, [sp, #32]
    8720:	e7ff      	b.n	8722 <rust_begin_unwind+0x24>
    8722:	9808      	ldr	r0, [sp, #32]
    8724:	2800      	cmp	r0, #0
    8726:	d108      	bne.n	873a <rust_begin_unwind+0x3c>
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    872a:	f24a 6012 	movw	r0, #42514	; 0xa612
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2107      	movs	r1, #7
    8734:	f000 faa7 	bl	8c86 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e033      	b.n	87a2 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    873a:	9808      	ldr	r0, [sp, #32]
    873c:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    873e:	9006      	str	r0, [sp, #24]
    8740:	f00b fae8 	bl	13d14 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8744:	910a      	str	r1, [sp, #40]	; 0x28
    8746:	9009      	str	r0, [sp, #36]	; 0x24
    8748:	e7ff      	b.n	874a <rust_begin_unwind+0x4c>
        let line = location.line();
    874a:	9806      	ldr	r0, [sp, #24]
    874c:	f00b fae6 	bl	13d1c <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8750:	4601      	mov	r1, r0
    8752:	900d      	str	r0, [sp, #52]	; 0x34
    8754:	9105      	str	r1, [sp, #20]
    8756:	e7ff      	b.n	8758 <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    8758:	f24a 6019 	movw	r0, #42521	; 0xa619
    875c:	f2c0 0001 	movt	r0, #1
    8760:	2103      	movs	r1, #3
    8762:	f000 fa90 	bl	8c86 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8766:	e7ff      	b.n	8768 <rust_begin_unwind+0x6a>
    8768:	9809      	ldr	r0, [sp, #36]	; 0x24
    876a:	990a      	ldr	r1, [sp, #40]	; 0x28
    876c:	f000 fab2 	bl	8cd4 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8772:	f24a 601c 	movw	r0, #42524	; 0xa61c
    8776:	f2c0 0001 	movt	r0, #1
    877a:	2106      	movs	r1, #6
    877c:	f000 fa83 	bl	8c86 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8780:	e7ff      	b.n	8782 <rust_begin_unwind+0x84>
    8782:	9805      	ldr	r0, [sp, #20]
    8784:	f000 fabd 	bl	8d02 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    8788:	e7ff      	b.n	878a <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    878a:	f24a 6022 	movw	r0, #42530	; 0xa622
    878e:	f2c0 0001 	movt	r0, #1
    8792:	2101      	movs	r1, #1
    8794:	f000 fa77 	bl	8c86 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8798:	e7ff      	b.n	879a <rust_begin_unwind+0x9c>
    879a:	f000 faba 	bl	8d12 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    879e:	e7ff      	b.n	87a0 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    87a0:	e003      	b.n	87aa <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    87a2:	f000 fab6 	bl	8d12 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87a6:	e7ff      	b.n	87a8 <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    87aa:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    87ac:	e7ff      	b.n	87ae <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    87ae:	9807      	ldr	r0, [sp, #28]
    87b0:	f00b fab0 	bl	13d14 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    87b4:	9004      	str	r0, [sp, #16]
    87b6:	9103      	str	r1, [sp, #12]
    87b8:	e7ff      	b.n	87ba <rust_begin_unwind+0xbc>
    87ba:	9804      	ldr	r0, [sp, #16]
    87bc:	9903      	ldr	r1, [sp, #12]
    87be:	f002 f9d0 	bl	ab62 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17hd6f456243f579479E>
    87c2:	9002      	str	r0, [sp, #8]
    87c4:	e7ff      	b.n	87c6 <rust_begin_unwind+0xc8>
    87c6:	f24a 6124 	movw	r1, #42532	; 0xa624
    87ca:	f2c0 0101 	movt	r1, #1
    87ce:	9802      	ldr	r0, [sp, #8]
    87d0:	f003 fa23 	bl	bc1a <_ZN4core6option15Option$LT$T$GT$6unwrap17h4ef46bc50523a294E>
    87d4:	9001      	str	r0, [sp, #4]
    87d6:	e7ff      	b.n	87d8 <rust_begin_unwind+0xda>
    87d8:	9801      	ldr	r0, [sp, #4]
    87da:	6800      	ldr	r0, [r0, #0]
    87dc:	9901      	ldr	r1, [sp, #4]
    87de:	6849      	ldr	r1, [r1, #4]
    87e0:	f000 fa51 	bl	8c86 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87e4:	e7ff      	b.n	87e6 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87e6:	f24a 6022 	movw	r0, #42530	; 0xa622
    87ea:	f2c0 0001 	movt	r0, #1
    87ee:	2101      	movs	r1, #1
    87f0:	f000 fa49 	bl	8c86 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87f4:	e7ff      	b.n	87f6 <rust_begin_unwind+0xf8>
    87f6:	f000 fa8c 	bl	8d12 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87fa:	e7ff      	b.n	87fc <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87fc:	e7ff      	b.n	87fe <rust_begin_unwind+0x100>
    87fe:	e7fe      	b.n	87fe <rust_begin_unwind+0x100>

00008800 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    8800:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    8802:	f010 f91d 	bl	18a40 <rust_sysinit>
    8806:	e7ff      	b.n	8808 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    8808:	f000 fa83 	bl	8d12 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    880c:	e7ff      	b.n	880e <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    880e:	bd80      	pop	{r7, pc}

00008810 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    8810:	b580      	push	{r7, lr}
    8812:	b086      	sub	sp, #24
    8814:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    8816:	7801      	ldrb	r1, [r0, #0]
    8818:	07ca      	lsls	r2, r1, #31
    881a:	2a00      	cmp	r2, #0
    881c:	9000      	str	r0, [sp, #0]
    881e:	d006      	beq.n	882e <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    8820:	e7ff      	b.n	8822 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    8822:	9800      	ldr	r0, [sp, #0]
    8824:	6841      	ldr	r1, [r0, #4]
    8826:	9103      	str	r1, [sp, #12]
    8828:	9101      	str	r1, [sp, #4]
        match self.rep {
    882a:	e00c      	b.n	8846 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    882c:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    882e:	9800      	ldr	r0, [sp, #0]
    8830:	6841      	ldr	r1, [r0, #4]
    8832:	6882      	ldr	r2, [r0, #8]
    8834:	9104      	str	r1, [sp, #16]
    8836:	9205      	str	r2, [sp, #20]
    8838:	4608      	mov	r0, r1
    883a:	4611      	mov	r1, r2
    883c:	f003 ff7a 	bl	c734 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8840:	9001      	str	r0, [sp, #4]
    8842:	e7ff      	b.n	8844 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    8844:	e7ff      	b.n	8846 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    8846:	9801      	ldr	r0, [sp, #4]
    8848:	b006      	add	sp, #24
    884a:	bd80      	pop	{r7, pc}

0000884c <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    884c:	b5b0      	push	{r4, r5, r7, lr}
    884e:	b0b2      	sub	sp, #200	; 0xc8
    8850:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    8852:	7801      	ldrb	r1, [r0, #0]
    8854:	07ca      	lsls	r2, r1, #31
    8856:	2a00      	cmp	r2, #0
    8858:	900e      	str	r0, [sp, #56]	; 0x38
    885a:	d005      	beq.n	8868 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    885c:	e7ff      	b.n	885e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    885e:	980e      	ldr	r0, [sp, #56]	; 0x38
    8860:	6841      	ldr	r1, [r0, #4]
    8862:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    8864:	e096      	b.n	8994 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    8866:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    8868:	980e      	ldr	r0, [sp, #56]	; 0x38
    886a:	6841      	ldr	r1, [r0, #4]
    886c:	6882      	ldr	r2, [r0, #8]
    886e:	912b      	str	r1, [sp, #172]	; 0xac
    8870:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    8872:	4608      	mov	r0, r1
    8874:	4611      	mov	r1, r2
    8876:	f000 f99b 	bl	8bb0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    887a:	9011      	str	r0, [sp, #68]	; 0x44
    887c:	e7ff      	b.n	887e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    887e:	f24a 603c 	movw	r0, #42556	; 0xa63c
    8882:	f2c0 0001 	movt	r0, #1
    8886:	6800      	ldr	r0, [r0, #0]
    8888:	a911      	add	r1, sp, #68	; 0x44
    888a:	910f      	str	r1, [sp, #60]	; 0x3c
    888c:	9010      	str	r0, [sp, #64]	; 0x40
    888e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8890:	902d      	str	r0, [sp, #180]	; 0xb4
    8892:	9910      	ldr	r1, [sp, #64]	; 0x40
    8894:	912e      	str	r1, [sp, #184]	; 0xb8
    8896:	900d      	str	r0, [sp, #52]	; 0x34
    8898:	910c      	str	r1, [sp, #48]	; 0x30
    889a:	f000 fb13 	bl	8ec4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    889e:	900b      	str	r0, [sp, #44]	; 0x2c
    88a0:	e7ff      	b.n	88a2 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    88a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    88a4:	07c1      	lsls	r1, r0, #31
    88a6:	2900      	cmp	r1, #0
    88a8:	d001      	beq.n	88ae <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    88aa:	e7ff      	b.n	88ac <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    88ac:	e072      	b.n	8994 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    88ae:	f24a 6094 	movw	r0, #42644	; 0xa694
    88b2:	f2c0 0001 	movt	r0, #1
    88b6:	6801      	ldr	r1, [r0, #0]
    88b8:	980d      	ldr	r0, [sp, #52]	; 0x34
    88ba:	9021      	str	r0, [sp, #132]	; 0x84
    88bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    88be:	9222      	str	r2, [sp, #136]	; 0x88
    88c0:	f24a 63a8 	movw	r3, #42664	; 0xa6a8
    88c4:	f2c0 0301 	movt	r3, #1
    88c8:	681b      	ldr	r3, [r3, #0]
    88ca:	f24a 6cac 	movw	ip, #42668	; 0xa6ac
    88ce:	f2c0 0c01 	movt	ip, #1
    88d2:	f8dc c000 	ldr.w	ip, [ip]
    88d6:	46ee      	mov	lr, sp
    88d8:	2400      	movs	r4, #0
    88da:	f8ce 4000 	str.w	r4, [lr]
    88de:	a823      	add	r0, sp, #140	; 0x8c
    88e0:	2201      	movs	r2, #1
    88e2:	910a      	str	r1, [sp, #40]	; 0x28
    88e4:	4619      	mov	r1, r3
    88e6:	4663      	mov	r3, ip
    88e8:	f000 f856 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    88ec:	e7ff      	b.n	88ee <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    88ee:	a821      	add	r0, sp, #132	; 0x84
    88f0:	901e      	str	r0, [sp, #120]	; 0x78
    88f2:	a822      	add	r0, sp, #136	; 0x88
    88f4:	901f      	str	r0, [sp, #124]	; 0x7c
    88f6:	a823      	add	r0, sp, #140	; 0x8c
    88f8:	9020      	str	r0, [sp, #128]	; 0x80
    88fa:	981e      	ldr	r0, [sp, #120]	; 0x78
    88fc:	902f      	str	r0, [sp, #188]	; 0xbc
    88fe:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8900:	9130      	str	r1, [sp, #192]	; 0xc0
    8902:	9a20      	ldr	r2, [sp, #128]	; 0x80
    8904:	9231      	str	r2, [sp, #196]	; 0xc4
    8906:	f648 537d 	movw	r3, #36221	; 0x8d7d
    890a:	f2c0 0300 	movt	r3, #0
    890e:	9109      	str	r1, [sp, #36]	; 0x24
    8910:	4619      	mov	r1, r3
    8912:	9208      	str	r2, [sp, #32]
    8914:	f000 fb81 	bl	901a <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8918:	9007      	str	r0, [sp, #28]
    891a:	9106      	str	r1, [sp, #24]
    891c:	e7ff      	b.n	891e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    891e:	f648 517d 	movw	r1, #36221	; 0x8d7d
    8922:	f2c0 0100 	movt	r1, #0
    8926:	9809      	ldr	r0, [sp, #36]	; 0x24
    8928:	f000 fb77 	bl	901a <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    892c:	9005      	str	r0, [sp, #20]
    892e:	9104      	str	r1, [sp, #16]
    8930:	e7ff      	b.n	8932 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    8932:	f244 21ef 	movw	r1, #17135	; 0x42ef
    8936:	f2c0 0101 	movt	r1, #1
    893a:	9808      	ldr	r0, [sp, #32]
    893c:	f000 fb97 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8940:	9003      	str	r0, [sp, #12]
    8942:	9102      	str	r1, [sp, #8]
    8944:	e7ff      	b.n	8946 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    8946:	9807      	ldr	r0, [sp, #28]
    8948:	9018      	str	r0, [sp, #96]	; 0x60
    894a:	9906      	ldr	r1, [sp, #24]
    894c:	9119      	str	r1, [sp, #100]	; 0x64
    894e:	9a05      	ldr	r2, [sp, #20]
    8950:	921a      	str	r2, [sp, #104]	; 0x68
    8952:	9b04      	ldr	r3, [sp, #16]
    8954:	931b      	str	r3, [sp, #108]	; 0x6c
    8956:	f8dd c00c 	ldr.w	ip, [sp, #12]
    895a:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    895e:	f8dd e008 	ldr.w	lr, [sp, #8]
    8962:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    8966:	466c      	mov	r4, sp
    8968:	2503      	movs	r5, #3
    896a:	6025      	str	r5, [r4, #0]
    896c:	a812      	add	r0, sp, #72	; 0x48
    896e:	ab18      	add	r3, sp, #96	; 0x60
    8970:	990a      	ldr	r1, [sp, #40]	; 0x28
    8972:	462a      	mov	r2, r5
    8974:	f000 f810 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8978:	e7ff      	b.n	897a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    897a:	f24a 60c8 	movw	r0, #42696	; 0xa6c8
    897e:	f2c0 0001 	movt	r0, #1
    8982:	f00b f9c6 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8986:	9001      	str	r0, [sp, #4]
    8988:	e7ff      	b.n	898a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    898a:	a812      	add	r0, sp, #72	; 0x48
    898c:	9901      	ldr	r1, [sp, #4]
    898e:	f00b f9fd 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8992:	defe      	udf	#254	; 0xfe
    }
    8994:	b032      	add	sp, #200	; 0xc8
    8996:	bdb0      	pop	{r4, r5, r7, pc}

00008998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    8998:	b580      	push	{r7, lr}
    899a:	b086      	sub	sp, #24
    899c:	f8dd c020 	ldr.w	ip, [sp, #32]
    89a0:	9102      	str	r1, [sp, #8]
    89a2:	9203      	str	r2, [sp, #12]
    89a4:	9304      	str	r3, [sp, #16]
    89a6:	f8cd c014 	str.w	ip, [sp, #20]
    89aa:	f04f 0e00 	mov.w	lr, #0
    89ae:	f8cd e004 	str.w	lr, [sp, #4]
    89b2:	f8cd e000 	str.w	lr, [sp]
    89b6:	f8cd e000 	str.w	lr, [sp]
    89ba:	6001      	str	r1, [r0, #0]
    89bc:	6042      	str	r2, [r0, #4]
    89be:	9900      	ldr	r1, [sp, #0]
    89c0:	9a01      	ldr	r2, [sp, #4]
    89c2:	6081      	str	r1, [r0, #8]
    89c4:	60c2      	str	r2, [r0, #12]
    89c6:	6103      	str	r3, [r0, #16]
    89c8:	f8c0 c014 	str.w	ip, [r0, #20]
    89cc:	b006      	add	sp, #24
    89ce:	bd80      	pop	{r7, pc}

000089d0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    89d0:	b082      	sub	sp, #8
    89d2:	9001      	str	r0, [sp, #4]
    89d4:	7800      	ldrb	r0, [r0, #0]
    89d6:	07c0      	lsls	r0, r0, #31
    89d8:	2800      	cmp	r0, #0
    89da:	d004      	beq.n	89e6 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    89dc:	e7ff      	b.n	89de <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    89de:	2000      	movs	r0, #0
    89e0:	f88d 0003 	strb.w	r0, [sp, #3]
    89e4:	e003      	b.n	89ee <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    89e6:	2001      	movs	r0, #1
    89e8:	f88d 0003 	strb.w	r0, [sp, #3]
    89ec:	e7ff      	b.n	89ee <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    89ee:	f89d 0003 	ldrb.w	r0, [sp, #3]
    89f2:	b002      	add	sp, #8
    89f4:	4770      	bx	lr

000089f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    89f6:	b08a      	sub	sp, #40	; 0x28
    89f8:	9005      	str	r0, [sp, #20]
    89fa:	9107      	str	r1, [sp, #28]
    89fc:	9208      	str	r2, [sp, #32]
    89fe:	9805      	ldr	r0, [sp, #20]
    8a00:	f1b0 0c01 	subs.w	ip, r0, #1
    8a04:	bf18      	it	ne
    8a06:	f04f 0c01 	movne.w	ip, #1
    8a0a:	2801      	cmp	r0, #1
    8a0c:	9304      	str	r3, [sp, #16]
    8a0e:	9203      	str	r2, [sp, #12]
    8a10:	9102      	str	r1, [sp, #8]
    8a12:	d010      	beq.n	8a36 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    8a14:	e7ff      	b.n	8a16 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    8a16:	9805      	ldr	r0, [sp, #20]
    8a18:	9006      	str	r0, [sp, #24]
    8a1a:	4668      	mov	r0, sp
    8a1c:	9904      	ldr	r1, [sp, #16]
    8a1e:	6001      	str	r1, [r0, #0]
    8a20:	f24a 63d8 	movw	r3, #42712	; 0xa6d8
    8a24:	f2c0 0301 	movt	r3, #1
    8a28:	aa06      	add	r2, sp, #24
    8a2a:	9802      	ldr	r0, [sp, #8]
    8a2c:	9903      	ldr	r1, [sp, #12]
    8a2e:	f00b f949 	bl	13cc4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    8a32:	defe      	udf	#254	; 0xfe
    8a34:	defe      	udf	#254	; 0xfe
    8a36:	9805      	ldr	r0, [sp, #20]
    8a38:	2801      	cmp	r0, #1
    8a3a:	d102      	bne.n	8a42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    8a3c:	e7ff      	b.n	8a3e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    8a3e:	b00a      	add	sp, #40	; 0x28
    8a40:	4770      	bx	lr
    8a42:	e7fc      	b.n	8a3e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

00008a44 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    8a44:	b580      	push	{r7, lr}
    8a46:	b082      	sub	sp, #8
    8a48:	9001      	str	r0, [sp, #4]
    8a4a:	f7ff ffc1 	bl	89d0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    8a4e:	9000      	str	r0, [sp, #0]
    8a50:	e7ff      	b.n	8a52 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    8a52:	2001      	movs	r0, #1
    8a54:	9900      	ldr	r1, [sp, #0]
    8a56:	4388      	bics	r0, r1
    8a58:	b002      	add	sp, #8
    8a5a:	bd80      	pop	{r7, pc}

00008a5c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    8a5c:	b082      	sub	sp, #8
    8a5e:	9001      	str	r0, [sp, #4]
    8a60:	9000      	str	r0, [sp, #0]
    8a62:	9800      	ldr	r0, [sp, #0]
    8a64:	b002      	add	sp, #8
    8a66:	4770      	bx	lr

00008a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    8a68:	b081      	sub	sp, #4
    8a6a:	4601      	mov	r1, r0
    8a6c:	f88d 0003 	strb.w	r0, [sp, #3]
    8a70:	b001      	add	sp, #4
    8a72:	4770      	bx	lr

00008a74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    8a74:	b081      	sub	sp, #4
    8a76:	9000      	str	r0, [sp, #0]
    8a78:	b001      	add	sp, #4
    8a7a:	4770      	bx	lr

00008a7c <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8a7c:	b580      	push	{r7, lr}
    8a7e:	b082      	sub	sp, #8
    8a80:	9001      	str	r0, [sp, #4]
    8a82:	f00e fc27 	bl	172d4 <os_eventq_run>
    8a86:	e7ff      	b.n	8a88 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    8a88:	2001      	movs	r0, #1
    8a8a:	b002      	add	sp, #8
    8a8c:	bd80      	pop	{r7, pc}

00008a8e <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8a8e:	b580      	push	{r7, lr}
    8a90:	b084      	sub	sp, #16
    8a92:	9002      	str	r0, [sp, #8]
    8a94:	f00e fc4a 	bl	1732c <os_eventq_dflt_get>
    8a98:	4601      	mov	r1, r0
    8a9a:	9003      	str	r0, [sp, #12]
    8a9c:	9101      	str	r1, [sp, #4]
    8a9e:	e7ff      	b.n	8aa0 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    8aa0:	9801      	ldr	r0, [sp, #4]
    8aa2:	9902      	ldr	r1, [sp, #8]
    8aa4:	6048      	str	r0, [r1, #4]
    8aa6:	2200      	movs	r2, #0
    8aa8:	600a      	str	r2, [r1, #0]
    8aaa:	b004      	add	sp, #16
    8aac:	bd80      	pop	{r7, pc}

00008aae <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8aae:	b570      	push	{r4, r5, r6, lr}
    8ab0:	b09c      	sub	sp, #112	; 0x70
    8ab2:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    8ab6:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    8aba:	9c22      	ldr	r4, [sp, #136]	; 0x88
    8abc:	9d21      	ldr	r5, [sp, #132]	; 0x84
    8abe:	9e20      	ldr	r6, [sp, #128]	; 0x80
    8ac0:	9013      	str	r0, [sp, #76]	; 0x4c
    8ac2:	9114      	str	r1, [sp, #80]	; 0x50
    8ac4:	9215      	str	r2, [sp, #84]	; 0x54
    8ac6:	9316      	str	r3, [sp, #88]	; 0x58
    8ac8:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    8acc:	9418      	str	r4, [sp, #96]	; 0x60
    8ace:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    8ad2:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    8ad6:	9011      	str	r0, [sp, #68]	; 0x44
    8ad8:	4608      	mov	r0, r1
    8ada:	9310      	str	r3, [sp, #64]	; 0x40
    8adc:	920f      	str	r2, [sp, #60]	; 0x3c
    8ade:	910e      	str	r1, [sp, #56]	; 0x38
    8ae0:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8ae4:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    8ae8:	940b      	str	r4, [sp, #44]	; 0x2c
    8aea:	950a      	str	r5, [sp, #40]	; 0x28
    8aec:	9609      	str	r6, [sp, #36]	; 0x24
    8aee:	f7ff fead 	bl	884c <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    8af2:	e7ff      	b.n	8af4 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    8af4:	980e      	ldr	r0, [sp, #56]	; 0x38
    8af6:	f7ff fe8b 	bl	8810 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    8afa:	9008      	str	r0, [sp, #32]
    8afc:	e7ff      	b.n	8afe <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    8afe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8b00:	990c      	ldr	r1, [sp, #48]	; 0x30
    8b02:	f000 f88b 	bl	8c1c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    8b06:	9007      	str	r0, [sp, #28]
    8b08:	e7ff      	b.n	8b0a <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    8b0a:	980d      	ldr	r0, [sp, #52]	; 0x34
    8b0c:	b281      	uxth	r1, r0
    8b0e:	466a      	mov	r2, sp
    8b10:	60d1      	str	r1, [r2, #12]
    8b12:	9907      	ldr	r1, [sp, #28]
    8b14:	6091      	str	r1, [r2, #8]
    8b16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8b18:	6053      	str	r3, [r2, #4]
    8b1a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    8b1e:	fa5f fe8c 	uxtb.w	lr, ip
    8b22:	f8c2 e000 	str.w	lr, [r2]
    8b26:	9811      	ldr	r0, [sp, #68]	; 0x44
    8b28:	9908      	ldr	r1, [sp, #32]
    8b2a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8b2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8b2e:	f00f f99d 	bl	17e6c <os_task_init>
    8b32:	4601      	mov	r1, r0
    8b34:	901b      	str	r0, [sp, #108]	; 0x6c
    8b36:	9106      	str	r1, [sp, #24]
    8b38:	e7ff      	b.n	8b3a <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    8b3a:	9806      	ldr	r0, [sp, #24]
    8b3c:	2800      	cmp	r0, #0
    8b3e:	d005      	beq.n	8b4c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    8b40:	e7ff      	b.n	8b42 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    8b42:	9806      	ldr	r0, [sp, #24]
    8b44:	f003 fe84 	bl	c850 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    8b48:	9005      	str	r0, [sp, #20]
    8b4a:	e004      	b.n	8b56 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    8b4c:	2000      	movs	r0, #0
    8b4e:	9012      	str	r0, [sp, #72]	; 0x48
    8b50:	2001      	movs	r0, #1
    8b52:	9012      	str	r0, [sp, #72]	; 0x48
    8b54:	e002      	b.n	8b5c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8b56:	9805      	ldr	r0, [sp, #20]
    8b58:	9012      	str	r0, [sp, #72]	; 0x48
    8b5a:	e7ff      	b.n	8b5c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8b5c:	9812      	ldr	r0, [sp, #72]	; 0x48
    8b5e:	b01c      	add	sp, #112	; 0x70
    8b60:	bd70      	pop	{r4, r5, r6, pc}

00008b62 <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    8b62:	b081      	sub	sp, #4
    8b64:	9000      	str	r0, [sp, #0]
    8b66:	b001      	add	sp, #4
    8b68:	4770      	bx	lr

00008b6a <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    8b6a:	b081      	sub	sp, #4
    8b6c:	9000      	str	r0, [sp, #0]
    8b6e:	b001      	add	sp, #4
    8b70:	4770      	bx	lr

00008b72 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    8b72:	b580      	push	{r7, lr}
    8b74:	b084      	sub	sp, #16
    8b76:	9002      	str	r0, [sp, #8]
    8b78:	9103      	str	r1, [sp, #12]
    8b7a:	f000 f8cf 	bl	8d1c <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    8b7e:	9001      	str	r0, [sp, #4]
    8b80:	9100      	str	r1, [sp, #0]
    8b82:	e7ff      	b.n	8b84 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    8b84:	9801      	ldr	r0, [sp, #4]
    8b86:	9900      	ldr	r1, [sp, #0]
    8b88:	b004      	add	sp, #16
    8b8a:	bd80      	pop	{r7, pc}

00008b8c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    8b8c:	b580      	push	{r7, lr}
    8b8e:	b086      	sub	sp, #24
    8b90:	9003      	str	r0, [sp, #12]
    8b92:	9104      	str	r1, [sp, #16]
    8b94:	9205      	str	r2, [sp, #20]
    8b96:	9002      	str	r0, [sp, #8]
    8b98:	4610      	mov	r0, r2
    8b9a:	9a02      	ldr	r2, [sp, #8]
    8b9c:	9101      	str	r1, [sp, #4]
    8b9e:	4611      	mov	r1, r2
    8ba0:	9a01      	ldr	r2, [sp, #4]
    8ba2:	f000 f84d 	bl	8c40 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    8ba6:	9000      	str	r0, [sp, #0]
    8ba8:	e7ff      	b.n	8baa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    8baa:	9800      	ldr	r0, [sp, #0]
    8bac:	b006      	add	sp, #24
    8bae:	bd80      	pop	{r7, pc}

00008bb0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    8bb0:	b580      	push	{r7, lr}
    8bb2:	b08e      	sub	sp, #56	; 0x38
    8bb4:	9009      	str	r0, [sp, #36]	; 0x24
    8bb6:	910a      	str	r1, [sp, #40]	; 0x28
    8bb8:	9005      	str	r0, [sp, #20]
    8bba:	9104      	str	r1, [sp, #16]
    8bbc:	f003 fdb2 	bl	c724 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8bc0:	9003      	str	r0, [sp, #12]
    8bc2:	e7ff      	b.n	8bc4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    8bc4:	2101      	movs	r1, #1
    8bc6:	9803      	ldr	r0, [sp, #12]
    8bc8:	f000 fa66 	bl	9098 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    8bcc:	9002      	str	r0, [sp, #8]
    8bce:	9101      	str	r1, [sp, #4]
    8bd0:	e7ff      	b.n	8bd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    8bd2:	9802      	ldr	r0, [sp, #8]
    8bd4:	9901      	ldr	r1, [sp, #4]
    8bd6:	f000 f968 	bl	8eaa <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    8bda:	9108      	str	r1, [sp, #32]
    8bdc:	9007      	str	r0, [sp, #28]
    8bde:	e7ff      	b.n	8be0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    8be0:	9807      	ldr	r0, [sp, #28]
    8be2:	2800      	cmp	r0, #0
    8be4:	d001      	beq.n	8bea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    8be6:	e7ff      	b.n	8be8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    8be8:	e00c      	b.n	8c04 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    8bea:	9808      	ldr	r0, [sp, #32]
    8bec:	900c      	str	r0, [sp, #48]	; 0x30
    8bee:	900d      	str	r0, [sp, #52]	; 0x34
    8bf0:	9905      	ldr	r1, [sp, #20]
    8bf2:	9000      	str	r0, [sp, #0]
    8bf4:	4608      	mov	r0, r1
    8bf6:	9904      	ldr	r1, [sp, #16]
    8bf8:	9a00      	ldr	r2, [sp, #0]
    8bfa:	f7ff ffc7 	bl	8b8c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    8bfe:	9006      	str	r0, [sp, #24]
    8c00:	e00b      	b.n	8c1a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    8c02:	defe      	udf	#254	; 0xfe
    8c04:	f003 f8de 	bl	bdc4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    8c08:	e002      	b.n	8c10 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    8c0a:	9806      	ldr	r0, [sp, #24]
    8c0c:	b00e      	add	sp, #56	; 0x38
    8c0e:	bd80      	pop	{r7, pc}
    8c10:	f000 f945 	bl	8e9e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    8c14:	9006      	str	r0, [sp, #24]
    8c16:	e7ff      	b.n	8c18 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    8c18:	e7f7      	b.n	8c0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    8c1a:	e7f6      	b.n	8c0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

00008c1c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    8c1c:	b082      	sub	sp, #8
    8c1e:	9000      	str	r0, [sp, #0]
    8c20:	9101      	str	r1, [sp, #4]
    8c22:	b002      	add	sp, #8
    8c24:	4770      	bx	lr

00008c26 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    8c26:	b580      	push	{r7, lr}
    8c28:	b084      	sub	sp, #16
    8c2a:	9002      	str	r0, [sp, #8]
    8c2c:	9103      	str	r1, [sp, #12]
    8c2e:	f003 f886 	bl	bd3e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    8c32:	9001      	str	r0, [sp, #4]
    8c34:	9100      	str	r1, [sp, #0]
    8c36:	e7ff      	b.n	8c38 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    8c38:	9801      	ldr	r0, [sp, #4]
    8c3a:	9900      	ldr	r1, [sp, #0]
    8c3c:	b004      	add	sp, #16
    8c3e:	bd80      	pop	{r7, pc}

00008c40 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    8c40:	b580      	push	{r7, lr}
    8c42:	b08a      	sub	sp, #40	; 0x28
    8c44:	9007      	str	r0, [sp, #28]
    8c46:	9108      	str	r1, [sp, #32]
    8c48:	9209      	str	r2, [sp, #36]	; 0x24
    8c4a:	9005      	str	r0, [sp, #20]
    8c4c:	4608      	mov	r0, r1
    8c4e:	9104      	str	r1, [sp, #16]
    8c50:	4611      	mov	r1, r2
    8c52:	9203      	str	r2, [sp, #12]
    8c54:	f003 fd66 	bl	c724 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8c58:	9002      	str	r0, [sp, #8]
    8c5a:	e7ff      	b.n	8c5c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    8c5c:	9805      	ldr	r0, [sp, #20]
    8c5e:	9902      	ldr	r1, [sp, #8]
    8c60:	4288      	cmp	r0, r1
    8c62:	d303      	bcc.n	8c6c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    8c64:	e7ff      	b.n	8c66 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    8c66:	2000      	movs	r0, #0
    8c68:	9006      	str	r0, [sp, #24]
    8c6a:	e009      	b.n	8c80 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8c6c:	9805      	ldr	r0, [sp, #20]
    8c6e:	9904      	ldr	r1, [sp, #16]
    8c70:	9a03      	ldr	r2, [sp, #12]
    8c72:	f003 fd83 	bl	c77c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    8c76:	9001      	str	r0, [sp, #4]
    8c78:	e7ff      	b.n	8c7a <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    8c7a:	9801      	ldr	r0, [sp, #4]
    8c7c:	9006      	str	r0, [sp, #24]
    8c7e:	e7ff      	b.n	8c80 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8c80:	9806      	ldr	r0, [sp, #24]
    8c82:	b00a      	add	sp, #40	; 0x28
    8c84:	bd80      	pop	{r7, pc}

00008c86 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    8c86:	b580      	push	{r7, lr}
    8c88:	b08a      	sub	sp, #40	; 0x28
    8c8a:	9004      	str	r0, [sp, #16]
    8c8c:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    8c8e:	9003      	str	r0, [sp, #12]
    8c90:	9102      	str	r1, [sp, #8]
    8c92:	f000 f86e 	bl	8d72 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    8c96:	4601      	mov	r1, r0
    8c98:	9006      	str	r0, [sp, #24]
    8c9a:	9101      	str	r1, [sp, #4]
    8c9c:	e7ff      	b.n	8c9e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    8c9e:	9803      	ldr	r0, [sp, #12]
    8ca0:	9902      	ldr	r1, [sp, #8]
    8ca2:	f000 f850 	bl	8d46 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    8ca6:	9000      	str	r0, [sp, #0]
    8ca8:	e7ff      	b.n	8caa <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    8caa:	9800      	ldr	r0, [sp, #0]
    8cac:	9007      	str	r0, [sp, #28]
    8cae:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    8cb0:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    8cb2:	4608      	mov	r0, r1
    8cb4:	f000 f809 	bl	8cca <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    8cb8:	9009      	str	r0, [sp, #36]	; 0x24
    8cba:	e7ff      	b.n	8cbc <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    8cbc:	9801      	ldr	r0, [sp, #4]
    8cbe:	9900      	ldr	r1, [sp, #0]
    8cc0:	f00c ffc6 	bl	15c50 <console_buffer>
    8cc4:	e7ff      	b.n	8cc6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    8cc6:	b00a      	add	sp, #40	; 0x28
    8cc8:	bd80      	pop	{r7, pc}

00008cca <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    8cca:	b081      	sub	sp, #4
    8ccc:	9000      	str	r0, [sp, #0]
    8cce:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    8cd0:	b001      	add	sp, #4
    8cd2:	4770      	bx	lr

00008cd4 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    8cd4:	b580      	push	{r7, lr}
    8cd6:	b086      	sub	sp, #24
    8cd8:	9004      	str	r0, [sp, #16]
    8cda:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    8cdc:	9003      	str	r0, [sp, #12]
    8cde:	9102      	str	r1, [sp, #8]
    8ce0:	f000 f847 	bl	8d72 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    8ce4:	9001      	str	r0, [sp, #4]
    8ce6:	e7ff      	b.n	8ce8 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    8ce8:	9803      	ldr	r0, [sp, #12]
    8cea:	9902      	ldr	r1, [sp, #8]
    8cec:	f000 f82b 	bl	8d46 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    8cf0:	9000      	str	r0, [sp, #0]
    8cf2:	e7ff      	b.n	8cf4 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    8cf4:	9801      	ldr	r0, [sp, #4]
    8cf6:	9900      	ldr	r1, [sp, #0]
    8cf8:	f00c ffaa 	bl	15c50 <console_buffer>
    8cfc:	e7ff      	b.n	8cfe <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    8cfe:	b006      	add	sp, #24
    8d00:	bd80      	pop	{r7, pc}

00008d02 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    8d02:	b580      	push	{r7, lr}
    8d04:	b082      	sub	sp, #8
    8d06:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    8d08:	f00d f812 	bl	15d30 <console_printint>
    8d0c:	e7ff      	b.n	8d0e <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    8d0e:	b002      	add	sp, #8
    8d10:	bd80      	pop	{r7, pc}

00008d12 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    8d12:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    8d14:	f00c ff74 	bl	15c00 <console_flush>
    8d18:	e7ff      	b.n	8d1a <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    8d1a:	bd80      	pop	{r7, pc}

00008d1c <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    8d1c:	b086      	sub	sp, #24
    8d1e:	9004      	str	r0, [sp, #16]
    8d20:	9105      	str	r1, [sp, #20]
    8d22:	9002      	str	r0, [sp, #8]
    8d24:	9103      	str	r1, [sp, #12]
    8d26:	9802      	ldr	r0, [sp, #8]
    8d28:	9903      	ldr	r1, [sp, #12]
    8d2a:	9000      	str	r0, [sp, #0]
    8d2c:	9101      	str	r1, [sp, #4]
    8d2e:	9800      	ldr	r0, [sp, #0]
    8d30:	9901      	ldr	r1, [sp, #4]
    8d32:	b006      	add	sp, #24
    8d34:	4770      	bx	lr

00008d36 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    8d36:	b082      	sub	sp, #8
    8d38:	460a      	mov	r2, r1
    8d3a:	9000      	str	r0, [sp, #0]
    8d3c:	f88d 1007 	strb.w	r1, [sp, #7]
    8d40:	7001      	strb	r1, [r0, #0]
    8d42:	b002      	add	sp, #8
    8d44:	4770      	bx	lr

00008d46 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    8d46:	b580      	push	{r7, lr}
    8d48:	b08a      	sub	sp, #40	; 0x28
    8d4a:	9004      	str	r0, [sp, #16]
    8d4c:	9105      	str	r1, [sp, #20]
    8d4e:	9008      	str	r0, [sp, #32]
    8d50:	9109      	str	r1, [sp, #36]	; 0x24
    8d52:	9006      	str	r0, [sp, #24]
    8d54:	9107      	str	r1, [sp, #28]
    8d56:	9806      	ldr	r0, [sp, #24]
    8d58:	9907      	ldr	r1, [sp, #28]
    8d5a:	9003      	str	r0, [sp, #12]
    8d5c:	9102      	str	r1, [sp, #8]
    8d5e:	e7ff      	b.n	8d60 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    8d60:	9803      	ldr	r0, [sp, #12]
    8d62:	9902      	ldr	r1, [sp, #8]
    8d64:	f003 fcde 	bl	c724 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8d68:	9001      	str	r0, [sp, #4]
    8d6a:	e7ff      	b.n	8d6c <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    8d6c:	9801      	ldr	r0, [sp, #4]
    8d6e:	b00a      	add	sp, #40	; 0x28
    8d70:	bd80      	pop	{r7, pc}

00008d72 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    8d72:	b082      	sub	sp, #8
    8d74:	9000      	str	r0, [sp, #0]
    8d76:	9101      	str	r1, [sp, #4]
    8d78:	b002      	add	sp, #8
    8d7a:	4770      	bx	lr

00008d7c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    8d7c:	b580      	push	{r7, lr}
    8d7e:	b084      	sub	sp, #16
    8d80:	9002      	str	r0, [sp, #8]
    8d82:	9103      	str	r1, [sp, #12]
    8d84:	6800      	ldr	r0, [r0, #0]
    8d86:	f000 f845 	bl	8e14 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    8d8a:	9001      	str	r0, [sp, #4]
    8d8c:	e7ff      	b.n	8d8e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    8d8e:	9801      	ldr	r0, [sp, #4]
    8d90:	f000 0001 	and.w	r0, r0, #1
    8d94:	b004      	add	sp, #16
    8d96:	bd80      	pop	{r7, pc}

00008d98 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    8d98:	b087      	sub	sp, #28
    8d9a:	9000      	str	r0, [sp, #0]
    8d9c:	9101      	str	r1, [sp, #4]
    8d9e:	2000      	movs	r0, #0
    8da0:	f88d 0013 	strb.w	r0, [sp, #19]
    8da4:	f88d 0012 	strb.w	r0, [sp, #18]
    8da8:	2001      	movs	r0, #1
    8daa:	f88d 0013 	strb.w	r0, [sp, #19]
    8dae:	f88d 0012 	strb.w	r0, [sp, #18]
    8db2:	9800      	ldr	r0, [sp, #0]
    8db4:	2800      	cmp	r0, #0
    8db6:	d001      	beq.n	8dbc <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    8db8:	e7ff      	b.n	8dba <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    8dba:	e006      	b.n	8dca <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    8dbc:	2000      	movs	r0, #0
    8dbe:	f88d 0012 	strb.w	r0, [sp, #18]
    8dc2:	2001      	movs	r0, #1
    8dc4:	9002      	str	r0, [sp, #8]
    8dc6:	e008      	b.n	8dda <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    8dc8:	defe      	udf	#254	; 0xfe
    8dca:	2000      	movs	r0, #0
    8dcc:	f88d 0013 	strb.w	r0, [sp, #19]
    8dd0:	9901      	ldr	r1, [sp, #4]
    8dd2:	9106      	str	r1, [sp, #24]
    8dd4:	9103      	str	r1, [sp, #12]
    8dd6:	9002      	str	r0, [sp, #8]
    8dd8:	e7ff      	b.n	8dda <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    8dda:	f89d 0012 	ldrb.w	r0, [sp, #18]
    8dde:	07c0      	lsls	r0, r0, #31
    8de0:	2800      	cmp	r0, #0
    8de2:	d104      	bne.n	8dee <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    8de4:	e7ff      	b.n	8de6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    8de6:	9800      	ldr	r0, [sp, #0]
    8de8:	2801      	cmp	r0, #1
    8dea:	d008      	beq.n	8dfe <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    8dec:	e011      	b.n	8e12 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    8dee:	2000      	movs	r0, #0
    8df0:	f88d 0012 	strb.w	r0, [sp, #18]
    8df4:	e7f7      	b.n	8de6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    8df6:	9802      	ldr	r0, [sp, #8]
    8df8:	9903      	ldr	r1, [sp, #12]
    8dfa:	b007      	add	sp, #28
    8dfc:	4770      	bx	lr
    8dfe:	f89d 0013 	ldrb.w	r0, [sp, #19]
    8e02:	07c0      	lsls	r0, r0, #31
    8e04:	2800      	cmp	r0, #0
    8e06:	d0f6      	beq.n	8df6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    8e08:	e7ff      	b.n	8e0a <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    8e0a:	2000      	movs	r0, #0
    8e0c:	f88d 0013 	strb.w	r0, [sp, #19]
    8e10:	e7f1      	b.n	8df6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    8e12:	e7f0      	b.n	8df6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

00008e14 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    8e14:	b580      	push	{r7, lr}
    8e16:	b08e      	sub	sp, #56	; 0x38
    8e18:	900b      	str	r0, [sp, #44]	; 0x2c
    8e1a:	910c      	str	r1, [sp, #48]	; 0x30
    8e1c:	9003      	str	r0, [sp, #12]
    8e1e:	9803      	ldr	r0, [sp, #12]
    8e20:	6800      	ldr	r0, [r0, #0]
    8e22:	2800      	cmp	r0, #0
    8e24:	4602      	mov	r2, r0
    8e26:	bf18      	it	ne
    8e28:	2201      	movne	r2, #1
    8e2a:	2800      	cmp	r0, #0
    8e2c:	9101      	str	r1, [sp, #4]
    8e2e:	d00f      	beq.n	8e50 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    8e30:	e7ff      	b.n	8e32 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    8e32:	9803      	ldr	r0, [sp, #12]
    8e34:	900d      	str	r0, [sp, #52]	; 0x34
    8e36:	f24a 62e8 	movw	r2, #42728	; 0xa6e8
    8e3a:	f2c0 0201 	movt	r2, #1
    8e3e:	a907      	add	r1, sp, #28
    8e40:	2304      	movs	r3, #4
    8e42:	9000      	str	r0, [sp, #0]
    8e44:	4608      	mov	r0, r1
    8e46:	9901      	ldr	r1, [sp, #4]
    8e48:	f00b fe13 	bl	14a72 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    8e4c:	e011      	b.n	8e72 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    8e4e:	defe      	udf	#254	; 0xfe
    8e50:	f24a 62ec 	movw	r2, #42732	; 0xa6ec
    8e54:	f2c0 0201 	movt	r2, #1
    8e58:	a804      	add	r0, sp, #16
    8e5a:	2304      	movs	r3, #4
    8e5c:	9901      	ldr	r1, [sp, #4]
    8e5e:	f00b fe08 	bl	14a72 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    8e62:	e7ff      	b.n	8e64 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    8e64:	a804      	add	r0, sp, #16
    8e66:	f00b f921 	bl	140ac <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    8e6a:	f88d 000b 	strb.w	r0, [sp, #11]
    8e6e:	e7ff      	b.n	8e70 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    8e70:	e011      	b.n	8e96 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    8e72:	9800      	ldr	r0, [sp, #0]
    8e74:	900a      	str	r0, [sp, #40]	; 0x28
    8e76:	f24a 62f0 	movw	r2, #42736	; 0xa6f0
    8e7a:	f2c0 0201 	movt	r2, #1
    8e7e:	a807      	add	r0, sp, #28
    8e80:	a90a      	add	r1, sp, #40	; 0x28
    8e82:	f00b f8aa 	bl	13fda <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    8e86:	e7ff      	b.n	8e88 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    8e88:	a807      	add	r0, sp, #28
    8e8a:	f00b f90f 	bl	140ac <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    8e8e:	f88d 000b 	strb.w	r0, [sp, #11]
    8e92:	e7ff      	b.n	8e94 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    8e94:	e7ff      	b.n	8e96 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    8e96:	f89d 000b 	ldrb.w	r0, [sp, #11]
    8e9a:	b00e      	add	sp, #56	; 0x38
    8e9c:	bd80      	pop	{r7, pc}

00008e9e <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    8e9e:	b082      	sub	sp, #8
    8ea0:	2000      	movs	r0, #0
    8ea2:	9000      	str	r0, [sp, #0]
    8ea4:	9800      	ldr	r0, [sp, #0]
    8ea6:	b002      	add	sp, #8
    8ea8:	4770      	bx	lr

00008eaa <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    8eaa:	b580      	push	{r7, lr}
    8eac:	b084      	sub	sp, #16
    8eae:	9002      	str	r0, [sp, #8]
    8eb0:	9103      	str	r1, [sp, #12]
    8eb2:	f7ff ff71 	bl	8d98 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    8eb6:	9001      	str	r0, [sp, #4]
    8eb8:	9100      	str	r1, [sp, #0]
    8eba:	e7ff      	b.n	8ebc <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    8ebc:	9801      	ldr	r0, [sp, #4]
    8ebe:	9900      	ldr	r1, [sp, #0]
    8ec0:	b004      	add	sp, #16
    8ec2:	bd80      	pop	{r7, pc}

00008ec4 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    8ec4:	b580      	push	{r7, lr}
    8ec6:	b094      	sub	sp, #80	; 0x50
    8ec8:	9008      	str	r0, [sp, #32]
    8eca:	9109      	str	r1, [sp, #36]	; 0x24
    8ecc:	6802      	ldr	r2, [r0, #0]
    8ece:	2a00      	cmp	r2, #0
    8ed0:	bf18      	it	ne
    8ed2:	2201      	movne	r2, #1
    8ed4:	f04f 0300 	mov.w	r3, #0
    8ed8:	930b      	str	r3, [sp, #44]	; 0x2c
    8eda:	920a      	str	r2, [sp, #40]	; 0x28
    8edc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    8ee0:	9104      	str	r1, [sp, #16]
    8ee2:	9003      	str	r0, [sp, #12]
    8ee4:	9202      	str	r2, [sp, #8]
    8ee6:	e7ff      	b.n	8ee8 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    8ee8:	9802      	ldr	r0, [sp, #8]
    8eea:	9902      	ldr	r1, [sp, #8]
    8eec:	910d      	str	r1, [sp, #52]	; 0x34
    8eee:	9a04      	ldr	r2, [sp, #16]
    8ef0:	6813      	ldr	r3, [r2, #0]
    8ef2:	2b00      	cmp	r3, #0
    8ef4:	bf18      	it	ne
    8ef6:	2301      	movne	r3, #1
    8ef8:	f04f 0c00 	mov.w	ip, #0
    8efc:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    8f00:	930e      	str	r3, [sp, #56]	; 0x38
    8f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8f04:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    8f08:	9001      	str	r0, [sp, #4]
    8f0a:	9300      	str	r3, [sp, #0]
    8f0c:	e7ff      	b.n	8f0e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    8f0e:	9800      	ldr	r0, [sp, #0]
    8f10:	9011      	str	r0, [sp, #68]	; 0x44
    8f12:	9901      	ldr	r1, [sp, #4]
    8f14:	4281      	cmp	r1, r0
    8f16:	d104      	bne.n	8f22 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    8f18:	e7ff      	b.n	8f1a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    8f1a:	2001      	movs	r0, #1
    8f1c:	f88d 0017 	strb.w	r0, [sp, #23]
    8f20:	e003      	b.n	8f2a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    8f22:	2000      	movs	r0, #0
    8f24:	f88d 0017 	strb.w	r0, [sp, #23]
    8f28:	e7ff      	b.n	8f2a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    8f2a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    8f2e:	07c0      	lsls	r0, r0, #31
    8f30:	2800      	cmp	r0, #0
    8f32:	d104      	bne.n	8f3e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    8f34:	e7ff      	b.n	8f36 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    8f36:	2000      	movs	r0, #0
    8f38:	f88d 0016 	strb.w	r0, [sp, #22]
    8f3c:	e01c      	b.n	8f78 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    8f3e:	9803      	ldr	r0, [sp, #12]
    8f40:	9006      	str	r0, [sp, #24]
    8f42:	9904      	ldr	r1, [sp, #16]
    8f44:	9107      	str	r1, [sp, #28]
    8f46:	9a06      	ldr	r2, [sp, #24]
    8f48:	6812      	ldr	r2, [r2, #0]
    8f4a:	2a00      	cmp	r2, #0
    8f4c:	d104      	bne.n	8f58 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    8f4e:	e7ff      	b.n	8f50 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    8f50:	2001      	movs	r0, #1
    8f52:	f88d 0016 	strb.w	r0, [sp, #22]
    8f56:	e00e      	b.n	8f76 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    8f58:	9807      	ldr	r0, [sp, #28]
    8f5a:	6800      	ldr	r0, [r0, #0]
    8f5c:	2800      	cmp	r0, #0
    8f5e:	d0f7      	beq.n	8f50 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    8f60:	e7ff      	b.n	8f62 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    8f62:	9806      	ldr	r0, [sp, #24]
    8f64:	9012      	str	r0, [sp, #72]	; 0x48
    8f66:	9907      	ldr	r1, [sp, #28]
    8f68:	9113      	str	r1, [sp, #76]	; 0x4c
    8f6a:	f003 fd8b 	bl	ca84 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    8f6e:	f88d 0016 	strb.w	r0, [sp, #22]
    8f72:	e7ff      	b.n	8f74 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    8f74:	e7ff      	b.n	8f76 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    8f76:	e7ff      	b.n	8f78 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    8f78:	f89d 0016 	ldrb.w	r0, [sp, #22]
    8f7c:	b014      	add	sp, #80	; 0x50
    8f7e:	bd80      	pop	{r7, pc}

00008f80 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    8f80:	b580      	push	{r7, lr}
    8f82:	b084      	sub	sp, #16
    8f84:	9002      	str	r0, [sp, #8]
    8f86:	9103      	str	r1, [sp, #12]
    8f88:	6800      	ldr	r0, [r0, #0]
    8f8a:	f003 fd0d 	bl	c9a8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    8f8e:	9001      	str	r0, [sp, #4]
    8f90:	e7ff      	b.n	8f92 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    8f92:	9801      	ldr	r0, [sp, #4]
    8f94:	f000 0001 	and.w	r0, r0, #1
    8f98:	b004      	add	sp, #16
    8f9a:	bd80      	pop	{r7, pc}

00008f9c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    8f9c:	b580      	push	{r7, lr}
    8f9e:	b084      	sub	sp, #16
    8fa0:	9002      	str	r0, [sp, #8]
    8fa2:	9103      	str	r1, [sp, #12]
    8fa4:	6800      	ldr	r0, [r0, #0]
    8fa6:	f003 fcc8 	bl	c93a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    8faa:	9001      	str	r0, [sp, #4]
    8fac:	e7ff      	b.n	8fae <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    8fae:	9801      	ldr	r0, [sp, #4]
    8fb0:	f000 0001 	and.w	r0, r0, #1
    8fb4:	b004      	add	sp, #16
    8fb6:	bd80      	pop	{r7, pc}

00008fb8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    8fb8:	b580      	push	{r7, lr}
    8fba:	b084      	sub	sp, #16
    8fbc:	9002      	str	r0, [sp, #8]
    8fbe:	9103      	str	r1, [sp, #12]
    8fc0:	6800      	ldr	r0, [r0, #0]
    8fc2:	f7ff ffeb 	bl	8f9c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    8fc6:	9001      	str	r0, [sp, #4]
    8fc8:	e7ff      	b.n	8fca <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    8fca:	9801      	ldr	r0, [sp, #4]
    8fcc:	f000 0001 	and.w	r0, r0, #1
    8fd0:	b004      	add	sp, #16
    8fd2:	bd80      	pop	{r7, pc}

00008fd4 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    8fd4:	b580      	push	{r7, lr}
    8fd6:	b084      	sub	sp, #16
    8fd8:	9002      	str	r0, [sp, #8]
    8fda:	9103      	str	r1, [sp, #12]
    8fdc:	6800      	ldr	r0, [r0, #0]
    8fde:	f003 fd1a 	bl	ca16 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
    8fe2:	9001      	str	r0, [sp, #4]
    8fe4:	e7ff      	b.n	8fe6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
    8fe6:	9801      	ldr	r0, [sp, #4]
    8fe8:	f000 0001 	and.w	r0, r0, #1
    8fec:	b004      	add	sp, #16
    8fee:	bd80      	pop	{r7, pc}

00008ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    8ff0:	b089      	sub	sp, #36	; 0x24
    8ff2:	9005      	str	r0, [sp, #20]
    8ff4:	9106      	str	r1, [sp, #24]
    8ff6:	9107      	str	r1, [sp, #28]
    8ff8:	9907      	ldr	r1, [sp, #28]
    8ffa:	9002      	str	r0, [sp, #8]
    8ffc:	9101      	str	r1, [sp, #4]
    8ffe:	e7ff      	b.n	9000 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    9000:	9802      	ldr	r0, [sp, #8]
    9002:	9008      	str	r0, [sp, #32]
    9004:	9908      	ldr	r1, [sp, #32]
    9006:	9100      	str	r1, [sp, #0]
    9008:	e7ff      	b.n	900a <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    900a:	9800      	ldr	r0, [sp, #0]
    900c:	9003      	str	r0, [sp, #12]
    900e:	9901      	ldr	r1, [sp, #4]
    9010:	9104      	str	r1, [sp, #16]
    9012:	9803      	ldr	r0, [sp, #12]
    9014:	9904      	ldr	r1, [sp, #16]
    9016:	b009      	add	sp, #36	; 0x24
    9018:	4770      	bx	lr

0000901a <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    901a:	b089      	sub	sp, #36	; 0x24
    901c:	9005      	str	r0, [sp, #20]
    901e:	9106      	str	r1, [sp, #24]
    9020:	9107      	str	r1, [sp, #28]
    9022:	9907      	ldr	r1, [sp, #28]
    9024:	9002      	str	r0, [sp, #8]
    9026:	9101      	str	r1, [sp, #4]
    9028:	e7ff      	b.n	902a <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    902a:	9802      	ldr	r0, [sp, #8]
    902c:	9008      	str	r0, [sp, #32]
    902e:	9908      	ldr	r1, [sp, #32]
    9030:	9100      	str	r1, [sp, #0]
    9032:	e7ff      	b.n	9034 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    9034:	9800      	ldr	r0, [sp, #0]
    9036:	9003      	str	r0, [sp, #12]
    9038:	9901      	ldr	r1, [sp, #4]
    903a:	9104      	str	r1, [sp, #16]
    903c:	9803      	ldr	r0, [sp, #12]
    903e:	9904      	ldr	r1, [sp, #16]
    9040:	b009      	add	sp, #36	; 0x24
    9042:	4770      	bx	lr

00009044 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    9044:	b089      	sub	sp, #36	; 0x24
    9046:	9005      	str	r0, [sp, #20]
    9048:	9106      	str	r1, [sp, #24]
    904a:	9107      	str	r1, [sp, #28]
    904c:	9907      	ldr	r1, [sp, #28]
    904e:	9002      	str	r0, [sp, #8]
    9050:	9101      	str	r1, [sp, #4]
    9052:	e7ff      	b.n	9054 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    9054:	9802      	ldr	r0, [sp, #8]
    9056:	9008      	str	r0, [sp, #32]
    9058:	9908      	ldr	r1, [sp, #32]
    905a:	9100      	str	r1, [sp, #0]
    905c:	e7ff      	b.n	905e <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    905e:	9800      	ldr	r0, [sp, #0]
    9060:	9003      	str	r0, [sp, #12]
    9062:	9901      	ldr	r1, [sp, #4]
    9064:	9104      	str	r1, [sp, #16]
    9066:	9803      	ldr	r0, [sp, #12]
    9068:	9904      	ldr	r1, [sp, #16]
    906a:	b009      	add	sp, #36	; 0x24
    906c:	4770      	bx	lr

0000906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    906e:	b089      	sub	sp, #36	; 0x24
    9070:	9005      	str	r0, [sp, #20]
    9072:	9106      	str	r1, [sp, #24]
    9074:	9107      	str	r1, [sp, #28]
    9076:	9907      	ldr	r1, [sp, #28]
    9078:	9002      	str	r0, [sp, #8]
    907a:	9101      	str	r1, [sp, #4]
    907c:	e7ff      	b.n	907e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    907e:	9802      	ldr	r0, [sp, #8]
    9080:	9008      	str	r0, [sp, #32]
    9082:	9908      	ldr	r1, [sp, #32]
    9084:	9100      	str	r1, [sp, #0]
    9086:	e7ff      	b.n	9088 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    9088:	9800      	ldr	r0, [sp, #0]
    908a:	9003      	str	r0, [sp, #12]
    908c:	9901      	ldr	r1, [sp, #4]
    908e:	9104      	str	r1, [sp, #16]
    9090:	9803      	ldr	r0, [sp, #12]
    9092:	9904      	ldr	r1, [sp, #16]
    9094:	b009      	add	sp, #36	; 0x24
    9096:	4770      	bx	lr

00009098 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    9098:	b580      	push	{r7, lr}
    909a:	b088      	sub	sp, #32
    909c:	9004      	str	r0, [sp, #16]
    909e:	9105      	str	r1, [sp, #20]
    90a0:	f000 f819 	bl	90d6 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    90a4:	9001      	str	r0, [sp, #4]
    90a6:	9100      	str	r1, [sp, #0]
    90a8:	e7ff      	b.n	90aa <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    90aa:	9801      	ldr	r0, [sp, #4]
    90ac:	9006      	str	r0, [sp, #24]
    90ae:	9900      	ldr	r1, [sp, #0]
    90b0:	f001 0201 	and.w	r2, r1, #1
    90b4:	f88d 201f 	strb.w	r2, [sp, #31]
    90b8:	2a00      	cmp	r2, #0
    90ba:	d105      	bne.n	90c8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    90bc:	e7ff      	b.n	90be <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    90be:	9801      	ldr	r0, [sp, #4]
    90c0:	9003      	str	r0, [sp, #12]
    90c2:	2101      	movs	r1, #1
    90c4:	9102      	str	r1, [sp, #8]
    90c6:	e002      	b.n	90ce <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    90c8:	2000      	movs	r0, #0
    90ca:	9002      	str	r0, [sp, #8]
    90cc:	e7ff      	b.n	90ce <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    90ce:	9802      	ldr	r0, [sp, #8]
    90d0:	9903      	ldr	r1, [sp, #12]
    90d2:	b008      	add	sp, #32
    90d4:	bd80      	pop	{r7, pc}

000090d6 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    90d6:	b08a      	sub	sp, #40	; 0x28
    90d8:	9004      	str	r0, [sp, #16]
    90da:	9105      	str	r1, [sp, #20]
    90dc:	1a40      	subs	r0, r0, r1
    90de:	f04f 0100 	mov.w	r1, #0
    90e2:	f141 0100 	adc.w	r1, r1, #0
    90e6:	f1c1 0101 	rsb	r1, r1, #1
    90ea:	9006      	str	r0, [sp, #24]
    90ec:	f88d 101c 	strb.w	r1, [sp, #28]
    90f0:	9806      	ldr	r0, [sp, #24]
    90f2:	f89d 101c 	ldrb.w	r1, [sp, #28]
    90f6:	9001      	str	r0, [sp, #4]
    90f8:	9100      	str	r1, [sp, #0]
    90fa:	e7ff      	b.n	90fc <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
    90fc:	9801      	ldr	r0, [sp, #4]
    90fe:	9008      	str	r0, [sp, #32]
    9100:	9900      	ldr	r1, [sp, #0]
    9102:	f001 0201 	and.w	r2, r1, #1
    9106:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    910a:	9002      	str	r0, [sp, #8]
    910c:	f88d 200c 	strb.w	r2, [sp, #12]
    9110:	9802      	ldr	r0, [sp, #8]
    9112:	f89d 100c 	ldrb.w	r1, [sp, #12]
    9116:	b00a      	add	sp, #40	; 0x28
    9118:	4770      	bx	lr

0000911a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
    baudrate:   8000,  //  In kHZ. Use SPI at 8MHz (the fastest clock available on the nRF52832) because otherwise refreshing will be super slow.
    word_size:  hal::HAL_SPI_WORD_SIZE_8BIT as u8,
};

/// Initialise the display controller
pub fn start_display() -> MynewtResult<()> {
    911a:	b5b0      	push	{r4, r5, r7, lr}
    911c:	b0b2      	sub	sp, #200	; 0xc8
    //  Create SPI port and GPIO pins
    let mut spi_port = mynewt::SPI::new();
    911e:	f005 f84b 	bl	e1b8 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
    9122:	9115      	str	r1, [sp, #84]	; 0x54
    9124:	9014      	str	r0, [sp, #80]	; 0x50
    9126:	e7ff      	b.n	9128 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
    9128:	f005 fa04 	bl	e534 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    912c:	9016      	str	r0, [sp, #88]	; 0x58
    912e:	e7ff      	b.n	9130 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
    9130:	f005 fa00 	bl	e534 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    9134:	9017      	str	r0, [sp, #92]	; 0x5c
    9136:	e7ff      	b.n	9138 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>

    //  Init SPI port and GPIO pins
    spi_port.init(
    9138:	f240 03e8 	movw	r3, #232	; 0xe8
    913c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    9140:	a814      	add	r0, sp, #80	; 0x50
    9142:	2100      	movs	r1, #0
    9144:	2219      	movs	r2, #25
    9146:	f005 f83f 	bl	e1c8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
    914a:	9012      	str	r0, [sp, #72]	; 0x48
    914c:	e7ff      	b.n	914e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
    914e:	9812      	ldr	r0, [sp, #72]	; 0x48
    9150:	f7ff fc90 	bl	8a74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9154:	9018      	str	r0, [sp, #96]	; 0x60
    9156:	e7ff      	b.n	9158 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
        DISPLAY_SPI, //  Mynewt SPI port 0
        DISPLAY_CS,  //  LCD_CS (P0.25): Chip select
        unsafe { &mut SPI_SETTINGS }
    ) ? ;
    9158:	9818      	ldr	r0, [sp, #96]	; 0x60
    915a:	1e41      	subs	r1, r0, #1
    915c:	bf18      	it	ne
    915e:	2101      	movne	r1, #1
    9160:	2801      	cmp	r0, #1
    9162:	d001      	beq.n	9168 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
    9164:	e7ff      	b.n	9166 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
    9166:	e006      	b.n	9176 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
    9168:	a816      	add	r0, sp, #88	; 0x58
    916a:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    916c:	f005 f9e4 	bl	e538 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    9170:	9011      	str	r0, [sp, #68]	; 0x44
    9172:	e010      	b.n	9196 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
    9174:	defe      	udf	#254	; 0xfe
    ) ? ;
    9176:	9818      	ldr	r0, [sp, #96]	; 0x60
    9178:	902d      	str	r0, [sp, #180]	; 0xb4
    917a:	f003 fbda 	bl	c932 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    917e:	9010      	str	r0, [sp, #64]	; 0x40
    9180:	e002      	b.n	9188 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
    unsafe {
        DISPLAY.init(&mut delay) ? ;
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    }
    Ok(())
}
    9182:	9813      	ldr	r0, [sp, #76]	; 0x4c
    9184:	b032      	add	sp, #200	; 0xc8
    9186:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
    9188:	9810      	ldr	r0, [sp, #64]	; 0x40
    918a:	f7ff fc67 	bl	8a5c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    918e:	9013      	str	r0, [sp, #76]	; 0x4c
    9190:	e7ff      	b.n	9192 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
    9192:	e7ff      	b.n	9194 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    9194:	e7f5      	b.n	9182 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9196:	9811      	ldr	r0, [sp, #68]	; 0x44
    9198:	f7ff fc6c 	bl	8a74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    919c:	9019      	str	r0, [sp, #100]	; 0x64
    919e:	e7ff      	b.n	91a0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
    91a0:	9819      	ldr	r0, [sp, #100]	; 0x64
    91a2:	1e41      	subs	r1, r0, #1
    91a4:	bf18      	it	ne
    91a6:	2101      	movne	r1, #1
    91a8:	2801      	cmp	r0, #1
    91aa:	d001      	beq.n	91b0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
    91ac:	e7ff      	b.n	91ae <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
    91ae:	e006      	b.n	91be <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
    91b0:	a817      	add	r0, sp, #92	; 0x5c
    91b2:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    91b4:	f005 f9c0 	bl	e538 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    91b8:	900f      	str	r0, [sp, #60]	; 0x3c
    91ba:	e00c      	b.n	91d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    91bc:	defe      	udf	#254	; 0xfe
    91be:	9819      	ldr	r0, [sp, #100]	; 0x64
    91c0:	902e      	str	r0, [sp, #184]	; 0xb8
    91c2:	f003 fbb6 	bl	c932 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    91c6:	900e      	str	r0, [sp, #56]	; 0x38
    91c8:	e7ff      	b.n	91ca <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
    91ca:	980e      	ldr	r0, [sp, #56]	; 0x38
    91cc:	f7ff fc46 	bl	8a5c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    91d0:	9013      	str	r0, [sp, #76]	; 0x4c
    91d2:	e7ff      	b.n	91d4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
    91d4:	e7de      	b.n	9194 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    91d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    91d8:	f7ff fc4c 	bl	8a74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    91dc:	901a      	str	r0, [sp, #104]	; 0x68
    91de:	e7ff      	b.n	91e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
    91e0:	981a      	ldr	r0, [sp, #104]	; 0x68
    91e2:	1e41      	subs	r1, r0, #1
    91e4:	bf18      	it	ne
    91e6:	2101      	movne	r1, #1
    91e8:	2801      	cmp	r0, #1
    91ea:	d001      	beq.n	91f0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
    91ec:	e7ff      	b.n	91ee <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
    91ee:	e004      	b.n	91fa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    91f0:	f005 f9a0 	bl	e534 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    91f4:	900d      	str	r0, [sp, #52]	; 0x34
    91f6:	e00c      	b.n	9212 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    91f8:	defe      	udf	#254	; 0xfe
    91fa:	981a      	ldr	r0, [sp, #104]	; 0x68
    91fc:	902f      	str	r0, [sp, #188]	; 0xbc
    91fe:	f003 fb98 	bl	c932 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9202:	900c      	str	r0, [sp, #48]	; 0x30
    9204:	e7ff      	b.n	9206 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
    9206:	980c      	ldr	r0, [sp, #48]	; 0x30
    9208:	f7ff fc28 	bl	8a5c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    920c:	9013      	str	r0, [sp, #76]	; 0x4c
    920e:	e7ff      	b.n	9210 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
    9210:	e7c0      	b.n	9194 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    9212:	f240 1058 	movw	r0, #344	; 0x158
    9216:	f2c2 0000 	movt	r0, #8192	; 0x2000
    921a:	990d      	ldr	r1, [sp, #52]	; 0x34
    921c:	6001      	str	r1, [r0, #0]
    921e:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    9220:	f005 f98a 	bl	e538 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    9224:	900b      	str	r0, [sp, #44]	; 0x2c
    9226:	e7ff      	b.n	9228 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
    9228:	980b      	ldr	r0, [sp, #44]	; 0x2c
    922a:	f7ff fc23 	bl	8a74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    922e:	901b      	str	r0, [sp, #108]	; 0x6c
    9230:	e7ff      	b.n	9232 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
    9232:	981b      	ldr	r0, [sp, #108]	; 0x6c
    9234:	1e41      	subs	r1, r0, #1
    9236:	bf18      	it	ne
    9238:	2101      	movne	r1, #1
    923a:	2801      	cmp	r0, #1
    923c:	d001      	beq.n	9242 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
    923e:	e7ff      	b.n	9240 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
    9240:	e008      	b.n	9254 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
    9242:	f240 1058 	movw	r0, #344	; 0x158
    9246:	f2c2 0000 	movt	r0, #8192	; 0x2000
    924a:	f005 fa0e 	bl	e66a <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    924e:	900a      	str	r0, [sp, #40]	; 0x28
    9250:	e00d      	b.n	926e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    9252:	defe      	udf	#254	; 0xfe
    9254:	981b      	ldr	r0, [sp, #108]	; 0x6c
    9256:	9030      	str	r0, [sp, #192]	; 0xc0
    9258:	f003 fb6b 	bl	c932 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    925c:	9009      	str	r0, [sp, #36]	; 0x24
    925e:	e7ff      	b.n	9260 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
    9260:	9809      	ldr	r0, [sp, #36]	; 0x24
    9262:	f7ff fbfb 	bl	8a5c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9266:	9013      	str	r0, [sp, #76]	; 0x4c
    9268:	e7ff      	b.n	926a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
    926a:	e7ff      	b.n	926c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    926c:	e792      	b.n	9194 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
    926e:	980a      	ldr	r0, [sp, #40]	; 0x28
    9270:	f7ff fc00 	bl	8a74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9274:	901c      	str	r0, [sp, #112]	; 0x70
    9276:	e7ff      	b.n	9278 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
    9278:	981c      	ldr	r0, [sp, #112]	; 0x70
    927a:	1e41      	subs	r1, r0, #1
    927c:	bf18      	it	ne
    927e:	2101      	movne	r1, #1
    9280:	2801      	cmp	r0, #1
    9282:	d001      	beq.n	9288 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
    9284:	e7ff      	b.n	9286 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
    9286:	e011      	b.n	92ac <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
    9288:	9914      	ldr	r1, [sp, #80]	; 0x50
    928a:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
    928c:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
    928e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    9290:	46ec      	mov	ip, sp
    9292:	f04f 0e01 	mov.w	lr, #1
    9296:	f8cc e008 	str.w	lr, [ip, #8]
    929a:	f8cc e004 	str.w	lr, [ip, #4]
    929e:	f8cc 0000 	str.w	r0, [ip]
    92a2:	a81d      	add	r0, sp, #116	; 0x74
    92a4:	f000 fc8c 	bl	9bc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
    92a8:	e00c      	b.n	92c4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
    92aa:	defe      	udf	#254	; 0xfe
    92ac:	981c      	ldr	r0, [sp, #112]	; 0x70
    92ae:	9031      	str	r0, [sp, #196]	; 0xc4
    92b0:	f003 fb3f 	bl	c932 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    92b4:	9008      	str	r0, [sp, #32]
    92b6:	e7ff      	b.n	92b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
    92b8:	9808      	ldr	r0, [sp, #32]
    92ba:	f7ff fbcf 	bl	8a5c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    92be:	9013      	str	r0, [sp, #76]	; 0x4c
    92c0:	e7ff      	b.n	92c2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
    92c2:	e7d3      	b.n	926c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    92c4:	f240 1040 	movw	r0, #320	; 0x140
    92c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    92cc:	a91d      	add	r1, sp, #116	; 0x74
    92ce:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    92d2:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
    92d6:	f005 f9de 	bl	e696 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
    92da:	e7ff      	b.n	92dc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
    92dc:	f240 1040 	movw	r0, #320	; 0x140
    92e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    92e4:	a923      	add	r1, sp, #140	; 0x8c
    92e6:	f000 fc8d 	bl	9c04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
    92ea:	9007      	str	r0, [sp, #28]
    92ec:	e7ff      	b.n	92ee <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
    92ee:	9807      	ldr	r0, [sp, #28]
    92f0:	f000 0001 	and.w	r0, r0, #1
    92f4:	f7ff fbb8 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    92f8:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    92fc:	e7ff      	b.n	92fe <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
    92fe:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    9302:	07c1      	lsls	r1, r0, #31
    9304:	2900      	cmp	r1, #0
    9306:	d001      	beq.n	930c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
    9308:	e7ff      	b.n	930a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
    930a:	e00d      	b.n	9328 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    930c:	f24a 7004 	movw	r0, #42756	; 0xa704
    9310:	f2c0 0001 	movt	r0, #1
    9314:	6801      	ldr	r1, [r0, #0]
    9316:	f240 1040 	movw	r0, #320	; 0x140
    931a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    931e:	f000 fa86 	bl	982e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
    9322:	9006      	str	r0, [sp, #24]
    9324:	e00b      	b.n	933e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
    9326:	defe      	udf	#254	; 0xfe
    9328:	f003 fa9b 	bl	c862 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    932c:	9005      	str	r0, [sp, #20]
    932e:	e7ff      	b.n	9330 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
    9330:	9805      	ldr	r0, [sp, #20]
    9332:	f7ff fb93 	bl	8a5c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9336:	9013      	str	r0, [sp, #76]	; 0x4c
    9338:	e7ff      	b.n	933a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
    933a:	e7ff      	b.n	933c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
    933c:	e72a      	b.n	9194 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    933e:	9806      	ldr	r0, [sp, #24]
    9340:	f000 0001 	and.w	r0, r0, #1
    9344:	f7ff fb90 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9348:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    934c:	e7ff      	b.n	934e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
    934e:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    9352:	07c1      	lsls	r1, r0, #31
    9354:	2900      	cmp	r1, #0
    9356:	d001      	beq.n	935c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
    9358:	e7ff      	b.n	935a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
    935a:	e005      	b.n	9368 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
    935c:	2000      	movs	r0, #0
    Ok(())
    935e:	9013      	str	r0, [sp, #76]	; 0x4c
    9360:	2001      	movs	r0, #1
    9362:	9013      	str	r0, [sp, #76]	; 0x4c
}
    9364:	e70d      	b.n	9182 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    9366:	defe      	udf	#254	; 0xfe
    9368:	f003 fa7b 	bl	c862 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    936c:	9004      	str	r0, [sp, #16]
    936e:	e7ff      	b.n	9370 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
    9370:	9804      	ldr	r0, [sp, #16]
    9372:	f7ff fb73 	bl	8a5c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9376:	9013      	str	r0, [sp, #76]	; 0x4c
    9378:	e7ff      	b.n	937a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
    937a:	e7df      	b.n	933c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

0000937c <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
    937c:	b580      	push	{r7, lr}
    937e:	b08a      	sub	sp, #40	; 0x28
    9380:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    9382:	f001 fad0 	bl	a926 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
    9386:	9307      	str	r3, [sp, #28]
    9388:	9206      	str	r2, [sp, #24]
    938a:	9105      	str	r1, [sp, #20]
    938c:	9004      	str	r0, [sp, #16]
    938e:	e7ff      	b.n	9390 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
    9390:	a804      	add	r0, sp, #16
    9392:	f006 f8dc 	bl	f54e <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    9396:	9003      	str	r0, [sp, #12]
    9398:	e7ff      	b.n	939a <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
    939a:	9803      	ldr	r0, [sp, #12]
    939c:	f006 f9aa 	bl	f6f4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    93a0:	9002      	str	r0, [sp, #8]
    93a2:	9101      	str	r1, [sp, #4]
    93a4:	e7ff      	b.n	93a6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
    93a6:	9802      	ldr	r0, [sp, #8]
    93a8:	f000 0001 	and.w	r0, r0, #1
    93ac:	9901      	ldr	r1, [sp, #4]
    93ae:	b00a      	add	sp, #40	; 0x28
    93b0:	bd80      	pop	{r7, pc}

000093b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
    93b2:	b580      	push	{r7, lr}
    93b4:	b090      	sub	sp, #64	; 0x40
    93b6:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
    93b8:	f100 010c 	add.w	r1, r0, #12
    93bc:	9006      	str	r0, [sp, #24]
    93be:	4608      	mov	r0, r1
    93c0:	f005 f95e 	bl	e680 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    93c4:	9005      	str	r0, [sp, #20]
    93c6:	e7ff      	b.n	93c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
    93c8:	9805      	ldr	r0, [sp, #20]
    93ca:	f006 ff9b 	bl	10304 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
    93ce:	9004      	str	r0, [sp, #16]
    93d0:	e7ff      	b.n	93d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
    93d2:	9804      	ldr	r0, [sp, #16]
    93d4:	f000 0001 	and.w	r0, r0, #1
    93d8:	f7ff fb46 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    93dc:	f88d 001f 	strb.w	r0, [sp, #31]
    93e0:	e7ff      	b.n	93e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
    93e2:	f89d 001f 	ldrb.w	r0, [sp, #31]
    93e6:	07c1      	lsls	r1, r0, #31
    93e8:	2900      	cmp	r1, #0
    93ea:	d001      	beq.n	93f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
    93ec:	e7ff      	b.n	93ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
    93ee:	e006      	b.n	93fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
    93f0:	9806      	ldr	r0, [sp, #24]
    93f2:	300c      	adds	r0, #12
    93f4:	f005 f939 	bl	e66a <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    93f8:	9003      	str	r0, [sp, #12]
    93fa:	e00d      	b.n	9418 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
    93fc:	defe      	udf	#254	; 0xfe
    93fe:	f003 f9e7 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9402:	e003      	b.n	940c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
    9404:	f89d 001e 	ldrb.w	r0, [sp, #30]
    9408:	b010      	add	sp, #64	; 0x40
    940a:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
    940c:	f006 ffcf 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9410:	f88d 001e 	strb.w	r0, [sp, #30]
    9414:	e7ff      	b.n	9416 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
    9416:	e7f5      	b.n	9404 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
    9418:	9803      	ldr	r0, [sp, #12]
    941a:	f006 ff1e 	bl	1025a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
    941e:	9002      	str	r0, [sp, #8]
    9420:	e7ff      	b.n	9422 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
    9422:	9802      	ldr	r0, [sp, #8]
    9424:	f000 0001 	and.w	r0, r0, #1
    9428:	f7ff fb1e 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    942c:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    9430:	e7ff      	b.n	9432 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
    9432:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    9436:	07c1      	lsls	r1, r0, #31
    9438:	2900      	cmp	r1, #0
    943a:	d001      	beq.n	9440 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
    943c:	e7ff      	b.n	943e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
    943e:	e006      	b.n	944e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
    9440:	9806      	ldr	r0, [sp, #24]
    9442:	300c      	adds	r0, #12
    9444:	f005 f91c 	bl	e680 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    9448:	9001      	str	r0, [sp, #4]
    944a:	e009      	b.n	9460 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
    944c:	defe      	udf	#254	; 0xfe
    944e:	f003 f9bf 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9452:	e7ff      	b.n	9454 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
    9454:	f006 ffab 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9458:	f88d 001e 	strb.w	r0, [sp, #30]
    945c:	e7ff      	b.n	945e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
    945e:	e7d1      	b.n	9404 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
    9460:	9801      	ldr	r0, [sp, #4]
    9462:	f006 fea5 	bl	101b0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
    9466:	f88d 001e 	strb.w	r0, [sp, #30]
    946a:	e7ff      	b.n	946c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
    946c:	e7ca      	b.n	9404 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

0000946e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
    946e:	b082      	sub	sp, #8
    9470:	9001      	str	r0, [sp, #4]
    9472:	e7ff      	b.n	9474 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
    9474:	b002      	add	sp, #8
    9476:	4770      	bx	lr

00009478 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
    9478:	b082      	sub	sp, #8
    947a:	9001      	str	r0, [sp, #4]
    947c:	e7ff      	b.n	947e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
    947e:	b002      	add	sp, #8
    9480:	4770      	bx	lr

00009482 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
    9482:	b082      	sub	sp, #8
    9484:	9001      	str	r0, [sp, #4]
    9486:	e7ff      	b.n	9488 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
    9488:	b002      	add	sp, #8
    948a:	4770      	bx	lr

0000948c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    948c:	b5f0      	push	{r4, r5, r6, r7, lr}
    948e:	b0c7      	sub	sp, #284	; 0x11c
    9490:	f8dd c134 	ldr.w	ip, [sp, #308]	; 0x134
    9494:	f8dd e130 	ldr.w	lr, [sp, #304]	; 0x130
    9498:	461c      	mov	r4, r3
    949a:	4615      	mov	r5, r2
    949c:	460e      	mov	r6, r1
    949e:	9040      	str	r0, [sp, #256]	; 0x100
    94a0:	f8ad 1104 	strh.w	r1, [sp, #260]	; 0x104
    94a4:	f8ad 2106 	strh.w	r2, [sp, #262]	; 0x106
    94a8:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
    94ac:	f8ad e10a 	strh.w	lr, [sp, #266]	; 0x10a
    94b0:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    94b2:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    94b6:	2701      	movs	r7, #1
    94b8:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
    94bc:	466f      	mov	r7, sp
    94be:	f8c7 e000 	str.w	lr, [r7]
    94c2:	900a      	str	r0, [sp, #40]	; 0x28
    94c4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    94c8:	9408      	str	r4, [sp, #32]
    94ca:	9507      	str	r5, [sp, #28]
    94cc:	9606      	str	r6, [sp, #24]
    94ce:	f000 fa44 	bl	995a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    94d2:	9005      	str	r0, [sp, #20]
    94d4:	e7ff      	b.n	94d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x4a>
    94d6:	9805      	ldr	r0, [sp, #20]
    94d8:	f000 0001 	and.w	r0, r0, #1
    94dc:	f7ff fac4 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    94e0:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    94e4:	e7ff      	b.n	94e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x5a>
    94e6:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    94ea:	07c1      	lsls	r1, r0, #31
    94ec:	2900      	cmp	r1, #0
    94ee:	d001      	beq.n	94f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x68>
    94f0:	e7ff      	b.n	94f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x66>
    94f2:	e00f      	b.n	9514 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x88>
    94f4:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    94f6:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    94fa:	a80c      	add	r0, sp, #48	; 0x30
    94fc:	22cc      	movs	r2, #204	; 0xcc
    94fe:	9004      	str	r0, [sp, #16]
    9500:	9909      	ldr	r1, [sp, #36]	; 0x24
    9502:	f010 ffe1 	bl	1a4c8 <__aeabi_memcpy>
    9506:	980a      	ldr	r0, [sp, #40]	; 0x28
    9508:	9904      	ldr	r1, [sp, #16]
    950a:	f000 f884 	bl	9616 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>
    950e:	9003      	str	r0, [sp, #12]
    9510:	e00d      	b.n	952e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa2>
        self.set_address_window(sx, sy, ex, ey)?;
    9512:	defe      	udf	#254	; 0xfe
    9514:	f003 f95c 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9518:	e003      	b.n	9522 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x96>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
    951a:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    951e:	b047      	add	sp, #284	; 0x11c
    9520:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    9522:	f006 ff44 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9526:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    952a:	e7ff      	b.n	952c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa0>
    952c:	e034      	b.n	9598 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        self.write_pixels(colors) ? ;
    952e:	9803      	ldr	r0, [sp, #12]
    9530:	f000 0001 	and.w	r0, r0, #1
    9534:	f7ff fa98 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9538:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    953c:	e7ff      	b.n	953e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xb2>
    953e:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    9542:	07c1      	lsls	r1, r0, #31
    9544:	2900      	cmp	r1, #0
    9546:	d001      	beq.n	954c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xc0>
    9548:	e7ff      	b.n	954a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xbe>
    954a:	e004      	b.n	9556 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xca>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    954c:	f004 f8df 	bl	d70e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    9550:	9002      	str	r0, [sp, #8]
    9552:	e009      	b.n	9568 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xdc>
        self.write_pixels(colors) ? ;
    9554:	defe      	udf	#254	; 0xfe
    9556:	f003 f93b 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    955a:	e7ff      	b.n	955c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xd0>
    955c:	f006 ff27 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9560:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    9564:	e7ff      	b.n	9566 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xda>
    9566:	e017      	b.n	9598 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    9568:	f24a 7108 	movw	r1, #42760	; 0xa708
    956c:	f2c0 0101 	movt	r1, #1
    9570:	f24a 7364 	movw	r3, #42852	; 0xa764
    9574:	f2c0 0301 	movt	r3, #1
    9578:	220e      	movs	r2, #14
    957a:	9802      	ldr	r0, [sp, #8]
    957c:	f7ff fa3b 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9580:	e7ff      	b.n	9582 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xf6>
    9582:	2000      	movs	r0, #0
        Ok(())
    9584:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9588:	e7c7      	b.n	951a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    958a:	2000      	movs	r0, #0
    958c:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    9590:	9809      	ldr	r0, [sp, #36]	; 0x24
    9592:	f000 ff1d 	bl	a3d0 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    9596:	e7c0      	b.n	951a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
    9598:	f89d 00ff 	ldrb.w	r0, [sp, #255]	; 0xff
    959c:	07c0      	lsls	r0, r0, #31
    959e:	2800      	cmp	r0, #0
    95a0:	d1f3      	bne.n	958a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xfe>
    95a2:	e7ba      	b.n	951a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>

000095a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
    95a4:	b580      	push	{r7, lr}
    95a6:	b084      	sub	sp, #16
    95a8:	9001      	str	r0, [sp, #4]
    95aa:	9102      	str	r1, [sp, #8]
    95ac:	9203      	str	r2, [sp, #12]
        mynewt::spi::spi_noblock_write_data(
    95ae:	4608      	mov	r0, r1
    95b0:	4611      	mov	r1, r2
    95b2:	f004 f818 	bl	d5e6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    95b6:	9000      	str	r0, [sp, #0]
    95b8:	e7ff      	b.n	95ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
    95ba:	f24a 7174 	movw	r1, #42868	; 0xa774
    95be:	f2c0 0101 	movt	r1, #1
    95c2:	f24a 7384 	movw	r3, #42884	; 0xa784
    95c6:	f2c0 0301 	movt	r3, #1
    95ca:	220d      	movs	r2, #13
    95cc:	9800      	ldr	r0, [sp, #0]
    95ce:	f7ff fa12 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    95d2:	e7ff      	b.n	95d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
    95d4:	2000      	movs	r0, #0
    }
    95d6:	b004      	add	sp, #16
    95d8:	bd80      	pop	{r7, pc}

000095da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
    95da:	b580      	push	{r7, lr}
    95dc:	b088      	sub	sp, #32
    95de:	460a      	mov	r2, r1
    95e0:	9006      	str	r0, [sp, #24]
    95e2:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
    95e6:	9004      	str	r0, [sp, #16]
    95e8:	4608      	mov	r0, r1
    95ea:	9203      	str	r2, [sp, #12]
    95ec:	f000 feb9 	bl	a362 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
    95f0:	9002      	str	r0, [sp, #8]
    95f2:	e7ff      	b.n	95f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
    95f4:	9802      	ldr	r0, [sp, #8]
    95f6:	f8ad 0016 	strh.w	r0, [sp, #22]
    95fa:	e7ff      	b.n	95fc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
    95fc:	f10d 0116 	add.w	r1, sp, #22
    9600:	2202      	movs	r2, #2
        self.write_data(&bytes)
    9602:	9804      	ldr	r0, [sp, #16]
    9604:	f7ff ffce 	bl	95a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
    9608:	9001      	str	r0, [sp, #4]
    960a:	e7ff      	b.n	960c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
    960c:	9801      	ldr	r0, [sp, #4]
    960e:	f000 0001 	and.w	r0, r0, #1
    9612:	b008      	add	sp, #32
    9614:	bd80      	pop	{r7, pc}

00009616 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    9616:	b580      	push	{r7, lr}
    9618:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
    961c:	90a8      	str	r0, [sp, #672]	; 0x2a0
    961e:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    9620:	f88d 229f 	strb.w	r2, [sp, #671]	; 0x29f
    9624:	2301      	movs	r3, #1
    9626:	f88d 329f 	strb.w	r3, [sp, #671]	; 0x29f
    962a:	232c      	movs	r3, #44	; 0x2c
    962c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
    9630:	920a      	str	r2, [sp, #40]	; 0x28
    9632:	9209      	str	r2, [sp, #36]	; 0x24
    9634:	9209      	str	r2, [sp, #36]	; 0x24
    9636:	9a09      	ldr	r2, [sp, #36]	; 0x24
    9638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    963a:	f89d c023 	ldrb.w	ip, [sp, #35]	; 0x23
    963e:	9007      	str	r0, [sp, #28]
    9640:	9106      	str	r1, [sp, #24]
    9642:	4661      	mov	r1, ip
    9644:	f000 f898 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9648:	9005      	str	r0, [sp, #20]
    964a:	e7ff      	b.n	964c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x36>
    964c:	9805      	ldr	r0, [sp, #20]
    964e:	f000 0001 	and.w	r0, r0, #1
    9652:	f7ff fa09 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9656:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    965a:	e7ff      	b.n	965c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x46>
    965c:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    9660:	07c1      	lsls	r1, r0, #31
    9662:	2900      	cmp	r1, #0
    9664:	d001      	beq.n	966a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x54>
    9666:	e7ff      	b.n	9668 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x52>
    9668:	e00e      	b.n	9688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x72>
    966a:	2000      	movs	r0, #0
        for color in colors {
    966c:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    9670:	a83f      	add	r0, sp, #252	; 0xfc
    9672:	22cc      	movs	r2, #204	; 0xcc
    9674:	9004      	str	r0, [sp, #16]
    9676:	9906      	ldr	r1, [sp, #24]
    9678:	f010 ff26 	bl	1a4c8 <__aeabi_memcpy>
    967c:	a80b      	add	r0, sp, #44	; 0x2c
    967e:	9904      	ldr	r1, [sp, #16]
    9680:	f006 f9c9 	bl	fa16 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>
    9684:	e00e      	b.n	96a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8e>
        self.write_command(Instruction::RAMWR, None)?;
    9686:	defe      	udf	#254	; 0xfe
    9688:	f003 f8a2 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    968c:	e004      	b.n	9698 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x82>
    }
    968e:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
    9692:	f50d 7d2e 	add.w	sp, sp, #696	; 0x2b8
    9696:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    9698:	f006 fe89 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    969c:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    96a0:	e7ff      	b.n	96a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8c>
    96a2:	e063      	b.n	976c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
    96a4:	a872      	add	r0, sp, #456	; 0x1c8
    96a6:	a90b      	add	r1, sp, #44	; 0x2c
    96a8:	22d0      	movs	r2, #208	; 0xd0
        for color in colors {
    96aa:	f010 ff0d 	bl	1a4c8 <__aeabi_memcpy>
    96ae:	e7ff      	b.n	96b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
    96b0:	a872      	add	r0, sp, #456	; 0x1c8
    96b2:	f006 f9c6 	bl	fa42 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>
    96b6:	f8ad 129a 	strh.w	r1, [sp, #666]	; 0x29a
    96ba:	f8ad 0298 	strh.w	r0, [sp, #664]	; 0x298
    96be:	e7ff      	b.n	96c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xaa>
    96c0:	f8bd 0298 	ldrh.w	r0, [sp, #664]	; 0x298
    96c4:	4601      	mov	r1, r0
    96c6:	2800      	cmp	r0, #0
    96c8:	d001      	beq.n	96ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb8>
    96ca:	e7ff      	b.n	96cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb6>
    96cc:	e004      	b.n	96d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xc2>
    96ce:	a872      	add	r0, sp, #456	; 0x1c8
        }
    96d0:	f000 fe9d 	bl	a40e <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    96d4:	e02e      	b.n	9734 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11e>
        for color in colors {
    96d6:	defe      	udf	#254	; 0xfe
    96d8:	f8bd 029a 	ldrh.w	r0, [sp, #666]	; 0x29a
    96dc:	f8ad 02b2 	strh.w	r0, [sp, #690]	; 0x2b2
    96e0:	f8ad 02b4 	strh.w	r0, [sp, #692]	; 0x2b4
    96e4:	f8ad 02b6 	strh.w	r0, [sp, #694]	; 0x2b6
            self.write_word(color)?;
    96e8:	9907      	ldr	r1, [sp, #28]
    96ea:	9003      	str	r0, [sp, #12]
    96ec:	4608      	mov	r0, r1
    96ee:	9903      	ldr	r1, [sp, #12]
    96f0:	f7ff ff73 	bl	95da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    96f4:	9002      	str	r0, [sp, #8]
    96f6:	e7ff      	b.n	96f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xe2>
    96f8:	9802      	ldr	r0, [sp, #8]
    96fa:	f000 0001 	and.w	r0, r0, #1
    96fe:	f7ff f9b3 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9702:	f88d 029e 	strb.w	r0, [sp, #670]	; 0x29e
    9706:	e7ff      	b.n	9708 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xf2>
    9708:	f89d 029e 	ldrb.w	r0, [sp, #670]	; 0x29e
    970c:	07c1      	lsls	r1, r0, #31
    970e:	2900      	cmp	r1, #0
    9710:	d001      	beq.n	9716 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x100>
    9712:	e7ff      	b.n	9714 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xfe>
    9714:	e001      	b.n	971a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x104>
        for color in colors {
    9716:	e7cb      	b.n	96b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
            self.write_word(color)?;
    9718:	defe      	udf	#254	; 0xfe
    971a:	f003 f859 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    971e:	e7ff      	b.n	9720 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x10a>
    9720:	f006 fe45 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9724:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    9728:	e7ff      	b.n	972a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x114>
    972a:	a872      	add	r0, sp, #456	; 0x1c8
        }
    972c:	f000 fe6f 	bl	a40e <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
    9730:	e7ff      	b.n	9732 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11c>
    }
    9732:	e01b      	b.n	976c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    9734:	f003 ffeb 	bl	d70e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    9738:	9001      	str	r0, [sp, #4]
    973a:	e7ff      	b.n	973c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x126>
    973c:	f24a 7108 	movw	r1, #42760	; 0xa708
    9740:	f2c0 0101 	movt	r1, #1
    9744:	f24a 7394 	movw	r3, #42900	; 0xa794
    9748:	f2c0 0301 	movt	r3, #1
    974c:	220e      	movs	r2, #14
    974e:	9801      	ldr	r0, [sp, #4]
    9750:	f7ff f951 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9754:	e7ff      	b.n	9756 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x140>
    9756:	2000      	movs	r0, #0
        Ok(())
    9758:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    }
    975c:	e797      	b.n	968e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    975e:	2000      	movs	r0, #0
    9760:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
    9764:	9806      	ldr	r0, [sp, #24]
    9766:	f000 fe33 	bl	a3d0 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    976a:	e790      	b.n	968e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
    976c:	f89d 029f 	ldrb.w	r0, [sp, #671]	; 0x29f
    9770:	07c0      	lsls	r0, r0, #31
    9772:	2800      	cmp	r0, #0
    9774:	d1f3      	bne.n	975e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x148>
    9776:	e78a      	b.n	968e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>

00009778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
    9778:	b580      	push	{r7, lr}
    977a:	b08e      	sub	sp, #56	; 0x38
    977c:	468c      	mov	ip, r1
    977e:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    9782:	920b      	str	r2, [sp, #44]	; 0x2c
    9784:	930c      	str	r3, [sp, #48]	; 0x30
    9786:	900d      	str	r0, [sp, #52]	; 0x34
    9788:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
    978c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9790:	f000 fdbd 	bl	a30e <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
    9794:	9008      	str	r0, [sp, #32]
    9796:	9107      	str	r1, [sp, #28]
    9798:	e7ff      	b.n	979a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
    979a:	9808      	ldr	r0, [sp, #32]
    979c:	f000 0001 	and.w	r0, r0, #1
    97a0:	f24a 72a4 	movw	r2, #42916	; 0xa7a4
    97a4:	f2c0 0201 	movt	r2, #1
    97a8:	9907      	ldr	r1, [sp, #28]
    97aa:	f005 ff12 	bl	f5d2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    97ae:	9006      	str	r0, [sp, #24]
    97b0:	e7ff      	b.n	97b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
    97b2:	9806      	ldr	r0, [sp, #24]
    97b4:	f003 fecf 	bl	d556 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
    97b8:	9005      	str	r0, [sp, #20]
    97ba:	e7ff      	b.n	97bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
    97bc:	f24a 71b4 	movw	r1, #42932	; 0xa7b4
    97c0:	f2c0 0101 	movt	r1, #1
    97c4:	f24a 73c0 	movw	r3, #42944	; 0xa7c0
    97c8:	f2c0 0301 	movt	r3, #1
    97cc:	220c      	movs	r2, #12
    97ce:	9805      	ldr	r0, [sp, #20]
    97d0:	f7ff f911 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    97d4:	e7ff      	b.n	97d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
    97d6:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
    97d8:	f005 ff56 	bl	f688 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
    97dc:	9004      	str	r0, [sp, #16]
    97de:	e7ff      	b.n	97e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
    97e0:	9804      	ldr	r0, [sp, #16]
    97e2:	07c1      	lsls	r1, r0, #31
    97e4:	2900      	cmp	r1, #0
    97e6:	d01f      	beq.n	9828 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    97e8:	e7ff      	b.n	97ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
    97ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
    97ec:	990c      	ldr	r1, [sp, #48]	; 0x30
    97ee:	f24a 72d0 	movw	r2, #42960	; 0xa7d0
    97f2:	f2c0 0201 	movt	r2, #1
    97f6:	f005 ff15 	bl	f624 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
    97fa:	9003      	str	r0, [sp, #12]
    97fc:	9102      	str	r1, [sp, #8]
    97fe:	e7ff      	b.n	9800 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
    9800:	9803      	ldr	r0, [sp, #12]
    9802:	9902      	ldr	r1, [sp, #8]
    9804:	f003 feef 	bl	d5e6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    9808:	9001      	str	r0, [sp, #4]
    980a:	e7ff      	b.n	980c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
    980c:	f24a 7174 	movw	r1, #42868	; 0xa774
    9810:	f2c0 0101 	movt	r1, #1
    9814:	f24a 73e0 	movw	r3, #42976	; 0xa7e0
    9818:	f2c0 0301 	movt	r3, #1
    981c:	220d      	movs	r2, #13
    981e:	9801      	ldr	r0, [sp, #4]
    9820:	f7ff f8e9 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9824:	e7ff      	b.n	9826 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
    9826:	e7ff      	b.n	9828 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    9828:	2000      	movs	r0, #0
    }
    982a:	b00e      	add	sp, #56	; 0x38
    982c:	bd80      	pop	{r7, pc}

0000982e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:
    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
    982e:	b580      	push	{r7, lr}
    9830:	b098      	sub	sp, #96	; 0x60
    9832:	9012      	str	r0, [sp, #72]	; 0x48
    9834:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
    9836:	7d02      	ldrb	r2, [r0, #20]
    9838:	07d2      	lsls	r2, r2, #31
    983a:	2a00      	cmp	r2, #0
    983c:	910a      	str	r1, [sp, #40]	; 0x28
    983e:	9009      	str	r0, [sp, #36]	; 0x24
    9840:	d109      	bne.n	9856 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
    9842:	e7ff      	b.n	9844 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
    9844:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9846:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    984a:	980a      	ldr	r0, [sp, #40]	; 0x28
    984c:	f7ff fd96 	bl	937c <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9850:	9008      	str	r0, [sp, #32]
    9852:	9107      	str	r1, [sp, #28]
    9854:	e044      	b.n	98e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
    9856:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
    9858:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    985c:	980a      	ldr	r0, [sp, #40]	; 0x28
    985e:	f7ff fd8d 	bl	937c <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    9862:	9006      	str	r0, [sp, #24]
    9864:	9105      	str	r1, [sp, #20]
    9866:	e7ff      	b.n	9868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
    9868:	9806      	ldr	r0, [sp, #24]
    986a:	f000 0001 	and.w	r0, r0, #1
    986e:	f24a 72f0 	movw	r2, #42992	; 0xa7f0
    9872:	f2c0 0201 	movt	r2, #1
    9876:	9905      	ldr	r1, [sp, #20]
    9878:	f005 feab 	bl	f5d2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    987c:	9004      	str	r0, [sp, #16]
    987e:	e7ff      	b.n	9880 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
    9880:	9804      	ldr	r0, [sp, #16]
    9882:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9886:	f10d 0139 	add.w	r1, sp, #57	; 0x39
    988a:	910c      	str	r1, [sp, #48]	; 0x30
    988c:	2101      	movs	r1, #1
    988e:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
    9890:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9892:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9894:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    9898:	9809      	ldr	r0, [sp, #36]	; 0x24
    989a:	f7ff ff6d 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    989e:	9003      	str	r0, [sp, #12]
    98a0:	e7ff      	b.n	98a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
    98a2:	9803      	ldr	r0, [sp, #12]
    98a4:	f000 0001 	and.w	r0, r0, #1
    98a8:	f7ff f8de 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    98ac:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    98b0:	e7ff      	b.n	98b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
    98b2:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    98b6:	07c1      	lsls	r1, r0, #31
    98b8:	2900      	cmp	r1, #0
    98ba:	d001      	beq.n	98c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
    98bc:	e7ff      	b.n	98be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
    98be:	e001      	b.n	98c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
    98c0:	e047      	b.n	9952 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    98c2:	defe      	udf	#254	; 0xfe
            ))?;
    98c4:	f002 ff84 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    98c8:	e003      	b.n	98d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
    }
    98ca:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    98ce:	b018      	add	sp, #96	; 0x60
    98d0:	bd80      	pop	{r7, pc}
            ))?;
    98d2:	f006 fd6c 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    98d6:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    98da:	e7ff      	b.n	98dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
    98dc:	e7ff      	b.n	98de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    98de:	e7f4      	b.n	98ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    98e0:	9808      	ldr	r0, [sp, #32]
    98e2:	f000 0001 	and.w	r0, r0, #1
    98e6:	f64a 0200 	movw	r2, #43008	; 0xa800
    98ea:	f2c0 0201 	movt	r2, #1
    98ee:	9907      	ldr	r1, [sp, #28]
    98f0:	f005 fe6f 	bl	f5d2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    98f4:	9002      	str	r0, [sp, #8]
    98f6:	e7ff      	b.n	98f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
    98f8:	9802      	ldr	r0, [sp, #8]
    98fa:	f040 0108 	orr.w	r1, r0, #8
    98fe:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    9902:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    9906:	910f      	str	r1, [sp, #60]	; 0x3c
    9908:	2101      	movs	r1, #1
    990a:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
    990c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    990e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9910:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9914:	9809      	ldr	r0, [sp, #36]	; 0x24
    9916:	f7ff ff2f 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    991a:	9001      	str	r0, [sp, #4]
    991c:	e7ff      	b.n	991e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
    991e:	9801      	ldr	r0, [sp, #4]
    9920:	f000 0001 	and.w	r0, r0, #1
    9924:	f7ff f8a0 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9928:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    992c:	e7ff      	b.n	992e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
    992e:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9932:	07c1      	lsls	r1, r0, #31
    9934:	2900      	cmp	r1, #0
    9936:	d001      	beq.n	993c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
    9938:	e7ff      	b.n	993a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
    993a:	e001      	b.n	9940 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
    993c:	e009      	b.n	9952 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    993e:	defe      	udf	#254	; 0xfe
            ))?;
    9940:	f002 ff46 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9944:	e7ff      	b.n	9946 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
    9946:	f006 fd32 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    994a:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    994e:	e7ff      	b.n	9950 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
    9950:	e7c5      	b.n	98de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9952:	2000      	movs	r0, #0
        Ok(())
    9954:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    9958:	e7b7      	b.n	98ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

0000995a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
    995a:	b5b0      	push	{r4, r5, r7, lr}
    995c:	b0a2      	sub	sp, #136	; 0x88
    995e:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
    9962:	469e      	mov	lr, r3
    9964:	4614      	mov	r4, r2
    9966:	460d      	mov	r5, r1
    9968:	9015      	str	r0, [sp, #84]	; 0x54
    996a:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    996e:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    9972:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    9976:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    997a:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
    997c:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    9980:	2100      	movs	r1, #0
    9982:	9110      	str	r1, [sp, #64]	; 0x40
    9984:	910f      	str	r1, [sp, #60]	; 0x3c
    9986:	910f      	str	r1, [sp, #60]	; 0x3c
    9988:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    998a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    998c:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9990:	900d      	str	r0, [sp, #52]	; 0x34
    9992:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9996:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    999a:	940a      	str	r4, [sp, #40]	; 0x28
    999c:	9509      	str	r5, [sp, #36]	; 0x24
    999e:	f7ff feeb 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    99a2:	9008      	str	r0, [sp, #32]
    99a4:	e7ff      	b.n	99a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
    99a6:	9808      	ldr	r0, [sp, #32]
    99a8:	f000 0001 	and.w	r0, r0, #1
    99ac:	f7ff f85c 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    99b0:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    99b4:	e7ff      	b.n	99b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
    99b6:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    99ba:	07c1      	lsls	r1, r0, #31
    99bc:	2900      	cmp	r1, #0
    99be:	d001      	beq.n	99c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
    99c0:	e7ff      	b.n	99c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
    99c2:	e00d      	b.n	99e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
    99c4:	980d      	ldr	r0, [sp, #52]	; 0x34
    99c6:	8a01      	ldrh	r1, [r0, #16]
    99c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    99ca:	fa11 f182 	uxtah	r1, r1, r2
    99ce:	b28b      	uxth	r3, r1
    99d0:	468c      	mov	ip, r1
    99d2:	428b      	cmp	r3, r1
    99d4:	f8cd c01c 	str.w	ip, [sp, #28]
    99d8:	f040 80c2 	bne.w	9b60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
    99dc:	e00d      	b.n	99fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
    99de:	defe      	udf	#254	; 0xfe
    99e0:	f002 fef6 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    99e4:	e003      	b.n	99ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
    }
    99e6:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    99ea:	b022      	add	sp, #136	; 0x88
    99ec:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
    99ee:	f006 fcde 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    99f2:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    99f6:	e7ff      	b.n	99f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
    99f8:	e7f5      	b.n	99e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    99fa:	980d      	ldr	r0, [sp, #52]	; 0x34
    99fc:	9907      	ldr	r1, [sp, #28]
    99fe:	f7ff fdec 	bl	95da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9a02:	9006      	str	r0, [sp, #24]
    9a04:	e7ff      	b.n	9a06 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
    9a06:	9806      	ldr	r0, [sp, #24]
    9a08:	f000 0001 	and.w	r0, r0, #1
    9a0c:	f7ff f82c 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9a10:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9a14:	e7ff      	b.n	9a16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
    9a16:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    9a1a:	07c1      	lsls	r1, r0, #31
    9a1c:	2900      	cmp	r1, #0
    9a1e:	d001      	beq.n	9a24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
    9a20:	e7ff      	b.n	9a22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
    9a22:	e00d      	b.n	9a40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
    9a24:	980d      	ldr	r0, [sp, #52]	; 0x34
    9a26:	8a01      	ldrh	r1, [r0, #16]
    9a28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9a2a:	fa11 f182 	uxtah	r1, r1, r2
    9a2e:	b28b      	uxth	r3, r1
    9a30:	468c      	mov	ip, r1
    9a32:	428b      	cmp	r3, r1
    9a34:	f8cd c014 	str.w	ip, [sp, #20]
    9a38:	f040 809e 	bne.w	9b78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
    9a3c:	e009      	b.n	9a52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
    9a3e:	defe      	udf	#254	; 0xfe
    9a40:	f002 fec6 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9a44:	e7ff      	b.n	9a46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
    9a46:	f006 fcb2 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a4a:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9a4e:	e7ff      	b.n	9a50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
    9a50:	e7c9      	b.n	99e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
    9a52:	980d      	ldr	r0, [sp, #52]	; 0x34
    9a54:	9905      	ldr	r1, [sp, #20]
    9a56:	f7ff fdc0 	bl	95da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9a5a:	9004      	str	r0, [sp, #16]
    9a5c:	e7ff      	b.n	9a5e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
    9a5e:	9804      	ldr	r0, [sp, #16]
    9a60:	f000 0001 	and.w	r0, r0, #1
    9a64:	f7ff f800 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9a68:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    9a6c:	e7ff      	b.n	9a6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
    9a6e:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    9a72:	07c1      	lsls	r1, r0, #31
    9a74:	2900      	cmp	r1, #0
    9a76:	d001      	beq.n	9a7c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
    9a78:	e7ff      	b.n	9a7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
    9a7a:	e010      	b.n	9a9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
    9a7c:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
    9a7e:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    9a82:	2000      	movs	r0, #0
    9a84:	9013      	str	r0, [sp, #76]	; 0x4c
    9a86:	9012      	str	r0, [sp, #72]	; 0x48
    9a88:	9012      	str	r0, [sp, #72]	; 0x48
    9a8a:	9a12      	ldr	r2, [sp, #72]	; 0x48
    9a8c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    9a8e:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
    9a92:	980d      	ldr	r0, [sp, #52]	; 0x34
    9a94:	f7ff fe70 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9a98:	9003      	str	r0, [sp, #12]
    9a9a:	e009      	b.n	9ab0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
    9a9c:	defe      	udf	#254	; 0xfe
    9a9e:	f002 fe97 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9aa2:	e7ff      	b.n	9aa4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
    9aa4:	f006 fc83 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9aa8:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9aac:	e7ff      	b.n	9aae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
    9aae:	e79a      	b.n	99e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
    9ab0:	9803      	ldr	r0, [sp, #12]
    9ab2:	f000 0001 	and.w	r0, r0, #1
    9ab6:	f7fe ffd7 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9aba:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9abe:	e7ff      	b.n	9ac0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
    9ac0:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    9ac4:	07c1      	lsls	r1, r0, #31
    9ac6:	2900      	cmp	r1, #0
    9ac8:	d001      	beq.n	9ace <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
    9aca:	e7ff      	b.n	9acc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
    9acc:	e00c      	b.n	9ae8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
    9ace:	980d      	ldr	r0, [sp, #52]	; 0x34
    9ad0:	8a41      	ldrh	r1, [r0, #18]
    9ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9ad4:	fa11 f182 	uxtah	r1, r1, r2
    9ad8:	b28b      	uxth	r3, r1
    9ada:	468c      	mov	ip, r1
    9adc:	428b      	cmp	r3, r1
    9ade:	f8cd c008 	str.w	ip, [sp, #8]
    9ae2:	d155      	bne.n	9b90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
    9ae4:	e009      	b.n	9afa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
    9ae6:	defe      	udf	#254	; 0xfe
    9ae8:	f002 fe72 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9aec:	e7ff      	b.n	9aee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
    9aee:	f006 fc5e 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9af2:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9af6:	e7ff      	b.n	9af8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
    9af8:	e775      	b.n	99e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
    9afa:	980d      	ldr	r0, [sp, #52]	; 0x34
    9afc:	9902      	ldr	r1, [sp, #8]
    9afe:	f7ff fd6c 	bl	95da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9b02:	9001      	str	r0, [sp, #4]
    9b04:	e7ff      	b.n	9b06 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
    9b06:	9801      	ldr	r0, [sp, #4]
    9b08:	f000 0001 	and.w	r0, r0, #1
    9b0c:	f7fe ffac 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9b10:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    9b14:	e7ff      	b.n	9b16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
    9b16:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    9b1a:	07c1      	lsls	r1, r0, #31
    9b1c:	2900      	cmp	r1, #0
    9b1e:	d001      	beq.n	9b24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
    9b20:	e7ff      	b.n	9b22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
    9b22:	e00c      	b.n	9b3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
    9b24:	980d      	ldr	r0, [sp, #52]	; 0x34
    9b26:	8a41      	ldrh	r1, [r0, #18]
    9b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9b2a:	fa11 f182 	uxtah	r1, r1, r2
    9b2e:	b28b      	uxth	r3, r1
    9b30:	468c      	mov	ip, r1
    9b32:	428b      	cmp	r3, r1
    9b34:	f8cd c000 	str.w	ip, [sp]
    9b38:	d136      	bne.n	9ba8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
    9b3a:	e009      	b.n	9b50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
    9b3c:	defe      	udf	#254	; 0xfe
    9b3e:	f002 fe47 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9b42:	e7ff      	b.n	9b44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
    9b44:	f006 fc33 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9b48:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9b4c:	e7ff      	b.n	9b4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
    9b4e:	e74a      	b.n	99e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
    9b50:	980d      	ldr	r0, [sp, #52]	; 0x34
    9b52:	9900      	ldr	r1, [sp, #0]
    9b54:	f7ff fd41 	bl	95da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9b58:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9b5c:	e7ff      	b.n	9b5e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
    9b5e:	e742      	b.n	99e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9b60:	f64a 0020 	movw	r0, #43040	; 0xa820
    9b64:	f2c0 0001 	movt	r0, #1
    9b68:	f64a 0210 	movw	r2, #43024	; 0xa810
    9b6c:	f2c0 0201 	movt	r2, #1
    9b70:	211c      	movs	r1, #28
    9b72:	f00a f8d5 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9b76:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
    9b78:	f64a 0020 	movw	r0, #43040	; 0xa820
    9b7c:	f2c0 0001 	movt	r0, #1
    9b80:	f64a 023c 	movw	r2, #43068	; 0xa83c
    9b84:	f2c0 0201 	movt	r2, #1
    9b88:	211c      	movs	r1, #28
    9b8a:	f00a f8c9 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9b8e:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
    9b90:	f64a 0020 	movw	r0, #43040	; 0xa820
    9b94:	f2c0 0001 	movt	r0, #1
    9b98:	f64a 024c 	movw	r2, #43084	; 0xa84c
    9b9c:	f2c0 0201 	movt	r2, #1
    9ba0:	211c      	movs	r1, #28
    9ba2:	f00a f8bd 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9ba6:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
    9ba8:	f64a 0020 	movw	r0, #43040	; 0xa820
    9bac:	f2c0 0001 	movt	r0, #1
    9bb0:	f64a 025c 	movw	r2, #43100	; 0xa85c
    9bb4:	f2c0 0201 	movt	r2, #1
    9bb8:	211c      	movs	r1, #28
    9bba:	f00a f8b1 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9bbe:	defe      	udf	#254	; 0xfe

00009bc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
    9bc0:	b5b0      	push	{r4, r5, r7, lr}
    9bc2:	b08a      	sub	sp, #40	; 0x28
    9bc4:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    9bc8:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    9bcc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9bce:	9106      	str	r1, [sp, #24]
    9bd0:	9207      	str	r2, [sp, #28]
    9bd2:	9308      	str	r3, [sp, #32]
    9bd4:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    9bd8:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
    9bdc:	9100      	str	r1, [sp, #0]
    9bde:	9201      	str	r2, [sp, #4]
    9be0:	9302      	str	r3, [sp, #8]
    9be2:	9403      	str	r4, [sp, #12]
    9be4:	f88d e014 	strb.w	lr, [sp, #20]
    9be8:	f88d c015 	strb.w	ip, [sp, #21]
    9bec:	2100      	movs	r1, #0
    9bee:	f8ad 1010 	strh.w	r1, [sp, #16]
    9bf2:	f8ad 1012 	strh.w	r1, [sp, #18]
    9bf6:	4669      	mov	r1, sp
        display
    9bf8:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9bfc:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
    9c00:	b00a      	add	sp, #40	; 0x28
    9c02:	bdb0      	pop	{r4, r5, r7, pc}

00009c04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
    9c04:	b580      	push	{r7, lr}
    9c06:	b0f6      	sub	sp, #472	; 0x1d8
    9c08:	904e      	str	r0, [sp, #312]	; 0x138
    9c0a:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
    9c0c:	9117      	str	r1, [sp, #92]	; 0x5c
    9c0e:	9016      	str	r0, [sp, #88]	; 0x58
    9c10:	f002 ff47 	bl	caa2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
    9c14:	9015      	str	r0, [sp, #84]	; 0x54
    9c16:	e7ff      	b.n	9c18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
    9c18:	f64a 016c 	movw	r1, #43116	; 0xa86c
    9c1c:	f2c0 0101 	movt	r1, #1
    9c20:	f64a 037c 	movw	r3, #43132	; 0xa87c
    9c24:	f2c0 0301 	movt	r3, #1
    9c28:	220d      	movs	r2, #13
    9c2a:	9815      	ldr	r0, [sp, #84]	; 0x54
    9c2c:	f7fe fee3 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9c30:	e7ff      	b.n	9c32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
    9c32:	9816      	ldr	r0, [sp, #88]	; 0x58
    9c34:	f7ff fbbd 	bl	93b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
    9c38:	9014      	str	r0, [sp, #80]	; 0x50
    9c3a:	e7ff      	b.n	9c3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
    9c3c:	9814      	ldr	r0, [sp, #80]	; 0x50
    9c3e:	f000 0001 	and.w	r0, r0, #1
    9c42:	f7fe ff11 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c46:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    9c4a:	e7ff      	b.n	9c4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
    9c4c:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
    9c50:	07c1      	lsls	r1, r0, #31
    9c52:	2900      	cmp	r1, #0
    9c54:	d001      	beq.n	9c5a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
    9c56:	e7ff      	b.n	9c58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
    9c58:	e010      	b.n	9c7c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
    9c5a:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
    9c5c:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    9c60:	2000      	movs	r0, #0
    9c62:	901a      	str	r0, [sp, #104]	; 0x68
    9c64:	9019      	str	r0, [sp, #100]	; 0x64
    9c66:	9019      	str	r0, [sp, #100]	; 0x64
    9c68:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9c6a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9c6c:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    9c70:	9816      	ldr	r0, [sp, #88]	; 0x58
    9c72:	f7ff fd81 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9c76:	9013      	str	r0, [sp, #76]	; 0x4c
    9c78:	e00d      	b.n	9c96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
    9c7a:	defe      	udf	#254	; 0xfe
    9c7c:	f002 fda8 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c80:	e003      	b.n	9c8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
    9c82:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    9c86:	b076      	add	sp, #472	; 0x1d8
    9c88:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
    9c8a:	f006 fb90 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9c8e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9c92:	e7ff      	b.n	9c94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
    9c94:	e7f5      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
    9c96:	9813      	ldr	r0, [sp, #76]	; 0x4c
    9c98:	f000 0001 	and.w	r0, r0, #1
    9c9c:	f7fe fee4 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9ca0:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    9ca4:	e7ff      	b.n	9ca6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
    9ca6:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    9caa:	07c1      	lsls	r1, r0, #31
    9cac:	2900      	cmp	r1, #0
    9cae:	d001      	beq.n	9cb4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
    9cb0:	e7ff      	b.n	9cb2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
    9cb2:	e005      	b.n	9cc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
    9cb4:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    9cb6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9cb8:	f004 fcee 	bl	e698 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    9cbc:	e009      	b.n	9cd2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
    9cbe:	defe      	udf	#254	; 0xfe
    9cc0:	f002 fd86 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9cc4:	e7ff      	b.n	9cc6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
    9cc6:	f006 fb72 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9cca:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9cce:	e7ff      	b.n	9cd0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
    9cd0:	e7d7      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    9cd2:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
    9cd4:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    9cd8:	2000      	movs	r0, #0
    9cda:	901d      	str	r0, [sp, #116]	; 0x74
    9cdc:	901c      	str	r0, [sp, #112]	; 0x70
    9cde:	901c      	str	r0, [sp, #112]	; 0x70
    9ce0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9ce2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9ce4:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
    9ce8:	9816      	ldr	r0, [sp, #88]	; 0x58
    9cea:	f7ff fd45 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9cee:	9012      	str	r0, [sp, #72]	; 0x48
    9cf0:	e7ff      	b.n	9cf2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
    9cf2:	9812      	ldr	r0, [sp, #72]	; 0x48
    9cf4:	f000 0001 	and.w	r0, r0, #1
    9cf8:	f7fe feb6 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9cfc:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
    9d00:	e7ff      	b.n	9d02 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
    9d02:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
    9d06:	07c1      	lsls	r1, r0, #31
    9d08:	2900      	cmp	r1, #0
    9d0a:	d001      	beq.n	9d10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
    9d0c:	e7ff      	b.n	9d0e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
    9d0e:	e005      	b.n	9d1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
    9d10:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    9d12:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9d14:	f004 fcc0 	bl	e698 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    9d18:	e009      	b.n	9d2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
    9d1a:	defe      	udf	#254	; 0xfe
    9d1c:	f002 fd58 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d20:	e7ff      	b.n	9d22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
    9d22:	f006 fb44 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d26:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9d2a:	e7ff      	b.n	9d2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
    9d2c:	e7a9      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    9d2e:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    9d30:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    9d34:	f64a 0090 	movw	r0, #43152	; 0xa890
    9d38:	f2c0 0001 	movt	r0, #1
    9d3c:	6800      	ldr	r0, [r0, #0]
    9d3e:	901f      	str	r0, [sp, #124]	; 0x7c
    9d40:	2003      	movs	r0, #3
    9d42:	9020      	str	r0, [sp, #128]	; 0x80
    9d44:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9d46:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9d48:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    9d4c:	9816      	ldr	r0, [sp, #88]	; 0x58
    9d4e:	f7ff fd13 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9d52:	9011      	str	r0, [sp, #68]	; 0x44
    9d54:	e7ff      	b.n	9d56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
    9d56:	9811      	ldr	r0, [sp, #68]	; 0x44
    9d58:	f000 0001 	and.w	r0, r0, #1
    9d5c:	f7fe fe84 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d60:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    9d64:	e7ff      	b.n	9d66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
    9d66:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    9d6a:	07c1      	lsls	r1, r0, #31
    9d6c:	2900      	cmp	r1, #0
    9d6e:	d001      	beq.n	9d74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
    9d70:	e7ff      	b.n	9d72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
    9d72:	e014      	b.n	9d9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
    9d74:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9d76:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    9d7a:	f64a 0090 	movw	r0, #43152	; 0xa890
    9d7e:	f2c0 0001 	movt	r0, #1
    9d82:	6800      	ldr	r0, [r0, #0]
    9d84:	9022      	str	r0, [sp, #136]	; 0x88
    9d86:	2003      	movs	r0, #3
    9d88:	9023      	str	r0, [sp, #140]	; 0x8c
    9d8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9d8c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9d8e:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
    9d92:	9816      	ldr	r0, [sp, #88]	; 0x58
    9d94:	f7ff fcf0 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9d98:	9010      	str	r0, [sp, #64]	; 0x40
    9d9a:	e009      	b.n	9db0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    9d9c:	defe      	udf	#254	; 0xfe
    9d9e:	f002 fd17 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9da2:	e7ff      	b.n	9da4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
    9da4:	f006 fb03 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9da8:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9dac:	e7ff      	b.n	9dae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
    9dae:	e768      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9db0:	9810      	ldr	r0, [sp, #64]	; 0x40
    9db2:	f000 0001 	and.w	r0, r0, #1
    9db6:	f7fe fe57 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9dba:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
    9dbe:	e7ff      	b.n	9dc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
    9dc0:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
    9dc4:	07c1      	lsls	r1, r0, #31
    9dc6:	2900      	cmp	r1, #0
    9dc8:	d001      	beq.n	9dce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
    9dca:	e7ff      	b.n	9dcc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
    9dcc:	e014      	b.n	9df8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
    9dce:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
    9dd0:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    9dd4:	f64a 009c 	movw	r0, #43164	; 0xa89c
    9dd8:	f2c0 0001 	movt	r0, #1
    9ddc:	6800      	ldr	r0, [r0, #0]
    9dde:	9025      	str	r0, [sp, #148]	; 0x94
    9de0:	2006      	movs	r0, #6
    9de2:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
    9de4:	9a25      	ldr	r2, [sp, #148]	; 0x94
    9de6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9de8:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
    9dec:	9816      	ldr	r0, [sp, #88]	; 0x58
    9dee:	f7ff fcc3 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9df2:	900f      	str	r0, [sp, #60]	; 0x3c
    9df4:	e009      	b.n	9e0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9df6:	defe      	udf	#254	; 0xfe
    9df8:	f002 fcea 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9dfc:	e7ff      	b.n	9dfe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
    9dfe:	f006 fad6 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e02:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9e06:	e7ff      	b.n	9e08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
    9e08:	e73b      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
    9e0a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9e0c:	f000 0001 	and.w	r0, r0, #1
    9e10:	f7fe fe2a 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e14:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
    9e18:	e7ff      	b.n	9e1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    9e1a:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
    9e1e:	07c1      	lsls	r1, r0, #31
    9e20:	2900      	cmp	r1, #0
    9e22:	d001      	beq.n	9e28 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
    9e24:	e7ff      	b.n	9e26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
    9e26:	e014      	b.n	9e52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
    9e28:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    9e2a:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
    9e2e:	f64a 00a4 	movw	r0, #43172	; 0xa8a4
    9e32:	f2c0 0001 	movt	r0, #1
    9e36:	6800      	ldr	r0, [r0, #0]
    9e38:	9028      	str	r0, [sp, #160]	; 0xa0
    9e3a:	2001      	movs	r0, #1
    9e3c:	9029      	str	r0, [sp, #164]	; 0xa4
    9e3e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    9e40:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    9e42:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
    9e46:	9816      	ldr	r0, [sp, #88]	; 0x58
    9e48:	f7ff fc96 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e4c:	900e      	str	r0, [sp, #56]	; 0x38
    9e4e:	e009      	b.n	9e64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
    9e50:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    9e52:	f002 fcbd 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e56:	e7ff      	b.n	9e58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
    9e58:	f006 faa9 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e5c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9e60:	e7ff      	b.n	9e62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
    9e62:	e70e      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    9e64:	980e      	ldr	r0, [sp, #56]	; 0x38
    9e66:	f000 0001 	and.w	r0, r0, #1
    9e6a:	f7fe fdfd 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e6e:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
    9e72:	e7ff      	b.n	9e74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
    9e74:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
    9e78:	07c1      	lsls	r1, r0, #31
    9e7a:	2900      	cmp	r1, #0
    9e7c:	d001      	beq.n	9e82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
    9e7e:	e7ff      	b.n	9e80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
    9e80:	e014      	b.n	9eac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
    9e82:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    9e84:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
    9e88:	f64a 00ac 	movw	r0, #43180	; 0xa8ac
    9e8c:	f2c0 0001 	movt	r0, #1
    9e90:	6800      	ldr	r0, [r0, #0]
    9e92:	902b      	str	r0, [sp, #172]	; 0xac
    9e94:	2003      	movs	r0, #3
    9e96:	902c      	str	r0, [sp, #176]	; 0xb0
    9e98:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    9e9a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    9e9c:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
    9ea0:	9816      	ldr	r0, [sp, #88]	; 0x58
    9ea2:	f7ff fc69 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9ea6:	900d      	str	r0, [sp, #52]	; 0x34
    9ea8:	e009      	b.n	9ebe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    9eaa:	defe      	udf	#254	; 0xfe
    9eac:	f002 fc90 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9eb0:	e7ff      	b.n	9eb2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
    9eb2:	f006 fa7c 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9eb6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9eba:	e7ff      	b.n	9ebc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
    9ebc:	e6e1      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    9ebe:	980d      	ldr	r0, [sp, #52]	; 0x34
    9ec0:	f000 0001 	and.w	r0, r0, #1
    9ec4:	f7fe fdd0 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9ec8:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
    9ecc:	e7ff      	b.n	9ece <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
    9ece:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
    9ed2:	07c1      	lsls	r1, r0, #31
    9ed4:	2900      	cmp	r1, #0
    9ed6:	d001      	beq.n	9edc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
    9ed8:	e7ff      	b.n	9eda <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
    9eda:	e014      	b.n	9f06 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
    9edc:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    9ede:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
    9ee2:	f64a 00b4 	movw	r0, #43188	; 0xa8b4
    9ee6:	f2c0 0001 	movt	r0, #1
    9eea:	6800      	ldr	r0, [r0, #0]
    9eec:	902e      	str	r0, [sp, #184]	; 0xb8
    9eee:	2001      	movs	r0, #1
    9ef0:	902f      	str	r0, [sp, #188]	; 0xbc
    9ef2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    9ef4:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    9ef6:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
    9efa:	9816      	ldr	r0, [sp, #88]	; 0x58
    9efc:	f7ff fc3c 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f00:	900c      	str	r0, [sp, #48]	; 0x30
    9f02:	e009      	b.n	9f18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    9f04:	defe      	udf	#254	; 0xfe
    9f06:	f002 fc63 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f0a:	e7ff      	b.n	9f0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
    9f0c:	f006 fa4f 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9f10:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9f14:	e7ff      	b.n	9f16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
    9f16:	e6b4      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    9f18:	980c      	ldr	r0, [sp, #48]	; 0x30
    9f1a:	f000 0001 	and.w	r0, r0, #1
    9f1e:	f7fe fda3 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f22:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
    9f26:	e7ff      	b.n	9f28 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
    9f28:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
    9f2c:	07c1      	lsls	r1, r0, #31
    9f2e:	2900      	cmp	r1, #0
    9f30:	d001      	beq.n	9f36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
    9f32:	e7ff      	b.n	9f34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
    9f34:	e014      	b.n	9f60 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
    9f36:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    9f38:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
    9f3c:	f64a 00bc 	movw	r0, #43196	; 0xa8bc
    9f40:	f2c0 0001 	movt	r0, #1
    9f44:	6800      	ldr	r0, [r0, #0]
    9f46:	9031      	str	r0, [sp, #196]	; 0xc4
    9f48:	2002      	movs	r0, #2
    9f4a:	9032      	str	r0, [sp, #200]	; 0xc8
    9f4c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    9f4e:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    9f50:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
    9f54:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f56:	f7ff fc0f 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f5a:	900b      	str	r0, [sp, #44]	; 0x2c
    9f5c:	e009      	b.n	9f72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    9f5e:	defe      	udf	#254	; 0xfe
    9f60:	f002 fc36 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f64:	e7ff      	b.n	9f66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
    9f66:	f006 fa22 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9f6a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9f6e:	e7ff      	b.n	9f70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
    9f70:	e687      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    9f72:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9f74:	f000 0001 	and.w	r0, r0, #1
    9f78:	f7fe fd76 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f7c:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
    9f80:	e7ff      	b.n	9f82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
    9f82:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
    9f86:	07c1      	lsls	r1, r0, #31
    9f88:	2900      	cmp	r1, #0
    9f8a:	d001      	beq.n	9f90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
    9f8c:	e7ff      	b.n	9f8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
    9f8e:	e014      	b.n	9fba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
    9f90:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    9f92:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
    9f96:	f64a 00c4 	movw	r0, #43204	; 0xa8c4
    9f9a:	f2c0 0001 	movt	r0, #1
    9f9e:	6800      	ldr	r0, [r0, #0]
    9fa0:	9034      	str	r0, [sp, #208]	; 0xd0
    9fa2:	2002      	movs	r0, #2
    9fa4:	9035      	str	r0, [sp, #212]	; 0xd4
    9fa6:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    9fa8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    9faa:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
    9fae:	9816      	ldr	r0, [sp, #88]	; 0x58
    9fb0:	f7ff fbe2 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9fb4:	900a      	str	r0, [sp, #40]	; 0x28
    9fb6:	e009      	b.n	9fcc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    9fb8:	defe      	udf	#254	; 0xfe
    9fba:	f002 fc09 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9fbe:	e7ff      	b.n	9fc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
    9fc0:	f006 f9f5 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9fc4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9fc8:	e7ff      	b.n	9fca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
    9fca:	e65a      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    9fcc:	980a      	ldr	r0, [sp, #40]	; 0x28
    9fce:	f000 0001 	and.w	r0, r0, #1
    9fd2:	f7fe fd49 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9fd6:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
    9fda:	e7ff      	b.n	9fdc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
    9fdc:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
    9fe0:	07c1      	lsls	r1, r0, #31
    9fe2:	2900      	cmp	r1, #0
    9fe4:	d001      	beq.n	9fea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
    9fe6:	e7ff      	b.n	9fe8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
    9fe8:	e014      	b.n	a014 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
    9fea:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    9fec:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
    9ff0:	f64a 00cc 	movw	r0, #43212	; 0xa8cc
    9ff4:	f2c0 0001 	movt	r0, #1
    9ff8:	6800      	ldr	r0, [r0, #0]
    9ffa:	9037      	str	r0, [sp, #220]	; 0xdc
    9ffc:	2002      	movs	r0, #2
    9ffe:	9038      	str	r0, [sp, #224]	; 0xe0
    a000:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    a002:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    a004:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
    a008:	9816      	ldr	r0, [sp, #88]	; 0x58
    a00a:	f7ff fbb5 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a00e:	9009      	str	r0, [sp, #36]	; 0x24
    a010:	e009      	b.n	a026 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    a012:	defe      	udf	#254	; 0xfe
    a014:	f002 fbdc 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a018:	e7ff      	b.n	a01a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
    a01a:	f006 f9c8 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a01e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a022:	e7ff      	b.n	a024 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
    a024:	e62d      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a026:	9809      	ldr	r0, [sp, #36]	; 0x24
    a028:	f000 0001 	and.w	r0, r0, #1
    a02c:	f7fe fd1c 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a030:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
    a034:	e7ff      	b.n	a036 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
    a036:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
    a03a:	07c1      	lsls	r1, r0, #31
    a03c:	2900      	cmp	r1, #0
    a03e:	d001      	beq.n	a044 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
    a040:	e7ff      	b.n	a042 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
    a042:	e014      	b.n	a06e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
    a044:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a046:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
    a04a:	f64a 00d4 	movw	r0, #43220	; 0xa8d4
    a04e:	f2c0 0001 	movt	r0, #1
    a052:	6800      	ldr	r0, [r0, #0]
    a054:	903a      	str	r0, [sp, #232]	; 0xe8
    a056:	2001      	movs	r0, #1
    a058:	903b      	str	r0, [sp, #236]	; 0xec
    a05a:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    a05c:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    a05e:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
    a062:	9816      	ldr	r0, [sp, #88]	; 0x58
    a064:	f7ff fb88 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a068:	9008      	str	r0, [sp, #32]
    a06a:	e009      	b.n	a080 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    a06c:	defe      	udf	#254	; 0xfe
    a06e:	f002 fbaf 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a072:	e7ff      	b.n	a074 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
    a074:	f006 f99b 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a078:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a07c:	e7ff      	b.n	a07e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
    a07e:	e600      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a080:	9808      	ldr	r0, [sp, #32]
    a082:	f000 0001 	and.w	r0, r0, #1
    a086:	f7fe fcef 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a08a:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
    a08e:	e7ff      	b.n	a090 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
    a090:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
    a094:	07c1      	lsls	r1, r0, #31
    a096:	2900      	cmp	r1, #0
    a098:	d001      	beq.n	a09e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
    a09a:	e7ff      	b.n	a09c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
    a09c:	e006      	b.n	a0ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
    a09e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0a0:	7d41      	ldrb	r1, [r0, #21]
    a0a2:	07c9      	lsls	r1, r1, #31
    a0a4:	2900      	cmp	r1, #0
    a0a6:	d11a      	bne.n	a0de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
    a0a8:	e009      	b.n	a0be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a0aa:	defe      	udf	#254	; 0xfe
    a0ac:	f002 fb90 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a0b0:	e7ff      	b.n	a0b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
    a0b2:	f006 f97c 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a0b6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a0ba:	e7ff      	b.n	a0bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
    a0bc:	e5e1      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a0be:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
    a0c0:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    a0c4:	2000      	movs	r0, #0
    a0c6:	9041      	str	r0, [sp, #260]	; 0x104
    a0c8:	9040      	str	r0, [sp, #256]	; 0x100
    a0ca:	9040      	str	r0, [sp, #256]	; 0x100
    a0cc:	9a40      	ldr	r2, [sp, #256]	; 0x100
    a0ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
    a0d0:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
    a0d4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0d6:	f7ff fb4f 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0da:	9007      	str	r0, [sp, #28]
    a0dc:	e02a      	b.n	a134 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
    a0de:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
    a0e0:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    a0e4:	2000      	movs	r0, #0
    a0e6:	903e      	str	r0, [sp, #248]	; 0xf8
    a0e8:	903d      	str	r0, [sp, #244]	; 0xf4
    a0ea:	903d      	str	r0, [sp, #244]	; 0xf4
    a0ec:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    a0ee:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    a0f0:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
    a0f4:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0f6:	f7ff fb3f 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0fa:	9006      	str	r0, [sp, #24]
    a0fc:	e7ff      	b.n	a0fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
    a0fe:	9806      	ldr	r0, [sp, #24]
    a100:	f000 0001 	and.w	r0, r0, #1
    a104:	f7fe fcb0 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a108:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
    a10c:	e7ff      	b.n	a10e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
    a10e:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
    a112:	07c1      	lsls	r1, r0, #31
    a114:	2900      	cmp	r1, #0
    a116:	d001      	beq.n	a11c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
    a118:	e7ff      	b.n	a11a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
    a11a:	e001      	b.n	a120 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
    a11c:	e024      	b.n	a168 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
    a11e:	defe      	udf	#254	; 0xfe
    a120:	f002 fb56 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a124:	e7ff      	b.n	a126 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
    a126:	f006 f942 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a12a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a12e:	e7ff      	b.n	a130 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
    a130:	e7ff      	b.n	a132 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
    a132:	e5a6      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
    a134:	9807      	ldr	r0, [sp, #28]
    a136:	f000 0001 	and.w	r0, r0, #1
    a13a:	f7fe fc95 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a13e:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
    a142:	e7ff      	b.n	a144 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
    a144:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
    a148:	07c1      	lsls	r1, r0, #31
    a14a:	2900      	cmp	r1, #0
    a14c:	d001      	beq.n	a152 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
    a14e:	e7ff      	b.n	a150 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
    a150:	e001      	b.n	a156 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
    a152:	e009      	b.n	a168 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
    a154:	defe      	udf	#254	; 0xfe
    a156:	f002 fb3b 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a15a:	e7ff      	b.n	a15c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
    a15c:	f006 f927 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a160:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a164:	e7ff      	b.n	a166 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
    a166:	e7e4      	b.n	a132 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
    a168:	9816      	ldr	r0, [sp, #88]	; 0x58
    a16a:	7d01      	ldrb	r1, [r0, #20]
    a16c:	07c9      	lsls	r1, r1, #31
    a16e:	2900      	cmp	r1, #0
    a170:	d114      	bne.n	a19c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
    a172:	e7ff      	b.n	a174 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
    a174:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a176:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    a17a:	f64a 00e4 	movw	r0, #43236	; 0xa8e4
    a17e:	f2c0 0001 	movt	r0, #1
    a182:	6800      	ldr	r0, [r0, #0]
    a184:	9046      	str	r0, [sp, #280]	; 0x118
    a186:	2001      	movs	r0, #1
    a188:	9047      	str	r0, [sp, #284]	; 0x11c
    a18a:	9a46      	ldr	r2, [sp, #280]	; 0x118
    a18c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a18e:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
    a192:	9816      	ldr	r0, [sp, #88]	; 0x58
    a194:	f7ff faf0 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a198:	9005      	str	r0, [sp, #20]
    a19a:	e02e      	b.n	a1fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
    a19c:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a19e:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
    a1a2:	f64a 00dc 	movw	r0, #43228	; 0xa8dc
    a1a6:	f2c0 0001 	movt	r0, #1
    a1aa:	6800      	ldr	r0, [r0, #0]
    a1ac:	9043      	str	r0, [sp, #268]	; 0x10c
    a1ae:	2001      	movs	r0, #1
    a1b0:	9044      	str	r0, [sp, #272]	; 0x110
    a1b2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a1b4:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a1b6:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
    a1ba:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1bc:	f7ff fadc 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1c0:	9004      	str	r0, [sp, #16]
    a1c2:	e7ff      	b.n	a1c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
    a1c4:	9804      	ldr	r0, [sp, #16]
    a1c6:	f000 0001 	and.w	r0, r0, #1
    a1ca:	f7fe fc4d 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a1ce:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
    a1d2:	e7ff      	b.n	a1d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
    a1d4:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
    a1d8:	07c1      	lsls	r1, r0, #31
    a1da:	2900      	cmp	r1, #0
    a1dc:	d001      	beq.n	a1e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
    a1de:	e7ff      	b.n	a1e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
    a1e0:	e001      	b.n	a1e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
    a1e2:	e024      	b.n	a22e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a1e4:	defe      	udf	#254	; 0xfe
    a1e6:	f002 faf3 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a1ea:	e7ff      	b.n	a1ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
    a1ec:	f006 f8df 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a1f0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a1f4:	e7ff      	b.n	a1f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
    a1f6:	e7ff      	b.n	a1f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a1f8:	e543      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a1fa:	9805      	ldr	r0, [sp, #20]
    a1fc:	f000 0001 	and.w	r0, r0, #1
    a200:	f7fe fc32 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a204:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
    a208:	e7ff      	b.n	a20a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
    a20a:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    a20e:	07c1      	lsls	r1, r0, #31
    a210:	2900      	cmp	r1, #0
    a212:	d001      	beq.n	a218 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
    a214:	e7ff      	b.n	a216 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
    a216:	e001      	b.n	a21c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
    a218:	e009      	b.n	a22e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a21a:	defe      	udf	#254	; 0xfe
    a21c:	f002 fad8 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a220:	e7ff      	b.n	a222 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
    a222:	f006 f8c4 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a226:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a22a:	e7ff      	b.n	a22c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
    a22c:	e7e4      	b.n	a1f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a22e:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a230:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
    a234:	f64a 00ec 	movw	r0, #43244	; 0xa8ec
    a238:	f2c0 0001 	movt	r0, #1
    a23c:	6800      	ldr	r0, [r0, #0]
    a23e:	9049      	str	r0, [sp, #292]	; 0x124
    a240:	2001      	movs	r0, #1
    a242:	904a      	str	r0, [sp, #296]	; 0x128
    a244:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a246:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    a248:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
    a24c:	9816      	ldr	r0, [sp, #88]	; 0x58
    a24e:	f7ff fa93 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a252:	9003      	str	r0, [sp, #12]
    a254:	e7ff      	b.n	a256 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
    a256:	9803      	ldr	r0, [sp, #12]
    a258:	f000 0001 	and.w	r0, r0, #1
    a25c:	f7fe fc04 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a260:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
    a264:	e7ff      	b.n	a266 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
    a266:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
    a26a:	07c1      	lsls	r1, r0, #31
    a26c:	2900      	cmp	r1, #0
    a26e:	d001      	beq.n	a274 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
    a270:	e7ff      	b.n	a272 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
    a272:	e010      	b.n	a296 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
    a274:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
    a276:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
    a27a:	2000      	movs	r0, #0
    a27c:	904d      	str	r0, [sp, #308]	; 0x134
    a27e:	904c      	str	r0, [sp, #304]	; 0x130
    a280:	904c      	str	r0, [sp, #304]	; 0x130
    a282:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    a284:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    a286:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
    a28a:	9816      	ldr	r0, [sp, #88]	; 0x58
    a28c:	f7ff fa74 	bl	9778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a290:	9002      	str	r0, [sp, #8]
    a292:	e009      	b.n	a2a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a294:	defe      	udf	#254	; 0xfe
    a296:	f002 fa9b 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a29a:	e7ff      	b.n	a29c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
    a29c:	f006 f887 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2a0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a2a4:	e7ff      	b.n	a2a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
    a2a6:	e4ec      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
    a2a8:	9802      	ldr	r0, [sp, #8]
    a2aa:	f000 0001 	and.w	r0, r0, #1
    a2ae:	f7fe fbdb 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a2b2:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
    a2b6:	e7ff      	b.n	a2b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
    a2b8:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
    a2bc:	07c1      	lsls	r1, r0, #31
    a2be:	2900      	cmp	r1, #0
    a2c0:	d001      	beq.n	a2c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
    a2c2:	e7ff      	b.n	a2c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
    a2c4:	e005      	b.n	a2d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
    a2c6:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a2c8:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a2ca:	f004 f9e5 	bl	e698 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a2ce:	e009      	b.n	a2e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
    a2d0:	defe      	udf	#254	; 0xfe
    a2d2:	f002 fa7d 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a2d6:	e7ff      	b.n	a2d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
    a2d8:	f006 f869 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a2dc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a2e0:	e7ff      	b.n	a2e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
    a2e2:	e4ce      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    a2e4:	f003 fa13 	bl	d70e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    a2e8:	9001      	str	r0, [sp, #4]
    a2ea:	e7ff      	b.n	a2ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
    a2ec:	f24a 7108 	movw	r1, #42760	; 0xa708
    a2f0:	f2c0 0101 	movt	r1, #1
    a2f4:	f64a 03f0 	movw	r3, #43248	; 0xa8f0
    a2f8:	f2c0 0301 	movt	r3, #1
    a2fc:	220e      	movs	r2, #14
    a2fe:	9801      	ldr	r0, [sp, #4]
    a300:	f7fe fb79 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a304:	e7ff      	b.n	a306 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
    a306:	2000      	movs	r0, #0
        Ok(())
    a308:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
    a30c:	e4b9      	b.n	9c82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

0000a30e <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
    a30e:	b580      	push	{r7, lr}
    a310:	b08a      	sub	sp, #40	; 0x28
    a312:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    a314:	f000 fab9 	bl	a88a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
    a318:	9307      	str	r3, [sp, #28]
    a31a:	9206      	str	r2, [sp, #24]
    a31c:	9105      	str	r1, [sp, #20]
    a31e:	9004      	str	r0, [sp, #16]
    a320:	e7ff      	b.n	a322 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
    a322:	a804      	add	r0, sp, #16
    a324:	f005 f913 	bl	f54e <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    a328:	9003      	str	r0, [sp, #12]
    a32a:	e7ff      	b.n	a32c <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
    a32c:	9803      	ldr	r0, [sp, #12]
    a32e:	f005 f9e1 	bl	f6f4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    a332:	9002      	str	r0, [sp, #8]
    a334:	9101      	str	r1, [sp, #4]
    a336:	e7ff      	b.n	a338 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
    a338:	9802      	ldr	r0, [sp, #8]
    a33a:	f000 0001 	and.w	r0, r0, #1
    a33e:	9901      	ldr	r1, [sp, #4]
    a340:	b00a      	add	sp, #40	; 0x28
    a342:	bd80      	pop	{r7, pc}

0000a344 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
    a344:	b082      	sub	sp, #8
    a346:	4601      	mov	r1, r0
    a348:	f8ad 0004 	strh.w	r0, [sp, #4]
    a34c:	ba00      	rev	r0, r0
    a34e:	0c00      	lsrs	r0, r0, #16
    a350:	f8ad 0006 	strh.w	r0, [sp, #6]
    a354:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a358:	9000      	str	r0, [sp, #0]
    a35a:	e7ff      	b.n	a35c <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
    a35c:	9800      	ldr	r0, [sp, #0]
    a35e:	b002      	add	sp, #8
    a360:	4770      	bx	lr

0000a362 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
    a362:	b580      	push	{r7, lr}
    a364:	b084      	sub	sp, #16
    a366:	4601      	mov	r1, r0
    a368:	f8ad 000e 	strh.w	r0, [sp, #14]
    a36c:	9102      	str	r1, [sp, #8]
    a36e:	f7ff ffe9 	bl	a344 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
    a372:	9001      	str	r0, [sp, #4]
    a374:	e7ff      	b.n	a376 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
    a376:	9801      	ldr	r0, [sp, #4]
    a378:	b004      	add	sp, #16
    a37a:	bd80      	pop	{r7, pc}

0000a37c <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
    a37c:	b580      	push	{r7, lr}
    a37e:	b084      	sub	sp, #16
    a380:	9002      	str	r0, [sp, #8]
    a382:	9802      	ldr	r0, [sp, #8]
    a384:	f005 f847 	bl	f416 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
    a388:	9001      	str	r0, [sp, #4]
    a38a:	9100      	str	r1, [sp, #0]
    a38c:	e7ff      	b.n	a38e <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
    a38e:	9801      	ldr	r0, [sp, #4]
    a390:	f000 0001 	and.w	r0, r0, #1
    a394:	9900      	ldr	r1, [sp, #0]
    a396:	b004      	add	sp, #16
    a398:	bd80      	pop	{r7, pc}

0000a39a <_ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE>:
    a39a:	b081      	sub	sp, #4
    a39c:	9000      	str	r0, [sp, #0]
    a39e:	b001      	add	sp, #4
    a3a0:	4770      	bx	lr

0000a3a2 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>:
    a3a2:	b580      	push	{r7, lr}
    a3a4:	b082      	sub	sp, #8
    a3a6:	9001      	str	r0, [sp, #4]
    a3a8:	f000 f83e 	bl	a428 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a3ac:	e7ff      	b.n	a3ae <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE+0xc>
    a3ae:	b002      	add	sp, #8
    a3b0:	bd80      	pop	{r7, pc}

0000a3b2 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>:
    a3b2:	b580      	push	{r7, lr}
    a3b4:	b082      	sub	sp, #8
    a3b6:	9001      	str	r0, [sp, #4]
    a3b8:	6801      	ldr	r1, [r0, #0]
    a3ba:	2900      	cmp	r1, #0
    a3bc:	9000      	str	r0, [sp, #0]
    a3be:	d102      	bne.n	a3c6 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x14>
    a3c0:	e7ff      	b.n	a3c2 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>
    a3c2:	b002      	add	sp, #8
    a3c4:	bd80      	pop	{r7, pc}
    a3c6:	9800      	ldr	r0, [sp, #0]
    a3c8:	3004      	adds	r0, #4
    a3ca:	f7ff ffea 	bl	a3a2 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>
    a3ce:	e7f8      	b.n	a3c2 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>

0000a3d0 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>:
    a3d0:	b580      	push	{r7, lr}
    a3d2:	b082      	sub	sp, #8
    a3d4:	9001      	str	r0, [sp, #4]
    a3d6:	f005 fa79 	bl	f8cc <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>
    a3da:	e7ff      	b.n	a3dc <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE+0xc>
    a3dc:	b002      	add	sp, #8
    a3de:	bd80      	pop	{r7, pc}

0000a3e0 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>:
    a3e0:	b580      	push	{r7, lr}
    a3e2:	b082      	sub	sp, #8
    a3e4:	9001      	str	r0, [sp, #4]
    a3e6:	3024      	adds	r0, #36	; 0x24
    a3e8:	f000 f81e 	bl	a428 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    a3ec:	e7ff      	b.n	a3ee <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E+0xe>
    a3ee:	b002      	add	sp, #8
    a3f0:	bd80      	pop	{r7, pc}

0000a3f2 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>:
    a3f2:	b580      	push	{r7, lr}
    a3f4:	b082      	sub	sp, #8
    a3f6:	9001      	str	r0, [sp, #4]
    a3f8:	9000      	str	r0, [sp, #0]
    a3fa:	f7ff fff1 	bl	a3e0 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>
    a3fe:	e001      	b.n	a404 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0x12>
    a400:	b002      	add	sp, #8
    a402:	bd80      	pop	{r7, pc}
    a404:	9800      	ldr	r0, [sp, #0]
    a406:	3090      	adds	r0, #144	; 0x90
    a408:	f7ff ffe2 	bl	a3d0 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a40c:	e7f8      	b.n	a400 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0xe>

0000a40e <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>:
    a40e:	b580      	push	{r7, lr}
    a410:	b082      	sub	sp, #8
    a412:	9001      	str	r0, [sp, #4]
    a414:	9000      	str	r0, [sp, #0]
    a416:	f005 fa81 	bl	f91c <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>
    a41a:	e001      	b.n	a420 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0x12>
    a41c:	b002      	add	sp, #8
    a41e:	bd80      	pop	{r7, pc}
    a420:	9800      	ldr	r0, [sp, #0]
    a422:	f7ff ffd5 	bl	a3d0 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a426:	e7f9      	b.n	a41c <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0xe>

0000a428 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>:
    a428:	b580      	push	{r7, lr}
    a42a:	b082      	sub	sp, #8
    a42c:	9001      	str	r0, [sp, #4]
    a42e:	f005 fa3d 	bl	f8ac <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>
    a432:	e7ff      	b.n	a434 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E+0xc>
    a434:	b002      	add	sp, #8
    a436:	bd80      	pop	{r7, pc}

0000a438 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>:
    a438:	b580      	push	{r7, lr}
    a43a:	b082      	sub	sp, #8
    a43c:	9001      	str	r0, [sp, #4]
    a43e:	6801      	ldr	r1, [r0, #0]
    a440:	2900      	cmp	r1, #0
    a442:	9000      	str	r0, [sp, #0]
    a444:	d102      	bne.n	a44c <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x14>
    a446:	e7ff      	b.n	a448 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>
    a448:	b002      	add	sp, #8
    a44a:	bd80      	pop	{r7, pc}
    a44c:	9800      	ldr	r0, [sp, #0]
    a44e:	3004      	adds	r0, #4
    a450:	f000 f805 	bl	a45e <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>
    a454:	e7f8      	b.n	a448 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>

0000a456 <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
    a456:	b081      	sub	sp, #4
    a458:	9000      	str	r0, [sp, #0]
    a45a:	b001      	add	sp, #4
    a45c:	4770      	bx	lr

0000a45e <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>:
    a45e:	b580      	push	{r7, lr}
    a460:	b082      	sub	sp, #8
    a462:	9001      	str	r0, [sp, #4]
    a464:	f7ff ffb4 	bl	a3d0 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    a468:	e7ff      	b.n	a46a <_ZN4core3ptr13drop_in_place17hf625580841d3425eE+0xc>
    a46a:	b002      	add	sp, #8
    a46c:	bd80      	pop	{r7, pc}

0000a46e <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h526d0e5e5afce60aE>:
    a46e:	b580      	push	{r7, lr}
    a470:	b08a      	sub	sp, #40	; 0x28
    a472:	9004      	str	r0, [sp, #16]
    a474:	9105      	str	r1, [sp, #20]
    a476:	9008      	str	r0, [sp, #32]
    a478:	9109      	str	r1, [sp, #36]	; 0x24
    a47a:	9006      	str	r0, [sp, #24]
    a47c:	9107      	str	r1, [sp, #28]
    a47e:	9806      	ldr	r0, [sp, #24]
    a480:	9907      	ldr	r1, [sp, #28]
    a482:	9003      	str	r0, [sp, #12]
    a484:	9102      	str	r1, [sp, #8]
    a486:	e7ff      	b.n	a488 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h526d0e5e5afce60aE+0x1a>
    a488:	9803      	ldr	r0, [sp, #12]
    a48a:	9902      	ldr	r1, [sp, #8]
    a48c:	f002 f94a 	bl	c724 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    a490:	9001      	str	r0, [sp, #4]
    a492:	e7ff      	b.n	a494 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h526d0e5e5afce60aE+0x26>
    a494:	9801      	ldr	r0, [sp, #4]
    a496:	b00a      	add	sp, #40	; 0x28
    a498:	bd80      	pop	{r7, pc}

0000a49a <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h5612c26d24354453E>:
    a49a:	b580      	push	{r7, lr}
    a49c:	b08c      	sub	sp, #48	; 0x30
    a49e:	9006      	str	r0, [sp, #24]
    a4a0:	9107      	str	r1, [sp, #28]
    a4a2:	900a      	str	r0, [sp, #40]	; 0x28
    a4a4:	910b      	str	r1, [sp, #44]	; 0x2c
    a4a6:	9008      	str	r0, [sp, #32]
    a4a8:	9109      	str	r1, [sp, #36]	; 0x24
    a4aa:	9808      	ldr	r0, [sp, #32]
    a4ac:	9909      	ldr	r1, [sp, #36]	; 0x24
    a4ae:	9003      	str	r0, [sp, #12]
    a4b0:	9102      	str	r1, [sp, #8]
    a4b2:	e7ff      	b.n	a4b4 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h5612c26d24354453E+0x1a>
    a4b4:	9803      	ldr	r0, [sp, #12]
    a4b6:	9902      	ldr	r1, [sp, #8]
    a4b8:	f004 fa59 	bl	e96e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE>
    a4bc:	9001      	str	r0, [sp, #4]
    a4be:	9100      	str	r1, [sp, #0]
    a4c0:	e7ff      	b.n	a4c2 <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h5612c26d24354453E+0x28>
    a4c2:	9801      	ldr	r0, [sp, #4]
    a4c4:	9004      	str	r0, [sp, #16]
    a4c6:	9900      	ldr	r1, [sp, #0]
    a4c8:	9105      	str	r1, [sp, #20]
    a4ca:	9804      	ldr	r0, [sp, #16]
    a4cc:	9905      	ldr	r1, [sp, #20]
    a4ce:	b00c      	add	sp, #48	; 0x30
    a4d0:	bd80      	pop	{r7, pc}

0000a4d2 <_ZN75_$LT$core..str..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h90c7de42971d7e48E>:
    a4d2:	b580      	push	{r7, lr}
    a4d4:	b084      	sub	sp, #16
    a4d6:	9003      	str	r0, [sp, #12]
    a4d8:	f004 f983 	bl	e7e2 <_ZN4core3str15next_code_point17h3f90b08743d448d4E>
    a4dc:	9002      	str	r0, [sp, #8]
    a4de:	9101      	str	r1, [sp, #4]
    a4e0:	e7ff      	b.n	a4e2 <_ZN75_$LT$core..str..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h90c7de42971d7e48E+0x10>
    a4e2:	9802      	ldr	r0, [sp, #8]
    a4e4:	9901      	ldr	r1, [sp, #4]
    a4e6:	f004 fa8a 	bl	e9fe <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E>
    a4ea:	9000      	str	r0, [sp, #0]
    a4ec:	e7ff      	b.n	a4ee <_ZN75_$LT$core..str..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h90c7de42971d7e48E+0x1c>
    a4ee:	9800      	ldr	r0, [sp, #0]
    a4f0:	b004      	add	sp, #16
    a4f2:	bd80      	pop	{r7, pc}

0000a4f4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
    a4f4:	b08a      	sub	sp, #40	; 0x28
    a4f6:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
    a4f8:	7800      	ldrb	r0, [r0, #0]
    a4fa:	9001      	str	r0, [sp, #4]
    a4fc:	9901      	ldr	r1, [sp, #4]
    a4fe:	e8df f011 	tbh	[pc, r1, lsl #1]
    a502:	0103      	.short	0x0103
    a504:	01020107 	.word	0x01020107
    a508:	010c0102 	.word	0x010c0102
    a50c:	01020102 	.word	0x01020102
    a510:	01020102 	.word	0x01020102
    a514:	01020111 	.word	0x01020111
    a518:	01020102 	.word	0x01020102
    a51c:	01020102 	.word	0x01020102
    a520:	01160102 	.word	0x01160102
    a524:	0120011b 	.word	0x0120011b
    a528:	01020125 	.word	0x01020125
    a52c:	01020102 	.word	0x01020102
    a530:	01020102 	.word	0x01020102
    a534:	01020102 	.word	0x01020102
    a538:	01020102 	.word	0x01020102
    a53c:	01020102 	.word	0x01020102
    a540:	012a0102 	.word	0x012a0102
    a544:	0102012f 	.word	0x0102012f
    a548:	01020102 	.word	0x01020102
    a54c:	01020102 	.word	0x01020102
    a550:	01340102 	.word	0x01340102
    a554:	013e0139 	.word	0x013e0139
    a558:	01480143 	.word	0x01480143
    a55c:	014d0102 	.word	0x014d0102
    a560:	01520102 	.word	0x01520102
    a564:	01020102 	.word	0x01020102
    a568:	01020102 	.word	0x01020102
    a56c:	015c0102 	.word	0x015c0102
    a570:	01020102 	.word	0x01020102
    a574:	01570102 	.word	0x01570102
    a578:	01020102 	.word	0x01020102
    a57c:	01020102 	.word	0x01020102
    a580:	01020102 	.word	0x01020102
    a584:	01020102 	.word	0x01020102
    a588:	01020102 	.word	0x01020102
    a58c:	01020102 	.word	0x01020102
    a590:	01020102 	.word	0x01020102
    a594:	01020102 	.word	0x01020102
    a598:	01020102 	.word	0x01020102
    a59c:	01020102 	.word	0x01020102
    a5a0:	01020102 	.word	0x01020102
    a5a4:	01020102 	.word	0x01020102
    a5a8:	01020102 	.word	0x01020102
    a5ac:	01020102 	.word	0x01020102
    a5b0:	01020102 	.word	0x01020102
    a5b4:	01020102 	.word	0x01020102
    a5b8:	01020102 	.word	0x01020102
    a5bc:	01020102 	.word	0x01020102
    a5c0:	01020102 	.word	0x01020102
    a5c4:	01020102 	.word	0x01020102
    a5c8:	01020102 	.word	0x01020102
    a5cc:	01020102 	.word	0x01020102
    a5d0:	01020102 	.word	0x01020102
    a5d4:	01020102 	.word	0x01020102
    a5d8:	01020102 	.word	0x01020102
    a5dc:	01020102 	.word	0x01020102
    a5e0:	01020102 	.word	0x01020102
    a5e4:	01020102 	.word	0x01020102
    a5e8:	01020102 	.word	0x01020102
    a5ec:	01020102 	.word	0x01020102
    a5f0:	01020102 	.word	0x01020102
    a5f4:	01020102 	.word	0x01020102
    a5f8:	01020102 	.word	0x01020102
    a5fc:	01020102 	.word	0x01020102
    a600:	01020102 	.word	0x01020102
    a604:	01020102 	.word	0x01020102
    a608:	01020102 	.word	0x01020102
    a60c:	01020102 	.word	0x01020102
    a610:	01020102 	.word	0x01020102
    a614:	01020102 	.word	0x01020102
    a618:	01020102 	.word	0x01020102
    a61c:	01020102 	.word	0x01020102
    a620:	01020102 	.word	0x01020102
    a624:	01020102 	.word	0x01020102
    a628:	01020102 	.word	0x01020102
    a62c:	01020102 	.word	0x01020102
    a630:	01020102 	.word	0x01020102
    a634:	01020102 	.word	0x01020102
    a638:	01020102 	.word	0x01020102
    a63c:	01020102 	.word	0x01020102
    a640:	01020102 	.word	0x01020102
    a644:	01020102 	.word	0x01020102
    a648:	01020102 	.word	0x01020102
    a64c:	01020102 	.word	0x01020102
    a650:	01020102 	.word	0x01020102
    a654:	01020102 	.word	0x01020102
    a658:	01020102 	.word	0x01020102
    a65c:	01020102 	.word	0x01020102
    a660:	01020102 	.word	0x01020102
    a664:	01660161 	.word	0x01660161
    a668:	0170016b 	.word	0x0170016b
    a66c:	01750102 	.word	0x01750102
    a670:	01020102 	.word	0x01020102
    a674:	01020102 	.word	0x01020102
    a678:	01020102 	.word	0x01020102
    a67c:	01020102 	.word	0x01020102
    a680:	017a0102 	.word	0x017a0102
    a684:	0184017f 	.word	0x0184017f
    a688:	018e0189 	.word	0x018e0189
    a68c:	01020193 	.word	0x01020193
    a690:	01020102 	.word	0x01020102
    a694:	01020102 	.word	0x01020102
    a698:	01020102 	.word	0x01020102
    a69c:	01020102 	.word	0x01020102
    a6a0:	01020102 	.word	0x01020102
    a6a4:	01020102 	.word	0x01020102
    a6a8:	01020102 	.word	0x01020102
    a6ac:	01020102 	.word	0x01020102
    a6b0:	01020102 	.word	0x01020102
    a6b4:	01980102 	.word	0x01980102
    a6b8:	01a2019d 	.word	0x01a2019d
    a6bc:	010201a7 	.word	0x010201a7
    a6c0:	01b10102 	.word	0x01b10102
    a6c4:	010200fd 	.word	0x010200fd
    a6c8:	01020102 	.word	0x01020102
    a6cc:	01020102 	.word	0x01020102
    a6d0:	01020102 	.word	0x01020102
    a6d4:	01020102 	.word	0x01020102
    a6d8:	01020102 	.word	0x01020102
    a6dc:	01020102 	.word	0x01020102
    a6e0:	01020102 	.word	0x01020102
    a6e4:	01020102 	.word	0x01020102
    a6e8:	01020102 	.word	0x01020102
    a6ec:	01020102 	.word	0x01020102
    a6f0:	01020102 	.word	0x01020102
    a6f4:	01020102 	.word	0x01020102
    a6f8:	01ac0102 	.word	0x01ac0102
    a6fc:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    a6fe:	9007      	str	r0, [sp, #28]
    a700:	20e1      	movs	r0, #225	; 0xe1
    a702:	9006      	str	r0, [sp, #24]
    a704:	e0b3      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a706:	defe      	udf	#254	; 0xfe
    a708:	2000      	movs	r0, #0
    a70a:	9007      	str	r0, [sp, #28]
    a70c:	9006      	str	r0, [sp, #24]
    a70e:	e0ae      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a710:	2000      	movs	r0, #0
    a712:	9007      	str	r0, [sp, #28]
    a714:	2001      	movs	r0, #1
    a716:	9006      	str	r0, [sp, #24]
    a718:	e0a9      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a71a:	2000      	movs	r0, #0
    a71c:	9007      	str	r0, [sp, #28]
    a71e:	2004      	movs	r0, #4
    a720:	9006      	str	r0, [sp, #24]
    a722:	e0a4      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a724:	2000      	movs	r0, #0
    a726:	9007      	str	r0, [sp, #28]
    a728:	2009      	movs	r0, #9
    a72a:	9006      	str	r0, [sp, #24]
    a72c:	e09f      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a72e:	2000      	movs	r0, #0
    a730:	9007      	str	r0, [sp, #28]
    a732:	2010      	movs	r0, #16
    a734:	9006      	str	r0, [sp, #24]
    a736:	e09a      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a738:	2000      	movs	r0, #0
    a73a:	9007      	str	r0, [sp, #28]
    a73c:	2011      	movs	r0, #17
    a73e:	9006      	str	r0, [sp, #24]
    a740:	e095      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a742:	2000      	movs	r0, #0
    a744:	9007      	str	r0, [sp, #28]
    a746:	2012      	movs	r0, #18
    a748:	9006      	str	r0, [sp, #24]
    a74a:	e090      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a74c:	2000      	movs	r0, #0
    a74e:	9007      	str	r0, [sp, #28]
    a750:	2013      	movs	r0, #19
    a752:	9006      	str	r0, [sp, #24]
    a754:	e08b      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a756:	2000      	movs	r0, #0
    a758:	9007      	str	r0, [sp, #28]
    a75a:	2020      	movs	r0, #32
    a75c:	9006      	str	r0, [sp, #24]
    a75e:	e086      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a760:	2000      	movs	r0, #0
    a762:	9007      	str	r0, [sp, #28]
    a764:	2021      	movs	r0, #33	; 0x21
    a766:	9006      	str	r0, [sp, #24]
    a768:	e081      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a76a:	2000      	movs	r0, #0
    a76c:	9007      	str	r0, [sp, #28]
    a76e:	2028      	movs	r0, #40	; 0x28
    a770:	9006      	str	r0, [sp, #24]
    a772:	e07c      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a774:	2000      	movs	r0, #0
    a776:	9007      	str	r0, [sp, #28]
    a778:	2029      	movs	r0, #41	; 0x29
    a77a:	9006      	str	r0, [sp, #24]
    a77c:	e077      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a77e:	2000      	movs	r0, #0
    a780:	9007      	str	r0, [sp, #28]
    a782:	202a      	movs	r0, #42	; 0x2a
    a784:	9006      	str	r0, [sp, #24]
    a786:	e072      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a788:	2000      	movs	r0, #0
    a78a:	9007      	str	r0, [sp, #28]
    a78c:	202b      	movs	r0, #43	; 0x2b
    a78e:	9006      	str	r0, [sp, #24]
    a790:	e06d      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a792:	2000      	movs	r0, #0
    a794:	9007      	str	r0, [sp, #28]
    a796:	202c      	movs	r0, #44	; 0x2c
    a798:	9006      	str	r0, [sp, #24]
    a79a:	e068      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a79c:	2000      	movs	r0, #0
    a79e:	9007      	str	r0, [sp, #28]
    a7a0:	202e      	movs	r0, #46	; 0x2e
    a7a2:	9006      	str	r0, [sp, #24]
    a7a4:	e063      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7a6:	2000      	movs	r0, #0
    a7a8:	9007      	str	r0, [sp, #28]
    a7aa:	2030      	movs	r0, #48	; 0x30
    a7ac:	9006      	str	r0, [sp, #24]
    a7ae:	e05e      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7b0:	2000      	movs	r0, #0
    a7b2:	9007      	str	r0, [sp, #28]
    a7b4:	203a      	movs	r0, #58	; 0x3a
    a7b6:	9006      	str	r0, [sp, #24]
    a7b8:	e059      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7ba:	2000      	movs	r0, #0
    a7bc:	9007      	str	r0, [sp, #28]
    a7be:	2036      	movs	r0, #54	; 0x36
    a7c0:	9006      	str	r0, [sp, #24]
    a7c2:	e054      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7c4:	2000      	movs	r0, #0
    a7c6:	9007      	str	r0, [sp, #28]
    a7c8:	20b1      	movs	r0, #177	; 0xb1
    a7ca:	9006      	str	r0, [sp, #24]
    a7cc:	e04f      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7ce:	2000      	movs	r0, #0
    a7d0:	9007      	str	r0, [sp, #28]
    a7d2:	20b2      	movs	r0, #178	; 0xb2
    a7d4:	9006      	str	r0, [sp, #24]
    a7d6:	e04a      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7d8:	2000      	movs	r0, #0
    a7da:	9007      	str	r0, [sp, #28]
    a7dc:	20b3      	movs	r0, #179	; 0xb3
    a7de:	9006      	str	r0, [sp, #24]
    a7e0:	e045      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7e2:	2000      	movs	r0, #0
    a7e4:	9007      	str	r0, [sp, #28]
    a7e6:	20b4      	movs	r0, #180	; 0xb4
    a7e8:	9006      	str	r0, [sp, #24]
    a7ea:	e040      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7ec:	2000      	movs	r0, #0
    a7ee:	9007      	str	r0, [sp, #28]
    a7f0:	20b6      	movs	r0, #182	; 0xb6
    a7f2:	9006      	str	r0, [sp, #24]
    a7f4:	e03b      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a7f6:	2000      	movs	r0, #0
    a7f8:	9007      	str	r0, [sp, #28]
    a7fa:	20c0      	movs	r0, #192	; 0xc0
    a7fc:	9006      	str	r0, [sp, #24]
    a7fe:	e036      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a800:	2000      	movs	r0, #0
    a802:	9007      	str	r0, [sp, #28]
    a804:	20c1      	movs	r0, #193	; 0xc1
    a806:	9006      	str	r0, [sp, #24]
    a808:	e031      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a80a:	2000      	movs	r0, #0
    a80c:	9007      	str	r0, [sp, #28]
    a80e:	20c2      	movs	r0, #194	; 0xc2
    a810:	9006      	str	r0, [sp, #24]
    a812:	e02c      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a814:	2000      	movs	r0, #0
    a816:	9007      	str	r0, [sp, #28]
    a818:	20c3      	movs	r0, #195	; 0xc3
    a81a:	9006      	str	r0, [sp, #24]
    a81c:	e027      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a81e:	2000      	movs	r0, #0
    a820:	9007      	str	r0, [sp, #28]
    a822:	20c4      	movs	r0, #196	; 0xc4
    a824:	9006      	str	r0, [sp, #24]
    a826:	e022      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a828:	2000      	movs	r0, #0
    a82a:	9007      	str	r0, [sp, #28]
    a82c:	20c5      	movs	r0, #197	; 0xc5
    a82e:	9006      	str	r0, [sp, #24]
    a830:	e01d      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a832:	2000      	movs	r0, #0
    a834:	9007      	str	r0, [sp, #28]
    a836:	20da      	movs	r0, #218	; 0xda
    a838:	9006      	str	r0, [sp, #24]
    a83a:	e018      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a83c:	2000      	movs	r0, #0
    a83e:	9007      	str	r0, [sp, #28]
    a840:	20db      	movs	r0, #219	; 0xdb
    a842:	9006      	str	r0, [sp, #24]
    a844:	e013      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a846:	2000      	movs	r0, #0
    a848:	9007      	str	r0, [sp, #28]
    a84a:	20dc      	movs	r0, #220	; 0xdc
    a84c:	9006      	str	r0, [sp, #24]
    a84e:	e00e      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a850:	2000      	movs	r0, #0
    a852:	9007      	str	r0, [sp, #28]
    a854:	20dd      	movs	r0, #221	; 0xdd
    a856:	9006      	str	r0, [sp, #24]
    a858:	e009      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a85a:	2000      	movs	r0, #0
    a85c:	9007      	str	r0, [sp, #28]
    a85e:	20fc      	movs	r0, #252	; 0xfc
    a860:	9006      	str	r0, [sp, #24]
    a862:	e004      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a864:	2000      	movs	r0, #0
    a866:	9007      	str	r0, [sp, #28]
    a868:	20e0      	movs	r0, #224	; 0xe0
    a86a:	9006      	str	r0, [sp, #24]
    a86c:	e7ff      	b.n	a86e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a86e:	9806      	ldr	r0, [sp, #24]
    a870:	9907      	ldr	r1, [sp, #28]
    a872:	9105      	str	r1, [sp, #20]
    a874:	9004      	str	r0, [sp, #16]
    a876:	2000      	movs	r0, #0
    a878:	9003      	str	r0, [sp, #12]
    a87a:	2001      	movs	r0, #1
    a87c:	9002      	str	r0, [sp, #8]
    a87e:	9802      	ldr	r0, [sp, #8]
    a880:	9903      	ldr	r1, [sp, #12]
    a882:	9a04      	ldr	r2, [sp, #16]
    a884:	9b05      	ldr	r3, [sp, #20]
    a886:	b00a      	add	sp, #40	; 0x28
    a888:	4770      	bx	lr

0000a88a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
    a88a:	b580      	push	{r7, lr}
    a88c:	b08a      	sub	sp, #40	; 0x28
    a88e:	9009      	str	r0, [sp, #36]	; 0x24
    a890:	f7ff fe30 	bl	a4f4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
    a894:	9108      	str	r1, [sp, #32]
    a896:	9007      	str	r0, [sp, #28]
    a898:	9306      	str	r3, [sp, #24]
    a89a:	9205      	str	r2, [sp, #20]
    a89c:	e7ff      	b.n	a89e <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
    a89e:	9807      	ldr	r0, [sp, #28]
    a8a0:	9908      	ldr	r1, [sp, #32]
    a8a2:	9a05      	ldr	r2, [sp, #20]
    a8a4:	9b06      	ldr	r3, [sp, #24]
    a8a6:	f000 f859 	bl	a95c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
    a8aa:	9104      	str	r1, [sp, #16]
    a8ac:	9003      	str	r0, [sp, #12]
    a8ae:	9302      	str	r3, [sp, #8]
    a8b0:	9201      	str	r2, [sp, #4]
    a8b2:	e7ff      	b.n	a8b4 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
    a8b4:	9803      	ldr	r0, [sp, #12]
    a8b6:	9904      	ldr	r1, [sp, #16]
    a8b8:	9a01      	ldr	r2, [sp, #4]
    a8ba:	9b02      	ldr	r3, [sp, #8]
    a8bc:	b00a      	add	sp, #40	; 0x28
    a8be:	bd80      	pop	{r7, pc}

0000a8c0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
    a8c0:	b08a      	sub	sp, #40	; 0x28
    a8c2:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
    a8c4:	7800      	ldrb	r0, [r0, #0]
    a8c6:	4601      	mov	r1, r0
    a8c8:	2800      	cmp	r0, #0
    a8ca:	9101      	str	r1, [sp, #4]
    a8cc:	d00f      	beq.n	a8ee <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
    a8ce:	e7ff      	b.n	a8d0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
    a8d0:	9801      	ldr	r0, [sp, #4]
    a8d2:	2860      	cmp	r0, #96	; 0x60
    a8d4:	d00f      	beq.n	a8f6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
    a8d6:	e7ff      	b.n	a8d8 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
    a8d8:	9801      	ldr	r0, [sp, #4]
    a8da:	28a0      	cmp	r0, #160	; 0xa0
    a8dc:	d001      	beq.n	a8e2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
    a8de:	e7ff      	b.n	a8e0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
    a8e0:	e00e      	b.n	a900 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
    a8e2:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    a8e4:	9007      	str	r0, [sp, #28]
    a8e6:	20a0      	movs	r0, #160	; 0xa0
    a8e8:	9006      	str	r0, [sp, #24]
    a8ea:	e00e      	b.n	a90a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a8ec:	defe      	udf	#254	; 0xfe
    a8ee:	2000      	movs	r0, #0
    a8f0:	9007      	str	r0, [sp, #28]
    a8f2:	9006      	str	r0, [sp, #24]
    a8f4:	e009      	b.n	a90a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a8f6:	2000      	movs	r0, #0
    a8f8:	9007      	str	r0, [sp, #28]
    a8fa:	2060      	movs	r0, #96	; 0x60
    a8fc:	9006      	str	r0, [sp, #24]
    a8fe:	e004      	b.n	a90a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a900:	2000      	movs	r0, #0
    a902:	9007      	str	r0, [sp, #28]
    a904:	20c0      	movs	r0, #192	; 0xc0
    a906:	9006      	str	r0, [sp, #24]
    a908:	e7ff      	b.n	a90a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a90a:	9806      	ldr	r0, [sp, #24]
    a90c:	9907      	ldr	r1, [sp, #28]
    a90e:	9105      	str	r1, [sp, #20]
    a910:	9004      	str	r0, [sp, #16]
    a912:	2000      	movs	r0, #0
    a914:	9003      	str	r0, [sp, #12]
    a916:	2001      	movs	r0, #1
    a918:	9002      	str	r0, [sp, #8]
    a91a:	9802      	ldr	r0, [sp, #8]
    a91c:	9903      	ldr	r1, [sp, #12]
    a91e:	9a04      	ldr	r2, [sp, #16]
    a920:	9b05      	ldr	r3, [sp, #20]
    a922:	b00a      	add	sp, #40	; 0x28
    a924:	4770      	bx	lr

0000a926 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
    a926:	b580      	push	{r7, lr}
    a928:	b08a      	sub	sp, #40	; 0x28
    a92a:	9009      	str	r0, [sp, #36]	; 0x24
    a92c:	f7ff ffc8 	bl	a8c0 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
    a930:	9108      	str	r1, [sp, #32]
    a932:	9007      	str	r0, [sp, #28]
    a934:	9306      	str	r3, [sp, #24]
    a936:	9205      	str	r2, [sp, #20]
    a938:	e7ff      	b.n	a93a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
    a93a:	9807      	ldr	r0, [sp, #28]
    a93c:	9908      	ldr	r1, [sp, #32]
    a93e:	9a05      	ldr	r2, [sp, #20]
    a940:	9b06      	ldr	r3, [sp, #24]
    a942:	f000 f863 	bl	aa0c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
    a946:	9104      	str	r1, [sp, #16]
    a948:	9003      	str	r0, [sp, #12]
    a94a:	9302      	str	r3, [sp, #8]
    a94c:	9201      	str	r2, [sp, #4]
    a94e:	e7ff      	b.n	a950 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
    a950:	9803      	ldr	r0, [sp, #12]
    a952:	9904      	ldr	r1, [sp, #16]
    a954:	9a01      	ldr	r2, [sp, #4]
    a956:	9b02      	ldr	r3, [sp, #8]
    a958:	b00a      	add	sp, #40	; 0x28
    a95a:	bd80      	pop	{r7, pc}

0000a95c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
    a95c:	b5b0      	push	{r4, r5, r7, lr}
    a95e:	b090      	sub	sp, #64	; 0x40
    a960:	469c      	mov	ip, r3
    a962:	4696      	mov	lr, r2
    a964:	460c      	mov	r4, r1
    a966:	4605      	mov	r5, r0
    a968:	9103      	str	r1, [sp, #12]
    a96a:	9002      	str	r0, [sp, #8]
    a96c:	9305      	str	r3, [sp, #20]
    a96e:	9204      	str	r2, [sp, #16]
    a970:	2000      	movs	r0, #0
    a972:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a976:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a97a:	2001      	movs	r0, #1
    a97c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a980:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a984:	9802      	ldr	r0, [sp, #8]
    a986:	2800      	cmp	r0, #0
    a988:	d001      	beq.n	a98e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
    a98a:	e7ff      	b.n	a98c <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
    a98c:	e004      	b.n	a998 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
    a98e:	2000      	movs	r0, #0
    a990:	9007      	str	r0, [sp, #28]
    a992:	9006      	str	r0, [sp, #24]
    a994:	e023      	b.n	a9de <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    a996:	defe      	udf	#254	; 0xfe
    a998:	2000      	movs	r0, #0
    a99a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a99e:	9904      	ldr	r1, [sp, #16]
    a9a0:	9a05      	ldr	r2, [sp, #20]
    a9a2:	920f      	str	r2, [sp, #60]	; 0x3c
    a9a4:	910e      	str	r1, [sp, #56]	; 0x38
    a9a6:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a9aa:	920b      	str	r2, [sp, #44]	; 0x2c
    a9ac:	910a      	str	r1, [sp, #40]	; 0x28
    a9ae:	980a      	ldr	r0, [sp, #40]	; 0x28
    a9b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a9b2:	f000 f883 	bl	aabc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
    a9b6:	9101      	str	r1, [sp, #4]
    a9b8:	9000      	str	r0, [sp, #0]
    a9ba:	e7ff      	b.n	a9bc <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
    a9bc:	9800      	ldr	r0, [sp, #0]
    a9be:	9008      	str	r0, [sp, #32]
    a9c0:	9901      	ldr	r1, [sp, #4]
    a9c2:	9109      	str	r1, [sp, #36]	; 0x24
    a9c4:	2200      	movs	r2, #0
    a9c6:	9207      	str	r2, [sp, #28]
    a9c8:	2201      	movs	r2, #1
    a9ca:	9206      	str	r2, [sp, #24]
    a9cc:	e007      	b.n	a9de <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    a9ce:	9802      	ldr	r0, [sp, #8]
    a9d0:	2801      	cmp	r0, #1
    a9d2:	d010      	beq.n	a9f6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
    a9d4:	e019      	b.n	aa0a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
    a9d6:	2000      	movs	r0, #0
    a9d8:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a9dc:	e7f7      	b.n	a9ce <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    a9de:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    a9e2:	07c0      	lsls	r0, r0, #31
    a9e4:	2800      	cmp	r0, #0
    a9e6:	d1f6      	bne.n	a9d6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
    a9e8:	e7f1      	b.n	a9ce <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    a9ea:	9806      	ldr	r0, [sp, #24]
    a9ec:	9907      	ldr	r1, [sp, #28]
    a9ee:	9a08      	ldr	r2, [sp, #32]
    a9f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a9f2:	b010      	add	sp, #64	; 0x40
    a9f4:	bdb0      	pop	{r4, r5, r7, pc}
    a9f6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    a9fa:	07c0      	lsls	r0, r0, #31
    a9fc:	2800      	cmp	r0, #0
    a9fe:	d0f4      	beq.n	a9ea <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    aa00:	e7ff      	b.n	aa02 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
    aa02:	2000      	movs	r0, #0
    aa04:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa08:	e7ef      	b.n	a9ea <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    aa0a:	e7ee      	b.n	a9ea <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

0000aa0c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
    aa0c:	b5b0      	push	{r4, r5, r7, lr}
    aa0e:	b090      	sub	sp, #64	; 0x40
    aa10:	469c      	mov	ip, r3
    aa12:	4696      	mov	lr, r2
    aa14:	460c      	mov	r4, r1
    aa16:	4605      	mov	r5, r0
    aa18:	9103      	str	r1, [sp, #12]
    aa1a:	9002      	str	r0, [sp, #8]
    aa1c:	9305      	str	r3, [sp, #20]
    aa1e:	9204      	str	r2, [sp, #16]
    aa20:	2000      	movs	r0, #0
    aa22:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa26:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa2a:	2001      	movs	r0, #1
    aa2c:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa30:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa34:	9802      	ldr	r0, [sp, #8]
    aa36:	2800      	cmp	r0, #0
    aa38:	d001      	beq.n	aa3e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
    aa3a:	e7ff      	b.n	aa3c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
    aa3c:	e004      	b.n	aa48 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
    aa3e:	2000      	movs	r0, #0
    aa40:	9007      	str	r0, [sp, #28]
    aa42:	9006      	str	r0, [sp, #24]
    aa44:	e023      	b.n	aa8e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    aa46:	defe      	udf	#254	; 0xfe
    aa48:	2000      	movs	r0, #0
    aa4a:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aa4e:	9904      	ldr	r1, [sp, #16]
    aa50:	9a05      	ldr	r2, [sp, #20]
    aa52:	920f      	str	r2, [sp, #60]	; 0x3c
    aa54:	910e      	str	r1, [sp, #56]	; 0x38
    aa56:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa5a:	920b      	str	r2, [sp, #44]	; 0x2c
    aa5c:	910a      	str	r1, [sp, #40]	; 0x28
    aa5e:	980a      	ldr	r0, [sp, #40]	; 0x28
    aa60:	990b      	ldr	r1, [sp, #44]	; 0x2c
    aa62:	f006 fffd 	bl	11a60 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
    aa66:	9101      	str	r1, [sp, #4]
    aa68:	9000      	str	r0, [sp, #0]
    aa6a:	e7ff      	b.n	aa6c <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
    aa6c:	9800      	ldr	r0, [sp, #0]
    aa6e:	9008      	str	r0, [sp, #32]
    aa70:	9901      	ldr	r1, [sp, #4]
    aa72:	9109      	str	r1, [sp, #36]	; 0x24
    aa74:	2200      	movs	r2, #0
    aa76:	9207      	str	r2, [sp, #28]
    aa78:	2201      	movs	r2, #1
    aa7a:	9206      	str	r2, [sp, #24]
    aa7c:	e007      	b.n	aa8e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    aa7e:	9802      	ldr	r0, [sp, #8]
    aa80:	2801      	cmp	r0, #1
    aa82:	d010      	beq.n	aaa6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
    aa84:	e019      	b.n	aaba <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
    aa86:	2000      	movs	r0, #0
    aa88:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    aa8c:	e7f7      	b.n	aa7e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    aa8e:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    aa92:	07c0      	lsls	r0, r0, #31
    aa94:	2800      	cmp	r0, #0
    aa96:	d1f6      	bne.n	aa86 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
    aa98:	e7f1      	b.n	aa7e <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    aa9a:	9806      	ldr	r0, [sp, #24]
    aa9c:	9907      	ldr	r1, [sp, #28]
    aa9e:	9a08      	ldr	r2, [sp, #32]
    aaa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    aaa2:	b010      	add	sp, #64	; 0x40
    aaa4:	bdb0      	pop	{r4, r5, r7, pc}
    aaa6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    aaaa:	07c0      	lsls	r0, r0, #31
    aaac:	2800      	cmp	r0, #0
    aaae:	d0f4      	beq.n	aa9a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    aab0:	e7ff      	b.n	aab2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
    aab2:	2000      	movs	r0, #0
    aab4:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    aab8:	e7ef      	b.n	aa9a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    aaba:	e7ee      	b.n	aa9a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

0000aabc <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
    aabc:	b084      	sub	sp, #16
    aabe:	460a      	mov	r2, r1
    aac0:	4603      	mov	r3, r0
    aac2:	9103      	str	r1, [sp, #12]
    aac4:	9002      	str	r0, [sp, #8]
    aac6:	b004      	add	sp, #16
    aac8:	4770      	bx	lr

0000aaca <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h0882b01a3344b9ecE>:
    aaca:	b580      	push	{r7, lr}
    aacc:	b086      	sub	sp, #24
    aace:	9004      	str	r0, [sp, #16]
    aad0:	9105      	str	r1, [sp, #20]
    aad2:	9002      	str	r0, [sp, #8]
    aad4:	f000 f810 	bl	aaf8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17h2121c22b5f8e5defE>
    aad8:	9001      	str	r0, [sp, #4]
    aada:	e7ff      	b.n	aadc <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h0882b01a3344b9ecE+0x12>
    aadc:	9801      	ldr	r0, [sp, #4]
    aade:	07c1      	lsls	r1, r0, #31
    aae0:	2900      	cmp	r1, #0
    aae2:	d103      	bne.n	aaec <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h0882b01a3344b9ecE+0x22>
    aae4:	e7ff      	b.n	aae6 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h0882b01a3344b9ecE+0x1c>
    aae6:	2000      	movs	r0, #0
    aae8:	9003      	str	r0, [sp, #12]
    aaea:	e002      	b.n	aaf2 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h0882b01a3344b9ecE+0x28>
    aaec:	9802      	ldr	r0, [sp, #8]
    aaee:	9003      	str	r0, [sp, #12]
    aaf0:	e7ff      	b.n	aaf2 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h0882b01a3344b9ecE+0x28>
    aaf2:	9803      	ldr	r0, [sp, #12]
    aaf4:	b006      	add	sp, #24
    aaf6:	bd80      	pop	{r7, pc}

0000aaf8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17h2121c22b5f8e5defE>:
    aaf8:	b580      	push	{r7, lr}
    aafa:	b08a      	sub	sp, #40	; 0x28
    aafc:	9008      	str	r0, [sp, #32]
    aafe:	9109      	str	r1, [sp, #36]	; 0x24
    ab00:	9103      	str	r1, [sp, #12]
    ab02:	9002      	str	r0, [sp, #8]
    ab04:	f000 f815 	bl	ab32 <_ZN4core3any6TypeId2of17hfaa6ba6a592dc19eE>
    ab08:	9105      	str	r1, [sp, #20]
    ab0a:	9004      	str	r0, [sp, #16]
    ab0c:	e7ff      	b.n	ab0e <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17h2121c22b5f8e5defE+0x16>
    ab0e:	9803      	ldr	r0, [sp, #12]
    ab10:	68c1      	ldr	r1, [r0, #12]
    ab12:	9802      	ldr	r0, [sp, #8]
    ab14:	4788      	blx	r1
    ab16:	9107      	str	r1, [sp, #28]
    ab18:	9006      	str	r0, [sp, #24]
    ab1a:	e7ff      	b.n	ab1c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17h2121c22b5f8e5defE+0x24>
    ab1c:	a804      	add	r0, sp, #16
    ab1e:	a906      	add	r1, sp, #24
    ab20:	f000 fec5 	bl	b8ae <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7f96ad6a83c37f74E>
    ab24:	9001      	str	r0, [sp, #4]
    ab26:	e7ff      	b.n	ab28 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17h2121c22b5f8e5defE+0x30>
    ab28:	9801      	ldr	r0, [sp, #4]
    ab2a:	f000 0001 	and.w	r0, r0, #1
    ab2e:	b00a      	add	sp, #40	; 0x28
    ab30:	bd80      	pop	{r7, pc}

0000ab32 <_ZN4core3any6TypeId2of17hfaa6ba6a592dc19eE>:
    ab32:	b086      	sub	sp, #24
    ab34:	f249 40d9 	movw	r0, #38105	; 0x94d9
    ab38:	f2c1 1010 	movt	r0, #4368	; 0x1110
    ab3c:	9005      	str	r0, [sp, #20]
    ab3e:	f249 7064 	movw	r0, #38756	; 0x9764
    ab42:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    ab46:	9004      	str	r0, [sp, #16]
    ab48:	9804      	ldr	r0, [sp, #16]
    ab4a:	9905      	ldr	r1, [sp, #20]
    ab4c:	9001      	str	r0, [sp, #4]
    ab4e:	9100      	str	r1, [sp, #0]
    ab50:	e7ff      	b.n	ab52 <_ZN4core3any6TypeId2of17hfaa6ba6a592dc19eE+0x20>
    ab52:	9801      	ldr	r0, [sp, #4]
    ab54:	9002      	str	r0, [sp, #8]
    ab56:	9900      	ldr	r1, [sp, #0]
    ab58:	9103      	str	r1, [sp, #12]
    ab5a:	9802      	ldr	r0, [sp, #8]
    ab5c:	9903      	ldr	r1, [sp, #12]
    ab5e:	b006      	add	sp, #24
    ab60:	4770      	bx	lr

0000ab62 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17hd6f456243f579479E>:
    ab62:	b580      	push	{r7, lr}
    ab64:	b084      	sub	sp, #16
    ab66:	9002      	str	r0, [sp, #8]
    ab68:	9103      	str	r1, [sp, #12]
    ab6a:	f7ff ffae 	bl	aaca <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h0882b01a3344b9ecE>
    ab6e:	9001      	str	r0, [sp, #4]
    ab70:	e7ff      	b.n	ab72 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17hd6f456243f579479E+0x10>
    ab72:	9801      	ldr	r0, [sp, #4]
    ab74:	b004      	add	sp, #16
    ab76:	bd80      	pop	{r7, pc}

0000ab78 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h999fe3470f07fb23E>:
    ab78:	b08a      	sub	sp, #40	; 0x28
    ab7a:	9107      	str	r1, [sp, #28]
    ab7c:	9208      	str	r2, [sp, #32]
    ab7e:	f8d0 c000 	ldr.w	ip, [r0]
    ab82:	f1bc 0f00 	cmp.w	ip, #0
    ab86:	9305      	str	r3, [sp, #20]
    ab88:	9204      	str	r2, [sp, #16]
    ab8a:	9103      	str	r1, [sp, #12]
    ab8c:	9002      	str	r0, [sp, #8]
    ab8e:	d011      	beq.n	abb4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h999fe3470f07fb23E+0x3c>
    ab90:	e7ff      	b.n	ab92 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h999fe3470f07fb23E+0x1a>
    ab92:	9802      	ldr	r0, [sp, #8]
    ab94:	6841      	ldr	r1, [r0, #4]
    ab96:	9106      	str	r1, [sp, #24]
    ab98:	4669      	mov	r1, sp
    ab9a:	9a05      	ldr	r2, [sp, #20]
    ab9c:	600a      	str	r2, [r1, #0]
    ab9e:	f64a 1300 	movw	r3, #43264	; 0xa900
    aba2:	f2c0 0301 	movt	r3, #1
    aba6:	aa06      	add	r2, sp, #24
    aba8:	9803      	ldr	r0, [sp, #12]
    abaa:	9904      	ldr	r1, [sp, #16]
    abac:	f009 f88a 	bl	13cc4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    abb0:	defe      	udf	#254	; 0xfe
    abb2:	defe      	udf	#254	; 0xfe
    abb4:	9802      	ldr	r0, [sp, #8]
    abb6:	6841      	ldr	r1, [r0, #4]
    abb8:	9109      	str	r1, [sp, #36]	; 0x24
    abba:	6802      	ldr	r2, [r0, #0]
    abbc:	2a00      	cmp	r2, #0
    abbe:	9101      	str	r1, [sp, #4]
    abc0:	d103      	bne.n	abca <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h999fe3470f07fb23E+0x52>
    abc2:	e7ff      	b.n	abc4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h999fe3470f07fb23E+0x4c>
    abc4:	9801      	ldr	r0, [sp, #4]
    abc6:	b00a      	add	sp, #40	; 0x28
    abc8:	4770      	bx	lr
    abca:	e7fb      	b.n	abc4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h999fe3470f07fb23E+0x4c>

0000abcc <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
    abcc:	b5b0      	push	{r4, r5, r7, lr}
    abce:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
    abd0:	f64a 1010 	movw	r0, #43280	; 0xa910
    abd4:	f2c0 0001 	movt	r0, #1
    abd8:	2112      	movs	r1, #18
    abda:	f7fe f854 	bl	8c86 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    abde:	e7ff      	b.n	abe0 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    abe0:	f240 105c 	movw	r0, #348	; 0x15c
    abe4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    abe8:	210a      	movs	r1, #10
    abea:	f003 fca5 	bl	e538 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    abee:	9012      	str	r0, [sp, #72]	; 0x48
    abf0:	e7ff      	b.n	abf2 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x26>
    abf2:	9812      	ldr	r0, [sp, #72]	; 0x48
    abf4:	f7fd ff3e 	bl	8a74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    abf8:	9014      	str	r0, [sp, #80]	; 0x50
    abfa:	e7ff      	b.n	abfc <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x30>
    abfc:	9814      	ldr	r0, [sp, #80]	; 0x50
    abfe:	1e41      	subs	r1, r0, #1
    ac00:	bf18      	it	ne
    ac02:	2101      	movne	r1, #1
    ac04:	2801      	cmp	r0, #1
    ac06:	d001      	beq.n	ac0c <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x40>
    ac08:	e7ff      	b.n	ac0a <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x3e>
    ac0a:	e008      	b.n	ac1e <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
    ac0c:	f240 105c 	movw	r0, #348	; 0x15c
    ac10:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ac14:	f003 fd29 	bl	e66a <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    ac18:	9011      	str	r0, [sp, #68]	; 0x44
    ac1a:	e00f      	b.n	ac3c <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ac1c:	defe      	udf	#254	; 0xfe
    ac1e:	9814      	ldr	r0, [sp, #80]	; 0x50
    ac20:	9036      	str	r0, [sp, #216]	; 0xd8
    ac22:	f001 fe86 	bl	c932 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    ac26:	9010      	str	r0, [sp, #64]	; 0x40
    ac28:	e002      	b.n	ac30 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
    ac2a:	9813      	ldr	r0, [sp, #76]	; 0x4c
    ac2c:	b03e      	add	sp, #248	; 0xf8
    ac2e:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    ac30:	9810      	ldr	r0, [sp, #64]	; 0x40
    ac32:	f7fd ff13 	bl	8a5c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    ac36:	9013      	str	r0, [sp, #76]	; 0x4c
    ac38:	e7ff      	b.n	ac3a <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x6e>
    ac3a:	e7f6      	b.n	ac2a <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x5e>
        TOUCH_RESET.set_low() ? ;
    ac3c:	9811      	ldr	r0, [sp, #68]	; 0x44
    ac3e:	f7fd ff19 	bl	8a74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    ac42:	9015      	str	r0, [sp, #84]	; 0x54
    ac44:	e7ff      	b.n	ac46 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x7a>
    ac46:	9815      	ldr	r0, [sp, #84]	; 0x54
    ac48:	1e41      	subs	r1, r0, #1
    ac4a:	bf18      	it	ne
    ac4c:	2101      	movne	r1, #1
    ac4e:	2801      	cmp	r0, #1
    ac50:	d001      	beq.n	ac56 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x8a>
    ac52:	e7ff      	b.n	ac54 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x88>
    ac54:	e008      	b.n	ac68 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x9c>
        TOUCH_DELAY.delay_ms(20);
    ac56:	f240 1060 	movw	r0, #352	; 0x160
    ac5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ac5e:	2114      	movs	r1, #20
    ac60:	f003 fd1a 	bl	e698 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    ac64:	e00d      	b.n	ac82 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0xb6>
        TOUCH_RESET.set_low() ? ;
    ac66:	defe      	udf	#254	; 0xfe
    ac68:	9815      	ldr	r0, [sp, #84]	; 0x54
    ac6a:	9037      	str	r0, [sp, #220]	; 0xdc
    ac6c:	f001 fe61 	bl	c932 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    ac70:	900f      	str	r0, [sp, #60]	; 0x3c
    ac72:	e7ff      	b.n	ac74 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0xa8>
    ac74:	980f      	ldr	r0, [sp, #60]	; 0x3c
    ac76:	f7fd fef1 	bl	8a5c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    ac7a:	9013      	str	r0, [sp, #76]	; 0x4c
    ac7c:	e7ff      	b.n	ac7e <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0xb2>
    ac7e:	e7ff      	b.n	ac80 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0xb4>
    ac80:	e7d3      	b.n	ac2a <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x5e>
        TOUCH_RESET.set_high() ? ;
    ac82:	f240 105c 	movw	r0, #348	; 0x15c
    ac86:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ac8a:	f003 fcf9 	bl	e680 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    ac8e:	900e      	str	r0, [sp, #56]	; 0x38
    ac90:	e7ff      	b.n	ac92 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0xc6>
    ac92:	980e      	ldr	r0, [sp, #56]	; 0x38
    ac94:	f7fd feee 	bl	8a74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    ac98:	9016      	str	r0, [sp, #88]	; 0x58
    ac9a:	e7ff      	b.n	ac9c <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0xd0>
    ac9c:	9816      	ldr	r0, [sp, #88]	; 0x58
    ac9e:	1e41      	subs	r1, r0, #1
    aca0:	bf18      	it	ne
    aca2:	2101      	movne	r1, #1
    aca4:	2801      	cmp	r0, #1
    aca6:	d001      	beq.n	acac <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0xe0>
    aca8:	e7ff      	b.n	acaa <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0xde>
    acaa:	e008      	b.n	acbe <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    acac:	f240 1060 	movw	r0, #352	; 0x160
    acb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    acb4:	21c8      	movs	r1, #200	; 0xc8
    acb6:	f003 fcef 	bl	e698 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    acba:	e00c      	b.n	acd6 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x10a>
        TOUCH_RESET.set_high() ? ;
    acbc:	defe      	udf	#254	; 0xfe
    acbe:	9816      	ldr	r0, [sp, #88]	; 0x58
    acc0:	9038      	str	r0, [sp, #224]	; 0xe0
    acc2:	f001 fe36 	bl	c932 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    acc6:	900d      	str	r0, [sp, #52]	; 0x34
    acc8:	e7ff      	b.n	acca <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0xfe>
    acca:	980d      	ldr	r0, [sp, #52]	; 0x34
    accc:	f7fd fec6 	bl	8a5c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    acd0:	9013      	str	r0, [sp, #76]	; 0x4c
    acd2:	e7ff      	b.n	acd4 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x108>
    acd4:	e7d4      	b.n	ac80 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    acd6:	f240 1060 	movw	r0, #352	; 0x160
    acda:	f2c2 0000 	movt	r0, #8192	; 0x2000
    acde:	21c8      	movs	r1, #200	; 0xc8
    ace0:	f003 fcda 	bl	e698 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    ace4:	e7ff      	b.n	ace6 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
    ace6:	f64a 6089 	movw	r0, #44681	; 0xae89
    acea:	f2c0 0000 	movt	r0, #0
    acee:	9017      	str	r0, [sp, #92]	; 0x5c
    acf0:	9817      	ldr	r0, [sp, #92]	; 0x5c
    acf2:	f240 11f4 	movw	r1, #500	; 0x1f4
    acf6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    acfa:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
    acfc:	f64a 603d 	movw	r0, #44605	; 0xae3d
    ad00:	f2c0 0000 	movt	r0, #0
    ad04:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
    ad06:	e7ff      	b.n	ad08 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
    ad08:	9919      	ldr	r1, [sp, #100]	; 0x64
    ad0a:	4668      	mov	r0, sp
    ad0c:	2201      	movs	r2, #1
    ad0e:	6002      	str	r2, [r0, #0]
    ad10:	201c      	movs	r0, #28
    ad12:	2200      	movs	r2, #0
    ad14:	2302      	movs	r3, #2
    ad16:	f00b f99d 	bl	16054 <hal_gpio_irq_init>
    ad1a:	9018      	str	r0, [sp, #96]	; 0x60
    ad1c:	e7ff      	b.n	ad1e <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
    ad1e:	f64a 1028 	movw	r0, #43304	; 0xa928
    ad22:	f2c0 0001 	movt	r0, #1
    ad26:	6800      	ldr	r0, [r0, #0]
    ad28:	a918      	add	r1, sp, #96	; 0x60
    ad2a:	911a      	str	r1, [sp, #104]	; 0x68
    ad2c:	901b      	str	r0, [sp, #108]	; 0x6c
    ad2e:	981a      	ldr	r0, [sp, #104]	; 0x68
    ad30:	9039      	str	r0, [sp, #228]	; 0xe4
    ad32:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ad34:	913a      	str	r1, [sp, #232]	; 0xe8
    ad36:	6802      	ldr	r2, [r0, #0]
    ad38:	680b      	ldr	r3, [r1, #0]
    ad3a:	429a      	cmp	r2, r3
    ad3c:	900c      	str	r0, [sp, #48]	; 0x30
    ad3e:	910b      	str	r1, [sp, #44]	; 0x2c
    ad40:	d104      	bne.n	ad4c <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x180>
    ad42:	e7ff      	b.n	ad44 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x178>
    ad44:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    ad46:	f00b f9c1 	bl	160cc <hal_gpio_irq_enable>
    ad4a:	e072      	b.n	ae32 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
    ad4c:	f64a 1080 	movw	r0, #43392	; 0xa980
    ad50:	f2c0 0001 	movt	r0, #1
    ad54:	6801      	ldr	r1, [r0, #0]
    ad56:	980c      	ldr	r0, [sp, #48]	; 0x30
    ad58:	902b      	str	r0, [sp, #172]	; 0xac
    ad5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ad5c:	922c      	str	r2, [sp, #176]	; 0xb0
    ad5e:	f64a 139c 	movw	r3, #43420	; 0xa99c
    ad62:	f2c0 0301 	movt	r3, #1
    ad66:	681b      	ldr	r3, [r3, #0]
    ad68:	f64a 1ca0 	movw	ip, #43424	; 0xa9a0
    ad6c:	f2c0 0c01 	movt	ip, #1
    ad70:	f8dc c000 	ldr.w	ip, [ip]
    ad74:	46ee      	mov	lr, sp
    ad76:	2400      	movs	r4, #0
    ad78:	f8ce 4000 	str.w	r4, [lr]
    ad7c:	a82d      	add	r0, sp, #180	; 0xb4
    ad7e:	2201      	movs	r2, #1
    ad80:	910a      	str	r1, [sp, #40]	; 0x28
    ad82:	4619      	mov	r1, r3
    ad84:	4663      	mov	r3, ip
    ad86:	f006 feb8 	bl	11afa <_ZN4core3fmt9Arguments6new_v117heb928dedbf3bbf0bE>
    ad8a:	e7ff      	b.n	ad8c <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x1c0>
    ad8c:	a82b      	add	r0, sp, #172	; 0xac
    ad8e:	9028      	str	r0, [sp, #160]	; 0xa0
    ad90:	a82c      	add	r0, sp, #176	; 0xb0
    ad92:	9029      	str	r0, [sp, #164]	; 0xa4
    ad94:	a82d      	add	r0, sp, #180	; 0xb4
    ad96:	902a      	str	r0, [sp, #168]	; 0xa8
    ad98:	9828      	ldr	r0, [sp, #160]	; 0xa0
    ad9a:	903b      	str	r0, [sp, #236]	; 0xec
    ad9c:	9929      	ldr	r1, [sp, #164]	; 0xa4
    ad9e:	913c      	str	r1, [sp, #240]	; 0xf0
    ada0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    ada2:	923d      	str	r2, [sp, #244]	; 0xf4
    ada4:	f64b 638f 	movw	r3, #48783	; 0xbe8f
    ada8:	f2c0 0300 	movt	r3, #0
    adac:	9109      	str	r1, [sp, #36]	; 0x24
    adae:	4619      	mov	r1, r3
    adb0:	9208      	str	r2, [sp, #32]
    adb2:	f7fe f91d 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    adb6:	9007      	str	r0, [sp, #28]
    adb8:	9106      	str	r1, [sp, #24]
    adba:	e7ff      	b.n	adbc <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x1f0>
    adbc:	f64b 618f 	movw	r1, #48783	; 0xbe8f
    adc0:	f2c0 0100 	movt	r1, #0
    adc4:	9809      	ldr	r0, [sp, #36]	; 0x24
    adc6:	f7fe f913 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    adca:	9005      	str	r0, [sp, #20]
    adcc:	9104      	str	r1, [sp, #16]
    adce:	e7ff      	b.n	add0 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x204>
    add0:	f244 21ef 	movw	r1, #17135	; 0x42ef
    add4:	f2c0 0101 	movt	r1, #1
    add8:	9808      	ldr	r0, [sp, #32]
    adda:	f7fe f948 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    adde:	9003      	str	r0, [sp, #12]
    ade0:	9102      	str	r1, [sp, #8]
    ade2:	e7ff      	b.n	ade4 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x218>
    ade4:	9807      	ldr	r0, [sp, #28]
    ade6:	9022      	str	r0, [sp, #136]	; 0x88
    ade8:	9906      	ldr	r1, [sp, #24]
    adea:	9123      	str	r1, [sp, #140]	; 0x8c
    adec:	9a05      	ldr	r2, [sp, #20]
    adee:	9224      	str	r2, [sp, #144]	; 0x90
    adf0:	9b04      	ldr	r3, [sp, #16]
    adf2:	9325      	str	r3, [sp, #148]	; 0x94
    adf4:	f8dd c00c 	ldr.w	ip, [sp, #12]
    adf8:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
    adfc:	f8dd e008 	ldr.w	lr, [sp, #8]
    ae00:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
    ae04:	466c      	mov	r4, sp
    ae06:	2503      	movs	r5, #3
    ae08:	6025      	str	r5, [r4, #0]
    ae0a:	a81c      	add	r0, sp, #112	; 0x70
    ae0c:	ab22      	add	r3, sp, #136	; 0x88
    ae0e:	990a      	ldr	r1, [sp, #40]	; 0x28
    ae10:	462a      	mov	r2, r5
    ae12:	f006 fe72 	bl	11afa <_ZN4core3fmt9Arguments6new_v117heb928dedbf3bbf0bE>
    ae16:	e7ff      	b.n	ae18 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x24c>
    ae18:	f64a 10c0 	movw	r0, #43456	; 0xa9c0
    ae1c:	f2c0 0001 	movt	r0, #1
    ae20:	f008 ff77 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    ae24:	9001      	str	r0, [sp, #4]
    ae26:	e7ff      	b.n	ae28 <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x25c>
    ae28:	a81c      	add	r0, sp, #112	; 0x70
    ae2a:	9901      	ldr	r1, [sp, #4]
    ae2c:	f008 ffae 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    ae30:	defe      	udf	#254	; 0xfe
    ae32:	2000      	movs	r0, #0
    Ok(())
    ae34:	9013      	str	r0, [sp, #76]	; 0x4c
    ae36:	2001      	movs	r0, #1
    ae38:	9013      	str	r0, [sp, #76]	; 0x4c
}
    ae3a:	e6f6      	b.n	ac2a <_ZN3app12touch_sensor18start_touch_sensor17h873b70130f158b85E+0x5e>

0000ae3c <_ZN3app12touch_sensor23touch_interrupt_handler17hd146f06bc0a75300E>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
    ae3c:	b580      	push	{r7, lr}
    ae3e:	b086      	sub	sp, #24
    ae40:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
    ae42:	f240 11f4 	movw	r1, #500	; 0x1f4
    ae46:	f2c2 0100 	movt	r1, #8192	; 0x2000
    ae4a:	6088      	str	r0, [r1, #8]
    ae4c:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
    ae4e:	f7fd fe1e 	bl	8a8e <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    ae52:	e7ff      	b.n	ae54 <_ZN3app12touch_sensor23touch_interrupt_handler17hd146f06bc0a75300E+0x18>
    ae54:	f24a 5188 	movw	r1, #42376	; 0xa588
    ae58:	f2c0 0101 	movt	r1, #1
    ae5c:	f64a 13d8 	movw	r3, #43480	; 0xa9d8
    ae60:	f2c0 0301 	movt	r3, #1
    ae64:	a802      	add	r0, sp, #8
    ae66:	2208      	movs	r2, #8
    ae68:	f7ff fe86 	bl	ab78 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h999fe3470f07fb23E>
    ae6c:	4601      	mov	r1, r0
    ae6e:	9005      	str	r0, [sp, #20]
    ae70:	9101      	str	r1, [sp, #4]
    ae72:	e7ff      	b.n	ae74 <_ZN3app12touch_sensor23touch_interrupt_handler17hd146f06bc0a75300E+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
    ae74:	f240 11f4 	movw	r1, #500	; 0x1f4
    ae78:	f2c2 0100 	movt	r1, #8192	; 0x2000
    ae7c:	9801      	ldr	r0, [sp, #4]
    ae7e:	f00c f9b8 	bl	171f2 <os_eventq_put>
    ae82:	e7ff      	b.n	ae84 <_ZN3app12touch_sensor23touch_interrupt_handler17hd146f06bc0a75300E+0x48>
    //console::print("touch\n"); ////
}
    ae84:	b006      	add	sp, #24
    ae86:	bd80      	pop	{r7, pc}

0000ae88 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
    ae88:	b580      	push	{r7, lr}
    ae8a:	b094      	sub	sp, #80	; 0x50
    ae8c:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
    ae8e:	f240 1060 	movw	r0, #352	; 0x160
    ae92:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae96:	f000 f894 	bl	afc2 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E>
    ae9a:	9006      	str	r0, [sp, #24]
    ae9c:	e7ff      	b.n	ae9e <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x16>
    ae9e:	f64a 11e8 	movw	r1, #43496	; 0xa9e8
    aea2:	f2c0 0101 	movt	r1, #1
    aea6:	f64a 13f8 	movw	r3, #43512	; 0xa9f8
    aeaa:	f2c0 0301 	movt	r3, #1
    aeae:	220e      	movs	r2, #14
    aeb0:	9806      	ldr	r0, [sp, #24]
    aeb2:	f7fd fda0 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    aeb6:	e7ff      	b.n	aeb8 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
    aeb8:	f240 1060 	movw	r0, #352	; 0x160
    aebc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aec0:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    aec4:	2100      	movs	r1, #0
    aec6:	9107      	str	r1, [sp, #28]
    aec8:	9008      	str	r0, [sp, #32]
    aeca:	9807      	ldr	r0, [sp, #28]
    aecc:	9908      	ldr	r1, [sp, #32]
    aece:	f001 fc50 	bl	c772 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    aed2:	9005      	str	r0, [sp, #20]
    aed4:	9104      	str	r1, [sp, #16]
    aed6:	e7ff      	b.n	aed8 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x50>
    aed8:	9805      	ldr	r0, [sp, #20]
    aeda:	9009      	str	r0, [sp, #36]	; 0x24
    aedc:	9904      	ldr	r1, [sp, #16]
    aede:	910a      	str	r1, [sp, #40]	; 0x28
    aee0:	e7ff      	b.n	aee2 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x5a>
    aee2:	a809      	add	r0, sp, #36	; 0x24
    aee4:	f001 fbba 	bl	c65c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    aee8:	910c      	str	r1, [sp, #48]	; 0x30
    aeea:	900b      	str	r0, [sp, #44]	; 0x2c
    aeec:	e7ff      	b.n	aeee <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x66>
    aeee:	980b      	ldr	r0, [sp, #44]	; 0x2c
    aef0:	2800      	cmp	r0, #0
    aef2:	d001      	beq.n	aef8 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x70>
    aef4:	e7ff      	b.n	aef6 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x6e>
    aef6:	e002      	b.n	aefe <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
    aef8:	b014      	add	sp, #80	; 0x50
    aefa:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
    aefc:	defe      	udf	#254	; 0xfe
    aefe:	980c      	ldr	r0, [sp, #48]	; 0x30
    af00:	900f      	str	r0, [sp, #60]	; 0x3c
    af02:	9010      	str	r0, [sp, #64]	; 0x40
    af04:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    af06:	2809      	cmp	r0, #9
    af08:	9003      	str	r0, [sp, #12]
    af0a:	d851      	bhi.n	afb0 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x128>
    af0c:	e7ff      	b.n	af0e <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x86>
    af0e:	f240 1060 	movw	r0, #352	; 0x160
    af12:	f2c2 0000 	movt	r0, #8192	; 0x2000
    af16:	9903      	ldr	r1, [sp, #12]
    af18:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    af1c:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
    af20:	4603      	mov	r3, r0
    af22:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    af26:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    af2a:	46e6      	mov	lr, ip
    af2c:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
    af30:	7912      	ldrb	r2, [r2, #4]
    af32:	4694      	mov	ip, r2
    af34:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
    af38:	2800      	cmp	r0, #0
    af3a:	9302      	str	r3, [sp, #8]
    af3c:	f8cd e004 	str.w	lr, [sp, #4]
    af40:	f8cd c000 	str.w	ip, [sp]
    af44:	d008      	beq.n	af58 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0xd0>
    af46:	e003      	b.n	af50 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0xc8>
    af48:	2001      	movs	r0, #1
    af4a:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    af4e:	e008      	b.n	af62 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0xda>
    af50:	2000      	movs	r0, #0
    af52:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    af56:	e004      	b.n	af62 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0xda>
    af58:	9801      	ldr	r0, [sp, #4]
    af5a:	0401      	lsls	r1, r0, #16
    af5c:	2900      	cmp	r1, #0
    af5e:	d0f3      	beq.n	af48 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0xc0>
    af60:	e7f6      	b.n	af50 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0xc8>
    af62:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    af66:	07c0      	lsls	r0, r0, #31
    af68:	2800      	cmp	r0, #0
    af6a:	d105      	bne.n	af78 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0xf0>
    af6c:	e7ff      	b.n	af6e <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0xe6>
            if action != 0 && action != 2 { continue; }
    af6e:	9800      	ldr	r0, [sp, #0]
    af70:	0601      	lsls	r1, r0, #24
    af72:	2900      	cmp	r1, #0
    af74:	d10a      	bne.n	af8c <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x104>
    af76:	e005      	b.n	af84 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0xfc>
            if x == 0 && y == 0 { continue; }
    af78:	e7ff      	b.n	af7a <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0xf2>
    af7a:	e7b2      	b.n	aee2 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x5a>
    af7c:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
    af7e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    af82:	e008      	b.n	af96 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x10e>
    af84:	2000      	movs	r0, #0
    af86:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    af8a:	e004      	b.n	af96 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x10e>
    af8c:	9800      	ldr	r0, [sp, #0]
    af8e:	b2c1      	uxtb	r1, r0
    af90:	2902      	cmp	r1, #2
    af92:	d1f3      	bne.n	af7c <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0xf4>
    af94:	e7f6      	b.n	af84 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0xfc>
    af96:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    af9a:	07c0      	lsls	r0, r0, #31
    af9c:	2800      	cmp	r0, #0
    af9e:	d105      	bne.n	afac <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x124>
    afa0:	e7ff      	b.n	afa2 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x11a>
            super::handle_touch(x, y);
    afa2:	9802      	ldr	r0, [sp, #8]
    afa4:	9901      	ldr	r1, [sp, #4]
    afa6:	f7fd fb36 	bl	8616 <_ZN3app12handle_touch17h8b78104f4aedbf0fE>
    afaa:	e000      	b.n	afae <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x126>
            if action != 0 && action != 2 { continue; }
    afac:	e7e5      	b.n	af7a <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
    afae:	e798      	b.n	aee2 <_ZN3app12touch_sensor20touch_event_callback17hfe7d37da09c0a3e0E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    afb0:	f64a 2008 	movw	r0, #43528	; 0xaa08
    afb4:	f2c0 0001 	movt	r0, #1
    afb8:	220a      	movs	r2, #10
    afba:	9903      	ldr	r1, [sp, #12]
    afbc:	f008 fec6 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    afc0:	defe      	udf	#254	; 0xfe

0000afc2 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
    afc2:	b580      	push	{r7, lr}
    afc4:	b0de      	sub	sp, #376	; 0x178
    afc6:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
    afc8:	4669      	mov	r1, sp
    afca:	223f      	movs	r2, #63	; 0x3f
    afcc:	600a      	str	r2, [r1, #0]
    afce:	f240 13b2 	movw	r3, #434	; 0x1b2
    afd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    afd6:	2115      	movs	r1, #21
    afd8:	f04f 0c00 	mov.w	ip, #0
    afdc:	9026      	str	r0, [sp, #152]	; 0x98
    afde:	4608      	mov	r0, r1
    afe0:	4661      	mov	r1, ip
    afe2:	f000 fb97 	bl	b714 <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E>
    afe6:	9025      	str	r0, [sp, #148]	; 0x94
    afe8:	e7ff      	b.n	afea <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x28>
    afea:	f64a 2118 	movw	r1, #43544	; 0xaa18
    afee:	f2c0 0101 	movt	r1, #1
    aff2:	f64a 232c 	movw	r3, #43564	; 0xaa2c
    aff6:	f2c0 0301 	movt	r3, #1
    affa:	2213      	movs	r2, #19
    affc:	9825      	ldr	r0, [sp, #148]	; 0x94
    affe:	f7fd fcfa 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    b002:	e7ff      	b.n	b004 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x42>
    b004:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
    b008:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
    b00a:	9024      	str	r0, [sp, #144]	; 0x90
    b00c:	9123      	str	r1, [sp, #140]	; 0x8c
    b00e:	f00f fa57 	bl	1a4c0 <__aeabi_memclr>
    b012:	a827      	add	r0, sp, #156	; 0x9c
    b014:	9924      	ldr	r1, [sp, #144]	; 0x90
    b016:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    b018:	f00f fa56 	bl	1a4c8 <__aeabi_memcpy>
    b01c:	e7ff      	b.n	b01e <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x5c>
    b01e:	a927      	add	r1, sp, #156	; 0x9c
    b020:	2252      	movs	r2, #82	; 0x52
    b022:	9826      	ldr	r0, [sp, #152]	; 0x98
    b024:	f00f fa50 	bl	1a4c8 <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
    b028:	f240 11b2 	movw	r1, #434	; 0x1b2
    b02c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    b030:	7889      	ldrb	r1, [r1, #2]
    b032:	f001 010f 	and.w	r1, r1, #15
    b036:	9a26      	ldr	r2, [sp, #152]	; 0x98
    b038:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    b03c:	2100      	movs	r1, #0
    data.count     = 0;
    b03e:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b042:	9150      	str	r1, [sp, #320]	; 0x140
    b044:	2105      	movs	r1, #5
    b046:	9151      	str	r1, [sp, #324]	; 0x144
    b048:	9950      	ldr	r1, [sp, #320]	; 0x140
    b04a:	9b51      	ldr	r3, [sp, #324]	; 0x144
    b04c:	9022      	str	r0, [sp, #136]	; 0x88
    b04e:	4608      	mov	r0, r1
    b050:	4619      	mov	r1, r3
    b052:	f001 fb8e 	bl	c772 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    b056:	9021      	str	r0, [sp, #132]	; 0x84
    b058:	9120      	str	r1, [sp, #128]	; 0x80
    b05a:	e7ff      	b.n	b05c <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x9a>
    b05c:	9821      	ldr	r0, [sp, #132]	; 0x84
    b05e:	9052      	str	r0, [sp, #328]	; 0x148
    b060:	9920      	ldr	r1, [sp, #128]	; 0x80
    b062:	9153      	str	r1, [sp, #332]	; 0x14c
    b064:	e7ff      	b.n	b066 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0xa4>
    b066:	a852      	add	r0, sp, #328	; 0x148
    b068:	f001 faf8 	bl	c65c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    b06c:	9155      	str	r1, [sp, #340]	; 0x154
    b06e:	9054      	str	r0, [sp, #336]	; 0x150
    b070:	e7ff      	b.n	b072 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0xb0>
    b072:	9854      	ldr	r0, [sp, #336]	; 0x150
    b074:	2800      	cmp	r0, #0
    b076:	d001      	beq.n	b07c <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0xba>
    b078:	e7ff      	b.n	b07a <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0xb8>
    b07a:	e001      	b.n	b080 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0xbe>
    b07c:	e00d      	b.n	b09a <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0xd8>
    b07e:	defe      	udf	#254	; 0xfe
    b080:	9855      	ldr	r0, [sp, #340]	; 0x154
    b082:	9058      	str	r0, [sp, #352]	; 0x160
    b084:	9059      	str	r0, [sp, #356]	; 0x164
    b086:	905a      	str	r0, [sp, #360]	; 0x168
    b088:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b08a:	fba1 1200 	umull	r1, r2, r1, r0
    b08e:	2a00      	cmp	r2, #0
    b090:	901f      	str	r0, [sp, #124]	; 0x7c
    b092:	911e      	str	r1, [sp, #120]	; 0x78
    b094:	f040 81c1 	bne.w	b41a <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x458>
    b098:	e002      	b.n	b0a0 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0xde>
    b09a:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
    b09c:	b05e      	add	sp, #376	; 0x178
    b09e:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b0a0:	981e      	ldr	r0, [sp, #120]	; 0x78
    b0a2:	1d41      	adds	r1, r0, #5
    b0a4:	460a      	mov	r2, r1
    b0a6:	4281      	cmp	r1, r0
    b0a8:	921d      	str	r2, [sp, #116]	; 0x74
    b0aa:	f0c0 81c2 	bcc.w	b432 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x470>
    b0ae:	e7ff      	b.n	b0b0 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0xee>
    b0b0:	981d      	ldr	r0, [sp, #116]	; 0x74
    b0b2:	283e      	cmp	r0, #62	; 0x3e
    b0b4:	f200 81c9 	bhi.w	b44a <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x488>
    b0b8:	e7ff      	b.n	b0ba <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0xf8>
    b0ba:	f240 10b2 	movw	r0, #434	; 0x1b2
    b0be:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b0c2:	991d      	ldr	r1, [sp, #116]	; 0x74
    b0c4:	5c40      	ldrb	r0, [r0, r1]
    b0c6:	0900      	lsrs	r0, r0, #4
    b0c8:	901c      	str	r0, [sp, #112]	; 0x70
    b0ca:	e7ff      	b.n	b0cc <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x10a>
    b0cc:	981c      	ldr	r0, [sp, #112]	; 0x70
    b0ce:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
    b0d2:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
    b0d4:	290e      	cmp	r1, #14
    b0d6:	d80b      	bhi.n	b0f0 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x12e>
    b0d8:	e7ff      	b.n	b0da <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x118>
        data.count += 1;
    b0da:	9826      	ldr	r0, [sp, #152]	; 0x98
    b0dc:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
    b0e0:	3101      	adds	r1, #1
    b0e2:	b2ca      	uxtb	r2, r1
    b0e4:	460b      	mov	r3, r1
    b0e6:	428a      	cmp	r2, r1
    b0e8:	931b      	str	r3, [sp, #108]	; 0x6c
    b0ea:	f040 81b7 	bne.w	b45c <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x49a>
    b0ee:	e001      	b.n	b0f4 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x132>
        if pointid >= HYN_MAX_ID { break; }
    b0f0:	e7ff      	b.n	b0f2 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x130>
    b0f2:	e7d2      	b.n	b09a <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0xd8>
        data.count += 1;
    b0f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
    b0f6:	9926      	ldr	r1, [sp, #152]	; 0x98
    b0f8:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    b0fc:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b0fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b100:	fba2 2c03 	umull	r2, ip, r2, r3
    b104:	f1bc 0f00 	cmp.w	ip, #0
    b108:	921a      	str	r2, [sp, #104]	; 0x68
    b10a:	f040 81b3 	bne.w	b474 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x4b2>
    b10e:	e7ff      	b.n	b110 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x14e>
    b110:	981a      	ldr	r0, [sp, #104]	; 0x68
    b112:	1cc1      	adds	r1, r0, #3
    b114:	460a      	mov	r2, r1
    b116:	4281      	cmp	r1, r0
    b118:	9219      	str	r2, [sp, #100]	; 0x64
    b11a:	f0c0 81b7 	bcc.w	b48c <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x4ca>
    b11e:	e7ff      	b.n	b120 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x15e>
    b120:	9819      	ldr	r0, [sp, #100]	; 0x64
    b122:	283e      	cmp	r0, #62	; 0x3e
    b124:	f200 81be 	bhi.w	b4a4 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x4e2>
    b128:	e7ff      	b.n	b12a <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x168>
    b12a:	f240 10b2 	movw	r0, #434	; 0x1b2
    b12e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b132:	9919      	ldr	r1, [sp, #100]	; 0x64
    b134:	5c40      	ldrb	r0, [r0, r1]
    b136:	f000 000f 	and.w	r0, r0, #15
    b13a:	4602      	mov	r2, r0
    b13c:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
    b140:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b142:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b144:	fba0 0c03 	umull	r0, ip, r0, r3
    b148:	f1bc 0f00 	cmp.w	ip, #0
    b14c:	9218      	str	r2, [sp, #96]	; 0x60
    b14e:	9017      	str	r0, [sp, #92]	; 0x5c
    b150:	f040 81b1 	bne.w	b4b6 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x4f4>
    b154:	e7ff      	b.n	b156 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x194>
    b156:	9817      	ldr	r0, [sp, #92]	; 0x5c
    b158:	1d01      	adds	r1, r0, #4
    b15a:	460a      	mov	r2, r1
    b15c:	4281      	cmp	r1, r0
    b15e:	9216      	str	r2, [sp, #88]	; 0x58
    b160:	f0c0 81b5 	bcc.w	b4ce <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x50c>
    b164:	e7ff      	b.n	b166 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x1a4>
    b166:	9816      	ldr	r0, [sp, #88]	; 0x58
    b168:	283e      	cmp	r0, #62	; 0x3e
    b16a:	f200 81bc 	bhi.w	b4e6 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x524>
    b16e:	e7ff      	b.n	b170 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x1ae>
    b170:	f240 10b2 	movw	r0, #434	; 0x1b2
    b174:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b178:	9916      	ldr	r1, [sp, #88]	; 0x58
    b17a:	5c40      	ldrb	r0, [r0, r1]
    b17c:	4602      	mov	r2, r0
    b17e:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
    b182:	9818      	ldr	r0, [sp, #96]	; 0x60
    b184:	0203      	lsls	r3, r0, #8
    b186:	9215      	str	r2, [sp, #84]	; 0x54
    b188:	9314      	str	r3, [sp, #80]	; 0x50
    b18a:	e7ff      	b.n	b18c <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x1ca>
    b18c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b18e:	2809      	cmp	r0, #9
    b190:	f200 81b2 	bhi.w	b4f8 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x536>
    b194:	e7ff      	b.n	b196 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x1d4>
    b196:	9814      	ldr	r0, [sp, #80]	; 0x50
    b198:	9915      	ldr	r1, [sp, #84]	; 0x54
    b19a:	ea40 0201 	orr.w	r2, r0, r1
    b19e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    b1a0:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
    b1a4:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
    b1a8:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b1aa:	fba2 2e0c 	umull	r2, lr, r2, ip
    b1ae:	f1be 0f00 	cmp.w	lr, #0
    b1b2:	9213      	str	r2, [sp, #76]	; 0x4c
    b1b4:	f040 81a9 	bne.w	b50a <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x548>
    b1b8:	e7ff      	b.n	b1ba <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x1f8>
    b1ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
    b1bc:	1d41      	adds	r1, r0, #5
    b1be:	460a      	mov	r2, r1
    b1c0:	4281      	cmp	r1, r0
    b1c2:	9212      	str	r2, [sp, #72]	; 0x48
    b1c4:	f0c0 81ad 	bcc.w	b522 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x560>
    b1c8:	e7ff      	b.n	b1ca <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x208>
    b1ca:	9812      	ldr	r0, [sp, #72]	; 0x48
    b1cc:	283e      	cmp	r0, #62	; 0x3e
    b1ce:	f200 81b4 	bhi.w	b53a <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x578>
    b1d2:	e7ff      	b.n	b1d4 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x212>
    b1d4:	f240 10b2 	movw	r0, #434	; 0x1b2
    b1d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b1dc:	9912      	ldr	r1, [sp, #72]	; 0x48
    b1de:	5c40      	ldrb	r0, [r0, r1]
    b1e0:	f000 000f 	and.w	r0, r0, #15
    b1e4:	4602      	mov	r2, r0
    b1e6:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
    b1ea:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b1ec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    b1ee:	fba0 0c03 	umull	r0, ip, r0, r3
    b1f2:	f1bc 0f00 	cmp.w	ip, #0
    b1f6:	9211      	str	r2, [sp, #68]	; 0x44
    b1f8:	9010      	str	r0, [sp, #64]	; 0x40
    b1fa:	f040 81a7 	bne.w	b54c <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x58a>
    b1fe:	e7ff      	b.n	b200 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x23e>
    b200:	9810      	ldr	r0, [sp, #64]	; 0x40
    b202:	1d81      	adds	r1, r0, #6
    b204:	460a      	mov	r2, r1
    b206:	4281      	cmp	r1, r0
    b208:	920f      	str	r2, [sp, #60]	; 0x3c
    b20a:	f0c0 81ab 	bcc.w	b564 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x5a2>
    b20e:	e7ff      	b.n	b210 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x24e>
    b210:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b212:	283e      	cmp	r0, #62	; 0x3e
    b214:	f200 81b2 	bhi.w	b57c <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x5ba>
    b218:	e7ff      	b.n	b21a <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x258>
    b21a:	f240 10b2 	movw	r0, #434	; 0x1b2
    b21e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b222:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b224:	5c40      	ldrb	r0, [r0, r1]
    b226:	4602      	mov	r2, r0
    b228:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
    b22c:	9811      	ldr	r0, [sp, #68]	; 0x44
    b22e:	0203      	lsls	r3, r0, #8
    b230:	920e      	str	r2, [sp, #56]	; 0x38
    b232:	930d      	str	r3, [sp, #52]	; 0x34
    b234:	e7ff      	b.n	b236 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x274>
    b236:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b238:	2809      	cmp	r0, #9
    b23a:	f200 81a8 	bhi.w	b58e <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x5cc>
    b23e:	e7ff      	b.n	b240 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x27e>
    b240:	9826      	ldr	r0, [sp, #152]	; 0x98
    b242:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b244:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b248:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b24a:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    b24e:	ea43 0e0c 	orr.w	lr, r3, ip
    b252:	f8a2 e002 	strh.w	lr, [r2, #2]
    b256:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b258:	fba2 2e01 	umull	r2, lr, r2, r1
    b25c:	f1be 0f00 	cmp.w	lr, #0
    b260:	920c      	str	r2, [sp, #48]	; 0x30
    b262:	f040 819d 	bne.w	b5a0 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x5de>
    b266:	e7ff      	b.n	b268 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x2a6>
    b268:	980c      	ldr	r0, [sp, #48]	; 0x30
    b26a:	1cc1      	adds	r1, r0, #3
    b26c:	460a      	mov	r2, r1
    b26e:	4281      	cmp	r1, r0
    b270:	920b      	str	r2, [sp, #44]	; 0x2c
    b272:	f0c0 81a1 	bcc.w	b5b8 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x5f6>
    b276:	e7ff      	b.n	b278 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x2b6>
    b278:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b27a:	283e      	cmp	r0, #62	; 0x3e
    b27c:	f200 81a8 	bhi.w	b5d0 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x60e>
    b280:	e7ff      	b.n	b282 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x2c0>
    b282:	f240 10b2 	movw	r0, #434	; 0x1b2
    b286:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b28a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b28c:	5c40      	ldrb	r0, [r0, r1]
    b28e:	0980      	lsrs	r0, r0, #6
    b290:	900a      	str	r0, [sp, #40]	; 0x28
    b292:	e7ff      	b.n	b294 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x2d2>
        data.touches[i].action =
    b294:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b296:	2809      	cmp	r0, #9
    b298:	f200 81a3 	bhi.w	b5e2 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x620>
    b29c:	e7ff      	b.n	b29e <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x2dc>
    b29e:	9826      	ldr	r0, [sp, #152]	; 0x98
    b2a0:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b2a2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b2a8:	7113      	strb	r3, [r2, #4]
    b2aa:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b2ac:	fba2 2c01 	umull	r2, ip, r2, r1
    b2b0:	f1bc 0f00 	cmp.w	ip, #0
    b2b4:	9209      	str	r2, [sp, #36]	; 0x24
    b2b6:	f040 819d 	bne.w	b5f4 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x632>
    b2ba:	e7ff      	b.n	b2bc <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x2fa>
    b2bc:	9809      	ldr	r0, [sp, #36]	; 0x24
    b2be:	1d41      	adds	r1, r0, #5
    b2c0:	460a      	mov	r2, r1
    b2c2:	4281      	cmp	r1, r0
    b2c4:	9208      	str	r2, [sp, #32]
    b2c6:	f0c0 81a1 	bcc.w	b60c <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x64a>
    b2ca:	e7ff      	b.n	b2cc <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x30a>
    b2cc:	9808      	ldr	r0, [sp, #32]
    b2ce:	283e      	cmp	r0, #62	; 0x3e
    b2d0:	f200 81a8 	bhi.w	b624 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x662>
    b2d4:	e7ff      	b.n	b2d6 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x314>
    b2d6:	f240 10b2 	movw	r0, #434	; 0x1b2
    b2da:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b2de:	9908      	ldr	r1, [sp, #32]
    b2e0:	5c40      	ldrb	r0, [r0, r1]
    b2e2:	0900      	lsrs	r0, r0, #4
    b2e4:	9007      	str	r0, [sp, #28]
    b2e6:	e7ff      	b.n	b2e8 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x326>
        data.touches[i].finger =
    b2e8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b2ea:	2809      	cmp	r0, #9
    b2ec:	f200 81a3 	bhi.w	b636 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x674>
    b2f0:	e7ff      	b.n	b2f2 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x330>
    b2f2:	9826      	ldr	r0, [sp, #152]	; 0x98
    b2f4:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b2f6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b2fa:	9b07      	ldr	r3, [sp, #28]
    b2fc:	7153      	strb	r3, [r2, #5]
    b2fe:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b300:	fba2 2c01 	umull	r2, ip, r2, r1
    b304:	f1bc 0f00 	cmp.w	ip, #0
    b308:	9206      	str	r2, [sp, #24]
    b30a:	f040 819d 	bne.w	b648 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x686>
    b30e:	e7ff      	b.n	b310 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x34e>
    b310:	9806      	ldr	r0, [sp, #24]
    b312:	1dc1      	adds	r1, r0, #7
    b314:	460a      	mov	r2, r1
    b316:	4281      	cmp	r1, r0
    b318:	9205      	str	r2, [sp, #20]
    b31a:	f0c0 81a1 	bcc.w	b660 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x69e>
    b31e:	e7ff      	b.n	b320 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x35e>
    b320:	9805      	ldr	r0, [sp, #20]
    b322:	283e      	cmp	r0, #62	; 0x3e
    b324:	f200 81a8 	bhi.w	b678 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x6b6>
    b328:	e7ff      	b.n	b32a <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x368>
    b32a:	f240 10b2 	movw	r0, #434	; 0x1b2
    b32e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b332:	9905      	ldr	r1, [sp, #20]
    b334:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
    b336:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    b338:	2a09      	cmp	r2, #9
    b33a:	9004      	str	r0, [sp, #16]
    b33c:	f200 81a5 	bhi.w	b68a <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x6c8>
    b340:	e7ff      	b.n	b342 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x380>
    b342:	9826      	ldr	r0, [sp, #152]	; 0x98
    b344:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b346:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b34a:	9b04      	ldr	r3, [sp, #16]
    b34c:	7193      	strb	r3, [r2, #6]
    b34e:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b350:	fba2 2c01 	umull	r2, ip, r2, r1
    b354:	f1bc 0f00 	cmp.w	ip, #0
    b358:	9203      	str	r2, [sp, #12]
    b35a:	f040 819f 	bne.w	b69c <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x6da>
    b35e:	e7ff      	b.n	b360 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x39e>
    b360:	9803      	ldr	r0, [sp, #12]
    b362:	f100 0108 	add.w	r1, r0, #8
    b366:	460a      	mov	r2, r1
    b368:	4281      	cmp	r1, r0
    b36a:	9202      	str	r2, [sp, #8]
    b36c:	f0c0 81a2 	bcc.w	b6b4 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x6f2>
    b370:	e7ff      	b.n	b372 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x3b0>
    b372:	9802      	ldr	r0, [sp, #8]
    b374:	283e      	cmp	r0, #62	; 0x3e
    b376:	f200 81a9 	bhi.w	b6cc <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x70a>
    b37a:	e7ff      	b.n	b37c <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x3ba>
    b37c:	f240 10b2 	movw	r0, #434	; 0x1b2
    b380:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b384:	9902      	ldr	r1, [sp, #8]
    b386:	5c40      	ldrb	r0, [r0, r1]
    b388:	0900      	lsrs	r0, r0, #4
    b38a:	9001      	str	r0, [sp, #4]
    b38c:	e7ff      	b.n	b38e <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x3cc>
        data.touches[i].area =
    b38e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b390:	2809      	cmp	r0, #9
    b392:	f200 81a4 	bhi.w	b6de <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x71c>
    b396:	e7ff      	b.n	b398 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x3d6>
    b398:	9826      	ldr	r0, [sp, #152]	; 0x98
    b39a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b39c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b3a0:	9b01      	ldr	r3, [sp, #4]
    b3a2:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b3a4:	290a      	cmp	r1, #10
    b3a6:	d326      	bcc.n	b3f6 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x434>
    b3a8:	e1a2      	b.n	b6f0 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x72e>
    b3aa:	2001      	movs	r0, #1
    b3ac:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b3b0:	e009      	b.n	b3c6 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x404>
    b3b2:	2000      	movs	r0, #0
    b3b4:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b3b8:	e005      	b.n	b3c6 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x404>
            && (data.point_num == 0) {
    b3ba:	9826      	ldr	r0, [sp, #152]	; 0x98
    b3bc:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b3c0:	2900      	cmp	r1, #0
    b3c2:	d0f2      	beq.n	b3aa <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x3e8>
    b3c4:	e7f5      	b.n	b3b2 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x3f0>
    b3c6:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
    b3ca:	07c0      	lsls	r0, r0, #31
    b3cc:	2800      	cmp	r0, #0
    b3ce:	d123      	bne.n	b418 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x456>
    b3d0:	e021      	b.n	b416 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x454>
    b3d2:	2001      	movs	r0, #1
    b3d4:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b3d8:	e007      	b.n	b3ea <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x428>
    b3da:	2000      	movs	r0, #0
    b3dc:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b3e0:	e003      	b.n	b3ea <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x428>
    b3e2:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b3e4:	280a      	cmp	r0, #10
    b3e6:	d30e      	bcc.n	b406 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x444>
    b3e8:	e18b      	b.n	b702 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x740>
    b3ea:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
    b3ee:	07c0      	lsls	r0, r0, #31
    b3f0:	2800      	cmp	r0, #0
    b3f2:	d1e2      	bne.n	b3ba <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x3f8>
    b3f4:	e7dd      	b.n	b3b2 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x3f0>
    b3f6:	9826      	ldr	r0, [sp, #152]	; 0x98
    b3f8:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b3fa:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b3fe:	7912      	ldrb	r2, [r2, #4]
    b400:	2a00      	cmp	r2, #0
    b402:	d0e6      	beq.n	b3d2 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x410>
    b404:	e7ed      	b.n	b3e2 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x420>
    b406:	9826      	ldr	r0, [sp, #152]	; 0x98
    b408:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b40a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b40e:	7912      	ldrb	r2, [r2, #4]
    b410:	2a02      	cmp	r2, #2
    b412:	d0de      	beq.n	b3d2 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x410>
    b414:	e7e1      	b.n	b3da <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b416:	e626      	b.n	b066 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0xa4>
            break;
    b418:	e66b      	b.n	b0f2 <_ZN3app12touch_sensor14read_touchdata17hbb999b2dbc612f29E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b41a:	f64a 2050 	movw	r0, #43600	; 0xaa50
    b41e:	f2c0 0001 	movt	r0, #1
    b422:	f64a 223c 	movw	r2, #43580	; 0xaa3c
    b426:	f2c0 0201 	movt	r2, #1
    b42a:	2121      	movs	r1, #33	; 0x21
    b42c:	f008 fc78 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b430:	defe      	udf	#254	; 0xfe
    b432:	f64a 2090 	movw	r0, #43664	; 0xaa90
    b436:	f2c0 0001 	movt	r0, #1
    b43a:	f64a 2274 	movw	r2, #43636	; 0xaa74
    b43e:	f2c0 0201 	movt	r2, #1
    b442:	211c      	movs	r1, #28
    b444:	f008 fc6c 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b448:	defe      	udf	#254	; 0xfe
    b44a:	f64a 20ac 	movw	r0, #43692	; 0xaaac
    b44e:	f2c0 0001 	movt	r0, #1
    b452:	223f      	movs	r2, #63	; 0x3f
    b454:	991d      	ldr	r1, [sp, #116]	; 0x74
    b456:	f008 fc79 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b45a:	defe      	udf	#254	; 0xfe
        data.count += 1;
    b45c:	f64a 2090 	movw	r0, #43664	; 0xaa90
    b460:	f2c0 0001 	movt	r0, #1
    b464:	f64a 22bc 	movw	r2, #43708	; 0xaabc
    b468:	f2c0 0201 	movt	r2, #1
    b46c:	211c      	movs	r1, #28
    b46e:	f008 fc57 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b472:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b474:	f64a 2050 	movw	r0, #43600	; 0xaa50
    b478:	f2c0 0001 	movt	r0, #1
    b47c:	f64a 22cc 	movw	r2, #43724	; 0xaacc
    b480:	f2c0 0201 	movt	r2, #1
    b484:	2121      	movs	r1, #33	; 0x21
    b486:	f008 fc4b 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b48a:	defe      	udf	#254	; 0xfe
    b48c:	f64a 2090 	movw	r0, #43664	; 0xaa90
    b490:	f2c0 0001 	movt	r0, #1
    b494:	f64a 22dc 	movw	r2, #43740	; 0xaadc
    b498:	f2c0 0201 	movt	r2, #1
    b49c:	211c      	movs	r1, #28
    b49e:	f008 fc3f 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b4a2:	defe      	udf	#254	; 0xfe
    b4a4:	f64a 20ec 	movw	r0, #43756	; 0xaaec
    b4a8:	f2c0 0001 	movt	r0, #1
    b4ac:	223f      	movs	r2, #63	; 0x3f
    b4ae:	9919      	ldr	r1, [sp, #100]	; 0x64
    b4b0:	f008 fc4c 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b4b4:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b4b6:	f64a 2050 	movw	r0, #43600	; 0xaa50
    b4ba:	f2c0 0001 	movt	r0, #1
    b4be:	f64a 22fc 	movw	r2, #43772	; 0xaafc
    b4c2:	f2c0 0201 	movt	r2, #1
    b4c6:	2121      	movs	r1, #33	; 0x21
    b4c8:	f008 fc2a 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b4cc:	defe      	udf	#254	; 0xfe
    b4ce:	f64a 2090 	movw	r0, #43664	; 0xaa90
    b4d2:	f2c0 0001 	movt	r0, #1
    b4d6:	f64a 320c 	movw	r2, #43788	; 0xab0c
    b4da:	f2c0 0201 	movt	r2, #1
    b4de:	211c      	movs	r1, #28
    b4e0:	f008 fc1e 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b4e4:	defe      	udf	#254	; 0xfe
    b4e6:	f64a 301c 	movw	r0, #43804	; 0xab1c
    b4ea:	f2c0 0001 	movt	r0, #1
    b4ee:	223f      	movs	r2, #63	; 0x3f
    b4f0:	9916      	ldr	r1, [sp, #88]	; 0x58
    b4f2:	f008 fc2b 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b4f6:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
    b4f8:	f64a 302c 	movw	r0, #43820	; 0xab2c
    b4fc:	f2c0 0001 	movt	r0, #1
    b500:	220a      	movs	r2, #10
    b502:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b504:	f008 fc22 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b508:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b50a:	f64a 2050 	movw	r0, #43600	; 0xaa50
    b50e:	f2c0 0001 	movt	r0, #1
    b512:	f64a 323c 	movw	r2, #43836	; 0xab3c
    b516:	f2c0 0201 	movt	r2, #1
    b51a:	2121      	movs	r1, #33	; 0x21
    b51c:	f008 fc00 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b520:	defe      	udf	#254	; 0xfe
    b522:	f64a 2090 	movw	r0, #43664	; 0xaa90
    b526:	f2c0 0001 	movt	r0, #1
    b52a:	f64a 324c 	movw	r2, #43852	; 0xab4c
    b52e:	f2c0 0201 	movt	r2, #1
    b532:	211c      	movs	r1, #28
    b534:	f008 fbf4 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b538:	defe      	udf	#254	; 0xfe
    b53a:	f64a 305c 	movw	r0, #43868	; 0xab5c
    b53e:	f2c0 0001 	movt	r0, #1
    b542:	223f      	movs	r2, #63	; 0x3f
    b544:	9912      	ldr	r1, [sp, #72]	; 0x48
    b546:	f008 fc01 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b54a:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b54c:	f64a 2050 	movw	r0, #43600	; 0xaa50
    b550:	f2c0 0001 	movt	r0, #1
    b554:	f64a 326c 	movw	r2, #43884	; 0xab6c
    b558:	f2c0 0201 	movt	r2, #1
    b55c:	2121      	movs	r1, #33	; 0x21
    b55e:	f008 fbdf 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b562:	defe      	udf	#254	; 0xfe
    b564:	f64a 2090 	movw	r0, #43664	; 0xaa90
    b568:	f2c0 0001 	movt	r0, #1
    b56c:	f64a 327c 	movw	r2, #43900	; 0xab7c
    b570:	f2c0 0201 	movt	r2, #1
    b574:	211c      	movs	r1, #28
    b576:	f008 fbd3 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b57a:	defe      	udf	#254	; 0xfe
    b57c:	f64a 308c 	movw	r0, #43916	; 0xab8c
    b580:	f2c0 0001 	movt	r0, #1
    b584:	223f      	movs	r2, #63	; 0x3f
    b586:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b588:	f008 fbe0 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b58c:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
    b58e:	f64a 309c 	movw	r0, #43932	; 0xab9c
    b592:	f2c0 0001 	movt	r0, #1
    b596:	220a      	movs	r2, #10
    b598:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b59a:	f008 fbd7 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b59e:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b5a0:	f64a 2050 	movw	r0, #43600	; 0xaa50
    b5a4:	f2c0 0001 	movt	r0, #1
    b5a8:	f64a 32ac 	movw	r2, #43948	; 0xabac
    b5ac:	f2c0 0201 	movt	r2, #1
    b5b0:	2121      	movs	r1, #33	; 0x21
    b5b2:	f008 fbb5 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b5b6:	defe      	udf	#254	; 0xfe
    b5b8:	f64a 2090 	movw	r0, #43664	; 0xaa90
    b5bc:	f2c0 0001 	movt	r0, #1
    b5c0:	f64a 32bc 	movw	r2, #43964	; 0xabbc
    b5c4:	f2c0 0201 	movt	r2, #1
    b5c8:	211c      	movs	r1, #28
    b5ca:	f008 fba9 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b5ce:	defe      	udf	#254	; 0xfe
    b5d0:	f64a 30cc 	movw	r0, #43980	; 0xabcc
    b5d4:	f2c0 0001 	movt	r0, #1
    b5d8:	223f      	movs	r2, #63	; 0x3f
    b5da:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b5dc:	f008 fbb6 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b5e0:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
    b5e2:	f64a 30dc 	movw	r0, #43996	; 0xabdc
    b5e6:	f2c0 0001 	movt	r0, #1
    b5ea:	220a      	movs	r2, #10
    b5ec:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b5ee:	f008 fbad 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b5f2:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b5f4:	f64a 2050 	movw	r0, #43600	; 0xaa50
    b5f8:	f2c0 0001 	movt	r0, #1
    b5fc:	f64a 32ec 	movw	r2, #44012	; 0xabec
    b600:	f2c0 0201 	movt	r2, #1
    b604:	2121      	movs	r1, #33	; 0x21
    b606:	f008 fb8b 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b60a:	defe      	udf	#254	; 0xfe
    b60c:	f64a 2090 	movw	r0, #43664	; 0xaa90
    b610:	f2c0 0001 	movt	r0, #1
    b614:	f64a 32fc 	movw	r2, #44028	; 0xabfc
    b618:	f2c0 0201 	movt	r2, #1
    b61c:	211c      	movs	r1, #28
    b61e:	f008 fb7f 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b622:	defe      	udf	#254	; 0xfe
    b624:	f64a 400c 	movw	r0, #44044	; 0xac0c
    b628:	f2c0 0001 	movt	r0, #1
    b62c:	223f      	movs	r2, #63	; 0x3f
    b62e:	9908      	ldr	r1, [sp, #32]
    b630:	f008 fb8c 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b634:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
    b636:	f64a 401c 	movw	r0, #44060	; 0xac1c
    b63a:	f2c0 0001 	movt	r0, #1
    b63e:	220a      	movs	r2, #10
    b640:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b642:	f008 fb83 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b646:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b648:	f64a 2050 	movw	r0, #43600	; 0xaa50
    b64c:	f2c0 0001 	movt	r0, #1
    b650:	f64a 422c 	movw	r2, #44076	; 0xac2c
    b654:	f2c0 0201 	movt	r2, #1
    b658:	2121      	movs	r1, #33	; 0x21
    b65a:	f008 fb61 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b65e:	defe      	udf	#254	; 0xfe
    b660:	f64a 2090 	movw	r0, #43664	; 0xaa90
    b664:	f2c0 0001 	movt	r0, #1
    b668:	f64a 423c 	movw	r2, #44092	; 0xac3c
    b66c:	f2c0 0201 	movt	r2, #1
    b670:	211c      	movs	r1, #28
    b672:	f008 fb55 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b676:	defe      	udf	#254	; 0xfe
    b678:	f64a 404c 	movw	r0, #44108	; 0xac4c
    b67c:	f2c0 0001 	movt	r0, #1
    b680:	223f      	movs	r2, #63	; 0x3f
    b682:	9905      	ldr	r1, [sp, #20]
    b684:	f008 fb62 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b688:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
    b68a:	f64a 405c 	movw	r0, #44124	; 0xac5c
    b68e:	f2c0 0001 	movt	r0, #1
    b692:	220a      	movs	r2, #10
    b694:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b696:	f008 fb59 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b69a:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b69c:	f64a 2050 	movw	r0, #43600	; 0xaa50
    b6a0:	f2c0 0001 	movt	r0, #1
    b6a4:	f64a 426c 	movw	r2, #44140	; 0xac6c
    b6a8:	f2c0 0201 	movt	r2, #1
    b6ac:	2121      	movs	r1, #33	; 0x21
    b6ae:	f008 fb37 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6b2:	defe      	udf	#254	; 0xfe
    b6b4:	f64a 2090 	movw	r0, #43664	; 0xaa90
    b6b8:	f2c0 0001 	movt	r0, #1
    b6bc:	f64a 427c 	movw	r2, #44156	; 0xac7c
    b6c0:	f2c0 0201 	movt	r2, #1
    b6c4:	211c      	movs	r1, #28
    b6c6:	f008 fb2b 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b6ca:	defe      	udf	#254	; 0xfe
    b6cc:	f64a 408c 	movw	r0, #44172	; 0xac8c
    b6d0:	f2c0 0001 	movt	r0, #1
    b6d4:	223f      	movs	r2, #63	; 0x3f
    b6d6:	9902      	ldr	r1, [sp, #8]
    b6d8:	f008 fb38 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b6dc:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
    b6de:	f64a 409c 	movw	r0, #44188	; 0xac9c
    b6e2:	f2c0 0001 	movt	r0, #1
    b6e6:	220a      	movs	r2, #10
    b6e8:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b6ea:	f008 fb2f 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b6ee:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b6f0:	f64a 40ac 	movw	r0, #44204	; 0xacac
    b6f4:	f2c0 0001 	movt	r0, #1
    b6f8:	220a      	movs	r2, #10
    b6fa:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b6fc:	f008 fb26 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b700:	defe      	udf	#254	; 0xfe
    b702:	f64a 40bc 	movw	r0, #44220	; 0xacbc
    b706:	f2c0 0001 	movt	r0, #1
    b70a:	220a      	movs	r2, #10
    b70c:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b70e:	f008 fb1d 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b712:	defe      	udf	#254	; 0xfe

0000b714 <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
    b714:	b5b0      	push	{r4, r5, r7, lr}
    b716:	b094      	sub	sp, #80	; 0x50
    b718:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
    b71c:	4696      	mov	lr, r2
    b71e:	460c      	mov	r4, r1
    b720:	4605      	mov	r5, r0
    b722:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    b726:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    b72a:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    b72e:	9310      	str	r3, [sp, #64]	; 0x40
    b730:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b734:	4618      	mov	r0, r3
    b736:	4661      	mov	r1, ip
    b738:	930d      	str	r3, [sp, #52]	; 0x34
    b73a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    b73e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    b742:	940a      	str	r4, [sp, #40]	; 0x28
    b744:	9509      	str	r5, [sp, #36]	; 0x24
    b746:	f000 ffed 	bl	c724 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b74a:	9008      	str	r0, [sp, #32]
    b74c:	e7ff      	b.n	b74e <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0x3a>
    b74e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b750:	b2c1      	uxtb	r1, r0
    b752:	9a08      	ldr	r2, [sp, #32]
    b754:	428a      	cmp	r2, r1
    b756:	d30d      	bcc.n	b774 <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0x60>
    b758:	e7ff      	b.n	b75a <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b75a:	980a      	ldr	r0, [sp, #40]	; 0x28
    b75c:	b2c1      	uxtb	r1, r0
    b75e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b760:	fa51 f182 	uxtab	r1, r1, r2
    b764:	b2cb      	uxtb	r3, r1
    b766:	468c      	mov	ip, r1
    b768:	428b      	cmp	r3, r1
    b76a:	f8cd c01c 	str.w	ip, [sp, #28]
    b76e:	f040 8092 	bne.w	b896 <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0x182>
    b772:	e00b      	b.n	b78c <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b774:	f64a 40cc 	movw	r0, #44236	; 0xaccc
    b778:	f2c0 0001 	movt	r0, #1
    b77c:	f64a 42d4 	movw	r2, #44244	; 0xacd4
    b780:	f2c0 0201 	movt	r2, #1
    b784:	2107      	movs	r1, #7
    b786:	f008 facb 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b78a:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b78c:	9807      	ldr	r0, [sp, #28]
    b78e:	b241      	sxtb	r1, r0
    b790:	2900      	cmp	r1, #0
    b792:	d411      	bmi.n	b7b8 <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0xa4>
    b794:	e7ff      	b.n	b796 <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
    b796:	f240 200c 	movw	r0, #524	; 0x20c
    b79a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b79e:	990a      	ldr	r1, [sp, #40]	; 0x28
    b7a0:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
    b7a2:	f240 2204 	movw	r2, #516	; 0x204
    b7a6:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b7aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b7ac:	7013      	strb	r3, [r2, #0]
    b7ae:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    b7b0:	f000 ffb8 	bl	c724 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b7b4:	9006      	str	r0, [sp, #24]
    b7b6:	e00b      	b.n	b7d0 <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b7b8:	f64a 10d0 	movw	r0, #43472	; 0xa9d0
    b7bc:	f2c0 0001 	movt	r0, #1
    b7c0:	f64a 42f4 	movw	r2, #44276	; 0xacf4
    b7c4:	f2c0 0201 	movt	r2, #1
    b7c8:	2108      	movs	r1, #8
    b7ca:	f008 faa9 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b7ce:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    b7d0:	f240 2004 	movw	r0, #516	; 0x204
    b7d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b7d8:	9906      	ldr	r1, [sp, #24]
    b7da:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
    b7dc:	f240 200c 	movw	r0, #524	; 0x20c
    b7e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b7e4:	2101      	movs	r1, #1
    b7e6:	f000 ff86 	bl	c6f6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    b7ea:	9005      	str	r0, [sp, #20]
    b7ec:	e7ff      	b.n	b7ee <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0xda>
    b7ee:	f240 2004 	movw	r0, #516	; 0x204
    b7f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b7f6:	9905      	ldr	r1, [sp, #20]
    b7f8:	6041      	str	r1, [r0, #4]
    b7fa:	2201      	movs	r2, #1
    b7fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b800:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
    b804:	9004      	str	r0, [sp, #16]
    b806:	4610      	mov	r0, r2
    b808:	9904      	ldr	r1, [sp, #16]
    b80a:	461a      	mov	r2, r3
    b80c:	4663      	mov	r3, ip
    b80e:	f00a fd75 	bl	162fc <hal_i2c_master_write>
    b812:	9012      	str	r0, [sp, #72]	; 0x48
    b814:	e7ff      	b.n	b816 <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
    b816:	f240 200c 	movw	r0, #524	; 0x20c
    b81a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b81e:	2100      	movs	r1, #0
    b820:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
    b822:	f240 2004 	movw	r0, #516	; 0x204
    b826:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b82a:	9909      	ldr	r1, [sp, #36]	; 0x24
    b82c:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
    b82e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b830:	b2d3      	uxtb	r3, r2
    b832:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
    b834:	980d      	ldr	r0, [sp, #52]	; 0x34
    b836:	990c      	ldr	r1, [sp, #48]	; 0x30
    b838:	f000 ff5d 	bl	c6f6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    b83c:	9003      	str	r0, [sp, #12]
    b83e:	e7ff      	b.n	b840 <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0x12c>
    b840:	f240 2004 	movw	r0, #516	; 0x204
    b844:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b848:	9903      	ldr	r1, [sp, #12]
    b84a:	6041      	str	r1, [r0, #4]
    b84c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b850:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
    b852:	9002      	str	r0, [sp, #8]
    b854:	4618      	mov	r0, r3
    b856:	9902      	ldr	r1, [sp, #8]
    b858:	f00a fde4 	bl	16424 <hal_i2c_master_read>
    b85c:	4601      	mov	r1, r0
    b85e:	9013      	str	r0, [sp, #76]	; 0x4c
    b860:	9101      	str	r1, [sp, #4]
    b862:	e7ff      	b.n	b864 <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
    b864:	9801      	ldr	r0, [sp, #4]
    b866:	2804      	cmp	r0, #4
    b868:	d005      	beq.n	b876 <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0x162>
    b86a:	e7ff      	b.n	b86c <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0x158>
    b86c:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
    b86e:	900e      	str	r0, [sp, #56]	; 0x38
    b870:	2001      	movs	r0, #1
    b872:	900e      	str	r0, [sp, #56]	; 0x38
}
    b874:	e00c      	b.n	b890 <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0x17c>
        console::print("i2c fail\n"); ////
    b876:	f64a 5004 	movw	r0, #44292	; 0xad04
    b87a:	f2c0 0001 	movt	r0, #1
    b87e:	2109      	movs	r1, #9
    b880:	f7fd fa01 	bl	8c86 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b884:	e7ff      	b.n	b886 <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0x172>
    b886:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
    b888:	900e      	str	r0, [sp, #56]	; 0x38
    b88a:	2001      	movs	r0, #1
    b88c:	900e      	str	r0, [sp, #56]	; 0x38
    b88e:	e7ff      	b.n	b890 <_ZN3app12touch_sensor19read_register_range17hfc6c90da2d36f886E+0x17c>
}
    b890:	980e      	ldr	r0, [sp, #56]	; 0x38
    b892:	b014      	add	sp, #80	; 0x50
    b894:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b896:	f64a 2090 	movw	r0, #43664	; 0xaa90
    b89a:	f2c0 0001 	movt	r0, #1
    b89e:	f64a 42e4 	movw	r2, #44260	; 0xace4
    b8a2:	f2c0 0201 	movt	r2, #1
    b8a6:	211c      	movs	r1, #28
    b8a8:	f008 fa3a 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b8ac:	defe      	udf	#254	; 0xfe

0000b8ae <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h7f96ad6a83c37f74E>:
    b8ae:	b084      	sub	sp, #16
    b8b0:	9000      	str	r0, [sp, #0]
    b8b2:	9101      	str	r1, [sp, #4]
    b8b4:	9102      	str	r1, [sp, #8]
    b8b6:	9003      	str	r0, [sp, #12]
    b8b8:	6802      	ldr	r2, [r0, #0]
    b8ba:	6840      	ldr	r0, [r0, #4]
    b8bc:	680b      	ldr	r3, [r1, #0]
    b8be:	6849      	ldr	r1, [r1, #4]
    b8c0:	4048      	eors	r0, r1
    b8c2:	ea82 0103 	eor.w	r1, r2, r3
    b8c6:	4308      	orrs	r0, r1
    b8c8:	fab0 f080 	clz	r0, r0
    b8cc:	0940      	lsrs	r0, r0, #5
    b8ce:	b004      	add	sp, #16
    b8d0:	4770      	bx	lr

0000b8d2 <_ZN3app7display12test_display17h5d1f8edc1ef53359E>:
    result::*,
    sys::console,
};

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn test_display() -> MynewtResult<()> {
    b8d2:	b570      	push	{r4, r5, r6, lr}
    b8d4:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    console::print("Rust test display\n"); console::flush();
    b8d8:	f64a 500d 	movw	r0, #44301	; 0xad0d
    b8dc:	f2c0 0001 	movt	r0, #1
    b8e0:	2112      	movs	r1, #18
    b8e2:	f7fd f9d0 	bl	8c86 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b8e6:	e7ff      	b.n	b8e8 <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x16>
    b8e8:	f7fd fa13 	bl	8d12 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    b8ec:	e7ff      	b.n	b8ee <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x1c>
    b8ee:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    b8f0:	9016      	str	r0, [sp, #88]	; 0x58
    b8f2:	9916      	ldr	r1, [sp, #88]	; 0x58
    b8f4:	f000 fbbe 	bl	c074 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    b8f8:	9015      	str	r0, [sp, #84]	; 0x54
    b8fa:	9114      	str	r1, [sp, #80]	; 0x50
    b8fc:	e7ff      	b.n	b8fe <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x2c>
    b8fe:	20ef      	movs	r0, #239	; 0xef
    b900:	9013      	str	r0, [sp, #76]	; 0x4c
    b902:	9913      	ldr	r1, [sp, #76]	; 0x4c
    b904:	f000 fbb6 	bl	c074 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    b908:	9012      	str	r0, [sp, #72]	; 0x48
    b90a:	9111      	str	r1, [sp, #68]	; 0x44
    b90c:	e7ff      	b.n	b90e <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x3c>
    let background = Rectangle::<Rgb565>
    b90e:	4668      	mov	r0, sp
    b910:	9911      	ldr	r1, [sp, #68]	; 0x44
    b912:	6001      	str	r1, [r0, #0]
    b914:	a81e      	add	r0, sp, #120	; 0x78
    b916:	9915      	ldr	r1, [sp, #84]	; 0x54
    b918:	9a14      	ldr	r2, [sp, #80]	; 0x50
    b91a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b91c:	f006 f811 	bl	11942 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    b920:	e7ff      	b.n	b922 <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x50>
    b922:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    b924:	f88d 0098 	strb.w	r0, [sp, #152]	; 0x98
    b928:	f88d 0099 	strb.w	r0, [sp, #153]	; 0x99
    b92c:	f88d 009a 	strb.w	r0, [sp, #154]	; 0x9a
    b930:	f89d 009a 	ldrb.w	r0, [sp, #154]	; 0x9a
    b934:	f8bd 1098 	ldrh.w	r1, [sp, #152]	; 0x98
    b938:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    b93c:	f000 fc94 	bl	c268 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    b940:	9010      	str	r0, [sp, #64]	; 0x40
    b942:	e7ff      	b.n	b944 <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x72>
    b944:	9810      	ldr	r0, [sp, #64]	; 0x40
    b946:	f8ad 0096 	strh.w	r0, [sp, #150]	; 0x96
    b94a:	2101      	movs	r1, #1
    b94c:	f8ad 1094 	strh.w	r1, [sp, #148]	; 0x94
    let background = Rectangle::<Rgb565>
    b950:	f8bd 3096 	ldrh.w	r3, [sp, #150]	; 0x96
    b954:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
    b958:	a817      	add	r0, sp, #92	; 0x5c
    b95a:	a91e      	add	r1, sp, #120	; 0x78
    b95c:	f005 fc87 	bl	1126e <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    b960:	e7ff      	b.n	b962 <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x90>
    b962:	2028      	movs	r0, #40	; 0x28

    //  Create circle
    let circle = Circle::<Rgb565>
        ::new( Coord::new( 40, 40 ), 40 )                     //  Circle centre and radius
    b964:	900f      	str	r0, [sp, #60]	; 0x3c
    b966:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b968:	f000 fb84 	bl	c074 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    b96c:	900e      	str	r0, [sp, #56]	; 0x38
    b96e:	910d      	str	r1, [sp, #52]	; 0x34
    b970:	e7ff      	b.n	b972 <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0xa0>
    b972:	a82d      	add	r0, sp, #180	; 0xb4
    b974:	2328      	movs	r3, #40	; 0x28
    let circle = Circle::<Rgb565>
    b976:	990e      	ldr	r1, [sp, #56]	; 0x38
    b978:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b97a:	f006 fc1a 	bl	121b2 <_ZN17embedded_graphics10primitives6circle15Circle$LT$C$GT$3new17hd0fdd32bac55188aE>
    b97e:	e7ff      	b.n	b980 <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0xae>
    b980:	20ff      	movs	r0, #255	; 0xff
        .fill( Some( Rgb565::from(( 0xff, 0x00, 0xff )) ) );  //  Magenta
    b982:	f88d 00d0 	strb.w	r0, [sp, #208]	; 0xd0
    b986:	2100      	movs	r1, #0
    b988:	f88d 10d1 	strb.w	r1, [sp, #209]	; 0xd1
    b98c:	f88d 00d2 	strb.w	r0, [sp, #210]	; 0xd2
    b990:	f89d 00d2 	ldrb.w	r0, [sp, #210]	; 0xd2
    b994:	f8bd 10d0 	ldrh.w	r1, [sp, #208]	; 0xd0
    b998:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    b99c:	f000 fc64 	bl	c268 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    b9a0:	900c      	str	r0, [sp, #48]	; 0x30
    b9a2:	e7ff      	b.n	b9a4 <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0xd2>
    b9a4:	980c      	ldr	r0, [sp, #48]	; 0x30
    b9a6:	f8ad 00ce 	strh.w	r0, [sp, #206]	; 0xce
    b9aa:	2101      	movs	r1, #1
    b9ac:	f8ad 10cc 	strh.w	r1, [sp, #204]	; 0xcc
    let circle = Circle::<Rgb565>
    b9b0:	f8bd 30ce 	ldrh.w	r3, [sp, #206]	; 0xce
    b9b4:	f8bd 20cc 	ldrh.w	r2, [sp, #204]	; 0xcc
    b9b8:	a827      	add	r0, sp, #156	; 0x9c
    b9ba:	a92d      	add	r1, sp, #180	; 0xb4
    b9bc:	f006 f8be 	bl	11b3c <_ZN119_$LT$embedded_graphics..primitives..circle..Circle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17h16ccda9e1b3b6eadE>
    b9c0:	e7ff      	b.n	b9c2 <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0xf0>
    b9c2:	203c      	movs	r0, #60	; 0x3c

    //  Create square
    let square = Rectangle::<Rgb565>
        ::new( Coord::new( 60, 60 ), Coord::new( 150, 150 ) ) //  Square coordinates
    b9c4:	900b      	str	r0, [sp, #44]	; 0x2c
    b9c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b9c8:	f000 fb54 	bl	c074 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    b9cc:	900a      	str	r0, [sp, #40]	; 0x28
    b9ce:	9109      	str	r1, [sp, #36]	; 0x24
    b9d0:	e7ff      	b.n	b9d2 <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x100>
    b9d2:	2096      	movs	r0, #150	; 0x96
    b9d4:	9008      	str	r0, [sp, #32]
    b9d6:	9908      	ldr	r1, [sp, #32]
    b9d8:	f000 fb4c 	bl	c074 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    b9dc:	9007      	str	r0, [sp, #28]
    b9de:	9106      	str	r1, [sp, #24]
    b9e0:	e7ff      	b.n	b9e2 <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x110>
    let square = Rectangle::<Rgb565>
    b9e2:	4668      	mov	r0, sp
    b9e4:	9906      	ldr	r1, [sp, #24]
    b9e6:	6001      	str	r1, [r0, #0]
    b9e8:	a83c      	add	r0, sp, #240	; 0xf0
    b9ea:	990a      	ldr	r1, [sp, #40]	; 0x28
    b9ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b9ee:	9b07      	ldr	r3, [sp, #28]
    b9f0:	f005 ffa7 	bl	11942 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    b9f4:	e7ff      	b.n	b9f6 <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x124>
    b9f6:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0xff )) ) );  //  Blue
    b9f8:	f88d 0110 	strb.w	r0, [sp, #272]	; 0x110
    b9fc:	f88d 0111 	strb.w	r0, [sp, #273]	; 0x111
    ba00:	20ff      	movs	r0, #255	; 0xff
    ba02:	f88d 0112 	strb.w	r0, [sp, #274]	; 0x112
    ba06:	f89d 0112 	ldrb.w	r0, [sp, #274]	; 0x112
    ba0a:	f8bd 1110 	ldrh.w	r1, [sp, #272]	; 0x110
    ba0e:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    ba12:	f000 fc29 	bl	c268 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    ba16:	9005      	str	r0, [sp, #20]
    ba18:	e7ff      	b.n	ba1a <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x148>
    ba1a:	9805      	ldr	r0, [sp, #20]
    ba1c:	f8ad 010e 	strh.w	r0, [sp, #270]	; 0x10e
    ba20:	2101      	movs	r1, #1
    ba22:	f8ad 110c 	strh.w	r1, [sp, #268]	; 0x10c
    let square = Rectangle::<Rgb565>
    ba26:	f8bd 310e 	ldrh.w	r3, [sp, #270]	; 0x10e
    ba2a:	f8bd 210c 	ldrh.w	r2, [sp, #268]	; 0x10c
    ba2e:	a835      	add	r0, sp, #212	; 0xd4
    ba30:	a93c      	add	r1, sp, #240	; 0xf0
    ba32:	f005 fc1c 	bl	1126e <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    ba36:	e7ff      	b.n	ba38 <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x166>

    //  Create text
    let text = fonts::Font12x16::<Rgb565>
    ba38:	f64a 511f 	movw	r1, #44319	; 0xad1f
    ba3c:	f2c0 0101 	movt	r1, #1
    ba40:	a85a      	add	r0, sp, #360	; 0x168
    ba42:	220d      	movs	r2, #13
    ba44:	f003 f90f 	bl	ec66 <_ZN127_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..fonts..Font$LT$C$GT$$GT$10render_str17h35bcfccc03ed936fE>
    ba48:	e7ff      	b.n	ba4a <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x178>
    ba4a:	2000      	movs	r0, #0
        ::render_str("I AM PINETIME")                          //  Text to be rendered
        .stroke( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) )  //  Black text
    ba4c:	f88d 0188 	strb.w	r0, [sp, #392]	; 0x188
    ba50:	f88d 0189 	strb.w	r0, [sp, #393]	; 0x189
    ba54:	f88d 018a 	strb.w	r0, [sp, #394]	; 0x18a
    ba58:	f89d 018a 	ldrb.w	r0, [sp, #394]	; 0x18a
    ba5c:	f8bd 1188 	ldrh.w	r1, [sp, #392]	; 0x188
    ba60:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    ba64:	f000 fc00 	bl	c268 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    ba68:	9004      	str	r0, [sp, #16]
    ba6a:	e7ff      	b.n	ba6c <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x19a>
    ba6c:	9804      	ldr	r0, [sp, #16]
    ba6e:	f8ad 0186 	strh.w	r0, [sp, #390]	; 0x186
    ba72:	2101      	movs	r1, #1
    ba74:	f8ad 1184 	strh.w	r1, [sp, #388]	; 0x184
    let text = fonts::Font12x16::<Rgb565>
    ba78:	f8bd 3186 	ldrh.w	r3, [sp, #390]	; 0x186
    ba7c:	f8bd 2184 	ldrh.w	r2, [sp, #388]	; 0x184
    ba80:	a853      	add	r0, sp, #332	; 0x14c
    ba82:	a95a      	add	r1, sp, #360	; 0x168
    ba84:	f003 f9a1 	bl	edca <_ZN132_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$6stroke17h533a8dd4991b2a2aE>
    ba88:	e7ff      	b.n	ba8a <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x1b8>
    ba8a:	20ff      	movs	r0, #255	; 0xff
        .fill(   Some( Rgb565::from(( 0xff, 0xff, 0x00 )) ) )  //  Yellow background
    ba8c:	f88d 0190 	strb.w	r0, [sp, #400]	; 0x190
    ba90:	f88d 0191 	strb.w	r0, [sp, #401]	; 0x191
    ba94:	2000      	movs	r0, #0
    ba96:	f88d 0192 	strb.w	r0, [sp, #402]	; 0x192
    ba9a:	f89d 0192 	ldrb.w	r0, [sp, #402]	; 0x192
    ba9e:	f8bd 1190 	ldrh.w	r1, [sp, #400]	; 0x190
    baa2:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    baa6:	f000 fbdf 	bl	c268 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    baaa:	9003      	str	r0, [sp, #12]
    baac:	e7ff      	b.n	baae <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x1dc>
    baae:	9803      	ldr	r0, [sp, #12]
    bab0:	f8ad 018e 	strh.w	r0, [sp, #398]	; 0x18e
    bab4:	2101      	movs	r1, #1
    bab6:	f8ad 118c 	strh.w	r1, [sp, #396]	; 0x18c
    let text = fonts::Font12x16::<Rgb565>
    baba:	f8bd 318e 	ldrh.w	r3, [sp, #398]	; 0x18e
    babe:	f8bd 218c 	ldrh.w	r2, [sp, #396]	; 0x18c
    bac2:	a84c      	add	r0, sp, #304	; 0x130
    bac4:	a953      	add	r1, sp, #332	; 0x14c
    bac6:	f003 f96e 	bl	eda6 <_ZN132_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17h0c5fde36a685a59fE>
    baca:	e7ff      	b.n	bacc <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x1fa>
    bacc:	2014      	movs	r0, #20
    bace:	2110      	movs	r1, #16
        .translate( Coord::new( 20, 16 ));                     //  Shift the text
    bad0:	f000 fad0 	bl	c074 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    bad4:	9002      	str	r0, [sp, #8]
    bad6:	9101      	str	r1, [sp, #4]
    bad8:	e7ff      	b.n	bada <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x208>
    bada:	a845      	add	r0, sp, #276	; 0x114
    badc:	a94c      	add	r1, sp, #304	; 0x130
    let text = fonts::Font12x16::<Rgb565>
    bade:	9a02      	ldr	r2, [sp, #8]
    bae0:	9b01      	ldr	r3, [sp, #4]
    bae2:	f003 f8ed 	bl	ecc0 <_ZN127_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..transform..Transform$GT$9translate17h41f7fc2ef13b72b5E>
    bae6:	e7ff      	b.n	bae8 <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x216>
    bae8:	a817      	add	r0, sp, #92	; 0x5c
    baea:	a965      	add	r1, sp, #404	; 0x194

    //  Render background, circle, square and text to display
    druid::draw_to_display(background);
    baec:	460a      	mov	r2, r1
    baee:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    baf2:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    baf6:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    bafa:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    bafe:	4608      	mov	r0, r1
    bb00:	f004 fced 	bl	104de <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    bb04:	e7ff      	b.n	bb06 <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x234>
    bb06:	a827      	add	r0, sp, #156	; 0x9c
    bb08:	a96c      	add	r1, sp, #432	; 0x1b0
    druid::draw_to_display(circle);
    bb0a:	460a      	mov	r2, r1
    bb0c:	e890 5078 	ldmia.w	r0, {r3, r4, r5, r6, ip, lr}
    bb10:	e882 5078 	stmia.w	r2, {r3, r4, r5, r6, ip, lr}
    bb14:	4608      	mov	r0, r1
    bb16:	f005 ffaa 	bl	11a6e <_ZN22piet_embedded_graphics7display15draw_to_display17h2860069dec5245b0E>
    bb1a:	e7ff      	b.n	bb1c <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x24a>
    bb1c:	a835      	add	r0, sp, #212	; 0xd4
    bb1e:	a972      	add	r1, sp, #456	; 0x1c8
    druid::draw_to_display(square);
    bb20:	460a      	mov	r2, r1
    bb22:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    bb26:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    bb2a:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    bb2e:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    bb32:	4608      	mov	r0, r1
    bb34:	f004 fcd3 	bl	104de <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    bb38:	e7ff      	b.n	bb3a <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x268>
    bb3a:	a845      	add	r0, sp, #276	; 0x114
    bb3c:	a979      	add	r1, sp, #484	; 0x1e4
    druid::draw_to_display(text);    
    bb3e:	460a      	mov	r2, r1
    bb40:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    bb44:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    bb48:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    bb4c:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    bb50:	4608      	mov	r0, r1
    bb52:	f005 ffad 	bl	11ab0 <_ZN22piet_embedded_graphics7display15draw_to_display17h34594f1d8e74e802E>
    bb56:	e7ff      	b.n	bb58 <_ZN3app7display12test_display17h5d1f8edc1ef53359E+0x286>
    bb58:	2001      	movs	r0, #1

    //  Return success to the caller
    Ok(())
    bb5a:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    bb5e:	bd70      	pop	{r4, r5, r6, pc}

0000bb60 <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E>:
    bb60:	b580      	push	{r7, lr}
    bb62:	b090      	sub	sp, #64	; 0x40
    bb64:	2200      	movs	r2, #0
    bb66:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    bb6a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
    bb6e:	2201      	movs	r2, #1
    bb70:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
    bb74:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    bb78:	680a      	ldr	r2, [r1, #0]
    bb7a:	2a00      	cmp	r2, #0
    bb7c:	9101      	str	r1, [sp, #4]
    bb7e:	9000      	str	r0, [sp, #0]
    bb80:	d001      	beq.n	bb86 <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E+0x26>
    bb82:	e7ff      	b.n	bb84 <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E+0x24>
    bb84:	e004      	b.n	bb90 <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E+0x30>
    bb86:	2000      	movs	r0, #0
    bb88:	9900      	ldr	r1, [sp, #0]
    bb8a:	6008      	str	r0, [r1, #0]
    bb8c:	e032      	b.n	bbf4 <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E+0x94>
    bb8e:	defe      	udf	#254	; 0xfe
    bb90:	2000      	movs	r0, #0
    bb92:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    bb96:	9901      	ldr	r1, [sp, #4]
    bb98:	684a      	ldr	r2, [r1, #4]
    bb9a:	688b      	ldr	r3, [r1, #8]
    bb9c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    bba0:	f8cd c010 	str.w	ip, [sp, #16]
    bba4:	9303      	str	r3, [sp, #12]
    bba6:	9202      	str	r2, [sp, #8]
    bba8:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    bbac:	9802      	ldr	r0, [sp, #8]
    bbae:	9a03      	ldr	r2, [sp, #12]
    bbb0:	9b04      	ldr	r3, [sp, #16]
    bbb2:	930d      	str	r3, [sp, #52]	; 0x34
    bbb4:	920c      	str	r2, [sp, #48]	; 0x30
    bbb6:	900b      	str	r0, [sp, #44]	; 0x2c
    bbb8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    bbba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bbbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bbbe:	930a      	str	r3, [sp, #40]	; 0x28
    bbc0:	9209      	str	r2, [sp, #36]	; 0x24
    bbc2:	9008      	str	r0, [sp, #32]
    bbc4:	a805      	add	r0, sp, #20
    bbc6:	a908      	add	r1, sp, #32
    bbc8:	f006 facf 	bl	1216a <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17hb4823a008a69b1a5E>
    bbcc:	e7ff      	b.n	bbce <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E+0x6e>
    bbce:	9805      	ldr	r0, [sp, #20]
    bbd0:	9906      	ldr	r1, [sp, #24]
    bbd2:	9a07      	ldr	r2, [sp, #28]
    bbd4:	9b00      	ldr	r3, [sp, #0]
    bbd6:	60da      	str	r2, [r3, #12]
    bbd8:	6099      	str	r1, [r3, #8]
    bbda:	6058      	str	r0, [r3, #4]
    bbdc:	2001      	movs	r0, #1
    bbde:	6018      	str	r0, [r3, #0]
    bbe0:	e008      	b.n	bbf4 <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E+0x94>
    bbe2:	9801      	ldr	r0, [sp, #4]
    bbe4:	6801      	ldr	r1, [r0, #0]
    bbe6:	2901      	cmp	r1, #1
    bbe8:	d00c      	beq.n	bc04 <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E+0xa4>
    bbea:	e015      	b.n	bc18 <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E+0xb8>
    bbec:	2000      	movs	r0, #0
    bbee:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    bbf2:	e7f6      	b.n	bbe2 <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E+0x82>
    bbf4:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    bbf8:	07c0      	lsls	r0, r0, #31
    bbfa:	2800      	cmp	r0, #0
    bbfc:	d1f6      	bne.n	bbec <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E+0x8c>
    bbfe:	e7f0      	b.n	bbe2 <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E+0x82>
    bc00:	b010      	add	sp, #64	; 0x40
    bc02:	bd80      	pop	{r7, pc}
    bc04:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    bc08:	07c0      	lsls	r0, r0, #31
    bc0a:	2800      	cmp	r0, #0
    bc0c:	d0f8      	beq.n	bc00 <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E+0xa0>
    bc0e:	e7ff      	b.n	bc10 <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E+0xb0>
    bc10:	2000      	movs	r0, #0
    bc12:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    bc16:	e7f3      	b.n	bc00 <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E+0xa0>
    bc18:	e7f2      	b.n	bc00 <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E+0xa0>

0000bc1a <_ZN4core6option15Option$LT$T$GT$6unwrap17h4ef46bc50523a294E>:
    bc1a:	b084      	sub	sp, #16
    bc1c:	9002      	str	r0, [sp, #8]
    bc1e:	9802      	ldr	r0, [sp, #8]
    bc20:	2800      	cmp	r0, #0
    bc22:	4602      	mov	r2, r0
    bc24:	bf18      	it	ne
    bc26:	2201      	movne	r2, #1
    bc28:	2800      	cmp	r0, #0
    bc2a:	9101      	str	r1, [sp, #4]
    bc2c:	d001      	beq.n	bc32 <_ZN4core6option15Option$LT$T$GT$6unwrap17h4ef46bc50523a294E+0x18>
    bc2e:	e7ff      	b.n	bc30 <_ZN4core6option15Option$LT$T$GT$6unwrap17h4ef46bc50523a294E+0x16>
    bc30:	e009      	b.n	bc46 <_ZN4core6option15Option$LT$T$GT$6unwrap17h4ef46bc50523a294E+0x2c>
    bc32:	f64a 502c 	movw	r0, #44332	; 0xad2c
    bc36:	f2c0 0001 	movt	r0, #1
    bc3a:	212b      	movs	r1, #43	; 0x2b
    bc3c:	9a01      	ldr	r2, [sp, #4]
    bc3e:	f008 f86f 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bc42:	defe      	udf	#254	; 0xfe
    bc44:	defe      	udf	#254	; 0xfe
    bc46:	9802      	ldr	r0, [sp, #8]
    bc48:	9003      	str	r0, [sp, #12]
    bc4a:	9902      	ldr	r1, [sp, #8]
    bc4c:	2900      	cmp	r1, #0
    bc4e:	9000      	str	r0, [sp, #0]
    bc50:	d003      	beq.n	bc5a <_ZN4core6option15Option$LT$T$GT$6unwrap17h4ef46bc50523a294E+0x40>
    bc52:	e7ff      	b.n	bc54 <_ZN4core6option15Option$LT$T$GT$6unwrap17h4ef46bc50523a294E+0x3a>
    bc54:	9800      	ldr	r0, [sp, #0]
    bc56:	b004      	add	sp, #16
    bc58:	4770      	bx	lr
    bc5a:	e7fb      	b.n	bc54 <_ZN4core6option15Option$LT$T$GT$6unwrap17h4ef46bc50523a294E+0x3a>

0000bc5c <_ZN4core3ptr13drop_in_place17h235866e800505e38E>:
    bc5c:	b081      	sub	sp, #4
    bc5e:	9000      	str	r0, [sp, #0]
    bc60:	b001      	add	sp, #4
    bc62:	4770      	bx	lr

0000bc64 <_ZN4core3ptr13drop_in_place17h2cd1c282464046dcE>:
    bc64:	b580      	push	{r7, lr}
    bc66:	b082      	sub	sp, #8
    bc68:	9001      	str	r0, [sp, #4]
    bc6a:	302c      	adds	r0, #44	; 0x2c
    bc6c:	f7fe fbdc 	bl	a428 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    bc70:	e7ff      	b.n	bc72 <_ZN4core3ptr13drop_in_place17h2cd1c282464046dcE+0xe>
    bc72:	b002      	add	sp, #8
    bc74:	bd80      	pop	{r7, pc}

0000bc76 <_ZN4core3ptr13drop_in_place17hb9a3bbc44f2775d6E>:
    bc76:	b580      	push	{r7, lr}
    bc78:	b082      	sub	sp, #8
    bc7a:	9001      	str	r0, [sp, #4]
    bc7c:	9000      	str	r0, [sp, #0]
    bc7e:	f000 f816 	bl	bcae <_ZN4core3ptr13drop_in_place17hf2bbef3a3279f316E>
    bc82:	e001      	b.n	bc88 <_ZN4core3ptr13drop_in_place17hb9a3bbc44f2775d6E+0x12>
    bc84:	b002      	add	sp, #8
    bc86:	bd80      	pop	{r7, pc}
    bc88:	9800      	ldr	r0, [sp, #0]
    bc8a:	308c      	adds	r0, #140	; 0x8c
    bc8c:	f7fe fba0 	bl	a3d0 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    bc90:	e7f8      	b.n	bc84 <_ZN4core3ptr13drop_in_place17hb9a3bbc44f2775d6E+0xe>

0000bc92 <_ZN4core3ptr13drop_in_place17he97a34a4d7ae7cacE>:
    bc92:	b580      	push	{r7, lr}
    bc94:	b082      	sub	sp, #8
    bc96:	9001      	str	r0, [sp, #4]
    bc98:	9000      	str	r0, [sp, #0]
    bc9a:	f7ff ffe3 	bl	bc64 <_ZN4core3ptr13drop_in_place17h2cd1c282464046dcE>
    bc9e:	e001      	b.n	bca4 <_ZN4core3ptr13drop_in_place17he97a34a4d7ae7cacE+0x12>
    bca0:	b002      	add	sp, #8
    bca2:	bd80      	pop	{r7, pc}
    bca4:	9800      	ldr	r0, [sp, #0]
    bca6:	3098      	adds	r0, #152	; 0x98
    bca8:	f7fe fb92 	bl	a3d0 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
    bcac:	e7f8      	b.n	bca0 <_ZN4core3ptr13drop_in_place17he97a34a4d7ae7cacE+0xe>

0000bcae <_ZN4core3ptr13drop_in_place17hf2bbef3a3279f316E>:
    bcae:	b580      	push	{r7, lr}
    bcb0:	b082      	sub	sp, #8
    bcb2:	9001      	str	r0, [sp, #4]
    bcb4:	3020      	adds	r0, #32
    bcb6:	f7fe fbb7 	bl	a428 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
    bcba:	e7ff      	b.n	bcbc <_ZN4core3ptr13drop_in_place17hf2bbef3a3279f316E+0xe>
    bcbc:	b002      	add	sp, #8
    bcbe:	bd80      	pop	{r7, pc}

0000bcc0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
    bcc0:	b084      	sub	sp, #16
    bcc2:	9001      	str	r0, [sp, #4]
    bcc4:	9102      	str	r1, [sp, #8]
    bcc6:	4408      	add	r0, r1
    bcc8:	9003      	str	r0, [sp, #12]
    bcca:	9803      	ldr	r0, [sp, #12]
    bccc:	9000      	str	r0, [sp, #0]
    bcce:	e7ff      	b.n	bcd0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
    bcd0:	9800      	ldr	r0, [sp, #0]
    bcd2:	b004      	add	sp, #16
    bcd4:	4770      	bx	lr

0000bcd6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
    bcd6:	b082      	sub	sp, #8
    bcd8:	9001      	str	r0, [sp, #4]
    bcda:	9000      	str	r0, [sp, #0]
    bcdc:	e7ff      	b.n	bcde <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
    bcde:	9800      	ldr	r0, [sp, #0]
    bce0:	fab0 f180 	clz	r1, r0
    bce4:	0948      	lsrs	r0, r1, #5
    bce6:	b002      	add	sp, #8
    bce8:	4770      	bx	lr

0000bcea <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
    bcea:	b082      	sub	sp, #8
    bcec:	9001      	str	r0, [sp, #4]
    bcee:	9000      	str	r0, [sp, #0]
    bcf0:	9800      	ldr	r0, [sp, #0]
    bcf2:	b002      	add	sp, #8
    bcf4:	4770      	bx	lr

0000bcf6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
    bcf6:	b081      	sub	sp, #4
    bcf8:	9000      	str	r0, [sp, #0]
    bcfa:	b001      	add	sp, #4
    bcfc:	4770      	bx	lr

0000bcfe <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
    bcfe:	b580      	push	{r7, lr}
    bd00:	b084      	sub	sp, #16
    bd02:	9002      	str	r0, [sp, #8]
    bd04:	9103      	str	r1, [sp, #12]
    bd06:	f000 f805 	bl	bd14 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
    bd0a:	9001      	str	r0, [sp, #4]
    bd0c:	e7ff      	b.n	bd0e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
    bd0e:	9801      	ldr	r0, [sp, #4]
    bd10:	b004      	add	sp, #16
    bd12:	bd80      	pop	{r7, pc}

0000bd14 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
    bd14:	b084      	sub	sp, #16
    bd16:	9001      	str	r0, [sp, #4]
    bd18:	9102      	str	r1, [sp, #8]
    bd1a:	4408      	add	r0, r1
    bd1c:	9003      	str	r0, [sp, #12]
    bd1e:	9803      	ldr	r0, [sp, #12]
    bd20:	9000      	str	r0, [sp, #0]
    bd22:	e7ff      	b.n	bd24 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
    bd24:	9800      	ldr	r0, [sp, #0]
    bd26:	b004      	add	sp, #16
    bd28:	4770      	bx	lr

0000bd2a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
    bd2a:	b082      	sub	sp, #8
    bd2c:	9001      	str	r0, [sp, #4]
    bd2e:	9000      	str	r0, [sp, #0]
    bd30:	e7ff      	b.n	bd32 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
    bd32:	9800      	ldr	r0, [sp, #0]
    bd34:	fab0 f180 	clz	r1, r0
    bd38:	0948      	lsrs	r0, r1, #5
    bd3a:	b002      	add	sp, #8
    bd3c:	4770      	bx	lr

0000bd3e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
    bd3e:	b580      	push	{r7, lr}
    bd40:	b090      	sub	sp, #64	; 0x40
    bd42:	900c      	str	r0, [sp, #48]	; 0x30
    bd44:	910d      	str	r1, [sp, #52]	; 0x34
    bd46:	9007      	str	r0, [sp, #28]
    bd48:	9106      	str	r1, [sp, #24]
    bd4a:	f000 fd7c 	bl	c846 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
    bd4e:	4601      	mov	r1, r0
    bd50:	900e      	str	r0, [sp, #56]	; 0x38
    bd52:	9105      	str	r1, [sp, #20]
    bd54:	e7ff      	b.n	bd56 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
    bd56:	9805      	ldr	r0, [sp, #20]
    bd58:	f7ff ffe7 	bl	bd2a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
    bd5c:	e7ff      	b.n	bd5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
    bd5e:	e7ff      	b.n	bd60 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
    bd60:	2001      	movs	r0, #1
    bd62:	900f      	str	r0, [sp, #60]	; 0x3c
    bd64:	980f      	ldr	r0, [sp, #60]	; 0x3c
    bd66:	9004      	str	r0, [sp, #16]
    bd68:	e7ff      	b.n	bd6a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
    bd6a:	9804      	ldr	r0, [sp, #16]
    bd6c:	2800      	cmp	r0, #0
    bd6e:	d006      	beq.n	bd7e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
    bd70:	e7ff      	b.n	bd72 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
    bd72:	9807      	ldr	r0, [sp, #28]
    bd74:	9906      	ldr	r1, [sp, #24]
    bd76:	f000 fd5e 	bl	c836 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
    bd7a:	9003      	str	r0, [sp, #12]
    bd7c:	e00e      	b.n	bd9c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
    bd7e:	9807      	ldr	r0, [sp, #28]
    bd80:	9906      	ldr	r1, [sp, #24]
    bd82:	f000 fd58 	bl	c836 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
    bd86:	9002      	str	r0, [sp, #8]
    bd88:	e7ff      	b.n	bd8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
    bd8a:	9805      	ldr	r0, [sp, #20]
    bd8c:	9902      	ldr	r1, [sp, #8]
    bd8e:	f7ff ffb6 	bl	bcfe <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
    bd92:	9001      	str	r0, [sp, #4]
    bd94:	e7ff      	b.n	bd96 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
    bd96:	9801      	ldr	r0, [sp, #4]
    bd98:	900a      	str	r0, [sp, #40]	; 0x28
    bd9a:	e006      	b.n	bdaa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
    bd9c:	9805      	ldr	r0, [sp, #20]
    bd9e:	9903      	ldr	r1, [sp, #12]
    bda0:	f000 fd26 	bl	c7f0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
    bda4:	900a      	str	r0, [sp, #40]	; 0x28
    bda6:	e7ff      	b.n	bda8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
    bda8:	e7ff      	b.n	bdaa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
    bdaa:	9805      	ldr	r0, [sp, #20]
    bdac:	f7ff ff9d 	bl	bcea <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
    bdb0:	9000      	str	r0, [sp, #0]
    bdb2:	e7ff      	b.n	bdb4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
    bdb4:	980a      	ldr	r0, [sp, #40]	; 0x28
    bdb6:	9900      	ldr	r1, [sp, #0]
    bdb8:	9108      	str	r1, [sp, #32]
    bdba:	9009      	str	r0, [sp, #36]	; 0x24
    bdbc:	9808      	ldr	r0, [sp, #32]
    bdbe:	9909      	ldr	r1, [sp, #36]	; 0x24
    bdc0:	b010      	add	sp, #64	; 0x40
    bdc2:	bd80      	pop	{r7, pc}

0000bdc4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
    bdc4:	b081      	sub	sp, #4
    bdc6:	b001      	add	sp, #4
    bdc8:	4770      	bx	lr

0000bdca <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
    bdca:	b580      	push	{r7, lr}
    bdcc:	b08e      	sub	sp, #56	; 0x38
    bdce:	9007      	str	r0, [sp, #28]
    bdd0:	6801      	ldr	r1, [r0, #0]
    bdd2:	9005      	str	r0, [sp, #20]
    bdd4:	4608      	mov	r0, r1
    bdd6:	f7ff ff8e 	bl	bcf6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
    bdda:	9004      	str	r0, [sp, #16]
    bddc:	e7ff      	b.n	bdde <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
    bdde:	9804      	ldr	r0, [sp, #16]
    bde0:	f7ff ff79 	bl	bcd6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
    bde4:	e7ff      	b.n	bde6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
    bde6:	e7ff      	b.n	bde8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
    bde8:	2001      	movs	r0, #1
    bdea:	9008      	str	r0, [sp, #32]
    bdec:	9808      	ldr	r0, [sp, #32]
    bdee:	9003      	str	r0, [sp, #12]
    bdf0:	e7ff      	b.n	bdf2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
    bdf2:	9803      	ldr	r0, [sp, #12]
    bdf4:	2800      	cmp	r0, #0
    bdf6:	d007      	beq.n	be08 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
    bdf8:	e7ff      	b.n	bdfa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
    bdfa:	9805      	ldr	r0, [sp, #20]
    bdfc:	6840      	ldr	r0, [r0, #4]
    bdfe:	f7ff ff94 	bl	bd2a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
    be02:	e7ff      	b.n	be04 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
    be04:	e7ff      	b.n	be06 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
    be06:	e7ff      	b.n	be08 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
    be08:	9805      	ldr	r0, [sp, #20]
    be0a:	6800      	ldr	r0, [r0, #0]
    be0c:	f7ff ff73 	bl	bcf6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
    be10:	9002      	str	r0, [sp, #8]
    be12:	e7ff      	b.n	be14 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
    be14:	9805      	ldr	r0, [sp, #20]
    be16:	6841      	ldr	r1, [r0, #4]
    be18:	9a02      	ldr	r2, [sp, #8]
    be1a:	428a      	cmp	r2, r1
    be1c:	d02e      	beq.n	be7c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
    be1e:	e7ff      	b.n	be20 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
    be20:	9805      	ldr	r0, [sp, #20]
    be22:	900a      	str	r0, [sp, #40]	; 0x28
    be24:	2101      	movs	r1, #1
    be26:	910b      	str	r1, [sp, #44]	; 0x2c
    be28:	910d      	str	r1, [sp, #52]	; 0x34
    be2a:	990d      	ldr	r1, [sp, #52]	; 0x34
    be2c:	2900      	cmp	r1, #0
    be2e:	d015      	beq.n	be5c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
    be30:	e7ff      	b.n	be32 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
    be32:	9805      	ldr	r0, [sp, #20]
    be34:	6800      	ldr	r0, [r0, #0]
    be36:	f7ff ff5e 	bl	bcf6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
    be3a:	900c      	str	r0, [sp, #48]	; 0x30
    be3c:	9905      	ldr	r1, [sp, #20]
    be3e:	680a      	ldr	r2, [r1, #0]
    be40:	9001      	str	r0, [sp, #4]
    be42:	4610      	mov	r0, r2
    be44:	f7ff ff57 	bl	bcf6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
    be48:	2101      	movs	r1, #1
    be4a:	f7ff ff39 	bl	bcc0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
    be4e:	f7ff ff4c 	bl	bcea <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
    be52:	9905      	ldr	r1, [sp, #20]
    be54:	6008      	str	r0, [r1, #0]
    be56:	9801      	ldr	r0, [sp, #4]
    be58:	9009      	str	r0, [sp, #36]	; 0x24
    be5a:	e00c      	b.n	be76 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
    be5c:	9805      	ldr	r0, [sp, #20]
    be5e:	6840      	ldr	r0, [r0, #4]
    be60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    be64:	f7ff ff56 	bl	bd14 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
    be68:	9905      	ldr	r1, [sp, #20]
    be6a:	6048      	str	r0, [r1, #4]
    be6c:	6808      	ldr	r0, [r1, #0]
    be6e:	f7ff ff42 	bl	bcf6 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
    be72:	9009      	str	r0, [sp, #36]	; 0x24
    be74:	e7ff      	b.n	be76 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
    be76:	9809      	ldr	r0, [sp, #36]	; 0x24
    be78:	9000      	str	r0, [sp, #0]
    be7a:	e002      	b.n	be82 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
    be7c:	2000      	movs	r0, #0
    be7e:	9006      	str	r0, [sp, #24]
    be80:	e002      	b.n	be88 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
    be82:	9800      	ldr	r0, [sp, #0]
    be84:	9006      	str	r0, [sp, #24]
    be86:	e7ff      	b.n	be88 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
    be88:	9806      	ldr	r0, [sp, #24]
    be8a:	b00e      	add	sp, #56	; 0x38
    be8c:	bd80      	pop	{r7, pc}

0000be8e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
    be8e:	b580      	push	{r7, lr}
    be90:	b084      	sub	sp, #16
    be92:	9002      	str	r0, [sp, #8]
    be94:	9103      	str	r1, [sp, #12]
    be96:	6800      	ldr	r0, [r0, #0]
    be98:	f000 f88c 	bl	bfb4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
    be9c:	9001      	str	r0, [sp, #4]
    be9e:	e7ff      	b.n	bea0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
    bea0:	9801      	ldr	r0, [sp, #4]
    bea2:	f000 0001 	and.w	r0, r0, #1
    bea6:	b004      	add	sp, #16
    bea8:	bd80      	pop	{r7, pc}

0000beaa <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>:
    beaa:	b580      	push	{r7, lr}
    beac:	b084      	sub	sp, #16
    beae:	9002      	str	r0, [sp, #8]
    beb0:	9103      	str	r1, [sp, #12]
    beb2:	f000 f827 	bl	bf04 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>
    beb6:	9001      	str	r0, [sp, #4]
    beb8:	e7ff      	b.n	beba <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE+0x10>
    beba:	9801      	ldr	r0, [sp, #4]
    bebc:	b004      	add	sp, #16
    bebe:	bd80      	pop	{r7, pc}

0000bec0 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>:
    bec0:	b085      	sub	sp, #20
    bec2:	9003      	str	r0, [sp, #12]
    bec4:	9104      	str	r1, [sp, #16]
    bec6:	6802      	ldr	r2, [r0, #0]
    bec8:	680b      	ldr	r3, [r1, #0]
    beca:	429a      	cmp	r2, r3
    becc:	9101      	str	r1, [sp, #4]
    bece:	9000      	str	r0, [sp, #0]
    bed0:	db07      	blt.n	bee2 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x22>
    bed2:	e7ff      	b.n	bed4 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x14>
    bed4:	9800      	ldr	r0, [sp, #0]
    bed6:	6801      	ldr	r1, [r0, #0]
    bed8:	9a01      	ldr	r2, [sp, #4]
    beda:	6813      	ldr	r3, [r2, #0]
    bedc:	4299      	cmp	r1, r3
    bede:	d008      	beq.n	bef2 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x32>
    bee0:	e003      	b.n	beea <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x2a>
    bee2:	20ff      	movs	r0, #255	; 0xff
    bee4:	f88d 000b 	strb.w	r0, [sp, #11]
    bee8:	e008      	b.n	befc <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
    beea:	2001      	movs	r0, #1
    beec:	f88d 000b 	strb.w	r0, [sp, #11]
    bef0:	e003      	b.n	befa <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
    bef2:	2000      	movs	r0, #0
    bef4:	f88d 000b 	strb.w	r0, [sp, #11]
    bef8:	e7ff      	b.n	befa <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
    befa:	e7ff      	b.n	befc <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
    befc:	f89d 000b 	ldrb.w	r0, [sp, #11]
    bf00:	b005      	add	sp, #20
    bf02:	4770      	bx	lr

0000bf04 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>:
    bf04:	b580      	push	{r7, lr}
    bf06:	b088      	sub	sp, #32
    bf08:	9000      	str	r0, [sp, #0]
    bf0a:	9101      	str	r1, [sp, #4]
    bf0c:	2000      	movs	r0, #0
    bf0e:	f88d 001b 	strb.w	r0, [sp, #27]
    bf12:	f88d 001a 	strb.w	r0, [sp, #26]
    bf16:	2001      	movs	r0, #1
    bf18:	f88d 001b 	strb.w	r0, [sp, #27]
    bf1c:	f88d 001a 	strb.w	r0, [sp, #26]
    bf20:	4668      	mov	r0, sp
    bf22:	9004      	str	r0, [sp, #16]
    bf24:	a801      	add	r0, sp, #4
    bf26:	9005      	str	r0, [sp, #20]
    bf28:	9804      	ldr	r0, [sp, #16]
    bf2a:	9905      	ldr	r1, [sp, #20]
    bf2c:	f000 f895 	bl	c05a <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>
    bf30:	f88d 000f 	strb.w	r0, [sp, #15]
    bf34:	e7ff      	b.n	bf36 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x32>
    bf36:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    bf3a:	1c41      	adds	r1, r0, #1
    bf3c:	2902      	cmp	r1, #2
    bf3e:	d307      	bcc.n	bf50 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x4c>
    bf40:	e7ff      	b.n	bf42 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x3e>
    bf42:	2000      	movs	r0, #0
    bf44:	f88d 001b 	strb.w	r0, [sp, #27]
    bf48:	9800      	ldr	r0, [sp, #0]
    bf4a:	9002      	str	r0, [sp, #8]
    bf4c:	e006      	b.n	bf5c <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
    bf4e:	defe      	udf	#254	; 0xfe
    bf50:	2000      	movs	r0, #0
    bf52:	f88d 001a 	strb.w	r0, [sp, #26]
    bf56:	9801      	ldr	r0, [sp, #4]
    bf58:	9002      	str	r0, [sp, #8]
    bf5a:	e7ff      	b.n	bf5c <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
    bf5c:	f89d 001a 	ldrb.w	r0, [sp, #26]
    bf60:	07c0      	lsls	r0, r0, #31
    bf62:	2800      	cmp	r0, #0
    bf64:	d109      	bne.n	bf7a <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x76>
    bf66:	e7ff      	b.n	bf68 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
    bf68:	f89d 001b 	ldrb.w	r0, [sp, #27]
    bf6c:	07c0      	lsls	r0, r0, #31
    bf6e:	2800      	cmp	r0, #0
    bf70:	d107      	bne.n	bf82 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x7e>
    bf72:	e7ff      	b.n	bf74 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>
    bf74:	9802      	ldr	r0, [sp, #8]
    bf76:	b008      	add	sp, #32
    bf78:	bd80      	pop	{r7, pc}
    bf7a:	2000      	movs	r0, #0
    bf7c:	f88d 001a 	strb.w	r0, [sp, #26]
    bf80:	e7f2      	b.n	bf68 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
    bf82:	2000      	movs	r0, #0
    bf84:	f88d 001b 	strb.w	r0, [sp, #27]
    bf88:	e7f4      	b.n	bf74 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>

0000bf8a <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>:
    bf8a:	b089      	sub	sp, #36	; 0x24
    bf8c:	9005      	str	r0, [sp, #20]
    bf8e:	9106      	str	r1, [sp, #24]
    bf90:	9107      	str	r1, [sp, #28]
    bf92:	9907      	ldr	r1, [sp, #28]
    bf94:	9002      	str	r0, [sp, #8]
    bf96:	9101      	str	r1, [sp, #4]
    bf98:	e7ff      	b.n	bf9a <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x10>
    bf9a:	9802      	ldr	r0, [sp, #8]
    bf9c:	9008      	str	r0, [sp, #32]
    bf9e:	9908      	ldr	r1, [sp, #32]
    bfa0:	9100      	str	r1, [sp, #0]
    bfa2:	e7ff      	b.n	bfa4 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x1a>
    bfa4:	9800      	ldr	r0, [sp, #0]
    bfa6:	9003      	str	r0, [sp, #12]
    bfa8:	9901      	ldr	r1, [sp, #4]
    bfaa:	9104      	str	r1, [sp, #16]
    bfac:	9803      	ldr	r0, [sp, #12]
    bfae:	9904      	ldr	r1, [sp, #16]
    bfb0:	b009      	add	sp, #36	; 0x24
    bfb2:	4770      	bx	lr

0000bfb4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
    bfb4:	b580      	push	{r7, lr}
    bfb6:	b088      	sub	sp, #32
    bfb8:	9006      	str	r0, [sp, #24]
    bfba:	9107      	str	r1, [sp, #28]
    bfbc:	9004      	str	r0, [sp, #16]
    bfbe:	4608      	mov	r0, r1
    bfc0:	9103      	str	r1, [sp, #12]
    bfc2:	f008 fd4e 	bl	14a62 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
    bfc6:	9002      	str	r0, [sp, #8]
    bfc8:	e7ff      	b.n	bfca <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
    bfca:	9802      	ldr	r0, [sp, #8]
    bfcc:	07c1      	lsls	r1, r0, #31
    bfce:	2900      	cmp	r1, #0
    bfd0:	d105      	bne.n	bfde <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
    bfd2:	e7ff      	b.n	bfd4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
    bfd4:	9803      	ldr	r0, [sp, #12]
    bfd6:	f008 fd48 	bl	14a6a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
    bfda:	9001      	str	r0, [sp, #4]
    bfdc:	e007      	b.n	bfee <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
    bfde:	9804      	ldr	r0, [sp, #16]
    bfe0:	9903      	ldr	r1, [sp, #12]
    bfe2:	f009 fb68 	bl	156b6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
    bfe6:	f88d 0017 	strb.w	r0, [sp, #23]
    bfea:	e7ff      	b.n	bfec <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
    bfec:	e015      	b.n	c01a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
    bfee:	9801      	ldr	r0, [sp, #4]
    bff0:	07c1      	lsls	r1, r0, #31
    bff2:	2900      	cmp	r1, #0
    bff4:	d107      	bne.n	c006 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
    bff6:	e7ff      	b.n	bff8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
    bff8:	9804      	ldr	r0, [sp, #16]
    bffa:	9903      	ldr	r1, [sp, #12]
    bffc:	f009 fcd6 	bl	159ac <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
    c000:	f88d 0017 	strb.w	r0, [sp, #23]
    c004:	e007      	b.n	c016 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
    c006:	9804      	ldr	r0, [sp, #16]
    c008:	9903      	ldr	r1, [sp, #12]
    c00a:	f009 fbbf 	bl	1578c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
    c00e:	f88d 0017 	strb.w	r0, [sp, #23]
    c012:	e7ff      	b.n	c014 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
    c014:	e000      	b.n	c018 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
    c016:	e7ff      	b.n	c018 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
    c018:	e7ff      	b.n	c01a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
    c01a:	f89d 0017 	ldrb.w	r0, [sp, #23]
    c01e:	b008      	add	sp, #32
    c020:	bd80      	pop	{r7, pc}

0000c022 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>:
    c022:	b580      	push	{r7, lr}
    c024:	b086      	sub	sp, #24
    c026:	f8dd c020 	ldr.w	ip, [sp, #32]
    c02a:	9102      	str	r1, [sp, #8]
    c02c:	9203      	str	r2, [sp, #12]
    c02e:	9304      	str	r3, [sp, #16]
    c030:	f8cd c014 	str.w	ip, [sp, #20]
    c034:	f04f 0e00 	mov.w	lr, #0
    c038:	f8cd e004 	str.w	lr, [sp, #4]
    c03c:	f8cd e000 	str.w	lr, [sp]
    c040:	f8cd e000 	str.w	lr, [sp]
    c044:	6001      	str	r1, [r0, #0]
    c046:	6042      	str	r2, [r0, #4]
    c048:	9900      	ldr	r1, [sp, #0]
    c04a:	9a01      	ldr	r2, [sp, #4]
    c04c:	6081      	str	r1, [r0, #8]
    c04e:	60c2      	str	r2, [r0, #12]
    c050:	6103      	str	r3, [r0, #16]
    c052:	f8c0 c014 	str.w	ip, [r0, #20]
    c056:	b006      	add	sp, #24
    c058:	bd80      	pop	{r7, pc}

0000c05a <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>:
    c05a:	b580      	push	{r7, lr}
    c05c:	b084      	sub	sp, #16
    c05e:	9001      	str	r0, [sp, #4]
    c060:	9102      	str	r1, [sp, #8]
    c062:	9801      	ldr	r0, [sp, #4]
    c064:	9902      	ldr	r1, [sp, #8]
    c066:	f7ff ff2b 	bl	bec0 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>
    c06a:	9000      	str	r0, [sp, #0]
    c06c:	e7ff      	b.n	c06e <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E+0x14>
    c06e:	9800      	ldr	r0, [sp, #0]
    c070:	b004      	add	sp, #16
    c072:	bd80      	pop	{r7, pc}

0000c074 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
    c074:	b084      	sub	sp, #16
    c076:	9002      	str	r0, [sp, #8]
    c078:	9103      	str	r1, [sp, #12]
            Coord(x, y)
    c07a:	9000      	str	r0, [sp, #0]
    c07c:	9101      	str	r1, [sp, #4]
        }
    c07e:	9800      	ldr	r0, [sp, #0]
    c080:	9901      	ldr	r1, [sp, #4]
    c082:	b004      	add	sp, #16
    c084:	4770      	bx	lr

0000c086 <_ZN89_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..arith..Add$GT$3add17hab4ee8a701a8c787E>:
    }

    impl Add for Coord {
        type Output = Coord;

        fn add(self, other: Coord) -> Coord {
    c086:	b580      	push	{r7, lr}
    c088:	b08a      	sub	sp, #40	; 0x28
    c08a:	9006      	str	r0, [sp, #24]
    c08c:	9107      	str	r1, [sp, #28]
    c08e:	9208      	str	r2, [sp, #32]
    c090:	9309      	str	r3, [sp, #36]	; 0x24
            Coord::new(self.0 + other.0, self.1 + other.1)
    c092:	4402      	add	r2, r0
    c094:	4694      	mov	ip, r2
    c096:	4282      	cmp	r2, r0
    c098:	9305      	str	r3, [sp, #20]
    c09a:	9104      	str	r1, [sp, #16]
    c09c:	f8cd c00c 	str.w	ip, [sp, #12]
    c0a0:	d613      	bvs.n	c0ca <_ZN89_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..arith..Add$GT$3add17hab4ee8a701a8c787E+0x44>
    c0a2:	e7ff      	b.n	c0a4 <_ZN89_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..arith..Add$GT$3add17hab4ee8a701a8c787E+0x1e>
    c0a4:	9804      	ldr	r0, [sp, #16]
    c0a6:	9905      	ldr	r1, [sp, #20]
    c0a8:	1842      	adds	r2, r0, r1
    c0aa:	4613      	mov	r3, r2
    c0ac:	4282      	cmp	r2, r0
    c0ae:	9302      	str	r3, [sp, #8]
    c0b0:	d617      	bvs.n	c0e2 <_ZN89_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..arith..Add$GT$3add17hab4ee8a701a8c787E+0x5c>
    c0b2:	e7ff      	b.n	c0b4 <_ZN89_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..arith..Add$GT$3add17hab4ee8a701a8c787E+0x2e>
    c0b4:	9803      	ldr	r0, [sp, #12]
    c0b6:	9902      	ldr	r1, [sp, #8]
    c0b8:	f7ff ffdc 	bl	c074 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    c0bc:	9001      	str	r0, [sp, #4]
    c0be:	9100      	str	r1, [sp, #0]
    c0c0:	e7ff      	b.n	c0c2 <_ZN89_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..arith..Add$GT$3add17hab4ee8a701a8c787E+0x3c>
        }
    c0c2:	9801      	ldr	r0, [sp, #4]
    c0c4:	9900      	ldr	r1, [sp, #0]
    c0c6:	b00a      	add	sp, #40	; 0x28
    c0c8:	bd80      	pop	{r7, pc}
            Coord::new(self.0 + other.0, self.1 + other.1)
    c0ca:	f64a 50d0 	movw	r0, #44496	; 0xadd0
    c0ce:	f2c0 0001 	movt	r0, #1
    c0d2:	f64a 52b8 	movw	r2, #44472	; 0xadb8
    c0d6:	f2c0 0201 	movt	r2, #1
    c0da:	211c      	movs	r1, #28
    c0dc:	f007 fe20 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c0e0:	defe      	udf	#254	; 0xfe
    c0e2:	f64a 50d0 	movw	r0, #44496	; 0xadd0
    c0e6:	f2c0 0001 	movt	r0, #1
    c0ea:	f64a 52ec 	movw	r2, #44524	; 0xadec
    c0ee:	f2c0 0201 	movt	r2, #1
    c0f2:	211c      	movs	r1, #28
    c0f4:	f007 fe14 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c0f8:	defe      	udf	#254	; 0xfe

0000c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>:
    }

    impl Index<usize> for Coord {
        type Output = CoordPart;

        fn index(&self, idx: usize) -> &CoordPart {
    c0fa:	b580      	push	{r7, lr}
    c0fc:	b096      	sub	sp, #88	; 0x58
    c0fe:	9109      	str	r1, [sp, #36]	; 0x24
    c100:	9014      	str	r0, [sp, #80]	; 0x50
            match idx {
                0 => &self.0,
    c102:	9909      	ldr	r1, [sp, #36]	; 0x24
    c104:	2900      	cmp	r1, #0
    c106:	9008      	str	r0, [sp, #32]
    c108:	9107      	str	r1, [sp, #28]
    c10a:	d018      	beq.n	c13e <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x44>
    c10c:	e7ff      	b.n	c10e <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x14>
    c10e:	9807      	ldr	r0, [sp, #28]
    c110:	2801      	cmp	r0, #1
    c112:	d017      	beq.n	c144 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x4a>
    c114:	e7ff      	b.n	c116 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x1c>
                1 => &self.1,
                _ => panic!("Unreachable index {}", idx),
    c116:	f64a 603c 	movw	r0, #44604	; 0xae3c
    c11a:	f2c0 0001 	movt	r0, #1
    c11e:	6801      	ldr	r1, [r0, #0]
    c120:	a809      	add	r0, sp, #36	; 0x24
    c122:	9013      	str	r0, [sp, #76]	; 0x4c
    c124:	9813      	ldr	r0, [sp, #76]	; 0x4c
    c126:	9015      	str	r0, [sp, #84]	; 0x54
    c128:	f645 22a1 	movw	r2, #23201	; 0x5aa1
    c12c:	f2c0 0201 	movt	r2, #1
    c130:	9106      	str	r1, [sp, #24]
    c132:	4611      	mov	r1, r2
    c134:	f7ff ff29 	bl	bf8a <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>
    c138:	9005      	str	r0, [sp, #20]
    c13a:	9104      	str	r1, [sp, #16]
    c13c:	e006      	b.n	c14c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x52>
                0 => &self.0,
    c13e:	9808      	ldr	r0, [sp, #32]
    c140:	900a      	str	r0, [sp, #40]	; 0x28
            match idx {
    c142:	e020      	b.n	c186 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                1 => &self.1,
    c144:	9808      	ldr	r0, [sp, #32]
    c146:	1d01      	adds	r1, r0, #4
    c148:	910a      	str	r1, [sp, #40]	; 0x28
            match idx {
    c14a:	e01c      	b.n	c186 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                _ => panic!("Unreachable index {}", idx),
    c14c:	9805      	ldr	r0, [sp, #20]
    c14e:	9011      	str	r0, [sp, #68]	; 0x44
    c150:	9904      	ldr	r1, [sp, #16]
    c152:	9112      	str	r1, [sp, #72]	; 0x48
    c154:	466a      	mov	r2, sp
    c156:	2301      	movs	r3, #1
    c158:	6013      	str	r3, [r2, #0]
    c15a:	a80b      	add	r0, sp, #44	; 0x2c
    c15c:	aa11      	add	r2, sp, #68	; 0x44
    c15e:	9906      	ldr	r1, [sp, #24]
    c160:	9203      	str	r2, [sp, #12]
    c162:	461a      	mov	r2, r3
    c164:	9b03      	ldr	r3, [sp, #12]
    c166:	f7ff ff5c 	bl	c022 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>
    c16a:	e7ff      	b.n	c16c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x72>
    c16c:	f64a 6040 	movw	r0, #44608	; 0xae40
    c170:	f2c0 0001 	movt	r0, #1
    c174:	f007 fdcd 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    c178:	9002      	str	r0, [sp, #8]
    c17a:	e7ff      	b.n	c17c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x82>
    c17c:	a80b      	add	r0, sp, #44	; 0x2c
    c17e:	9902      	ldr	r1, [sp, #8]
    c180:	f007 fe04 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    c184:	defe      	udf	#254	; 0xfe
            match idx {
    c186:	980a      	ldr	r0, [sp, #40]	; 0x28
            }
        }
    c188:	b016      	add	sp, #88	; 0x58
    c18a:	bd80      	pop	{r7, pc}

0000c18c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>:
    /// #
    /// let coord = Coord::new(-5, 10);
    ///
    /// assert_eq!(coord.to_unsigned(), UnsignedCoord::new(0, 10));
    /// ```
    fn to_unsigned(self) -> UnsignedCoord {
    c18c:	b580      	push	{r7, lr}
    c18e:	b088      	sub	sp, #32
    c190:	9006      	str	r0, [sp, #24]
    c192:	9107      	str	r1, [sp, #28]
    c194:	a806      	add	r0, sp, #24
    c196:	2100      	movs	r1, #0
        UnsignedCoord::new(self[0].max(0) as u32, self[1].max(0) as u32)
    c198:	f7ff ffaf 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    c19c:	9005      	str	r0, [sp, #20]
    c19e:	e7ff      	b.n	c1a0 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x14>
    c1a0:	9805      	ldr	r0, [sp, #20]
    c1a2:	6800      	ldr	r0, [r0, #0]
    c1a4:	2100      	movs	r1, #0
    c1a6:	f7ff fe80 	bl	beaa <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
    c1aa:	9004      	str	r0, [sp, #16]
    c1ac:	e7ff      	b.n	c1ae <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x22>
    c1ae:	a806      	add	r0, sp, #24
    c1b0:	2101      	movs	r1, #1
    c1b2:	f7ff ffa2 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    c1b6:	9003      	str	r0, [sp, #12]
    c1b8:	e7ff      	b.n	c1ba <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x2e>
    c1ba:	9803      	ldr	r0, [sp, #12]
    c1bc:	6800      	ldr	r0, [r0, #0]
    c1be:	2100      	movs	r1, #0
    c1c0:	f7ff fe73 	bl	beaa <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
    c1c4:	9002      	str	r0, [sp, #8]
    c1c6:	e7ff      	b.n	c1c8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x3c>
    c1c8:	9804      	ldr	r0, [sp, #16]
    c1ca:	9902      	ldr	r1, [sp, #8]
    c1cc:	f000 f893 	bl	c2f6 <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>
    c1d0:	9001      	str	r0, [sp, #4]
    c1d2:	9100      	str	r1, [sp, #0]
    c1d4:	e7ff      	b.n	c1d6 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x4a>
    }
    c1d6:	9801      	ldr	r0, [sp, #4]
    c1d8:	9900      	ldr	r1, [sp, #0]
    c1da:	b008      	add	sp, #32
    c1dc:	bd80      	pop	{r7, pc}

0000c1de <_ZN126_$LT$embedded_graphics..fonts..font12x16..Font12x16Conf$u20$as$u20$embedded_graphics..fonts..font_builder..FontBuilderConf$GT$11char_offset17hb09a44d3d4c791ccE>:
impl FontBuilderConf for Font12x16Conf {
    const FONT_IMAGE: &'static [u8] = include_bytes!("../../data/font12x16_1bpp.raw");
    const CHAR_HEIGHT: u32 = 16;
    const CHAR_WIDTH: u32 = 12;
    const FONT_IMAGE_WIDTH: u32 = 480;
    fn char_offset(c: char) -> u32 {
    c1de:	b086      	sub	sp, #24
    c1e0:	9004      	str	r0, [sp, #16]
    c1e2:	211f      	movs	r1, #31
        let fallback = '?' as u32 - ' ' as u32;
    c1e4:	9105      	str	r1, [sp, #20]
        if c < ' ' {
    c1e6:	2820      	cmp	r0, #32
    c1e8:	9002      	str	r0, [sp, #8]
    c1ea:	d304      	bcc.n	c1f6 <_ZN126_$LT$embedded_graphics..fonts..font12x16..Font12x16Conf$u20$as$u20$embedded_graphics..fonts..font_builder..FontBuilderConf$GT$11char_offset17hb09a44d3d4c791ccE+0x18>
    c1ec:	e7ff      	b.n	c1ee <_ZN126_$LT$embedded_graphics..fonts..font12x16..Font12x16Conf$u20$as$u20$embedded_graphics..fonts..font_builder..FontBuilderConf$GT$11char_offset17hb09a44d3d4c791ccE+0x10>
            return fallback;
        }
        if c <= '~' {
    c1ee:	9802      	ldr	r0, [sp, #8]
    c1f0:	287f      	cmp	r0, #127	; 0x7f
    c1f2:	d30a      	bcc.n	c20a <_ZN126_$LT$embedded_graphics..fonts..font12x16..Font12x16Conf$u20$as$u20$embedded_graphics..fonts..font_builder..FontBuilderConf$GT$11char_offset17hb09a44d3d4c791ccE+0x2c>
    c1f4:	e006      	b.n	c204 <_ZN126_$LT$embedded_graphics..fonts..font12x16..Font12x16Conf$u20$as$u20$embedded_graphics..fonts..font_builder..FontBuilderConf$GT$11char_offset17hb09a44d3d4c791ccE+0x26>
    c1f6:	201f      	movs	r0, #31
            return fallback;
    c1f8:	9003      	str	r0, [sp, #12]
    c1fa:	e002      	b.n	c202 <_ZN126_$LT$embedded_graphics..fonts..font12x16..Font12x16Conf$u20$as$u20$embedded_graphics..fonts..font_builder..FontBuilderConf$GT$11char_offset17hb09a44d3d4c791ccE+0x24>
            return c as u32 - ' ' as u32;
        }
        fallback
    }
    c1fc:	9803      	ldr	r0, [sp, #12]
    c1fe:	b006      	add	sp, #24
    c200:	4770      	bx	lr
            return fallback;
    c202:	e7fb      	b.n	c1fc <_ZN126_$LT$embedded_graphics..fonts..font12x16..Font12x16Conf$u20$as$u20$embedded_graphics..fonts..font_builder..FontBuilderConf$GT$11char_offset17hb09a44d3d4c791ccE+0x1e>
    c204:	201f      	movs	r0, #31
        fallback
    c206:	9003      	str	r0, [sp, #12]
    }
    c208:	e7f8      	b.n	c1fc <_ZN126_$LT$embedded_graphics..fonts..font12x16..Font12x16Conf$u20$as$u20$embedded_graphics..fonts..font_builder..FontBuilderConf$GT$11char_offset17hb09a44d3d4c791ccE+0x1e>
            return c as u32 - ' ' as u32;
    c20a:	9802      	ldr	r0, [sp, #8]
    c20c:	f1a0 0120 	sub.w	r1, r0, #32
    c210:	2820      	cmp	r0, #32
    c212:	9101      	str	r1, [sp, #4]
    c214:	d303      	bcc.n	c21e <_ZN126_$LT$embedded_graphics..fonts..font12x16..Font12x16Conf$u20$as$u20$embedded_graphics..fonts..font_builder..FontBuilderConf$GT$11char_offset17hb09a44d3d4c791ccE+0x40>
    c216:	e7ff      	b.n	c218 <_ZN126_$LT$embedded_graphics..fonts..font12x16..Font12x16Conf$u20$as$u20$embedded_graphics..fonts..font_builder..FontBuilderConf$GT$11char_offset17hb09a44d3d4c791ccE+0x3a>
    c218:	9801      	ldr	r0, [sp, #4]
    c21a:	9003      	str	r0, [sp, #12]
    c21c:	e7f1      	b.n	c202 <_ZN126_$LT$embedded_graphics..fonts..font12x16..Font12x16Conf$u20$as$u20$embedded_graphics..fonts..font_builder..FontBuilderConf$GT$11char_offset17hb09a44d3d4c791ccE+0x24>
    c21e:	f64a 6000 	movw	r0, #44544	; 0xae00
    c222:	f2c0 0001 	movt	r0, #1
    c226:	f64a 62bc 	movw	r2, #44732	; 0xaebc
    c22a:	f2c0 0201 	movt	r2, #1
    c22e:	2121      	movs	r1, #33	; 0x21
    c230:	f007 fd76 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c234:	defe      	udf	#254	; 0xfe

0000c236 <_ZN95_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$u8$GT$$GT$4from17ha820ed885a85d2b3E>:
///
/// The 5 (or 6 for the green channel) most significant bits are taken from the input and assigned
/// to the three colour channels see <http://www.barth-dev.de/online/rgb565-color-picker/> for a
/// more in depth explanation.
impl From<u8> for Rgb565 {
    fn from(other: u8) -> Self {
    c236:	b580      	push	{r7, lr}
    c238:	b084      	sub	sp, #16
    c23a:	4601      	mov	r1, r0
    c23c:	f88d 000f 	strb.w	r0, [sp, #15]
        Self::from((other, other, other))
    c240:	f88d 000c 	strb.w	r0, [sp, #12]
    c244:	f88d 000d 	strb.w	r0, [sp, #13]
    c248:	f88d 000e 	strb.w	r0, [sp, #14]
    c24c:	f89d 000e 	ldrb.w	r0, [sp, #14]
    c250:	f8bd 200c 	ldrh.w	r2, [sp, #12]
    c254:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
    c258:	9102      	str	r1, [sp, #8]
    c25a:	f000 f805 	bl	c268 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    c25e:	9001      	str	r0, [sp, #4]
    c260:	e7ff      	b.n	c262 <_ZN95_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$u8$GT$$GT$4from17ha820ed885a85d2b3E+0x2c>
    }
    c262:	9801      	ldr	r0, [sp, #4]
    c264:	b004      	add	sp, #16
    c266:	bd80      	pop	{r7, pc}

0000c268 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
    c268:	b08b      	sub	sp, #44	; 0x2c
    c26a:	4601      	mov	r1, r0
    c26c:	f8ad 0020 	strh.w	r0, [sp, #32]
    c270:	0c00      	lsrs	r0, r0, #16
    c272:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    c276:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    c27a:	f88d 001e 	strb.w	r0, [sp, #30]
    c27e:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    c282:	f8ad 001c 	strh.w	r0, [sp, #28]
    c286:	f89d 001c 	ldrb.w	r0, [sp, #28]
    c28a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c28e:	f89d 201d 	ldrb.w	r2, [sp, #29]
    c292:	4613      	mov	r3, r2
    c294:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    c298:	f89d 201e 	ldrb.w	r2, [sp, #30]
    c29c:	4694      	mov	ip, r2
    c29e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
    c2a2:	0200      	lsls	r0, r0, #8
    c2a4:	9306      	str	r3, [sp, #24]
    c2a6:	f8cd c014 	str.w	ip, [sp, #20]
    c2aa:	9004      	str	r0, [sp, #16]
    c2ac:	e7ff      	b.n	c2ae <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
    c2ae:	9804      	ldr	r0, [sp, #16]
    c2b0:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
    c2b4:	9a06      	ldr	r2, [sp, #24]
    c2b6:	b2d3      	uxtb	r3, r2
    c2b8:	00db      	lsls	r3, r3, #3
    c2ba:	9103      	str	r1, [sp, #12]
    c2bc:	9302      	str	r3, [sp, #8]
    c2be:	e7ff      	b.n	c2c0 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
    c2c0:	9802      	ldr	r0, [sp, #8]
    c2c2:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
    c2c6:	9a03      	ldr	r2, [sp, #12]
    c2c8:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
    c2ca:	9b05      	ldr	r3, [sp, #20]
    c2cc:	fa5f fc83 	uxtb.w	ip, r3
    c2d0:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
    c2d4:	9101      	str	r1, [sp, #4]
    c2d6:	f8cd c000 	str.w	ip, [sp]
    c2da:	e7ff      	b.n	c2dc <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
    c2dc:	9800      	ldr	r0, [sp, #0]
    c2de:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
    c2e2:	9a01      	ldr	r2, [sp, #4]
    c2e4:	4311      	orrs	r1, r2
    c2e6:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
    c2ea:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
    c2ee:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
    c2f2:	b00b      	add	sp, #44	; 0x2c
    c2f4:	4770      	bx	lr

0000c2f6 <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct UnsignedCoord(pub UnsignedCoordPart, pub UnsignedCoordPart);

    impl UnsignedCoord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: UnsignedCoordPart, y: UnsignedCoordPart) -> Self {
    c2f6:	b084      	sub	sp, #16
    c2f8:	9002      	str	r0, [sp, #8]
    c2fa:	9103      	str	r1, [sp, #12]
            UnsignedCoord(x, y)
    c2fc:	9000      	str	r0, [sp, #0]
    c2fe:	9101      	str	r1, [sp, #4]
        }
    c300:	9800      	ldr	r0, [sp, #0]
    c302:	9901      	ldr	r1, [sp, #4]
    c304:	b004      	add	sp, #16
    c306:	4770      	bx	lr

0000c308 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
    c308:	b580      	push	{r7, lr}
    c30a:	b088      	sub	sp, #32
    c30c:	9005      	str	r0, [sp, #20]
    c30e:	9106      	str	r1, [sp, #24]
    c310:	9003      	str	r0, [sp, #12]
    c312:	4608      	mov	r0, r1
    c314:	f000 fa21 	bl	c75a <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
    c318:	9004      	str	r0, [sp, #16]
    c31a:	e7ff      	b.n	c31c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
    c31c:	9804      	ldr	r0, [sp, #16]
    c31e:	9007      	str	r0, [sp, #28]
    c320:	9903      	ldr	r1, [sp, #12]
    c322:	680a      	ldr	r2, [r1, #0]
    c324:	9002      	str	r0, [sp, #8]
    c326:	4610      	mov	r0, r2
    c328:	9902      	ldr	r1, [sp, #8]
    c32a:	f000 f837 	bl	c39c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
    c32e:	9001      	str	r0, [sp, #4]
    c330:	9100      	str	r1, [sp, #0]
    c332:	e7ff      	b.n	c334 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
    c334:	9801      	ldr	r0, [sp, #4]
    c336:	9900      	ldr	r1, [sp, #0]
    c338:	b008      	add	sp, #32
    c33a:	bd80      	pop	{r7, pc}

0000c33c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
    c33c:	b580      	push	{r7, lr}
    c33e:	b084      	sub	sp, #16
    c340:	9001      	str	r0, [sp, #4]
    c342:	9102      	str	r1, [sp, #8]
    c344:	9203      	str	r2, [sp, #12]
    c346:	9000      	str	r0, [sp, #0]
    c348:	4608      	mov	r0, r1
    c34a:	9900      	ldr	r1, [sp, #0]
    c34c:	f00e f8bc 	bl	1a4c8 <__aeabi_memcpy>
    c350:	e7ff      	b.n	c352 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
    c352:	b004      	add	sp, #16
    c354:	bd80      	pop	{r7, pc}

0000c356 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
    c356:	b580      	push	{r7, lr}
    c358:	b084      	sub	sp, #16
    c35a:	9001      	str	r0, [sp, #4]
    c35c:	9102      	str	r1, [sp, #8]
    c35e:	9203      	str	r2, [sp, #12]
    c360:	0092      	lsls	r2, r2, #2
    c362:	9000      	str	r0, [sp, #0]
    c364:	4608      	mov	r0, r1
    c366:	9900      	ldr	r1, [sp, #0]
    c368:	f00e f8ae 	bl	1a4c8 <__aeabi_memcpy>
    c36c:	e7ff      	b.n	c36e <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
    c36e:	b004      	add	sp, #16
    c370:	bd80      	pop	{r7, pc}

0000c372 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
    c372:	b082      	sub	sp, #8
    c374:	9000      	str	r0, [sp, #0]
    c376:	9101      	str	r1, [sp, #4]
    c378:	6800      	ldr	r0, [r0, #0]
    c37a:	6809      	ldr	r1, [r1, #0]
    c37c:	2200      	movs	r2, #0
    c37e:	4288      	cmp	r0, r1
    c380:	bf38      	it	cc
    c382:	2201      	movcc	r2, #1
    c384:	4610      	mov	r0, r2
    c386:	b002      	add	sp, #8
    c388:	4770      	bx	lr

0000c38a <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
    c38a:	b580      	push	{r7, lr}
    c38c:	b082      	sub	sp, #8
    c38e:	9000      	str	r0, [sp, #0]
    c390:	9101      	str	r1, [sp, #4]
    c392:	f000 f85f 	bl	c454 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
    c396:	e7ff      	b.n	c398 <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
    c398:	b002      	add	sp, #8
    c39a:	bd80      	pop	{r7, pc}

0000c39c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
    c39c:	b580      	push	{r7, lr}
    c39e:	b088      	sub	sp, #32
    c3a0:	9004      	str	r0, [sp, #16]
    c3a2:	9105      	str	r1, [sp, #20]
    c3a4:	f000 f819 	bl	c3da <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
    c3a8:	9001      	str	r0, [sp, #4]
    c3aa:	9100      	str	r1, [sp, #0]
    c3ac:	e7ff      	b.n	c3ae <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
    c3ae:	9801      	ldr	r0, [sp, #4]
    c3b0:	9006      	str	r0, [sp, #24]
    c3b2:	9900      	ldr	r1, [sp, #0]
    c3b4:	f001 0201 	and.w	r2, r1, #1
    c3b8:	f88d 201f 	strb.w	r2, [sp, #31]
    c3bc:	2a00      	cmp	r2, #0
    c3be:	d105      	bne.n	c3cc <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
    c3c0:	e7ff      	b.n	c3c2 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
    c3c2:	9801      	ldr	r0, [sp, #4]
    c3c4:	9003      	str	r0, [sp, #12]
    c3c6:	2101      	movs	r1, #1
    c3c8:	9102      	str	r1, [sp, #8]
    c3ca:	e002      	b.n	c3d2 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
    c3cc:	2000      	movs	r0, #0
    c3ce:	9002      	str	r0, [sp, #8]
    c3d0:	e7ff      	b.n	c3d2 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
    c3d2:	9802      	ldr	r0, [sp, #8]
    c3d4:	9903      	ldr	r1, [sp, #12]
    c3d6:	b008      	add	sp, #32
    c3d8:	bd80      	pop	{r7, pc}

0000c3da <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
    c3da:	b08a      	sub	sp, #40	; 0x28
    c3dc:	9004      	str	r0, [sp, #16]
    c3de:	9105      	str	r1, [sp, #20]
    c3e0:	1840      	adds	r0, r0, r1
    c3e2:	f04f 0100 	mov.w	r1, #0
    c3e6:	f141 0100 	adc.w	r1, r1, #0
    c3ea:	9006      	str	r0, [sp, #24]
    c3ec:	f88d 101c 	strb.w	r1, [sp, #28]
    c3f0:	9806      	ldr	r0, [sp, #24]
    c3f2:	f89d 101c 	ldrb.w	r1, [sp, #28]
    c3f6:	9001      	str	r0, [sp, #4]
    c3f8:	9100      	str	r1, [sp, #0]
    c3fa:	e7ff      	b.n	c3fc <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
    c3fc:	9801      	ldr	r0, [sp, #4]
    c3fe:	9008      	str	r0, [sp, #32]
    c400:	9900      	ldr	r1, [sp, #0]
    c402:	f001 0201 	and.w	r2, r1, #1
    c406:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    c40a:	9002      	str	r0, [sp, #8]
    c40c:	f88d 200c 	strb.w	r2, [sp, #12]
    c410:	9802      	ldr	r0, [sp, #8]
    c412:	f89d 100c 	ldrb.w	r1, [sp, #12]
    c416:	b00a      	add	sp, #40	; 0x28
    c418:	4770      	bx	lr

0000c41a <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
    c41a:	b580      	push	{r7, lr}
    c41c:	b08c      	sub	sp, #48	; 0x30
    c41e:	9005      	str	r0, [sp, #20]
    c420:	9106      	str	r1, [sp, #24]
    c422:	9207      	str	r2, [sp, #28]
    c424:	4603      	mov	r3, r0
    c426:	9008      	str	r0, [sp, #32]
    c428:	4608      	mov	r0, r1
    c42a:	9109      	str	r1, [sp, #36]	; 0x24
    c42c:	2104      	movs	r1, #4
    c42e:	910b      	str	r1, [sp, #44]	; 0x2c
    c430:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c432:	9204      	str	r2, [sp, #16]
    c434:	9303      	str	r3, [sp, #12]
    c436:	9002      	str	r0, [sp, #8]
    c438:	9101      	str	r1, [sp, #4]
    c43a:	e7ff      	b.n	c43c <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
    c43c:	9801      	ldr	r0, [sp, #4]
    c43e:	9904      	ldr	r1, [sp, #16]
    c440:	fb00 f201 	mul.w	r2, r0, r1
    c444:	920a      	str	r2, [sp, #40]	; 0x28
    c446:	9803      	ldr	r0, [sp, #12]
    c448:	9902      	ldr	r1, [sp, #8]
    c44a:	f000 f82e 	bl	c4aa <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
    c44e:	e7ff      	b.n	c450 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
    c450:	b00c      	add	sp, #48	; 0x30
    c452:	bd80      	pop	{r7, pc}

0000c454 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
    c454:	b580      	push	{r7, lr}
    c456:	b088      	sub	sp, #32
    c458:	9004      	str	r0, [sp, #16]
    c45a:	9105      	str	r1, [sp, #20]
    c45c:	2204      	movs	r2, #4
    c45e:	9207      	str	r2, [sp, #28]
    c460:	9a07      	ldr	r2, [sp, #28]
    c462:	9103      	str	r1, [sp, #12]
    c464:	9002      	str	r0, [sp, #8]
    c466:	9201      	str	r2, [sp, #4]
    c468:	e7ff      	b.n	c46a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
    c46a:	9801      	ldr	r0, [sp, #4]
    c46c:	2820      	cmp	r0, #32
    c46e:	d306      	bcc.n	c47e <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
    c470:	e7ff      	b.n	c472 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
    c472:	2201      	movs	r2, #1
    c474:	9802      	ldr	r0, [sp, #8]
    c476:	9903      	ldr	r1, [sp, #12]
    c478:	f7ff ffcf 	bl	c41a <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
    c47c:	e012      	b.n	c4a4 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
    c47e:	9802      	ldr	r0, [sp, #8]
    c480:	f000 f8a1 	bl	c5c6 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
    c484:	4601      	mov	r1, r0
    c486:	9006      	str	r0, [sp, #24]
    c488:	9100      	str	r1, [sp, #0]
    c48a:	e7ff      	b.n	c48c <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
    c48c:	2201      	movs	r2, #1
    c48e:	9803      	ldr	r0, [sp, #12]
    c490:	9902      	ldr	r1, [sp, #8]
    c492:	f7ff ff60 	bl	c356 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
    c496:	e7ff      	b.n	c498 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
    c498:	9803      	ldr	r0, [sp, #12]
    c49a:	9900      	ldr	r1, [sp, #0]
    c49c:	f000 f8ac 	bl	c5f8 <_ZN4core3ptr5write17h4a80332de2cee3d3E>
    c4a0:	e7ff      	b.n	c4a2 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
    c4a2:	e000      	b.n	c4a6 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
    c4a4:	e7ff      	b.n	c4a6 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
    c4a6:	b008      	add	sp, #32
    c4a8:	bd80      	pop	{r7, pc}

0000c4aa <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
    c4aa:	b5d0      	push	{r4, r6, r7, lr}
    c4ac:	af02      	add	r7, sp, #8
    c4ae:	b0b4      	sub	sp, #208	; 0xd0
    c4b0:	466c      	mov	r4, sp
    c4b2:	f36f 0404 	bfc	r4, #0, #5
    c4b6:	46a5      	mov	sp, r4
    c4b8:	9024      	str	r0, [sp, #144]	; 0x90
    c4ba:	9125      	str	r1, [sp, #148]	; 0x94
    c4bc:	9226      	str	r2, [sp, #152]	; 0x98
    c4be:	2320      	movs	r3, #32
    c4c0:	932f      	str	r3, [sp, #188]	; 0xbc
    c4c2:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    c4c4:	9327      	str	r3, [sp, #156]	; 0x9c
    c4c6:	920e      	str	r2, [sp, #56]	; 0x38
    c4c8:	910d      	str	r1, [sp, #52]	; 0x34
    c4ca:	900c      	str	r0, [sp, #48]	; 0x30
    c4cc:	930b      	str	r3, [sp, #44]	; 0x2c
    c4ce:	e7ff      	b.n	c4d0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
    c4d0:	2000      	movs	r0, #0
    c4d2:	900f      	str	r0, [sp, #60]	; 0x3c
    c4d4:	e7ff      	b.n	c4d6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
    c4d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    c4d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c4da:	4408      	add	r0, r1
    c4dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c4de:	4290      	cmp	r0, r2
    c4e0:	d905      	bls.n	c4ee <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
    c4e2:	e7ff      	b.n	c4e4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
    c4e4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    c4e6:	990e      	ldr	r1, [sp, #56]	; 0x38
    c4e8:	4288      	cmp	r0, r1
    c4ea:	d334      	bcc.n	c556 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
    c4ec:	e067      	b.n	c5be <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
    c4ee:	e7ff      	b.n	c4f0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
    c4f0:	a810      	add	r0, sp, #64	; 0x40
    c4f2:	9030      	str	r0, [sp, #192]	; 0xc0
    c4f4:	9031      	str	r0, [sp, #196]	; 0xc4
    c4f6:	e7ff      	b.n	c4f8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
    c4f8:	a810      	add	r0, sp, #64	; 0x40
    c4fa:	4601      	mov	r1, r0
    c4fc:	9028      	str	r0, [sp, #160]	; 0xa0
    c4fe:	980f      	ldr	r0, [sp, #60]	; 0x3c
    c500:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c502:	900a      	str	r0, [sp, #40]	; 0x28
    c504:	4610      	mov	r0, r2
    c506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c508:	9109      	str	r1, [sp, #36]	; 0x24
    c50a:	4619      	mov	r1, r3
    c50c:	f000 f87a 	bl	c604 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    c510:	4601      	mov	r1, r0
    c512:	9029      	str	r0, [sp, #164]	; 0xa4
    c514:	9108      	str	r1, [sp, #32]
    c516:	e7ff      	b.n	c518 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
    c518:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c51a:	980d      	ldr	r0, [sp, #52]	; 0x34
    c51c:	f000 f872 	bl	c604 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    c520:	4601      	mov	r1, r0
    c522:	902a      	str	r0, [sp, #168]	; 0xa8
    c524:	9107      	str	r1, [sp, #28]
    c526:	e7ff      	b.n	c528 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
    c528:	9808      	ldr	r0, [sp, #32]
    c52a:	9909      	ldr	r1, [sp, #36]	; 0x24
    c52c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c52e:	f7ff ff05 	bl	c33c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    c532:	e7ff      	b.n	c534 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
    c534:	9807      	ldr	r0, [sp, #28]
    c536:	9908      	ldr	r1, [sp, #32]
    c538:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c53a:	f7ff feff 	bl	c33c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    c53e:	e7ff      	b.n	c540 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
    c540:	9809      	ldr	r0, [sp, #36]	; 0x24
    c542:	9907      	ldr	r1, [sp, #28]
    c544:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c546:	f7ff fef9 	bl	c33c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    c54a:	e7ff      	b.n	c54c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
    c54c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    c54e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c550:	4408      	add	r0, r1
    c552:	900f      	str	r0, [sp, #60]	; 0x3c
    c554:	e7bf      	b.n	c4d6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
    c556:	e7ff      	b.n	c558 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
    c558:	980f      	ldr	r0, [sp, #60]	; 0x3c
    c55a:	990e      	ldr	r1, [sp, #56]	; 0x38
    c55c:	1a08      	subs	r0, r1, r0
    c55e:	4602      	mov	r2, r0
    c560:	902b      	str	r0, [sp, #172]	; 0xac
    c562:	a81c      	add	r0, sp, #112	; 0x70
    c564:	9032      	str	r0, [sp, #200]	; 0xc8
    c566:	9033      	str	r0, [sp, #204]	; 0xcc
    c568:	9206      	str	r2, [sp, #24]
    c56a:	9005      	str	r0, [sp, #20]
    c56c:	e7ff      	b.n	c56e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
    c56e:	9805      	ldr	r0, [sp, #20]
    c570:	9905      	ldr	r1, [sp, #20]
    c572:	912c      	str	r1, [sp, #176]	; 0xb0
    c574:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c578:	9004      	str	r0, [sp, #16]
    c57a:	4610      	mov	r0, r2
    c57c:	f000 f842 	bl	c604 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    c580:	4601      	mov	r1, r0
    c582:	902d      	str	r0, [sp, #180]	; 0xb4
    c584:	9103      	str	r1, [sp, #12]
    c586:	e7ff      	b.n	c588 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
    c588:	990f      	ldr	r1, [sp, #60]	; 0x3c
    c58a:	980d      	ldr	r0, [sp, #52]	; 0x34
    c58c:	f000 f83a 	bl	c604 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    c590:	4601      	mov	r1, r0
    c592:	902e      	str	r0, [sp, #184]	; 0xb8
    c594:	9102      	str	r1, [sp, #8]
    c596:	e7ff      	b.n	c598 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
    c598:	9803      	ldr	r0, [sp, #12]
    c59a:	9904      	ldr	r1, [sp, #16]
    c59c:	9a06      	ldr	r2, [sp, #24]
    c59e:	f7ff fecd 	bl	c33c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    c5a2:	e7ff      	b.n	c5a4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
    c5a4:	9802      	ldr	r0, [sp, #8]
    c5a6:	9903      	ldr	r1, [sp, #12]
    c5a8:	9a06      	ldr	r2, [sp, #24]
    c5aa:	f7ff fec7 	bl	c33c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    c5ae:	e7ff      	b.n	c5b0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
    c5b0:	9804      	ldr	r0, [sp, #16]
    c5b2:	9902      	ldr	r1, [sp, #8]
    c5b4:	9a06      	ldr	r2, [sp, #24]
    c5b6:	f7ff fec1 	bl	c33c <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    c5ba:	e7ff      	b.n	c5bc <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
    c5bc:	e7ff      	b.n	c5be <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
    c5be:	f1a7 0408 	sub.w	r4, r7, #8
    c5c2:	46a5      	mov	sp, r4
    c5c4:	bdd0      	pop	{r4, r6, r7, pc}

0000c5c6 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
    c5c6:	b580      	push	{r7, lr}
    c5c8:	b08a      	sub	sp, #40	; 0x28
    c5ca:	9004      	str	r0, [sp, #16]
    c5cc:	9905      	ldr	r1, [sp, #20]
    c5ce:	9103      	str	r1, [sp, #12]
    c5d0:	9002      	str	r0, [sp, #8]
    c5d2:	e7ff      	b.n	c5d4 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
    c5d4:	a803      	add	r0, sp, #12
    c5d6:	9008      	str	r0, [sp, #32]
    c5d8:	9009      	str	r0, [sp, #36]	; 0x24
    c5da:	e7ff      	b.n	c5dc <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
    c5dc:	a903      	add	r1, sp, #12
    c5de:	2201      	movs	r2, #1
    c5e0:	9802      	ldr	r0, [sp, #8]
    c5e2:	f7ff feb8 	bl	c356 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
    c5e6:	e7ff      	b.n	c5e8 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
    c5e8:	9803      	ldr	r0, [sp, #12]
    c5ea:	9006      	str	r0, [sp, #24]
    c5ec:	9007      	str	r0, [sp, #28]
    c5ee:	9001      	str	r0, [sp, #4]
    c5f0:	e7ff      	b.n	c5f2 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
    c5f2:	9801      	ldr	r0, [sp, #4]
    c5f4:	b00a      	add	sp, #40	; 0x28
    c5f6:	bd80      	pop	{r7, pc}

0000c5f8 <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
    c5f8:	b082      	sub	sp, #8
    c5fa:	9000      	str	r0, [sp, #0]
    c5fc:	9101      	str	r1, [sp, #4]
    c5fe:	6001      	str	r1, [r0, #0]
    c600:	b002      	add	sp, #8
    c602:	4770      	bx	lr

0000c604 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
    c604:	b580      	push	{r7, lr}
    c606:	b084      	sub	sp, #16
    c608:	9002      	str	r0, [sp, #8]
    c60a:	9103      	str	r1, [sp, #12]
    c60c:	f000 f805 	bl	c61a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
    c610:	9001      	str	r0, [sp, #4]
    c612:	e7ff      	b.n	c614 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
    c614:	9801      	ldr	r0, [sp, #4]
    c616:	b004      	add	sp, #16
    c618:	bd80      	pop	{r7, pc}

0000c61a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
    c61a:	b084      	sub	sp, #16
    c61c:	9001      	str	r0, [sp, #4]
    c61e:	9102      	str	r1, [sp, #8]
    c620:	4408      	add	r0, r1
    c622:	9003      	str	r0, [sp, #12]
    c624:	9803      	ldr	r0, [sp, #12]
    c626:	9000      	str	r0, [sp, #0]
    c628:	e7ff      	b.n	c62a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
    c62a:	9800      	ldr	r0, [sp, #0]
    c62c:	b004      	add	sp, #16
    c62e:	4770      	bx	lr

0000c630 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
    c630:	b580      	push	{r7, lr}
    c632:	b084      	sub	sp, #16
    c634:	9002      	str	r0, [sp, #8]
    c636:	9103      	str	r1, [sp, #12]
    c638:	f000 f805 	bl	c646 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
    c63c:	9001      	str	r0, [sp, #4]
    c63e:	e7ff      	b.n	c640 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
    c640:	9801      	ldr	r0, [sp, #4]
    c642:	b004      	add	sp, #16
    c644:	bd80      	pop	{r7, pc}

0000c646 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
    c646:	b084      	sub	sp, #16
    c648:	9001      	str	r0, [sp, #4]
    c64a:	9102      	str	r1, [sp, #8]
    c64c:	4408      	add	r0, r1
    c64e:	9003      	str	r0, [sp, #12]
    c650:	9803      	ldr	r0, [sp, #12]
    c652:	9000      	str	r0, [sp, #0]
    c654:	e7ff      	b.n	c656 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
    c656:	9800      	ldr	r0, [sp, #0]
    c658:	b004      	add	sp, #16
    c65a:	4770      	bx	lr

0000c65c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
    c65c:	b580      	push	{r7, lr}
    c65e:	b08a      	sub	sp, #40	; 0x28
    c660:	9009      	str	r0, [sp, #36]	; 0x24
    c662:	2100      	movs	r1, #0
    c664:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    c668:	1d01      	adds	r1, r0, #4
    c66a:	9002      	str	r0, [sp, #8]
    c66c:	f7ff fe81 	bl	c372 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
    c670:	9001      	str	r0, [sp, #4]
    c672:	e7ff      	b.n	c674 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
    c674:	9801      	ldr	r0, [sp, #4]
    c676:	07c1      	lsls	r1, r0, #31
    c678:	2900      	cmp	r1, #0
    c67a:	d103      	bne.n	c684 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
    c67c:	e7ff      	b.n	c67e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
    c67e:	2000      	movs	r0, #0
    c680:	9003      	str	r0, [sp, #12]
    c682:	e021      	b.n	c6c8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
    c684:	2001      	movs	r0, #1
    c686:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    c68a:	9902      	ldr	r1, [sp, #8]
    c68c:	9000      	str	r0, [sp, #0]
    c68e:	4608      	mov	r0, r1
    c690:	9900      	ldr	r1, [sp, #0]
    c692:	f7ff fe39 	bl	c308 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
    c696:	9106      	str	r1, [sp, #24]
    c698:	9005      	str	r0, [sp, #20]
    c69a:	e7ff      	b.n	c69c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
    c69c:	9805      	ldr	r0, [sp, #20]
    c69e:	2801      	cmp	r0, #1
    c6a0:	d003      	beq.n	c6aa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
    c6a2:	e7ff      	b.n	c6a4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
    c6a4:	2000      	movs	r0, #0
    c6a6:	9003      	str	r0, [sp, #12]
    c6a8:	e021      	b.n	c6ee <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
    c6aa:	2000      	movs	r0, #0
    c6ac:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    c6b0:	9806      	ldr	r0, [sp, #24]
    c6b2:	9007      	str	r0, [sp, #28]
    c6b4:	a807      	add	r0, sp, #28
    c6b6:	9902      	ldr	r1, [sp, #8]
    c6b8:	f7ff fe67 	bl	c38a <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
    c6bc:	e7ff      	b.n	c6be <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
    c6be:	9807      	ldr	r0, [sp, #28]
    c6c0:	9004      	str	r0, [sp, #16]
    c6c2:	2001      	movs	r0, #1
    c6c4:	9003      	str	r0, [sp, #12]
    c6c6:	e012      	b.n	c6ee <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
    c6c8:	9803      	ldr	r0, [sp, #12]
    c6ca:	9904      	ldr	r1, [sp, #16]
    c6cc:	b00a      	add	sp, #40	; 0x28
    c6ce:	bd80      	pop	{r7, pc}
    c6d0:	2000      	movs	r0, #0
    c6d2:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    c6d6:	e7f7      	b.n	c6c8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
    c6d8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    c6dc:	07c0      	lsls	r0, r0, #31
    c6de:	2800      	cmp	r0, #0
    c6e0:	d0f6      	beq.n	c6d0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    c6e2:	e7ff      	b.n	c6e4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
    c6e4:	2000      	movs	r0, #0
    c6e6:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    c6ea:	e7f1      	b.n	c6d0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    c6ec:	e7f0      	b.n	c6d0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    c6ee:	9805      	ldr	r0, [sp, #20]
    c6f0:	2801      	cmp	r0, #1
    c6f2:	d0f1      	beq.n	c6d8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
    c6f4:	e7fa      	b.n	c6ec <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

0000c6f6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
    c6f6:	b082      	sub	sp, #8
    c6f8:	9000      	str	r0, [sp, #0]
    c6fa:	9101      	str	r1, [sp, #4]
    c6fc:	b002      	add	sp, #8
    c6fe:	4770      	bx	lr

0000c700 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
    c700:	b580      	push	{r7, lr}
    c702:	b086      	sub	sp, #24
    c704:	9003      	str	r0, [sp, #12]
    c706:	9104      	str	r1, [sp, #16]
    c708:	9205      	str	r2, [sp, #20]
    c70a:	9002      	str	r0, [sp, #8]
    c70c:	4610      	mov	r0, r2
    c70e:	9a02      	ldr	r2, [sp, #8]
    c710:	9101      	str	r1, [sp, #4]
    c712:	4611      	mov	r1, r2
    c714:	9a01      	ldr	r2, [sp, #4]
    c716:	f000 f846 	bl	c7a6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
    c71a:	9000      	str	r0, [sp, #0]
    c71c:	e7ff      	b.n	c71e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
    c71e:	9800      	ldr	r0, [sp, #0]
    c720:	b006      	add	sp, #24
    c722:	bd80      	pop	{r7, pc}

0000c724 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
    c724:	b084      	sub	sp, #16
    c726:	9002      	str	r0, [sp, #8]
    c728:	9103      	str	r1, [sp, #12]
    c72a:	9000      	str	r0, [sp, #0]
    c72c:	9101      	str	r1, [sp, #4]
    c72e:	9801      	ldr	r0, [sp, #4]
    c730:	b004      	add	sp, #16
    c732:	4770      	bx	lr

0000c734 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
    c734:	b082      	sub	sp, #8
    c736:	9000      	str	r0, [sp, #0]
    c738:	9101      	str	r1, [sp, #4]
    c73a:	b002      	add	sp, #8
    c73c:	4770      	bx	lr

0000c73e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
    c73e:	b081      	sub	sp, #4
    c740:	9000      	str	r0, [sp, #0]
    c742:	b001      	add	sp, #4
    c744:	4770      	bx	lr

0000c746 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
    c746:	b580      	push	{r7, lr}
    c748:	b082      	sub	sp, #8
    c74a:	9001      	str	r0, [sp, #4]
    c74c:	f7ff fff7 	bl	c73e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
    c750:	9000      	str	r0, [sp, #0]
    c752:	e7ff      	b.n	c754 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
    c754:	9800      	ldr	r0, [sp, #0]
    c756:	b002      	add	sp, #8
    c758:	bd80      	pop	{r7, pc}

0000c75a <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
    c75a:	b580      	push	{r7, lr}
    c75c:	b084      	sub	sp, #16
    c75e:	9003      	str	r0, [sp, #12]
    c760:	f7ff fff1 	bl	c746 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
    c764:	9001      	str	r0, [sp, #4]
    c766:	e7ff      	b.n	c768 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
    c768:	9801      	ldr	r0, [sp, #4]
    c76a:	9002      	str	r0, [sp, #8]
    c76c:	9802      	ldr	r0, [sp, #8]
    c76e:	b004      	add	sp, #16
    c770:	bd80      	pop	{r7, pc}

0000c772 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
    c772:	b082      	sub	sp, #8
    c774:	9000      	str	r0, [sp, #0]
    c776:	9101      	str	r1, [sp, #4]
    c778:	b002      	add	sp, #8
    c77a:	4770      	bx	lr

0000c77c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
    c77c:	b580      	push	{r7, lr}
    c77e:	b086      	sub	sp, #24
    c780:	9003      	str	r0, [sp, #12]
    c782:	9104      	str	r1, [sp, #16]
    c784:	9205      	str	r2, [sp, #20]
    c786:	9002      	str	r0, [sp, #8]
    c788:	4608      	mov	r0, r1
    c78a:	4611      	mov	r1, r2
    c78c:	f7ff ffd2 	bl	c734 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    c790:	9001      	str	r0, [sp, #4]
    c792:	e7ff      	b.n	c794 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
    c794:	9801      	ldr	r0, [sp, #4]
    c796:	9902      	ldr	r1, [sp, #8]
    c798:	f7ff ff4a 	bl	c630 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
    c79c:	9000      	str	r0, [sp, #0]
    c79e:	e7ff      	b.n	c7a0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
    c7a0:	9800      	ldr	r0, [sp, #0]
    c7a2:	b006      	add	sp, #24
    c7a4:	bd80      	pop	{r7, pc}

0000c7a6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
    c7a6:	b580      	push	{r7, lr}
    c7a8:	b086      	sub	sp, #24
    c7aa:	9003      	str	r0, [sp, #12]
    c7ac:	9104      	str	r1, [sp, #16]
    c7ae:	9205      	str	r2, [sp, #20]
    c7b0:	9002      	str	r0, [sp, #8]
    c7b2:	4608      	mov	r0, r1
    c7b4:	4611      	mov	r1, r2
    c7b6:	f7ff ff9e 	bl	c6f6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    c7ba:	9001      	str	r0, [sp, #4]
    c7bc:	e7ff      	b.n	c7be <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
    c7be:	9801      	ldr	r0, [sp, #4]
    c7c0:	9902      	ldr	r1, [sp, #8]
    c7c2:	f7ff ff1f 	bl	c604 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    c7c6:	9000      	str	r0, [sp, #0]
    c7c8:	e7ff      	b.n	c7ca <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
    c7ca:	9800      	ldr	r0, [sp, #0]
    c7cc:	b006      	add	sp, #24
    c7ce:	bd80      	pop	{r7, pc}

0000c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
    c7d0:	b081      	sub	sp, #4
    c7d2:	b001      	add	sp, #4
    c7d4:	4770      	bx	lr

0000c7d6 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
    c7d6:	b086      	sub	sp, #24
    c7d8:	9004      	str	r0, [sp, #16]
    c7da:	9105      	str	r1, [sp, #20]
    c7dc:	9002      	str	r0, [sp, #8]
    c7de:	9103      	str	r1, [sp, #12]
    c7e0:	9802      	ldr	r0, [sp, #8]
    c7e2:	9903      	ldr	r1, [sp, #12]
    c7e4:	9000      	str	r0, [sp, #0]
    c7e6:	9101      	str	r1, [sp, #4]
    c7e8:	9800      	ldr	r0, [sp, #0]
    c7ea:	9901      	ldr	r1, [sp, #4]
    c7ec:	b006      	add	sp, #24
    c7ee:	4770      	bx	lr

0000c7f0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
    c7f0:	b580      	push	{r7, lr}
    c7f2:	b084      	sub	sp, #16
    c7f4:	9002      	str	r0, [sp, #8]
    c7f6:	9103      	str	r1, [sp, #12]
    c7f8:	f000 f805 	bl	c806 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
    c7fc:	9001      	str	r0, [sp, #4]
    c7fe:	e7ff      	b.n	c800 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
    c800:	9801      	ldr	r0, [sp, #4]
    c802:	b004      	add	sp, #16
    c804:	bd80      	pop	{r7, pc}

0000c806 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
    c806:	b084      	sub	sp, #16
    c808:	9001      	str	r0, [sp, #4]
    c80a:	9102      	str	r1, [sp, #8]
    c80c:	4408      	add	r0, r1
    c80e:	9003      	str	r0, [sp, #12]
    c810:	9803      	ldr	r0, [sp, #12]
    c812:	9000      	str	r0, [sp, #0]
    c814:	e7ff      	b.n	c816 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
    c816:	9800      	ldr	r0, [sp, #0]
    c818:	b004      	add	sp, #16
    c81a:	4770      	bx	lr

0000c81c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
    c81c:	b580      	push	{r7, lr}
    c81e:	b084      	sub	sp, #16
    c820:	9002      	str	r0, [sp, #8]
    c822:	9103      	str	r1, [sp, #12]
    c824:	f7ff ffd7 	bl	c7d6 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
    c828:	9001      	str	r0, [sp, #4]
    c82a:	9100      	str	r1, [sp, #0]
    c82c:	e7ff      	b.n	c82e <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
    c82e:	9801      	ldr	r0, [sp, #4]
    c830:	9900      	ldr	r1, [sp, #0]
    c832:	b004      	add	sp, #16
    c834:	bd80      	pop	{r7, pc}

0000c836 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
    c836:	b084      	sub	sp, #16
    c838:	9002      	str	r0, [sp, #8]
    c83a:	9103      	str	r1, [sp, #12]
    c83c:	9000      	str	r0, [sp, #0]
    c83e:	9101      	str	r1, [sp, #4]
    c840:	9801      	ldr	r0, [sp, #4]
    c842:	b004      	add	sp, #16
    c844:	4770      	bx	lr

0000c846 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
    c846:	b082      	sub	sp, #8
    c848:	9000      	str	r0, [sp, #0]
    c84a:	9101      	str	r1, [sp, #4]
    c84c:	b002      	add	sp, #8
    c84e:	4770      	bx	lr

0000c850 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
    c850:	b083      	sub	sp, #12
    c852:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
    c854:	9002      	str	r0, [sp, #8]
    c856:	9802      	ldr	r0, [sp, #8]
    c858:	9000      	str	r0, [sp, #0]
    c85a:	e7ff      	b.n	c85c <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
    c85c:	9800      	ldr	r0, [sp, #0]
    c85e:	b003      	add	sp, #12
    c860:	4770      	bx	lr

0000c862 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
    c862:	b081      	sub	sp, #4
    c864:	f06f 000c 	mvn.w	r0, #12
        }
    c868:	b001      	add	sp, #4
    c86a:	4770      	bx	lr

0000c86c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    c86c:	b082      	sub	sp, #8
    c86e:	9000      	str	r0, [sp, #0]
    c870:	9101      	str	r1, [sp, #4]
    c872:	2000      	movs	r0, #0
        }
    c874:	b002      	add	sp, #8
    c876:	4770      	bx	lr

0000c878 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
    c878:	b082      	sub	sp, #8
    c87a:	9000      	str	r0, [sp, #0]
    c87c:	9101      	str	r1, [sp, #4]
    c87e:	7800      	ldrb	r0, [r0, #0]
    c880:	7809      	ldrb	r1, [r1, #0]
    c882:	1a40      	subs	r0, r0, r1
    c884:	fab0 f080 	clz	r0, r0
    c888:	0940      	lsrs	r0, r0, #5
    c88a:	b002      	add	sp, #8
    c88c:	4770      	bx	lr

0000c88e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
    c88e:	b580      	push	{r7, lr}
    c890:	b084      	sub	sp, #16
    c892:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
    c894:	f006 fe69 	bl	1356a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>
    c898:	9002      	str	r0, [sp, #8]
    c89a:	9101      	str	r1, [sp, #4]
    c89c:	e7ff      	b.n	c89e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E+0x10>
    }
    c89e:	9802      	ldr	r0, [sp, #8]
    c8a0:	9901      	ldr	r1, [sp, #4]
    c8a2:	b004      	add	sp, #16
    c8a4:	bd80      	pop	{r7, pc}

0000c8a6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
    c8a6:	b580      	push	{r7, lr}
    c8a8:	b084      	sub	sp, #16
    c8aa:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
    c8ac:	f006 fe72 	bl	13594 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
    c8b0:	9002      	str	r0, [sp, #8]
    c8b2:	9101      	str	r1, [sp, #4]
    c8b4:	e7ff      	b.n	c8b6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
    c8b6:	9802      	ldr	r0, [sp, #8]
    c8b8:	9901      	ldr	r1, [sp, #4]
    c8ba:	b004      	add	sp, #16
    c8bc:	bd80      	pop	{r7, pc}

0000c8be <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
    c8be:	b580      	push	{r7, lr}
    c8c0:	b084      	sub	sp, #16
    c8c2:	9001      	str	r0, [sp, #4]
    c8c4:	9102      	str	r1, [sp, #8]
    c8c6:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
    c8c8:	f006 fdb1 	bl	1342e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>
    c8cc:	9000      	str	r0, [sp, #0]
    c8ce:	e7ff      	b.n	c8d0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E+0x12>
    }
    c8d0:	9800      	ldr	r0, [sp, #0]
    c8d2:	f000 0001 	and.w	r0, r0, #1
    c8d6:	b004      	add	sp, #16
    c8d8:	bd80      	pop	{r7, pc}

0000c8da <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
    c8da:	b580      	push	{r7, lr}
    c8dc:	b086      	sub	sp, #24
    c8de:	460a      	mov	r2, r1
    c8e0:	9004      	str	r0, [sp, #16]
    c8e2:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
    c8e6:	9203      	str	r2, [sp, #12]
    c8e8:	f006 fe04 	bl	134f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
    c8ec:	9002      	str	r0, [sp, #8]
    c8ee:	9101      	str	r1, [sp, #4]
    c8f0:	e7ff      	b.n	c8f2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
    c8f2:	9802      	ldr	r0, [sp, #8]
    c8f4:	f000 0001 	and.w	r0, r0, #1
    c8f8:	9901      	ldr	r1, [sp, #4]
    c8fa:	b006      	add	sp, #24
    c8fc:	bd80      	pop	{r7, pc}

0000c8fe <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
    c8fe:	b580      	push	{r7, lr}
    c900:	b082      	sub	sp, #8
    c902:	9001      	str	r0, [sp, #4]
        self.0.clear()
    c904:	f006 fe1f 	bl	13546 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
    c908:	e7ff      	b.n	c90a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
    c90a:	b002      	add	sp, #8
    c90c:	bd80      	pop	{r7, pc}

0000c90e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>:
    pub fn clear(&mut self) {
    c90e:	b580      	push	{r7, lr}
    c910:	b082      	sub	sp, #8
    c912:	9001      	str	r0, [sp, #4]
        self.0.clear()
    c914:	f006 fe20 	bl	13558 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>
    c918:	e7ff      	b.n	c91a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E+0xc>
    }
    c91a:	b002      	add	sp, #8
    c91c:	bd80      	pop	{r7, pc}

0000c91e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>:
    pub fn capacity(&self) -> usize {
    c91e:	b580      	push	{r7, lr}
    c920:	b082      	sub	sp, #8
    c922:	9001      	str	r0, [sp, #4]
        self.0.capacity()
    c924:	f006 fe55 	bl	135d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
    c928:	9000      	str	r0, [sp, #0]
    c92a:	e7ff      	b.n	c92c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E+0xe>
    }
    c92c:	9800      	ldr	r0, [sp, #0]
    c92e:	b002      	add	sp, #8
    c930:	bd80      	pop	{r7, pc}

0000c932 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
    c932:	b081      	sub	sp, #4
    c934:	9000      	str	r0, [sp, #0]
    c936:	b001      	add	sp, #4
    c938:	4770      	bx	lr

0000c93a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
    c93a:	b580      	push	{r7, lr}
    c93c:	b088      	sub	sp, #32
    c93e:	9006      	str	r0, [sp, #24]
    c940:	9107      	str	r1, [sp, #28]
    c942:	9004      	str	r0, [sp, #16]
    c944:	4608      	mov	r0, r1
    c946:	9103      	str	r1, [sp, #12]
    c948:	f008 f88b 	bl	14a62 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
    c94c:	9002      	str	r0, [sp, #8]
    c94e:	e7ff      	b.n	c950 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
    c950:	9802      	ldr	r0, [sp, #8]
    c952:	07c1      	lsls	r1, r0, #31
    c954:	2900      	cmp	r1, #0
    c956:	d105      	bne.n	c964 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
    c958:	e7ff      	b.n	c95a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
    c95a:	9803      	ldr	r0, [sp, #12]
    c95c:	f008 f885 	bl	14a6a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
    c960:	9001      	str	r0, [sp, #4]
    c962:	e007      	b.n	c974 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
    c964:	9804      	ldr	r0, [sp, #16]
    c966:	9903      	ldr	r1, [sp, #12]
    c968:	f008 fd89 	bl	1547e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
    c96c:	f88d 0017 	strb.w	r0, [sp, #23]
    c970:	e7ff      	b.n	c972 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
    c972:	e015      	b.n	c9a0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
    c974:	9801      	ldr	r0, [sp, #4]
    c976:	07c1      	lsls	r1, r0, #31
    c978:	2900      	cmp	r1, #0
    c97a:	d107      	bne.n	c98c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
    c97c:	e7ff      	b.n	c97e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
    c97e:	9804      	ldr	r0, [sp, #16]
    c980:	9903      	ldr	r1, [sp, #12]
    c982:	f008 ff6e 	bl	15862 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
    c986:	f88d 0017 	strb.w	r0, [sp, #23]
    c98a:	e007      	b.n	c99c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
    c98c:	9804      	ldr	r0, [sp, #16]
    c98e:	9903      	ldr	r1, [sp, #12]
    c990:	f008 fda4 	bl	154dc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
    c994:	f88d 0017 	strb.w	r0, [sp, #23]
    c998:	e7ff      	b.n	c99a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
    c99a:	e000      	b.n	c99e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
    c99c:	e7ff      	b.n	c99e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
    c99e:	e7ff      	b.n	c9a0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
    c9a0:	f89d 0017 	ldrb.w	r0, [sp, #23]
    c9a4:	b008      	add	sp, #32
    c9a6:	bd80      	pop	{r7, pc}

0000c9a8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
    c9a8:	b580      	push	{r7, lr}
    c9aa:	b088      	sub	sp, #32
    c9ac:	9006      	str	r0, [sp, #24]
    c9ae:	9107      	str	r1, [sp, #28]
    c9b0:	9004      	str	r0, [sp, #16]
    c9b2:	4608      	mov	r0, r1
    c9b4:	9103      	str	r1, [sp, #12]
    c9b6:	f008 f854 	bl	14a62 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
    c9ba:	9002      	str	r0, [sp, #8]
    c9bc:	e7ff      	b.n	c9be <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
    c9be:	9802      	ldr	r0, [sp, #8]
    c9c0:	07c1      	lsls	r1, r0, #31
    c9c2:	2900      	cmp	r1, #0
    c9c4:	d105      	bne.n	c9d2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
    c9c6:	e7ff      	b.n	c9c8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
    c9c8:	9803      	ldr	r0, [sp, #12]
    c9ca:	f008 f84e 	bl	14a6a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
    c9ce:	9001      	str	r0, [sp, #4]
    c9d0:	e007      	b.n	c9e2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
    c9d2:	9804      	ldr	r0, [sp, #16]
    c9d4:	9903      	ldr	r1, [sp, #12]
    c9d6:	f008 fe6e 	bl	156b6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
    c9da:	f88d 0017 	strb.w	r0, [sp, #23]
    c9de:	e7ff      	b.n	c9e0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
    c9e0:	e015      	b.n	ca0e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
    c9e2:	9801      	ldr	r0, [sp, #4]
    c9e4:	07c1      	lsls	r1, r0, #31
    c9e6:	2900      	cmp	r1, #0
    c9e8:	d107      	bne.n	c9fa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
    c9ea:	e7ff      	b.n	c9ec <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
    c9ec:	9804      	ldr	r0, [sp, #16]
    c9ee:	9903      	ldr	r1, [sp, #12]
    c9f0:	f008 ffdc 	bl	159ac <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
    c9f4:	f88d 0017 	strb.w	r0, [sp, #23]
    c9f8:	e007      	b.n	ca0a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
    c9fa:	9804      	ldr	r0, [sp, #16]
    c9fc:	9903      	ldr	r1, [sp, #12]
    c9fe:	f008 fec5 	bl	1578c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
    ca02:	f88d 0017 	strb.w	r0, [sp, #23]
    ca06:	e7ff      	b.n	ca08 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
    ca08:	e000      	b.n	ca0c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
    ca0a:	e7ff      	b.n	ca0c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
    ca0c:	e7ff      	b.n	ca0e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
    ca0e:	f89d 0017 	ldrb.w	r0, [sp, #23]
    ca12:	b008      	add	sp, #32
    ca14:	bd80      	pop	{r7, pc}

0000ca16 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
    ca16:	b580      	push	{r7, lr}
    ca18:	b088      	sub	sp, #32
    ca1a:	9006      	str	r0, [sp, #24]
    ca1c:	9107      	str	r1, [sp, #28]
    ca1e:	9004      	str	r0, [sp, #16]
    ca20:	4608      	mov	r0, r1
    ca22:	9103      	str	r1, [sp, #12]
    ca24:	f008 f81d 	bl	14a62 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
    ca28:	9002      	str	r0, [sp, #8]
    ca2a:	e7ff      	b.n	ca2c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
    ca2c:	9802      	ldr	r0, [sp, #8]
    ca2e:	07c1      	lsls	r1, r0, #31
    ca30:	2900      	cmp	r1, #0
    ca32:	d105      	bne.n	ca40 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
    ca34:	e7ff      	b.n	ca36 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
    ca36:	9803      	ldr	r0, [sp, #12]
    ca38:	f008 f817 	bl	14a6a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
    ca3c:	9001      	str	r0, [sp, #4]
    ca3e:	e007      	b.n	ca50 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
    ca40:	9804      	ldr	r0, [sp, #16]
    ca42:	9903      	ldr	r1, [sp, #12]
    ca44:	f008 fe37 	bl	156b6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
    ca48:	f88d 0017 	strb.w	r0, [sp, #23]
    ca4c:	e7ff      	b.n	ca4e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
    ca4e:	e015      	b.n	ca7c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
    ca50:	9801      	ldr	r0, [sp, #4]
    ca52:	07c1      	lsls	r1, r0, #31
    ca54:	2900      	cmp	r1, #0
    ca56:	d107      	bne.n	ca68 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
    ca58:	e7ff      	b.n	ca5a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
    ca5a:	9804      	ldr	r0, [sp, #16]
    ca5c:	9903      	ldr	r1, [sp, #12]
    ca5e:	f009 f81f 	bl	15aa0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
    ca62:	f88d 0017 	strb.w	r0, [sp, #23]
    ca66:	e007      	b.n	ca78 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
    ca68:	9804      	ldr	r0, [sp, #16]
    ca6a:	9903      	ldr	r1, [sp, #12]
    ca6c:	f008 fe8e 	bl	1578c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
    ca70:	f88d 0017 	strb.w	r0, [sp, #23]
    ca74:	e7ff      	b.n	ca76 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
    ca76:	e000      	b.n	ca7a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
    ca78:	e7ff      	b.n	ca7a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
    ca7a:	e7ff      	b.n	ca7c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
    ca7c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    ca80:	b008      	add	sp, #32
    ca82:	bd80      	pop	{r7, pc}

0000ca84 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
    ca84:	b580      	push	{r7, lr}
    ca86:	b084      	sub	sp, #16
    ca88:	9002      	str	r0, [sp, #8]
    ca8a:	9103      	str	r1, [sp, #12]
    ca8c:	6800      	ldr	r0, [r0, #0]
    ca8e:	6809      	ldr	r1, [r1, #0]
    ca90:	f7ff fef2 	bl	c878 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
    ca94:	9001      	str	r0, [sp, #4]
    ca96:	e7ff      	b.n	ca98 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
    ca98:	9801      	ldr	r0, [sp, #4]
    ca9a:	f000 0001 	and.w	r0, r0, #1
    ca9e:	b004      	add	sp, #16
    caa0:	bd80      	pop	{r7, pc}

0000caa2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
    caa2:	b5b0      	push	{r4, r5, r7, lr}
    caa4:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
    caa8:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
    caaa:	f009 fedb 	bl	16864 <hal_spi_disable>
    caae:	e7ff      	b.n	cab0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
    cab0:	f240 01f0 	movw	r1, #240	; 0xf0
    cab4:	f2c2 0100 	movt	r1, #8192	; 0x2000
    cab8:	2000      	movs	r0, #0
    caba:	f009 fe91 	bl	167e0 <hal_spi_config>
    cabe:	906a      	str	r0, [sp, #424]	; 0x1a8
    cac0:	e7ff      	b.n	cac2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
    cac2:	f64a 60d0 	movw	r0, #44752	; 0xaed0
    cac6:	f2c0 0001 	movt	r0, #1
    caca:	6800      	ldr	r0, [r0, #0]
    cacc:	a96a      	add	r1, sp, #424	; 0x1a8
    cace:	916b      	str	r1, [sp, #428]	; 0x1ac
    cad0:	906c      	str	r0, [sp, #432]	; 0x1b0
    cad2:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    cad4:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
    cad8:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    cada:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
    cade:	6802      	ldr	r2, [r0, #0]
    cae0:	680b      	ldr	r3, [r1, #0]
    cae2:	429a      	cmp	r2, r3
    cae4:	9068      	str	r0, [sp, #416]	; 0x1a0
    cae6:	9167      	str	r1, [sp, #412]	; 0x19c
    cae8:	d10c      	bne.n	cb04 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
    caea:	e7ff      	b.n	caec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
    caec:	f242 60a4 	movw	r0, #9892	; 0x26a4
    caf0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    caf4:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
    caf8:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
    cafc:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
    cb00:	9066      	str	r0, [sp, #408]	; 0x198
    cb02:	e075      	b.n	cbf0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
    cb04:	f64a 7028 	movw	r0, #44840	; 0xaf28
    cb08:	f2c0 0001 	movt	r0, #1
    cb0c:	6801      	ldr	r1, [r0, #0]
    cb0e:	9868      	ldr	r0, [sp, #416]	; 0x1a0
    cb10:	907c      	str	r0, [sp, #496]	; 0x1f0
    cb12:	9a67      	ldr	r2, [sp, #412]	; 0x19c
    cb14:	927d      	str	r2, [sp, #500]	; 0x1f4
    cb16:	f64a 7344 	movw	r3, #44868	; 0xaf44
    cb1a:	f2c0 0301 	movt	r3, #1
    cb1e:	681b      	ldr	r3, [r3, #0]
    cb20:	f64a 7c48 	movw	ip, #44872	; 0xaf48
    cb24:	f2c0 0c01 	movt	ip, #1
    cb28:	f8dc c000 	ldr.w	ip, [ip]
    cb2c:	46ee      	mov	lr, sp
    cb2e:	2400      	movs	r4, #0
    cb30:	f8ce 4000 	str.w	r4, [lr]
    cb34:	a87e      	add	r0, sp, #504	; 0x1f8
    cb36:	2201      	movs	r2, #1
    cb38:	9165      	str	r1, [sp, #404]	; 0x194
    cb3a:	4619      	mov	r1, r3
    cb3c:	4663      	mov	r3, ip
    cb3e:	f7fb ff2b 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    cb42:	e7ff      	b.n	cb44 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
    cb44:	a87c      	add	r0, sp, #496	; 0x1f0
    cb46:	9079      	str	r0, [sp, #484]	; 0x1e4
    cb48:	a87d      	add	r0, sp, #500	; 0x1f4
    cb4a:	907a      	str	r0, [sp, #488]	; 0x1e8
    cb4c:	a87e      	add	r0, sp, #504	; 0x1f8
    cb4e:	907b      	str	r0, [sp, #492]	; 0x1ec
    cb50:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    cb52:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
    cb56:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    cb58:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
    cb5c:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
    cb5e:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
    cb62:	f648 7381 	movw	r3, #36737	; 0x8f81
    cb66:	f2c0 0300 	movt	r3, #0
    cb6a:	9164      	str	r1, [sp, #400]	; 0x190
    cb6c:	4619      	mov	r1, r3
    cb6e:	9263      	str	r2, [sp, #396]	; 0x18c
    cb70:	f7fc fa3e 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    cb74:	9062      	str	r0, [sp, #392]	; 0x188
    cb76:	9161      	str	r1, [sp, #388]	; 0x184
    cb78:	e7ff      	b.n	cb7a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
    cb7a:	f648 7181 	movw	r1, #36737	; 0x8f81
    cb7e:	f2c0 0100 	movt	r1, #0
    cb82:	9864      	ldr	r0, [sp, #400]	; 0x190
    cb84:	f7fc fa34 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    cb88:	9060      	str	r0, [sp, #384]	; 0x180
    cb8a:	915f      	str	r1, [sp, #380]	; 0x17c
    cb8c:	e7ff      	b.n	cb8e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
    cb8e:	f244 21ef 	movw	r1, #17135	; 0x42ef
    cb92:	f2c0 0101 	movt	r1, #1
    cb96:	9863      	ldr	r0, [sp, #396]	; 0x18c
    cb98:	f7fc fa69 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    cb9c:	905e      	str	r0, [sp, #376]	; 0x178
    cb9e:	915d      	str	r1, [sp, #372]	; 0x174
    cba0:	e7ff      	b.n	cba2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
    cba2:	9862      	ldr	r0, [sp, #392]	; 0x188
    cba4:	9073      	str	r0, [sp, #460]	; 0x1cc
    cba6:	9961      	ldr	r1, [sp, #388]	; 0x184
    cba8:	9174      	str	r1, [sp, #464]	; 0x1d0
    cbaa:	9a60      	ldr	r2, [sp, #384]	; 0x180
    cbac:	9275      	str	r2, [sp, #468]	; 0x1d4
    cbae:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
    cbb0:	9376      	str	r3, [sp, #472]	; 0x1d8
    cbb2:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
    cbb6:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
    cbba:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
    cbbe:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
    cbc2:	466c      	mov	r4, sp
    cbc4:	2503      	movs	r5, #3
    cbc6:	6025      	str	r5, [r4, #0]
    cbc8:	a86d      	add	r0, sp, #436	; 0x1b4
    cbca:	ab73      	add	r3, sp, #460	; 0x1cc
    cbcc:	9965      	ldr	r1, [sp, #404]	; 0x194
    cbce:	462a      	mov	r2, r5
    cbd0:	f7fb fee2 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    cbd4:	e7ff      	b.n	cbd6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
    cbd6:	f64a 7064 	movw	r0, #44900	; 0xaf64
    cbda:	f2c0 0001 	movt	r0, #1
    cbde:	f007 f898 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    cbe2:	905c      	str	r0, [sp, #368]	; 0x170
    cbe4:	e7ff      	b.n	cbe6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
    cbe6:	a86d      	add	r0, sp, #436	; 0x1b4
    cbe8:	995c      	ldr	r1, [sp, #368]	; 0x170
    cbea:	f007 f8cf 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    cbee:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
    cbf0:	f24e 003d 	movw	r0, #57405	; 0xe03d
    cbf4:	f2c0 0000 	movt	r0, #0
    cbf8:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
    cbfa:	9985      	ldr	r1, [sp, #532]	; 0x214
    cbfc:	2000      	movs	r0, #0
    cbfe:	9a66      	ldr	r2, [sp, #408]	; 0x198
    cc00:	f009 fe94 	bl	1692c <hal_spi_set_txrx_cb>
    cc04:	9084      	str	r0, [sp, #528]	; 0x210
    cc06:	e7ff      	b.n	cc08 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
    cc08:	f64a 60d0 	movw	r0, #44752	; 0xaed0
    cc0c:	f2c0 0001 	movt	r0, #1
    cc10:	6800      	ldr	r0, [r0, #0]
    cc12:	a984      	add	r1, sp, #528	; 0x210
    cc14:	9186      	str	r1, [sp, #536]	; 0x218
    cc16:	9087      	str	r0, [sp, #540]	; 0x21c
    cc18:	9886      	ldr	r0, [sp, #536]	; 0x218
    cc1a:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
    cc1e:	9987      	ldr	r1, [sp, #540]	; 0x21c
    cc20:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
    cc24:	6802      	ldr	r2, [r0, #0]
    cc26:	680b      	ldr	r3, [r1, #0]
    cc28:	429a      	cmp	r2, r3
    cc2a:	905b      	str	r0, [sp, #364]	; 0x16c
    cc2c:	915a      	str	r1, [sp, #360]	; 0x168
    cc2e:	d105      	bne.n	cc3c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
    cc30:	e7ff      	b.n	cc32 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
    cc32:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
    cc34:	f009 fdf0 	bl	16818 <hal_spi_enable>
    cc38:	909f      	str	r0, [sp, #636]	; 0x27c
    cc3a:	e075      	b.n	cd28 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
    cc3c:	f64a 7028 	movw	r0, #44840	; 0xaf28
    cc40:	f2c0 0001 	movt	r0, #1
    cc44:	6801      	ldr	r1, [r0, #0]
    cc46:	985b      	ldr	r0, [sp, #364]	; 0x16c
    cc48:	9097      	str	r0, [sp, #604]	; 0x25c
    cc4a:	9a5a      	ldr	r2, [sp, #360]	; 0x168
    cc4c:	9298      	str	r2, [sp, #608]	; 0x260
    cc4e:	f64a 7388 	movw	r3, #44936	; 0xaf88
    cc52:	f2c0 0301 	movt	r3, #1
    cc56:	681b      	ldr	r3, [r3, #0]
    cc58:	f64a 7c48 	movw	ip, #44872	; 0xaf48
    cc5c:	f2c0 0c01 	movt	ip, #1
    cc60:	f8dc c000 	ldr.w	ip, [ip]
    cc64:	46ee      	mov	lr, sp
    cc66:	2400      	movs	r4, #0
    cc68:	f8ce 4000 	str.w	r4, [lr]
    cc6c:	a899      	add	r0, sp, #612	; 0x264
    cc6e:	2201      	movs	r2, #1
    cc70:	9159      	str	r1, [sp, #356]	; 0x164
    cc72:	4619      	mov	r1, r3
    cc74:	4663      	mov	r3, ip
    cc76:	f7fb fe8f 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    cc7a:	e7ff      	b.n	cc7c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
    cc7c:	a897      	add	r0, sp, #604	; 0x25c
    cc7e:	9094      	str	r0, [sp, #592]	; 0x250
    cc80:	a898      	add	r0, sp, #608	; 0x260
    cc82:	9095      	str	r0, [sp, #596]	; 0x254
    cc84:	a899      	add	r0, sp, #612	; 0x264
    cc86:	9096      	str	r0, [sp, #600]	; 0x258
    cc88:	9894      	ldr	r0, [sp, #592]	; 0x250
    cc8a:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
    cc8e:	9995      	ldr	r1, [sp, #596]	; 0x254
    cc90:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
    cc94:	9a96      	ldr	r2, [sp, #600]	; 0x258
    cc96:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
    cc9a:	f648 7381 	movw	r3, #36737	; 0x8f81
    cc9e:	f2c0 0300 	movt	r3, #0
    cca2:	9158      	str	r1, [sp, #352]	; 0x160
    cca4:	4619      	mov	r1, r3
    cca6:	9257      	str	r2, [sp, #348]	; 0x15c
    cca8:	f7fc f9a2 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    ccac:	9056      	str	r0, [sp, #344]	; 0x158
    ccae:	9155      	str	r1, [sp, #340]	; 0x154
    ccb0:	e7ff      	b.n	ccb2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
    ccb2:	f648 7181 	movw	r1, #36737	; 0x8f81
    ccb6:	f2c0 0100 	movt	r1, #0
    ccba:	9858      	ldr	r0, [sp, #352]	; 0x160
    ccbc:	f7fc f998 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    ccc0:	9054      	str	r0, [sp, #336]	; 0x150
    ccc2:	9153      	str	r1, [sp, #332]	; 0x14c
    ccc4:	e7ff      	b.n	ccc6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
    ccc6:	f244 21ef 	movw	r1, #17135	; 0x42ef
    ccca:	f2c0 0101 	movt	r1, #1
    ccce:	9857      	ldr	r0, [sp, #348]	; 0x15c
    ccd0:	f7fc f9cd 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    ccd4:	9052      	str	r0, [sp, #328]	; 0x148
    ccd6:	9151      	str	r1, [sp, #324]	; 0x144
    ccd8:	e7ff      	b.n	ccda <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
    ccda:	9856      	ldr	r0, [sp, #344]	; 0x158
    ccdc:	908e      	str	r0, [sp, #568]	; 0x238
    ccde:	9955      	ldr	r1, [sp, #340]	; 0x154
    cce0:	918f      	str	r1, [sp, #572]	; 0x23c
    cce2:	9a54      	ldr	r2, [sp, #336]	; 0x150
    cce4:	9290      	str	r2, [sp, #576]	; 0x240
    cce6:	9b53      	ldr	r3, [sp, #332]	; 0x14c
    cce8:	9391      	str	r3, [sp, #580]	; 0x244
    ccea:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
    ccee:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
    ccf2:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
    ccf6:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
    ccfa:	466c      	mov	r4, sp
    ccfc:	2503      	movs	r5, #3
    ccfe:	6025      	str	r5, [r4, #0]
    cd00:	a888      	add	r0, sp, #544	; 0x220
    cd02:	ab8e      	add	r3, sp, #568	; 0x238
    cd04:	9959      	ldr	r1, [sp, #356]	; 0x164
    cd06:	462a      	mov	r2, r5
    cd08:	f7fb fe46 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    cd0c:	e7ff      	b.n	cd0e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
    cd0e:	f64a 708c 	movw	r0, #44940	; 0xaf8c
    cd12:	f2c0 0001 	movt	r0, #1
    cd16:	f006 fffc 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    cd1a:	9050      	str	r0, [sp, #320]	; 0x140
    cd1c:	e7ff      	b.n	cd1e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
    cd1e:	a888      	add	r0, sp, #544	; 0x220
    cd20:	9950      	ldr	r1, [sp, #320]	; 0x140
    cd22:	f007 f833 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    cd26:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
    cd28:	f64a 60d0 	movw	r0, #44752	; 0xaed0
    cd2c:	f2c0 0001 	movt	r0, #1
    cd30:	6800      	ldr	r0, [r0, #0]
    cd32:	a99f      	add	r1, sp, #636	; 0x27c
    cd34:	91a0      	str	r1, [sp, #640]	; 0x280
    cd36:	90a1      	str	r0, [sp, #644]	; 0x284
    cd38:	98a0      	ldr	r0, [sp, #640]	; 0x280
    cd3a:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
    cd3e:	99a1      	ldr	r1, [sp, #644]	; 0x284
    cd40:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
    cd44:	6802      	ldr	r2, [r0, #0]
    cd46:	680b      	ldr	r3, [r1, #0]
    cd48:	429a      	cmp	r2, r3
    cd4a:	904f      	str	r0, [sp, #316]	; 0x13c
    cd4c:	914e      	str	r1, [sp, #312]	; 0x138
    cd4e:	d106      	bne.n	cd5e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
    cd50:	e7ff      	b.n	cd52 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
    cd52:	2019      	movs	r0, #25
    cd54:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
    cd56:	f009 f935 	bl	15fc4 <hal_gpio_init_out>
    cd5a:	90b9      	str	r0, [sp, #740]	; 0x2e4
    cd5c:	e075      	b.n	ce4a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
    cd5e:	f64a 7028 	movw	r0, #44840	; 0xaf28
    cd62:	f2c0 0001 	movt	r0, #1
    cd66:	6801      	ldr	r1, [r0, #0]
    cd68:	984f      	ldr	r0, [sp, #316]	; 0x13c
    cd6a:	90b1      	str	r0, [sp, #708]	; 0x2c4
    cd6c:	9a4e      	ldr	r2, [sp, #312]	; 0x138
    cd6e:	92b2      	str	r2, [sp, #712]	; 0x2c8
    cd70:	f64a 73b4 	movw	r3, #44980	; 0xafb4
    cd74:	f2c0 0301 	movt	r3, #1
    cd78:	681b      	ldr	r3, [r3, #0]
    cd7a:	f64a 7c48 	movw	ip, #44872	; 0xaf48
    cd7e:	f2c0 0c01 	movt	ip, #1
    cd82:	f8dc c000 	ldr.w	ip, [ip]
    cd86:	46ee      	mov	lr, sp
    cd88:	2400      	movs	r4, #0
    cd8a:	f8ce 4000 	str.w	r4, [lr]
    cd8e:	a8b3      	add	r0, sp, #716	; 0x2cc
    cd90:	2201      	movs	r2, #1
    cd92:	914d      	str	r1, [sp, #308]	; 0x134
    cd94:	4619      	mov	r1, r3
    cd96:	4663      	mov	r3, ip
    cd98:	f7fb fdfe 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    cd9c:	e7ff      	b.n	cd9e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
    cd9e:	a8b1      	add	r0, sp, #708	; 0x2c4
    cda0:	90ae      	str	r0, [sp, #696]	; 0x2b8
    cda2:	a8b2      	add	r0, sp, #712	; 0x2c8
    cda4:	90af      	str	r0, [sp, #700]	; 0x2bc
    cda6:	a8b3      	add	r0, sp, #716	; 0x2cc
    cda8:	90b0      	str	r0, [sp, #704]	; 0x2c0
    cdaa:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    cdac:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
    cdb0:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    cdb2:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
    cdb6:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
    cdb8:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
    cdbc:	f648 7381 	movw	r3, #36737	; 0x8f81
    cdc0:	f2c0 0300 	movt	r3, #0
    cdc4:	914c      	str	r1, [sp, #304]	; 0x130
    cdc6:	4619      	mov	r1, r3
    cdc8:	924b      	str	r2, [sp, #300]	; 0x12c
    cdca:	f7fc f911 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    cdce:	904a      	str	r0, [sp, #296]	; 0x128
    cdd0:	9149      	str	r1, [sp, #292]	; 0x124
    cdd2:	e7ff      	b.n	cdd4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
    cdd4:	f648 7181 	movw	r1, #36737	; 0x8f81
    cdd8:	f2c0 0100 	movt	r1, #0
    cddc:	984c      	ldr	r0, [sp, #304]	; 0x130
    cdde:	f7fc f907 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    cde2:	9048      	str	r0, [sp, #288]	; 0x120
    cde4:	9147      	str	r1, [sp, #284]	; 0x11c
    cde6:	e7ff      	b.n	cde8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
    cde8:	f244 21ef 	movw	r1, #17135	; 0x42ef
    cdec:	f2c0 0101 	movt	r1, #1
    cdf0:	984b      	ldr	r0, [sp, #300]	; 0x12c
    cdf2:	f7fc f93c 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    cdf6:	9046      	str	r0, [sp, #280]	; 0x118
    cdf8:	9145      	str	r1, [sp, #276]	; 0x114
    cdfa:	e7ff      	b.n	cdfc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
    cdfc:	984a      	ldr	r0, [sp, #296]	; 0x128
    cdfe:	90a8      	str	r0, [sp, #672]	; 0x2a0
    ce00:	9949      	ldr	r1, [sp, #292]	; 0x124
    ce02:	91a9      	str	r1, [sp, #676]	; 0x2a4
    ce04:	9a48      	ldr	r2, [sp, #288]	; 0x120
    ce06:	92aa      	str	r2, [sp, #680]	; 0x2a8
    ce08:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    ce0a:	93ab      	str	r3, [sp, #684]	; 0x2ac
    ce0c:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
    ce10:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
    ce14:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
    ce18:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
    ce1c:	466c      	mov	r4, sp
    ce1e:	2503      	movs	r5, #3
    ce20:	6025      	str	r5, [r4, #0]
    ce22:	a8a2      	add	r0, sp, #648	; 0x288
    ce24:	aba8      	add	r3, sp, #672	; 0x2a0
    ce26:	994d      	ldr	r1, [sp, #308]	; 0x134
    ce28:	462a      	mov	r2, r5
    ce2a:	f7fb fdb5 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    ce2e:	e7ff      	b.n	ce30 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
    ce30:	f64a 70b8 	movw	r0, #44984	; 0xafb8
    ce34:	f2c0 0001 	movt	r0, #1
    ce38:	f006 ff6b 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    ce3c:	9044      	str	r0, [sp, #272]	; 0x110
    ce3e:	e7ff      	b.n	ce40 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
    ce40:	a8a2      	add	r0, sp, #648	; 0x288
    ce42:	9944      	ldr	r1, [sp, #272]	; 0x110
    ce44:	f006 ffa2 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    ce48:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
    ce4a:	f64a 60d0 	movw	r0, #44752	; 0xaed0
    ce4e:	f2c0 0001 	movt	r0, #1
    ce52:	6800      	ldr	r0, [r0, #0]
    ce54:	a9b9      	add	r1, sp, #740	; 0x2e4
    ce56:	91ba      	str	r1, [sp, #744]	; 0x2e8
    ce58:	90bb      	str	r0, [sp, #748]	; 0x2ec
    ce5a:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    ce5c:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
    ce60:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    ce62:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
    ce66:	6802      	ldr	r2, [r0, #0]
    ce68:	680b      	ldr	r3, [r1, #0]
    ce6a:	429a      	cmp	r2, r3
    ce6c:	9043      	str	r0, [sp, #268]	; 0x10c
    ce6e:	9142      	str	r1, [sp, #264]	; 0x108
    ce70:	d106      	bne.n	ce80 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
    ce72:	e7ff      	b.n	ce74 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
    ce74:	2012      	movs	r0, #18
    ce76:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
    ce78:	f009 f8a4 	bl	15fc4 <hal_gpio_init_out>
    ce7c:	90d3      	str	r0, [sp, #844]	; 0x34c
    ce7e:	e075      	b.n	cf6c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
    ce80:	f64a 7028 	movw	r0, #44840	; 0xaf28
    ce84:	f2c0 0001 	movt	r0, #1
    ce88:	6801      	ldr	r1, [r0, #0]
    ce8a:	9843      	ldr	r0, [sp, #268]	; 0x10c
    ce8c:	90cb      	str	r0, [sp, #812]	; 0x32c
    ce8e:	9a42      	ldr	r2, [sp, #264]	; 0x108
    ce90:	92cc      	str	r2, [sp, #816]	; 0x330
    ce92:	f64a 73dc 	movw	r3, #45020	; 0xafdc
    ce96:	f2c0 0301 	movt	r3, #1
    ce9a:	681b      	ldr	r3, [r3, #0]
    ce9c:	f64a 7c48 	movw	ip, #44872	; 0xaf48
    cea0:	f2c0 0c01 	movt	ip, #1
    cea4:	f8dc c000 	ldr.w	ip, [ip]
    cea8:	46ee      	mov	lr, sp
    ceaa:	2400      	movs	r4, #0
    ceac:	f8ce 4000 	str.w	r4, [lr]
    ceb0:	a8cd      	add	r0, sp, #820	; 0x334
    ceb2:	2201      	movs	r2, #1
    ceb4:	9141      	str	r1, [sp, #260]	; 0x104
    ceb6:	4619      	mov	r1, r3
    ceb8:	4663      	mov	r3, ip
    ceba:	f7fb fd6d 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    cebe:	e7ff      	b.n	cec0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
    cec0:	a8cb      	add	r0, sp, #812	; 0x32c
    cec2:	90c8      	str	r0, [sp, #800]	; 0x320
    cec4:	a8cc      	add	r0, sp, #816	; 0x330
    cec6:	90c9      	str	r0, [sp, #804]	; 0x324
    cec8:	a8cd      	add	r0, sp, #820	; 0x334
    ceca:	90ca      	str	r0, [sp, #808]	; 0x328
    cecc:	98c8      	ldr	r0, [sp, #800]	; 0x320
    cece:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
    ced2:	99c9      	ldr	r1, [sp, #804]	; 0x324
    ced4:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
    ced8:	9aca      	ldr	r2, [sp, #808]	; 0x328
    ceda:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
    cede:	f648 7381 	movw	r3, #36737	; 0x8f81
    cee2:	f2c0 0300 	movt	r3, #0
    cee6:	9140      	str	r1, [sp, #256]	; 0x100
    cee8:	4619      	mov	r1, r3
    ceea:	923f      	str	r2, [sp, #252]	; 0xfc
    ceec:	f7fc f880 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    cef0:	903e      	str	r0, [sp, #248]	; 0xf8
    cef2:	913d      	str	r1, [sp, #244]	; 0xf4
    cef4:	e7ff      	b.n	cef6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
    cef6:	f648 7181 	movw	r1, #36737	; 0x8f81
    cefa:	f2c0 0100 	movt	r1, #0
    cefe:	9840      	ldr	r0, [sp, #256]	; 0x100
    cf00:	f7fc f876 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    cf04:	903c      	str	r0, [sp, #240]	; 0xf0
    cf06:	913b      	str	r1, [sp, #236]	; 0xec
    cf08:	e7ff      	b.n	cf0a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
    cf0a:	f244 21ef 	movw	r1, #17135	; 0x42ef
    cf0e:	f2c0 0101 	movt	r1, #1
    cf12:	983f      	ldr	r0, [sp, #252]	; 0xfc
    cf14:	f7fc f8ab 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    cf18:	903a      	str	r0, [sp, #232]	; 0xe8
    cf1a:	9139      	str	r1, [sp, #228]	; 0xe4
    cf1c:	e7ff      	b.n	cf1e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
    cf1e:	983e      	ldr	r0, [sp, #248]	; 0xf8
    cf20:	90c2      	str	r0, [sp, #776]	; 0x308
    cf22:	993d      	ldr	r1, [sp, #244]	; 0xf4
    cf24:	91c3      	str	r1, [sp, #780]	; 0x30c
    cf26:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    cf28:	92c4      	str	r2, [sp, #784]	; 0x310
    cf2a:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    cf2c:	93c5      	str	r3, [sp, #788]	; 0x314
    cf2e:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
    cf32:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
    cf36:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
    cf3a:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
    cf3e:	466c      	mov	r4, sp
    cf40:	2503      	movs	r5, #3
    cf42:	6025      	str	r5, [r4, #0]
    cf44:	a8bc      	add	r0, sp, #752	; 0x2f0
    cf46:	abc2      	add	r3, sp, #776	; 0x308
    cf48:	9941      	ldr	r1, [sp, #260]	; 0x104
    cf4a:	462a      	mov	r2, r5
    cf4c:	f7fb fd24 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    cf50:	e7ff      	b.n	cf52 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
    cf52:	f64a 70e0 	movw	r0, #45024	; 0xafe0
    cf56:	f2c0 0001 	movt	r0, #1
    cf5a:	f006 feda 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    cf5e:	9038      	str	r0, [sp, #224]	; 0xe0
    cf60:	e7ff      	b.n	cf62 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
    cf62:	a8bc      	add	r0, sp, #752	; 0x2f0
    cf64:	9938      	ldr	r1, [sp, #224]	; 0xe0
    cf66:	f006 ff11 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    cf6a:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
    cf6c:	f64a 60d0 	movw	r0, #44752	; 0xaed0
    cf70:	f2c0 0001 	movt	r0, #1
    cf74:	6800      	ldr	r0, [r0, #0]
    cf76:	a9d3      	add	r1, sp, #844	; 0x34c
    cf78:	91d4      	str	r1, [sp, #848]	; 0x350
    cf7a:	90d5      	str	r0, [sp, #852]	; 0x354
    cf7c:	98d4      	ldr	r0, [sp, #848]	; 0x350
    cf7e:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
    cf82:	99d5      	ldr	r1, [sp, #852]	; 0x354
    cf84:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
    cf88:	6802      	ldr	r2, [r0, #0]
    cf8a:	680b      	ldr	r3, [r1, #0]
    cf8c:	429a      	cmp	r2, r3
    cf8e:	9037      	str	r0, [sp, #220]	; 0xdc
    cf90:	9136      	str	r1, [sp, #216]	; 0xd8
    cf92:	d107      	bne.n	cfa4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
    cf94:	e7ff      	b.n	cf96 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
    cf96:	f242 2044 	movw	r0, #8772	; 0x2244
    cf9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cf9e:	f00a f91b 	bl	171d8 <os_eventq_init>
    cfa2:	e075      	b.n	d090 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
    cfa4:	f64a 7028 	movw	r0, #44840	; 0xaf28
    cfa8:	f2c0 0001 	movt	r0, #1
    cfac:	6801      	ldr	r1, [r0, #0]
    cfae:	9837      	ldr	r0, [sp, #220]	; 0xdc
    cfb0:	90e5      	str	r0, [sp, #916]	; 0x394
    cfb2:	9a36      	ldr	r2, [sp, #216]	; 0xd8
    cfb4:	92e6      	str	r2, [sp, #920]	; 0x398
    cfb6:	f64a 73dc 	movw	r3, #45020	; 0xafdc
    cfba:	f2c0 0301 	movt	r3, #1
    cfbe:	681b      	ldr	r3, [r3, #0]
    cfc0:	f64a 7c48 	movw	ip, #44872	; 0xaf48
    cfc4:	f2c0 0c01 	movt	ip, #1
    cfc8:	f8dc c000 	ldr.w	ip, [ip]
    cfcc:	46ee      	mov	lr, sp
    cfce:	2400      	movs	r4, #0
    cfd0:	f8ce 4000 	str.w	r4, [lr]
    cfd4:	a8e7      	add	r0, sp, #924	; 0x39c
    cfd6:	2201      	movs	r2, #1
    cfd8:	9135      	str	r1, [sp, #212]	; 0xd4
    cfda:	4619      	mov	r1, r3
    cfdc:	4663      	mov	r3, ip
    cfde:	f7fb fcdb 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    cfe2:	e7ff      	b.n	cfe4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
    cfe4:	a8e5      	add	r0, sp, #916	; 0x394
    cfe6:	90e2      	str	r0, [sp, #904]	; 0x388
    cfe8:	a8e6      	add	r0, sp, #920	; 0x398
    cfea:	90e3      	str	r0, [sp, #908]	; 0x38c
    cfec:	a8e7      	add	r0, sp, #924	; 0x39c
    cfee:	90e4      	str	r0, [sp, #912]	; 0x390
    cff0:	98e2      	ldr	r0, [sp, #904]	; 0x388
    cff2:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
    cff6:	99e3      	ldr	r1, [sp, #908]	; 0x38c
    cff8:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
    cffc:	9ae4      	ldr	r2, [sp, #912]	; 0x390
    cffe:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
    d002:	f648 7381 	movw	r3, #36737	; 0x8f81
    d006:	f2c0 0300 	movt	r3, #0
    d00a:	9134      	str	r1, [sp, #208]	; 0xd0
    d00c:	4619      	mov	r1, r3
    d00e:	9233      	str	r2, [sp, #204]	; 0xcc
    d010:	f7fb ffee 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    d014:	9032      	str	r0, [sp, #200]	; 0xc8
    d016:	9131      	str	r1, [sp, #196]	; 0xc4
    d018:	e7ff      	b.n	d01a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
    d01a:	f648 7181 	movw	r1, #36737	; 0x8f81
    d01e:	f2c0 0100 	movt	r1, #0
    d022:	9834      	ldr	r0, [sp, #208]	; 0xd0
    d024:	f7fb ffe4 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    d028:	9030      	str	r0, [sp, #192]	; 0xc0
    d02a:	912f      	str	r1, [sp, #188]	; 0xbc
    d02c:	e7ff      	b.n	d02e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
    d02e:	f244 21ef 	movw	r1, #17135	; 0x42ef
    d032:	f2c0 0101 	movt	r1, #1
    d036:	9833      	ldr	r0, [sp, #204]	; 0xcc
    d038:	f7fc f819 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    d03c:	902e      	str	r0, [sp, #184]	; 0xb8
    d03e:	912d      	str	r1, [sp, #180]	; 0xb4
    d040:	e7ff      	b.n	d042 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
    d042:	9832      	ldr	r0, [sp, #200]	; 0xc8
    d044:	90dc      	str	r0, [sp, #880]	; 0x370
    d046:	9931      	ldr	r1, [sp, #196]	; 0xc4
    d048:	91dd      	str	r1, [sp, #884]	; 0x374
    d04a:	9a30      	ldr	r2, [sp, #192]	; 0xc0
    d04c:	92de      	str	r2, [sp, #888]	; 0x378
    d04e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    d050:	93df      	str	r3, [sp, #892]	; 0x37c
    d052:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
    d056:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
    d05a:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
    d05e:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
    d062:	466c      	mov	r4, sp
    d064:	2503      	movs	r5, #3
    d066:	6025      	str	r5, [r4, #0]
    d068:	a8d6      	add	r0, sp, #856	; 0x358
    d06a:	abdc      	add	r3, sp, #880	; 0x370
    d06c:	9935      	ldr	r1, [sp, #212]	; 0xd4
    d06e:	462a      	mov	r2, r5
    d070:	f7fb fc92 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    d074:	e7ff      	b.n	d076 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
    d076:	f64a 70f0 	movw	r0, #45040	; 0xaff0
    d07a:	f2c0 0001 	movt	r0, #1
    d07e:	f006 fe48 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    d082:	902c      	str	r0, [sp, #176]	; 0xb0
    d084:	e7ff      	b.n	d086 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
    d086:	a8d6      	add	r0, sp, #856	; 0x358
    d088:	992c      	ldr	r1, [sp, #176]	; 0xb0
    d08a:	f006 fe7f 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    d08e:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
    d090:	f64d 201f 	movw	r0, #55839	; 0xda1f
    d094:	f2c0 0000 	movt	r0, #0
    d098:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
    d09a:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    d09c:	f242 202c 	movw	r0, #8748	; 0x222c
    d0a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d0a4:	2200      	movs	r2, #0
    d0a6:	f00a f945 	bl	17334 <os_mqueue_init>
    d0aa:	90ed      	str	r0, [sp, #948]	; 0x3b4
    d0ac:	e7ff      	b.n	d0ae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
    d0ae:	f64a 60d0 	movw	r0, #44752	; 0xaed0
    d0b2:	f2c0 0001 	movt	r0, #1
    d0b6:	6800      	ldr	r0, [r0, #0]
    d0b8:	a9ed      	add	r1, sp, #948	; 0x3b4
    d0ba:	91ef      	str	r1, [sp, #956]	; 0x3bc
    d0bc:	90f0      	str	r0, [sp, #960]	; 0x3c0
    d0be:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    d0c0:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
    d0c4:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
    d0c6:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
    d0ca:	6802      	ldr	r2, [r0, #0]
    d0cc:	680b      	ldr	r3, [r1, #0]
    d0ce:	429a      	cmp	r2, r3
    d0d0:	902b      	str	r0, [sp, #172]	; 0xac
    d0d2:	912a      	str	r1, [sp, #168]	; 0xa8
    d0d4:	d10a      	bne.n	d0ec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
    d0d6:	e7ff      	b.n	d0d8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
    d0d8:	f242 201c 	movw	r0, #8732	; 0x221c
    d0dc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d0e0:	2100      	movs	r1, #0
    d0e2:	f00a fe21 	bl	17d28 <os_sem_init>
    d0e6:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
    d0ea:	e07b      	b.n	d1e4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
    d0ec:	f64a 7028 	movw	r0, #44840	; 0xaf28
    d0f0:	f2c0 0001 	movt	r0, #1
    d0f4:	6801      	ldr	r1, [r0, #0]
    d0f6:	982b      	ldr	r0, [sp, #172]	; 0xac
    d0f8:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
    d0fc:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    d0fe:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
    d102:	f24b 0314 	movw	r3, #45076	; 0xb014
    d106:	f2c0 0301 	movt	r3, #1
    d10a:	681b      	ldr	r3, [r3, #0]
    d10c:	f64a 7c48 	movw	ip, #44872	; 0xaf48
    d110:	f2c0 0c01 	movt	ip, #1
    d114:	f8dc c000 	ldr.w	ip, [ip]
    d118:	46ee      	mov	lr, sp
    d11a:	2400      	movs	r4, #0
    d11c:	f8ce 4000 	str.w	r4, [lr]
    d120:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
    d124:	2201      	movs	r2, #1
    d126:	9129      	str	r1, [sp, #164]	; 0xa4
    d128:	4619      	mov	r1, r3
    d12a:	4663      	mov	r3, ip
    d12c:	f7fb fc34 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    d130:	e7ff      	b.n	d132 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
    d132:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
    d136:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    d138:	f20d 4004 	addw	r0, sp, #1028	; 0x404
    d13c:	90fe      	str	r0, [sp, #1016]	; 0x3f8
    d13e:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
    d142:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    d144:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
    d146:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
    d14a:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    d14c:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
    d150:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
    d152:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
    d156:	f648 7381 	movw	r3, #36737	; 0x8f81
    d15a:	f2c0 0300 	movt	r3, #0
    d15e:	9128      	str	r1, [sp, #160]	; 0xa0
    d160:	4619      	mov	r1, r3
    d162:	9227      	str	r2, [sp, #156]	; 0x9c
    d164:	f7fb ff44 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    d168:	9026      	str	r0, [sp, #152]	; 0x98
    d16a:	9125      	str	r1, [sp, #148]	; 0x94
    d16c:	e7ff      	b.n	d16e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
    d16e:	f648 7181 	movw	r1, #36737	; 0x8f81
    d172:	f2c0 0100 	movt	r1, #0
    d176:	9828      	ldr	r0, [sp, #160]	; 0xa0
    d178:	f7fb ff3a 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    d17c:	9024      	str	r0, [sp, #144]	; 0x90
    d17e:	9123      	str	r1, [sp, #140]	; 0x8c
    d180:	e7ff      	b.n	d182 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
    d182:	f244 21ef 	movw	r1, #17135	; 0x42ef
    d186:	f2c0 0101 	movt	r1, #1
    d18a:	9827      	ldr	r0, [sp, #156]	; 0x9c
    d18c:	f7fb ff6f 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    d190:	9022      	str	r0, [sp, #136]	; 0x88
    d192:	9121      	str	r1, [sp, #132]	; 0x84
    d194:	e7ff      	b.n	d196 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
    d196:	9826      	ldr	r0, [sp, #152]	; 0x98
    d198:	90f7      	str	r0, [sp, #988]	; 0x3dc
    d19a:	9925      	ldr	r1, [sp, #148]	; 0x94
    d19c:	91f8      	str	r1, [sp, #992]	; 0x3e0
    d19e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    d1a0:	92f9      	str	r2, [sp, #996]	; 0x3e4
    d1a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    d1a4:	93fa      	str	r3, [sp, #1000]	; 0x3e8
    d1a6:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
    d1aa:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
    d1ae:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
    d1b2:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
    d1b6:	466c      	mov	r4, sp
    d1b8:	2503      	movs	r5, #3
    d1ba:	6025      	str	r5, [r4, #0]
    d1bc:	a8f1      	add	r0, sp, #964	; 0x3c4
    d1be:	abf7      	add	r3, sp, #988	; 0x3dc
    d1c0:	9929      	ldr	r1, [sp, #164]	; 0xa4
    d1c2:	462a      	mov	r2, r5
    d1c4:	f7fb fbe8 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    d1c8:	e7ff      	b.n	d1ca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
    d1ca:	f24b 0018 	movw	r0, #45080	; 0xb018
    d1ce:	f2c0 0001 	movt	r0, #1
    d1d2:	f006 fd9e 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    d1d6:	9020      	str	r0, [sp, #128]	; 0x80
    d1d8:	e7ff      	b.n	d1da <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
    d1da:	a8f1      	add	r0, sp, #964	; 0x3c4
    d1dc:	9920      	ldr	r1, [sp, #128]	; 0x80
    d1de:	f006 fdd5 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    d1e2:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
    d1e4:	f64a 60d0 	movw	r0, #44752	; 0xaed0
    d1e8:	f2c0 0001 	movt	r0, #1
    d1ec:	6800      	ldr	r0, [r0, #0]
    d1ee:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
    d1f2:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    d1f6:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
    d1fa:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
    d1fe:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    d202:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
    d206:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
    d20a:	6802      	ldr	r2, [r0, #0]
    d20c:	680b      	ldr	r3, [r1, #0]
    d20e:	429a      	cmp	r2, r3
    d210:	901f      	str	r0, [sp, #124]	; 0x7c
    d212:	911e      	str	r1, [sp, #120]	; 0x78
    d214:	d10a      	bne.n	d22c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
    d216:	e7ff      	b.n	d218 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
    d218:	f242 2024 	movw	r0, #8740	; 0x2224
    d21c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d220:	2102      	movs	r1, #2
    d222:	f00a fd81 	bl	17d28 <os_sem_init>
    d226:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
    d22a:	e088      	b.n	d33e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
    d22c:	f64a 7028 	movw	r0, #44840	; 0xaf28
    d230:	f2c0 0001 	movt	r0, #1
    d234:	6801      	ldr	r1, [r0, #0]
    d236:	981f      	ldr	r0, [sp, #124]	; 0x7c
    d238:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
    d23c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    d23e:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    d242:	f24b 0340 	movw	r3, #45120	; 0xb040
    d246:	f2c0 0301 	movt	r3, #1
    d24a:	681b      	ldr	r3, [r3, #0]
    d24c:	f64a 7c48 	movw	ip, #44872	; 0xaf48
    d250:	f2c0 0c01 	movt	ip, #1
    d254:	f8dc c000 	ldr.w	ip, [ip]
    d258:	46ee      	mov	lr, sp
    d25a:	2400      	movs	r4, #0
    d25c:	f8ce 4000 	str.w	r4, [lr]
    d260:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
    d264:	2201      	movs	r2, #1
    d266:	911d      	str	r1, [sp, #116]	; 0x74
    d268:	4619      	mov	r1, r3
    d26a:	4663      	mov	r3, ip
    d26c:	f7fb fb94 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    d270:	e7ff      	b.n	d272 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
    d272:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
    d276:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
    d27a:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
    d27e:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
    d282:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
    d286:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
    d28a:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
    d28e:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    d292:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d296:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
    d29a:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
    d29e:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
    d2a2:	f648 73d5 	movw	r3, #36821	; 0x8fd5
    d2a6:	f2c0 0300 	movt	r3, #0
    d2aa:	911c      	str	r1, [sp, #112]	; 0x70
    d2ac:	4619      	mov	r1, r3
    d2ae:	921b      	str	r2, [sp, #108]	; 0x6c
    d2b0:	f7fb fec8 	bl	9044 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
    d2b4:	901a      	str	r0, [sp, #104]	; 0x68
    d2b6:	9119      	str	r1, [sp, #100]	; 0x64
    d2b8:	e7ff      	b.n	d2ba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
    d2ba:	f648 71d5 	movw	r1, #36821	; 0x8fd5
    d2be:	f2c0 0100 	movt	r1, #0
    d2c2:	981c      	ldr	r0, [sp, #112]	; 0x70
    d2c4:	f7fb febe 	bl	9044 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
    d2c8:	9018      	str	r0, [sp, #96]	; 0x60
    d2ca:	9117      	str	r1, [sp, #92]	; 0x5c
    d2cc:	e7ff      	b.n	d2ce <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
    d2ce:	f244 21ef 	movw	r1, #17135	; 0x42ef
    d2d2:	f2c0 0101 	movt	r1, #1
    d2d6:	981b      	ldr	r0, [sp, #108]	; 0x6c
    d2d8:	f7fb fec9 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    d2dc:	9016      	str	r0, [sp, #88]	; 0x58
    d2de:	9115      	str	r1, [sp, #84]	; 0x54
    d2e0:	e7ff      	b.n	d2e2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
    d2e2:	981a      	ldr	r0, [sp, #104]	; 0x68
    d2e4:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
    d2e8:	9919      	ldr	r1, [sp, #100]	; 0x64
    d2ea:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
    d2ee:	9a18      	ldr	r2, [sp, #96]	; 0x60
    d2f0:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
    d2f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    d2f6:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
    d2fa:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
    d2fe:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
    d302:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
    d306:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
    d30a:	466c      	mov	r4, sp
    d30c:	2503      	movs	r5, #3
    d30e:	6025      	str	r5, [r4, #0]
    d310:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
    d314:	f20d 4344 	addw	r3, sp, #1092	; 0x444
    d318:	991d      	ldr	r1, [sp, #116]	; 0x74
    d31a:	462a      	mov	r2, r5
    d31c:	f7fb fb3c 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    d320:	e7ff      	b.n	d322 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
    d322:	f24b 0044 	movw	r0, #45124	; 0xb044
    d326:	f2c0 0001 	movt	r0, #1
    d32a:	f006 fcf2 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    d32e:	9014      	str	r0, [sp, #80]	; 0x50
    d330:	e7ff      	b.n	d332 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
    d332:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
    d336:	9914      	ldr	r1, [sp, #80]	; 0x50
    d338:	f006 fd28 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    d33c:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
    d33e:	f64a 60d0 	movw	r0, #44752	; 0xaed0
    d342:	f2c0 0001 	movt	r0, #1
    d346:	6800      	ldr	r0, [r0, #0]
    d348:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
    d34c:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
    d350:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    d354:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
    d358:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
    d35c:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d360:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
    d364:	6802      	ldr	r2, [r0, #0]
    d366:	680b      	ldr	r3, [r1, #0]
    d368:	429a      	cmp	r2, r3
    d36a:	9013      	str	r0, [sp, #76]	; 0x4c
    d36c:	9112      	str	r1, [sp, #72]	; 0x48
    d36e:	d125      	bne.n	d3bc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
    d370:	e7ff      	b.n	d372 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
    d372:	f24b 0070 	movw	r0, #45168	; 0xb070
    d376:	f2c0 0001 	movt	r0, #1
    d37a:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
    d37c:	f24d 501d 	movw	r0, #54557	; 0xd51d
    d380:	f2c0 0000 	movt	r0, #0
    d384:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
    d388:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
    d38c:	4668      	mov	r0, sp
    d38e:	f44f 7380 	mov.w	r3, #256	; 0x100
    d392:	6103      	str	r3, [r0, #16]
    d394:	60c3      	str	r3, [r0, #12]
    d396:	f242 23a4 	movw	r3, #8868	; 0x22a4
    d39a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    d39e:	6083      	str	r3, [r0, #8]
    d3a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d3a4:	6043      	str	r3, [r0, #4]
    d3a6:	230a      	movs	r3, #10
    d3a8:	6003      	str	r3, [r0, #0]
    d3aa:	f242 2054 	movw	r0, #8788	; 0x2254
    d3ae:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d3b2:	2300      	movs	r3, #0
    d3b4:	f7fb fb7b 	bl	8aae <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    d3b8:	9011      	str	r0, [sp, #68]	; 0x44
    d3ba:	e088      	b.n	d4ce <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
    d3bc:	f64a 7028 	movw	r0, #44840	; 0xaf28
    d3c0:	f2c0 0001 	movt	r0, #1
    d3c4:	6801      	ldr	r1, [r0, #0]
    d3c6:	9813      	ldr	r0, [sp, #76]	; 0x4c
    d3c8:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
    d3cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
    d3ce:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
    d3d2:	f24b 0340 	movw	r3, #45120	; 0xb040
    d3d6:	f2c0 0301 	movt	r3, #1
    d3da:	681b      	ldr	r3, [r3, #0]
    d3dc:	f64a 7c48 	movw	ip, #44872	; 0xaf48
    d3e0:	f2c0 0c01 	movt	ip, #1
    d3e4:	f8dc c000 	ldr.w	ip, [ip]
    d3e8:	46ee      	mov	lr, sp
    d3ea:	2400      	movs	r4, #0
    d3ec:	f8ce 4000 	str.w	r4, [lr]
    d3f0:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
    d3f4:	2201      	movs	r2, #1
    d3f6:	9110      	str	r1, [sp, #64]	; 0x40
    d3f8:	4619      	mov	r1, r3
    d3fa:	4663      	mov	r3, ip
    d3fc:	f7fb facc 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    d400:	e7ff      	b.n	d402 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
    d402:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
    d406:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    d40a:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d40e:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
    d412:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
    d416:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
    d41a:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
    d41e:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
    d422:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
    d426:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
    d42a:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    d42e:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
    d432:	f648 73d5 	movw	r3, #36821	; 0x8fd5
    d436:	f2c0 0300 	movt	r3, #0
    d43a:	910f      	str	r1, [sp, #60]	; 0x3c
    d43c:	4619      	mov	r1, r3
    d43e:	920e      	str	r2, [sp, #56]	; 0x38
    d440:	f7fb fe00 	bl	9044 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
    d444:	900d      	str	r0, [sp, #52]	; 0x34
    d446:	910c      	str	r1, [sp, #48]	; 0x30
    d448:	e7ff      	b.n	d44a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
    d44a:	f648 71d5 	movw	r1, #36821	; 0x8fd5
    d44e:	f2c0 0100 	movt	r1, #0
    d452:	980f      	ldr	r0, [sp, #60]	; 0x3c
    d454:	f7fb fdf6 	bl	9044 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
    d458:	900b      	str	r0, [sp, #44]	; 0x2c
    d45a:	910a      	str	r1, [sp, #40]	; 0x28
    d45c:	e7ff      	b.n	d45e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
    d45e:	f244 21ef 	movw	r1, #17135	; 0x42ef
    d462:	f2c0 0101 	movt	r1, #1
    d466:	980e      	ldr	r0, [sp, #56]	; 0x38
    d468:	f7fb fe01 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    d46c:	9009      	str	r0, [sp, #36]	; 0x24
    d46e:	9108      	str	r1, [sp, #32]
    d470:	e7ff      	b.n	d472 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
    d472:	980d      	ldr	r0, [sp, #52]	; 0x34
    d474:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
    d478:	990c      	ldr	r1, [sp, #48]	; 0x30
    d47a:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
    d47e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d480:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
    d484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d486:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
    d48a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    d48e:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
    d492:	f8dd e020 	ldr.w	lr, [sp, #32]
    d496:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
    d49a:	466c      	mov	r4, sp
    d49c:	2503      	movs	r5, #3
    d49e:	6025      	str	r5, [r4, #0]
    d4a0:	f20d 4094 	addw	r0, sp, #1172	; 0x494
    d4a4:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
    d4a8:	9910      	ldr	r1, [sp, #64]	; 0x40
    d4aa:	462a      	mov	r2, r5
    d4ac:	f7fb fa74 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    d4b0:	e7ff      	b.n	d4b2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
    d4b2:	f24b 0054 	movw	r0, #45140	; 0xb054
    d4b6:	f2c0 0001 	movt	r0, #1
    d4ba:	f006 fc2a 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    d4be:	9007      	str	r0, [sp, #28]
    d4c0:	e7ff      	b.n	d4c2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
    d4c2:	f20d 4094 	addw	r0, sp, #1172	; 0x494
    d4c6:	9907      	ldr	r1, [sp, #28]
    d4c8:	f006 fc60 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    d4cc:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
    d4ce:	9811      	ldr	r0, [sp, #68]	; 0x44
    d4d0:	f7fb fad0 	bl	8a74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    d4d4:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
    d4d8:	e7ff      	b.n	d4da <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
    d4da:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
    d4de:	1e41      	subs	r1, r0, #1
    d4e0:	bf18      	it	ne
    d4e2:	2101      	movne	r1, #1
    d4e4:	2801      	cmp	r0, #1
    d4e6:	d001      	beq.n	d4ec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
    d4e8:	e7ff      	b.n	d4ea <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
    d4ea:	e005      	b.n	d4f8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
    d4ec:	2000      	movs	r0, #0
    Ok(())
    d4ee:	9069      	str	r0, [sp, #420]	; 0x1a4
    d4f0:	2001      	movs	r0, #1
    d4f2:	9069      	str	r0, [sp, #420]	; 0x1a4
}
    d4f4:	e008      	b.n	d508 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
    d4f6:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
    d4f8:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
    d4fc:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
    d500:	f7ff fa17 	bl	c932 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    d504:	9006      	str	r0, [sp, #24]
    d506:	e003      	b.n	d510 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
    d508:	9869      	ldr	r0, [sp, #420]	; 0x1a4
    d50a:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
    d50e:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
    d510:	9806      	ldr	r0, [sp, #24]
    d512:	f7fb faa3 	bl	8a5c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    d516:	9069      	str	r0, [sp, #420]	; 0x1a4
    d518:	e7ff      	b.n	d51a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
    d51a:	e7f5      	b.n	d508 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

0000d51c <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
    d51c:	b580      	push	{r7, lr}
    d51e:	b082      	sub	sp, #8
    d520:	9001      	str	r0, [sp, #4]
    loop {
    d522:	e7ff      	b.n	d524 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
    d524:	f242 2044 	movw	r0, #8772	; 0x2244
    d528:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d52c:	f7fb faa6 	bl	8a7c <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    d530:	9000      	str	r0, [sp, #0]
    d532:	e7ff      	b.n	d534 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
    d534:	f24b 0174 	movw	r1, #45172	; 0xb074
    d538:	f2c0 0101 	movt	r1, #1
    d53c:	f24b 0380 	movw	r3, #45184	; 0xb080
    d540:	f2c0 0301 	movt	r3, #1
    d544:	220b      	movs	r2, #11
    d546:	9800      	ldr	r0, [sp, #0]
    d548:	f7fb fa55 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    d54c:	e7ff      	b.n	d54e <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
    d54e:	f009 fb25 	bl	16b9c <hal_watchdog_tickle>
    d552:	e7ff      	b.n	d554 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
    d554:	e7e6      	b.n	d524 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

0000d556 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
    d556:	b580      	push	{r7, lr}
    d558:	b08c      	sub	sp, #48	; 0x30
    d55a:	4601      	mov	r1, r0
    d55c:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
    d560:	9104      	str	r1, [sp, #16]
    d562:	f000 f8d4 	bl	d70e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    d566:	9003      	str	r0, [sp, #12]
    d568:	e7ff      	b.n	d56a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
    d56a:	9803      	ldr	r0, [sp, #12]
    d56c:	f7fb fa82 	bl	8a74 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    d570:	9006      	str	r0, [sp, #24]
    d572:	e7ff      	b.n	d574 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
    d574:	9806      	ldr	r0, [sp, #24]
    d576:	1e41      	subs	r1, r0, #1
    d578:	bf18      	it	ne
    d57a:	2101      	movne	r1, #1
    d57c:	2801      	cmp	r0, #1
    d57e:	d001      	beq.n	d584 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
    d580:	e7ff      	b.n	d582 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
    d582:	e00c      	b.n	d59e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
    d584:	f240 2010 	movw	r0, #528	; 0x210
    d588:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d58c:	9904      	ldr	r1, [sp, #16]
    d58e:	f7ff f9a4 	bl	c8da <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
    d592:	f88d 101d 	strb.w	r1, [sp, #29]
    d596:	f88d 001c 	strb.w	r0, [sp, #28]
    d59a:	e00f      	b.n	d5bc <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
    d59c:	defe      	udf	#254	; 0xfe
    d59e:	9806      	ldr	r0, [sp, #24]
    d5a0:	900b      	str	r0, [sp, #44]	; 0x2c
    d5a2:	f7ff f9c6 	bl	c932 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    d5a6:	9002      	str	r0, [sp, #8]
    d5a8:	e002      	b.n	d5b0 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
    d5aa:	9805      	ldr	r0, [sp, #20]
    d5ac:	b00c      	add	sp, #48	; 0x30
    d5ae:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
    d5b0:	9802      	ldr	r0, [sp, #8]
    d5b2:	f7fb fa53 	bl	8a5c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    d5b6:	9005      	str	r0, [sp, #20]
    d5b8:	e7ff      	b.n	d5ba <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
    d5ba:	e7f6      	b.n	d5aa <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
    d5bc:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
    d5be:	f7fb fa41 	bl	8a44 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
    d5c2:	9001      	str	r0, [sp, #4]
    d5c4:	e7ff      	b.n	d5c6 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
    d5c6:	9801      	ldr	r0, [sp, #4]
    d5c8:	07c1      	lsls	r1, r0, #31
    d5ca:	2900      	cmp	r1, #0
    d5cc:	d105      	bne.n	d5da <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
    d5ce:	e7ff      	b.n	d5d0 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
    d5d0:	2000      	movs	r0, #0
    Ok(())
    d5d2:	9005      	str	r0, [sp, #20]
    d5d4:	2001      	movs	r0, #1
    d5d6:	9005      	str	r0, [sp, #20]
}
    d5d8:	e7e7      	b.n	d5aa <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
    d5da:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
    d5de:	9008      	str	r0, [sp, #32]
    d5e0:	9808      	ldr	r0, [sp, #32]
    d5e2:	9005      	str	r0, [sp, #20]
    d5e4:	e7e1      	b.n	d5aa <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

0000d5e6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
    d5e6:	b580      	push	{r7, lr}
    d5e8:	b094      	sub	sp, #80	; 0x50
    d5ea:	9010      	str	r0, [sp, #64]	; 0x40
    d5ec:	9111      	str	r1, [sp, #68]	; 0x44
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
    d5ee:	f240 2210 	movw	r2, #528	; 0x210
    d5f2:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d5f6:	900d      	str	r0, [sp, #52]	; 0x34
    d5f8:	4610      	mov	r0, r2
    d5fa:	910c      	str	r1, [sp, #48]	; 0x30
    d5fc:	f7ff f953 	bl	c8a6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
    d600:	900b      	str	r0, [sp, #44]	; 0x2c
    d602:	910a      	str	r1, [sp, #40]	; 0x28
    d604:	e7ff      	b.n	d606 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
    d606:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d608:	990a      	ldr	r1, [sp, #40]	; 0x28
    d60a:	f7ff f88b 	bl	c724 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    d60e:	9009      	str	r0, [sp, #36]	; 0x24
    d610:	e7ff      	b.n	d612 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
    d612:	9809      	ldr	r0, [sp, #36]	; 0x24
    d614:	2800      	cmp	r0, #0
    d616:	d009      	beq.n	d62c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x46>
    d618:	e7ff      	b.n	d61a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  if unsafe { PENDING_DATA.len() + data.len() > PENDING_DATA.capacity() } { cortex_m::asm::bkpt(); } ////
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
    d61a:	f240 2018 	movw	r0, #536	; 0x218
    d61e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d622:	f7ff f934 	bl	c88e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
    d626:	9008      	str	r0, [sp, #32]
    d628:	9107      	str	r1, [sp, #28]
    d62a:	e00b      	b.n	d644 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x5e>
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
    d62c:	f24b 0090 	movw	r0, #45200	; 0xb090
    d630:	f2c0 0001 	movt	r0, #1
    d634:	f24b 029c 	movw	r2, #45212	; 0xb09c
    d638:	f2c0 0201 	movt	r2, #1
    d63c:	210b      	movs	r1, #11
    d63e:	f006 fb6f 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d642:	defe      	udf	#254	; 0xfe
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
    d644:	9808      	ldr	r0, [sp, #32]
    d646:	9907      	ldr	r1, [sp, #28]
    d648:	f7ff f86c 	bl	c724 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    d64c:	9006      	str	r0, [sp, #24]
    d64e:	e7ff      	b.n	d650 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x6a>
    d650:	980d      	ldr	r0, [sp, #52]	; 0x34
    d652:	990c      	ldr	r1, [sp, #48]	; 0x30
    d654:	f7ff f866 	bl	c724 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    d658:	9005      	str	r0, [sp, #20]
    d65a:	e7ff      	b.n	d65c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x76>
    d65c:	9806      	ldr	r0, [sp, #24]
    d65e:	9905      	ldr	r1, [sp, #20]
    d660:	1842      	adds	r2, r0, r1
    d662:	4613      	mov	r3, r2
    d664:	4282      	cmp	r2, r0
    d666:	9304      	str	r3, [sp, #16]
    d668:	d345      	bcc.n	d6f6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x110>
    d66a:	e7ff      	b.n	d66c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x86>
    d66c:	f240 2018 	movw	r0, #536	; 0x218
    d670:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d674:	f7ff f953 	bl	c91e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17hcfab6be516b58423E>
    d678:	9003      	str	r0, [sp, #12]
    d67a:	e7ff      	b.n	d67c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x96>
    d67c:	9804      	ldr	r0, [sp, #16]
    d67e:	9903      	ldr	r1, [sp, #12]
    d680:	4288      	cmp	r0, r1
    d682:	d80a      	bhi.n	d69a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xb4>
    d684:	e7ff      	b.n	d686 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa0>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
    d686:	f240 2018 	movw	r0, #536	; 0x218
    d68a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d68e:	990d      	ldr	r1, [sp, #52]	; 0x34
    d690:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d692:	f7ff f914 	bl	c8be <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h478d8d689c9896e5E>
    d696:	9002      	str	r0, [sp, #8]
    d698:	e00b      	b.n	d6b2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xcc>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
    d69a:	f24b 00dc 	movw	r0, #45276	; 0xb0dc
    d69e:	f2c0 0001 	movt	r0, #1
    d6a2:	f24b 02e8 	movw	r2, #45288	; 0xb0e8
    d6a6:	f2c0 0201 	movt	r2, #1
    d6aa:	210c      	movs	r1, #12
    d6ac:	f006 fb38 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d6b0:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
    d6b2:	9802      	ldr	r0, [sp, #8]
    d6b4:	f000 0001 	and.w	r0, r0, #1
    d6b8:	f7fb f9d6 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    d6bc:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    d6c0:	e7ff      	b.n	d6c2 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xdc>
    d6c2:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
    d6c6:	07c1      	lsls	r1, r0, #31
    d6c8:	2900      	cmp	r1, #0
    d6ca:	d001      	beq.n	d6d0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xea>
    d6cc:	e7ff      	b.n	d6ce <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xe8>
    d6ce:	e005      	b.n	d6dc <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xf6>
    d6d0:	2000      	movs	r0, #0
    Ok(())
    d6d2:	900e      	str	r0, [sp, #56]	; 0x38
    d6d4:	2001      	movs	r0, #1
    d6d6:	900e      	str	r0, [sp, #56]	; 0x38
}
    d6d8:	e004      	b.n	d6e4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
    d6da:	defe      	udf	#254	; 0xfe
    d6dc:	f7ff f8c1 	bl	c862 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    d6e0:	9001      	str	r0, [sp, #4]
    d6e2:	e002      	b.n	d6ea <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x104>
}
    d6e4:	980e      	ldr	r0, [sp, #56]	; 0x38
    d6e6:	b014      	add	sp, #80	; 0x50
    d6e8:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
    d6ea:	9801      	ldr	r0, [sp, #4]
    d6ec:	f7fb f9b6 	bl	8a5c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    d6f0:	900e      	str	r0, [sp, #56]	; 0x38
    d6f2:	e7ff      	b.n	d6f4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x10e>
    d6f4:	e7f6      	b.n	d6e4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfe>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
    d6f6:	f24b 00c0 	movw	r0, #45248	; 0xb0c0
    d6fa:	f2c0 0001 	movt	r0, #1
    d6fe:	f24b 02ac 	movw	r2, #45228	; 0xb0ac
    d702:	f2c0 0201 	movt	r2, #1
    d706:	211c      	movs	r1, #28
    d708:	f006 fb0a 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d70c:	defe      	udf	#254	; 0xfe

0000d70e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
    d70e:	b580      	push	{r7, lr}
    d710:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
    d712:	f240 2010 	movw	r0, #528	; 0x210
    d716:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d71a:	f7ff f8c4 	bl	c8a6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
    d71e:	900b      	str	r0, [sp, #44]	; 0x2c
    d720:	910a      	str	r1, [sp, #40]	; 0x28
    d722:	e016      	b.n	d752 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
    d724:	2001      	movs	r0, #1
    d726:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    d72a:	e00c      	b.n	d746 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
    d72c:	2000      	movs	r0, #0
    d72e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    d732:	e008      	b.n	d746 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
    d734:	f240 2018 	movw	r0, #536	; 0x218
    d738:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d73c:	f7ff f8a7 	bl	c88e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
    d740:	9009      	str	r0, [sp, #36]	; 0x24
    d742:	9108      	str	r1, [sp, #32]
    d744:	e00f      	b.n	d766 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
    d746:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    d74a:	07c0      	lsls	r0, r0, #31
    d74c:	2800      	cmp	r0, #0
    d74e:	d11d      	bne.n	d78c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
    d750:	e013      	b.n	d77a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
    d752:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d754:	990a      	ldr	r1, [sp, #40]	; 0x28
    d756:	f7fe ffe5 	bl	c724 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    d75a:	9007      	str	r0, [sp, #28]
    d75c:	e7ff      	b.n	d75e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
    d75e:	9807      	ldr	r0, [sp, #28]
    d760:	2800      	cmp	r0, #0
    d762:	d0e7      	beq.n	d734 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
    d764:	e7e2      	b.n	d72c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
    d766:	9809      	ldr	r0, [sp, #36]	; 0x24
    d768:	9908      	ldr	r1, [sp, #32]
    d76a:	f7fe ffdb 	bl	c724 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    d76e:	9006      	str	r0, [sp, #24]
    d770:	e7ff      	b.n	d772 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
    d772:	9806      	ldr	r0, [sp, #24]
    d774:	2800      	cmp	r0, #0
    d776:	d0d5      	beq.n	d724 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
    d778:	e7d8      	b.n	d72c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
    d77a:	f240 2010 	movw	r0, #528	; 0x210
    d77e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d782:	f7ff f890 	bl	c8a6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
    d786:	9005      	str	r0, [sp, #20]
    d788:	9104      	str	r1, [sp, #16]
    d78a:	e007      	b.n	d79c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
    d78c:	2000      	movs	r0, #0
        return Ok(());
    d78e:	900c      	str	r0, [sp, #48]	; 0x30
    d790:	2001      	movs	r0, #1
    d792:	900c      	str	r0, [sp, #48]	; 0x30
    d794:	e7ff      	b.n	d796 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
    d796:	980c      	ldr	r0, [sp, #48]	; 0x30
    d798:	b010      	add	sp, #64	; 0x40
    d79a:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
    d79c:	9804      	ldr	r0, [sp, #16]
    d79e:	2800      	cmp	r0, #0
    d7a0:	d03f      	beq.n	d822 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
    d7a2:	e7ff      	b.n	d7a4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
    d7a4:	9805      	ldr	r0, [sp, #20]
    d7a6:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
    d7a8:	f240 2018 	movw	r0, #536	; 0x218
    d7ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d7b0:	9103      	str	r1, [sp, #12]
    d7b2:	f7ff f86c 	bl	c88e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h58f9caf1418fbe63E>
    d7b6:	9002      	str	r0, [sp, #8]
    d7b8:	9101      	str	r1, [sp, #4]
    d7ba:	e7ff      	b.n	d7bc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
    d7bc:	9803      	ldr	r0, [sp, #12]
    d7be:	9902      	ldr	r1, [sp, #8]
    d7c0:	9a01      	ldr	r2, [sp, #4]
    d7c2:	f000 f837 	bl	d834 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
    d7c6:	900e      	str	r0, [sp, #56]	; 0x38
    d7c8:	e7ff      	b.n	d7ca <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
    d7ca:	980e      	ldr	r0, [sp, #56]	; 0x38
    d7cc:	2801      	cmp	r0, #1
    d7ce:	d107      	bne.n	d7e0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
    d7d0:	e7ff      	b.n	d7d2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
    d7d2:	f240 2010 	movw	r0, #528	; 0x210
    d7d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d7da:	f7ff f890 	bl	c8fe <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
    d7de:	e014      	b.n	d80a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
    d7e0:	980e      	ldr	r0, [sp, #56]	; 0x38
    d7e2:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
    d7e4:	f240 2110 	movw	r1, #528	; 0x210
    d7e8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    d7ec:	9000      	str	r0, [sp, #0]
    d7ee:	4608      	mov	r0, r1
    d7f0:	f7ff f885 	bl	c8fe <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
    d7f4:	e7ff      	b.n	d7f6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
    d7f6:	f240 2018 	movw	r0, #536	; 0x218
    d7fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d7fe:	f7ff f886 	bl	c90e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
    d802:	e7ff      	b.n	d804 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
    d804:	9800      	ldr	r0, [sp, #0]
    d806:	900c      	str	r0, [sp, #48]	; 0x30
    d808:	e7c5      	b.n	d796 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
    d80a:	f240 2018 	movw	r0, #536	; 0x218
    d80e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d812:	f7ff f87c 	bl	c90e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd6e6c828be377508E>
    d816:	e7ff      	b.n	d818 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
    d818:	2000      	movs	r0, #0
    Ok(())
    d81a:	900c      	str	r0, [sp, #48]	; 0x30
    d81c:	2001      	movs	r0, #1
    d81e:	900c      	str	r0, [sp, #48]	; 0x30
}
    d820:	e7b9      	b.n	d796 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
    d822:	f24b 00f8 	movw	r0, #45304	; 0xb0f8
    d826:	f2c0 0001 	movt	r0, #1
    d82a:	2100      	movs	r1, #0
    d82c:	9a04      	ldr	r2, [sp, #16]
    d82e:	f006 fa8d 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d832:	defe      	udf	#254	; 0xfe

0000d834 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
    d834:	b580      	push	{r7, lr}
    d836:	b0a0      	sub	sp, #128	; 0x80
    d838:	4603      	mov	r3, r0
    d83a:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
    d83e:	9116      	str	r1, [sp, #88]	; 0x58
    d840:	9217      	str	r2, [sp, #92]	; 0x5c
    d842:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
    d846:	9018      	str	r0, [sp, #96]	; 0x60
    d848:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
    d84c:	fba0 0c0c 	umull	r0, ip, r0, ip
    d850:	f1bc 0f00 	cmp.w	ip, #0
    d854:	920f      	str	r2, [sp, #60]	; 0x3c
    d856:	910e      	str	r1, [sp, #56]	; 0x38
    d858:	900d      	str	r0, [sp, #52]	; 0x34
    d85a:	f040 80c8 	bne.w	d9ee <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
    d85e:	e7ff      	b.n	d860 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
    d860:	f644 50d3 	movw	r0, #19923	; 0x4dd3
    d864:	f2c1 0062 	movt	r0, #4194	; 0x1062
    d868:	990d      	ldr	r1, [sp, #52]	; 0x34
    d86a:	fba1 0200 	umull	r0, r2, r1, r0
    d86e:	0991      	lsrs	r1, r2, #6
    d870:	f242 2224 	movw	r2, #8740	; 0x2224
    d874:	f2c2 0200 	movt	r2, #8192	; 0x2000
    d878:	900c      	str	r0, [sp, #48]	; 0x30
    d87a:	4610      	mov	r0, r2
    d87c:	f00a fa8e 	bl	17d9c <os_sem_pend>
    d880:	e7ff      	b.n	d882 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
    d882:	980e      	ldr	r0, [sp, #56]	; 0x38
    d884:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d886:	f7fe ff4d 	bl	c724 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    d88a:	900b      	str	r0, [sp, #44]	; 0x2c
    d88c:	e7ff      	b.n	d88e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
    d88e:	2001      	movs	r0, #1
    d890:	990b      	ldr	r1, [sp, #44]	; 0x2c
    d892:	fa10 f081 	uxtah	r0, r0, r1
    d896:	b282      	uxth	r2, r0
    d898:	4603      	mov	r3, r0
    d89a:	4282      	cmp	r2, r0
    d89c:	930a      	str	r3, [sp, #40]	; 0x28
    d89e:	f040 80b2 	bne.w	da06 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
    d8a2:	e7ff      	b.n	d8a4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
    d8a4:	980a      	ldr	r0, [sp, #40]	; 0x28
    d8a6:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
    d8aa:	b280      	uxth	r0, r0
    d8ac:	2100      	movs	r1, #0
    d8ae:	f009 ff83 	bl	177b8 <os_msys_get_pkthdr>
    d8b2:	4601      	mov	r1, r0
    d8b4:	901a      	str	r0, [sp, #104]	; 0x68
    d8b6:	9109      	str	r1, [sp, #36]	; 0x24
    d8b8:	e7ff      	b.n	d8ba <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
    d8ba:	9809      	ldr	r0, [sp, #36]	; 0x24
    d8bc:	f000 ff17 	bl	e6ee <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
    d8c0:	9008      	str	r0, [sp, #32]
    d8c2:	e7ff      	b.n	d8c4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
    d8c4:	9808      	ldr	r0, [sp, #32]
    d8c6:	07c1      	lsls	r1, r0, #31
    d8c8:	2900      	cmp	r1, #0
    d8ca:	d106      	bne.n	d8da <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
    d8cc:	e7ff      	b.n	d8ce <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
    d8ce:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
    d8d2:	901b      	str	r0, [sp, #108]	; 0x6c
    d8d4:	991b      	ldr	r1, [sp, #108]	; 0x6c
    d8d6:	9107      	str	r1, [sp, #28]
    d8d8:	e010      	b.n	d8fc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
    d8da:	f242 2024 	movw	r0, #8740	; 0x2224
    d8de:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d8e2:	f00a fa29 	bl	17d38 <os_sem_release>
    d8e6:	e7ff      	b.n	d8e8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
    d8e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
    d8ec:	9012      	str	r0, [sp, #72]	; 0x48
    d8ee:	9812      	ldr	r0, [sp, #72]	; 0x48
    d8f0:	9011      	str	r0, [sp, #68]	; 0x44
    d8f2:	e002      	b.n	d8fa <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
    d8f4:	9811      	ldr	r0, [sp, #68]	; 0x44
    d8f6:	b020      	add	sp, #128	; 0x80
    d8f8:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
    d8fa:	e7fb      	b.n	d8f4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
    d8fc:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
    d8fe:	9809      	ldr	r0, [sp, #36]	; 0x24
    d900:	9907      	ldr	r1, [sp, #28]
    d902:	f009 fdb1 	bl	17468 <os_mbuf_append>
    d906:	4601      	mov	r1, r0
    d908:	901c      	str	r0, [sp, #112]	; 0x70
    d90a:	9106      	str	r1, [sp, #24]
    d90c:	e7ff      	b.n	d90e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
    d90e:	9806      	ldr	r0, [sp, #24]
    d910:	2800      	cmp	r0, #0
    d912:	d106      	bne.n	d922 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
    d914:	e7ff      	b.n	d916 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
    d916:	980e      	ldr	r0, [sp, #56]	; 0x38
    d918:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d91a:	f7fe ff0b 	bl	c734 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    d91e:	9005      	str	r0, [sp, #20]
    d920:	e011      	b.n	d946 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
    d922:	9809      	ldr	r0, [sp, #36]	; 0x24
    d924:	f009 fd84 	bl	17430 <os_mbuf_free_chain>
    d928:	e7ff      	b.n	d92a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
    d92a:	f242 2024 	movw	r0, #8740	; 0x2224
    d92e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d932:	f00a fa01 	bl	17d38 <os_sem_release>
    d936:	e7ff      	b.n	d938 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
    d938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
    d93c:	9013      	str	r0, [sp, #76]	; 0x4c
    d93e:	9813      	ldr	r0, [sp, #76]	; 0x4c
    d940:	9011      	str	r0, [sp, #68]	; 0x44
    d942:	e7ff      	b.n	d944 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    d944:	e7d9      	b.n	d8fa <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
    d946:	9805      	ldr	r0, [sp, #20]
    d948:	901d      	str	r0, [sp, #116]	; 0x74
    d94a:	991d      	ldr	r1, [sp, #116]	; 0x74
    d94c:	9104      	str	r1, [sp, #16]
    d94e:	e7ff      	b.n	d950 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
    d950:	980e      	ldr	r0, [sp, #56]	; 0x38
    d952:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d954:	f7fe fee6 	bl	c724 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    d958:	9003      	str	r0, [sp, #12]
    d95a:	e7ff      	b.n	d95c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
    d95c:	9803      	ldr	r0, [sp, #12]
    d95e:	b282      	uxth	r2, r0
    d960:	9809      	ldr	r0, [sp, #36]	; 0x24
    d962:	9904      	ldr	r1, [sp, #16]
    d964:	f009 fd80 	bl	17468 <os_mbuf_append>
    d968:	4601      	mov	r1, r0
    d96a:	901e      	str	r0, [sp, #120]	; 0x78
    d96c:	9102      	str	r1, [sp, #8]
    d96e:	e7ff      	b.n	d970 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
    d970:	9802      	ldr	r0, [sp, #8]
    d972:	2800      	cmp	r0, #0
    d974:	d10f      	bne.n	d996 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
    d976:	e7ff      	b.n	d978 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
    d978:	f242 202c 	movw	r0, #8748	; 0x222c
    d97c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d980:	f242 2144 	movw	r1, #8772	; 0x2244
    d984:	f2c2 0100 	movt	r1, #8192	; 0x2000
    d988:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d98a:	f009 fcef 	bl	1736c <os_mqueue_put>
    d98e:	4601      	mov	r1, r0
    d990:	901f      	str	r0, [sp, #124]	; 0x7c
    d992:	9101      	str	r1, [sp, #4]
    d994:	e011      	b.n	d9ba <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
    d996:	9809      	ldr	r0, [sp, #36]	; 0x24
    d998:	f009 fd4a 	bl	17430 <os_mbuf_free_chain>
    d99c:	e7ff      	b.n	d99e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
    d99e:	f242 2024 	movw	r0, #8740	; 0x2224
    d9a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d9a6:	f00a f9c7 	bl	17d38 <os_sem_release>
    d9aa:	e7ff      	b.n	d9ac <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
    d9ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
    d9b0:	9014      	str	r0, [sp, #80]	; 0x50
    d9b2:	9814      	ldr	r0, [sp, #80]	; 0x50
    d9b4:	9011      	str	r0, [sp, #68]	; 0x44
    d9b6:	e7ff      	b.n	d9b8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    d9b8:	e7c4      	b.n	d944 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
    d9ba:	9801      	ldr	r0, [sp, #4]
    d9bc:	2800      	cmp	r0, #0
    d9be:	d105      	bne.n	d9cc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
    d9c0:	e7ff      	b.n	d9c2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
    d9c2:	2000      	movs	r0, #0
    Ok(())
    d9c4:	9011      	str	r0, [sp, #68]	; 0x44
    d9c6:	2001      	movs	r0, #1
    d9c8:	9011      	str	r0, [sp, #68]	; 0x44
}
    d9ca:	e793      	b.n	d8f4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
    d9cc:	9809      	ldr	r0, [sp, #36]	; 0x24
    d9ce:	f009 fd2f 	bl	17430 <os_mbuf_free_chain>
    d9d2:	e7ff      	b.n	d9d4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
    d9d4:	f242 2024 	movw	r0, #8740	; 0x2224
    d9d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d9dc:	f00a f9ac 	bl	17d38 <os_sem_release>
    d9e0:	e7ff      	b.n	d9e2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
    d9e2:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
    d9e6:	9015      	str	r0, [sp, #84]	; 0x54
    d9e8:	9815      	ldr	r0, [sp, #84]	; 0x54
    d9ea:	9011      	str	r0, [sp, #68]	; 0x44
    d9ec:	e7e4      	b.n	d9b8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
    d9ee:	f24b 1020 	movw	r0, #45344	; 0xb120
    d9f2:	f2c0 0001 	movt	r0, #1
    d9f6:	f24b 1208 	movw	r2, #45320	; 0xb108
    d9fa:	f2c0 0201 	movt	r2, #1
    d9fe:	2121      	movs	r1, #33	; 0x21
    da00:	f006 f98e 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    da04:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
    da06:	f24b 00c0 	movw	r0, #45248	; 0xb0c0
    da0a:	f2c0 0001 	movt	r0, #1
    da0e:	f24b 1244 	movw	r2, #45380	; 0xb144
    da12:	f2c0 0201 	movt	r2, #1
    da16:	211c      	movs	r1, #28
    da18:	f006 f982 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    da1c:	defe      	udf	#254	; 0xfe

0000da1e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
    da1e:	b5b0      	push	{r4, r5, r7, lr}
    da20:	b0c4      	sub	sp, #272	; 0x110
    da22:	9038      	str	r0, [sp, #224]	; 0xe0
    da24:	e7ff      	b.n	da26 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
    da26:	f242 202c 	movw	r0, #8748	; 0x222c
    da2a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    da2e:	f009 fc8a 	bl	17346 <os_mqueue_get>
    da32:	4601      	mov	r1, r0
    da34:	9039      	str	r0, [sp, #228]	; 0xe4
    da36:	911b      	str	r1, [sp, #108]	; 0x6c
    da38:	e7ff      	b.n	da3a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
    da3a:	981b      	ldr	r0, [sp, #108]	; 0x6c
    da3c:	f000 fe57 	bl	e6ee <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
    da40:	901a      	str	r0, [sp, #104]	; 0x68
    da42:	e7ff      	b.n	da44 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
    da44:	981a      	ldr	r0, [sp, #104]	; 0x68
    da46:	07c1      	lsls	r1, r0, #31
    da48:	2900      	cmp	r1, #0
    da4a:	d106      	bne.n	da5a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
    da4c:	e7ff      	b.n	da4e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
    da4e:	981b      	ldr	r0, [sp, #108]	; 0x6c
    da50:	901c      	str	r0, [sp, #112]	; 0x70
    da52:	2101      	movs	r1, #1
        let mut first_byte = true;
    da54:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
    da58:	e001      	b.n	da5e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
    da5a:	b044      	add	sp, #272	; 0x110
    da5c:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
    da5e:	981c      	ldr	r0, [sp, #112]	; 0x70
    da60:	f000 fe45 	bl	e6ee <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
    da64:	9019      	str	r0, [sp, #100]	; 0x64
    da66:	e7ff      	b.n	da68 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
    da68:	9819      	ldr	r0, [sp, #100]	; 0x64
    da6a:	07c1      	lsls	r1, r0, #31
    da6c:	2900      	cmp	r1, #0
    da6e:	d004      	beq.n	da7a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
    da70:	e7ff      	b.n	da72 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
    da72:	981b      	ldr	r0, [sp, #108]	; 0x6c
    da74:	f009 fcdc 	bl	17430 <os_mbuf_free_chain>
    da78:	e0aa      	b.n	dbd0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
    da7a:	981c      	ldr	r0, [sp, #112]	; 0x70
    da7c:	6800      	ldr	r0, [r0, #0]
    da7e:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
    da80:	991c      	ldr	r1, [sp, #112]	; 0x70
    da82:	88c9      	ldrh	r1, [r1, #6]
    da84:	460a      	mov	r2, r1
    da86:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
    da8a:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
    da8e:	07c9      	lsls	r1, r1, #31
    da90:	2900      	cmp	r1, #0
    da92:	9018      	str	r0, [sp, #96]	; 0x60
    da94:	9217      	str	r2, [sp, #92]	; 0x5c
    da96:	d105      	bne.n	daa4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
    da98:	e7ff      	b.n	da9a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
    da9a:	9818      	ldr	r0, [sp, #96]	; 0x60
    da9c:	903e      	str	r0, [sp, #248]	; 0xf8
    da9e:	983e      	ldr	r0, [sp, #248]	; 0xf8
    daa0:	9016      	str	r0, [sp, #88]	; 0x58
    daa2:	e07b      	b.n	db9c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
    daa4:	2000      	movs	r0, #0
                first_byte = false;
    daa6:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
    daaa:	9818      	ldr	r0, [sp, #96]	; 0x60
    daac:	903c      	str	r0, [sp, #240]	; 0xf0
    daae:	983c      	ldr	r0, [sp, #240]	; 0xf0
    dab0:	9015      	str	r0, [sp, #84]	; 0x54
    dab2:	e7ff      	b.n	dab4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
    dab4:	2001      	movs	r0, #1
                internal_spi_noblock_write(
    dab6:	9915      	ldr	r1, [sp, #84]	; 0x54
    dab8:	9014      	str	r0, [sp, #80]	; 0x50
    daba:	4608      	mov	r0, r1
    dabc:	9914      	ldr	r1, [sp, #80]	; 0x50
    dabe:	9a14      	ldr	r2, [sp, #80]	; 0x50
    dac0:	f000 f921 	bl	dd06 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
    dac4:	9013      	str	r0, [sp, #76]	; 0x4c
    dac6:	e7ff      	b.n	dac8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
    dac8:	f24b 1154 	movw	r1, #45396	; 0xb154
    dacc:	f2c0 0101 	movt	r1, #1
    dad0:	f24b 1360 	movw	r3, #45408	; 0xb160
    dad4:	f2c0 0301 	movt	r3, #1
    dad8:	220c      	movs	r2, #12
    dada:	9813      	ldr	r0, [sp, #76]	; 0x4c
    dadc:	f7fa ff8b 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    dae0:	e7ff      	b.n	dae2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
    dae2:	9818      	ldr	r0, [sp, #96]	; 0x60
    dae4:	7801      	ldrb	r1, [r0, #0]
    dae6:	2901      	cmp	r1, #1
    dae8:	d013      	beq.n	db12 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
    daea:	e01a      	b.n	db22 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
    daec:	2001      	movs	r0, #1
    daee:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
    daf2:	e008      	b.n	db06 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
    daf4:	2000      	movs	r0, #0
    daf6:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
    dafa:	e004      	b.n	db06 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
    dafc:	9818      	ldr	r0, [sp, #96]	; 0x60
    dafe:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
    db00:	2929      	cmp	r1, #41	; 0x29
    db02:	d0f3      	beq.n	daec <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
    db04:	e7f6      	b.n	daf4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
    db06:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
    db0a:	07c0      	lsls	r0, r0, #31
    db0c:	2800      	cmp	r0, #0
    db0e:	d113      	bne.n	db38 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
    db10:	e017      	b.n	db42 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
    db12:	2001      	movs	r0, #1
    db14:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
    db18:	e008      	b.n	db2c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
    db1a:	2000      	movs	r0, #0
    db1c:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
    db20:	e004      	b.n	db2c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
    db22:	9818      	ldr	r0, [sp, #96]	; 0x60
    db24:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
    db26:	2911      	cmp	r1, #17
    db28:	d0f3      	beq.n	db12 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
    db2a:	e7f6      	b.n	db1a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
    db2c:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
    db30:	07c0      	lsls	r0, r0, #31
    db32:	2800      	cmp	r0, #0
    db34:	d1da      	bne.n	daec <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
    db36:	e7e1      	b.n	dafc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
    db38:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
    db3a:	f000 fb13 	bl	e164 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
    db3e:	e7ff      	b.n	db40 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
    db40:	e7ff      	b.n	db42 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
    db42:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
    db44:	9818      	ldr	r0, [sp, #96]	; 0x60
    db46:	f7fe fd5d 	bl	c604 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    db4a:	9012      	str	r0, [sp, #72]	; 0x48
    db4c:	e7ff      	b.n	db4e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
    db4e:	9812      	ldr	r0, [sp, #72]	; 0x48
    db50:	903d      	str	r0, [sp, #244]	; 0xf4
    db52:	983d      	ldr	r0, [sp, #244]	; 0xf4
    db54:	9011      	str	r0, [sp, #68]	; 0x44
    db56:	e7ff      	b.n	db58 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
    db58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
    db5c:	9917      	ldr	r1, [sp, #92]	; 0x5c
    db5e:	fa10 f081 	uxtah	r0, r0, r1
    db62:	b282      	uxth	r2, r0
    db64:	4603      	mov	r3, r0
    db66:	4282      	cmp	r2, r0
    db68:	9310      	str	r3, [sp, #64]	; 0x40
    db6a:	f040 80c0 	bne.w	dcee <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
    db6e:	e7ff      	b.n	db70 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
    db70:	9810      	ldr	r0, [sp, #64]	; 0x40
    db72:	b281      	uxth	r1, r0
    db74:	2200      	movs	r2, #0
                internal_spi_noblock_write(
    db76:	9811      	ldr	r0, [sp, #68]	; 0x44
    db78:	f000 f8c5 	bl	dd06 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
    db7c:	900f      	str	r0, [sp, #60]	; 0x3c
    db7e:	e7ff      	b.n	db80 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
    db80:	f24b 1154 	movw	r1, #45396	; 0xb154
    db84:	f2c0 0101 	movt	r1, #1
    db88:	f24b 13a4 	movw	r3, #45476	; 0xb1a4
    db8c:	f2c0 0301 	movt	r3, #1
    db90:	220c      	movs	r2, #12
    db92:	980f      	ldr	r0, [sp, #60]	; 0x3c
    db94:	f7fa ff2f 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    db98:	e7ff      	b.n	db9a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
    db9a:	e015      	b.n	dbc8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
    db9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    db9e:	b281      	uxth	r1, r0
    dba0:	2200      	movs	r2, #0
                internal_spi_noblock_write(
    dba2:	9816      	ldr	r0, [sp, #88]	; 0x58
    dba4:	f000 f8af 	bl	dd06 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
    dba8:	900e      	str	r0, [sp, #56]	; 0x38
    dbaa:	e7ff      	b.n	dbac <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
    dbac:	f24b 1154 	movw	r1, #45396	; 0xb154
    dbb0:	f2c0 0101 	movt	r1, #1
    dbb4:	f24b 13b4 	movw	r3, #45492	; 0xb1b4
    dbb8:	f2c0 0301 	movt	r3, #1
    dbbc:	220c      	movs	r2, #12
    dbbe:	980e      	ldr	r0, [sp, #56]	; 0x38
    dbc0:	f7fa ff19 	bl	89f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    dbc4:	e7ff      	b.n	dbc6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
    dbc6:	e7ff      	b.n	dbc8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
    dbc8:	981c      	ldr	r0, [sp, #112]	; 0x70
    dbca:	68c0      	ldr	r0, [r0, #12]
    dbcc:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
    dbce:	e746      	b.n	da5e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
    dbd0:	f242 2024 	movw	r0, #8740	; 0x2224
    dbd4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dbd8:	f00a f8ae 	bl	17d38 <os_sem_release>
    dbdc:	901e      	str	r0, [sp, #120]	; 0x78
    dbde:	e7ff      	b.n	dbe0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
    dbe0:	f64a 60d0 	movw	r0, #44752	; 0xaed0
    dbe4:	f2c0 0001 	movt	r0, #1
    dbe8:	6800      	ldr	r0, [r0, #0]
    dbea:	a91e      	add	r1, sp, #120	; 0x78
    dbec:	911f      	str	r1, [sp, #124]	; 0x7c
    dbee:	9020      	str	r0, [sp, #128]	; 0x80
    dbf0:	981f      	ldr	r0, [sp, #124]	; 0x7c
    dbf2:	903f      	str	r0, [sp, #252]	; 0xfc
    dbf4:	9920      	ldr	r1, [sp, #128]	; 0x80
    dbf6:	9140      	str	r1, [sp, #256]	; 0x100
    dbf8:	6802      	ldr	r2, [r0, #0]
    dbfa:	680b      	ldr	r3, [r1, #0]
    dbfc:	429a      	cmp	r2, r3
    dbfe:	900d      	str	r0, [sp, #52]	; 0x34
    dc00:	910c      	str	r1, [sp, #48]	; 0x30
    dc02:	d101      	bne.n	dc08 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
    dc04:	e7ff      	b.n	dc06 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
    dc06:	e70e      	b.n	da26 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
    dc08:	f64a 7028 	movw	r0, #44840	; 0xaf28
    dc0c:	f2c0 0001 	movt	r0, #1
    dc10:	6801      	ldr	r1, [r0, #0]
    dc12:	980d      	ldr	r0, [sp, #52]	; 0x34
    dc14:	9030      	str	r0, [sp, #192]	; 0xc0
    dc16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dc18:	9231      	str	r2, [sp, #196]	; 0xc4
    dc1a:	f24b 0340 	movw	r3, #45120	; 0xb040
    dc1e:	f2c0 0301 	movt	r3, #1
    dc22:	681b      	ldr	r3, [r3, #0]
    dc24:	f64a 7c48 	movw	ip, #44872	; 0xaf48
    dc28:	f2c0 0c01 	movt	ip, #1
    dc2c:	f8dc c000 	ldr.w	ip, [ip]
    dc30:	46ee      	mov	lr, sp
    dc32:	2400      	movs	r4, #0
    dc34:	f8ce 4000 	str.w	r4, [lr]
    dc38:	a832      	add	r0, sp, #200	; 0xc8
    dc3a:	2201      	movs	r2, #1
    dc3c:	910b      	str	r1, [sp, #44]	; 0x2c
    dc3e:	4619      	mov	r1, r3
    dc40:	4663      	mov	r3, ip
    dc42:	f7fa fea9 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    dc46:	e7ff      	b.n	dc48 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
    dc48:	a830      	add	r0, sp, #192	; 0xc0
    dc4a:	902d      	str	r0, [sp, #180]	; 0xb4
    dc4c:	a831      	add	r0, sp, #196	; 0xc4
    dc4e:	902e      	str	r0, [sp, #184]	; 0xb8
    dc50:	a832      	add	r0, sp, #200	; 0xc8
    dc52:	902f      	str	r0, [sp, #188]	; 0xbc
    dc54:	982d      	ldr	r0, [sp, #180]	; 0xb4
    dc56:	9041      	str	r0, [sp, #260]	; 0x104
    dc58:	992e      	ldr	r1, [sp, #184]	; 0xb8
    dc5a:	9142      	str	r1, [sp, #264]	; 0x108
    dc5c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
    dc5e:	9243      	str	r2, [sp, #268]	; 0x10c
    dc60:	f648 73d5 	movw	r3, #36821	; 0x8fd5
    dc64:	f2c0 0300 	movt	r3, #0
    dc68:	910a      	str	r1, [sp, #40]	; 0x28
    dc6a:	4619      	mov	r1, r3
    dc6c:	9209      	str	r2, [sp, #36]	; 0x24
    dc6e:	f7fb f9e9 	bl	9044 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
    dc72:	9008      	str	r0, [sp, #32]
    dc74:	9107      	str	r1, [sp, #28]
    dc76:	e7ff      	b.n	dc78 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
    dc78:	f648 71d5 	movw	r1, #36821	; 0x8fd5
    dc7c:	f2c0 0100 	movt	r1, #0
    dc80:	980a      	ldr	r0, [sp, #40]	; 0x28
    dc82:	f7fb f9df 	bl	9044 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
    dc86:	9006      	str	r0, [sp, #24]
    dc88:	9105      	str	r1, [sp, #20]
    dc8a:	e7ff      	b.n	dc8c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
    dc8c:	f244 21ef 	movw	r1, #17135	; 0x42ef
    dc90:	f2c0 0101 	movt	r1, #1
    dc94:	9809      	ldr	r0, [sp, #36]	; 0x24
    dc96:	f7fb f9ea 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    dc9a:	9004      	str	r0, [sp, #16]
    dc9c:	9103      	str	r1, [sp, #12]
    dc9e:	e7ff      	b.n	dca0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
    dca0:	9808      	ldr	r0, [sp, #32]
    dca2:	9027      	str	r0, [sp, #156]	; 0x9c
    dca4:	9907      	ldr	r1, [sp, #28]
    dca6:	9128      	str	r1, [sp, #160]	; 0xa0
    dca8:	9a06      	ldr	r2, [sp, #24]
    dcaa:	9229      	str	r2, [sp, #164]	; 0xa4
    dcac:	9b05      	ldr	r3, [sp, #20]
    dcae:	932a      	str	r3, [sp, #168]	; 0xa8
    dcb0:	f8dd c010 	ldr.w	ip, [sp, #16]
    dcb4:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
    dcb8:	f8dd e00c 	ldr.w	lr, [sp, #12]
    dcbc:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
    dcc0:	466c      	mov	r4, sp
    dcc2:	2503      	movs	r5, #3
    dcc4:	6025      	str	r5, [r4, #0]
    dcc6:	a821      	add	r0, sp, #132	; 0x84
    dcc8:	ab27      	add	r3, sp, #156	; 0x9c
    dcca:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dccc:	462a      	mov	r2, r5
    dcce:	f7fa fe63 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    dcd2:	e7ff      	b.n	dcd4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
    dcd4:	f24b 10c4 	movw	r0, #45508	; 0xb1c4
    dcd8:	f2c0 0001 	movt	r0, #1
    dcdc:	f006 f819 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    dce0:	9002      	str	r0, [sp, #8]
    dce2:	e7ff      	b.n	dce4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
    dce4:	a821      	add	r0, sp, #132	; 0x84
    dce6:	9902      	ldr	r1, [sp, #8]
    dce8:	f006 f850 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    dcec:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
    dcee:	f24b 1080 	movw	r0, #45440	; 0xb180
    dcf2:	f2c0 0001 	movt	r0, #1
    dcf6:	f24b 1270 	movw	r2, #45424	; 0xb170
    dcfa:	f2c0 0201 	movt	r2, #1
    dcfe:	2121      	movs	r1, #33	; 0x21
    dd00:	f006 f80e 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    dd04:	defe      	udf	#254	; 0xfe

0000dd06 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
    dd06:	b5b0      	push	{r4, r5, r7, lr}
    dd08:	b0e8      	sub	sp, #416	; 0x1a0
    dd0a:	4613      	mov	r3, r2
    dd0c:	9058      	str	r0, [sp, #352]	; 0x160
    dd0e:	9159      	str	r1, [sp, #356]	; 0x164
    dd10:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
    dd14:	2900      	cmp	r1, #0
    dd16:	9121      	str	r1, [sp, #132]	; 0x84
    dd18:	9020      	str	r0, [sp, #128]	; 0x80
    dd1a:	931f      	str	r3, [sp, #124]	; 0x7c
    dd1c:	d004      	beq.n	dd28 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
    dd1e:	e7ff      	b.n	dd20 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
    dd20:	9821      	ldr	r0, [sp, #132]	; 0x84
    dd22:	2801      	cmp	r0, #1
    dd24:	db0d      	blt.n	dd42 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
    dd26:	e007      	b.n	dd38 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
    dd28:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
    dd2a:	9022      	str	r0, [sp, #136]	; 0x88
    dd2c:	2001      	movs	r0, #1
    dd2e:	9022      	str	r0, [sp, #136]	; 0x88
    dd30:	e7ff      	b.n	dd32 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
    dd32:	9822      	ldr	r0, [sp, #136]	; 0x88
    dd34:	b068      	add	sp, #416	; 0x1a0
    dd36:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
    dd38:	981f      	ldr	r0, [sp, #124]	; 0x7c
    dd3a:	07c1      	lsls	r1, r0, #31
    dd3c:	2900      	cmp	r1, #0
    dd3e:	d10f      	bne.n	dd60 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
    dd40:	e00b      	b.n	dd5a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
    dd42:	f24b 10d4 	movw	r0, #45524	; 0xb1d4
    dd46:	f2c0 0001 	movt	r0, #1
    dd4a:	f24b 12e0 	movw	r2, #45536	; 0xb1e0
    dd4e:	f2c0 0201 	movt	r2, #1
    dd52:	210b      	movs	r1, #11
    dd54:	f005 ffe4 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    dd58:	defe      	udf	#254	; 0xfe
    dd5a:	2001      	movs	r0, #1
        else { 1 }
    dd5c:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
    dd5e:	e002      	b.n	dd66 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    dd60:	2000      	movs	r0, #0
    dd62:	9023      	str	r0, [sp, #140]	; 0x8c
    dd64:	e7ff      	b.n	dd66 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
    dd66:	9923      	ldr	r1, [sp, #140]	; 0x8c
    dd68:	2012      	movs	r0, #18
    dd6a:	f008 f947 	bl	15ffc <hal_gpio_write>
    dd6e:	e7ff      	b.n	dd70 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
    dd70:	2019      	movs	r0, #25
    dd72:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
    dd74:	f008 f942 	bl	15ffc <hal_gpio_write>
    dd78:	e7ff      	b.n	dd7a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
    dd7a:	9821      	ldr	r0, [sp, #132]	; 0x84
    dd7c:	2801      	cmp	r0, #1
    dd7e:	d005      	beq.n	dd8c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
    dd80:	e7ff      	b.n	dd82 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
    dd82:	9820      	ldr	r0, [sp, #128]	; 0x80
    dd84:	9061      	str	r0, [sp, #388]	; 0x184
    dd86:	9961      	ldr	r1, [sp, #388]	; 0x184
    dd88:	911e      	str	r1, [sp, #120]	; 0x78
    dd8a:	e094      	b.n	deb6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
    dd8c:	9820      	ldr	r0, [sp, #128]	; 0x80
    dd8e:	905b      	str	r0, [sp, #364]	; 0x16c
    dd90:	995b      	ldr	r1, [sp, #364]	; 0x16c
    dd92:	911d      	str	r1, [sp, #116]	; 0x74
    dd94:	e7ff      	b.n	dd96 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
    dd96:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
    dd98:	901c      	str	r0, [sp, #112]	; 0x70
    dd9a:	991d      	ldr	r1, [sp, #116]	; 0x74
    dd9c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    dd9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    dda0:	f008 fdda 	bl	16958 <hal_spi_txrx>
    dda4:	9024      	str	r0, [sp, #144]	; 0x90
    dda6:	e7ff      	b.n	dda8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
    dda8:	f64a 60d0 	movw	r0, #44752	; 0xaed0
    ddac:	f2c0 0001 	movt	r0, #1
    ddb0:	6800      	ldr	r0, [r0, #0]
    ddb2:	a924      	add	r1, sp, #144	; 0x90
    ddb4:	9125      	str	r1, [sp, #148]	; 0x94
    ddb6:	9026      	str	r0, [sp, #152]	; 0x98
    ddb8:	9825      	ldr	r0, [sp, #148]	; 0x94
    ddba:	905c      	str	r0, [sp, #368]	; 0x170
    ddbc:	9926      	ldr	r1, [sp, #152]	; 0x98
    ddbe:	915d      	str	r1, [sp, #372]	; 0x174
    ddc0:	6802      	ldr	r2, [r0, #0]
    ddc2:	680b      	ldr	r3, [r1, #0]
    ddc4:	429a      	cmp	r2, r3
    ddc6:	901b      	str	r0, [sp, #108]	; 0x6c
    ddc8:	911a      	str	r1, [sp, #104]	; 0x68
    ddca:	d101      	bne.n	ddd0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
    ddcc:	e7ff      	b.n	ddce <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
    ddce:	e11f      	b.n	e010 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
    ddd0:	f64a 7028 	movw	r0, #44840	; 0xaf28
    ddd4:	f2c0 0001 	movt	r0, #1
    ddd8:	6801      	ldr	r1, [r0, #0]
    ddda:	981b      	ldr	r0, [sp, #108]	; 0x6c
    dddc:	9036      	str	r0, [sp, #216]	; 0xd8
    ddde:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    dde0:	9237      	str	r2, [sp, #220]	; 0xdc
    dde2:	f24b 13f8 	movw	r3, #45560	; 0xb1f8
    dde6:	f2c0 0301 	movt	r3, #1
    ddea:	681b      	ldr	r3, [r3, #0]
    ddec:	f64a 7c48 	movw	ip, #44872	; 0xaf48
    ddf0:	f2c0 0c01 	movt	ip, #1
    ddf4:	f8dc c000 	ldr.w	ip, [ip]
    ddf8:	46ee      	mov	lr, sp
    ddfa:	2400      	movs	r4, #0
    ddfc:	f8ce 4000 	str.w	r4, [lr]
    de00:	a838      	add	r0, sp, #224	; 0xe0
    de02:	2201      	movs	r2, #1
    de04:	9119      	str	r1, [sp, #100]	; 0x64
    de06:	4619      	mov	r1, r3
    de08:	4663      	mov	r3, ip
    de0a:	f7fa fdc5 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    de0e:	e7ff      	b.n	de10 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
    de10:	a836      	add	r0, sp, #216	; 0xd8
    de12:	9033      	str	r0, [sp, #204]	; 0xcc
    de14:	a837      	add	r0, sp, #220	; 0xdc
    de16:	9034      	str	r0, [sp, #208]	; 0xd0
    de18:	a838      	add	r0, sp, #224	; 0xe0
    de1a:	9035      	str	r0, [sp, #212]	; 0xd4
    de1c:	9833      	ldr	r0, [sp, #204]	; 0xcc
    de1e:	905e      	str	r0, [sp, #376]	; 0x178
    de20:	9934      	ldr	r1, [sp, #208]	; 0xd0
    de22:	915f      	str	r1, [sp, #380]	; 0x17c
    de24:	9a35      	ldr	r2, [sp, #212]	; 0xd4
    de26:	9260      	str	r2, [sp, #384]	; 0x180
    de28:	f648 7381 	movw	r3, #36737	; 0x8f81
    de2c:	f2c0 0300 	movt	r3, #0
    de30:	9118      	str	r1, [sp, #96]	; 0x60
    de32:	4619      	mov	r1, r3
    de34:	9217      	str	r2, [sp, #92]	; 0x5c
    de36:	f7fb f8db 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    de3a:	9016      	str	r0, [sp, #88]	; 0x58
    de3c:	9115      	str	r1, [sp, #84]	; 0x54
    de3e:	e7ff      	b.n	de40 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
    de40:	f648 7181 	movw	r1, #36737	; 0x8f81
    de44:	f2c0 0100 	movt	r1, #0
    de48:	9818      	ldr	r0, [sp, #96]	; 0x60
    de4a:	f7fb f8d1 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    de4e:	9014      	str	r0, [sp, #80]	; 0x50
    de50:	9113      	str	r1, [sp, #76]	; 0x4c
    de52:	e7ff      	b.n	de54 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
    de54:	f244 21ef 	movw	r1, #17135	; 0x42ef
    de58:	f2c0 0101 	movt	r1, #1
    de5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    de5e:	f7fb f906 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    de62:	9012      	str	r0, [sp, #72]	; 0x48
    de64:	9111      	str	r1, [sp, #68]	; 0x44
    de66:	e7ff      	b.n	de68 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
    de68:	9816      	ldr	r0, [sp, #88]	; 0x58
    de6a:	902d      	str	r0, [sp, #180]	; 0xb4
    de6c:	9915      	ldr	r1, [sp, #84]	; 0x54
    de6e:	912e      	str	r1, [sp, #184]	; 0xb8
    de70:	9a14      	ldr	r2, [sp, #80]	; 0x50
    de72:	922f      	str	r2, [sp, #188]	; 0xbc
    de74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    de76:	9330      	str	r3, [sp, #192]	; 0xc0
    de78:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    de7c:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
    de80:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
    de84:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
    de88:	466c      	mov	r4, sp
    de8a:	2503      	movs	r5, #3
    de8c:	6025      	str	r5, [r4, #0]
    de8e:	a827      	add	r0, sp, #156	; 0x9c
    de90:	ab2d      	add	r3, sp, #180	; 0xb4
    de92:	9919      	ldr	r1, [sp, #100]	; 0x64
    de94:	462a      	mov	r2, r5
    de96:	f7fa fd7f 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    de9a:	e7ff      	b.n	de9c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
    de9c:	f24b 10fc 	movw	r0, #45564	; 0xb1fc
    dea0:	f2c0 0001 	movt	r0, #1
    dea4:	f005 ff35 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    dea8:	9010      	str	r0, [sp, #64]	; 0x40
    deaa:	e7ff      	b.n	deac <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
    deac:	a827      	add	r0, sp, #156	; 0x9c
    deae:	9910      	ldr	r1, [sp, #64]	; 0x40
    deb0:	f005 ff6c 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    deb4:	defe      	udf	#254	; 0xfe
    deb6:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
    deb8:	900f      	str	r0, [sp, #60]	; 0x3c
    deba:	991e      	ldr	r1, [sp, #120]	; 0x78
    debc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    debe:	9b21      	ldr	r3, [sp, #132]	; 0x84
    dec0:	f008 fda0 	bl	16a04 <hal_spi_txrx_noblock>
    dec4:	903e      	str	r0, [sp, #248]	; 0xf8
    dec6:	e7ff      	b.n	dec8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
    dec8:	f64a 60d0 	movw	r0, #44752	; 0xaed0
    decc:	f2c0 0001 	movt	r0, #1
    ded0:	6800      	ldr	r0, [r0, #0]
    ded2:	a93e      	add	r1, sp, #248	; 0xf8
    ded4:	913f      	str	r1, [sp, #252]	; 0xfc
    ded6:	9040      	str	r0, [sp, #256]	; 0x100
    ded8:	983f      	ldr	r0, [sp, #252]	; 0xfc
    deda:	9062      	str	r0, [sp, #392]	; 0x188
    dedc:	9940      	ldr	r1, [sp, #256]	; 0x100
    dede:	9163      	str	r1, [sp, #396]	; 0x18c
    dee0:	6802      	ldr	r2, [r0, #0]
    dee2:	680b      	ldr	r3, [r1, #0]
    dee4:	429a      	cmp	r2, r3
    dee6:	900e      	str	r0, [sp, #56]	; 0x38
    dee8:	910d      	str	r1, [sp, #52]	; 0x34
    deea:	d10c      	bne.n	df06 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
    deec:	e7ff      	b.n	deee <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
    deee:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
    def2:	9067      	str	r0, [sp, #412]	; 0x19c
    def4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
    def8:	fba0 0101 	umull	r0, r1, r0, r1
    defc:	2900      	cmp	r1, #0
    defe:	900c      	str	r0, [sp, #48]	; 0x30
    df00:	f040 8090 	bne.w	e024 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
    df04:	e072      	b.n	dfec <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
    df06:	f64a 7028 	movw	r0, #44840	; 0xaf28
    df0a:	f2c0 0001 	movt	r0, #1
    df0e:	6801      	ldr	r1, [r0, #0]
    df10:	980e      	ldr	r0, [sp, #56]	; 0x38
    df12:	9050      	str	r0, [sp, #320]	; 0x140
    df14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    df16:	9251      	str	r2, [sp, #324]	; 0x144
    df18:	f24b 13f8 	movw	r3, #45560	; 0xb1f8
    df1c:	f2c0 0301 	movt	r3, #1
    df20:	681b      	ldr	r3, [r3, #0]
    df22:	f64a 7c48 	movw	ip, #44872	; 0xaf48
    df26:	f2c0 0c01 	movt	ip, #1
    df2a:	f8dc c000 	ldr.w	ip, [ip]
    df2e:	46ee      	mov	lr, sp
    df30:	2400      	movs	r4, #0
    df32:	f8ce 4000 	str.w	r4, [lr]
    df36:	a852      	add	r0, sp, #328	; 0x148
    df38:	2201      	movs	r2, #1
    df3a:	910b      	str	r1, [sp, #44]	; 0x2c
    df3c:	4619      	mov	r1, r3
    df3e:	4663      	mov	r3, ip
    df40:	f7fa fd2a 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    df44:	e7ff      	b.n	df46 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
    df46:	a850      	add	r0, sp, #320	; 0x140
    df48:	904d      	str	r0, [sp, #308]	; 0x134
    df4a:	a851      	add	r0, sp, #324	; 0x144
    df4c:	904e      	str	r0, [sp, #312]	; 0x138
    df4e:	a852      	add	r0, sp, #328	; 0x148
    df50:	904f      	str	r0, [sp, #316]	; 0x13c
    df52:	984d      	ldr	r0, [sp, #308]	; 0x134
    df54:	9064      	str	r0, [sp, #400]	; 0x190
    df56:	994e      	ldr	r1, [sp, #312]	; 0x138
    df58:	9165      	str	r1, [sp, #404]	; 0x194
    df5a:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    df5c:	9266      	str	r2, [sp, #408]	; 0x198
    df5e:	f648 7381 	movw	r3, #36737	; 0x8f81
    df62:	f2c0 0300 	movt	r3, #0
    df66:	910a      	str	r1, [sp, #40]	; 0x28
    df68:	4619      	mov	r1, r3
    df6a:	9209      	str	r2, [sp, #36]	; 0x24
    df6c:	f7fb f840 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    df70:	9008      	str	r0, [sp, #32]
    df72:	9107      	str	r1, [sp, #28]
    df74:	e7ff      	b.n	df76 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
    df76:	f648 7181 	movw	r1, #36737	; 0x8f81
    df7a:	f2c0 0100 	movt	r1, #0
    df7e:	980a      	ldr	r0, [sp, #40]	; 0x28
    df80:	f7fb f836 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    df84:	9006      	str	r0, [sp, #24]
    df86:	9105      	str	r1, [sp, #20]
    df88:	e7ff      	b.n	df8a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
    df8a:	f244 21ef 	movw	r1, #17135	; 0x42ef
    df8e:	f2c0 0101 	movt	r1, #1
    df92:	9809      	ldr	r0, [sp, #36]	; 0x24
    df94:	f7fb f86b 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    df98:	9004      	str	r0, [sp, #16]
    df9a:	9103      	str	r1, [sp, #12]
    df9c:	e7ff      	b.n	df9e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
    df9e:	9808      	ldr	r0, [sp, #32]
    dfa0:	9047      	str	r0, [sp, #284]	; 0x11c
    dfa2:	9907      	ldr	r1, [sp, #28]
    dfa4:	9148      	str	r1, [sp, #288]	; 0x120
    dfa6:	9a06      	ldr	r2, [sp, #24]
    dfa8:	9249      	str	r2, [sp, #292]	; 0x124
    dfaa:	9b05      	ldr	r3, [sp, #20]
    dfac:	934a      	str	r3, [sp, #296]	; 0x128
    dfae:	f8dd c010 	ldr.w	ip, [sp, #16]
    dfb2:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
    dfb6:	f8dd e00c 	ldr.w	lr, [sp, #12]
    dfba:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
    dfbe:	466c      	mov	r4, sp
    dfc0:	2503      	movs	r5, #3
    dfc2:	6025      	str	r5, [r4, #0]
    dfc4:	a841      	add	r0, sp, #260	; 0x104
    dfc6:	ab47      	add	r3, sp, #284	; 0x11c
    dfc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dfca:	462a      	mov	r2, r5
    dfcc:	f7fa fce4 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    dfd0:	e7ff      	b.n	dfd2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
    dfd2:	f24b 200c 	movw	r0, #45580	; 0xb20c
    dfd6:	f2c0 0001 	movt	r0, #1
    dfda:	f005 fe9a 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    dfde:	9002      	str	r0, [sp, #8]
    dfe0:	e7ff      	b.n	dfe2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
    dfe2:	a841      	add	r0, sp, #260	; 0x104
    dfe4:	9902      	ldr	r1, [sp, #8]
    dfe6:	f005 fed1 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    dfea:	defe      	udf	#254	; 0xfe
    dfec:	f644 50d3 	movw	r0, #19923	; 0x4dd3
    dff0:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
    dff4:	990c      	ldr	r1, [sp, #48]	; 0x30
    dff6:	fba1 0200 	umull	r0, r2, r1, r0
    dffa:	0991      	lsrs	r1, r2, #6
    dffc:	f242 221c 	movw	r2, #8732	; 0x221c
    e000:	f2c2 0200 	movt	r2, #8192	; 0x2000
    e004:	9001      	str	r0, [sp, #4]
    e006:	4610      	mov	r0, r2
    e008:	f009 fec8 	bl	17d9c <os_sem_pend>
    e00c:	e7ff      	b.n	e00e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
    e00e:	e7ff      	b.n	e010 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
    e010:	2019      	movs	r0, #25
    e012:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    e014:	f007 fff2 	bl	15ffc <hal_gpio_write>
    e018:	e7ff      	b.n	e01a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
    e01a:	2000      	movs	r0, #0
    Ok(())
    e01c:	9022      	str	r0, [sp, #136]	; 0x88
    e01e:	2001      	movs	r0, #1
    e020:	9022      	str	r0, [sp, #136]	; 0x88
}
    e022:	e686      	b.n	dd32 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
    e024:	f24b 1020 	movw	r0, #45344	; 0xb120
    e028:	f2c0 0001 	movt	r0, #1
    e02c:	f24b 221c 	movw	r2, #45596	; 0xb21c
    e030:	f2c0 0201 	movt	r2, #1
    e034:	2121      	movs	r1, #33	; 0x21
    e036:	f005 fe73 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e03a:	defe      	udf	#254	; 0xfe

0000e03c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
    e03c:	b5b0      	push	{r4, r5, r7, lr}
    e03e:	b0ae      	sub	sp, #184	; 0xb8
    e040:	9027      	str	r0, [sp, #156]	; 0x9c
    e042:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
    e044:	f242 201c 	movw	r0, #8732	; 0x221c
    e048:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e04c:	f009 fe74 	bl	17d38 <os_sem_release>
    e050:	900d      	str	r0, [sp, #52]	; 0x34
    e052:	e7ff      	b.n	e054 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
    e054:	f64a 60d0 	movw	r0, #44752	; 0xaed0
    e058:	f2c0 0001 	movt	r0, #1
    e05c:	6800      	ldr	r0, [r0, #0]
    e05e:	a90d      	add	r1, sp, #52	; 0x34
    e060:	910e      	str	r1, [sp, #56]	; 0x38
    e062:	900f      	str	r0, [sp, #60]	; 0x3c
    e064:	980e      	ldr	r0, [sp, #56]	; 0x38
    e066:	9029      	str	r0, [sp, #164]	; 0xa4
    e068:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e06a:	912a      	str	r1, [sp, #168]	; 0xa8
    e06c:	6802      	ldr	r2, [r0, #0]
    e06e:	680b      	ldr	r3, [r1, #0]
    e070:	429a      	cmp	r2, r3
    e072:	900c      	str	r0, [sp, #48]	; 0x30
    e074:	910b      	str	r1, [sp, #44]	; 0x2c
    e076:	d102      	bne.n	e07e <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
    e078:	e7ff      	b.n	e07a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
    e07a:	b02e      	add	sp, #184	; 0xb8
    e07c:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
    e07e:	f64a 7028 	movw	r0, #44840	; 0xaf28
    e082:	f2c0 0001 	movt	r0, #1
    e086:	6801      	ldr	r1, [r0, #0]
    e088:	980c      	ldr	r0, [sp, #48]	; 0x30
    e08a:	901f      	str	r0, [sp, #124]	; 0x7c
    e08c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e08e:	9220      	str	r2, [sp, #128]	; 0x80
    e090:	f24b 0340 	movw	r3, #45120	; 0xb040
    e094:	f2c0 0301 	movt	r3, #1
    e098:	681b      	ldr	r3, [r3, #0]
    e09a:	f64a 7c48 	movw	ip, #44872	; 0xaf48
    e09e:	f2c0 0c01 	movt	ip, #1
    e0a2:	f8dc c000 	ldr.w	ip, [ip]
    e0a6:	46ee      	mov	lr, sp
    e0a8:	2400      	movs	r4, #0
    e0aa:	f8ce 4000 	str.w	r4, [lr]
    e0ae:	a821      	add	r0, sp, #132	; 0x84
    e0b0:	2201      	movs	r2, #1
    e0b2:	910a      	str	r1, [sp, #40]	; 0x28
    e0b4:	4619      	mov	r1, r3
    e0b6:	4663      	mov	r3, ip
    e0b8:	f7fa fc6e 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    e0bc:	e7ff      	b.n	e0be <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
    e0be:	a81f      	add	r0, sp, #124	; 0x7c
    e0c0:	901c      	str	r0, [sp, #112]	; 0x70
    e0c2:	a820      	add	r0, sp, #128	; 0x80
    e0c4:	901d      	str	r0, [sp, #116]	; 0x74
    e0c6:	a821      	add	r0, sp, #132	; 0x84
    e0c8:	901e      	str	r0, [sp, #120]	; 0x78
    e0ca:	981c      	ldr	r0, [sp, #112]	; 0x70
    e0cc:	902b      	str	r0, [sp, #172]	; 0xac
    e0ce:	991d      	ldr	r1, [sp, #116]	; 0x74
    e0d0:	912c      	str	r1, [sp, #176]	; 0xb0
    e0d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    e0d4:	922d      	str	r2, [sp, #180]	; 0xb4
    e0d6:	f648 73d5 	movw	r3, #36821	; 0x8fd5
    e0da:	f2c0 0300 	movt	r3, #0
    e0de:	9109      	str	r1, [sp, #36]	; 0x24
    e0e0:	4619      	mov	r1, r3
    e0e2:	9208      	str	r2, [sp, #32]
    e0e4:	f7fa ffae 	bl	9044 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
    e0e8:	9007      	str	r0, [sp, #28]
    e0ea:	9106      	str	r1, [sp, #24]
    e0ec:	e7ff      	b.n	e0ee <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
    e0ee:	f648 71d5 	movw	r1, #36821	; 0x8fd5
    e0f2:	f2c0 0100 	movt	r1, #0
    e0f6:	9809      	ldr	r0, [sp, #36]	; 0x24
    e0f8:	f7fa ffa4 	bl	9044 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
    e0fc:	9005      	str	r0, [sp, #20]
    e0fe:	9104      	str	r1, [sp, #16]
    e100:	e7ff      	b.n	e102 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
    e102:	f244 21ef 	movw	r1, #17135	; 0x42ef
    e106:	f2c0 0101 	movt	r1, #1
    e10a:	9808      	ldr	r0, [sp, #32]
    e10c:	f7fa ffaf 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    e110:	9003      	str	r0, [sp, #12]
    e112:	9102      	str	r1, [sp, #8]
    e114:	e7ff      	b.n	e116 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
    e116:	9807      	ldr	r0, [sp, #28]
    e118:	9016      	str	r0, [sp, #88]	; 0x58
    e11a:	9906      	ldr	r1, [sp, #24]
    e11c:	9117      	str	r1, [sp, #92]	; 0x5c
    e11e:	9a05      	ldr	r2, [sp, #20]
    e120:	9218      	str	r2, [sp, #96]	; 0x60
    e122:	9b04      	ldr	r3, [sp, #16]
    e124:	9319      	str	r3, [sp, #100]	; 0x64
    e126:	f8dd c00c 	ldr.w	ip, [sp, #12]
    e12a:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
    e12e:	f8dd e008 	ldr.w	lr, [sp, #8]
    e132:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
    e136:	466c      	mov	r4, sp
    e138:	2503      	movs	r5, #3
    e13a:	6025      	str	r5, [r4, #0]
    e13c:	a810      	add	r0, sp, #64	; 0x40
    e13e:	ab16      	add	r3, sp, #88	; 0x58
    e140:	990a      	ldr	r1, [sp, #40]	; 0x28
    e142:	462a      	mov	r2, r5
    e144:	f7fa fc28 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    e148:	e7ff      	b.n	e14a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
    e14a:	f24b 202c 	movw	r0, #45612	; 0xb22c
    e14e:	f2c0 0001 	movt	r0, #1
    e152:	f005 fdde 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    e156:	9001      	str	r0, [sp, #4]
    e158:	e7ff      	b.n	e15a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
    e15a:	a810      	add	r0, sp, #64	; 0x40
    e15c:	9901      	ldr	r1, [sp, #4]
    e15e:	f005 fe15 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    e162:	defe      	udf	#254	; 0xfe

0000e164 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
    e164:	b580      	push	{r7, lr}
    e166:	b084      	sub	sp, #16
    e168:	4601      	mov	r1, r0
    e16a:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
    e16e:	b2c0      	uxtb	r0, r0
    e170:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e174:	fba0 0202 	umull	r0, r2, r0, r2
    e178:	2a00      	cmp	r2, #0
    e17a:	9001      	str	r0, [sp, #4]
    e17c:	d110      	bne.n	e1a0 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
    e17e:	e7ff      	b.n	e180 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
    e180:	f644 50d3 	movw	r0, #19923	; 0x4dd3
    e184:	f2c1 0062 	movt	r0, #4194	; 0x1062
    e188:	9901      	ldr	r1, [sp, #4]
    e18a:	fba1 0200 	umull	r0, r2, r1, r0
    e18e:	0992      	lsrs	r2, r2, #6
    e190:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
    e192:	9000      	str	r0, [sp, #0]
    e194:	4610      	mov	r0, r2
    e196:	f009 ff4f 	bl	18038 <os_time_delay>
    e19a:	e7ff      	b.n	e19c <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
    e19c:	b004      	add	sp, #16
    e19e:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
    e1a0:	f24b 1020 	movw	r0, #45344	; 0xb120
    e1a4:	f2c0 0001 	movt	r0, #1
    e1a8:	f24b 223c 	movw	r2, #45628	; 0xb23c
    e1ac:	f2c0 0201 	movt	r2, #1
    e1b0:	2121      	movs	r1, #33	; 0x21
    e1b2:	f005 fdb5 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e1b6:	defe      	udf	#254	; 0xfe

0000e1b8 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
    e1b8:	b082      	sub	sp, #8
    e1ba:	2000      	movs	r0, #0
        SPI {
    e1bc:	9000      	str	r0, [sp, #0]
    e1be:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
    e1c0:	9800      	ldr	r0, [sp, #0]
    e1c2:	9901      	ldr	r1, [sp, #4]
    e1c4:	b002      	add	sp, #8
    e1c6:	4770      	bx	lr

0000e1c8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
    e1c8:	b5b0      	push	{r4, r5, r7, lr}
    e1ca:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
    e1ce:	9077      	str	r0, [sp, #476]	; 0x1dc
    e1d0:	9178      	str	r1, [sp, #480]	; 0x1e0
    e1d2:	9279      	str	r2, [sp, #484]	; 0x1e4
    e1d4:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
    e1d6:	9028      	str	r0, [sp, #160]	; 0xa0
    e1d8:	4608      	mov	r0, r1
    e1da:	9127      	str	r1, [sp, #156]	; 0x9c
    e1dc:	4619      	mov	r1, r3
    e1de:	9226      	str	r2, [sp, #152]	; 0x98
    e1e0:	f008 fafe 	bl	167e0 <hal_spi_config>
    e1e4:	9029      	str	r0, [sp, #164]	; 0xa4
    e1e6:	e7ff      	b.n	e1e8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
    e1e8:	f24b 204c 	movw	r0, #45644	; 0xb24c
    e1ec:	f2c0 0001 	movt	r0, #1
    e1f0:	6800      	ldr	r0, [r0, #0]
    e1f2:	a929      	add	r1, sp, #164	; 0xa4
    e1f4:	912a      	str	r1, [sp, #168]	; 0xa8
    e1f6:	902b      	str	r0, [sp, #172]	; 0xac
    e1f8:	982a      	ldr	r0, [sp, #168]	; 0xa8
    e1fa:	907b      	str	r0, [sp, #492]	; 0x1ec
    e1fc:	992b      	ldr	r1, [sp, #172]	; 0xac
    e1fe:	917c      	str	r1, [sp, #496]	; 0x1f0
    e200:	6802      	ldr	r2, [r0, #0]
    e202:	680b      	ldr	r3, [r1, #0]
    e204:	429a      	cmp	r2, r3
    e206:	9025      	str	r0, [sp, #148]	; 0x94
    e208:	9124      	str	r1, [sp, #144]	; 0x90
    e20a:	d105      	bne.n	e218 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
    e20c:	e7ff      	b.n	e20e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
    e20e:	9827      	ldr	r0, [sp, #156]	; 0x9c
    e210:	f008 fb02 	bl	16818 <hal_spi_enable>
    e214:	9043      	str	r0, [sp, #268]	; 0x10c
    e216:	e072      	b.n	e2fe <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
    e218:	f24b 20a4 	movw	r0, #45732	; 0xb2a4
    e21c:	f2c0 0001 	movt	r0, #1
    e220:	6801      	ldr	r1, [r0, #0]
    e222:	9825      	ldr	r0, [sp, #148]	; 0x94
    e224:	903b      	str	r0, [sp, #236]	; 0xec
    e226:	9a24      	ldr	r2, [sp, #144]	; 0x90
    e228:	923c      	str	r2, [sp, #240]	; 0xf0
    e22a:	f24b 23c0 	movw	r3, #45760	; 0xb2c0
    e22e:	f2c0 0301 	movt	r3, #1
    e232:	681b      	ldr	r3, [r3, #0]
    e234:	f24b 2cc4 	movw	ip, #45764	; 0xb2c4
    e238:	f2c0 0c01 	movt	ip, #1
    e23c:	f8dc c000 	ldr.w	ip, [ip]
    e240:	46ee      	mov	lr, sp
    e242:	2400      	movs	r4, #0
    e244:	f8ce 4000 	str.w	r4, [lr]
    e248:	a83d      	add	r0, sp, #244	; 0xf4
    e24a:	2201      	movs	r2, #1
    e24c:	9123      	str	r1, [sp, #140]	; 0x8c
    e24e:	4619      	mov	r1, r3
    e250:	4663      	mov	r3, ip
    e252:	f7fa fba1 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    e256:	e7ff      	b.n	e258 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
    e258:	a83b      	add	r0, sp, #236	; 0xec
    e25a:	9038      	str	r0, [sp, #224]	; 0xe0
    e25c:	a83c      	add	r0, sp, #240	; 0xf0
    e25e:	9039      	str	r0, [sp, #228]	; 0xe4
    e260:	a83d      	add	r0, sp, #244	; 0xf4
    e262:	903a      	str	r0, [sp, #232]	; 0xe8
    e264:	9838      	ldr	r0, [sp, #224]	; 0xe0
    e266:	907d      	str	r0, [sp, #500]	; 0x1f4
    e268:	9939      	ldr	r1, [sp, #228]	; 0xe4
    e26a:	917e      	str	r1, [sp, #504]	; 0x1f8
    e26c:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    e26e:	927f      	str	r2, [sp, #508]	; 0x1fc
    e270:	f648 7381 	movw	r3, #36737	; 0x8f81
    e274:	f2c0 0300 	movt	r3, #0
    e278:	9122      	str	r1, [sp, #136]	; 0x88
    e27a:	4619      	mov	r1, r3
    e27c:	9221      	str	r2, [sp, #132]	; 0x84
    e27e:	f7fa feb7 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    e282:	9020      	str	r0, [sp, #128]	; 0x80
    e284:	911f      	str	r1, [sp, #124]	; 0x7c
    e286:	e7ff      	b.n	e288 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
    e288:	f648 7181 	movw	r1, #36737	; 0x8f81
    e28c:	f2c0 0100 	movt	r1, #0
    e290:	9822      	ldr	r0, [sp, #136]	; 0x88
    e292:	f7fa fead 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    e296:	901e      	str	r0, [sp, #120]	; 0x78
    e298:	911d      	str	r1, [sp, #116]	; 0x74
    e29a:	e7ff      	b.n	e29c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
    e29c:	f244 21ef 	movw	r1, #17135	; 0x42ef
    e2a0:	f2c0 0101 	movt	r1, #1
    e2a4:	9821      	ldr	r0, [sp, #132]	; 0x84
    e2a6:	f7fa fee2 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    e2aa:	901c      	str	r0, [sp, #112]	; 0x70
    e2ac:	911b      	str	r1, [sp, #108]	; 0x6c
    e2ae:	e7ff      	b.n	e2b0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
    e2b0:	9820      	ldr	r0, [sp, #128]	; 0x80
    e2b2:	9032      	str	r0, [sp, #200]	; 0xc8
    e2b4:	991f      	ldr	r1, [sp, #124]	; 0x7c
    e2b6:	9133      	str	r1, [sp, #204]	; 0xcc
    e2b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    e2ba:	9234      	str	r2, [sp, #208]	; 0xd0
    e2bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    e2be:	9335      	str	r3, [sp, #212]	; 0xd4
    e2c0:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
    e2c4:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
    e2c8:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
    e2cc:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
    e2d0:	466c      	mov	r4, sp
    e2d2:	2503      	movs	r5, #3
    e2d4:	6025      	str	r5, [r4, #0]
    e2d6:	a82c      	add	r0, sp, #176	; 0xb0
    e2d8:	ab32      	add	r3, sp, #200	; 0xc8
    e2da:	9923      	ldr	r1, [sp, #140]	; 0x8c
    e2dc:	462a      	mov	r2, r5
    e2de:	f7fa fb5b 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    e2e2:	e7ff      	b.n	e2e4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
    e2e4:	f24b 20e0 	movw	r0, #45792	; 0xb2e0
    e2e8:	f2c0 0001 	movt	r0, #1
    e2ec:	f005 fd11 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    e2f0:	901a      	str	r0, [sp, #104]	; 0x68
    e2f2:	e7ff      	b.n	e2f4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
    e2f4:	a82c      	add	r0, sp, #176	; 0xb0
    e2f6:	991a      	ldr	r1, [sp, #104]	; 0x68
    e2f8:	f005 fd48 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    e2fc:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
    e2fe:	f24b 204c 	movw	r0, #45644	; 0xb24c
    e302:	f2c0 0001 	movt	r0, #1
    e306:	6800      	ldr	r0, [r0, #0]
    e308:	a943      	add	r1, sp, #268	; 0x10c
    e30a:	9144      	str	r1, [sp, #272]	; 0x110
    e30c:	9045      	str	r0, [sp, #276]	; 0x114
    e30e:	9844      	ldr	r0, [sp, #272]	; 0x110
    e310:	9080      	str	r0, [sp, #512]	; 0x200
    e312:	9945      	ldr	r1, [sp, #276]	; 0x114
    e314:	9181      	str	r1, [sp, #516]	; 0x204
    e316:	6802      	ldr	r2, [r0, #0]
    e318:	680b      	ldr	r3, [r1, #0]
    e31a:	429a      	cmp	r2, r3
    e31c:	9019      	str	r0, [sp, #100]	; 0x64
    e31e:	9118      	str	r1, [sp, #96]	; 0x60
    e320:	d106      	bne.n	e330 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
    e322:	e7ff      	b.n	e324 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
    e324:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
    e326:	9826      	ldr	r0, [sp, #152]	; 0x98
    e328:	f007 fe4c 	bl	15fc4 <hal_gpio_init_out>
    e32c:	905d      	str	r0, [sp, #372]	; 0x174
    e32e:	e072      	b.n	e416 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
    e330:	f24b 20a4 	movw	r0, #45732	; 0xb2a4
    e334:	f2c0 0001 	movt	r0, #1
    e338:	6801      	ldr	r1, [r0, #0]
    e33a:	9819      	ldr	r0, [sp, #100]	; 0x64
    e33c:	9055      	str	r0, [sp, #340]	; 0x154
    e33e:	9a18      	ldr	r2, [sp, #96]	; 0x60
    e340:	9256      	str	r2, [sp, #344]	; 0x158
    e342:	f24b 3308 	movw	r3, #45832	; 0xb308
    e346:	f2c0 0301 	movt	r3, #1
    e34a:	681b      	ldr	r3, [r3, #0]
    e34c:	f24b 2cc4 	movw	ip, #45764	; 0xb2c4
    e350:	f2c0 0c01 	movt	ip, #1
    e354:	f8dc c000 	ldr.w	ip, [ip]
    e358:	46ee      	mov	lr, sp
    e35a:	2400      	movs	r4, #0
    e35c:	f8ce 4000 	str.w	r4, [lr]
    e360:	a857      	add	r0, sp, #348	; 0x15c
    e362:	2201      	movs	r2, #1
    e364:	9117      	str	r1, [sp, #92]	; 0x5c
    e366:	4619      	mov	r1, r3
    e368:	4663      	mov	r3, ip
    e36a:	f7fa fb15 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    e36e:	e7ff      	b.n	e370 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
    e370:	a855      	add	r0, sp, #340	; 0x154
    e372:	9052      	str	r0, [sp, #328]	; 0x148
    e374:	a856      	add	r0, sp, #344	; 0x158
    e376:	9053      	str	r0, [sp, #332]	; 0x14c
    e378:	a857      	add	r0, sp, #348	; 0x15c
    e37a:	9054      	str	r0, [sp, #336]	; 0x150
    e37c:	9852      	ldr	r0, [sp, #328]	; 0x148
    e37e:	9082      	str	r0, [sp, #520]	; 0x208
    e380:	9953      	ldr	r1, [sp, #332]	; 0x14c
    e382:	9183      	str	r1, [sp, #524]	; 0x20c
    e384:	9a54      	ldr	r2, [sp, #336]	; 0x150
    e386:	9284      	str	r2, [sp, #528]	; 0x210
    e388:	f648 7381 	movw	r3, #36737	; 0x8f81
    e38c:	f2c0 0300 	movt	r3, #0
    e390:	9116      	str	r1, [sp, #88]	; 0x58
    e392:	4619      	mov	r1, r3
    e394:	9215      	str	r2, [sp, #84]	; 0x54
    e396:	f7fa fe2b 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    e39a:	9014      	str	r0, [sp, #80]	; 0x50
    e39c:	9113      	str	r1, [sp, #76]	; 0x4c
    e39e:	e7ff      	b.n	e3a0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
    e3a0:	f648 7181 	movw	r1, #36737	; 0x8f81
    e3a4:	f2c0 0100 	movt	r1, #0
    e3a8:	9816      	ldr	r0, [sp, #88]	; 0x58
    e3aa:	f7fa fe21 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    e3ae:	9012      	str	r0, [sp, #72]	; 0x48
    e3b0:	9111      	str	r1, [sp, #68]	; 0x44
    e3b2:	e7ff      	b.n	e3b4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
    e3b4:	f244 21ef 	movw	r1, #17135	; 0x42ef
    e3b8:	f2c0 0101 	movt	r1, #1
    e3bc:	9815      	ldr	r0, [sp, #84]	; 0x54
    e3be:	f7fa fe56 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    e3c2:	9010      	str	r0, [sp, #64]	; 0x40
    e3c4:	910f      	str	r1, [sp, #60]	; 0x3c
    e3c6:	e7ff      	b.n	e3c8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
    e3c8:	9814      	ldr	r0, [sp, #80]	; 0x50
    e3ca:	904c      	str	r0, [sp, #304]	; 0x130
    e3cc:	9913      	ldr	r1, [sp, #76]	; 0x4c
    e3ce:	914d      	str	r1, [sp, #308]	; 0x134
    e3d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
    e3d2:	924e      	str	r2, [sp, #312]	; 0x138
    e3d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e3d6:	934f      	str	r3, [sp, #316]	; 0x13c
    e3d8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    e3dc:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
    e3e0:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    e3e4:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
    e3e8:	466c      	mov	r4, sp
    e3ea:	2503      	movs	r5, #3
    e3ec:	6025      	str	r5, [r4, #0]
    e3ee:	a846      	add	r0, sp, #280	; 0x118
    e3f0:	ab4c      	add	r3, sp, #304	; 0x130
    e3f2:	9917      	ldr	r1, [sp, #92]	; 0x5c
    e3f4:	462a      	mov	r2, r5
    e3f6:	f7fa facf 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    e3fa:	e7ff      	b.n	e3fc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
    e3fc:	f24b 300c 	movw	r0, #45836	; 0xb30c
    e400:	f2c0 0001 	movt	r0, #1
    e404:	f005 fc85 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    e408:	900e      	str	r0, [sp, #56]	; 0x38
    e40a:	e7ff      	b.n	e40c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
    e40c:	a846      	add	r0, sp, #280	; 0x118
    e40e:	990e      	ldr	r1, [sp, #56]	; 0x38
    e410:	f005 fcbc 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    e414:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
    e416:	f24b 204c 	movw	r0, #45644	; 0xb24c
    e41a:	f2c0 0001 	movt	r0, #1
    e41e:	6800      	ldr	r0, [r0, #0]
    e420:	a95d      	add	r1, sp, #372	; 0x174
    e422:	915e      	str	r1, [sp, #376]	; 0x178
    e424:	905f      	str	r0, [sp, #380]	; 0x17c
    e426:	985e      	ldr	r0, [sp, #376]	; 0x178
    e428:	9085      	str	r0, [sp, #532]	; 0x214
    e42a:	995f      	ldr	r1, [sp, #380]	; 0x17c
    e42c:	9186      	str	r1, [sp, #536]	; 0x218
    e42e:	6802      	ldr	r2, [r0, #0]
    e430:	680b      	ldr	r3, [r1, #0]
    e432:	429a      	cmp	r2, r3
    e434:	900d      	str	r0, [sp, #52]	; 0x34
    e436:	910c      	str	r1, [sp, #48]	; 0x30
    e438:	d109      	bne.n	e44e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
    e43a:	e7ff      	b.n	e43c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
    e43c:	9827      	ldr	r0, [sp, #156]	; 0x9c
    e43e:	9928      	ldr	r1, [sp, #160]	; 0xa0
    e440:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
    e442:	9a26      	ldr	r2, [sp, #152]	; 0x98
    e444:	604a      	str	r2, [r1, #4]
    e446:	2001      	movs	r0, #1
        Ok(())
    }
    e448:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
    e44c:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
    e44e:	f24b 20a4 	movw	r0, #45732	; 0xb2a4
    e452:	f2c0 0001 	movt	r0, #1
    e456:	6801      	ldr	r1, [r0, #0]
    e458:	980d      	ldr	r0, [sp, #52]	; 0x34
    e45a:	906f      	str	r0, [sp, #444]	; 0x1bc
    e45c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e45e:	9270      	str	r2, [sp, #448]	; 0x1c0
    e460:	f24b 3334 	movw	r3, #45876	; 0xb334
    e464:	f2c0 0301 	movt	r3, #1
    e468:	681b      	ldr	r3, [r3, #0]
    e46a:	f24b 2cc4 	movw	ip, #45764	; 0xb2c4
    e46e:	f2c0 0c01 	movt	ip, #1
    e472:	f8dc c000 	ldr.w	ip, [ip]
    e476:	46ee      	mov	lr, sp
    e478:	2400      	movs	r4, #0
    e47a:	f8ce 4000 	str.w	r4, [lr]
    e47e:	a871      	add	r0, sp, #452	; 0x1c4
    e480:	2201      	movs	r2, #1
    e482:	910b      	str	r1, [sp, #44]	; 0x2c
    e484:	4619      	mov	r1, r3
    e486:	4663      	mov	r3, ip
    e488:	f7fa fa86 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    e48c:	e7ff      	b.n	e48e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
    e48e:	a86f      	add	r0, sp, #444	; 0x1bc
    e490:	906c      	str	r0, [sp, #432]	; 0x1b0
    e492:	a870      	add	r0, sp, #448	; 0x1c0
    e494:	906d      	str	r0, [sp, #436]	; 0x1b4
    e496:	a871      	add	r0, sp, #452	; 0x1c4
    e498:	906e      	str	r0, [sp, #440]	; 0x1b8
    e49a:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    e49c:	9087      	str	r0, [sp, #540]	; 0x21c
    e49e:	996d      	ldr	r1, [sp, #436]	; 0x1b4
    e4a0:	9188      	str	r1, [sp, #544]	; 0x220
    e4a2:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
    e4a4:	9289      	str	r2, [sp, #548]	; 0x224
    e4a6:	f648 7381 	movw	r3, #36737	; 0x8f81
    e4aa:	f2c0 0300 	movt	r3, #0
    e4ae:	910a      	str	r1, [sp, #40]	; 0x28
    e4b0:	4619      	mov	r1, r3
    e4b2:	9209      	str	r2, [sp, #36]	; 0x24
    e4b4:	f7fa fd9c 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    e4b8:	9008      	str	r0, [sp, #32]
    e4ba:	9107      	str	r1, [sp, #28]
    e4bc:	e7ff      	b.n	e4be <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
    e4be:	f648 7181 	movw	r1, #36737	; 0x8f81
    e4c2:	f2c0 0100 	movt	r1, #0
    e4c6:	980a      	ldr	r0, [sp, #40]	; 0x28
    e4c8:	f7fa fd92 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    e4cc:	9006      	str	r0, [sp, #24]
    e4ce:	9105      	str	r1, [sp, #20]
    e4d0:	e7ff      	b.n	e4d2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
    e4d2:	f244 21ef 	movw	r1, #17135	; 0x42ef
    e4d6:	f2c0 0101 	movt	r1, #1
    e4da:	9809      	ldr	r0, [sp, #36]	; 0x24
    e4dc:	f7fa fdc7 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    e4e0:	9004      	str	r0, [sp, #16]
    e4e2:	9103      	str	r1, [sp, #12]
    e4e4:	e7ff      	b.n	e4e6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
    e4e6:	9808      	ldr	r0, [sp, #32]
    e4e8:	9066      	str	r0, [sp, #408]	; 0x198
    e4ea:	9907      	ldr	r1, [sp, #28]
    e4ec:	9167      	str	r1, [sp, #412]	; 0x19c
    e4ee:	9a06      	ldr	r2, [sp, #24]
    e4f0:	9268      	str	r2, [sp, #416]	; 0x1a0
    e4f2:	9b05      	ldr	r3, [sp, #20]
    e4f4:	9369      	str	r3, [sp, #420]	; 0x1a4
    e4f6:	f8dd c010 	ldr.w	ip, [sp, #16]
    e4fa:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
    e4fe:	f8dd e00c 	ldr.w	lr, [sp, #12]
    e502:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
    e506:	466c      	mov	r4, sp
    e508:	2503      	movs	r5, #3
    e50a:	6025      	str	r5, [r4, #0]
    e50c:	a860      	add	r0, sp, #384	; 0x180
    e50e:	ab66      	add	r3, sp, #408	; 0x198
    e510:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e512:	462a      	mov	r2, r5
    e514:	f7fa fa40 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    e518:	e7ff      	b.n	e51a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
    e51a:	f24b 3038 	movw	r0, #45880	; 0xb338
    e51e:	f2c0 0001 	movt	r0, #1
    e522:	f005 fbf6 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    e526:	9002      	str	r0, [sp, #8]
    e528:	e7ff      	b.n	e52a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
    e52a:	a860      	add	r0, sp, #384	; 0x180
    e52c:	9902      	ldr	r1, [sp, #8]
    e52e:	f005 fc2d 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    e532:	defe      	udf	#254	; 0xfe

0000e534 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
    e534:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
    e536:	4770      	bx	lr

0000e538 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
    e538:	b5b0      	push	{r4, r5, r7, lr}
    e53a:	b0b0      	sub	sp, #192	; 0xc0
    e53c:	9029      	str	r0, [sp, #164]	; 0xa4
    e53e:	912a      	str	r1, [sp, #168]	; 0xa8
    e540:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
    e542:	900e      	str	r0, [sp, #56]	; 0x38
    e544:	4608      	mov	r0, r1
    e546:	910d      	str	r1, [sp, #52]	; 0x34
    e548:	4611      	mov	r1, r2
    e54a:	f007 fd3b 	bl	15fc4 <hal_gpio_init_out>
    e54e:	900f      	str	r0, [sp, #60]	; 0x3c
    e550:	e7ff      	b.n	e552 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
    e552:	f24b 204c 	movw	r0, #45644	; 0xb24c
    e556:	f2c0 0001 	movt	r0, #1
    e55a:	6800      	ldr	r0, [r0, #0]
    e55c:	a90f      	add	r1, sp, #60	; 0x3c
    e55e:	9110      	str	r1, [sp, #64]	; 0x40
    e560:	9011      	str	r0, [sp, #68]	; 0x44
    e562:	9810      	ldr	r0, [sp, #64]	; 0x40
    e564:	902b      	str	r0, [sp, #172]	; 0xac
    e566:	9911      	ldr	r1, [sp, #68]	; 0x44
    e568:	912c      	str	r1, [sp, #176]	; 0xb0
    e56a:	6802      	ldr	r2, [r0, #0]
    e56c:	680b      	ldr	r3, [r1, #0]
    e56e:	429a      	cmp	r2, r3
    e570:	900c      	str	r0, [sp, #48]	; 0x30
    e572:	910b      	str	r1, [sp, #44]	; 0x2c
    e574:	d106      	bne.n	e584 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
    e576:	e7ff      	b.n	e578 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
    e578:	980d      	ldr	r0, [sp, #52]	; 0x34
    e57a:	990e      	ldr	r1, [sp, #56]	; 0x38
    e57c:	6008      	str	r0, [r1, #0]
    e57e:	2001      	movs	r0, #1
        Ok(())
    }
    e580:	b030      	add	sp, #192	; 0xc0
    e582:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
    e584:	f24b 20a4 	movw	r0, #45732	; 0xb2a4
    e588:	f2c0 0001 	movt	r0, #1
    e58c:	6801      	ldr	r1, [r0, #0]
    e58e:	980c      	ldr	r0, [sp, #48]	; 0x30
    e590:	9021      	str	r0, [sp, #132]	; 0x84
    e592:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e594:	9222      	str	r2, [sp, #136]	; 0x88
    e596:	f24b 335c 	movw	r3, #45916	; 0xb35c
    e59a:	f2c0 0301 	movt	r3, #1
    e59e:	681b      	ldr	r3, [r3, #0]
    e5a0:	f24b 2cc4 	movw	ip, #45764	; 0xb2c4
    e5a4:	f2c0 0c01 	movt	ip, #1
    e5a8:	f8dc c000 	ldr.w	ip, [ip]
    e5ac:	46ee      	mov	lr, sp
    e5ae:	2400      	movs	r4, #0
    e5b0:	f8ce 4000 	str.w	r4, [lr]
    e5b4:	a823      	add	r0, sp, #140	; 0x8c
    e5b6:	2201      	movs	r2, #1
    e5b8:	910a      	str	r1, [sp, #40]	; 0x28
    e5ba:	4619      	mov	r1, r3
    e5bc:	4663      	mov	r3, ip
    e5be:	f7fa f9eb 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    e5c2:	e7ff      	b.n	e5c4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
    e5c4:	a821      	add	r0, sp, #132	; 0x84
    e5c6:	901e      	str	r0, [sp, #120]	; 0x78
    e5c8:	a822      	add	r0, sp, #136	; 0x88
    e5ca:	901f      	str	r0, [sp, #124]	; 0x7c
    e5cc:	a823      	add	r0, sp, #140	; 0x8c
    e5ce:	9020      	str	r0, [sp, #128]	; 0x80
    e5d0:	981e      	ldr	r0, [sp, #120]	; 0x78
    e5d2:	902d      	str	r0, [sp, #180]	; 0xb4
    e5d4:	991f      	ldr	r1, [sp, #124]	; 0x7c
    e5d6:	912e      	str	r1, [sp, #184]	; 0xb8
    e5d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
    e5da:	922f      	str	r2, [sp, #188]	; 0xbc
    e5dc:	f648 7381 	movw	r3, #36737	; 0x8f81
    e5e0:	f2c0 0300 	movt	r3, #0
    e5e4:	9109      	str	r1, [sp, #36]	; 0x24
    e5e6:	4619      	mov	r1, r3
    e5e8:	9208      	str	r2, [sp, #32]
    e5ea:	f7fa fd01 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    e5ee:	9007      	str	r0, [sp, #28]
    e5f0:	9106      	str	r1, [sp, #24]
    e5f2:	e7ff      	b.n	e5f4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
    e5f4:	f648 7181 	movw	r1, #36737	; 0x8f81
    e5f8:	f2c0 0100 	movt	r1, #0
    e5fc:	9809      	ldr	r0, [sp, #36]	; 0x24
    e5fe:	f7fa fcf7 	bl	8ff0 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    e602:	9005      	str	r0, [sp, #20]
    e604:	9104      	str	r1, [sp, #16]
    e606:	e7ff      	b.n	e608 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
    e608:	f244 21ef 	movw	r1, #17135	; 0x42ef
    e60c:	f2c0 0101 	movt	r1, #1
    e610:	9808      	ldr	r0, [sp, #32]
    e612:	f7fa fd2c 	bl	906e <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    e616:	9003      	str	r0, [sp, #12]
    e618:	9102      	str	r1, [sp, #8]
    e61a:	e7ff      	b.n	e61c <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
    e61c:	9807      	ldr	r0, [sp, #28]
    e61e:	9018      	str	r0, [sp, #96]	; 0x60
    e620:	9906      	ldr	r1, [sp, #24]
    e622:	9119      	str	r1, [sp, #100]	; 0x64
    e624:	9a05      	ldr	r2, [sp, #20]
    e626:	921a      	str	r2, [sp, #104]	; 0x68
    e628:	9b04      	ldr	r3, [sp, #16]
    e62a:	931b      	str	r3, [sp, #108]	; 0x6c
    e62c:	f8dd c00c 	ldr.w	ip, [sp, #12]
    e630:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    e634:	f8dd e008 	ldr.w	lr, [sp, #8]
    e638:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    e63c:	466c      	mov	r4, sp
    e63e:	2503      	movs	r5, #3
    e640:	6025      	str	r5, [r4, #0]
    e642:	a812      	add	r0, sp, #72	; 0x48
    e644:	ab18      	add	r3, sp, #96	; 0x60
    e646:	990a      	ldr	r1, [sp, #40]	; 0x28
    e648:	462a      	mov	r2, r5
    e64a:	f7fa f9a5 	bl	8998 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    e64e:	e7ff      	b.n	e650 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
    e650:	f24b 3060 	movw	r0, #45920	; 0xb360
    e654:	f2c0 0001 	movt	r0, #1
    e658:	f005 fb5b 	bl	13d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    e65c:	9001      	str	r0, [sp, #4]
    e65e:	e7ff      	b.n	e660 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
    e660:	a812      	add	r0, sp, #72	; 0x48
    e662:	9901      	ldr	r1, [sp, #4]
    e664:	f005 fb92 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    e668:	defe      	udf	#254	; 0xfe

0000e66a <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
    e66a:	b580      	push	{r7, lr}
    e66c:	b082      	sub	sp, #8
    e66e:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
    e670:	6800      	ldr	r0, [r0, #0]
    e672:	2100      	movs	r1, #0
    e674:	f007 fcc2 	bl	15ffc <hal_gpio_write>
    e678:	e7ff      	b.n	e67a <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
    e67a:	2001      	movs	r0, #1
        Ok(())
    }
    e67c:	b002      	add	sp, #8
    e67e:	bd80      	pop	{r7, pc}

0000e680 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
    e680:	b580      	push	{r7, lr}
    e682:	b082      	sub	sp, #8
    e684:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
    e686:	6800      	ldr	r0, [r0, #0]
    e688:	2101      	movs	r1, #1
    e68a:	f007 fcb7 	bl	15ffc <hal_gpio_write>
    e68e:	e7ff      	b.n	e690 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
    e690:	2001      	movs	r0, #1
        Ok(())
    }
    e692:	b002      	add	sp, #8
    e694:	bd80      	pop	{r7, pc}

0000e696 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
    e696:	4770      	bx	lr

0000e698 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
    e698:	b580      	push	{r7, lr}
    e69a:	b086      	sub	sp, #24
    e69c:	460a      	mov	r2, r1
    e69e:	9003      	str	r0, [sp, #12]
    e6a0:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
    e6a4:	b2c8      	uxtb	r0, r1
    e6a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e6aa:	fba0 0101 	umull	r0, r1, r0, r1
    e6ae:	2900      	cmp	r1, #0
    e6b0:	9002      	str	r0, [sp, #8]
    e6b2:	d110      	bne.n	e6d6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
    e6b4:	e7ff      	b.n	e6b6 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
    e6b6:	f644 50d3 	movw	r0, #19923	; 0x4dd3
    e6ba:	f2c1 0062 	movt	r0, #4194	; 0x1062
    e6be:	9902      	ldr	r1, [sp, #8]
    e6c0:	fba1 0200 	umull	r0, r2, r1, r0
    e6c4:	0992      	lsrs	r2, r2, #6
    e6c6:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
    e6c8:	9001      	str	r0, [sp, #4]
    e6ca:	4610      	mov	r0, r2
    e6cc:	f009 fcb4 	bl	18038 <os_time_delay>
    e6d0:	e7ff      	b.n	e6d2 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
    e6d2:	b006      	add	sp, #24
    e6d4:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
    e6d6:	f24b 3080 	movw	r0, #45952	; 0xb380
    e6da:	f2c0 0001 	movt	r0, #1
    e6de:	f24b 3270 	movw	r2, #45936	; 0xb370
    e6e2:	f2c0 0201 	movt	r2, #1
    e6e6:	2121      	movs	r1, #33	; 0x21
    e6e8:	f005 fb1a 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e6ec:	defe      	udf	#254	; 0xfe

0000e6ee <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
    e6ee:	b082      	sub	sp, #8
    e6f0:	9001      	str	r0, [sp, #4]
    e6f2:	9000      	str	r0, [sp, #0]
    e6f4:	e7ff      	b.n	e6f6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
    e6f6:	9800      	ldr	r0, [sp, #0]
    e6f8:	fab0 f180 	clz	r1, r0
    e6fc:	0948      	lsrs	r0, r1, #5
    e6fe:	b002      	add	sp, #8
    e700:	4770      	bx	lr

0000e702 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hac12a3f0eb07af6cE>:
    e702:	b084      	sub	sp, #16
    e704:	9001      	str	r0, [sp, #4]
    e706:	9102      	str	r1, [sp, #8]
    e708:	4408      	add	r0, r1
    e70a:	9003      	str	r0, [sp, #12]
    e70c:	9803      	ldr	r0, [sp, #12]
    e70e:	9000      	str	r0, [sp, #0]
    e710:	e7ff      	b.n	e712 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hac12a3f0eb07af6cE+0x10>
    e712:	9800      	ldr	r0, [sp, #0]
    e714:	b004      	add	sp, #16
    e716:	4770      	bx	lr

0000e718 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h28f25fdf3a10b211E>:
    e718:	b082      	sub	sp, #8
    e71a:	9001      	str	r0, [sp, #4]
    e71c:	9000      	str	r0, [sp, #0]
    e71e:	e7ff      	b.n	e720 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h28f25fdf3a10b211E+0x8>
    e720:	9800      	ldr	r0, [sp, #0]
    e722:	fab0 f180 	clz	r1, r0
    e726:	0948      	lsrs	r0, r1, #5
    e728:	b002      	add	sp, #8
    e72a:	4770      	bx	lr

0000e72c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17ha1a9213488b5cfb8E>:
    e72c:	b082      	sub	sp, #8
    e72e:	9001      	str	r0, [sp, #4]
    e730:	9000      	str	r0, [sp, #0]
    e732:	9800      	ldr	r0, [sp, #0]
    e734:	b002      	add	sp, #8
    e736:	4770      	bx	lr

0000e738 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hb9a699ef41e62aa9E>:
    e738:	b081      	sub	sp, #4
    e73a:	9000      	str	r0, [sp, #0]
    e73c:	b001      	add	sp, #4
    e73e:	4770      	bx	lr

0000e740 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>:
    e740:	b580      	push	{r7, lr}
    e742:	b084      	sub	sp, #16
    e744:	9002      	str	r0, [sp, #8]
    e746:	9103      	str	r1, [sp, #12]
    e748:	f000 f805 	bl	e756 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
    e74c:	9001      	str	r0, [sp, #4]
    e74e:	e7ff      	b.n	e750 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE+0x10>
    e750:	9801      	ldr	r0, [sp, #4]
    e752:	b004      	add	sp, #16
    e754:	bd80      	pop	{r7, pc}

0000e756 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>:
    e756:	b084      	sub	sp, #16
    e758:	9001      	str	r0, [sp, #4]
    e75a:	9102      	str	r1, [sp, #8]
    e75c:	4408      	add	r0, r1
    e75e:	9003      	str	r0, [sp, #12]
    e760:	9803      	ldr	r0, [sp, #12]
    e762:	9000      	str	r0, [sp, #0]
    e764:	e7ff      	b.n	e766 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE+0x10>
    e766:	9800      	ldr	r0, [sp, #0]
    e768:	b004      	add	sp, #16
    e76a:	4770      	bx	lr

0000e76c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h691a68d65b7ac2e0E>:
    e76c:	b580      	push	{r7, lr}
    e76e:	b084      	sub	sp, #16
    e770:	9002      	str	r0, [sp, #8]
    e772:	9103      	str	r1, [sp, #12]
    e774:	f000 f805 	bl	e782 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h91199f57d008dd73E>
    e778:	9001      	str	r0, [sp, #4]
    e77a:	e7ff      	b.n	e77c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h691a68d65b7ac2e0E+0x10>
    e77c:	9801      	ldr	r0, [sp, #4]
    e77e:	b004      	add	sp, #16
    e780:	bd80      	pop	{r7, pc}

0000e782 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h91199f57d008dd73E>:
    e782:	b084      	sub	sp, #16
    e784:	9001      	str	r0, [sp, #4]
    e786:	9102      	str	r1, [sp, #8]
    e788:	4408      	add	r0, r1
    e78a:	9003      	str	r0, [sp, #12]
    e78c:	9803      	ldr	r0, [sp, #12]
    e78e:	9000      	str	r0, [sp, #0]
    e790:	e7ff      	b.n	e792 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h91199f57d008dd73E+0x10>
    e792:	9800      	ldr	r0, [sp, #0]
    e794:	b004      	add	sp, #16
    e796:	4770      	bx	lr

0000e798 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h06724165ef78af3dE>:
    e798:	b082      	sub	sp, #8
    e79a:	9001      	str	r0, [sp, #4]
    e79c:	9000      	str	r0, [sp, #0]
    e79e:	e7ff      	b.n	e7a0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h06724165ef78af3dE+0x8>
    e7a0:	9800      	ldr	r0, [sp, #0]
    e7a2:	fab0 f180 	clz	r1, r0
    e7a6:	0948      	lsrs	r0, r1, #5
    e7a8:	b002      	add	sp, #8
    e7aa:	4770      	bx	lr

0000e7ac <_ZN4core3str11unwrap_or_017h4928c04127a0a0e5E>:
    e7ac:	b082      	sub	sp, #8
    e7ae:	9000      	str	r0, [sp, #0]
    e7b0:	9800      	ldr	r0, [sp, #0]
    e7b2:	2800      	cmp	r0, #0
    e7b4:	4601      	mov	r1, r0
    e7b6:	bf18      	it	ne
    e7b8:	2101      	movne	r1, #1
    e7ba:	2800      	cmp	r0, #0
    e7bc:	d001      	beq.n	e7c2 <_ZN4core3str11unwrap_or_017h4928c04127a0a0e5E+0x16>
    e7be:	e7ff      	b.n	e7c0 <_ZN4core3str11unwrap_or_017h4928c04127a0a0e5E+0x14>
    e7c0:	e004      	b.n	e7cc <_ZN4core3str11unwrap_or_017h4928c04127a0a0e5E+0x20>
    e7c2:	2000      	movs	r0, #0
    e7c4:	f88d 0006 	strb.w	r0, [sp, #6]
    e7c8:	e007      	b.n	e7da <_ZN4core3str11unwrap_or_017h4928c04127a0a0e5E+0x2e>
    e7ca:	defe      	udf	#254	; 0xfe
    e7cc:	9800      	ldr	r0, [sp, #0]
    e7ce:	7800      	ldrb	r0, [r0, #0]
    e7d0:	f88d 0007 	strb.w	r0, [sp, #7]
    e7d4:	f88d 0006 	strb.w	r0, [sp, #6]
    e7d8:	e7ff      	b.n	e7da <_ZN4core3str11unwrap_or_017h4928c04127a0a0e5E+0x2e>
    e7da:	f89d 0006 	ldrb.w	r0, [sp, #6]
    e7de:	b002      	add	sp, #8
    e7e0:	4770      	bx	lr

0000e7e2 <_ZN4core3str15next_code_point17h3f90b08743d448d4E>:
    e7e2:	b580      	push	{r7, lr}
    e7e4:	b09a      	sub	sp, #104	; 0x68
    e7e6:	9012      	str	r0, [sp, #72]	; 0x48
    e7e8:	900d      	str	r0, [sp, #52]	; 0x34
    e7ea:	f000 f9aa 	bl	eb42 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE>
    e7ee:	900c      	str	r0, [sp, #48]	; 0x30
    e7f0:	e7ff      	b.n	e7f2 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x10>
    e7f2:	980c      	ldr	r0, [sp, #48]	; 0x30
    e7f4:	f000 f991 	bl	eb1a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h4a298e2ae73b4122E>
    e7f8:	9010      	str	r0, [sp, #64]	; 0x40
    e7fa:	e7ff      	b.n	e7fc <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x1a>
    e7fc:	9810      	ldr	r0, [sp, #64]	; 0x40
    e7fe:	fab0 f180 	clz	r1, r0
    e802:	0949      	lsrs	r1, r1, #5
    e804:	2800      	cmp	r0, #0
    e806:	d101      	bne.n	e80c <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x2a>
    e808:	e7ff      	b.n	e80a <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x28>
    e80a:	e00c      	b.n	e826 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x44>
    e80c:	9810      	ldr	r0, [sp, #64]	; 0x40
    e80e:	9014      	str	r0, [sp, #80]	; 0x50
    e810:	f990 0000 	ldrsb.w	r0, [r0]
    e814:	b2c1      	uxtb	r1, r0
    e816:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
    e81a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    e81e:	910b      	str	r1, [sp, #44]	; 0x2c
    e820:	dc17      	bgt.n	e852 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x70>
    e822:	e00e      	b.n	e842 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x60>
    e824:	defe      	udf	#254	; 0xfe
    e826:	f000 f96e 	bl	eb06 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
    e82a:	e003      	b.n	e834 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x52>
    e82c:	980e      	ldr	r0, [sp, #56]	; 0x38
    e82e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e830:	b01a      	add	sp, #104	; 0x68
    e832:	bd80      	pop	{r7, pc}
    e834:	f000 f96a 	bl	eb0c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h36eac1ea773cedc8E>
    e838:	910f      	str	r1, [sp, #60]	; 0x3c
    e83a:	900e      	str	r0, [sp, #56]	; 0x38
    e83c:	e7ff      	b.n	e83e <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x5c>
    e83e:	e7ff      	b.n	e840 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x5e>
    e840:	e7f4      	b.n	e82c <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x4a>
    e842:	2102      	movs	r1, #2
    e844:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e846:	f000 f868 	bl	e91a <_ZN4core3str15utf8_first_byte17h7c04e20cd0f42409E>
    e84a:	4601      	mov	r1, r0
    e84c:	9016      	str	r0, [sp, #88]	; 0x58
    e84e:	910a      	str	r1, [sp, #40]	; 0x28
    e850:	e005      	b.n	e85e <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x7c>
    e852:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e854:	b2c1      	uxtb	r1, r0
    e856:	910f      	str	r1, [sp, #60]	; 0x3c
    e858:	2101      	movs	r1, #1
    e85a:	910e      	str	r1, [sp, #56]	; 0x38
    e85c:	e7f0      	b.n	e840 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x5e>
    e85e:	980d      	ldr	r0, [sp, #52]	; 0x34
    e860:	f000 f96f 	bl	eb42 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE>
    e864:	9009      	str	r0, [sp, #36]	; 0x24
    e866:	e7ff      	b.n	e868 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x86>
    e868:	9809      	ldr	r0, [sp, #36]	; 0x24
    e86a:	f7ff ff9f 	bl	e7ac <_ZN4core3str11unwrap_or_017h4928c04127a0a0e5E>
    e86e:	4601      	mov	r1, r0
    e870:	f88d 005e 	strb.w	r0, [sp, #94]	; 0x5e
    e874:	9108      	str	r1, [sp, #32]
    e876:	e7ff      	b.n	e878 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x96>
    e878:	980a      	ldr	r0, [sp, #40]	; 0x28
    e87a:	9908      	ldr	r1, [sp, #32]
    e87c:	f000 f85b 	bl	e936 <_ZN4core3str18utf8_acc_cont_byte17hbe5b180398a534eeE>
    e880:	9011      	str	r0, [sp, #68]	; 0x44
    e882:	e7ff      	b.n	e884 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0xa2>
    e884:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e886:	b2c1      	uxtb	r1, r0
    e888:	29e0      	cmp	r1, #224	; 0xe0
    e88a:	d341      	bcc.n	e910 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x12e>
    e88c:	e7ff      	b.n	e88e <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0xac>
    e88e:	980d      	ldr	r0, [sp, #52]	; 0x34
    e890:	f000 f957 	bl	eb42 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE>
    e894:	9007      	str	r0, [sp, #28]
    e896:	e7ff      	b.n	e898 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0xb6>
    e898:	9807      	ldr	r0, [sp, #28]
    e89a:	f7ff ff87 	bl	e7ac <_ZN4core3str11unwrap_or_017h4928c04127a0a0e5E>
    e89e:	4601      	mov	r1, r0
    e8a0:	f88d 005f 	strb.w	r0, [sp, #95]	; 0x5f
    e8a4:	9106      	str	r1, [sp, #24]
    e8a6:	e7ff      	b.n	e8a8 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0xc6>
    e8a8:	9808      	ldr	r0, [sp, #32]
    e8aa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    e8ae:	9906      	ldr	r1, [sp, #24]
    e8b0:	f000 f841 	bl	e936 <_ZN4core3str18utf8_acc_cont_byte17hbe5b180398a534eeE>
    e8b4:	4601      	mov	r1, r0
    e8b6:	9018      	str	r0, [sp, #96]	; 0x60
    e8b8:	9105      	str	r1, [sp, #20]
    e8ba:	e7ff      	b.n	e8bc <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0xda>
    e8bc:	9805      	ldr	r0, [sp, #20]
    e8be:	990a      	ldr	r1, [sp, #40]	; 0x28
    e8c0:	ea40 3201 	orr.w	r2, r0, r1, lsl #12
    e8c4:	9211      	str	r2, [sp, #68]	; 0x44
    e8c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e8c8:	b2d3      	uxtb	r3, r2
    e8ca:	2bf0      	cmp	r3, #240	; 0xf0
    e8cc:	d31f      	bcc.n	e90e <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x12c>
    e8ce:	e7ff      	b.n	e8d0 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0xee>
    e8d0:	980d      	ldr	r0, [sp, #52]	; 0x34
    e8d2:	f000 f936 	bl	eb42 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE>
    e8d6:	9004      	str	r0, [sp, #16]
    e8d8:	e7ff      	b.n	e8da <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0xf8>
    e8da:	9804      	ldr	r0, [sp, #16]
    e8dc:	f7ff ff66 	bl	e7ac <_ZN4core3str11unwrap_or_017h4928c04127a0a0e5E>
    e8e0:	4601      	mov	r1, r0
    e8e2:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
    e8e6:	9103      	str	r1, [sp, #12]
    e8e8:	e7ff      	b.n	e8ea <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x108>
    e8ea:	980a      	ldr	r0, [sp, #40]	; 0x28
    e8ec:	f000 0107 	and.w	r1, r0, #7
    e8f0:	0489      	lsls	r1, r1, #18
    e8f2:	9805      	ldr	r0, [sp, #20]
    e8f4:	9a03      	ldr	r2, [sp, #12]
    e8f6:	9102      	str	r1, [sp, #8]
    e8f8:	4611      	mov	r1, r2
    e8fa:	f000 f81c 	bl	e936 <_ZN4core3str18utf8_acc_cont_byte17hbe5b180398a534eeE>
    e8fe:	9001      	str	r0, [sp, #4]
    e900:	e7ff      	b.n	e902 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x120>
    e902:	9802      	ldr	r0, [sp, #8]
    e904:	9901      	ldr	r1, [sp, #4]
    e906:	ea40 0201 	orr.w	r2, r0, r1
    e90a:	9211      	str	r2, [sp, #68]	; 0x44
    e90c:	e7ff      	b.n	e90e <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x12c>
    e90e:	e7ff      	b.n	e910 <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x12e>
    e910:	9811      	ldr	r0, [sp, #68]	; 0x44
    e912:	900f      	str	r0, [sp, #60]	; 0x3c
    e914:	2001      	movs	r0, #1
    e916:	900e      	str	r0, [sp, #56]	; 0x38
    e918:	e788      	b.n	e82c <_ZN4core3str15next_code_point17h3f90b08743d448d4E+0x4a>

0000e91a <_ZN4core3str15utf8_first_byte17h7c04e20cd0f42409E>:
    e91a:	b082      	sub	sp, #8
    e91c:	4602      	mov	r2, r0
    e91e:	f88d 0003 	strb.w	r0, [sp, #3]
    e922:	9101      	str	r1, [sp, #4]
    e924:	f001 0107 	and.w	r1, r1, #7
    e928:	237f      	movs	r3, #127	; 0x7f
    e92a:	fa23 f101 	lsr.w	r1, r3, r1
    e92e:	4008      	ands	r0, r1
    e930:	b2c0      	uxtb	r0, r0
    e932:	b002      	add	sp, #8
    e934:	4770      	bx	lr

0000e936 <_ZN4core3str18utf8_acc_cont_byte17hbe5b180398a534eeE>:
    e936:	b082      	sub	sp, #8
    e938:	460a      	mov	r2, r1
    e93a:	9000      	str	r0, [sp, #0]
    e93c:	f88d 1007 	strb.w	r1, [sp, #7]
    e940:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    e944:	ea41 1080 	orr.w	r0, r1, r0, lsl #6
    e948:	b002      	add	sp, #8
    e94a:	4770      	bx	lr

0000e94c <_ZN4core4char7convert18from_u32_unchecked17hdfaf04c9ffabd56fE>:
    e94c:	b083      	sub	sp, #12
    e94e:	9001      	str	r0, [sp, #4]
    e950:	9002      	str	r0, [sp, #8]
    e952:	9802      	ldr	r0, [sp, #8]
    e954:	9000      	str	r0, [sp, #0]
    e956:	e7ff      	b.n	e958 <_ZN4core4char7convert18from_u32_unchecked17hdfaf04c9ffabd56fE+0xc>
    e958:	9800      	ldr	r0, [sp, #0]
    e95a:	b003      	add	sp, #12
    e95c:	4770      	bx	lr

0000e95e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h96e3034106d1de14E>:
    e95e:	b084      	sub	sp, #16
    e960:	9002      	str	r0, [sp, #8]
    e962:	9103      	str	r1, [sp, #12]
    e964:	9000      	str	r0, [sp, #0]
    e966:	9101      	str	r1, [sp, #4]
    e968:	9801      	ldr	r0, [sp, #4]
    e96a:	b004      	add	sp, #16
    e96c:	4770      	bx	lr

0000e96e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE>:
    e96e:	b580      	push	{r7, lr}
    e970:	b090      	sub	sp, #64	; 0x40
    e972:	900c      	str	r0, [sp, #48]	; 0x30
    e974:	910d      	str	r1, [sp, #52]	; 0x34
    e976:	9007      	str	r0, [sp, #28]
    e978:	9106      	str	r1, [sp, #24]
    e97a:	f000 f83b 	bl	e9f4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17he6fb0833e9643f35E>
    e97e:	4601      	mov	r1, r0
    e980:	900e      	str	r0, [sp, #56]	; 0x38
    e982:	9105      	str	r1, [sp, #20]
    e984:	e7ff      	b.n	e986 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE+0x18>
    e986:	9805      	ldr	r0, [sp, #20]
    e988:	f7ff ff06 	bl	e798 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h06724165ef78af3dE>
    e98c:	e7ff      	b.n	e98e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE+0x20>
    e98e:	e7ff      	b.n	e990 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE+0x22>
    e990:	2001      	movs	r0, #1
    e992:	900f      	str	r0, [sp, #60]	; 0x3c
    e994:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e996:	9004      	str	r0, [sp, #16]
    e998:	e7ff      	b.n	e99a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE+0x2c>
    e99a:	9804      	ldr	r0, [sp, #16]
    e99c:	2800      	cmp	r0, #0
    e99e:	d006      	beq.n	e9ae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE+0x40>
    e9a0:	e7ff      	b.n	e9a2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE+0x34>
    e9a2:	9807      	ldr	r0, [sp, #28]
    e9a4:	9906      	ldr	r1, [sp, #24]
    e9a6:	f7ff ffda 	bl	e95e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h96e3034106d1de14E>
    e9aa:	9003      	str	r0, [sp, #12]
    e9ac:	e00e      	b.n	e9cc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE+0x5e>
    e9ae:	9807      	ldr	r0, [sp, #28]
    e9b0:	9906      	ldr	r1, [sp, #24]
    e9b2:	f7ff ffd4 	bl	e95e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h96e3034106d1de14E>
    e9b6:	9002      	str	r0, [sp, #8]
    e9b8:	e7ff      	b.n	e9ba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE+0x4c>
    e9ba:	9805      	ldr	r0, [sp, #20]
    e9bc:	9902      	ldr	r1, [sp, #8]
    e9be:	f7ff febf 	bl	e740 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>
    e9c2:	9001      	str	r0, [sp, #4]
    e9c4:	e7ff      	b.n	e9c6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE+0x58>
    e9c6:	9801      	ldr	r0, [sp, #4]
    e9c8:	900a      	str	r0, [sp, #40]	; 0x28
    e9ca:	e006      	b.n	e9da <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE+0x6c>
    e9cc:	9805      	ldr	r0, [sp, #20]
    e9ce:	9903      	ldr	r1, [sp, #12]
    e9d0:	f7ff fecc 	bl	e76c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h691a68d65b7ac2e0E>
    e9d4:	900a      	str	r0, [sp, #40]	; 0x28
    e9d6:	e7ff      	b.n	e9d8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE+0x6a>
    e9d8:	e7ff      	b.n	e9da <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE+0x6c>
    e9da:	9805      	ldr	r0, [sp, #20]
    e9dc:	f7ff fea6 	bl	e72c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17ha1a9213488b5cfb8E>
    e9e0:	9000      	str	r0, [sp, #0]
    e9e2:	e7ff      	b.n	e9e4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h250c3c35b54c367bE+0x76>
    e9e4:	980a      	ldr	r0, [sp, #40]	; 0x28
    e9e6:	9900      	ldr	r1, [sp, #0]
    e9e8:	9108      	str	r1, [sp, #32]
    e9ea:	9009      	str	r0, [sp, #36]	; 0x24
    e9ec:	9808      	ldr	r0, [sp, #32]
    e9ee:	9909      	ldr	r1, [sp, #36]	; 0x24
    e9f0:	b010      	add	sp, #64	; 0x40
    e9f2:	bd80      	pop	{r7, pc}

0000e9f4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17he6fb0833e9643f35E>:
    e9f4:	b082      	sub	sp, #8
    e9f6:	9000      	str	r0, [sp, #0]
    e9f8:	9101      	str	r1, [sp, #4]
    e9fa:	b002      	add	sp, #8
    e9fc:	4770      	bx	lr

0000e9fe <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E>:
    e9fe:	b580      	push	{r7, lr}
    ea00:	b088      	sub	sp, #32
    ea02:	9001      	str	r0, [sp, #4]
    ea04:	9102      	str	r1, [sp, #8]
    ea06:	2000      	movs	r0, #0
    ea08:	f88d 0016 	strb.w	r0, [sp, #22]
    ea0c:	f88d 0017 	strb.w	r0, [sp, #23]
    ea10:	2001      	movs	r0, #1
    ea12:	f88d 0017 	strb.w	r0, [sp, #23]
    ea16:	f88d 0016 	strb.w	r0, [sp, #22]
    ea1a:	9801      	ldr	r0, [sp, #4]
    ea1c:	2800      	cmp	r0, #0
    ea1e:	d001      	beq.n	ea24 <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E+0x26>
    ea20:	e7ff      	b.n	ea22 <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E+0x24>
    ea22:	e006      	b.n	ea32 <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E+0x34>
    ea24:	2000      	movs	r0, #0
    ea26:	9003      	str	r0, [sp, #12]
    ea28:	f44f 1088 	mov.w	r0, #1114112	; 0x110000
    ea2c:	9003      	str	r0, [sp, #12]
    ea2e:	e018      	b.n	ea62 <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E+0x64>
    ea30:	defe      	udf	#254	; 0xfe
    ea32:	2000      	movs	r0, #0
    ea34:	f88d 0017 	strb.w	r0, [sp, #23]
    ea38:	9902      	ldr	r1, [sp, #8]
    ea3a:	9107      	str	r1, [sp, #28]
    ea3c:	f88d 0016 	strb.w	r0, [sp, #22]
    ea40:	9104      	str	r1, [sp, #16]
    ea42:	9804      	ldr	r0, [sp, #16]
    ea44:	f000 f873 	bl	eb2e <_ZN75_$LT$core..str..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h0400b6ad59742233E>
    ea48:	9000      	str	r0, [sp, #0]
    ea4a:	e7ff      	b.n	ea4c <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E+0x4e>
    ea4c:	9800      	ldr	r0, [sp, #0]
    ea4e:	9003      	str	r0, [sp, #12]
    ea50:	e007      	b.n	ea62 <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E+0x64>
    ea52:	9801      	ldr	r0, [sp, #4]
    ea54:	2801      	cmp	r0, #1
    ea56:	d00d      	beq.n	ea74 <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E+0x76>
    ea58:	e016      	b.n	ea88 <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E+0x8a>
    ea5a:	2000      	movs	r0, #0
    ea5c:	f88d 0016 	strb.w	r0, [sp, #22]
    ea60:	e7f7      	b.n	ea52 <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E+0x54>
    ea62:	f89d 0016 	ldrb.w	r0, [sp, #22]
    ea66:	07c0      	lsls	r0, r0, #31
    ea68:	2800      	cmp	r0, #0
    ea6a:	d1f6      	bne.n	ea5a <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E+0x5c>
    ea6c:	e7f1      	b.n	ea52 <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E+0x54>
    ea6e:	9803      	ldr	r0, [sp, #12]
    ea70:	b008      	add	sp, #32
    ea72:	bd80      	pop	{r7, pc}
    ea74:	f89d 0017 	ldrb.w	r0, [sp, #23]
    ea78:	07c0      	lsls	r0, r0, #31
    ea7a:	2800      	cmp	r0, #0
    ea7c:	d0f7      	beq.n	ea6e <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E+0x70>
    ea7e:	e7ff      	b.n	ea80 <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E+0x82>
    ea80:	2000      	movs	r0, #0
    ea82:	f88d 0017 	strb.w	r0, [sp, #23]
    ea86:	e7f2      	b.n	ea6e <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E+0x70>
    ea88:	e7f1      	b.n	ea6e <_ZN4core6option15Option$LT$T$GT$3map17hc7398c184b203260E+0x70>

0000ea8a <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E>:
    ea8a:	b085      	sub	sp, #20
    ea8c:	9000      	str	r0, [sp, #0]
    ea8e:	2000      	movs	r0, #0
    ea90:	f88d 000b 	strb.w	r0, [sp, #11]
    ea94:	f88d 000a 	strb.w	r0, [sp, #10]
    ea98:	2001      	movs	r0, #1
    ea9a:	f88d 000b 	strb.w	r0, [sp, #11]
    ea9e:	f88d 000a 	strb.w	r0, [sp, #10]
    eaa2:	9800      	ldr	r0, [sp, #0]
    eaa4:	2800      	cmp	r0, #0
    eaa6:	4601      	mov	r1, r0
    eaa8:	bf18      	it	ne
    eaaa:	2101      	movne	r1, #1
    eaac:	2800      	cmp	r0, #0
    eaae:	d001      	beq.n	eab4 <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E+0x2a>
    eab0:	e7ff      	b.n	eab2 <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E+0x28>
    eab2:	e005      	b.n	eac0 <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E+0x36>
    eab4:	2000      	movs	r0, #0
    eab6:	f88d 000a 	strb.w	r0, [sp, #10]
    eaba:	9001      	str	r0, [sp, #4]
    eabc:	e007      	b.n	eace <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E+0x44>
    eabe:	defe      	udf	#254	; 0xfe
    eac0:	2000      	movs	r0, #0
    eac2:	f88d 000b 	strb.w	r0, [sp, #11]
    eac6:	9800      	ldr	r0, [sp, #0]
    eac8:	9004      	str	r0, [sp, #16]
    eaca:	9001      	str	r0, [sp, #4]
    eacc:	e7ff      	b.n	eace <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E+0x44>
    eace:	f89d 000a 	ldrb.w	r0, [sp, #10]
    ead2:	07c0      	lsls	r0, r0, #31
    ead4:	2800      	cmp	r0, #0
    ead6:	d104      	bne.n	eae2 <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E+0x58>
    ead8:	e7ff      	b.n	eada <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E+0x50>
    eada:	9800      	ldr	r0, [sp, #0]
    eadc:	2800      	cmp	r0, #0
    eade:	d107      	bne.n	eaf0 <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E+0x66>
    eae0:	e010      	b.n	eb04 <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E+0x7a>
    eae2:	2000      	movs	r0, #0
    eae4:	f88d 000a 	strb.w	r0, [sp, #10]
    eae8:	e7f7      	b.n	eada <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E+0x50>
    eaea:	9801      	ldr	r0, [sp, #4]
    eaec:	b005      	add	sp, #20
    eaee:	4770      	bx	lr
    eaf0:	f89d 000b 	ldrb.w	r0, [sp, #11]
    eaf4:	07c0      	lsls	r0, r0, #31
    eaf6:	2800      	cmp	r0, #0
    eaf8:	d0f7      	beq.n	eaea <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E+0x60>
    eafa:	e7ff      	b.n	eafc <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E+0x72>
    eafc:	2000      	movs	r0, #0
    eafe:	f88d 000b 	strb.w	r0, [sp, #11]
    eb02:	e7f2      	b.n	eaea <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E+0x60>
    eb04:	e7f1      	b.n	eaea <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E+0x60>

0000eb06 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
    eb06:	b081      	sub	sp, #4
    eb08:	b001      	add	sp, #4
    eb0a:	4770      	bx	lr

0000eb0c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h36eac1ea773cedc8E>:
    eb0c:	b083      	sub	sp, #12
    eb0e:	2000      	movs	r0, #0
    eb10:	9000      	str	r0, [sp, #0]
    eb12:	9800      	ldr	r0, [sp, #0]
    eb14:	9901      	ldr	r1, [sp, #4]
    eb16:	b003      	add	sp, #12
    eb18:	4770      	bx	lr

0000eb1a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h4a298e2ae73b4122E>:
    eb1a:	b580      	push	{r7, lr}
    eb1c:	b082      	sub	sp, #8
    eb1e:	9001      	str	r0, [sp, #4]
    eb20:	f7ff ffb3 	bl	ea8a <_ZN4core6option15Option$LT$T$GT$5ok_or17hd4d7ff075a47c9b3E>
    eb24:	9000      	str	r0, [sp, #0]
    eb26:	e7ff      	b.n	eb28 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h4a298e2ae73b4122E+0xe>
    eb28:	9800      	ldr	r0, [sp, #0]
    eb2a:	b002      	add	sp, #8
    eb2c:	bd80      	pop	{r7, pc}

0000eb2e <_ZN75_$LT$core..str..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h0400b6ad59742233E>:
    eb2e:	b580      	push	{r7, lr}
    eb30:	b084      	sub	sp, #16
    eb32:	9003      	str	r0, [sp, #12]
    eb34:	f7ff ff0a 	bl	e94c <_ZN4core4char7convert18from_u32_unchecked17hdfaf04c9ffabd56fE>
    eb38:	9001      	str	r0, [sp, #4]
    eb3a:	e7ff      	b.n	eb3c <_ZN75_$LT$core..str..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h0400b6ad59742233E+0xe>
    eb3c:	9801      	ldr	r0, [sp, #4]
    eb3e:	b004      	add	sp, #16
    eb40:	bd80      	pop	{r7, pc}

0000eb42 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE>:
    eb42:	b580      	push	{r7, lr}
    eb44:	b08e      	sub	sp, #56	; 0x38
    eb46:	9007      	str	r0, [sp, #28]
    eb48:	6801      	ldr	r1, [r0, #0]
    eb4a:	9005      	str	r0, [sp, #20]
    eb4c:	4608      	mov	r0, r1
    eb4e:	f7ff fdf3 	bl	e738 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hb9a699ef41e62aa9E>
    eb52:	9004      	str	r0, [sp, #16]
    eb54:	e7ff      	b.n	eb56 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0x14>
    eb56:	9804      	ldr	r0, [sp, #16]
    eb58:	f7ff fdde 	bl	e718 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h28f25fdf3a10b211E>
    eb5c:	e7ff      	b.n	eb5e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0x1c>
    eb5e:	e7ff      	b.n	eb60 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0x1e>
    eb60:	2001      	movs	r0, #1
    eb62:	9008      	str	r0, [sp, #32]
    eb64:	9808      	ldr	r0, [sp, #32]
    eb66:	9003      	str	r0, [sp, #12]
    eb68:	e7ff      	b.n	eb6a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0x28>
    eb6a:	9803      	ldr	r0, [sp, #12]
    eb6c:	2800      	cmp	r0, #0
    eb6e:	d007      	beq.n	eb80 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0x3e>
    eb70:	e7ff      	b.n	eb72 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0x30>
    eb72:	9805      	ldr	r0, [sp, #20]
    eb74:	6840      	ldr	r0, [r0, #4]
    eb76:	f7ff fe0f 	bl	e798 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h06724165ef78af3dE>
    eb7a:	e7ff      	b.n	eb7c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0x3a>
    eb7c:	e7ff      	b.n	eb7e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0x3c>
    eb7e:	e7ff      	b.n	eb80 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0x3e>
    eb80:	9805      	ldr	r0, [sp, #20]
    eb82:	6800      	ldr	r0, [r0, #0]
    eb84:	f7ff fdd8 	bl	e738 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hb9a699ef41e62aa9E>
    eb88:	9002      	str	r0, [sp, #8]
    eb8a:	e7ff      	b.n	eb8c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0x4a>
    eb8c:	9805      	ldr	r0, [sp, #20]
    eb8e:	6841      	ldr	r1, [r0, #4]
    eb90:	9a02      	ldr	r2, [sp, #8]
    eb92:	428a      	cmp	r2, r1
    eb94:	d02e      	beq.n	ebf4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0xb2>
    eb96:	e7ff      	b.n	eb98 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0x56>
    eb98:	9805      	ldr	r0, [sp, #20]
    eb9a:	900a      	str	r0, [sp, #40]	; 0x28
    eb9c:	2101      	movs	r1, #1
    eb9e:	910b      	str	r1, [sp, #44]	; 0x2c
    eba0:	910d      	str	r1, [sp, #52]	; 0x34
    eba2:	990d      	ldr	r1, [sp, #52]	; 0x34
    eba4:	2900      	cmp	r1, #0
    eba6:	d015      	beq.n	ebd4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0x92>
    eba8:	e7ff      	b.n	ebaa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0x68>
    ebaa:	9805      	ldr	r0, [sp, #20]
    ebac:	6800      	ldr	r0, [r0, #0]
    ebae:	f7ff fdc3 	bl	e738 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hb9a699ef41e62aa9E>
    ebb2:	900c      	str	r0, [sp, #48]	; 0x30
    ebb4:	9905      	ldr	r1, [sp, #20]
    ebb6:	680a      	ldr	r2, [r1, #0]
    ebb8:	9001      	str	r0, [sp, #4]
    ebba:	4610      	mov	r0, r2
    ebbc:	f7ff fdbc 	bl	e738 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hb9a699ef41e62aa9E>
    ebc0:	2101      	movs	r1, #1
    ebc2:	f7ff fd9e 	bl	e702 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hac12a3f0eb07af6cE>
    ebc6:	f7ff fdb1 	bl	e72c <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17ha1a9213488b5cfb8E>
    ebca:	9905      	ldr	r1, [sp, #20]
    ebcc:	6008      	str	r0, [r1, #0]
    ebce:	9801      	ldr	r0, [sp, #4]
    ebd0:	9009      	str	r0, [sp, #36]	; 0x24
    ebd2:	e00c      	b.n	ebee <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0xac>
    ebd4:	9805      	ldr	r0, [sp, #20]
    ebd6:	6840      	ldr	r0, [r0, #4]
    ebd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ebdc:	f7ff fdbb 	bl	e756 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
    ebe0:	9905      	ldr	r1, [sp, #20]
    ebe2:	6048      	str	r0, [r1, #4]
    ebe4:	6808      	ldr	r0, [r1, #0]
    ebe6:	f7ff fda7 	bl	e738 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17hb9a699ef41e62aa9E>
    ebea:	9009      	str	r0, [sp, #36]	; 0x24
    ebec:	e7ff      	b.n	ebee <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0xac>
    ebee:	9809      	ldr	r0, [sp, #36]	; 0x24
    ebf0:	9000      	str	r0, [sp, #0]
    ebf2:	e002      	b.n	ebfa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0xb8>
    ebf4:	2000      	movs	r0, #0
    ebf6:	9006      	str	r0, [sp, #24]
    ebf8:	e002      	b.n	ec00 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0xbe>
    ebfa:	9800      	ldr	r0, [sp, #0]
    ebfc:	9006      	str	r0, [sp, #24]
    ebfe:	e7ff      	b.n	ec00 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h65dffdaf7d5fac4dE+0xbe>
    ec00:	9806      	ldr	r0, [sp, #24]
    ec02:	b00e      	add	sp, #56	; 0x38
    ec04:	bd80      	pop	{r7, pc}

0000ec06 <_ZN106_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hbb46c11534efa1f0E>:
    _conf: PhantomData<Conf>,
}

impl<'a, C: PixelColor + Copy, Conf> Copy for FontBuilder<'a, C, Conf> {}
impl<'a, C: PixelColor + Clone, Conf> Clone for FontBuilder<'a, C, Conf> {
    fn clone(&self) -> Self {
    ec06:	b510      	push	{r4, lr}
    ec08:	b08a      	sub	sp, #40	; 0x28
    ec0a:	9109      	str	r1, [sp, #36]	; 0x24
        Self {
            pos: self.pos,
    ec0c:	680a      	ldr	r2, [r1, #0]
    ec0e:	684b      	ldr	r3, [r1, #4]
            text: self.text,
    ec10:	f8d1 c008 	ldr.w	ip, [r1, #8]
    ec14:	f8d1 e00c 	ldr.w	lr, [r1, #12]
            style: self.style.clone(),
    ec18:	3110      	adds	r1, #16
    ec1a:	ac06      	add	r4, sp, #24
    ec1c:	9005      	str	r0, [sp, #20]
    ec1e:	4620      	mov	r0, r4
    ec20:	9204      	str	r2, [sp, #16]
    ec22:	9303      	str	r3, [sp, #12]
    ec24:	f8cd c008 	str.w	ip, [sp, #8]
    ec28:	f8cd e004 	str.w	lr, [sp, #4]
    ec2c:	f002 fec2 	bl	119b4 <_ZN79_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7298be2e66d2e6f3E>
    ec30:	e7ff      	b.n	ec32 <_ZN106_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hbb46c11534efa1f0E+0x2c>
            _conf: Default::default(),
    ec32:	f002 f8c1 	bl	10db8 <_ZN77_$LT$core..marker..PhantomData$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17hf965c475a96f2137E>
    ec36:	e7ff      	b.n	ec38 <_ZN106_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hbb46c11534efa1f0E+0x32>
        Self {
    ec38:	9804      	ldr	r0, [sp, #16]
    ec3a:	9905      	ldr	r1, [sp, #20]
    ec3c:	6008      	str	r0, [r1, #0]
    ec3e:	9a03      	ldr	r2, [sp, #12]
    ec40:	604a      	str	r2, [r1, #4]
    ec42:	9b02      	ldr	r3, [sp, #8]
    ec44:	608b      	str	r3, [r1, #8]
    ec46:	f8dd c004 	ldr.w	ip, [sp, #4]
    ec4a:	f8c1 c00c 	str.w	ip, [r1, #12]
    ec4e:	f8bd e020 	ldrh.w	lr, [sp, #32]
    ec52:	f8a1 e018 	strh.w	lr, [r1, #24]
    ec56:	f8dd e018 	ldr.w	lr, [sp, #24]
    ec5a:	9c07      	ldr	r4, [sp, #28]
    ec5c:	614c      	str	r4, [r1, #20]
    ec5e:	f8c1 e010 	str.w	lr, [r1, #16]
        }
    }
    ec62:	b00a      	add	sp, #40	; 0x28
    ec64:	bd10      	pop	{r4, pc}

0000ec66 <_ZN127_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..fonts..Font$LT$C$GT$$GT$10render_str17h35bcfccc03ed936fE>:
impl<'a, C, Conf> Font<'a, C> for FontBuilder<'a, C, Conf>
where
    C: PixelColor,
    Conf: FontBuilderConf,
{
    fn render_str(text: &'a str) -> Self {
    ec66:	b510      	push	{r4, lr}
    ec68:	b08a      	sub	sp, #40	; 0x28
    ec6a:	9108      	str	r1, [sp, #32]
    ec6c:	9209      	str	r2, [sp, #36]	; 0x24
    ec6e:	2300      	movs	r3, #0
        Self {
            pos: Coord::new(0, 0),
    ec70:	9004      	str	r0, [sp, #16]
    ec72:	4618      	mov	r0, r3
    ec74:	9103      	str	r1, [sp, #12]
    ec76:	4619      	mov	r1, r3
    ec78:	9202      	str	r2, [sp, #8]
    ec7a:	f7fd f9fb 	bl	c074 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    ec7e:	9001      	str	r0, [sp, #4]
    ec80:	9100      	str	r1, [sp, #0]
    ec82:	e7ff      	b.n	ec84 <_ZN127_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..fonts..Font$LT$C$GT$$GT$10render_str17h35bcfccc03ed936fE+0x1e>
    ec84:	a805      	add	r0, sp, #20
            text,
            style: Style::default(),
    ec86:	f002 fec6 	bl	11a16 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
    ec8a:	e7ff      	b.n	ec8c <_ZN127_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..fonts..Font$LT$C$GT$$GT$10render_str17h35bcfccc03ed936fE+0x26>
            _conf: Default::default(),
    ec8c:	f002 f894 	bl	10db8 <_ZN77_$LT$core..marker..PhantomData$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17hf965c475a96f2137E>
    ec90:	e7ff      	b.n	ec92 <_ZN127_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..fonts..Font$LT$C$GT$$GT$10render_str17h35bcfccc03ed936fE+0x2c>
        Self {
    ec92:	9801      	ldr	r0, [sp, #4]
    ec94:	9904      	ldr	r1, [sp, #16]
    ec96:	6008      	str	r0, [r1, #0]
    ec98:	9a00      	ldr	r2, [sp, #0]
    ec9a:	604a      	str	r2, [r1, #4]
    ec9c:	9b03      	ldr	r3, [sp, #12]
    ec9e:	608b      	str	r3, [r1, #8]
    eca0:	f8dd c008 	ldr.w	ip, [sp, #8]
    eca4:	f8c1 c00c 	str.w	ip, [r1, #12]
    eca8:	f8bd e01c 	ldrh.w	lr, [sp, #28]
    ecac:	f8a1 e018 	strh.w	lr, [r1, #24]
    ecb0:	f8dd e014 	ldr.w	lr, [sp, #20]
    ecb4:	9c06      	ldr	r4, [sp, #24]
    ecb6:	614c      	str	r4, [r1, #20]
    ecb8:	f8c1 e010 	str.w	lr, [r1, #16]
        }
    }
    ecbc:	b00a      	add	sp, #40	; 0x28
    ecbe:	bd10      	pop	{r4, pc}

0000ecc0 <_ZN127_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..transform..Transform$GT$9translate17h41f7fc2ef13b72b5E>:
    /// let moved = text.translate(Coord::new(25, 30));
    ///
    /// assert_eq!(text.pos, Coord::new(0, 0));
    /// assert_eq!(moved.pos, Coord::new(25, 30));
    /// ```
    fn translate(&self, by: Coord) -> Self {
    ecc0:	b580      	push	{r7, lr}
    ecc2:	b08e      	sub	sp, #56	; 0x38
    ecc4:	910b      	str	r1, [sp, #44]	; 0x2c
    ecc6:	920c      	str	r2, [sp, #48]	; 0x30
    ecc8:	930d      	str	r3, [sp, #52]	; 0x34
        Self {
            pos: self.pos + by,
    ecca:	f8d1 c000 	ldr.w	ip, [r1]
    ecce:	f8d1 e004 	ldr.w	lr, [r1, #4]
    ecd2:	9003      	str	r0, [sp, #12]
    ecd4:	4660      	mov	r0, ip
    ecd6:	9102      	str	r1, [sp, #8]
    ecd8:	4671      	mov	r1, lr
    ecda:	f7fd f9d4 	bl	c086 <_ZN89_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..arith..Add$GT$3add17hab4ee8a701a8c787E>
    ecde:	9001      	str	r0, [sp, #4]
    ece0:	9100      	str	r1, [sp, #0]
    ece2:	e7ff      	b.n	ece4 <_ZN127_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..transform..Transform$GT$9translate17h41f7fc2ef13b72b5E+0x24>
    ece4:	a804      	add	r0, sp, #16
            ..self.clone()
    ece6:	9902      	ldr	r1, [sp, #8]
    ece8:	f7ff ff8d 	bl	ec06 <_ZN106_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hbb46c11534efa1f0E>
    ecec:	e7ff      	b.n	ecee <_ZN127_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..transform..Transform$GT$9translate17h41f7fc2ef13b72b5E+0x2e>
        Self {
    ecee:	9801      	ldr	r0, [sp, #4]
    ecf0:	9903      	ldr	r1, [sp, #12]
    ecf2:	6008      	str	r0, [r1, #0]
    ecf4:	9a00      	ldr	r2, [sp, #0]
    ecf6:	604a      	str	r2, [r1, #4]
    ecf8:	9b06      	ldr	r3, [sp, #24]
    ecfa:	f8dd c01c 	ldr.w	ip, [sp, #28]
    ecfe:	608b      	str	r3, [r1, #8]
    ed00:	f8c1 c00c 	str.w	ip, [r1, #12]
    ed04:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ed08:	830b      	strh	r3, [r1, #24]
    ed0a:	9b08      	ldr	r3, [sp, #32]
    ed0c:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    ed10:	f8c1 c014 	str.w	ip, [r1, #20]
    ed14:	610b      	str	r3, [r1, #16]
        }
    }
    ed16:	b00e      	add	sp, #56	; 0x38
    ed18:	bd80      	pop	{r7, pc}

0000ed1a <_ZN129_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hd063247fe992676fE>:
    fn into_iter(self) -> Self::IntoIter {
    ed1a:	b5b0      	push	{r4, r5, r7, lr}
    ed1c:	b08c      	sub	sp, #48	; 0x30
            current_char: self.text.chars().next(),
    ed1e:	688a      	ldr	r2, [r1, #8]
    ed20:	68cb      	ldr	r3, [r1, #12]
    ed22:	9006      	str	r0, [sp, #24]
    ed24:	4610      	mov	r0, r2
    ed26:	9105      	str	r1, [sp, #20]
    ed28:	4619      	mov	r1, r3
    ed2a:	f7fb fbb6 	bl	a49a <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h5612c26d24354453E>
    ed2e:	9108      	str	r1, [sp, #32]
    ed30:	9007      	str	r0, [sp, #28]
    ed32:	e7ff      	b.n	ed34 <_ZN129_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hd063247fe992676fE+0x1a>
    ed34:	a807      	add	r0, sp, #28
    ed36:	f7fb fbcc 	bl	a4d2 <_ZN75_$LT$core..str..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h90c7de42971d7e48E>
    ed3a:	9004      	str	r0, [sp, #16]
    ed3c:	e7ff      	b.n	ed3e <_ZN129_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hd063247fe992676fE+0x24>
            pos: self.pos,
    ed3e:	9805      	ldr	r0, [sp, #20]
    ed40:	6801      	ldr	r1, [r0, #0]
    ed42:	6842      	ldr	r2, [r0, #4]
            text: self.text,
    ed44:	6883      	ldr	r3, [r0, #8]
    ed46:	f8d0 c00c 	ldr.w	ip, [r0, #12]
            style: self.style,
    ed4a:	f8b0 e018 	ldrh.w	lr, [r0, #24]
    ed4e:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
    ed52:	f8d0 e010 	ldr.w	lr, [r0, #16]
    ed56:	6944      	ldr	r4, [r0, #20]
    ed58:	940a      	str	r4, [sp, #40]	; 0x28
    ed5a:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
            _conf: Default::default(),
    ed5e:	9103      	str	r1, [sp, #12]
    ed60:	9202      	str	r2, [sp, #8]
    ed62:	9301      	str	r3, [sp, #4]
    ed64:	f8cd c000 	str.w	ip, [sp]
    ed68:	f002 f826 	bl	10db8 <_ZN77_$LT$core..marker..PhantomData$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17hf965c475a96f2137E>
    ed6c:	e7ff      	b.n	ed6e <_ZN129_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hd063247fe992676fE+0x54>
    ed6e:	2000      	movs	r0, #0
        Self::IntoIter {
    ed70:	9906      	ldr	r1, [sp, #24]
    ed72:	6008      	str	r0, [r1, #0]
    ed74:	6048      	str	r0, [r1, #4]
    ed76:	9a04      	ldr	r2, [sp, #16]
    ed78:	608a      	str	r2, [r1, #8]
    ed7a:	60c8      	str	r0, [r1, #12]
    ed7c:	9803      	ldr	r0, [sp, #12]
    ed7e:	6108      	str	r0, [r1, #16]
    ed80:	9b02      	ldr	r3, [sp, #8]
    ed82:	614b      	str	r3, [r1, #20]
    ed84:	f8dd c004 	ldr.w	ip, [sp, #4]
    ed88:	f8c1 c018 	str.w	ip, [r1, #24]
    ed8c:	f8dd e000 	ldr.w	lr, [sp]
    ed90:	f8c1 e01c 	str.w	lr, [r1, #28]
    ed94:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
    ed98:	850c      	strh	r4, [r1, #40]	; 0x28
    ed9a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    ed9c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ed9e:	624d      	str	r5, [r1, #36]	; 0x24
    eda0:	620c      	str	r4, [r1, #32]
    }
    eda2:	b00c      	add	sp, #48	; 0x30
    eda4:	bdb0      	pop	{r4, r5, r7, pc}

0000eda6 <_ZN132_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17h0c5fde36a685a59fE>:
    fn fill(mut self, color: Option<C>) -> Self {
    eda6:	b5b0      	push	{r4, r5, r7, lr}
    eda8:	b081      	sub	sp, #4
    edaa:	469c      	mov	ip, r3
    edac:	4696      	mov	lr, r2
    edae:	f8ad 2000 	strh.w	r2, [sp]
    edb2:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
    edb6:	820a      	strh	r2, [r1, #16]
    edb8:	824b      	strh	r3, [r1, #18]
        self
    edba:	c91c      	ldmia	r1!, {r2, r3, r4}
    edbc:	c01c      	stmia	r0!, {r2, r3, r4}
    edbe:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
    edc2:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
    edc6:	b001      	add	sp, #4
    edc8:	bdb0      	pop	{r4, r5, r7, pc}

0000edca <_ZN132_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$6stroke17h533a8dd4991b2a2aE>:
    fn stroke(mut self, color: Option<C>) -> Self {
    edca:	b5b0      	push	{r4, r5, r7, lr}
    edcc:	b081      	sub	sp, #4
    edce:	469c      	mov	ip, r3
    edd0:	4696      	mov	lr, r2
    edd2:	f8ad 2000 	strh.w	r2, [sp]
    edd6:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.stroke_color = color;
    edda:	828a      	strh	r2, [r1, #20]
    eddc:	82cb      	strh	r3, [r1, #22]
        self
    edde:	c91c      	ldmia	r1!, {r2, r3, r4}
    ede0:	c01c      	stmia	r0!, {r2, r3, r4}
    ede2:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
    ede6:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
    edea:	b001      	add	sp, #4
    edec:	bdb0      	pop	{r4, r5, r7, pc}

0000edee <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E>:
    fn next(&mut self) -> Option<Self::Item> {
    edee:	b580      	push	{r7, lr}
    edf0:	b0c8      	sub	sp, #288	; 0x120
    edf2:	913b      	str	r1, [sp, #236]	; 0xec
        if self.pos[0] + (self.text.len() as i32 * Conf::CHAR_WIDTH as i32) <= 0
    edf4:	f101 0210 	add.w	r2, r1, #16
    edf8:	2300      	movs	r3, #0
    edfa:	902d      	str	r0, [sp, #180]	; 0xb4
    edfc:	4610      	mov	r0, r2
    edfe:	912c      	str	r1, [sp, #176]	; 0xb0
    ee00:	4619      	mov	r1, r3
    ee02:	f7fd f97a 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    ee06:	902b      	str	r0, [sp, #172]	; 0xac
    ee08:	e014      	b.n	ee34 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x46>
    ee0a:	2001      	movs	r0, #1
    ee0c:	f88d 00bb 	strb.w	r0, [sp, #187]	; 0xbb
    ee10:	e00a      	b.n	ee28 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x3a>
    ee12:	2000      	movs	r0, #0
    ee14:	f88d 00bb 	strb.w	r0, [sp, #187]	; 0xbb
    ee18:	e006      	b.n	ee28 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x3a>
            || self.pos[1] + (Conf::CHAR_HEIGHT as i32) <= 0
    ee1a:	982c      	ldr	r0, [sp, #176]	; 0xb0
    ee1c:	3010      	adds	r0, #16
    ee1e:	2101      	movs	r1, #1
    ee20:	f7fd f96b 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    ee24:	902a      	str	r0, [sp, #168]	; 0xa8
    ee26:	e02a      	b.n	ee7e <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x90>
        if self.pos[0] + (self.text.len() as i32 * Conf::CHAR_WIDTH as i32) <= 0
    ee28:	f89d 00bb 	ldrb.w	r0, [sp, #187]	; 0xbb
    ee2c:	07c0      	lsls	r0, r0, #31
    ee2e:	2800      	cmp	r0, #0
    ee30:	d134      	bne.n	ee9c <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0xae>
    ee32:	e032      	b.n	ee9a <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0xac>
    ee34:	982b      	ldr	r0, [sp, #172]	; 0xac
    ee36:	6801      	ldr	r1, [r0, #0]
    ee38:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    ee3a:	6990      	ldr	r0, [r2, #24]
    ee3c:	69d3      	ldr	r3, [r2, #28]
    ee3e:	9129      	str	r1, [sp, #164]	; 0xa4
    ee40:	4619      	mov	r1, r3
    ee42:	f7fb fb14 	bl	a46e <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h526d0e5e5afce60aE>
    ee46:	9028      	str	r0, [sp, #160]	; 0xa0
    ee48:	e7ff      	b.n	ee4a <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x5c>
    ee4a:	200c      	movs	r0, #12
    ee4c:	9928      	ldr	r1, [sp, #160]	; 0xa0
    ee4e:	fb81 0200 	smull	r0, r2, r1, r0
    ee52:	eb01 0341 	add.w	r3, r1, r1, lsl #1
    ee56:	009b      	lsls	r3, r3, #2
    ee58:	ebb2 7fe0 	cmp.w	r2, r0, asr #31
    ee5c:	9327      	str	r3, [sp, #156]	; 0x9c
    ee5e:	f040 81d4 	bne.w	f20a <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x41c>
    ee62:	e7ff      	b.n	ee64 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x76>
    ee64:	9829      	ldr	r0, [sp, #164]	; 0xa4
    ee66:	9927      	ldr	r1, [sp, #156]	; 0x9c
    ee68:	1842      	adds	r2, r0, r1
    ee6a:	4613      	mov	r3, r2
    ee6c:	4282      	cmp	r2, r0
    ee6e:	9326      	str	r3, [sp, #152]	; 0x98
    ee70:	f180 81d7 	bvs.w	f222 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x434>
    ee74:	e7ff      	b.n	ee76 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x88>
    ee76:	9826      	ldr	r0, [sp, #152]	; 0x98
    ee78:	2801      	cmp	r0, #1
    ee7a:	dbc6      	blt.n	ee0a <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x1c>
    ee7c:	e7cd      	b.n	ee1a <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x2c>
            || self.pos[1] + (Conf::CHAR_HEIGHT as i32) <= 0
    ee7e:	982a      	ldr	r0, [sp, #168]	; 0xa8
    ee80:	6801      	ldr	r1, [r0, #0]
    ee82:	f101 0210 	add.w	r2, r1, #16
    ee86:	4613      	mov	r3, r2
    ee88:	428a      	cmp	r2, r1
    ee8a:	9325      	str	r3, [sp, #148]	; 0x94
    ee8c:	f180 81d5 	bvs.w	f23a <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x44c>
    ee90:	e7ff      	b.n	ee92 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0xa4>
        if self.pos[0] + (self.text.len() as i32 * Conf::CHAR_WIDTH as i32) <= 0
    ee92:	9825      	ldr	r0, [sp, #148]	; 0x94
    ee94:	2801      	cmp	r0, #1
    ee96:	dbb8      	blt.n	ee0a <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x1c>
    ee98:	e7bb      	b.n	ee12 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x24>
        let char_per_row = Conf::FONT_IMAGE_WIDTH / Conf::CHAR_WIDTH;
    ee9a:	e005      	b.n	eea8 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0xba>
    ee9c:	2000      	movs	r0, #0
            return None;
    ee9e:	992d      	ldr	r1, [sp, #180]	; 0xb4
    eea0:	6008      	str	r0, [r1, #0]
    eea2:	e7ff      	b.n	eea4 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0xb6>
    }
    eea4:	b048      	add	sp, #288	; 0x120
    eea6:	bd80      	pop	{r7, pc}
    eea8:	2028      	movs	r0, #40	; 0x28
        let char_per_row = Conf::FONT_IMAGE_WIDTH / Conf::CHAR_WIDTH;
    eeaa:	903c      	str	r0, [sp, #240]	; 0xf0
        let pixel = loop {
    eeac:	e00e      	b.n	eecc <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0xde>
        pixel
    eeae:	982f      	ldr	r0, [sp, #188]	; 0xbc
    eeb0:	9930      	ldr	r1, [sp, #192]	; 0xc0
    eeb2:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    eeb4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    eeb6:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
    eeba:	f8cc 300c 	str.w	r3, [ip, #12]
    eebe:	f8cc 2008 	str.w	r2, [ip, #8]
    eec2:	f8cc 1004 	str.w	r1, [ip, #4]
    eec6:	f8cc 0000 	str.w	r0, [ip]
    }
    eeca:	e7eb      	b.n	eea4 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0xb6>
            if let Some(current_char) = self.current_char {
    eecc:	982c      	ldr	r0, [sp, #176]	; 0xb0
    eece:	6881      	ldr	r1, [r0, #8]
    eed0:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
    eed4:	d103      	bne.n	eede <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0xf0>
    eed6:	e7ff      	b.n	eed8 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0xea>
    eed8:	2000      	movs	r0, #0
                break None;
    eeda:	902f      	str	r0, [sp, #188]	; 0xbc
    eedc:	e7e7      	b.n	eeae <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0xc0>
            if let Some(current_char) = self.current_char {
    eede:	982c      	ldr	r0, [sp, #176]	; 0xb0
    eee0:	6881      	ldr	r1, [r0, #8]
    eee2:	913d      	str	r1, [sp, #244]	; 0xf4
                let char_offset = Conf::char_offset(current_char);
    eee4:	4608      	mov	r0, r1
    eee6:	f7fd f97a 	bl	c1de <_ZN126_$LT$embedded_graphics..fonts..font12x16..Font12x16Conf$u20$as$u20$embedded_graphics..fonts..font_builder..FontBuilderConf$GT$11char_offset17hb09a44d3d4c791ccE>
    eeea:	4601      	mov	r1, r0
    eeec:	903e      	str	r0, [sp, #248]	; 0xf8
    eeee:	9124      	str	r1, [sp, #144]	; 0x90
    eef0:	e7ff      	b.n	eef2 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x104>
                let row = char_offset / char_per_row;
    eef2:	e7ff      	b.n	eef4 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x106>
    eef4:	f64c 40cd 	movw	r0, #52429	; 0xcccd
    eef8:	f6cc 40cc 	movt	r0, #52428	; 0xcccc
    eefc:	9924      	ldr	r1, [sp, #144]	; 0x90
    eefe:	fba1 0200 	umull	r0, r2, r1, r0
    ef02:	0952      	lsrs	r2, r2, #5
    ef04:	4613      	mov	r3, r2
    ef06:	923f      	str	r2, [sp, #252]	; 0xfc
    ef08:	f04f 0c28 	mov.w	ip, #40	; 0x28
                let char_x = (char_offset - (row * char_per_row)) * Conf::CHAR_WIDTH;
    ef0c:	fba2 2c0c 	umull	r2, ip, r2, ip
    ef10:	f1bc 0f00 	cmp.w	ip, #0
    ef14:	9323      	str	r3, [sp, #140]	; 0x8c
    ef16:	9222      	str	r2, [sp, #136]	; 0x88
    ef18:	f040 819b 	bne.w	f252 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x464>
    ef1c:	e7ff      	b.n	ef1e <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x130>
    ef1e:	9824      	ldr	r0, [sp, #144]	; 0x90
    ef20:	9922      	ldr	r1, [sp, #136]	; 0x88
    ef22:	1a42      	subs	r2, r0, r1
    ef24:	4288      	cmp	r0, r1
    ef26:	9221      	str	r2, [sp, #132]	; 0x84
    ef28:	f0c0 819f 	bcc.w	f26a <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x47c>
    ef2c:	e7ff      	b.n	ef2e <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x140>
    ef2e:	200c      	movs	r0, #12
    ef30:	9921      	ldr	r1, [sp, #132]	; 0x84
    ef32:	fba1 0200 	umull	r0, r2, r1, r0
    ef36:	2a00      	cmp	r2, #0
    ef38:	9020      	str	r0, [sp, #128]	; 0x80
    ef3a:	f040 81a2 	bne.w	f282 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x494>
    ef3e:	e7ff      	b.n	ef40 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x152>
    ef40:	9820      	ldr	r0, [sp, #128]	; 0x80
    ef42:	9040      	str	r0, [sp, #256]	; 0x100
                let char_y = row * Conf::CHAR_HEIGHT;
    ef44:	9923      	ldr	r1, [sp, #140]	; 0x8c
    ef46:	010a      	lsls	r2, r1, #4
    ef48:	0f0b      	lsrs	r3, r1, #28
    ef4a:	2b00      	cmp	r3, #0
    ef4c:	921f      	str	r2, [sp, #124]	; 0x7c
    ef4e:	f040 81a4 	bne.w	f29a <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x4ac>
    ef52:	e7ff      	b.n	ef54 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x166>
    ef54:	981f      	ldr	r0, [sp, #124]	; 0x7c
    ef56:	9041      	str	r0, [sp, #260]	; 0x104
    ef58:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
                    + (Conf::FONT_IMAGE_WIDTH * char_y)
    ef5c:	fba1 1200 	umull	r1, r2, r1, r0
    ef60:	2a00      	cmp	r2, #0
    ef62:	911e      	str	r1, [sp, #120]	; 0x78
    ef64:	f040 81a5 	bne.w	f2b2 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x4c4>
    ef68:	e7ff      	b.n	ef6a <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x17c>
                let bitmap_bit_index = char_x
    ef6a:	9820      	ldr	r0, [sp, #128]	; 0x80
    ef6c:	991e      	ldr	r1, [sp, #120]	; 0x78
    ef6e:	1842      	adds	r2, r0, r1
    ef70:	4613      	mov	r3, r2
    ef72:	4282      	cmp	r2, r0
    ef74:	931d      	str	r3, [sp, #116]	; 0x74
    ef76:	f0c0 81a8 	bcc.w	f2ca <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x4dc>
    ef7a:	e7ff      	b.n	ef7c <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x18e>
                    + self.char_walk_x
    ef7c:	982c      	ldr	r0, [sp, #176]	; 0xb0
    ef7e:	6801      	ldr	r1, [r0, #0]
                let bitmap_bit_index = char_x
    ef80:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    ef82:	4411      	add	r1, r2
    ef84:	460b      	mov	r3, r1
    ef86:	4291      	cmp	r1, r2
    ef88:	931c      	str	r3, [sp, #112]	; 0x70
    ef8a:	f0c0 81aa 	bcc.w	f2e2 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x4f4>
    ef8e:	e7ff      	b.n	ef90 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x1a2>
                    + (self.char_walk_y * Conf::FONT_IMAGE_WIDTH);
    ef90:	982c      	ldr	r0, [sp, #176]	; 0xb0
    ef92:	6841      	ldr	r1, [r0, #4]
    ef94:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    ef98:	fba1 1202 	umull	r1, r2, r1, r2
    ef9c:	2a00      	cmp	r2, #0
    ef9e:	911b      	str	r1, [sp, #108]	; 0x6c
    efa0:	f040 81ab 	bne.w	f2fa <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x50c>
    efa4:	e7ff      	b.n	efa6 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x1b8>
                let bitmap_bit_index = char_x
    efa6:	981c      	ldr	r0, [sp, #112]	; 0x70
    efa8:	991b      	ldr	r1, [sp, #108]	; 0x6c
    efaa:	1842      	adds	r2, r0, r1
    efac:	4613      	mov	r3, r2
    efae:	4282      	cmp	r2, r0
    efb0:	931a      	str	r3, [sp, #104]	; 0x68
    efb2:	f0c0 81ae 	bcc.w	f312 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x524>
    efb6:	e7ff      	b.n	efb8 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x1ca>
    efb8:	981a      	ldr	r0, [sp, #104]	; 0x68
    efba:	9042      	str	r0, [sp, #264]	; 0x108
                let bitmap_byte = bitmap_bit_index / 8;
    efbc:	08c1      	lsrs	r1, r0, #3
    efbe:	460a      	mov	r2, r1
    efc0:	9143      	str	r1, [sp, #268]	; 0x10c
                let bitmap_bit = 7 - (bitmap_bit_index % 8);
    efc2:	f000 0107 	and.w	r1, r0, #7
    efc6:	f1c1 0307 	rsb	r3, r1, #7
    efca:	f04f 0c07 	mov.w	ip, #7
    efce:	458c      	cmp	ip, r1
    efd0:	9219      	str	r2, [sp, #100]	; 0x64
    efd2:	9318      	str	r3, [sp, #96]	; 0x60
    efd4:	f0c0 81a9 	bcc.w	f32a <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x53c>
    efd8:	e7ff      	b.n	efda <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x1ec>
    efda:	9818      	ldr	r0, [sp, #96]	; 0x60
    efdc:	9044      	str	r0, [sp, #272]	; 0x110
                let color = if Conf::FONT_IMAGE[bitmap_byte as usize] & (1 << bitmap_bit) != 0 {
    efde:	9919      	ldr	r1, [sp, #100]	; 0x64
    efe0:	098a      	lsrs	r2, r1, #6
    efe2:	2a4a      	cmp	r2, #74	; 0x4a
    efe4:	f200 81ad 	bhi.w	f342 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x554>
    efe8:	e7ff      	b.n	efea <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x1fc>
    efea:	f24b 5024 	movw	r0, #46372	; 0xb524
    efee:	f2c0 0001 	movt	r0, #1
    eff2:	9919      	ldr	r1, [sp, #100]	; 0x64
    eff4:	5c40      	ldrb	r0, [r0, r1]
    eff6:	9a18      	ldr	r2, [sp, #96]	; 0x60
    eff8:	f002 0307 	and.w	r3, r2, #7
    effc:	f04f 0c01 	mov.w	ip, #1
    f000:	fa0c f303 	lsl.w	r3, ip, r3
    f004:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
    f008:	f1bc 0f00 	cmp.w	ip, #0
    f00c:	9017      	str	r0, [sp, #92]	; 0x5c
    f00e:	9316      	str	r3, [sp, #88]	; 0x58
    f010:	f040 81a1 	bne.w	f356 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x568>
    f014:	e7ff      	b.n	f016 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x228>
    f016:	9817      	ldr	r0, [sp, #92]	; 0x5c
    f018:	9916      	ldr	r1, [sp, #88]	; 0x58
    f01a:	ea00 0201 	and.w	r2, r0, r1
    f01e:	0612      	lsls	r2, r2, #24
    f020:	2a00      	cmp	r2, #0
    f022:	d108      	bne.n	f036 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x248>
    f024:	e7ff      	b.n	f026 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x238>
                    self.style.fill_color
    f026:	982c      	ldr	r0, [sp, #176]	; 0xb0
    f028:	8c01      	ldrh	r1, [r0, #32]
    f02a:	8c42      	ldrh	r2, [r0, #34]	; 0x22
    f02c:	f8ad 10cc 	strh.w	r1, [sp, #204]	; 0xcc
    f030:	f8ad 20ce 	strh.w	r2, [sp, #206]	; 0xce
                let color = if Conf::FONT_IMAGE[bitmap_byte as usize] & (1 << bitmap_bit) != 0 {
    f034:	e017      	b.n	f066 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x278>
                    Some(self.style.stroke_color.unwrap_or(1.into())) // white
    f036:	982c      	ldr	r0, [sp, #176]	; 0xb0
    f038:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    f03a:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
    f03c:	2001      	movs	r0, #1
    f03e:	9115      	str	r1, [sp, #84]	; 0x54
    f040:	9214      	str	r2, [sp, #80]	; 0x50
    f042:	f002 fcaa 	bl	1199a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h542235707a00637fE>
    f046:	9013      	str	r0, [sp, #76]	; 0x4c
    f048:	e7ff      	b.n	f04a <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x25c>
    f04a:	9815      	ldr	r0, [sp, #84]	; 0x54
    f04c:	9914      	ldr	r1, [sp, #80]	; 0x50
    f04e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f050:	f000 fb9b 	bl	f78a <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE>
    f054:	9012      	str	r0, [sp, #72]	; 0x48
    f056:	e7ff      	b.n	f058 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x26a>
    f058:	9812      	ldr	r0, [sp, #72]	; 0x48
    f05a:	f8ad 00ce 	strh.w	r0, [sp, #206]	; 0xce
    f05e:	2101      	movs	r1, #1
    f060:	f8ad 10cc 	strh.w	r1, [sp, #204]	; 0xcc
                let color = if Conf::FONT_IMAGE[bitmap_byte as usize] & (1 << bitmap_bit) != 0 {
    f064:	e7ff      	b.n	f066 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x278>
                let x = self.pos[0]
    f066:	982c      	ldr	r0, [sp, #176]	; 0xb0
    f068:	3010      	adds	r0, #16
    f06a:	2100      	movs	r1, #0
    f06c:	f7fd f845 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    f070:	9011      	str	r0, [sp, #68]	; 0x44
    f072:	e7ff      	b.n	f074 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x286>
    f074:	9811      	ldr	r0, [sp, #68]	; 0x44
    f076:	6801      	ldr	r1, [r0, #0]
                    + (Conf::CHAR_WIDTH * self.idx as u32) as i32
    f078:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    f07a:	68d3      	ldr	r3, [r2, #12]
    f07c:	f04f 0c0c 	mov.w	ip, #12
    f080:	fbac 3c03 	umull	r3, ip, ip, r3
    f084:	f1bc 0f00 	cmp.w	ip, #0
    f088:	9110      	str	r1, [sp, #64]	; 0x40
    f08a:	930f      	str	r3, [sp, #60]	; 0x3c
    f08c:	f040 816f 	bne.w	f36e <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x580>
    f090:	e7ff      	b.n	f092 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x2a4>
                let x = self.pos[0]
    f092:	9810      	ldr	r0, [sp, #64]	; 0x40
    f094:	990f      	ldr	r1, [sp, #60]	; 0x3c
    f096:	1842      	adds	r2, r0, r1
    f098:	4613      	mov	r3, r2
    f09a:	4282      	cmp	r2, r0
    f09c:	930e      	str	r3, [sp, #56]	; 0x38
    f09e:	f180 8172 	bvs.w	f386 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x598>
    f0a2:	e7ff      	b.n	f0a4 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x2b6>
                    + self.char_walk_x as i32;
    f0a4:	982c      	ldr	r0, [sp, #176]	; 0xb0
    f0a6:	6801      	ldr	r1, [r0, #0]
                let x = self.pos[0]
    f0a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f0aa:	4411      	add	r1, r2
    f0ac:	460b      	mov	r3, r1
    f0ae:	4291      	cmp	r1, r2
    f0b0:	930d      	str	r3, [sp, #52]	; 0x34
    f0b2:	f180 8174 	bvs.w	f39e <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x5b0>
    f0b6:	e7ff      	b.n	f0b8 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x2ca>
    f0b8:	980d      	ldr	r0, [sp, #52]	; 0x34
    f0ba:	9045      	str	r0, [sp, #276]	; 0x114
                let y = self.pos[1] + self.char_walk_y as i32;
    f0bc:	992c      	ldr	r1, [sp, #176]	; 0xb0
    f0be:	f101 0010 	add.w	r0, r1, #16
    f0c2:	2101      	movs	r1, #1
    f0c4:	f7fd f819 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    f0c8:	900c      	str	r0, [sp, #48]	; 0x30
    f0ca:	e7ff      	b.n	f0cc <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x2de>
    f0cc:	980c      	ldr	r0, [sp, #48]	; 0x30
    f0ce:	6801      	ldr	r1, [r0, #0]
    f0d0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    f0d2:	6853      	ldr	r3, [r2, #4]
    f0d4:	440b      	add	r3, r1
    f0d6:	469c      	mov	ip, r3
    f0d8:	428b      	cmp	r3, r1
    f0da:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    f0de:	f180 816a 	bvs.w	f3b6 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x5c8>
    f0e2:	e7ff      	b.n	f0e4 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x2f6>
    f0e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f0e6:	9046      	str	r0, [sp, #280]	; 0x118
                self.char_walk_x += 1;
    f0e8:	992c      	ldr	r1, [sp, #176]	; 0xb0
    f0ea:	680a      	ldr	r2, [r1, #0]
    f0ec:	1c53      	adds	r3, r2, #1
    f0ee:	469c      	mov	ip, r3
    f0f0:	4293      	cmp	r3, r2
    f0f2:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    f0f6:	f0c0 816a 	bcc.w	f3ce <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x5e0>
    f0fa:	e7ff      	b.n	f0fc <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x30e>
    f0fc:	980a      	ldr	r0, [sp, #40]	; 0x28
    f0fe:	992c      	ldr	r1, [sp, #176]	; 0xb0
    f100:	6008      	str	r0, [r1, #0]
                if self.char_walk_x >= Conf::CHAR_WIDTH {
    f102:	680a      	ldr	r2, [r1, #0]
    f104:	2a0c      	cmp	r2, #12
    f106:	d339      	bcc.n	f17c <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x38e>
    f108:	e7ff      	b.n	f10a <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x31c>
    f10a:	2000      	movs	r0, #0
                    self.char_walk_x = 0;
    f10c:	992c      	ldr	r1, [sp, #176]	; 0xb0
    f10e:	6008      	str	r0, [r1, #0]
                    self.char_walk_y += 1;
    f110:	6848      	ldr	r0, [r1, #4]
    f112:	1c42      	adds	r2, r0, #1
    f114:	4613      	mov	r3, r2
    f116:	4282      	cmp	r2, r0
    f118:	9309      	str	r3, [sp, #36]	; 0x24
    f11a:	f0c0 8164 	bcc.w	f3e6 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x5f8>
    f11e:	e7ff      	b.n	f120 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x332>
    f120:	9809      	ldr	r0, [sp, #36]	; 0x24
    f122:	992c      	ldr	r1, [sp, #176]	; 0xb0
    f124:	6048      	str	r0, [r1, #4]
                    if self.char_walk_y >= Conf::CHAR_HEIGHT {
    f126:	684a      	ldr	r2, [r1, #4]
    f128:	2a10      	cmp	r2, #16
    f12a:	d326      	bcc.n	f17a <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x38c>
    f12c:	e7ff      	b.n	f12e <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x340>
    f12e:	2000      	movs	r0, #0
                        self.char_walk_y = 0;
    f130:	992c      	ldr	r1, [sp, #176]	; 0xb0
    f132:	6048      	str	r0, [r1, #4]
                        self.idx += 1;
    f134:	68c8      	ldr	r0, [r1, #12]
    f136:	1c42      	adds	r2, r0, #1
    f138:	4613      	mov	r3, r2
    f13a:	4282      	cmp	r2, r0
    f13c:	9308      	str	r3, [sp, #32]
    f13e:	f0c0 815e 	bcc.w	f3fe <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x610>
    f142:	e7ff      	b.n	f144 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x356>
    f144:	9808      	ldr	r0, [sp, #32]
    f146:	992c      	ldr	r1, [sp, #176]	; 0xb0
    f148:	60c8      	str	r0, [r1, #12]
                        self.current_char = self.text.chars().skip(self.idx).next();
    f14a:	6988      	ldr	r0, [r1, #24]
    f14c:	69c9      	ldr	r1, [r1, #28]
    f14e:	f7fb f9a4 	bl	a49a <_ZN4core3str21_$LT$impl$u20$str$GT$5chars17h5612c26d24354453E>
    f152:	9007      	str	r0, [sp, #28]
    f154:	9106      	str	r1, [sp, #24]
    f156:	e7ff      	b.n	f158 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x36a>
    f158:	982c      	ldr	r0, [sp, #176]	; 0xb0
    f15a:	68c3      	ldr	r3, [r0, #12]
    f15c:	a834      	add	r0, sp, #208	; 0xd0
    f15e:	9907      	ldr	r1, [sp, #28]
    f160:	9a06      	ldr	r2, [sp, #24]
    f162:	f002 f839 	bl	111d8 <_ZN4core4iter6traits8iterator8Iterator4skip17h78c4b5071866f986E>
    f166:	e7ff      	b.n	f168 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x37a>
    f168:	a834      	add	r0, sp, #208	; 0xd0
    f16a:	f001 fe39 	bl	10de0 <_ZN94_$LT$core..iter..adapters..Skip$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hffd3ee1a09d0b53aE>
    f16e:	9005      	str	r0, [sp, #20]
    f170:	e7ff      	b.n	f172 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x384>
    f172:	9805      	ldr	r0, [sp, #20]
    f174:	992c      	ldr	r1, [sp, #176]	; 0xb0
    f176:	6088      	str	r0, [r1, #8]
                    if self.char_walk_y >= Conf::CHAR_HEIGHT {
    f178:	e7ff      	b.n	f17a <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x38c>
                if self.char_walk_x >= Conf::CHAR_WIDTH {
    f17a:	e7ff      	b.n	f17c <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x38e>
                if let Some(color) = color {
    f17c:	f8bd 00cc 	ldrh.w	r0, [sp, #204]	; 0xcc
    f180:	2801      	cmp	r0, #1
    f182:	d141      	bne.n	f208 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x41a>
    f184:	e7ff      	b.n	f186 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x398>
    f186:	f8bd 00ce 	ldrh.w	r0, [sp, #206]	; 0xce
    f18a:	4601      	mov	r1, r0
    f18c:	f8ad 011e 	strh.w	r0, [sp, #286]	; 0x11e
                    if x >= 0 && y >= 0 {
    f190:	980d      	ldr	r0, [sp, #52]	; 0x34
    f192:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f196:	9104      	str	r1, [sp, #16]
    f198:	dc08      	bgt.n	f1ac <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x3be>
    f19a:	e003      	b.n	f1a4 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x3b6>
    f19c:	2001      	movs	r0, #1
    f19e:	f88d 00df 	strb.w	r0, [sp, #223]	; 0xdf
    f1a2:	e008      	b.n	f1b6 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x3c8>
    f1a4:	2000      	movs	r0, #0
    f1a6:	f88d 00df 	strb.w	r0, [sp, #223]	; 0xdf
    f1aa:	e004      	b.n	f1b6 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x3c8>
    f1ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f1ae:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f1b2:	dcf3      	bgt.n	f19c <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x3ae>
    f1b4:	e7f6      	b.n	f1a4 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x3b6>
    f1b6:	f89d 00df 	ldrb.w	r0, [sp, #223]	; 0xdf
    f1ba:	07c0      	lsls	r0, r0, #31
    f1bc:	2800      	cmp	r0, #0
    f1be:	d101      	bne.n	f1c4 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x3d6>
    f1c0:	e7ff      	b.n	f1c2 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x3d4>
                if let Some(color) = color {
    f1c2:	e021      	b.n	f208 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x41a>
                        break Some(Pixel(Coord::new(x, y).to_unsigned(), color));
    f1c4:	980d      	ldr	r0, [sp, #52]	; 0x34
    f1c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f1c8:	f7fc ff54 	bl	c074 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    f1cc:	9003      	str	r0, [sp, #12]
    f1ce:	9102      	str	r1, [sp, #8]
    f1d0:	e7ff      	b.n	f1d2 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x3e4>
    f1d2:	9803      	ldr	r0, [sp, #12]
    f1d4:	9902      	ldr	r1, [sp, #8]
    f1d6:	f7fc ffd9 	bl	c18c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>
    f1da:	9001      	str	r0, [sp, #4]
    f1dc:	9100      	str	r1, [sp, #0]
    f1de:	e7ff      	b.n	f1e0 <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0x3f2>
    f1e0:	9801      	ldr	r0, [sp, #4]
    f1e2:	9038      	str	r0, [sp, #224]	; 0xe0
    f1e4:	9900      	ldr	r1, [sp, #0]
    f1e6:	9139      	str	r1, [sp, #228]	; 0xe4
    f1e8:	9a04      	ldr	r2, [sp, #16]
    f1ea:	f8ad 20e8 	strh.w	r2, [sp, #232]	; 0xe8
    f1ee:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    f1f0:	f8dd c0e4 	ldr.w	ip, [sp, #228]	; 0xe4
    f1f4:	f8dd e0e8 	ldr.w	lr, [sp, #232]	; 0xe8
    f1f8:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
    f1fc:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
    f200:	9330      	str	r3, [sp, #192]	; 0xc0
    f202:	2301      	movs	r3, #1
    f204:	932f      	str	r3, [sp, #188]	; 0xbc
    f206:	e652      	b.n	eeae <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0xc0>
            if let Some(current_char) = self.current_char {
    f208:	e660      	b.n	eecc <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E+0xde>
        if self.pos[0] + (self.text.len() as i32 * Conf::CHAR_WIDTH as i32) <= 0
    f20a:	f24b 4020 	movw	r0, #46112	; 0xb420
    f20e:	f2c0 0001 	movt	r0, #1
    f212:	f24b 4210 	movw	r2, #46096	; 0xb410
    f216:	f2c0 0201 	movt	r2, #1
    f21a:	2121      	movs	r1, #33	; 0x21
    f21c:	f004 fd80 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f220:	defe      	udf	#254	; 0xfe
    f222:	f24b 4060 	movw	r0, #46176	; 0xb460
    f226:	f2c0 0001 	movt	r0, #1
    f22a:	f24b 4244 	movw	r2, #46148	; 0xb444
    f22e:	f2c0 0201 	movt	r2, #1
    f232:	211c      	movs	r1, #28
    f234:	f004 fd74 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f238:	defe      	udf	#254	; 0xfe
            || self.pos[1] + (Conf::CHAR_HEIGHT as i32) <= 0
    f23a:	f24b 4060 	movw	r0, #46176	; 0xb460
    f23e:	f2c0 0001 	movt	r0, #1
    f242:	f24b 427c 	movw	r2, #46204	; 0xb47c
    f246:	f2c0 0201 	movt	r2, #1
    f24a:	211c      	movs	r1, #28
    f24c:	f004 fd68 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f250:	defe      	udf	#254	; 0xfe
                let char_x = (char_offset - (row * char_per_row)) * Conf::CHAR_WIDTH;
    f252:	f24b 4020 	movw	r0, #46112	; 0xb420
    f256:	f2c0 0001 	movt	r0, #1
    f25a:	f24b 428c 	movw	r2, #46220	; 0xb48c
    f25e:	f2c0 0201 	movt	r2, #1
    f262:	2121      	movs	r1, #33	; 0x21
    f264:	f004 fd5c 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f268:	defe      	udf	#254	; 0xfe
    f26a:	f24b 40b0 	movw	r0, #46256	; 0xb4b0
    f26e:	f2c0 0001 	movt	r0, #1
    f272:	f24b 429c 	movw	r2, #46236	; 0xb49c
    f276:	f2c0 0201 	movt	r2, #1
    f27a:	2121      	movs	r1, #33	; 0x21
    f27c:	f004 fd50 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f280:	defe      	udf	#254	; 0xfe
    f282:	f24b 4020 	movw	r0, #46112	; 0xb420
    f286:	f2c0 0001 	movt	r0, #1
    f28a:	f24b 429c 	movw	r2, #46236	; 0xb49c
    f28e:	f2c0 0201 	movt	r2, #1
    f292:	2121      	movs	r1, #33	; 0x21
    f294:	f004 fd44 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f298:	defe      	udf	#254	; 0xfe
                let char_y = row * Conf::CHAR_HEIGHT;
    f29a:	f24b 4020 	movw	r0, #46112	; 0xb420
    f29e:	f2c0 0001 	movt	r0, #1
    f2a2:	f24b 42d4 	movw	r2, #46292	; 0xb4d4
    f2a6:	f2c0 0201 	movt	r2, #1
    f2aa:	2121      	movs	r1, #33	; 0x21
    f2ac:	f004 fd38 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f2b0:	defe      	udf	#254	; 0xfe
                    + (Conf::FONT_IMAGE_WIDTH * char_y)
    f2b2:	f24b 4020 	movw	r0, #46112	; 0xb420
    f2b6:	f2c0 0001 	movt	r0, #1
    f2ba:	f24b 42e4 	movw	r2, #46308	; 0xb4e4
    f2be:	f2c0 0201 	movt	r2, #1
    f2c2:	2121      	movs	r1, #33	; 0x21
    f2c4:	f004 fd2c 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f2c8:	defe      	udf	#254	; 0xfe
                let bitmap_bit_index = char_x
    f2ca:	f24b 4060 	movw	r0, #46176	; 0xb460
    f2ce:	f2c0 0001 	movt	r0, #1
    f2d2:	f24b 42f4 	movw	r2, #46324	; 0xb4f4
    f2d6:	f2c0 0201 	movt	r2, #1
    f2da:	211c      	movs	r1, #28
    f2dc:	f004 fd20 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f2e0:	defe      	udf	#254	; 0xfe
    f2e2:	f24b 4060 	movw	r0, #46176	; 0xb460
    f2e6:	f2c0 0001 	movt	r0, #1
    f2ea:	f24b 42f4 	movw	r2, #46324	; 0xb4f4
    f2ee:	f2c0 0201 	movt	r2, #1
    f2f2:	211c      	movs	r1, #28
    f2f4:	f004 fd14 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f2f8:	defe      	udf	#254	; 0xfe
                    + (self.char_walk_y * Conf::FONT_IMAGE_WIDTH);
    f2fa:	f24b 4020 	movw	r0, #46112	; 0xb420
    f2fe:	f2c0 0001 	movt	r0, #1
    f302:	f24b 5204 	movw	r2, #46340	; 0xb504
    f306:	f2c0 0201 	movt	r2, #1
    f30a:	2121      	movs	r1, #33	; 0x21
    f30c:	f004 fd08 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f310:	defe      	udf	#254	; 0xfe
                let bitmap_bit_index = char_x
    f312:	f24b 4060 	movw	r0, #46176	; 0xb460
    f316:	f2c0 0001 	movt	r0, #1
    f31a:	f24b 42f4 	movw	r2, #46324	; 0xb4f4
    f31e:	f2c0 0201 	movt	r2, #1
    f322:	211c      	movs	r1, #28
    f324:	f004 fcfc 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f328:	defe      	udf	#254	; 0xfe
                let bitmap_bit = 7 - (bitmap_bit_index % 8);
    f32a:	f24b 40b0 	movw	r0, #46256	; 0xb4b0
    f32e:	f2c0 0001 	movt	r0, #1
    f332:	f24b 5214 	movw	r2, #46356	; 0xb514
    f336:	f2c0 0201 	movt	r2, #1
    f33a:	2121      	movs	r1, #33	; 0x21
    f33c:	f004 fcf0 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f340:	defe      	udf	#254	; 0xfe
                let color = if Conf::FONT_IMAGE[bitmap_byte as usize] & (1 << bitmap_bit) != 0 {
    f342:	f24c 70e4 	movw	r0, #51172	; 0xc7e4
    f346:	f2c0 0001 	movt	r0, #1
    f34a:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
    f34e:	9919      	ldr	r1, [sp, #100]	; 0x64
    f350:	f004 fcfc 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    f354:	defe      	udf	#254	; 0xfe
    f356:	f64c 0010 	movw	r0, #51216	; 0xc810
    f35a:	f2c0 0001 	movt	r0, #1
    f35e:	f24c 72f4 	movw	r2, #51188	; 0xc7f4
    f362:	f2c0 0201 	movt	r2, #1
    f366:	2123      	movs	r1, #35	; 0x23
    f368:	f004 fcda 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f36c:	defe      	udf	#254	; 0xfe
                    + (Conf::CHAR_WIDTH * self.idx as u32) as i32
    f36e:	f24b 4020 	movw	r0, #46112	; 0xb420
    f372:	f2c0 0001 	movt	r0, #1
    f376:	f64c 0234 	movw	r2, #51252	; 0xc834
    f37a:	f2c0 0201 	movt	r2, #1
    f37e:	2121      	movs	r1, #33	; 0x21
    f380:	f004 fcce 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f384:	defe      	udf	#254	; 0xfe
                let x = self.pos[0]
    f386:	f24b 4060 	movw	r0, #46176	; 0xb460
    f38a:	f2c0 0001 	movt	r0, #1
    f38e:	f64c 0244 	movw	r2, #51268	; 0xc844
    f392:	f2c0 0201 	movt	r2, #1
    f396:	211c      	movs	r1, #28
    f398:	f004 fcc2 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f39c:	defe      	udf	#254	; 0xfe
    f39e:	f24b 4060 	movw	r0, #46176	; 0xb460
    f3a2:	f2c0 0001 	movt	r0, #1
    f3a6:	f64c 0244 	movw	r2, #51268	; 0xc844
    f3aa:	f2c0 0201 	movt	r2, #1
    f3ae:	211c      	movs	r1, #28
    f3b0:	f004 fcb6 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f3b4:	defe      	udf	#254	; 0xfe
                let y = self.pos[1] + self.char_walk_y as i32;
    f3b6:	f24b 4060 	movw	r0, #46176	; 0xb460
    f3ba:	f2c0 0001 	movt	r0, #1
    f3be:	f64c 0254 	movw	r2, #51284	; 0xc854
    f3c2:	f2c0 0201 	movt	r2, #1
    f3c6:	211c      	movs	r1, #28
    f3c8:	f004 fcaa 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f3cc:	defe      	udf	#254	; 0xfe
                self.char_walk_x += 1;
    f3ce:	f24b 4060 	movw	r0, #46176	; 0xb460
    f3d2:	f2c0 0001 	movt	r0, #1
    f3d6:	f64c 0264 	movw	r2, #51300	; 0xc864
    f3da:	f2c0 0201 	movt	r2, #1
    f3de:	211c      	movs	r1, #28
    f3e0:	f004 fc9e 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f3e4:	defe      	udf	#254	; 0xfe
                    self.char_walk_y += 1;
    f3e6:	f24b 4060 	movw	r0, #46176	; 0xb460
    f3ea:	f2c0 0001 	movt	r0, #1
    f3ee:	f64c 0274 	movw	r2, #51316	; 0xc874
    f3f2:	f2c0 0201 	movt	r2, #1
    f3f6:	211c      	movs	r1, #28
    f3f8:	f004 fc92 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f3fc:	defe      	udf	#254	; 0xfe
                        self.idx += 1;
    f3fe:	f24b 4060 	movw	r0, #46176	; 0xb460
    f402:	f2c0 0001 	movt	r0, #1
    f406:	f64c 0284 	movw	r2, #51332	; 0xc884
    f40a:	f2c0 0201 	movt	r2, #1
    f40e:	211c      	movs	r1, #28
    f410:	f004 fc86 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f414:	defe      	udf	#254	; 0xfe

0000f416 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
    f416:	b08a      	sub	sp, #40	; 0x28
    f418:	9005      	str	r0, [sp, #20]
    f41a:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
    f41c:	9107      	str	r1, [sp, #28]
    f41e:	21ff      	movs	r1, #255	; 0xff
    f420:	9106      	str	r1, [sp, #24]
    f422:	2108      	movs	r1, #8
    f424:	9108      	str	r1, [sp, #32]
    f426:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
    f428:	9003      	str	r0, [sp, #12]
    f42a:	9102      	str	r1, [sp, #8]
    f42c:	e016      	b.n	f45c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
    f42e:	2001      	movs	r0, #1
    f430:	f88d 0013 	strb.w	r0, [sp, #19]
    f434:	e00c      	b.n	f450 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
    f436:	2000      	movs	r0, #0
    f438:	f88d 0013 	strb.w	r0, [sp, #19]
    f43c:	e008      	b.n	f450 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
    f43e:	9803      	ldr	r0, [sp, #12]
    f440:	6801      	ldr	r1, [r0, #0]
    f442:	6842      	ldr	r2, [r0, #4]
    f444:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
    f448:	f172 0200 	sbcs.w	r2, r2, #0
    f44c:	d3ef      	bcc.n	f42e <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
    f44e:	e7f2      	b.n	f436 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
    f450:	f89d 0013 	ldrb.w	r0, [sp, #19]
    f454:	07c0      	lsls	r0, r0, #31
    f456:	2800      	cmp	r0, #0
    f458:	d10e      	bne.n	f478 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
    f45a:	e009      	b.n	f470 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
    f45c:	2001      	movs	r0, #1
    f45e:	9009      	str	r0, [sp, #36]	; 0x24
    f460:	9809      	ldr	r0, [sp, #36]	; 0x24
    f462:	9001      	str	r0, [sp, #4]
    f464:	e7ff      	b.n	f466 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
    f466:	9802      	ldr	r0, [sp, #8]
    f468:	9901      	ldr	r1, [sp, #4]
    f46a:	4288      	cmp	r0, r1
    f46c:	d9df      	bls.n	f42e <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
    f46e:	e7e6      	b.n	f43e <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
    f470:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
    f472:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
    f476:	e007      	b.n	f488 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
    f478:	9803      	ldr	r0, [sp, #12]
    f47a:	7801      	ldrb	r1, [r0, #0]
    f47c:	f88d 1011 	strb.w	r1, [sp, #17]
    f480:	2101      	movs	r1, #1
    f482:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
    f486:	e7ff      	b.n	f488 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
    f488:	f89d 0010 	ldrb.w	r0, [sp, #16]
    f48c:	f89d 1011 	ldrb.w	r1, [sp, #17]
    f490:	b00a      	add	sp, #40	; 0x28
    f492:	4770      	bx	lr

0000f494 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>:
    f494:	b580      	push	{r7, lr}
    f496:	b090      	sub	sp, #64	; 0x40
    f498:	2200      	movs	r2, #0
    f49a:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    f49e:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
    f4a2:	2201      	movs	r2, #1
    f4a4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
    f4a8:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    f4ac:	680a      	ldr	r2, [r1, #0]
    f4ae:	2a00      	cmp	r2, #0
    f4b0:	9101      	str	r1, [sp, #4]
    f4b2:	9000      	str	r0, [sp, #0]
    f4b4:	d001      	beq.n	f4ba <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x26>
    f4b6:	e7ff      	b.n	f4b8 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x24>
    f4b8:	e004      	b.n	f4c4 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x30>
    f4ba:	2000      	movs	r0, #0
    f4bc:	9900      	ldr	r1, [sp, #0]
    f4be:	6008      	str	r0, [r1, #0]
    f4c0:	e032      	b.n	f528 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
    f4c2:	defe      	udf	#254	; 0xfe
    f4c4:	2000      	movs	r0, #0
    f4c6:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    f4ca:	9901      	ldr	r1, [sp, #4]
    f4cc:	684a      	ldr	r2, [r1, #4]
    f4ce:	688b      	ldr	r3, [r1, #8]
    f4d0:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    f4d4:	f8cd c010 	str.w	ip, [sp, #16]
    f4d8:	9303      	str	r3, [sp, #12]
    f4da:	9202      	str	r2, [sp, #8]
    f4dc:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    f4e0:	9802      	ldr	r0, [sp, #8]
    f4e2:	9a03      	ldr	r2, [sp, #12]
    f4e4:	9b04      	ldr	r3, [sp, #16]
    f4e6:	930d      	str	r3, [sp, #52]	; 0x34
    f4e8:	920c      	str	r2, [sp, #48]	; 0x30
    f4ea:	900b      	str	r0, [sp, #44]	; 0x2c
    f4ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f4ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f4f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f4f2:	930a      	str	r3, [sp, #40]	; 0x28
    f4f4:	9209      	str	r2, [sp, #36]	; 0x24
    f4f6:	9008      	str	r0, [sp, #32]
    f4f8:	a805      	add	r0, sp, #20
    f4fa:	a908      	add	r1, sp, #32
    f4fc:	f002 f9fd 	bl	118fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>
    f500:	e7ff      	b.n	f502 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x6e>
    f502:	9805      	ldr	r0, [sp, #20]
    f504:	9906      	ldr	r1, [sp, #24]
    f506:	9a07      	ldr	r2, [sp, #28]
    f508:	9b00      	ldr	r3, [sp, #0]
    f50a:	60da      	str	r2, [r3, #12]
    f50c:	6099      	str	r1, [r3, #8]
    f50e:	6058      	str	r0, [r3, #4]
    f510:	2001      	movs	r0, #1
    f512:	6018      	str	r0, [r3, #0]
    f514:	e008      	b.n	f528 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
    f516:	9801      	ldr	r0, [sp, #4]
    f518:	6801      	ldr	r1, [r0, #0]
    f51a:	2901      	cmp	r1, #1
    f51c:	d00c      	beq.n	f538 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa4>
    f51e:	e015      	b.n	f54c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb8>
    f520:	2000      	movs	r0, #0
    f522:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    f526:	e7f6      	b.n	f516 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
    f528:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    f52c:	07c0      	lsls	r0, r0, #31
    f52e:	2800      	cmp	r0, #0
    f530:	d1f6      	bne.n	f520 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x8c>
    f532:	e7f0      	b.n	f516 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
    f534:	b010      	add	sp, #64	; 0x40
    f536:	bd80      	pop	{r7, pc}
    f538:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    f53c:	07c0      	lsls	r0, r0, #31
    f53e:	2800      	cmp	r0, #0
    f540:	d0f8      	beq.n	f534 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
    f542:	e7ff      	b.n	f544 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb0>
    f544:	2000      	movs	r0, #0
    f546:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    f54a:	e7f3      	b.n	f534 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
    f54c:	e7f2      	b.n	f534 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>

0000f54e <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
    f54e:	b084      	sub	sp, #16
    f550:	9002      	str	r0, [sp, #8]
    f552:	6801      	ldr	r1, [r0, #0]
    f554:	2900      	cmp	r1, #0
    f556:	9000      	str	r0, [sp, #0]
    f558:	d001      	beq.n	f55e <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
    f55a:	e7ff      	b.n	f55c <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
    f55c:	e003      	b.n	f566 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
    f55e:	2000      	movs	r0, #0
    f560:	9001      	str	r0, [sp, #4]
    f562:	e006      	b.n	f572 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
    f564:	defe      	udf	#254	; 0xfe
    f566:	9800      	ldr	r0, [sp, #0]
    f568:	f100 0108 	add.w	r1, r0, #8
    f56c:	9103      	str	r1, [sp, #12]
    f56e:	9101      	str	r1, [sp, #4]
    f570:	e7ff      	b.n	f572 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
    f572:	9801      	ldr	r0, [sp, #4]
    f574:	b004      	add	sp, #16
    f576:	4770      	bx	lr

0000f578 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>:
    f578:	b510      	push	{r4, lr}
    f57a:	b088      	sub	sp, #32
    f57c:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    f580:	468e      	mov	lr, r1
    f582:	4604      	mov	r4, r0
    f584:	f8ad 0010 	strh.w	r0, [sp, #16]
    f588:	f8ad 1012 	strh.w	r1, [sp, #18]
    f58c:	9205      	str	r2, [sp, #20]
    f58e:	9306      	str	r3, [sp, #24]
    f590:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    f594:	4601      	mov	r1, r0
    f596:	2800      	cmp	r0, #0
    f598:	9303      	str	r3, [sp, #12]
    f59a:	9202      	str	r2, [sp, #8]
    f59c:	f8cd c004 	str.w	ip, [sp, #4]
    f5a0:	d001      	beq.n	f5a6 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2e>
    f5a2:	e7ff      	b.n	f5a4 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2c>
    f5a4:	e006      	b.n	f5b4 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x3c>
    f5a6:	9802      	ldr	r0, [sp, #8]
    f5a8:	9903      	ldr	r1, [sp, #12]
    f5aa:	9a01      	ldr	r2, [sp, #4]
    f5ac:	f004 fb6e 	bl	13c8c <_ZN4core6option13expect_failed17had6579abaad447b4E>
    f5b0:	defe      	udf	#254	; 0xfe
    f5b2:	defe      	udf	#254	; 0xfe
    f5b4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    f5b8:	4601      	mov	r1, r0
    f5ba:	f8ad 001e 	strh.w	r0, [sp, #30]
    f5be:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    f5c2:	2801      	cmp	r0, #1
    f5c4:	9100      	str	r1, [sp, #0]
    f5c6:	d103      	bne.n	f5d0 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x58>
    f5c8:	e7ff      	b.n	f5ca <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>
    f5ca:	9800      	ldr	r0, [sp, #0]
    f5cc:	b008      	add	sp, #32
    f5ce:	bd10      	pop	{r4, pc}
    f5d0:	e7fb      	b.n	f5ca <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>

0000f5d2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
    f5d2:	b084      	sub	sp, #16
    f5d4:	460b      	mov	r3, r1
    f5d6:	4684      	mov	ip, r0
    f5d8:	f88d 000c 	strb.w	r0, [sp, #12]
    f5dc:	f88d 100d 	strb.w	r1, [sp, #13]
    f5e0:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f5e4:	07c1      	lsls	r1, r0, #31
    f5e6:	2900      	cmp	r1, #0
    f5e8:	9202      	str	r2, [sp, #8]
    f5ea:	d001      	beq.n	f5f0 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
    f5ec:	e7ff      	b.n	f5ee <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
    f5ee:	e009      	b.n	f604 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
    f5f0:	f64c 0094 	movw	r0, #51348	; 0xc894
    f5f4:	f2c0 0001 	movt	r0, #1
    f5f8:	212b      	movs	r1, #43	; 0x2b
    f5fa:	9a02      	ldr	r2, [sp, #8]
    f5fc:	f004 fb90 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f600:	defe      	udf	#254	; 0xfe
    f602:	defe      	udf	#254	; 0xfe
    f604:	f89d 000d 	ldrb.w	r0, [sp, #13]
    f608:	4601      	mov	r1, r0
    f60a:	f88d 000f 	strb.w	r0, [sp, #15]
    f60e:	f89d 000c 	ldrb.w	r0, [sp, #12]
    f612:	07c0      	lsls	r0, r0, #31
    f614:	2800      	cmp	r0, #0
    f616:	9101      	str	r1, [sp, #4]
    f618:	d003      	beq.n	f622 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
    f61a:	e7ff      	b.n	f61c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
    f61c:	9801      	ldr	r0, [sp, #4]
    f61e:	b004      	add	sp, #16
    f620:	4770      	bx	lr
    f622:	e7fb      	b.n	f61c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

0000f624 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
    f624:	b088      	sub	sp, #32
    f626:	9004      	str	r0, [sp, #16]
    f628:	9105      	str	r1, [sp, #20]
    f62a:	9804      	ldr	r0, [sp, #16]
    f62c:	2800      	cmp	r0, #0
    f62e:	4601      	mov	r1, r0
    f630:	bf18      	it	ne
    f632:	2101      	movne	r1, #1
    f634:	2800      	cmp	r0, #0
    f636:	9203      	str	r2, [sp, #12]
    f638:	d001      	beq.n	f63e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
    f63a:	e7ff      	b.n	f63c <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
    f63c:	e009      	b.n	f652 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
    f63e:	f64c 0094 	movw	r0, #51348	; 0xc894
    f642:	f2c0 0001 	movt	r0, #1
    f646:	212b      	movs	r1, #43	; 0x2b
    f648:	9a03      	ldr	r2, [sp, #12]
    f64a:	f004 fb69 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    f64e:	defe      	udf	#254	; 0xfe
    f650:	defe      	udf	#254	; 0xfe
    f652:	9804      	ldr	r0, [sp, #16]
    f654:	9905      	ldr	r1, [sp, #20]
    f656:	9006      	str	r0, [sp, #24]
    f658:	9107      	str	r1, [sp, #28]
    f65a:	9a04      	ldr	r2, [sp, #16]
    f65c:	2a00      	cmp	r2, #0
    f65e:	9002      	str	r0, [sp, #8]
    f660:	9101      	str	r1, [sp, #4]
    f662:	d004      	beq.n	f66e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
    f664:	e7ff      	b.n	f666 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
    f666:	9802      	ldr	r0, [sp, #8]
    f668:	9901      	ldr	r1, [sp, #4]
    f66a:	b008      	add	sp, #32
    f66c:	4770      	bx	lr
    f66e:	e7fa      	b.n	f666 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

0000f670 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>:
    f670:	b580      	push	{r7, lr}
    f672:	b082      	sub	sp, #8
    f674:	9001      	str	r0, [sp, #4]
    f676:	f000 f82b 	bl	f6d0 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
    f67a:	9000      	str	r0, [sp, #0]
    f67c:	e7ff      	b.n	f67e <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E+0xe>
    f67e:	2001      	movs	r0, #1
    f680:	9900      	ldr	r1, [sp, #0]
    f682:	4388      	bics	r0, r1
    f684:	b002      	add	sp, #8
    f686:	bd80      	pop	{r7, pc}

0000f688 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
    f688:	b082      	sub	sp, #8
    f68a:	9001      	str	r0, [sp, #4]
    f68c:	6800      	ldr	r0, [r0, #0]
    f68e:	2800      	cmp	r0, #0
    f690:	d104      	bne.n	f69c <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
    f692:	e7ff      	b.n	f694 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
    f694:	2000      	movs	r0, #0
    f696:	f88d 0003 	strb.w	r0, [sp, #3]
    f69a:	e003      	b.n	f6a4 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
    f69c:	2001      	movs	r0, #1
    f69e:	f88d 0003 	strb.w	r0, [sp, #3]
    f6a2:	e7ff      	b.n	f6a4 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
    f6a4:	f89d 0003 	ldrb.w	r0, [sp, #3]
    f6a8:	b002      	add	sp, #8
    f6aa:	4770      	bx	lr

0000f6ac <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>:
    f6ac:	b082      	sub	sp, #8
    f6ae:	9001      	str	r0, [sp, #4]
    f6b0:	6800      	ldr	r0, [r0, #0]
    f6b2:	2801      	cmp	r0, #1
    f6b4:	d004      	beq.n	f6c0 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x14>
    f6b6:	e7ff      	b.n	f6b8 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0xc>
    f6b8:	2000      	movs	r0, #0
    f6ba:	f88d 0003 	strb.w	r0, [sp, #3]
    f6be:	e003      	b.n	f6c8 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
    f6c0:	2001      	movs	r0, #1
    f6c2:	f88d 0003 	strb.w	r0, [sp, #3]
    f6c6:	e7ff      	b.n	f6c8 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
    f6c8:	f89d 0003 	ldrb.w	r0, [sp, #3]
    f6cc:	b002      	add	sp, #8
    f6ce:	4770      	bx	lr

0000f6d0 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>:
    f6d0:	b082      	sub	sp, #8
    f6d2:	9001      	str	r0, [sp, #4]
    f6d4:	8800      	ldrh	r0, [r0, #0]
    f6d6:	2801      	cmp	r0, #1
    f6d8:	d004      	beq.n	f6e4 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x14>
    f6da:	e7ff      	b.n	f6dc <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0xc>
    f6dc:	2000      	movs	r0, #0
    f6de:	f88d 0003 	strb.w	r0, [sp, #3]
    f6e2:	e003      	b.n	f6ec <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
    f6e4:	2001      	movs	r0, #1
    f6e6:	f88d 0003 	strb.w	r0, [sp, #3]
    f6ea:	e7ff      	b.n	f6ec <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
    f6ec:	f89d 0003 	ldrb.w	r0, [sp, #3]
    f6f0:	b002      	add	sp, #8
    f6f2:	4770      	bx	lr

0000f6f4 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
    f6f4:	b580      	push	{r7, lr}
    f6f6:	b086      	sub	sp, #24
    f6f8:	9000      	str	r0, [sp, #0]
    f6fa:	2000      	movs	r0, #0
    f6fc:	f88d 000f 	strb.w	r0, [sp, #15]
    f700:	f88d 000e 	strb.w	r0, [sp, #14]
    f704:	2001      	movs	r0, #1
    f706:	f88d 000f 	strb.w	r0, [sp, #15]
    f70a:	f88d 000e 	strb.w	r0, [sp, #14]
    f70e:	9800      	ldr	r0, [sp, #0]
    f710:	2800      	cmp	r0, #0
    f712:	4601      	mov	r1, r0
    f714:	bf18      	it	ne
    f716:	2101      	movne	r1, #1
    f718:	2800      	cmp	r0, #0
    f71a:	d001      	beq.n	f720 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
    f71c:	e7ff      	b.n	f71e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
    f71e:	e004      	b.n	f72a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
    f720:	2000      	movs	r0, #0
    f722:	f88d 0004 	strb.w	r0, [sp, #4]
    f726:	e019      	b.n	f75c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
    f728:	defe      	udf	#254	; 0xfe
    f72a:	2000      	movs	r0, #0
    f72c:	f88d 000f 	strb.w	r0, [sp, #15]
    f730:	9900      	ldr	r1, [sp, #0]
    f732:	9105      	str	r1, [sp, #20]
    f734:	f88d 000e 	strb.w	r0, [sp, #14]
    f738:	9102      	str	r1, [sp, #8]
    f73a:	9802      	ldr	r0, [sp, #8]
    f73c:	f7fa fe1e 	bl	a37c <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
    f740:	f88d 1005 	strb.w	r1, [sp, #5]
    f744:	f88d 0004 	strb.w	r0, [sp, #4]
    f748:	e7ff      	b.n	f74a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
    f74a:	e007      	b.n	f75c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
    f74c:	9800      	ldr	r0, [sp, #0]
    f74e:	2800      	cmp	r0, #0
    f750:	d110      	bne.n	f774 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
    f752:	e019      	b.n	f788 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
    f754:	2000      	movs	r0, #0
    f756:	f88d 000e 	strb.w	r0, [sp, #14]
    f75a:	e7f7      	b.n	f74c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
    f75c:	f89d 000e 	ldrb.w	r0, [sp, #14]
    f760:	07c0      	lsls	r0, r0, #31
    f762:	2800      	cmp	r0, #0
    f764:	d1f6      	bne.n	f754 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
    f766:	e7f1      	b.n	f74c <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
    f768:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f76c:	f89d 1005 	ldrb.w	r1, [sp, #5]
    f770:	b006      	add	sp, #24
    f772:	bd80      	pop	{r7, pc}
    f774:	f89d 000f 	ldrb.w	r0, [sp, #15]
    f778:	07c0      	lsls	r0, r0, #31
    f77a:	2800      	cmp	r0, #0
    f77c:	d0f4      	beq.n	f768 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
    f77e:	e7ff      	b.n	f780 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
    f780:	2000      	movs	r0, #0
    f782:	f88d 000f 	strb.w	r0, [sp, #15]
    f786:	e7ef      	b.n	f768 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
    f788:	e7ee      	b.n	f768 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

0000f78a <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE>:
    f78a:	b580      	push	{r7, lr}
    f78c:	b084      	sub	sp, #16
    f78e:	4613      	mov	r3, r2
    f790:	468c      	mov	ip, r1
    f792:	4686      	mov	lr, r0
    f794:	f8ad 0004 	strh.w	r0, [sp, #4]
    f798:	f8ad 1006 	strh.w	r1, [sp, #6]
    f79c:	f8ad 200c 	strh.w	r2, [sp, #12]
    f7a0:	2000      	movs	r0, #0
    f7a2:	f88d 000a 	strb.w	r0, [sp, #10]
    f7a6:	f88d 000b 	strb.w	r0, [sp, #11]
    f7aa:	2001      	movs	r0, #1
    f7ac:	f88d 000b 	strb.w	r0, [sp, #11]
    f7b0:	f88d 000a 	strb.w	r0, [sp, #10]
    f7b4:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    f7b8:	4601      	mov	r1, r0
    f7ba:	2800      	cmp	r0, #0
    f7bc:	9300      	str	r3, [sp, #0]
    f7be:	d001      	beq.n	f7c4 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE+0x3a>
    f7c0:	e7ff      	b.n	f7c2 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE+0x38>
    f7c2:	e007      	b.n	f7d4 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE+0x4a>
    f7c4:	2000      	movs	r0, #0
    f7c6:	f88d 000a 	strb.w	r0, [sp, #10]
    f7ca:	9800      	ldr	r0, [sp, #0]
    f7cc:	f8ad 0008 	strh.w	r0, [sp, #8]
    f7d0:	e013      	b.n	f7fa <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE+0x70>
    f7d2:	defe      	udf	#254	; 0xfe
    f7d4:	2000      	movs	r0, #0
    f7d6:	f88d 000b 	strb.w	r0, [sp, #11]
    f7da:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    f7de:	f8ad 000e 	strh.w	r0, [sp, #14]
    f7e2:	f8ad 0008 	strh.w	r0, [sp, #8]
    f7e6:	e008      	b.n	f7fa <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE+0x70>
    f7e8:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    f7ec:	2801      	cmp	r0, #1
    f7ee:	d00e      	beq.n	f80e <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE+0x84>
    f7f0:	e017      	b.n	f822 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE+0x98>
    f7f2:	2000      	movs	r0, #0
    f7f4:	f88d 000a 	strb.w	r0, [sp, #10]
    f7f8:	e7f6      	b.n	f7e8 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE+0x5e>
    f7fa:	f89d 000a 	ldrb.w	r0, [sp, #10]
    f7fe:	07c0      	lsls	r0, r0, #31
    f800:	2800      	cmp	r0, #0
    f802:	d1f6      	bne.n	f7f2 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE+0x68>
    f804:	e7f0      	b.n	f7e8 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE+0x5e>
    f806:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    f80a:	b004      	add	sp, #16
    f80c:	bd80      	pop	{r7, pc}
    f80e:	f89d 000b 	ldrb.w	r0, [sp, #11]
    f812:	07c0      	lsls	r0, r0, #31
    f814:	2800      	cmp	r0, #0
    f816:	d0f6      	beq.n	f806 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE+0x7c>
    f818:	e7ff      	b.n	f81a <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE+0x90>
    f81a:	2000      	movs	r0, #0
    f81c:	f88d 000b 	strb.w	r0, [sp, #11]
    f820:	e7f1      	b.n	f806 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE+0x7c>
    f822:	e7f0      	b.n	f806 <_ZN4core6option15Option$LT$T$GT$9unwrap_or17h615690d52214622dE+0x7c>

0000f824 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h22ceb477e38723abE>:
    f824:	b580      	push	{r7, lr}
    f826:	b086      	sub	sp, #24
    f828:	9004      	str	r0, [sp, #16]
    f82a:	8801      	ldrh	r1, [r0, #0]
    f82c:	460a      	mov	r2, r1
    f82e:	2900      	cmp	r1, #0
    f830:	9002      	str	r0, [sp, #8]
    f832:	d001      	beq.n	f838 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h22ceb477e38723abE+0x14>
    f834:	e7ff      	b.n	f836 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h22ceb477e38723abE+0x12>
    f836:	e004      	b.n	f842 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h22ceb477e38723abE+0x1e>
    f838:	2000      	movs	r0, #0
    f83a:	f8ad 000c 	strh.w	r0, [sp, #12]
    f83e:	e00f      	b.n	f860 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h22ceb477e38723abE+0x3c>
    f840:	defe      	udf	#254	; 0xfe
    f842:	9802      	ldr	r0, [sp, #8]
    f844:	1c81      	adds	r1, r0, #2
    f846:	9105      	str	r1, [sp, #20]
    f848:	4608      	mov	r0, r1
    f84a:	f002 f904 	bl	11a56 <_ZN84_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..clone..Clone$GT$5clone17h0724d1c23a2b4d0dE>
    f84e:	9001      	str	r0, [sp, #4]
    f850:	e7ff      	b.n	f852 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h22ceb477e38723abE+0x2e>
    f852:	9801      	ldr	r0, [sp, #4]
    f854:	f8ad 000e 	strh.w	r0, [sp, #14]
    f858:	2101      	movs	r1, #1
    f85a:	f8ad 100c 	strh.w	r1, [sp, #12]
    f85e:	e7ff      	b.n	f860 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h22ceb477e38723abE+0x3c>
    f860:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    f864:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    f868:	b006      	add	sp, #24
    f86a:	bd80      	pop	{r7, pc}

0000f86c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>:
    fn clone(&self) -> Self {
    f86c:	b580      	push	{r7, lr}
    f86e:	b09c      	sub	sp, #112	; 0x70
    f870:	911b      	str	r1, [sp, #108]	; 0x6c
    f872:	aa01      	add	r2, sp, #4
        Vec(self.0.clone())
    f874:	9000      	str	r0, [sp, #0]
    f876:	4610      	mov	r0, r2
    f878:	f000 fafc 	bl	fe74 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>
    f87c:	e7ff      	b.n	f87e <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE+0x12>
    f87e:	a901      	add	r1, sp, #4
    f880:	2268      	movs	r2, #104	; 0x68
    f882:	9800      	ldr	r0, [sp, #0]
    f884:	f00a fe20 	bl	1a4c8 <__aeabi_memcpy>
    }
    f888:	b01c      	add	sp, #112	; 0x70
    f88a:	bd80      	pop	{r7, pc}

0000f88c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>:
    fn clone(&self) -> Self {
    f88c:	b580      	push	{r7, lr}
    f88e:	b0b6      	sub	sp, #216	; 0xd8
    f890:	9135      	str	r1, [sp, #212]	; 0xd4
    f892:	aa02      	add	r2, sp, #8
        Vec(self.0.clone())
    f894:	9001      	str	r0, [sp, #4]
    f896:	4610      	mov	r0, r2
    f898:	f000 fb14 	bl	fec4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>
    f89c:	e7ff      	b.n	f89e <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E+0x12>
    f89e:	a902      	add	r1, sp, #8
    f8a0:	22cc      	movs	r2, #204	; 0xcc
    f8a2:	9801      	ldr	r0, [sp, #4]
    f8a4:	f00a fe10 	bl	1a4c8 <__aeabi_memcpy>
    }
    f8a8:	b036      	add	sp, #216	; 0xd8
    f8aa:	bd80      	pop	{r7, pc}

0000f8ac <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>:
    fn drop(&mut self) {
    f8ac:	b580      	push	{r7, lr}
    f8ae:	b084      	sub	sp, #16
    f8b0:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
    f8b2:	f000 f84c 	bl	f94e <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>
    f8b6:	9002      	str	r0, [sp, #8]
    f8b8:	9101      	str	r1, [sp, #4]
    f8ba:	e7ff      	b.n	f8bc <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x10>
    f8bc:	9802      	ldr	r0, [sp, #8]
    f8be:	9901      	ldr	r1, [sp, #4]
    f8c0:	f001 fba7 	bl	11012 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
    f8c4:	e7ff      	b.n	f8c6 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1a>
    f8c6:	e7ff      	b.n	f8c8 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1c>
    }
    f8c8:	b004      	add	sp, #16
    f8ca:	bd80      	pop	{r7, pc}

0000f8cc <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>:
    fn drop(&mut self) {
    f8cc:	b580      	push	{r7, lr}
    f8ce:	b084      	sub	sp, #16
    f8d0:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
    f8d2:	f000 f848 	bl	f966 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
    f8d6:	9002      	str	r0, [sp, #8]
    f8d8:	9101      	str	r1, [sp, #4]
    f8da:	e7ff      	b.n	f8dc <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x10>
    f8dc:	9802      	ldr	r0, [sp, #8]
    f8de:	9901      	ldr	r1, [sp, #4]
    f8e0:	f001 fb97 	bl	11012 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
    f8e4:	e7ff      	b.n	f8e6 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1a>
    f8e6:	e7ff      	b.n	f8e8 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1c>
    }
    f8e8:	b004      	add	sp, #16
    f8ea:	bd80      	pop	{r7, pc}

0000f8ec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>:
    fn deref(&self) -> &[T] {
    f8ec:	b580      	push	{r7, lr}
    f8ee:	b084      	sub	sp, #16
    f8f0:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
    f8f2:	f000 fb0f 	bl	ff14 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
    f8f6:	9002      	str	r0, [sp, #8]
    f8f8:	9101      	str	r1, [sp, #4]
    f8fa:	e7ff      	b.n	f8fc <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E+0x10>
    }
    f8fc:	9802      	ldr	r0, [sp, #8]
    f8fe:	9901      	ldr	r1, [sp, #4]
    f900:	b004      	add	sp, #16
    f902:	bd80      	pop	{r7, pc}

0000f904 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>:
    fn deref(&self) -> &[T] {
    f904:	b580      	push	{r7, lr}
    f906:	b084      	sub	sp, #16
    f908:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
    f90a:	f000 fb18 	bl	ff3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
    f90e:	9002      	str	r0, [sp, #8]
    f910:	9101      	str	r1, [sp, #4]
    f912:	e7ff      	b.n	f914 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E+0x10>
    }
    f914:	9802      	ldr	r0, [sp, #8]
    f916:	9901      	ldr	r1, [sp, #4]
    f918:	b004      	add	sp, #16
    f91a:	bd80      	pop	{r7, pc}

0000f91c <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>:
    fn drop(&mut self) {
    f91c:	b580      	push	{r7, lr}
    f91e:	b086      	sub	sp, #24
    f920:	9005      	str	r0, [sp, #20]
            ptr::drop_in_place(&mut self.vec[self.next..]);
    f922:	9003      	str	r0, [sp, #12]
    f924:	f000 f81f 	bl	f966 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
    f928:	9002      	str	r0, [sp, #8]
    f92a:	9101      	str	r1, [sp, #4]
    f92c:	e7ff      	b.n	f92e <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x12>
    f92e:	9803      	ldr	r0, [sp, #12]
    f930:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    f934:	9104      	str	r1, [sp, #16]
    f936:	9a04      	ldr	r2, [sp, #16]
    f938:	9802      	ldr	r0, [sp, #8]
    f93a:	9901      	ldr	r1, [sp, #4]
    f93c:	f001 fb76 	bl	1102c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>
    f940:	e7ff      	b.n	f942 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x26>
    f942:	e7ff      	b.n	f944 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x28>
    f944:	2000      	movs	r0, #0
            self.vec.0.len = 0;
    f946:	9903      	ldr	r1, [sp, #12]
    f948:	6008      	str	r0, [r1, #0]
    }
    f94a:	b006      	add	sp, #24
    f94c:	bd80      	pop	{r7, pc}

0000f94e <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>:

impl<T, N> ops::DerefMut for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn deref_mut(&mut self) -> &mut [T] {
    f94e:	b580      	push	{r7, lr}
    f950:	b084      	sub	sp, #16
    f952:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
    f954:	f000 f8ff 	bl	fb56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
    f958:	9002      	str	r0, [sp, #8]
    f95a:	9101      	str	r1, [sp, #4]
    f95c:	e7ff      	b.n	f95e <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E+0x10>
    }
    f95e:	9802      	ldr	r0, [sp, #8]
    f960:	9901      	ldr	r1, [sp, #4]
    f962:	b004      	add	sp, #16
    f964:	bd80      	pop	{r7, pc}

0000f966 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>:
    fn deref_mut(&mut self) -> &mut [T] {
    f966:	b580      	push	{r7, lr}
    f968:	b084      	sub	sp, #16
    f96a:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
    f96c:	f000 f908 	bl	fb80 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
    f970:	9002      	str	r0, [sp, #8]
    f972:	9101      	str	r1, [sp, #4]
    f974:	e7ff      	b.n	f976 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E+0x10>
    }
    f976:	9802      	ldr	r0, [sp, #8]
    f978:	9901      	ldr	r1, [sp, #4]
    f97a:	b004      	add	sp, #16
    f97c:	bd80      	pop	{r7, pc}

0000f97e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
    f97e:	b580      	push	{r7, lr}
    f980:	b084      	sub	sp, #16
    f982:	9001      	str	r0, [sp, #4]
    f984:	9102      	str	r1, [sp, #8]
    f986:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
    f988:	f000 f973 	bl	fc72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
    f98c:	9000      	str	r0, [sp, #0]
    f98e:	e7ff      	b.n	f990 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE+0x12>
    }
    f990:	9800      	ldr	r0, [sp, #0]
    f992:	f000 0001 	and.w	r0, r0, #1
    f996:	b004      	add	sp, #16
    f998:	bd80      	pop	{r7, pc}

0000f99a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>:
    pub fn new() -> Self {
    f99a:	b580      	push	{r7, lr}
    f99c:	b09c      	sub	sp, #112	; 0x70
    f99e:	a902      	add	r1, sp, #8
        Vec(crate::i::Vec::new())
    f9a0:	9001      	str	r0, [sp, #4]
    f9a2:	4608      	mov	r0, r1
    f9a4:	f000 f8c8 	bl	fb38 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
    f9a8:	e7ff      	b.n	f9aa <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E+0x10>
    f9aa:	a902      	add	r1, sp, #8
    f9ac:	2268      	movs	r2, #104	; 0x68
    f9ae:	9801      	ldr	r0, [sp, #4]
    f9b0:	f00a fd8a 	bl	1a4c8 <__aeabi_memcpy>
    }
    f9b4:	b01c      	add	sp, #112	; 0x70
    f9b6:	bd80      	pop	{r7, pc}

0000f9b8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>:
    pub fn new() -> Self {
    f9b8:	b580      	push	{r7, lr}
    f9ba:	b0b4      	sub	sp, #208	; 0xd0
    f9bc:	a901      	add	r1, sp, #4
        Vec(crate::i::Vec::new())
    f9be:	9000      	str	r0, [sp, #0]
    f9c0:	4608      	mov	r0, r1
    f9c2:	f000 f8aa 	bl	fb1a <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
    f9c6:	e7ff      	b.n	f9c8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE+0x10>
    f9c8:	a901      	add	r1, sp, #4
    f9ca:	22cc      	movs	r2, #204	; 0xcc
    f9cc:	9800      	ldr	r0, [sp, #0]
    f9ce:	f00a fd7b 	bl	1a4c8 <__aeabi_memcpy>
    }
    f9d2:	b034      	add	sp, #208	; 0xd0
    f9d4:	bd80      	pop	{r7, pc}

0000f9d6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
    f9d6:	b580      	push	{r7, lr}
    f9d8:	b086      	sub	sp, #24
    f9da:	460a      	mov	r2, r1
    f9dc:	9004      	str	r0, [sp, #16]
    f9de:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.0.push(item)
    f9e2:	9203      	str	r2, [sp, #12]
    f9e4:	f000 fa0b 	bl	fdfe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>
    f9e8:	9002      	str	r0, [sp, #8]
    f9ea:	9101      	str	r1, [sp, #4]
    f9ec:	e7ff      	b.n	f9ee <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE+0x18>
    }
    f9ee:	9802      	ldr	r0, [sp, #8]
    f9f0:	9901      	ldr	r1, [sp, #4]
    f9f2:	b006      	add	sp, #24
    f9f4:	bd80      	pop	{r7, pc}

0000f9f6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>:
    pub fn clear(&mut self) {
    f9f6:	b580      	push	{r7, lr}
    f9f8:	b082      	sub	sp, #8
    f9fa:	9001      	str	r0, [sp, #4]
        self.0.clear()
    f9fc:	f000 fa28 	bl	fe50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>
    fa00:	e7ff      	b.n	fa02 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E+0xc>
    }
    fa02:	b002      	add	sp, #8
    fa04:	bd80      	pop	{r7, pc}

0000fa06 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>:
    pub fn clear(&mut self) {
    fa06:	b580      	push	{r7, lr}
    fa08:	b082      	sub	sp, #8
    fa0a:	9001      	str	r0, [sp, #4]
        self.0.clear()
    fa0c:	f000 fa29 	bl	fe62 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>
    fa10:	e7ff      	b.n	fa12 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E+0xc>
    }
    fa12:	b002      	add	sp, #8
    fa14:	bd80      	pop	{r7, pc}

0000fa16 <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>:
    fn into_iter(self) -> Self::IntoIter {
    fa16:	b580      	push	{r7, lr}
    fa18:	b0b6      	sub	sp, #216	; 0xd8
    fa1a:	aa03      	add	r2, sp, #12
    fa1c:	23cc      	movs	r3, #204	; 0xcc
        IntoIter { vec: self, next: 0 }
    fa1e:	9002      	str	r0, [sp, #8]
    fa20:	4610      	mov	r0, r2
    fa22:	9201      	str	r2, [sp, #4]
    fa24:	461a      	mov	r2, r3
    fa26:	9300      	str	r3, [sp, #0]
    fa28:	f00a fd4e 	bl	1a4c8 <__aeabi_memcpy>
    fa2c:	9802      	ldr	r0, [sp, #8]
    fa2e:	9901      	ldr	r1, [sp, #4]
    fa30:	9a00      	ldr	r2, [sp, #0]
    fa32:	f00a fd49 	bl	1a4c8 <__aeabi_memcpy>
    fa36:	2000      	movs	r0, #0
    fa38:	9902      	ldr	r1, [sp, #8]
    fa3a:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    }
    fa3e:	b036      	add	sp, #216	; 0xd8
    fa40:	bd80      	pop	{r7, pc}

0000fa42 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>:
    fn next(&mut self) -> Option<Self::Item> {
    fa42:	b580      	push	{r7, lr}
    fa44:	b08e      	sub	sp, #56	; 0x38
    fa46:	900a      	str	r0, [sp, #40]	; 0x28
        if self.next < self.vec.len() {
    fa48:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    fa4c:	9008      	str	r0, [sp, #32]
    fa4e:	9107      	str	r1, [sp, #28]
    fa50:	f7ff ff58 	bl	f904 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>
    fa54:	9006      	str	r0, [sp, #24]
    fa56:	9105      	str	r1, [sp, #20]
    fa58:	e7ff      	b.n	fa5a <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x18>
    fa5a:	9806      	ldr	r0, [sp, #24]
    fa5c:	9905      	ldr	r1, [sp, #20]
    fa5e:	f001 fa85 	bl	10f6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
    fa62:	9004      	str	r0, [sp, #16]
    fa64:	e7ff      	b.n	fa66 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x24>
    fa66:	9807      	ldr	r0, [sp, #28]
    fa68:	9904      	ldr	r1, [sp, #16]
    fa6a:	4288      	cmp	r0, r1
    fa6c:	d304      	bcc.n	fa78 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x36>
    fa6e:	e7ff      	b.n	fa70 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x2e>
    fa70:	2000      	movs	r0, #0
            None
    fa72:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
    fa76:	e029      	b.n	facc <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
                (self.vec.0.buffer.as_ptr() as *const T)
    fa78:	9808      	ldr	r0, [sp, #32]
    fa7a:	1d01      	adds	r1, r0, #4
    fa7c:	910c      	str	r1, [sp, #48]	; 0x30
    fa7e:	910d      	str	r1, [sp, #52]	; 0x34
    fa80:	9103      	str	r1, [sp, #12]
    fa82:	e7ff      	b.n	fa84 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x42>
                    .add(self.next)
    fa84:	9808      	ldr	r0, [sp, #32]
    fa86:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
                (self.vec.0.buffer.as_ptr() as *const T)
    fa8a:	9803      	ldr	r0, [sp, #12]
    fa8c:	f003 ff7c 	bl	13988 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
    fa90:	9002      	str	r0, [sp, #8]
    fa92:	e7ff      	b.n	fa94 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x52>
    fa94:	9802      	ldr	r0, [sp, #8]
    fa96:	f003 ff82 	bl	1399e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>
    fa9a:	4601      	mov	r1, r0
    fa9c:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
    faa0:	9101      	str	r1, [sp, #4]
    faa2:	e7ff      	b.n	faa4 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x62>
            self.next += 1;
    faa4:	9808      	ldr	r0, [sp, #32]
    faa6:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
    faaa:	1c4a      	adds	r2, r1, #1
    faac:	4613      	mov	r3, r2
    faae:	428a      	cmp	r2, r1
    fab0:	9300      	str	r3, [sp, #0]
    fab2:	d311      	bcc.n	fad8 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x96>
    fab4:	e7ff      	b.n	fab6 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x74>
    fab6:	9800      	ldr	r0, [sp, #0]
    fab8:	9908      	ldr	r1, [sp, #32]
    faba:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
            Some(item)
    fabe:	9a01      	ldr	r2, [sp, #4]
    fac0:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
    fac4:	2301      	movs	r3, #1
    fac6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
    faca:	e7ff      	b.n	facc <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
    }
    facc:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
    fad0:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
    fad4:	b00e      	add	sp, #56	; 0x38
    fad6:	bd80      	pop	{r7, pc}
            self.next += 1;
    fad8:	f64c 1030 	movw	r0, #51504	; 0xc930
    fadc:	f2c0 0001 	movt	r0, #1
    fae0:	f64c 1218 	movw	r2, #51480	; 0xc918
    fae4:	f2c0 0201 	movt	r2, #1
    fae8:	211c      	movs	r1, #28
    faea:	f004 f919 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    faee:	defe      	udf	#254	; 0xfe

0000faf0 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
    faf0:	b580      	push	{r7, lr}
    faf2:	b084      	sub	sp, #16
    faf4:	9002      	str	r0, [sp, #8]
    faf6:	9103      	str	r1, [sp, #12]
    faf8:	f64c 104c 	movw	r0, #51532	; 0xc94c
    fafc:	f2c0 0001 	movt	r0, #1
    fb00:	2202      	movs	r2, #2
    fb02:	9001      	str	r0, [sp, #4]
    fb04:	4608      	mov	r0, r1
    fb06:	9901      	ldr	r1, [sp, #4]
    fb08:	f004 fe2a 	bl	14760 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
    fb0c:	9000      	str	r0, [sp, #0]
    fb0e:	e7ff      	b.n	fb10 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
    fb10:	9800      	ldr	r0, [sp, #0]
    fb12:	f000 0001 	and.w	r0, r0, #1
    fb16:	b004      	add	sp, #16
    fb18:	bd80      	pop	{r7, pc}

0000fb1a <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>:
    pub const fn new() -> Self {
    fb1a:	b580      	push	{r7, lr}
    fb1c:	b0b4      	sub	sp, #208	; 0xd0
            buffer: MaybeUninit::uninit(),
    fb1e:	9001      	str	r0, [sp, #4]
    fb20:	e7ff      	b.n	fb22 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE+0x8>
        Self {
    fb22:	9801      	ldr	r0, [sp, #4]
    fb24:	3004      	adds	r0, #4
    fb26:	a902      	add	r1, sp, #8
    fb28:	22c8      	movs	r2, #200	; 0xc8
    fb2a:	f00a fccd 	bl	1a4c8 <__aeabi_memcpy>
    fb2e:	2100      	movs	r1, #0
    fb30:	9a01      	ldr	r2, [sp, #4]
    fb32:	6011      	str	r1, [r2, #0]
    }
    fb34:	b034      	add	sp, #208	; 0xd0
    fb36:	bd80      	pop	{r7, pc}

0000fb38 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>:
    pub const fn new() -> Self {
    fb38:	b580      	push	{r7, lr}
    fb3a:	b09a      	sub	sp, #104	; 0x68
            buffer: MaybeUninit::uninit(),
    fb3c:	9000      	str	r0, [sp, #0]
    fb3e:	e7ff      	b.n	fb40 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE+0x8>
        Self {
    fb40:	9800      	ldr	r0, [sp, #0]
    fb42:	3004      	adds	r0, #4
    fb44:	a901      	add	r1, sp, #4
    fb46:	2264      	movs	r2, #100	; 0x64
    fb48:	f00a fcbe 	bl	1a4c8 <__aeabi_memcpy>
    fb4c:	2100      	movs	r1, #0
    fb4e:	9a00      	ldr	r2, [sp, #0]
    fb50:	6011      	str	r1, [r2, #0]
    }
    fb52:	b01a      	add	sp, #104	; 0x68
    fb54:	bd80      	pop	{r7, pc}

0000fb56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
    fb56:	b580      	push	{r7, lr}
    fb58:	b088      	sub	sp, #32
    fb5a:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
    fb5c:	1d01      	adds	r1, r0, #4
    fb5e:	9106      	str	r1, [sp, #24]
    fb60:	9107      	str	r1, [sp, #28]
    fb62:	9004      	str	r0, [sp, #16]
    fb64:	9103      	str	r1, [sp, #12]
    fb66:	e7ff      	b.n	fb68 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x12>
    fb68:	9804      	ldr	r0, [sp, #16]
    fb6a:	6801      	ldr	r1, [r0, #0]
    fb6c:	9803      	ldr	r0, [sp, #12]
    fb6e:	f001 f9d9 	bl	10f24 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
    fb72:	9002      	str	r0, [sp, #8]
    fb74:	9101      	str	r1, [sp, #4]
    fb76:	e7ff      	b.n	fb78 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x22>
    }
    fb78:	9802      	ldr	r0, [sp, #8]
    fb7a:	9901      	ldr	r1, [sp, #4]
    fb7c:	b008      	add	sp, #32
    fb7e:	bd80      	pop	{r7, pc}

0000fb80 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
    fb80:	b580      	push	{r7, lr}
    fb82:	b088      	sub	sp, #32
    fb84:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
    fb86:	1d01      	adds	r1, r0, #4
    fb88:	9106      	str	r1, [sp, #24]
    fb8a:	9107      	str	r1, [sp, #28]
    fb8c:	9004      	str	r0, [sp, #16]
    fb8e:	9103      	str	r1, [sp, #12]
    fb90:	e7ff      	b.n	fb92 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x12>
    fb92:	9804      	ldr	r0, [sp, #16]
    fb94:	6801      	ldr	r1, [r0, #0]
    fb96:	9803      	ldr	r0, [sp, #12]
    fb98:	f001 f9c4 	bl	10f24 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
    fb9c:	9002      	str	r0, [sp, #8]
    fb9e:	9101      	str	r1, [sp, #4]
    fba0:	e7ff      	b.n	fba2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x22>
    }
    fba2:	9802      	ldr	r0, [sp, #8]
    fba4:	9901      	ldr	r1, [sp, #4]
    fba6:	b008      	add	sp, #32
    fba8:	bd80      	pop	{r7, pc}

0000fbaa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
    fbaa:	b580      	push	{r7, lr}
    fbac:	b08a      	sub	sp, #40	; 0x28
    fbae:	460a      	mov	r2, r1
    fbb0:	9006      	str	r0, [sp, #24]
    fbb2:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
    fbb6:	1d01      	adds	r1, r0, #4
    fbb8:	9108      	str	r1, [sp, #32]
    fbba:	9109      	str	r1, [sp, #36]	; 0x24
    fbbc:	9005      	str	r0, [sp, #20]
    fbbe:	9204      	str	r2, [sp, #16]
    fbc0:	9103      	str	r1, [sp, #12]
    fbc2:	e7ff      	b.n	fbc4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x1a>
            .add(self.len)
    fbc4:	9805      	ldr	r0, [sp, #20]
    fbc6:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
    fbc8:	9803      	ldr	r0, [sp, #12]
    fbca:	f001 fb1e 	bl	1120a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
    fbce:	9002      	str	r0, [sp, #8]
    fbd0:	e7ff      	b.n	fbd2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x28>
    fbd2:	9802      	ldr	r0, [sp, #8]
    fbd4:	9904      	ldr	r1, [sp, #16]
    fbd6:	f001 fb23 	bl	11220 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
    fbda:	e7ff      	b.n	fbdc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x32>
        self.len += 1;
    fbdc:	9805      	ldr	r0, [sp, #20]
    fbde:	6801      	ldr	r1, [r0, #0]
    fbe0:	1c4a      	adds	r2, r1, #1
    fbe2:	4613      	mov	r3, r2
    fbe4:	428a      	cmp	r2, r1
    fbe6:	9301      	str	r3, [sp, #4]
    fbe8:	d305      	bcc.n	fbf6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x4c>
    fbea:	e7ff      	b.n	fbec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x42>
    fbec:	9801      	ldr	r0, [sp, #4]
    fbee:	9905      	ldr	r1, [sp, #20]
    fbf0:	6008      	str	r0, [r1, #0]
    }
    fbf2:	b00a      	add	sp, #40	; 0x28
    fbf4:	bd80      	pop	{r7, pc}
        self.len += 1;
    fbf6:	f64c 10f0 	movw	r0, #51696	; 0xc9f0
    fbfa:	f2c0 0001 	movt	r0, #1
    fbfe:	f64c 12d4 	movw	r2, #51668	; 0xc9d4
    fc02:	f2c0 0201 	movt	r2, #1
    fc06:	211c      	movs	r1, #28
    fc08:	f004 f88a 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc0c:	defe      	udf	#254	; 0xfe

0000fc0e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
    fc0e:	b580      	push	{r7, lr}
    fc10:	b08a      	sub	sp, #40	; 0x28
    fc12:	460a      	mov	r2, r1
    fc14:	9006      	str	r0, [sp, #24]
    fc16:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
    fc1a:	1d01      	adds	r1, r0, #4
    fc1c:	9108      	str	r1, [sp, #32]
    fc1e:	9109      	str	r1, [sp, #36]	; 0x24
    fc20:	9005      	str	r0, [sp, #20]
    fc22:	9204      	str	r2, [sp, #16]
    fc24:	9103      	str	r1, [sp, #12]
    fc26:	e7ff      	b.n	fc28 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x1a>
            .add(self.len)
    fc28:	9805      	ldr	r0, [sp, #20]
    fc2a:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
    fc2c:	9803      	ldr	r0, [sp, #12]
    fc2e:	f001 faec 	bl	1120a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
    fc32:	9002      	str	r0, [sp, #8]
    fc34:	e7ff      	b.n	fc36 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x28>
    fc36:	9802      	ldr	r0, [sp, #8]
    fc38:	9904      	ldr	r1, [sp, #16]
    fc3a:	f001 faf1 	bl	11220 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
    fc3e:	e7ff      	b.n	fc40 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x32>
        self.len += 1;
    fc40:	9805      	ldr	r0, [sp, #20]
    fc42:	6801      	ldr	r1, [r0, #0]
    fc44:	1c4a      	adds	r2, r1, #1
    fc46:	4613      	mov	r3, r2
    fc48:	428a      	cmp	r2, r1
    fc4a:	9301      	str	r3, [sp, #4]
    fc4c:	d305      	bcc.n	fc5a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x4c>
    fc4e:	e7ff      	b.n	fc50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x42>
    fc50:	9801      	ldr	r0, [sp, #4]
    fc52:	9905      	ldr	r1, [sp, #20]
    fc54:	6008      	str	r0, [r1, #0]
    }
    fc56:	b00a      	add	sp, #40	; 0x28
    fc58:	bd80      	pop	{r7, pc}
        self.len += 1;
    fc5a:	f64c 10f0 	movw	r0, #51696	; 0xc9f0
    fc5e:	f2c0 0001 	movt	r0, #1
    fc62:	f64c 12d4 	movw	r2, #51668	; 0xc9d4
    fc66:	f2c0 0201 	movt	r2, #1
    fc6a:	211c      	movs	r1, #28
    fc6c:	f004 f858 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fc70:	defe      	udf	#254	; 0xfe

0000fc72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
    fc72:	b580      	push	{r7, lr}
    fc74:	b094      	sub	sp, #80	; 0x50
    fc76:	900e      	str	r0, [sp, #56]	; 0x38
    fc78:	910f      	str	r1, [sp, #60]	; 0x3c
    fc7a:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
    fc7c:	6803      	ldr	r3, [r0, #0]
    fc7e:	9009      	str	r0, [sp, #36]	; 0x24
    fc80:	4608      	mov	r0, r1
    fc82:	9108      	str	r1, [sp, #32]
    fc84:	4611      	mov	r1, r2
    fc86:	9207      	str	r2, [sp, #28]
    fc88:	9306      	str	r3, [sp, #24]
    fc8a:	f001 f96f 	bl	10f6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
    fc8e:	9005      	str	r0, [sp, #20]
    fc90:	e7ff      	b.n	fc92 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x20>
    fc92:	9806      	ldr	r0, [sp, #24]
    fc94:	9905      	ldr	r1, [sp, #20]
    fc96:	1842      	adds	r2, r0, r1
    fc98:	4613      	mov	r3, r2
    fc9a:	4282      	cmp	r2, r0
    fc9c:	9304      	str	r3, [sp, #16]
    fc9e:	d33f      	bcc.n	fd20 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xae>
    fca0:	e7ff      	b.n	fca2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x30>
    fca2:	9809      	ldr	r0, [sp, #36]	; 0x24
    fca4:	f000 f96a 	bl	ff7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>
    fca8:	9003      	str	r0, [sp, #12]
    fcaa:	e7ff      	b.n	fcac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x3a>
    fcac:	9804      	ldr	r0, [sp, #16]
    fcae:	9903      	ldr	r1, [sp, #12]
    fcb0:	4288      	cmp	r0, r1
    fcb2:	d807      	bhi.n	fcc4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x52>
    fcb4:	e7ff      	b.n	fcb6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x44>
            for elem in other {
    fcb6:	9808      	ldr	r0, [sp, #32]
    fcb8:	9907      	ldr	r1, [sp, #28]
    fcba:	f001 f9cb 	bl	11054 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
    fcbe:	9002      	str	r0, [sp, #8]
    fcc0:	9101      	str	r1, [sp, #4]
    fcc2:	e003      	b.n	fccc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x5a>
    fcc4:	2001      	movs	r0, #1
            Err(())
    fcc6:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
    fcca:	e025      	b.n	fd18 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
    fccc:	9802      	ldr	r0, [sp, #8]
    fcce:	900b      	str	r0, [sp, #44]	; 0x2c
    fcd0:	9901      	ldr	r1, [sp, #4]
    fcd2:	910c      	str	r1, [sp, #48]	; 0x30
    fcd4:	e7ff      	b.n	fcd6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
    fcd6:	a80b      	add	r0, sp, #44	; 0x2c
    fcd8:	f001 f9de 	bl	11098 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
    fcdc:	900d      	str	r0, [sp, #52]	; 0x34
    fcde:	e7ff      	b.n	fce0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x6e>
    fce0:	980d      	ldr	r0, [sp, #52]	; 0x34
    fce2:	2800      	cmp	r0, #0
    fce4:	4601      	mov	r1, r0
    fce6:	bf18      	it	ne
    fce8:	2101      	movne	r1, #1
    fcea:	2800      	cmp	r0, #0
    fcec:	d001      	beq.n	fcf2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x80>
    fcee:	e7ff      	b.n	fcf0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x7e>
    fcf0:	e004      	b.n	fcfc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x8a>
    fcf2:	2000      	movs	r0, #0
            Ok(())
    fcf4:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
    fcf8:	e00e      	b.n	fd18 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
    fcfa:	defe      	udf	#254	; 0xfe
    fcfc:	980d      	ldr	r0, [sp, #52]	; 0x34
    fcfe:	9011      	str	r0, [sp, #68]	; 0x44
    fd00:	9012      	str	r0, [sp, #72]	; 0x48
    fd02:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
    fd04:	f001 f85e 	bl	10dc4 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
    fd08:	9000      	str	r0, [sp, #0]
    fd0a:	e7ff      	b.n	fd0c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x9a>
    fd0c:	9809      	ldr	r0, [sp, #36]	; 0x24
    fd0e:	9900      	ldr	r1, [sp, #0]
    fd10:	f7ff ff4b 	bl	fbaa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>
    fd14:	e7ff      	b.n	fd16 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa4>
            for elem in other {
    fd16:	e7de      	b.n	fcd6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
    }
    fd18:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
    fd1c:	b014      	add	sp, #80	; 0x50
    fd1e:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
    fd20:	f64c 10f0 	movw	r0, #51696	; 0xc9f0
    fd24:	f2c0 0001 	movt	r0, #1
    fd28:	f64c 220c 	movw	r2, #51724	; 0xca0c
    fd2c:	f2c0 0201 	movt	r2, #1
    fd30:	211c      	movs	r1, #28
    fd32:	f003 fff5 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fd36:	defe      	udf	#254	; 0xfe

0000fd38 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
    fd38:	b580      	push	{r7, lr}
    fd3a:	b094      	sub	sp, #80	; 0x50
    fd3c:	900e      	str	r0, [sp, #56]	; 0x38
    fd3e:	910f      	str	r1, [sp, #60]	; 0x3c
    fd40:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
    fd42:	6803      	ldr	r3, [r0, #0]
    fd44:	9009      	str	r0, [sp, #36]	; 0x24
    fd46:	4608      	mov	r0, r1
    fd48:	9108      	str	r1, [sp, #32]
    fd4a:	4611      	mov	r1, r2
    fd4c:	9207      	str	r2, [sp, #28]
    fd4e:	9306      	str	r3, [sp, #24]
    fd50:	f001 f90c 	bl	10f6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
    fd54:	9005      	str	r0, [sp, #20]
    fd56:	e7ff      	b.n	fd58 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x20>
    fd58:	9806      	ldr	r0, [sp, #24]
    fd5a:	9905      	ldr	r1, [sp, #20]
    fd5c:	1842      	adds	r2, r0, r1
    fd5e:	4613      	mov	r3, r2
    fd60:	4282      	cmp	r2, r0
    fd62:	9304      	str	r3, [sp, #16]
    fd64:	d33f      	bcc.n	fde6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xae>
    fd66:	e7ff      	b.n	fd68 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x30>
    fd68:	9809      	ldr	r0, [sp, #36]	; 0x24
    fd6a:	f000 f8fd 	bl	ff68 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
    fd6e:	9003      	str	r0, [sp, #12]
    fd70:	e7ff      	b.n	fd72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x3a>
    fd72:	9804      	ldr	r0, [sp, #16]
    fd74:	9903      	ldr	r1, [sp, #12]
    fd76:	4288      	cmp	r0, r1
    fd78:	d807      	bhi.n	fd8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x52>
    fd7a:	e7ff      	b.n	fd7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x44>
            for elem in other {
    fd7c:	9808      	ldr	r0, [sp, #32]
    fd7e:	9907      	ldr	r1, [sp, #28]
    fd80:	f001 f968 	bl	11054 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
    fd84:	9002      	str	r0, [sp, #8]
    fd86:	9101      	str	r1, [sp, #4]
    fd88:	e003      	b.n	fd92 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x5a>
    fd8a:	2001      	movs	r0, #1
            Err(())
    fd8c:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
    fd90:	e025      	b.n	fdde <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
    fd92:	9802      	ldr	r0, [sp, #8]
    fd94:	900b      	str	r0, [sp, #44]	; 0x2c
    fd96:	9901      	ldr	r1, [sp, #4]
    fd98:	910c      	str	r1, [sp, #48]	; 0x30
    fd9a:	e7ff      	b.n	fd9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
    fd9c:	a80b      	add	r0, sp, #44	; 0x2c
    fd9e:	f001 f97b 	bl	11098 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
    fda2:	900d      	str	r0, [sp, #52]	; 0x34
    fda4:	e7ff      	b.n	fda6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x6e>
    fda6:	980d      	ldr	r0, [sp, #52]	; 0x34
    fda8:	2800      	cmp	r0, #0
    fdaa:	4601      	mov	r1, r0
    fdac:	bf18      	it	ne
    fdae:	2101      	movne	r1, #1
    fdb0:	2800      	cmp	r0, #0
    fdb2:	d001      	beq.n	fdb8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x80>
    fdb4:	e7ff      	b.n	fdb6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x7e>
    fdb6:	e004      	b.n	fdc2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x8a>
    fdb8:	2000      	movs	r0, #0
            Ok(())
    fdba:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
    fdbe:	e00e      	b.n	fdde <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
    fdc0:	defe      	udf	#254	; 0xfe
    fdc2:	980d      	ldr	r0, [sp, #52]	; 0x34
    fdc4:	9011      	str	r0, [sp, #68]	; 0x44
    fdc6:	9012      	str	r0, [sp, #72]	; 0x48
    fdc8:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
    fdca:	f000 fffb 	bl	10dc4 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
    fdce:	9000      	str	r0, [sp, #0]
    fdd0:	e7ff      	b.n	fdd2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x9a>
    fdd2:	9809      	ldr	r0, [sp, #36]	; 0x24
    fdd4:	9900      	ldr	r1, [sp, #0]
    fdd6:	f7ff ff1a 	bl	fc0e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
    fdda:	e7ff      	b.n	fddc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa4>
            for elem in other {
    fddc:	e7de      	b.n	fd9c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
    }
    fdde:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
    fde2:	b014      	add	sp, #80	; 0x50
    fde4:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
    fde6:	f64c 10f0 	movw	r0, #51696	; 0xc9f0
    fdea:	f2c0 0001 	movt	r0, #1
    fdee:	f64c 220c 	movw	r2, #51724	; 0xca0c
    fdf2:	f2c0 0201 	movt	r2, #1
    fdf6:	211c      	movs	r1, #28
    fdf8:	f003 ff92 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fdfc:	defe      	udf	#254	; 0xfe

0000fdfe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
    fdfe:	b580      	push	{r7, lr}
    fe00:	b088      	sub	sp, #32
    fe02:	460a      	mov	r2, r1
    fe04:	9006      	str	r0, [sp, #24]
    fe06:	f8ad 101e 	strh.w	r1, [sp, #30]
        if self.len < self.capacity() {
    fe0a:	6801      	ldr	r1, [r0, #0]
    fe0c:	9004      	str	r0, [sp, #16]
    fe0e:	9203      	str	r2, [sp, #12]
    fe10:	9102      	str	r1, [sp, #8]
    fe12:	f000 f8a9 	bl	ff68 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
    fe16:	9001      	str	r0, [sp, #4]
    fe18:	e7ff      	b.n	fe1a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x1c>
    fe1a:	9802      	ldr	r0, [sp, #8]
    fe1c:	9901      	ldr	r1, [sp, #4]
    fe1e:	4288      	cmp	r0, r1
    fe20:	d307      	bcc.n	fe32 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x34>
    fe22:	e7ff      	b.n	fe24 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x26>
            Err(item)
    fe24:	9803      	ldr	r0, [sp, #12]
    fe26:	f8ad 0016 	strh.w	r0, [sp, #22]
    fe2a:	2101      	movs	r1, #1
    fe2c:	f8ad 1014 	strh.w	r1, [sp, #20]
        if self.len < self.capacity() {
    fe30:	e008      	b.n	fe44 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
            unsafe { self.push_unchecked(item) }
    fe32:	9804      	ldr	r0, [sp, #16]
    fe34:	9903      	ldr	r1, [sp, #12]
    fe36:	f7ff feea 	bl	fc0e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
    fe3a:	e7ff      	b.n	fe3c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x3e>
    fe3c:	2000      	movs	r0, #0
            Ok(())
    fe3e:	f8ad 0014 	strh.w	r0, [sp, #20]
        if self.len < self.capacity() {
    fe42:	e7ff      	b.n	fe44 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
    }
    fe44:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    fe48:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    fe4c:	b008      	add	sp, #32
    fe4e:	bd80      	pop	{r7, pc}

0000fe50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>:
    pub(crate) fn clear(&mut self) {
    fe50:	b580      	push	{r7, lr}
    fe52:	b082      	sub	sp, #8
    fe54:	9001      	str	r0, [sp, #4]
    fe56:	2100      	movs	r1, #0
        self.truncate(0);
    fe58:	f000 f8d0 	bl	fffc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>
    fe5c:	e7ff      	b.n	fe5e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE+0xe>
    }
    fe5e:	b002      	add	sp, #8
    fe60:	bd80      	pop	{r7, pc}

0000fe62 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>:
    pub(crate) fn clear(&mut self) {
    fe62:	b580      	push	{r7, lr}
    fe64:	b082      	sub	sp, #8
    fe66:	9001      	str	r0, [sp, #4]
    fe68:	2100      	movs	r1, #0
        self.truncate(0);
    fe6a:	f000 f891 	bl	ff90 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>
    fe6e:	e7ff      	b.n	fe70 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E+0xe>
    }
    fe70:	b002      	add	sp, #8
    fe72:	bd80      	pop	{r7, pc}

0000fe74 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>:
    pub(crate) fn clone(&self) -> Self
    fe74:	b580      	push	{r7, lr}
    fe76:	b0a0      	sub	sp, #128	; 0x80
    fe78:	911f      	str	r1, [sp, #124]	; 0x7c
    fe7a:	aa05      	add	r2, sp, #20
        let mut new = Self::new();
    fe7c:	9004      	str	r0, [sp, #16]
    fe7e:	4610      	mov	r0, r2
    fe80:	9103      	str	r1, [sp, #12]
    fe82:	f7ff fe59 	bl	fb38 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
    fe86:	e7ff      	b.n	fe88 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
    fe88:	9803      	ldr	r0, [sp, #12]
    fe8a:	f000 f843 	bl	ff14 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
    fe8e:	9002      	str	r0, [sp, #8]
    fe90:	9101      	str	r1, [sp, #4]
    fe92:	e7ff      	b.n	fe94 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x20>
    fe94:	a805      	add	r0, sp, #20
    fe96:	9902      	ldr	r1, [sp, #8]
    fe98:	9a01      	ldr	r2, [sp, #4]
    fe9a:	f7ff ff4d 	bl	fd38 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>
    fe9e:	9000      	str	r0, [sp, #0]
    fea0:	e7ff      	b.n	fea2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x2e>
    fea2:	9800      	ldr	r0, [sp, #0]
    fea4:	f000 0001 	and.w	r0, r0, #1
    fea8:	f64c 211c 	movw	r1, #51740	; 0xca1c
    feac:	f2c0 0101 	movt	r1, #1
    feb0:	f000 f959 	bl	10166 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
    feb4:	e7ff      	b.n	feb6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x42>
    feb6:	a905      	add	r1, sp, #20
    feb8:	2268      	movs	r2, #104	; 0x68
        new
    feba:	9804      	ldr	r0, [sp, #16]
    febc:	f00a fb04 	bl	1a4c8 <__aeabi_memcpy>
    }
    fec0:	b020      	add	sp, #128	; 0x80
    fec2:	bd80      	pop	{r7, pc}

0000fec4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>:
    pub(crate) fn clone(&self) -> Self
    fec4:	b580      	push	{r7, lr}
    fec6:	b0ba      	sub	sp, #232	; 0xe8
    fec8:	9139      	str	r1, [sp, #228]	; 0xe4
    feca:	aa06      	add	r2, sp, #24
        let mut new = Self::new();
    fecc:	9005      	str	r0, [sp, #20]
    fece:	4610      	mov	r0, r2
    fed0:	9104      	str	r1, [sp, #16]
    fed2:	f7ff fe22 	bl	fb1a <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
    fed6:	e7ff      	b.n	fed8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
    fed8:	9804      	ldr	r0, [sp, #16]
    feda:	f000 f830 	bl	ff3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
    fede:	9003      	str	r0, [sp, #12]
    fee0:	9102      	str	r1, [sp, #8]
    fee2:	e7ff      	b.n	fee4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x20>
    fee4:	a806      	add	r0, sp, #24
    fee6:	9903      	ldr	r1, [sp, #12]
    fee8:	9a02      	ldr	r2, [sp, #8]
    feea:	f7ff fec2 	bl	fc72 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
    feee:	9001      	str	r0, [sp, #4]
    fef0:	e7ff      	b.n	fef2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x2e>
    fef2:	9801      	ldr	r0, [sp, #4]
    fef4:	f000 0001 	and.w	r0, r0, #1
    fef8:	f64c 211c 	movw	r1, #51740	; 0xca1c
    fefc:	f2c0 0101 	movt	r1, #1
    ff00:	f000 f931 	bl	10166 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
    ff04:	e7ff      	b.n	ff06 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x42>
    ff06:	a906      	add	r1, sp, #24
    ff08:	22cc      	movs	r2, #204	; 0xcc
        new
    ff0a:	9805      	ldr	r0, [sp, #20]
    ff0c:	f00a fadc 	bl	1a4c8 <__aeabi_memcpy>
    }
    ff10:	b03a      	add	sp, #232	; 0xe8
    ff12:	bd80      	pop	{r7, pc}

0000ff14 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>:
    pub(crate) fn as_slice(&self) -> &[T] {
    ff14:	b580      	push	{r7, lr}
    ff16:	b088      	sub	sp, #32
    ff18:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
    ff1a:	1d01      	adds	r1, r0, #4
    ff1c:	9106      	str	r1, [sp, #24]
    ff1e:	9107      	str	r1, [sp, #28]
    ff20:	9004      	str	r0, [sp, #16]
    ff22:	9103      	str	r1, [sp, #12]
    ff24:	e7ff      	b.n	ff26 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x12>
    ff26:	9804      	ldr	r0, [sp, #16]
    ff28:	6801      	ldr	r1, [r0, #0]
    ff2a:	9803      	ldr	r0, [sp, #12]
    ff2c:	f000 ffed 	bl	10f0a <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
    ff30:	9002      	str	r0, [sp, #8]
    ff32:	9101      	str	r1, [sp, #4]
    ff34:	e7ff      	b.n	ff36 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x22>
    }
    ff36:	9802      	ldr	r0, [sp, #8]
    ff38:	9901      	ldr	r1, [sp, #4]
    ff3a:	b008      	add	sp, #32
    ff3c:	bd80      	pop	{r7, pc}

0000ff3e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>:
    pub(crate) fn as_slice(&self) -> &[T] {
    ff3e:	b580      	push	{r7, lr}
    ff40:	b088      	sub	sp, #32
    ff42:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
    ff44:	1d01      	adds	r1, r0, #4
    ff46:	9106      	str	r1, [sp, #24]
    ff48:	9107      	str	r1, [sp, #28]
    ff4a:	9004      	str	r0, [sp, #16]
    ff4c:	9103      	str	r1, [sp, #12]
    ff4e:	e7ff      	b.n	ff50 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x12>
    ff50:	9804      	ldr	r0, [sp, #16]
    ff52:	6801      	ldr	r1, [r0, #0]
    ff54:	9803      	ldr	r0, [sp, #12]
    ff56:	f000 ffd8 	bl	10f0a <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
    ff5a:	9002      	str	r0, [sp, #8]
    ff5c:	9101      	str	r1, [sp, #4]
    ff5e:	e7ff      	b.n	ff60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x22>
    }
    ff60:	9802      	ldr	r0, [sp, #8]
    ff62:	9901      	ldr	r1, [sp, #4]
    ff64:	b008      	add	sp, #32
    ff66:	bd80      	pop	{r7, pc}

0000ff68 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>:
    pub(crate) fn capacity(&self) -> usize {
    ff68:	b580      	push	{r7, lr}
    ff6a:	b082      	sub	sp, #8
    ff6c:	9001      	str	r0, [sp, #4]
        N::to_usize()
    ff6e:	f000 fa26 	bl	103be <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
    ff72:	9000      	str	r0, [sp, #0]
    ff74:	e7ff      	b.n	ff76 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E+0xe>
    }
    ff76:	9800      	ldr	r0, [sp, #0]
    ff78:	b002      	add	sp, #8
    ff7a:	bd80      	pop	{r7, pc}

0000ff7c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>:
    pub(crate) fn capacity(&self) -> usize {
    ff7c:	b580      	push	{r7, lr}
    ff7e:	b082      	sub	sp, #8
    ff80:	9001      	str	r0, [sp, #4]
        N::to_usize()
    ff82:	f000 fa34 	bl	103ee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>
    ff86:	9000      	str	r0, [sp, #0]
    ff88:	e7ff      	b.n	ff8a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E+0xe>
    }
    ff8a:	9800      	ldr	r0, [sp, #0]
    ff8c:	b002      	add	sp, #8
    ff8e:	bd80      	pop	{r7, pc}

0000ff90 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>:
    pub(crate) fn truncate(&mut self, len: usize) {
    ff90:	b580      	push	{r7, lr}
    ff92:	b08a      	sub	sp, #40	; 0x28
    ff94:	9007      	str	r0, [sp, #28]
    ff96:	9108      	str	r1, [sp, #32]
    ff98:	9106      	str	r1, [sp, #24]
    ff9a:	9005      	str	r0, [sp, #20]
    ff9c:	e7ff      	b.n	ff9e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
            while len < self.len {
    ff9e:	9805      	ldr	r0, [sp, #20]
    ffa0:	6801      	ldr	r1, [r0, #0]
    ffa2:	9a06      	ldr	r2, [sp, #24]
    ffa4:	428a      	cmp	r2, r1
    ffa6:	d302      	bcc.n	ffae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1e>
    ffa8:	e7ff      	b.n	ffaa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1a>
    }
    ffaa:	b00a      	add	sp, #40	; 0x28
    ffac:	bd80      	pop	{r7, pc}
                self.len -= 1;
    ffae:	9805      	ldr	r0, [sp, #20]
    ffb0:	6801      	ldr	r1, [r0, #0]
    ffb2:	1e4a      	subs	r2, r1, #1
    ffb4:	2901      	cmp	r1, #1
    ffb6:	9204      	str	r2, [sp, #16]
    ffb8:	d314      	bcc.n	ffe4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x54>
    ffba:	e7ff      	b.n	ffbc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x2c>
    ffbc:	9804      	ldr	r0, [sp, #16]
    ffbe:	9905      	ldr	r1, [sp, #20]
    ffc0:	6008      	str	r0, [r1, #0]
                let len = self.len;
    ffc2:	680a      	ldr	r2, [r1, #0]
    ffc4:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
    ffc6:	4608      	mov	r0, r1
    ffc8:	9203      	str	r2, [sp, #12]
    ffca:	f7ff fdd9 	bl	fb80 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
    ffce:	9002      	str	r0, [sp, #8]
    ffd0:	9101      	str	r1, [sp, #4]
    ffd2:	e7ff      	b.n	ffd4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x44>
    ffd4:	9802      	ldr	r0, [sp, #8]
    ffd6:	9901      	ldr	r1, [sp, #4]
    ffd8:	9a03      	ldr	r2, [sp, #12]
    ffda:	f000 ffb5 	bl	10f48 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
    ffde:	e7ff      	b.n	ffe0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x50>
    ffe0:	e7ff      	b.n	ffe2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x52>
            while len < self.len {
    ffe2:	e7dc      	b.n	ff9e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
                self.len -= 1;
    ffe4:	f64c 10b0 	movw	r0, #51632	; 0xc9b0
    ffe8:	f2c0 0001 	movt	r0, #1
    ffec:	f64c 222c 	movw	r2, #51756	; 0xca2c
    fff0:	f2c0 0201 	movt	r2, #1
    fff4:	2121      	movs	r1, #33	; 0x21
    fff6:	f003 fe93 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fffa:	defe      	udf	#254	; 0xfe

0000fffc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>:
    pub(crate) fn truncate(&mut self, len: usize) {
    fffc:	b580      	push	{r7, lr}
    fffe:	b08a      	sub	sp, #40	; 0x28
   10000:	9007      	str	r0, [sp, #28]
   10002:	9108      	str	r1, [sp, #32]
   10004:	9106      	str	r1, [sp, #24]
   10006:	9005      	str	r0, [sp, #20]
   10008:	e7ff      	b.n	1000a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
            while len < self.len {
   1000a:	9805      	ldr	r0, [sp, #20]
   1000c:	6801      	ldr	r1, [r0, #0]
   1000e:	9a06      	ldr	r2, [sp, #24]
   10010:	428a      	cmp	r2, r1
   10012:	d302      	bcc.n	1001a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1e>
   10014:	e7ff      	b.n	10016 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1a>
    }
   10016:	b00a      	add	sp, #40	; 0x28
   10018:	bd80      	pop	{r7, pc}
                self.len -= 1;
   1001a:	9805      	ldr	r0, [sp, #20]
   1001c:	6801      	ldr	r1, [r0, #0]
   1001e:	1e4a      	subs	r2, r1, #1
   10020:	2901      	cmp	r1, #1
   10022:	9204      	str	r2, [sp, #16]
   10024:	d314      	bcc.n	10050 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x54>
   10026:	e7ff      	b.n	10028 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x2c>
   10028:	9804      	ldr	r0, [sp, #16]
   1002a:	9905      	ldr	r1, [sp, #20]
   1002c:	6008      	str	r0, [r1, #0]
                let len = self.len;
   1002e:	680a      	ldr	r2, [r1, #0]
   10030:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   10032:	4608      	mov	r0, r1
   10034:	9203      	str	r2, [sp, #12]
   10036:	f7ff fd8e 	bl	fb56 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   1003a:	9002      	str	r0, [sp, #8]
   1003c:	9101      	str	r1, [sp, #4]
   1003e:	e7ff      	b.n	10040 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x44>
   10040:	9802      	ldr	r0, [sp, #8]
   10042:	9901      	ldr	r1, [sp, #4]
   10044:	9a03      	ldr	r2, [sp, #12]
   10046:	f000 ff7f 	bl	10f48 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   1004a:	e7ff      	b.n	1004c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x50>
   1004c:	e7ff      	b.n	1004e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x52>
            while len < self.len {
   1004e:	e7dc      	b.n	1000a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
                self.len -= 1;
   10050:	f64c 10b0 	movw	r0, #51632	; 0xc9b0
   10054:	f2c0 0001 	movt	r0, #1
   10058:	f64c 222c 	movw	r2, #51756	; 0xca2c
   1005c:	f2c0 0201 	movt	r2, #1
   10060:	2121      	movs	r1, #33	; 0x21
   10062:	f003 fe5d 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10066:	defe      	udf	#254	; 0xfe

00010068 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>:
   10068:	b082      	sub	sp, #8
   1006a:	9001      	str	r0, [sp, #4]
   1006c:	8800      	ldrh	r0, [r0, #0]
   1006e:	2800      	cmp	r0, #0
   10070:	d004      	beq.n	1007c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x14>
   10072:	e7ff      	b.n	10074 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0xc>
   10074:	2000      	movs	r0, #0
   10076:	f88d 0003 	strb.w	r0, [sp, #3]
   1007a:	e003      	b.n	10084 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   1007c:	2001      	movs	r0, #1
   1007e:	f88d 0003 	strb.w	r0, [sp, #3]
   10082:	e7ff      	b.n	10084 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   10084:	f89d 0003 	ldrb.w	r0, [sp, #3]
   10088:	b002      	add	sp, #8
   1008a:	4770      	bx	lr

0001008c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>:
   1008c:	b082      	sub	sp, #8
   1008e:	9001      	str	r0, [sp, #4]
   10090:	7800      	ldrb	r0, [r0, #0]
   10092:	07c0      	lsls	r0, r0, #31
   10094:	2800      	cmp	r0, #0
   10096:	d004      	beq.n	100a2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x16>
   10098:	e7ff      	b.n	1009a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0xe>
   1009a:	2000      	movs	r0, #0
   1009c:	f88d 0003 	strb.w	r0, [sp, #3]
   100a0:	e003      	b.n	100aa <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   100a2:	2001      	movs	r0, #1
   100a4:	f88d 0003 	strb.w	r0, [sp, #3]
   100a8:	e7ff      	b.n	100aa <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   100aa:	f89d 0003 	ldrb.w	r0, [sp, #3]
   100ae:	b002      	add	sp, #8
   100b0:	4770      	bx	lr

000100b2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>:
   100b2:	b510      	push	{r4, lr}
   100b4:	b08a      	sub	sp, #40	; 0x28
   100b6:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   100ba:	468e      	mov	lr, r1
   100bc:	4604      	mov	r4, r0
   100be:	f8ad 0014 	strh.w	r0, [sp, #20]
   100c2:	f8ad 1016 	strh.w	r1, [sp, #22]
   100c6:	9207      	str	r2, [sp, #28]
   100c8:	9308      	str	r3, [sp, #32]
   100ca:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   100ce:	4601      	mov	r1, r0
   100d0:	2800      	cmp	r0, #0
   100d2:	9304      	str	r3, [sp, #16]
   100d4:	9203      	str	r2, [sp, #12]
   100d6:	f8cd c008 	str.w	ip, [sp, #8]
   100da:	d013      	beq.n	10104 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x52>
   100dc:	e7ff      	b.n	100de <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x2c>
   100de:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   100e2:	f8ad 001a 	strh.w	r0, [sp, #26]
   100e6:	4668      	mov	r0, sp
   100e8:	9902      	ldr	r1, [sp, #8]
   100ea:	6001      	str	r1, [r0, #0]
   100ec:	f64c 234c 	movw	r3, #51788	; 0xca4c
   100f0:	f2c0 0301 	movt	r3, #1
   100f4:	f10d 021a 	add.w	r2, sp, #26
   100f8:	9803      	ldr	r0, [sp, #12]
   100fa:	9904      	ldr	r1, [sp, #16]
   100fc:	f003 fde2 	bl	13cc4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   10100:	defe      	udf	#254	; 0xfe
   10102:	defe      	udf	#254	; 0xfe
   10104:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   10108:	2800      	cmp	r0, #0
   1010a:	d102      	bne.n	10112 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x60>
   1010c:	e7ff      	b.n	1010e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>
   1010e:	b00a      	add	sp, #40	; 0x28
   10110:	bd10      	pop	{r4, pc}
   10112:	e7fc      	b.n	1010e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>

00010114 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   10114:	b580      	push	{r7, lr}
   10116:	b08a      	sub	sp, #40	; 0x28
   10118:	4684      	mov	ip, r0
   1011a:	f88d 0017 	strb.w	r0, [sp, #23]
   1011e:	9107      	str	r1, [sp, #28]
   10120:	9208      	str	r2, [sp, #32]
   10122:	f89d 0017 	ldrb.w	r0, [sp, #23]
   10126:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   1012a:	f1be 0f00 	cmp.w	lr, #0
   1012e:	9304      	str	r3, [sp, #16]
   10130:	9203      	str	r2, [sp, #12]
   10132:	9102      	str	r1, [sp, #8]
   10134:	d00e      	beq.n	10154 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   10136:	e7ff      	b.n	10138 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   10138:	4668      	mov	r0, sp
   1013a:	9904      	ldr	r1, [sp, #16]
   1013c:	6001      	str	r1, [r0, #0]
   1013e:	f64c 233c 	movw	r3, #51772	; 0xca3c
   10142:	f2c0 0301 	movt	r3, #1
   10146:	aa06      	add	r2, sp, #24
   10148:	9802      	ldr	r0, [sp, #8]
   1014a:	9903      	ldr	r1, [sp, #12]
   1014c:	f003 fdba 	bl	13cc4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   10150:	defe      	udf	#254	; 0xfe
   10152:	defe      	udf	#254	; 0xfe
   10154:	f89d 0017 	ldrb.w	r0, [sp, #23]
   10158:	07c0      	lsls	r0, r0, #31
   1015a:	2800      	cmp	r0, #0
   1015c:	d102      	bne.n	10164 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   1015e:	e7ff      	b.n	10160 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   10160:	b00a      	add	sp, #40	; 0x28
   10162:	bd80      	pop	{r7, pc}
   10164:	e7fc      	b.n	10160 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

00010166 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>:
   10166:	b086      	sub	sp, #24
   10168:	4602      	mov	r2, r0
   1016a:	f88d 000f 	strb.w	r0, [sp, #15]
   1016e:	f89d 000f 	ldrb.w	r0, [sp, #15]
   10172:	07c3      	lsls	r3, r0, #31
   10174:	2b00      	cmp	r3, #0
   10176:	9102      	str	r1, [sp, #8]
   10178:	d011      	beq.n	1019e <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x38>
   1017a:	e7ff      	b.n	1017c <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x16>
   1017c:	4668      	mov	r0, sp
   1017e:	9902      	ldr	r1, [sp, #8]
   10180:	6001      	str	r1, [r0, #0]
   10182:	f64c 205c 	movw	r0, #51804	; 0xca5c
   10186:	f2c0 0001 	movt	r0, #1
   1018a:	f64c 233c 	movw	r3, #51772	; 0xca3c
   1018e:	f2c0 0301 	movt	r3, #1
   10192:	212b      	movs	r1, #43	; 0x2b
   10194:	aa04      	add	r2, sp, #16
   10196:	f003 fd95 	bl	13cc4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   1019a:	defe      	udf	#254	; 0xfe
   1019c:	defe      	udf	#254	; 0xfe
   1019e:	f89d 000f 	ldrb.w	r0, [sp, #15]
   101a2:	07c0      	lsls	r0, r0, #31
   101a4:	2800      	cmp	r0, #0
   101a6:	d102      	bne.n	101ae <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x48>
   101a8:	e7ff      	b.n	101aa <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>
   101aa:	b006      	add	sp, #24
   101ac:	4770      	bx	lr
   101ae:	e7fc      	b.n	101aa <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>

000101b0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   101b0:	b580      	push	{r7, lr}
   101b2:	b088      	sub	sp, #32
   101b4:	9001      	str	r0, [sp, #4]
   101b6:	2000      	movs	r0, #0
   101b8:	f88d 0013 	strb.w	r0, [sp, #19]
   101bc:	f88d 0011 	strb.w	r0, [sp, #17]
   101c0:	f88d 0012 	strb.w	r0, [sp, #18]
   101c4:	2001      	movs	r0, #1
   101c6:	f88d 0012 	strb.w	r0, [sp, #18]
   101ca:	f88d 0013 	strb.w	r0, [sp, #19]
   101ce:	f88d 0011 	strb.w	r0, [sp, #17]
   101d2:	9801      	ldr	r0, [sp, #4]
   101d4:	1e41      	subs	r1, r0, #1
   101d6:	bf18      	it	ne
   101d8:	2101      	movne	r1, #1
   101da:	2801      	cmp	r0, #1
   101dc:	d00d      	beq.n	101fa <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   101de:	e7ff      	b.n	101e0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   101e0:	2000      	movs	r0, #0
   101e2:	f88d 0013 	strb.w	r0, [sp, #19]
   101e6:	9901      	ldr	r1, [sp, #4]
   101e8:	9107      	str	r1, [sp, #28]
   101ea:	f88d 0011 	strb.w	r0, [sp, #17]
   101ee:	9103      	str	r1, [sp, #12]
   101f0:	9803      	ldr	r0, [sp, #12]
   101f2:	f7f9 f946 	bl	9482 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   101f6:	e006      	b.n	10206 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   101f8:	defe      	udf	#254	; 0xfe
   101fa:	2000      	movs	r0, #0
   101fc:	f88d 0012 	strb.w	r0, [sp, #18]
   10200:	f88d 000b 	strb.w	r0, [sp, #11]
   10204:	e003      	b.n	1020e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   10206:	2001      	movs	r0, #1
   10208:	f88d 000b 	strb.w	r0, [sp, #11]
   1020c:	e7ff      	b.n	1020e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   1020e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   10212:	07c0      	lsls	r0, r0, #31
   10214:	2800      	cmp	r0, #0
   10216:	d104      	bne.n	10222 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   10218:	e7ff      	b.n	1021a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   1021a:	9801      	ldr	r0, [sp, #4]
   1021c:	2801      	cmp	r0, #1
   1021e:	d008      	beq.n	10232 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   10220:	e011      	b.n	10246 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   10222:	2000      	movs	r0, #0
   10224:	f88d 0011 	strb.w	r0, [sp, #17]
   10228:	e7f7      	b.n	1021a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   1022a:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1022e:	b008      	add	sp, #32
   10230:	bd80      	pop	{r7, pc}
   10232:	f89d 0012 	ldrb.w	r0, [sp, #18]
   10236:	07c0      	lsls	r0, r0, #31
   10238:	2800      	cmp	r0, #0
   1023a:	d0f6      	beq.n	1022a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   1023c:	e7ff      	b.n	1023e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   1023e:	2000      	movs	r0, #0
   10240:	f88d 0012 	strb.w	r0, [sp, #18]
   10244:	e7f1      	b.n	1022a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   10246:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1024a:	07c0      	lsls	r0, r0, #31
   1024c:	2800      	cmp	r0, #0
   1024e:	d0ec      	beq.n	1022a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   10250:	e7ff      	b.n	10252 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   10252:	2000      	movs	r0, #0
   10254:	f88d 0013 	strb.w	r0, [sp, #19]
   10258:	e7e7      	b.n	1022a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

0001025a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   1025a:	b580      	push	{r7, lr}
   1025c:	b088      	sub	sp, #32
   1025e:	9001      	str	r0, [sp, #4]
   10260:	2000      	movs	r0, #0
   10262:	f88d 0013 	strb.w	r0, [sp, #19]
   10266:	f88d 0011 	strb.w	r0, [sp, #17]
   1026a:	f88d 0012 	strb.w	r0, [sp, #18]
   1026e:	2001      	movs	r0, #1
   10270:	f88d 0012 	strb.w	r0, [sp, #18]
   10274:	f88d 0013 	strb.w	r0, [sp, #19]
   10278:	f88d 0011 	strb.w	r0, [sp, #17]
   1027c:	9801      	ldr	r0, [sp, #4]
   1027e:	1e41      	subs	r1, r0, #1
   10280:	bf18      	it	ne
   10282:	2101      	movne	r1, #1
   10284:	2801      	cmp	r0, #1
   10286:	d00d      	beq.n	102a4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   10288:	e7ff      	b.n	1028a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   1028a:	2000      	movs	r0, #0
   1028c:	f88d 0013 	strb.w	r0, [sp, #19]
   10290:	9901      	ldr	r1, [sp, #4]
   10292:	9107      	str	r1, [sp, #28]
   10294:	f88d 0011 	strb.w	r0, [sp, #17]
   10298:	9103      	str	r1, [sp, #12]
   1029a:	9803      	ldr	r0, [sp, #12]
   1029c:	f7f9 f8e7 	bl	946e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   102a0:	e006      	b.n	102b0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   102a2:	defe      	udf	#254	; 0xfe
   102a4:	2000      	movs	r0, #0
   102a6:	f88d 0012 	strb.w	r0, [sp, #18]
   102aa:	f88d 000b 	strb.w	r0, [sp, #11]
   102ae:	e003      	b.n	102b8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   102b0:	2001      	movs	r0, #1
   102b2:	f88d 000b 	strb.w	r0, [sp, #11]
   102b6:	e7ff      	b.n	102b8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   102b8:	f89d 0011 	ldrb.w	r0, [sp, #17]
   102bc:	07c0      	lsls	r0, r0, #31
   102be:	2800      	cmp	r0, #0
   102c0:	d104      	bne.n	102cc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   102c2:	e7ff      	b.n	102c4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   102c4:	9801      	ldr	r0, [sp, #4]
   102c6:	2801      	cmp	r0, #1
   102c8:	d008      	beq.n	102dc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   102ca:	e011      	b.n	102f0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   102cc:	2000      	movs	r0, #0
   102ce:	f88d 0011 	strb.w	r0, [sp, #17]
   102d2:	e7f7      	b.n	102c4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   102d4:	f89d 000b 	ldrb.w	r0, [sp, #11]
   102d8:	b008      	add	sp, #32
   102da:	bd80      	pop	{r7, pc}
   102dc:	f89d 0012 	ldrb.w	r0, [sp, #18]
   102e0:	07c0      	lsls	r0, r0, #31
   102e2:	2800      	cmp	r0, #0
   102e4:	d0f6      	beq.n	102d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   102e6:	e7ff      	b.n	102e8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   102e8:	2000      	movs	r0, #0
   102ea:	f88d 0012 	strb.w	r0, [sp, #18]
   102ee:	e7f1      	b.n	102d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   102f0:	f89d 0013 	ldrb.w	r0, [sp, #19]
   102f4:	07c0      	lsls	r0, r0, #31
   102f6:	2800      	cmp	r0, #0
   102f8:	d0ec      	beq.n	102d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   102fa:	e7ff      	b.n	102fc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   102fc:	2000      	movs	r0, #0
   102fe:	f88d 0013 	strb.w	r0, [sp, #19]
   10302:	e7e7      	b.n	102d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

00010304 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   10304:	b580      	push	{r7, lr}
   10306:	b088      	sub	sp, #32
   10308:	9001      	str	r0, [sp, #4]
   1030a:	2000      	movs	r0, #0
   1030c:	f88d 0013 	strb.w	r0, [sp, #19]
   10310:	f88d 0011 	strb.w	r0, [sp, #17]
   10314:	f88d 0012 	strb.w	r0, [sp, #18]
   10318:	2001      	movs	r0, #1
   1031a:	f88d 0012 	strb.w	r0, [sp, #18]
   1031e:	f88d 0013 	strb.w	r0, [sp, #19]
   10322:	f88d 0011 	strb.w	r0, [sp, #17]
   10326:	9801      	ldr	r0, [sp, #4]
   10328:	1e41      	subs	r1, r0, #1
   1032a:	bf18      	it	ne
   1032c:	2101      	movne	r1, #1
   1032e:	2801      	cmp	r0, #1
   10330:	d00d      	beq.n	1034e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   10332:	e7ff      	b.n	10334 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   10334:	2000      	movs	r0, #0
   10336:	f88d 0013 	strb.w	r0, [sp, #19]
   1033a:	9901      	ldr	r1, [sp, #4]
   1033c:	9107      	str	r1, [sp, #28]
   1033e:	f88d 0011 	strb.w	r0, [sp, #17]
   10342:	9103      	str	r1, [sp, #12]
   10344:	9803      	ldr	r0, [sp, #12]
   10346:	f7f9 f897 	bl	9478 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   1034a:	e006      	b.n	1035a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   1034c:	defe      	udf	#254	; 0xfe
   1034e:	2000      	movs	r0, #0
   10350:	f88d 0012 	strb.w	r0, [sp, #18]
   10354:	f88d 000b 	strb.w	r0, [sp, #11]
   10358:	e003      	b.n	10362 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   1035a:	2001      	movs	r0, #1
   1035c:	f88d 000b 	strb.w	r0, [sp, #11]
   10360:	e7ff      	b.n	10362 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   10362:	f89d 0011 	ldrb.w	r0, [sp, #17]
   10366:	07c0      	lsls	r0, r0, #31
   10368:	2800      	cmp	r0, #0
   1036a:	d104      	bne.n	10376 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   1036c:	e7ff      	b.n	1036e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   1036e:	9801      	ldr	r0, [sp, #4]
   10370:	2801      	cmp	r0, #1
   10372:	d008      	beq.n	10386 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   10374:	e011      	b.n	1039a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   10376:	2000      	movs	r0, #0
   10378:	f88d 0011 	strb.w	r0, [sp, #17]
   1037c:	e7f7      	b.n	1036e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   1037e:	f89d 000b 	ldrb.w	r0, [sp, #11]
   10382:	b008      	add	sp, #32
   10384:	bd80      	pop	{r7, pc}
   10386:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1038a:	07c0      	lsls	r0, r0, #31
   1038c:	2800      	cmp	r0, #0
   1038e:	d0f6      	beq.n	1037e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   10390:	e7ff      	b.n	10392 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   10392:	2000      	movs	r0, #0
   10394:	f88d 0012 	strb.w	r0, [sp, #18]
   10398:	e7f1      	b.n	1037e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   1039a:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1039e:	07c0      	lsls	r0, r0, #31
   103a0:	2800      	cmp	r0, #0
   103a2:	d0ec      	beq.n	1037e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   103a4:	e7ff      	b.n	103a6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   103a6:	2000      	movs	r0, #0
   103a8:	f88d 0013 	strb.w	r0, [sp, #19]
   103ac:	e7e7      	b.n	1037e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

000103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   103ae:	b082      	sub	sp, #8
   103b0:	2001      	movs	r0, #1
   103b2:	f88d 0003 	strb.w	r0, [sp, #3]
   103b6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   103ba:	b002      	add	sp, #8
   103bc:	4770      	bx	lr

000103be <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   103be:	b580      	push	{r7, lr}
   103c0:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   103c2:	f003 fadd 	bl	13980 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   103c6:	9003      	str	r0, [sp, #12]
   103c8:	e7ff      	b.n	103ca <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0xc>
   103ca:	9803      	ldr	r0, [sp, #12]
   103cc:	f003 fb3e 	bl	13a4c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   103d0:	9002      	str	r0, [sp, #8]
   103d2:	e7ff      	b.n	103d4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x16>
   103d4:	f000 f823 	bl	1041e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>
   103d8:	9001      	str	r0, [sp, #4]
   103da:	e7ff      	b.n	103dc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x1e>
   103dc:	9801      	ldr	r0, [sp, #4]
   103de:	0041      	lsls	r1, r0, #1
   103e0:	9100      	str	r1, [sp, #0]
   103e2:	e7ff      	b.n	103e4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x26>
   103e4:	9802      	ldr	r0, [sp, #8]
   103e6:	9900      	ldr	r1, [sp, #0]
   103e8:	4308      	orrs	r0, r1
    }
   103ea:	b004      	add	sp, #16
   103ec:	bd80      	pop	{r7, pc}

000103ee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>:
    fn to_usize() -> usize {
   103ee:	b580      	push	{r7, lr}
   103f0:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   103f2:	f003 fac5 	bl	13980 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   103f6:	9003      	str	r0, [sp, #12]
   103f8:	e7ff      	b.n	103fa <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0xc>
   103fa:	9803      	ldr	r0, [sp, #12]
   103fc:	f003 fb26 	bl	13a4c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   10400:	9002      	str	r0, [sp, #8]
   10402:	e7ff      	b.n	10404 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x16>
   10404:	f7ff ffdb 	bl	103be <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   10408:	9001      	str	r0, [sp, #4]
   1040a:	e7ff      	b.n	1040c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x1e>
   1040c:	9801      	ldr	r0, [sp, #4]
   1040e:	0041      	lsls	r1, r0, #1
   10410:	9100      	str	r1, [sp, #0]
   10412:	e7ff      	b.n	10414 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x26>
   10414:	9802      	ldr	r0, [sp, #8]
   10416:	9900      	ldr	r1, [sp, #0]
   10418:	4308      	orrs	r0, r1
    }
   1041a:	b004      	add	sp, #16
   1041c:	bd80      	pop	{r7, pc}

0001041e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>:
    fn to_usize() -> usize {
   1041e:	b580      	push	{r7, lr}
   10420:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   10422:	f003 faaf 	bl	13984 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   10426:	9003      	str	r0, [sp, #12]
   10428:	e7ff      	b.n	1042a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0xc>
   1042a:	9803      	ldr	r0, [sp, #12]
   1042c:	f003 fb0e 	bl	13a4c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   10430:	9002      	str	r0, [sp, #8]
   10432:	e7ff      	b.n	10434 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x16>
   10434:	f000 f83b 	bl	104ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>
   10438:	9001      	str	r0, [sp, #4]
   1043a:	e7ff      	b.n	1043c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x1e>
   1043c:	9801      	ldr	r0, [sp, #4]
   1043e:	0041      	lsls	r1, r0, #1
   10440:	9100      	str	r1, [sp, #0]
   10442:	e7ff      	b.n	10444 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x26>
   10444:	9802      	ldr	r0, [sp, #8]
   10446:	9900      	ldr	r1, [sp, #0]
   10448:	4308      	orrs	r0, r1
    }
   1044a:	b004      	add	sp, #16
   1044c:	bd80      	pop	{r7, pc}

0001044e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>:
    fn to_usize() -> usize {
   1044e:	b580      	push	{r7, lr}
   10450:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   10452:	f003 fa95 	bl	13980 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   10456:	9003      	str	r0, [sp, #12]
   10458:	e7ff      	b.n	1045a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0xc>
   1045a:	9803      	ldr	r0, [sp, #12]
   1045c:	f003 faf6 	bl	13a4c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   10460:	9002      	str	r0, [sp, #8]
   10462:	e7ff      	b.n	10464 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x16>
   10464:	f000 f80b 	bl	1047e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>
   10468:	9001      	str	r0, [sp, #4]
   1046a:	e7ff      	b.n	1046c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x1e>
   1046c:	9801      	ldr	r0, [sp, #4]
   1046e:	0041      	lsls	r1, r0, #1
   10470:	9100      	str	r1, [sp, #0]
   10472:	e7ff      	b.n	10474 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x26>
   10474:	9802      	ldr	r0, [sp, #8]
   10476:	9900      	ldr	r1, [sp, #0]
   10478:	4308      	orrs	r0, r1
    }
   1047a:	b004      	add	sp, #16
   1047c:	bd80      	pop	{r7, pc}

0001047e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>:
    fn to_usize() -> usize {
   1047e:	b580      	push	{r7, lr}
   10480:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   10482:	f003 fa7f 	bl	13984 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   10486:	9003      	str	r0, [sp, #12]
   10488:	e7ff      	b.n	1048a <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0xc>
   1048a:	9803      	ldr	r0, [sp, #12]
   1048c:	f003 fade 	bl	13a4c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   10490:	9002      	str	r0, [sp, #8]
   10492:	e7ff      	b.n	10494 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x16>
   10494:	f003 f9fc 	bl	13890 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   10498:	9001      	str	r0, [sp, #4]
   1049a:	e7ff      	b.n	1049c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x1e>
   1049c:	9801      	ldr	r0, [sp, #4]
   1049e:	0041      	lsls	r1, r0, #1
   104a0:	9100      	str	r1, [sp, #0]
   104a2:	e7ff      	b.n	104a4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x26>
   104a4:	9802      	ldr	r0, [sp, #8]
   104a6:	9900      	ldr	r1, [sp, #0]
   104a8:	4308      	orrs	r0, r1
    }
   104aa:	b004      	add	sp, #16
   104ac:	bd80      	pop	{r7, pc}

000104ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>:
    fn to_usize() -> usize {
   104ae:	b580      	push	{r7, lr}
   104b0:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   104b2:	f003 fa65 	bl	13980 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   104b6:	9003      	str	r0, [sp, #12]
   104b8:	e7ff      	b.n	104ba <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0xc>
   104ba:	9803      	ldr	r0, [sp, #12]
   104bc:	f003 fac6 	bl	13a4c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   104c0:	9002      	str	r0, [sp, #8]
   104c2:	e7ff      	b.n	104c4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x16>
   104c4:	f7ff ffc3 	bl	1044e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>
   104c8:	9001      	str	r0, [sp, #4]
   104ca:	e7ff      	b.n	104cc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x1e>
   104cc:	9801      	ldr	r0, [sp, #4]
   104ce:	0041      	lsls	r1, r0, #1
   104d0:	9100      	str	r1, [sp, #0]
   104d2:	e7ff      	b.n	104d4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x26>
   104d4:	9802      	ldr	r0, [sp, #8]
   104d6:	9900      	ldr	r1, [sp, #0]
   104d8:	4308      	orrs	r0, r1
    }
   104da:	b004      	add	sp, #16
   104dc:	bd80      	pop	{r7, pc}

000104de <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>:
    }
    Ok(())
}

/// Draw the item to the display
pub fn draw_to_display<T>(item: T)
   104de:	b510      	push	{r4, lr}
   104e0:	b088      	sub	sp, #32
   104e2:	a901      	add	r1, sp, #4
    unsafe { DISPLAY.draw(item) };        //  Draw text or graphics the usual slow way

    #[cfg(feature = "noblock_spi")]       //  If batching is enabled...
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
        unsafe { &mut DISPLAY },
        item
   104e4:	460a      	mov	r2, r1
   104e6:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
   104ea:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
   104ee:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
   104f2:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
   104f6:	f240 1040 	movw	r0, #320	; 0x140
   104fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   104fe:	f000 f819 	bl	10534 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>
   10502:	9000      	str	r0, [sp, #0]
   10504:	e7ff      	b.n	10506 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x28>
   10506:	9800      	ldr	r0, [sp, #0]
   10508:	f000 0001 	and.w	r0, r0, #1
   1050c:	f64c 2187 	movw	r1, #51847	; 0xca87
   10510:	f2c0 0101 	movt	r1, #1
   10514:	f64c 23d0 	movw	r3, #51920	; 0xcad0
   10518:	f2c0 0301 	movt	r3, #1
   1051c:	2210      	movs	r2, #16
   1051e:	f7ff fdf9 	bl	10114 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   10522:	e7ff      	b.n	10524 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x46>
    ).expect("draw blocks fail");
}
   10524:	b008      	add	sp, #32
   10526:	bd10      	pop	{r4, pc}

00010528 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>:
   10528:	b580      	push	{r7, lr}
   1052a:	f44f 72b2 	mov.w	r2, #356	; 0x164
   1052e:	f009 ffcb 	bl	1a4c8 <__aeabi_memcpy>
   10532:	bd80      	pop	{r7, pc}

00010534 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>:
    pub colors:   BlockColors,
}

/// Draw the pixels in the item as Pixel Blocks of contiguous Pixel Rows. The pixels are grouped by row then by block.
#[allow(dead_code)]
pub fn draw_blocks<SPI, DC, RST, T>(display: &mut ST7735<SPI, DC, RST>, item_pixels: T) -> Result<(),()>
   10534:	b5b0      	push	{r4, r5, r7, lr}
   10536:	f5ad 6d44 	sub.w	sp, sp, #3136	; 0xc40
   1053a:	b082      	sub	sp, #8
   1053c:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
   10540:	aa1a      	add	r2, sp, #104	; 0x68
    SPI: spi::Write<u8>,
    DC: OutputPin,
    RST: OutputPin,
    T: IntoIterator<Item = Pixel<Rgb565>>, {
    //  Get the pixels for the item to be rendered.
    let pixels = item_pixels.into_iter();
   10542:	4613      	mov	r3, r2
   10544:	e8b1 5010 	ldmia.w	r1!, {r4, ip, lr}
   10548:	e8a3 5010 	stmia.w	r3!, {r4, ip, lr}
   1054c:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
   10550:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
   10554:	a911      	add	r1, sp, #68	; 0x44
   10556:	900f      	str	r0, [sp, #60]	; 0x3c
   10558:	4608      	mov	r0, r1
   1055a:	4611      	mov	r1, r2
   1055c:	f000 fe82 	bl	11264 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>
   10560:	e7ff      	b.n	10562 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x2e>
   10562:	a811      	add	r0, sp, #68	; 0x44
   10564:	a945      	add	r1, sp, #276	; 0x114
    //  Batch the pixels into Pixel Rows.
    let rows = to_rows(pixels);
   10566:	460a      	mov	r2, r1
   10568:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
   1056c:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   10570:	e890 5038 	ldmia.w	r0, {r3, r4, r5, ip, lr}
   10574:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   10578:	a821      	add	r0, sp, #132	; 0x84
   1057a:	f000 f8b8 	bl	106ee <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>
   1057e:	e7ff      	b.n	10580 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x4c>
   10580:	a8a7      	add	r0, sp, #668	; 0x29c
   10582:	a921      	add	r1, sp, #132	; 0x84
   10584:	2290      	movs	r2, #144	; 0x90
    //  Batch the Pixel Rows into Pixel Blocks.
    let blocks = to_blocks(rows);
   10586:	900e      	str	r0, [sp, #56]	; 0x38
   10588:	f009 ff9e 	bl	1a4c8 <__aeabi_memcpy>
   1058c:	a84e      	add	r0, sp, #312	; 0x138
   1058e:	990e      	ldr	r1, [sp, #56]	; 0x38
   10590:	f000 f8dc 	bl	1074c <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>
   10594:	e7ff      	b.n	10596 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x62>
   10596:	f50d 6092 	add.w	r0, sp, #1168	; 0x490
   1059a:	a94e      	add	r1, sp, #312	; 0x138
   1059c:	f44f 72b2 	mov.w	r2, #356	; 0x164
    //  For each Pixel Block...
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   105a0:	900d      	str	r0, [sp, #52]	; 0x34
   105a2:	f009 ff91 	bl	1a4c8 <__aeabi_memcpy>
   105a6:	a8cb      	add	r0, sp, #812	; 0x32c
   105a8:	990d      	ldr	r1, [sp, #52]	; 0x34
   105aa:	f7ff ffbd 	bl	10528 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>
   105ae:	e7ff      	b.n	105b0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x7c>
   105b0:	f20d 50f4 	addw	r0, sp, #1524	; 0x5f4
   105b4:	a9cb      	add	r1, sp, #812	; 0x32c
   105b6:	f44f 72b2 	mov.w	r2, #356	; 0x164
   105ba:	f009 ff85 	bl	1a4c8 <__aeabi_memcpy>
   105be:	e7ff      	b.n	105c0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8c>
   105c0:	f60d 0028 	addw	r0, sp, #2088	; 0x828
   105c4:	f20d 51f4 	addw	r1, sp, #1524	; 0x5f4
   105c8:	f000 fa2d 	bl	10a26 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>
   105cc:	e7ff      	b.n	105ce <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x9a>
   105ce:	f8dd 0828 	ldr.w	r0, [sp, #2088]	; 0x828
   105d2:	2800      	cmp	r0, #0
   105d4:	d001      	beq.n	105da <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa6>
   105d6:	e7ff      	b.n	105d8 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa4>
   105d8:	e005      	b.n	105e6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xb2>
   105da:	f60d 0028 	addw	r0, sp, #2088	; 0x828
   105de:	f7f9 ff2b 	bl	a438 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   105e2:	e01c      	b.n	1061e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xea>
   105e4:	defe      	udf	#254	; 0xfe
   105e6:	f60d 0028 	addw	r0, sp, #2088	; 0x828
   105ea:	1d01      	adds	r1, r0, #4
   105ec:	f60d 00fc 	addw	r0, sp, #2300	; 0x8fc
   105f0:	22d0      	movs	r2, #208	; 0xd0
   105f2:	900c      	str	r0, [sp, #48]	; 0x30
   105f4:	920b      	str	r2, [sp, #44]	; 0x2c
   105f6:	f009 ff67 	bl	1a4c8 <__aeabi_memcpy>
   105fa:	f60d 10cc 	addw	r0, sp, #2508	; 0x9cc
   105fe:	900a      	str	r0, [sp, #40]	; 0x28
   10600:	990c      	ldr	r1, [sp, #48]	; 0x30
   10602:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10604:	f009 ff60 	bl	1a4c8 <__aeabi_memcpy>
   10608:	f50d 60eb 	add.w	r0, sp, #1880	; 0x758
   1060c:	990a      	ldr	r1, [sp, #40]	; 0x28
   1060e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10610:	f009 ff5a 	bl	1a4c8 <__aeabi_memcpy>
   10614:	f8dd 0828 	ldr.w	r0, [sp, #2088]	; 0x828
   10618:	2801      	cmp	r0, #1
   1061a:	d02d      	beq.n	10678 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x144>
   1061c:	e062      	b.n	106e4 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x1b0>
   1061e:	f20d 50f4 	addw	r0, sp, #1524	; 0x5f4
        //  Dump out the Pixel Blocks for the square in test_display()
        /* if x_left >= 60 && x_left <= 150 && x_right >= 60 && x_right <= 150 && y_top >= 60 && y_top <= 150 && y_bottom >= 60 && y_bottom <= 150 {
            console::print("pixel block ("); console::printint(x_left as i32); console::print(", "); console::printint(y_top as i32); ////
            console::print("), ("); console::printint(x_right as i32); console::print(", "); console::printint(y_bottom as i32); console::print(")\n"); ////    
        } */
    }
   10622:	f7f9 fee6 	bl	a3f2 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   10626:	e023      	b.n	10670 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x13c>
        display.set_pixels(
   10628:	f89d 0b6b 	ldrb.w	r0, [sp, #2923]	; 0xb6b
   1062c:	f7f8 fa1c 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10630:	f88d 0b6a 	strb.w	r0, [sp, #2922]	; 0xb6a
   10634:	e7ff      	b.n	10636 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x102>
            colors) ? ;
   10636:	f89d 0b6a 	ldrb.w	r0, [sp, #2922]	; 0xb6a
   1063a:	07c1      	lsls	r1, r0, #31
   1063c:	2900      	cmp	r1, #0
   1063e:	d001      	beq.n	10644 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x110>
   10640:	e7ff      	b.n	10642 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10e>
   10642:	e001      	b.n	10648 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x114>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   10644:	e7bc      	b.n	105c0 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8c>
        display.set_pixels(
   10646:	defe      	udf	#254	; 0xfe
            colors) ? ;
   10648:	f7fc f8c2 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1064c:	e005      	b.n	1065a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x126>
    Ok(())
}
   1064e:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   10652:	f50d 6d44 	add.w	sp, sp, #3136	; 0xc40
   10656:	b002      	add	sp, #8
   10658:	bdb0      	pop	{r4, r5, r7, pc}
            colors) ? ;
   1065a:	f7ff fea8 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1065e:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   10662:	e7ff      	b.n	10664 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x130>
   10664:	f20d 50f4 	addw	r0, sp, #1524	; 0x5f4
    }
   10668:	f7f9 fec3 	bl	a3f2 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   1066c:	e7ff      	b.n	1066e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x13a>
}
   1066e:	e7ee      	b.n	1064e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x11a>
   10670:	2000      	movs	r0, #0
    Ok(())
   10672:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
}
   10676:	e7ea      	b.n	1064e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x11a>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   10678:	f89d 0824 	ldrb.w	r0, [sp, #2084]	; 0x824
   1067c:	f88d 0c44 	strb.w	r0, [sp, #3140]	; 0xc44
   10680:	f89d 1825 	ldrb.w	r1, [sp, #2085]	; 0x825
   10684:	f88d 1c45 	strb.w	r1, [sp, #3141]	; 0xc45
   10688:	f89d 2826 	ldrb.w	r2, [sp, #2086]	; 0x826
   1068c:	f88d 2c46 	strb.w	r2, [sp, #3142]	; 0xc46
   10690:	f89d 3827 	ldrb.w	r3, [sp, #2087]	; 0x827
   10694:	f88d 3c47 	strb.w	r3, [sp, #3143]	; 0xc47
   10698:	f60d 2c9c 	addw	ip, sp, #2716	; 0xa9c
   1069c:	f50d 6eeb 	add.w	lr, sp, #1880	; 0x758
   106a0:	24cc      	movs	r4, #204	; 0xcc
   106a2:	9009      	str	r0, [sp, #36]	; 0x24
   106a4:	4660      	mov	r0, ip
   106a6:	9108      	str	r1, [sp, #32]
   106a8:	4671      	mov	r1, lr
   106aa:	9207      	str	r2, [sp, #28]
   106ac:	4622      	mov	r2, r4
   106ae:	9306      	str	r3, [sp, #24]
   106b0:	f8cd c014 	str.w	ip, [sp, #20]
   106b4:	9404      	str	r4, [sp, #16]
   106b6:	f009 ff07 	bl	1a4c8 <__aeabi_memcpy>
   106ba:	f60d 306c 	addw	r0, sp, #2924	; 0xb6c
            colors) ? ;
   106be:	9003      	str	r0, [sp, #12]
   106c0:	9905      	ldr	r1, [sp, #20]
   106c2:	9a04      	ldr	r2, [sp, #16]
   106c4:	f009 ff00 	bl	1a4c8 <__aeabi_memcpy>
        display.set_pixels(
   106c8:	4668      	mov	r0, sp
   106ca:	9903      	ldr	r1, [sp, #12]
   106cc:	6041      	str	r1, [r0, #4]
   106ce:	9a06      	ldr	r2, [sp, #24]
   106d0:	6002      	str	r2, [r0, #0]
   106d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   106d4:	9909      	ldr	r1, [sp, #36]	; 0x24
   106d6:	9a07      	ldr	r2, [sp, #28]
   106d8:	9b08      	ldr	r3, [sp, #32]
   106da:	f7f8 fed7 	bl	948c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>
   106de:	f88d 0b6b 	strb.w	r0, [sp, #2923]	; 0xb6b
   106e2:	e7a1      	b.n	10628 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xf4>
   106e4:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   106e8:	f7f9 fea6 	bl	a438 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   106ec:	e7c4      	b.n	10678 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x144>

000106ee <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>:

/// Batch the pixels into Pixel Rows, which are contiguous pixels on the same row.
/// P can be any Pixel Iterator (e.g. a rectangle).
fn to_rows<P>(pixels: P) -> RowIterator<P>
   106ee:	b5b0      	push	{r4, r5, r7, lr}
   106f0:	b0a4      	sub	sp, #144	; 0x90
   106f2:	aa01      	add	r2, sp, #4
where
    P: Iterator<Item = Pixel<Rgb565>>, {
    RowIterator::<P> {
        pixels,
   106f4:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
   106f8:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   106fc:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
   10700:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   10704:	a90a      	add	r1, sp, #40	; 0x28
        x_left: 0,
        x_right: 0,
        y: 0,
        colors: RowColors::new(),
   10706:	9000      	str	r0, [sp, #0]
   10708:	4608      	mov	r0, r1
   1070a:	f7ff f946 	bl	f99a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>
   1070e:	e7ff      	b.n	10710 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E+0x22>
   10710:	a801      	add	r0, sp, #4
    RowIterator::<P> {
   10712:	9900      	ldr	r1, [sp, #0]
   10714:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
   10718:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
   1071c:	e890 501c 	ldmia.w	r0, {r2, r3, r4, ip, lr}
   10720:	e881 501c 	stmia.w	r1, {r2, r3, r4, ip, lr}
   10724:	2000      	movs	r0, #0
   10726:	9900      	ldr	r1, [sp, #0]
   10728:	f881 008c 	strb.w	r0, [r1, #140]	; 0x8c
   1072c:	f881 008d 	strb.w	r0, [r1, #141]	; 0x8d
   10730:	f881 008e 	strb.w	r0, [r1, #142]	; 0x8e
   10734:	f101 0024 	add.w	r0, r1, #36	; 0x24
   10738:	a90a      	add	r1, sp, #40	; 0x28
   1073a:	2268      	movs	r2, #104	; 0x68
   1073c:	f009 fec4 	bl	1a4c8 <__aeabi_memcpy>
   10740:	2001      	movs	r0, #1
   10742:	9900      	ldr	r1, [sp, #0]
   10744:	f881 008f 	strb.w	r0, [r1, #143]	; 0x8f
        first_pixel: true,
    }
}
   10748:	b024      	add	sp, #144	; 0x90
   1074a:	bdb0      	pop	{r4, r5, r7, pc}

0001074c <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>:

/// Batch the Pixel Rows into Pixel Blocks, which are contiguous Pixel Rows with the same start and end column number
/// R can be any Pixel Row Iterator.
fn to_blocks<R>(rows: R) -> BlockIterator<R>
   1074c:	b580      	push	{r7, lr}
   1074e:	b0d8      	sub	sp, #352	; 0x160
   10750:	aa01      	add	r2, sp, #4
   10752:	2390      	movs	r3, #144	; 0x90
where
    R: Iterator<Item = PixelRow>, {
    BlockIterator::<R> {
        rows,
   10754:	9000      	str	r0, [sp, #0]
   10756:	4610      	mov	r0, r2
   10758:	461a      	mov	r2, r3
   1075a:	f009 feb5 	bl	1a4c8 <__aeabi_memcpy>
   1075e:	a825      	add	r0, sp, #148	; 0x94
        x_left: 0,
        x_right: 0,
        y_top: 0,
        y_bottom: 0,
        colors: BlockColors::new(),
   10760:	f7ff f92a 	bl	f9b8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>
   10764:	e7ff      	b.n	10766 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E+0x1a>
   10766:	a901      	add	r1, sp, #4
   10768:	2290      	movs	r2, #144	; 0x90
    BlockIterator::<R> {
   1076a:	9800      	ldr	r0, [sp, #0]
   1076c:	f009 feac 	bl	1a4c8 <__aeabi_memcpy>
   10770:	2000      	movs	r0, #0
   10772:	9900      	ldr	r1, [sp, #0]
   10774:	f881 015c 	strb.w	r0, [r1, #348]	; 0x15c
   10778:	f881 015d 	strb.w	r0, [r1, #349]	; 0x15d
   1077c:	f881 015e 	strb.w	r0, [r1, #350]	; 0x15e
   10780:	f881 015f 	strb.w	r0, [r1, #351]	; 0x15f
   10784:	f101 0090 	add.w	r0, r1, #144	; 0x90
   10788:	a925      	add	r1, sp, #148	; 0x94
   1078a:	22cc      	movs	r2, #204	; 0xcc
   1078c:	f009 fe9c 	bl	1a4c8 <__aeabi_memcpy>
   10790:	2001      	movs	r0, #1
   10792:	9900      	ldr	r1, [sp, #0]
   10794:	f881 0160 	strb.w	r0, [r1, #352]	; 0x160
        first_row: true,
    }
}    
   10798:	b058      	add	sp, #352	; 0x160
   1079a:	bd80      	pop	{r7, pc}

0001079c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>:
impl<P: Iterator<Item = Pixel<Rgb565>>> Iterator for RowIterator<P> {
    /// This Iterator returns Pixel Rows
    type Item = PixelRow;

    /// Return the next Pixel Row of contiguous pixels on the same row
    fn next(&mut self) -> Option<Self::Item> {
   1079c:	b580      	push	{r7, lr}
   1079e:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
   107a2:	91bd      	str	r1, [sp, #756]	; 0x2f4
        //  Loop over all pixels until we have composed a Pixel Row, or we have run out of pixels.
        loop {
   107a4:	9116      	str	r1, [sp, #88]	; 0x58
   107a6:	9015      	str	r0, [sp, #84]	; 0x54
   107a8:	e7ff      	b.n	107aa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   107aa:	a817      	add	r0, sp, #92	; 0x5c
            //  Get the next pixel.
            let next_pixel = self.pixels.next();
   107ac:	9916      	ldr	r1, [sp, #88]	; 0x58
   107ae:	f000 fdb4 	bl	1131a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>
   107b2:	e7ff      	b.n	107b4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x18>
            match next_pixel {
                None => {  //  If no more pixels...
   107b4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   107b6:	2800      	cmp	r0, #0
   107b8:	d01c      	beq.n	107f4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x58>
   107ba:	e7ff      	b.n	107bc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x20>
                    };
                    self.colors.clear();
                    self.first_pixel = true;
                    return Some(row);
                }
                Some(Pixel(coord, color)) => {  //  If there is a pixel...
   107bc:	9818      	ldr	r0, [sp, #96]	; 0x60
   107be:	9919      	ldr	r1, [sp, #100]	; 0x64
   107c0:	90be      	str	r0, [sp, #760]	; 0x2f8
   107c2:	91bf      	str	r1, [sp, #764]	; 0x2fc
   107c4:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   107c8:	4613      	mov	r3, r2
   107ca:	f8ad 2302 	strh.w	r2, [sp, #770]	; 0x302
                    let x = coord.0 as u8;
   107ce:	f88d 0304 	strb.w	r0, [sp, #772]	; 0x304
                    let y = coord.1 as u8;
   107d2:	f88d 1305 	strb.w	r1, [sp, #773]	; 0x305
                    let color = color.0;
   107d6:	f8ad 2306 	strh.w	r2, [sp, #774]	; 0x306
                    //  Save the first pixel as the row start and handle next pixel.
                    if self.first_pixel {
   107da:	9a16      	ldr	r2, [sp, #88]	; 0x58
   107dc:	f892 c08f 	ldrb.w	ip, [r2, #143]	; 0x8f
   107e0:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
   107e4:	f1bc 0f00 	cmp.w	ip, #0
   107e8:	9014      	str	r0, [sp, #80]	; 0x50
   107ea:	9113      	str	r1, [sp, #76]	; 0x4c
   107ec:	9312      	str	r3, [sp, #72]	; 0x48
   107ee:	d156      	bne.n	1089e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x102>
   107f0:	e04a      	b.n	10888 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xec>
            match next_pixel {
   107f2:	defe      	udf	#254	; 0xfe
                    if self.first_pixel {
   107f4:	9816      	ldr	r0, [sp, #88]	; 0x58
   107f6:	f890 108f 	ldrb.w	r1, [r0, #143]	; 0x8f
   107fa:	07c9      	lsls	r1, r1, #31
   107fc:	2900      	cmp	r1, #0
   107fe:	d111      	bne.n	10824 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x88>
   10800:	e7ff      	b.n	10802 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x66>
                        x_left: self.x_left,
   10802:	9816      	ldr	r0, [sp, #88]	; 0x58
   10804:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   10808:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
                        y: self.y,
   1080c:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
                        colors: self.colors.clone(),
   10810:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   10814:	a836      	add	r0, sp, #216	; 0xd8
   10816:	9111      	str	r1, [sp, #68]	; 0x44
   10818:	4661      	mov	r1, ip
   1081a:	9210      	str	r2, [sp, #64]	; 0x40
   1081c:	930f      	str	r3, [sp, #60]	; 0x3c
   1081e:	f7ff f825 	bl	f86c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   10822:	e006      	b.n	10832 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x96>
   10824:	2000      	movs	r0, #0
                        return None;  //  No pixels to group
   10826:	9915      	ldr	r1, [sp, #84]	; 0x54
   10828:	6008      	str	r0, [r1, #0]
   1082a:	e7ff      	b.n	1082c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                        .expect("never");
                    return Some(row);
                }
            }
        }
    }
   1082c:	f50d 7d42 	add.w	sp, sp, #776	; 0x308
   10830:	bd80      	pop	{r7, pc}
                    let row = PixelRow {
   10832:	9811      	ldr	r0, [sp, #68]	; 0x44
   10834:	f88d 00d4 	strb.w	r0, [sp, #212]	; 0xd4
   10838:	9910      	ldr	r1, [sp, #64]	; 0x40
   1083a:	f88d 10d5 	strb.w	r1, [sp, #213]	; 0xd5
   1083e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10840:	f88d 20d6 	strb.w	r2, [sp, #214]	; 0xd6
   10844:	a81b      	add	r0, sp, #108	; 0x6c
   10846:	a936      	add	r1, sp, #216	; 0xd8
   10848:	2268      	movs	r2, #104	; 0x68
   1084a:	f009 fe3d 	bl	1a4c8 <__aeabi_memcpy>
                    self.colors.clear();
   1084e:	9816      	ldr	r0, [sp, #88]	; 0x58
   10850:	3024      	adds	r0, #36	; 0x24
   10852:	f7ff f8d0 	bl	f9f6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   10856:	e7ff      	b.n	10858 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xbc>
   10858:	2001      	movs	r0, #1
                    self.first_pixel = true;
   1085a:	9916      	ldr	r1, [sp, #88]	; 0x58
   1085c:	f881 008f 	strb.w	r0, [r1, #143]	; 0x8f
   10860:	aa50      	add	r2, sp, #320	; 0x140
   10862:	a91b      	add	r1, sp, #108	; 0x6c
   10864:	236c      	movs	r3, #108	; 0x6c
                    return Some(row);
   10866:	900e      	str	r0, [sp, #56]	; 0x38
   10868:	4610      	mov	r0, r2
   1086a:	920d      	str	r2, [sp, #52]	; 0x34
   1086c:	461a      	mov	r2, r3
   1086e:	930c      	str	r3, [sp, #48]	; 0x30
   10870:	f009 fe2a 	bl	1a4c8 <__aeabi_memcpy>
   10874:	9815      	ldr	r0, [sp, #84]	; 0x54
   10876:	3004      	adds	r0, #4
   10878:	990d      	ldr	r1, [sp, #52]	; 0x34
   1087a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1087c:	f009 fe24 	bl	1a4c8 <__aeabi_memcpy>
   10880:	980e      	ldr	r0, [sp, #56]	; 0x38
   10882:	9915      	ldr	r1, [sp, #84]	; 0x54
   10884:	6008      	str	r0, [r1, #0]
   10886:	e7d1      	b.n	1082c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   10888:	9816      	ldr	r0, [sp, #88]	; 0x58
   1088a:	f890 108d 	ldrb.w	r1, [r0, #141]	; 0x8d
   1088e:	3101      	adds	r1, #1
   10890:	b2ca      	uxtb	r2, r1
   10892:	460b      	mov	r3, r1
   10894:	428a      	cmp	r2, r1
   10896:	930b      	str	r3, [sp, #44]	; 0x2c
   10898:	f040 80b9 	bne.w	10a0e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x272>
   1089c:	e040      	b.n	10920 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x184>
   1089e:	2000      	movs	r0, #0
                        self.first_pixel = false;
   108a0:	9916      	ldr	r1, [sp, #88]	; 0x58
   108a2:	f881 008f 	strb.w	r0, [r1, #143]	; 0x8f
                        self.x_left = x;
   108a6:	9814      	ldr	r0, [sp, #80]	; 0x50
   108a8:	f881 008c 	strb.w	r0, [r1, #140]	; 0x8c
                        self.x_right = x;
   108ac:	f881 008d 	strb.w	r0, [r1, #141]	; 0x8d
                        self.y = y;
   108b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   108b2:	f881 208e 	strb.w	r2, [r1, #142]	; 0x8e
                        self.colors.clear();
   108b6:	f101 0024 	add.w	r0, r1, #36	; 0x24
   108ba:	f7ff f89c 	bl	f9f6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   108be:	e7ff      	b.n	108c0 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x124>
                        self.colors.push(color)
   108c0:	9816      	ldr	r0, [sp, #88]	; 0x58
   108c2:	3024      	adds	r0, #36	; 0x24
   108c4:	9912      	ldr	r1, [sp, #72]	; 0x48
   108c6:	f7ff f886 	bl	f9d6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   108ca:	900a      	str	r0, [sp, #40]	; 0x28
   108cc:	9109      	str	r1, [sp, #36]	; 0x24
   108ce:	e7ff      	b.n	108d0 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x134>
   108d0:	f64c 301c 	movw	r0, #51996	; 0xcb1c
   108d4:	f2c0 0001 	movt	r0, #1
   108d8:	4669      	mov	r1, sp
   108da:	6008      	str	r0, [r1, #0]
   108dc:	f64c 22e0 	movw	r2, #51936	; 0xcae0
   108e0:	f2c0 0201 	movt	r2, #1
   108e4:	2305      	movs	r3, #5
   108e6:	980a      	ldr	r0, [sp, #40]	; 0x28
   108e8:	9909      	ldr	r1, [sp, #36]	; 0x24
   108ea:	f7ff fbe2 	bl	100b2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   108ee:	e7ff      	b.n	108f0 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x154>
                        continue;
   108f0:	e7ff      	b.n	108f2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
   108f2:	e75a      	b.n	107aa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   108f4:	2001      	movs	r0, #1
                    if x == self.x_right + 1 && y == self.y {
   108f6:	f88d 01af 	strb.w	r0, [sp, #431]	; 0x1af
   108fa:	e00b      	b.n	10914 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   108fc:	2000      	movs	r0, #0
   108fe:	f88d 01af 	strb.w	r0, [sp, #431]	; 0x1af
   10902:	e007      	b.n	10914 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   10904:	9816      	ldr	r0, [sp, #88]	; 0x58
   10906:	f890 108e 	ldrb.w	r1, [r0, #142]	; 0x8e
   1090a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1090c:	b2d3      	uxtb	r3, r2
   1090e:	428b      	cmp	r3, r1
   10910:	d0f0      	beq.n	108f4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x158>
   10912:	e7f3      	b.n	108fc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
   10914:	f89d 01af 	ldrb.w	r0, [sp, #431]	; 0x1af
   10918:	07c0      	lsls	r0, r0, #31
   1091a:	2800      	cmp	r0, #0
   1091c:	d107      	bne.n	1092e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x192>
   1091e:	e020      	b.n	10962 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
   10920:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10922:	b2c1      	uxtb	r1, r0
   10924:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10926:	b2d3      	uxtb	r3, r2
   10928:	428b      	cmp	r3, r1
   1092a:	d0eb      	beq.n	10904 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x168>
   1092c:	e7e6      	b.n	108fc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
                        if self.colors.push(color).is_ok() {
   1092e:	9816      	ldr	r0, [sp, #88]	; 0x58
   10930:	3024      	adds	r0, #36	; 0x24
   10932:	9912      	ldr	r1, [sp, #72]	; 0x48
   10934:	f7ff f84f 	bl	f9d6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   10938:	f8ad 11b2 	strh.w	r1, [sp, #434]	; 0x1b2
   1093c:	f8ad 01b0 	strh.w	r0, [sp, #432]	; 0x1b0
   10940:	e7ff      	b.n	10942 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1a6>
   10942:	a86c      	add	r0, sp, #432	; 0x1b0
   10944:	f7ff fb90 	bl	10068 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>
   10948:	9008      	str	r0, [sp, #32]
   1094a:	e7ff      	b.n	1094c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1b0>
   1094c:	9808      	ldr	r0, [sp, #32]
   1094e:	07c1      	lsls	r1, r0, #31
   10950:	2900      	cmp	r1, #0
   10952:	d101      	bne.n	10958 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1bc>
   10954:	e7ff      	b.n	10956 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1ba>
                    if x == self.x_right + 1 && y == self.y {
   10956:	e004      	b.n	10962 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
                            self.x_right = x;
   10958:	9814      	ldr	r0, [sp, #80]	; 0x50
   1095a:	9916      	ldr	r1, [sp, #88]	; 0x58
   1095c:	f881 008d 	strb.w	r0, [r1, #141]	; 0x8d
                            continue;
   10960:	e7c7      	b.n	108f2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
                        x_left: self.x_left,
   10962:	9816      	ldr	r0, [sp, #88]	; 0x58
   10964:	f890 108c 	ldrb.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   10968:	f890 208d 	ldrb.w	r2, [r0, #141]	; 0x8d
                        y: self.y,
   1096c:	f890 308e 	ldrb.w	r3, [r0, #142]	; 0x8e
                        colors: self.colors.clone(),
   10970:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   10974:	a888      	add	r0, sp, #544	; 0x220
   10976:	9107      	str	r1, [sp, #28]
   10978:	4661      	mov	r1, ip
   1097a:	9206      	str	r2, [sp, #24]
   1097c:	9305      	str	r3, [sp, #20]
   1097e:	f7fe ff75 	bl	f86c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   10982:	e7ff      	b.n	10984 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1e8>
                    let row = PixelRow {
   10984:	9807      	ldr	r0, [sp, #28]
   10986:	f88d 021c 	strb.w	r0, [sp, #540]	; 0x21c
   1098a:	9906      	ldr	r1, [sp, #24]
   1098c:	f88d 121d 	strb.w	r1, [sp, #541]	; 0x21d
   10990:	9a05      	ldr	r2, [sp, #20]
   10992:	f88d 221e 	strb.w	r2, [sp, #542]	; 0x21e
   10996:	a86d      	add	r0, sp, #436	; 0x1b4
   10998:	a988      	add	r1, sp, #544	; 0x220
   1099a:	2268      	movs	r2, #104	; 0x68
   1099c:	f009 fd94 	bl	1a4c8 <__aeabi_memcpy>
                    self.x_left = x;
   109a0:	9814      	ldr	r0, [sp, #80]	; 0x50
   109a2:	9916      	ldr	r1, [sp, #88]	; 0x58
   109a4:	f881 008c 	strb.w	r0, [r1, #140]	; 0x8c
                    self.x_right = x;
   109a8:	f881 008d 	strb.w	r0, [r1, #141]	; 0x8d
                    self.y = y;
   109ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   109ae:	f881 208e 	strb.w	r2, [r1, #142]	; 0x8e
                    self.colors.clear();
   109b2:	f101 0024 	add.w	r0, r1, #36	; 0x24
   109b6:	f7ff f81e 	bl	f9f6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   109ba:	e7ff      	b.n	109bc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x220>
                    self.colors.push(color)
   109bc:	9816      	ldr	r0, [sp, #88]	; 0x58
   109be:	3024      	adds	r0, #36	; 0x24
   109c0:	9912      	ldr	r1, [sp, #72]	; 0x48
   109c2:	f7ff f808 	bl	f9d6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   109c6:	9004      	str	r0, [sp, #16]
   109c8:	9103      	str	r1, [sp, #12]
   109ca:	e7ff      	b.n	109cc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x230>
   109cc:	f64c 305c 	movw	r0, #52060	; 0xcb5c
   109d0:	f2c0 0001 	movt	r0, #1
   109d4:	4669      	mov	r1, sp
   109d6:	6008      	str	r0, [r1, #0]
   109d8:	f64c 22e0 	movw	r2, #51936	; 0xcae0
   109dc:	f2c0 0201 	movt	r2, #1
   109e0:	2305      	movs	r3, #5
   109e2:	9804      	ldr	r0, [sp, #16]
   109e4:	9903      	ldr	r1, [sp, #12]
   109e6:	f7ff fb64 	bl	100b2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   109ea:	e7ff      	b.n	109ec <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x250>
   109ec:	a8a2      	add	r0, sp, #648	; 0x288
   109ee:	a96d      	add	r1, sp, #436	; 0x1b4
   109f0:	226c      	movs	r2, #108	; 0x6c
                    return Some(row);
   109f2:	9002      	str	r0, [sp, #8]
   109f4:	9201      	str	r2, [sp, #4]
   109f6:	f009 fd67 	bl	1a4c8 <__aeabi_memcpy>
   109fa:	9815      	ldr	r0, [sp, #84]	; 0x54
   109fc:	3004      	adds	r0, #4
   109fe:	9902      	ldr	r1, [sp, #8]
   10a00:	9a01      	ldr	r2, [sp, #4]
   10a02:	f009 fd61 	bl	1a4c8 <__aeabi_memcpy>
   10a06:	2001      	movs	r0, #1
   10a08:	9915      	ldr	r1, [sp, #84]	; 0x54
   10a0a:	6008      	str	r0, [r1, #0]
   10a0c:	e70e      	b.n	1082c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   10a0e:	f64c 3040 	movw	r0, #52032	; 0xcb40
   10a12:	f2c0 0001 	movt	r0, #1
   10a16:	f64c 322c 	movw	r2, #52012	; 0xcb2c
   10a1a:	f2c0 0201 	movt	r2, #1
   10a1e:	211c      	movs	r1, #28
   10a20:	f003 f97e 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10a24:	defe      	udf	#254	; 0xfe

00010a26 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>:
impl<R: Iterator<Item = PixelRow>> Iterator for BlockIterator<R> {
    /// This Iterator returns Pixel Blocks
    type Item = PixelBlock;

    /// Return the next Pixel Block of contiguous Pixel Rows with the same start and end column number
    fn next(&mut self) -> Option<Self::Item> {
   10a26:	b580      	push	{r7, lr}
   10a28:	f5ad 6dc8 	sub.w	sp, sp, #1600	; 0x640
   10a2c:	f8cd 1638 	str.w	r1, [sp, #1592]	; 0x638
   10a30:	2200      	movs	r2, #0
        //  Loop over all Pixel Rows until we have composed a Pixel Block, or we have run out of Pixel Rows.
        loop {
   10a32:	f88d 2637 	strb.w	r2, [sp, #1591]	; 0x637
   10a36:	911f      	str	r1, [sp, #124]	; 0x7c
   10a38:	901e      	str	r0, [sp, #120]	; 0x78
   10a3a:	e7ff      	b.n	10a3c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   10a3c:	2001      	movs	r0, #1
            //  Get the next Pixel Row.
            let next_row = self.rows.next();
   10a3e:	f88d 0637 	strb.w	r0, [sp, #1591]	; 0x637
   10a42:	a820      	add	r0, sp, #128	; 0x80
   10a44:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10a46:	f7ff fea9 	bl	1079c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>
   10a4a:	e7ff      	b.n	10a4c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x26>
            match next_row {
                None => {  //  If no more Pixel Rows...
   10a4c:	9820      	ldr	r0, [sp, #128]	; 0x80
   10a4e:	2800      	cmp	r0, #0
   10a50:	d026      	beq.n	10aa0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x7a>
   10a52:	e7ff      	b.n	10a54 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e>
   10a54:	a820      	add	r0, sp, #128	; 0x80
                    };
                    self.colors.clear();
                    self.first_row = true;
                    return Some(row);
                }
                Some(PixelRow { x_left, x_right, y, colors, .. }) => {  //  If there is a Pixel Row...
   10a56:	1d01      	adds	r1, r0, #4
   10a58:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   10a5c:	4602      	mov	r2, r0
   10a5e:	f88d 063d 	strb.w	r0, [sp, #1597]	; 0x63d
   10a62:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   10a66:	4603      	mov	r3, r0
   10a68:	f88d 063e 	strb.w	r0, [sp, #1598]	; 0x63e
   10a6c:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   10a70:	4684      	mov	ip, r0
   10a72:	f88d 063f 	strb.w	r0, [sp, #1599]	; 0x63f
   10a76:	2000      	movs	r0, #0
   10a78:	f88d 0637 	strb.w	r0, [sp, #1591]	; 0x637
   10a7c:	a8d7      	add	r0, sp, #860	; 0x35c
   10a7e:	f04f 0e68 	mov.w	lr, #104	; 0x68
   10a82:	921d      	str	r2, [sp, #116]	; 0x74
   10a84:	4672      	mov	r2, lr
   10a86:	931c      	str	r3, [sp, #112]	; 0x70
   10a88:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   10a8c:	f009 fd1c 	bl	1a4c8 <__aeabi_memcpy>
                    //  Save the first row as the block start and handle next block.
                    if self.first_row {
   10a90:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10a92:	f890 1160 	ldrb.w	r1, [r0, #352]	; 0x160
   10a96:	07c9      	lsls	r1, r1, #31
   10a98:	2900      	cmp	r1, #0
   10a9a:	d15a      	bne.n	10b52 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x12c>
   10a9c:	e04e      	b.n	10b3c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x116>
            match next_row {
   10a9e:	defe      	udf	#254	; 0xfe
                    if self.first_row {
   10aa0:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10aa2:	f890 1160 	ldrb.w	r1, [r0, #352]	; 0x160
   10aa6:	07c9      	lsls	r1, r1, #31
   10aa8:	2900      	cmp	r1, #0
   10aaa:	d115      	bne.n	10ad8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xb2>
   10aac:	e7ff      	b.n	10aae <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x88>
                        x_left: self.x_left,
   10aae:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10ab0:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
                        x_right: self.x_right,
   10ab4:	f890 215d 	ldrb.w	r2, [r0, #349]	; 0x15d
                        y_top: self.y_top,
   10ab8:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
                        y_bottom: self.y_bottom,
   10abc:	f890 c15f 	ldrb.w	ip, [r0, #351]	; 0x15f
                        colors: self.colors.clone(),
   10ac0:	f100 0e90 	add.w	lr, r0, #144	; 0x90
   10ac4:	a870      	add	r0, sp, #448	; 0x1c0
   10ac6:	911a      	str	r1, [sp, #104]	; 0x68
   10ac8:	4671      	mov	r1, lr
   10aca:	9219      	str	r2, [sp, #100]	; 0x64
   10acc:	9318      	str	r3, [sp, #96]	; 0x60
   10ace:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   10ad2:	f7fe fedb 	bl	f88c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   10ad6:	e003      	b.n	10ae0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xba>
   10ad8:	2000      	movs	r0, #0
                        return None;  //  No rows to group
   10ada:	991e      	ldr	r1, [sp, #120]	; 0x78
   10adc:	6008      	str	r0, [r1, #0]
   10ade:	e153      	b.n	10d88 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                    let row = PixelBlock {
   10ae0:	981a      	ldr	r0, [sp, #104]	; 0x68
   10ae2:	f88d 01bc 	strb.w	r0, [sp, #444]	; 0x1bc
   10ae6:	9919      	ldr	r1, [sp, #100]	; 0x64
   10ae8:	f88d 11bd 	strb.w	r1, [sp, #445]	; 0x1bd
   10aec:	9a18      	ldr	r2, [sp, #96]	; 0x60
   10aee:	f88d 21be 	strb.w	r2, [sp, #446]	; 0x1be
   10af2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10af4:	f88d 31bf 	strb.w	r3, [sp, #447]	; 0x1bf
   10af8:	a83c      	add	r0, sp, #240	; 0xf0
   10afa:	a970      	add	r1, sp, #448	; 0x1c0
   10afc:	22cc      	movs	r2, #204	; 0xcc
   10afe:	f009 fce3 	bl	1a4c8 <__aeabi_memcpy>
                    self.colors.clear();
   10b02:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10b04:	3090      	adds	r0, #144	; 0x90
   10b06:	f7fe ff7e 	bl	fa06 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   10b0a:	e7ff      	b.n	10b0c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xe6>
   10b0c:	2001      	movs	r0, #1
                    self.first_row = true;
   10b0e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10b10:	f881 0160 	strb.w	r0, [r1, #352]	; 0x160
   10b14:	aaa3      	add	r2, sp, #652	; 0x28c
   10b16:	a93c      	add	r1, sp, #240	; 0xf0
   10b18:	23d0      	movs	r3, #208	; 0xd0
                    return Some(row);
   10b1a:	9016      	str	r0, [sp, #88]	; 0x58
   10b1c:	4610      	mov	r0, r2
   10b1e:	9215      	str	r2, [sp, #84]	; 0x54
   10b20:	461a      	mov	r2, r3
   10b22:	9314      	str	r3, [sp, #80]	; 0x50
   10b24:	f009 fcd0 	bl	1a4c8 <__aeabi_memcpy>
   10b28:	981e      	ldr	r0, [sp, #120]	; 0x78
   10b2a:	3004      	adds	r0, #4
   10b2c:	9915      	ldr	r1, [sp, #84]	; 0x54
   10b2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10b30:	f009 fcca 	bl	1a4c8 <__aeabi_memcpy>
   10b34:	9816      	ldr	r0, [sp, #88]	; 0x58
   10b36:	991e      	ldr	r1, [sp, #120]	; 0x78
   10b38:	6008      	str	r0, [r1, #0]
   10b3a:	e125      	b.n	10d88 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                        self.colors.extend_from_slice(&colors)
                            .expect("never");
                        continue;
                    }
                    //  If this row is adjacent to the previous row and same size, add to the block.
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10b3c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10b3e:	f890 115f 	ldrb.w	r1, [r0, #351]	; 0x15f
   10b42:	3101      	adds	r1, #1
   10b44:	b2ca      	uxtb	r2, r1
   10b46:	460b      	mov	r3, r1
   10b48:	428a      	cmp	r2, r1
   10b4a:	9313      	str	r3, [sp, #76]	; 0x4c
   10b4c:	f040 8128 	bne.w	10da0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x37a>
   10b50:	e069      	b.n	10c26 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x200>
   10b52:	2000      	movs	r0, #0
                        self.first_row = false;
   10b54:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10b56:	f881 0160 	strb.w	r0, [r1, #352]	; 0x160
                        self.x_left = x_left;
   10b5a:	981d      	ldr	r0, [sp, #116]	; 0x74
   10b5c:	f881 015c 	strb.w	r0, [r1, #348]	; 0x15c
                        self.x_right = x_right;
   10b60:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10b62:	f881 215d 	strb.w	r2, [r1, #349]	; 0x15d
                        self.y_top = y;
   10b66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10b68:	f881 315e 	strb.w	r3, [r1, #350]	; 0x15e
                        self.y_bottom = y;
   10b6c:	f881 315f 	strb.w	r3, [r1, #351]	; 0x15f
                        self.colors.clear();
   10b70:	f101 0090 	add.w	r0, r1, #144	; 0x90
   10b74:	f7fe ff47 	bl	fa06 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   10b78:	e7ff      	b.n	10b7a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x154>
                        self.colors.extend_from_slice(&colors)
   10b7a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10b7c:	f100 0190 	add.w	r1, r0, #144	; 0x90
   10b80:	a8d7      	add	r0, sp, #860	; 0x35c
   10b82:	9112      	str	r1, [sp, #72]	; 0x48
   10b84:	f7fe feb2 	bl	f8ec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   10b88:	9011      	str	r0, [sp, #68]	; 0x44
   10b8a:	9110      	str	r1, [sp, #64]	; 0x40
   10b8c:	e7ff      	b.n	10b8e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x168>
   10b8e:	9812      	ldr	r0, [sp, #72]	; 0x48
   10b90:	9911      	ldr	r1, [sp, #68]	; 0x44
   10b92:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10b94:	f7fe fef3 	bl	f97e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10b98:	900f      	str	r0, [sp, #60]	; 0x3c
   10b9a:	e7ff      	b.n	10b9c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x176>
   10b9c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10b9e:	f000 0001 	and.w	r0, r0, #1
   10ba2:	f64c 21e0 	movw	r1, #51936	; 0xcae0
   10ba6:	f2c0 0101 	movt	r1, #1
   10baa:	f64c 336c 	movw	r3, #52076	; 0xcb6c
   10bae:	f2c0 0301 	movt	r3, #1
   10bb2:	2205      	movs	r2, #5
   10bb4:	f7ff faae 	bl	10114 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   10bb8:	e7ff      	b.n	10bba <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x194>
                        continue;
   10bba:	e7ff      	b.n	10bbc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
   10bbc:	a8d7      	add	r0, sp, #860	; 0x35c
                    self.colors.clear();
                    self.colors.extend_from_slice(&colors)
                        .expect("never");
                    return Some(row);
                }
            }
   10bbe:	f7f9 fc33 	bl	a428 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10bc2:	e7ff      	b.n	10bc4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x19e>
        }
   10bc4:	9820      	ldr	r0, [sp, #128]	; 0x80
   10bc6:	2801      	cmp	r0, #1
   10bc8:	f000 80e2 	beq.w	10d90 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
   10bcc:	e0e4      	b.n	10d98 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x372>
   10bce:	2001      	movs	r0, #1
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10bd0:	f88d 03c5 	strb.w	r0, [sp, #965]	; 0x3c5
   10bd4:	e00b      	b.n	10bee <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   10bd6:	2000      	movs	r0, #0
   10bd8:	f88d 03c5 	strb.w	r0, [sp, #965]	; 0x3c5
   10bdc:	e007      	b.n	10bee <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   10bde:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10be0:	f890 115d 	ldrb.w	r1, [r0, #349]	; 0x15d
   10be4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10be6:	b2d3      	uxtb	r3, r2
   10be8:	428b      	cmp	r3, r1
   10bea:	d0f0      	beq.n	10bce <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1a8>
   10bec:	e7f3      	b.n	10bd6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   10bee:	f89d 03c5 	ldrb.w	r0, [sp, #965]	; 0x3c5
   10bf2:	07c0      	lsls	r0, r0, #31
   10bf4:	2800      	cmp	r0, #0
   10bf6:	d11d      	bne.n	10c34 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x20e>
   10bf8:	e03f      	b.n	10c7a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
   10bfa:	2001      	movs	r0, #1
   10bfc:	f88d 03c6 	strb.w	r0, [sp, #966]	; 0x3c6
   10c00:	e00b      	b.n	10c1a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   10c02:	2000      	movs	r0, #0
   10c04:	f88d 03c6 	strb.w	r0, [sp, #966]	; 0x3c6
   10c08:	e007      	b.n	10c1a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   10c0a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10c0c:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
   10c10:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   10c12:	b2d3      	uxtb	r3, r2
   10c14:	428b      	cmp	r3, r1
   10c16:	d0f0      	beq.n	10bfa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1d4>
   10c18:	e7f3      	b.n	10c02 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
   10c1a:	f89d 03c6 	ldrb.w	r0, [sp, #966]	; 0x3c6
   10c1e:	07c0      	lsls	r0, r0, #31
   10c20:	2800      	cmp	r0, #0
   10c22:	d1dc      	bne.n	10bde <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b8>
   10c24:	e7d7      	b.n	10bd6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   10c26:	9813      	ldr	r0, [sp, #76]	; 0x4c
   10c28:	b2c1      	uxtb	r1, r0
   10c2a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   10c2c:	b2d3      	uxtb	r3, r2
   10c2e:	428b      	cmp	r3, r1
   10c30:	d0eb      	beq.n	10c0a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1e4>
   10c32:	e7e6      	b.n	10c02 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
                        if self.colors.extend_from_slice(&colors).is_ok() {
   10c34:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10c36:	f100 0190 	add.w	r1, r0, #144	; 0x90
   10c3a:	a8d7      	add	r0, sp, #860	; 0x35c
   10c3c:	910e      	str	r1, [sp, #56]	; 0x38
   10c3e:	f7fe fe55 	bl	f8ec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   10c42:	900d      	str	r0, [sp, #52]	; 0x34
   10c44:	910c      	str	r1, [sp, #48]	; 0x30
   10c46:	e7ff      	b.n	10c48 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x222>
   10c48:	980e      	ldr	r0, [sp, #56]	; 0x38
   10c4a:	990d      	ldr	r1, [sp, #52]	; 0x34
   10c4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10c4e:	f7fe fe96 	bl	f97e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10c52:	f88d 03c7 	strb.w	r0, [sp, #967]	; 0x3c7
   10c56:	e7ff      	b.n	10c58 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x232>
   10c58:	f20d 30c7 	addw	r0, sp, #967	; 0x3c7
   10c5c:	f7ff fa16 	bl	1008c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>
   10c60:	900b      	str	r0, [sp, #44]	; 0x2c
   10c62:	e7ff      	b.n	10c64 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x23e>
   10c64:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10c66:	07c1      	lsls	r1, r0, #31
   10c68:	2900      	cmp	r1, #0
   10c6a:	d101      	bne.n	10c70 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x24a>
   10c6c:	e7ff      	b.n	10c6e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x248>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10c6e:	e004      	b.n	10c7a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
                            self.y_bottom = y;
   10c70:	981b      	ldr	r0, [sp, #108]	; 0x6c
   10c72:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10c74:	f881 015f 	strb.w	r0, [r1, #351]	; 0x15f
                            continue;    
   10c78:	e7a0      	b.n	10bbc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
                        x_left: self.x_left,
   10c7a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10c7c:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
                        x_right: self.x_right,
   10c80:	f890 215d 	ldrb.w	r2, [r0, #349]	; 0x15d
                        y_top: self.y_top,
   10c84:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
                        y_bottom: self.y_bottom,
   10c88:	f890 c15f 	ldrb.w	ip, [r0, #351]	; 0x15f
                        colors: self.colors.clone(),
   10c8c:	f100 0e90 	add.w	lr, r0, #144	; 0x90
   10c90:	f50d 6093 	add.w	r0, sp, #1176	; 0x498
   10c94:	910a      	str	r1, [sp, #40]	; 0x28
   10c96:	4671      	mov	r1, lr
   10c98:	9209      	str	r2, [sp, #36]	; 0x24
   10c9a:	9308      	str	r3, [sp, #32]
   10c9c:	f8cd c01c 	str.w	ip, [sp, #28]
   10ca0:	f7fe fdf4 	bl	f88c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   10ca4:	e7ff      	b.n	10ca6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x280>
                    let row = PixelBlock {
   10ca6:	980a      	ldr	r0, [sp, #40]	; 0x28
   10ca8:	f88d 0494 	strb.w	r0, [sp, #1172]	; 0x494
   10cac:	9909      	ldr	r1, [sp, #36]	; 0x24
   10cae:	f88d 1495 	strb.w	r1, [sp, #1173]	; 0x495
   10cb2:	9a08      	ldr	r2, [sp, #32]
   10cb4:	f88d 2496 	strb.w	r2, [sp, #1174]	; 0x496
   10cb8:	9b07      	ldr	r3, [sp, #28]
   10cba:	f88d 3497 	strb.w	r3, [sp, #1175]	; 0x497
   10cbe:	a8f2      	add	r0, sp, #968	; 0x3c8
   10cc0:	f50d 6193 	add.w	r1, sp, #1176	; 0x498
   10cc4:	22cc      	movs	r2, #204	; 0xcc
   10cc6:	f009 fbff 	bl	1a4c8 <__aeabi_memcpy>
                    self.x_left = x_left;
   10cca:	981d      	ldr	r0, [sp, #116]	; 0x74
   10ccc:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10cce:	f881 015c 	strb.w	r0, [r1, #348]	; 0x15c
                    self.x_right = x_right;
   10cd2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10cd4:	f881 215d 	strb.w	r2, [r1, #349]	; 0x15d
                    self.y_top = y;
   10cd8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10cda:	f881 315e 	strb.w	r3, [r1, #350]	; 0x15e
                    self.y_bottom = y;
   10cde:	f881 315f 	strb.w	r3, [r1, #351]	; 0x15f
                    self.colors.clear();
   10ce2:	f101 0090 	add.w	r0, r1, #144	; 0x90
   10ce6:	f7fe fe8e 	bl	fa06 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   10cea:	e7ff      	b.n	10cec <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2c6>
                    self.colors.extend_from_slice(&colors)
   10cec:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10cee:	f100 0190 	add.w	r1, r0, #144	; 0x90
   10cf2:	a8d7      	add	r0, sp, #860	; 0x35c
   10cf4:	9106      	str	r1, [sp, #24]
   10cf6:	f7fe fdf9 	bl	f8ec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   10cfa:	9005      	str	r0, [sp, #20]
   10cfc:	9104      	str	r1, [sp, #16]
   10cfe:	e7ff      	b.n	10d00 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2da>
   10d00:	9806      	ldr	r0, [sp, #24]
   10d02:	9905      	ldr	r1, [sp, #20]
   10d04:	9a04      	ldr	r2, [sp, #16]
   10d06:	f7fe fe3a 	bl	f97e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10d0a:	9003      	str	r0, [sp, #12]
   10d0c:	e7ff      	b.n	10d0e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e8>
   10d0e:	9803      	ldr	r0, [sp, #12]
   10d10:	f000 0001 	and.w	r0, r0, #1
   10d14:	f64c 21e0 	movw	r1, #51936	; 0xcae0
   10d18:	f2c0 0101 	movt	r1, #1
   10d1c:	f64c 338c 	movw	r3, #52108	; 0xcb8c
   10d20:	f2c0 0301 	movt	r3, #1
   10d24:	2205      	movs	r2, #5
   10d26:	f7ff f9f5 	bl	10114 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   10d2a:	e7ff      	b.n	10d2c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x306>
   10d2c:	f20d 5064 	addw	r0, sp, #1380	; 0x564
   10d30:	a9f2      	add	r1, sp, #968	; 0x3c8
   10d32:	22d0      	movs	r2, #208	; 0xd0
                    return Some(row);
   10d34:	9002      	str	r0, [sp, #8]
   10d36:	9201      	str	r2, [sp, #4]
   10d38:	f009 fbc6 	bl	1a4c8 <__aeabi_memcpy>
   10d3c:	981e      	ldr	r0, [sp, #120]	; 0x78
   10d3e:	3004      	adds	r0, #4
   10d40:	9902      	ldr	r1, [sp, #8]
   10d42:	9a01      	ldr	r2, [sp, #4]
   10d44:	f009 fbc0 	bl	1a4c8 <__aeabi_memcpy>
   10d48:	2001      	movs	r0, #1
   10d4a:	991e      	ldr	r1, [sp, #120]	; 0x78
   10d4c:	6008      	str	r0, [r1, #0]
   10d4e:	a8d7      	add	r0, sp, #860	; 0x35c
            }
   10d50:	f7f9 fb6a 	bl	a428 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10d54:	e7ff      	b.n	10d56 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x330>
                    return Some(row);
   10d56:	e017      	b.n	10d88 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
   10d58:	2000      	movs	r0, #0
        }
   10d5a:	f88d 0637 	strb.w	r0, [sp, #1591]	; 0x637
    }
   10d5e:	f50d 6dc8 	add.w	sp, sp, #1600	; 0x640
   10d62:	bd80      	pop	{r7, pc}
        }
   10d64:	f89d 0637 	ldrb.w	r0, [sp, #1591]	; 0x637
   10d68:	07c0      	lsls	r0, r0, #31
   10d6a:	2800      	cmp	r0, #0
   10d6c:	d0f4      	beq.n	10d58 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10d6e:	e7ff      	b.n	10d70 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x34a>
   10d70:	2000      	movs	r0, #0
   10d72:	f88d 0637 	strb.w	r0, [sp, #1591]	; 0x637
   10d76:	a820      	add	r0, sp, #128	; 0x80
   10d78:	3004      	adds	r0, #4
   10d7a:	f7f9 fb55 	bl	a428 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10d7e:	e7eb      	b.n	10d58 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10d80:	a820      	add	r0, sp, #128	; 0x80
   10d82:	f7f9 fb16 	bl	a3b2 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   10d86:	e7e7      	b.n	10d58 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10d88:	9820      	ldr	r0, [sp, #128]	; 0x80
   10d8a:	2801      	cmp	r0, #1
   10d8c:	d0ea      	beq.n	10d64 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x33e>
   10d8e:	e7f7      	b.n	10d80 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x35a>
   10d90:	2000      	movs	r0, #0
   10d92:	f88d 0637 	strb.w	r0, [sp, #1591]	; 0x637
                        continue;
   10d96:	e651      	b.n	10a3c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   10d98:	a820      	add	r0, sp, #128	; 0x80
        }
   10d9a:	f7f9 fb0a 	bl	a3b2 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   10d9e:	e7f7      	b.n	10d90 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10da0:	f64c 3040 	movw	r0, #52032	; 0xcb40
   10da4:	f2c0 0001 	movt	r0, #1
   10da8:	f64c 327c 	movw	r2, #52092	; 0xcb7c
   10dac:	f2c0 0201 	movt	r2, #1
   10db0:	211c      	movs	r1, #28
   10db2:	f002 ffb5 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10db6:	defe      	udf	#254	; 0xfe

00010db8 <_ZN77_$LT$core..marker..PhantomData$LT$T$GT$$u20$as$u20$core..default..Default$GT$7default17hf965c475a96f2137E>:
   10db8:	4770      	bx	lr

00010dba <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17hafb8e34694f2826dE>:
   10dba:	b081      	sub	sp, #4
   10dbc:	9000      	str	r0, [sp, #0]
   10dbe:	7800      	ldrb	r0, [r0, #0]
   10dc0:	b001      	add	sp, #4
   10dc2:	4770      	bx	lr

00010dc4 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>:
   10dc4:	b081      	sub	sp, #4
   10dc6:	9000      	str	r0, [sp, #0]
   10dc8:	8800      	ldrh	r0, [r0, #0]
   10dca:	b001      	add	sp, #4
   10dcc:	4770      	bx	lr

00010dce <_ZN4core4iter8adapters13Skip$LT$I$GT$3new17he3da92634e891f7dE>:
   10dce:	b083      	sub	sp, #12
   10dd0:	9100      	str	r1, [sp, #0]
   10dd2:	9201      	str	r2, [sp, #4]
   10dd4:	9302      	str	r3, [sp, #8]
   10dd6:	6001      	str	r1, [r0, #0]
   10dd8:	6042      	str	r2, [r0, #4]
   10dda:	6083      	str	r3, [r0, #8]
   10ddc:	b003      	add	sp, #12
   10dde:	4770      	bx	lr

00010de0 <_ZN94_$LT$core..iter..adapters..Skip$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hffd3ee1a09d0b53aE>:
   10de0:	b580      	push	{r7, lr}
   10de2:	b084      	sub	sp, #16
   10de4:	9002      	str	r0, [sp, #8]
   10de6:	6881      	ldr	r1, [r0, #8]
   10de8:	2900      	cmp	r1, #0
   10dea:	9000      	str	r0, [sp, #0]
   10dec:	d009      	beq.n	10e02 <_ZN94_$LT$core..iter..adapters..Skip$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hffd3ee1a09d0b53aE+0x22>
   10dee:	e7ff      	b.n	10df0 <_ZN94_$LT$core..iter..adapters..Skip$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hffd3ee1a09d0b53aE+0x10>
   10df0:	9800      	ldr	r0, [sp, #0]
   10df2:	6881      	ldr	r1, [r0, #8]
   10df4:	9103      	str	r1, [sp, #12]
   10df6:	2200      	movs	r2, #0
   10df8:	6082      	str	r2, [r0, #8]
   10dfa:	f000 f9b0 	bl	1115e <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E>
   10dfe:	9001      	str	r0, [sp, #4]
   10e00:	e005      	b.n	10e0e <_ZN94_$LT$core..iter..adapters..Skip$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hffd3ee1a09d0b53aE+0x2e>
   10e02:	9800      	ldr	r0, [sp, #0]
   10e04:	f7f9 fb65 	bl	a4d2 <_ZN75_$LT$core..str..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h90c7de42971d7e48E>
   10e08:	9001      	str	r0, [sp, #4]
   10e0a:	e7ff      	b.n	10e0c <_ZN94_$LT$core..iter..adapters..Skip$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hffd3ee1a09d0b53aE+0x2c>
   10e0c:	e000      	b.n	10e10 <_ZN94_$LT$core..iter..adapters..Skip$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hffd3ee1a09d0b53aE+0x30>
   10e0e:	e7ff      	b.n	10e10 <_ZN94_$LT$core..iter..adapters..Skip$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hffd3ee1a09d0b53aE+0x30>
   10e10:	9801      	ldr	r0, [sp, #4]
   10e12:	b004      	add	sp, #16
   10e14:	bd80      	pop	{r7, pc}

00010e16 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>:
   10e16:	b580      	push	{r7, lr}
   10e18:	b08c      	sub	sp, #48	; 0x30
   10e1a:	9009      	str	r0, [sp, #36]	; 0x24
   10e1c:	910a      	str	r1, [sp, #40]	; 0x28
   10e1e:	920b      	str	r2, [sp, #44]	; 0x2c
   10e20:	9006      	str	r0, [sp, #24]
   10e22:	4608      	mov	r0, r1
   10e24:	9105      	str	r1, [sp, #20]
   10e26:	4611      	mov	r1, r2
   10e28:	9204      	str	r2, [sp, #16]
   10e2a:	f000 f89f 	bl	10f6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   10e2e:	9003      	str	r0, [sp, #12]
   10e30:	e7ff      	b.n	10e32 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x1c>
   10e32:	9806      	ldr	r0, [sp, #24]
   10e34:	9007      	str	r0, [sp, #28]
   10e36:	9903      	ldr	r1, [sp, #12]
   10e38:	9108      	str	r1, [sp, #32]
   10e3a:	9807      	ldr	r0, [sp, #28]
   10e3c:	9908      	ldr	r1, [sp, #32]
   10e3e:	9a05      	ldr	r2, [sp, #20]
   10e40:	9b04      	ldr	r3, [sp, #16]
   10e42:	f000 f82d 	bl	10ea0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>
   10e46:	9002      	str	r0, [sp, #8]
   10e48:	9101      	str	r1, [sp, #4]
   10e4a:	e7ff      	b.n	10e4c <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x36>
   10e4c:	9802      	ldr	r0, [sp, #8]
   10e4e:	9901      	ldr	r1, [sp, #4]
   10e50:	b00c      	add	sp, #48	; 0x30
   10e52:	bd80      	pop	{r7, pc}

00010e54 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>:
   10e54:	b083      	sub	sp, #12
   10e56:	9001      	str	r0, [sp, #4]
   10e58:	9102      	str	r1, [sp, #8]
   10e5a:	b003      	add	sp, #12
   10e5c:	4770      	bx	lr

00010e5e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>:
   10e5e:	b580      	push	{r7, lr}
   10e60:	b08a      	sub	sp, #40	; 0x28
   10e62:	9006      	str	r0, [sp, #24]
   10e64:	9107      	str	r1, [sp, #28]
   10e66:	9208      	str	r2, [sp, #32]
   10e68:	9309      	str	r3, [sp, #36]	; 0x24
   10e6a:	9005      	str	r0, [sp, #20]
   10e6c:	4610      	mov	r0, r2
   10e6e:	9104      	str	r1, [sp, #16]
   10e70:	4619      	mov	r1, r3
   10e72:	f000 f864 	bl	10f3e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   10e76:	9003      	str	r0, [sp, #12]
   10e78:	e7ff      	b.n	10e7a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x1c>
   10e7a:	9803      	ldr	r0, [sp, #12]
   10e7c:	9905      	ldr	r1, [sp, #20]
   10e7e:	f000 f9c4 	bl	1120a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   10e82:	9002      	str	r0, [sp, #8]
   10e84:	e7ff      	b.n	10e86 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x28>
   10e86:	9804      	ldr	r0, [sp, #16]
   10e88:	9905      	ldr	r1, [sp, #20]
   10e8a:	1a41      	subs	r1, r0, r1
   10e8c:	9802      	ldr	r0, [sp, #8]
   10e8e:	f000 f849 	bl	10f24 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   10e92:	9001      	str	r0, [sp, #4]
   10e94:	9100      	str	r1, [sp, #0]
   10e96:	e7ff      	b.n	10e98 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x3a>
   10e98:	9801      	ldr	r0, [sp, #4]
   10e9a:	9900      	ldr	r1, [sp, #0]
   10e9c:	b00a      	add	sp, #40	; 0x28
   10e9e:	bd80      	pop	{r7, pc}

00010ea0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>:
   10ea0:	b580      	push	{r7, lr}
   10ea2:	b08c      	sub	sp, #48	; 0x30
   10ea4:	9008      	str	r0, [sp, #32]
   10ea6:	9109      	str	r1, [sp, #36]	; 0x24
   10ea8:	920a      	str	r2, [sp, #40]	; 0x28
   10eaa:	930b      	str	r3, [sp, #44]	; 0x2c
   10eac:	4288      	cmp	r0, r1
   10eae:	9307      	str	r3, [sp, #28]
   10eb0:	9206      	str	r2, [sp, #24]
   10eb2:	9105      	str	r1, [sp, #20]
   10eb4:	9004      	str	r0, [sp, #16]
   10eb6:	d806      	bhi.n	10ec6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x26>
   10eb8:	e7ff      	b.n	10eba <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x1a>
   10eba:	9806      	ldr	r0, [sp, #24]
   10ebc:	9907      	ldr	r1, [sp, #28]
   10ebe:	f000 f855 	bl	10f6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   10ec2:	9003      	str	r0, [sp, #12]
   10ec4:	e004      	b.n	10ed0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x30>
   10ec6:	9804      	ldr	r0, [sp, #16]
   10ec8:	9905      	ldr	r1, [sp, #20]
   10eca:	f003 fe9e 	bl	14c0a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   10ece:	defe      	udf	#254	; 0xfe
   10ed0:	9805      	ldr	r0, [sp, #20]
   10ed2:	9903      	ldr	r1, [sp, #12]
   10ed4:	4288      	cmp	r0, r1
   10ed6:	d809      	bhi.n	10eec <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x4c>
   10ed8:	e7ff      	b.n	10eda <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x3a>
   10eda:	9804      	ldr	r0, [sp, #16]
   10edc:	9905      	ldr	r1, [sp, #20]
   10ede:	9a06      	ldr	r2, [sp, #24]
   10ee0:	9b07      	ldr	r3, [sp, #28]
   10ee2:	f7ff ffbc 	bl	10e5e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>
   10ee6:	9002      	str	r0, [sp, #8]
   10ee8:	9101      	str	r1, [sp, #4]
   10eea:	e00a      	b.n	10f02 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x62>
   10eec:	9806      	ldr	r0, [sp, #24]
   10eee:	9907      	ldr	r1, [sp, #28]
   10ef0:	f000 f83c 	bl	10f6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   10ef4:	9000      	str	r0, [sp, #0]
   10ef6:	e7ff      	b.n	10ef8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x58>
   10ef8:	9805      	ldr	r0, [sp, #20]
   10efa:	9900      	ldr	r1, [sp, #0]
   10efc:	f003 fe63 	bl	14bc6 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   10f00:	defe      	udf	#254	; 0xfe
   10f02:	9802      	ldr	r0, [sp, #8]
   10f04:	9901      	ldr	r1, [sp, #4]
   10f06:	b00c      	add	sp, #48	; 0x30
   10f08:	bd80      	pop	{r7, pc}

00010f0a <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>:
   10f0a:	b580      	push	{r7, lr}
   10f0c:	b084      	sub	sp, #16
   10f0e:	9002      	str	r0, [sp, #8]
   10f10:	9103      	str	r1, [sp, #12]
   10f12:	f002 fda2 	bl	13a5a <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>
   10f16:	9001      	str	r0, [sp, #4]
   10f18:	9100      	str	r1, [sp, #0]
   10f1a:	e7ff      	b.n	10f1c <_ZN4core5slice14from_raw_parts17h1425df913744b73aE+0x12>
   10f1c:	9801      	ldr	r0, [sp, #4]
   10f1e:	9900      	ldr	r1, [sp, #0]
   10f20:	b004      	add	sp, #16
   10f22:	bd80      	pop	{r7, pc}

00010f24 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>:
   10f24:	b580      	push	{r7, lr}
   10f26:	b084      	sub	sp, #16
   10f28:	9002      	str	r0, [sp, #8]
   10f2a:	9103      	str	r1, [sp, #12]
   10f2c:	f002 fda2 	bl	13a74 <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>
   10f30:	9001      	str	r0, [sp, #4]
   10f32:	9100      	str	r1, [sp, #0]
   10f34:	e7ff      	b.n	10f36 <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E+0x12>
   10f36:	9801      	ldr	r0, [sp, #4]
   10f38:	9900      	ldr	r1, [sp, #0]
   10f3a:	b004      	add	sp, #16
   10f3c:	bd80      	pop	{r7, pc}

00010f3e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>:
   10f3e:	b082      	sub	sp, #8
   10f40:	9000      	str	r0, [sp, #0]
   10f42:	9101      	str	r1, [sp, #4]
   10f44:	b002      	add	sp, #8
   10f46:	4770      	bx	lr

00010f48 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>:
   10f48:	b580      	push	{r7, lr}
   10f4a:	b086      	sub	sp, #24
   10f4c:	9003      	str	r0, [sp, #12]
   10f4e:	9104      	str	r1, [sp, #16]
   10f50:	9205      	str	r2, [sp, #20]
   10f52:	9002      	str	r0, [sp, #8]
   10f54:	4610      	mov	r0, r2
   10f56:	9a02      	ldr	r2, [sp, #8]
   10f58:	9101      	str	r1, [sp, #4]
   10f5a:	4611      	mov	r1, r2
   10f5c:	9a01      	ldr	r2, [sp, #4]
   10f5e:	f000 f886 	bl	1106e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>
   10f62:	9000      	str	r0, [sp, #0]
   10f64:	e7ff      	b.n	10f66 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE+0x1e>
   10f66:	9800      	ldr	r0, [sp, #0]
   10f68:	b006      	add	sp, #24
   10f6a:	bd80      	pop	{r7, pc}

00010f6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>:
   10f6c:	b084      	sub	sp, #16
   10f6e:	9002      	str	r0, [sp, #8]
   10f70:	9103      	str	r1, [sp, #12]
   10f72:	9000      	str	r0, [sp, #0]
   10f74:	9101      	str	r1, [sp, #4]
   10f76:	9801      	ldr	r0, [sp, #4]
   10f78:	b004      	add	sp, #16
   10f7a:	4770      	bx	lr

00010f7c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>:
   10f7c:	b580      	push	{r7, lr}
   10f7e:	b092      	sub	sp, #72	; 0x48
   10f80:	900e      	str	r0, [sp, #56]	; 0x38
   10f82:	910f      	str	r1, [sp, #60]	; 0x3c
   10f84:	9009      	str	r0, [sp, #36]	; 0x24
   10f86:	9108      	str	r1, [sp, #32]
   10f88:	f000 f83e 	bl	11008 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>
   10f8c:	4601      	mov	r1, r0
   10f8e:	9010      	str	r0, [sp, #64]	; 0x40
   10f90:	9107      	str	r1, [sp, #28]
   10f92:	e7ff      	b.n	10f94 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x18>
   10f94:	9807      	ldr	r0, [sp, #28]
   10f96:	f002 fd18 	bl	139ca <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   10f9a:	e7ff      	b.n	10f9c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x20>
   10f9c:	e7ff      	b.n	10f9e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x22>
   10f9e:	2002      	movs	r0, #2
   10fa0:	9011      	str	r0, [sp, #68]	; 0x44
   10fa2:	9811      	ldr	r0, [sp, #68]	; 0x44
   10fa4:	9006      	str	r0, [sp, #24]
   10fa6:	e7ff      	b.n	10fa8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x2c>
   10fa8:	9806      	ldr	r0, [sp, #24]
   10faa:	2800      	cmp	r0, #0
   10fac:	d006      	beq.n	10fbc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x40>
   10fae:	e7ff      	b.n	10fb0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x34>
   10fb0:	9809      	ldr	r0, [sp, #36]	; 0x24
   10fb2:	9908      	ldr	r1, [sp, #32]
   10fb4:	f7ff ffda 	bl	10f6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   10fb8:	9005      	str	r0, [sp, #20]
   10fba:	e011      	b.n	10fe0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x64>
   10fbc:	9807      	ldr	r0, [sp, #28]
   10fbe:	9909      	ldr	r1, [sp, #36]	; 0x24
   10fc0:	9004      	str	r0, [sp, #16]
   10fc2:	4608      	mov	r0, r1
   10fc4:	9908      	ldr	r1, [sp, #32]
   10fc6:	f7ff ffd1 	bl	10f6c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   10fca:	9003      	str	r0, [sp, #12]
   10fcc:	e7ff      	b.n	10fce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x52>
   10fce:	9804      	ldr	r0, [sp, #16]
   10fd0:	9903      	ldr	r1, [sp, #12]
   10fd2:	f7fd fbb5 	bl	e740 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>
   10fd6:	9002      	str	r0, [sp, #8]
   10fd8:	e7ff      	b.n	10fda <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x5e>
   10fda:	9802      	ldr	r0, [sp, #8]
   10fdc:	900c      	str	r0, [sp, #48]	; 0x30
   10fde:	e006      	b.n	10fee <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   10fe0:	9807      	ldr	r0, [sp, #28]
   10fe2:	9905      	ldr	r1, [sp, #20]
   10fe4:	f002 fcd0 	bl	13988 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   10fe8:	900c      	str	r0, [sp, #48]	; 0x30
   10fea:	e7ff      	b.n	10fec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x70>
   10fec:	e7ff      	b.n	10fee <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   10fee:	9807      	ldr	r0, [sp, #28]
   10ff0:	f000 fd27 	bl	11a42 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   10ff4:	9001      	str	r0, [sp, #4]
   10ff6:	e7ff      	b.n	10ff8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x7c>
   10ff8:	980c      	ldr	r0, [sp, #48]	; 0x30
   10ffa:	9901      	ldr	r1, [sp, #4]
   10ffc:	910a      	str	r1, [sp, #40]	; 0x28
   10ffe:	900b      	str	r0, [sp, #44]	; 0x2c
   11000:	980a      	ldr	r0, [sp, #40]	; 0x28
   11002:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11004:	b012      	add	sp, #72	; 0x48
   11006:	bd80      	pop	{r7, pc}

00011008 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>:
   11008:	b082      	sub	sp, #8
   1100a:	9000      	str	r0, [sp, #0]
   1100c:	9101      	str	r1, [sp, #4]
   1100e:	b002      	add	sp, #8
   11010:	4770      	bx	lr

00011012 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>:
   11012:	b580      	push	{r7, lr}
   11014:	b086      	sub	sp, #24
   11016:	9003      	str	r0, [sp, #12]
   11018:	9104      	str	r1, [sp, #16]
   1101a:	f7ff ff1b 	bl	10e54 <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>
   1101e:	9002      	str	r0, [sp, #8]
   11020:	9101      	str	r1, [sp, #4]
   11022:	e7ff      	b.n	11024 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E+0x12>
   11024:	9802      	ldr	r0, [sp, #8]
   11026:	9901      	ldr	r1, [sp, #4]
   11028:	b006      	add	sp, #24
   1102a:	bd80      	pop	{r7, pc}

0001102c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>:
   1102c:	b580      	push	{r7, lr}
   1102e:	b088      	sub	sp, #32
   11030:	9005      	str	r0, [sp, #20]
   11032:	9106      	str	r1, [sp, #24]
   11034:	9207      	str	r2, [sp, #28]
   11036:	9004      	str	r0, [sp, #16]
   11038:	4610      	mov	r0, r2
   1103a:	9a04      	ldr	r2, [sp, #16]
   1103c:	9103      	str	r1, [sp, #12]
   1103e:	4611      	mov	r1, r2
   11040:	9a03      	ldr	r2, [sp, #12]
   11042:	f7ff fee8 	bl	10e16 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>
   11046:	9002      	str	r0, [sp, #8]
   11048:	9101      	str	r1, [sp, #4]
   1104a:	e7ff      	b.n	1104c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E+0x20>
   1104c:	9802      	ldr	r0, [sp, #8]
   1104e:	9901      	ldr	r1, [sp, #4]
   11050:	b008      	add	sp, #32
   11052:	bd80      	pop	{r7, pc}

00011054 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>:
   11054:	b580      	push	{r7, lr}
   11056:	b084      	sub	sp, #16
   11058:	9002      	str	r0, [sp, #8]
   1105a:	9103      	str	r1, [sp, #12]
   1105c:	f7ff ff8e 	bl	10f7c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>
   11060:	9001      	str	r0, [sp, #4]
   11062:	9100      	str	r1, [sp, #0]
   11064:	e7ff      	b.n	11066 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE+0x12>
   11066:	9801      	ldr	r0, [sp, #4]
   11068:	9900      	ldr	r1, [sp, #0]
   1106a:	b004      	add	sp, #16
   1106c:	bd80      	pop	{r7, pc}

0001106e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>:
   1106e:	b580      	push	{r7, lr}
   11070:	b086      	sub	sp, #24
   11072:	9003      	str	r0, [sp, #12]
   11074:	9104      	str	r1, [sp, #16]
   11076:	9205      	str	r2, [sp, #20]
   11078:	9002      	str	r0, [sp, #8]
   1107a:	4608      	mov	r0, r1
   1107c:	4611      	mov	r1, r2
   1107e:	f7ff ff5e 	bl	10f3e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   11082:	9001      	str	r0, [sp, #4]
   11084:	e7ff      	b.n	11086 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x18>
   11086:	9801      	ldr	r0, [sp, #4]
   11088:	9902      	ldr	r1, [sp, #8]
   1108a:	f000 f8be 	bl	1120a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   1108e:	9000      	str	r0, [sp, #0]
   11090:	e7ff      	b.n	11092 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x24>
   11092:	9800      	ldr	r0, [sp, #0]
   11094:	b006      	add	sp, #24
   11096:	bd80      	pop	{r7, pc}

00011098 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>:
   11098:	b580      	push	{r7, lr}
   1109a:	b08e      	sub	sp, #56	; 0x38
   1109c:	9007      	str	r0, [sp, #28]
   1109e:	6801      	ldr	r1, [r0, #0]
   110a0:	9005      	str	r0, [sp, #20]
   110a2:	4608      	mov	r0, r1
   110a4:	f000 fcd3 	bl	11a4e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   110a8:	9004      	str	r0, [sp, #16]
   110aa:	e7ff      	b.n	110ac <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x14>
   110ac:	9804      	ldr	r0, [sp, #16]
   110ae:	f000 f8cf 	bl	11250 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>
   110b2:	e7ff      	b.n	110b4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1c>
   110b4:	e7ff      	b.n	110b6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1e>
   110b6:	2002      	movs	r0, #2
   110b8:	9008      	str	r0, [sp, #32]
   110ba:	9808      	ldr	r0, [sp, #32]
   110bc:	9003      	str	r0, [sp, #12]
   110be:	e7ff      	b.n	110c0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x28>
   110c0:	9803      	ldr	r0, [sp, #12]
   110c2:	2800      	cmp	r0, #0
   110c4:	d007      	beq.n	110d6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   110c6:	e7ff      	b.n	110c8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x30>
   110c8:	9805      	ldr	r0, [sp, #20]
   110ca:	6840      	ldr	r0, [r0, #4]
   110cc:	f002 fc7d 	bl	139ca <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   110d0:	e7ff      	b.n	110d2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3a>
   110d2:	e7ff      	b.n	110d4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3c>
   110d4:	e7ff      	b.n	110d6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   110d6:	9805      	ldr	r0, [sp, #20]
   110d8:	6800      	ldr	r0, [r0, #0]
   110da:	f000 fcb8 	bl	11a4e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   110de:	9002      	str	r0, [sp, #8]
   110e0:	e7ff      	b.n	110e2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x4a>
   110e2:	9805      	ldr	r0, [sp, #20]
   110e4:	6841      	ldr	r1, [r0, #4]
   110e6:	9a02      	ldr	r2, [sp, #8]
   110e8:	428a      	cmp	r2, r1
   110ea:	d02f      	beq.n	1114c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xb4>
   110ec:	e7ff      	b.n	110ee <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x56>
   110ee:	9805      	ldr	r0, [sp, #20]
   110f0:	900a      	str	r0, [sp, #40]	; 0x28
   110f2:	2101      	movs	r1, #1
   110f4:	910b      	str	r1, [sp, #44]	; 0x2c
   110f6:	2102      	movs	r1, #2
   110f8:	910d      	str	r1, [sp, #52]	; 0x34
   110fa:	990d      	ldr	r1, [sp, #52]	; 0x34
   110fc:	2900      	cmp	r1, #0
   110fe:	d015      	beq.n	1112c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x94>
   11100:	e7ff      	b.n	11102 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x6a>
   11102:	9805      	ldr	r0, [sp, #20]
   11104:	6800      	ldr	r0, [r0, #0]
   11106:	f000 fca2 	bl	11a4e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   1110a:	900c      	str	r0, [sp, #48]	; 0x30
   1110c:	9905      	ldr	r1, [sp, #20]
   1110e:	680a      	ldr	r2, [r1, #0]
   11110:	9001      	str	r0, [sp, #4]
   11112:	4610      	mov	r0, r2
   11114:	f000 fc9b 	bl	11a4e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   11118:	2101      	movs	r1, #1
   1111a:	f000 f88d 	bl	11238 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   1111e:	f000 fc90 	bl	11a42 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   11122:	9905      	ldr	r1, [sp, #20]
   11124:	6008      	str	r0, [r1, #0]
   11126:	9801      	ldr	r0, [sp, #4]
   11128:	9009      	str	r0, [sp, #36]	; 0x24
   1112a:	e00c      	b.n	11146 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   1112c:	9805      	ldr	r0, [sp, #20]
   1112e:	6840      	ldr	r0, [r0, #4]
   11130:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11134:	f7fd fb0f 	bl	e756 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   11138:	9905      	ldr	r1, [sp, #20]
   1113a:	6048      	str	r0, [r1, #4]
   1113c:	6808      	ldr	r0, [r1, #0]
   1113e:	f000 fc86 	bl	11a4e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   11142:	9009      	str	r0, [sp, #36]	; 0x24
   11144:	e7ff      	b.n	11146 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   11146:	9809      	ldr	r0, [sp, #36]	; 0x24
   11148:	9000      	str	r0, [sp, #0]
   1114a:	e002      	b.n	11152 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xba>
   1114c:	2000      	movs	r0, #0
   1114e:	9006      	str	r0, [sp, #24]
   11150:	e002      	b.n	11158 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   11152:	9800      	ldr	r0, [sp, #0]
   11154:	9006      	str	r0, [sp, #24]
   11156:	e7ff      	b.n	11158 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   11158:	9806      	ldr	r0, [sp, #24]
   1115a:	b00e      	add	sp, #56	; 0x38
   1115c:	bd80      	pop	{r7, pc}

0001115e <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E>:
   1115e:	b580      	push	{r7, lr}
   11160:	b08a      	sub	sp, #40	; 0x28
   11162:	9102      	str	r1, [sp, #8]
   11164:	9007      	str	r0, [sp, #28]
   11166:	f000 f841 	bl	111ec <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a071d74d69998d3E>
   1116a:	9001      	str	r0, [sp, #4]
   1116c:	e7ff      	b.n	1116e <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x10>
   1116e:	9801      	ldr	r0, [sp, #4]
   11170:	9004      	str	r0, [sp, #16]
   11172:	e7ff      	b.n	11174 <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x16>
   11174:	a804      	add	r0, sp, #16
   11176:	f000 f83d 	bl	111f4 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00584595d104a428E>
   1117a:	9005      	str	r0, [sp, #20]
   1117c:	e7ff      	b.n	1117e <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x20>
   1117e:	9805      	ldr	r0, [sp, #20]
   11180:	f5b0 1188 	subs.w	r1, r0, #1114112	; 0x110000
   11184:	bf18      	it	ne
   11186:	2101      	movne	r1, #1
   11188:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   1118c:	d001      	beq.n	11192 <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x34>
   1118e:	e7ff      	b.n	11190 <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x32>
   11190:	e001      	b.n	11196 <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x38>
   11192:	e009      	b.n	111a8 <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x4a>
   11194:	defe      	udf	#254	; 0xfe
   11196:	9805      	ldr	r0, [sp, #20]
   11198:	9008      	str	r0, [sp, #32]
   1119a:	9009      	str	r0, [sp, #36]	; 0x24
   1119c:	9905      	ldr	r1, [sp, #20]
   1119e:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   111a2:	9000      	str	r0, [sp, #0]
   111a4:	d111      	bne.n	111ca <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x6c>
   111a6:	e016      	b.n	111d6 <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x78>
   111a8:	2000      	movs	r0, #0
   111aa:	9003      	str	r0, [sp, #12]
   111ac:	f44f 1088 	mov.w	r0, #1114112	; 0x110000
   111b0:	9003      	str	r0, [sp, #12]
   111b2:	e006      	b.n	111c2 <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x64>
   111b4:	9802      	ldr	r0, [sp, #8]
   111b6:	3801      	subs	r0, #1
   111b8:	9002      	str	r0, [sp, #8]
   111ba:	e005      	b.n	111c8 <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x6a>
   111bc:	9806      	ldr	r0, [sp, #24]
   111be:	9003      	str	r0, [sp, #12]
   111c0:	e7ff      	b.n	111c2 <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x64>
   111c2:	9803      	ldr	r0, [sp, #12]
   111c4:	b00a      	add	sp, #40	; 0x28
   111c6:	bd80      	pop	{r7, pc}
   111c8:	e7d4      	b.n	11174 <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x16>
   111ca:	9800      	ldr	r0, [sp, #0]
   111cc:	9006      	str	r0, [sp, #24]
   111ce:	9902      	ldr	r1, [sp, #8]
   111d0:	2900      	cmp	r1, #0
   111d2:	d0f3      	beq.n	111bc <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x5e>
   111d4:	e7ee      	b.n	111b4 <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x56>
   111d6:	e7f8      	b.n	111ca <_ZN4core4iter6traits8iterator8Iterator3nth17hc32d24cc1fd1dc88E+0x6c>

000111d8 <_ZN4core4iter6traits8iterator8Iterator4skip17h78c4b5071866f986E>:
   111d8:	b580      	push	{r7, lr}
   111da:	b084      	sub	sp, #16
   111dc:	9101      	str	r1, [sp, #4]
   111de:	9202      	str	r2, [sp, #8]
   111e0:	9303      	str	r3, [sp, #12]
   111e2:	f7ff fdf4 	bl	10dce <_ZN4core4iter8adapters13Skip$LT$I$GT$3new17he3da92634e891f7dE>
   111e6:	e7ff      	b.n	111e8 <_ZN4core4iter6traits8iterator8Iterator4skip17h78c4b5071866f986E+0x10>
   111e8:	b004      	add	sp, #16
   111ea:	bd80      	pop	{r7, pc}

000111ec <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a071d74d69998d3E>:
   111ec:	b081      	sub	sp, #4
   111ee:	9000      	str	r0, [sp, #0]
   111f0:	b001      	add	sp, #4
   111f2:	4770      	bx	lr

000111f4 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00584595d104a428E>:
   111f4:	b580      	push	{r7, lr}
   111f6:	b082      	sub	sp, #8
   111f8:	9001      	str	r0, [sp, #4]
   111fa:	6800      	ldr	r0, [r0, #0]
   111fc:	f7f9 f969 	bl	a4d2 <_ZN75_$LT$core..str..Chars$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h90c7de42971d7e48E>
   11200:	9000      	str	r0, [sp, #0]
   11202:	e7ff      	b.n	11204 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h00584595d104a428E+0x10>
   11204:	9800      	ldr	r0, [sp, #0]
   11206:	b002      	add	sp, #8
   11208:	bd80      	pop	{r7, pc}

0001120a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>:
   1120a:	b580      	push	{r7, lr}
   1120c:	b084      	sub	sp, #16
   1120e:	9002      	str	r0, [sp, #8]
   11210:	9103      	str	r1, [sp, #12]
   11212:	f000 f811 	bl	11238 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   11216:	9001      	str	r0, [sp, #4]
   11218:	e7ff      	b.n	1121a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E+0x10>
   1121a:	9801      	ldr	r0, [sp, #4]
   1121c:	b004      	add	sp, #16
   1121e:	bd80      	pop	{r7, pc}

00011220 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>:
   11220:	b580      	push	{r7, lr}
   11222:	b084      	sub	sp, #16
   11224:	460a      	mov	r2, r1
   11226:	9002      	str	r0, [sp, #8]
   11228:	f8ad 100e 	strh.w	r1, [sp, #14]
   1122c:	9201      	str	r2, [sp, #4]
   1122e:	f002 fc4f 	bl	13ad0 <_ZN4core3ptr5write17h147d4643d861e927E>
   11232:	e7ff      	b.n	11234 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E+0x14>
   11234:	b004      	add	sp, #16
   11236:	bd80      	pop	{r7, pc}

00011238 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>:
   11238:	b084      	sub	sp, #16
   1123a:	9001      	str	r0, [sp, #4]
   1123c:	9102      	str	r1, [sp, #8]
   1123e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   11242:	9003      	str	r0, [sp, #12]
   11244:	9803      	ldr	r0, [sp, #12]
   11246:	9000      	str	r0, [sp, #0]
   11248:	e7ff      	b.n	1124a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE+0x12>
   1124a:	9800      	ldr	r0, [sp, #0]
   1124c:	b004      	add	sp, #16
   1124e:	4770      	bx	lr

00011250 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>:
   11250:	b082      	sub	sp, #8
   11252:	9001      	str	r0, [sp, #4]
   11254:	9000      	str	r0, [sp, #0]
   11256:	e7ff      	b.n	11258 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE+0x8>
   11258:	9800      	ldr	r0, [sp, #0]
   1125a:	fab0 f180 	clz	r1, r0
   1125e:	0948      	lsrs	r0, r1, #5
   11260:	b002      	add	sp, #8
   11262:	4770      	bx	lr

00011264 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   11264:	b580      	push	{r7, lr}
        (&self).into_iter()
   11266:	f000 f814 	bl	11292 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>
   1126a:	e7ff      	b.n	1126c <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E+0x8>
    }
   1126c:	bd80      	pop	{r7, pc}

0001126e <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
    fn fill(mut self, color: Option<C>) -> Self {
   1126e:	b5b0      	push	{r4, r5, r7, lr}
   11270:	b081      	sub	sp, #4
   11272:	469c      	mov	ip, r3
   11274:	4696      	mov	lr, r2
   11276:	f8ad 2000 	strh.w	r2, [sp]
   1127a:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   1127e:	820a      	strh	r2, [r1, #16]
   11280:	824b      	strh	r3, [r1, #18]
        self
   11282:	c91c      	ldmia	r1!, {r2, r3, r4}
   11284:	c01c      	stmia	r0!, {r2, r3, r4}
   11286:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   1128a:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   1128e:	b001      	add	sp, #4
   11290:	bdb0      	pop	{r4, r5, r7, pc}

00011292 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   11292:	b570      	push	{r4, r5, r6, lr}
   11294:	b08e      	sub	sp, #56	; 0x38
   11296:	910d      	str	r1, [sp, #52]	; 0x34
        RectangleIterator {
            top_left: self.top_left,
   11298:	680a      	ldr	r2, [r1, #0]
   1129a:	684b      	ldr	r3, [r1, #4]
            bottom_right: self.bottom_right,
   1129c:	f8d1 c008 	ldr.w	ip, [r1, #8]
   112a0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
            style: self.style,
   112a4:	8b0c      	ldrh	r4, [r1, #24]
   112a6:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
   112aa:	690c      	ldr	r4, [r1, #16]
   112ac:	694d      	ldr	r5, [r1, #20]
   112ae:	950b      	str	r5, [sp, #44]	; 0x2c
   112b0:	940a      	str	r4, [sp, #40]	; 0x28
   112b2:	2400      	movs	r4, #0
            x: self.top_left[0],
   112b4:	9009      	str	r0, [sp, #36]	; 0x24
   112b6:	4608      	mov	r0, r1
   112b8:	9108      	str	r1, [sp, #32]
   112ba:	4621      	mov	r1, r4
   112bc:	9207      	str	r2, [sp, #28]
   112be:	9306      	str	r3, [sp, #24]
   112c0:	f8cd c014 	str.w	ip, [sp, #20]
   112c4:	f8cd e010 	str.w	lr, [sp, #16]
   112c8:	f7fa ff17 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   112cc:	9003      	str	r0, [sp, #12]
   112ce:	e7ff      	b.n	112d0 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x3e>
   112d0:	9803      	ldr	r0, [sp, #12]
   112d2:	6801      	ldr	r1, [r0, #0]
   112d4:	2201      	movs	r2, #1
            y: self.top_left[1],
   112d6:	9808      	ldr	r0, [sp, #32]
   112d8:	9102      	str	r1, [sp, #8]
   112da:	4611      	mov	r1, r2
   112dc:	f7fa ff0d 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   112e0:	9001      	str	r0, [sp, #4]
   112e2:	e7ff      	b.n	112e4 <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x52>
   112e4:	9801      	ldr	r0, [sp, #4]
   112e6:	6801      	ldr	r1, [r0, #0]
        RectangleIterator {
   112e8:	9a07      	ldr	r2, [sp, #28]
   112ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   112ec:	601a      	str	r2, [r3, #0]
   112ee:	f8dd c018 	ldr.w	ip, [sp, #24]
   112f2:	f8c3 c004 	str.w	ip, [r3, #4]
   112f6:	f8dd e014 	ldr.w	lr, [sp, #20]
   112fa:	f8c3 e008 	str.w	lr, [r3, #8]
   112fe:	9c04      	ldr	r4, [sp, #16]
   11300:	60dc      	str	r4, [r3, #12]
   11302:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   11306:	841d      	strh	r5, [r3, #32]
   11308:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1130a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1130c:	61de      	str	r6, [r3, #28]
   1130e:	619d      	str	r5, [r3, #24]
   11310:	9d02      	ldr	r5, [sp, #8]
   11312:	611d      	str	r5, [r3, #16]
   11314:	6159      	str	r1, [r3, #20]
        }
    }
   11316:	b00e      	add	sp, #56	; 0x38
   11318:	bd70      	pop	{r4, r5, r6, pc}

0001131a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>:
where
    C: PixelColor,
{
    type Item = Pixel<C>;

    fn next(&mut self) -> Option<Self::Item> {
   1131a:	b510      	push	{r4, lr}
   1131c:	b0d2      	sub	sp, #328	; 0x148
   1131e:	914f      	str	r1, [sp, #316]	; 0x13c
   11320:	2200      	movs	r2, #0
        // If entire object is off the top left of the screen or has no border or fill colour,
        // don't render anything
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11322:	902a      	str	r0, [sp, #168]	; 0xa8
   11324:	4608      	mov	r0, r1
   11326:	9129      	str	r1, [sp, #164]	; 0xa4
   11328:	4611      	mov	r1, r2
   1132a:	f7fa fee6 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1132e:	9028      	str	r0, [sp, #160]	; 0xa0
   11330:	e03c      	b.n	113ac <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x92>
   11332:	2001      	movs	r0, #1
   11334:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   11338:	e009      	b.n	1134e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
   1133a:	2000      	movs	r0, #0
   1133c:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   11340:	e005      	b.n	1134e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11342:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11344:	301c      	adds	r0, #28
   11346:	f7fe f993 	bl	f670 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   1134a:	9027      	str	r0, [sp, #156]	; 0x9c
   1134c:	e06c      	b.n	11428 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x10e>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   1134e:	f89d 00af 	ldrb.w	r0, [sp, #175]	; 0xaf
   11352:	07c0      	lsls	r0, r0, #31
   11354:	2800      	cmp	r0, #0
   11356:	d172      	bne.n	1143e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x124>
   11358:	e070      	b.n	1143c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x122>
   1135a:	2001      	movs	r0, #1
   1135c:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   11360:	e00a      	b.n	11378 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
   11362:	2000      	movs	r0, #0
   11364:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   11368:	e006      	b.n	11378 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   1136a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1136c:	3008      	adds	r0, #8
   1136e:	2100      	movs	r1, #0
   11370:	f7fa fec3 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11374:	9026      	str	r0, [sp, #152]	; 0x98
   11376:	e038      	b.n	113ea <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xd0>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11378:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
   1137c:	07c0      	lsls	r0, r0, #31
   1137e:	2800      	cmp	r0, #0
   11380:	d1d7      	bne.n	11332 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   11382:	e7de      	b.n	11342 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x28>
   11384:	2001      	movs	r0, #1
   11386:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   1138a:	e009      	b.n	113a0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   1138c:	2000      	movs	r0, #0
   1138e:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   11392:	e005      	b.n	113a0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   11394:	2101      	movs	r1, #1
   11396:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11398:	f7fa feaf 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1139c:	9025      	str	r0, [sp, #148]	; 0x94
   1139e:	e00a      	b.n	113b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x9c>
   113a0:	f89d 00b1 	ldrb.w	r0, [sp, #177]	; 0xb1
   113a4:	07c0      	lsls	r0, r0, #31
   113a6:	2800      	cmp	r0, #0
   113a8:	d1df      	bne.n	1136a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x50>
   113aa:	e7da      	b.n	11362 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
   113ac:	9828      	ldr	r0, [sp, #160]	; 0xa0
   113ae:	6801      	ldr	r1, [r0, #0]
   113b0:	2900      	cmp	r1, #0
   113b2:	d4e7      	bmi.n	11384 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   113b4:	e7ee      	b.n	11394 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x7a>
   113b6:	9825      	ldr	r0, [sp, #148]	; 0x94
   113b8:	6801      	ldr	r1, [r0, #0]
   113ba:	2900      	cmp	r1, #0
   113bc:	d4e2      	bmi.n	11384 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   113be:	e7e5      	b.n	1138c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x72>
   113c0:	2001      	movs	r0, #1
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   113c2:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   113c6:	e00a      	b.n	113de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   113c8:	2000      	movs	r0, #0
   113ca:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   113ce:	e006      	b.n	113de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   113d0:	9829      	ldr	r0, [sp, #164]	; 0xa4
   113d2:	3008      	adds	r0, #8
   113d4:	2101      	movs	r1, #1
   113d6:	f7fa fe90 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   113da:	9024      	str	r0, [sp, #144]	; 0x90
   113dc:	e00a      	b.n	113f4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xda>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   113de:	f89d 00b2 	ldrb.w	r0, [sp, #178]	; 0xb2
   113e2:	07c0      	lsls	r0, r0, #31
   113e4:	2800      	cmp	r0, #0
   113e6:	d1b8      	bne.n	1135a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40>
   113e8:	e7bb      	b.n	11362 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   113ea:	9826      	ldr	r0, [sp, #152]	; 0x98
   113ec:	6801      	ldr	r1, [r0, #0]
   113ee:	2900      	cmp	r1, #0
   113f0:	d4e6      	bmi.n	113c0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   113f2:	e7ed      	b.n	113d0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xb6>
   113f4:	9824      	ldr	r0, [sp, #144]	; 0x90
   113f6:	6801      	ldr	r1, [r0, #0]
   113f8:	2900      	cmp	r1, #0
   113fa:	d4e1      	bmi.n	113c0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   113fc:	e7e4      	b.n	113c8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xae>
   113fe:	2001      	movs	r0, #1
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11400:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   11404:	e009      	b.n	1141a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   11406:	2000      	movs	r0, #0
   11408:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   1140c:	e005      	b.n	1141a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   1140e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11410:	3018      	adds	r0, #24
   11412:	f7fe f92d 	bl	f670 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   11416:	9023      	str	r0, [sp, #140]	; 0x8c
   11418:	e00b      	b.n	11432 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x118>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   1141a:	f89d 00b3 	ldrb.w	r0, [sp, #179]	; 0xb3
   1141e:	07c0      	lsls	r0, r0, #31
   11420:	2800      	cmp	r0, #0
   11422:	f47f af86 	bne.w	11332 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   11426:	e788      	b.n	1133a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20>
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11428:	9827      	ldr	r0, [sp, #156]	; 0x9c
   1142a:	07c1      	lsls	r1, r0, #31
   1142c:	2900      	cmp	r1, #0
   1142e:	d1ee      	bne.n	1140e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xf4>
   11430:	e7e9      	b.n	11406 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
   11432:	9823      	ldr	r0, [sp, #140]	; 0x8c
   11434:	07c1      	lsls	r1, r0, #31
   11436:	2900      	cmp	r1, #0
   11438:	d1e1      	bne.n	113fe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xe4>
   1143a:	e7e4      	b.n	11406 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
        {
            return None;
        }

        let pixel = loop {
   1143c:	e012      	b.n	11464 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
   1143e:	2000      	movs	r0, #0
            return None;
   11440:	992a      	ldr	r1, [sp, #168]	; 0xa8
   11442:	6008      	str	r0, [r1, #0]
   11444:	e7ff      	b.n	11446 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                break out;
            }
        };

        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
    }
   11446:	b052      	add	sp, #328	; 0x148
   11448:	bd10      	pop	{r4, pc}
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   1144a:	982d      	ldr	r0, [sp, #180]	; 0xb4
   1144c:	992e      	ldr	r1, [sp, #184]	; 0xb8
   1144e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   11450:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   11452:	934d      	str	r3, [sp, #308]	; 0x134
   11454:	924c      	str	r2, [sp, #304]	; 0x130
   11456:	914b      	str	r1, [sp, #300]	; 0x12c
   11458:	904a      	str	r0, [sp, #296]	; 0x128
   1145a:	a94a      	add	r1, sp, #296	; 0x128
   1145c:	982a      	ldr	r0, [sp, #168]	; 0xa8
   1145e:	f7fe f819 	bl	f494 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>
   11462:	e201      	b.n	11868 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x54e>
   11464:	2000      	movs	r0, #0
            let mut out = None;
   11466:	9031      	str	r0, [sp, #196]	; 0xc4
            if self.y > self.bottom_right[1] {
   11468:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1146a:	6941      	ldr	r1, [r0, #20]
   1146c:	3008      	adds	r0, #8
   1146e:	2201      	movs	r2, #1
   11470:	9122      	str	r1, [sp, #136]	; 0x88
   11472:	4611      	mov	r1, r2
   11474:	f7fa fe41 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11478:	9021      	str	r0, [sp, #132]	; 0x84
   1147a:	e7ff      	b.n	1147c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x162>
   1147c:	9821      	ldr	r0, [sp, #132]	; 0x84
   1147e:	6801      	ldr	r1, [r0, #0]
   11480:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11482:	428a      	cmp	r2, r1
   11484:	dc13      	bgt.n	114ae <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x194>
   11486:	e7ff      	b.n	11488 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x16e>
            let border_width = self.style.stroke_width as i32;
   11488:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1148a:	f890 1020 	ldrb.w	r1, [r0, #32]
   1148e:	460a      	mov	r2, r1
   11490:	9150      	str	r1, [sp, #320]	; 0x140
            let tl = self.top_left;
   11492:	6801      	ldr	r1, [r0, #0]
   11494:	6843      	ldr	r3, [r0, #4]
   11496:	9135      	str	r1, [sp, #212]	; 0xd4
   11498:	9336      	str	r3, [sp, #216]	; 0xd8
            let br = self.bottom_right;
   1149a:	6881      	ldr	r1, [r0, #8]
   1149c:	68c3      	ldr	r3, [r0, #12]
   1149e:	9137      	str	r1, [sp, #220]	; 0xdc
   114a0:	9338      	str	r3, [sp, #224]	; 0xe0
            if self.x >= 0 && self.y >= 0 {
   114a2:	6901      	ldr	r1, [r0, #16]
   114a4:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   114a8:	9220      	str	r2, [sp, #128]	; 0x80
   114aa:	dc0b      	bgt.n	114c4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1aa>
   114ac:	e006      	b.n	114bc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   114ae:	2000      	movs	r0, #0
                break None;
   114b0:	902d      	str	r0, [sp, #180]	; 0xb4
   114b2:	e7ca      	b.n	1144a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
   114b4:	2001      	movs	r0, #1
            if self.x >= 0 && self.y >= 0 {
   114b6:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   114ba:	e009      	b.n	114d0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   114bc:	2000      	movs	r0, #0
   114be:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   114c2:	e005      	b.n	114d0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   114c4:	9829      	ldr	r0, [sp, #164]	; 0xa4
   114c6:	6941      	ldr	r1, [r0, #20]
   114c8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   114cc:	dcf2      	bgt.n	114b4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x19a>
   114ce:	e7f5      	b.n	114bc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   114d0:	f89d 00e7 	ldrb.w	r0, [sp, #231]	; 0xe7
   114d4:	07c0      	lsls	r0, r0, #31
   114d6:	2800      	cmp	r0, #0
   114d8:	f000 8182 	beq.w	117e0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
   114dc:	e7ff      	b.n	114de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1c4>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   114de:	9829      	ldr	r0, [sp, #164]	; 0xa4
   114e0:	6941      	ldr	r1, [r0, #20]
   114e2:	a835      	add	r0, sp, #212	; 0xd4
   114e4:	2201      	movs	r2, #1
   114e6:	911f      	str	r1, [sp, #124]	; 0x7c
   114e8:	4611      	mov	r1, r2
   114ea:	f7fa fe06 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   114ee:	901e      	str	r0, [sp, #120]	; 0x78
   114f0:	e074      	b.n	115dc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2c2>
   114f2:	2001      	movs	r0, #1
                if (
   114f4:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   114f8:	e009      	b.n	1150e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
   114fa:	2000      	movs	r0, #0
   114fc:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   11500:	e005      	b.n	1150e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
                ) && self.style.stroke_color.is_some()
   11502:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11504:	301c      	adds	r0, #28
   11506:	f7fe f8e3 	bl	f6d0 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   1150a:	901d      	str	r0, [sp, #116]	; 0x74
   1150c:	e104      	b.n	11718 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3fe>
                if (
   1150e:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
   11512:	07c0      	lsls	r0, r0, #31
   11514:	2800      	cmp	r0, #0
   11516:	f040 810a 	bne.w	1172e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x414>
   1151a:	e103      	b.n	11724 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40a>
   1151c:	2001      	movs	r0, #1
   1151e:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   11522:	e00d      	b.n	11540 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
   11524:	2000      	movs	r0, #0
   11526:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   1152a:	e009      	b.n	11540 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   1152c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1152e:	6901      	ldr	r1, [r0, #16]
   11530:	a837      	add	r0, sp, #220	; 0xdc
   11532:	2200      	movs	r2, #0
   11534:	911c      	str	r1, [sp, #112]	; 0x70
   11536:	4611      	mov	r1, r2
   11538:	f7fa fddf 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1153c:	901b      	str	r0, [sp, #108]	; 0x6c
   1153e:	e0d7      	b.n	116f0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3d6>
                if (
   11540:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
   11544:	07c0      	lsls	r0, r0, #31
   11546:	2800      	cmp	r0, #0
   11548:	d1db      	bne.n	11502 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e8>
   1154a:	e7d6      	b.n	114fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
   1154c:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   1154e:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   11552:	e00d      	b.n	11570 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
   11554:	2000      	movs	r0, #0
   11556:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   1155a:	e009      	b.n	11570 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   1155c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1155e:	6901      	ldr	r1, [r0, #16]
   11560:	a835      	add	r0, sp, #212	; 0xd4
   11562:	2200      	movs	r2, #0
   11564:	911a      	str	r1, [sp, #104]	; 0x68
   11566:	4611      	mov	r1, r2
   11568:	f7fa fdc7 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1156c:	9019      	str	r0, [sp, #100]	; 0x64
   1156e:	e090      	b.n	11692 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x378>
                if (
   11570:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
   11574:	07c0      	lsls	r0, r0, #31
   11576:	2800      	cmp	r0, #0
   11578:	d1d0      	bne.n	1151c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   1157a:	e7d7      	b.n	1152c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x212>
   1157c:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   1157e:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   11582:	e00d      	b.n	115a0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
   11584:	2000      	movs	r0, #0
   11586:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   1158a:	e009      	b.n	115a0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   1158c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1158e:	6941      	ldr	r1, [r0, #20]
   11590:	a837      	add	r0, sp, #220	; 0xdc
   11592:	2201      	movs	r2, #1
   11594:	9118      	str	r1, [sp, #96]	; 0x60
   11596:	4611      	mov	r1, r2
   11598:	f7fa fdaf 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1159c:	9017      	str	r0, [sp, #92]	; 0x5c
   1159e:	e04b      	b.n	11638 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x31e>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   115a0:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
   115a4:	07c0      	lsls	r0, r0, #31
   115a6:	2800      	cmp	r0, #0
   115a8:	d1d0      	bne.n	1154c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   115aa:	e7d7      	b.n	1155c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x242>
   115ac:	2001      	movs	r0, #1
   115ae:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   115b2:	e00d      	b.n	115d0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   115b4:	2000      	movs	r0, #0
   115b6:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   115ba:	e009      	b.n	115d0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   115bc:	9829      	ldr	r0, [sp, #164]	; 0xa4
   115be:	6941      	ldr	r1, [r0, #20]
   115c0:	a835      	add	r0, sp, #212	; 0xd4
   115c2:	2201      	movs	r2, #1
   115c4:	9116      	str	r1, [sp, #88]	; 0x58
   115c6:	4611      	mov	r1, r2
   115c8:	f7fa fd97 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   115cc:	9015      	str	r0, [sp, #84]	; 0x54
   115ce:	e00b      	b.n	115e8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ce>
   115d0:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   115d4:	07c0      	lsls	r0, r0, #31
   115d6:	2800      	cmp	r0, #0
   115d8:	d1d0      	bne.n	1157c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   115da:	e7d7      	b.n	1158c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x272>
   115dc:	981e      	ldr	r0, [sp, #120]	; 0x78
   115de:	6801      	ldr	r1, [r0, #0]
   115e0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   115e2:	428a      	cmp	r2, r1
   115e4:	daea      	bge.n	115bc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2a2>
   115e6:	e7e5      	b.n	115b4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   115e8:	9815      	ldr	r0, [sp, #84]	; 0x54
   115ea:	6801      	ldr	r1, [r0, #0]
   115ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
   115ee:	188b      	adds	r3, r1, r2
   115f0:	469c      	mov	ip, r3
   115f2:	428b      	cmp	r3, r1
   115f4:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
   115f8:	f180 8137 	bvs.w	1186a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x550>
   115fc:	e7ff      	b.n	115fe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2e4>
   115fe:	9816      	ldr	r0, [sp, #88]	; 0x58
   11600:	9914      	ldr	r1, [sp, #80]	; 0x50
   11602:	4288      	cmp	r0, r1
   11604:	dbd2      	blt.n	115ac <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x292>
   11606:	e7d5      	b.n	115b4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   11608:	2001      	movs	r0, #1
                || (self.y <= br[1] && self.y > br[1] - border_width)
   1160a:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   1160e:	e00d      	b.n	1162c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   11610:	2000      	movs	r0, #0
   11612:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   11616:	e009      	b.n	1162c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   11618:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1161a:	6941      	ldr	r1, [r0, #20]
   1161c:	a837      	add	r0, sp, #220	; 0xdc
   1161e:	2201      	movs	r2, #1
   11620:	9113      	str	r1, [sp, #76]	; 0x4c
   11622:	4611      	mov	r1, r2
   11624:	f7fa fd69 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11628:	9012      	str	r0, [sp, #72]	; 0x48
   1162a:	e00b      	b.n	11644 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x32a>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   1162c:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   11630:	07c0      	lsls	r0, r0, #31
   11632:	2800      	cmp	r0, #0
   11634:	d1a2      	bne.n	1157c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   11636:	e7a5      	b.n	11584 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x26a>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   11638:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1163a:	6801      	ldr	r1, [r0, #0]
   1163c:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1163e:	428a      	cmp	r2, r1
   11640:	ddea      	ble.n	11618 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2fe>
   11642:	e7e5      	b.n	11610 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   11644:	9812      	ldr	r0, [sp, #72]	; 0x48
   11646:	6801      	ldr	r1, [r0, #0]
   11648:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1164a:	1a8b      	subs	r3, r1, r2
   1164c:	4291      	cmp	r1, r2
   1164e:	9311      	str	r3, [sp, #68]	; 0x44
   11650:	f180 8117 	bvs.w	11882 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x568>
   11654:	e7ff      	b.n	11656 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x33c>
   11656:	9813      	ldr	r0, [sp, #76]	; 0x4c
   11658:	9911      	ldr	r1, [sp, #68]	; 0x44
   1165a:	4288      	cmp	r0, r1
   1165c:	dcd4      	bgt.n	11608 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ee>
   1165e:	e7d7      	b.n	11610 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   11660:	2001      	movs	r0, #1
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   11662:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   11666:	e00d      	b.n	11684 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   11668:	2000      	movs	r0, #0
   1166a:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   1166e:	e009      	b.n	11684 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   11670:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11672:	6901      	ldr	r1, [r0, #16]
   11674:	a835      	add	r0, sp, #212	; 0xd4
   11676:	2200      	movs	r2, #0
   11678:	9110      	str	r1, [sp, #64]	; 0x40
   1167a:	4611      	mov	r1, r2
   1167c:	f7fa fd3d 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11680:	900f      	str	r0, [sp, #60]	; 0x3c
   11682:	e00c      	b.n	1169e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x384>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   11684:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   11688:	07c0      	lsls	r0, r0, #31
   1168a:	2800      	cmp	r0, #0
   1168c:	f47f af5e 	bne.w	1154c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   11690:	e760      	b.n	11554 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x23a>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   11692:	9819      	ldr	r0, [sp, #100]	; 0x64
   11694:	6801      	ldr	r1, [r0, #0]
   11696:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   11698:	428a      	cmp	r2, r1
   1169a:	dae9      	bge.n	11670 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x356>
   1169c:	e7e4      	b.n	11668 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   1169e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   116a0:	6801      	ldr	r1, [r0, #0]
   116a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   116a4:	188b      	adds	r3, r1, r2
   116a6:	469c      	mov	ip, r3
   116a8:	428b      	cmp	r3, r1
   116aa:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   116ae:	f180 80f4 	bvs.w	1189a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x580>
   116b2:	e7ff      	b.n	116b4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x39a>
   116b4:	9810      	ldr	r0, [sp, #64]	; 0x40
   116b6:	990e      	ldr	r1, [sp, #56]	; 0x38
   116b8:	4288      	cmp	r0, r1
   116ba:	dbd1      	blt.n	11660 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x346>
   116bc:	e7d4      	b.n	11668 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   116be:	2001      	movs	r0, #1
                || (self.x <= br[0] && self.x > br[0] - border_width)
   116c0:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   116c4:	e00d      	b.n	116e2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   116c6:	2000      	movs	r0, #0
   116c8:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   116cc:	e009      	b.n	116e2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   116ce:	9829      	ldr	r0, [sp, #164]	; 0xa4
   116d0:	6901      	ldr	r1, [r0, #16]
   116d2:	a837      	add	r0, sp, #220	; 0xdc
   116d4:	2200      	movs	r2, #0
   116d6:	910d      	str	r1, [sp, #52]	; 0x34
   116d8:	4611      	mov	r1, r2
   116da:	f7fa fd0e 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   116de:	900c      	str	r0, [sp, #48]	; 0x30
   116e0:	e00c      	b.n	116fc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3e2>
                if (
   116e2:	f89d 00ef 	ldrb.w	r0, [sp, #239]	; 0xef
   116e6:	07c0      	lsls	r0, r0, #31
   116e8:	2800      	cmp	r0, #0
   116ea:	f47f af17 	bne.w	1151c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   116ee:	e719      	b.n	11524 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20a>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   116f0:	981b      	ldr	r0, [sp, #108]	; 0x6c
   116f2:	6801      	ldr	r1, [r0, #0]
   116f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   116f6:	428a      	cmp	r2, r1
   116f8:	dde9      	ble.n	116ce <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3b4>
   116fa:	e7e4      	b.n	116c6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
   116fc:	980c      	ldr	r0, [sp, #48]	; 0x30
   116fe:	6801      	ldr	r1, [r0, #0]
   11700:	9a20      	ldr	r2, [sp, #128]	; 0x80
   11702:	1a8b      	subs	r3, r1, r2
   11704:	4291      	cmp	r1, r2
   11706:	930b      	str	r3, [sp, #44]	; 0x2c
   11708:	f180 80d3 	bvs.w	118b2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x598>
   1170c:	e7ff      	b.n	1170e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3f4>
   1170e:	980d      	ldr	r0, [sp, #52]	; 0x34
   11710:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11712:	4288      	cmp	r0, r1
   11714:	dcd3      	bgt.n	116be <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3a4>
   11716:	e7d6      	b.n	116c6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
                if (
   11718:	981d      	ldr	r0, [sp, #116]	; 0x74
   1171a:	07c1      	lsls	r1, r0, #31
   1171c:	2900      	cmp	r1, #0
   1171e:	f47f aee8 	bne.w	114f2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1d8>
   11722:	e6ea      	b.n	114fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
                else if let Some(fill) = self.style.fill_color {
   11724:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11726:	8b01      	ldrh	r1, [r0, #24]
   11728:	2901      	cmp	r1, #1
   1172a:	d03b      	beq.n	117a4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48a>
   1172c:	e057      	b.n	117de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                        self.x,
   1172e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11730:	6901      	ldr	r1, [r0, #16]
                        self.y,
   11732:	6942      	ldr	r2, [r0, #20]
                        self.style.stroke_color.expect("Expected stroke"),
   11734:	8bc3      	ldrh	r3, [r0, #30]
   11736:	8b80      	ldrh	r0, [r0, #28]
   11738:	f64c 4ca4 	movw	ip, #52388	; 0xcca4
   1173c:	f2c0 0c01 	movt	ip, #1
   11740:	46ee      	mov	lr, sp
   11742:	f8ce c000 	str.w	ip, [lr]
   11746:	f64c 4c94 	movw	ip, #52372	; 0xcc94
   1174a:	f2c0 0c01 	movt	ip, #1
   1174e:	f04f 0e0f 	mov.w	lr, #15
   11752:	910a      	str	r1, [sp, #40]	; 0x28
   11754:	4619      	mov	r1, r3
   11756:	9209      	str	r2, [sp, #36]	; 0x24
   11758:	4662      	mov	r2, ip
   1175a:	4673      	mov	r3, lr
   1175c:	f7fd ff0c 	bl	f578 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>
   11760:	9008      	str	r0, [sp, #32]
   11762:	e7ff      	b.n	11764 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x44a>
                    out = Some((
   11764:	980a      	ldr	r0, [sp, #40]	; 0x28
   11766:	9040      	str	r0, [sp, #256]	; 0x100
   11768:	9909      	ldr	r1, [sp, #36]	; 0x24
   1176a:	9141      	str	r1, [sp, #260]	; 0x104
   1176c:	9a08      	ldr	r2, [sp, #32]
   1176e:	f8ad 2108 	strh.w	r2, [sp, #264]	; 0x108
   11772:	9b40      	ldr	r3, [sp, #256]	; 0x100
   11774:	f8dd c104 	ldr.w	ip, [sp, #260]	; 0x104
   11778:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
   1177c:	f8cd e0fc 	str.w	lr, [sp, #252]	; 0xfc
   11780:	f8cd c0f8 	str.w	ip, [sp, #248]	; 0xf8
   11784:	933d      	str	r3, [sp, #244]	; 0xf4
   11786:	2301      	movs	r3, #1
   11788:	933c      	str	r3, [sp, #240]	; 0xf0
   1178a:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   1178c:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
   11790:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   11794:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
   11796:	9434      	str	r4, [sp, #208]	; 0xd0
   11798:	f8cd e0cc 	str.w	lr, [sp, #204]	; 0xcc
   1179c:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
   117a0:	9331      	str	r3, [sp, #196]	; 0xc4
                if (
   117a2:	e01c      	b.n	117de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                else if let Some(fill) = self.style.fill_color {
   117a4:	9829      	ldr	r0, [sp, #164]	; 0xa4
   117a6:	8b41      	ldrh	r1, [r0, #26]
   117a8:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
                    out = Some((self.x, self.y, fill));
   117ac:	6902      	ldr	r2, [r0, #16]
   117ae:	6943      	ldr	r3, [r0, #20]
   117b0:	9247      	str	r2, [sp, #284]	; 0x11c
   117b2:	9348      	str	r3, [sp, #288]	; 0x120
   117b4:	f8ad 1124 	strh.w	r1, [sp, #292]	; 0x124
   117b8:	9947      	ldr	r1, [sp, #284]	; 0x11c
   117ba:	9a48      	ldr	r2, [sp, #288]	; 0x120
   117bc:	9b49      	ldr	r3, [sp, #292]	; 0x124
   117be:	9346      	str	r3, [sp, #280]	; 0x118
   117c0:	9245      	str	r2, [sp, #276]	; 0x114
   117c2:	9144      	str	r1, [sp, #272]	; 0x110
   117c4:	2101      	movs	r1, #1
   117c6:	9143      	str	r1, [sp, #268]	; 0x10c
   117c8:	9943      	ldr	r1, [sp, #268]	; 0x10c
   117ca:	9a44      	ldr	r2, [sp, #272]	; 0x110
   117cc:	9b45      	ldr	r3, [sp, #276]	; 0x114
   117ce:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   117d2:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
   117d6:	9333      	str	r3, [sp, #204]	; 0xcc
   117d8:	9232      	str	r2, [sp, #200]	; 0xc8
   117da:	9131      	str	r1, [sp, #196]	; 0xc4
                else if let Some(fill) = self.style.fill_color {
   117dc:	e7ff      	b.n	117de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
            if self.x >= 0 && self.y >= 0 {
   117de:	e7ff      	b.n	117e0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
            self.x += 1;
   117e0:	9829      	ldr	r0, [sp, #164]	; 0xa4
   117e2:	6901      	ldr	r1, [r0, #16]
   117e4:	1c4a      	adds	r2, r1, #1
   117e6:	4613      	mov	r3, r2
   117e8:	428a      	cmp	r2, r1
   117ea:	9307      	str	r3, [sp, #28]
   117ec:	d66d      	bvs.n	118ca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5b0>
   117ee:	e7ff      	b.n	117f0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4d6>
   117f0:	9807      	ldr	r0, [sp, #28]
   117f2:	9929      	ldr	r1, [sp, #164]	; 0xa4
   117f4:	6108      	str	r0, [r1, #16]
            if self.x > self.bottom_right[0] {
   117f6:	690a      	ldr	r2, [r1, #16]
   117f8:	f101 0008 	add.w	r0, r1, #8
   117fc:	2100      	movs	r1, #0
   117fe:	9206      	str	r2, [sp, #24]
   11800:	f7fa fc7b 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11804:	9005      	str	r0, [sp, #20]
   11806:	e7ff      	b.n	11808 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4ee>
   11808:	9805      	ldr	r0, [sp, #20]
   1180a:	6801      	ldr	r1, [r0, #0]
   1180c:	9a06      	ldr	r2, [sp, #24]
   1180e:	428a      	cmp	r2, r1
   11810:	dd16      	ble.n	11840 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   11812:	e7ff      	b.n	11814 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4fa>
   11814:	2100      	movs	r1, #0
                self.x = self.top_left[0];
   11816:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11818:	f7fa fc6f 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1181c:	9004      	str	r0, [sp, #16]
   1181e:	e7ff      	b.n	11820 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x506>
   11820:	9804      	ldr	r0, [sp, #16]
   11822:	6801      	ldr	r1, [r0, #0]
   11824:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   11826:	6111      	str	r1, [r2, #16]
                self.y += 1;
   11828:	6951      	ldr	r1, [r2, #20]
   1182a:	1c4b      	adds	r3, r1, #1
   1182c:	469c      	mov	ip, r3
   1182e:	428b      	cmp	r3, r1
   11830:	f8cd c00c 	str.w	ip, [sp, #12]
   11834:	d655      	bvs.n	118e2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5c8>
   11836:	e7ff      	b.n	11838 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x51e>
   11838:	9803      	ldr	r0, [sp, #12]
   1183a:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1183c:	6148      	str	r0, [r1, #20]
            if self.x > self.bottom_right[0] {
   1183e:	e7ff      	b.n	11840 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   11840:	a831      	add	r0, sp, #196	; 0xc4
            if out.is_some() {
   11842:	f7fd ff33 	bl	f6ac <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>
   11846:	9002      	str	r0, [sp, #8]
   11848:	e7ff      	b.n	1184a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x530>
   1184a:	9802      	ldr	r0, [sp, #8]
   1184c:	07c1      	lsls	r1, r0, #31
   1184e:	2900      	cmp	r1, #0
   11850:	d101      	bne.n	11856 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53c>
   11852:	e7ff      	b.n	11854 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53a>
        let pixel = loop {
   11854:	e606      	b.n	11464 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
                break out;
   11856:	9831      	ldr	r0, [sp, #196]	; 0xc4
   11858:	9932      	ldr	r1, [sp, #200]	; 0xc8
   1185a:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   1185c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   1185e:	9330      	str	r3, [sp, #192]	; 0xc0
   11860:	922f      	str	r2, [sp, #188]	; 0xbc
   11862:	912e      	str	r1, [sp, #184]	; 0xb8
   11864:	902d      	str	r0, [sp, #180]	; 0xb4
   11866:	e5f0      	b.n	1144a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
    }
   11868:	e5ed      	b.n	11446 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   1186a:	f64c 4020 	movw	r0, #52256	; 0xcc20
   1186e:	f2c0 0001 	movt	r0, #1
   11872:	f64c 420c 	movw	r2, #52236	; 0xcc0c
   11876:	f2c0 0201 	movt	r2, #1
   1187a:	211c      	movs	r1, #28
   1187c:	f002 fa50 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11880:	defe      	udf	#254	; 0xfe
                || (self.y <= br[1] && self.y > br[1] - border_width)
   11882:	f64c 4050 	movw	r0, #52304	; 0xcc50
   11886:	f2c0 0001 	movt	r0, #1
   1188a:	f64c 423c 	movw	r2, #52284	; 0xcc3c
   1188e:	f2c0 0201 	movt	r2, #1
   11892:	2121      	movs	r1, #33	; 0x21
   11894:	f002 fa44 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11898:	defe      	udf	#254	; 0xfe
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   1189a:	f64c 4020 	movw	r0, #52256	; 0xcc20
   1189e:	f2c0 0001 	movt	r0, #1
   118a2:	f64c 4274 	movw	r2, #52340	; 0xcc74
   118a6:	f2c0 0201 	movt	r2, #1
   118aa:	211c      	movs	r1, #28
   118ac:	f002 fa38 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   118b0:	defe      	udf	#254	; 0xfe
                || (self.x <= br[0] && self.x > br[0] - border_width)
   118b2:	f64c 4050 	movw	r0, #52304	; 0xcc50
   118b6:	f2c0 0001 	movt	r0, #1
   118ba:	f64c 4284 	movw	r2, #52356	; 0xcc84
   118be:	f2c0 0201 	movt	r2, #1
   118c2:	2121      	movs	r1, #33	; 0x21
   118c4:	f002 fa2c 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   118c8:	defe      	udf	#254	; 0xfe
            self.x += 1;
   118ca:	f64c 4020 	movw	r0, #52256	; 0xcc20
   118ce:	f2c0 0001 	movt	r0, #1
   118d2:	f64c 42b4 	movw	r2, #52404	; 0xccb4
   118d6:	f2c0 0201 	movt	r2, #1
   118da:	211c      	movs	r1, #28
   118dc:	f002 fa20 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   118e0:	defe      	udf	#254	; 0xfe
                self.y += 1;
   118e2:	f64c 4020 	movw	r0, #52256	; 0xcc20
   118e6:	f2c0 0001 	movt	r0, #1
   118ea:	f64c 42c4 	movw	r2, #52420	; 0xccc4
   118ee:	f2c0 0201 	movt	r2, #1
   118f2:	211c      	movs	r1, #28
   118f4:	f002 fa14 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   118f8:	defe      	udf	#254	; 0xfe

000118fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>:
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   118fa:	b580      	push	{r7, lr}
   118fc:	b08a      	sub	sp, #40	; 0x28
   118fe:	680a      	ldr	r2, [r1, #0]
   11900:	9207      	str	r2, [sp, #28]
   11902:	684b      	ldr	r3, [r1, #4]
   11904:	9308      	str	r3, [sp, #32]
   11906:	8909      	ldrh	r1, [r1, #8]
   11908:	468c      	mov	ip, r1
   1190a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
   1190e:	9005      	str	r0, [sp, #20]
   11910:	4610      	mov	r0, r2
   11912:	4619      	mov	r1, r3
   11914:	f8cd c010 	str.w	ip, [sp, #16]
   11918:	f7fa fbac 	bl	c074 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
   1191c:	9003      	str	r0, [sp, #12]
   1191e:	9102      	str	r1, [sp, #8]
   11920:	e7ff      	b.n	11922 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x28>
   11922:	9803      	ldr	r0, [sp, #12]
   11924:	9902      	ldr	r1, [sp, #8]
   11926:	f7fa fc31 	bl	c18c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>
   1192a:	9001      	str	r0, [sp, #4]
   1192c:	9100      	str	r1, [sp, #0]
   1192e:	e7ff      	b.n	11930 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x36>
   11930:	9801      	ldr	r0, [sp, #4]
   11932:	9905      	ldr	r1, [sp, #20]
   11934:	6008      	str	r0, [r1, #0]
   11936:	9a00      	ldr	r2, [sp, #0]
   11938:	604a      	str	r2, [r1, #4]
   1193a:	9b04      	ldr	r3, [sp, #16]
   1193c:	810b      	strh	r3, [r1, #8]
   1193e:	b00a      	add	sp, #40	; 0x28
   11940:	bd80      	pop	{r7, pc}

00011942 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   11942:	b510      	push	{r4, lr}
   11944:	b08c      	sub	sp, #48	; 0x30
   11946:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1194a:	9108      	str	r1, [sp, #32]
   1194c:	9209      	str	r2, [sp, #36]	; 0x24
   1194e:	930a      	str	r3, [sp, #40]	; 0x28
   11950:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   11954:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   11958:	9004      	str	r0, [sp, #16]
   1195a:	4670      	mov	r0, lr
   1195c:	9303      	str	r3, [sp, #12]
   1195e:	9202      	str	r2, [sp, #8]
   11960:	9101      	str	r1, [sp, #4]
   11962:	f8cd c000 	str.w	ip, [sp]
   11966:	f000 f856 	bl	11a16 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   1196a:	e7ff      	b.n	1196c <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   1196c:	9801      	ldr	r0, [sp, #4]
   1196e:	9904      	ldr	r1, [sp, #16]
   11970:	6008      	str	r0, [r1, #0]
   11972:	9a02      	ldr	r2, [sp, #8]
   11974:	604a      	str	r2, [r1, #4]
   11976:	9b03      	ldr	r3, [sp, #12]
   11978:	608b      	str	r3, [r1, #8]
   1197a:	f8dd c000 	ldr.w	ip, [sp]
   1197e:	f8c1 c00c 	str.w	ip, [r1, #12]
   11982:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   11986:	f8a1 e018 	strh.w	lr, [r1, #24]
   1198a:	f8dd e014 	ldr.w	lr, [sp, #20]
   1198e:	9c06      	ldr	r4, [sp, #24]
   11990:	614c      	str	r4, [r1, #20]
   11992:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   11996:	b00c      	add	sp, #48	; 0x30
   11998:	bd10      	pop	{r4, pc}

0001199a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h542235707a00637fE>:
   1199a:	b580      	push	{r7, lr}
   1199c:	b084      	sub	sp, #16
   1199e:	4601      	mov	r1, r0
   119a0:	f88d 000f 	strb.w	r0, [sp, #15]
   119a4:	9102      	str	r1, [sp, #8]
   119a6:	f7fa fc46 	bl	c236 <_ZN95_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$u8$GT$$GT$4from17ha820ed885a85d2b3E>
   119aa:	9001      	str	r0, [sp, #4]
   119ac:	e7ff      	b.n	119ae <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h542235707a00637fE+0x14>
   119ae:	9801      	ldr	r0, [sp, #4]
   119b0:	b004      	add	sp, #16
   119b2:	bd80      	pop	{r7, pc}

000119b4 <_ZN79_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7298be2e66d2e6f3E>:
//! Styling struct to customise the look of objects.

use crate::pixelcolor::PixelColor;

/// Style properties for an object
#[derive(Debug, Copy, Clone)]
   119b4:	b580      	push	{r7, lr}
   119b6:	b08c      	sub	sp, #48	; 0x30
   119b8:	9108      	str	r1, [sp, #32]
pub struct Style<P: PixelColor> {
    /// Fill colour of the object
    ///
    /// For fonts, this is the background colour of the text
    pub fill_color: Option<P>,
   119ba:	9109      	str	r1, [sp, #36]	; 0x24

    /// Stroke (border/line) color of the object
    ///
    /// For fonts, this is the foreground colour of the text
    pub stroke_color: Option<P>,
   119bc:	1d0a      	adds	r2, r1, #4
   119be:	4613      	mov	r3, r2
   119c0:	920a      	str	r2, [sp, #40]	; 0x28

    /// Stroke width
    ///
    /// Set the stroke width for an object. Has no effect on fonts.
    pub stroke_width: u8,
   119c2:	f101 0208 	add.w	r2, r1, #8
   119c6:	4694      	mov	ip, r2
   119c8:	920b      	str	r2, [sp, #44]	; 0x2c
    pub fill_color: Option<P>,
   119ca:	9007      	str	r0, [sp, #28]
   119cc:	4608      	mov	r0, r1
   119ce:	9306      	str	r3, [sp, #24]
   119d0:	f8cd c014 	str.w	ip, [sp, #20]
   119d4:	f7fd ff26 	bl	f824 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h22ceb477e38723abE>
   119d8:	9004      	str	r0, [sp, #16]
   119da:	9103      	str	r1, [sp, #12]
   119dc:	e7ff      	b.n	119de <_ZN79_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7298be2e66d2e6f3E+0x2a>
    pub stroke_color: Option<P>,
   119de:	9806      	ldr	r0, [sp, #24]
   119e0:	f7fd ff20 	bl	f824 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h22ceb477e38723abE>
   119e4:	9002      	str	r0, [sp, #8]
   119e6:	9101      	str	r1, [sp, #4]
   119e8:	e7ff      	b.n	119ea <_ZN79_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7298be2e66d2e6f3E+0x36>
    pub stroke_width: u8,
   119ea:	9805      	ldr	r0, [sp, #20]
   119ec:	f7ff f9e5 	bl	10dba <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17hafb8e34694f2826dE>
   119f0:	9000      	str	r0, [sp, #0]
   119f2:	e7ff      	b.n	119f4 <_ZN79_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h7298be2e66d2e6f3E+0x40>
#[derive(Debug, Copy, Clone)]
   119f4:	9804      	ldr	r0, [sp, #16]
   119f6:	9907      	ldr	r1, [sp, #28]
   119f8:	8008      	strh	r0, [r1, #0]
   119fa:	9a03      	ldr	r2, [sp, #12]
   119fc:	804a      	strh	r2, [r1, #2]
   119fe:	9b02      	ldr	r3, [sp, #8]
   11a00:	808b      	strh	r3, [r1, #4]
   11a02:	f8dd c004 	ldr.w	ip, [sp, #4]
   11a06:	f8a1 c006 	strh.w	ip, [r1, #6]
   11a0a:	f8dd e000 	ldr.w	lr, [sp]
   11a0e:	f881 e008 	strb.w	lr, [r1, #8]
   11a12:	b00c      	add	sp, #48	; 0x30
   11a14:	bd80      	pop	{r7, pc}

00011a16 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   11a16:	b082      	sub	sp, #8
   11a18:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   11a1a:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   11a1e:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   11a22:	f8bd 1000 	ldrh.w	r1, [sp]
   11a26:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   11a2a:	8001      	strh	r1, [r0, #0]
   11a2c:	8042      	strh	r2, [r0, #2]
   11a2e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   11a32:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   11a36:	8081      	strh	r1, [r0, #4]
   11a38:	80c2      	strh	r2, [r0, #6]
   11a3a:	2101      	movs	r1, #1
   11a3c:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   11a3e:	b002      	add	sp, #8
   11a40:	4770      	bx	lr

00011a42 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>:
   11a42:	b082      	sub	sp, #8
   11a44:	9001      	str	r0, [sp, #4]
   11a46:	9000      	str	r0, [sp, #0]
   11a48:	9800      	ldr	r0, [sp, #0]
   11a4a:	b002      	add	sp, #8
   11a4c:	4770      	bx	lr

00011a4e <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>:
   11a4e:	b081      	sub	sp, #4
   11a50:	9000      	str	r0, [sp, #0]
   11a52:	b001      	add	sp, #4
   11a54:	4770      	bx	lr

00011a56 <_ZN84_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..clone..Clone$GT$5clone17h0724d1c23a2b4d0dE>:
#[derive(Debug, Clone, Copy, PartialEq)]
   11a56:	b081      	sub	sp, #4
   11a58:	9000      	str	r0, [sp, #0]
   11a5a:	8800      	ldrh	r0, [r0, #0]
   11a5c:	b001      	add	sp, #4
   11a5e:	4770      	bx	lr

00011a60 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
   11a60:	b084      	sub	sp, #16
   11a62:	460a      	mov	r2, r1
   11a64:	4603      	mov	r3, r0
   11a66:	9103      	str	r1, [sp, #12]
   11a68:	9002      	str	r0, [sp, #8]
   11a6a:	b004      	add	sp, #16
   11a6c:	4770      	bx	lr

00011a6e <_ZN22piet_embedded_graphics7display15draw_to_display17h2860069dec5245b0E>:
pub fn draw_to_display<T>(item: T)
   11a6e:	b570      	push	{r4, r5, r6, lr}
   11a70:	b088      	sub	sp, #32
   11a72:	a902      	add	r1, sp, #8
        item
   11a74:	460a      	mov	r2, r1
   11a76:	e890 5078 	ldmia.w	r0, {r3, r4, r5, r6, ip, lr}
   11a7a:	e882 5078 	stmia.w	r2, {r3, r4, r5, r6, ip, lr}
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
   11a7e:	f240 1040 	movw	r0, #320	; 0x140
   11a82:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11a86:	f001 fab1 	bl	12fec <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E>
   11a8a:	9001      	str	r0, [sp, #4]
   11a8c:	e7ff      	b.n	11a8e <_ZN22piet_embedded_graphics7display15draw_to_display17h2860069dec5245b0E+0x20>
   11a8e:	9801      	ldr	r0, [sp, #4]
   11a90:	f000 0001 	and.w	r0, r0, #1
   11a94:	f64c 2187 	movw	r1, #51847	; 0xca87
   11a98:	f2c0 0101 	movt	r1, #1
   11a9c:	f64c 5338 	movw	r3, #52536	; 0xcd38
   11aa0:	f2c0 0301 	movt	r3, #1
   11aa4:	2210      	movs	r2, #16
   11aa6:	f7fe fb35 	bl	10114 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   11aaa:	e7ff      	b.n	11aac <_ZN22piet_embedded_graphics7display15draw_to_display17h2860069dec5245b0E+0x3e>
}
   11aac:	b008      	add	sp, #32
   11aae:	bd70      	pop	{r4, r5, r6, pc}

00011ab0 <_ZN22piet_embedded_graphics7display15draw_to_display17h34594f1d8e74e802E>:
pub fn draw_to_display<T>(item: T)
   11ab0:	b510      	push	{r4, lr}
   11ab2:	b088      	sub	sp, #32
   11ab4:	a901      	add	r1, sp, #4
        item
   11ab6:	460a      	mov	r2, r1
   11ab8:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
   11abc:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
   11ac0:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
   11ac4:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
   11ac8:	f240 1040 	movw	r0, #320	; 0x140
   11acc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11ad0:	f001 f9af 	bl	12e32 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E>
   11ad4:	9000      	str	r0, [sp, #0]
   11ad6:	e7ff      	b.n	11ad8 <_ZN22piet_embedded_graphics7display15draw_to_display17h34594f1d8e74e802E+0x28>
   11ad8:	9800      	ldr	r0, [sp, #0]
   11ada:	f000 0001 	and.w	r0, r0, #1
   11ade:	f64c 2187 	movw	r1, #51847	; 0xca87
   11ae2:	f2c0 0101 	movt	r1, #1
   11ae6:	f64c 5338 	movw	r3, #52536	; 0xcd38
   11aea:	f2c0 0301 	movt	r3, #1
   11aee:	2210      	movs	r2, #16
   11af0:	f7fe fb10 	bl	10114 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   11af4:	e7ff      	b.n	11af6 <_ZN22piet_embedded_graphics7display15draw_to_display17h34594f1d8e74e802E+0x46>
}
   11af6:	b008      	add	sp, #32
   11af8:	bd10      	pop	{r4, pc}

00011afa <_ZN4core3fmt9Arguments6new_v117heb928dedbf3bbf0bE>:
   11afa:	b580      	push	{r7, lr}
   11afc:	b086      	sub	sp, #24
   11afe:	f8dd c020 	ldr.w	ip, [sp, #32]
   11b02:	9102      	str	r1, [sp, #8]
   11b04:	9203      	str	r2, [sp, #12]
   11b06:	9304      	str	r3, [sp, #16]
   11b08:	f8cd c014 	str.w	ip, [sp, #20]
   11b0c:	f04f 0e00 	mov.w	lr, #0
   11b10:	f8cd e004 	str.w	lr, [sp, #4]
   11b14:	f8cd e000 	str.w	lr, [sp]
   11b18:	f8cd e000 	str.w	lr, [sp]
   11b1c:	6001      	str	r1, [r0, #0]
   11b1e:	6042      	str	r2, [r0, #4]
   11b20:	9900      	ldr	r1, [sp, #0]
   11b22:	9a01      	ldr	r2, [sp, #4]
   11b24:	6081      	str	r1, [r0, #8]
   11b26:	60c2      	str	r2, [r0, #12]
   11b28:	6103      	str	r3, [r0, #16]
   11b2a:	f8c0 c014 	str.w	ip, [r0, #20]
   11b2e:	b006      	add	sp, #24
   11b30:	bd80      	pop	{r7, pc}

00011b32 <_ZN116_$LT$embedded_graphics..primitives..circle..Circle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h24faeeb9f54e81acE>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = CircleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   11b32:	b580      	push	{r7, lr}
        (&self).into_iter()
   11b34:	f000 f812 	bl	11b5c <_ZN120_$LT$$RF$embedded_graphics..primitives..circle..Circle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha04ece643e22d5bbE>
   11b38:	e7ff      	b.n	11b3a <_ZN116_$LT$embedded_graphics..primitives..circle..Circle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h24faeeb9f54e81acE+0x8>
    }
   11b3a:	bd80      	pop	{r7, pc}

00011b3c <_ZN119_$LT$embedded_graphics..primitives..circle..Circle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17h16ccda9e1b3b6eadE>:
    fn fill(mut self, color: Option<C>) -> Self {
   11b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11b3e:	b081      	sub	sp, #4
   11b40:	469c      	mov	ip, r3
   11b42:	4696      	mov	lr, r2
   11b44:	f8ad 2000 	strh.w	r2, [sp]
   11b48:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   11b4c:	818a      	strh	r2, [r1, #12]
   11b4e:	81cb      	strh	r3, [r1, #14]
        self
   11b50:	e891 00fc 	ldmia.w	r1, {r2, r3, r4, r5, r6, r7}
   11b54:	e880 00fc 	stmia.w	r0, {r2, r3, r4, r5, r6, r7}
    }
   11b58:	b001      	add	sp, #4
   11b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011b5c <_ZN120_$LT$$RF$embedded_graphics..primitives..circle..Circle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha04ece643e22d5bbE>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = CircleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   11b5c:	b5b0      	push	{r4, r5, r7, lr}
   11b5e:	b08c      	sub	sp, #48	; 0x30
   11b60:	910b      	str	r1, [sp, #44]	; 0x2c
        CircleIterator {
            center: self.center,
   11b62:	680a      	ldr	r2, [r1, #0]
   11b64:	684b      	ldr	r3, [r1, #4]
            radius: self.radius,
   11b66:	f8d1 c008 	ldr.w	ip, [r1, #8]
            style: self.style,
   11b6a:	f8b1 e014 	ldrh.w	lr, [r1, #20]
   11b6e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
   11b72:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   11b76:	690c      	ldr	r4, [r1, #16]
   11b78:	9409      	str	r4, [sp, #36]	; 0x24
   11b7a:	f8cd e020 	str.w	lr, [sp, #32]
            x: -(self.radius as i32),
   11b7e:	f8d1 e008 	ldr.w	lr, [r1, #8]
   11b82:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   11b86:	9107      	str	r1, [sp, #28]
   11b88:	9006      	str	r0, [sp, #24]
   11b8a:	9205      	str	r2, [sp, #20]
   11b8c:	9304      	str	r3, [sp, #16]
   11b8e:	f8cd c00c 	str.w	ip, [sp, #12]
   11b92:	f8cd e008 	str.w	lr, [sp, #8]
   11b96:	d023      	beq.n	11be0 <_ZN120_$LT$$RF$embedded_graphics..primitives..circle..Circle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha04ece643e22d5bbE+0x84>
   11b98:	e7ff      	b.n	11b9a <_ZN120_$LT$$RF$embedded_graphics..primitives..circle..Circle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha04ece643e22d5bbE+0x3e>
   11b9a:	9802      	ldr	r0, [sp, #8]
   11b9c:	4241      	negs	r1, r0
            y: -(self.radius as i32),
   11b9e:	9a07      	ldr	r2, [sp, #28]
   11ba0:	6893      	ldr	r3, [r2, #8]
   11ba2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   11ba6:	9101      	str	r1, [sp, #4]
   11ba8:	9300      	str	r3, [sp, #0]
   11baa:	d025      	beq.n	11bf8 <_ZN120_$LT$$RF$embedded_graphics..primitives..circle..Circle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha04ece643e22d5bbE+0x9c>
   11bac:	e7ff      	b.n	11bae <_ZN120_$LT$$RF$embedded_graphics..primitives..circle..Circle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17ha04ece643e22d5bbE+0x52>
   11bae:	9800      	ldr	r0, [sp, #0]
   11bb0:	4241      	negs	r1, r0
        CircleIterator {
   11bb2:	9a05      	ldr	r2, [sp, #20]
   11bb4:	9b06      	ldr	r3, [sp, #24]
   11bb6:	601a      	str	r2, [r3, #0]
   11bb8:	f8dd c010 	ldr.w	ip, [sp, #16]
   11bbc:	f8c3 c004 	str.w	ip, [r3, #4]
   11bc0:	f8dd e00c 	ldr.w	lr, [sp, #12]
   11bc4:	f8c3 e008 	str.w	lr, [r3, #8]
   11bc8:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
   11bcc:	839c      	strh	r4, [r3, #28]
   11bce:	9c08      	ldr	r4, [sp, #32]
   11bd0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   11bd2:	619d      	str	r5, [r3, #24]
   11bd4:	615c      	str	r4, [r3, #20]
   11bd6:	9c01      	ldr	r4, [sp, #4]
   11bd8:	60dc      	str	r4, [r3, #12]
   11bda:	6119      	str	r1, [r3, #16]
        }
    }
   11bdc:	b00c      	add	sp, #48	; 0x30
   11bde:	bdb0      	pop	{r4, r5, r7, pc}
            x: -(self.radius as i32),
   11be0:	f64c 50d0 	movw	r0, #52688	; 0xcdd0
   11be4:	f2c0 0001 	movt	r0, #1
   11be8:	f64c 52b8 	movw	r2, #52664	; 0xcdb8
   11bec:	f2c0 0201 	movt	r2, #1
   11bf0:	211f      	movs	r1, #31
   11bf2:	f002 f895 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11bf6:	defe      	udf	#254	; 0xfe
            y: -(self.radius as i32),
   11bf8:	f64c 50d0 	movw	r0, #52688	; 0xcdd0
   11bfc:	f2c0 0001 	movt	r0, #1
   11c00:	f64c 52f0 	movw	r2, #52720	; 0xcdf0
   11c04:	f2c0 0201 	movt	r2, #1
   11c08:	211f      	movs	r1, #31
   11c0a:	f002 f889 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11c0e:	defe      	udf	#254	; 0xfe

00011c10 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E>:
    C: PixelColor,
{
    type Item = Pixel<C>;

    // https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles
    fn next(&mut self) -> Option<Self::Item> {
   11c10:	b580      	push	{r7, lr}
   11c12:	b0c8      	sub	sp, #288	; 0x120
   11c14:	913d      	str	r1, [sp, #244]	; 0xf4
        // If border or stroke colour is `None`, treat entire object as transparent and exit early
        if self.style.stroke_color.is_none() && self.style.fill_color.is_none() {
   11c16:	f101 0218 	add.w	r2, r1, #24
   11c1a:	9021      	str	r0, [sp, #132]	; 0x84
   11c1c:	4610      	mov	r0, r2
   11c1e:	9120      	str	r1, [sp, #128]	; 0x80
   11c20:	f7fd fd26 	bl	f670 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   11c24:	901f      	str	r0, [sp, #124]	; 0x7c
   11c26:	e013      	b.n	11c50 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x40>
   11c28:	2001      	movs	r0, #1
   11c2a:	f88d 008b 	strb.w	r0, [sp, #139]	; 0x8b
   11c2e:	e009      	b.n	11c44 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x34>
   11c30:	2000      	movs	r0, #0
   11c32:	f88d 008b 	strb.w	r0, [sp, #139]	; 0x8b
   11c36:	e005      	b.n	11c44 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x34>
   11c38:	9820      	ldr	r0, [sp, #128]	; 0x80
   11c3a:	3014      	adds	r0, #20
   11c3c:	f7fd fd18 	bl	f670 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   11c40:	901e      	str	r0, [sp, #120]	; 0x78
   11c42:	e00a      	b.n	11c5a <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x4a>
   11c44:	f89d 008b 	ldrb.w	r0, [sp, #139]	; 0x8b
   11c48:	07c0      	lsls	r0, r0, #31
   11c4a:	2800      	cmp	r0, #0
   11c4c:	d110      	bne.n	11c70 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x60>
   11c4e:	e009      	b.n	11c64 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x54>
   11c50:	981f      	ldr	r0, [sp, #124]	; 0x7c
   11c52:	07c1      	lsls	r1, r0, #31
   11c54:	2900      	cmp	r1, #0
   11c56:	d1ef      	bne.n	11c38 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x28>
   11c58:	e7ea      	b.n	11c30 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x20>
   11c5a:	981e      	ldr	r0, [sp, #120]	; 0x78
   11c5c:	07c1      	lsls	r1, r0, #31
   11c5e:	2900      	cmp	r1, #0
   11c60:	d1e2      	bne.n	11c28 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x18>
   11c62:	e7e5      	b.n	11c30 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x20>
   11c64:	2100      	movs	r1, #0
            return None;
        }

        let cx = self.center[0];
   11c66:	9820      	ldr	r0, [sp, #128]	; 0x80
   11c68:	f7fa fa47 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11c6c:	901d      	str	r0, [sp, #116]	; 0x74
   11c6e:	e005      	b.n	11c7c <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x6c>
   11c70:	2000      	movs	r0, #0
            return None;
   11c72:	9921      	ldr	r1, [sp, #132]	; 0x84
   11c74:	6008      	str	r0, [r1, #0]
   11c76:	e7ff      	b.n	11c78 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x68>
                }
            }
        };

        item.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
    }
   11c78:	b048      	add	sp, #288	; 0x120
   11c7a:	bd80      	pop	{r7, pc}
        let cx = self.center[0];
   11c7c:	981d      	ldr	r0, [sp, #116]	; 0x74
   11c7e:	6801      	ldr	r1, [r0, #0]
   11c80:	913e      	str	r1, [sp, #248]	; 0xf8
   11c82:	2201      	movs	r2, #1
        let cy = self.center[1];
   11c84:	9820      	ldr	r0, [sp, #128]	; 0x80
   11c86:	911c      	str	r1, [sp, #112]	; 0x70
   11c88:	4611      	mov	r1, r2
   11c8a:	f7fa fa36 	bl	c0fa <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11c8e:	901b      	str	r0, [sp, #108]	; 0x6c
   11c90:	e7ff      	b.n	11c92 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x82>
   11c92:	981b      	ldr	r0, [sp, #108]	; 0x6c
   11c94:	6801      	ldr	r1, [r0, #0]
   11c96:	913f      	str	r1, [sp, #252]	; 0xfc
        let radius = self.radius as i32 - self.style.stroke_width as i32 + 1;
   11c98:	9a20      	ldr	r2, [sp, #128]	; 0x80
   11c9a:	6893      	ldr	r3, [r2, #8]
   11c9c:	f892 c01c 	ldrb.w	ip, [r2, #28]
   11ca0:	eba3 0e0c 	sub.w	lr, r3, ip
   11ca4:	4563      	cmp	r3, ip
   11ca6:	911a      	str	r1, [sp, #104]	; 0x68
   11ca8:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
   11cac:	f180 819d 	bvs.w	11fea <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x3da>
   11cb0:	e7ff      	b.n	11cb2 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0xa2>
   11cb2:	9819      	ldr	r0, [sp, #100]	; 0x64
   11cb4:	1c41      	adds	r1, r0, #1
   11cb6:	460a      	mov	r2, r1
   11cb8:	4281      	cmp	r1, r0
   11cba:	9218      	str	r2, [sp, #96]	; 0x60
   11cbc:	f180 81a1 	bvs.w	12002 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x3f2>
   11cc0:	e7ff      	b.n	11cc2 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0xb2>
   11cc2:	9818      	ldr	r0, [sp, #96]	; 0x60
   11cc4:	9040      	str	r0, [sp, #256]	; 0x100
        let outer_radius = self.radius as i32;
   11cc6:	9920      	ldr	r1, [sp, #128]	; 0x80
   11cc8:	688a      	ldr	r2, [r1, #8]
   11cca:	9241      	str	r2, [sp, #260]	; 0x104
        let radius_sq = radius * radius;
   11ccc:	fb00 f300 	mul.w	r3, r0, r0
   11cd0:	fb80 ce00 	smull	ip, lr, r0, r0
   11cd4:	ebbe 7fec 	cmp.w	lr, ip, asr #31
   11cd8:	9217      	str	r2, [sp, #92]	; 0x5c
   11cda:	9316      	str	r3, [sp, #88]	; 0x58
   11cdc:	f040 819d 	bne.w	1201a <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x40a>
   11ce0:	e7ff      	b.n	11ce2 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0xd2>
   11ce2:	9816      	ldr	r0, [sp, #88]	; 0x58
   11ce4:	9042      	str	r0, [sp, #264]	; 0x108
        let outer_radius_sq = outer_radius * outer_radius;
   11ce6:	9917      	ldr	r1, [sp, #92]	; 0x5c
   11ce8:	fb01 f201 	mul.w	r2, r1, r1
   11cec:	fb81 3c01 	smull	r3, ip, r1, r1
   11cf0:	ebbc 7fe3 	cmp.w	ip, r3, asr #31
   11cf4:	9215      	str	r2, [sp, #84]	; 0x54
   11cf6:	f040 819c 	bne.w	12032 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x422>
   11cfa:	e7ff      	b.n	11cfc <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0xec>
   11cfc:	9815      	ldr	r0, [sp, #84]	; 0x54
   11cfe:	9043      	str	r0, [sp, #268]	; 0x10c
        let item = loop {
   11d00:	e7ff      	b.n	11d02 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0xf2>
            let tx = self.x;
   11d02:	9820      	ldr	r0, [sp, #128]	; 0x80
   11d04:	68c1      	ldr	r1, [r0, #12]
   11d06:	9144      	str	r1, [sp, #272]	; 0x110
            let ty = self.y;
   11d08:	6902      	ldr	r2, [r0, #16]
   11d0a:	9245      	str	r2, [sp, #276]	; 0x114
            let len = tx * tx + ty * ty;
   11d0c:	fb01 f301 	mul.w	r3, r1, r1
   11d10:	fb81 ce01 	smull	ip, lr, r1, r1
   11d14:	ebbe 7fec 	cmp.w	lr, ip, asr #31
   11d18:	9114      	str	r1, [sp, #80]	; 0x50
   11d1a:	9213      	str	r2, [sp, #76]	; 0x4c
   11d1c:	9312      	str	r3, [sp, #72]	; 0x48
   11d1e:	f040 8194 	bne.w	1204a <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x43a>
   11d22:	e7ff      	b.n	11d24 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x114>
   11d24:	9813      	ldr	r0, [sp, #76]	; 0x4c
   11d26:	fb00 f100 	mul.w	r1, r0, r0
   11d2a:	fb80 2300 	smull	r2, r3, r0, r0
   11d2e:	ebb3 7fe2 	cmp.w	r3, r2, asr #31
   11d32:	9111      	str	r1, [sp, #68]	; 0x44
   11d34:	f040 8195 	bne.w	12062 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x452>
   11d38:	e7ff      	b.n	11d3a <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x12a>
   11d3a:	9812      	ldr	r0, [sp, #72]	; 0x48
   11d3c:	9911      	ldr	r1, [sp, #68]	; 0x44
   11d3e:	1842      	adds	r2, r0, r1
   11d40:	4613      	mov	r3, r2
   11d42:	4282      	cmp	r2, r0
   11d44:	9310      	str	r3, [sp, #64]	; 0x40
   11d46:	f180 8198 	bvs.w	1207a <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x46a>
   11d4a:	e7ff      	b.n	11d4c <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x13c>
   11d4c:	9810      	ldr	r0, [sp, #64]	; 0x40
   11d4e:	9046      	str	r0, [sp, #280]	; 0x118
            let is_border = len > radius_sq - radius && len < outer_radius_sq + radius;
   11d50:	9916      	ldr	r1, [sp, #88]	; 0x58
   11d52:	9a18      	ldr	r2, [sp, #96]	; 0x60
   11d54:	1a8b      	subs	r3, r1, r2
   11d56:	4291      	cmp	r1, r2
   11d58:	930f      	str	r3, [sp, #60]	; 0x3c
   11d5a:	f180 819a 	bvs.w	12092 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x482>
   11d5e:	e021      	b.n	11da4 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x194>
   11d60:	2001      	movs	r0, #1
   11d62:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
   11d66:	e00c      	b.n	11d82 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x172>
   11d68:	2000      	movs	r0, #0
   11d6a:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
   11d6e:	e008      	b.n	11d82 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x172>
   11d70:	9815      	ldr	r0, [sp, #84]	; 0x54
   11d72:	9918      	ldr	r1, [sp, #96]	; 0x60
   11d74:	1842      	adds	r2, r0, r1
   11d76:	4613      	mov	r3, r2
   11d78:	4282      	cmp	r2, r0
   11d7a:	930e      	str	r3, [sp, #56]	; 0x38
   11d7c:	f180 8195 	bvs.w	120aa <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x49a>
   11d80:	e015      	b.n	11dae <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x19e>
   11d82:	2000      	movs	r0, #0
            let is_fill = len <= outer_radius_sq;
   11d84:	9910      	ldr	r1, [sp, #64]	; 0x40
   11d86:	9a15      	ldr	r2, [sp, #84]	; 0x54
   11d88:	4291      	cmp	r1, r2
   11d8a:	bfd8      	it	le
   11d8c:	2001      	movle	r0, #1
   11d8e:	4603      	mov	r3, r0
   11d90:	f88d 011f 	strb.w	r0, [sp, #287]	; 0x11f
            let item = if is_border && self.style.stroke_color.is_some() {
   11d94:	f89d 009f 	ldrb.w	r0, [sp, #159]	; 0x9f
   11d98:	ea4f 70c0 	mov.w	r0, r0, lsl #31
   11d9c:	2800      	cmp	r0, #0
   11d9e:	930d      	str	r3, [sp, #52]	; 0x34
   11da0:	d112      	bne.n	11dc8 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x1b8>
   11da2:	e00d      	b.n	11dc0 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x1b0>
            let is_border = len > radius_sq - radius && len < outer_radius_sq + radius;
   11da4:	9810      	ldr	r0, [sp, #64]	; 0x40
   11da6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11da8:	4288      	cmp	r0, r1
   11daa:	dce1      	bgt.n	11d70 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x160>
   11dac:	e7dc      	b.n	11d68 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x158>
   11dae:	9810      	ldr	r0, [sp, #64]	; 0x40
   11db0:	990e      	ldr	r1, [sp, #56]	; 0x38
   11db2:	4288      	cmp	r0, r1
   11db4:	dbd4      	blt.n	11d60 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x150>
   11db6:	e7d7      	b.n	11d68 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x158>
   11db8:	2001      	movs	r0, #1
            let item = if is_border && self.style.stroke_color.is_some() {
   11dba:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   11dbe:	e009      	b.n	11dd4 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x1c4>
   11dc0:	2000      	movs	r0, #0
   11dc2:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   11dc6:	e005      	b.n	11dd4 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x1c4>
   11dc8:	9820      	ldr	r0, [sp, #128]	; 0x80
   11dca:	3018      	adds	r0, #24
   11dcc:	f7fd fc80 	bl	f6d0 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   11dd0:	900c      	str	r0, [sp, #48]	; 0x30
   11dd2:	e005      	b.n	11de0 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x1d0>
   11dd4:	f89d 00b3 	ldrb.w	r0, [sp, #179]	; 0xb3
   11dd8:	07c0      	lsls	r0, r0, #31
   11dda:	2800      	cmp	r0, #0
   11ddc:	d10a      	bne.n	11df4 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x1e4>
   11dde:	e004      	b.n	11dea <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x1da>
   11de0:	980c      	ldr	r0, [sp, #48]	; 0x30
   11de2:	07c1      	lsls	r1, r0, #31
   11de4:	2900      	cmp	r1, #0
   11de6:	d1e7      	bne.n	11db8 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x1a8>
   11de8:	e7ea      	b.n	11dc0 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x1b0>
            } else if is_fill && self.style.fill_color.is_some() {
   11dea:	980d      	ldr	r0, [sp, #52]	; 0x34
   11dec:	07c1      	lsls	r1, r0, #31
   11dee:	2900      	cmp	r1, #0
   11df0:	d140      	bne.n	11e74 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x264>
   11df2:	e03b      	b.n	11e6c <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x25c>
                    cx + tx,
   11df4:	981c      	ldr	r0, [sp, #112]	; 0x70
   11df6:	9914      	ldr	r1, [sp, #80]	; 0x50
   11df8:	1842      	adds	r2, r0, r1
   11dfa:	4613      	mov	r3, r2
   11dfc:	4282      	cmp	r2, r0
   11dfe:	930b      	str	r3, [sp, #44]	; 0x2c
   11e00:	f180 815f 	bvs.w	120c2 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x4b2>
   11e04:	e7ff      	b.n	11e06 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x1f6>
                    cy + ty,
   11e06:	981a      	ldr	r0, [sp, #104]	; 0x68
   11e08:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11e0a:	1842      	adds	r2, r0, r1
   11e0c:	4613      	mov	r3, r2
   11e0e:	4282      	cmp	r2, r0
   11e10:	930a      	str	r3, [sp, #40]	; 0x28
   11e12:	f180 8162 	bvs.w	120da <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x4ca>
   11e16:	e7ff      	b.n	11e18 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x208>
                    self.style.stroke_color.expect("Border color not defined"),
   11e18:	9820      	ldr	r0, [sp, #128]	; 0x80
   11e1a:	8b41      	ldrh	r1, [r0, #26]
   11e1c:	8b00      	ldrh	r0, [r0, #24]
   11e1e:	f64c 721c 	movw	r2, #53020	; 0xcf1c
   11e22:	f2c0 0201 	movt	r2, #1
   11e26:	466b      	mov	r3, sp
   11e28:	601a      	str	r2, [r3, #0]
   11e2a:	f64c 7204 	movw	r2, #52996	; 0xcf04
   11e2e:	f2c0 0201 	movt	r2, #1
   11e32:	2318      	movs	r3, #24
   11e34:	f7fd fba0 	bl	f578 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>
   11e38:	9009      	str	r0, [sp, #36]	; 0x24
   11e3a:	e7ff      	b.n	11e3c <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x22c>
                Some((
   11e3c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11e3e:	902d      	str	r0, [sp, #180]	; 0xb4
   11e40:	990a      	ldr	r1, [sp, #40]	; 0x28
   11e42:	912e      	str	r1, [sp, #184]	; 0xb8
   11e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11e46:	f8ad 20bc 	strh.w	r2, [sp, #188]	; 0xbc
   11e4a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   11e4c:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   11e50:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
   11e54:	f8cd e0ac 	str.w	lr, [sp, #172]	; 0xac
   11e58:	f8cd c0a8 	str.w	ip, [sp, #168]	; 0xa8
   11e5c:	9329      	str	r3, [sp, #164]	; 0xa4
   11e5e:	2301      	movs	r3, #1
   11e60:	9328      	str	r3, [sp, #160]	; 0xa0
            let item = if is_border && self.style.stroke_color.is_some() {
   11e62:	e054      	b.n	11f0e <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x2fe>
   11e64:	2001      	movs	r0, #1
            } else if is_fill && self.style.fill_color.is_some() {
   11e66:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
   11e6a:	e009      	b.n	11e80 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x270>
   11e6c:	2000      	movs	r0, #0
   11e6e:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
   11e72:	e005      	b.n	11e80 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x270>
   11e74:	9820      	ldr	r0, [sp, #128]	; 0x80
   11e76:	3014      	adds	r0, #20
   11e78:	f7fd fc2a 	bl	f6d0 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   11e7c:	9008      	str	r0, [sp, #32]
   11e7e:	e005      	b.n	11e8c <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x27c>
   11e80:	f89d 00c3 	ldrb.w	r0, [sp, #195]	; 0xc3
   11e84:	07c0      	lsls	r0, r0, #31
   11e86:	2800      	cmp	r0, #0
   11e88:	d108      	bne.n	11e9c <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x28c>
   11e8a:	e004      	b.n	11e96 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x286>
   11e8c:	9808      	ldr	r0, [sp, #32]
   11e8e:	07c1      	lsls	r1, r0, #31
   11e90:	2900      	cmp	r1, #0
   11e92:	d1e7      	bne.n	11e64 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x254>
   11e94:	e7ea      	b.n	11e6c <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x25c>
   11e96:	2000      	movs	r0, #0
                None
   11e98:	9028      	str	r0, [sp, #160]	; 0xa0
            } else if is_fill && self.style.fill_color.is_some() {
   11e9a:	e037      	b.n	11f0c <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x2fc>
                    cx + tx,
   11e9c:	981c      	ldr	r0, [sp, #112]	; 0x70
   11e9e:	9914      	ldr	r1, [sp, #80]	; 0x50
   11ea0:	1842      	adds	r2, r0, r1
   11ea2:	4613      	mov	r3, r2
   11ea4:	4282      	cmp	r2, r0
   11ea6:	9307      	str	r3, [sp, #28]
   11ea8:	f180 8123 	bvs.w	120f2 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x4e2>
   11eac:	e7ff      	b.n	11eae <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x29e>
                    cy + ty,
   11eae:	981a      	ldr	r0, [sp, #104]	; 0x68
   11eb0:	9913      	ldr	r1, [sp, #76]	; 0x4c
   11eb2:	1842      	adds	r2, r0, r1
   11eb4:	4613      	mov	r3, r2
   11eb6:	4282      	cmp	r2, r0
   11eb8:	9306      	str	r3, [sp, #24]
   11eba:	f180 8126 	bvs.w	1210a <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x4fa>
   11ebe:	e7ff      	b.n	11ec0 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x2b0>
                    self.style.fill_color.expect("Fill color not defined"),
   11ec0:	9820      	ldr	r0, [sp, #128]	; 0x80
   11ec2:	8ac1      	ldrh	r1, [r0, #22]
   11ec4:	8a80      	ldrh	r0, [r0, #20]
   11ec6:	f64c 7264 	movw	r2, #53092	; 0xcf64
   11eca:	f2c0 0201 	movt	r2, #1
   11ece:	466b      	mov	r3, sp
   11ed0:	601a      	str	r2, [r3, #0]
   11ed2:	f64c 724c 	movw	r2, #53068	; 0xcf4c
   11ed6:	f2c0 0201 	movt	r2, #1
   11eda:	2316      	movs	r3, #22
   11edc:	f7fd fb4c 	bl	f578 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>
   11ee0:	9005      	str	r0, [sp, #20]
   11ee2:	e7ff      	b.n	11ee4 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x2d4>
                Some((
   11ee4:	9807      	ldr	r0, [sp, #28]
   11ee6:	9031      	str	r0, [sp, #196]	; 0xc4
   11ee8:	9906      	ldr	r1, [sp, #24]
   11eea:	9132      	str	r1, [sp, #200]	; 0xc8
   11eec:	9a05      	ldr	r2, [sp, #20]
   11eee:	f8ad 20cc 	strh.w	r2, [sp, #204]	; 0xcc
   11ef2:	9b31      	ldr	r3, [sp, #196]	; 0xc4
   11ef4:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
   11ef8:	f8dd e0cc 	ldr.w	lr, [sp, #204]	; 0xcc
   11efc:	f8cd e0ac 	str.w	lr, [sp, #172]	; 0xac
   11f00:	f8cd c0a8 	str.w	ip, [sp, #168]	; 0xa8
   11f04:	9329      	str	r3, [sp, #164]	; 0xa4
   11f06:	2301      	movs	r3, #1
   11f08:	9328      	str	r3, [sp, #160]	; 0xa0
            } else if is_fill && self.style.fill_color.is_some() {
   11f0a:	e7ff      	b.n	11f0c <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x2fc>
            let item = if is_border && self.style.stroke_color.is_some() {
   11f0c:	e7ff      	b.n	11f0e <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x2fe>
            self.x += 1;
   11f0e:	9820      	ldr	r0, [sp, #128]	; 0x80
   11f10:	68c1      	ldr	r1, [r0, #12]
   11f12:	1c4a      	adds	r2, r1, #1
   11f14:	4613      	mov	r3, r2
   11f16:	428a      	cmp	r2, r1
   11f18:	9304      	str	r3, [sp, #16]
   11f1a:	f180 8102 	bvs.w	12122 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x512>
   11f1e:	e7ff      	b.n	11f20 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x310>
   11f20:	9804      	ldr	r0, [sp, #16]
   11f22:	9920      	ldr	r1, [sp, #128]	; 0x80
   11f24:	60c8      	str	r0, [r1, #12]
            if self.x > self.radius as i32 {
   11f26:	688a      	ldr	r2, [r1, #8]
   11f28:	68cb      	ldr	r3, [r1, #12]
   11f2a:	4293      	cmp	r3, r2
   11f2c:	dd19      	ble.n	11f62 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x352>
   11f2e:	e7ff      	b.n	11f30 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x320>
                self.x = -(self.radius as i32);
   11f30:	9820      	ldr	r0, [sp, #128]	; 0x80
   11f32:	6881      	ldr	r1, [r0, #8]
   11f34:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   11f38:	9103      	str	r1, [sp, #12]
   11f3a:	f000 80fe 	beq.w	1213a <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x52a>
   11f3e:	e7ff      	b.n	11f40 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x330>
   11f40:	9803      	ldr	r0, [sp, #12]
   11f42:	4241      	negs	r1, r0
   11f44:	9a20      	ldr	r2, [sp, #128]	; 0x80
   11f46:	60d1      	str	r1, [r2, #12]
                self.y += 1;
   11f48:	6911      	ldr	r1, [r2, #16]
   11f4a:	1c4b      	adds	r3, r1, #1
   11f4c:	469c      	mov	ip, r3
   11f4e:	428b      	cmp	r3, r1
   11f50:	f8cd c008 	str.w	ip, [sp, #8]
   11f54:	f180 80fd 	bvs.w	12152 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x542>
   11f58:	e7ff      	b.n	11f5a <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x34a>
   11f5a:	9802      	ldr	r0, [sp, #8]
   11f5c:	9920      	ldr	r1, [sp, #128]	; 0x80
   11f5e:	6108      	str	r0, [r1, #16]
            if self.x > self.radius as i32 {
   11f60:	e7ff      	b.n	11f62 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x352>
            if self.y > self.radius as i32 {
   11f62:	9820      	ldr	r0, [sp, #128]	; 0x80
   11f64:	6881      	ldr	r1, [r0, #8]
   11f66:	6902      	ldr	r2, [r0, #16]
   11f68:	428a      	cmp	r2, r1
   11f6a:	dc04      	bgt.n	11f76 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x366>
   11f6c:	e7ff      	b.n	11f6e <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x35e>
            if let Some(i) = item {
   11f6e:	9828      	ldr	r0, [sp, #160]	; 0xa0
   11f70:	2801      	cmp	r0, #1
   11f72:	d010      	beq.n	11f96 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x386>
   11f74:	e037      	b.n	11fe6 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x3d6>
   11f76:	2000      	movs	r0, #0
                break None;
   11f78:	9023      	str	r0, [sp, #140]	; 0x8c
   11f7a:	e7ff      	b.n	11f7c <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x36c>
        item.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   11f7c:	9823      	ldr	r0, [sp, #140]	; 0x8c
   11f7e:	9924      	ldr	r1, [sp, #144]	; 0x90
   11f80:	9a25      	ldr	r2, [sp, #148]	; 0x94
   11f82:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11f84:	933b      	str	r3, [sp, #236]	; 0xec
   11f86:	923a      	str	r2, [sp, #232]	; 0xe8
   11f88:	9139      	str	r1, [sp, #228]	; 0xe4
   11f8a:	9038      	str	r0, [sp, #224]	; 0xe0
   11f8c:	a938      	add	r1, sp, #224	; 0xe0
   11f8e:	9821      	ldr	r0, [sp, #132]	; 0x84
   11f90:	f7f9 fde6 	bl	bb60 <_ZN4core6option15Option$LT$T$GT$3map17h4ee976e528d7a622E>
   11f94:	e028      	b.n	11fe8 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x3d8>
            if let Some(i) = item {
   11f96:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11f98:	992a      	ldr	r1, [sp, #168]	; 0xa8
   11f9a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   11f9c:	9236      	str	r2, [sp, #216]	; 0xd8
   11f9e:	9135      	str	r1, [sp, #212]	; 0xd4
   11fa0:	9034      	str	r0, [sp, #208]	; 0xd0
                if i.0 >= 0 && i.1 >= 0 {
   11fa2:	9834      	ldr	r0, [sp, #208]	; 0xd0
   11fa4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   11fa8:	dc08      	bgt.n	11fbc <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x3ac>
   11faa:	e003      	b.n	11fb4 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x3a4>
   11fac:	2001      	movs	r0, #1
   11fae:	f88d 00df 	strb.w	r0, [sp, #223]	; 0xdf
   11fb2:	e008      	b.n	11fc6 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x3b6>
   11fb4:	2000      	movs	r0, #0
   11fb6:	f88d 00df 	strb.w	r0, [sp, #223]	; 0xdf
   11fba:	e004      	b.n	11fc6 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x3b6>
   11fbc:	9835      	ldr	r0, [sp, #212]	; 0xd4
   11fbe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   11fc2:	dcf3      	bgt.n	11fac <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x39c>
   11fc4:	e7f6      	b.n	11fb4 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x3a4>
   11fc6:	f89d 00df 	ldrb.w	r0, [sp, #223]	; 0xdf
   11fca:	07c0      	lsls	r0, r0, #31
   11fcc:	2800      	cmp	r0, #0
   11fce:	d101      	bne.n	11fd4 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x3c4>
   11fd0:	e7ff      	b.n	11fd2 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x3c2>
            if let Some(i) = item {
   11fd2:	e008      	b.n	11fe6 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x3d6>
                    break item;
   11fd4:	9828      	ldr	r0, [sp, #160]	; 0xa0
   11fd6:	9929      	ldr	r1, [sp, #164]	; 0xa4
   11fd8:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   11fda:	9b2b      	ldr	r3, [sp, #172]	; 0xac
   11fdc:	9326      	str	r3, [sp, #152]	; 0x98
   11fde:	9225      	str	r2, [sp, #148]	; 0x94
   11fe0:	9124      	str	r1, [sp, #144]	; 0x90
   11fe2:	9023      	str	r0, [sp, #140]	; 0x8c
   11fe4:	e7ca      	b.n	11f7c <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x36c>
        let item = loop {
   11fe6:	e68c      	b.n	11d02 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0xf2>
    }
   11fe8:	e646      	b.n	11c78 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E+0x68>
        let radius = self.radius as i32 - self.style.stroke_width as i32 + 1;
   11fea:	f64c 6010 	movw	r0, #52752	; 0xce10
   11fee:	f2c0 0001 	movt	r0, #1
   11ff2:	f64c 6200 	movw	r2, #52736	; 0xce00
   11ff6:	f2c0 0201 	movt	r2, #1
   11ffa:	2121      	movs	r1, #33	; 0x21
   11ffc:	f001 fe90 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12000:	defe      	udf	#254	; 0xfe
   12002:	f64c 6040 	movw	r0, #52800	; 0xce40
   12006:	f2c0 0001 	movt	r0, #1
   1200a:	f64c 6200 	movw	r2, #52736	; 0xce00
   1200e:	f2c0 0201 	movt	r2, #1
   12012:	211c      	movs	r1, #28
   12014:	f001 fe84 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12018:	defe      	udf	#254	; 0xfe
        let radius_sq = radius * radius;
   1201a:	f64c 6070 	movw	r0, #52848	; 0xce70
   1201e:	f2c0 0001 	movt	r0, #1
   12022:	f64c 625c 	movw	r2, #52828	; 0xce5c
   12026:	f2c0 0201 	movt	r2, #1
   1202a:	2121      	movs	r1, #33	; 0x21
   1202c:	f001 fe78 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12030:	defe      	udf	#254	; 0xfe
        let outer_radius_sq = outer_radius * outer_radius;
   12032:	f64c 6070 	movw	r0, #52848	; 0xce70
   12036:	f2c0 0001 	movt	r0, #1
   1203a:	f64c 6294 	movw	r2, #52884	; 0xce94
   1203e:	f2c0 0201 	movt	r2, #1
   12042:	2121      	movs	r1, #33	; 0x21
   12044:	f001 fe6c 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12048:	defe      	udf	#254	; 0xfe
            let len = tx * tx + ty * ty;
   1204a:	f64c 6070 	movw	r0, #52848	; 0xce70
   1204e:	f2c0 0001 	movt	r0, #1
   12052:	f64c 62a4 	movw	r2, #52900	; 0xcea4
   12056:	f2c0 0201 	movt	r2, #1
   1205a:	2121      	movs	r1, #33	; 0x21
   1205c:	f001 fe60 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12060:	defe      	udf	#254	; 0xfe
   12062:	f64c 6070 	movw	r0, #52848	; 0xce70
   12066:	f2c0 0001 	movt	r0, #1
   1206a:	f64c 62b4 	movw	r2, #52916	; 0xceb4
   1206e:	f2c0 0201 	movt	r2, #1
   12072:	2121      	movs	r1, #33	; 0x21
   12074:	f001 fe54 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12078:	defe      	udf	#254	; 0xfe
   1207a:	f64c 6040 	movw	r0, #52800	; 0xce40
   1207e:	f2c0 0001 	movt	r0, #1
   12082:	f64c 62a4 	movw	r2, #52900	; 0xcea4
   12086:	f2c0 0201 	movt	r2, #1
   1208a:	211c      	movs	r1, #28
   1208c:	f001 fe48 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12090:	defe      	udf	#254	; 0xfe
            let is_border = len > radius_sq - radius && len < outer_radius_sq + radius;
   12092:	f64c 6010 	movw	r0, #52752	; 0xce10
   12096:	f2c0 0001 	movt	r0, #1
   1209a:	f64c 62c4 	movw	r2, #52932	; 0xcec4
   1209e:	f2c0 0201 	movt	r2, #1
   120a2:	2121      	movs	r1, #33	; 0x21
   120a4:	f001 fe3c 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   120a8:	defe      	udf	#254	; 0xfe
   120aa:	f64c 6040 	movw	r0, #52800	; 0xce40
   120ae:	f2c0 0001 	movt	r0, #1
   120b2:	f64c 62d4 	movw	r2, #52948	; 0xced4
   120b6:	f2c0 0201 	movt	r2, #1
   120ba:	211c      	movs	r1, #28
   120bc:	f001 fe30 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   120c0:	defe      	udf	#254	; 0xfe
                    cx + tx,
   120c2:	f64c 6040 	movw	r0, #52800	; 0xce40
   120c6:	f2c0 0001 	movt	r0, #1
   120ca:	f64c 62e4 	movw	r2, #52964	; 0xcee4
   120ce:	f2c0 0201 	movt	r2, #1
   120d2:	211c      	movs	r1, #28
   120d4:	f001 fe24 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   120d8:	defe      	udf	#254	; 0xfe
                    cy + ty,
   120da:	f64c 6040 	movw	r0, #52800	; 0xce40
   120de:	f2c0 0001 	movt	r0, #1
   120e2:	f64c 62f4 	movw	r2, #52980	; 0xcef4
   120e6:	f2c0 0201 	movt	r2, #1
   120ea:	211c      	movs	r1, #28
   120ec:	f001 fe18 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   120f0:	defe      	udf	#254	; 0xfe
                    cx + tx,
   120f2:	f64c 6040 	movw	r0, #52800	; 0xce40
   120f6:	f2c0 0001 	movt	r0, #1
   120fa:	f64c 722c 	movw	r2, #53036	; 0xcf2c
   120fe:	f2c0 0201 	movt	r2, #1
   12102:	211c      	movs	r1, #28
   12104:	f001 fe0c 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12108:	defe      	udf	#254	; 0xfe
                    cy + ty,
   1210a:	f64c 6040 	movw	r0, #52800	; 0xce40
   1210e:	f2c0 0001 	movt	r0, #1
   12112:	f64c 723c 	movw	r2, #53052	; 0xcf3c
   12116:	f2c0 0201 	movt	r2, #1
   1211a:	211c      	movs	r1, #28
   1211c:	f001 fe00 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12120:	defe      	udf	#254	; 0xfe
            self.x += 1;
   12122:	f64c 6040 	movw	r0, #52800	; 0xce40
   12126:	f2c0 0001 	movt	r0, #1
   1212a:	f64c 7274 	movw	r2, #53108	; 0xcf74
   1212e:	f2c0 0201 	movt	r2, #1
   12132:	211c      	movs	r1, #28
   12134:	f001 fdf4 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12138:	defe      	udf	#254	; 0xfe
                self.x = -(self.radius as i32);
   1213a:	f64c 50d0 	movw	r0, #52688	; 0xcdd0
   1213e:	f2c0 0001 	movt	r0, #1
   12142:	f64c 7284 	movw	r2, #53124	; 0xcf84
   12146:	f2c0 0201 	movt	r2, #1
   1214a:	211f      	movs	r1, #31
   1214c:	f001 fde8 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12150:	defe      	udf	#254	; 0xfe
                self.y += 1;
   12152:	f64c 6040 	movw	r0, #52800	; 0xce40
   12156:	f2c0 0001 	movt	r0, #1
   1215a:	f64c 7294 	movw	r2, #53140	; 0xcf94
   1215e:	f2c0 0201 	movt	r2, #1
   12162:	211c      	movs	r1, #28
   12164:	f001 fddc 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12168:	defe      	udf	#254	; 0xfe

0001216a <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17hb4823a008a69b1a5E>:
        item.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   1216a:	b580      	push	{r7, lr}
   1216c:	b08a      	sub	sp, #40	; 0x28
   1216e:	680a      	ldr	r2, [r1, #0]
   12170:	9207      	str	r2, [sp, #28]
   12172:	684b      	ldr	r3, [r1, #4]
   12174:	9308      	str	r3, [sp, #32]
   12176:	8909      	ldrh	r1, [r1, #8]
   12178:	468c      	mov	ip, r1
   1217a:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
   1217e:	9005      	str	r0, [sp, #20]
   12180:	4610      	mov	r0, r2
   12182:	4619      	mov	r1, r3
   12184:	f8cd c010 	str.w	ip, [sp, #16]
   12188:	f7f9 ff74 	bl	c074 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
   1218c:	9003      	str	r0, [sp, #12]
   1218e:	9102      	str	r1, [sp, #8]
   12190:	e7ff      	b.n	12192 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17hb4823a008a69b1a5E+0x28>
   12192:	9803      	ldr	r0, [sp, #12]
   12194:	9902      	ldr	r1, [sp, #8]
   12196:	f7f9 fff9 	bl	c18c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>
   1219a:	9001      	str	r0, [sp, #4]
   1219c:	9100      	str	r1, [sp, #0]
   1219e:	e7ff      	b.n	121a0 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17hb4823a008a69b1a5E+0x36>
   121a0:	9801      	ldr	r0, [sp, #4]
   121a2:	9905      	ldr	r1, [sp, #20]
   121a4:	6008      	str	r0, [r1, #0]
   121a6:	9a00      	ldr	r2, [sp, #0]
   121a8:	604a      	str	r2, [r1, #4]
   121aa:	9b04      	ldr	r3, [sp, #16]
   121ac:	810b      	strh	r3, [r1, #8]
   121ae:	b00a      	add	sp, #40	; 0x28
   121b0:	bd80      	pop	{r7, pc}

000121b2 <_ZN17embedded_graphics10primitives6circle15Circle$LT$C$GT$3new17hd0fdd32bac55188aE>:
    pub fn new(center: Coord, radius: u32) -> Self {
   121b2:	b580      	push	{r7, lr}
   121b4:	b08a      	sub	sp, #40	; 0x28
   121b6:	9107      	str	r1, [sp, #28]
   121b8:	9208      	str	r2, [sp, #32]
   121ba:	9309      	str	r3, [sp, #36]	; 0x24
   121bc:	f10d 0c10 	add.w	ip, sp, #16
            style: Style::default(),
   121c0:	9003      	str	r0, [sp, #12]
   121c2:	4660      	mov	r0, ip
   121c4:	9302      	str	r3, [sp, #8]
   121c6:	9201      	str	r2, [sp, #4]
   121c8:	9100      	str	r1, [sp, #0]
   121ca:	f7ff fc24 	bl	11a16 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   121ce:	e7ff      	b.n	121d0 <_ZN17embedded_graphics10primitives6circle15Circle$LT$C$GT$3new17hd0fdd32bac55188aE+0x1e>
        Circle {
   121d0:	9800      	ldr	r0, [sp, #0]
   121d2:	9903      	ldr	r1, [sp, #12]
   121d4:	6008      	str	r0, [r1, #0]
   121d6:	9a01      	ldr	r2, [sp, #4]
   121d8:	604a      	str	r2, [r1, #4]
   121da:	9b02      	ldr	r3, [sp, #8]
   121dc:	608b      	str	r3, [r1, #8]
   121de:	f8bd c018 	ldrh.w	ip, [sp, #24]
   121e2:	f8a1 c014 	strh.w	ip, [r1, #20]
   121e6:	f8dd c010 	ldr.w	ip, [sp, #16]
   121ea:	f8dd e014 	ldr.w	lr, [sp, #20]
   121ee:	f8c1 e010 	str.w	lr, [r1, #16]
   121f2:	f8c1 c00c 	str.w	ip, [r1, #12]
    }
   121f6:	b00a      	add	sp, #40	; 0x28
   121f8:	bd80      	pop	{r7, pc}

000121fa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE>:
    fn next(&mut self) -> Option<Self::Item> {
   121fa:	b580      	push	{r7, lr}
   121fc:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
   12200:	91bd      	str	r1, [sp, #756]	; 0x2f4
        loop {
   12202:	9116      	str	r1, [sp, #88]	; 0x58
   12204:	9015      	str	r0, [sp, #84]	; 0x54
   12206:	e7ff      	b.n	12208 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0xe>
   12208:	a817      	add	r0, sp, #92	; 0x5c
            let next_pixel = self.pixels.next();
   1220a:	9916      	ldr	r1, [sp, #88]	; 0x58
   1220c:	f7fc fdef 	bl	edee <_ZN134_$LT$embedded_graphics..fonts..font_builder..FontBuilderIterator$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hdc8c87c520860c07E>
   12210:	e7ff      	b.n	12212 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x18>
                None => {  //  If no more pixels...
   12212:	9817      	ldr	r0, [sp, #92]	; 0x5c
   12214:	2800      	cmp	r0, #0
   12216:	d01c      	beq.n	12252 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x58>
   12218:	e7ff      	b.n	1221a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x20>
                Some(Pixel(coord, color)) => {  //  If there is a pixel...
   1221a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1221c:	9919      	ldr	r1, [sp, #100]	; 0x64
   1221e:	90be      	str	r0, [sp, #760]	; 0x2f8
   12220:	91bf      	str	r1, [sp, #764]	; 0x2fc
   12222:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   12226:	4613      	mov	r3, r2
   12228:	f8ad 2302 	strh.w	r2, [sp, #770]	; 0x302
                    let x = coord.0 as u8;
   1222c:	f88d 0304 	strb.w	r0, [sp, #772]	; 0x304
                    let y = coord.1 as u8;
   12230:	f88d 1305 	strb.w	r1, [sp, #773]	; 0x305
                    let color = color.0;
   12234:	f8ad 2306 	strh.w	r2, [sp, #774]	; 0x306
                    if self.first_pixel {
   12238:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1223a:	f892 c097 	ldrb.w	ip, [r2, #151]	; 0x97
   1223e:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
   12242:	f1bc 0f00 	cmp.w	ip, #0
   12246:	9014      	str	r0, [sp, #80]	; 0x50
   12248:	9113      	str	r1, [sp, #76]	; 0x4c
   1224a:	9312      	str	r3, [sp, #72]	; 0x48
   1224c:	d156      	bne.n	122fc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x102>
   1224e:	e04a      	b.n	122e6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0xec>
            match next_pixel {
   12250:	defe      	udf	#254	; 0xfe
                    if self.first_pixel {
   12252:	9816      	ldr	r0, [sp, #88]	; 0x58
   12254:	f890 1097 	ldrb.w	r1, [r0, #151]	; 0x97
   12258:	07c9      	lsls	r1, r1, #31
   1225a:	2900      	cmp	r1, #0
   1225c:	d111      	bne.n	12282 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x88>
   1225e:	e7ff      	b.n	12260 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x66>
                        x_left: self.x_left,
   12260:	9816      	ldr	r0, [sp, #88]	; 0x58
   12262:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
                        x_right: self.x_right,
   12266:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
                        y: self.y,
   1226a:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
                        colors: self.colors.clone(),
   1226e:	f100 0c2c 	add.w	ip, r0, #44	; 0x2c
   12272:	a836      	add	r0, sp, #216	; 0xd8
   12274:	9111      	str	r1, [sp, #68]	; 0x44
   12276:	4661      	mov	r1, ip
   12278:	9210      	str	r2, [sp, #64]	; 0x40
   1227a:	930f      	str	r3, [sp, #60]	; 0x3c
   1227c:	f7fd faf6 	bl	f86c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   12280:	e006      	b.n	12290 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x96>
   12282:	2000      	movs	r0, #0
                        return None;  //  No pixels to group
   12284:	9915      	ldr	r1, [sp, #84]	; 0x54
   12286:	6008      	str	r0, [r1, #0]
   12288:	e7ff      	b.n	1228a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x90>
    }
   1228a:	f50d 7d42 	add.w	sp, sp, #776	; 0x308
   1228e:	bd80      	pop	{r7, pc}
                    let row = PixelRow {
   12290:	9811      	ldr	r0, [sp, #68]	; 0x44
   12292:	f88d 00d4 	strb.w	r0, [sp, #212]	; 0xd4
   12296:	9910      	ldr	r1, [sp, #64]	; 0x40
   12298:	f88d 10d5 	strb.w	r1, [sp, #213]	; 0xd5
   1229c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1229e:	f88d 20d6 	strb.w	r2, [sp, #214]	; 0xd6
   122a2:	a81b      	add	r0, sp, #108	; 0x6c
   122a4:	a936      	add	r1, sp, #216	; 0xd8
   122a6:	2268      	movs	r2, #104	; 0x68
   122a8:	f008 f90e 	bl	1a4c8 <__aeabi_memcpy>
                    self.colors.clear();
   122ac:	9816      	ldr	r0, [sp, #88]	; 0x58
   122ae:	302c      	adds	r0, #44	; 0x2c
   122b0:	f7fd fba1 	bl	f9f6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   122b4:	e7ff      	b.n	122b6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0xbc>
   122b6:	2001      	movs	r0, #1
                    self.first_pixel = true;
   122b8:	9916      	ldr	r1, [sp, #88]	; 0x58
   122ba:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
   122be:	aa50      	add	r2, sp, #320	; 0x140
   122c0:	a91b      	add	r1, sp, #108	; 0x6c
   122c2:	236c      	movs	r3, #108	; 0x6c
                    return Some(row);
   122c4:	900e      	str	r0, [sp, #56]	; 0x38
   122c6:	4610      	mov	r0, r2
   122c8:	920d      	str	r2, [sp, #52]	; 0x34
   122ca:	461a      	mov	r2, r3
   122cc:	930c      	str	r3, [sp, #48]	; 0x30
   122ce:	f008 f8fb 	bl	1a4c8 <__aeabi_memcpy>
   122d2:	9815      	ldr	r0, [sp, #84]	; 0x54
   122d4:	3004      	adds	r0, #4
   122d6:	990d      	ldr	r1, [sp, #52]	; 0x34
   122d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   122da:	f008 f8f5 	bl	1a4c8 <__aeabi_memcpy>
   122de:	980e      	ldr	r0, [sp, #56]	; 0x38
   122e0:	9915      	ldr	r1, [sp, #84]	; 0x54
   122e2:	6008      	str	r0, [r1, #0]
   122e4:	e7d1      	b.n	1228a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x90>
                    if x == self.x_right + 1 && y == self.y {
   122e6:	9816      	ldr	r0, [sp, #88]	; 0x58
   122e8:	f890 1095 	ldrb.w	r1, [r0, #149]	; 0x95
   122ec:	3101      	adds	r1, #1
   122ee:	b2ca      	uxtb	r2, r1
   122f0:	460b      	mov	r3, r1
   122f2:	428a      	cmp	r2, r1
   122f4:	930b      	str	r3, [sp, #44]	; 0x2c
   122f6:	f040 80b9 	bne.w	1246c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x272>
   122fa:	e040      	b.n	1237e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x184>
   122fc:	2000      	movs	r0, #0
                        self.first_pixel = false;
   122fe:	9916      	ldr	r1, [sp, #88]	; 0x58
   12300:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
                        self.x_left = x;
   12304:	9814      	ldr	r0, [sp, #80]	; 0x50
   12306:	f881 0094 	strb.w	r0, [r1, #148]	; 0x94
                        self.x_right = x;
   1230a:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
                        self.y = y;
   1230e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12310:	f881 2096 	strb.w	r2, [r1, #150]	; 0x96
                        self.colors.clear();
   12314:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   12318:	f7fd fb6d 	bl	f9f6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   1231c:	e7ff      	b.n	1231e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x124>
                        self.colors.push(color)
   1231e:	9816      	ldr	r0, [sp, #88]	; 0x58
   12320:	302c      	adds	r0, #44	; 0x2c
   12322:	9912      	ldr	r1, [sp, #72]	; 0x48
   12324:	f7fd fb57 	bl	f9d6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   12328:	900a      	str	r0, [sp, #40]	; 0x28
   1232a:	9109      	str	r1, [sp, #36]	; 0x24
   1232c:	e7ff      	b.n	1232e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x134>
   1232e:	f24d 000c 	movw	r0, #53260	; 0xd00c
   12332:	f2c0 0001 	movt	r0, #1
   12336:	4669      	mov	r1, sp
   12338:	6008      	str	r0, [r1, #0]
   1233a:	f64c 72a4 	movw	r2, #53156	; 0xcfa4
   1233e:	f2c0 0201 	movt	r2, #1
   12342:	2305      	movs	r3, #5
   12344:	980a      	ldr	r0, [sp, #40]	; 0x28
   12346:	9909      	ldr	r1, [sp, #36]	; 0x24
   12348:	f7fd feb3 	bl	100b2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   1234c:	e7ff      	b.n	1234e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x154>
                        continue;
   1234e:	e7ff      	b.n	12350 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x156>
   12350:	e75a      	b.n	12208 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0xe>
   12352:	2001      	movs	r0, #1
                    if x == self.x_right + 1 && y == self.y {
   12354:	f88d 01af 	strb.w	r0, [sp, #431]	; 0x1af
   12358:	e00b      	b.n	12372 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x178>
   1235a:	2000      	movs	r0, #0
   1235c:	f88d 01af 	strb.w	r0, [sp, #431]	; 0x1af
   12360:	e007      	b.n	12372 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x178>
   12362:	9816      	ldr	r0, [sp, #88]	; 0x58
   12364:	f890 1096 	ldrb.w	r1, [r0, #150]	; 0x96
   12368:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1236a:	b2d3      	uxtb	r3, r2
   1236c:	428b      	cmp	r3, r1
   1236e:	d0f0      	beq.n	12352 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x158>
   12370:	e7f3      	b.n	1235a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x160>
   12372:	f89d 01af 	ldrb.w	r0, [sp, #431]	; 0x1af
   12376:	07c0      	lsls	r0, r0, #31
   12378:	2800      	cmp	r0, #0
   1237a:	d107      	bne.n	1238c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x192>
   1237c:	e020      	b.n	123c0 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x1c6>
   1237e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12380:	b2c1      	uxtb	r1, r0
   12382:	9a14      	ldr	r2, [sp, #80]	; 0x50
   12384:	b2d3      	uxtb	r3, r2
   12386:	428b      	cmp	r3, r1
   12388:	d0eb      	beq.n	12362 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x168>
   1238a:	e7e6      	b.n	1235a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x160>
                        if self.colors.push(color).is_ok() {
   1238c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1238e:	302c      	adds	r0, #44	; 0x2c
   12390:	9912      	ldr	r1, [sp, #72]	; 0x48
   12392:	f7fd fb20 	bl	f9d6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   12396:	f8ad 11b2 	strh.w	r1, [sp, #434]	; 0x1b2
   1239a:	f8ad 01b0 	strh.w	r0, [sp, #432]	; 0x1b0
   1239e:	e7ff      	b.n	123a0 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x1a6>
   123a0:	a86c      	add	r0, sp, #432	; 0x1b0
   123a2:	f7fd fe61 	bl	10068 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>
   123a6:	9008      	str	r0, [sp, #32]
   123a8:	e7ff      	b.n	123aa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x1b0>
   123aa:	9808      	ldr	r0, [sp, #32]
   123ac:	07c1      	lsls	r1, r0, #31
   123ae:	2900      	cmp	r1, #0
   123b0:	d101      	bne.n	123b6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x1bc>
   123b2:	e7ff      	b.n	123b4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x1ba>
                    if x == self.x_right + 1 && y == self.y {
   123b4:	e004      	b.n	123c0 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x1c6>
                            self.x_right = x;
   123b6:	9814      	ldr	r0, [sp, #80]	; 0x50
   123b8:	9916      	ldr	r1, [sp, #88]	; 0x58
   123ba:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
                            continue;
   123be:	e7c7      	b.n	12350 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x156>
                        x_left: self.x_left,
   123c0:	9816      	ldr	r0, [sp, #88]	; 0x58
   123c2:	f890 1094 	ldrb.w	r1, [r0, #148]	; 0x94
                        x_right: self.x_right,
   123c6:	f890 2095 	ldrb.w	r2, [r0, #149]	; 0x95
                        y: self.y,
   123ca:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
                        colors: self.colors.clone(),
   123ce:	f100 0c2c 	add.w	ip, r0, #44	; 0x2c
   123d2:	a888      	add	r0, sp, #544	; 0x220
   123d4:	9107      	str	r1, [sp, #28]
   123d6:	4661      	mov	r1, ip
   123d8:	9206      	str	r2, [sp, #24]
   123da:	9305      	str	r3, [sp, #20]
   123dc:	f7fd fa46 	bl	f86c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   123e0:	e7ff      	b.n	123e2 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x1e8>
                    let row = PixelRow {
   123e2:	9807      	ldr	r0, [sp, #28]
   123e4:	f88d 021c 	strb.w	r0, [sp, #540]	; 0x21c
   123e8:	9906      	ldr	r1, [sp, #24]
   123ea:	f88d 121d 	strb.w	r1, [sp, #541]	; 0x21d
   123ee:	9a05      	ldr	r2, [sp, #20]
   123f0:	f88d 221e 	strb.w	r2, [sp, #542]	; 0x21e
   123f4:	a86d      	add	r0, sp, #436	; 0x1b4
   123f6:	a988      	add	r1, sp, #544	; 0x220
   123f8:	2268      	movs	r2, #104	; 0x68
   123fa:	f008 f865 	bl	1a4c8 <__aeabi_memcpy>
                    self.x_left = x;
   123fe:	9814      	ldr	r0, [sp, #80]	; 0x50
   12400:	9916      	ldr	r1, [sp, #88]	; 0x58
   12402:	f881 0094 	strb.w	r0, [r1, #148]	; 0x94
                    self.x_right = x;
   12406:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
                    self.y = y;
   1240a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1240c:	f881 2096 	strb.w	r2, [r1, #150]	; 0x96
                    self.colors.clear();
   12410:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   12414:	f7fd faef 	bl	f9f6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   12418:	e7ff      	b.n	1241a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x220>
                    self.colors.push(color)
   1241a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1241c:	302c      	adds	r0, #44	; 0x2c
   1241e:	9912      	ldr	r1, [sp, #72]	; 0x48
   12420:	f7fd fad9 	bl	f9d6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   12424:	9004      	str	r0, [sp, #16]
   12426:	9103      	str	r1, [sp, #12]
   12428:	e7ff      	b.n	1242a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x230>
   1242a:	f24d 004c 	movw	r0, #53324	; 0xd04c
   1242e:	f2c0 0001 	movt	r0, #1
   12432:	4669      	mov	r1, sp
   12434:	6008      	str	r0, [r1, #0]
   12436:	f64c 72a4 	movw	r2, #53156	; 0xcfa4
   1243a:	f2c0 0201 	movt	r2, #1
   1243e:	2305      	movs	r3, #5
   12440:	9804      	ldr	r0, [sp, #16]
   12442:	9903      	ldr	r1, [sp, #12]
   12444:	f7fd fe35 	bl	100b2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   12448:	e7ff      	b.n	1244a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x250>
   1244a:	a8a2      	add	r0, sp, #648	; 0x288
   1244c:	a96d      	add	r1, sp, #436	; 0x1b4
   1244e:	226c      	movs	r2, #108	; 0x6c
                    return Some(row);
   12450:	9002      	str	r0, [sp, #8]
   12452:	9201      	str	r2, [sp, #4]
   12454:	f008 f838 	bl	1a4c8 <__aeabi_memcpy>
   12458:	9815      	ldr	r0, [sp, #84]	; 0x54
   1245a:	3004      	adds	r0, #4
   1245c:	9902      	ldr	r1, [sp, #8]
   1245e:	9a01      	ldr	r2, [sp, #4]
   12460:	f008 f832 	bl	1a4c8 <__aeabi_memcpy>
   12464:	2001      	movs	r0, #1
   12466:	9915      	ldr	r1, [sp, #84]	; 0x54
   12468:	6008      	str	r0, [r1, #0]
   1246a:	e70e      	b.n	1228a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE+0x90>
                    if x == self.x_right + 1 && y == self.y {
   1246c:	f24d 0030 	movw	r0, #53296	; 0xd030
   12470:	f2c0 0001 	movt	r0, #1
   12474:	f24d 021c 	movw	r2, #53276	; 0xd01c
   12478:	f2c0 0201 	movt	r2, #1
   1247c:	211c      	movs	r1, #28
   1247e:	f001 fc4f 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12482:	defe      	udf	#254	; 0xfe

00012484 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E>:
    fn next(&mut self) -> Option<Self::Item> {
   12484:	b580      	push	{r7, lr}
   12486:	f5ad 7d42 	sub.w	sp, sp, #776	; 0x308
   1248a:	91bd      	str	r1, [sp, #756]	; 0x2f4
        loop {
   1248c:	9116      	str	r1, [sp, #88]	; 0x58
   1248e:	9015      	str	r0, [sp, #84]	; 0x54
   12490:	e7ff      	b.n	12492 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0xe>
   12492:	a817      	add	r0, sp, #92	; 0x5c
            let next_pixel = self.pixels.next();
   12494:	9916      	ldr	r1, [sp, #88]	; 0x58
   12496:	f7ff fbbb 	bl	11c10 <_ZN121_$LT$embedded_graphics..primitives..circle..CircleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hab3ae08565abf121E>
   1249a:	e7ff      	b.n	1249c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x18>
                None => {  //  If no more pixels...
   1249c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1249e:	2800      	cmp	r0, #0
   124a0:	d01c      	beq.n	124dc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x58>
   124a2:	e7ff      	b.n	124a4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x20>
                Some(Pixel(coord, color)) => {  //  If there is a pixel...
   124a4:	9818      	ldr	r0, [sp, #96]	; 0x60
   124a6:	9919      	ldr	r1, [sp, #100]	; 0x64
   124a8:	90be      	str	r0, [sp, #760]	; 0x2f8
   124aa:	91bf      	str	r1, [sp, #764]	; 0x2fc
   124ac:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   124b0:	4613      	mov	r3, r2
   124b2:	f8ad 2302 	strh.w	r2, [sp, #770]	; 0x302
                    let x = coord.0 as u8;
   124b6:	f88d 0304 	strb.w	r0, [sp, #772]	; 0x304
                    let y = coord.1 as u8;
   124ba:	f88d 1305 	strb.w	r1, [sp, #773]	; 0x305
                    let color = color.0;
   124be:	f8ad 2306 	strh.w	r2, [sp, #774]	; 0x306
                    if self.first_pixel {
   124c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
   124c4:	f892 c08b 	ldrb.w	ip, [r2, #139]	; 0x8b
   124c8:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
   124cc:	f1bc 0f00 	cmp.w	ip, #0
   124d0:	9014      	str	r0, [sp, #80]	; 0x50
   124d2:	9113      	str	r1, [sp, #76]	; 0x4c
   124d4:	9312      	str	r3, [sp, #72]	; 0x48
   124d6:	d156      	bne.n	12586 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x102>
   124d8:	e04a      	b.n	12570 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0xec>
            match next_pixel {
   124da:	defe      	udf	#254	; 0xfe
                    if self.first_pixel {
   124dc:	9816      	ldr	r0, [sp, #88]	; 0x58
   124de:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
   124e2:	07c9      	lsls	r1, r1, #31
   124e4:	2900      	cmp	r1, #0
   124e6:	d111      	bne.n	1250c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x88>
   124e8:	e7ff      	b.n	124ea <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x66>
                        x_left: self.x_left,
   124ea:	9816      	ldr	r0, [sp, #88]	; 0x58
   124ec:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
                        x_right: self.x_right,
   124f0:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
                        y: self.y,
   124f4:	f890 308a 	ldrb.w	r3, [r0, #138]	; 0x8a
                        colors: self.colors.clone(),
   124f8:	f100 0c20 	add.w	ip, r0, #32
   124fc:	a836      	add	r0, sp, #216	; 0xd8
   124fe:	9111      	str	r1, [sp, #68]	; 0x44
   12500:	4661      	mov	r1, ip
   12502:	9210      	str	r2, [sp, #64]	; 0x40
   12504:	930f      	str	r3, [sp, #60]	; 0x3c
   12506:	f7fd f9b1 	bl	f86c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   1250a:	e006      	b.n	1251a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x96>
   1250c:	2000      	movs	r0, #0
                        return None;  //  No pixels to group
   1250e:	9915      	ldr	r1, [sp, #84]	; 0x54
   12510:	6008      	str	r0, [r1, #0]
   12512:	e7ff      	b.n	12514 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x90>
    }
   12514:	f50d 7d42 	add.w	sp, sp, #776	; 0x308
   12518:	bd80      	pop	{r7, pc}
                    let row = PixelRow {
   1251a:	9811      	ldr	r0, [sp, #68]	; 0x44
   1251c:	f88d 00d4 	strb.w	r0, [sp, #212]	; 0xd4
   12520:	9910      	ldr	r1, [sp, #64]	; 0x40
   12522:	f88d 10d5 	strb.w	r1, [sp, #213]	; 0xd5
   12526:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   12528:	f88d 20d6 	strb.w	r2, [sp, #214]	; 0xd6
   1252c:	a81b      	add	r0, sp, #108	; 0x6c
   1252e:	a936      	add	r1, sp, #216	; 0xd8
   12530:	2268      	movs	r2, #104	; 0x68
   12532:	f007 ffc9 	bl	1a4c8 <__aeabi_memcpy>
                    self.colors.clear();
   12536:	9816      	ldr	r0, [sp, #88]	; 0x58
   12538:	3020      	adds	r0, #32
   1253a:	f7fd fa5c 	bl	f9f6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   1253e:	e7ff      	b.n	12540 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0xbc>
   12540:	2001      	movs	r0, #1
                    self.first_pixel = true;
   12542:	9916      	ldr	r1, [sp, #88]	; 0x58
   12544:	f881 008b 	strb.w	r0, [r1, #139]	; 0x8b
   12548:	aa50      	add	r2, sp, #320	; 0x140
   1254a:	a91b      	add	r1, sp, #108	; 0x6c
   1254c:	236c      	movs	r3, #108	; 0x6c
                    return Some(row);
   1254e:	900e      	str	r0, [sp, #56]	; 0x38
   12550:	4610      	mov	r0, r2
   12552:	920d      	str	r2, [sp, #52]	; 0x34
   12554:	461a      	mov	r2, r3
   12556:	930c      	str	r3, [sp, #48]	; 0x30
   12558:	f007 ffb6 	bl	1a4c8 <__aeabi_memcpy>
   1255c:	9815      	ldr	r0, [sp, #84]	; 0x54
   1255e:	3004      	adds	r0, #4
   12560:	990d      	ldr	r1, [sp, #52]	; 0x34
   12562:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12564:	f007 ffb0 	bl	1a4c8 <__aeabi_memcpy>
   12568:	980e      	ldr	r0, [sp, #56]	; 0x38
   1256a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1256c:	6008      	str	r0, [r1, #0]
   1256e:	e7d1      	b.n	12514 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   12570:	9816      	ldr	r0, [sp, #88]	; 0x58
   12572:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
   12576:	3101      	adds	r1, #1
   12578:	b2ca      	uxtb	r2, r1
   1257a:	460b      	mov	r3, r1
   1257c:	428a      	cmp	r2, r1
   1257e:	930b      	str	r3, [sp, #44]	; 0x2c
   12580:	f040 80b9 	bne.w	126f6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x272>
   12584:	e040      	b.n	12608 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x184>
   12586:	2000      	movs	r0, #0
                        self.first_pixel = false;
   12588:	9916      	ldr	r1, [sp, #88]	; 0x58
   1258a:	f881 008b 	strb.w	r0, [r1, #139]	; 0x8b
                        self.x_left = x;
   1258e:	9814      	ldr	r0, [sp, #80]	; 0x50
   12590:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
                        self.x_right = x;
   12594:	f881 0089 	strb.w	r0, [r1, #137]	; 0x89
                        self.y = y;
   12598:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1259a:	f881 208a 	strb.w	r2, [r1, #138]	; 0x8a
                        self.colors.clear();
   1259e:	f101 0020 	add.w	r0, r1, #32
   125a2:	f7fd fa28 	bl	f9f6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   125a6:	e7ff      	b.n	125a8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x124>
                        self.colors.push(color)
   125a8:	9816      	ldr	r0, [sp, #88]	; 0x58
   125aa:	3020      	adds	r0, #32
   125ac:	9912      	ldr	r1, [sp, #72]	; 0x48
   125ae:	f7fd fa12 	bl	f9d6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   125b2:	900a      	str	r0, [sp, #40]	; 0x28
   125b4:	9109      	str	r1, [sp, #36]	; 0x24
   125b6:	e7ff      	b.n	125b8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x134>
   125b8:	f24d 000c 	movw	r0, #53260	; 0xd00c
   125bc:	f2c0 0001 	movt	r0, #1
   125c0:	4669      	mov	r1, sp
   125c2:	6008      	str	r0, [r1, #0]
   125c4:	f64c 72a4 	movw	r2, #53156	; 0xcfa4
   125c8:	f2c0 0201 	movt	r2, #1
   125cc:	2305      	movs	r3, #5
   125ce:	980a      	ldr	r0, [sp, #40]	; 0x28
   125d0:	9909      	ldr	r1, [sp, #36]	; 0x24
   125d2:	f7fd fd6e 	bl	100b2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   125d6:	e7ff      	b.n	125d8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x154>
                        continue;
   125d8:	e7ff      	b.n	125da <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x156>
   125da:	e75a      	b.n	12492 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0xe>
   125dc:	2001      	movs	r0, #1
                    if x == self.x_right + 1 && y == self.y {
   125de:	f88d 01af 	strb.w	r0, [sp, #431]	; 0x1af
   125e2:	e00b      	b.n	125fc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x178>
   125e4:	2000      	movs	r0, #0
   125e6:	f88d 01af 	strb.w	r0, [sp, #431]	; 0x1af
   125ea:	e007      	b.n	125fc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x178>
   125ec:	9816      	ldr	r0, [sp, #88]	; 0x58
   125ee:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
   125f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   125f4:	b2d3      	uxtb	r3, r2
   125f6:	428b      	cmp	r3, r1
   125f8:	d0f0      	beq.n	125dc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x158>
   125fa:	e7f3      	b.n	125e4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x160>
   125fc:	f89d 01af 	ldrb.w	r0, [sp, #431]	; 0x1af
   12600:	07c0      	lsls	r0, r0, #31
   12602:	2800      	cmp	r0, #0
   12604:	d107      	bne.n	12616 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x192>
   12606:	e020      	b.n	1264a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x1c6>
   12608:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1260a:	b2c1      	uxtb	r1, r0
   1260c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1260e:	b2d3      	uxtb	r3, r2
   12610:	428b      	cmp	r3, r1
   12612:	d0eb      	beq.n	125ec <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x168>
   12614:	e7e6      	b.n	125e4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x160>
                        if self.colors.push(color).is_ok() {
   12616:	9816      	ldr	r0, [sp, #88]	; 0x58
   12618:	3020      	adds	r0, #32
   1261a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1261c:	f7fd f9db 	bl	f9d6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   12620:	f8ad 11b2 	strh.w	r1, [sp, #434]	; 0x1b2
   12624:	f8ad 01b0 	strh.w	r0, [sp, #432]	; 0x1b0
   12628:	e7ff      	b.n	1262a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x1a6>
   1262a:	a86c      	add	r0, sp, #432	; 0x1b0
   1262c:	f7fd fd1c 	bl	10068 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>
   12630:	9008      	str	r0, [sp, #32]
   12632:	e7ff      	b.n	12634 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x1b0>
   12634:	9808      	ldr	r0, [sp, #32]
   12636:	07c1      	lsls	r1, r0, #31
   12638:	2900      	cmp	r1, #0
   1263a:	d101      	bne.n	12640 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x1bc>
   1263c:	e7ff      	b.n	1263e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x1ba>
                    if x == self.x_right + 1 && y == self.y {
   1263e:	e004      	b.n	1264a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x1c6>
                            self.x_right = x;
   12640:	9814      	ldr	r0, [sp, #80]	; 0x50
   12642:	9916      	ldr	r1, [sp, #88]	; 0x58
   12644:	f881 0089 	strb.w	r0, [r1, #137]	; 0x89
                            continue;
   12648:	e7c7      	b.n	125da <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x156>
                        x_left: self.x_left,
   1264a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1264c:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
                        x_right: self.x_right,
   12650:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
                        y: self.y,
   12654:	f890 308a 	ldrb.w	r3, [r0, #138]	; 0x8a
                        colors: self.colors.clone(),
   12658:	f100 0c20 	add.w	ip, r0, #32
   1265c:	a888      	add	r0, sp, #544	; 0x220
   1265e:	9107      	str	r1, [sp, #28]
   12660:	4661      	mov	r1, ip
   12662:	9206      	str	r2, [sp, #24]
   12664:	9305      	str	r3, [sp, #20]
   12666:	f7fd f901 	bl	f86c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   1266a:	e7ff      	b.n	1266c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x1e8>
                    let row = PixelRow {
   1266c:	9807      	ldr	r0, [sp, #28]
   1266e:	f88d 021c 	strb.w	r0, [sp, #540]	; 0x21c
   12672:	9906      	ldr	r1, [sp, #24]
   12674:	f88d 121d 	strb.w	r1, [sp, #541]	; 0x21d
   12678:	9a05      	ldr	r2, [sp, #20]
   1267a:	f88d 221e 	strb.w	r2, [sp, #542]	; 0x21e
   1267e:	a86d      	add	r0, sp, #436	; 0x1b4
   12680:	a988      	add	r1, sp, #544	; 0x220
   12682:	2268      	movs	r2, #104	; 0x68
   12684:	f007 ff20 	bl	1a4c8 <__aeabi_memcpy>
                    self.x_left = x;
   12688:	9814      	ldr	r0, [sp, #80]	; 0x50
   1268a:	9916      	ldr	r1, [sp, #88]	; 0x58
   1268c:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
                    self.x_right = x;
   12690:	f881 0089 	strb.w	r0, [r1, #137]	; 0x89
                    self.y = y;
   12694:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12696:	f881 208a 	strb.w	r2, [r1, #138]	; 0x8a
                    self.colors.clear();
   1269a:	f101 0020 	add.w	r0, r1, #32
   1269e:	f7fd f9aa 	bl	f9f6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   126a2:	e7ff      	b.n	126a4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x220>
                    self.colors.push(color)
   126a4:	9816      	ldr	r0, [sp, #88]	; 0x58
   126a6:	3020      	adds	r0, #32
   126a8:	9912      	ldr	r1, [sp, #72]	; 0x48
   126aa:	f7fd f994 	bl	f9d6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   126ae:	9004      	str	r0, [sp, #16]
   126b0:	9103      	str	r1, [sp, #12]
   126b2:	e7ff      	b.n	126b4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x230>
   126b4:	f24d 004c 	movw	r0, #53324	; 0xd04c
   126b8:	f2c0 0001 	movt	r0, #1
   126bc:	4669      	mov	r1, sp
   126be:	6008      	str	r0, [r1, #0]
   126c0:	f64c 72a4 	movw	r2, #53156	; 0xcfa4
   126c4:	f2c0 0201 	movt	r2, #1
   126c8:	2305      	movs	r3, #5
   126ca:	9804      	ldr	r0, [sp, #16]
   126cc:	9903      	ldr	r1, [sp, #12]
   126ce:	f7fd fcf0 	bl	100b2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   126d2:	e7ff      	b.n	126d4 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x250>
   126d4:	a8a2      	add	r0, sp, #648	; 0x288
   126d6:	a96d      	add	r1, sp, #436	; 0x1b4
   126d8:	226c      	movs	r2, #108	; 0x6c
                    return Some(row);
   126da:	9002      	str	r0, [sp, #8]
   126dc:	9201      	str	r2, [sp, #4]
   126de:	f007 fef3 	bl	1a4c8 <__aeabi_memcpy>
   126e2:	9815      	ldr	r0, [sp, #84]	; 0x54
   126e4:	3004      	adds	r0, #4
   126e6:	9902      	ldr	r1, [sp, #8]
   126e8:	9a01      	ldr	r2, [sp, #4]
   126ea:	f007 feed 	bl	1a4c8 <__aeabi_memcpy>
   126ee:	2001      	movs	r0, #1
   126f0:	9915      	ldr	r1, [sp, #84]	; 0x54
   126f2:	6008      	str	r0, [r1, #0]
   126f4:	e70e      	b.n	12514 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   126f6:	f24d 0030 	movw	r0, #53296	; 0xd030
   126fa:	f2c0 0001 	movt	r0, #1
   126fe:	f24d 021c 	movw	r2, #53276	; 0xd01c
   12702:	f2c0 0201 	movt	r2, #1
   12706:	211c      	movs	r1, #28
   12708:	f001 fb0a 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1270c:	defe      	udf	#254	; 0xfe

0001270e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E>:
    fn next(&mut self) -> Option<Self::Item> {
   1270e:	b580      	push	{r7, lr}
   12710:	f5ad 6dc8 	sub.w	sp, sp, #1600	; 0x640
   12714:	f8cd 1638 	str.w	r1, [sp, #1592]	; 0x638
   12718:	2200      	movs	r2, #0
        loop {
   1271a:	f88d 2637 	strb.w	r2, [sp, #1591]	; 0x637
   1271e:	911f      	str	r1, [sp, #124]	; 0x7c
   12720:	901e      	str	r0, [sp, #120]	; 0x78
   12722:	e7ff      	b.n	12724 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x16>
   12724:	2001      	movs	r0, #1
            let next_row = self.rows.next();
   12726:	f88d 0637 	strb.w	r0, [sp, #1591]	; 0x637
   1272a:	a820      	add	r0, sp, #128	; 0x80
   1272c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1272e:	f7ff fea9 	bl	12484 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hec710f5f3fb736c0E>
   12732:	e7ff      	b.n	12734 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x26>
                None => {  //  If no more Pixel Rows...
   12734:	9820      	ldr	r0, [sp, #128]	; 0x80
   12736:	2800      	cmp	r0, #0
   12738:	d026      	beq.n	12788 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x7a>
   1273a:	e7ff      	b.n	1273c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x2e>
   1273c:	a820      	add	r0, sp, #128	; 0x80
                Some(PixelRow { x_left, x_right, y, colors, .. }) => {  //  If there is a Pixel Row...
   1273e:	1d01      	adds	r1, r0, #4
   12740:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   12744:	4602      	mov	r2, r0
   12746:	f88d 063d 	strb.w	r0, [sp, #1597]	; 0x63d
   1274a:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   1274e:	4603      	mov	r3, r0
   12750:	f88d 063e 	strb.w	r0, [sp, #1598]	; 0x63e
   12754:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   12758:	4684      	mov	ip, r0
   1275a:	f88d 063f 	strb.w	r0, [sp, #1599]	; 0x63f
   1275e:	2000      	movs	r0, #0
   12760:	f88d 0637 	strb.w	r0, [sp, #1591]	; 0x637
   12764:	a8d7      	add	r0, sp, #860	; 0x35c
   12766:	f04f 0e68 	mov.w	lr, #104	; 0x68
   1276a:	921d      	str	r2, [sp, #116]	; 0x74
   1276c:	4672      	mov	r2, lr
   1276e:	931c      	str	r3, [sp, #112]	; 0x70
   12770:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   12774:	f007 fea8 	bl	1a4c8 <__aeabi_memcpy>
                    if self.first_row {
   12778:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1277a:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
   1277e:	07c9      	lsls	r1, r1, #31
   12780:	2900      	cmp	r1, #0
   12782:	d15a      	bne.n	1283a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x12c>
   12784:	e04e      	b.n	12824 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x116>
            match next_row {
   12786:	defe      	udf	#254	; 0xfe
                    if self.first_row {
   12788:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1278a:	f890 115c 	ldrb.w	r1, [r0, #348]	; 0x15c
   1278e:	07c9      	lsls	r1, r1, #31
   12790:	2900      	cmp	r1, #0
   12792:	d115      	bne.n	127c0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0xb2>
   12794:	e7ff      	b.n	12796 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x88>
                        x_left: self.x_left,
   12796:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12798:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
                        x_right: self.x_right,
   1279c:	f890 2159 	ldrb.w	r2, [r0, #345]	; 0x159
                        y_top: self.y_top,
   127a0:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
                        y_bottom: self.y_bottom,
   127a4:	f890 c15b 	ldrb.w	ip, [r0, #347]	; 0x15b
                        colors: self.colors.clone(),
   127a8:	f100 0e8c 	add.w	lr, r0, #140	; 0x8c
   127ac:	a870      	add	r0, sp, #448	; 0x1c0
   127ae:	911a      	str	r1, [sp, #104]	; 0x68
   127b0:	4671      	mov	r1, lr
   127b2:	9219      	str	r2, [sp, #100]	; 0x64
   127b4:	9318      	str	r3, [sp, #96]	; 0x60
   127b6:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   127ba:	f7fd f867 	bl	f88c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   127be:	e003      	b.n	127c8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0xba>
   127c0:	2000      	movs	r0, #0
                        return None;  //  No rows to group
   127c2:	991e      	ldr	r1, [sp, #120]	; 0x78
   127c4:	6008      	str	r0, [r1, #0]
   127c6:	e153      	b.n	12a70 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x362>
                    let row = PixelBlock {
   127c8:	981a      	ldr	r0, [sp, #104]	; 0x68
   127ca:	f88d 01bc 	strb.w	r0, [sp, #444]	; 0x1bc
   127ce:	9919      	ldr	r1, [sp, #100]	; 0x64
   127d0:	f88d 11bd 	strb.w	r1, [sp, #445]	; 0x1bd
   127d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   127d6:	f88d 21be 	strb.w	r2, [sp, #446]	; 0x1be
   127da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   127dc:	f88d 31bf 	strb.w	r3, [sp, #447]	; 0x1bf
   127e0:	a83c      	add	r0, sp, #240	; 0xf0
   127e2:	a970      	add	r1, sp, #448	; 0x1c0
   127e4:	22cc      	movs	r2, #204	; 0xcc
   127e6:	f007 fe6f 	bl	1a4c8 <__aeabi_memcpy>
                    self.colors.clear();
   127ea:	981f      	ldr	r0, [sp, #124]	; 0x7c
   127ec:	308c      	adds	r0, #140	; 0x8c
   127ee:	f7fd f90a 	bl	fa06 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   127f2:	e7ff      	b.n	127f4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0xe6>
   127f4:	2001      	movs	r0, #1
                    self.first_row = true;
   127f6:	991f      	ldr	r1, [sp, #124]	; 0x7c
   127f8:	f881 015c 	strb.w	r0, [r1, #348]	; 0x15c
   127fc:	aaa3      	add	r2, sp, #652	; 0x28c
   127fe:	a93c      	add	r1, sp, #240	; 0xf0
   12800:	23d0      	movs	r3, #208	; 0xd0
                    return Some(row);
   12802:	9016      	str	r0, [sp, #88]	; 0x58
   12804:	4610      	mov	r0, r2
   12806:	9215      	str	r2, [sp, #84]	; 0x54
   12808:	461a      	mov	r2, r3
   1280a:	9314      	str	r3, [sp, #80]	; 0x50
   1280c:	f007 fe5c 	bl	1a4c8 <__aeabi_memcpy>
   12810:	981e      	ldr	r0, [sp, #120]	; 0x78
   12812:	3004      	adds	r0, #4
   12814:	9915      	ldr	r1, [sp, #84]	; 0x54
   12816:	9a14      	ldr	r2, [sp, #80]	; 0x50
   12818:	f007 fe56 	bl	1a4c8 <__aeabi_memcpy>
   1281c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1281e:	991e      	ldr	r1, [sp, #120]	; 0x78
   12820:	6008      	str	r0, [r1, #0]
   12822:	e125      	b.n	12a70 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x362>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   12824:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12826:	f890 115b 	ldrb.w	r1, [r0, #347]	; 0x15b
   1282a:	3101      	adds	r1, #1
   1282c:	b2ca      	uxtb	r2, r1
   1282e:	460b      	mov	r3, r1
   12830:	428a      	cmp	r2, r1
   12832:	9313      	str	r3, [sp, #76]	; 0x4c
   12834:	f040 8128 	bne.w	12a88 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x37a>
   12838:	e069      	b.n	1290e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x200>
   1283a:	2000      	movs	r0, #0
                        self.first_row = false;
   1283c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1283e:	f881 015c 	strb.w	r0, [r1, #348]	; 0x15c
                        self.x_left = x_left;
   12842:	981d      	ldr	r0, [sp, #116]	; 0x74
   12844:	f881 0158 	strb.w	r0, [r1, #344]	; 0x158
                        self.x_right = x_right;
   12848:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1284a:	f881 2159 	strb.w	r2, [r1, #345]	; 0x159
                        self.y_top = y;
   1284e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   12850:	f881 315a 	strb.w	r3, [r1, #346]	; 0x15a
                        self.y_bottom = y;
   12854:	f881 315b 	strb.w	r3, [r1, #347]	; 0x15b
                        self.colors.clear();
   12858:	f101 008c 	add.w	r0, r1, #140	; 0x8c
   1285c:	f7fd f8d3 	bl	fa06 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   12860:	e7ff      	b.n	12862 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x154>
                        self.colors.extend_from_slice(&colors)
   12862:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12864:	f100 018c 	add.w	r1, r0, #140	; 0x8c
   12868:	a8d7      	add	r0, sp, #860	; 0x35c
   1286a:	9112      	str	r1, [sp, #72]	; 0x48
   1286c:	f7fd f83e 	bl	f8ec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   12870:	9011      	str	r0, [sp, #68]	; 0x44
   12872:	9110      	str	r1, [sp, #64]	; 0x40
   12874:	e7ff      	b.n	12876 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x168>
   12876:	9812      	ldr	r0, [sp, #72]	; 0x48
   12878:	9911      	ldr	r1, [sp, #68]	; 0x44
   1287a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1287c:	f7fd f87f 	bl	f97e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   12880:	900f      	str	r0, [sp, #60]	; 0x3c
   12882:	e7ff      	b.n	12884 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x176>
   12884:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12886:	f000 0001 	and.w	r0, r0, #1
   1288a:	f64c 71a4 	movw	r1, #53156	; 0xcfa4
   1288e:	f2c0 0101 	movt	r1, #1
   12892:	f24d 035c 	movw	r3, #53340	; 0xd05c
   12896:	f2c0 0301 	movt	r3, #1
   1289a:	2205      	movs	r2, #5
   1289c:	f7fd fc3a 	bl	10114 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   128a0:	e7ff      	b.n	128a2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x194>
                        continue;
   128a2:	e7ff      	b.n	128a4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x196>
   128a4:	a8d7      	add	r0, sp, #860	; 0x35c
            }
   128a6:	f7f7 fdbf 	bl	a428 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   128aa:	e7ff      	b.n	128ac <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x19e>
        }
   128ac:	9820      	ldr	r0, [sp, #128]	; 0x80
   128ae:	2801      	cmp	r0, #1
   128b0:	f000 80e2 	beq.w	12a78 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x36a>
   128b4:	e0e4      	b.n	12a80 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x372>
   128b6:	2001      	movs	r0, #1
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   128b8:	f88d 03c5 	strb.w	r0, [sp, #965]	; 0x3c5
   128bc:	e00b      	b.n	128d6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x1c8>
   128be:	2000      	movs	r0, #0
   128c0:	f88d 03c5 	strb.w	r0, [sp, #965]	; 0x3c5
   128c4:	e007      	b.n	128d6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x1c8>
   128c6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   128c8:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
   128cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   128ce:	b2d3      	uxtb	r3, r2
   128d0:	428b      	cmp	r3, r1
   128d2:	d0f0      	beq.n	128b6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x1a8>
   128d4:	e7f3      	b.n	128be <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x1b0>
   128d6:	f89d 03c5 	ldrb.w	r0, [sp, #965]	; 0x3c5
   128da:	07c0      	lsls	r0, r0, #31
   128dc:	2800      	cmp	r0, #0
   128de:	d11d      	bne.n	1291c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x20e>
   128e0:	e03f      	b.n	12962 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x254>
   128e2:	2001      	movs	r0, #1
   128e4:	f88d 03c6 	strb.w	r0, [sp, #966]	; 0x3c6
   128e8:	e00b      	b.n	12902 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x1f4>
   128ea:	2000      	movs	r0, #0
   128ec:	f88d 03c6 	strb.w	r0, [sp, #966]	; 0x3c6
   128f0:	e007      	b.n	12902 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x1f4>
   128f2:	981f      	ldr	r0, [sp, #124]	; 0x7c
   128f4:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
   128f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   128fa:	b2d3      	uxtb	r3, r2
   128fc:	428b      	cmp	r3, r1
   128fe:	d0f0      	beq.n	128e2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x1d4>
   12900:	e7f3      	b.n	128ea <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x1dc>
   12902:	f89d 03c6 	ldrb.w	r0, [sp, #966]	; 0x3c6
   12906:	07c0      	lsls	r0, r0, #31
   12908:	2800      	cmp	r0, #0
   1290a:	d1dc      	bne.n	128c6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x1b8>
   1290c:	e7d7      	b.n	128be <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x1b0>
   1290e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12910:	b2c1      	uxtb	r1, r0
   12912:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   12914:	b2d3      	uxtb	r3, r2
   12916:	428b      	cmp	r3, r1
   12918:	d0eb      	beq.n	128f2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x1e4>
   1291a:	e7e6      	b.n	128ea <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x1dc>
                        if self.colors.extend_from_slice(&colors).is_ok() {
   1291c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1291e:	f100 018c 	add.w	r1, r0, #140	; 0x8c
   12922:	a8d7      	add	r0, sp, #860	; 0x35c
   12924:	910e      	str	r1, [sp, #56]	; 0x38
   12926:	f7fc ffe1 	bl	f8ec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   1292a:	900d      	str	r0, [sp, #52]	; 0x34
   1292c:	910c      	str	r1, [sp, #48]	; 0x30
   1292e:	e7ff      	b.n	12930 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x222>
   12930:	980e      	ldr	r0, [sp, #56]	; 0x38
   12932:	990d      	ldr	r1, [sp, #52]	; 0x34
   12934:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12936:	f7fd f822 	bl	f97e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   1293a:	f88d 03c7 	strb.w	r0, [sp, #967]	; 0x3c7
   1293e:	e7ff      	b.n	12940 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x232>
   12940:	f20d 30c7 	addw	r0, sp, #967	; 0x3c7
   12944:	f7fd fba2 	bl	1008c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>
   12948:	900b      	str	r0, [sp, #44]	; 0x2c
   1294a:	e7ff      	b.n	1294c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x23e>
   1294c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1294e:	07c1      	lsls	r1, r0, #31
   12950:	2900      	cmp	r1, #0
   12952:	d101      	bne.n	12958 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x24a>
   12954:	e7ff      	b.n	12956 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x248>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   12956:	e004      	b.n	12962 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x254>
                            self.y_bottom = y;
   12958:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1295a:	991f      	ldr	r1, [sp, #124]	; 0x7c
   1295c:	f881 015b 	strb.w	r0, [r1, #347]	; 0x15b
                            continue;    
   12960:	e7a0      	b.n	128a4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x196>
                        x_left: self.x_left,
   12962:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12964:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
                        x_right: self.x_right,
   12968:	f890 2159 	ldrb.w	r2, [r0, #345]	; 0x159
                        y_top: self.y_top,
   1296c:	f890 315a 	ldrb.w	r3, [r0, #346]	; 0x15a
                        y_bottom: self.y_bottom,
   12970:	f890 c15b 	ldrb.w	ip, [r0, #347]	; 0x15b
                        colors: self.colors.clone(),
   12974:	f100 0e8c 	add.w	lr, r0, #140	; 0x8c
   12978:	f50d 6093 	add.w	r0, sp, #1176	; 0x498
   1297c:	910a      	str	r1, [sp, #40]	; 0x28
   1297e:	4671      	mov	r1, lr
   12980:	9209      	str	r2, [sp, #36]	; 0x24
   12982:	9308      	str	r3, [sp, #32]
   12984:	f8cd c01c 	str.w	ip, [sp, #28]
   12988:	f7fc ff80 	bl	f88c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   1298c:	e7ff      	b.n	1298e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x280>
                    let row = PixelBlock {
   1298e:	980a      	ldr	r0, [sp, #40]	; 0x28
   12990:	f88d 0494 	strb.w	r0, [sp, #1172]	; 0x494
   12994:	9909      	ldr	r1, [sp, #36]	; 0x24
   12996:	f88d 1495 	strb.w	r1, [sp, #1173]	; 0x495
   1299a:	9a08      	ldr	r2, [sp, #32]
   1299c:	f88d 2496 	strb.w	r2, [sp, #1174]	; 0x496
   129a0:	9b07      	ldr	r3, [sp, #28]
   129a2:	f88d 3497 	strb.w	r3, [sp, #1175]	; 0x497
   129a6:	a8f2      	add	r0, sp, #968	; 0x3c8
   129a8:	f50d 6193 	add.w	r1, sp, #1176	; 0x498
   129ac:	22cc      	movs	r2, #204	; 0xcc
   129ae:	f007 fd8b 	bl	1a4c8 <__aeabi_memcpy>
                    self.x_left = x_left;
   129b2:	981d      	ldr	r0, [sp, #116]	; 0x74
   129b4:	991f      	ldr	r1, [sp, #124]	; 0x7c
   129b6:	f881 0158 	strb.w	r0, [r1, #344]	; 0x158
                    self.x_right = x_right;
   129ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   129bc:	f881 2159 	strb.w	r2, [r1, #345]	; 0x159
                    self.y_top = y;
   129c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   129c2:	f881 315a 	strb.w	r3, [r1, #346]	; 0x15a
                    self.y_bottom = y;
   129c6:	f881 315b 	strb.w	r3, [r1, #347]	; 0x15b
                    self.colors.clear();
   129ca:	f101 008c 	add.w	r0, r1, #140	; 0x8c
   129ce:	f7fd f81a 	bl	fa06 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   129d2:	e7ff      	b.n	129d4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x2c6>
                    self.colors.extend_from_slice(&colors)
   129d4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   129d6:	f100 018c 	add.w	r1, r0, #140	; 0x8c
   129da:	a8d7      	add	r0, sp, #860	; 0x35c
   129dc:	9106      	str	r1, [sp, #24]
   129de:	f7fc ff85 	bl	f8ec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   129e2:	9005      	str	r0, [sp, #20]
   129e4:	9104      	str	r1, [sp, #16]
   129e6:	e7ff      	b.n	129e8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x2da>
   129e8:	9806      	ldr	r0, [sp, #24]
   129ea:	9905      	ldr	r1, [sp, #20]
   129ec:	9a04      	ldr	r2, [sp, #16]
   129ee:	f7fc ffc6 	bl	f97e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   129f2:	9003      	str	r0, [sp, #12]
   129f4:	e7ff      	b.n	129f6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x2e8>
   129f6:	9803      	ldr	r0, [sp, #12]
   129f8:	f000 0001 	and.w	r0, r0, #1
   129fc:	f64c 71a4 	movw	r1, #53156	; 0xcfa4
   12a00:	f2c0 0101 	movt	r1, #1
   12a04:	f24d 037c 	movw	r3, #53372	; 0xd07c
   12a08:	f2c0 0301 	movt	r3, #1
   12a0c:	2205      	movs	r2, #5
   12a0e:	f7fd fb81 	bl	10114 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   12a12:	e7ff      	b.n	12a14 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x306>
   12a14:	f20d 5064 	addw	r0, sp, #1380	; 0x564
   12a18:	a9f2      	add	r1, sp, #968	; 0x3c8
   12a1a:	22d0      	movs	r2, #208	; 0xd0
                    return Some(row);
   12a1c:	9002      	str	r0, [sp, #8]
   12a1e:	9201      	str	r2, [sp, #4]
   12a20:	f007 fd52 	bl	1a4c8 <__aeabi_memcpy>
   12a24:	981e      	ldr	r0, [sp, #120]	; 0x78
   12a26:	3004      	adds	r0, #4
   12a28:	9902      	ldr	r1, [sp, #8]
   12a2a:	9a01      	ldr	r2, [sp, #4]
   12a2c:	f007 fd4c 	bl	1a4c8 <__aeabi_memcpy>
   12a30:	2001      	movs	r0, #1
   12a32:	991e      	ldr	r1, [sp, #120]	; 0x78
   12a34:	6008      	str	r0, [r1, #0]
   12a36:	a8d7      	add	r0, sp, #860	; 0x35c
            }
   12a38:	f7f7 fcf6 	bl	a428 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   12a3c:	e7ff      	b.n	12a3e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x330>
                    return Some(row);
   12a3e:	e017      	b.n	12a70 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x362>
   12a40:	2000      	movs	r0, #0
        }
   12a42:	f88d 0637 	strb.w	r0, [sp, #1591]	; 0x637
    }
   12a46:	f50d 6dc8 	add.w	sp, sp, #1600	; 0x640
   12a4a:	bd80      	pop	{r7, pc}
        }
   12a4c:	f89d 0637 	ldrb.w	r0, [sp, #1591]	; 0x637
   12a50:	07c0      	lsls	r0, r0, #31
   12a52:	2800      	cmp	r0, #0
   12a54:	d0f4      	beq.n	12a40 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x332>
   12a56:	e7ff      	b.n	12a58 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x34a>
   12a58:	2000      	movs	r0, #0
   12a5a:	f88d 0637 	strb.w	r0, [sp, #1591]	; 0x637
   12a5e:	a820      	add	r0, sp, #128	; 0x80
   12a60:	3004      	adds	r0, #4
   12a62:	f7f7 fce1 	bl	a428 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   12a66:	e7eb      	b.n	12a40 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x332>
   12a68:	a820      	add	r0, sp, #128	; 0x80
   12a6a:	f7f7 fca2 	bl	a3b2 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   12a6e:	e7e7      	b.n	12a40 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x332>
   12a70:	9820      	ldr	r0, [sp, #128]	; 0x80
   12a72:	2801      	cmp	r0, #1
   12a74:	d0ea      	beq.n	12a4c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x33e>
   12a76:	e7f7      	b.n	12a68 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x35a>
   12a78:	2000      	movs	r0, #0
   12a7a:	f88d 0637 	strb.w	r0, [sp, #1591]	; 0x637
                        continue;
   12a7e:	e651      	b.n	12724 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x16>
   12a80:	a820      	add	r0, sp, #128	; 0x80
        }
   12a82:	f7f7 fc96 	bl	a3b2 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   12a86:	e7f7      	b.n	12a78 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E+0x36a>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   12a88:	f24d 0030 	movw	r0, #53296	; 0xd030
   12a8c:	f2c0 0001 	movt	r0, #1
   12a90:	f24d 026c 	movw	r2, #53356	; 0xd06c
   12a94:	f2c0 0201 	movt	r2, #1
   12a98:	211c      	movs	r1, #28
   12a9a:	f001 f941 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12a9e:	defe      	udf	#254	; 0xfe

00012aa0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E>:
    fn next(&mut self) -> Option<Self::Item> {
   12aa0:	b580      	push	{r7, lr}
   12aa2:	f5ad 6dc8 	sub.w	sp, sp, #1600	; 0x640
   12aa6:	f8cd 1638 	str.w	r1, [sp, #1592]	; 0x638
   12aaa:	2200      	movs	r2, #0
        loop {
   12aac:	f88d 2637 	strb.w	r2, [sp, #1591]	; 0x637
   12ab0:	911f      	str	r1, [sp, #124]	; 0x7c
   12ab2:	901e      	str	r0, [sp, #120]	; 0x78
   12ab4:	e7ff      	b.n	12ab6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x16>
   12ab6:	2001      	movs	r0, #1
            let next_row = self.rows.next();
   12ab8:	f88d 0637 	strb.w	r0, [sp, #1591]	; 0x637
   12abc:	a820      	add	r0, sp, #128	; 0x80
   12abe:	991f      	ldr	r1, [sp, #124]	; 0x7c
   12ac0:	f7ff fb9b 	bl	121fa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2fc91c372eff87faE>
   12ac4:	e7ff      	b.n	12ac6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x26>
                None => {  //  If no more Pixel Rows...
   12ac6:	9820      	ldr	r0, [sp, #128]	; 0x80
   12ac8:	2800      	cmp	r0, #0
   12aca:	d026      	beq.n	12b1a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x7a>
   12acc:	e7ff      	b.n	12ace <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x2e>
   12ace:	a820      	add	r0, sp, #128	; 0x80
                Some(PixelRow { x_left, x_right, y, colors, .. }) => {  //  If there is a Pixel Row...
   12ad0:	1d01      	adds	r1, r0, #4
   12ad2:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   12ad6:	4602      	mov	r2, r0
   12ad8:	f88d 063d 	strb.w	r0, [sp, #1597]	; 0x63d
   12adc:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   12ae0:	4603      	mov	r3, r0
   12ae2:	f88d 063e 	strb.w	r0, [sp, #1598]	; 0x63e
   12ae6:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   12aea:	4684      	mov	ip, r0
   12aec:	f88d 063f 	strb.w	r0, [sp, #1599]	; 0x63f
   12af0:	2000      	movs	r0, #0
   12af2:	f88d 0637 	strb.w	r0, [sp, #1591]	; 0x637
   12af6:	a8d7      	add	r0, sp, #860	; 0x35c
   12af8:	f04f 0e68 	mov.w	lr, #104	; 0x68
   12afc:	921d      	str	r2, [sp, #116]	; 0x74
   12afe:	4672      	mov	r2, lr
   12b00:	931c      	str	r3, [sp, #112]	; 0x70
   12b02:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   12b06:	f007 fcdf 	bl	1a4c8 <__aeabi_memcpy>
                    if self.first_row {
   12b0a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12b0c:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   12b10:	07c9      	lsls	r1, r1, #31
   12b12:	2900      	cmp	r1, #0
   12b14:	d15a      	bne.n	12bcc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x12c>
   12b16:	e04e      	b.n	12bb6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x116>
            match next_row {
   12b18:	defe      	udf	#254	; 0xfe
                    if self.first_row {
   12b1a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12b1c:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   12b20:	07c9      	lsls	r1, r1, #31
   12b22:	2900      	cmp	r1, #0
   12b24:	d115      	bne.n	12b52 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0xb2>
   12b26:	e7ff      	b.n	12b28 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x88>
                        x_left: self.x_left,
   12b28:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12b2a:	f890 1164 	ldrb.w	r1, [r0, #356]	; 0x164
                        x_right: self.x_right,
   12b2e:	f890 2165 	ldrb.w	r2, [r0, #357]	; 0x165
                        y_top: self.y_top,
   12b32:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
                        y_bottom: self.y_bottom,
   12b36:	f890 c167 	ldrb.w	ip, [r0, #359]	; 0x167
                        colors: self.colors.clone(),
   12b3a:	f100 0e98 	add.w	lr, r0, #152	; 0x98
   12b3e:	a870      	add	r0, sp, #448	; 0x1c0
   12b40:	911a      	str	r1, [sp, #104]	; 0x68
   12b42:	4671      	mov	r1, lr
   12b44:	9219      	str	r2, [sp, #100]	; 0x64
   12b46:	9318      	str	r3, [sp, #96]	; 0x60
   12b48:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   12b4c:	f7fc fe9e 	bl	f88c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   12b50:	e003      	b.n	12b5a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0xba>
   12b52:	2000      	movs	r0, #0
                        return None;  //  No rows to group
   12b54:	991e      	ldr	r1, [sp, #120]	; 0x78
   12b56:	6008      	str	r0, [r1, #0]
   12b58:	e153      	b.n	12e02 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x362>
                    let row = PixelBlock {
   12b5a:	981a      	ldr	r0, [sp, #104]	; 0x68
   12b5c:	f88d 01bc 	strb.w	r0, [sp, #444]	; 0x1bc
   12b60:	9919      	ldr	r1, [sp, #100]	; 0x64
   12b62:	f88d 11bd 	strb.w	r1, [sp, #445]	; 0x1bd
   12b66:	9a18      	ldr	r2, [sp, #96]	; 0x60
   12b68:	f88d 21be 	strb.w	r2, [sp, #446]	; 0x1be
   12b6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12b6e:	f88d 31bf 	strb.w	r3, [sp, #447]	; 0x1bf
   12b72:	a83c      	add	r0, sp, #240	; 0xf0
   12b74:	a970      	add	r1, sp, #448	; 0x1c0
   12b76:	22cc      	movs	r2, #204	; 0xcc
   12b78:	f007 fca6 	bl	1a4c8 <__aeabi_memcpy>
                    self.colors.clear();
   12b7c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12b7e:	3098      	adds	r0, #152	; 0x98
   12b80:	f7fc ff41 	bl	fa06 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   12b84:	e7ff      	b.n	12b86 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0xe6>
   12b86:	2001      	movs	r0, #1
                    self.first_row = true;
   12b88:	991f      	ldr	r1, [sp, #124]	; 0x7c
   12b8a:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   12b8e:	aaa3      	add	r2, sp, #652	; 0x28c
   12b90:	a93c      	add	r1, sp, #240	; 0xf0
   12b92:	23d0      	movs	r3, #208	; 0xd0
                    return Some(row);
   12b94:	9016      	str	r0, [sp, #88]	; 0x58
   12b96:	4610      	mov	r0, r2
   12b98:	9215      	str	r2, [sp, #84]	; 0x54
   12b9a:	461a      	mov	r2, r3
   12b9c:	9314      	str	r3, [sp, #80]	; 0x50
   12b9e:	f007 fc93 	bl	1a4c8 <__aeabi_memcpy>
   12ba2:	981e      	ldr	r0, [sp, #120]	; 0x78
   12ba4:	3004      	adds	r0, #4
   12ba6:	9915      	ldr	r1, [sp, #84]	; 0x54
   12ba8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   12baa:	f007 fc8d 	bl	1a4c8 <__aeabi_memcpy>
   12bae:	9816      	ldr	r0, [sp, #88]	; 0x58
   12bb0:	991e      	ldr	r1, [sp, #120]	; 0x78
   12bb2:	6008      	str	r0, [r1, #0]
   12bb4:	e125      	b.n	12e02 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x362>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   12bb6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12bb8:	f890 1167 	ldrb.w	r1, [r0, #359]	; 0x167
   12bbc:	3101      	adds	r1, #1
   12bbe:	b2ca      	uxtb	r2, r1
   12bc0:	460b      	mov	r3, r1
   12bc2:	428a      	cmp	r2, r1
   12bc4:	9313      	str	r3, [sp, #76]	; 0x4c
   12bc6:	f040 8128 	bne.w	12e1a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x37a>
   12bca:	e069      	b.n	12ca0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x200>
   12bcc:	2000      	movs	r0, #0
                        self.first_row = false;
   12bce:	991f      	ldr	r1, [sp, #124]	; 0x7c
   12bd0:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
                        self.x_left = x_left;
   12bd4:	981d      	ldr	r0, [sp, #116]	; 0x74
   12bd6:	f881 0164 	strb.w	r0, [r1, #356]	; 0x164
                        self.x_right = x_right;
   12bda:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   12bdc:	f881 2165 	strb.w	r2, [r1, #357]	; 0x165
                        self.y_top = y;
   12be0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   12be2:	f881 3166 	strb.w	r3, [r1, #358]	; 0x166
                        self.y_bottom = y;
   12be6:	f881 3167 	strb.w	r3, [r1, #359]	; 0x167
                        self.colors.clear();
   12bea:	f101 0098 	add.w	r0, r1, #152	; 0x98
   12bee:	f7fc ff0a 	bl	fa06 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   12bf2:	e7ff      	b.n	12bf4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x154>
                        self.colors.extend_from_slice(&colors)
   12bf4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12bf6:	f100 0198 	add.w	r1, r0, #152	; 0x98
   12bfa:	a8d7      	add	r0, sp, #860	; 0x35c
   12bfc:	9112      	str	r1, [sp, #72]	; 0x48
   12bfe:	f7fc fe75 	bl	f8ec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   12c02:	9011      	str	r0, [sp, #68]	; 0x44
   12c04:	9110      	str	r1, [sp, #64]	; 0x40
   12c06:	e7ff      	b.n	12c08 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x168>
   12c08:	9812      	ldr	r0, [sp, #72]	; 0x48
   12c0a:	9911      	ldr	r1, [sp, #68]	; 0x44
   12c0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   12c0e:	f7fc feb6 	bl	f97e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   12c12:	900f      	str	r0, [sp, #60]	; 0x3c
   12c14:	e7ff      	b.n	12c16 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x176>
   12c16:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12c18:	f000 0001 	and.w	r0, r0, #1
   12c1c:	f64c 71a4 	movw	r1, #53156	; 0xcfa4
   12c20:	f2c0 0101 	movt	r1, #1
   12c24:	f24d 035c 	movw	r3, #53340	; 0xd05c
   12c28:	f2c0 0301 	movt	r3, #1
   12c2c:	2205      	movs	r2, #5
   12c2e:	f7fd fa71 	bl	10114 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   12c32:	e7ff      	b.n	12c34 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x194>
                        continue;
   12c34:	e7ff      	b.n	12c36 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x196>
   12c36:	a8d7      	add	r0, sp, #860	; 0x35c
            }
   12c38:	f7f7 fbf6 	bl	a428 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   12c3c:	e7ff      	b.n	12c3e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x19e>
        }
   12c3e:	9820      	ldr	r0, [sp, #128]	; 0x80
   12c40:	2801      	cmp	r0, #1
   12c42:	f000 80e2 	beq.w	12e0a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x36a>
   12c46:	e0e4      	b.n	12e12 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x372>
   12c48:	2001      	movs	r0, #1
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   12c4a:	f88d 03c5 	strb.w	r0, [sp, #965]	; 0x3c5
   12c4e:	e00b      	b.n	12c68 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x1c8>
   12c50:	2000      	movs	r0, #0
   12c52:	f88d 03c5 	strb.w	r0, [sp, #965]	; 0x3c5
   12c56:	e007      	b.n	12c68 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x1c8>
   12c58:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12c5a:	f890 1165 	ldrb.w	r1, [r0, #357]	; 0x165
   12c5e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   12c60:	b2d3      	uxtb	r3, r2
   12c62:	428b      	cmp	r3, r1
   12c64:	d0f0      	beq.n	12c48 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x1a8>
   12c66:	e7f3      	b.n	12c50 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x1b0>
   12c68:	f89d 03c5 	ldrb.w	r0, [sp, #965]	; 0x3c5
   12c6c:	07c0      	lsls	r0, r0, #31
   12c6e:	2800      	cmp	r0, #0
   12c70:	d11d      	bne.n	12cae <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x20e>
   12c72:	e03f      	b.n	12cf4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x254>
   12c74:	2001      	movs	r0, #1
   12c76:	f88d 03c6 	strb.w	r0, [sp, #966]	; 0x3c6
   12c7a:	e00b      	b.n	12c94 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x1f4>
   12c7c:	2000      	movs	r0, #0
   12c7e:	f88d 03c6 	strb.w	r0, [sp, #966]	; 0x3c6
   12c82:	e007      	b.n	12c94 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x1f4>
   12c84:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12c86:	f890 1164 	ldrb.w	r1, [r0, #356]	; 0x164
   12c8a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   12c8c:	b2d3      	uxtb	r3, r2
   12c8e:	428b      	cmp	r3, r1
   12c90:	d0f0      	beq.n	12c74 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x1d4>
   12c92:	e7f3      	b.n	12c7c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x1dc>
   12c94:	f89d 03c6 	ldrb.w	r0, [sp, #966]	; 0x3c6
   12c98:	07c0      	lsls	r0, r0, #31
   12c9a:	2800      	cmp	r0, #0
   12c9c:	d1dc      	bne.n	12c58 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x1b8>
   12c9e:	e7d7      	b.n	12c50 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x1b0>
   12ca0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12ca2:	b2c1      	uxtb	r1, r0
   12ca4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   12ca6:	b2d3      	uxtb	r3, r2
   12ca8:	428b      	cmp	r3, r1
   12caa:	d0eb      	beq.n	12c84 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x1e4>
   12cac:	e7e6      	b.n	12c7c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x1dc>
                        if self.colors.extend_from_slice(&colors).is_ok() {
   12cae:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12cb0:	f100 0198 	add.w	r1, r0, #152	; 0x98
   12cb4:	a8d7      	add	r0, sp, #860	; 0x35c
   12cb6:	910e      	str	r1, [sp, #56]	; 0x38
   12cb8:	f7fc fe18 	bl	f8ec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   12cbc:	900d      	str	r0, [sp, #52]	; 0x34
   12cbe:	910c      	str	r1, [sp, #48]	; 0x30
   12cc0:	e7ff      	b.n	12cc2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x222>
   12cc2:	980e      	ldr	r0, [sp, #56]	; 0x38
   12cc4:	990d      	ldr	r1, [sp, #52]	; 0x34
   12cc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   12cc8:	f7fc fe59 	bl	f97e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   12ccc:	f88d 03c7 	strb.w	r0, [sp, #967]	; 0x3c7
   12cd0:	e7ff      	b.n	12cd2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x232>
   12cd2:	f20d 30c7 	addw	r0, sp, #967	; 0x3c7
   12cd6:	f7fd f9d9 	bl	1008c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>
   12cda:	900b      	str	r0, [sp, #44]	; 0x2c
   12cdc:	e7ff      	b.n	12cde <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x23e>
   12cde:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12ce0:	07c1      	lsls	r1, r0, #31
   12ce2:	2900      	cmp	r1, #0
   12ce4:	d101      	bne.n	12cea <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x24a>
   12ce6:	e7ff      	b.n	12ce8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x248>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   12ce8:	e004      	b.n	12cf4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x254>
                            self.y_bottom = y;
   12cea:	981b      	ldr	r0, [sp, #108]	; 0x6c
   12cec:	991f      	ldr	r1, [sp, #124]	; 0x7c
   12cee:	f881 0167 	strb.w	r0, [r1, #359]	; 0x167
                            continue;    
   12cf2:	e7a0      	b.n	12c36 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x196>
                        x_left: self.x_left,
   12cf4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12cf6:	f890 1164 	ldrb.w	r1, [r0, #356]	; 0x164
                        x_right: self.x_right,
   12cfa:	f890 2165 	ldrb.w	r2, [r0, #357]	; 0x165
                        y_top: self.y_top,
   12cfe:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
                        y_bottom: self.y_bottom,
   12d02:	f890 c167 	ldrb.w	ip, [r0, #359]	; 0x167
                        colors: self.colors.clone(),
   12d06:	f100 0e98 	add.w	lr, r0, #152	; 0x98
   12d0a:	f50d 6093 	add.w	r0, sp, #1176	; 0x498
   12d0e:	910a      	str	r1, [sp, #40]	; 0x28
   12d10:	4671      	mov	r1, lr
   12d12:	9209      	str	r2, [sp, #36]	; 0x24
   12d14:	9308      	str	r3, [sp, #32]
   12d16:	f8cd c01c 	str.w	ip, [sp, #28]
   12d1a:	f7fc fdb7 	bl	f88c <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   12d1e:	e7ff      	b.n	12d20 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x280>
                    let row = PixelBlock {
   12d20:	980a      	ldr	r0, [sp, #40]	; 0x28
   12d22:	f88d 0494 	strb.w	r0, [sp, #1172]	; 0x494
   12d26:	9909      	ldr	r1, [sp, #36]	; 0x24
   12d28:	f88d 1495 	strb.w	r1, [sp, #1173]	; 0x495
   12d2c:	9a08      	ldr	r2, [sp, #32]
   12d2e:	f88d 2496 	strb.w	r2, [sp, #1174]	; 0x496
   12d32:	9b07      	ldr	r3, [sp, #28]
   12d34:	f88d 3497 	strb.w	r3, [sp, #1175]	; 0x497
   12d38:	a8f2      	add	r0, sp, #968	; 0x3c8
   12d3a:	f50d 6193 	add.w	r1, sp, #1176	; 0x498
   12d3e:	22cc      	movs	r2, #204	; 0xcc
   12d40:	f007 fbc2 	bl	1a4c8 <__aeabi_memcpy>
                    self.x_left = x_left;
   12d44:	981d      	ldr	r0, [sp, #116]	; 0x74
   12d46:	991f      	ldr	r1, [sp, #124]	; 0x7c
   12d48:	f881 0164 	strb.w	r0, [r1, #356]	; 0x164
                    self.x_right = x_right;
   12d4c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   12d4e:	f881 2165 	strb.w	r2, [r1, #357]	; 0x165
                    self.y_top = y;
   12d52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   12d54:	f881 3166 	strb.w	r3, [r1, #358]	; 0x166
                    self.y_bottom = y;
   12d58:	f881 3167 	strb.w	r3, [r1, #359]	; 0x167
                    self.colors.clear();
   12d5c:	f101 0098 	add.w	r0, r1, #152	; 0x98
   12d60:	f7fc fe51 	bl	fa06 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   12d64:	e7ff      	b.n	12d66 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x2c6>
                    self.colors.extend_from_slice(&colors)
   12d66:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12d68:	f100 0198 	add.w	r1, r0, #152	; 0x98
   12d6c:	a8d7      	add	r0, sp, #860	; 0x35c
   12d6e:	9106      	str	r1, [sp, #24]
   12d70:	f7fc fdbc 	bl	f8ec <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   12d74:	9005      	str	r0, [sp, #20]
   12d76:	9104      	str	r1, [sp, #16]
   12d78:	e7ff      	b.n	12d7a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x2da>
   12d7a:	9806      	ldr	r0, [sp, #24]
   12d7c:	9905      	ldr	r1, [sp, #20]
   12d7e:	9a04      	ldr	r2, [sp, #16]
   12d80:	f7fc fdfd 	bl	f97e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   12d84:	9003      	str	r0, [sp, #12]
   12d86:	e7ff      	b.n	12d88 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x2e8>
   12d88:	9803      	ldr	r0, [sp, #12]
   12d8a:	f000 0001 	and.w	r0, r0, #1
   12d8e:	f64c 71a4 	movw	r1, #53156	; 0xcfa4
   12d92:	f2c0 0101 	movt	r1, #1
   12d96:	f24d 037c 	movw	r3, #53372	; 0xd07c
   12d9a:	f2c0 0301 	movt	r3, #1
   12d9e:	2205      	movs	r2, #5
   12da0:	f7fd f9b8 	bl	10114 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   12da4:	e7ff      	b.n	12da6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x306>
   12da6:	f20d 5064 	addw	r0, sp, #1380	; 0x564
   12daa:	a9f2      	add	r1, sp, #968	; 0x3c8
   12dac:	22d0      	movs	r2, #208	; 0xd0
                    return Some(row);
   12dae:	9002      	str	r0, [sp, #8]
   12db0:	9201      	str	r2, [sp, #4]
   12db2:	f007 fb89 	bl	1a4c8 <__aeabi_memcpy>
   12db6:	981e      	ldr	r0, [sp, #120]	; 0x78
   12db8:	3004      	adds	r0, #4
   12dba:	9902      	ldr	r1, [sp, #8]
   12dbc:	9a01      	ldr	r2, [sp, #4]
   12dbe:	f007 fb83 	bl	1a4c8 <__aeabi_memcpy>
   12dc2:	2001      	movs	r0, #1
   12dc4:	991e      	ldr	r1, [sp, #120]	; 0x78
   12dc6:	6008      	str	r0, [r1, #0]
   12dc8:	a8d7      	add	r0, sp, #860	; 0x35c
            }
   12dca:	f7f7 fb2d 	bl	a428 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   12dce:	e7ff      	b.n	12dd0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x330>
                    return Some(row);
   12dd0:	e017      	b.n	12e02 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x362>
   12dd2:	2000      	movs	r0, #0
        }
   12dd4:	f88d 0637 	strb.w	r0, [sp, #1591]	; 0x637
    }
   12dd8:	f50d 6dc8 	add.w	sp, sp, #1600	; 0x640
   12ddc:	bd80      	pop	{r7, pc}
        }
   12dde:	f89d 0637 	ldrb.w	r0, [sp, #1591]	; 0x637
   12de2:	07c0      	lsls	r0, r0, #31
   12de4:	2800      	cmp	r0, #0
   12de6:	d0f4      	beq.n	12dd2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x332>
   12de8:	e7ff      	b.n	12dea <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x34a>
   12dea:	2000      	movs	r0, #0
   12dec:	f88d 0637 	strb.w	r0, [sp, #1591]	; 0x637
   12df0:	a820      	add	r0, sp, #128	; 0x80
   12df2:	3004      	adds	r0, #4
   12df4:	f7f7 fb18 	bl	a428 <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   12df8:	e7eb      	b.n	12dd2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x332>
   12dfa:	a820      	add	r0, sp, #128	; 0x80
   12dfc:	f7f7 fad9 	bl	a3b2 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   12e00:	e7e7      	b.n	12dd2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x332>
   12e02:	9820      	ldr	r0, [sp, #128]	; 0x80
   12e04:	2801      	cmp	r0, #1
   12e06:	d0ea      	beq.n	12dde <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x33e>
   12e08:	e7f7      	b.n	12dfa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x35a>
   12e0a:	2000      	movs	r0, #0
   12e0c:	f88d 0637 	strb.w	r0, [sp, #1591]	; 0x637
                        continue;
   12e10:	e651      	b.n	12ab6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x16>
   12e12:	a820      	add	r0, sp, #128	; 0x80
        }
   12e14:	f7f7 facd 	bl	a3b2 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   12e18:	e7f7      	b.n	12e0a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E+0x36a>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   12e1a:	f24d 0030 	movw	r0, #53296	; 0xd030
   12e1e:	f2c0 0001 	movt	r0, #1
   12e22:	f24d 026c 	movw	r2, #53356	; 0xd06c
   12e26:	f2c0 0201 	movt	r2, #1
   12e2a:	211c      	movs	r1, #28
   12e2c:	f000 ff78 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12e30:	defe      	udf	#254	; 0xfe

00012e32 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E>:
pub fn draw_blocks<SPI, DC, RST, T>(display: &mut ST7735<SPI, DC, RST>, item_pixels: T) -> Result<(),()>
   12e32:	b570      	push	{r4, r5, r6, lr}
   12e34:	f5ad 6d48 	sub.w	sp, sp, #3200	; 0xc80
   12e38:	b082      	sub	sp, #8
   12e3a:	f8cd 0c78 	str.w	r0, [sp, #3192]	; 0xc78
   12e3e:	aa1c      	add	r2, sp, #112	; 0x70
    let pixels = item_pixels.into_iter();
   12e40:	4613      	mov	r3, r2
   12e42:	e8b1 5010 	ldmia.w	r1!, {r4, ip, lr}
   12e46:	e8a3 5010 	stmia.w	r3!, {r4, ip, lr}
   12e4a:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
   12e4e:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
   12e52:	a911      	add	r1, sp, #68	; 0x44
   12e54:	900f      	str	r0, [sp, #60]	; 0x3c
   12e56:	4608      	mov	r0, r1
   12e58:	4611      	mov	r1, r2
   12e5a:	f7fb ff5e 	bl	ed1a <_ZN129_$LT$embedded_graphics..fonts..font_builder..FontBuilder$LT$C$C$Conf$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hd063247fe992676fE>
   12e5e:	e7ff      	b.n	12e60 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x2e>
   12e60:	a811      	add	r0, sp, #68	; 0x44
   12e62:	a949      	add	r1, sp, #292	; 0x124
    let rows = to_rows(pixels);
   12e64:	460a      	mov	r2, r1
   12e66:	e8b0 5038 	ldmia.w	r0!, {r3, r4, r5, ip, lr}
   12e6a:	e8a2 5038 	stmia.w	r2!, {r3, r4, r5, ip, lr}
   12e6e:	e890 5078 	ldmia.w	r0, {r3, r4, r5, r6, ip, lr}
   12e72:	e882 5078 	stmia.w	r2, {r3, r4, r5, r6, ip, lr}
   12e76:	a823      	add	r0, sp, #140	; 0x8c
   12e78:	f000 f9c0 	bl	131fc <_ZN22piet_embedded_graphics5batch7to_rows17hdb266cd0c1904847E>
   12e7c:	e7ff      	b.n	12e7e <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x4c>
   12e7e:	a8af      	add	r0, sp, #700	; 0x2bc
   12e80:	a923      	add	r1, sp, #140	; 0x8c
   12e82:	2298      	movs	r2, #152	; 0x98
    let blocks = to_blocks(rows);
   12e84:	900e      	str	r0, [sp, #56]	; 0x38
   12e86:	f007 fb1f 	bl	1a4c8 <__aeabi_memcpy>
   12e8a:	a854      	add	r0, sp, #336	; 0x150
   12e8c:	990e      	ldr	r1, [sp, #56]	; 0x38
   12e8e:	f000 f9e4 	bl	1325a <_ZN22piet_embedded_graphics5batch9to_blocks17h3510a8630bd6634bE>
   12e92:	e7ff      	b.n	12e94 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x62>
   12e94:	f50d 6098 	add.w	r0, sp, #1216	; 0x4c0
   12e98:	a954      	add	r1, sp, #336	; 0x150
   12e9a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   12e9e:	900d      	str	r0, [sp, #52]	; 0x34
   12ea0:	f007 fb12 	bl	1a4c8 <__aeabi_memcpy>
   12ea4:	a8d5      	add	r0, sp, #852	; 0x354
   12ea6:	990d      	ldr	r1, [sp, #52]	; 0x34
   12ea8:	f000 fa27 	bl	132fa <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h121598282e9f6cfdE>
   12eac:	e7ff      	b.n	12eae <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x7c>
   12eae:	f20d 602c 	addw	r0, sp, #1580	; 0x62c
   12eb2:	a9d5      	add	r1, sp, #852	; 0x354
   12eb4:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   12eb8:	f007 fb06 	bl	1a4c8 <__aeabi_memcpy>
   12ebc:	e7ff      	b.n	12ebe <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x8c>
   12ebe:	f60d 0068 	addw	r0, sp, #2152	; 0x868
   12ec2:	f20d 612c 	addw	r1, sp, #1580	; 0x62c
   12ec6:	f7ff fdeb 	bl	12aa0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h134b88b684d14685E>
   12eca:	e7ff      	b.n	12ecc <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x9a>
   12ecc:	f8dd 0868 	ldr.w	r0, [sp, #2152]	; 0x868
   12ed0:	2800      	cmp	r0, #0
   12ed2:	d001      	beq.n	12ed8 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0xa6>
   12ed4:	e7ff      	b.n	12ed6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0xa4>
   12ed6:	e005      	b.n	12ee4 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0xb2>
   12ed8:	f60d 0068 	addw	r0, sp, #2152	; 0x868
   12edc:	f7f7 faac 	bl	a438 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   12ee0:	e01c      	b.n	12f1c <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0xea>
   12ee2:	defe      	udf	#254	; 0xfe
   12ee4:	f60d 0068 	addw	r0, sp, #2152	; 0x868
   12ee8:	1d01      	adds	r1, r0, #4
   12eea:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
   12eee:	22d0      	movs	r2, #208	; 0xd0
   12ef0:	900c      	str	r0, [sp, #48]	; 0x30
   12ef2:	920b      	str	r2, [sp, #44]	; 0x2c
   12ef4:	f007 fae8 	bl	1a4c8 <__aeabi_memcpy>
   12ef8:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
   12efc:	900a      	str	r0, [sp, #40]	; 0x28
   12efe:	990c      	ldr	r1, [sp, #48]	; 0x30
   12f00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12f02:	f007 fae1 	bl	1a4c8 <__aeabi_memcpy>
   12f06:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
   12f0a:	990a      	ldr	r1, [sp, #40]	; 0x28
   12f0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12f0e:	f007 fadb 	bl	1a4c8 <__aeabi_memcpy>
   12f12:	f8dd 0868 	ldr.w	r0, [sp, #2152]	; 0x868
   12f16:	2801      	cmp	r0, #1
   12f18:	d02d      	beq.n	12f76 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x144>
   12f1a:	e062      	b.n	12fe2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x1b0>
   12f1c:	f20d 602c 	addw	r0, sp, #1580	; 0x62c
    }
   12f20:	f7f8 feb7 	bl	bc92 <_ZN4core3ptr13drop_in_place17he97a34a4d7ae7cacE>
   12f24:	e023      	b.n	12f6e <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x13c>
        display.set_pixels(
   12f26:	f89d 0bab 	ldrb.w	r0, [sp, #2987]	; 0xbab
   12f2a:	f7f5 fd9d 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   12f2e:	f88d 0baa 	strb.w	r0, [sp, #2986]	; 0xbaa
   12f32:	e7ff      	b.n	12f34 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x102>
            colors) ? ;
   12f34:	f89d 0baa 	ldrb.w	r0, [sp, #2986]	; 0xbaa
   12f38:	07c1      	lsls	r1, r0, #31
   12f3a:	2900      	cmp	r1, #0
   12f3c:	d001      	beq.n	12f42 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x110>
   12f3e:	e7ff      	b.n	12f40 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x10e>
   12f40:	e001      	b.n	12f46 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x114>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   12f42:	e7bc      	b.n	12ebe <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x8c>
        display.set_pixels(
   12f44:	defe      	udf	#254	; 0xfe
            colors) ? ;
   12f46:	f7f9 fc43 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   12f4a:	e005      	b.n	12f58 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x126>
}
   12f4c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   12f50:	f50d 6d48 	add.w	sp, sp, #3200	; 0xc80
   12f54:	b002      	add	sp, #8
   12f56:	bd70      	pop	{r4, r5, r6, pc}
            colors) ? ;
   12f58:	f7fd fa29 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   12f5c:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12f60:	e7ff      	b.n	12f62 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x130>
   12f62:	f20d 602c 	addw	r0, sp, #1580	; 0x62c
    }
   12f66:	f7f8 fe94 	bl	bc92 <_ZN4core3ptr13drop_in_place17he97a34a4d7ae7cacE>
   12f6a:	e7ff      	b.n	12f6c <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x13a>
}
   12f6c:	e7ee      	b.n	12f4c <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x11a>
   12f6e:	2000      	movs	r0, #0
    Ok(())
   12f70:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
}
   12f74:	e7ea      	b.n	12f4c <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x11a>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   12f76:	f89d 0864 	ldrb.w	r0, [sp, #2148]	; 0x864
   12f7a:	f88d 0c84 	strb.w	r0, [sp, #3204]	; 0xc84
   12f7e:	f89d 1865 	ldrb.w	r1, [sp, #2149]	; 0x865
   12f82:	f88d 1c85 	strb.w	r1, [sp, #3205]	; 0xc85
   12f86:	f89d 2866 	ldrb.w	r2, [sp, #2150]	; 0x866
   12f8a:	f88d 2c86 	strb.w	r2, [sp, #3206]	; 0xc86
   12f8e:	f89d 3867 	ldrb.w	r3, [sp, #2151]	; 0x867
   12f92:	f88d 3c87 	strb.w	r3, [sp, #3207]	; 0xc87
   12f96:	f60d 2cdc 	addw	ip, sp, #2780	; 0xadc
   12f9a:	f50d 6ef3 	add.w	lr, sp, #1944	; 0x798
   12f9e:	24cc      	movs	r4, #204	; 0xcc
   12fa0:	9009      	str	r0, [sp, #36]	; 0x24
   12fa2:	4660      	mov	r0, ip
   12fa4:	9108      	str	r1, [sp, #32]
   12fa6:	4671      	mov	r1, lr
   12fa8:	9207      	str	r2, [sp, #28]
   12faa:	4622      	mov	r2, r4
   12fac:	9306      	str	r3, [sp, #24]
   12fae:	f8cd c014 	str.w	ip, [sp, #20]
   12fb2:	9404      	str	r4, [sp, #16]
   12fb4:	f007 fa88 	bl	1a4c8 <__aeabi_memcpy>
   12fb8:	f60d 30ac 	addw	r0, sp, #2988	; 0xbac
            colors) ? ;
   12fbc:	9003      	str	r0, [sp, #12]
   12fbe:	9905      	ldr	r1, [sp, #20]
   12fc0:	9a04      	ldr	r2, [sp, #16]
   12fc2:	f007 fa81 	bl	1a4c8 <__aeabi_memcpy>
        display.set_pixels(
   12fc6:	4668      	mov	r0, sp
   12fc8:	9903      	ldr	r1, [sp, #12]
   12fca:	6041      	str	r1, [r0, #4]
   12fcc:	9a06      	ldr	r2, [sp, #24]
   12fce:	6002      	str	r2, [r0, #0]
   12fd0:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12fd2:	9909      	ldr	r1, [sp, #36]	; 0x24
   12fd4:	9a07      	ldr	r2, [sp, #28]
   12fd6:	9b08      	ldr	r3, [sp, #32]
   12fd8:	f7f6 fa58 	bl	948c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>
   12fdc:	f88d 0bab 	strb.w	r0, [sp, #2987]	; 0xbab
   12fe0:	e7a1      	b.n	12f26 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0xf4>
   12fe2:	f60d 0068 	addw	r0, sp, #2152	; 0x868
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   12fe6:	f7f7 fa27 	bl	a438 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   12fea:	e7c4      	b.n	12f76 <_ZN22piet_embedded_graphics5batch11draw_blocks17h2876da5c91315c12E+0x144>

00012fec <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E>:
pub fn draw_blocks<SPI, DC, RST, T>(display: &mut ST7735<SPI, DC, RST>, item_pixels: T) -> Result<(),()>
   12fec:	b5f0      	push	{r4, r5, r6, r7, lr}
   12fee:	f5ad 6d42 	sub.w	sp, sp, #3104	; 0xc20
   12ff2:	b081      	sub	sp, #4
   12ff4:	f8cd 0c14 	str.w	r0, [sp, #3092]	; 0xc14
   12ff8:	aa19      	add	r2, sp, #100	; 0x64
    let pixels = item_pixels.into_iter();
   12ffa:	4613      	mov	r3, r2
   12ffc:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
   13000:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
   13004:	a911      	add	r1, sp, #68	; 0x44
   13006:	900f      	str	r0, [sp, #60]	; 0x3c
   13008:	4608      	mov	r0, r1
   1300a:	4611      	mov	r1, r2
   1300c:	f7fe fd91 	bl	11b32 <_ZN116_$LT$embedded_graphics..primitives..circle..Circle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h24faeeb9f54e81acE>
   13010:	e7ff      	b.n	13012 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x26>
   13012:	a811      	add	r0, sp, #68	; 0x44
   13014:	a942      	add	r1, sp, #264	; 0x108
    let rows = to_rows(pixels);
   13016:	460a      	mov	r2, r1
   13018:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
   1301c:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   13020:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
   13024:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
   13028:	a81f      	add	r0, sp, #124	; 0x7c
   1302a:	f000 f8b8 	bl	1319e <_ZN22piet_embedded_graphics5batch7to_rows17h2d8ec8beb5c5314cE>
   1302e:	e7ff      	b.n	13030 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x44>
   13030:	a8a2      	add	r0, sp, #648	; 0x288
   13032:	a91f      	add	r1, sp, #124	; 0x7c
   13034:	228c      	movs	r2, #140	; 0x8c
    let blocks = to_blocks(rows);
   13036:	900e      	str	r0, [sp, #56]	; 0x38
   13038:	f007 fa46 	bl	1a4c8 <__aeabi_memcpy>
   1303c:	a84a      	add	r0, sp, #296	; 0x128
   1303e:	990e      	ldr	r1, [sp, #56]	; 0x38
   13040:	f000 f933 	bl	132aa <_ZN22piet_embedded_graphics5batch9to_blocks17h5688ceff670375ccE>
   13044:	e7ff      	b.n	13046 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x5a>
   13046:	f20d 4074 	addw	r0, sp, #1140	; 0x474
   1304a:	a94a      	add	r1, sp, #296	; 0x128
   1304c:	f44f 72b0 	mov.w	r2, #352	; 0x160
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   13050:	900d      	str	r0, [sp, #52]	; 0x34
   13052:	f007 fa39 	bl	1a4c8 <__aeabi_memcpy>
   13056:	a8c5      	add	r0, sp, #788	; 0x314
   13058:	990d      	ldr	r1, [sp, #52]	; 0x34
   1305a:	f000 f954 	bl	13306 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h534b8e9ee92b030bE>
   1305e:	e7ff      	b.n	13060 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x74>
   13060:	f20d 50d4 	addw	r0, sp, #1492	; 0x5d4
   13064:	a9c5      	add	r1, sp, #788	; 0x314
   13066:	f44f 72b0 	mov.w	r2, #352	; 0x160
   1306a:	f007 fa2d 	bl	1a4c8 <__aeabi_memcpy>
   1306e:	e7ff      	b.n	13070 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x84>
   13070:	f60d 0004 	addw	r0, sp, #2052	; 0x804
   13074:	f20d 51d4 	addw	r1, sp, #1492	; 0x5d4
   13078:	f7ff fb49 	bl	1270e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h06fa3690717aaed1E>
   1307c:	e7ff      	b.n	1307e <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x92>
   1307e:	f8dd 0804 	ldr.w	r0, [sp, #2052]	; 0x804
   13082:	2800      	cmp	r0, #0
   13084:	d001      	beq.n	1308a <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x9e>
   13086:	e7ff      	b.n	13088 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x9c>
   13088:	e005      	b.n	13096 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0xaa>
   1308a:	f60d 0004 	addw	r0, sp, #2052	; 0x804
   1308e:	f7f7 f9d3 	bl	a438 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   13092:	e01c      	b.n	130ce <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0xe2>
   13094:	defe      	udf	#254	; 0xfe
   13096:	f60d 0004 	addw	r0, sp, #2052	; 0x804
   1309a:	1d01      	adds	r1, r0, #4
   1309c:	f60d 00d8 	addw	r0, sp, #2264	; 0x8d8
   130a0:	22d0      	movs	r2, #208	; 0xd0
   130a2:	900c      	str	r0, [sp, #48]	; 0x30
   130a4:	920b      	str	r2, [sp, #44]	; 0x2c
   130a6:	f007 fa0f 	bl	1a4c8 <__aeabi_memcpy>
   130aa:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
   130ae:	900a      	str	r0, [sp, #40]	; 0x28
   130b0:	990c      	ldr	r1, [sp, #48]	; 0x30
   130b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   130b4:	f007 fa08 	bl	1a4c8 <__aeabi_memcpy>
   130b8:	f20d 7034 	addw	r0, sp, #1844	; 0x734
   130bc:	990a      	ldr	r1, [sp, #40]	; 0x28
   130be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   130c0:	f007 fa02 	bl	1a4c8 <__aeabi_memcpy>
   130c4:	f8dd 0804 	ldr.w	r0, [sp, #2052]	; 0x804
   130c8:	2801      	cmp	r0, #1
   130ca:	d02d      	beq.n	13128 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x13c>
   130cc:	e062      	b.n	13194 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x1a8>
   130ce:	f20d 50d4 	addw	r0, sp, #1492	; 0x5d4
    }
   130d2:	f7f8 fdd0 	bl	bc76 <_ZN4core3ptr13drop_in_place17hb9a3bbc44f2775d6E>
   130d6:	e023      	b.n	13120 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x134>
        display.set_pixels(
   130d8:	f89d 0b47 	ldrb.w	r0, [sp, #2887]	; 0xb47
   130dc:	f7f5 fcc4 	bl	8a68 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   130e0:	f88d 0b46 	strb.w	r0, [sp, #2886]	; 0xb46
   130e4:	e7ff      	b.n	130e6 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0xfa>
            colors) ? ;
   130e6:	f89d 0b46 	ldrb.w	r0, [sp, #2886]	; 0xb46
   130ea:	07c1      	lsls	r1, r0, #31
   130ec:	2900      	cmp	r1, #0
   130ee:	d001      	beq.n	130f4 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x108>
   130f0:	e7ff      	b.n	130f2 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x106>
   130f2:	e001      	b.n	130f8 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x10c>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   130f4:	e7bc      	b.n	13070 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x84>
        display.set_pixels(
   130f6:	defe      	udf	#254	; 0xfe
            colors) ? ;
   130f8:	f7f9 fb6a 	bl	c7d0 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   130fc:	e005      	b.n	1310a <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x11e>
}
   130fe:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
   13102:	f50d 6d42 	add.w	sp, sp, #3104	; 0xc20
   13106:	b001      	add	sp, #4
   13108:	bdf0      	pop	{r4, r5, r6, r7, pc}
            colors) ? ;
   1310a:	f7fd f950 	bl	103ae <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1310e:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   13112:	e7ff      	b.n	13114 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x128>
   13114:	f20d 50d4 	addw	r0, sp, #1492	; 0x5d4
    }
   13118:	f7f8 fdad 	bl	bc76 <_ZN4core3ptr13drop_in_place17hb9a3bbc44f2775d6E>
   1311c:	e7ff      	b.n	1311e <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x132>
}
   1311e:	e7ee      	b.n	130fe <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x112>
   13120:	2000      	movs	r0, #0
    Ok(())
   13122:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
}
   13126:	e7ea      	b.n	130fe <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x112>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   13128:	f89d 0800 	ldrb.w	r0, [sp, #2048]	; 0x800
   1312c:	f88d 0c20 	strb.w	r0, [sp, #3104]	; 0xc20
   13130:	f89d 1801 	ldrb.w	r1, [sp, #2049]	; 0x801
   13134:	f88d 1c21 	strb.w	r1, [sp, #3105]	; 0xc21
   13138:	f89d 2802 	ldrb.w	r2, [sp, #2050]	; 0x802
   1313c:	f88d 2c22 	strb.w	r2, [sp, #3106]	; 0xc22
   13140:	f89d 3803 	ldrb.w	r3, [sp, #2051]	; 0x803
   13144:	f88d 3c23 	strb.w	r3, [sp, #3107]	; 0xc23
   13148:	f60d 2c78 	addw	ip, sp, #2680	; 0xa78
   1314c:	f20d 7e34 	addw	lr, sp, #1844	; 0x734
   13150:	24cc      	movs	r4, #204	; 0xcc
   13152:	9009      	str	r0, [sp, #36]	; 0x24
   13154:	4660      	mov	r0, ip
   13156:	9108      	str	r1, [sp, #32]
   13158:	4671      	mov	r1, lr
   1315a:	9207      	str	r2, [sp, #28]
   1315c:	4622      	mov	r2, r4
   1315e:	9306      	str	r3, [sp, #24]
   13160:	f8cd c014 	str.w	ip, [sp, #20]
   13164:	9404      	str	r4, [sp, #16]
   13166:	f007 f9af 	bl	1a4c8 <__aeabi_memcpy>
   1316a:	f60d 3048 	addw	r0, sp, #2888	; 0xb48
            colors) ? ;
   1316e:	9003      	str	r0, [sp, #12]
   13170:	9905      	ldr	r1, [sp, #20]
   13172:	9a04      	ldr	r2, [sp, #16]
   13174:	f007 f9a8 	bl	1a4c8 <__aeabi_memcpy>
        display.set_pixels(
   13178:	4668      	mov	r0, sp
   1317a:	9903      	ldr	r1, [sp, #12]
   1317c:	6041      	str	r1, [r0, #4]
   1317e:	9a06      	ldr	r2, [sp, #24]
   13180:	6002      	str	r2, [r0, #0]
   13182:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13184:	9909      	ldr	r1, [sp, #36]	; 0x24
   13186:	9a07      	ldr	r2, [sp, #28]
   13188:	9b08      	ldr	r3, [sp, #32]
   1318a:	f7f6 f97f 	bl	948c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>
   1318e:	f88d 0b47 	strb.w	r0, [sp, #2887]	; 0xb47
   13192:	e7a1      	b.n	130d8 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0xec>
   13194:	f60d 0004 	addw	r0, sp, #2052	; 0x804
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   13198:	f7f7 f94e 	bl	a438 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   1319c:	e7c4      	b.n	13128 <_ZN22piet_embedded_graphics5batch11draw_blocks17hf7c6f7eead44e676E+0x13c>

0001319e <_ZN22piet_embedded_graphics5batch7to_rows17h2d8ec8beb5c5314cE>:
fn to_rows<P>(pixels: P) -> RowIterator<P>
   1319e:	b510      	push	{r4, lr}
   131a0:	b0a4      	sub	sp, #144	; 0x90
   131a2:	aa02      	add	r2, sp, #8
        pixels,
   131a4:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
   131a8:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   131ac:	e891 5018 	ldmia.w	r1, {r3, r4, ip, lr}
   131b0:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
   131b4:	a90a      	add	r1, sp, #40	; 0x28
        colors: RowColors::new(),
   131b6:	9001      	str	r0, [sp, #4]
   131b8:	4608      	mov	r0, r1
   131ba:	f7fc fbee 	bl	f99a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>
   131be:	e7ff      	b.n	131c0 <_ZN22piet_embedded_graphics5batch7to_rows17h2d8ec8beb5c5314cE+0x22>
   131c0:	a802      	add	r0, sp, #8
    RowIterator::<P> {
   131c2:	9901      	ldr	r1, [sp, #4]
   131c4:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
   131c8:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
   131cc:	e890 500c 	ldmia.w	r0, {r2, r3, ip, lr}
   131d0:	e881 500c 	stmia.w	r1, {r2, r3, ip, lr}
   131d4:	2000      	movs	r0, #0
   131d6:	9901      	ldr	r1, [sp, #4]
   131d8:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
   131dc:	f881 0089 	strb.w	r0, [r1, #137]	; 0x89
   131e0:	f881 008a 	strb.w	r0, [r1, #138]	; 0x8a
   131e4:	f101 0020 	add.w	r0, r1, #32
   131e8:	a90a      	add	r1, sp, #40	; 0x28
   131ea:	2268      	movs	r2, #104	; 0x68
   131ec:	f007 f96c 	bl	1a4c8 <__aeabi_memcpy>
   131f0:	2001      	movs	r0, #1
   131f2:	9901      	ldr	r1, [sp, #4]
   131f4:	f881 008b 	strb.w	r0, [r1, #139]	; 0x8b
}
   131f8:	b024      	add	sp, #144	; 0x90
   131fa:	bd10      	pop	{r4, pc}

000131fc <_ZN22piet_embedded_graphics5batch7to_rows17hdb266cd0c1904847E>:
fn to_rows<P>(pixels: P) -> RowIterator<P>
   131fc:	b570      	push	{r4, r5, r6, lr}
   131fe:	b0a6      	sub	sp, #152	; 0x98
   13200:	aa01      	add	r2, sp, #4
        pixels,
   13202:	e8b1 5038 	ldmia.w	r1!, {r3, r4, r5, ip, lr}
   13206:	e8a2 5038 	stmia.w	r2!, {r3, r4, r5, ip, lr}
   1320a:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   1320e:	e882 5078 	stmia.w	r2, {r3, r4, r5, r6, ip, lr}
   13212:	a90c      	add	r1, sp, #48	; 0x30
        colors: RowColors::new(),
   13214:	9000      	str	r0, [sp, #0]
   13216:	4608      	mov	r0, r1
   13218:	f7fc fbbf 	bl	f99a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>
   1321c:	e7ff      	b.n	1321e <_ZN22piet_embedded_graphics5batch7to_rows17hdb266cd0c1904847E+0x22>
   1321e:	a801      	add	r0, sp, #4
    RowIterator::<P> {
   13220:	9900      	ldr	r1, [sp, #0]
   13222:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
   13226:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
   1322a:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
   1322e:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
   13232:	2000      	movs	r0, #0
   13234:	9900      	ldr	r1, [sp, #0]
   13236:	f881 0094 	strb.w	r0, [r1, #148]	; 0x94
   1323a:	f881 0095 	strb.w	r0, [r1, #149]	; 0x95
   1323e:	f881 0096 	strb.w	r0, [r1, #150]	; 0x96
   13242:	f101 002c 	add.w	r0, r1, #44	; 0x2c
   13246:	a90c      	add	r1, sp, #48	; 0x30
   13248:	2268      	movs	r2, #104	; 0x68
   1324a:	f007 f93d 	bl	1a4c8 <__aeabi_memcpy>
   1324e:	2001      	movs	r0, #1
   13250:	9900      	ldr	r1, [sp, #0]
   13252:	f881 0097 	strb.w	r0, [r1, #151]	; 0x97
}
   13256:	b026      	add	sp, #152	; 0x98
   13258:	bd70      	pop	{r4, r5, r6, pc}

0001325a <_ZN22piet_embedded_graphics5batch9to_blocks17h3510a8630bd6634bE>:
fn to_blocks<R>(rows: R) -> BlockIterator<R>
   1325a:	b580      	push	{r7, lr}
   1325c:	b0da      	sub	sp, #360	; 0x168
   1325e:	aa01      	add	r2, sp, #4
   13260:	2398      	movs	r3, #152	; 0x98
        rows,
   13262:	9000      	str	r0, [sp, #0]
   13264:	4610      	mov	r0, r2
   13266:	461a      	mov	r2, r3
   13268:	f007 f92e 	bl	1a4c8 <__aeabi_memcpy>
   1326c:	a827      	add	r0, sp, #156	; 0x9c
        colors: BlockColors::new(),
   1326e:	f7fc fba3 	bl	f9b8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>
   13272:	e7ff      	b.n	13274 <_ZN22piet_embedded_graphics5batch9to_blocks17h3510a8630bd6634bE+0x1a>
   13274:	a901      	add	r1, sp, #4
   13276:	2298      	movs	r2, #152	; 0x98
    BlockIterator::<R> {
   13278:	9800      	ldr	r0, [sp, #0]
   1327a:	f007 f925 	bl	1a4c8 <__aeabi_memcpy>
   1327e:	2000      	movs	r0, #0
   13280:	9900      	ldr	r1, [sp, #0]
   13282:	f881 0164 	strb.w	r0, [r1, #356]	; 0x164
   13286:	f881 0165 	strb.w	r0, [r1, #357]	; 0x165
   1328a:	f881 0166 	strb.w	r0, [r1, #358]	; 0x166
   1328e:	f881 0167 	strb.w	r0, [r1, #359]	; 0x167
   13292:	f101 0098 	add.w	r0, r1, #152	; 0x98
   13296:	a927      	add	r1, sp, #156	; 0x9c
   13298:	22cc      	movs	r2, #204	; 0xcc
   1329a:	f007 f915 	bl	1a4c8 <__aeabi_memcpy>
   1329e:	2001      	movs	r0, #1
   132a0:	9900      	ldr	r1, [sp, #0]
   132a2:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
}    
   132a6:	b05a      	add	sp, #360	; 0x168
   132a8:	bd80      	pop	{r7, pc}

000132aa <_ZN22piet_embedded_graphics5batch9to_blocks17h5688ceff670375ccE>:
fn to_blocks<R>(rows: R) -> BlockIterator<R>
   132aa:	b580      	push	{r7, lr}
   132ac:	b0d8      	sub	sp, #352	; 0x160
   132ae:	aa02      	add	r2, sp, #8
   132b0:	238c      	movs	r3, #140	; 0x8c
        rows,
   132b2:	9001      	str	r0, [sp, #4]
   132b4:	4610      	mov	r0, r2
   132b6:	461a      	mov	r2, r3
   132b8:	f007 f906 	bl	1a4c8 <__aeabi_memcpy>
   132bc:	a825      	add	r0, sp, #148	; 0x94
        colors: BlockColors::new(),
   132be:	f7fc fb7b 	bl	f9b8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>
   132c2:	e7ff      	b.n	132c4 <_ZN22piet_embedded_graphics5batch9to_blocks17h5688ceff670375ccE+0x1a>
   132c4:	a902      	add	r1, sp, #8
   132c6:	228c      	movs	r2, #140	; 0x8c
    BlockIterator::<R> {
   132c8:	9801      	ldr	r0, [sp, #4]
   132ca:	f007 f8fd 	bl	1a4c8 <__aeabi_memcpy>
   132ce:	2000      	movs	r0, #0
   132d0:	9901      	ldr	r1, [sp, #4]
   132d2:	f881 0158 	strb.w	r0, [r1, #344]	; 0x158
   132d6:	f881 0159 	strb.w	r0, [r1, #345]	; 0x159
   132da:	f881 015a 	strb.w	r0, [r1, #346]	; 0x15a
   132de:	f881 015b 	strb.w	r0, [r1, #347]	; 0x15b
   132e2:	f101 008c 	add.w	r0, r1, #140	; 0x8c
   132e6:	a925      	add	r1, sp, #148	; 0x94
   132e8:	22cc      	movs	r2, #204	; 0xcc
   132ea:	f007 f8ed 	bl	1a4c8 <__aeabi_memcpy>
   132ee:	2001      	movs	r0, #1
   132f0:	9901      	ldr	r1, [sp, #4]
   132f2:	f881 015c 	strb.w	r0, [r1, #348]	; 0x15c
}    
   132f6:	b058      	add	sp, #352	; 0x160
   132f8:	bd80      	pop	{r7, pc}

000132fa <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h121598282e9f6cfdE>:
   132fa:	b580      	push	{r7, lr}
   132fc:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   13300:	f007 f8e2 	bl	1a4c8 <__aeabi_memcpy>
   13304:	bd80      	pop	{r7, pc}

00013306 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h534b8e9ee92b030bE>:
   13306:	b580      	push	{r7, lr}
   13308:	f44f 72b0 	mov.w	r2, #352	; 0x160
   1330c:	f007 f8dc 	bl	1a4c8 <__aeabi_memcpy>
   13310:	bd80      	pop	{r7, pc}

00013312 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   13312:	b580      	push	{r7, lr}
   13314:	b088      	sub	sp, #32
   13316:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   13318:	1d01      	adds	r1, r0, #4
   1331a:	9106      	str	r1, [sp, #24]
   1331c:	9107      	str	r1, [sp, #28]
   1331e:	9004      	str	r0, [sp, #16]
   13320:	9103      	str	r1, [sp, #12]
   13322:	e7ff      	b.n	13324 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   13324:	9804      	ldr	r0, [sp, #16]
   13326:	6801      	ldr	r1, [r0, #0]
   13328:	9803      	ldr	r0, [sp, #12]
   1332a:	f7f5 fc22 	bl	8b72 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   1332e:	9002      	str	r0, [sp, #8]
   13330:	9101      	str	r1, [sp, #4]
   13332:	e7ff      	b.n	13334 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   13334:	9802      	ldr	r0, [sp, #8]
   13336:	9901      	ldr	r1, [sp, #4]
   13338:	b008      	add	sp, #32
   1333a:	bd80      	pop	{r7, pc}

0001333c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   1333c:	b580      	push	{r7, lr}
   1333e:	b088      	sub	sp, #32
   13340:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   13342:	1d01      	adds	r1, r0, #4
   13344:	9106      	str	r1, [sp, #24]
   13346:	9107      	str	r1, [sp, #28]
   13348:	9004      	str	r0, [sp, #16]
   1334a:	9103      	str	r1, [sp, #12]
   1334c:	e7ff      	b.n	1334e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x12>
   1334e:	9804      	ldr	r0, [sp, #16]
   13350:	6801      	ldr	r1, [r0, #0]
   13352:	9803      	ldr	r0, [sp, #12]
   13354:	f7f5 fc0d 	bl	8b72 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   13358:	9002      	str	r0, [sp, #8]
   1335a:	9101      	str	r1, [sp, #4]
   1335c:	e7ff      	b.n	1335e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE+0x22>
    }
   1335e:	9802      	ldr	r0, [sp, #8]
   13360:	9901      	ldr	r1, [sp, #4]
   13362:	b008      	add	sp, #32
   13364:	bd80      	pop	{r7, pc}

00013366 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   13366:	b580      	push	{r7, lr}
   13368:	b08a      	sub	sp, #40	; 0x28
   1336a:	460a      	mov	r2, r1
   1336c:	9006      	str	r0, [sp, #24]
   1336e:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   13372:	1d01      	adds	r1, r0, #4
   13374:	9108      	str	r1, [sp, #32]
   13376:	9109      	str	r1, [sp, #36]	; 0x24
   13378:	9005      	str	r0, [sp, #20]
   1337a:	9204      	str	r2, [sp, #16]
   1337c:	9103      	str	r1, [sp, #12]
   1337e:	e7ff      	b.n	13380 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   13380:	9805      	ldr	r0, [sp, #20]
   13382:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   13384:	9803      	ldr	r0, [sp, #12]
   13386:	f7f9 f93d 	bl	c604 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1338a:	9002      	str	r0, [sp, #8]
   1338c:	e7ff      	b.n	1338e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   1338e:	9802      	ldr	r0, [sp, #8]
   13390:	9904      	ldr	r1, [sp, #16]
   13392:	f000 f994 	bl	136be <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   13396:	e7ff      	b.n	13398 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   13398:	9805      	ldr	r0, [sp, #20]
   1339a:	6801      	ldr	r1, [r0, #0]
   1339c:	1c4a      	adds	r2, r1, #1
   1339e:	4613      	mov	r3, r2
   133a0:	428a      	cmp	r2, r1
   133a2:	9301      	str	r3, [sp, #4]
   133a4:	d305      	bcc.n	133b2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   133a6:	e7ff      	b.n	133a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   133a8:	9801      	ldr	r0, [sp, #4]
   133aa:	9905      	ldr	r1, [sp, #20]
   133ac:	6008      	str	r0, [r1, #0]
    }
   133ae:	b00a      	add	sp, #40	; 0x28
   133b0:	bd80      	pop	{r7, pc}
        self.len += 1;
   133b2:	f24d 1000 	movw	r0, #53504	; 0xd100
   133b6:	f2c0 0001 	movt	r0, #1
   133ba:	f24d 02e4 	movw	r2, #53476	; 0xd0e4
   133be:	f2c0 0201 	movt	r2, #1
   133c2:	211c      	movs	r1, #28
   133c4:	f000 fcac 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   133c8:	defe      	udf	#254	; 0xfe

000133ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   133ca:	b580      	push	{r7, lr}
   133cc:	b08a      	sub	sp, #40	; 0x28
   133ce:	460a      	mov	r2, r1
   133d0:	9006      	str	r0, [sp, #24]
   133d2:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   133d6:	1d01      	adds	r1, r0, #4
   133d8:	9108      	str	r1, [sp, #32]
   133da:	9109      	str	r1, [sp, #36]	; 0x24
   133dc:	9005      	str	r0, [sp, #20]
   133de:	9204      	str	r2, [sp, #16]
   133e0:	9103      	str	r1, [sp, #12]
   133e2:	e7ff      	b.n	133e4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x1a>
            .add(self.len)
   133e4:	9805      	ldr	r0, [sp, #20]
   133e6:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   133e8:	9803      	ldr	r0, [sp, #12]
   133ea:	f7f9 f90b 	bl	c604 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   133ee:	9002      	str	r0, [sp, #8]
   133f0:	e7ff      	b.n	133f2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x28>
   133f2:	9802      	ldr	r0, [sp, #8]
   133f4:	9904      	ldr	r1, [sp, #16]
   133f6:	f000 f962 	bl	136be <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   133fa:	e7ff      	b.n	133fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x32>
        self.len += 1;
   133fc:	9805      	ldr	r0, [sp, #20]
   133fe:	6801      	ldr	r1, [r0, #0]
   13400:	1c4a      	adds	r2, r1, #1
   13402:	4613      	mov	r3, r2
   13404:	428a      	cmp	r2, r1
   13406:	9301      	str	r3, [sp, #4]
   13408:	d305      	bcc.n	13416 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x4c>
   1340a:	e7ff      	b.n	1340c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE+0x42>
   1340c:	9801      	ldr	r0, [sp, #4]
   1340e:	9905      	ldr	r1, [sp, #20]
   13410:	6008      	str	r0, [r1, #0]
    }
   13412:	b00a      	add	sp, #40	; 0x28
   13414:	bd80      	pop	{r7, pc}
        self.len += 1;
   13416:	f24d 1000 	movw	r0, #53504	; 0xd100
   1341a:	f2c0 0001 	movt	r0, #1
   1341e:	f24d 02e4 	movw	r2, #53476	; 0xd0e4
   13422:	f2c0 0201 	movt	r2, #1
   13426:	211c      	movs	r1, #28
   13428:	f000 fc7a 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1342c:	defe      	udf	#254	; 0xfe

0001342e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   1342e:	b580      	push	{r7, lr}
   13430:	b094      	sub	sp, #80	; 0x50
   13432:	900e      	str	r0, [sp, #56]	; 0x38
   13434:	910f      	str	r1, [sp, #60]	; 0x3c
   13436:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   13438:	6803      	ldr	r3, [r0, #0]
   1343a:	9009      	str	r0, [sp, #36]	; 0x24
   1343c:	4608      	mov	r0, r1
   1343e:	9108      	str	r1, [sp, #32]
   13440:	4611      	mov	r1, r2
   13442:	9207      	str	r2, [sp, #28]
   13444:	9306      	str	r3, [sp, #24]
   13446:	f7f9 f96d 	bl	c724 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1344a:	9005      	str	r0, [sp, #20]
   1344c:	e7ff      	b.n	1344e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x20>
   1344e:	9806      	ldr	r0, [sp, #24]
   13450:	9905      	ldr	r1, [sp, #20]
   13452:	1842      	adds	r2, r0, r1
   13454:	4613      	mov	r3, r2
   13456:	4282      	cmp	r2, r0
   13458:	9304      	str	r3, [sp, #16]
   1345a:	d33f      	bcc.n	134dc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xae>
   1345c:	e7ff      	b.n	1345e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x30>
   1345e:	9809      	ldr	r0, [sp, #36]	; 0x24
   13460:	f000 f8b7 	bl	135d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>
   13464:	9003      	str	r0, [sp, #12]
   13466:	e7ff      	b.n	13468 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x3a>
   13468:	9804      	ldr	r0, [sp, #16]
   1346a:	9903      	ldr	r1, [sp, #12]
   1346c:	4288      	cmp	r0, r1
   1346e:	d807      	bhi.n	13480 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x52>
   13470:	e7ff      	b.n	13472 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x44>
            for elem in other {
   13472:	9808      	ldr	r0, [sp, #32]
   13474:	9907      	ldr	r1, [sp, #28]
   13476:	f7f5 fbd6 	bl	8c26 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   1347a:	9002      	str	r0, [sp, #8]
   1347c:	9101      	str	r1, [sp, #4]
   1347e:	e003      	b.n	13488 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x5a>
   13480:	2001      	movs	r0, #1
            Err(())
   13482:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   13486:	e025      	b.n	134d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   13488:	9802      	ldr	r0, [sp, #8]
   1348a:	900b      	str	r0, [sp, #44]	; 0x2c
   1348c:	9901      	ldr	r1, [sp, #4]
   1348e:	910c      	str	r1, [sp, #48]	; 0x30
   13490:	e7ff      	b.n	13492 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
   13492:	a80b      	add	r0, sp, #44	; 0x2c
   13494:	f7f8 fc99 	bl	bdca <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   13498:	900d      	str	r0, [sp, #52]	; 0x34
   1349a:	e7ff      	b.n	1349c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x6e>
   1349c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1349e:	2800      	cmp	r0, #0
   134a0:	4601      	mov	r1, r0
   134a2:	bf18      	it	ne
   134a4:	2101      	movne	r1, #1
   134a6:	2800      	cmp	r0, #0
   134a8:	d001      	beq.n	134ae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x80>
   134aa:	e7ff      	b.n	134ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x7e>
   134ac:	e004      	b.n	134b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x8a>
   134ae:	2000      	movs	r0, #0
            Ok(())
   134b0:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   134b4:	e00e      	b.n	134d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa6>
            for elem in other {
   134b6:	defe      	udf	#254	; 0xfe
   134b8:	980d      	ldr	r0, [sp, #52]	; 0x34
   134ba:	9011      	str	r0, [sp, #68]	; 0x44
   134bc:	9012      	str	r0, [sp, #72]	; 0x48
   134be:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   134c0:	f000 f909 	bl	136d6 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   134c4:	9000      	str	r0, [sp, #0]
   134c6:	e7ff      	b.n	134c8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x9a>
   134c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   134ca:	9900      	ldr	r1, [sp, #0]
   134cc:	f7ff ff7d 	bl	133ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h8da591cfabd38b6eE>
   134d0:	e7ff      	b.n	134d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0xa4>
            for elem in other {
   134d2:	e7de      	b.n	13492 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h95da1ebb18eea385E+0x64>
    }
   134d4:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   134d8:	b014      	add	sp, #80	; 0x50
   134da:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   134dc:	f24d 1000 	movw	r0, #53504	; 0xd100
   134e0:	f2c0 0001 	movt	r0, #1
   134e4:	f24d 121c 	movw	r2, #53532	; 0xd11c
   134e8:	f2c0 0201 	movt	r2, #1
   134ec:	211c      	movs	r1, #28
   134ee:	f000 fc17 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   134f2:	defe      	udf	#254	; 0xfe

000134f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   134f4:	b580      	push	{r7, lr}
   134f6:	b088      	sub	sp, #32
   134f8:	460a      	mov	r2, r1
   134fa:	9006      	str	r0, [sp, #24]
   134fc:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   13500:	6801      	ldr	r1, [r0, #0]
   13502:	9004      	str	r0, [sp, #16]
   13504:	9203      	str	r2, [sp, #12]
   13506:	9102      	str	r1, [sp, #8]
   13508:	f000 f859 	bl	135be <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   1350c:	9001      	str	r0, [sp, #4]
   1350e:	e7ff      	b.n	13510 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   13510:	9802      	ldr	r0, [sp, #8]
   13512:	9901      	ldr	r1, [sp, #4]
   13514:	4288      	cmp	r0, r1
   13516:	d307      	bcc.n	13528 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   13518:	e7ff      	b.n	1351a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   1351a:	9803      	ldr	r0, [sp, #12]
   1351c:	f88d 0015 	strb.w	r0, [sp, #21]
   13520:	2101      	movs	r1, #1
   13522:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   13526:	e008      	b.n	1353a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   13528:	9804      	ldr	r0, [sp, #16]
   1352a:	9903      	ldr	r1, [sp, #12]
   1352c:	f7ff ff1b 	bl	13366 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   13530:	e7ff      	b.n	13532 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   13532:	2000      	movs	r0, #0
            Ok(())
   13534:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   13538:	e7ff      	b.n	1353a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   1353a:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1353e:	f89d 1015 	ldrb.w	r1, [sp, #21]
   13542:	b008      	add	sp, #32
   13544:	bd80      	pop	{r7, pc}

00013546 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   13546:	b580      	push	{r7, lr}
   13548:	b082      	sub	sp, #8
   1354a:	9001      	str	r0, [sp, #4]
   1354c:	2100      	movs	r1, #0
        self.truncate(0);
   1354e:	f000 f880 	bl	13652 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   13552:	e7ff      	b.n	13554 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   13554:	b002      	add	sp, #8
   13556:	bd80      	pop	{r7, pc}

00013558 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E>:
    pub(crate) fn clear(&mut self) {
   13558:	b580      	push	{r7, lr}
   1355a:	b082      	sub	sp, #8
   1355c:	9001      	str	r0, [sp, #4]
   1355e:	2100      	movs	r1, #0
        self.truncate(0);
   13560:	f000 f841 	bl	135e6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>
   13564:	e7ff      	b.n	13566 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17ha73388b855d6f6c1E+0xe>
    }
   13566:	b002      	add	sp, #8
   13568:	bd80      	pop	{r7, pc}

0001356a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   1356a:	b580      	push	{r7, lr}
   1356c:	b088      	sub	sp, #32
   1356e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   13570:	1d01      	adds	r1, r0, #4
   13572:	9106      	str	r1, [sp, #24]
   13574:	9107      	str	r1, [sp, #28]
   13576:	9004      	str	r0, [sp, #16]
   13578:	9103      	str	r1, [sp, #12]
   1357a:	e7ff      	b.n	1357c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x12>
   1357c:	9804      	ldr	r0, [sp, #16]
   1357e:	6801      	ldr	r1, [r0, #0]
   13580:	9803      	ldr	r0, [sp, #12]
   13582:	f7f9 f94b 	bl	c81c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   13586:	9002      	str	r0, [sp, #8]
   13588:	9101      	str	r1, [sp, #4]
   1358a:	e7ff      	b.n	1358c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h3b28934387993581E+0x22>
    }
   1358c:	9802      	ldr	r0, [sp, #8]
   1358e:	9901      	ldr	r1, [sp, #4]
   13590:	b008      	add	sp, #32
   13592:	bd80      	pop	{r7, pc}

00013594 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   13594:	b580      	push	{r7, lr}
   13596:	b088      	sub	sp, #32
   13598:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   1359a:	1d01      	adds	r1, r0, #4
   1359c:	9106      	str	r1, [sp, #24]
   1359e:	9107      	str	r1, [sp, #28]
   135a0:	9004      	str	r0, [sp, #16]
   135a2:	9103      	str	r1, [sp, #12]
   135a4:	e7ff      	b.n	135a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   135a6:	9804      	ldr	r0, [sp, #16]
   135a8:	6801      	ldr	r1, [r0, #0]
   135aa:	9803      	ldr	r0, [sp, #12]
   135ac:	f7f9 f936 	bl	c81c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   135b0:	9002      	str	r0, [sp, #8]
   135b2:	9101      	str	r1, [sp, #4]
   135b4:	e7ff      	b.n	135b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   135b6:	9802      	ldr	r0, [sp, #8]
   135b8:	9901      	ldr	r1, [sp, #4]
   135ba:	b008      	add	sp, #32
   135bc:	bd80      	pop	{r7, pc}

000135be <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   135be:	b580      	push	{r7, lr}
   135c0:	b082      	sub	sp, #8
   135c2:	9001      	str	r0, [sp, #4]
        N::to_usize()
   135c4:	f000 f964 	bl	13890 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   135c8:	9000      	str	r0, [sp, #0]
   135ca:	e7ff      	b.n	135cc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   135cc:	9800      	ldr	r0, [sp, #0]
   135ce:	b002      	add	sp, #8
   135d0:	bd80      	pop	{r7, pc}

000135d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE>:
    pub(crate) fn capacity(&self) -> usize {
   135d2:	b580      	push	{r7, lr}
   135d4:	b082      	sub	sp, #8
   135d6:	9001      	str	r0, [sp, #4]
        N::to_usize()
   135d8:	f000 f8b2 	bl	13740 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>
   135dc:	9000      	str	r0, [sp, #0]
   135de:	e7ff      	b.n	135e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb937841294340d4bE+0xe>
    }
   135e0:	9800      	ldr	r0, [sp, #0]
   135e2:	b002      	add	sp, #8
   135e4:	bd80      	pop	{r7, pc}

000135e6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   135e6:	b580      	push	{r7, lr}
   135e8:	b08a      	sub	sp, #40	; 0x28
   135ea:	9007      	str	r0, [sp, #28]
   135ec:	9108      	str	r1, [sp, #32]
   135ee:	9106      	str	r1, [sp, #24]
   135f0:	9005      	str	r0, [sp, #20]
   135f2:	e7ff      	b.n	135f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
            while len < self.len {
   135f4:	9805      	ldr	r0, [sp, #20]
   135f6:	6801      	ldr	r1, [r0, #0]
   135f8:	9a06      	ldr	r2, [sp, #24]
   135fa:	428a      	cmp	r2, r1
   135fc:	d302      	bcc.n	13604 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1e>
   135fe:	e7ff      	b.n	13600 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x1a>
    }
   13600:	b00a      	add	sp, #40	; 0x28
   13602:	bd80      	pop	{r7, pc}
                self.len -= 1;
   13604:	9805      	ldr	r0, [sp, #20]
   13606:	6801      	ldr	r1, [r0, #0]
   13608:	1e4a      	subs	r2, r1, #1
   1360a:	2901      	cmp	r1, #1
   1360c:	9204      	str	r2, [sp, #16]
   1360e:	d314      	bcc.n	1363a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x54>
   13610:	e7ff      	b.n	13612 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x2c>
   13612:	9804      	ldr	r0, [sp, #16]
   13614:	9905      	ldr	r1, [sp, #20]
   13616:	6008      	str	r0, [r1, #0]
                let len = self.len;
   13618:	680a      	ldr	r2, [r1, #0]
   1361a:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   1361c:	4608      	mov	r0, r1
   1361e:	9203      	str	r2, [sp, #12]
   13620:	f7ff fe8c 	bl	1333c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hc922ed56d475342eE>
   13624:	9002      	str	r0, [sp, #8]
   13626:	9101      	str	r1, [sp, #4]
   13628:	e7ff      	b.n	1362a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x44>
   1362a:	9802      	ldr	r0, [sp, #8]
   1362c:	9901      	ldr	r1, [sp, #4]
   1362e:	9a03      	ldr	r2, [sp, #12]
   13630:	f7f9 f866 	bl	c700 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   13634:	e7ff      	b.n	13636 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x50>
   13636:	e7ff      	b.n	13638 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0x52>
            while len < self.len {
   13638:	e7dc      	b.n	135f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hb53a0572bc89d388E+0xe>
                self.len -= 1;
   1363a:	f24d 1040 	movw	r0, #53568	; 0xd140
   1363e:	f2c0 0001 	movt	r0, #1
   13642:	f24d 122c 	movw	r2, #53548	; 0xd12c
   13646:	f2c0 0201 	movt	r2, #1
   1364a:	2121      	movs	r1, #33	; 0x21
   1364c:	f000 fb68 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13650:	defe      	udf	#254	; 0xfe

00013652 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   13652:	b580      	push	{r7, lr}
   13654:	b08a      	sub	sp, #40	; 0x28
   13656:	9007      	str	r0, [sp, #28]
   13658:	9108      	str	r1, [sp, #32]
   1365a:	9106      	str	r1, [sp, #24]
   1365c:	9005      	str	r0, [sp, #20]
   1365e:	e7ff      	b.n	13660 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   13660:	9805      	ldr	r0, [sp, #20]
   13662:	6801      	ldr	r1, [r0, #0]
   13664:	9a06      	ldr	r2, [sp, #24]
   13666:	428a      	cmp	r2, r1
   13668:	d302      	bcc.n	13670 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   1366a:	e7ff      	b.n	1366c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   1366c:	b00a      	add	sp, #40	; 0x28
   1366e:	bd80      	pop	{r7, pc}
                self.len -= 1;
   13670:	9805      	ldr	r0, [sp, #20]
   13672:	6801      	ldr	r1, [r0, #0]
   13674:	1e4a      	subs	r2, r1, #1
   13676:	2901      	cmp	r1, #1
   13678:	9204      	str	r2, [sp, #16]
   1367a:	d314      	bcc.n	136a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   1367c:	e7ff      	b.n	1367e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   1367e:	9804      	ldr	r0, [sp, #16]
   13680:	9905      	ldr	r1, [sp, #20]
   13682:	6008      	str	r0, [r1, #0]
                let len = self.len;
   13684:	680a      	ldr	r2, [r1, #0]
   13686:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   13688:	4608      	mov	r0, r1
   1368a:	9203      	str	r2, [sp, #12]
   1368c:	f7ff fe41 	bl	13312 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   13690:	9002      	str	r0, [sp, #8]
   13692:	9101      	str	r1, [sp, #4]
   13694:	e7ff      	b.n	13696 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   13696:	9802      	ldr	r0, [sp, #8]
   13698:	9901      	ldr	r1, [sp, #4]
   1369a:	9a03      	ldr	r2, [sp, #12]
   1369c:	f7f9 f830 	bl	c700 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   136a0:	e7ff      	b.n	136a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   136a2:	e7ff      	b.n	136a4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   136a4:	e7dc      	b.n	13660 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   136a6:	f24d 1040 	movw	r0, #53568	; 0xd140
   136aa:	f2c0 0001 	movt	r0, #1
   136ae:	f24d 122c 	movw	r2, #53548	; 0xd12c
   136b2:	f2c0 0201 	movt	r2, #1
   136b6:	2121      	movs	r1, #33	; 0x21
   136b8:	f000 fb32 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   136bc:	defe      	udf	#254	; 0xfe

000136be <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   136be:	b580      	push	{r7, lr}
   136c0:	b084      	sub	sp, #16
   136c2:	460a      	mov	r2, r1
   136c4:	9002      	str	r0, [sp, #8]
   136c6:	f88d 100f 	strb.w	r1, [sp, #15]
   136ca:	9201      	str	r2, [sp, #4]
   136cc:	f7f5 fb33 	bl	8d36 <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   136d0:	e7ff      	b.n	136d2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   136d2:	b004      	add	sp, #16
   136d4:	bd80      	pop	{r7, pc}

000136d6 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   136d6:	b081      	sub	sp, #4
   136d8:	9000      	str	r0, [sp, #0]
   136da:	7800      	ldrb	r0, [r0, #0]
   136dc:	b001      	add	sp, #4
   136de:	4770      	bx	lr

000136e0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    fn to_usize() -> usize {
   136e0:	b580      	push	{r7, lr}
   136e2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   136e4:	f000 f9fc 	bl	13ae0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   136e8:	9003      	str	r0, [sp, #12]
   136ea:	e7ff      	b.n	136ec <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   136ec:	9803      	ldr	r0, [sp, #12]
   136ee:	f000 f9fd 	bl	13aec <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   136f2:	9002      	str	r0, [sp, #8]
   136f4:	e7ff      	b.n	136f6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   136f6:	f000 f8cb 	bl	13890 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   136fa:	9001      	str	r0, [sp, #4]
   136fc:	e7ff      	b.n	136fe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   136fe:	9801      	ldr	r0, [sp, #4]
   13700:	0041      	lsls	r1, r0, #1
   13702:	9100      	str	r1, [sp, #0]
   13704:	e7ff      	b.n	13706 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   13706:	9802      	ldr	r0, [sp, #8]
   13708:	9900      	ldr	r1, [sp, #0]
   1370a:	4308      	orrs	r0, r1
    }
   1370c:	b004      	add	sp, #16
   1370e:	bd80      	pop	{r7, pc}

00013710 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   13710:	b580      	push	{r7, lr}
   13712:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   13714:	f000 f9e4 	bl	13ae0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   13718:	9003      	str	r0, [sp, #12]
   1371a:	e7ff      	b.n	1371c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   1371c:	9803      	ldr	r0, [sp, #12]
   1371e:	f000 f9e5 	bl	13aec <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   13722:	9002      	str	r0, [sp, #8]
   13724:	e7ff      	b.n	13726 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   13726:	f000 f86b 	bl	13800 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   1372a:	9001      	str	r0, [sp, #4]
   1372c:	e7ff      	b.n	1372e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   1372e:	9801      	ldr	r0, [sp, #4]
   13730:	0041      	lsls	r1, r0, #1
   13732:	9100      	str	r1, [sp, #0]
   13734:	e7ff      	b.n	13736 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   13736:	9802      	ldr	r0, [sp, #8]
   13738:	9900      	ldr	r1, [sp, #0]
   1373a:	4308      	orrs	r0, r1
    }
   1373c:	b004      	add	sp, #16
   1373e:	bd80      	pop	{r7, pc}

00013740 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E>:
    fn to_usize() -> usize {
   13740:	b580      	push	{r7, lr}
   13742:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   13744:	f000 f9cc 	bl	13ae0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   13748:	9003      	str	r0, [sp, #12]
   1374a:	e7ff      	b.n	1374c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0xc>
   1374c:	9803      	ldr	r0, [sp, #12]
   1374e:	f000 f9cd 	bl	13aec <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   13752:	9002      	str	r0, [sp, #8]
   13754:	e7ff      	b.n	13756 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x16>
   13756:	f000 f8fb 	bl	13950 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>
   1375a:	9001      	str	r0, [sp, #4]
   1375c:	e7ff      	b.n	1375e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x1e>
   1375e:	9801      	ldr	r0, [sp, #4]
   13760:	0041      	lsls	r1, r0, #1
   13762:	9100      	str	r1, [sp, #0]
   13764:	e7ff      	b.n	13766 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h5f3f15cd71f01d22E+0x26>
   13766:	9802      	ldr	r0, [sp, #8]
   13768:	9900      	ldr	r1, [sp, #0]
   1376a:	4308      	orrs	r0, r1
    }
   1376c:	b004      	add	sp, #16
   1376e:	bd80      	pop	{r7, pc}

00013770 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   13770:	b580      	push	{r7, lr}
   13772:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   13774:	f000 f9b4 	bl	13ae0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   13778:	9003      	str	r0, [sp, #12]
   1377a:	e7ff      	b.n	1377c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   1377c:	9803      	ldr	r0, [sp, #12]
   1377e:	f000 f9b5 	bl	13aec <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   13782:	9002      	str	r0, [sp, #8]
   13784:	e7ff      	b.n	13786 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   13786:	f000 f80b 	bl	137a0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   1378a:	9001      	str	r0, [sp, #4]
   1378c:	e7ff      	b.n	1378e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   1378e:	9801      	ldr	r0, [sp, #4]
   13790:	0041      	lsls	r1, r0, #1
   13792:	9100      	str	r1, [sp, #0]
   13794:	e7ff      	b.n	13796 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   13796:	9802      	ldr	r0, [sp, #8]
   13798:	9900      	ldr	r1, [sp, #0]
   1379a:	4308      	orrs	r0, r1
    }
   1379c:	b004      	add	sp, #16
   1379e:	bd80      	pop	{r7, pc}

000137a0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   137a0:	b580      	push	{r7, lr}
   137a2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   137a4:	f000 f99c 	bl	13ae0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   137a8:	9003      	str	r0, [sp, #12]
   137aa:	e7ff      	b.n	137ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   137ac:	9803      	ldr	r0, [sp, #12]
   137ae:	f000 f99d 	bl	13aec <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   137b2:	9002      	str	r0, [sp, #8]
   137b4:	e7ff      	b.n	137b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   137b6:	f000 f89b 	bl	138f0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   137ba:	9001      	str	r0, [sp, #4]
   137bc:	e7ff      	b.n	137be <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   137be:	9801      	ldr	r0, [sp, #4]
   137c0:	0041      	lsls	r1, r0, #1
   137c2:	9100      	str	r1, [sp, #0]
   137c4:	e7ff      	b.n	137c6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   137c6:	9802      	ldr	r0, [sp, #8]
   137c8:	9900      	ldr	r1, [sp, #0]
   137ca:	4308      	orrs	r0, r1
    }
   137cc:	b004      	add	sp, #16
   137ce:	bd80      	pop	{r7, pc}

000137d0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   137d0:	b580      	push	{r7, lr}
   137d2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   137d4:	f000 f984 	bl	13ae0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   137d8:	9003      	str	r0, [sp, #12]
   137da:	e7ff      	b.n	137dc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   137dc:	9803      	ldr	r0, [sp, #12]
   137de:	f000 f985 	bl	13aec <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   137e2:	9002      	str	r0, [sp, #8]
   137e4:	e7ff      	b.n	137e6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   137e6:	f7ff ff7b 	bl	136e0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   137ea:	9001      	str	r0, [sp, #4]
   137ec:	e7ff      	b.n	137ee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   137ee:	9801      	ldr	r0, [sp, #4]
   137f0:	0041      	lsls	r1, r0, #1
   137f2:	9100      	str	r1, [sp, #0]
   137f4:	e7ff      	b.n	137f6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   137f6:	9802      	ldr	r0, [sp, #8]
   137f8:	9900      	ldr	r1, [sp, #0]
   137fa:	4308      	orrs	r0, r1
    }
   137fc:	b004      	add	sp, #16
   137fe:	bd80      	pop	{r7, pc}

00013800 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   13800:	b580      	push	{r7, lr}
   13802:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   13804:	f000 f96c 	bl	13ae0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   13808:	9003      	str	r0, [sp, #12]
   1380a:	e7ff      	b.n	1380c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   1380c:	9803      	ldr	r0, [sp, #12]
   1380e:	f000 f96d 	bl	13aec <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   13812:	9002      	str	r0, [sp, #8]
   13814:	e7ff      	b.n	13816 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   13816:	f000 f823 	bl	13860 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   1381a:	9001      	str	r0, [sp, #4]
   1381c:	e7ff      	b.n	1381e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   1381e:	9801      	ldr	r0, [sp, #4]
   13820:	0041      	lsls	r1, r0, #1
   13822:	9100      	str	r1, [sp, #0]
   13824:	e7ff      	b.n	13826 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   13826:	9802      	ldr	r0, [sp, #8]
   13828:	9900      	ldr	r1, [sp, #0]
   1382a:	4308      	orrs	r0, r1
    }
   1382c:	b004      	add	sp, #16
   1382e:	bd80      	pop	{r7, pc}

00013830 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   13830:	b580      	push	{r7, lr}
   13832:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   13834:	f000 f954 	bl	13ae0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   13838:	9003      	str	r0, [sp, #12]
   1383a:	e7ff      	b.n	1383c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   1383c:	9803      	ldr	r0, [sp, #12]
   1383e:	f000 f955 	bl	13aec <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   13842:	9002      	str	r0, [sp, #8]
   13844:	e7ff      	b.n	13846 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   13846:	f000 f86b 	bl	13920 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   1384a:	9001      	str	r0, [sp, #4]
   1384c:	e7ff      	b.n	1384e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   1384e:	9801      	ldr	r0, [sp, #4]
   13850:	0041      	lsls	r1, r0, #1
   13852:	9100      	str	r1, [sp, #0]
   13854:	e7ff      	b.n	13856 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   13856:	9802      	ldr	r0, [sp, #8]
   13858:	9900      	ldr	r1, [sp, #0]
   1385a:	4308      	orrs	r0, r1
    }
   1385c:	b004      	add	sp, #16
   1385e:	bd80      	pop	{r7, pc}

00013860 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   13860:	b580      	push	{r7, lr}
   13862:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   13864:	f000 f93c 	bl	13ae0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   13868:	9003      	str	r0, [sp, #12]
   1386a:	e7ff      	b.n	1386c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   1386c:	9803      	ldr	r0, [sp, #12]
   1386e:	f000 f93d 	bl	13aec <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   13872:	9002      	str	r0, [sp, #8]
   13874:	e7ff      	b.n	13876 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   13876:	f000 f823 	bl	138c0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   1387a:	9001      	str	r0, [sp, #4]
   1387c:	e7ff      	b.n	1387e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   1387e:	9801      	ldr	r0, [sp, #4]
   13880:	0041      	lsls	r1, r0, #1
   13882:	9100      	str	r1, [sp, #0]
   13884:	e7ff      	b.n	13886 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   13886:	9802      	ldr	r0, [sp, #8]
   13888:	9900      	ldr	r1, [sp, #0]
   1388a:	4308      	orrs	r0, r1
    }
   1388c:	b004      	add	sp, #16
   1388e:	bd80      	pop	{r7, pc}

00013890 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   13890:	b580      	push	{r7, lr}
   13892:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   13894:	f000 f926 	bl	13ae4 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   13898:	9003      	str	r0, [sp, #12]
   1389a:	e7ff      	b.n	1389c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   1389c:	9803      	ldr	r0, [sp, #12]
   1389e:	f000 f925 	bl	13aec <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   138a2:	9002      	str	r0, [sp, #8]
   138a4:	e7ff      	b.n	138a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   138a6:	f000 f91f 	bl	13ae8 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   138aa:	9001      	str	r0, [sp, #4]
   138ac:	e7ff      	b.n	138ae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   138ae:	9801      	ldr	r0, [sp, #4]
   138b0:	0041      	lsls	r1, r0, #1
   138b2:	9100      	str	r1, [sp, #0]
   138b4:	e7ff      	b.n	138b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   138b6:	9802      	ldr	r0, [sp, #8]
   138b8:	9900      	ldr	r1, [sp, #0]
   138ba:	4308      	orrs	r0, r1
    }
   138bc:	b004      	add	sp, #16
   138be:	bd80      	pop	{r7, pc}

000138c0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   138c0:	b580      	push	{r7, lr}
   138c2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   138c4:	f000 f90c 	bl	13ae0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   138c8:	9003      	str	r0, [sp, #12]
   138ca:	e7ff      	b.n	138cc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   138cc:	9803      	ldr	r0, [sp, #12]
   138ce:	f000 f90d 	bl	13aec <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   138d2:	9002      	str	r0, [sp, #8]
   138d4:	e7ff      	b.n	138d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   138d6:	f7ff ff7b 	bl	137d0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   138da:	9001      	str	r0, [sp, #4]
   138dc:	e7ff      	b.n	138de <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   138de:	9801      	ldr	r0, [sp, #4]
   138e0:	0041      	lsls	r1, r0, #1
   138e2:	9100      	str	r1, [sp, #0]
   138e4:	e7ff      	b.n	138e6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   138e6:	9802      	ldr	r0, [sp, #8]
   138e8:	9900      	ldr	r1, [sp, #0]
   138ea:	4308      	orrs	r0, r1
    }
   138ec:	b004      	add	sp, #16
   138ee:	bd80      	pop	{r7, pc}

000138f0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   138f0:	b580      	push	{r7, lr}
   138f2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   138f4:	f000 f8f4 	bl	13ae0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   138f8:	9003      	str	r0, [sp, #12]
   138fa:	e7ff      	b.n	138fc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   138fc:	9803      	ldr	r0, [sp, #12]
   138fe:	f000 f8f5 	bl	13aec <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   13902:	9002      	str	r0, [sp, #8]
   13904:	e7ff      	b.n	13906 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   13906:	f7ff ff03 	bl	13710 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   1390a:	9001      	str	r0, [sp, #4]
   1390c:	e7ff      	b.n	1390e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   1390e:	9801      	ldr	r0, [sp, #4]
   13910:	0041      	lsls	r1, r0, #1
   13912:	9100      	str	r1, [sp, #0]
   13914:	e7ff      	b.n	13916 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   13916:	9802      	ldr	r0, [sp, #8]
   13918:	9900      	ldr	r1, [sp, #0]
   1391a:	4308      	orrs	r0, r1
    }
   1391c:	b004      	add	sp, #16
   1391e:	bd80      	pop	{r7, pc}

00013920 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   13920:	b580      	push	{r7, lr}
   13922:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   13924:	f000 f8dc 	bl	13ae0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   13928:	9003      	str	r0, [sp, #12]
   1392a:	e7ff      	b.n	1392c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   1392c:	9803      	ldr	r0, [sp, #12]
   1392e:	f000 f8dd 	bl	13aec <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   13932:	9002      	str	r0, [sp, #8]
   13934:	e7ff      	b.n	13936 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   13936:	f7ff ff1b 	bl	13770 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   1393a:	9001      	str	r0, [sp, #4]
   1393c:	e7ff      	b.n	1393e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   1393e:	9801      	ldr	r0, [sp, #4]
   13940:	0041      	lsls	r1, r0, #1
   13942:	9100      	str	r1, [sp, #0]
   13944:	e7ff      	b.n	13946 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   13946:	9802      	ldr	r0, [sp, #8]
   13948:	9900      	ldr	r1, [sp, #0]
   1394a:	4308      	orrs	r0, r1
    }
   1394c:	b004      	add	sp, #16
   1394e:	bd80      	pop	{r7, pc}

00013950 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>:
    fn to_usize() -> usize {
   13950:	b580      	push	{r7, lr}
   13952:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   13954:	f000 f8c4 	bl	13ae0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   13958:	9003      	str	r0, [sp, #12]
   1395a:	e7ff      	b.n	1395c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0xc>
   1395c:	9803      	ldr	r0, [sp, #12]
   1395e:	f000 f8c5 	bl	13aec <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   13962:	9002      	str	r0, [sp, #8]
   13964:	e7ff      	b.n	13966 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x16>
   13966:	f7ff ff63 	bl	13830 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   1396a:	9001      	str	r0, [sp, #4]
   1396c:	e7ff      	b.n	1396e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x1e>
   1396e:	9801      	ldr	r0, [sp, #4]
   13970:	0041      	lsls	r1, r0, #1
   13972:	9100      	str	r1, [sp, #0]
   13974:	e7ff      	b.n	13976 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x26>
   13976:	9802      	ldr	r0, [sp, #8]
   13978:	9900      	ldr	r1, [sp, #0]
   1397a:	4308      	orrs	r0, r1
    }
   1397c:	b004      	add	sp, #16
   1397e:	bd80      	pop	{r7, pc}

00013980 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   13980:	2000      	movs	r0, #0
        0
    }
   13982:	4770      	bx	lr

00013984 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   13984:	2001      	movs	r0, #1
        1
    }
   13986:	4770      	bx	lr

00013988 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>:
   13988:	b580      	push	{r7, lr}
   1398a:	b084      	sub	sp, #16
   1398c:	9002      	str	r0, [sp, #8]
   1398e:	9103      	str	r1, [sp, #12]
   13990:	f000 f80f 	bl	139b2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>
   13994:	9001      	str	r0, [sp, #4]
   13996:	e7ff      	b.n	13998 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E+0x10>
   13998:	9801      	ldr	r0, [sp, #4]
   1399a:	b004      	add	sp, #16
   1399c:	bd80      	pop	{r7, pc}

0001399e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>:
   1399e:	b580      	push	{r7, lr}
   139a0:	b082      	sub	sp, #8
   139a2:	9001      	str	r0, [sp, #4]
   139a4:	f000 f873 	bl	13a8e <_ZN4core3ptr4read17h27a035d1812d8297E>
   139a8:	9000      	str	r0, [sp, #0]
   139aa:	e7ff      	b.n	139ac <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E+0xe>
   139ac:	9800      	ldr	r0, [sp, #0]
   139ae:	b002      	add	sp, #8
   139b0:	bd80      	pop	{r7, pc}

000139b2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>:
   139b2:	b084      	sub	sp, #16
   139b4:	9001      	str	r0, [sp, #4]
   139b6:	9102      	str	r1, [sp, #8]
   139b8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   139bc:	9003      	str	r0, [sp, #12]
   139be:	9803      	ldr	r0, [sp, #12]
   139c0:	9000      	str	r0, [sp, #0]
   139c2:	e7ff      	b.n	139c4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE+0x12>
   139c4:	9800      	ldr	r0, [sp, #0]
   139c6:	b004      	add	sp, #16
   139c8:	4770      	bx	lr

000139ca <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>:
   139ca:	b082      	sub	sp, #8
   139cc:	9001      	str	r0, [sp, #4]
   139ce:	9000      	str	r0, [sp, #0]
   139d0:	e7ff      	b.n	139d2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E+0x8>
   139d2:	9800      	ldr	r0, [sp, #0]
   139d4:	fab0 f180 	clz	r1, r0
   139d8:	0948      	lsrs	r0, r1, #5
   139da:	b002      	add	sp, #8
   139dc:	4770      	bx	lr

000139de <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE>:
   139de:	b580      	push	{r7, lr}
   139e0:	b088      	sub	sp, #32
   139e2:	9006      	str	r0, [sp, #24]
   139e4:	9107      	str	r1, [sp, #28]
   139e6:	9004      	str	r0, [sp, #16]
   139e8:	4608      	mov	r0, r1
   139ea:	9103      	str	r1, [sp, #12]
   139ec:	f001 f839 	bl	14a62 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   139f0:	9002      	str	r0, [sp, #8]
   139f2:	e7ff      	b.n	139f4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x16>
   139f4:	9802      	ldr	r0, [sp, #8]
   139f6:	07c1      	lsls	r1, r0, #31
   139f8:	2900      	cmp	r1, #0
   139fa:	d105      	bne.n	13a08 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x2a>
   139fc:	e7ff      	b.n	139fe <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x20>
   139fe:	9803      	ldr	r0, [sp, #12]
   13a00:	f001 f833 	bl	14a6a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   13a04:	9001      	str	r0, [sp, #4]
   13a06:	e007      	b.n	13a18 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x3a>
   13a08:	9804      	ldr	r0, [sp, #16]
   13a0a:	9903      	ldr	r1, [sp, #12]
   13a0c:	f001 fd95 	bl	1553a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>
   13a10:	f88d 0017 	strb.w	r0, [sp, #23]
   13a14:	e7ff      	b.n	13a16 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x38>
   13a16:	e015      	b.n	13a44 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   13a18:	9801      	ldr	r0, [sp, #4]
   13a1a:	07c1      	lsls	r1, r0, #31
   13a1c:	2900      	cmp	r1, #0
   13a1e:	d107      	bne.n	13a30 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x52>
   13a20:	e7ff      	b.n	13a22 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x44>
   13a22:	9804      	ldr	r0, [sp, #16]
   13a24:	9903      	ldr	r1, [sp, #12]
   13a26:	f001 ff59 	bl	158dc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>
   13a2a:	f88d 0017 	strb.w	r0, [sp, #23]
   13a2e:	e007      	b.n	13a40 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x62>
   13a30:	9804      	ldr	r0, [sp, #16]
   13a32:	9903      	ldr	r1, [sp, #12]
   13a34:	f001 fde0 	bl	155f8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>
   13a38:	f88d 0017 	strb.w	r0, [sp, #23]
   13a3c:	e7ff      	b.n	13a3e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x60>
   13a3e:	e000      	b.n	13a42 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   13a40:	e7ff      	b.n	13a42 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   13a42:	e7ff      	b.n	13a44 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   13a44:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13a48:	b008      	add	sp, #32
   13a4a:	bd80      	pop	{r7, pc}

00013a4c <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>:
   13a4c:	b081      	sub	sp, #4
   13a4e:	4601      	mov	r1, r0
   13a50:	f88d 0003 	strb.w	r0, [sp, #3]
   13a54:	b2c0      	uxtb	r0, r0
   13a56:	b001      	add	sp, #4
   13a58:	4770      	bx	lr

00013a5a <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>:
   13a5a:	b086      	sub	sp, #24
   13a5c:	9004      	str	r0, [sp, #16]
   13a5e:	9105      	str	r1, [sp, #20]
   13a60:	9002      	str	r0, [sp, #8]
   13a62:	9103      	str	r1, [sp, #12]
   13a64:	9802      	ldr	r0, [sp, #8]
   13a66:	9903      	ldr	r1, [sp, #12]
   13a68:	9000      	str	r0, [sp, #0]
   13a6a:	9101      	str	r1, [sp, #4]
   13a6c:	9800      	ldr	r0, [sp, #0]
   13a6e:	9901      	ldr	r1, [sp, #4]
   13a70:	b006      	add	sp, #24
   13a72:	4770      	bx	lr

00013a74 <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>:
   13a74:	b086      	sub	sp, #24
   13a76:	9004      	str	r0, [sp, #16]
   13a78:	9105      	str	r1, [sp, #20]
   13a7a:	9002      	str	r0, [sp, #8]
   13a7c:	9103      	str	r1, [sp, #12]
   13a7e:	9802      	ldr	r0, [sp, #8]
   13a80:	9903      	ldr	r1, [sp, #12]
   13a82:	9000      	str	r0, [sp, #0]
   13a84:	9101      	str	r1, [sp, #4]
   13a86:	9800      	ldr	r0, [sp, #0]
   13a88:	9901      	ldr	r1, [sp, #4]
   13a8a:	b006      	add	sp, #24
   13a8c:	4770      	bx	lr

00013a8e <_ZN4core3ptr4read17h27a035d1812d8297E>:
   13a8e:	b580      	push	{r7, lr}
   13a90:	b088      	sub	sp, #32
   13a92:	9003      	str	r0, [sp, #12]
   13a94:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   13a98:	f8ad 100a 	strh.w	r1, [sp, #10]
   13a9c:	9001      	str	r0, [sp, #4]
   13a9e:	e7ff      	b.n	13aa0 <_ZN4core3ptr4read17h27a035d1812d8297E+0x12>
   13aa0:	f10d 000a 	add.w	r0, sp, #10
   13aa4:	9006      	str	r0, [sp, #24]
   13aa6:	9007      	str	r0, [sp, #28]
   13aa8:	e7ff      	b.n	13aaa <_ZN4core3ptr4read17h27a035d1812d8297E+0x1c>
   13aaa:	f10d 010a 	add.w	r1, sp, #10
   13aae:	2201      	movs	r2, #1
   13ab0:	9801      	ldr	r0, [sp, #4]
   13ab2:	f000 f822 	bl	13afa <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>
   13ab6:	e7ff      	b.n	13ab8 <_ZN4core3ptr4read17h27a035d1812d8297E+0x2a>
   13ab8:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   13abc:	4601      	mov	r1, r0
   13abe:	f8ad 0014 	strh.w	r0, [sp, #20]
   13ac2:	f8ad 0016 	strh.w	r0, [sp, #22]
   13ac6:	9100      	str	r1, [sp, #0]
   13ac8:	e7ff      	b.n	13aca <_ZN4core3ptr4read17h27a035d1812d8297E+0x3c>
   13aca:	9800      	ldr	r0, [sp, #0]
   13acc:	b008      	add	sp, #32
   13ace:	bd80      	pop	{r7, pc}

00013ad0 <_ZN4core3ptr5write17h147d4643d861e927E>:
   13ad0:	b082      	sub	sp, #8
   13ad2:	460a      	mov	r2, r1
   13ad4:	9000      	str	r0, [sp, #0]
   13ad6:	f8ad 1006 	strh.w	r1, [sp, #6]
   13ada:	8001      	strh	r1, [r0, #0]
   13adc:	b002      	add	sp, #8
   13ade:	4770      	bx	lr

00013ae0 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
    fn to_u8() -> u8 {
   13ae0:	2000      	movs	r0, #0
    }
   13ae2:	4770      	bx	lr

00013ae4 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
    fn to_u8() -> u8 {
   13ae4:	2001      	movs	r0, #1
    }
   13ae6:	4770      	bx	lr

00013ae8 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   13ae8:	2000      	movs	r0, #0
    }
   13aea:	4770      	bx	lr

00013aec <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   13aec:	b081      	sub	sp, #4
   13aee:	4601      	mov	r1, r0
   13af0:	f88d 0003 	strb.w	r0, [sp, #3]
   13af4:	b2c0      	uxtb	r0, r0
   13af6:	b001      	add	sp, #4
   13af8:	4770      	bx	lr

00013afa <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>:
   13afa:	b580      	push	{r7, lr}
   13afc:	b084      	sub	sp, #16
   13afe:	9001      	str	r0, [sp, #4]
   13b00:	9102      	str	r1, [sp, #8]
   13b02:	9203      	str	r2, [sp, #12]
   13b04:	0052      	lsls	r2, r2, #1
   13b06:	9000      	str	r0, [sp, #0]
   13b08:	4608      	mov	r0, r1
   13b0a:	9900      	ldr	r1, [sp, #0]
   13b0c:	f006 fcdc 	bl	1a4c8 <__aeabi_memcpy>
   13b10:	e7ff      	b.n	13b12 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E+0x18>
   13b12:	b004      	add	sp, #16
   13b14:	bd80      	pop	{r7, pc}

00013b16 <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   13b16:	4770      	bx	lr

00013b18 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   13b18:	b5b0      	push	{r4, r5, r7, lr}
   13b1a:	b086      	sub	sp, #24
   13b1c:	460c      	mov	r4, r1
   13b1e:	4605      	mov	r5, r0
   13b20:	f001 fb87 	bl	15232 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   13b24:	b9a8      	cbnz	r0, 13b52 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   13b26:	f24d 1364 	movw	r3, #53604	; 0xd164
   13b2a:	2200      	movs	r2, #0
   13b2c:	f2c0 0301 	movt	r3, #1
   13b30:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   13b34:	9205      	str	r2, [sp, #20]
   13b36:	9304      	str	r3, [sp, #16]
   13b38:	e9cd 2202 	strd	r2, r2, [sp, #8]
   13b3c:	2201      	movs	r2, #1
   13b3e:	9201      	str	r2, [sp, #4]
   13b40:	f24d 2228 	movw	r2, #53800	; 0xd228
   13b44:	f2c0 0201 	movt	r2, #1
   13b48:	9200      	str	r2, [sp, #0]
   13b4a:	466a      	mov	r2, sp
   13b4c:	f000 fbe0 	bl	14310 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   13b50:	b110      	cbz	r0, 13b58 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   13b52:	2001      	movs	r0, #1
   13b54:	b006      	add	sp, #24
   13b56:	bdb0      	pop	{r4, r5, r7, pc}
   13b58:	1d28      	adds	r0, r5, #4
   13b5a:	4621      	mov	r1, r4
   13b5c:	b006      	add	sp, #24
   13b5e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   13b62:	f001 bb66 	b.w	15232 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

00013b66 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   13b66:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   13b6a:	f243 6134 	movw	r1, #13876	; 0x3634
   13b6e:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   13b72:	f6cd 0131 	movt	r1, #55345	; 0xd831
   13b76:	4770      	bx	lr

00013b78 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   13b78:	b570      	push	{r4, r5, r6, lr}
   13b7a:	460e      	mov	r6, r1
   13b7c:	3909      	subs	r1, #9
   13b7e:	4604      	mov	r4, r0
   13b80:	291e      	cmp	r1, #30
   13b82:	d818      	bhi.n	13bb6 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   13b84:	2002      	movs	r0, #2
   13b86:	2574      	movs	r5, #116	; 0x74
   13b88:	e8df f001 	tbb	[pc, r1]
   13b8c:	1c1c1019 	.word	0x1c1c1019
   13b90:	1c1c1c29 	.word	0x1c1c1c29
   13b94:	1c1c1c1c 	.word	0x1c1c1c1c
   13b98:	1c1c1c1c 	.word	0x1c1c1c1c
   13b9c:	1c1c1c1c 	.word	0x1c1c1c1c
   13ba0:	1c1c1c1c 	.word	0x1c1c1c1c
   13ba4:	1c1c171c 	.word	0x1c1c171c
   13ba8:	00171c1c 	.word	0x00171c1c
   13bac:	2002      	movs	r0, #2
   13bae:	256e      	movs	r5, #110	; 0x6e
   13bb0:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   13bb4:	bd70      	pop	{r4, r5, r6, pc}
   13bb6:	2e5c      	cmp	r6, #92	; 0x5c
   13bb8:	d104      	bne.n	13bc4 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   13bba:	2002      	movs	r0, #2
   13bbc:	4635      	mov	r5, r6
   13bbe:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   13bc2:	bd70      	pop	{r4, r5, r6, pc}
   13bc4:	2a00      	cmp	r2, #0
   13bc6:	d040      	beq.n	13c4a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   13bc8:	f3c6 1083 	ubfx	r0, r6, #6, #4
   13bcc:	0ab1      	lsrs	r1, r6, #10
   13bce:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   13bd2:	d309      	bcc.n	13be8 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   13bd4:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   13bd8:	d137      	bne.n	13c4a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   13bda:	211e      	movs	r1, #30
   13bdc:	e00b      	b.n	13bf6 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   13bde:	2002      	movs	r0, #2
   13be0:	2572      	movs	r5, #114	; 0x72
   13be2:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   13be6:	bd70      	pop	{r4, r5, r6, pc}
   13be8:	f64d 429c 	movw	r2, #56476	; 0xdc9c
   13bec:	f2c0 0201 	movt	r2, #1
   13bf0:	5c51      	ldrb	r1, [r2, r1]
   13bf2:	291e      	cmp	r1, #30
   13bf4:	d842      	bhi.n	13c7c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   13bf6:	f64d 5217 	movw	r2, #56599	; 0xdd17
   13bfa:	f2c0 0201 	movt	r2, #1
   13bfe:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   13c02:	5c09      	ldrb	r1, [r1, r0]
   13c04:	298b      	cmp	r1, #139	; 0x8b
   13c06:	d231      	bcs.n	13c6c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   13c08:	f64d 7008 	movw	r0, #57096	; 0xdf08
   13c0c:	2301      	movs	r3, #1
   13c0e:	f2c0 0001 	movt	r0, #1
   13c12:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   13c16:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   13c1a:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   13c1e:	f8d2 c004 	ldr.w	ip, [r2, #4]
   13c22:	fa03 f501 	lsl.w	r5, r3, r1
   13c26:	f1b1 0220 	subs.w	r2, r1, #32
   13c2a:	f1c1 0120 	rsb	r1, r1, #32
   13c2e:	bf58      	it	pl
   13c30:	2500      	movpl	r5, #0
   13c32:	2a00      	cmp	r2, #0
   13c34:	ea00 0005 	and.w	r0, r0, r5
   13c38:	fa23 f101 	lsr.w	r1, r3, r1
   13c3c:	bf58      	it	pl
   13c3e:	fa03 f102 	lslpl.w	r1, r3, r2
   13c42:	ea01 010c 	and.w	r1, r1, ip
   13c46:	4308      	orrs	r0, r1
   13c48:	d105      	bne.n	13c56 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   13c4a:	4630      	mov	r0, r6
   13c4c:	f001 f9a5 	bl	14f9a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   13c50:	b108      	cbz	r0, 13c56 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   13c52:	2001      	movs	r0, #1
   13c54:	e7b2      	b.n	13bbc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   13c56:	f046 0001 	orr.w	r0, r6, #1
   13c5a:	2107      	movs	r1, #7
   13c5c:	fab0 f080 	clz	r0, r0
   13c60:	f04f 0e05 	mov.w	lr, #5
   13c64:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   13c68:	2003      	movs	r0, #3
   13c6a:	e7a7      	b.n	13bbc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   13c6c:	f64d 408c 	movw	r0, #56460	; 0xdc8c
   13c70:	228b      	movs	r2, #139	; 0x8b
   13c72:	f2c0 0001 	movt	r0, #1
   13c76:	f000 f869 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   13c7a:	defe      	udf	#254	; 0xfe
   13c7c:	f64d 407c 	movw	r0, #56444	; 0xdc7c
   13c80:	221f      	movs	r2, #31
   13c82:	f2c0 0001 	movt	r0, #1
   13c86:	f000 f861 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   13c8a:	defe      	udf	#254	; 0xfe

00013c8c <_ZN4core6option13expect_failed17had6579abaad447b4E>:
   13c8c:	b08a      	sub	sp, #40	; 0x28
   13c8e:	e9cd 0100 	strd	r0, r1, [sp]
   13c92:	2001      	movs	r0, #1
   13c94:	a908      	add	r1, sp, #32
   13c96:	9007      	str	r0, [sp, #28]
   13c98:	9106      	str	r1, [sp, #24]
   13c9a:	2100      	movs	r1, #0
   13c9c:	9105      	str	r1, [sp, #20]
   13c9e:	e9cd 0103 	strd	r0, r1, [sp, #12]
   13ca2:	f24d 302c 	movw	r0, #54060	; 0xd32c
   13ca6:	f2c0 0001 	movt	r0, #1
   13caa:	4611      	mov	r1, r2
   13cac:	9002      	str	r0, [sp, #8]
   13cae:	f645 308f 	movw	r0, #23439	; 0x5b8f
   13cb2:	f2c0 0001 	movt	r0, #1
   13cb6:	9009      	str	r0, [sp, #36]	; 0x24
   13cb8:	4668      	mov	r0, sp
   13cba:	9008      	str	r0, [sp, #32]
   13cbc:	a802      	add	r0, sp, #8
   13cbe:	f000 f865 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13cc2:	defe      	udf	#254	; 0xfe

00013cc4 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   13cc4:	b08e      	sub	sp, #56	; 0x38
   13cc6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   13cca:	2002      	movs	r0, #2
   13ccc:	a90a      	add	r1, sp, #40	; 0x28
   13cce:	9009      	str	r0, [sp, #36]	; 0x24
   13cd0:	9108      	str	r1, [sp, #32]
   13cd2:	2100      	movs	r1, #0
   13cd4:	9107      	str	r1, [sp, #28]
   13cd6:	e9cd 0105 	strd	r0, r1, [sp, #20]
   13cda:	f24d 3038 	movw	r0, #54072	; 0xd338
   13cde:	f2c0 0001 	movt	r0, #1
   13ce2:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   13ce6:	9004      	str	r0, [sp, #16]
   13ce8:	f645 3085 	movw	r0, #23429	; 0x5b85
   13cec:	f2c0 0001 	movt	r0, #1
   13cf0:	900d      	str	r0, [sp, #52]	; 0x34
   13cf2:	a802      	add	r0, sp, #8
   13cf4:	900c      	str	r0, [sp, #48]	; 0x30
   13cf6:	f645 308f 	movw	r0, #23439	; 0x5b8f
   13cfa:	f2c0 0001 	movt	r0, #1
   13cfe:	4661      	mov	r1, ip
   13d00:	900b      	str	r0, [sp, #44]	; 0x2c
   13d02:	4668      	mov	r0, sp
   13d04:	900a      	str	r0, [sp, #40]	; 0x28
   13d06:	a804      	add	r0, sp, #16
   13d08:	f000 f840 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13d0c:	defe      	udf	#254	; 0xfe

00013d0e <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   13d0e:	68c0      	ldr	r0, [r0, #12]
   13d10:	4770      	bx	lr

00013d12 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   13d12:	4770      	bx	lr

00013d14 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   13d14:	e9d0 2100 	ldrd	r2, r1, [r0]
   13d18:	4610      	mov	r0, r2
   13d1a:	4770      	bx	lr

00013d1c <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   13d1c:	6880      	ldr	r0, [r0, #8]
   13d1e:	4770      	bx	lr

00013d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   13d20:	b088      	sub	sp, #32
   13d22:	4694      	mov	ip, r2
   13d24:	f24d 1264 	movw	r2, #53604	; 0xd164
   13d28:	2300      	movs	r3, #0
   13d2a:	f2c0 0201 	movt	r2, #1
   13d2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   13d32:	4668      	mov	r0, sp
   13d34:	9305      	str	r3, [sp, #20]
   13d36:	4661      	mov	r1, ip
   13d38:	9204      	str	r2, [sp, #16]
   13d3a:	2201      	movs	r2, #1
   13d3c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   13d40:	9201      	str	r2, [sp, #4]
   13d42:	aa06      	add	r2, sp, #24
   13d44:	9200      	str	r2, [sp, #0]
   13d46:	f000 f821 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13d4a:	defe      	udf	#254	; 0xfe

00013d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   13d4c:	b08c      	sub	sp, #48	; 0x30
   13d4e:	4603      	mov	r3, r0
   13d50:	e9cd 1200 	strd	r1, r2, [sp]
   13d54:	2002      	movs	r0, #2
   13d56:	a908      	add	r1, sp, #32
   13d58:	9007      	str	r0, [sp, #28]
   13d5a:	9106      	str	r1, [sp, #24]
   13d5c:	2100      	movs	r1, #0
   13d5e:	9105      	str	r1, [sp, #20]
   13d60:	e9cd 0103 	strd	r0, r1, [sp, #12]
   13d64:	f24d 306c 	movw	r0, #54124	; 0xd36c
   13d68:	f2c0 0001 	movt	r0, #1
   13d6c:	4669      	mov	r1, sp
   13d6e:	9002      	str	r0, [sp, #8]
   13d70:	f645 20a1 	movw	r0, #23201	; 0x5aa1
   13d74:	f2c0 0001 	movt	r0, #1
   13d78:	900b      	str	r0, [sp, #44]	; 0x2c
   13d7a:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   13d7e:	a801      	add	r0, sp, #4
   13d80:	9008      	str	r0, [sp, #32]
   13d82:	a802      	add	r0, sp, #8
   13d84:	4619      	mov	r1, r3
   13d86:	f000 f801 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13d8a:	defe      	udf	#254	; 0xfe

00013d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   13d8c:	b084      	sub	sp, #16
   13d8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
   13d92:	f24d 3048 	movw	r0, #54088	; 0xd348
   13d96:	f2c0 0001 	movt	r0, #1
   13d9a:	9001      	str	r0, [sp, #4]
   13d9c:	f24d 1064 	movw	r0, #53604	; 0xd164
   13da0:	f2c0 0001 	movt	r0, #1
   13da4:	9000      	str	r0, [sp, #0]
   13da6:	4668      	mov	r0, sp
   13da8:	f7f4 fca9 	bl	86fe <rust_begin_unwind>
   13dac:	defe      	udf	#254	; 0xfe

00013dae <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   13dae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13db2:	b081      	sub	sp, #4
   13db4:	2a00      	cmp	r2, #0
   13db6:	f000 80fe 	beq.w	13fb6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   13dba:	4690      	mov	r8, r2
   13dbc:	468a      	mov	sl, r1
   13dbe:	4681      	mov	r9, r0
   13dc0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   13dc4:	7800      	ldrb	r0, [r0, #0]
   13dc6:	b948      	cbnz	r0, 13ddc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   13dc8:	e014      	b.n	13df4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   13dca:	44da      	add	sl, fp
   13dcc:	2c00      	cmp	r4, #0
   13dce:	46a0      	mov	r8, r4
   13dd0:	f000 80f1 	beq.w	13fb6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   13dd4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   13dd8:	7800      	ldrb	r0, [r0, #0]
   13dda:	b158      	cbz	r0, 13df4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   13ddc:	e9d9 0100 	ldrd	r0, r1, [r9]
   13de0:	2204      	movs	r2, #4
   13de2:	68cb      	ldr	r3, [r1, #12]
   13de4:	f24d 2184 	movw	r1, #53892	; 0xd284
   13de8:	f2c0 0101 	movt	r1, #1
   13dec:	4798      	blx	r3
   13dee:	2800      	cmp	r0, #0
   13df0:	f040 80e5 	bne.w	13fbe <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   13df4:	f04f 0b00 	mov.w	fp, #0
   13df8:	4641      	mov	r1, r8
   13dfa:	e008      	b.n	13e0e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   13dfc:	ebb8 010b 	subs.w	r1, r8, fp
   13e00:	f04f 0000 	mov.w	r0, #0
   13e04:	bf38      	it	cc
   13e06:	4601      	movcc	r1, r0
   13e08:	45c3      	cmp	fp, r8
   13e0a:	f200 80a5 	bhi.w	13f58 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   13e0e:	eb0a 0e0b 	add.w	lr, sl, fp
   13e12:	2000      	movs	r0, #0
   13e14:	f01e 0203 	ands.w	r2, lr, #3
   13e18:	bf18      	it	ne
   13e1a:	f1d2 0c04 	rsbsne	ip, r2, #4
   13e1e:	d120      	bne.n	13e62 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   13e20:	2908      	cmp	r1, #8
   13e22:	d357      	bcc.n	13ed4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   13e24:	f1a1 0208 	sub.w	r2, r1, #8
   13e28:	4290      	cmp	r0, r2
   13e2a:	d853      	bhi.n	13ed4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   13e2c:	f85e 3000 	ldr.w	r3, [lr, r0]
   13e30:	eb0e 0700 	add.w	r7, lr, r0
   13e34:	687f      	ldr	r7, [r7, #4]
   13e36:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   13e3a:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   13e3e:	ea26 0303 	bic.w	r3, r6, r3
   13e42:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   13e46:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   13e4a:	ea26 0707 	bic.w	r7, r6, r7
   13e4e:	433b      	orrs	r3, r7
   13e50:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   13e54:	d102      	bne.n	13e5c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   13e56:	3008      	adds	r0, #8
   13e58:	4290      	cmp	r0, r2
   13e5a:	d9e7      	bls.n	13e2c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   13e5c:	4288      	cmp	r0, r1
   13e5e:	d939      	bls.n	13ed4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   13e60:	e0b1      	b.n	13fc6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   13e62:	458c      	cmp	ip, r1
   13e64:	bf88      	it	hi
   13e66:	468c      	movhi	ip, r1
   13e68:	eb0e 060c 	add.w	r6, lr, ip
   13e6c:	2000      	movs	r0, #0
   13e6e:	4663      	mov	r3, ip
   13e70:	4677      	mov	r7, lr
   13e72:	b363      	cbz	r3, 13ece <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   13e74:	463a      	mov	r2, r7
   13e76:	f812 4b01 	ldrb.w	r4, [r2], #1
   13e7a:	f1b4 050a 	subs.w	r5, r4, #10
   13e7e:	bf18      	it	ne
   13e80:	2501      	movne	r5, #1
   13e82:	4428      	add	r0, r5
   13e84:	2c0a      	cmp	r4, #10
   13e86:	d059      	beq.n	13f3c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   13e88:	42b2      	cmp	r2, r6
   13e8a:	d020      	beq.n	13ece <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   13e8c:	787a      	ldrb	r2, [r7, #1]
   13e8e:	f1b2 040a 	subs.w	r4, r2, #10
   13e92:	bf18      	it	ne
   13e94:	2401      	movne	r4, #1
   13e96:	4420      	add	r0, r4
   13e98:	2a0a      	cmp	r2, #10
   13e9a:	d04f      	beq.n	13f3c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   13e9c:	1cba      	adds	r2, r7, #2
   13e9e:	42b2      	cmp	r2, r6
   13ea0:	d015      	beq.n	13ece <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   13ea2:	78ba      	ldrb	r2, [r7, #2]
   13ea4:	f1b2 040a 	subs.w	r4, r2, #10
   13ea8:	bf18      	it	ne
   13eaa:	2401      	movne	r4, #1
   13eac:	4420      	add	r0, r4
   13eae:	2a0a      	cmp	r2, #10
   13eb0:	d044      	beq.n	13f3c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   13eb2:	1cfa      	adds	r2, r7, #3
   13eb4:	42b2      	cmp	r2, r6
   13eb6:	d00a      	beq.n	13ece <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   13eb8:	78fa      	ldrb	r2, [r7, #3]
   13eba:	3b04      	subs	r3, #4
   13ebc:	3704      	adds	r7, #4
   13ebe:	f1b2 040a 	subs.w	r4, r2, #10
   13ec2:	bf18      	it	ne
   13ec4:	2401      	movne	r4, #1
   13ec6:	4420      	add	r0, r4
   13ec8:	2a0a      	cmp	r2, #10
   13eca:	d1d2      	bne.n	13e72 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   13ecc:	e036      	b.n	13f3c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   13ece:	4660      	mov	r0, ip
   13ed0:	2908      	cmp	r1, #8
   13ed2:	d2a7      	bcs.n	13e24 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   13ed4:	eb0e 0700 	add.w	r7, lr, r0
   13ed8:	eb0e 0201 	add.w	r2, lr, r1
   13edc:	1a0e      	subs	r6, r1, r0
   13ede:	2100      	movs	r1, #0
   13ee0:	b3ce      	cbz	r6, 13f56 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   13ee2:	463b      	mov	r3, r7
   13ee4:	f813 5b01 	ldrb.w	r5, [r3], #1
   13ee8:	f1b5 040a 	subs.w	r4, r5, #10
   13eec:	bf18      	it	ne
   13eee:	2401      	movne	r4, #1
   13ef0:	4421      	add	r1, r4
   13ef2:	2d0a      	cmp	r5, #10
   13ef4:	d021      	beq.n	13f3a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   13ef6:	4293      	cmp	r3, r2
   13ef8:	d02d      	beq.n	13f56 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   13efa:	787b      	ldrb	r3, [r7, #1]
   13efc:	f1b3 050a 	subs.w	r5, r3, #10
   13f00:	bf18      	it	ne
   13f02:	2501      	movne	r5, #1
   13f04:	4429      	add	r1, r5
   13f06:	2b0a      	cmp	r3, #10
   13f08:	d017      	beq.n	13f3a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   13f0a:	1cbb      	adds	r3, r7, #2
   13f0c:	4293      	cmp	r3, r2
   13f0e:	d022      	beq.n	13f56 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   13f10:	78bb      	ldrb	r3, [r7, #2]
   13f12:	f1b3 050a 	subs.w	r5, r3, #10
   13f16:	bf18      	it	ne
   13f18:	2501      	movne	r5, #1
   13f1a:	4429      	add	r1, r5
   13f1c:	2b0a      	cmp	r3, #10
   13f1e:	d00c      	beq.n	13f3a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   13f20:	1cfb      	adds	r3, r7, #3
   13f22:	4293      	cmp	r3, r2
   13f24:	d017      	beq.n	13f56 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   13f26:	78fb      	ldrb	r3, [r7, #3]
   13f28:	3e04      	subs	r6, #4
   13f2a:	3704      	adds	r7, #4
   13f2c:	f1b3 050a 	subs.w	r5, r3, #10
   13f30:	bf18      	it	ne
   13f32:	2501      	movne	r5, #1
   13f34:	4429      	add	r1, r5
   13f36:	2b0a      	cmp	r3, #10
   13f38:	d1d2      	bne.n	13ee0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   13f3a:	4408      	add	r0, r1
   13f3c:	4458      	add	r0, fp
   13f3e:	f100 0b01 	add.w	fp, r0, #1
   13f42:	4540      	cmp	r0, r8
   13f44:	f4bf af5a 	bcs.w	13dfc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   13f48:	f81a 0000 	ldrb.w	r0, [sl, r0]
   13f4c:	280a      	cmp	r0, #10
   13f4e:	f47f af55 	bne.w	13dfc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   13f52:	2001      	movs	r0, #1
   13f54:	e001      	b.n	13f5a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   13f56:	2000      	movs	r0, #0
   13f58:	46c3      	mov	fp, r8
   13f5a:	f8d9 1008 	ldr.w	r1, [r9, #8]
   13f5e:	eba8 040b 	sub.w	r4, r8, fp
   13f62:	7008      	strb	r0, [r1, #0]
   13f64:	fab4 f084 	clz	r0, r4
   13f68:	0942      	lsrs	r2, r0, #5
   13f6a:	fabb f08b 	clz	r0, fp
   13f6e:	0943      	lsrs	r3, r0, #5
   13f70:	e9d9 0100 	ldrd	r0, r1, [r9]
   13f74:	ea53 0602 	orrs.w	r6, r3, r2
   13f78:	d106      	bne.n	13f88 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   13f7a:	45d8      	cmp	r8, fp
   13f7c:	d926      	bls.n	13fcc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   13f7e:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   13f82:	f112 0f41 	cmn.w	r2, #65	; 0x41
   13f86:	dd21      	ble.n	13fcc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   13f88:	68cb      	ldr	r3, [r1, #12]
   13f8a:	4651      	mov	r1, sl
   13f8c:	465a      	mov	r2, fp
   13f8e:	4798      	blx	r3
   13f90:	b9a8      	cbnz	r0, 13fbe <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   13f92:	2e00      	cmp	r6, #0
   13f94:	f47f af19 	bne.w	13dca <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   13f98:	45d8      	cmp	r8, fp
   13f9a:	d905      	bls.n	13fa8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   13f9c:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   13fa0:	f110 0f41 	cmn.w	r0, #65	; 0x41
   13fa4:	f73f af11 	bgt.w	13dca <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   13fa8:	4650      	mov	r0, sl
   13faa:	4641      	mov	r1, r8
   13fac:	465a      	mov	r2, fp
   13fae:	4643      	mov	r3, r8
   13fb0:	f000 fe4d 	bl	14c4e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   13fb4:	defe      	udf	#254	; 0xfe
   13fb6:	2000      	movs	r0, #0
   13fb8:	b001      	add	sp, #4
   13fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fbe:	2001      	movs	r0, #1
   13fc0:	b001      	add	sp, #4
   13fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fc6:	f000 fe20 	bl	14c0a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   13fca:	defe      	udf	#254	; 0xfe
   13fcc:	4650      	mov	r0, sl
   13fce:	4641      	mov	r1, r8
   13fd0:	2200      	movs	r2, #0
   13fd2:	465b      	mov	r3, fp
   13fd4:	f000 fe3b 	bl	14c4e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   13fd8:	defe      	udf	#254	; 0xfe

00013fda <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   13fda:	b5f0      	push	{r4, r5, r6, r7, lr}
   13fdc:	b08d      	sub	sp, #52	; 0x34
   13fde:	4604      	mov	r4, r0
   13fe0:	7a00      	ldrb	r0, [r0, #8]
   13fe2:	b138      	cbz	r0, 13ff4 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   13fe4:	2001      	movs	r0, #1
   13fe6:	6861      	ldr	r1, [r4, #4]
   13fe8:	7220      	strb	r0, [r4, #8]
   13fea:	1c48      	adds	r0, r1, #1
   13fec:	6060      	str	r0, [r4, #4]
   13fee:	4620      	mov	r0, r4
   13ff0:	b00d      	add	sp, #52	; 0x34
   13ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13ff4:	4616      	mov	r6, r2
   13ff6:	460d      	mov	r5, r1
   13ff8:	e9d4 1200 	ldrd	r1, r2, [r4]
   13ffc:	7808      	ldrb	r0, [r1, #0]
   13ffe:	0740      	lsls	r0, r0, #29
   14000:	d419      	bmi.n	14036 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   14002:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   14006:	f24d 3196 	movw	r1, #54166	; 0xd396
   1400a:	f24d 3c9a 	movw	ip, #54170	; 0xd39a
   1400e:	f2c0 0101 	movt	r1, #1
   14012:	2a00      	cmp	r2, #0
   14014:	f2c0 0c01 	movt	ip, #1
   14018:	bf08      	it	eq
   1401a:	4661      	moveq	r1, ip
   1401c:	68db      	ldr	r3, [r3, #12]
   1401e:	f04f 0202 	mov.w	r2, #2
   14022:	bf08      	it	eq
   14024:	2201      	moveq	r2, #1
   14026:	4798      	blx	r3
   14028:	2800      	cmp	r0, #0
   1402a:	d1db      	bne.n	13fe4 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   1402c:	68f2      	ldr	r2, [r6, #12]
   1402e:	4628      	mov	r0, r5
   14030:	6821      	ldr	r1, [r4, #0]
   14032:	4790      	blx	r2
   14034:	e7d7      	b.n	13fe6 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   14036:	b95a      	cbnz	r2, 14050 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   14038:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1403c:	2202      	movs	r2, #2
   1403e:	68cb      	ldr	r3, [r1, #12]
   14040:	f24d 3198 	movw	r1, #54168	; 0xd398
   14044:	f2c0 0101 	movt	r1, #1
   14048:	4798      	blx	r3
   1404a:	2800      	cmp	r0, #0
   1404c:	d1ca      	bne.n	13fe4 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   1404e:	6821      	ldr	r1, [r4, #0]
   14050:	2001      	movs	r0, #1
   14052:	f10d 030f 	add.w	r3, sp, #15
   14056:	f88d 000f 	strb.w	r0, [sp, #15]
   1405a:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   1405e:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   14062:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   14066:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   1406a:	f891 1020 	ldrb.w	r1, [r1, #32]
   1406e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   14072:	a904      	add	r1, sp, #16
   14074:	e9cd 0204 	strd	r0, r2, [sp, #16]
   14078:	f24d 307c 	movw	r0, #54140	; 0xd37c
   1407c:	f2c0 0001 	movt	r0, #1
   14080:	68f2      	ldr	r2, [r6, #12]
   14082:	900b      	str	r0, [sp, #44]	; 0x2c
   14084:	4668      	mov	r0, sp
   14086:	900a      	str	r0, [sp, #40]	; 0x28
   14088:	4628      	mov	r0, r5
   1408a:	e9cd 3708 	strd	r3, r7, [sp, #32]
   1408e:	e9cd ce06 	strd	ip, lr, [sp, #24]
   14092:	4790      	blx	r2
   14094:	2800      	cmp	r0, #0
   14096:	d1a5      	bne.n	13fe4 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   14098:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1409c:	2202      	movs	r2, #2
   1409e:	68cb      	ldr	r3, [r1, #12]
   140a0:	f24d 3194 	movw	r1, #54164	; 0xd394
   140a4:	f2c0 0101 	movt	r1, #1
   140a8:	4798      	blx	r3
   140aa:	e79c      	b.n	13fe6 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

000140ac <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   140ac:	b5b0      	push	{r4, r5, r7, lr}
   140ae:	4604      	mov	r4, r0
   140b0:	7a05      	ldrb	r5, [r0, #8]
   140b2:	6840      	ldr	r0, [r0, #4]
   140b4:	b308      	cbz	r0, 140fa <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   140b6:	b10d      	cbz	r5, 140bc <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   140b8:	2501      	movs	r5, #1
   140ba:	e01d      	b.n	140f8 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   140bc:	2801      	cmp	r0, #1
   140be:	d110      	bne.n	140e2 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   140c0:	7a60      	ldrb	r0, [r4, #9]
   140c2:	b170      	cbz	r0, 140e2 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   140c4:	6821      	ldr	r1, [r4, #0]
   140c6:	7808      	ldrb	r0, [r1, #0]
   140c8:	0740      	lsls	r0, r0, #29
   140ca:	d40a      	bmi.n	140e2 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   140cc:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   140d0:	2201      	movs	r2, #1
   140d2:	68cb      	ldr	r3, [r1, #12]
   140d4:	f24d 319b 	movw	r1, #54171	; 0xd39b
   140d8:	f2c0 0101 	movt	r1, #1
   140dc:	2501      	movs	r5, #1
   140de:	4798      	blx	r3
   140e0:	b950      	cbnz	r0, 140f8 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   140e2:	6821      	ldr	r1, [r4, #0]
   140e4:	2201      	movs	r2, #1
   140e6:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   140ea:	68cb      	ldr	r3, [r1, #12]
   140ec:	f24d 319c 	movw	r1, #54172	; 0xd39c
   140f0:	f2c0 0101 	movt	r1, #1
   140f4:	4798      	blx	r3
   140f6:	4605      	mov	r5, r0
   140f8:	7225      	strb	r5, [r4, #8]
   140fa:	2d00      	cmp	r5, #0
   140fc:	bf18      	it	ne
   140fe:	2501      	movne	r5, #1
   14100:	4628      	mov	r0, r5
   14102:	bdb0      	pop	{r4, r5, r7, pc}

00014104 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   14104:	b580      	push	{r7, lr}
   14106:	b082      	sub	sp, #8
   14108:	468c      	mov	ip, r1
   1410a:	2100      	movs	r1, #0
   1410c:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   14110:	9101      	str	r1, [sp, #4]
   14112:	d207      	bcs.n	14124 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   14114:	f88d c004 	strb.w	ip, [sp, #4]
   14118:	a901      	add	r1, sp, #4
   1411a:	2201      	movs	r2, #1
   1411c:	f7ff fe47 	bl	13dae <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   14120:	b002      	add	sp, #8
   14122:	bd80      	pop	{r7, pc}
   14124:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   14128:	d210      	bcs.n	1414c <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   1412a:	ea4f 119c 	mov.w	r1, ip, lsr #6
   1412e:	2306      	movs	r3, #6
   14130:	2202      	movs	r2, #2
   14132:	f363 115f 	bfi	r1, r3, #5, #27
   14136:	f362 1c9f 	bfi	ip, r2, #6, #26
   1413a:	f88d c005 	strb.w	ip, [sp, #5]
   1413e:	f88d 1004 	strb.w	r1, [sp, #4]
   14142:	a901      	add	r1, sp, #4
   14144:	f7ff fe33 	bl	13dae <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   14148:	b002      	add	sp, #8
   1414a:	bd80      	pop	{r7, pc}
   1414c:	2202      	movs	r2, #2
   1414e:	4663      	mov	r3, ip
   14150:	a901      	add	r1, sp, #4
   14152:	f362 139f 	bfi	r3, r2, #6, #26
   14156:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   1415a:	d213      	bcs.n	14184 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   1415c:	f88d 3006 	strb.w	r3, [sp, #6]
   14160:	ea4f 139c 	mov.w	r3, ip, lsr #6
   14164:	f362 139f 	bfi	r3, r2, #6, #26
   14168:	f88d 3005 	strb.w	r3, [sp, #5]
   1416c:	ea4f 321c 	mov.w	r2, ip, lsr #12
   14170:	230e      	movs	r3, #14
   14172:	f363 121f 	bfi	r2, r3, #4, #28
   14176:	f88d 2004 	strb.w	r2, [sp, #4]
   1417a:	2203      	movs	r2, #3
   1417c:	f7ff fe17 	bl	13dae <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   14180:	b002      	add	sp, #8
   14182:	bd80      	pop	{r7, pc}
   14184:	f88d 3007 	strb.w	r3, [sp, #7]
   14188:	ea4f 139c 	mov.w	r3, ip, lsr #6
   1418c:	f362 139f 	bfi	r3, r2, #6, #26
   14190:	f88d 3006 	strb.w	r3, [sp, #6]
   14194:	ea4f 331c 	mov.w	r3, ip, lsr #12
   14198:	f362 139f 	bfi	r3, r2, #6, #26
   1419c:	22f0      	movs	r2, #240	; 0xf0
   1419e:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   141a2:	f88d 3005 	strb.w	r3, [sp, #5]
   141a6:	f88d 2004 	strb.w	r2, [sp, #4]
   141aa:	2204      	movs	r2, #4
   141ac:	f7ff fdff 	bl	13dae <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   141b0:	b002      	add	sp, #8
   141b2:	bd80      	pop	{r7, pc}

000141b4 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   141b4:	b570      	push	{r4, r5, r6, lr}
   141b6:	b088      	sub	sp, #32
   141b8:	9001      	str	r0, [sp, #4]
   141ba:	aa02      	add	r2, sp, #8
   141bc:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   141c0:	f24d 4168 	movw	r1, #54376	; 0xd468
   141c4:	4610      	mov	r0, r2
   141c6:	f2c0 0101 	movt	r1, #1
   141ca:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   141ce:	a801      	add	r0, sp, #4
   141d0:	f000 f89e 	bl	14310 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   141d4:	b008      	add	sp, #32
   141d6:	bd70      	pop	{r4, r5, r6, pc}

000141d8 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   141d8:	6800      	ldr	r0, [r0, #0]
   141da:	f7ff bde8 	b.w	13dae <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

000141de <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   141de:	6800      	ldr	r0, [r0, #0]
   141e0:	f7ff bf90 	b.w	14104 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

000141e4 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   141e4:	b570      	push	{r4, r5, r6, lr}
   141e6:	b088      	sub	sp, #32
   141e8:	6800      	ldr	r0, [r0, #0]
   141ea:	aa02      	add	r2, sp, #8
   141ec:	9001      	str	r0, [sp, #4]
   141ee:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   141f2:	4610      	mov	r0, r2
   141f4:	f24d 4168 	movw	r1, #54376	; 0xd468
   141f8:	f2c0 0101 	movt	r1, #1
   141fc:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   14200:	a801      	add	r0, sp, #4
   14202:	f000 f885 	bl	14310 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   14206:	b008      	add	sp, #32
   14208:	bd70      	pop	{r4, r5, r6, pc}

0001420a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   1420a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1420e:	b08d      	sub	sp, #52	; 0x34
   14210:	468c      	mov	ip, r1
   14212:	6801      	ldr	r1, [r0, #0]
   14214:	f248 5e1f 	movw	lr, #34079	; 0x851f
   14218:	f24d 309f 	movw	r0, #54175	; 0xd39f
   1421c:	f242 7810 	movw	r8, #10000	; 0x2710
   14220:	4541      	cmp	r1, r8
   14222:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   14226:	f2c0 0001 	movt	r0, #1
   1422a:	d337      	bcc.n	1429c <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   1422c:	f241 7959 	movw	r9, #5977	; 0x1759
   14230:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   14234:	f10d 0b0c 	add.w	fp, sp, #12
   14238:	2300      	movs	r3, #0
   1423a:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   1423e:	f04f 0a64 	mov.w	sl, #100	; 0x64
   14242:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   14246:	fba1 2409 	umull	r2, r4, r1, r9
   1424a:	42b9      	cmp	r1, r7
   1424c:	ea4f 3254 	mov.w	r2, r4, lsr #13
   14250:	fb02 1418 	mls	r4, r2, r8, r1
   14254:	4611      	mov	r1, r2
   14256:	b2a5      	uxth	r5, r4
   14258:	fba5 560e 	umull	r5, r6, r5, lr
   1425c:	ea4f 1556 	mov.w	r5, r6, lsr #5
   14260:	eb0b 0603 	add.w	r6, fp, r3
   14264:	fb05 441a 	mls	r4, r5, sl, r4
   14268:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   1426c:	f1a3 0304 	sub.w	r3, r3, #4
   14270:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   14274:	b2a4      	uxth	r4, r4
   14276:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   1427a:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   1427e:	d8e2      	bhi.n	14246 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   14280:	f103 0427 	add.w	r4, r3, #39	; 0x27
   14284:	4611      	mov	r1, r2
   14286:	2963      	cmp	r1, #99	; 0x63
   14288:	dc0b      	bgt.n	142a2 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   1428a:	460b      	mov	r3, r1
   1428c:	2b0a      	cmp	r3, #10
   1428e:	db17      	blt.n	142c0 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   14290:	1ea1      	subs	r1, r4, #2
   14292:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   14296:	aa03      	add	r2, sp, #12
   14298:	5250      	strh	r0, [r2, r1]
   1429a:	e016      	b.n	142ca <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   1429c:	2427      	movs	r4, #39	; 0x27
   1429e:	2963      	cmp	r1, #99	; 0x63
   142a0:	ddf3      	ble.n	1428a <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   142a2:	b28a      	uxth	r2, r1
   142a4:	3c02      	subs	r4, #2
   142a6:	fba2 230e 	umull	r2, r3, r2, lr
   142aa:	2264      	movs	r2, #100	; 0x64
   142ac:	095b      	lsrs	r3, r3, #5
   142ae:	fb03 1112 	mls	r1, r3, r2, r1
   142b2:	aa03      	add	r2, sp, #12
   142b4:	b289      	uxth	r1, r1
   142b6:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   142ba:	5311      	strh	r1, [r2, r4]
   142bc:	2b0a      	cmp	r3, #10
   142be:	dae7      	bge.n	14290 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   142c0:	1e61      	subs	r1, r4, #1
   142c2:	aa03      	add	r2, sp, #12
   142c4:	f103 0030 	add.w	r0, r3, #48	; 0x30
   142c8:	5450      	strb	r0, [r2, r1]
   142ca:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   142ce:	aa03      	add	r2, sp, #12
   142d0:	4411      	add	r1, r2
   142d2:	f24d 1264 	movw	r2, #53604	; 0xd164
   142d6:	e9cd 1000 	strd	r1, r0, [sp]
   142da:	f2c0 0201 	movt	r2, #1
   142de:	4660      	mov	r0, ip
   142e0:	2101      	movs	r1, #1
   142e2:	2300      	movs	r3, #0
   142e4:	f000 f8f4 	bl	144d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   142e8:	b00d      	add	sp, #52	; 0x34
   142ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000142ee <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   142ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142f2:	b086      	sub	sp, #24
   142f4:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   142f8:	466a      	mov	r2, sp
   142fa:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   142fe:	4613      	mov	r3, r2
   14300:	4660      	mov	r0, ip
   14302:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   14306:	f000 f803 	bl	14310 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   1430a:	b006      	add	sp, #24
   1430c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014310 <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   14310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14314:	b08b      	sub	sp, #44	; 0x2c
   14316:	2303      	movs	r3, #3
   14318:	6897      	ldr	r7, [r2, #8]
   1431a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1431e:	2320      	movs	r3, #32
   14320:	9303      	str	r3, [sp, #12]
   14322:	2300      	movs	r3, #0
   14324:	2f00      	cmp	r7, #0
   14326:	9302      	str	r3, [sp, #8]
   14328:	e9cd 0108 	strd	r0, r1, [sp, #32]
   1432c:	9306      	str	r3, [sp, #24]
   1432e:	9304      	str	r3, [sp, #16]
   14330:	d07c      	beq.n	1442c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   14332:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   14336:	e9d2 9400 	ldrd	r9, r4, [r2]
   1433a:	45a3      	cmp	fp, r4
   1433c:	bf88      	it	hi
   1433e:	46a3      	movhi	fp, r4
   14340:	f1bb 0f00 	cmp.w	fp, #0
   14344:	f000 809b 	beq.w	1447e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   14348:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   1434c:	68cd      	ldr	r5, [r1, #12]
   1434e:	9201      	str	r2, [sp, #4]
   14350:	e9d9 3200 	ldrd	r3, r2, [r9]
   14354:	4619      	mov	r1, r3
   14356:	47a8      	blx	r5
   14358:	2800      	cmp	r0, #0
   1435a:	f040 809e 	bne.w	1449a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1435e:	464d      	mov	r5, r9
   14360:	f04f 0a01 	mov.w	sl, #1
   14364:	f04f 0800 	mov.w	r8, #0
   14368:	f04f 0910 	mov.w	r9, #16
   1436c:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   14370:	6841      	ldr	r1, [r0, #4]
   14372:	9103      	str	r1, [sp, #12]
   14374:	7f01      	ldrb	r1, [r0, #28]
   14376:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   1437a:	6881      	ldr	r1, [r0, #8]
   1437c:	9102      	str	r1, [sp, #8]
   1437e:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   14382:	b18a      	cbz	r2, 143a8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   14384:	2a02      	cmp	r2, #2
   14386:	d011      	beq.n	143ac <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   14388:	9a01      	ldr	r2, [sp, #4]
   1438a:	4291      	cmp	r1, r2
   1438c:	f080 8098 	bcs.w	144c0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   14390:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   14394:	f244 230b 	movw	r3, #16907	; 0x420b
   14398:	f2c0 0301 	movt	r3, #1
   1439c:	6852      	ldr	r2, [r2, #4]
   1439e:	429a      	cmp	r2, r3
   143a0:	d104      	bne.n	143ac <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   143a2:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   143a6:	6809      	ldr	r1, [r1, #0]
   143a8:	2201      	movs	r2, #1
   143aa:	e000      	b.n	143ae <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   143ac:	2200      	movs	r2, #0
   143ae:	e9cd 2104 	strd	r2, r1, [sp, #16]
   143b2:	f857 1009 	ldr.w	r1, [r7, r9]
   143b6:	68c0      	ldr	r0, [r0, #12]
   143b8:	b180      	cbz	r0, 143dc <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   143ba:	2802      	cmp	r0, #2
   143bc:	d010      	beq.n	143e0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   143be:	9801      	ldr	r0, [sp, #4]
   143c0:	4281      	cmp	r1, r0
   143c2:	d27d      	bcs.n	144c0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   143c4:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   143c8:	f244 220b 	movw	r2, #16907	; 0x420b
   143cc:	f2c0 0201 	movt	r2, #1
   143d0:	6840      	ldr	r0, [r0, #4]
   143d2:	4290      	cmp	r0, r2
   143d4:	d104      	bne.n	143e0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   143d6:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   143da:	6801      	ldr	r1, [r0, #0]
   143dc:	2001      	movs	r0, #1
   143de:	e000      	b.n	143e2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   143e0:	2000      	movs	r0, #0
   143e2:	eb07 0209 	add.w	r2, r7, r9
   143e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   143ea:	9801      	ldr	r0, [sp, #4]
   143ec:	f852 1c10 	ldr.w	r1, [r2, #-16]
   143f0:	4281      	cmp	r1, r0
   143f2:	d25d      	bcs.n	144b0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   143f4:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   143f8:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   143fc:	684a      	ldr	r2, [r1, #4]
   143fe:	a902      	add	r1, sp, #8
   14400:	4790      	blx	r2
   14402:	2800      	cmp	r0, #0
   14404:	d149      	bne.n	1449a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   14406:	45da      	cmp	sl, fp
   14408:	d24b      	bcs.n	144a2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   1440a:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   1440e:	eb05 0208 	add.w	r2, r5, r8
   14412:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   14416:	68db      	ldr	r3, [r3, #12]
   14418:	4798      	blx	r3
   1441a:	f109 0920 	add.w	r9, r9, #32
   1441e:	f108 0808 	add.w	r8, r8, #8
   14422:	f10a 0a01 	add.w	sl, sl, #1
   14426:	2800      	cmp	r0, #0
   14428:	d0a0      	beq.n	1436c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   1442a:	e036      	b.n	1449a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1442c:	6956      	ldr	r6, [r2, #20]
   1442e:	e9d2 9400 	ldrd	r9, r4, [r2]
   14432:	42a6      	cmp	r6, r4
   14434:	bf88      	it	hi
   14436:	4626      	movhi	r6, r4
   14438:	b30e      	cbz	r6, 1447e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   1443a:	6917      	ldr	r7, [r2, #16]
   1443c:	e9d9 3200 	ldrd	r3, r2, [r9]
   14440:	68cd      	ldr	r5, [r1, #12]
   14442:	4619      	mov	r1, r3
   14444:	47a8      	blx	r5
   14446:	bb40      	cbnz	r0, 1449a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   14448:	f10d 0808 	add.w	r8, sp, #8
   1444c:	2500      	movs	r5, #0
   1444e:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   14452:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   14456:	684a      	ldr	r2, [r1, #4]
   14458:	4641      	mov	r1, r8
   1445a:	4790      	blx	r2
   1445c:	b9e8      	cbnz	r0, 1449a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1445e:	f105 0a01 	add.w	sl, r5, #1
   14462:	45b2      	cmp	sl, r6
   14464:	d20d      	bcs.n	14482 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   14466:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   1446a:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   1446e:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   14472:	68db      	ldr	r3, [r3, #12]
   14474:	4798      	blx	r3
   14476:	2800      	cmp	r0, #0
   14478:	4655      	mov	r5, sl
   1447a:	d0e8      	beq.n	1444e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   1447c:	e00d      	b.n	1449a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1447e:	f04f 0a00 	mov.w	sl, #0
   14482:	4554      	cmp	r4, sl
   14484:	d910      	bls.n	144a8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   14486:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   1448a:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   1448e:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   14492:	6852      	ldr	r2, [r2, #4]
   14494:	68db      	ldr	r3, [r3, #12]
   14496:	4798      	blx	r3
   14498:	b130      	cbz	r0, 144a8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   1449a:	2001      	movs	r0, #1
   1449c:	b00b      	add	sp, #44	; 0x2c
   1449e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144a2:	46a9      	mov	r9, r5
   144a4:	4554      	cmp	r4, sl
   144a6:	d8ee      	bhi.n	14486 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   144a8:	2000      	movs	r0, #0
   144aa:	b00b      	add	sp, #44	; 0x2c
   144ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144b0:	f24d 4098 	movw	r0, #54424	; 0xd498
   144b4:	f2c0 0001 	movt	r0, #1
   144b8:	9a01      	ldr	r2, [sp, #4]
   144ba:	f7ff fc47 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   144be:	defe      	udf	#254	; 0xfe
   144c0:	f24d 40a8 	movw	r0, #54440	; 0xd4a8
   144c4:	f2c0 0001 	movt	r0, #1
   144c8:	9a01      	ldr	r2, [sp, #4]
   144ca:	f7ff fc3f 	bl	13d4c <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   144ce:	defe      	udf	#254	; 0xfe

000144d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   144d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144d4:	b083      	sub	sp, #12
   144d6:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   144da:	469a      	mov	sl, r3
   144dc:	4604      	mov	r4, r0
   144de:	b1e1      	cbz	r1, 1451a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   144e0:	f8d4 e000 	ldr.w	lr, [r4]
   144e4:	f04f 082b 	mov.w	r8, #43	; 0x2b
   144e8:	f01e 0101 	ands.w	r1, lr, #1
   144ec:	bf08      	it	eq
   144ee:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   144f2:	eb01 0907 	add.w	r9, r1, r7
   144f6:	ea5f 714e 	movs.w	r1, lr, lsl #29
   144fa:	d517      	bpl.n	1452c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   144fc:	f1ba 0f00 	cmp.w	sl, #0
   14500:	d033      	beq.n	1456a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   14502:	f1aa 0101 	sub.w	r1, sl, #1
   14506:	f00a 0c03 	and.w	ip, sl, #3
   1450a:	2903      	cmp	r1, #3
   1450c:	d22f      	bcs.n	1456e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   1450e:	2100      	movs	r1, #0
   14510:	4613      	mov	r3, r2
   14512:	f1bc 0f00 	cmp.w	ip, #0
   14516:	d152      	bne.n	145be <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   14518:	e069      	b.n	145ee <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   1451a:	f8d4 e000 	ldr.w	lr, [r4]
   1451e:	f107 0901 	add.w	r9, r7, #1
   14522:	f04f 082d 	mov.w	r8, #45	; 0x2d
   14526:	ea5f 714e 	movs.w	r1, lr, lsl #29
   1452a:	d4e7      	bmi.n	144fc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   1452c:	f04f 0a00 	mov.w	sl, #0
   14530:	2200      	movs	r2, #0
   14532:	68a0      	ldr	r0, [r4, #8]
   14534:	2801      	cmp	r0, #1
   14536:	d161      	bne.n	145fc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   14538:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   1453c:	45cb      	cmp	fp, r9
   1453e:	d95d      	bls.n	145fc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   14540:	ea5f 700e 	movs.w	r0, lr, lsl #28
   14544:	d46e      	bmi.n	14624 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   14546:	9202      	str	r2, [sp, #8]
   14548:	ebab 0109 	sub.w	r1, fp, r9
   1454c:	f894 2020 	ldrb.w	r2, [r4, #32]
   14550:	2000      	movs	r0, #0
   14552:	46a9      	mov	r9, r5
   14554:	460e      	mov	r6, r1
   14556:	2a03      	cmp	r2, #3
   14558:	bf08      	it	eq
   1455a:	2201      	moveq	r2, #1
   1455c:	e8df f002 	tbb	[pc, r2]
   14560:	02840287 	.word	0x02840287
   14564:	2600      	movs	r6, #0
   14566:	4608      	mov	r0, r1
   14568:	e081      	b.n	1466e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   1456a:	2100      	movs	r1, #0
   1456c:	e03f      	b.n	145ee <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   1456e:	ebac 060a 	sub.w	r6, ip, sl
   14572:	2100      	movs	r1, #0
   14574:	4693      	mov	fp, r2
   14576:	4613      	mov	r3, r2
   14578:	e9cd 7501 	strd	r7, r5, [sp, #4]
   1457c:	781a      	ldrb	r2, [r3, #0]
   1457e:	785d      	ldrb	r5, [r3, #1]
   14580:	7898      	ldrb	r0, [r3, #2]
   14582:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   14586:	78df      	ldrb	r7, [r3, #3]
   14588:	2a80      	cmp	r2, #128	; 0x80
   1458a:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   1458e:	bf08      	it	eq
   14590:	3101      	addeq	r1, #1
   14592:	2a80      	cmp	r2, #128	; 0x80
   14594:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   14598:	bf08      	it	eq
   1459a:	3101      	addeq	r1, #1
   1459c:	2880      	cmp	r0, #128	; 0x80
   1459e:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   145a2:	bf08      	it	eq
   145a4:	3101      	addeq	r1, #1
   145a6:	2880      	cmp	r0, #128	; 0x80
   145a8:	bf08      	it	eq
   145aa:	3101      	addeq	r1, #1
   145ac:	3304      	adds	r3, #4
   145ae:	3604      	adds	r6, #4
   145b0:	d1e4      	bne.n	1457c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   145b2:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   145b6:	465a      	mov	r2, fp
   145b8:	f1bc 0f00 	cmp.w	ip, #0
   145bc:	d017      	beq.n	145ee <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   145be:	7818      	ldrb	r0, [r3, #0]
   145c0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   145c4:	2880      	cmp	r0, #128	; 0x80
   145c6:	bf08      	it	eq
   145c8:	3101      	addeq	r1, #1
   145ca:	f1bc 0f01 	cmp.w	ip, #1
   145ce:	d00e      	beq.n	145ee <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   145d0:	7858      	ldrb	r0, [r3, #1]
   145d2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   145d6:	2880      	cmp	r0, #128	; 0x80
   145d8:	bf08      	it	eq
   145da:	3101      	addeq	r1, #1
   145dc:	f1bc 0f02 	cmp.w	ip, #2
   145e0:	d005      	beq.n	145ee <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   145e2:	7898      	ldrb	r0, [r3, #2]
   145e4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   145e8:	2880      	cmp	r0, #128	; 0x80
   145ea:	bf08      	it	eq
   145ec:	3101      	addeq	r1, #1
   145ee:	eb09 000a 	add.w	r0, r9, sl
   145f2:	eba0 0901 	sub.w	r9, r0, r1
   145f6:	68a0      	ldr	r0, [r4, #8]
   145f8:	2801      	cmp	r0, #1
   145fa:	d09d      	beq.n	14538 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   145fc:	4620      	mov	r0, r4
   145fe:	4641      	mov	r1, r8
   14600:	4653      	mov	r3, sl
   14602:	f000 f893 	bl	1472c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   14606:	b120      	cbz	r0, 14612 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   14608:	2601      	movs	r6, #1
   1460a:	4630      	mov	r0, r6
   1460c:	b003      	add	sp, #12
   1460e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14612:	69e1      	ldr	r1, [r4, #28]
   14614:	463a      	mov	r2, r7
   14616:	69a0      	ldr	r0, [r4, #24]
   14618:	68cb      	ldr	r3, [r1, #12]
   1461a:	4629      	mov	r1, r5
   1461c:	b003      	add	sp, #12
   1461e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14622:	4718      	bx	r3
   14624:	6860      	ldr	r0, [r4, #4]
   14626:	2601      	movs	r6, #1
   14628:	9002      	str	r0, [sp, #8]
   1462a:	2030      	movs	r0, #48	; 0x30
   1462c:	f894 1020 	ldrb.w	r1, [r4, #32]
   14630:	4653      	mov	r3, sl
   14632:	6060      	str	r0, [r4, #4]
   14634:	4620      	mov	r0, r4
   14636:	9101      	str	r1, [sp, #4]
   14638:	4641      	mov	r1, r8
   1463a:	f884 6020 	strb.w	r6, [r4, #32]
   1463e:	f000 f875 	bl	1472c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   14642:	2800      	cmp	r0, #0
   14644:	d1e1      	bne.n	1460a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   14646:	f894 2020 	ldrb.w	r2, [r4, #32]
   1464a:	ebab 0109 	sub.w	r1, fp, r9
   1464e:	2000      	movs	r0, #0
   14650:	46a9      	mov	r9, r5
   14652:	2a03      	cmp	r2, #3
   14654:	bf08      	it	eq
   14656:	2201      	moveq	r2, #1
   14658:	460e      	mov	r6, r1
   1465a:	e8df f002 	tbb	[pc, r2]
   1465e:	0235      	.short	0x0235
   14660:	0232      	.short	0x0232
   14662:	2600      	movs	r6, #0
   14664:	4608      	mov	r0, r1
   14666:	e02f      	b.n	146c8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   14668:	0848      	lsrs	r0, r1, #1
   1466a:	3101      	adds	r1, #1
   1466c:	084e      	lsrs	r6, r1, #1
   1466e:	1c45      	adds	r5, r0, #1
   14670:	3d01      	subs	r5, #1
   14672:	d007      	beq.n	14684 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   14674:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   14678:	6861      	ldr	r1, [r4, #4]
   1467a:	6912      	ldr	r2, [r2, #16]
   1467c:	4790      	blx	r2
   1467e:	2800      	cmp	r0, #0
   14680:	d0f6      	beq.n	14670 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   14682:	e7c1      	b.n	14608 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   14684:	9a02      	ldr	r2, [sp, #8]
   14686:	4620      	mov	r0, r4
   14688:	4641      	mov	r1, r8
   1468a:	4653      	mov	r3, sl
   1468c:	f8d4 b004 	ldr.w	fp, [r4, #4]
   14690:	f000 f84c 	bl	1472c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   14694:	2800      	cmp	r0, #0
   14696:	d1b7      	bne.n	14608 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   14698:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   1469c:	463a      	mov	r2, r7
   1469e:	68cb      	ldr	r3, [r1, #12]
   146a0:	4649      	mov	r1, r9
   146a2:	4798      	blx	r3
   146a4:	2800      	cmp	r0, #0
   146a6:	d1af      	bne.n	14608 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   146a8:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   146ac:	1c77      	adds	r7, r6, #1
   146ae:	2601      	movs	r6, #1
   146b0:	3f01      	subs	r7, #1
   146b2:	d02c      	beq.n	1470e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   146b4:	6922      	ldr	r2, [r4, #16]
   146b6:	4628      	mov	r0, r5
   146b8:	4659      	mov	r1, fp
   146ba:	4790      	blx	r2
   146bc:	2800      	cmp	r0, #0
   146be:	d0f7      	beq.n	146b0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   146c0:	e7a3      	b.n	1460a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   146c2:	0848      	lsrs	r0, r1, #1
   146c4:	3101      	adds	r1, #1
   146c6:	084e      	lsrs	r6, r1, #1
   146c8:	1c45      	adds	r5, r0, #1
   146ca:	3d01      	subs	r5, #1
   146cc:	d007      	beq.n	146de <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   146ce:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   146d2:	6861      	ldr	r1, [r4, #4]
   146d4:	6912      	ldr	r2, [r2, #16]
   146d6:	4790      	blx	r2
   146d8:	2800      	cmp	r0, #0
   146da:	d0f6      	beq.n	146ca <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   146dc:	e794      	b.n	14608 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   146de:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   146e2:	463a      	mov	r2, r7
   146e4:	68cb      	ldr	r3, [r1, #12]
   146e6:	4649      	mov	r1, r9
   146e8:	f8d4 8004 	ldr.w	r8, [r4, #4]
   146ec:	4798      	blx	r3
   146ee:	2800      	cmp	r0, #0
   146f0:	f47f af8a 	bne.w	14608 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   146f4:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   146f8:	1c77      	adds	r7, r6, #1
   146fa:	2601      	movs	r6, #1
   146fc:	3f01      	subs	r7, #1
   146fe:	d00b      	beq.n	14718 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   14700:	692a      	ldr	r2, [r5, #16]
   14702:	4648      	mov	r0, r9
   14704:	4641      	mov	r1, r8
   14706:	4790      	blx	r2
   14708:	2800      	cmp	r0, #0
   1470a:	d0f7      	beq.n	146fc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   1470c:	e77d      	b.n	1460a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   1470e:	2600      	movs	r6, #0
   14710:	4630      	mov	r0, r6
   14712:	b003      	add	sp, #12
   14714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14718:	9801      	ldr	r0, [sp, #4]
   1471a:	2600      	movs	r6, #0
   1471c:	f884 0020 	strb.w	r0, [r4, #32]
   14720:	9802      	ldr	r0, [sp, #8]
   14722:	6060      	str	r0, [r4, #4]
   14724:	4630      	mov	r0, r6
   14726:	b003      	add	sp, #12
   14728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001472c <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   1472c:	b570      	push	{r4, r5, r6, lr}
   1472e:	461c      	mov	r4, r3
   14730:	4615      	mov	r5, r2
   14732:	4606      	mov	r6, r0
   14734:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   14738:	d006      	beq.n	14748 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   1473a:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   1473e:	6912      	ldr	r2, [r2, #16]
   14740:	4790      	blx	r2
   14742:	b108      	cbz	r0, 14748 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   14744:	2001      	movs	r0, #1
   14746:	bd70      	pop	{r4, r5, r6, pc}
   14748:	b13d      	cbz	r5, 1475a <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   1474a:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   1474e:	4622      	mov	r2, r4
   14750:	68cb      	ldr	r3, [r1, #12]
   14752:	4629      	mov	r1, r5
   14754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14758:	4718      	bx	r3
   1475a:	2000      	movs	r0, #0
   1475c:	bd70      	pop	{r4, r5, r6, pc}
	...

00014760 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   14760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14764:	b081      	sub	sp, #4
   14766:	f8d0 e008 	ldr.w	lr, [r0, #8]
   1476a:	4682      	mov	sl, r0
   1476c:	6900      	ldr	r0, [r0, #16]
   1476e:	4691      	mov	r9, r2
   14770:	4688      	mov	r8, r1
   14772:	f1be 0f01 	cmp.w	lr, #1
   14776:	d111      	bne.n	1479c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   14778:	2801      	cmp	r0, #1
   1477a:	d012      	beq.n	147a2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   1477c:	f1b9 0f00 	cmp.w	r9, #0
   14780:	f000 80c5 	beq.w	1490e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   14784:	f1a9 0101 	sub.w	r1, r9, #1
   14788:	f009 0003 	and.w	r0, r9, #3
   1478c:	2903      	cmp	r1, #3
   1478e:	d267      	bcs.n	14860 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   14790:	2100      	movs	r1, #0
   14792:	4642      	mov	r2, r8
   14794:	2800      	cmp	r0, #0
   14796:	f040 8083 	bne.w	148a0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   1479a:	e097      	b.n	148cc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   1479c:	2801      	cmp	r0, #1
   1479e:	f040 80bd 	bne.w	1491c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   147a2:	f1b9 0f00 	cmp.w	r9, #0
   147a6:	d054      	beq.n	14852 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   147a8:	f8da 0014 	ldr.w	r0, [sl, #20]
   147ac:	eb08 0109 	add.w	r1, r8, r9
   147b0:	2200      	movs	r2, #0
   147b2:	4647      	mov	r7, r8
   147b4:	1c43      	adds	r3, r0, #1
   147b6:	4646      	mov	r6, r8
   147b8:	463c      	mov	r4, r7
   147ba:	f914 5b01 	ldrsb.w	r5, [r4], #1
   147be:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   147c2:	b2e8      	uxtb	r0, r5
   147c4:	dc2e      	bgt.n	14824 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   147c6:	428c      	cmp	r4, r1
   147c8:	d01a      	beq.n	14800 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   147ca:	787d      	ldrb	r5, [r7, #1]
   147cc:	1cbc      	adds	r4, r7, #2
   147ce:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   147d2:	4627      	mov	r7, r4
   147d4:	f000 0b1f 	and.w	fp, r0, #31
   147d8:	28df      	cmp	r0, #223	; 0xdf
   147da:	d917      	bls.n	1480c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   147dc:	428f      	cmp	r7, r1
   147de:	d018      	beq.n	14812 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   147e0:	f817 4b01 	ldrb.w	r4, [r7], #1
   147e4:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   147e8:	463c      	mov	r4, r7
   147ea:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   147ee:	28f0      	cmp	r0, #240	; 0xf0
   147f0:	d316      	bcc.n	14820 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   147f2:	428f      	cmp	r7, r1
   147f4:	d020      	beq.n	14838 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   147f6:	f817 0b01 	ldrb.w	r0, [r7], #1
   147fa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   147fe:	e01d      	b.n	1483c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   14800:	2500      	movs	r5, #0
   14802:	460f      	mov	r7, r1
   14804:	f000 0b1f 	and.w	fp, r0, #31
   14808:	28df      	cmp	r0, #223	; 0xdf
   1480a:	d8e7      	bhi.n	147dc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   1480c:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   14810:	e008      	b.n	14824 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   14812:	f04f 0c00 	mov.w	ip, #0
   14816:	460f      	mov	r7, r1
   14818:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   1481c:	28f0      	cmp	r0, #240	; 0xf0
   1481e:	d2e8      	bcs.n	147f2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   14820:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   14824:	4627      	mov	r7, r4
   14826:	3b01      	subs	r3, #1
   14828:	d065      	beq.n	148f6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   1482a:	1b90      	subs	r0, r2, r6
   1482c:	42b9      	cmp	r1, r7
   1482e:	eb00 0207 	add.w	r2, r0, r7
   14832:	463e      	mov	r6, r7
   14834:	d1c0      	bne.n	147b8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   14836:	e061      	b.n	148fc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   14838:	2000      	movs	r0, #0
   1483a:	4627      	mov	r7, r4
   1483c:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   14840:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   14844:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   14848:	4428      	add	r0, r5
   1484a:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   1484e:	d1ea      	bne.n	14826 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   14850:	e054      	b.n	148fc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   14852:	2200      	movs	r2, #0
   14854:	f1be 0f01 	cmp.w	lr, #1
   14858:	d054      	beq.n	14904 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   1485a:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   1485e:	e062      	b.n	14926 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   14860:	eba0 0309 	sub.w	r3, r0, r9
   14864:	2100      	movs	r1, #0
   14866:	4642      	mov	r2, r8
   14868:	7817      	ldrb	r7, [r2, #0]
   1486a:	7856      	ldrb	r6, [r2, #1]
   1486c:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   14870:	7895      	ldrb	r5, [r2, #2]
   14872:	78d4      	ldrb	r4, [r2, #3]
   14874:	2f80      	cmp	r7, #128	; 0x80
   14876:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   1487a:	bf08      	it	eq
   1487c:	3101      	addeq	r1, #1
   1487e:	2f80      	cmp	r7, #128	; 0x80
   14880:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   14884:	bf08      	it	eq
   14886:	3101      	addeq	r1, #1
   14888:	2f80      	cmp	r7, #128	; 0x80
   1488a:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   1488e:	bf08      	it	eq
   14890:	3101      	addeq	r1, #1
   14892:	2f80      	cmp	r7, #128	; 0x80
   14894:	bf08      	it	eq
   14896:	3101      	addeq	r1, #1
   14898:	3204      	adds	r2, #4
   1489a:	3304      	adds	r3, #4
   1489c:	d1e4      	bne.n	14868 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   1489e:	b1a8      	cbz	r0, 148cc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   148a0:	7813      	ldrb	r3, [r2, #0]
   148a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   148a6:	2b80      	cmp	r3, #128	; 0x80
   148a8:	bf08      	it	eq
   148aa:	3101      	addeq	r1, #1
   148ac:	2801      	cmp	r0, #1
   148ae:	d00d      	beq.n	148cc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   148b0:	7853      	ldrb	r3, [r2, #1]
   148b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   148b6:	2b80      	cmp	r3, #128	; 0x80
   148b8:	bf08      	it	eq
   148ba:	3101      	addeq	r1, #1
   148bc:	2802      	cmp	r0, #2
   148be:	d005      	beq.n	148cc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   148c0:	7890      	ldrb	r0, [r2, #2]
   148c2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   148c6:	2880      	cmp	r0, #128	; 0x80
   148c8:	bf08      	it	eq
   148ca:	3101      	addeq	r1, #1
   148cc:	f8da 000c 	ldr.w	r0, [sl, #12]
   148d0:	eba9 0101 	sub.w	r1, r9, r1
   148d4:	4281      	cmp	r1, r0
   148d6:	d221      	bcs.n	1491c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   148d8:	f1b9 0f00 	cmp.w	r9, #0
   148dc:	d029      	beq.n	14932 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   148de:	f1a9 0101 	sub.w	r1, r9, #1
   148e2:	f009 0c03 	and.w	ip, r9, #3
   148e6:	2903      	cmp	r1, #3
   148e8:	d225      	bcs.n	14936 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   148ea:	2100      	movs	r1, #0
   148ec:	4643      	mov	r3, r8
   148ee:	f1bc 0f00 	cmp.w	ip, #0
   148f2:	d142      	bne.n	1497a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   148f4:	e059      	b.n	149aa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   148f6:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   148fa:	d167      	bne.n	149cc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   148fc:	464a      	mov	r2, r9
   148fe:	f1be 0f01 	cmp.w	lr, #1
   14902:	d1aa      	bne.n	1485a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   14904:	4691      	mov	r9, r2
   14906:	f1b9 0f00 	cmp.w	r9, #0
   1490a:	f47f af3b 	bne.w	14784 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   1490e:	2100      	movs	r1, #0
   14910:	f8da 000c 	ldr.w	r0, [sl, #12]
   14914:	eba9 0101 	sub.w	r1, r9, r1
   14918:	4281      	cmp	r1, r0
   1491a:	d3dd      	bcc.n	148d8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   1491c:	f8da 101c 	ldr.w	r1, [sl, #28]
   14920:	464a      	mov	r2, r9
   14922:	f8da 0018 	ldr.w	r0, [sl, #24]
   14926:	68cb      	ldr	r3, [r1, #12]
   14928:	4641      	mov	r1, r8
   1492a:	b001      	add	sp, #4
   1492c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14930:	4718      	bx	r3
   14932:	2100      	movs	r1, #0
   14934:	e039      	b.n	149aa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   14936:	ebac 0709 	sub.w	r7, ip, r9
   1493a:	2100      	movs	r1, #0
   1493c:	4643      	mov	r3, r8
   1493e:	781e      	ldrb	r6, [r3, #0]
   14940:	785d      	ldrb	r5, [r3, #1]
   14942:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   14946:	789c      	ldrb	r4, [r3, #2]
   14948:	78da      	ldrb	r2, [r3, #3]
   1494a:	2e80      	cmp	r6, #128	; 0x80
   1494c:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   14950:	bf08      	it	eq
   14952:	3101      	addeq	r1, #1
   14954:	2e80      	cmp	r6, #128	; 0x80
   14956:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   1495a:	bf08      	it	eq
   1495c:	3101      	addeq	r1, #1
   1495e:	2e80      	cmp	r6, #128	; 0x80
   14960:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   14964:	bf08      	it	eq
   14966:	3101      	addeq	r1, #1
   14968:	2a80      	cmp	r2, #128	; 0x80
   1496a:	bf08      	it	eq
   1496c:	3101      	addeq	r1, #1
   1496e:	3304      	adds	r3, #4
   14970:	3704      	adds	r7, #4
   14972:	d1e4      	bne.n	1493e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   14974:	f1bc 0f00 	cmp.w	ip, #0
   14978:	d017      	beq.n	149aa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1497a:	781a      	ldrb	r2, [r3, #0]
   1497c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   14980:	2a80      	cmp	r2, #128	; 0x80
   14982:	bf08      	it	eq
   14984:	3101      	addeq	r1, #1
   14986:	f1bc 0f01 	cmp.w	ip, #1
   1498a:	d00e      	beq.n	149aa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1498c:	785a      	ldrb	r2, [r3, #1]
   1498e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   14992:	2a80      	cmp	r2, #128	; 0x80
   14994:	bf08      	it	eq
   14996:	3101      	addeq	r1, #1
   14998:	f1bc 0f02 	cmp.w	ip, #2
   1499c:	d005      	beq.n	149aa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1499e:	789a      	ldrb	r2, [r3, #2]
   149a0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   149a4:	2a80      	cmp	r2, #128	; 0x80
   149a6:	bf08      	it	eq
   149a8:	3101      	addeq	r1, #1
   149aa:	f89a 3020 	ldrb.w	r3, [sl, #32]
   149ae:	eba1 0109 	sub.w	r1, r1, r9
   149b2:	4401      	add	r1, r0
   149b4:	2000      	movs	r0, #0
   149b6:	1eda      	subs	r2, r3, #3
   149b8:	bf18      	it	ne
   149ba:	461a      	movne	r2, r3
   149bc:	460e      	mov	r6, r1
   149be:	e8df f002 	tbb	[pc, r2]
   149c2:	0216      	.short	0x0216
   149c4:	0213      	.short	0x0213
   149c6:	2600      	movs	r6, #0
   149c8:	4608      	mov	r0, r1
   149ca:	e010      	b.n	149ee <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   149cc:	2a00      	cmp	r2, #0
   149ce:	bf18      	it	ne
   149d0:	454a      	cmpne	r2, r9
   149d2:	d134      	bne.n	14a3e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   149d4:	4640      	mov	r0, r8
   149d6:	2800      	cmp	r0, #0
   149d8:	bf0c      	ite	eq
   149da:	464a      	moveq	r2, r9
   149dc:	4680      	movne	r8, r0
   149de:	f1be 0f01 	cmp.w	lr, #1
   149e2:	f43f af8f 	beq.w	14904 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   149e6:	e738      	b.n	1485a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   149e8:	0848      	lsrs	r0, r1, #1
   149ea:	3101      	adds	r1, #1
   149ec:	084e      	lsrs	r6, r1, #1
   149ee:	1c44      	adds	r4, r0, #1
   149f0:	3c01      	subs	r4, #1
   149f2:	d008      	beq.n	14a06 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   149f4:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   149f8:	f8da 1004 	ldr.w	r1, [sl, #4]
   149fc:	6912      	ldr	r2, [r2, #16]
   149fe:	4790      	blx	r2
   14a00:	2800      	cmp	r0, #0
   14a02:	d0f5      	beq.n	149f0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   14a04:	e013      	b.n	14a2e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   14a06:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   14a0a:	464a      	mov	r2, r9
   14a0c:	68cb      	ldr	r3, [r1, #12]
   14a0e:	4641      	mov	r1, r8
   14a10:	f8da 7004 	ldr.w	r7, [sl, #4]
   14a14:	4798      	blx	r3
   14a16:	b950      	cbnz	r0, 14a2e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   14a18:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   14a1c:	3601      	adds	r6, #1
   14a1e:	3e01      	subs	r6, #1
   14a20:	d009      	beq.n	14a36 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   14a22:	692a      	ldr	r2, [r5, #16]
   14a24:	4620      	mov	r0, r4
   14a26:	4639      	mov	r1, r7
   14a28:	4790      	blx	r2
   14a2a:	2800      	cmp	r0, #0
   14a2c:	d0f7      	beq.n	14a1e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   14a2e:	2001      	movs	r0, #1
   14a30:	b001      	add	sp, #4
   14a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a36:	2000      	movs	r0, #0
   14a38:	b001      	add	sp, #4
   14a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a3e:	454a      	cmp	r2, r9
   14a40:	d204      	bcs.n	14a4c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   14a42:	f918 0002 	ldrsb.w	r0, [r8, r2]
   14a46:	f110 0f40 	cmn.w	r0, #64	; 0x40
   14a4a:	dac3      	bge.n	149d4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   14a4c:	2000      	movs	r0, #0
   14a4e:	2200      	movs	r2, #0
   14a50:	2800      	cmp	r0, #0
   14a52:	bf0c      	ite	eq
   14a54:	464a      	moveq	r2, r9
   14a56:	4680      	movne	r8, r0
   14a58:	f1be 0f01 	cmp.w	lr, #1
   14a5c:	f43f af52 	beq.w	14904 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   14a60:	e6fb      	b.n	1485a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

00014a62 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   14a62:	7800      	ldrb	r0, [r0, #0]
   14a64:	f3c0 1000 	ubfx	r0, r0, #4, #1
   14a68:	4770      	bx	lr

00014a6a <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   14a6a:	7800      	ldrb	r0, [r0, #0]
   14a6c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   14a70:	4770      	bx	lr

00014a72 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   14a72:	b570      	push	{r4, r5, r6, lr}
   14a74:	460d      	mov	r5, r1
   14a76:	4606      	mov	r6, r0
   14a78:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   14a7c:	461c      	mov	r4, r3
   14a7e:	68cb      	ldr	r3, [r1, #12]
   14a80:	4611      	mov	r1, r2
   14a82:	4622      	mov	r2, r4
   14a84:	4798      	blx	r3
   14a86:	7230      	strb	r0, [r6, #8]
   14a88:	fab4 f084 	clz	r0, r4
   14a8c:	0940      	lsrs	r0, r0, #5
   14a8e:	7270      	strb	r0, [r6, #9]
   14a90:	2000      	movs	r0, #0
   14a92:	e9c6 5000 	strd	r5, r0, [r6]
   14a96:	bd70      	pop	{r4, r5, r6, pc}

00014a98 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   14a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14a9c:	b085      	sub	sp, #20
   14a9e:	460c      	mov	r4, r1
   14aa0:	4605      	mov	r5, r0
   14aa2:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   14aa6:	690a      	ldr	r2, [r1, #16]
   14aa8:	2127      	movs	r1, #39	; 0x27
   14aaa:	4790      	blx	r2
   14aac:	b118      	cbz	r0, 14ab6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   14aae:	2001      	movs	r0, #1
   14ab0:	b005      	add	sp, #20
   14ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14ab6:	6829      	ldr	r1, [r5, #0]
   14ab8:	a801      	add	r0, sp, #4
   14aba:	2201      	movs	r2, #1
   14abc:	f7ff f85c 	bl	13b78 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   14ac0:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   14ac4:	f04f 091c 	mov.w	r9, #28
   14ac8:	f8dd 800c 	ldr.w	r8, [sp, #12]
   14acc:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   14ad0:	f89d 6010 	ldrb.w	r6, [sp, #16]
   14ad4:	d139      	bne.n	14b4a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   14ad6:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   14ada:	2f02      	cmp	r7, #2
   14adc:	f0c0 806b 	bcc.w	14bb6 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   14ae0:	d00c      	beq.n	14afc <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   14ae2:	b2f0      	uxtb	r0, r6
   14ae4:	2604      	movs	r6, #4
   14ae6:	2703      	movs	r7, #3
   14ae8:	215c      	movs	r1, #92	; 0x5c
   14aea:	e8df f000 	tbb	[pc, r0]
   14aee:	0364      	.short	0x0364
   14af0:	09242010 	.word	0x09242010
   14af4:	2600      	movs	r6, #0
   14af6:	2703      	movs	r7, #3
   14af8:	217d      	movs	r1, #125	; 0x7d
   14afa:	e001      	b.n	14b00 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   14afc:	2701      	movs	r7, #1
   14afe:	215c      	movs	r1, #92	; 0x5c
   14b00:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   14b04:	6912      	ldr	r2, [r2, #16]
   14b06:	4790      	blx	r2
   14b08:	2800      	cmp	r0, #0
   14b0a:	d0e6      	beq.n	14ada <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   14b0c:	e7cf      	b.n	14aae <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   14b0e:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   14b12:	2602      	movs	r6, #2
   14b14:	2703      	movs	r7, #3
   14b16:	f1b8 0f00 	cmp.w	r8, #0
   14b1a:	fa25 f100 	lsr.w	r1, r5, r0
   14b1e:	bf08      	it	eq
   14b20:	2601      	moveq	r6, #1
   14b22:	bf18      	it	ne
   14b24:	f1a8 0801 	subne.w	r8, r8, #1
   14b28:	f367 111f 	bfi	r1, r7, #4, #28
   14b2c:	e7e8      	b.n	14b00 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   14b2e:	2602      	movs	r6, #2
   14b30:	2703      	movs	r7, #3
   14b32:	217b      	movs	r1, #123	; 0x7b
   14b34:	e7e4      	b.n	14b00 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   14b36:	2703      	movs	r7, #3
   14b38:	2175      	movs	r1, #117	; 0x75
   14b3a:	2603      	movs	r6, #3
   14b3c:	e7e0      	b.n	14b00 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   14b3e:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   14b42:	6912      	ldr	r2, [r2, #16]
   14b44:	4790      	blx	r2
   14b46:	2800      	cmp	r0, #0
   14b48:	d1b1      	bne.n	14aae <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   14b4a:	4638      	mov	r0, r7
   14b4c:	2701      	movs	r7, #1
   14b4e:	215c      	movs	r1, #92	; 0x5c
   14b50:	e8df f000 	tbb	[pc, r0]
   14b54:	06020331 	.word	0x06020331
   14b58:	e7f1      	b.n	14b3e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   14b5a:	2700      	movs	r7, #0
   14b5c:	4629      	mov	r1, r5
   14b5e:	e7ee      	b.n	14b3e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   14b60:	b2f0      	uxtb	r0, r6
   14b62:	2604      	movs	r6, #4
   14b64:	2703      	movs	r7, #3
   14b66:	215c      	movs	r1, #92	; 0x5c
   14b68:	e8df f000 	tbb	[pc, r0]
   14b6c:	1d080425 	.word	0x1d080425
   14b70:	0321      	.short	0x0321
   14b72:	e7e4      	b.n	14b3e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   14b74:	2600      	movs	r6, #0
   14b76:	2703      	movs	r7, #3
   14b78:	217d      	movs	r1, #125	; 0x7d
   14b7a:	e7e0      	b.n	14b3e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   14b7c:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   14b80:	2602      	movs	r6, #2
   14b82:	2703      	movs	r7, #3
   14b84:	fa25 f000 	lsr.w	r0, r5, r0
   14b88:	f000 000f 	and.w	r0, r0, #15
   14b8c:	f100 0157 	add.w	r1, r0, #87	; 0x57
   14b90:	280a      	cmp	r0, #10
   14b92:	bf38      	it	cc
   14b94:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   14b98:	f1b8 0f00 	cmp.w	r8, #0
   14b9c:	bf0c      	ite	eq
   14b9e:	2601      	moveq	r6, #1
   14ba0:	f1a8 0801 	subne.w	r8, r8, #1
   14ba4:	e7cb      	b.n	14b3e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   14ba6:	2602      	movs	r6, #2
   14ba8:	2703      	movs	r7, #3
   14baa:	217b      	movs	r1, #123	; 0x7b
   14bac:	e7c7      	b.n	14b3e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   14bae:	2703      	movs	r7, #3
   14bb0:	2175      	movs	r1, #117	; 0x75
   14bb2:	2603      	movs	r6, #3
   14bb4:	e7c3      	b.n	14b3e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   14bb6:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   14bba:	690a      	ldr	r2, [r1, #16]
   14bbc:	2127      	movs	r1, #39	; 0x27
   14bbe:	b005      	add	sp, #20
   14bc0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14bc4:	4710      	bx	r2

00014bc6 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   14bc6:	b08c      	sub	sp, #48	; 0x30
   14bc8:	e9cd 0100 	strd	r0, r1, [sp]
   14bcc:	2002      	movs	r0, #2
   14bce:	a908      	add	r1, sp, #32
   14bd0:	9007      	str	r0, [sp, #28]
   14bd2:	9106      	str	r1, [sp, #24]
   14bd4:	2100      	movs	r1, #0
   14bd6:	9105      	str	r1, [sp, #20]
   14bd8:	e9cd 0103 	strd	r0, r1, [sp, #12]
   14bdc:	f24d 40f8 	movw	r0, #54520	; 0xd4f8
   14be0:	f2c0 0001 	movt	r0, #1
   14be4:	a901      	add	r1, sp, #4
   14be6:	9002      	str	r0, [sp, #8]
   14be8:	f645 20a1 	movw	r0, #23201	; 0x5aa1
   14bec:	f2c0 0001 	movt	r0, #1
   14bf0:	900b      	str	r0, [sp, #44]	; 0x2c
   14bf2:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   14bf6:	4668      	mov	r0, sp
   14bf8:	f24d 5108 	movw	r1, #54536	; 0xd508
   14bfc:	9008      	str	r0, [sp, #32]
   14bfe:	a802      	add	r0, sp, #8
   14c00:	f2c0 0101 	movt	r1, #1
   14c04:	f7ff f8c2 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14c08:	defe      	udf	#254	; 0xfe

00014c0a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   14c0a:	b08c      	sub	sp, #48	; 0x30
   14c0c:	e9cd 0100 	strd	r0, r1, [sp]
   14c10:	2002      	movs	r0, #2
   14c12:	a908      	add	r1, sp, #32
   14c14:	9007      	str	r0, [sp, #28]
   14c16:	9106      	str	r1, [sp, #24]
   14c18:	2100      	movs	r1, #0
   14c1a:	9105      	str	r1, [sp, #20]
   14c1c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   14c20:	f24d 503c 	movw	r0, #54588	; 0xd53c
   14c24:	f2c0 0001 	movt	r0, #1
   14c28:	a901      	add	r1, sp, #4
   14c2a:	9002      	str	r0, [sp, #8]
   14c2c:	f645 20a1 	movw	r0, #23201	; 0x5aa1
   14c30:	f2c0 0001 	movt	r0, #1
   14c34:	900b      	str	r0, [sp, #44]	; 0x2c
   14c36:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   14c3a:	4668      	mov	r0, sp
   14c3c:	f24d 514c 	movw	r1, #54604	; 0xd54c
   14c40:	9008      	str	r0, [sp, #32]
   14c42:	a802      	add	r0, sp, #8
   14c44:	f2c0 0101 	movt	r1, #1
   14c48:	f7ff f8a0 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14c4c:	defe      	udf	#254	; 0xfe

00014c4e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   14c4e:	b09a      	sub	sp, #104	; 0x68
   14c50:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   14c54:	e9cd 2300 	strd	r2, r3, [sp]
   14c58:	d802      	bhi.n	14c60 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   14c5a:	2501      	movs	r5, #1
   14c5c:	468c      	mov	ip, r1
   14c5e:	e03e      	b.n	14cde <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   14c60:	f1c1 0e00 	rsb	lr, r1, #0
   14c64:	f44f 7c80 	mov.w	ip, #256	; 0x100
   14c68:	458c      	cmp	ip, r1
   14c6a:	d205      	bcs.n	14c78 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   14c6c:	f910 400c 	ldrsb.w	r4, [r0, ip]
   14c70:	f114 0f41 	cmn.w	r4, #65	; 0x41
   14c74:	f300 8108 	bgt.w	14e88 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   14c78:	eb0e 040c 	add.w	r4, lr, ip
   14c7c:	f1ac 0601 	sub.w	r6, ip, #1
   14c80:	2c01      	cmp	r4, #1
   14c82:	d02a      	beq.n	14cda <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   14c84:	428e      	cmp	r6, r1
   14c86:	d206      	bcs.n	14c96 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   14c88:	eb00 050c 	add.w	r5, r0, ip
   14c8c:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   14c90:	f115 0f41 	cmn.w	r5, #65	; 0x41
   14c94:	dc21      	bgt.n	14cda <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   14c96:	f1ac 0602 	sub.w	r6, ip, #2
   14c9a:	2c02      	cmp	r4, #2
   14c9c:	d01d      	beq.n	14cda <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   14c9e:	428e      	cmp	r6, r1
   14ca0:	d206      	bcs.n	14cb0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   14ca2:	eb00 050c 	add.w	r5, r0, ip
   14ca6:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   14caa:	f115 0f41 	cmn.w	r5, #65	; 0x41
   14cae:	dc14      	bgt.n	14cda <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   14cb0:	f1ac 0603 	sub.w	r6, ip, #3
   14cb4:	2c03      	cmp	r4, #3
   14cb6:	d010      	beq.n	14cda <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   14cb8:	428e      	cmp	r6, r1
   14cba:	d206      	bcs.n	14cca <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   14cbc:	eb00 050c 	add.w	r5, r0, ip
   14cc0:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   14cc4:	f115 0f41 	cmn.w	r5, #65	; 0x41
   14cc8:	dc07      	bgt.n	14cda <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   14cca:	f1bc 0c04 	subs.w	ip, ip, #4
   14cce:	f04f 0500 	mov.w	r5, #0
   14cd2:	d004      	beq.n	14cde <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   14cd4:	2c04      	cmp	r4, #4
   14cd6:	d1c7      	bne.n	14c68 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   14cd8:	e001      	b.n	14cde <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   14cda:	2500      	movs	r5, #0
   14cdc:	46b4      	mov	ip, r6
   14cde:	2605      	movs	r6, #5
   14ce0:	2d00      	cmp	r5, #0
   14ce2:	f24d 651a 	movw	r5, #54810	; 0xd61a
   14ce6:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   14cea:	bf18      	it	ne
   14cec:	2600      	movne	r6, #0
   14cee:	9605      	str	r6, [sp, #20]
   14cf0:	f24d 1664 	movw	r6, #53604	; 0xd164
   14cf4:	f2c0 0501 	movt	r5, #1
   14cf8:	f2c0 0601 	movt	r6, #1
   14cfc:	bf18      	it	ne
   14cfe:	4635      	movne	r5, r6
   14d00:	428a      	cmp	r2, r1
   14d02:	9504      	str	r5, [sp, #16]
   14d04:	bf98      	it	ls
   14d06:	428b      	cmpls	r3, r1
   14d08:	d92a      	bls.n	14d60 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   14d0a:	428a      	cmp	r2, r1
   14d0c:	f04f 0003 	mov.w	r0, #3
   14d10:	a910      	add	r1, sp, #64	; 0x40
   14d12:	bf88      	it	hi
   14d14:	4613      	movhi	r3, r2
   14d16:	900f      	str	r0, [sp, #60]	; 0x3c
   14d18:	910e      	str	r1, [sp, #56]	; 0x38
   14d1a:	2100      	movs	r1, #0
   14d1c:	910d      	str	r1, [sp, #52]	; 0x34
   14d1e:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   14d22:	f24d 6040 	movw	r0, #54848	; 0xd640
   14d26:	f2c0 0001 	movt	r0, #1
   14d2a:	a904      	add	r1, sp, #16
   14d2c:	900a      	str	r0, [sp, #40]	; 0x28
   14d2e:	f645 308f 	movw	r0, #23439	; 0x5b8f
   14d32:	f2c0 0001 	movt	r0, #1
   14d36:	9308      	str	r3, [sp, #32]
   14d38:	9015      	str	r0, [sp, #84]	; 0x54
   14d3a:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   14d3e:	a802      	add	r0, sp, #8
   14d40:	f24d 6158 	movw	r1, #54872	; 0xd658
   14d44:	9012      	str	r0, [sp, #72]	; 0x48
   14d46:	f645 20a1 	movw	r0, #23201	; 0x5aa1
   14d4a:	f2c0 0101 	movt	r1, #1
   14d4e:	f2c0 0001 	movt	r0, #1
   14d52:	9011      	str	r0, [sp, #68]	; 0x44
   14d54:	a808      	add	r0, sp, #32
   14d56:	9010      	str	r0, [sp, #64]	; 0x40
   14d58:	a80a      	add	r0, sp, #40	; 0x28
   14d5a:	f7ff f817 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14d5e:	defe      	udf	#254	; 0xfe
   14d60:	429a      	cmp	r2, r3
   14d62:	f200 80f1 	bhi.w	14f48 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   14d66:	2a00      	cmp	r2, #0
   14d68:	bf18      	it	ne
   14d6a:	4291      	cmpne	r1, r2
   14d6c:	d109      	bne.n	14d82 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   14d6e:	461a      	mov	r2, r3
   14d70:	2a00      	cmp	r2, #0
   14d72:	9206      	str	r2, [sp, #24]
   14d74:	bf18      	it	ne
   14d76:	428a      	cmpne	r2, r1
   14d78:	d10e      	bne.n	14d98 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   14d7a:	4613      	mov	r3, r2
   14d7c:	428b      	cmp	r3, r1
   14d7e:	d047      	beq.n	14e10 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   14d80:	e052      	b.n	14e28 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   14d82:	d9f5      	bls.n	14d70 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   14d84:	5686      	ldrsb	r6, [r0, r2]
   14d86:	f116 0f40 	cmn.w	r6, #64	; 0x40
   14d8a:	bfa8      	it	ge
   14d8c:	461a      	movge	r2, r3
   14d8e:	2a00      	cmp	r2, #0
   14d90:	9206      	str	r2, [sp, #24]
   14d92:	bf18      	it	ne
   14d94:	428a      	cmpne	r2, r1
   14d96:	d0f0      	beq.n	14d7a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   14d98:	f1a0 0c01 	sub.w	ip, r0, #1
   14d9c:	f101 0e02 	add.w	lr, r1, #2
   14da0:	1ccc      	adds	r4, r1, #3
   14da2:	1c4d      	adds	r5, r1, #1
   14da4:	1d0e      	adds	r6, r1, #4
   14da6:	428a      	cmp	r2, r1
   14da8:	d206      	bcs.n	14db8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   14daa:	eb0c 0302 	add.w	r3, ip, r2
   14dae:	f993 3001 	ldrsb.w	r3, [r3, #1]
   14db2:	f113 0f41 	cmn.w	r3, #65	; 0x41
   14db6:	dce0      	bgt.n	14d7a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   14db8:	1e53      	subs	r3, r2, #1
   14dba:	bf18      	it	ne
   14dbc:	4295      	cmpne	r5, r2
   14dbe:	d025      	beq.n	14e0c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   14dc0:	428b      	cmp	r3, r1
   14dc2:	d204      	bcs.n	14dce <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   14dc4:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   14dc8:	f117 0f41 	cmn.w	r7, #65	; 0x41
   14dcc:	dc1e      	bgt.n	14e0c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   14dce:	1e93      	subs	r3, r2, #2
   14dd0:	bf18      	it	ne
   14dd2:	4596      	cmpne	lr, r2
   14dd4:	d01a      	beq.n	14e0c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   14dd6:	428b      	cmp	r3, r1
   14dd8:	d206      	bcs.n	14de8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   14dda:	eb0c 0702 	add.w	r7, ip, r2
   14dde:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   14de2:	f117 0f41 	cmn.w	r7, #65	; 0x41
   14de6:	dc11      	bgt.n	14e0c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   14de8:	1ed3      	subs	r3, r2, #3
   14dea:	bf18      	it	ne
   14dec:	4294      	cmpne	r4, r2
   14dee:	d00d      	beq.n	14e0c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   14df0:	428b      	cmp	r3, r1
   14df2:	d206      	bcs.n	14e02 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   14df4:	eb0c 0702 	add.w	r7, ip, r2
   14df8:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   14dfc:	f117 0f41 	cmn.w	r7, #65	; 0x41
   14e00:	dc04      	bgt.n	14e0c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   14e02:	1f13      	subs	r3, r2, #4
   14e04:	d002      	beq.n	14e0c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   14e06:	4296      	cmp	r6, r2
   14e08:	461a      	mov	r2, r3
   14e0a:	d1cc      	bne.n	14da6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   14e0c:	428b      	cmp	r3, r1
   14e0e:	d10b      	bne.n	14e28 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   14e10:	f24d 3000 	movw	r0, #54016	; 0xd300
   14e14:	f24d 62a8 	movw	r2, #54952	; 0xd6a8
   14e18:	f2c0 0001 	movt	r0, #1
   14e1c:	f2c0 0201 	movt	r2, #1
   14e20:	212b      	movs	r1, #43	; 0x2b
   14e22:	f7fe ff7d 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14e26:	defe      	udf	#254	; 0xfe
   14e28:	18c5      	adds	r5, r0, r3
   14e2a:	462e      	mov	r6, r5
   14e2c:	f916 4b01 	ldrsb.w	r4, [r6], #1
   14e30:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   14e34:	b2e2      	uxtb	r2, r4
   14e36:	dd02      	ble.n	14e3e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   14e38:	9207      	str	r2, [sp, #28]
   14e3a:	2101      	movs	r1, #1
   14e3c:	e04d      	b.n	14eda <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   14e3e:	4408      	add	r0, r1
   14e40:	4286      	cmp	r6, r0
   14e42:	d10b      	bne.n	14e5c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   14e44:	2500      	movs	r5, #0
   14e46:	4606      	mov	r6, r0
   14e48:	f002 011f 	and.w	r1, r2, #31
   14e4c:	2adf      	cmp	r2, #223	; 0xdf
   14e4e:	d80d      	bhi.n	14e6c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   14e50:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   14e54:	2880      	cmp	r0, #128	; 0x80
   14e56:	9007      	str	r0, [sp, #28]
   14e58:	d333      	bcc.n	14ec2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   14e5a:	e034      	b.n	14ec6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   14e5c:	7869      	ldrb	r1, [r5, #1]
   14e5e:	1cae      	adds	r6, r5, #2
   14e60:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   14e64:	f002 011f 	and.w	r1, r2, #31
   14e68:	2adf      	cmp	r2, #223	; 0xdf
   14e6a:	d9f1      	bls.n	14e50 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   14e6c:	4286      	cmp	r6, r0
   14e6e:	d10d      	bne.n	14e8c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   14e70:	2400      	movs	r4, #0
   14e72:	4606      	mov	r6, r0
   14e74:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   14e78:	2af0      	cmp	r2, #240	; 0xf0
   14e7a:	d20f      	bcs.n	14e9c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   14e7c:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   14e80:	2880      	cmp	r0, #128	; 0x80
   14e82:	9007      	str	r0, [sp, #28]
   14e84:	d31d      	bcc.n	14ec2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   14e86:	e01e      	b.n	14ec6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   14e88:	2500      	movs	r5, #0
   14e8a:	e728      	b.n	14cde <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   14e8c:	f816 4b01 	ldrb.w	r4, [r6], #1
   14e90:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   14e94:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   14e98:	2af0      	cmp	r2, #240	; 0xf0
   14e9a:	d3ef      	bcc.n	14e7c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   14e9c:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   14ea0:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   14ea4:	4286      	cmp	r6, r0
   14ea6:	bf1a      	itte	ne
   14ea8:	7830      	ldrbne	r0, [r6, #0]
   14eaa:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   14eae:	2000      	moveq	r0, #0
   14eb0:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   14eb4:	4408      	add	r0, r1
   14eb6:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   14eba:	d0a9      	beq.n	14e10 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   14ebc:	2880      	cmp	r0, #128	; 0x80
   14ebe:	9007      	str	r0, [sp, #28]
   14ec0:	d201      	bcs.n	14ec6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   14ec2:	2101      	movs	r1, #1
   14ec4:	e009      	b.n	14eda <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   14ec6:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   14eca:	d201      	bcs.n	14ed0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   14ecc:	2102      	movs	r1, #2
   14ece:	e004      	b.n	14eda <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   14ed0:	2104      	movs	r1, #4
   14ed2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   14ed6:	bf38      	it	cc
   14ed8:	2103      	movcc	r1, #3
   14eda:	4419      	add	r1, r3
   14edc:	aa10      	add	r2, sp, #64	; 0x40
   14ede:	a808      	add	r0, sp, #32
   14ee0:	e9cd 3108 	strd	r3, r1, [sp, #32]
   14ee4:	2105      	movs	r1, #5
   14ee6:	910f      	str	r1, [sp, #60]	; 0x3c
   14ee8:	920e      	str	r2, [sp, #56]	; 0x38
   14eea:	2200      	movs	r2, #0
   14eec:	920d      	str	r2, [sp, #52]	; 0x34
   14eee:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   14ef2:	f24d 61e4 	movw	r1, #55012	; 0xd6e4
   14ef6:	f2c0 0101 	movt	r1, #1
   14efa:	aa04      	add	r2, sp, #16
   14efc:	910a      	str	r1, [sp, #40]	; 0x28
   14efe:	f645 318f 	movw	r1, #23439	; 0x5b8f
   14f02:	f2c0 0101 	movt	r1, #1
   14f06:	9119      	str	r1, [sp, #100]	; 0x64
   14f08:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   14f0c:	a902      	add	r1, sp, #8
   14f0e:	9116      	str	r1, [sp, #88]	; 0x58
   14f10:	f643 3119 	movw	r1, #15129	; 0x3b19
   14f14:	f2c0 0101 	movt	r1, #1
   14f18:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   14f1c:	f644 2099 	movw	r0, #19097	; 0x4a99
   14f20:	f2c0 0001 	movt	r0, #1
   14f24:	f24d 710c 	movw	r1, #55052	; 0xd70c
   14f28:	9013      	str	r0, [sp, #76]	; 0x4c
   14f2a:	a807      	add	r0, sp, #28
   14f2c:	9012      	str	r0, [sp, #72]	; 0x48
   14f2e:	f645 20a1 	movw	r0, #23201	; 0x5aa1
   14f32:	f2c0 0001 	movt	r0, #1
   14f36:	f2c0 0101 	movt	r1, #1
   14f3a:	9011      	str	r0, [sp, #68]	; 0x44
   14f3c:	a806      	add	r0, sp, #24
   14f3e:	9010      	str	r0, [sp, #64]	; 0x40
   14f40:	a80a      	add	r0, sp, #40	; 0x28
   14f42:	f7fe ff23 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14f46:	defe      	udf	#254	; 0xfe
   14f48:	2004      	movs	r0, #4
   14f4a:	a910      	add	r1, sp, #64	; 0x40
   14f4c:	900f      	str	r0, [sp, #60]	; 0x3c
   14f4e:	910e      	str	r1, [sp, #56]	; 0x38
   14f50:	2100      	movs	r1, #0
   14f52:	910d      	str	r1, [sp, #52]	; 0x34
   14f54:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   14f58:	f24d 6078 	movw	r0, #54904	; 0xd678
   14f5c:	f2c0 0001 	movt	r0, #1
   14f60:	a904      	add	r1, sp, #16
   14f62:	900a      	str	r0, [sp, #40]	; 0x28
   14f64:	f645 308f 	movw	r0, #23439	; 0x5b8f
   14f68:	f2c0 0001 	movt	r0, #1
   14f6c:	9017      	str	r0, [sp, #92]	; 0x5c
   14f6e:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   14f72:	a802      	add	r0, sp, #8
   14f74:	9014      	str	r0, [sp, #80]	; 0x50
   14f76:	f645 20a1 	movw	r0, #23201	; 0x5aa1
   14f7a:	a901      	add	r1, sp, #4
   14f7c:	f2c0 0001 	movt	r0, #1
   14f80:	9013      	str	r0, [sp, #76]	; 0x4c
   14f82:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   14f86:	f24d 6198 	movw	r1, #54936	; 0xd698
   14f8a:	4668      	mov	r0, sp
   14f8c:	f2c0 0101 	movt	r1, #1
   14f90:	9010      	str	r0, [sp, #64]	; 0x40
   14f92:	a80a      	add	r0, sp, #40	; 0x28
   14f94:	f7fe fefa 	bl	13d8c <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14f98:	defe      	udf	#254	; 0xfe

00014f9a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   14f9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14f9e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   14fa2:	d270      	bcs.n	15086 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   14fa4:	f24d 7e2c 	movw	lr, #55084	; 0xd72c
   14fa8:	f24d 787e 	movw	r8, #55166	; 0xd77e
   14fac:	fa1f f980 	uxth.w	r9, r0
   14fb0:	f2c0 0e01 	movt	lr, #1
   14fb4:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   14fb8:	f04f 0a00 	mov.w	sl, #0
   14fbc:	f2c0 0801 	movt	r8, #1
   14fc0:	4675      	mov	r5, lr
   14fc2:	786e      	ldrb	r6, [r5, #1]
   14fc4:	4652      	mov	r2, sl
   14fc6:	782b      	ldrb	r3, [r5, #0]
   14fc8:	3502      	adds	r5, #2
   14fca:	44b2      	add	sl, r6
   14fcc:	4563      	cmp	r3, ip
   14fce:	d129      	bne.n	15024 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   14fd0:	4592      	cmp	sl, r2
   14fd2:	f0c0 8112 	bcc.w	151fa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   14fd6:	ea4f 035a 	mov.w	r3, sl, lsr #1
   14fda:	2b92      	cmp	r3, #146	; 0x92
   14fdc:	f200 8112 	bhi.w	15204 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   14fe0:	eb08 0302 	add.w	r3, r8, r2
   14fe4:	199a      	adds	r2, r3, r6
   14fe6:	b31e      	cbz	r6, 15030 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   14fe8:	461f      	mov	r7, r3
   14fea:	b2c4      	uxtb	r4, r0
   14fec:	f817 1b01 	ldrb.w	r1, [r7], #1
   14ff0:	42a1      	cmp	r1, r4
   14ff2:	f000 80b6 	beq.w	15162 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   14ff6:	4297      	cmp	r7, r2
   14ff8:	d01a      	beq.n	15030 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   14ffa:	7859      	ldrb	r1, [r3, #1]
   14ffc:	42a1      	cmp	r1, r4
   14ffe:	f000 80b0 	beq.w	15162 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   15002:	1c99      	adds	r1, r3, #2
   15004:	4291      	cmp	r1, r2
   15006:	d013      	beq.n	15030 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   15008:	7899      	ldrb	r1, [r3, #2]
   1500a:	42a1      	cmp	r1, r4
   1500c:	f000 80a9 	beq.w	15162 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   15010:	1cd9      	adds	r1, r3, #3
   15012:	4291      	cmp	r1, r2
   15014:	d00c      	beq.n	15030 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   15016:	1d19      	adds	r1, r3, #4
   15018:	78db      	ldrb	r3, [r3, #3]
   1501a:	3e04      	subs	r6, #4
   1501c:	42a3      	cmp	r3, r4
   1501e:	460b      	mov	r3, r1
   15020:	d1e1      	bne.n	14fe6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   15022:	e09e      	b.n	15162 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   15024:	d808      	bhi.n	15038 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   15026:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   1502a:	4295      	cmp	r5, r2
   1502c:	d1c9      	bne.n	14fc2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   1502e:	e003      	b.n	15038 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   15030:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   15034:	428d      	cmp	r5, r1
   15036:	d1c4      	bne.n	14fc2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   15038:	f64d 05a3 	movw	r5, #55459	; 0xd8a3
   1503c:	2101      	movs	r1, #1
   1503e:	f2c0 0501 	movt	r5, #1
   15042:	4628      	mov	r0, r5
   15044:	4602      	mov	r2, r0
   15046:	f812 7b01 	ldrb.w	r7, [r2], #1
   1504a:	b27e      	sxtb	r6, r7
   1504c:	2e00      	cmp	r6, #0
   1504e:	d404      	bmi.n	1505a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   15050:	4610      	mov	r0, r2
   15052:	ebb9 0907 	subs.w	r9, r9, r7
   15056:	d50f      	bpl.n	15078 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   15058:	e0bd      	b.n	151d6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   1505a:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   1505e:	429a      	cmp	r2, r3
   15060:	f000 80db 	beq.w	1521a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   15064:	7842      	ldrb	r2, [r0, #1]
   15066:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   1506a:	3002      	adds	r0, #2
   1506c:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   15070:	ebb9 0907 	subs.w	r9, r9, r7
   15074:	f100 80af 	bmi.w	151d6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   15078:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   1507c:	f081 0101 	eor.w	r1, r1, #1
   15080:	4290      	cmp	r0, r2
   15082:	d1df      	bne.n	15044 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   15084:	e0a7      	b.n	151d6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   15086:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   1508a:	d26f      	bcs.n	1516c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   1508c:	f64d 1edd 	movw	lr, #55773	; 0xd9dd
   15090:	f64d 2823 	movw	r8, #55843	; 0xda23
   15094:	fa1f f980 	uxth.w	r9, r0
   15098:	f2c0 0e01 	movt	lr, #1
   1509c:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   150a0:	f04f 0a00 	mov.w	sl, #0
   150a4:	f2c0 0801 	movt	r8, #1
   150a8:	4675      	mov	r5, lr
   150aa:	786e      	ldrb	r6, [r5, #1]
   150ac:	4652      	mov	r2, sl
   150ae:	782b      	ldrb	r3, [r5, #0]
   150b0:	3502      	adds	r5, #2
   150b2:	44b2      	add	sl, r6
   150b4:	4563      	cmp	r3, ip
   150b6:	d125      	bne.n	15104 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   150b8:	4592      	cmp	sl, r2
   150ba:	f0c0 809e 	bcc.w	151fa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   150be:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   150c2:	f200 80a5 	bhi.w	15210 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   150c6:	eb08 0302 	add.w	r3, r8, r2
   150ca:	199a      	adds	r2, r3, r6
   150cc:	b306      	cbz	r6, 15110 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   150ce:	461f      	mov	r7, r3
   150d0:	b2c4      	uxtb	r4, r0
   150d2:	f817 1b01 	ldrb.w	r1, [r7], #1
   150d6:	42a1      	cmp	r1, r4
   150d8:	d043      	beq.n	15162 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   150da:	4297      	cmp	r7, r2
   150dc:	d018      	beq.n	15110 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   150de:	7859      	ldrb	r1, [r3, #1]
   150e0:	42a1      	cmp	r1, r4
   150e2:	d03e      	beq.n	15162 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   150e4:	1c99      	adds	r1, r3, #2
   150e6:	4291      	cmp	r1, r2
   150e8:	d012      	beq.n	15110 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   150ea:	7899      	ldrb	r1, [r3, #2]
   150ec:	42a1      	cmp	r1, r4
   150ee:	d038      	beq.n	15162 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   150f0:	1cd9      	adds	r1, r3, #3
   150f2:	4291      	cmp	r1, r2
   150f4:	d00c      	beq.n	15110 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   150f6:	1d19      	adds	r1, r3, #4
   150f8:	78db      	ldrb	r3, [r3, #3]
   150fa:	3e04      	subs	r6, #4
   150fc:	42a3      	cmp	r3, r4
   150fe:	460b      	mov	r3, r1
   15100:	d1e4      	bne.n	150cc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   15102:	e02e      	b.n	15162 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   15104:	d808      	bhi.n	15118 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   15106:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   1510a:	4295      	cmp	r5, r2
   1510c:	d1cd      	bne.n	150aa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   1510e:	e003      	b.n	15118 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   15110:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   15114:	428d      	cmp	r5, r1
   15116:	d1c8      	bne.n	150aa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   15118:	f64d 25c9 	movw	r5, #56009	; 0xdac9
   1511c:	2101      	movs	r1, #1
   1511e:	f2c0 0501 	movt	r5, #1
   15122:	4628      	mov	r0, r5
   15124:	4602      	mov	r2, r0
   15126:	f812 7b01 	ldrb.w	r7, [r2], #1
   1512a:	b27e      	sxtb	r6, r7
   1512c:	2e00      	cmp	r6, #0
   1512e:	d40a      	bmi.n	15146 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   15130:	4610      	mov	r0, r2
   15132:	ebb9 0907 	subs.w	r9, r9, r7
   15136:	d44e      	bmi.n	151d6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   15138:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   1513c:	f081 0101 	eor.w	r1, r1, #1
   15140:	4290      	cmp	r0, r2
   15142:	d1ef      	bne.n	15124 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   15144:	e047      	b.n	151d6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   15146:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   1514a:	429a      	cmp	r2, r3
   1514c:	d065      	beq.n	1521a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   1514e:	7842      	ldrb	r2, [r0, #1]
   15150:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   15154:	3002      	adds	r0, #2
   15156:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   1515a:	ebb9 0907 	subs.w	r9, r9, r7
   1515e:	d5eb      	bpl.n	15138 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   15160:	e039      	b.n	151d6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   15162:	2100      	movs	r1, #0
   15164:	f001 0001 	and.w	r0, r1, #1
   15168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1516c:	f240 51e2 	movw	r1, #1506	; 0x5e2
   15170:	f240 63e2 	movw	r3, #1762	; 0x6e2
   15174:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   15178:	1842      	adds	r2, r0, r1
   1517a:	f2c0 030b 	movt	r3, #11
   1517e:	2100      	movs	r1, #0
   15180:	429a      	cmp	r2, r3
   15182:	d328      	bcc.n	151d6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   15184:	f241 421f 	movw	r2, #5151	; 0x141f
   15188:	f640 431f 	movw	r3, #3103	; 0xc1f
   1518c:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   15190:	4402      	add	r2, r0
   15192:	429a      	cmp	r2, r3
   15194:	bf21      	itttt	cs
   15196:	f243 125e 	movwcs	r2, #12638	; 0x315e
   1519a:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   1519e:	4402      	addcs	r2, r0
   151a0:	2a0e      	cmpcs	r2, #14
   151a2:	d318      	bcc.n	151d6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   151a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   151a8:	f64b 031e 	movw	r3, #47134	; 0xb81e
   151ac:	f2c0 021f 	movt	r2, #31
   151b0:	f2c0 0302 	movt	r3, #2
   151b4:	4002      	ands	r2, r0
   151b6:	429a      	cmp	r2, r3
   151b8:	d00d      	beq.n	151d6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   151ba:	f645 1229 	movw	r2, #22825	; 0x5929
   151be:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   151c2:	4402      	add	r2, r0
   151c4:	2a29      	cmp	r2, #41	; 0x29
   151c6:	bf21      	itttt	cs
   151c8:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   151cc:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   151d0:	4402      	addcs	r2, r0
   151d2:	2a0b      	cmpcs	r2, #11
   151d4:	d203      	bcs.n	151de <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   151d6:	f001 0001 	and.w	r0, r1, #1
   151da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   151de:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   151e2:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   151e6:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   151ea:	2000      	movs	r0, #0
   151ec:	f2c0 0202 	movt	r2, #2
   151f0:	4291      	cmp	r1, r2
   151f2:	bf88      	it	hi
   151f4:	2001      	movhi	r0, #1
   151f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   151fa:	4610      	mov	r0, r2
   151fc:	4651      	mov	r1, sl
   151fe:	f7ff fd04 	bl	14c0a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   15202:	defe      	udf	#254	; 0xfe
   15204:	4650      	mov	r0, sl
   15206:	f240 1125 	movw	r1, #293	; 0x125
   1520a:	f7ff fcdc 	bl	14bc6 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   1520e:	defe      	udf	#254	; 0xfe
   15210:	4650      	mov	r0, sl
   15212:	21a6      	movs	r1, #166	; 0xa6
   15214:	f7ff fcd7 	bl	14bc6 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   15218:	defe      	udf	#254	; 0xfe
   1521a:	f24d 3000 	movw	r0, #54016	; 0xd300
   1521e:	f24d 721c 	movw	r2, #55068	; 0xd71c
   15222:	f2c0 0001 	movt	r0, #1
   15226:	f2c0 0201 	movt	r2, #1
   1522a:	212b      	movs	r1, #43	; 0x2b
   1522c:	f7fe fd78 	bl	13d20 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15230:	defe      	udf	#254	; 0xfe

00015232 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   15232:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15236:	b0a3      	sub	sp, #140	; 0x8c
   15238:	468c      	mov	ip, r1
   1523a:	6809      	ldr	r1, [r1, #0]
   1523c:	06ca      	lsls	r2, r1, #27
   1523e:	d44a      	bmi.n	152d6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   15240:	6804      	ldr	r4, [r0, #0]
   15242:	0688      	lsls	r0, r1, #26
   15244:	f100 8089 	bmi.w	1535a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   15248:	f248 5e1f 	movw	lr, #34079	; 0x851f
   1524c:	f24d 329f 	movw	r2, #54175	; 0xd39f
   15250:	f242 7810 	movw	r8, #10000	; 0x2710
   15254:	4544      	cmp	r4, r8
   15256:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   1525a:	f2c0 0201 	movt	r2, #1
   1525e:	f0c0 80e3 	bcc.w	15428 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   15262:	f241 7959 	movw	r9, #5977	; 0x1759
   15266:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   1526a:	f10d 0b0c 	add.w	fp, sp, #12
   1526e:	2300      	movs	r3, #0
   15270:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   15274:	f04f 0a64 	mov.w	sl, #100	; 0x64
   15278:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   1527c:	fba4 0109 	umull	r0, r1, r4, r9
   15280:	42bc      	cmp	r4, r7
   15282:	ea4f 3051 	mov.w	r0, r1, lsr #13
   15286:	fb00 4118 	mls	r1, r0, r8, r4
   1528a:	4604      	mov	r4, r0
   1528c:	b28d      	uxth	r5, r1
   1528e:	fba5 560e 	umull	r5, r6, r5, lr
   15292:	ea4f 1556 	mov.w	r5, r6, lsr #5
   15296:	eb0b 0603 	add.w	r6, fp, r3
   1529a:	fb05 111a 	mls	r1, r5, sl, r1
   1529e:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   152a2:	f1a3 0304 	sub.w	r3, r3, #4
   152a6:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   152aa:	b289      	uxth	r1, r1
   152ac:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   152b0:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   152b4:	d8e2      	bhi.n	1527c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   152b6:	f103 0127 	add.w	r1, r3, #39	; 0x27
   152ba:	4604      	mov	r4, r0
   152bc:	2c63      	cmp	r4, #99	; 0x63
   152be:	f300 80b7 	bgt.w	15430 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   152c2:	4623      	mov	r3, r4
   152c4:	2b0a      	cmp	r3, #10
   152c6:	f2c0 80c3 	blt.w	15450 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   152ca:	1e88      	subs	r0, r1, #2
   152cc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   152d0:	aa03      	add	r2, sp, #12
   152d2:	5211      	strh	r1, [r2, r0]
   152d4:	e0c1      	b.n	1545a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   152d6:	6800      	ldr	r0, [r0, #0]
   152d8:	f10d 0e0c 	add.w	lr, sp, #12
   152dc:	2381      	movs	r3, #129	; 0x81
   152de:	2100      	movs	r1, #0
   152e0:	f000 020f 	and.w	r2, r0, #15
   152e4:	f102 0457 	add.w	r4, r2, #87	; 0x57
   152e8:	2a0a      	cmp	r2, #10
   152ea:	bf38      	it	cc
   152ec:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   152f0:	eb0e 0203 	add.w	r2, lr, r3
   152f4:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   152f8:	f802 4c02 	strb.w	r4, [r2, #-2]
   152fc:	d071      	beq.n	153e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   152fe:	0904      	lsrs	r4, r0, #4
   15300:	f004 040f 	and.w	r4, r4, #15
   15304:	f104 0557 	add.w	r5, r4, #87	; 0x57
   15308:	2c0a      	cmp	r4, #10
   1530a:	bf38      	it	cc
   1530c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   15310:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   15314:	f802 5c03 	strb.w	r5, [r2, #-3]
   15318:	d079      	beq.n	1540e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   1531a:	0a04      	lsrs	r4, r0, #8
   1531c:	f004 040f 	and.w	r4, r4, #15
   15320:	f104 0557 	add.w	r5, r4, #87	; 0x57
   15324:	2c0a      	cmp	r4, #10
   15326:	bf38      	it	cc
   15328:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1532c:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   15330:	f802 5c04 	strb.w	r5, [r2, #-4]
   15334:	d073      	beq.n	1541e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   15336:	0b04      	lsrs	r4, r0, #12
   15338:	3b04      	subs	r3, #4
   1533a:	f004 040f 	and.w	r4, r4, #15
   1533e:	f104 0557 	add.w	r5, r4, #87	; 0x57
   15342:	2c0a      	cmp	r4, #10
   15344:	bf38      	it	cc
   15346:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1534a:	f802 5c05 	strb.w	r5, [r2, #-5]
   1534e:	0c02      	lsrs	r2, r0, #16
   15350:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   15354:	4610      	mov	r0, r2
   15356:	d1c3      	bne.n	152e0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   15358:	e03f      	b.n	153da <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   1535a:	f10d 0e0c 	add.w	lr, sp, #12
   1535e:	2381      	movs	r3, #129	; 0x81
   15360:	2100      	movs	r1, #0
   15362:	f004 000f 	and.w	r0, r4, #15
   15366:	eb0e 0203 	add.w	r2, lr, r3
   1536a:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1536e:	280a      	cmp	r0, #10
   15370:	bf38      	it	cc
   15372:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   15376:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   1537a:	f802 5c02 	strb.w	r5, [r2, #-2]
   1537e:	d030      	beq.n	153e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   15380:	0920      	lsrs	r0, r4, #4
   15382:	f000 000f 	and.w	r0, r0, #15
   15386:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1538a:	280a      	cmp	r0, #10
   1538c:	bf38      	it	cc
   1538e:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   15392:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   15396:	f802 5c03 	strb.w	r5, [r2, #-3]
   1539a:	d038      	beq.n	1540e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   1539c:	0a20      	lsrs	r0, r4, #8
   1539e:	f000 000f 	and.w	r0, r0, #15
   153a2:	f100 0537 	add.w	r5, r0, #55	; 0x37
   153a6:	280a      	cmp	r0, #10
   153a8:	bf38      	it	cc
   153aa:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   153ae:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   153b2:	f802 5c04 	strb.w	r5, [r2, #-4]
   153b6:	d032      	beq.n	1541e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   153b8:	0b20      	lsrs	r0, r4, #12
   153ba:	3b04      	subs	r3, #4
   153bc:	f000 000f 	and.w	r0, r0, #15
   153c0:	f100 0537 	add.w	r5, r0, #55	; 0x37
   153c4:	280a      	cmp	r0, #10
   153c6:	bf38      	it	cc
   153c8:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   153cc:	0c20      	lsrs	r0, r4, #16
   153ce:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   153d2:	4604      	mov	r4, r0
   153d4:	f802 5c05 	strb.w	r5, [r2, #-5]
   153d8:	d1c3      	bne.n	15362 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   153da:	1e58      	subs	r0, r3, #1
   153dc:	2881      	cmp	r0, #129	; 0x81
   153de:	d305      	bcc.n	153ec <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   153e0:	e019      	b.n	15416 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   153e2:	1e59      	subs	r1, r3, #1
   153e4:	1e98      	subs	r0, r3, #2
   153e6:	460b      	mov	r3, r1
   153e8:	2881      	cmp	r0, #129	; 0x81
   153ea:	d214      	bcs.n	15416 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   153ec:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   153f0:	f24d 329d 	movw	r2, #54173	; 0xd39d
   153f4:	4470      	add	r0, lr
   153f6:	f2c0 0201 	movt	r2, #1
   153fa:	e9cd 0100 	strd	r0, r1, [sp]
   153fe:	4660      	mov	r0, ip
   15400:	2101      	movs	r1, #1
   15402:	2302      	movs	r3, #2
   15404:	f7ff f864 	bl	144d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   15408:	b023      	add	sp, #140	; 0x8c
   1540a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1540e:	1ed8      	subs	r0, r3, #3
   15410:	3b02      	subs	r3, #2
   15412:	2881      	cmp	r0, #129	; 0x81
   15414:	d3ea      	bcc.n	153ec <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   15416:	2180      	movs	r1, #128	; 0x80
   15418:	f7ff fbf7 	bl	14c0a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1541c:	defe      	udf	#254	; 0xfe
   1541e:	1f18      	subs	r0, r3, #4
   15420:	3b03      	subs	r3, #3
   15422:	2881      	cmp	r0, #129	; 0x81
   15424:	d3e2      	bcc.n	153ec <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   15426:	e7f6      	b.n	15416 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   15428:	2127      	movs	r1, #39	; 0x27
   1542a:	2c63      	cmp	r4, #99	; 0x63
   1542c:	f77f af49 	ble.w	152c2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   15430:	b2a0      	uxth	r0, r4
   15432:	3902      	subs	r1, #2
   15434:	fba0 030e 	umull	r0, r3, r0, lr
   15438:	af03      	add	r7, sp, #12
   1543a:	2064      	movs	r0, #100	; 0x64
   1543c:	095b      	lsrs	r3, r3, #5
   1543e:	fb03 4010 	mls	r0, r3, r0, r4
   15442:	b280      	uxth	r0, r0
   15444:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   15448:	5278      	strh	r0, [r7, r1]
   1544a:	2b0a      	cmp	r3, #10
   1544c:	f6bf af3d 	bge.w	152ca <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   15450:	1e48      	subs	r0, r1, #1
   15452:	aa03      	add	r2, sp, #12
   15454:	f103 0130 	add.w	r1, r3, #48	; 0x30
   15458:	5411      	strb	r1, [r2, r0]
   1545a:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   1545e:	aa03      	add	r2, sp, #12
   15460:	4410      	add	r0, r2
   15462:	f24d 1264 	movw	r2, #53604	; 0xd164
   15466:	e9cd 0100 	strd	r0, r1, [sp]
   1546a:	f2c0 0201 	movt	r2, #1
   1546e:	4660      	mov	r0, ip
   15470:	2101      	movs	r1, #1
   15472:	2300      	movs	r3, #0
   15474:	f7ff f82c 	bl	144d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   15478:	b023      	add	sp, #140	; 0x8c
   1547a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001547e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   1547e:	b580      	push	{r7, lr}
   15480:	b0a2      	sub	sp, #136	; 0x88
   15482:	7802      	ldrb	r2, [r0, #0]
   15484:	468c      	mov	ip, r1
   15486:	f002 030f 	and.w	r3, r2, #15
   1548a:	f103 0057 	add.w	r0, r3, #87	; 0x57
   1548e:	2b0a      	cmp	r3, #10
   15490:	bf38      	it	cc
   15492:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   15496:	2300      	movs	r3, #0
   15498:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   1549c:	d00b      	beq.n	154b6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   1549e:	0913      	lsrs	r3, r2, #4
   154a0:	f103 0157 	add.w	r1, r3, #87	; 0x57
   154a4:	2aa0      	cmp	r2, #160	; 0xa0
   154a6:	bf38      	it	cc
   154a8:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   154ac:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   154b0:	227e      	movs	r2, #126	; 0x7e
   154b2:	2302      	movs	r3, #2
   154b4:	e001      	b.n	154ba <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   154b6:	227f      	movs	r2, #127	; 0x7f
   154b8:	2301      	movs	r3, #1
   154ba:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   154be:	a802      	add	r0, sp, #8
   154c0:	4410      	add	r0, r2
   154c2:	f24d 329d 	movw	r2, #54173	; 0xd39d
   154c6:	e9cd 0300 	strd	r0, r3, [sp]
   154ca:	f2c0 0201 	movt	r2, #1
   154ce:	4660      	mov	r0, ip
   154d0:	2101      	movs	r1, #1
   154d2:	2302      	movs	r3, #2
   154d4:	f7fe fffc 	bl	144d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   154d8:	b022      	add	sp, #136	; 0x88
   154da:	bd80      	pop	{r7, pc}

000154dc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   154dc:	b580      	push	{r7, lr}
   154de:	b0a2      	sub	sp, #136	; 0x88
   154e0:	7802      	ldrb	r2, [r0, #0]
   154e2:	468c      	mov	ip, r1
   154e4:	f002 030f 	and.w	r3, r2, #15
   154e8:	f103 0037 	add.w	r0, r3, #55	; 0x37
   154ec:	2b0a      	cmp	r3, #10
   154ee:	bf38      	it	cc
   154f0:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   154f4:	2300      	movs	r3, #0
   154f6:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   154fa:	d00b      	beq.n	15514 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   154fc:	0913      	lsrs	r3, r2, #4
   154fe:	f103 0137 	add.w	r1, r3, #55	; 0x37
   15502:	2aa0      	cmp	r2, #160	; 0xa0
   15504:	bf38      	it	cc
   15506:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   1550a:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   1550e:	227e      	movs	r2, #126	; 0x7e
   15510:	2302      	movs	r3, #2
   15512:	e001      	b.n	15518 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   15514:	227f      	movs	r2, #127	; 0x7f
   15516:	2301      	movs	r3, #1
   15518:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   1551c:	a802      	add	r0, sp, #8
   1551e:	4410      	add	r0, r2
   15520:	f24d 329d 	movw	r2, #54173	; 0xd39d
   15524:	e9cd 0300 	strd	r0, r3, [sp]
   15528:	f2c0 0201 	movt	r2, #1
   1552c:	4660      	mov	r0, ip
   1552e:	2101      	movs	r1, #1
   15530:	2302      	movs	r3, #2
   15532:	f7fe ffcd 	bl	144d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   15536:	b022      	add	sp, #136	; 0x88
   15538:	bd80      	pop	{r7, pc}

0001553a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   1553a:	b580      	push	{r7, lr}
   1553c:	b0a2      	sub	sp, #136	; 0x88
   1553e:	8800      	ldrh	r0, [r0, #0]
   15540:	468c      	mov	ip, r1
   15542:	f000 020f 	and.w	r2, r0, #15
   15546:	f102 0357 	add.w	r3, r2, #87	; 0x57
   1554a:	2a0a      	cmp	r2, #10
   1554c:	bf38      	it	cc
   1554e:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   15552:	2200      	movs	r2, #0
   15554:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   15558:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   1555c:	d02a      	beq.n	155b4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   1555e:	0903      	lsrs	r3, r0, #4
   15560:	f003 030f 	and.w	r3, r3, #15
   15564:	f103 0157 	add.w	r1, r3, #87	; 0x57
   15568:	2b0a      	cmp	r3, #10
   1556a:	bf38      	it	cc
   1556c:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   15570:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   15574:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   15578:	d031      	beq.n	155de <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   1557a:	0a01      	lsrs	r1, r0, #8
   1557c:	f001 010f 	and.w	r1, r1, #15
   15580:	f101 0257 	add.w	r2, r1, #87	; 0x57
   15584:	290a      	cmp	r1, #10
   15586:	bf38      	it	cc
   15588:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   1558c:	2100      	movs	r1, #0
   1558e:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   15592:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   15596:	d027      	beq.n	155e8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   15598:	0b00      	lsrs	r0, r0, #12
   1559a:	f100 0157 	add.w	r1, r0, #87	; 0x57
   1559e:	280a      	cmp	r0, #10
   155a0:	bf38      	it	cc
   155a2:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   155a6:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   155aa:	227d      	movs	r2, #125	; 0x7d
   155ac:	207c      	movs	r0, #124	; 0x7c
   155ae:	2881      	cmp	r0, #129	; 0x81
   155b0:	d304      	bcc.n	155bc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   155b2:	e01d      	b.n	155f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   155b4:	2280      	movs	r2, #128	; 0x80
   155b6:	207f      	movs	r0, #127	; 0x7f
   155b8:	2881      	cmp	r0, #129	; 0x81
   155ba:	d219      	bcs.n	155f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   155bc:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   155c0:	ab02      	add	r3, sp, #8
   155c2:	4418      	add	r0, r3
   155c4:	2101      	movs	r1, #1
   155c6:	e9cd 0200 	strd	r0, r2, [sp]
   155ca:	f24d 329d 	movw	r2, #54173	; 0xd39d
   155ce:	f2c0 0201 	movt	r2, #1
   155d2:	4660      	mov	r0, ip
   155d4:	2302      	movs	r3, #2
   155d6:	f7fe ff7b 	bl	144d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   155da:	b022      	add	sp, #136	; 0x88
   155dc:	bd80      	pop	{r7, pc}
   155de:	207e      	movs	r0, #126	; 0x7e
   155e0:	227f      	movs	r2, #127	; 0x7f
   155e2:	2881      	cmp	r0, #129	; 0x81
   155e4:	d3ea      	bcc.n	155bc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   155e6:	e003      	b.n	155f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   155e8:	207d      	movs	r0, #125	; 0x7d
   155ea:	227e      	movs	r2, #126	; 0x7e
   155ec:	2881      	cmp	r0, #129	; 0x81
   155ee:	d3e5      	bcc.n	155bc <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   155f0:	2180      	movs	r1, #128	; 0x80
   155f2:	f7ff fb0a 	bl	14c0a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   155f6:	defe      	udf	#254	; 0xfe

000155f8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>:
   155f8:	b580      	push	{r7, lr}
   155fa:	b0a2      	sub	sp, #136	; 0x88
   155fc:	8800      	ldrh	r0, [r0, #0]
   155fe:	468c      	mov	ip, r1
   15600:	f000 020f 	and.w	r2, r0, #15
   15604:	f102 0337 	add.w	r3, r2, #55	; 0x37
   15608:	2a0a      	cmp	r2, #10
   1560a:	bf38      	it	cc
   1560c:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   15610:	2200      	movs	r2, #0
   15612:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   15616:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   1561a:	d02a      	beq.n	15672 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x7a>
   1561c:	0903      	lsrs	r3, r0, #4
   1561e:	f003 030f 	and.w	r3, r3, #15
   15622:	f103 0137 	add.w	r1, r3, #55	; 0x37
   15626:	2b0a      	cmp	r3, #10
   15628:	bf38      	it	cc
   1562a:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   1562e:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   15632:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   15636:	d031      	beq.n	1569c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xa4>
   15638:	0a01      	lsrs	r1, r0, #8
   1563a:	f001 010f 	and.w	r1, r1, #15
   1563e:	f101 0237 	add.w	r2, r1, #55	; 0x37
   15642:	290a      	cmp	r1, #10
   15644:	bf38      	it	cc
   15646:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   1564a:	2100      	movs	r1, #0
   1564c:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   15650:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   15654:	d027      	beq.n	156a6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xae>
   15656:	0b00      	lsrs	r0, r0, #12
   15658:	f100 0137 	add.w	r1, r0, #55	; 0x37
   1565c:	280a      	cmp	r0, #10
   1565e:	bf38      	it	cc
   15660:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   15664:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   15668:	227d      	movs	r2, #125	; 0x7d
   1566a:	207c      	movs	r0, #124	; 0x7c
   1566c:	2881      	cmp	r0, #129	; 0x81
   1566e:	d304      	bcc.n	1567a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   15670:	e01d      	b.n	156ae <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   15672:	2280      	movs	r2, #128	; 0x80
   15674:	207f      	movs	r0, #127	; 0x7f
   15676:	2881      	cmp	r0, #129	; 0x81
   15678:	d219      	bcs.n	156ae <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   1567a:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   1567e:	ab02      	add	r3, sp, #8
   15680:	4418      	add	r0, r3
   15682:	2101      	movs	r1, #1
   15684:	e9cd 0200 	strd	r0, r2, [sp]
   15688:	f24d 329d 	movw	r2, #54173	; 0xd39d
   1568c:	f2c0 0201 	movt	r2, #1
   15690:	4660      	mov	r0, ip
   15692:	2302      	movs	r3, #2
   15694:	f7fe ff1c 	bl	144d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   15698:	b022      	add	sp, #136	; 0x88
   1569a:	bd80      	pop	{r7, pc}
   1569c:	207e      	movs	r0, #126	; 0x7e
   1569e:	227f      	movs	r2, #127	; 0x7f
   156a0:	2881      	cmp	r0, #129	; 0x81
   156a2:	d3ea      	bcc.n	1567a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   156a4:	e003      	b.n	156ae <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   156a6:	207d      	movs	r0, #125	; 0x7d
   156a8:	227e      	movs	r2, #126	; 0x7e
   156aa:	2881      	cmp	r0, #129	; 0x81
   156ac:	d3e5      	bcc.n	1567a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   156ae:	2180      	movs	r1, #128	; 0x80
   156b0:	f7ff faab 	bl	14c0a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   156b4:	defe      	udf	#254	; 0xfe

000156b6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   156b6:	b5b0      	push	{r4, r5, r7, lr}
   156b8:	b0a2      	sub	sp, #136	; 0x88
   156ba:	6800      	ldr	r0, [r0, #0]
   156bc:	f10d 0e08 	add.w	lr, sp, #8
   156c0:	468c      	mov	ip, r1
   156c2:	2381      	movs	r3, #129	; 0x81
   156c4:	2100      	movs	r1, #0
   156c6:	f000 020f 	and.w	r2, r0, #15
   156ca:	f102 0457 	add.w	r4, r2, #87	; 0x57
   156ce:	2a0a      	cmp	r2, #10
   156d0:	bf38      	it	cc
   156d2:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   156d6:	eb0e 0203 	add.w	r2, lr, r3
   156da:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   156de:	f802 4c02 	strb.w	r4, [r2, #-2]
   156e2:	d030      	beq.n	15746 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   156e4:	0904      	lsrs	r4, r0, #4
   156e6:	f004 040f 	and.w	r4, r4, #15
   156ea:	f104 0557 	add.w	r5, r4, #87	; 0x57
   156ee:	2c0a      	cmp	r4, #10
   156f0:	bf38      	it	cc
   156f2:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   156f6:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   156fa:	f802 5c03 	strb.w	r5, [r2, #-3]
   156fe:	d028      	beq.n	15752 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   15700:	0a04      	lsrs	r4, r0, #8
   15702:	f004 040f 	and.w	r4, r4, #15
   15706:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1570a:	2c0a      	cmp	r4, #10
   1570c:	bf38      	it	cc
   1570e:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   15712:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   15716:	f802 5c04 	strb.w	r5, [r2, #-4]
   1571a:	d01f      	beq.n	1575c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   1571c:	0b04      	lsrs	r4, r0, #12
   1571e:	3b04      	subs	r3, #4
   15720:	f004 040f 	and.w	r4, r4, #15
   15724:	f104 0557 	add.w	r5, r4, #87	; 0x57
   15728:	2c0a      	cmp	r4, #10
   1572a:	bf38      	it	cc
   1572c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   15730:	f802 5c05 	strb.w	r5, [r2, #-5]
   15734:	0c02      	lsrs	r2, r0, #16
   15736:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   1573a:	4610      	mov	r0, r2
   1573c:	d1c3      	bne.n	156c6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   1573e:	1e58      	subs	r0, r3, #1
   15740:	2881      	cmp	r0, #129	; 0x81
   15742:	d30f      	bcc.n	15764 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   15744:	e01e      	b.n	15784 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   15746:	1e59      	subs	r1, r3, #1
   15748:	1e98      	subs	r0, r3, #2
   1574a:	460b      	mov	r3, r1
   1574c:	2881      	cmp	r0, #129	; 0x81
   1574e:	d309      	bcc.n	15764 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   15750:	e018      	b.n	15784 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   15752:	1ed8      	subs	r0, r3, #3
   15754:	3b02      	subs	r3, #2
   15756:	2881      	cmp	r0, #129	; 0x81
   15758:	d304      	bcc.n	15764 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   1575a:	e013      	b.n	15784 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   1575c:	1f18      	subs	r0, r3, #4
   1575e:	3b03      	subs	r3, #3
   15760:	2881      	cmp	r0, #129	; 0x81
   15762:	d20f      	bcs.n	15784 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   15764:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   15768:	f24d 329d 	movw	r2, #54173	; 0xd39d
   1576c:	4470      	add	r0, lr
   1576e:	f2c0 0201 	movt	r2, #1
   15772:	e9cd 0100 	strd	r0, r1, [sp]
   15776:	4660      	mov	r0, ip
   15778:	2101      	movs	r1, #1
   1577a:	2302      	movs	r3, #2
   1577c:	f7fe fea8 	bl	144d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   15780:	b022      	add	sp, #136	; 0x88
   15782:	bdb0      	pop	{r4, r5, r7, pc}
   15784:	2180      	movs	r1, #128	; 0x80
   15786:	f7ff fa40 	bl	14c0a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1578a:	defe      	udf	#254	; 0xfe

0001578c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   1578c:	b5b0      	push	{r4, r5, r7, lr}
   1578e:	b0a2      	sub	sp, #136	; 0x88
   15790:	6800      	ldr	r0, [r0, #0]
   15792:	f10d 0e08 	add.w	lr, sp, #8
   15796:	468c      	mov	ip, r1
   15798:	2381      	movs	r3, #129	; 0x81
   1579a:	2100      	movs	r1, #0
   1579c:	f000 020f 	and.w	r2, r0, #15
   157a0:	f102 0437 	add.w	r4, r2, #55	; 0x37
   157a4:	2a0a      	cmp	r2, #10
   157a6:	bf38      	it	cc
   157a8:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   157ac:	eb0e 0203 	add.w	r2, lr, r3
   157b0:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   157b4:	f802 4c02 	strb.w	r4, [r2, #-2]
   157b8:	d030      	beq.n	1581c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   157ba:	0904      	lsrs	r4, r0, #4
   157bc:	f004 040f 	and.w	r4, r4, #15
   157c0:	f104 0537 	add.w	r5, r4, #55	; 0x37
   157c4:	2c0a      	cmp	r4, #10
   157c6:	bf38      	it	cc
   157c8:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   157cc:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   157d0:	f802 5c03 	strb.w	r5, [r2, #-3]
   157d4:	d028      	beq.n	15828 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   157d6:	0a04      	lsrs	r4, r0, #8
   157d8:	f004 040f 	and.w	r4, r4, #15
   157dc:	f104 0537 	add.w	r5, r4, #55	; 0x37
   157e0:	2c0a      	cmp	r4, #10
   157e2:	bf38      	it	cc
   157e4:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   157e8:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   157ec:	f802 5c04 	strb.w	r5, [r2, #-4]
   157f0:	d01f      	beq.n	15832 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   157f2:	0b04      	lsrs	r4, r0, #12
   157f4:	3b04      	subs	r3, #4
   157f6:	f004 040f 	and.w	r4, r4, #15
   157fa:	f104 0537 	add.w	r5, r4, #55	; 0x37
   157fe:	2c0a      	cmp	r4, #10
   15800:	bf38      	it	cc
   15802:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   15806:	f802 5c05 	strb.w	r5, [r2, #-5]
   1580a:	0c02      	lsrs	r2, r0, #16
   1580c:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   15810:	4610      	mov	r0, r2
   15812:	d1c3      	bne.n	1579c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   15814:	1e58      	subs	r0, r3, #1
   15816:	2881      	cmp	r0, #129	; 0x81
   15818:	d30f      	bcc.n	1583a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1581a:	e01e      	b.n	1585a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1581c:	1e59      	subs	r1, r3, #1
   1581e:	1e98      	subs	r0, r3, #2
   15820:	460b      	mov	r3, r1
   15822:	2881      	cmp	r0, #129	; 0x81
   15824:	d309      	bcc.n	1583a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   15826:	e018      	b.n	1585a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   15828:	1ed8      	subs	r0, r3, #3
   1582a:	3b02      	subs	r3, #2
   1582c:	2881      	cmp	r0, #129	; 0x81
   1582e:	d304      	bcc.n	1583a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   15830:	e013      	b.n	1585a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   15832:	1f18      	subs	r0, r3, #4
   15834:	3b03      	subs	r3, #3
   15836:	2881      	cmp	r0, #129	; 0x81
   15838:	d20f      	bcs.n	1585a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1583a:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   1583e:	f24d 329d 	movw	r2, #54173	; 0xd39d
   15842:	4470      	add	r0, lr
   15844:	f2c0 0201 	movt	r2, #1
   15848:	e9cd 0100 	strd	r0, r1, [sp]
   1584c:	4660      	mov	r0, ip
   1584e:	2101      	movs	r1, #1
   15850:	2302      	movs	r3, #2
   15852:	f7fe fe3d 	bl	144d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   15856:	b022      	add	sp, #136	; 0x88
   15858:	bdb0      	pop	{r4, r5, r7, pc}
   1585a:	2180      	movs	r1, #128	; 0x80
   1585c:	f7ff f9d5 	bl	14c0a <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   15860:	defe      	udf	#254	; 0xfe

00015862 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   15862:	b580      	push	{r7, lr}
   15864:	b08c      	sub	sp, #48	; 0x30
   15866:	7802      	ldrb	r2, [r0, #0]
   15868:	2a64      	cmp	r2, #100	; 0x64
   1586a:	d314      	bcc.n	15896 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   1586c:	f248 501f 	movw	r0, #34079	; 0x851f
   15870:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   15874:	fba2 0300 	umull	r0, r3, r2, r0
   15878:	2064      	movs	r0, #100	; 0x64
   1587a:	095b      	lsrs	r3, r3, #5
   1587c:	fb03 2010 	mls	r0, r3, r0, r2
   15880:	f24d 329f 	movw	r2, #54175	; 0xd39f
   15884:	f2c0 0201 	movt	r2, #1
   15888:	b2c0      	uxtb	r0, r0
   1588a:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   1588e:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   15892:	2024      	movs	r0, #36	; 0x24
   15894:	e003      	b.n	1589e <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   15896:	2a0a      	cmp	r2, #10
   15898:	d206      	bcs.n	158a8 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   1589a:	2026      	movs	r0, #38	; 0x26
   1589c:	4613      	mov	r3, r2
   1589e:	f103 0230 	add.w	r2, r3, #48	; 0x30
   158a2:	ab02      	add	r3, sp, #8
   158a4:	541a      	strb	r2, [r3, r0]
   158a6:	e008      	b.n	158ba <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   158a8:	f24d 309f 	movw	r0, #54175	; 0xd39f
   158ac:	f2c0 0001 	movt	r0, #1
   158b0:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   158b4:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   158b8:	2025      	movs	r0, #37	; 0x25
   158ba:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   158be:	ab02      	add	r3, sp, #8
   158c0:	4418      	add	r0, r3
   158c2:	2300      	movs	r3, #0
   158c4:	e9cd 0200 	strd	r0, r2, [sp]
   158c8:	f24d 1264 	movw	r2, #53604	; 0xd164
   158cc:	4608      	mov	r0, r1
   158ce:	f2c0 0201 	movt	r2, #1
   158d2:	2101      	movs	r1, #1
   158d4:	f7fe fdfc 	bl	144d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   158d8:	b00c      	add	sp, #48	; 0x30
   158da:	bd80      	pop	{r7, pc}

000158dc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>:
   158dc:	b580      	push	{r7, lr}
   158de:	b08c      	sub	sp, #48	; 0x30
   158e0:	8800      	ldrh	r0, [r0, #0]
   158e2:	f242 720f 	movw	r2, #9999	; 0x270f
   158e6:	468e      	mov	lr, r1
   158e8:	4290      	cmp	r0, r2
   158ea:	d924      	bls.n	15936 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x5a>
   158ec:	f241 7259 	movw	r2, #5977	; 0x1759
   158f0:	f248 511f 	movw	r1, #34079	; 0x851f
   158f4:	f2cd 12b7 	movt	r2, #53687	; 0xd1b7
   158f8:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   158fc:	fba0 2302 	umull	r2, r3, r0, r2
   15900:	0b5a      	lsrs	r2, r3, #13
   15902:	f242 7310 	movw	r3, #10000	; 0x2710
   15906:	fb02 0013 	mls	r0, r2, r3, r0
   1590a:	b283      	uxth	r3, r0
   1590c:	fba3 1301 	umull	r1, r3, r3, r1
   15910:	0959      	lsrs	r1, r3, #5
   15912:	2364      	movs	r3, #100	; 0x64
   15914:	fb01 0013 	mls	r0, r1, r3, r0
   15918:	f24d 339f 	movw	r3, #54175	; 0xd39f
   1591c:	f2c0 0301 	movt	r3, #1
   15920:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   15924:	f8ad 102b 	strh.w	r1, [sp, #43]	; 0x2b
   15928:	b280      	uxth	r0, r0
   1592a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1592e:	2323      	movs	r3, #35	; 0x23
   15930:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   15934:	e024      	b.n	15980 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa4>
   15936:	f24d 3c9f 	movw	ip, #54175	; 0xd39f
   1593a:	2863      	cmp	r0, #99	; 0x63
   1593c:	f2c0 0c01 	movt	ip, #1
   15940:	d919      	bls.n	15976 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x9a>
   15942:	f248 511f 	movw	r1, #34079	; 0x851f
   15946:	2325      	movs	r3, #37	; 0x25
   15948:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   1594c:	fba0 1201 	umull	r1, r2, r0, r1
   15950:	0951      	lsrs	r1, r2, #5
   15952:	2264      	movs	r2, #100	; 0x64
   15954:	fb01 0012 	mls	r0, r1, r2, r0
   15958:	b280      	uxth	r0, r0
   1595a:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
   1595e:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   15962:	4608      	mov	r0, r1
   15964:	b282      	uxth	r2, r0
   15966:	2a0a      	cmp	r2, #10
   15968:	d309      	bcc.n	1597e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa2>
   1596a:	f83c 1012 	ldrh.w	r1, [ip, r2, lsl #1]
   1596e:	1e98      	subs	r0, r3, #2
   15970:	aa02      	add	r2, sp, #8
   15972:	5211      	strh	r1, [r2, r0]
   15974:	e009      	b.n	1598a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xae>
   15976:	2327      	movs	r3, #39	; 0x27
   15978:	b282      	uxth	r2, r0
   1597a:	2a0a      	cmp	r2, #10
   1597c:	d2f5      	bcs.n	1596a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x8e>
   1597e:	4602      	mov	r2, r0
   15980:	1e58      	subs	r0, r3, #1
   15982:	f102 0130 	add.w	r1, r2, #48	; 0x30
   15986:	aa02      	add	r2, sp, #8
   15988:	5411      	strb	r1, [r2, r0]
   1598a:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   1598e:	aa02      	add	r2, sp, #8
   15990:	4410      	add	r0, r2
   15992:	f24d 1264 	movw	r2, #53604	; 0xd164
   15996:	e9cd 0100 	strd	r0, r1, [sp]
   1599a:	f2c0 0201 	movt	r2, #1
   1599e:	4670      	mov	r0, lr
   159a0:	2101      	movs	r1, #1
   159a2:	2300      	movs	r3, #0
   159a4:	f7fe fd94 	bl	144d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   159a8:	b00c      	add	sp, #48	; 0x30
   159aa:	bd80      	pop	{r7, pc}

000159ac <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   159ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159b0:	b08f      	sub	sp, #60	; 0x3c
   159b2:	6805      	ldr	r5, [r0, #0]
   159b4:	f248 581f 	movw	r8, #34079	; 0x851f
   159b8:	460e      	mov	r6, r1
   159ba:	f24d 319f 	movw	r1, #54175	; 0xd39f
   159be:	2d00      	cmp	r5, #0
   159c0:	f242 7910 	movw	r9, #10000	; 0x2710
   159c4:	462b      	mov	r3, r5
   159c6:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   159ca:	bf48      	it	mi
   159cc:	426b      	negmi	r3, r5
   159ce:	454b      	cmp	r3, r9
   159d0:	f2c0 0101 	movt	r1, #1
   159d4:	d33a      	bcc.n	15a4c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   159d6:	f241 7a59 	movw	sl, #5977	; 0x1759
   159da:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   159de:	f10d 0e14 	add.w	lr, sp, #20
   159e2:	2400      	movs	r4, #0
   159e4:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   159e8:	f04f 0b64 	mov.w	fp, #100	; 0x64
   159ec:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   159f0:	e9cd 5603 	strd	r5, r6, [sp, #12]
   159f4:	fba3 250a 	umull	r2, r5, r3, sl
   159f8:	eb0e 0704 	add.w	r7, lr, r4
   159fc:	3c04      	subs	r4, #4
   159fe:	4283      	cmp	r3, r0
   15a00:	ea4f 3255 	mov.w	r2, r5, lsr #13
   15a04:	fb02 3519 	mls	r5, r2, r9, r3
   15a08:	4613      	mov	r3, r2
   15a0a:	b2ae      	uxth	r6, r5
   15a0c:	fba6 6c08 	umull	r6, ip, r6, r8
   15a10:	ea4f 165c 	mov.w	r6, ip, lsr #5
   15a14:	fb06 551b 	mls	r5, r6, fp, r5
   15a18:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   15a1c:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   15a20:	b2ad      	uxth	r5, r5
   15a22:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   15a26:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   15a2a:	d8e3      	bhi.n	159f4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   15a2c:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   15a30:	f104 0027 	add.w	r0, r4, #39	; 0x27
   15a34:	4613      	mov	r3, r2
   15a36:	2b63      	cmp	r3, #99	; 0x63
   15a38:	dc0b      	bgt.n	15a52 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   15a3a:	461a      	mov	r2, r3
   15a3c:	2a0a      	cmp	r2, #10
   15a3e:	db17      	blt.n	15a70 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   15a40:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   15a44:	3802      	subs	r0, #2
   15a46:	aa05      	add	r2, sp, #20
   15a48:	5211      	strh	r1, [r2, r0]
   15a4a:	e016      	b.n	15a7a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   15a4c:	2027      	movs	r0, #39	; 0x27
   15a4e:	2b63      	cmp	r3, #99	; 0x63
   15a50:	ddf3      	ble.n	15a3a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   15a52:	b29a      	uxth	r2, r3
   15a54:	3802      	subs	r0, #2
   15a56:	fba2 2708 	umull	r2, r7, r2, r8
   15a5a:	097a      	lsrs	r2, r7, #5
   15a5c:	2764      	movs	r7, #100	; 0x64
   15a5e:	fb02 3317 	mls	r3, r2, r7, r3
   15a62:	af05      	add	r7, sp, #20
   15a64:	b29b      	uxth	r3, r3
   15a66:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   15a6a:	523b      	strh	r3, [r7, r0]
   15a6c:	2a0a      	cmp	r2, #10
   15a6e:	dae7      	bge.n	15a40 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   15a70:	3801      	subs	r0, #1
   15a72:	f102 0130 	add.w	r1, r2, #48	; 0x30
   15a76:	aa05      	add	r2, sp, #20
   15a78:	5411      	strb	r1, [r2, r0]
   15a7a:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   15a7e:	aa05      	add	r2, sp, #20
   15a80:	4410      	add	r0, r2
   15a82:	f24d 1264 	movw	r2, #53604	; 0xd164
   15a86:	e9cd 0100 	strd	r0, r1, [sp]
   15a8a:	43e8      	mvns	r0, r5
   15a8c:	0fc1      	lsrs	r1, r0, #31
   15a8e:	f2c0 0201 	movt	r2, #1
   15a92:	4630      	mov	r0, r6
   15a94:	2300      	movs	r3, #0
   15a96:	f7fe fd1b 	bl	144d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   15a9a:	b00f      	add	sp, #60	; 0x3c
   15a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015aa0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   15aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15aa4:	b08d      	sub	sp, #52	; 0x34
   15aa6:	468c      	mov	ip, r1
   15aa8:	6801      	ldr	r1, [r0, #0]
   15aaa:	f248 5e1f 	movw	lr, #34079	; 0x851f
   15aae:	f24d 309f 	movw	r0, #54175	; 0xd39f
   15ab2:	f242 7810 	movw	r8, #10000	; 0x2710
   15ab6:	4541      	cmp	r1, r8
   15ab8:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   15abc:	f2c0 0001 	movt	r0, #1
   15ac0:	d337      	bcc.n	15b32 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   15ac2:	f241 7959 	movw	r9, #5977	; 0x1759
   15ac6:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   15aca:	f10d 0b0c 	add.w	fp, sp, #12
   15ace:	2300      	movs	r3, #0
   15ad0:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   15ad4:	f04f 0a64 	mov.w	sl, #100	; 0x64
   15ad8:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   15adc:	fba1 2409 	umull	r2, r4, r1, r9
   15ae0:	42b9      	cmp	r1, r7
   15ae2:	ea4f 3254 	mov.w	r2, r4, lsr #13
   15ae6:	fb02 1418 	mls	r4, r2, r8, r1
   15aea:	4611      	mov	r1, r2
   15aec:	b2a5      	uxth	r5, r4
   15aee:	fba5 560e 	umull	r5, r6, r5, lr
   15af2:	ea4f 1556 	mov.w	r5, r6, lsr #5
   15af6:	eb0b 0603 	add.w	r6, fp, r3
   15afa:	fb05 441a 	mls	r4, r5, sl, r4
   15afe:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   15b02:	f1a3 0304 	sub.w	r3, r3, #4
   15b06:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   15b0a:	b2a4      	uxth	r4, r4
   15b0c:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   15b10:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   15b14:	d8e2      	bhi.n	15adc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   15b16:	f103 0427 	add.w	r4, r3, #39	; 0x27
   15b1a:	4611      	mov	r1, r2
   15b1c:	2963      	cmp	r1, #99	; 0x63
   15b1e:	dc0b      	bgt.n	15b38 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   15b20:	460b      	mov	r3, r1
   15b22:	2b0a      	cmp	r3, #10
   15b24:	db17      	blt.n	15b56 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   15b26:	1ea1      	subs	r1, r4, #2
   15b28:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   15b2c:	aa03      	add	r2, sp, #12
   15b2e:	5250      	strh	r0, [r2, r1]
   15b30:	e016      	b.n	15b60 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   15b32:	2427      	movs	r4, #39	; 0x27
   15b34:	2963      	cmp	r1, #99	; 0x63
   15b36:	ddf3      	ble.n	15b20 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   15b38:	b28a      	uxth	r2, r1
   15b3a:	3c02      	subs	r4, #2
   15b3c:	fba2 230e 	umull	r2, r3, r2, lr
   15b40:	2264      	movs	r2, #100	; 0x64
   15b42:	095b      	lsrs	r3, r3, #5
   15b44:	fb03 1112 	mls	r1, r3, r2, r1
   15b48:	aa03      	add	r2, sp, #12
   15b4a:	b289      	uxth	r1, r1
   15b4c:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   15b50:	5311      	strh	r1, [r2, r4]
   15b52:	2b0a      	cmp	r3, #10
   15b54:	dae7      	bge.n	15b26 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   15b56:	1e61      	subs	r1, r4, #1
   15b58:	aa03      	add	r2, sp, #12
   15b5a:	f103 0030 	add.w	r0, r3, #48	; 0x30
   15b5e:	5450      	strb	r0, [r2, r1]
   15b60:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   15b64:	aa03      	add	r2, sp, #12
   15b66:	4411      	add	r1, r2
   15b68:	f24d 1264 	movw	r2, #53604	; 0xd164
   15b6c:	e9cd 1000 	strd	r1, r0, [sp]
   15b70:	f2c0 0201 	movt	r2, #1
   15b74:	4660      	mov	r0, ip
   15b76:	2101      	movs	r1, #1
   15b78:	2300      	movs	r3, #0
   15b7a:	f7fe fca9 	bl	144d0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   15b7e:	b00d      	add	sp, #52	; 0x34
   15b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015b84 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   15b84:	e9d0 2000 	ldrd	r2, r0, [r0]
   15b88:	68c3      	ldr	r3, [r0, #12]
   15b8a:	4610      	mov	r0, r2
   15b8c:	4718      	bx	r3

00015b8e <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   15b8e:	460b      	mov	r3, r1
   15b90:	e9d0 1200 	ldrd	r1, r2, [r0]
   15b94:	4618      	mov	r0, r3
   15b96:	f7fe bde3 	b.w	14760 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
	...

00015b9c <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   15b9c:	4b07      	ldr	r3, [pc, #28]	; (15bbc <__semihost+0x20>)
   15b9e:	781b      	ldrb	r3, [r3, #0]
   15ba0:	b14b      	cbz	r3, 15bb6 <__semihost+0x1a>
static int __semihost(int command, void* message) {
   15ba2:	b410      	push	{r4}
   15ba4:	4602      	mov	r2, r0
   15ba6:	460c      	mov	r4, r1
    __asm( 
   15ba8:	4610      	mov	r0, r2
   15baa:	4621      	mov	r1, r4
   15bac:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   15bae:	2000      	movs	r0, #0
}
   15bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
   15bb4:	4770      	bx	lr
    if (!log_enabled) return -1;
   15bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   15bba:	4770      	bx	lr
   15bbc:	200000f8 	.word	0x200000f8

00015bc0 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   15bc0:	4b02      	ldr	r3, [pc, #8]	; (15bcc <debugger_connected+0xc>)
   15bc2:	6818      	ldr	r0, [r3, #0]
}
   15bc4:	f000 0001 	and.w	r0, r0, #1
   15bc8:	4770      	bx	lr
   15bca:	bf00      	nop
   15bcc:	e000edf0 	.word	0xe000edf0

00015bd0 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   15bd0:	b570      	push	{r4, r5, r6, lr}
   15bd2:	b084      	sub	sp, #16
   15bd4:	4606      	mov	r6, r0
   15bd6:	460d      	mov	r5, r1
   15bd8:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   15bda:	f7ff fff1 	bl	15bc0 <debugger_connected>
   15bde:	4603      	mov	r3, r0
   15be0:	b108      	cbz	r0, 15be6 <semihost_write+0x16>
    if (length == 0) { return 0; }
   15be2:	b91c      	cbnz	r4, 15bec <semihost_write+0x1c>
   15be4:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   15be6:	4618      	mov	r0, r3
   15be8:	b004      	add	sp, #16
   15bea:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   15bec:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   15bee:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   15bf0:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   15bf2:	a901      	add	r1, sp, #4
   15bf4:	2005      	movs	r0, #5
   15bf6:	f7ff ffd1 	bl	15b9c <__semihost>
   15bfa:	4603      	mov	r3, r0
   15bfc:	e7f3      	b.n	15be6 <semihost_write+0x16>
	...

00015c00 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   15c00:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   15c02:	4b0e      	ldr	r3, [pc, #56]	; (15c3c <console_flush+0x3c>)
   15c04:	781b      	ldrb	r3, [r3, #0]
   15c06:	b1bb      	cbz	r3, 15c38 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   15c08:	4b0d      	ldr	r3, [pc, #52]	; (15c40 <console_flush+0x40>)
   15c0a:	681d      	ldr	r5, [r3, #0]
   15c0c:	b1a5      	cbz	r5, 15c38 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   15c0e:	4b0d      	ldr	r3, [pc, #52]	; (15c44 <console_flush+0x44>)
   15c10:	685b      	ldr	r3, [r3, #4]
   15c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   15c16:	b97b      	cbnz	r3, 15c38 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   15c18:	4b09      	ldr	r3, [pc, #36]	; (15c40 <console_flush+0x40>)
   15c1a:	2200      	movs	r2, #0
   15c1c:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   15c1e:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   15c20:	e005      	b.n	15c2e <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   15c22:	88e2      	ldrh	r2, [r4, #6]
   15c24:	6821      	ldr	r1, [r4, #0]
   15c26:	2002      	movs	r0, #2
   15c28:	f7ff ffd2 	bl	15bd0 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   15c2c:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   15c2e:	2c00      	cmp	r4, #0
   15c30:	d1f7      	bne.n	15c22 <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   15c32:	4628      	mov	r0, r5
   15c34:	f001 fbfc 	bl	17430 <os_mbuf_free_chain>
}
   15c38:	bd38      	pop	{r3, r4, r5, pc}
   15c3a:	bf00      	nop
   15c3c:	200000f8 	.word	0x200000f8
   15c40:	200026a4 	.word	0x200026a4
   15c44:	e000ed00 	.word	0xe000ed00

00015c48 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   15c48:	b508      	push	{r3, lr}
   15c4a:	f7ff ffd9 	bl	15c00 <console_flush>
   15c4e:	bd08      	pop	{r3, pc}

00015c50 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   15c50:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   15c52:	4b12      	ldr	r3, [pc, #72]	; (15c9c <console_buffer+0x4c>)
   15c54:	781b      	ldrb	r3, [r3, #0]
   15c56:	b903      	cbnz	r3, 15c5a <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   15c58:	bd38      	pop	{r3, r4, r5, pc}
   15c5a:	460d      	mov	r5, r1
   15c5c:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   15c5e:	f7ff ffaf 	bl	15bc0 <debugger_connected>
   15c62:	2800      	cmp	r0, #0
   15c64:	d0f8      	beq.n	15c58 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   15c66:	4b0e      	ldr	r3, [pc, #56]	; (15ca0 <console_buffer+0x50>)
   15c68:	681b      	ldr	r3, [r3, #0]
   15c6a:	b173      	cbz	r3, 15c8a <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   15c6c:	4b0c      	ldr	r3, [pc, #48]	; (15ca0 <console_buffer+0x50>)
   15c6e:	6818      	ldr	r0, [r3, #0]
   15c70:	f001 fbf0 	bl	17454 <os_mbuf_len>
   15c74:	4428      	add	r0, r5
   15c76:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   15c7a:	d2ed      	bcs.n	15c58 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   15c7c:	b2aa      	uxth	r2, r5
   15c7e:	4621      	mov	r1, r4
   15c80:	4b07      	ldr	r3, [pc, #28]	; (15ca0 <console_buffer+0x50>)
   15c82:	6818      	ldr	r0, [r3, #0]
   15c84:	f001 fbf0 	bl	17468 <os_mbuf_append>
   15c88:	e7e6      	b.n	15c58 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   15c8a:	2100      	movs	r1, #0
   15c8c:	b2a8      	uxth	r0, r5
   15c8e:	f001 fd93 	bl	177b8 <os_msys_get_pkthdr>
   15c92:	4b03      	ldr	r3, [pc, #12]	; (15ca0 <console_buffer+0x50>)
   15c94:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   15c96:	2800      	cmp	r0, #0
   15c98:	d1e8      	bne.n	15c6c <console_buffer+0x1c>
   15c9a:	e7dd      	b.n	15c58 <console_buffer+0x8>
   15c9c:	200000f8 	.word	0x200000f8
   15ca0:	200026a4 	.word	0x200026a4

00015ca4 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   15ca4:	b500      	push	{lr}
   15ca6:	b083      	sub	sp, #12
   15ca8:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   15cac:	280d      	cmp	r0, #13
   15cae:	d004      	beq.n	15cba <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   15cb0:	2101      	movs	r1, #1
   15cb2:	f10d 0007 	add.w	r0, sp, #7
   15cb6:	f7ff ffcb 	bl	15c50 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   15cba:	b003      	add	sp, #12
   15cbc:	f85d fb04 	ldr.w	pc, [sp], #4

00015cc0 <console_printhex>:
void console_printhex(uint8_t v) {
   15cc0:	b510      	push	{r4, lr}
   15cc2:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   15cc4:	2310      	movs	r3, #16
    int length = 0;
   15cc6:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   15cc8:	e005      	b.n	15cd6 <console_printhex+0x16>
        v = v % divisor;
   15cca:	fbb0 f1f3 	udiv	r1, r0, r3
   15cce:	fb03 0011 	mls	r0, r3, r1, r0
   15cd2:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   15cd4:	091b      	lsrs	r3, r3, #4
   15cd6:	b18b      	cbz	r3, 15cfc <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   15cd8:	fbb0 f4f3 	udiv	r4, r0, r3
   15cdc:	f104 0130 	add.w	r1, r4, #48	; 0x30
   15ce0:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   15ce2:	2939      	cmp	r1, #57	; 0x39
   15ce4:	d902      	bls.n	15cec <console_printhex+0x2c>
   15ce6:	f104 0157 	add.w	r1, r4, #87	; 0x57
   15cea:	b2c9      	uxtb	r1, r1
            if (length < size) {
   15cec:	2a02      	cmp	r2, #2
   15cee:	dcec      	bgt.n	15cca <console_printhex+0xa>
                buffer[length++] = digit;
   15cf0:	ac02      	add	r4, sp, #8
   15cf2:	4414      	add	r4, r2
   15cf4:	f804 1c04 	strb.w	r1, [r4, #-4]
   15cf8:	3201      	adds	r2, #1
   15cfa:	e7e6      	b.n	15cca <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   15cfc:	b92a      	cbnz	r2, 15d0a <console_printhex+0x4a>
   15cfe:	ab02      	add	r3, sp, #8
   15d00:	4413      	add	r3, r2
   15d02:	2130      	movs	r1, #48	; 0x30
   15d04:	f803 1c04 	strb.w	r1, [r3, #-4]
   15d08:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   15d0a:	2a02      	cmp	r2, #2
   15d0c:	dc04      	bgt.n	15d18 <console_printhex+0x58>
   15d0e:	ab02      	add	r3, sp, #8
   15d10:	441a      	add	r2, r3
   15d12:	2300      	movs	r3, #0
   15d14:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   15d18:	2300      	movs	r3, #0
   15d1a:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   15d1e:	a801      	add	r0, sp, #4
   15d20:	f002 fb73 	bl	1840a <strlen>
   15d24:	4601      	mov	r1, r0
   15d26:	a801      	add	r0, sp, #4
   15d28:	f7ff ff92 	bl	15c50 <console_buffer>
}
   15d2c:	b002      	add	sp, #8
   15d2e:	bd10      	pop	{r4, pc}

00015d30 <console_printint>:
void console_printint(int i) {
   15d30:	b508      	push	{r3, lr}
    console_printf("%d", i);
   15d32:	4601      	mov	r1, r0
   15d34:	4801      	ldr	r0, [pc, #4]	; (15d3c <console_printint+0xc>)
   15d36:	f000 f873 	bl	15e20 <console_printf>
}
   15d3a:	bd08      	pop	{r3, pc}
   15d3c:	0001e364 	.word	0x0001e364

00015d40 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   15d40:	b180      	cbz	r0, 15d64 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   15d42:	b570      	push	{r4, r5, r6, lr}
   15d44:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   15d46:	b161      	cbz	r1, 15d62 <console_dump+0x22>
   15d48:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   15d4a:	2400      	movs	r4, #0
   15d4c:	e007      	b.n	15d5e <console_dump+0x1e>
   15d4e:	5d30      	ldrb	r0, [r6, r4]
   15d50:	f7ff ffb6 	bl	15cc0 <console_printhex>
   15d54:	2101      	movs	r1, #1
   15d56:	4804      	ldr	r0, [pc, #16]	; (15d68 <console_dump+0x28>)
   15d58:	f7ff ff7a 	bl	15c50 <console_buffer>
   15d5c:	3401      	adds	r4, #1
   15d5e:	42ac      	cmp	r4, r5
   15d60:	d3f5      	bcc.n	15d4e <console_dump+0xe>
}
   15d62:	bd70      	pop	{r4, r5, r6, pc}
   15d64:	4770      	bx	lr
   15d66:	bf00      	nop
   15d68:	0001e360 	.word	0x0001e360

00015d6c <console_out_nolock>:

int console_out_nolock(int character) {
   15d6c:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   15d6e:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   15d70:	4b0b      	ldr	r3, [pc, #44]	; (15da0 <console_out_nolock+0x34>)
   15d72:	781b      	ldrb	r3, [r3, #0]
   15d74:	b953      	cbnz	r3, 15d8c <console_out_nolock+0x20>
   15d76:	4604      	mov	r4, r0
    if ('\n' == c) {
   15d78:	2d0a      	cmp	r5, #10
   15d7a:	d009      	beq.n	15d90 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   15d7c:	4b09      	ldr	r3, [pc, #36]	; (15da4 <console_out_nolock+0x38>)
   15d7e:	2201      	movs	r2, #1
   15d80:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   15d82:	4628      	mov	r0, r5
   15d84:	f7ff ff8e 	bl	15ca4 <semihosting_console_write_ch>
    return character;
   15d88:	4620      	mov	r0, r4
}
   15d8a:	bd38      	pop	{r3, r4, r5, pc}
   15d8c:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   15d8e:	e7fc      	b.n	15d8a <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   15d90:	200d      	movs	r0, #13
   15d92:	f7ff ff87 	bl	15ca4 <semihosting_console_write_ch>
        console_is_midline = 0;
   15d96:	4b03      	ldr	r3, [pc, #12]	; (15da4 <console_out_nolock+0x38>)
   15d98:	2200      	movs	r2, #0
   15d9a:	601a      	str	r2, [r3, #0]
   15d9c:	e7f1      	b.n	15d82 <console_out_nolock+0x16>
   15d9e:	bf00      	nop
   15da0:	2000b554 	.word	0x2000b554
   15da4:	2000b558 	.word	0x2000b558

00015da8 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   15da8:	2000      	movs	r0, #0
   15daa:	4770      	bx	lr

00015dac <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   15dac:	b570      	push	{r4, r5, r6, lr}
   15dae:	4606      	mov	r6, r0
   15db0:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   15db2:	2400      	movs	r4, #0
   15db4:	42ac      	cmp	r4, r5
   15db6:	da07      	bge.n	15dc8 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   15db8:	5d30      	ldrb	r0, [r6, r4]
   15dba:	f7ff ffd7 	bl	15d6c <console_out_nolock>
   15dbe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   15dc2:	d001      	beq.n	15dc8 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   15dc4:	3401      	adds	r4, #1
   15dc6:	e7f5      	b.n	15db4 <console_write+0x8>
    }
}
   15dc8:	bd70      	pop	{r4, r5, r6, pc}

00015dca <console_blocking_mode>:

void console_blocking_mode(void) {
   15dca:	b508      	push	{r3, lr}
    disable_buffer();
   15dcc:	f7ff ff3c 	bl	15c48 <disable_buffer>
}
   15dd0:	bd08      	pop	{r3, pc}
	...

00015dd4 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   15dd4:	b510      	push	{r4, lr}
   15dd6:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   15dd8:	4b0d      	ldr	r3, [pc, #52]	; (15e10 <console_pkg_init+0x3c>)
   15dda:	781b      	ldrb	r3, [r3, #0]
   15ddc:	b193      	cbz	r3, 15e04 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   15dde:	480d      	ldr	r0, [pc, #52]	; (15e14 <console_pkg_init+0x40>)
   15de0:	f001 f9fa 	bl	171d8 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   15de4:	480c      	ldr	r0, [pc, #48]	; (15e18 <console_pkg_init+0x44>)
   15de6:	f001 fd15 	bl	17814 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   15dea:	f7ff ffdd 	bl	15da8 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   15dee:	b138      	cbz	r0, 15e00 <console_pkg_init+0x2c>
   15df0:	2000      	movs	r0, #0
   15df2:	9000      	str	r0, [sp, #0]
   15df4:	4b09      	ldr	r3, [pc, #36]	; (15e1c <console_pkg_init+0x48>)
   15df6:	681c      	ldr	r4, [r3, #0]
   15df8:	4603      	mov	r3, r0
   15dfa:	4602      	mov	r2, r0
   15dfc:	4601      	mov	r1, r0
   15dfe:	47a0      	blx	r4
}
   15e00:	b002      	add	sp, #8
   15e02:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   15e04:	461a      	mov	r2, r3
   15e06:	4619      	mov	r1, r3
   15e08:	4618      	mov	r0, r3
   15e0a:	f000 fed1 	bl	16bb0 <__assert_func>
   15e0e:	bf00      	nop
   15e10:	2000b55c 	.word	0x2000b55c
   15e14:	200026a8 	.word	0x200026a8
   15e18:	200026b8 	.word	0x200026b8
   15e1c:	200000fc 	.word	0x200000fc

00015e20 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   15e20:	b40f      	push	{r0, r1, r2, r3}
   15e22:	b510      	push	{r4, lr}
   15e24:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   15e26:	f000 f81f 	bl	15e68 <console_get_ticks>
   15e2a:	b160      	cbz	r0, 15e46 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   15e2c:	4b0c      	ldr	r3, [pc, #48]	; (15e60 <console_printf+0x40>)
   15e2e:	681b      	ldr	r3, [r3, #0]
   15e30:	b10b      	cbz	r3, 15e36 <console_printf+0x16>
    num_chars = 0;
   15e32:	2400      	movs	r4, #0
   15e34:	e008      	b.n	15e48 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   15e36:	f002 f8d9 	bl	17fec <os_time_get>
   15e3a:	4601      	mov	r1, r0
   15e3c:	4809      	ldr	r0, [pc, #36]	; (15e64 <console_printf+0x44>)
   15e3e:	f002 fd97 	bl	18970 <printf>
   15e42:	4604      	mov	r4, r0
   15e44:	e000      	b.n	15e48 <console_printf+0x28>
    num_chars = 0;
   15e46:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   15e48:	a905      	add	r1, sp, #20
   15e4a:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   15e4c:	9804      	ldr	r0, [sp, #16]
   15e4e:	f002 fdbf 	bl	189d0 <vprintf>
    va_end(args);

    return num_chars;
}
   15e52:	4420      	add	r0, r4
   15e54:	b002      	add	sp, #8
   15e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15e5a:	b004      	add	sp, #16
   15e5c:	4770      	bx	lr
   15e5e:	bf00      	nop
   15e60:	2000b558 	.word	0x2000b558
   15e64:	0001e368 	.word	0x0001e368

00015e68 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   15e68:	4b01      	ldr	r3, [pc, #4]	; (15e70 <console_get_ticks+0x8>)
   15e6a:	7818      	ldrb	r0, [r3, #0]
   15e6c:	4770      	bx	lr
   15e6e:	bf00      	nop
   15e70:	200026c4 	.word	0x200026c4

00015e74 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   15e74:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   15e76:	f000 fe9b 	bl	16bb0 <__assert_func>
	...

00015e7c <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   15e7c:	4b01      	ldr	r3, [pc, #4]	; (15e84 <sysinit_start+0x8>)
   15e7e:	2201      	movs	r2, #1
   15e80:	701a      	strb	r2, [r3, #0]
}
   15e82:	4770      	bx	lr
   15e84:	2000b55c 	.word	0x2000b55c

00015e88 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   15e88:	4b01      	ldr	r3, [pc, #4]	; (15e90 <sysinit_end+0x8>)
   15e8a:	2200      	movs	r2, #0
   15e8c:	701a      	strb	r2, [r3, #0]
}
   15e8e:	4770      	bx	lr
   15e90:	2000b55c 	.word	0x2000b55c

00015e94 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   15e94:	4a09      	ldr	r2, [pc, #36]	; (15ebc <NVIC_Relocate+0x28>)
   15e96:	4b0a      	ldr	r3, [pc, #40]	; (15ec0 <NVIC_Relocate+0x2c>)
   15e98:	429a      	cmp	r2, r3
   15e9a:	d00a      	beq.n	15eb2 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   15e9c:	2300      	movs	r3, #0
   15e9e:	e006      	b.n	15eae <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   15ea0:	4a07      	ldr	r2, [pc, #28]	; (15ec0 <NVIC_Relocate+0x2c>)
   15ea2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   15ea6:	4a05      	ldr	r2, [pc, #20]	; (15ebc <NVIC_Relocate+0x28>)
   15ea8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   15eac:	3301      	adds	r3, #1
   15eae:	2b35      	cmp	r3, #53	; 0x35
   15eb0:	ddf6      	ble.n	15ea0 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   15eb2:	4a02      	ldr	r2, [pc, #8]	; (15ebc <NVIC_Relocate+0x28>)
   15eb4:	4b03      	ldr	r3, [pc, #12]	; (15ec4 <NVIC_Relocate+0x30>)
   15eb6:	609a      	str	r2, [r3, #8]
#endif
}
   15eb8:	4770      	bx	lr
   15eba:	bf00      	nop
   15ebc:	20000000 	.word	0x20000000
   15ec0:	00008020 	.word	0x00008020
   15ec4:	e000ed00 	.word	0xe000ed00

00015ec8 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   15ec8:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   15eca:	2400      	movs	r4, #0
   15ecc:	e000      	b.n	15ed0 <hal_gpio_irq_handler+0x8>
   15ece:	3401      	adds	r4, #1
   15ed0:	2c07      	cmp	r4, #7
   15ed2:	dc1c      	bgt.n	15f0e <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   15ed4:	f104 0340 	add.w	r3, r4, #64	; 0x40
   15ed8:	4a0d      	ldr	r2, [pc, #52]	; (15f10 <hal_gpio_irq_handler+0x48>)
   15eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15ede:	2b00      	cmp	r3, #0
   15ee0:	d0f5      	beq.n	15ece <hal_gpio_irq_handler+0x6>
   15ee2:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   15ee6:	2301      	movs	r3, #1
   15ee8:	40a3      	lsls	r3, r4
   15eea:	421a      	tst	r2, r3
   15eec:	d0ef      	beq.n	15ece <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   15eee:	f104 0340 	add.w	r3, r4, #64	; 0x40
   15ef2:	4a07      	ldr	r2, [pc, #28]	; (15f10 <hal_gpio_irq_handler+0x48>)
   15ef4:	2100      	movs	r1, #0
   15ef6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   15efa:	4b06      	ldr	r3, [pc, #24]	; (15f14 <hal_gpio_irq_handler+0x4c>)
   15efc:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   15f00:	2a00      	cmp	r2, #0
   15f02:	d0e4      	beq.n	15ece <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   15f04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   15f08:	6858      	ldr	r0, [r3, #4]
   15f0a:	4790      	blx	r2
   15f0c:	e7df      	b.n	15ece <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   15f0e:	bd10      	pop	{r4, pc}
   15f10:	40006000 	.word	0x40006000
   15f14:	200026c8 	.word	0x200026c8

00015f18 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   15f18:	4b06      	ldr	r3, [pc, #24]	; (15f34 <hal_gpio_irq_setup+0x1c>)
   15f1a:	781b      	ldrb	r3, [r3, #0]
   15f1c:	b94b      	cbnz	r3, 15f32 <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   15f1e:	4b06      	ldr	r3, [pc, #24]	; (15f38 <hal_gpio_irq_setup+0x20>)
   15f20:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   15f22:	4a06      	ldr	r2, [pc, #24]	; (15f3c <hal_gpio_irq_setup+0x24>)
   15f24:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15f26:	4b06      	ldr	r3, [pc, #24]	; (15f40 <hal_gpio_irq_setup+0x28>)
   15f28:	2240      	movs	r2, #64	; 0x40
   15f2a:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   15f2c:	4b01      	ldr	r3, [pc, #4]	; (15f34 <hal_gpio_irq_setup+0x1c>)
   15f2e:	2201      	movs	r2, #1
   15f30:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   15f32:	4770      	bx	lr
   15f34:	20002708 	.word	0x20002708
   15f38:	e000ed00 	.word	0xe000ed00
   15f3c:	00015ec9 	.word	0x00015ec9
   15f40:	e000e100 	.word	0xe000e100

00015f44 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   15f44:	2000      	movs	r0, #0
   15f46:	2807      	cmp	r0, #7
   15f48:	dc05      	bgt.n	15f56 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   15f4a:	4b04      	ldr	r3, [pc, #16]	; (15f5c <hal_gpio_find_empty_slot+0x18>)
   15f4c:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   15f50:	b11b      	cbz	r3, 15f5a <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   15f52:	3001      	adds	r0, #1
   15f54:	e7f7      	b.n	15f46 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   15f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   15f5a:	4770      	bx	lr
   15f5c:	200026c8 	.word	0x200026c8

00015f60 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   15f60:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   15f62:	2000      	movs	r0, #0
   15f64:	e000      	b.n	15f68 <hal_gpio_find_pin+0x8>
   15f66:	3001      	adds	r0, #1
   15f68:	2807      	cmp	r0, #7
   15f6a:	dc0e      	bgt.n	15f8a <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   15f6c:	4b08      	ldr	r3, [pc, #32]	; (15f90 <hal_gpio_find_pin+0x30>)
   15f6e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   15f72:	2b00      	cmp	r3, #0
   15f74:	d0f7      	beq.n	15f66 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   15f76:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   15f7a:	4a06      	ldr	r2, [pc, #24]	; (15f94 <hal_gpio_find_pin+0x34>)
   15f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   15f80:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   15f84:	428b      	cmp	r3, r1
   15f86:	d1ee      	bne.n	15f66 <hal_gpio_find_pin+0x6>
   15f88:	e001      	b.n	15f8e <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   15f8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   15f8e:	4770      	bx	lr
   15f90:	200026c8 	.word	0x200026c8
   15f94:	40006000 	.word	0x40006000

00015f98 <hal_gpio_init_in>:
    switch (pull) {
   15f98:	2901      	cmp	r1, #1
   15f9a:	d003      	beq.n	15fa4 <hal_gpio_init_in+0xc>
   15f9c:	2902      	cmp	r1, #2
   15f9e:	d00f      	beq.n	15fc0 <hal_gpio_init_in+0x28>
        conf = 0;
   15fa0:	2100      	movs	r1, #0
        break;
   15fa2:	e000      	b.n	15fa6 <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   15fa4:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   15fa6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   15faa:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   15fae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   15fb2:	2301      	movs	r3, #1
   15fb4:	fa03 f000 	lsl.w	r0, r3, r0
   15fb8:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   15fbc:	2000      	movs	r0, #0
   15fbe:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   15fc0:	2104      	movs	r1, #4
   15fc2:	e7f0      	b.n	15fa6 <hal_gpio_init_in+0xe>

00015fc4 <hal_gpio_init_out>:
    if (val) {
   15fc4:	b999      	cbnz	r1, 15fee <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   15fc6:	2301      	movs	r3, #1
   15fc8:	4083      	lsls	r3, r0
   15fca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   15fce:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   15fd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   15fd6:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   15fda:	2103      	movs	r1, #3
   15fdc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   15fe0:	2301      	movs	r3, #1
   15fe2:	fa03 f000 	lsl.w	r0, r3, r0
   15fe6:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   15fea:	2000      	movs	r0, #0
   15fec:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   15fee:	2301      	movs	r3, #1
   15ff0:	4083      	lsls	r3, r0
   15ff2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   15ff6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   15ffa:	e7ea      	b.n	15fd2 <hal_gpio_init_out+0xe>

00015ffc <hal_gpio_write>:
    if (val) {
   15ffc:	b939      	cbnz	r1, 1600e <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   15ffe:	2301      	movs	r3, #1
   16000:	fa03 f000 	lsl.w	r0, r3, r0
   16004:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   16008:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1600c:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1600e:	2301      	movs	r3, #1
   16010:	fa03 f000 	lsl.w	r0, r3, r0
   16014:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   16018:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   1601c:	4770      	bx	lr

0001601e <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   1601e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   16022:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   16026:	2301      	movs	r3, #1
   16028:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   1602a:	421a      	tst	r2, r3
   1602c:	d108      	bne.n	16040 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   1602e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   16032:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   16036:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   1603a:	f000 0001 	and.w	r0, r0, #1
}
   1603e:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   16040:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   16044:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   16048:	fa23 f000 	lsr.w	r0, r3, r0
   1604c:	f000 0001 	and.w	r0, r0, #1
   16050:	4770      	bx	lr
	...

00016054 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   16054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16058:	4680      	mov	r8, r0
   1605a:	460f      	mov	r7, r1
   1605c:	4616      	mov	r6, r2
   1605e:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   16060:	f7ff ff5a 	bl	15f18 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   16064:	f7ff ff6e 	bl	15f44 <hal_gpio_find_empty_slot>
    if (i < 0) {
   16068:	1e05      	subs	r5, r0, #0
   1606a:	db27      	blt.n	160bc <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   1606c:	f89d 1018 	ldrb.w	r1, [sp, #24]
   16070:	4640      	mov	r0, r8
   16072:	f7ff ff91 	bl	15f98 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   16076:	2c02      	cmp	r4, #2
   16078:	d01d      	beq.n	160b6 <hal_gpio_irq_init+0x62>
   1607a:	2c03      	cmp	r4, #3
   1607c:	d018      	beq.n	160b0 <hal_gpio_irq_init+0x5c>
   1607e:	2c01      	cmp	r4, #1
   16080:	d002      	beq.n	16088 <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   16082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16086:	e011      	b.n	160ac <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   16088:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   1608c:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   16090:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   16094:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   16098:	4b0a      	ldr	r3, [pc, #40]	; (160c4 <hal_gpio_irq_init+0x70>)
   1609a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   1609e:	4b0a      	ldr	r3, [pc, #40]	; (160c8 <hal_gpio_irq_init+0x74>)
   160a0:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   160a4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   160a8:	605e      	str	r6, [r3, #4]

    return 0;
   160aa:	2000      	movs	r0, #0
}
   160ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   160b0:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   160b4:	e7ea      	b.n	1608c <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   160b6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   160ba:	e7e7      	b.n	1608c <hal_gpio_irq_init+0x38>
        return -1;
   160bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   160c0:	e7f4      	b.n	160ac <hal_gpio_irq_init+0x58>
   160c2:	bf00      	nop
   160c4:	40006000 	.word	0x40006000
   160c8:	200026c8 	.word	0x200026c8

000160cc <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   160cc:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   160ce:	f7ff ff47 	bl	15f60 <hal_gpio_find_pin>
    if (i < 0) {
   160d2:	2800      	cmp	r0, #0
   160d4:	db0a      	blt.n	160ec <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   160d6:	4a06      	ldr	r2, [pc, #24]	; (160f0 <hal_gpio_irq_enable+0x24>)
   160d8:	f100 0340 	add.w	r3, r0, #64	; 0x40
   160dc:	2100      	movs	r1, #0
   160de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   160e2:	2301      	movs	r3, #1
   160e4:	fa03 f000 	lsl.w	r0, r3, r0
   160e8:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   160ec:	bd08      	pop	{r3, pc}
   160ee:	bf00      	nop
   160f0:	40006000 	.word	0x40006000

000160f4 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   160f4:	3801      	subs	r0, #1
   160f6:	bf00      	nop
   160f8:	bf00      	nop
   160fa:	bf00      	nop
   160fc:	bf00      	nop
   160fe:	bf00      	nop
   16100:	bf00      	nop
   16102:	bf00      	nop
   16104:	bf00      	nop
   16106:	bf00      	nop
   16108:	bf00      	nop
   1610a:	bf00      	nop
   1610c:	bf00      	nop
   1610e:	bf00      	nop
   16110:	bf00      	nop
   16112:	bf00      	nop
   16114:	bf00      	nop
   16116:	bf00      	nop
   16118:	bf00      	nop
   1611a:	bf00      	nop
   1611c:	bf00      	nop
   1611e:	bf00      	nop
   16120:	bf00      	nop
   16122:	bf00      	nop
   16124:	bf00      	nop
   16126:	bf00      	nop
   16128:	bf00      	nop
   1612a:	bf00      	nop
   1612c:	bf00      	nop
   1612e:	bf00      	nop
   16130:	bf00      	nop
   16132:	bf00      	nop
   16134:	bf00      	nop
   16136:	bf00      	nop
   16138:	bf00      	nop
   1613a:	bf00      	nop
   1613c:	bf00      	nop
   1613e:	bf00      	nop
   16140:	bf00      	nop
   16142:	bf00      	nop
   16144:	bf00      	nop
   16146:	bf00      	nop
   16148:	bf00      	nop
   1614a:	bf00      	nop
   1614c:	bf00      	nop
   1614e:	bf00      	nop
   16150:	bf00      	nop
   16152:	bf00      	nop
   16154:	bf00      	nop
   16156:	bf00      	nop
   16158:	bf00      	nop
   1615a:	bf00      	nop
   1615c:	bf00      	nop
   1615e:	bf00      	nop
   16160:	bf00      	nop
   16162:	bf00      	nop
   16164:	bf00      	nop
   16166:	bf00      	nop
   16168:	bf00      	nop
   1616a:	d1c3      	bne.n	160f4 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   1616c:	4770      	bx	lr
	...

00016170 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   16170:	2801      	cmp	r0, #1
   16172:	d806      	bhi.n	16182 <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   16174:	4b06      	ldr	r3, [pc, #24]	; (16190 <hal_i2c_resolve+0x20>)
   16176:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1617a:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   1617c:	b12b      	cbz	r3, 1618a <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   1617e:	2000      	movs	r0, #0
}
   16180:	4770      	bx	lr
        *out_i2c = NULL;
   16182:	2300      	movs	r3, #0
   16184:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   16186:	2002      	movs	r0, #2
   16188:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   1618a:	2002      	movs	r0, #2
   1618c:	4770      	bx	lr
   1618e:	bf00      	nop
   16190:	0001e370 	.word	0x0001e370

00016194 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   16194:	b148      	cbz	r0, 161aa <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   16196:	f010 0f04 	tst.w	r0, #4
   1619a:	d107      	bne.n	161ac <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   1619c:	f010 0f02 	tst.w	r0, #2
   161a0:	d101      	bne.n	161a6 <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   161a2:	2001      	movs	r0, #1
    }
}
   161a4:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   161a6:	2004      	movs	r0, #4
   161a8:	4770      	bx	lr
   161aa:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   161ac:	2005      	movs	r0, #5
   161ae:	4770      	bx	lr

000161b0 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   161b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   161b4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   161b8:	fa23 f000 	lsr.w	r0, r3, r0
}
   161bc:	f000 0001 	and.w	r0, r0, #1
   161c0:	4770      	bx	lr

000161c2 <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   161c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   161c6:	4605      	mov	r5, r0
   161c8:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   161ca:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   161ce:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   161d2:	f240 630c 	movw	r3, #1548	; 0x60c
   161d6:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   161da:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   161de:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   161e2:	2101      	movs	r1, #1
   161e4:	f7ff ff0a 	bl	15ffc <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   161e8:	2101      	movs	r1, #1
   161ea:	4630      	mov	r0, r6
   161ec:	f7ff ff06 	bl	15ffc <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   161f0:	f240 630d 	movw	r3, #1549	; 0x60d
   161f4:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   161f8:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   161fc:	2004      	movs	r0, #4
   161fe:	f7ff ff79 	bl	160f4 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   16202:	2400      	movs	r4, #0
   16204:	2c08      	cmp	r4, #8
   16206:	dc14      	bgt.n	16232 <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   16208:	4630      	mov	r0, r6
   1620a:	f7ff ffd1 	bl	161b0 <read_gpio_inbuffer>
   1620e:	b978      	cbnz	r0, 16230 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   16210:	2100      	movs	r1, #0
   16212:	4628      	mov	r0, r5
   16214:	f7ff fef2 	bl	15ffc <hal_gpio_write>
        hal_i2c_delay_us(4);
   16218:	2004      	movs	r0, #4
   1621a:	f7ff ff6b 	bl	160f4 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   1621e:	2101      	movs	r1, #1
   16220:	4628      	mov	r0, r5
   16222:	f7ff feeb 	bl	15ffc <hal_gpio_write>
        hal_i2c_delay_us(4);
   16226:	2004      	movs	r0, #4
   16228:	f7ff ff64 	bl	160f4 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   1622c:	3401      	adds	r4, #1
   1622e:	e7e9      	b.n	16204 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   16230:	b154      	cbz	r4, 16248 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   16232:	2100      	movs	r1, #0
   16234:	4630      	mov	r0, r6
   16236:	f7ff fee1 	bl	15ffc <hal_gpio_write>
    hal_i2c_delay_us(4);
   1623a:	2004      	movs	r0, #4
   1623c:	f7ff ff5a 	bl	160f4 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   16240:	2101      	movs	r1, #1
   16242:	4630      	mov	r0, r6
   16244:	f7ff feda 	bl	15ffc <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   16248:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1624c:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   16250:	f240 620c 	movw	r2, #1548	; 0x60c
   16254:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   16258:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1625c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   16260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00016264 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   16264:	b5f0      	push	{r4, r5, r6, r7, lr}
   16266:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   16268:	b1a1      	cbz	r1, 16294 <hal_i2c_init+0x30>
   1626a:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1626c:	a901      	add	r1, sp, #4
   1626e:	f7ff ff7f 	bl	16170 <hal_i2c_resolve>
    if (rc != 0) {
   16272:	4606      	mov	r6, r0
   16274:	bba8      	cbnz	r0, 162e2 <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   16276:	9b01      	ldr	r3, [sp, #4]
   16278:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   1627a:	68a3      	ldr	r3, [r4, #8]
   1627c:	2bfa      	cmp	r3, #250	; 0xfa
   1627e:	d035      	beq.n	162ec <hal_i2c_init+0x88>
   16280:	d90e      	bls.n	162a0 <hal_i2c_init+0x3c>
   16282:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   16286:	d02f      	beq.n	162e8 <hal_i2c_init+0x84>
   16288:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   1628c:	d131      	bne.n	162f2 <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   1628e:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   16292:	e009      	b.n	162a8 <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   16294:	2300      	movs	r3, #0
   16296:	461a      	mov	r2, r3
   16298:	4619      	mov	r1, r3
   1629a:	4618      	mov	r0, r3
   1629c:	f000 fc88 	bl	16bb0 <__assert_func>
    switch (cfg->i2c_frequency) {
   162a0:	2b64      	cmp	r3, #100	; 0x64
   162a2:	d126      	bne.n	162f2 <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   162a4:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   162a8:	6861      	ldr	r1, [r4, #4]
   162aa:	6820      	ldr	r0, [r4, #0]
   162ac:	f7ff ff89 	bl	161c2 <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   162b0:	6823      	ldr	r3, [r4, #0]
   162b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   162b6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   162ba:	f240 610c 	movw	r1, #1548	; 0x60c
   162be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   162c2:	6863      	ldr	r3, [r4, #4]
   162c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   162c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   162cc:	6823      	ldr	r3, [r4, #0]
   162ce:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   162d2:	6863      	ldr	r3, [r4, #4]
   162d4:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   162d8:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   162dc:	2305      	movs	r3, #5
   162de:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   162e2:	4630      	mov	r0, r6
   162e4:	b003      	add	sp, #12
   162e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   162e8:	4f03      	ldr	r7, [pc, #12]	; (162f8 <hal_i2c_init+0x94>)
        break;
   162ea:	e7dd      	b.n	162a8 <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   162ec:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   162f0:	e7da      	b.n	162a8 <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   162f2:	2602      	movs	r6, #2
   162f4:	e7f5      	b.n	162e2 <hal_i2c_init+0x7e>
   162f6:	bf00      	nop
   162f8:	06147ae9 	.word	0x06147ae9

000162fc <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   162fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16300:	b083      	sub	sp, #12
   16302:	4688      	mov	r8, r1
   16304:	4615      	mov	r5, r2
   16306:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   16308:	a901      	add	r1, sp, #4
   1630a:	f7ff ff31 	bl	16170 <hal_i2c_resolve>
    if (rc != 0) {
   1630e:	4681      	mov	r9, r0
   16310:	b118      	cbz	r0, 1631a <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   16312:	4648      	mov	r0, r9
   16314:	b003      	add	sp, #12
   16316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   1631a:	9b01      	ldr	r3, [sp, #4]
   1631c:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   1631e:	f898 3000 	ldrb.w	r3, [r8]
   16322:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   16326:	2300      	movs	r3, #0
   16328:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   1632c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   16330:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   16334:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   16338:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   1633c:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   16340:	2300      	movs	r3, #0
   16342:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   16346:	2301      	movs	r3, #1
   16348:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   1634a:	f000 fe61 	bl	17010 <os_cputime_get32>
   1634e:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   16352:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   16356:	f7ff fe62 	bl	1601e <hal_gpio_read>
   1635a:	b1b0      	cbz	r0, 1638a <hal_i2c_master_write+0x8e>
   1635c:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   16360:	b99b      	cbnz	r3, 1638a <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   16362:	f000 fe55 	bl	17010 <os_cputime_get32>
   16366:	1b80      	subs	r0, r0, r6
   16368:	2800      	cmp	r0, #0
   1636a:	dbf2      	blt.n	16352 <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   1636c:	2300      	movs	r3, #0
   1636e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   16372:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   16376:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1637a:	f7ff ff22 	bl	161c2 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1637e:	2305      	movs	r3, #5
   16380:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   16384:	f1bb 0b01 	subs.w	fp, fp, #1
   16388:	d1da      	bne.n	16340 <hal_i2c_master_write+0x44>
    start = os_time_get();
   1638a:	f001 fe2f 	bl	17fec <os_time_get>
   1638e:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   16390:	464f      	mov	r7, r9
   16392:	e003      	b.n	1639c <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   16394:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16398:	b9db      	cbnz	r3, 163d2 <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   1639a:	3701      	adds	r7, #1
   1639c:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   163a0:	42bb      	cmp	r3, r7
   163a2:	dd24      	ble.n	163ee <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   163a4:	2300      	movs	r3, #0
   163a6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   163aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
   163ae:	5ddb      	ldrb	r3, [r3, r7]
   163b0:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   163b4:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   163b8:	2b00      	cmp	r3, #0
   163ba:	d1eb      	bne.n	16394 <hal_i2c_master_write+0x98>
   163bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   163c0:	2b00      	cmp	r3, #0
   163c2:	d1e7      	bne.n	16394 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   163c4:	f001 fe12 	bl	17fec <os_time_get>
   163c8:	1b80      	subs	r0, r0, r6
   163ca:	42a8      	cmp	r0, r5
   163cc:	d9f2      	bls.n	163b4 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   163ce:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   163d2:	2301      	movs	r3, #1
   163d4:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   163d6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   163da:	2b00      	cmp	r3, #0
   163dc:	d099      	beq.n	16312 <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   163de:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   163e2:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   163e6:	f7ff fed5 	bl	16194 <hal_i2c_convert_status>
   163ea:	4681      	mov	r9, r0
   163ec:	e791      	b.n	16312 <hal_i2c_master_write+0x16>
    if (last_op) {
   163ee:	f1ba 0f00 	cmp.w	sl, #0
   163f2:	d08e      	beq.n	16312 <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   163f4:	2300      	movs	r3, #0
   163f6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   163fa:	2301      	movs	r3, #1
   163fc:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   163fe:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   16402:	b953      	cbnz	r3, 1641a <hal_i2c_master_write+0x11e>
   16404:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   16408:	b93b      	cbnz	r3, 1641a <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   1640a:	f001 fdef 	bl	17fec <os_time_get>
   1640e:	1b80      	subs	r0, r0, r6
   16410:	42a8      	cmp	r0, r5
   16412:	d9f4      	bls.n	163fe <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   16414:	f04f 0903 	mov.w	r9, #3
   16418:	e7db      	b.n	163d2 <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   1641a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1641e:	2b00      	cmp	r3, #0
   16420:	d1d7      	bne.n	163d2 <hal_i2c_master_write+0xd6>
   16422:	e776      	b.n	16312 <hal_i2c_master_write+0x16>

00016424 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   16424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16428:	b085      	sub	sp, #20
   1642a:	460f      	mov	r7, r1
   1642c:	4615      	mov	r5, r2
   1642e:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   16430:	a903      	add	r1, sp, #12
   16432:	f7ff fe9d 	bl	16170 <hal_i2c_resolve>
    if (rc != 0) {
   16436:	4681      	mov	r9, r0
   16438:	b118      	cbz	r0, 16442 <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   1643a:	4648      	mov	r0, r9
   1643c:	b005      	add	sp, #20
   1643e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   16442:	9b03      	ldr	r3, [sp, #12]
   16444:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   16446:	f001 fdd1 	bl	17fec <os_time_get>
   1644a:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   1644c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16450:	b11b      	cbz	r3, 1645a <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   16452:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   16456:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   1645a:	2300      	movs	r3, #0
   1645c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   16460:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   16464:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   16468:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   1646c:	783b      	ldrb	r3, [r7, #0]
   1646e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   16472:	887b      	ldrh	r3, [r7, #2]
   16474:	2b01      	cmp	r3, #1
   16476:	d02e      	beq.n	164d6 <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   16478:	2301      	movs	r3, #1
   1647a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   1647e:	46a2      	mov	sl, r4
    int retry = 2;
   16480:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   16484:	2300      	movs	r3, #0
   16486:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1648a:	2301      	movs	r3, #1
   1648c:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   16490:	f000 fdbe 	bl	17010 <os_cputime_get32>
   16494:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   16498:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1649c:	f7ff fdbf 	bl	1601e <hal_gpio_read>
   164a0:	b1b8      	cbz	r0, 164d2 <hal_i2c_master_read+0xae>
   164a2:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   164a6:	b9a3      	cbnz	r3, 164d2 <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   164a8:	f000 fdb2 	bl	17010 <os_cputime_get32>
   164ac:	eba0 0008 	sub.w	r0, r0, r8
   164b0:	2800      	cmp	r0, #0
   164b2:	dbf1      	blt.n	16498 <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   164b4:	2300      	movs	r3, #0
   164b6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   164ba:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   164be:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   164c2:	f7ff fe7e 	bl	161c2 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   164c6:	2305      	movs	r3, #5
   164c8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   164cc:	f1bb 0b01 	subs.w	fp, fp, #1
   164d0:	d1d8      	bne.n	16484 <hal_i2c_master_read+0x60>
    int retry = 2;
   164d2:	46c8      	mov	r8, r9
   164d4:	e017      	b.n	16506 <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   164d6:	9b01      	ldr	r3, [sp, #4]
   164d8:	2b00      	cmp	r3, #0
   164da:	d0cd      	beq.n	16478 <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   164dc:	2302      	movs	r3, #2
   164de:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   164e2:	e7cc      	b.n	1647e <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   164e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   164e8:	bb0b      	cbnz	r3, 1652e <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   164ea:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   164ee:	687b      	ldr	r3, [r7, #4]
   164f0:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   164f4:	887b      	ldrh	r3, [r7, #2]
   164f6:	3b02      	subs	r3, #2
   164f8:	4543      	cmp	r3, r8
   164fa:	d02a      	beq.n	16552 <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   164fc:	2300      	movs	r3, #0
   164fe:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   16502:	f108 0801 	add.w	r8, r8, #1
   16506:	887b      	ldrh	r3, [r7, #2]
   16508:	4543      	cmp	r3, r8
   1650a:	dd96      	ble.n	1643a <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   1650c:	2301      	movs	r3, #1
   1650e:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   16510:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   16514:	2b00      	cmp	r3, #0
   16516:	d1e5      	bne.n	164e4 <hal_i2c_master_read+0xc0>
   16518:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1651c:	2b00      	cmp	r3, #0
   1651e:	d1e1      	bne.n	164e4 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   16520:	f001 fd64 	bl	17fec <os_time_get>
   16524:	1b80      	subs	r0, r0, r6
   16526:	42a8      	cmp	r0, r5
   16528:	d9f2      	bls.n	16510 <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   1652a:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1652e:	2301      	movs	r3, #1
   16530:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   16532:	2300      	movs	r3, #0
   16534:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   16538:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1653c:	2b00      	cmp	r3, #0
   1653e:	f43f af7c 	beq.w	1643a <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   16542:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   16546:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1654a:	f7ff fe23 	bl	16194 <hal_i2c_convert_status>
   1654e:	4681      	mov	r9, r0
   16550:	e773      	b.n	1643a <hal_i2c_master_read+0x16>
            if (last_op) {
   16552:	9b01      	ldr	r3, [sp, #4]
   16554:	2b00      	cmp	r3, #0
   16556:	d0d1      	beq.n	164fc <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   16558:	2302      	movs	r3, #2
   1655a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1655e:	e7cd      	b.n	164fc <hal_i2c_master_read+0xd8>

00016560 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   16560:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   16562:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   16564:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   16568:	b32b      	cbz	r3, 165b6 <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   1656a:	2300      	movs	r3, #0
   1656c:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   16570:	7843      	ldrb	r3, [r0, #1]
   16572:	b303      	cbz	r3, 165b6 <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   16574:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   16578:	88c3      	ldrh	r3, [r0, #6]
   1657a:	fa13 f382 	uxtah	r3, r3, r2
   1657e:	b29b      	uxth	r3, r3
   16580:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   16582:	8881      	ldrh	r1, [r0, #4]
   16584:	428b      	cmp	r3, r1
   16586:	d217      	bcs.n	165b8 <nrf52_irqm_handler+0x58>
   16588:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   1658a:	6984      	ldr	r4, [r0, #24]
   1658c:	4414      	add	r4, r2
   1658e:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   16590:	1acb      	subs	r3, r1, r3
   16592:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   16594:	2bff      	cmp	r3, #255	; 0xff
   16596:	bf28      	it	cs
   16598:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1659a:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1659e:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   165a2:	69c1      	ldr	r1, [r0, #28]
   165a4:	b129      	cbz	r1, 165b2 <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   165a6:	440a      	add	r2, r1
   165a8:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   165aa:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   165ae:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   165b2:	2301      	movs	r3, #1
   165b4:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   165b6:	bd38      	pop	{r3, r4, r5, pc}
   165b8:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   165ba:	6a03      	ldr	r3, [r0, #32]
   165bc:	b10b      	cbz	r3, 165c2 <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   165be:	6a40      	ldr	r0, [r0, #36]	; 0x24
   165c0:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   165c2:	2300      	movs	r3, #0
   165c4:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   165c6:	2340      	movs	r3, #64	; 0x40
   165c8:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   165cc:	e7f3      	b.n	165b6 <nrf52_irqm_handler+0x56>
	...

000165d0 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   165d0:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   165d2:	4b04      	ldr	r3, [pc, #16]	; (165e4 <nrf52_spi0_irq_handler+0x14>)
   165d4:	781b      	ldrb	r3, [r3, #0]
   165d6:	b103      	cbz	r3, 165da <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   165d8:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   165da:	4802      	ldr	r0, [pc, #8]	; (165e4 <nrf52_spi0_irq_handler+0x14>)
   165dc:	f7ff ffc0 	bl	16560 <nrf52_irqm_handler>
}
   165e0:	e7fa      	b.n	165d8 <nrf52_spi0_irq_handler+0x8>
   165e2:	bf00      	nop
   165e4:	2000b560 	.word	0x2000b560

000165e8 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   165e8:	2301      	movs	r3, #1
   165ea:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   165ec:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   165f0:	2b00      	cmp	r3, #0
   165f2:	d0fb      	beq.n	165ec <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   165f4:	2300      	movs	r3, #0
   165f6:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   165fa:	4770      	bx	lr

000165fc <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   165fc:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   165fe:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   16600:	780b      	ldrb	r3, [r1, #0]
   16602:	2b03      	cmp	r3, #3
   16604:	d80c      	bhi.n	16620 <hal_spi_config_slave+0x24>
   16606:	e8df f003 	tbb	[pc, r3]
   1660a:	0e02      	.short	0x0e02
   1660c:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1660e:	2300      	movs	r3, #0
    rc = 0;
   16610:	4618      	mov	r0, r3
   16612:	e00a      	b.n	1662a <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   16614:	2304      	movs	r3, #4
    rc = 0;
   16616:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   16618:	e007      	b.n	1662a <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1661a:	2306      	movs	r3, #6
    rc = 0;
   1661c:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   1661e:	e004      	b.n	1662a <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   16620:	2300      	movs	r3, #0
            rc = EINVAL;
   16622:	2016      	movs	r0, #22
            break;
   16624:	e001      	b.n	1662a <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   16626:	2302      	movs	r3, #2
    rc = 0;
   16628:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1662a:	784c      	ldrb	r4, [r1, #1]
   1662c:	2c01      	cmp	r4, #1
   1662e:	d006      	beq.n	1663e <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   16630:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   16634:	788b      	ldrb	r3, [r1, #2]
   16636:	b92b      	cbnz	r3, 16644 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   16638:	f85d 4b04 	ldr.w	r4, [sp], #4
   1663c:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   1663e:	f043 0301 	orr.w	r3, r3, #1
   16642:	e7f5      	b.n	16630 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   16644:	2016      	movs	r0, #22
    return rc;
   16646:	e7f7      	b.n	16638 <hal_spi_config_slave+0x3c>

00016648 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   16648:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   1664a:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   1664c:	2501      	movs	r5, #1
   1664e:	409d      	lsls	r5, r3
   16650:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   16654:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   16658:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1665c:	2503      	movs	r5, #3
   1665e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   16662:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   16664:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   16668:	2500      	movs	r5, #0
   1666a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1666e:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   16670:	780c      	ldrb	r4, [r1, #0]
   16672:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   16676:	784c      	ldrb	r4, [r1, #1]
   16678:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   1667c:	7889      	ldrb	r1, [r1, #2]
   1667e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   16682:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16686:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1668a:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1668e:	4919      	ldr	r1, [pc, #100]	; (166f4 <hal_spi_init_master+0xac>)
   16690:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16692:	3310      	adds	r3, #16
   16694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   16698:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1669c:	42ab      	cmp	r3, r5
   1669e:	db22      	blt.n	166e6 <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   166a0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   166a4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   166a8:	22e0      	movs	r2, #224	; 0xe0
   166aa:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   166ae:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   166b2:	2b00      	cmp	r3, #0
   166b4:	db08      	blt.n	166c8 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   166b6:	f003 011f 	and.w	r1, r3, #31
   166ba:	095b      	lsrs	r3, r3, #5
   166bc:	2201      	movs	r2, #1
   166be:	408a      	lsls	r2, r1
   166c0:	3360      	adds	r3, #96	; 0x60
   166c2:	490d      	ldr	r1, [pc, #52]	; (166f8 <hal_spi_init_master+0xb0>)
   166c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   166c8:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   166cc:	2b00      	cmp	r3, #0
   166ce:	db07      	blt.n	166e0 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   166d0:	f003 011f 	and.w	r1, r3, #31
   166d4:	095b      	lsrs	r3, r3, #5
   166d6:	2201      	movs	r2, #1
   166d8:	408a      	lsls	r2, r1
   166da:	4907      	ldr	r1, [pc, #28]	; (166f8 <hal_spi_init_master+0xb0>)
   166dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   166e0:	2000      	movs	r0, #0
   166e2:	bc30      	pop	{r4, r5}
   166e4:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   166e6:	f003 030f 	and.w	r3, r3, #15
   166ea:	4a04      	ldr	r2, [pc, #16]	; (166fc <hal_spi_init_master+0xb4>)
   166ec:	441a      	add	r2, r3
   166ee:	23e0      	movs	r3, #224	; 0xe0
   166f0:	7613      	strb	r3, [r2, #24]
   166f2:	e7dc      	b.n	166ae <hal_spi_init_master+0x66>
   166f4:	e000ed00 	.word	0xe000ed00
   166f8:	e000e100 	.word	0xe000e100
   166fc:	e000ecfc 	.word	0xe000ecfc

00016700 <hal_spi_config_master>:
{
   16700:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   16702:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   16704:	680c      	ldr	r4, [r1, #0]
   16706:	684b      	ldr	r3, [r1, #4]
   16708:	6084      	str	r4, [r0, #8]
   1670a:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1670c:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   16710:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   16714:	7808      	ldrb	r0, [r1, #0]
   16716:	2801      	cmp	r0, #1
   16718:	d916      	bls.n	16748 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1671a:	2001      	movs	r0, #1
   1671c:	4098      	lsls	r0, r3
   1671e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   16722:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   16726:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1672a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1672e:	2403      	movs	r4, #3
   16730:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   16734:	788b      	ldrb	r3, [r1, #2]
   16736:	b973      	cbnz	r3, 16756 <hal_spi_config_master+0x56>
    rc = 0;
   16738:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   1673a:	780b      	ldrb	r3, [r1, #0]
   1673c:	2b03      	cmp	r3, #3
   1673e:	d812      	bhi.n	16766 <hal_spi_config_master+0x66>
   16740:	e8df f003 	tbb	[pc, r3]
   16744:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   16748:	2001      	movs	r0, #1
   1674a:	4098      	lsls	r0, r3
   1674c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   16750:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   16754:	e7e7      	b.n	16726 <hal_spi_config_master+0x26>
            rc = EINVAL;
   16756:	2016      	movs	r0, #22
   16758:	e7ef      	b.n	1673a <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1675a:	2300      	movs	r3, #0
   1675c:	e007      	b.n	1676e <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1675e:	2304      	movs	r3, #4
            break;
   16760:	e005      	b.n	1676e <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   16762:	2306      	movs	r3, #6
            break;
   16764:	e003      	b.n	1676e <hal_spi_config_master+0x6e>
            nrf_config = 0;
   16766:	2300      	movs	r3, #0
            rc = EINVAL;
   16768:	2016      	movs	r0, #22
            break;
   1676a:	e000      	b.n	1676e <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1676c:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1676e:	784c      	ldrb	r4, [r1, #1]
   16770:	2c01      	cmp	r4, #1
   16772:	d010      	beq.n	16796 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   16774:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   16778:	684b      	ldr	r3, [r1, #4]
   1677a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1677e:	d023      	beq.n	167c8 <hal_spi_config_master+0xc8>
   16780:	d80c      	bhi.n	1679c <hal_spi_config_master+0x9c>
   16782:	2bfa      	cmp	r3, #250	; 0xfa
   16784:	d029      	beq.n	167da <hal_spi_config_master+0xda>
   16786:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1678a:	d01a      	beq.n	167c2 <hal_spi_config_master+0xc2>
   1678c:	2b7d      	cmp	r3, #125	; 0x7d
   1678e:	d011      	beq.n	167b4 <hal_spi_config_master+0xb4>
            frequency = 0;
   16790:	2300      	movs	r3, #0
            rc = EINVAL;
   16792:	2016      	movs	r0, #22
            break;
   16794:	e010      	b.n	167b8 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   16796:	f043 0301 	orr.w	r3, r3, #1
   1679a:	e7eb      	b.n	16774 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   1679c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   167a0:	d015      	beq.n	167ce <hal_spi_config_master+0xce>
   167a2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   167a6:	d015      	beq.n	167d4 <hal_spi_config_master+0xd4>
   167a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   167ac:	d1f0      	bne.n	16790 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   167ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   167b2:	e001      	b.n	167b8 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   167b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   167b8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   167bc:	f85d 4b04 	ldr.w	r4, [sp], #4
   167c0:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   167c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   167c6:	e7f7      	b.n	167b8 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   167c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   167cc:	e7f4      	b.n	167b8 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   167ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   167d2:	e7f1      	b.n	167b8 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   167d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   167d8:	e7ee      	b.n	167b8 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   167da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   167de:	e7eb      	b.n	167b8 <hal_spi_config_master+0xb8>

000167e0 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   167e0:	2802      	cmp	r0, #2
   167e2:	dc10      	bgt.n	16806 <hal_spi_config+0x26>
{
   167e4:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   167e6:	4b0b      	ldr	r3, [pc, #44]	; (16814 <hal_spi_config+0x34>)
   167e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   167ec:	b168      	cbz	r0, 1680a <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   167ee:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   167f0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   167f4:	b95b      	cbnz	r3, 1680e <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   167f6:	7803      	ldrb	r3, [r0, #0]
   167f8:	b113      	cbz	r3, 16800 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   167fa:	f7ff feff 	bl	165fc <hal_spi_config_slave>
    }

err:
    return (rc);
}
   167fe:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   16800:	f7ff ff7e 	bl	16700 <hal_spi_config_master>
   16804:	e7fb      	b.n	167fe <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   16806:	2016      	movs	r0, #22
}
   16808:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1680a:	2016      	movs	r0, #22
   1680c:	e7f7      	b.n	167fe <hal_spi_config+0x1e>
        return -1;
   1680e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16812:	e7f4      	b.n	167fe <hal_spi_config+0x1e>
   16814:	0001e378 	.word	0x0001e378

00016818 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   16818:	2802      	cmp	r0, #2
   1681a:	dc1b      	bgt.n	16854 <hal_spi_enable+0x3c>
   1681c:	4b10      	ldr	r3, [pc, #64]	; (16860 <hal_spi_enable+0x48>)
   1681e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   16822:	b1cb      	cbz	r3, 16858 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   16824:	781a      	ldrb	r2, [r3, #0]
   16826:	b17a      	cbz	r2, 16848 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   16828:	6a1a      	ldr	r2, [r3, #32]
   1682a:	b1ba      	cbz	r2, 1685c <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   1682c:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   1682e:	2000      	movs	r0, #0
   16830:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   16834:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   16838:	f240 4202 	movw	r2, #1026	; 0x402
   1683c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   16840:	2202      	movs	r2, #2
   16842:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   16846:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   16848:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1684a:	2201      	movs	r2, #1
   1684c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   16850:	2000      	movs	r0, #0
   16852:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   16854:	2016      	movs	r0, #22
   16856:	4770      	bx	lr
   16858:	2016      	movs	r0, #22
   1685a:	4770      	bx	lr
            rc = EINVAL;
   1685c:	2016      	movs	r0, #22

err:
    return rc;
}
   1685e:	4770      	bx	lr
   16860:	0001e378 	.word	0x0001e378

00016864 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   16864:	2802      	cmp	r0, #2
   16866:	dc2a      	bgt.n	168be <hal_spi_disable+0x5a>
{
   16868:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1686a:	4b17      	ldr	r3, [pc, #92]	; (168c8 <hal_spi_disable+0x64>)
   1686c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   16870:	b33c      	cbz	r4, 168c2 <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   16872:	7823      	ldrb	r3, [r4, #0]
   16874:	b9ab      	cbnz	r3, 168a2 <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   16876:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   16878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1687c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   16880:	7863      	ldrb	r3, [r4, #1]
   16882:	b943      	cbnz	r3, 16896 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   16884:	2300      	movs	r3, #0
   16886:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1688a:	2000      	movs	r0, #0
   1688c:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   1688e:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   16890:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   16892:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   16894:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   16896:	4628      	mov	r0, r5
   16898:	f7ff fea6 	bl	165e8 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   1689c:	2300      	movs	r3, #0
   1689e:	7063      	strb	r3, [r4, #1]
   168a0:	e7f0      	b.n	16884 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   168a2:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   168a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   168a8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   168ac:	2300      	movs	r3, #0
   168ae:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   168b2:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   168b6:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   168ba:	70e3      	strb	r3, [r4, #3]
   168bc:	e7e5      	b.n	1688a <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   168be:	2016      	movs	r0, #22
}
   168c0:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   168c2:	2016      	movs	r0, #22
    return rc;
   168c4:	e7e6      	b.n	16894 <hal_spi_disable+0x30>
   168c6:	bf00      	nop
   168c8:	0001e378 	.word	0x0001e378

000168cc <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   168cc:	2802      	cmp	r0, #2
   168ce:	dc1d      	bgt.n	1690c <hal_spi_init+0x40>
{
   168d0:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   168d2:	4b13      	ldr	r3, [pc, #76]	; (16920 <hal_spi_init+0x54>)
   168d4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   168d8:	b1d4      	cbz	r4, 16910 <hal_spi_init+0x44>
    if (cfg == NULL) {
   168da:	b1d9      	cbz	r1, 16914 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   168dc:	2a01      	cmp	r2, #1
   168de:	d81b      	bhi.n	16918 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   168e0:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   168e2:	b9d8      	cbnz	r0, 1691c <hal_spi_init+0x50>
   168e4:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   168e6:	2303      	movs	r3, #3
   168e8:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   168ea:	b94a      	cbnz	r2, 16900 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   168ec:	4b0d      	ldr	r3, [pc, #52]	; (16924 <hal_spi_init+0x58>)
   168ee:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   168f0:	f7ff ffb8 	bl	16864 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   168f4:	4a0c      	ldr	r2, [pc, #48]	; (16928 <hal_spi_init+0x5c>)
   168f6:	4629      	mov	r1, r5
   168f8:	4620      	mov	r0, r4
   168fa:	f7ff fea5 	bl	16648 <hal_spi_init_master>
   168fe:	e00c      	b.n	1691a <hal_spi_init+0x4e>
            assert(0);
   16900:	2300      	movs	r3, #0
   16902:	461a      	mov	r2, r3
   16904:	4619      	mov	r1, r3
   16906:	4618      	mov	r0, r3
   16908:	f000 f952 	bl	16bb0 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1690c:	2016      	movs	r0, #22
}
   1690e:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   16910:	2016      	movs	r0, #22
   16912:	e002      	b.n	1691a <hal_spi_init+0x4e>
    rc = EINVAL;
   16914:	2016      	movs	r0, #22
   16916:	e000      	b.n	1691a <hal_spi_init+0x4e>
   16918:	2016      	movs	r0, #22
}
   1691a:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   1691c:	2016      	movs	r0, #22
    return (rc);
   1691e:	e7fc      	b.n	1691a <hal_spi_init+0x4e>
   16920:	0001e378 	.word	0x0001e378
   16924:	40003000 	.word	0x40003000
   16928:	000165d1 	.word	0x000165d1

0001692c <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1692c:	2802      	cmp	r0, #2
   1692e:	dc0a      	bgt.n	16946 <hal_spi_set_txrx_cb+0x1a>
   16930:	4b08      	ldr	r3, [pc, #32]	; (16954 <hal_spi_set_txrx_cb+0x28>)
   16932:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   16936:	b143      	cbz	r3, 1694a <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   16938:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1693a:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   1693e:	b930      	cbnz	r0, 1694e <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   16940:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   16942:	625a      	str	r2, [r3, #36]	; 0x24
   16944:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   16946:	2016      	movs	r0, #22
   16948:	4770      	bx	lr
   1694a:	2016      	movs	r0, #22
   1694c:	4770      	bx	lr
        rc = -1;
   1694e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   16952:	4770      	bx	lr
   16954:	0001e378 	.word	0x0001e378

00016958 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   16958:	2b00      	cmp	r3, #0
   1695a:	d046      	beq.n	169ea <hal_spi_txrx+0x92>
{
   1695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1695e:	460d      	mov	r5, r1
   16960:	4617      	mov	r7, r2
   16962:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   16964:	2802      	cmp	r0, #2
   16966:	dc42      	bgt.n	169ee <hal_spi_txrx+0x96>
   16968:	4b25      	ldr	r3, [pc, #148]	; (16a00 <hal_spi_txrx+0xa8>)
   1696a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1696e:	2b00      	cmp	r3, #0
   16970:	d03f      	beq.n	169f2 <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   16972:	781a      	ldrb	r2, [r3, #0]
   16974:	2a00      	cmp	r2, #0
   16976:	d13e      	bne.n	169f6 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   16978:	2900      	cmp	r1, #0
   1697a:	d03e      	beq.n	169fa <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   1697c:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   1697e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   16982:	2b07      	cmp	r3, #7
   16984:	d004      	beq.n	16990 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   16986:	b95b      	cbnz	r3, 169a0 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   16988:	2301      	movs	r3, #1
   1698a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1698e:	e007      	b.n	169a0 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   16990:	f7ff ff68 	bl	16864 <hal_spi_disable>
   16994:	e7f8      	b.n	16988 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   16996:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1699a:	2300      	movs	r3, #0
   1699c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   169a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   169a4:	2b00      	cmp	r3, #0
   169a6:	d1f6      	bne.n	16996 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   169a8:	782b      	ldrb	r3, [r5, #0]
   169aa:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   169ae:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   169b0:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   169b2:	2200      	movs	r2, #0
   169b4:	e00d      	b.n	169d2 <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   169b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   169ba:	2b00      	cmp	r3, #0
   169bc:	d0fb      	beq.n	169b6 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   169be:	2300      	movs	r3, #0
   169c0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   169c4:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   169c8:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   169ca:	b10f      	cbz	r7, 169d0 <hal_spi_txrx+0x78>
                *rxd = rxval;
   169cc:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   169d0:	3201      	adds	r2, #1
   169d2:	42b2      	cmp	r2, r6
   169d4:	da07      	bge.n	169e6 <hal_spi_txrx+0x8e>
            if (txcnt) {
   169d6:	2900      	cmp	r1, #0
   169d8:	d0ed      	beq.n	169b6 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   169da:	786b      	ldrb	r3, [r5, #1]
   169dc:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   169e0:	3901      	subs	r1, #1
                ++txd;
   169e2:	3501      	adds	r5, #1
   169e4:	e7e7      	b.n	169b6 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   169e6:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   169e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   169ea:	2016      	movs	r0, #22
}
   169ec:	4770      	bx	lr
    return rc;
   169ee:	2016      	movs	r0, #22
   169f0:	e7fa      	b.n	169e8 <hal_spi_txrx+0x90>
   169f2:	2016      	movs	r0, #22
   169f4:	e7f8      	b.n	169e8 <hal_spi_txrx+0x90>
   169f6:	2016      	movs	r0, #22
   169f8:	e7f6      	b.n	169e8 <hal_spi_txrx+0x90>
   169fa:	2016      	movs	r0, #22
   169fc:	e7f4      	b.n	169e8 <hal_spi_txrx+0x90>
   169fe:	bf00      	nop
   16a00:	0001e378 	.word	0x0001e378

00016a04 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   16a04:	2802      	cmp	r0, #2
   16a06:	dc57      	bgt.n	16ab8 <hal_spi_txrx_noblock+0xb4>
{
   16a08:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   16a0a:	4c35      	ldr	r4, [pc, #212]	; (16ae0 <hal_spi_txrx_noblock+0xdc>)
   16a0c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   16a10:	2800      	cmp	r0, #0
   16a12:	d053      	beq.n	16abc <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   16a14:	6a04      	ldr	r4, [r0, #32]
   16a16:	2c00      	cmp	r4, #0
   16a18:	d052      	beq.n	16ac0 <hal_spi_txrx_noblock+0xbc>
   16a1a:	2b00      	cmp	r3, #0
   16a1c:	d052      	beq.n	16ac4 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   16a1e:	7804      	ldrb	r4, [r0, #0]
   16a20:	2c00      	cmp	r4, #0
   16a22:	d137      	bne.n	16a94 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   16a24:	2900      	cmp	r1, #0
   16a26:	d050      	beq.n	16aca <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   16a28:	7844      	ldrb	r4, [r0, #1]
   16a2a:	2c00      	cmp	r4, #0
   16a2c:	d14f      	bne.n	16ace <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   16a2e:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   16a30:	2540      	movs	r5, #64	; 0x40
   16a32:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   16a36:	2501      	movs	r5, #1
   16a38:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   16a3a:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   16a3e:	2d07      	cmp	r5, #7
   16a40:	d005      	beq.n	16a4e <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   16a42:	2500      	movs	r5, #0
   16a44:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   16a48:	2507      	movs	r5, #7
   16a4a:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   16a4e:	2500      	movs	r5, #0
   16a50:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   16a52:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   16a54:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   16a56:	2bff      	cmp	r3, #255	; 0xff
   16a58:	bfa8      	it	ge
   16a5a:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   16a5c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   16a60:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   16a64:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   16a66:	b172      	cbz	r2, 16a86 <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   16a68:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   16a6c:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   16a70:	2000      	movs	r0, #0
   16a72:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   16a76:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   16a7a:	2301      	movs	r3, #1
   16a7c:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   16a7e:	2340      	movs	r3, #64	; 0x40
   16a80:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   16a84:	e01f      	b.n	16ac6 <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   16a86:	3002      	adds	r0, #2
   16a88:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   16a8c:	2301      	movs	r3, #1
   16a8e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   16a92:	e7ed      	b.n	16a70 <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   16a94:	b161      	cbz	r1, 16ab0 <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   16a96:	2bff      	cmp	r3, #255	; 0xff
   16a98:	dc1c      	bgt.n	16ad4 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   16a9a:	78c4      	ldrb	r4, [r0, #3]
   16a9c:	b9e4      	cbnz	r4, 16ad8 <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   16a9e:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   16aa0:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   16aa2:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   16aa4:	2301      	movs	r3, #1
   16aa6:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   16aa8:	6902      	ldr	r2, [r0, #16]
   16aaa:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   16aac:	2000      	movs	r0, #0
   16aae:	e00a      	b.n	16ac6 <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   16ab0:	2a00      	cmp	r2, #0
   16ab2:	d1f0      	bne.n	16a96 <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   16ab4:	2016      	movs	r0, #22
   16ab6:	e006      	b.n	16ac6 <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   16ab8:	2016      	movs	r0, #22

err:
    return rc;
}
   16aba:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   16abc:	2016      	movs	r0, #22
   16abe:	e002      	b.n	16ac6 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   16ac0:	2016      	movs	r0, #22
   16ac2:	e000      	b.n	16ac6 <hal_spi_txrx_noblock+0xc2>
   16ac4:	2016      	movs	r0, #22
}
   16ac6:	bc30      	pop	{r4, r5}
   16ac8:	4770      	bx	lr
    rc = EINVAL;
   16aca:	2016      	movs	r0, #22
   16acc:	e7fb      	b.n	16ac6 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   16ace:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16ad2:	e7f8      	b.n	16ac6 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   16ad4:	2016      	movs	r0, #22
   16ad6:	e7f6      	b.n	16ac6 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   16ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16adc:	e7f3      	b.n	16ac6 <hal_spi_txrx_noblock+0xc2>
   16ade:	bf00      	nop
   16ae0:	0001e378 	.word	0x0001e378

00016ae4 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   16ae4:	b508      	push	{r3, lr}
    assert(0);
   16ae6:	2300      	movs	r3, #0
   16ae8:	461a      	mov	r2, r3
   16aea:	4619      	mov	r1, r3
   16aec:	4618      	mov	r0, r3
   16aee:	f000 f85f 	bl	16bb0 <__assert_func>
	...

00016af4 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   16af4:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   16af6:	4b06      	ldr	r3, [pc, #24]	; (16b10 <nrf52_wdt_irq_handler+0x1c>)
   16af8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   16afc:	f013 0f01 	tst.w	r3, #1
   16b00:	d100      	bne.n	16b04 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   16b02:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   16b04:	4b02      	ldr	r3, [pc, #8]	; (16b10 <nrf52_wdt_irq_handler+0x1c>)
   16b06:	2200      	movs	r2, #0
   16b08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   16b0c:	f7ff ffea 	bl	16ae4 <nrf52_hal_wdt_default_handler>
   16b10:	40010000 	.word	0x40010000

00016b14 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   16b14:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   16b16:	4b17      	ldr	r3, [pc, #92]	; (16b74 <hal_watchdog_init+0x60>)
   16b18:	2201      	movs	r2, #1
   16b1a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   16b1e:	4b16      	ldr	r3, [pc, #88]	; (16b78 <hal_watchdog_init+0x64>)
   16b20:	4298      	cmp	r0, r3
   16b22:	d821      	bhi.n	16b68 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   16b24:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   16b28:	0153      	lsls	r3, r2, #5
   16b2a:	4a14      	ldr	r2, [pc, #80]	; (16b7c <hal_watchdog_init+0x68>)
   16b2c:	fba2 2303 	umull	r2, r3, r2, r3
   16b30:	08db      	lsrs	r3, r3, #3
   16b32:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   16b36:	4b0f      	ldr	r3, [pc, #60]	; (16b74 <hal_watchdog_init+0x60>)
   16b38:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   16b3c:	4a10      	ldr	r2, [pc, #64]	; (16b80 <hal_watchdog_init+0x6c>)
   16b3e:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   16b40:	4910      	ldr	r1, [pc, #64]	; (16b84 <hal_watchdog_init+0x70>)
   16b42:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   16b46:	4a10      	ldr	r2, [pc, #64]	; (16b88 <hal_watchdog_init+0x74>)
   16b48:	21e0      	movs	r1, #224	; 0xe0
   16b4a:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16b4e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   16b52:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16b56:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   16b58:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   16b5c:	f042 0201 	orr.w	r2, r2, #1
   16b60:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   16b64:	2000      	movs	r0, #0
   16b66:	bd08      	pop	{r3, pc}
        assert(0);
   16b68:	2300      	movs	r3, #0
   16b6a:	461a      	mov	r2, r3
   16b6c:	4619      	mov	r1, r3
   16b6e:	4618      	mov	r0, r3
   16b70:	f000 f81e 	bl	16bb0 <__assert_func>
   16b74:	40010000 	.word	0x40010000
   16b78:	02aaaaaa 	.word	0x02aaaaaa
   16b7c:	10624dd3 	.word	0x10624dd3
   16b80:	e000ed00 	.word	0xe000ed00
   16b84:	00016af5 	.word	0x00016af5
   16b88:	e000e100 	.word	0xe000e100

00016b8c <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   16b8c:	4b02      	ldr	r3, [pc, #8]	; (16b98 <hal_watchdog_enable+0xc>)
   16b8e:	2201      	movs	r2, #1
   16b90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   16b94:	601a      	str	r2, [r3, #0]
}
   16b96:	4770      	bx	lr
   16b98:	40010000 	.word	0x40010000

00016b9c <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   16b9c:	4b02      	ldr	r3, [pc, #8]	; (16ba8 <hal_watchdog_tickle+0xc>)
   16b9e:	4a03      	ldr	r2, [pc, #12]	; (16bac <hal_watchdog_tickle+0x10>)
   16ba0:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   16ba4:	4770      	bx	lr
   16ba6:	bf00      	nop
   16ba8:	40010000 	.word	0x40010000
   16bac:	6e524635 	.word	0x6e524635

00016bb0 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   16bb0:	b508      	push	{r3, lr}
   16bb2:	4675      	mov	r5, lr
   16bb4:	4604      	mov	r4, r0
   16bb6:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   16bb8:	f001 fa90 	bl	180dc <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   16bbc:	f7ff f905 	bl	15dca <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   16bc0:	b18c      	cbz	r4, 16be6 <__assert_func+0x36>
   16bc2:	4633      	mov	r3, r6
   16bc4:	4622      	mov	r2, r4
   16bc6:	4629      	mov	r1, r5
   16bc8:	4809      	ldr	r0, [pc, #36]	; (16bf0 <__assert_func+0x40>)
   16bca:	f7ff f929 	bl	15e20 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   16bce:	f7f1 fad9 	bl	8184 <hal_debugger_connected>
   16bd2:	b100      	cbz	r0, 16bd6 <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   16bd4:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   16bd6:	4b07      	ldr	r3, [pc, #28]	; (16bf4 <__assert_func+0x44>)
   16bd8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   16bdc:	605a      	str	r2, [r3, #4]
    asm("isb");
   16bde:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   16be2:	f7f1 fad7 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   16be6:	4629      	mov	r1, r5
   16be8:	4803      	ldr	r0, [pc, #12]	; (16bf8 <__assert_func+0x48>)
   16bea:	f7ff f919 	bl	15e20 <console_printf>
   16bee:	e7ee      	b.n	16bce <__assert_func+0x1e>
   16bf0:	0001e394 	.word	0x0001e394
   16bf4:	e000ed00 	.word	0xe000ed00
   16bf8:	0001e384 	.word	0x0001e384

00016bfc <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   16bfc:	b500      	push	{lr}
   16bfe:	b083      	sub	sp, #12
   16c00:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   16c02:	f7ff f8e2 	bl	15dca <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   16c06:	4d1b      	ldr	r5, [pc, #108]	; (16c74 <os_default_irq+0x78>)
   16c08:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   16c0a:	6822      	ldr	r2, [r4, #0]
   16c0c:	f3c1 0108 	ubfx	r1, r1, #0, #9
   16c10:	4819      	ldr	r0, [pc, #100]	; (16c78 <os_default_irq+0x7c>)
   16c12:	f7ff f905 	bl	15e20 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   16c16:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   16c18:	6883      	ldr	r3, [r0, #8]
   16c1a:	6842      	ldr	r2, [r0, #4]
   16c1c:	6801      	ldr	r1, [r0, #0]
   16c1e:	68c0      	ldr	r0, [r0, #12]
   16c20:	9000      	str	r0, [sp, #0]
   16c22:	4816      	ldr	r0, [pc, #88]	; (16c7c <os_default_irq+0x80>)
   16c24:	f7ff f8fc 	bl	15e20 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   16c28:	6923      	ldr	r3, [r4, #16]
   16c2a:	9300      	str	r3, [sp, #0]
   16c2c:	68e3      	ldr	r3, [r4, #12]
   16c2e:	68a2      	ldr	r2, [r4, #8]
   16c30:	6861      	ldr	r1, [r4, #4]
   16c32:	4813      	ldr	r0, [pc, #76]	; (16c80 <os_default_irq+0x84>)
   16c34:	f7ff f8f4 	bl	15e20 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   16c38:	6a23      	ldr	r3, [r4, #32]
   16c3a:	9300      	str	r3, [sp, #0]
   16c3c:	69e3      	ldr	r3, [r4, #28]
   16c3e:	69a2      	ldr	r2, [r4, #24]
   16c40:	6961      	ldr	r1, [r4, #20]
   16c42:	4810      	ldr	r0, [pc, #64]	; (16c84 <os_default_irq+0x88>)
   16c44:	f7ff f8ec 	bl	15e20 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   16c48:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   16c4a:	6983      	ldr	r3, [r0, #24]
   16c4c:	6942      	ldr	r2, [r0, #20]
   16c4e:	6901      	ldr	r1, [r0, #16]
   16c50:	69c0      	ldr	r0, [r0, #28]
   16c52:	9000      	str	r0, [sp, #0]
   16c54:	480c      	ldr	r0, [pc, #48]	; (16c88 <os_default_irq+0x8c>)
   16c56:	f7ff f8e3 	bl	15e20 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   16c5a:	6869      	ldr	r1, [r5, #4]
   16c5c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   16c5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   16c60:	480a      	ldr	r0, [pc, #40]	; (16c8c <os_default_irq+0x90>)
   16c62:	f7ff f8dd 	bl	15e20 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   16c66:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   16c68:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   16c6a:	4809      	ldr	r0, [pc, #36]	; (16c90 <os_default_irq+0x94>)
   16c6c:	f7ff f8d8 	bl	15e20 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   16c70:	f7f1 fa90 	bl	8194 <hal_system_reset>
   16c74:	e000ed00 	.word	0xe000ed00
   16c78:	0001e3ac 	.word	0x0001e3ac
   16c7c:	0001e3e0 	.word	0x0001e3e0
   16c80:	0001e414 	.word	0x0001e414
   16c84:	0001e448 	.word	0x0001e448
   16c88:	0001e47c 	.word	0x0001e47c
   16c8c:	0001e4b0 	.word	0x0001e4b0
   16c90:	0001e4d8 	.word	0x0001e4d8

00016c94 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   16c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   16c96:	f7ff ff81 	bl	16b9c <hal_watchdog_tickle>
    sanity_last = 0;
   16c9a:	2500      	movs	r5, #0
   16c9c:	e00b      	b.n	16cb6 <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   16c9e:	f000 fec7 	bl	17a30 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   16ca2:	f7ff ff7b 	bl	16b9c <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   16ca6:	4625      	mov	r5, r4
   16ca8:	e011      	b.n	16cce <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   16caa:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   16cac:	f002 f842 	bl	18d34 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   16cb0:	4638      	mov	r0, r7
   16cb2:	f001 fa19 	bl	180e8 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   16cb6:	4a14      	ldr	r2, [pc, #80]	; (16d08 <os_idle_task+0x74>)
   16cb8:	6813      	ldr	r3, [r2, #0]
   16cba:	3301      	adds	r3, #1
   16cbc:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   16cbe:	f001 f995 	bl	17fec <os_time_get>
   16cc2:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   16cc4:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   16cc8:	1ac3      	subs	r3, r0, r3
   16cca:	2b00      	cmp	r3, #0
   16ccc:	dce7      	bgt.n	16c9e <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   16cce:	f001 fa05 	bl	180dc <os_arch_save_sr>
   16cd2:	4607      	mov	r7, r0
        now = os_time_get();
   16cd4:	f001 f98a 	bl	17fec <os_time_get>
   16cd8:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   16cda:	f000 ffd7 	bl	17c8c <os_sched_wakeup_ticks>
   16cde:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   16ce0:	4630      	mov	r0, r6
   16ce2:	f000 f975 	bl	16fd0 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   16ce6:	42a0      	cmp	r0, r4
   16ce8:	bf28      	it	cs
   16cea:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   16cec:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   16cf0:	1b9b      	subs	r3, r3, r6
   16cf2:	4298      	cmp	r0, r3
   16cf4:	bf28      	it	cs
   16cf6:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   16cf8:	280b      	cmp	r0, #11
   16cfa:	d9d6      	bls.n	16caa <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   16cfc:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   16d00:	d9d4      	bls.n	16cac <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   16d02:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   16d06:	e7d1      	b.n	16cac <os_idle_task+0x18>
   16d08:	2000b62c 	.word	0x2000b62c

00016d0c <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   16d0c:	b508      	push	{r3, lr}
   16d0e:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   16d10:	2100      	movs	r1, #0
   16d12:	4608      	mov	r0, r1
   16d14:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   16d16:	2300      	movs	r3, #0
   16d18:	461a      	mov	r2, r3
   16d1a:	4619      	mov	r1, r3
   16d1c:	4618      	mov	r0, r3
   16d1e:	f7ff ff47 	bl	16bb0 <__assert_func>
	...

00016d24 <os_started>:
}
   16d24:	4b01      	ldr	r3, [pc, #4]	; (16d2c <os_started+0x8>)
   16d26:	6818      	ldr	r0, [r3, #0]
   16d28:	4770      	bx	lr
   16d2a:	bf00      	nop
   16d2c:	2000b628 	.word	0x2000b628

00016d30 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   16d30:	b500      	push	{lr}
   16d32:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   16d34:	2340      	movs	r3, #64	; 0x40
   16d36:	9303      	str	r3, [sp, #12]
   16d38:	4b15      	ldr	r3, [pc, #84]	; (16d90 <os_init_idle_task+0x60>)
   16d3a:	9302      	str	r3, [sp, #8]
   16d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16d40:	9301      	str	r3, [sp, #4]
   16d42:	23ff      	movs	r3, #255	; 0xff
   16d44:	9300      	str	r3, [sp, #0]
   16d46:	2300      	movs	r3, #0
   16d48:	4a12      	ldr	r2, [pc, #72]	; (16d94 <os_init_idle_task+0x64>)
   16d4a:	4913      	ldr	r1, [pc, #76]	; (16d98 <os_init_idle_task+0x68>)
   16d4c:	4813      	ldr	r0, [pc, #76]	; (16d9c <os_init_idle_task+0x6c>)
   16d4e:	f001 f88d 	bl	17e6c <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   16d52:	b950      	cbnz	r0, 16d6a <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   16d54:	f000 fea2 	bl	17a9c <os_sanity_init>
    assert(rc == 0);
   16d58:	b968      	cbnz	r0, 16d76 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   16d5a:	f247 5030 	movw	r0, #30000	; 0x7530
   16d5e:	f7ff fed9 	bl	16b14 <hal_watchdog_init>
    assert(rc == 0);
   16d62:	b970      	cbnz	r0, 16d82 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   16d64:	b005      	add	sp, #20
   16d66:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   16d6a:	2300      	movs	r3, #0
   16d6c:	461a      	mov	r2, r3
   16d6e:	4619      	mov	r1, r3
   16d70:	4618      	mov	r0, r3
   16d72:	f7ff ff1d 	bl	16bb0 <__assert_func>
    assert(rc == 0);
   16d76:	2300      	movs	r3, #0
   16d78:	461a      	mov	r2, r3
   16d7a:	4619      	mov	r1, r3
   16d7c:	4618      	mov	r0, r3
   16d7e:	f7ff ff17 	bl	16bb0 <__assert_func>
    assert(rc == 0);
   16d82:	2300      	movs	r3, #0
   16d84:	461a      	mov	r2, r3
   16d86:	4619      	mov	r1, r3
   16d88:	4618      	mov	r0, r3
   16d8a:	f7ff ff11 	bl	16bb0 <__assert_func>
   16d8e:	bf00      	nop
   16d90:	20002710 	.word	0x20002710
   16d94:	00016c95 	.word	0x00016c95
   16d98:	0001e4fc 	.word	0x0001e4fc
   16d9c:	2000b588 	.word	0x2000b588

00016da0 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   16da0:	b510      	push	{r4, lr}
   16da2:	b084      	sub	sp, #16
   16da4:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   16da6:	4b24      	ldr	r3, [pc, #144]	; (16e38 <os_init+0x98>)
   16da8:	2200      	movs	r2, #0
   16daa:	601a      	str	r2, [r3, #0]
   16dac:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   16dae:	4b23      	ldr	r3, [pc, #140]	; (16e3c <os_init+0x9c>)
   16db0:	601a      	str	r2, [r3, #0]
   16db2:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   16db4:	f000 faba 	bl	1732c <os_eventq_dflt_get>
   16db8:	f000 fa0e 	bl	171d8 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   16dbc:	f000 fa04 	bl	171c8 <os_dev_reset>

    err = os_arch_os_init();
   16dc0:	f001 f9c6 	bl	18150 <os_arch_os_init>
    assert(err == OS_OK);
   16dc4:	bb00      	cbnz	r0, 16e08 <os_init+0x68>

    if (main_fn) {
   16dc6:	b18c      	cbz	r4, 16dec <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   16dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   16dcc:	9303      	str	r3, [sp, #12]
   16dce:	4b1c      	ldr	r3, [pc, #112]	; (16e40 <os_init+0xa0>)
   16dd0:	9302      	str	r3, [sp, #8]
   16dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16dd6:	9301      	str	r3, [sp, #4]
   16dd8:	237f      	movs	r3, #127	; 0x7f
   16dda:	9300      	str	r3, [sp, #0]
   16ddc:	4623      	mov	r3, r4
   16dde:	4a19      	ldr	r2, [pc, #100]	; (16e44 <os_init+0xa4>)
   16de0:	4919      	ldr	r1, [pc, #100]	; (16e48 <os_init+0xa8>)
   16de2:	481a      	ldr	r0, [pc, #104]	; (16e4c <os_init+0xac>)
   16de4:	f001 f842 	bl	17e6c <os_task_init>
   16de8:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   16dea:	b998      	cbnz	r0, 16e14 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   16dec:	f001 fe72 	bl	18ad4 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   16df0:	2001      	movs	r0, #1
   16df2:	f000 f985 	bl	17100 <os_dev_initialize_all>
   16df6:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   16df8:	b990      	cbnz	r0, 16e20 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   16dfa:	2002      	movs	r0, #2
   16dfc:	f000 f980 	bl	17100 <os_dev_initialize_all>
   16e00:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   16e02:	b998      	cbnz	r0, 16e2c <os_init+0x8c>
}
   16e04:	b004      	add	sp, #16
   16e06:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   16e08:	2300      	movs	r3, #0
   16e0a:	461a      	mov	r2, r3
   16e0c:	4619      	mov	r1, r3
   16e0e:	4618      	mov	r0, r3
   16e10:	f7ff fece 	bl	16bb0 <__assert_func>
        assert(err == 0);
   16e14:	2300      	movs	r3, #0
   16e16:	461a      	mov	r2, r3
   16e18:	4619      	mov	r1, r3
   16e1a:	4618      	mov	r0, r3
   16e1c:	f7ff fec8 	bl	16bb0 <__assert_func>
    assert(err == OS_OK);
   16e20:	2300      	movs	r3, #0
   16e22:	461a      	mov	r2, r3
   16e24:	4619      	mov	r1, r3
   16e26:	4618      	mov	r0, r3
   16e28:	f7ff fec2 	bl	16bb0 <__assert_func>
    assert(err == OS_OK);
   16e2c:	2300      	movs	r3, #0
   16e2e:	461a      	mov	r2, r3
   16e30:	4619      	mov	r1, r3
   16e32:	4618      	mov	r0, r3
   16e34:	f7ff febc 	bl	16bb0 <__assert_func>
   16e38:	2000b630 	.word	0x2000b630
   16e3c:	2000b658 	.word	0x2000b658
   16e40:	20002810 	.word	0x20002810
   16e44:	00016d0d 	.word	0x00016d0d
   16e48:	0001e4f4 	.word	0x0001e4f4
   16e4c:	2000b5d8 	.word	0x2000b5d8

00016e50 <os_start>:

void
os_start(void)
{
   16e50:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   16e52:	f7ff fe9b 	bl	16b8c <hal_watchdog_enable>

    err = os_arch_os_start();
   16e56:	f001 f9db 	bl	18210 <os_arch_os_start>
    assert(err == OS_OK);
   16e5a:	b900      	cbnz	r0, 16e5e <os_start+0xe>
#else
    assert(0);
#endif
}
   16e5c:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   16e5e:	2300      	movs	r3, #0
   16e60:	461a      	mov	r2, r3
   16e62:	4619      	mov	r1, r3
   16e64:	4618      	mov	r0, r3
   16e66:	f7ff fea3 	bl	16bb0 <__assert_func>
	...

00016e6c <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   16e6c:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16e6e:	4b0c      	ldr	r3, [pc, #48]	; (16ea0 <os_pkg_init+0x34>)
   16e70:	781b      	ldrb	r3, [r3, #0]
   16e72:	b14b      	cbz	r3, 16e88 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   16e74:	2003      	movs	r0, #3
   16e76:	f000 f943 	bl	17100 <os_dev_initialize_all>
   16e7a:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   16e7c:	b948      	cbnz	r0, 16e92 <os_pkg_init+0x26>

    os_mempool_module_init();
   16e7e:	f000 fc25 	bl	176cc <os_mempool_module_init>
    os_msys_init();
   16e82:	f000 fcad 	bl	177e0 <os_msys_init>
}
   16e86:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   16e88:	461a      	mov	r2, r3
   16e8a:	4619      	mov	r1, r3
   16e8c:	4618      	mov	r0, r3
   16e8e:	f7ff fe8f 	bl	16bb0 <__assert_func>
    assert(err == OS_OK);
   16e92:	2300      	movs	r3, #0
   16e94:	461a      	mov	r2, r3
   16e96:	4619      	mov	r1, r3
   16e98:	4618      	mov	r0, r3
   16e9a:	f7ff fe89 	bl	16bb0 <__assert_func>
   16e9e:	bf00      	nop
   16ea0:	2000b55c 	.word	0x2000b55c

00016ea4 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   16ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16ea6:	4604      	mov	r4, r0
   16ea8:	460d      	mov	r5, r1
   16eaa:	4617      	mov	r7, r2
   16eac:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   16eae:	2220      	movs	r2, #32
   16eb0:	2100      	movs	r1, #0
   16eb2:	f001 fa80 	bl	183b6 <memset>
    c->c_ev.ev_cb = ev_cb;
   16eb6:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   16eb8:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   16eba:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   16ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00016ec0 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   16ec0:	b538      	push	{r3, r4, r5, lr}
   16ec2:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   16ec4:	f001 f90a 	bl	180dc <os_arch_save_sr>
   16ec8:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   16eca:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   16ecc:	b13b      	cbz	r3, 16ede <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   16ece:	69a2      	ldr	r2, [r4, #24]
   16ed0:	b172      	cbz	r2, 16ef0 <os_callout_stop+0x30>
   16ed2:	61d3      	str	r3, [r2, #28]
   16ed4:	69e3      	ldr	r3, [r4, #28]
   16ed6:	69a2      	ldr	r2, [r4, #24]
   16ed8:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   16eda:	2300      	movs	r3, #0
   16edc:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   16ede:	6920      	ldr	r0, [r4, #16]
   16ee0:	b110      	cbz	r0, 16ee8 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   16ee2:	4621      	mov	r1, r4
   16ee4:	f000 fa02 	bl	172ec <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   16ee8:	4628      	mov	r0, r5
   16eea:	f001 f8fd 	bl	180e8 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   16eee:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   16ef0:	4a01      	ldr	r2, [pc, #4]	; (16ef8 <os_callout_stop+0x38>)
   16ef2:	6053      	str	r3, [r2, #4]
   16ef4:	e7ee      	b.n	16ed4 <os_callout_stop+0x14>
   16ef6:	bf00      	nop
   16ef8:	2000b630 	.word	0x2000b630

00016efc <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   16efc:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   16efe:	6903      	ldr	r3, [r0, #16]
   16f00:	b1c3      	cbz	r3, 16f34 <os_callout_reset+0x38>
   16f02:	4605      	mov	r5, r0
   16f04:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   16f06:	2900      	cmp	r1, #0
   16f08:	db2f      	blt.n	16f6a <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   16f0a:	f001 f8e7 	bl	180dc <os_arch_save_sr>
   16f0e:	4606      	mov	r6, r0

    os_callout_stop(c);
   16f10:	4628      	mov	r0, r5
   16f12:	f7ff ffd5 	bl	16ec0 <os_callout_stop>

    if (ticks == 0) {
   16f16:	b904      	cbnz	r4, 16f1a <os_callout_reset+0x1e>
        ticks = 1;
   16f18:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   16f1a:	f001 f867 	bl	17fec <os_time_get>
   16f1e:	4420      	add	r0, r4
   16f20:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   16f22:	4b13      	ldr	r3, [pc, #76]	; (16f70 <os_callout_reset+0x74>)
   16f24:	681b      	ldr	r3, [r3, #0]
   16f26:	b153      	cbz	r3, 16f3e <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   16f28:	695a      	ldr	r2, [r3, #20]
   16f2a:	1a82      	subs	r2, r0, r2
   16f2c:	2a00      	cmp	r2, #0
   16f2e:	db06      	blt.n	16f3e <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   16f30:	699b      	ldr	r3, [r3, #24]
   16f32:	e7f8      	b.n	16f26 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   16f34:	461a      	mov	r2, r3
   16f36:	4619      	mov	r1, r3
   16f38:	4618      	mov	r0, r3
   16f3a:	f7ff fe39 	bl	16bb0 <__assert_func>
            break;
        }
    }

    if (entry) {
   16f3e:	b15b      	cbz	r3, 16f58 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   16f40:	69da      	ldr	r2, [r3, #28]
   16f42:	61ea      	str	r2, [r5, #28]
   16f44:	61ab      	str	r3, [r5, #24]
   16f46:	69da      	ldr	r2, [r3, #28]
   16f48:	6015      	str	r5, [r2, #0]
   16f4a:	3518      	adds	r5, #24
   16f4c:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   16f4e:	4630      	mov	r0, r6
   16f50:	f001 f8ca 	bl	180e8 <os_arch_restore_sr>

    ret = OS_OK;
   16f54:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   16f56:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   16f58:	2300      	movs	r3, #0
   16f5a:	61ab      	str	r3, [r5, #24]
   16f5c:	4b04      	ldr	r3, [pc, #16]	; (16f70 <os_callout_reset+0x74>)
   16f5e:	685a      	ldr	r2, [r3, #4]
   16f60:	61ea      	str	r2, [r5, #28]
   16f62:	6015      	str	r5, [r2, #0]
   16f64:	3518      	adds	r5, #24
   16f66:	605d      	str	r5, [r3, #4]
   16f68:	e7f1      	b.n	16f4e <os_callout_reset+0x52>
        ret = OS_EINVAL;
   16f6a:	2002      	movs	r0, #2
    return ret;
   16f6c:	e7f3      	b.n	16f56 <os_callout_reset+0x5a>
   16f6e:	bf00      	nop
   16f70:	2000b630 	.word	0x2000b630

00016f74 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   16f74:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   16f76:	f001 f839 	bl	17fec <os_time_get>
   16f7a:	4605      	mov	r5, r0
   16f7c:	e00f      	b.n	16f9e <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   16f7e:	69e2      	ldr	r2, [r4, #28]
   16f80:	4b12      	ldr	r3, [pc, #72]	; (16fcc <os_callout_tick+0x58>)
   16f82:	605a      	str	r2, [r3, #4]
   16f84:	69e3      	ldr	r3, [r4, #28]
   16f86:	69a2      	ldr	r2, [r4, #24]
   16f88:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   16f8a:	2300      	movs	r3, #0
   16f8c:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   16f8e:	f001 f8ab 	bl	180e8 <os_arch_restore_sr>

        if (c) {
   16f92:	b1d4      	cbz	r4, 16fca <os_callout_tick+0x56>
            if (c->c_evq) {
   16f94:	6920      	ldr	r0, [r4, #16]
   16f96:	b9a0      	cbnz	r0, 16fc2 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   16f98:	6863      	ldr	r3, [r4, #4]
   16f9a:	4620      	mov	r0, r4
   16f9c:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   16f9e:	f001 f89d 	bl	180dc <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   16fa2:	4b0a      	ldr	r3, [pc, #40]	; (16fcc <os_callout_tick+0x58>)
   16fa4:	681c      	ldr	r4, [r3, #0]
        if (c) {
   16fa6:	2c00      	cmp	r4, #0
   16fa8:	d0f1      	beq.n	16f8e <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   16faa:	6963      	ldr	r3, [r4, #20]
   16fac:	1aeb      	subs	r3, r5, r3
   16fae:	2b00      	cmp	r3, #0
   16fb0:	db05      	blt.n	16fbe <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   16fb2:	69a3      	ldr	r3, [r4, #24]
   16fb4:	2b00      	cmp	r3, #0
   16fb6:	d0e2      	beq.n	16f7e <os_callout_tick+0xa>
   16fb8:	69e2      	ldr	r2, [r4, #28]
   16fba:	61da      	str	r2, [r3, #28]
   16fbc:	e7e2      	b.n	16f84 <os_callout_tick+0x10>
                c = NULL;
   16fbe:	2400      	movs	r4, #0
   16fc0:	e7e5      	b.n	16f8e <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   16fc2:	4621      	mov	r1, r4
   16fc4:	f000 f915 	bl	171f2 <os_eventq_put>
   16fc8:	e7e9      	b.n	16f9e <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   16fca:	bd38      	pop	{r3, r4, r5, pc}
   16fcc:	2000b630 	.word	0x2000b630

00016fd0 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   16fd0:	b510      	push	{r4, lr}
   16fd2:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   16fd4:	f001 f88b 	bl	180ee <os_arch_in_critical>
   16fd8:	b130      	cbz	r0, 16fe8 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   16fda:	4b09      	ldr	r3, [pc, #36]	; (17000 <os_callout_wakeup_ticks+0x30>)
   16fdc:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   16fde:	b15b      	cbz	r3, 16ff8 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   16fe0:	6958      	ldr	r0, [r3, #20]
   16fe2:	1b00      	subs	r0, r0, r4
   16fe4:	d406      	bmi.n	16ff4 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   16fe6:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   16fe8:	2300      	movs	r3, #0
   16fea:	461a      	mov	r2, r3
   16fec:	4619      	mov	r1, r3
   16fee:	4618      	mov	r0, r3
   16ff0:	f7ff fdde 	bl	16bb0 <__assert_func>
            rt = 0;     /* callout time is in the past */
   16ff4:	2000      	movs	r0, #0
   16ff6:	e7f6      	b.n	16fe6 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   16ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   16ffc:	e7f3      	b.n	16fe6 <os_callout_wakeup_ticks+0x16>
   16ffe:	bf00      	nop
   17000:	2000b630 	.word	0x2000b630

00017004 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   17004:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   17006:	4601      	mov	r1, r0
   17008:	2000      	movs	r0, #0
   1700a:	f002 f84d 	bl	190a8 <hal_timer_config>
    return rc;
}
   1700e:	bd08      	pop	{r3, pc}

00017010 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   17010:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   17012:	2000      	movs	r0, #0
   17014:	f002 f8c4 	bl	191a0 <hal_timer_read>
    return cpu_time;
}
   17018:	bd08      	pop	{r3, pc}
	...

0001701c <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   1701c:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   1701e:	4b15      	ldr	r3, [pc, #84]	; (17074 <os_dev_add+0x58>)
   17020:	681d      	ldr	r5, [r3, #0]
   17022:	b115      	cbz	r5, 1702a <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   17024:	462b      	mov	r3, r5
    prev_dev = NULL;
   17026:	2400      	movs	r4, #0
   17028:	e008      	b.n	1703c <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1702a:	4603      	mov	r3, r0
   1702c:	f843 5f20 	str.w	r5, [r3, #32]!
   17030:	4a10      	ldr	r2, [pc, #64]	; (17074 <os_dev_add+0x58>)
   17032:	6053      	str	r3, [r2, #4]
   17034:	6010      	str	r0, [r2, #0]
        return (0);
   17036:	e010      	b.n	1705a <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   17038:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   1703a:	6a1b      	ldr	r3, [r3, #32]
   1703c:	b143      	cbz	r3, 17050 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   1703e:	7e01      	ldrb	r1, [r0, #24]
   17040:	7e1a      	ldrb	r2, [r3, #24]
   17042:	4291      	cmp	r1, r2
   17044:	d304      	bcc.n	17050 <os_dev_add+0x34>
   17046:	d1f7      	bne.n	17038 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   17048:	7e41      	ldrb	r1, [r0, #25]
   1704a:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   1704c:	4291      	cmp	r1, r2
   1704e:	d2f3      	bcs.n	17038 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   17050:	b15c      	cbz	r4, 1706a <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   17052:	6a23      	ldr	r3, [r4, #32]
   17054:	6203      	str	r3, [r0, #32]
   17056:	b11b      	cbz	r3, 17060 <os_dev_add+0x44>
   17058:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   1705a:	2000      	movs	r0, #0
   1705c:	bc30      	pop	{r4, r5}
   1705e:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   17060:	f100 0320 	add.w	r3, r0, #32
   17064:	4a03      	ldr	r2, [pc, #12]	; (17074 <os_dev_add+0x58>)
   17066:	6053      	str	r3, [r2, #4]
   17068:	e7f6      	b.n	17058 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   1706a:	6205      	str	r5, [r0, #32]
   1706c:	4b01      	ldr	r3, [pc, #4]	; (17074 <os_dev_add+0x58>)
   1706e:	6018      	str	r0, [r3, #0]
   17070:	e7f3      	b.n	1705a <os_dev_add+0x3e>
   17072:	bf00      	nop
   17074:	20006810 	.word	0x20006810

00017078 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   17078:	b510      	push	{r4, lr}
   1707a:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   1707c:	6903      	ldr	r3, [r0, #16]
   1707e:	6941      	ldr	r1, [r0, #20]
   17080:	4798      	blx	r3
    if (rc != 0) {
   17082:	4603      	mov	r3, r0
   17084:	b128      	cbz	r0, 17092 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   17086:	7ee2      	ldrb	r2, [r4, #27]
   17088:	f012 0f08 	tst.w	r2, #8
   1708c:	d105      	bne.n	1709a <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   1708e:	2300      	movs	r3, #0
   17090:	e003      	b.n	1709a <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   17092:	7ee2      	ldrb	r2, [r4, #27]
   17094:	f042 0201 	orr.w	r2, r2, #1
   17098:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   1709a:	4618      	mov	r0, r3
   1709c:	bd10      	pop	{r4, pc}

0001709e <os_dev_init>:
    dev->od_name = name;
   1709e:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   170a0:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   170a2:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   170a4:	2300      	movs	r3, #0
   170a6:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   170a8:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   170aa:	9a00      	ldr	r2, [sp, #0]
   170ac:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   170ae:	9a01      	ldr	r2, [sp, #4]
   170b0:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   170b2:	6003      	str	r3, [r0, #0]
   170b4:	6043      	str	r3, [r0, #4]
   170b6:	6083      	str	r3, [r0, #8]
   170b8:	60c3      	str	r3, [r0, #12]
}
   170ba:	4618      	mov	r0, r3
   170bc:	4770      	bx	lr
	...

000170c0 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   170c0:	b530      	push	{r4, r5, lr}
   170c2:	b083      	sub	sp, #12
   170c4:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   170c6:	9c07      	ldr	r4, [sp, #28]
   170c8:	9401      	str	r4, [sp, #4]
   170ca:	9c06      	ldr	r4, [sp, #24]
   170cc:	9400      	str	r4, [sp, #0]
   170ce:	f7ff ffe6 	bl	1709e <os_dev_init>
    if (rc != 0) {
   170d2:	4603      	mov	r3, r0
   170d4:	b110      	cbz	r0, 170dc <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   170d6:	4618      	mov	r0, r3
   170d8:	b003      	add	sp, #12
   170da:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   170dc:	4628      	mov	r0, r5
   170de:	f7ff ff9d 	bl	1701c <os_dev_add>
    if (rc != 0) {
   170e2:	4603      	mov	r3, r0
   170e4:	2800      	cmp	r0, #0
   170e6:	d1f6      	bne.n	170d6 <os_dev_create+0x16>
    if (g_os_started) {
   170e8:	4a04      	ldr	r2, [pc, #16]	; (170fc <os_dev_create+0x3c>)
   170ea:	6812      	ldr	r2, [r2, #0]
   170ec:	2a00      	cmp	r2, #0
   170ee:	d0f2      	beq.n	170d6 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   170f0:	4628      	mov	r0, r5
   170f2:	f7ff ffc1 	bl	17078 <os_dev_initialize>
   170f6:	4603      	mov	r3, r0
    return (rc);
   170f8:	e7ed      	b.n	170d6 <os_dev_create+0x16>
   170fa:	bf00      	nop
   170fc:	2000b628 	.word	0x2000b628

00017100 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   17100:	b538      	push	{r3, r4, r5, lr}
   17102:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   17104:	4b08      	ldr	r3, [pc, #32]	; (17128 <os_dev_initialize_all+0x28>)
   17106:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   17108:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   1710a:	e000      	b.n	1710e <os_dev_initialize_all+0xe>
   1710c:	6a24      	ldr	r4, [r4, #32]
   1710e:	b144      	cbz	r4, 17122 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   17110:	7e23      	ldrb	r3, [r4, #24]
   17112:	42ab      	cmp	r3, r5
   17114:	d1fa      	bne.n	1710c <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   17116:	4620      	mov	r0, r4
   17118:	f7ff ffae 	bl	17078 <os_dev_initialize>
            if (rc) {
   1711c:	4602      	mov	r2, r0
   1711e:	2800      	cmp	r0, #0
   17120:	d0f4      	beq.n	1710c <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   17122:	4610      	mov	r0, r2
   17124:	bd38      	pop	{r3, r4, r5, pc}
   17126:	bf00      	nop
   17128:	20006810 	.word	0x20006810

0001712c <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   1712c:	b538      	push	{r3, r4, r5, lr}
   1712e:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   17130:	4b05      	ldr	r3, [pc, #20]	; (17148 <os_dev_lookup+0x1c>)
   17132:	681c      	ldr	r4, [r3, #0]
   17134:	b134      	cbz	r4, 17144 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   17136:	4629      	mov	r1, r5
   17138:	69e0      	ldr	r0, [r4, #28]
   1713a:	f001 f958 	bl	183ee <strcmp>
   1713e:	b108      	cbz	r0, 17144 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   17140:	6a24      	ldr	r4, [r4, #32]
   17142:	e7f7      	b.n	17134 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   17144:	4620      	mov	r0, r4
   17146:	bd38      	pop	{r3, r4, r5, pc}
   17148:	20006810 	.word	0x20006810

0001714c <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   1714c:	b570      	push	{r4, r5, r6, lr}
   1714e:	460d      	mov	r5, r1
   17150:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   17152:	f7ff ffeb 	bl	1712c <os_dev_lookup>
    if (dev == NULL) {
   17156:	4604      	mov	r4, r0
   17158:	b1a0      	cbz	r0, 17184 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   1715a:	7ec3      	ldrb	r3, [r0, #27]
   1715c:	f013 0f01 	tst.w	r3, #1
   17160:	d012      	beq.n	17188 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   17162:	6803      	ldr	r3, [r0, #0]
   17164:	b11b      	cbz	r3, 1716e <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   17166:	4632      	mov	r2, r6
   17168:	4629      	mov	r1, r5
   1716a:	4798      	blx	r3
        if (rc != 0) {
   1716c:	b970      	cbnz	r0, 1718c <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1716e:	f000 ffb5 	bl	180dc <os_arch_save_sr>
    ++dev->od_open_ref;
   17172:	7ea3      	ldrb	r3, [r4, #26]
   17174:	3301      	adds	r3, #1
   17176:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   17178:	7ee3      	ldrb	r3, [r4, #27]
   1717a:	f043 0302 	orr.w	r3, r3, #2
   1717e:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   17180:	f000 ffb2 	bl	180e8 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   17184:	4620      	mov	r0, r4
   17186:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   17188:	2400      	movs	r4, #0
   1718a:	e7fb      	b.n	17184 <os_dev_open+0x38>
    return (NULL);
   1718c:	2400      	movs	r4, #0
   1718e:	e7f9      	b.n	17184 <os_dev_open+0x38>

00017190 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   17190:	b1b0      	cbz	r0, 171c0 <os_dev_close+0x30>
{
   17192:	b510      	push	{r4, lr}
   17194:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   17196:	68c3      	ldr	r3, [r0, #12]
   17198:	b113      	cbz	r3, 171a0 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   1719a:	4798      	blx	r3
        if (rc != 0) {
   1719c:	4603      	mov	r3, r0
   1719e:	b968      	cbnz	r0, 171bc <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   171a0:	f000 ff9c 	bl	180dc <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   171a4:	7ea3      	ldrb	r3, [r4, #26]
   171a6:	3b01      	subs	r3, #1
   171a8:	b2db      	uxtb	r3, r3
   171aa:	76a3      	strb	r3, [r4, #26]
   171ac:	b91b      	cbnz	r3, 171b6 <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   171ae:	7ee3      	ldrb	r3, [r4, #27]
   171b0:	f023 0306 	bic.w	r3, r3, #6
   171b4:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   171b6:	f000 ff97 	bl	180e8 <os_arch_restore_sr>

    return (0);
   171ba:	2300      	movs	r3, #0
err:
    return (rc);
}
   171bc:	4618      	mov	r0, r3
   171be:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   171c0:	2302      	movs	r3, #2
}
   171c2:	4618      	mov	r0, r3
   171c4:	4770      	bx	lr
	...

000171c8 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   171c8:	4b02      	ldr	r3, [pc, #8]	; (171d4 <os_dev_reset+0xc>)
   171ca:	2200      	movs	r2, #0
   171cc:	601a      	str	r2, [r3, #0]
   171ce:	605b      	str	r3, [r3, #4]
}
   171d0:	4770      	bx	lr
   171d2:	bf00      	nop
   171d4:	20006810 	.word	0x20006810

000171d8 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   171d8:	2200      	movs	r2, #0
   171da:	6002      	str	r2, [r0, #0]
   171dc:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   171de:	4603      	mov	r3, r0
   171e0:	f843 2f08 	str.w	r2, [r3, #8]!
   171e4:	60c3      	str	r3, [r0, #12]
}
   171e6:	4770      	bx	lr

000171e8 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   171e8:	68c0      	ldr	r0, [r0, #12]
}
   171ea:	3000      	adds	r0, #0
   171ec:	bf18      	it	ne
   171ee:	2001      	movne	r0, #1
   171f0:	4770      	bx	lr

000171f2 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   171f2:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   171f4:	b1f0      	cbz	r0, 17234 <os_eventq_put+0x42>
   171f6:	460c      	mov	r4, r1
   171f8:	4605      	mov	r5, r0
   171fa:	f7ff fff5 	bl	171e8 <os_eventq_inited>
   171fe:	b1c8      	cbz	r0, 17234 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   17200:	f000 ff6c 	bl	180dc <os_arch_save_sr>
   17204:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   17206:	7823      	ldrb	r3, [r4, #0]
   17208:	b9d3      	cbnz	r3, 17240 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   1720a:	2301      	movs	r3, #1
   1720c:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   1720e:	2300      	movs	r3, #0
   17210:	60e3      	str	r3, [r4, #12]
   17212:	68eb      	ldr	r3, [r5, #12]
   17214:	601c      	str	r4, [r3, #0]
   17216:	340c      	adds	r4, #12
   17218:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   1721a:	6868      	ldr	r0, [r5, #4]
   1721c:	b1b8      	cbz	r0, 1724e <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   1721e:	7b03      	ldrb	r3, [r0, #12]
   17220:	2b02      	cmp	r3, #2
   17222:	d010      	beq.n	17246 <os_eventq_put+0x54>
    resched = 0;
   17224:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   17226:	2300      	movs	r3, #0
   17228:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   1722a:	4630      	mov	r0, r6
   1722c:	f000 ff5c 	bl	180e8 <os_arch_restore_sr>

    if (resched) {
   17230:	b97c      	cbnz	r4, 17252 <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   17232:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   17234:	2300      	movs	r3, #0
   17236:	461a      	mov	r2, r3
   17238:	4619      	mov	r1, r3
   1723a:	4618      	mov	r0, r3
   1723c:	f7ff fcb8 	bl	16bb0 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   17240:	f000 ff52 	bl	180e8 <os_arch_restore_sr>
   17244:	e7f5      	b.n	17232 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   17246:	f000 fcc7 	bl	17bd8 <os_sched_wakeup>
            resched = 1;
   1724a:	2401      	movs	r4, #1
   1724c:	e7eb      	b.n	17226 <os_eventq_put+0x34>
    resched = 0;
   1724e:	2400      	movs	r4, #0
   17250:	e7eb      	b.n	1722a <os_eventq_put+0x38>
        os_sched(NULL);
   17252:	2000      	movs	r0, #0
   17254:	f000 fd40 	bl	17cd8 <os_sched>
   17258:	e7eb      	b.n	17232 <os_eventq_put+0x40>

0001725a <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   1725a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1725c:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   1725e:	f000 fc67 	bl	17b30 <os_sched_get_current_task>
   17262:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   17264:	682b      	ldr	r3, [r5, #0]
   17266:	4283      	cmp	r3, r0
   17268:	d001      	beq.n	1726e <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   1726a:	b9db      	cbnz	r3, 172a4 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   1726c:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   1726e:	f000 ff35 	bl	180dc <os_arch_save_sr>
   17272:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   17274:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   17276:	b9de      	cbnz	r6, 172b0 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   17278:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   1727a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1727e:	4620      	mov	r0, r4
   17280:	f000 fc62 	bl	17b48 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   17284:	7b63      	ldrb	r3, [r4, #13]
   17286:	f043 0308 	orr.w	r3, r3, #8
   1728a:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   1728c:	4638      	mov	r0, r7
   1728e:	f000 ff2b 	bl	180e8 <os_arch_restore_sr>

        os_sched(NULL);
   17292:	2000      	movs	r0, #0
   17294:	f000 fd20 	bl	17cd8 <os_sched>

        OS_ENTER_CRITICAL(sr);
   17298:	f000 ff20 	bl	180dc <os_arch_save_sr>
   1729c:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   1729e:	2300      	movs	r3, #0
   172a0:	606b      	str	r3, [r5, #4]
        goto pull_one;
   172a2:	e7e7      	b.n	17274 <os_eventq_get+0x1a>
            assert(0);
   172a4:	2300      	movs	r3, #0
   172a6:	461a      	mov	r2, r3
   172a8:	4619      	mov	r1, r3
   172aa:	4618      	mov	r0, r3
   172ac:	f7ff fc80 	bl	16bb0 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   172b0:	68f3      	ldr	r3, [r6, #12]
   172b2:	60ab      	str	r3, [r5, #8]
   172b4:	b153      	cbz	r3, 172cc <os_eventq_get+0x72>
        ev->ev_queued = 0;
   172b6:	2300      	movs	r3, #0
   172b8:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   172ba:	7b63      	ldrb	r3, [r4, #13]
   172bc:	f023 0308 	bic.w	r3, r3, #8
   172c0:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   172c2:	4638      	mov	r0, r7
   172c4:	f000 ff10 	bl	180e8 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   172c8:	4630      	mov	r0, r6
   172ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   172cc:	f105 0308 	add.w	r3, r5, #8
   172d0:	60eb      	str	r3, [r5, #12]
   172d2:	e7f0      	b.n	172b6 <os_eventq_get+0x5c>

000172d4 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   172d4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   172d6:	f7ff ffc0 	bl	1725a <os_eventq_get>
    assert(ev->ev_cb != NULL);
   172da:	6843      	ldr	r3, [r0, #4]
   172dc:	b10b      	cbz	r3, 172e2 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   172de:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   172e0:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   172e2:	461a      	mov	r2, r3
   172e4:	4619      	mov	r1, r3
   172e6:	4618      	mov	r0, r3
   172e8:	f7ff fc62 	bl	16bb0 <__assert_func>

000172ec <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   172ec:	b538      	push	{r3, r4, r5, lr}
   172ee:	4605      	mov	r5, r0
   172f0:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   172f2:	f000 fef3 	bl	180dc <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   172f6:	7823      	ldrb	r3, [r4, #0]
   172f8:	b183      	cbz	r3, 1731c <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   172fa:	68aa      	ldr	r2, [r5, #8]
   172fc:	42a2      	cmp	r2, r4
   172fe:	d107      	bne.n	17310 <os_eventq_remove+0x24>
   17300:	68d3      	ldr	r3, [r2, #12]
   17302:	60ab      	str	r3, [r5, #8]
   17304:	b953      	cbnz	r3, 1731c <os_eventq_remove+0x30>
   17306:	f105 0308 	add.w	r3, r5, #8
   1730a:	60eb      	str	r3, [r5, #12]
   1730c:	e006      	b.n	1731c <os_eventq_remove+0x30>
   1730e:	461a      	mov	r2, r3
   17310:	68d3      	ldr	r3, [r2, #12]
   17312:	42a3      	cmp	r3, r4
   17314:	d1fb      	bne.n	1730e <os_eventq_remove+0x22>
   17316:	68db      	ldr	r3, [r3, #12]
   17318:	60d3      	str	r3, [r2, #12]
   1731a:	b123      	cbz	r3, 17326 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   1731c:	2300      	movs	r3, #0
   1731e:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   17320:	f000 fee2 	bl	180e8 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   17324:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   17326:	320c      	adds	r2, #12
   17328:	60ea      	str	r2, [r5, #12]
   1732a:	e7f7      	b.n	1731c <os_eventq_remove+0x30>

0001732c <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   1732c:	4800      	ldr	r0, [pc, #0]	; (17330 <os_eventq_dflt_get+0x4>)
   1732e:	4770      	bx	lr
   17330:	20006818 	.word	0x20006818

00017334 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   17334:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   17336:	2000      	movs	r0, #0
   17338:	6018      	str	r0, [r3, #0]
   1733a:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   1733c:	6098      	str	r0, [r3, #8]
   1733e:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   17340:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   17342:	611a      	str	r2, [r3, #16]

    return (0);
}
   17344:	4770      	bx	lr

00017346 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   17346:	b538      	push	{r3, r4, r5, lr}
   17348:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1734a:	f000 fec7 	bl	180dc <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   1734e:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   17350:	b114      	cbz	r4, 17358 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   17352:	6863      	ldr	r3, [r4, #4]
   17354:	602b      	str	r3, [r5, #0]
   17356:	b12b      	cbz	r3, 17364 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   17358:	f000 fec6 	bl	180e8 <os_arch_restore_sr>

    if (mp) {
   1735c:	b124      	cbz	r4, 17368 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   1735e:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   17362:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   17364:	606d      	str	r5, [r5, #4]
   17366:	e7f7      	b.n	17358 <os_mqueue_get+0x12>
        m = NULL;
   17368:	2000      	movs	r0, #0
    return (m);
   1736a:	e7fa      	b.n	17362 <os_mqueue_get+0x1c>

0001736c <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   1736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   1736e:	7953      	ldrb	r3, [r2, #5]
   17370:	2b07      	cmp	r3, #7
   17372:	d916      	bls.n	173a2 <os_mqueue_put+0x36>
   17374:	4614      	mov	r4, r2
   17376:	460e      	mov	r6, r1
   17378:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   1737a:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1737e:	f000 fead 	bl	180dc <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   17382:	2300      	movs	r3, #0
   17384:	f844 3f14 	str.w	r3, [r4, #20]!
   17388:	686b      	ldr	r3, [r5, #4]
   1738a:	601f      	str	r7, [r3, #0]
   1738c:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1738e:	f000 feab 	bl	180e8 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   17392:	b146      	cbz	r6, 173a6 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   17394:	f105 0108 	add.w	r1, r5, #8
   17398:	4630      	mov	r0, r6
   1739a:	f7ff ff2a 	bl	171f2 <os_eventq_put>
    }

    return (0);
   1739e:	2000      	movs	r0, #0
   173a0:	e000      	b.n	173a4 <os_mqueue_put+0x38>
err:
    return (rc);
   173a2:	2002      	movs	r0, #2
}
   173a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   173a6:	2000      	movs	r0, #0
   173a8:	e7fc      	b.n	173a4 <os_mqueue_put+0x38>

000173aa <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   173aa:	3a10      	subs	r2, #16
   173ac:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   173ae:	6041      	str	r1, [r0, #4]

    return (0);
}
   173b0:	2000      	movs	r0, #0
   173b2:	4770      	bx	lr

000173b4 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   173b4:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   173b6:	8803      	ldrh	r3, [r0, #0]
   173b8:	428b      	cmp	r3, r1
   173ba:	d312      	bcc.n	173e2 <os_mbuf_get+0x2e>
   173bc:	460d      	mov	r5, r1
   173be:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   173c0:	6840      	ldr	r0, [r0, #4]
   173c2:	f000 f947 	bl	17654 <os_memblock_get>
    if (!om) {
   173c6:	4603      	mov	r3, r0
   173c8:	b148      	cbz	r0, 173de <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   173ca:	2200      	movs	r2, #0
   173cc:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   173ce:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   173d0:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   173d2:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   173d4:	f100 0110 	add.w	r1, r0, #16
   173d8:	4429      	add	r1, r5
   173da:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   173dc:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   173de:	4618      	mov	r0, r3
   173e0:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   173e2:	2300      	movs	r3, #0
    return om;
   173e4:	e7fb      	b.n	173de <os_mbuf_get+0x2a>

000173e6 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   173e6:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   173e8:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   173ec:	8803      	ldrh	r3, [r0, #0]
   173ee:	42ab      	cmp	r3, r5
   173f0:	d310      	bcc.n	17414 <os_mbuf_get_pkthdr+0x2e>
   173f2:	2dff      	cmp	r5, #255	; 0xff
   173f4:	d810      	bhi.n	17418 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   173f6:	2100      	movs	r1, #0
   173f8:	f7ff ffdc 	bl	173b4 <os_mbuf_get>
    if (om) {
   173fc:	4603      	mov	r3, r0
   173fe:	b138      	cbz	r0, 17410 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   17400:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   17402:	6802      	ldr	r2, [r0, #0]
   17404:	4415      	add	r5, r2
   17406:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   17408:	2200      	movs	r2, #0
   1740a:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   1740c:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   1740e:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   17410:	4618      	mov	r0, r3
   17412:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   17414:	2300      	movs	r3, #0
   17416:	e7fb      	b.n	17410 <os_mbuf_get_pkthdr+0x2a>
   17418:	2300      	movs	r3, #0
    return om;
   1741a:	e7f9      	b.n	17410 <os_mbuf_get_pkthdr+0x2a>

0001741c <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   1741c:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   1741e:	6883      	ldr	r3, [r0, #8]
   17420:	b123      	cbz	r3, 1742c <os_mbuf_free+0x10>
   17422:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   17424:	6858      	ldr	r0, [r3, #4]
   17426:	f000 f93d 	bl	176a4 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   1742a:	bd08      	pop	{r3, pc}
    rc = 0;
   1742c:	2000      	movs	r0, #0
    return (rc);
   1742e:	e7fc      	b.n	1742a <os_mbuf_free+0xe>

00017430 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   17430:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   17432:	b160      	cbz	r0, 1744e <os_mbuf_free_chain+0x1e>
{
   17434:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   17436:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   17438:	4618      	mov	r0, r3
   1743a:	f7ff ffef 	bl	1741c <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   1743e:	4623      	mov	r3, r4
        if (rc != 0) {
   17440:	4602      	mov	r2, r0
   17442:	b910      	cbnz	r0, 1744a <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   17444:	2c00      	cmp	r4, #0
   17446:	d1f6      	bne.n	17436 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   17448:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1744a:	4610      	mov	r0, r2
   1744c:	bd10      	pop	{r4, pc}
    rc = 0;
   1744e:	2200      	movs	r2, #0
}
   17450:	4610      	mov	r0, r2
   17452:	4770      	bx	lr

00017454 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   17454:	2300      	movs	r3, #0
    while (om != NULL) {
   17456:	e003      	b.n	17460 <os_mbuf_len+0xc>
        len += om->om_len;
   17458:	88c2      	ldrh	r2, [r0, #6]
   1745a:	4413      	add	r3, r2
   1745c:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1745e:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   17460:	2800      	cmp	r0, #0
   17462:	d1f9      	bne.n	17458 <os_mbuf_len+0x4>
    }

    return len;
}
   17464:	4618      	mov	r0, r3
   17466:	4770      	bx	lr

00017468 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   17468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1746c:	2800      	cmp	r0, #0
   1746e:	d04d      	beq.n	1750c <os_mbuf_append+0xa4>
   17470:	460f      	mov	r7, r1
   17472:	4691      	mov	r9, r2
   17474:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   17476:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1747a:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1747c:	e000      	b.n	17480 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1747e:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   17480:	68eb      	ldr	r3, [r5, #12]
   17482:	2b00      	cmp	r3, #0
   17484:	d1fb      	bne.n	1747e <os_mbuf_append+0x16>
    }

    remainder = len;
   17486:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   17488:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1748a:	f105 0410 	add.w	r4, r5, #16
   1748e:	881b      	ldrh	r3, [r3, #0]
   17490:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   17492:	6828      	ldr	r0, [r5, #0]
   17494:	88eb      	ldrh	r3, [r5, #6]
   17496:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   17498:	1a24      	subs	r4, r4, r0
   1749a:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   1749c:	b164      	cbz	r4, 174b8 <os_mbuf_append+0x50>
        if (space > remainder) {
   1749e:	454c      	cmp	r4, r9
   174a0:	dd00      	ble.n	174a4 <os_mbuf_append+0x3c>
            space = remainder;
   174a2:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   174a4:	4622      	mov	r2, r4
   174a6:	4639      	mov	r1, r7
   174a8:	f000 ff78 	bl	1839c <memcpy>

        last->om_len += space;
   174ac:	88eb      	ldrh	r3, [r5, #6]
   174ae:	4423      	add	r3, r4
   174b0:	80eb      	strh	r3, [r5, #6]
        data += space;
   174b2:	4427      	add	r7, r4
        remainder -= space;
   174b4:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   174b8:	2e00      	cmp	r6, #0
   174ba:	dd16      	ble.n	174ea <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   174bc:	2100      	movs	r1, #0
   174be:	4640      	mov	r0, r8
   174c0:	f7ff ff78 	bl	173b4 <os_mbuf_get>
        if (!new) {
   174c4:	4604      	mov	r4, r0
   174c6:	b180      	cbz	r0, 174ea <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   174c8:	f8b8 2000 	ldrh.w	r2, [r8]
   174cc:	42b2      	cmp	r2, r6
   174ce:	bfa8      	it	ge
   174d0:	4632      	movge	r2, r6
   174d2:	b292      	uxth	r2, r2
   174d4:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   174d6:	4639      	mov	r1, r7
   174d8:	6800      	ldr	r0, [r0, #0]
   174da:	f000 ff5f 	bl	1839c <memcpy>
        data += new->om_len;
   174de:	88e3      	ldrh	r3, [r4, #6]
   174e0:	441f      	add	r7, r3
        remainder -= new->om_len;
   174e2:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   174e4:	60ec      	str	r4, [r5, #12]
        last = new;
   174e6:	4625      	mov	r5, r4
   174e8:	e7e6      	b.n	174b8 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   174ea:	f89a 3005 	ldrb.w	r3, [sl, #5]
   174ee:	2b07      	cmp	r3, #7
   174f0:	d907      	bls.n	17502 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   174f2:	eba9 0906 	sub.w	r9, r9, r6
   174f6:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   174fa:	fa13 f989 	uxtah	r9, r3, r9
   174fe:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   17502:	b106      	cbz	r6, 17506 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   17504:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   17506:	4630      	mov	r0, r6
   17508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1750c:	2602      	movs	r6, #2
   1750e:	e7fa      	b.n	17506 <os_mbuf_append+0x9e>

00017510 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   17510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17514:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   17516:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   1751a:	2700      	movs	r7, #0
    head = NULL;
   1751c:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1751e:	e017      	b.n	17550 <os_mbuf_dup+0x40>
    startoff = 0;
   17520:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   17522:	4623      	mov	r3, r4
   17524:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   17528:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1752a:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   1752c:	b299      	uxth	r1, r3
   1752e:	4640      	mov	r0, r8
   17530:	f7ff ff40 	bl	173b4 <os_mbuf_get>
   17534:	4605      	mov	r5, r0
   17536:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   17538:	b188      	cbz	r0, 1755e <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   1753a:	7923      	ldrb	r3, [r4, #4]
   1753c:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   1753e:	88e3      	ldrh	r3, [r4, #6]
   17540:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   17542:	88e2      	ldrh	r2, [r4, #6]
   17544:	6821      	ldr	r1, [r4, #0]
   17546:	6828      	ldr	r0, [r5, #0]
   17548:	f000 ff28 	bl	1839c <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1754c:	68e4      	ldr	r4, [r4, #12]
   1754e:	462f      	mov	r7, r5
   17550:	b14c      	cbz	r4, 17566 <os_mbuf_dup+0x56>
        if (head) {
   17552:	b15e      	cbz	r6, 1756c <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   17554:	7963      	ldrb	r3, [r4, #5]
   17556:	2b07      	cmp	r3, #7
   17558:	d9e2      	bls.n	17520 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   1755a:	b299      	uxth	r1, r3
   1755c:	e7e1      	b.n	17522 <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1755e:	4630      	mov	r0, r6
   17560:	f7ff ff66 	bl	17430 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   17564:	462e      	mov	r6, r5
}
   17566:	4630      	mov	r0, r6
   17568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1756c:	7963      	ldrb	r3, [r4, #5]
   1756e:	2b07      	cmp	r3, #7
   17570:	d911      	bls.n	17596 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   17572:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   17574:	4623      	mov	r3, r4
   17576:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1757a:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1757c:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1757e:	b299      	uxth	r1, r3
   17580:	4640      	mov	r0, r8
   17582:	f7ff ff17 	bl	173b4 <os_mbuf_get>
            if (!head) {
   17586:	4606      	mov	r6, r0
   17588:	2800      	cmp	r0, #0
   1758a:	d0ec      	beq.n	17566 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   1758c:	7963      	ldrb	r3, [r4, #5]
   1758e:	2b07      	cmp	r3, #7
   17590:	d803      	bhi.n	1759a <os_mbuf_dup+0x8a>
            copy = head;
   17592:	4605      	mov	r5, r0
   17594:	e7d1      	b.n	1753a <os_mbuf_dup+0x2a>
    startoff = 0;
   17596:	2100      	movs	r1, #0
   17598:	e7ec      	b.n	17574 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   1759a:	88c3      	ldrh	r3, [r0, #6]
   1759c:	b973      	cbnz	r3, 175bc <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1759e:	f100 0510 	add.w	r5, r0, #16
   175a2:	7962      	ldrb	r2, [r4, #5]
   175a4:	f104 0110 	add.w	r1, r4, #16
   175a8:	4628      	mov	r0, r5
   175aa:	f000 fef7 	bl	1839c <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   175ae:	7963      	ldrb	r3, [r4, #5]
   175b0:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   175b2:	7963      	ldrb	r3, [r4, #5]
   175b4:	441d      	add	r5, r3
   175b6:	6035      	str	r5, [r6, #0]
            copy = head;
   175b8:	4635      	mov	r5, r6
   175ba:	e7be      	b.n	1753a <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   175bc:	2300      	movs	r3, #0
   175be:	461a      	mov	r2, r3
   175c0:	4619      	mov	r1, r3
   175c2:	4618      	mov	r0, r3
   175c4:	f7ff faf4 	bl	16bb0 <__assert_func>

000175c8 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   175c8:	2800      	cmp	r0, #0
   175ca:	d031      	beq.n	17630 <os_mempool_init_internal+0x68>
{
   175cc:	b430      	push	{r4, r5}
   175ce:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   175d0:	2a00      	cmp	r2, #0
   175d2:	d02f      	beq.n	17634 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   175d4:	b1bb      	cbz	r3, 17606 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   175d6:	b113      	cbz	r3, 175de <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   175d8:	f013 0f03 	tst.w	r3, #3
   175dc:	d12c      	bne.n	17638 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   175de:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   175e0:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   175e2:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   175e4:	f89d 000c 	ldrb.w	r0, [sp, #12]
   175e8:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   175ea:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   175ec:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   175ee:	9802      	ldr	r0, [sp, #8]
   175f0:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   175f2:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   175f4:	b199      	cbz	r1, 1761e <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   175f6:	f012 0f03 	tst.w	r2, #3
   175fa:	d002      	beq.n	17602 <os_mempool_init_internal+0x3a>
   175fc:	f022 0203 	bic.w	r2, r2, #3
   17600:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   17602:	2001      	movs	r0, #1
   17604:	e007      	b.n	17616 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   17606:	2900      	cmp	r1, #0
   17608:	d0e5      	beq.n	175d6 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   1760a:	2003      	movs	r0, #3
   1760c:	e00e      	b.n	1762c <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   1760e:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   17610:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   17612:	3001      	adds	r0, #1
            block_addr += true_block_size;
   17614:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   17616:	4281      	cmp	r1, r0
   17618:	dcf9      	bgt.n	1760e <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   1761a:	2200      	movs	r2, #0
   1761c:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   1761e:	2000      	movs	r0, #0
   17620:	6120      	str	r0, [r4, #16]
   17622:	4b06      	ldr	r3, [pc, #24]	; (1763c <os_mempool_init_internal+0x74>)
   17624:	685a      	ldr	r2, [r3, #4]
   17626:	6014      	str	r4, [r2, #0]
   17628:	3410      	adds	r4, #16
   1762a:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   1762c:	bc30      	pop	{r4, r5}
   1762e:	4770      	bx	lr
        return OS_INVALID_PARM;
   17630:	2003      	movs	r0, #3
}
   17632:	4770      	bx	lr
        return OS_INVALID_PARM;
   17634:	2003      	movs	r0, #3
   17636:	e7f9      	b.n	1762c <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   17638:	2004      	movs	r0, #4
   1763a:	e7f7      	b.n	1762c <os_mempool_init_internal+0x64>
   1763c:	2000b638 	.word	0x2000b638

00017640 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   17640:	b510      	push	{r4, lr}
   17642:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   17644:	2400      	movs	r4, #0
   17646:	9401      	str	r4, [sp, #4]
   17648:	9c04      	ldr	r4, [sp, #16]
   1764a:	9400      	str	r4, [sp, #0]
   1764c:	f7ff ffbc 	bl	175c8 <os_mempool_init_internal>
}
   17650:	b002      	add	sp, #8
   17652:	bd10      	pop	{r4, pc}

00017654 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   17654:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   17656:	b1a0      	cbz	r0, 17682 <os_memblock_get+0x2e>
   17658:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1765a:	f000 fd3f 	bl	180dc <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1765e:	88e3      	ldrh	r3, [r4, #6]
   17660:	b153      	cbz	r3, 17678 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   17662:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   17664:	682a      	ldr	r2, [r5, #0]
   17666:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   17668:	3b01      	subs	r3, #1
   1766a:	b29b      	uxth	r3, r3
   1766c:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1766e:	8922      	ldrh	r2, [r4, #8]
   17670:	4293      	cmp	r3, r2
   17672:	d202      	bcs.n	1767a <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   17674:	8123      	strh	r3, [r4, #8]
   17676:	e000      	b.n	1767a <os_memblock_get+0x26>
    block = NULL;
   17678:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1767a:	f000 fd35 	bl	180e8 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1767e:	4628      	mov	r0, r5
   17680:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   17682:	2500      	movs	r5, #0
    return (void *)block;
   17684:	e7fb      	b.n	1767e <os_memblock_get+0x2a>

00017686 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   17686:	b538      	push	{r3, r4, r5, lr}
   17688:	4604      	mov	r4, r0
   1768a:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   1768c:	f000 fd26 	bl	180dc <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   17690:	6963      	ldr	r3, [r4, #20]
   17692:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   17694:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   17696:	88e3      	ldrh	r3, [r4, #6]
   17698:	3301      	adds	r3, #1
   1769a:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   1769c:	f000 fd24 	bl	180e8 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   176a0:	2000      	movs	r0, #0
   176a2:	bd38      	pop	{r3, r4, r5, pc}

000176a4 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   176a4:	b168      	cbz	r0, 176c2 <os_memblock_put+0x1e>
{
   176a6:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   176a8:	b169      	cbz	r1, 176c6 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   176aa:	7a83      	ldrb	r3, [r0, #10]
   176ac:	f013 0f01 	tst.w	r3, #1
   176b0:	d004      	beq.n	176bc <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   176b2:	69c3      	ldr	r3, [r0, #28]
   176b4:	b113      	cbz	r3, 176bc <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   176b6:	6a02      	ldr	r2, [r0, #32]
   176b8:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   176ba:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   176bc:	f7ff ffe3 	bl	17686 <os_memblock_put_from_cb>
   176c0:	e7fb      	b.n	176ba <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   176c2:	2003      	movs	r0, #3
}
   176c4:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   176c6:	2003      	movs	r0, #3
   176c8:	e7f7      	b.n	176ba <os_memblock_put+0x16>
	...

000176cc <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   176cc:	4b02      	ldr	r3, [pc, #8]	; (176d8 <os_mempool_module_init+0xc>)
   176ce:	2200      	movs	r2, #0
   176d0:	601a      	str	r2, [r3, #0]
   176d2:	605b      	str	r3, [r3, #4]
}
   176d4:	4770      	bx	lr
   176d6:	bf00      	nop
   176d8:	2000b638 	.word	0x2000b638

000176dc <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   176dc:	4b02      	ldr	r3, [pc, #8]	; (176e8 <os_msys_find_biggest_pool+0xc>)
   176de:	6818      	ldr	r0, [r3, #0]
   176e0:	b108      	cbz	r0, 176e6 <os_msys_find_biggest_pool+0xa>
   176e2:	6858      	ldr	r0, [r3, #4]
   176e4:	3808      	subs	r0, #8
}
   176e6:	4770      	bx	lr
   176e8:	20000104 	.word	0x20000104

000176ec <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   176ec:	4b09      	ldr	r3, [pc, #36]	; (17714 <os_msys_find_pool+0x28>)
   176ee:	6819      	ldr	r1, [r3, #0]
   176f0:	460b      	mov	r3, r1
   176f2:	b123      	cbz	r3, 176fe <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   176f4:	881a      	ldrh	r2, [r3, #0]
   176f6:	4282      	cmp	r2, r0
   176f8:	d201      	bcs.n	176fe <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   176fa:	689b      	ldr	r3, [r3, #8]
   176fc:	e7f9      	b.n	176f2 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   176fe:	b10b      	cbz	r3, 17704 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   17700:	4618      	mov	r0, r3
   17702:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   17704:	b119      	cbz	r1, 1770e <os_msys_find_pool+0x22>
   17706:	4b03      	ldr	r3, [pc, #12]	; (17714 <os_msys_find_pool+0x28>)
   17708:	685b      	ldr	r3, [r3, #4]
   1770a:	3b08      	subs	r3, #8
   1770c:	e7f8      	b.n	17700 <os_msys_find_pool+0x14>
   1770e:	460b      	mov	r3, r1
    return (pool);
   17710:	e7f6      	b.n	17700 <os_msys_find_pool+0x14>
   17712:	bf00      	nop
   17714:	20000104 	.word	0x20000104

00017718 <os_msys_register>:
{
   17718:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1771a:	4b11      	ldr	r3, [pc, #68]	; (17760 <os_msys_register+0x48>)
   1771c:	681d      	ldr	r5, [r3, #0]
   1771e:	462b      	mov	r3, r5
    prev = NULL;
   17720:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   17722:	b133      	cbz	r3, 17732 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   17724:	8801      	ldrh	r1, [r0, #0]
   17726:	881a      	ldrh	r2, [r3, #0]
   17728:	4291      	cmp	r1, r2
   1772a:	d302      	bcc.n	17732 <os_msys_register+0x1a>
        prev = pool;
   1772c:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1772e:	689b      	ldr	r3, [r3, #8]
   17730:	e7f7      	b.n	17722 <os_msys_register+0xa>
    if (prev) {
   17732:	b15c      	cbz	r4, 1774c <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   17734:	68a3      	ldr	r3, [r4, #8]
   17736:	6083      	str	r3, [r0, #8]
   17738:	b11b      	cbz	r3, 17742 <os_msys_register+0x2a>
   1773a:	60a0      	str	r0, [r4, #8]
}
   1773c:	2000      	movs	r0, #0
   1773e:	bc30      	pop	{r4, r5}
   17740:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   17742:	f100 0308 	add.w	r3, r0, #8
   17746:	4a06      	ldr	r2, [pc, #24]	; (17760 <os_msys_register+0x48>)
   17748:	6053      	str	r3, [r2, #4]
   1774a:	e7f6      	b.n	1773a <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1774c:	6085      	str	r5, [r0, #8]
   1774e:	b115      	cbz	r5, 17756 <os_msys_register+0x3e>
   17750:	4b03      	ldr	r3, [pc, #12]	; (17760 <os_msys_register+0x48>)
   17752:	6018      	str	r0, [r3, #0]
   17754:	e7f2      	b.n	1773c <os_msys_register+0x24>
   17756:	f100 0308 	add.w	r3, r0, #8
   1775a:	4a01      	ldr	r2, [pc, #4]	; (17760 <os_msys_register+0x48>)
   1775c:	6053      	str	r3, [r2, #4]
   1775e:	e7f7      	b.n	17750 <os_msys_register+0x38>
   17760:	20000104 	.word	0x20000104

00017764 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   17764:	b530      	push	{r4, r5, lr}
   17766:	b083      	sub	sp, #12
   17768:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1776a:	9d07      	ldr	r5, [sp, #28]
   1776c:	9501      	str	r5, [sp, #4]
   1776e:	9d06      	ldr	r5, [sp, #24]
   17770:	9500      	str	r5, [sp, #0]
   17772:	f001 f96d 	bl	18a50 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   17776:	b138      	cbz	r0, 17788 <os_msys_init_once+0x24>
   17778:	2000      	movs	r0, #0
   1777a:	9000      	str	r0, [sp, #0]
   1777c:	4b09      	ldr	r3, [pc, #36]	; (177a4 <os_msys_init_once+0x40>)
   1777e:	681d      	ldr	r5, [r3, #0]
   17780:	4603      	mov	r3, r0
   17782:	4602      	mov	r2, r0
   17784:	4601      	mov	r1, r0
   17786:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   17788:	4620      	mov	r0, r4
   1778a:	f7ff ffc5 	bl	17718 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1778e:	b138      	cbz	r0, 177a0 <os_msys_init_once+0x3c>
   17790:	2000      	movs	r0, #0
   17792:	9000      	str	r0, [sp, #0]
   17794:	4b03      	ldr	r3, [pc, #12]	; (177a4 <os_msys_init_once+0x40>)
   17796:	681c      	ldr	r4, [r3, #0]
   17798:	4603      	mov	r3, r0
   1779a:	4602      	mov	r2, r0
   1779c:	4601      	mov	r1, r0
   1779e:	47a0      	blx	r4
}
   177a0:	b003      	add	sp, #12
   177a2:	bd30      	pop	{r4, r5, pc}
   177a4:	200000fc 	.word	0x200000fc

000177a8 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   177a8:	4b02      	ldr	r3, [pc, #8]	; (177b4 <os_msys_reset+0xc>)
   177aa:	2200      	movs	r2, #0
   177ac:	601a      	str	r2, [r3, #0]
   177ae:	605b      	str	r3, [r3, #4]
}
   177b0:	4770      	bx	lr
   177b2:	bf00      	nop
   177b4:	20000104 	.word	0x20000104

000177b8 <os_msys_get_pkthdr>:
{
   177b8:	b510      	push	{r4, lr}
   177ba:	460c      	mov	r4, r1
    if (dsize == 0) {
   177bc:	b930      	cbnz	r0, 177cc <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   177be:	f7ff ff8d 	bl	176dc <os_msys_find_biggest_pool>
    if (!pool) {
   177c2:	b158      	cbz	r0, 177dc <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   177c4:	b2e1      	uxtb	r1, r4
   177c6:	f7ff fe0e 	bl	173e6 <os_mbuf_get_pkthdr>
}
   177ca:	bd10      	pop	{r4, pc}
   177cc:	f101 0308 	add.w	r3, r1, #8
   177d0:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   177d2:	4403      	add	r3, r0
   177d4:	b298      	uxth	r0, r3
   177d6:	f7ff ff89 	bl	176ec <os_msys_find_pool>
   177da:	e7f2      	b.n	177c2 <os_msys_get_pkthdr+0xa>
    return (NULL);
   177dc:	2000      	movs	r0, #0
   177de:	e7f4      	b.n	177ca <os_msys_get_pkthdr+0x12>

000177e0 <os_msys_init>:

void
os_msys_init(void)
{
   177e0:	b500      	push	{lr}
   177e2:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   177e4:	f7ff ffe0 	bl	177a8 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   177e8:	4b06      	ldr	r3, [pc, #24]	; (17804 <os_msys_init+0x24>)
   177ea:	9301      	str	r3, [sp, #4]
   177ec:	f44f 7392 	mov.w	r3, #292	; 0x124
   177f0:	9300      	str	r3, [sp, #0]
   177f2:	2340      	movs	r3, #64	; 0x40
   177f4:	4a04      	ldr	r2, [pc, #16]	; (17808 <os_msys_init+0x28>)
   177f6:	4905      	ldr	r1, [pc, #20]	; (1780c <os_msys_init+0x2c>)
   177f8:	4805      	ldr	r0, [pc, #20]	; (17810 <os_msys_init+0x30>)
   177fa:	f7ff ffb3 	bl	17764 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   177fe:	b003      	add	sp, #12
   17800:	f85d fb04 	ldr.w	pc, [sp], #4
   17804:	0001e504 	.word	0x0001e504
   17808:	2000b128 	.word	0x2000b128
   1780c:	2000b134 	.word	0x2000b134
   17810:	20006828 	.word	0x20006828

00017814 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   17814:	4603      	mov	r3, r0
   17816:	b128      	cbz	r0, 17824 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   17818:	2000      	movs	r0, #0
   1781a:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1781c:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1781e:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   17820:	6018      	str	r0, [r3, #0]
   17822:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   17824:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   17826:	4770      	bx	lr

00017828 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   17828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1782a:	4b2c      	ldr	r3, [pc, #176]	; (178dc <os_mutex_release+0xb4>)
   1782c:	681b      	ldr	r3, [r3, #0]
   1782e:	2b00      	cmp	r3, #0
   17830:	d04d      	beq.n	178ce <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   17832:	2800      	cmp	r0, #0
   17834:	d04d      	beq.n	178d2 <os_mutex_release+0xaa>
   17836:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   17838:	f000 f97a 	bl	17b30 <os_sched_get_current_task>
   1783c:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1783e:	88e3      	ldrh	r3, [r4, #6]
   17840:	2b00      	cmp	r3, #0
   17842:	d048      	beq.n	178d6 <os_mutex_release+0xae>
   17844:	68a2      	ldr	r2, [r4, #8]
   17846:	4282      	cmp	r2, r0
   17848:	d001      	beq.n	1784e <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1784a:	2005      	movs	r0, #5
   1784c:	e040      	b.n	178d0 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1784e:	2b01      	cmp	r3, #1
   17850:	d003      	beq.n	1785a <os_mutex_release+0x32>
        --mu->mu_level;
   17852:	3b01      	subs	r3, #1
   17854:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   17856:	2000      	movs	r0, #0
        goto done;
   17858:	e03a      	b.n	178d0 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   1785a:	f000 fc3f 	bl	180dc <os_arch_save_sr>
   1785e:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   17860:	88e3      	ldrh	r3, [r4, #6]
   17862:	3b01      	subs	r3, #1
   17864:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   17866:	7aea      	ldrb	r2, [r5, #11]
   17868:	7963      	ldrb	r3, [r4, #5]
   1786a:	429a      	cmp	r2, r3
   1786c:	d11e      	bne.n	178ac <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1786e:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   17870:	b146      	cbz	r6, 17884 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   17872:	69f3      	ldr	r3, [r6, #28]
   17874:	b1fb      	cbz	r3, 178b6 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   17876:	4630      	mov	r0, r6
   17878:	f000 f9ae 	bl	17bd8 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1787c:	2301      	movs	r3, #1
   1787e:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   17880:	7af3      	ldrb	r3, [r6, #11]
   17882:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   17884:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   17886:	b116      	cbz	r6, 1788e <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   17888:	7bb3      	ldrb	r3, [r6, #14]
   1788a:	3301      	adds	r3, #1
   1788c:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1788e:	7bab      	ldrb	r3, [r5, #14]
   17890:	3b01      	subs	r3, #1
   17892:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   17894:	f000 fa1a 	bl	17ccc <os_sched_next_task>
   17898:	4604      	mov	r4, r0
    if (rdy != current) {
   1789a:	4285      	cmp	r5, r0
   1789c:	d010      	beq.n	178c0 <os_mutex_release+0x98>
        resched = 1;
   1789e:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   178a0:	4638      	mov	r0, r7
   178a2:	f000 fc21 	bl	180e8 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   178a6:	b96d      	cbnz	r5, 178c4 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   178a8:	2000      	movs	r0, #0
   178aa:	e011      	b.n	178d0 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   178ac:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   178ae:	4628      	mov	r0, r5
   178b0:	f000 fa24 	bl	17cfc <os_sched_resort>
   178b4:	e7db      	b.n	1786e <os_mutex_release+0x46>
        assert(rdy->t_obj);
   178b6:	461a      	mov	r2, r3
   178b8:	4619      	mov	r1, r3
   178ba:	4618      	mov	r0, r3
   178bc:	f7ff f978 	bl	16bb0 <__assert_func>
    resched = 0;
   178c0:	2500      	movs	r5, #0
   178c2:	e7ed      	b.n	178a0 <os_mutex_release+0x78>
        os_sched(rdy);
   178c4:	4620      	mov	r0, r4
   178c6:	f000 fa07 	bl	17cd8 <os_sched>
    ret = OS_OK;
   178ca:	2000      	movs	r0, #0
   178cc:	e000      	b.n	178d0 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   178ce:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   178d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   178d2:	2003      	movs	r0, #3
   178d4:	e7fc      	b.n	178d0 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   178d6:	2005      	movs	r0, #5
   178d8:	e7fa      	b.n	178d0 <os_mutex_release+0xa8>
   178da:	bf00      	nop
   178dc:	2000b628 	.word	0x2000b628

000178e0 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   178e0:	4b36      	ldr	r3, [pc, #216]	; (179bc <os_mutex_pend+0xdc>)
   178e2:	681b      	ldr	r3, [r3, #0]
   178e4:	2b00      	cmp	r3, #0
   178e6:	d065      	beq.n	179b4 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   178e8:	2800      	cmp	r0, #0
   178ea:	d065      	beq.n	179b8 <os_mutex_pend+0xd8>
{
   178ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   178f0:	460f      	mov	r7, r1
   178f2:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   178f4:	f000 fbf2 	bl	180dc <os_arch_save_sr>
   178f8:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   178fa:	f000 f919 	bl	17b30 <os_sched_get_current_task>
   178fe:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   17900:	88e3      	ldrh	r3, [r4, #6]
   17902:	b19b      	cbz	r3, 1792c <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   17904:	68a2      	ldr	r2, [r4, #8]
   17906:	4282      	cmp	r2, r0
   17908:	d01e      	beq.n	17948 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1790a:	b327      	cbz	r7, 17956 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1790c:	7ad1      	ldrb	r1, [r2, #11]
   1790e:	7ac3      	ldrb	r3, [r0, #11]
   17910:	4299      	cmp	r1, r3
   17912:	d825      	bhi.n	17960 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   17914:	6821      	ldr	r1, [r4, #0]
   17916:	b369      	cbz	r1, 17974 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   17918:	460b      	mov	r3, r1
    last = NULL;
   1791a:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1791c:	b32b      	cbz	r3, 1796a <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   1791e:	7ae8      	ldrb	r0, [r5, #11]
   17920:	7ada      	ldrb	r2, [r3, #11]
   17922:	4290      	cmp	r0, r2
   17924:	d321      	bcc.n	1796a <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   17926:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   17928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1792a:	e7f7      	b.n	1791c <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1792c:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   1792e:	7ac3      	ldrb	r3, [r0, #11]
   17930:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   17932:	7b83      	ldrb	r3, [r0, #14]
   17934:	3301      	adds	r3, #1
   17936:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   17938:	2301      	movs	r3, #1
   1793a:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1793c:	4640      	mov	r0, r8
   1793e:	f000 fbd3 	bl	180e8 <os_arch_restore_sr>
        ret = OS_OK;
   17942:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   17944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   17948:	3301      	adds	r3, #1
   1794a:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1794c:	4640      	mov	r0, r8
   1794e:	f000 fbcb 	bl	180e8 <os_arch_restore_sr>
        ret = OS_OK;
   17952:	2000      	movs	r0, #0
        goto done;
   17954:	e7f6      	b.n	17944 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   17956:	4640      	mov	r0, r8
   17958:	f000 fbc6 	bl	180e8 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1795c:	2006      	movs	r0, #6
        goto done;
   1795e:	e7f1      	b.n	17944 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   17960:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   17962:	68a0      	ldr	r0, [r4, #8]
   17964:	f000 f9ca 	bl	17cfc <os_sched_resort>
   17968:	e7d4      	b.n	17914 <os_mutex_pend+0x34>
    if (last) {
   1796a:	b11e      	cbz	r6, 17974 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1796c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   1796e:	64eb      	str	r3, [r5, #76]	; 0x4c
   17970:	64f5      	str	r5, [r6, #76]	; 0x4c
   17972:	e001      	b.n	17978 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   17974:	64e9      	str	r1, [r5, #76]	; 0x4c
   17976:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   17978:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1797a:	7b6b      	ldrb	r3, [r5, #13]
   1797c:	f043 0304 	orr.w	r3, r3, #4
   17980:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   17982:	4639      	mov	r1, r7
   17984:	4628      	mov	r0, r5
   17986:	f000 f8df 	bl	17b48 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1798a:	4640      	mov	r0, r8
   1798c:	f000 fbac 	bl	180e8 <os_arch_restore_sr>
    os_sched(NULL);
   17990:	2000      	movs	r0, #0
   17992:	f000 f9a1 	bl	17cd8 <os_sched>
    OS_ENTER_CRITICAL(sr);
   17996:	f000 fba1 	bl	180dc <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1799a:	7b6b      	ldrb	r3, [r5, #13]
   1799c:	f023 0304 	bic.w	r3, r3, #4
   179a0:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   179a2:	f000 fba1 	bl	180e8 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   179a6:	68a3      	ldr	r3, [r4, #8]
   179a8:	42ab      	cmp	r3, r5
   179aa:	d001      	beq.n	179b0 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   179ac:	2006      	movs	r0, #6
   179ae:	e7c9      	b.n	17944 <os_mutex_pend+0x64>
        ret = OS_OK;
   179b0:	2000      	movs	r0, #0
   179b2:	e7c7      	b.n	17944 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   179b4:	2009      	movs	r0, #9
   179b6:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   179b8:	2003      	movs	r0, #3
}
   179ba:	4770      	bx	lr
   179bc:	2000b628 	.word	0x2000b628

000179c0 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   179c0:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   179c2:	4b05      	ldr	r3, [pc, #20]	; (179d8 <os_sanity_check_list_lock+0x18>)
   179c4:	6818      	ldr	r0, [r3, #0]
   179c6:	b900      	cbnz	r0, 179ca <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   179c8:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   179ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   179ce:	4803      	ldr	r0, [pc, #12]	; (179dc <os_sanity_check_list_lock+0x1c>)
   179d0:	f7ff ff86 	bl	178e0 <os_mutex_pend>
err:
   179d4:	e7f8      	b.n	179c8 <os_sanity_check_list_lock+0x8>
   179d6:	bf00      	nop
   179d8:	2000b628 	.word	0x2000b628
   179dc:	2000b640 	.word	0x2000b640

000179e0 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   179e0:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   179e2:	4b04      	ldr	r3, [pc, #16]	; (179f4 <os_sanity_check_list_unlock+0x14>)
   179e4:	6818      	ldr	r0, [r3, #0]
   179e6:	b900      	cbnz	r0, 179ea <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   179e8:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   179ea:	4803      	ldr	r0, [pc, #12]	; (179f8 <os_sanity_check_list_unlock+0x18>)
   179ec:	f7ff ff1c 	bl	17828 <os_mutex_release>
err:
   179f0:	e7fa      	b.n	179e8 <os_sanity_check_list_unlock+0x8>
   179f2:	bf00      	nop
   179f4:	2000b628 	.word	0x2000b628
   179f8:	2000b640 	.word	0x2000b640

000179fc <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   179fc:	2300      	movs	r3, #0
   179fe:	6003      	str	r3, [r0, #0]
   17a00:	6043      	str	r3, [r0, #4]
   17a02:	6083      	str	r3, [r0, #8]
   17a04:	60c3      	str	r3, [r0, #12]
   17a06:	6103      	str	r3, [r0, #16]
}
   17a08:	4618      	mov	r0, r3
   17a0a:	4770      	bx	lr

00017a0c <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   17a0c:	b510      	push	{r4, lr}
   17a0e:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   17a10:	f7ff ffd6 	bl	179c0 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   17a14:	4603      	mov	r3, r0
   17a16:	b108      	cbz	r0, 17a1c <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   17a18:	4618      	mov	r0, r3
   17a1a:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   17a1c:	4b03      	ldr	r3, [pc, #12]	; (17a2c <os_sanity_check_register+0x20>)
   17a1e:	681a      	ldr	r2, [r3, #0]
   17a20:	6122      	str	r2, [r4, #16]
   17a22:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   17a24:	f7ff ffdc 	bl	179e0 <os_sanity_check_list_unlock>
   17a28:	4603      	mov	r3, r0
err:
   17a2a:	e7f5      	b.n	17a18 <os_sanity_check_register+0xc>
   17a2c:	2000b150 	.word	0x2000b150

00017a30 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   17a30:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   17a32:	f7ff ffc5 	bl	179c0 <os_sanity_check_list_lock>
    if (rc != 0) {
   17a36:	b910      	cbnz	r0, 17a3e <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   17a38:	4b17      	ldr	r3, [pc, #92]	; (17a98 <os_sanity_run+0x68>)
   17a3a:	681c      	ldr	r4, [r3, #0]
   17a3c:	e00e      	b.n	17a5c <os_sanity_run+0x2c>
        assert(0);
   17a3e:	2300      	movs	r3, #0
   17a40:	461a      	mov	r2, r3
   17a42:	4619      	mov	r1, r3
   17a44:	4618      	mov	r0, r3
   17a46:	f7ff f8b3 	bl	16bb0 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   17a4a:	f000 facf 	bl	17fec <os_time_get>
   17a4e:	6823      	ldr	r3, [r4, #0]
   17a50:	6862      	ldr	r2, [r4, #4]
   17a52:	4413      	add	r3, r2
   17a54:	1ac3      	subs	r3, r0, r3
   17a56:	2b00      	cmp	r3, #0
   17a58:	dc0d      	bgt.n	17a76 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   17a5a:	6924      	ldr	r4, [r4, #16]
   17a5c:	b18c      	cbz	r4, 17a82 <os_sanity_run+0x52>
        if (sc->sc_func) {
   17a5e:	68a3      	ldr	r3, [r4, #8]
   17a60:	2b00      	cmp	r3, #0
   17a62:	d0f2      	beq.n	17a4a <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   17a64:	68e1      	ldr	r1, [r4, #12]
   17a66:	4620      	mov	r0, r4
   17a68:	4798      	blx	r3
            if (rc == OS_OK) {
   17a6a:	2800      	cmp	r0, #0
   17a6c:	d1ed      	bne.n	17a4a <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   17a6e:	f000 fabd 	bl	17fec <os_time_get>
   17a72:	6020      	str	r0, [r4, #0]
                continue;
   17a74:	e7f1      	b.n	17a5a <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   17a76:	2300      	movs	r3, #0
   17a78:	461a      	mov	r2, r3
   17a7a:	4619      	mov	r1, r3
   17a7c:	4618      	mov	r0, r3
   17a7e:	f7ff f897 	bl	16bb0 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   17a82:	f7ff ffad 	bl	179e0 <os_sanity_check_list_unlock>
    if (rc != 0) {
   17a86:	b900      	cbnz	r0, 17a8a <os_sanity_run+0x5a>
        assert(0);
    }
}
   17a88:	bd10      	pop	{r4, pc}
        assert(0);
   17a8a:	2300      	movs	r3, #0
   17a8c:	461a      	mov	r2, r3
   17a8e:	4619      	mov	r1, r3
   17a90:	4618      	mov	r0, r3
   17a92:	f7ff f88d 	bl	16bb0 <__assert_func>
   17a96:	bf00      	nop
   17a98:	2000b150 	.word	0x2000b150

00017a9c <os_sanity_init>:

int
os_sanity_init(void)
{
   17a9c:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   17a9e:	4802      	ldr	r0, [pc, #8]	; (17aa8 <os_sanity_init+0xc>)
   17aa0:	f7ff feb8 	bl	17814 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   17aa4:	bd08      	pop	{r3, pc}
   17aa6:	bf00      	nop
   17aa8:	2000b640 	.word	0x2000b640

00017aac <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   17aac:	7b03      	ldrb	r3, [r0, #12]
   17aae:	2b01      	cmp	r3, #1
   17ab0:	d001      	beq.n	17ab6 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   17ab2:	2002      	movs	r0, #2
}
   17ab4:	4770      	bx	lr
{
   17ab6:	b510      	push	{r4, lr}
   17ab8:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   17aba:	f000 fb0f 	bl	180dc <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   17abe:	4b0f      	ldr	r3, [pc, #60]	; (17afc <os_sched_insert+0x50>)
   17ac0:	681b      	ldr	r3, [r3, #0]
   17ac2:	b12b      	cbz	r3, 17ad0 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   17ac4:	7ae1      	ldrb	r1, [r4, #11]
   17ac6:	7ada      	ldrb	r2, [r3, #11]
   17ac8:	4291      	cmp	r1, r2
   17aca:	d301      	bcc.n	17ad0 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   17acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   17ace:	e7f8      	b.n	17ac2 <os_sched_insert+0x16>
    if (entry) {
   17ad0:	b153      	cbz	r3, 17ae8 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   17ad2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   17ad4:	64a2      	str	r2, [r4, #72]	; 0x48
   17ad6:	6463      	str	r3, [r4, #68]	; 0x44
   17ad8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   17ada:	6014      	str	r4, [r2, #0]
   17adc:	3444      	adds	r4, #68	; 0x44
   17ade:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   17ae0:	f000 fb02 	bl	180e8 <os_arch_restore_sr>
    return (0);
   17ae4:	2000      	movs	r0, #0
}
   17ae6:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   17ae8:	2300      	movs	r3, #0
   17aea:	6463      	str	r3, [r4, #68]	; 0x44
   17aec:	4b03      	ldr	r3, [pc, #12]	; (17afc <os_sched_insert+0x50>)
   17aee:	685a      	ldr	r2, [r3, #4]
   17af0:	64a2      	str	r2, [r4, #72]	; 0x48
   17af2:	6014      	str	r4, [r2, #0]
   17af4:	3444      	adds	r4, #68	; 0x44
   17af6:	605c      	str	r4, [r3, #4]
   17af8:	e7f2      	b.n	17ae0 <os_sched_insert+0x34>
   17afa:	bf00      	nop
   17afc:	2000010c 	.word	0x2000010c

00017b00 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   17b00:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   17b02:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   17b04:	3301      	adds	r3, #1
   17b06:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   17b08:	4b06      	ldr	r3, [pc, #24]	; (17b24 <os_sched_ctx_sw_hook+0x24>)
   17b0a:	681c      	ldr	r4, [r3, #0]
   17b0c:	4b06      	ldr	r3, [pc, #24]	; (17b28 <os_sched_ctx_sw_hook+0x28>)
   17b0e:	6818      	ldr	r0, [r3, #0]
   17b10:	4906      	ldr	r1, [pc, #24]	; (17b2c <os_sched_ctx_sw_hook+0x2c>)
   17b12:	680b      	ldr	r3, [r1, #0]
   17b14:	1ac2      	subs	r2, r0, r3
   17b16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17b18:	4413      	add	r3, r2
   17b1a:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   17b1c:	6008      	str	r0, [r1, #0]
}
   17b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
   17b22:	4770      	bx	lr
   17b24:	2000b650 	.word	0x2000b650
   17b28:	2000b660 	.word	0x2000b660
   17b2c:	2000b64c 	.word	0x2000b64c

00017b30 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   17b30:	4b01      	ldr	r3, [pc, #4]	; (17b38 <os_sched_get_current_task+0x8>)
   17b32:	6818      	ldr	r0, [r3, #0]
   17b34:	4770      	bx	lr
   17b36:	bf00      	nop
   17b38:	2000b650 	.word	0x2000b650

00017b3c <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   17b3c:	4b01      	ldr	r3, [pc, #4]	; (17b44 <os_sched_set_current_task+0x8>)
   17b3e:	6018      	str	r0, [r3, #0]
}
   17b40:	4770      	bx	lr
   17b42:	bf00      	nop
   17b44:	2000b650 	.word	0x2000b650

00017b48 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   17b48:	b538      	push	{r3, r4, r5, lr}
   17b4a:	4604      	mov	r4, r0
   17b4c:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   17b4e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   17b50:	b1d3      	cbz	r3, 17b88 <os_sched_sleep+0x40>
   17b52:	6c82      	ldr	r2, [r0, #72]	; 0x48
   17b54:	649a      	str	r2, [r3, #72]	; 0x48
   17b56:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   17b58:	6c62      	ldr	r2, [r4, #68]	; 0x44
   17b5a:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   17b5c:	2302      	movs	r3, #2
   17b5e:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   17b60:	f000 fa44 	bl	17fec <os_time_get>
   17b64:	4428      	add	r0, r5
   17b66:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   17b68:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   17b6c:	d010      	beq.n	17b90 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   17b6e:	4b18      	ldr	r3, [pc, #96]	; (17bd0 <os_sched_sleep+0x88>)
   17b70:	681b      	ldr	r3, [r3, #0]
   17b72:	b1d3      	cbz	r3, 17baa <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   17b74:	7b5a      	ldrb	r2, [r3, #13]
   17b76:	f012 0f01 	tst.w	r2, #1
   17b7a:	d116      	bne.n	17baa <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   17b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   17b7e:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   17b80:	2a00      	cmp	r2, #0
   17b82:	dc12      	bgt.n	17baa <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   17b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   17b86:	e7f4      	b.n	17b72 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   17b88:	6c82      	ldr	r2, [r0, #72]	; 0x48
   17b8a:	4b12      	ldr	r3, [pc, #72]	; (17bd4 <os_sched_sleep+0x8c>)
   17b8c:	605a      	str	r2, [r3, #4]
   17b8e:	e7e2      	b.n	17b56 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   17b90:	7b63      	ldrb	r3, [r4, #13]
   17b92:	f043 0301 	orr.w	r3, r3, #1
   17b96:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   17b98:	2300      	movs	r3, #0
   17b9a:	6463      	str	r3, [r4, #68]	; 0x44
   17b9c:	4b0c      	ldr	r3, [pc, #48]	; (17bd0 <os_sched_sleep+0x88>)
   17b9e:	685a      	ldr	r2, [r3, #4]
   17ba0:	64a2      	str	r2, [r4, #72]	; 0x48
   17ba2:	6014      	str	r4, [r2, #0]
   17ba4:	3444      	adds	r4, #68	; 0x44
   17ba6:	605c      	str	r4, [r3, #4]
   17ba8:	e007      	b.n	17bba <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   17baa:	b143      	cbz	r3, 17bbe <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   17bac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   17bae:	64a2      	str	r2, [r4, #72]	; 0x48
   17bb0:	6463      	str	r3, [r4, #68]	; 0x44
   17bb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   17bb4:	6014      	str	r4, [r2, #0]
   17bb6:	3444      	adds	r4, #68	; 0x44
   17bb8:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   17bba:	2000      	movs	r0, #0
   17bbc:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   17bbe:	2300      	movs	r3, #0
   17bc0:	6463      	str	r3, [r4, #68]	; 0x44
   17bc2:	4b03      	ldr	r3, [pc, #12]	; (17bd0 <os_sched_sleep+0x88>)
   17bc4:	685a      	ldr	r2, [r3, #4]
   17bc6:	64a2      	str	r2, [r4, #72]	; 0x48
   17bc8:	6014      	str	r4, [r2, #0]
   17bca:	3444      	adds	r4, #68	; 0x44
   17bcc:	605c      	str	r4, [r3, #4]
   17bce:	e7f4      	b.n	17bba <os_sched_sleep+0x72>
   17bd0:	20000114 	.word	0x20000114
   17bd4:	2000010c 	.word	0x2000010c

00017bd8 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   17bd8:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   17bda:	7b03      	ldrb	r3, [r0, #12]
   17bdc:	2b02      	cmp	r3, #2
   17bde:	d108      	bne.n	17bf2 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   17be0:	69c3      	ldr	r3, [r0, #28]
   17be2:	b1db      	cbz	r3, 17c1c <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   17be4:	681a      	ldr	r2, [r3, #0]
   17be6:	b152      	cbz	r2, 17bfe <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   17be8:	4282      	cmp	r2, r0
   17bea:	d10f      	bne.n	17c0c <os_sched_wakeup+0x34>
   17bec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   17bee:	601a      	str	r2, [r3, #0]
   17bf0:	e011      	b.n	17c16 <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   17bf2:	2300      	movs	r3, #0
   17bf4:	461a      	mov	r2, r3
   17bf6:	4619      	mov	r1, r3
   17bf8:	4618      	mov	r0, r3
   17bfa:	f7fe ffd9 	bl	16bb0 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   17bfe:	2300      	movs	r3, #0
   17c00:	461a      	mov	r2, r3
   17c02:	4619      	mov	r1, r3
   17c04:	4618      	mov	r0, r3
   17c06:	f7fe ffd3 	bl	16bb0 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   17c0a:	461a      	mov	r2, r3
   17c0c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   17c0e:	4283      	cmp	r3, r0
   17c10:	d1fb      	bne.n	17c0a <os_sched_wakeup+0x32>
   17c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   17c14:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   17c16:	2300      	movs	r3, #0
   17c18:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   17c1a:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   17c1c:	2301      	movs	r3, #1
   17c1e:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   17c20:	2300      	movs	r3, #0
   17c22:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   17c24:	7b43      	ldrb	r3, [r0, #13]
   17c26:	f023 0301 	bic.w	r3, r3, #1
   17c2a:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   17c2c:	6c43      	ldr	r3, [r0, #68]	; 0x44
   17c2e:	b143      	cbz	r3, 17c42 <os_sched_wakeup+0x6a>
   17c30:	6c82      	ldr	r2, [r0, #72]	; 0x48
   17c32:	649a      	str	r2, [r3, #72]	; 0x48
   17c34:	6c83      	ldr	r3, [r0, #72]	; 0x48
   17c36:	6c42      	ldr	r2, [r0, #68]	; 0x44
   17c38:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   17c3a:	f7ff ff37 	bl	17aac <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   17c3e:	2000      	movs	r0, #0
   17c40:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   17c42:	6c82      	ldr	r2, [r0, #72]	; 0x48
   17c44:	4b01      	ldr	r3, [pc, #4]	; (17c4c <os_sched_wakeup+0x74>)
   17c46:	605a      	str	r2, [r3, #4]
   17c48:	e7f4      	b.n	17c34 <os_sched_wakeup+0x5c>
   17c4a:	bf00      	nop
   17c4c:	20000114 	.word	0x20000114

00017c50 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   17c50:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   17c52:	f000 f9cb 	bl	17fec <os_time_get>
   17c56:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   17c58:	f000 fa40 	bl	180dc <os_arch_save_sr>
   17c5c:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   17c5e:	4b0a      	ldr	r3, [pc, #40]	; (17c88 <os_sched_os_timer_exp+0x38>)
   17c60:	6818      	ldr	r0, [r3, #0]
    while (t) {
   17c62:	b160      	cbz	r0, 17c7e <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   17c64:	7b43      	ldrb	r3, [r0, #13]
   17c66:	f013 0f01 	tst.w	r3, #1
   17c6a:	d108      	bne.n	17c7e <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   17c6c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   17c6e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   17c70:	1aeb      	subs	r3, r5, r3
   17c72:	2b00      	cmp	r3, #0
   17c74:	db03      	blt.n	17c7e <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   17c76:	f7ff ffaf 	bl	17bd8 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   17c7a:	4620      	mov	r0, r4
   17c7c:	e7f1      	b.n	17c62 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   17c7e:	4630      	mov	r0, r6
   17c80:	f000 fa32 	bl	180e8 <os_arch_restore_sr>
}
   17c84:	bd70      	pop	{r4, r5, r6, pc}
   17c86:	bf00      	nop
   17c88:	20000114 	.word	0x20000114

00017c8c <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   17c8c:	b510      	push	{r4, lr}
   17c8e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   17c90:	f000 fa2d 	bl	180ee <os_arch_in_critical>
   17c94:	b150      	cbz	r0, 17cac <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   17c96:	4b0c      	ldr	r3, [pc, #48]	; (17cc8 <os_sched_wakeup_ticks+0x3c>)
   17c98:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   17c9a:	b17b      	cbz	r3, 17cbc <os_sched_wakeup_ticks+0x30>
   17c9c:	7b5a      	ldrb	r2, [r3, #13]
   17c9e:	f012 0f01 	tst.w	r2, #1
   17ca2:	d10e      	bne.n	17cc2 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   17ca4:	6b58      	ldr	r0, [r3, #52]	; 0x34
   17ca6:	1b00      	subs	r0, r0, r4
   17ca8:	d406      	bmi.n	17cb8 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   17caa:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   17cac:	2300      	movs	r3, #0
   17cae:	461a      	mov	r2, r3
   17cb0:	4619      	mov	r1, r3
   17cb2:	4618      	mov	r0, r3
   17cb4:	f7fe ff7c 	bl	16bb0 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   17cb8:	2000      	movs	r0, #0
   17cba:	e7f6      	b.n	17caa <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   17cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17cc0:	e7f3      	b.n	17caa <os_sched_wakeup_ticks+0x1e>
   17cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   17cc6:	e7f0      	b.n	17caa <os_sched_wakeup_ticks+0x1e>
   17cc8:	20000114 	.word	0x20000114

00017ccc <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   17ccc:	4b01      	ldr	r3, [pc, #4]	; (17cd4 <os_sched_next_task+0x8>)
   17cce:	6818      	ldr	r0, [r3, #0]
   17cd0:	4770      	bx	lr
   17cd2:	bf00      	nop
   17cd4:	2000010c 	.word	0x2000010c

00017cd8 <os_sched>:
{
   17cd8:	b538      	push	{r3, r4, r5, lr}
   17cda:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   17cdc:	f000 f9fe 	bl	180dc <os_arch_save_sr>
   17ce0:	4605      	mov	r5, r0
    if (!next_t) {
   17ce2:	b134      	cbz	r4, 17cf2 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   17ce4:	4620      	mov	r0, r4
   17ce6:	f000 f9ef 	bl	180c8 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   17cea:	4628      	mov	r0, r5
   17cec:	f000 f9fc 	bl	180e8 <os_arch_restore_sr>
}
   17cf0:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   17cf2:	f7ff ffeb 	bl	17ccc <os_sched_next_task>
   17cf6:	4604      	mov	r4, r0
   17cf8:	e7f4      	b.n	17ce4 <os_sched+0xc>
	...

00017cfc <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   17cfc:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   17cfe:	7b03      	ldrb	r3, [r0, #12]
   17d00:	2b01      	cmp	r3, #1
   17d02:	d000      	beq.n	17d06 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   17d04:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   17d06:	6c43      	ldr	r3, [r0, #68]	; 0x44
   17d08:	b13b      	cbz	r3, 17d1a <os_sched_resort+0x1e>
   17d0a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   17d0c:	649a      	str	r2, [r3, #72]	; 0x48
   17d0e:	6c83      	ldr	r3, [r0, #72]	; 0x48
   17d10:	6c42      	ldr	r2, [r0, #68]	; 0x44
   17d12:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   17d14:	f7ff feca 	bl	17aac <os_sched_insert>
}
   17d18:	e7f4      	b.n	17d04 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   17d1a:	6c82      	ldr	r2, [r0, #72]	; 0x48
   17d1c:	4b01      	ldr	r3, [pc, #4]	; (17d24 <os_sched_resort+0x28>)
   17d1e:	605a      	str	r2, [r3, #4]
   17d20:	e7f5      	b.n	17d0e <os_sched_resort+0x12>
   17d22:	bf00      	nop
   17d24:	2000010c 	.word	0x2000010c

00017d28 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   17d28:	4603      	mov	r3, r0
   17d2a:	b118      	cbz	r0, 17d34 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   17d2c:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   17d2e:	2000      	movs	r0, #0
   17d30:	6018      	str	r0, [r3, #0]
   17d32:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   17d34:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   17d36:	4770      	bx	lr

00017d38 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   17d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   17d3a:	4b17      	ldr	r3, [pc, #92]	; (17d98 <os_sem_release+0x60>)
   17d3c:	681b      	ldr	r3, [r3, #0]
   17d3e:	b33b      	cbz	r3, 17d90 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   17d40:	b340      	cbz	r0, 17d94 <os_sem_release+0x5c>
   17d42:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   17d44:	f7ff fef4 	bl	17b30 <os_sched_get_current_task>
   17d48:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   17d4a:	f000 f9c7 	bl	180dc <os_arch_save_sr>
   17d4e:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   17d50:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   17d52:	b165      	cbz	r5, 17d6e <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   17d54:	7b6b      	ldrb	r3, [r5, #13]
   17d56:	f023 0302 	bic.w	r3, r3, #2
   17d5a:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   17d5c:	4628      	mov	r0, r5
   17d5e:	f7ff ff3b 	bl	17bd8 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   17d62:	7afa      	ldrb	r2, [r7, #11]
   17d64:	7aeb      	ldrb	r3, [r5, #11]
   17d66:	429a      	cmp	r2, r3
   17d68:	d80b      	bhi.n	17d82 <os_sem_release+0x4a>
    resched = 0;
   17d6a:	2400      	movs	r4, #0
   17d6c:	e003      	b.n	17d76 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   17d6e:	88e3      	ldrh	r3, [r4, #6]
   17d70:	3301      	adds	r3, #1
   17d72:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   17d74:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   17d76:	4630      	mov	r0, r6
   17d78:	f000 f9b6 	bl	180e8 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   17d7c:	b91c      	cbnz	r4, 17d86 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   17d7e:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   17d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   17d82:	2401      	movs	r4, #1
   17d84:	e7f7      	b.n	17d76 <os_sem_release+0x3e>
        os_sched(rdy);
   17d86:	4628      	mov	r0, r5
   17d88:	f7ff ffa6 	bl	17cd8 <os_sched>
    ret = OS_OK;
   17d8c:	2000      	movs	r0, #0
   17d8e:	e7f7      	b.n	17d80 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   17d90:	2009      	movs	r0, #9
   17d92:	e7f5      	b.n	17d80 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   17d94:	2003      	movs	r0, #3
   17d96:	e7f3      	b.n	17d80 <os_sem_release+0x48>
   17d98:	2000b628 	.word	0x2000b628

00017d9c <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   17d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   17d9e:	4b2c      	ldr	r3, [pc, #176]	; (17e50 <os_sem_pend+0xb4>)
   17da0:	681b      	ldr	r3, [r3, #0]
   17da2:	2b00      	cmp	r3, #0
   17da4:	d04f      	beq.n	17e46 <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   17da6:	2800      	cmp	r0, #0
   17da8:	d04f      	beq.n	17e4a <os_sem_pend+0xae>
   17daa:	460d      	mov	r5, r1
   17dac:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   17dae:	f7ff febf 	bl	17b30 <os_sched_get_current_task>
   17db2:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   17db4:	f000 f992 	bl	180dc <os_arch_save_sr>
   17db8:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   17dba:	88e3      	ldrh	r3, [r4, #6]
   17dbc:	b14b      	cbz	r3, 17dd2 <os_sem_pend+0x36>
        sem->sem_tokens--;
   17dbe:	3b01      	subs	r3, #1
   17dc0:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   17dc2:	2400      	movs	r4, #0
    sched = 0;
   17dc4:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   17dc6:	4638      	mov	r0, r7
   17dc8:	f000 f98e 	bl	180e8 <os_arch_restore_sr>

    if (sched) {
   17dcc:	bb45      	cbnz	r5, 17e20 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   17dce:	4620      	mov	r0, r4
   17dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   17dd2:	b315      	cbz	r5, 17e1a <os_sem_pend+0x7e>
        current->t_obj = sem;
   17dd4:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   17dd6:	7b73      	ldrb	r3, [r6, #13]
   17dd8:	f043 0302 	orr.w	r3, r3, #2
   17ddc:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   17dde:	f8d4 c000 	ldr.w	ip, [r4]
   17de2:	f1bc 0f00 	cmp.w	ip, #0
   17de6:	d00e      	beq.n	17e06 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   17de8:	4663      	mov	r3, ip
        last = NULL;
   17dea:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   17dec:	b133      	cbz	r3, 17dfc <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   17dee:	7af1      	ldrb	r1, [r6, #11]
   17df0:	7ada      	ldrb	r2, [r3, #11]
   17df2:	4291      	cmp	r1, r2
   17df4:	d302      	bcc.n	17dfc <os_sem_pend+0x60>
                last = entry;
   17df6:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   17df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   17dfa:	e7f7      	b.n	17dec <os_sem_pend+0x50>
        if (last) {
   17dfc:	b118      	cbz	r0, 17e06 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   17dfe:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   17e00:	64f3      	str	r3, [r6, #76]	; 0x4c
   17e02:	64c6      	str	r6, [r0, #76]	; 0x4c
   17e04:	e002      	b.n	17e0c <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   17e06:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   17e0a:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   17e0c:	4629      	mov	r1, r5
   17e0e:	4630      	mov	r0, r6
   17e10:	f7ff fe9a 	bl	17b48 <os_sched_sleep>
        ret = OS_OK;
   17e14:	2400      	movs	r4, #0
        sched = 1;
   17e16:	2501      	movs	r5, #1
   17e18:	e7d5      	b.n	17dc6 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   17e1a:	2406      	movs	r4, #6
    sched = 0;
   17e1c:	2500      	movs	r5, #0
   17e1e:	e7d2      	b.n	17dc6 <os_sem_pend+0x2a>
        os_sched(NULL);
   17e20:	2000      	movs	r0, #0
   17e22:	f7ff ff59 	bl	17cd8 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   17e26:	7b73      	ldrb	r3, [r6, #13]
   17e28:	f013 0f02 	tst.w	r3, #2
   17e2c:	d101      	bne.n	17e32 <os_sem_pend+0x96>
            ret = OS_OK;
   17e2e:	2400      	movs	r4, #0
   17e30:	e7cd      	b.n	17dce <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   17e32:	f000 f953 	bl	180dc <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   17e36:	7b73      	ldrb	r3, [r6, #13]
   17e38:	f023 0302 	bic.w	r3, r3, #2
   17e3c:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   17e3e:	f000 f953 	bl	180e8 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   17e42:	2406      	movs	r4, #6
   17e44:	e7c3      	b.n	17dce <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   17e46:	2409      	movs	r4, #9
   17e48:	e7c1      	b.n	17dce <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   17e4a:	2403      	movs	r4, #3
   17e4c:	e7bf      	b.n	17dce <os_sem_pend+0x32>
   17e4e:	bf00      	nop
   17e50:	2000b628 	.word	0x2000b628

00017e54 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   17e54:	2300      	movs	r3, #0
   17e56:	e003      	b.n	17e60 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   17e58:	4a03      	ldr	r2, [pc, #12]	; (17e68 <_clear_stack+0x14>)
   17e5a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   17e5e:	3301      	adds	r3, #1
   17e60:	428b      	cmp	r3, r1
   17e62:	dbf9      	blt.n	17e58 <_clear_stack+0x4>
    }
}
   17e64:	4770      	bx	lr
   17e66:	bf00      	nop
   17e68:	deadbeef 	.word	0xdeadbeef

00017e6c <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   17e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17e70:	4604      	mov	r4, r0
   17e72:	460f      	mov	r7, r1
   17e74:	4690      	mov	r8, r2
   17e76:	461d      	mov	r5, r3
   17e78:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   17e7c:	2250      	movs	r2, #80	; 0x50
   17e7e:	2100      	movs	r1, #0
   17e80:	f000 fa99 	bl	183b6 <memset>

    t->t_func = func;
   17e84:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   17e88:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   17e8a:	f000 f927 	bl	180dc <os_arch_save_sr>
    rc = g_task_id;
   17e8e:	4b2b      	ldr	r3, [pc, #172]	; (17f3c <os_task_init+0xd0>)
   17e90:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   17e92:	1c6a      	adds	r2, r5, #1
   17e94:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   17e96:	f000 f927 	bl	180e8 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   17e9a:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   17e9c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   17ea0:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   17ea2:	2301      	movs	r3, #1
   17ea4:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   17ea6:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   17ea8:	2300      	movs	r3, #0
   17eaa:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   17eac:	f104 0720 	add.w	r7, r4, #32
   17eb0:	4638      	mov	r0, r7
   17eb2:	f7ff fda3 	bl	179fc <os_sanity_check_init>
    if (rc != OS_OK) {
   17eb6:	4605      	mov	r5, r0
   17eb8:	2800      	cmp	r0, #0
   17eba:	d132      	bne.n	17f22 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   17ebc:	9b07      	ldr	r3, [sp, #28]
   17ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   17ec2:	d005      	beq.n	17ed0 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   17ec4:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   17ec6:	4638      	mov	r0, r7
   17ec8:	f7ff fda0 	bl	17a0c <os_sanity_check_register>
        if (rc != OS_OK) {
   17ecc:	4605      	mov	r5, r0
   17ece:	bb40      	cbnz	r0, 17f22 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   17ed0:	4631      	mov	r1, r6
   17ed2:	9808      	ldr	r0, [sp, #32]
   17ed4:	f7ff ffbe 	bl	17e54 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   17ed8:	9b08      	ldr	r3, [sp, #32]
   17eda:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   17ede:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   17ee0:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   17ee2:	4632      	mov	r2, r6
   17ee4:	4620      	mov	r0, r4
   17ee6:	f000 f907 	bl	180f8 <os_arch_task_stack_init>
   17eea:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   17eec:	4b14      	ldr	r3, [pc, #80]	; (17f40 <os_task_init+0xd4>)
   17eee:	681b      	ldr	r3, [r3, #0]
   17ef0:	b15b      	cbz	r3, 17f0a <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   17ef2:	7ae1      	ldrb	r1, [r4, #11]
   17ef4:	7ada      	ldrb	r2, [r3, #11]
   17ef6:	4291      	cmp	r1, r2
   17ef8:	d001      	beq.n	17efe <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   17efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   17efc:	e7f8      	b.n	17ef0 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   17efe:	2300      	movs	r3, #0
   17f00:	461a      	mov	r2, r3
   17f02:	4619      	mov	r1, r3
   17f04:	4618      	mov	r0, r3
   17f06:	f7fe fe53 	bl	16bb0 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   17f0a:	6423      	str	r3, [r4, #64]	; 0x40
   17f0c:	4b0c      	ldr	r3, [pc, #48]	; (17f40 <os_task_init+0xd4>)
   17f0e:	685a      	ldr	r2, [r3, #4]
   17f10:	6014      	str	r4, [r2, #0]
   17f12:	f104 0240 	add.w	r2, r4, #64	; 0x40
   17f16:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   17f18:	4620      	mov	r0, r4
   17f1a:	f7ff fdc7 	bl	17aac <os_sched_insert>
   17f1e:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   17f20:	b110      	cbz	r0, 17f28 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   17f22:	4628      	mov	r0, r5
   17f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   17f28:	f7fe fefc 	bl	16d24 <os_started>
   17f2c:	b908      	cbnz	r0, 17f32 <os_task_init+0xc6>
    return (0);
   17f2e:	4605      	mov	r5, r0
   17f30:	e7f7      	b.n	17f22 <os_task_init+0xb6>
        os_sched(NULL);
   17f32:	2000      	movs	r0, #0
   17f34:	f7ff fed0 	bl	17cd8 <os_sched>
   17f38:	e7f3      	b.n	17f22 <os_task_init+0xb6>
   17f3a:	bf00      	nop
   17f3c:	2000b654 	.word	0x2000b654
   17f40:	2000b658 	.word	0x2000b658

00017f44 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   17f44:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   17f48:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   17f4a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   17f4e:	e9d1 4500 	ldrd	r4, r5, [r1]
   17f52:	eb14 0b03 	adds.w	fp, r4, r3
   17f56:	f145 0c00 	adc.w	ip, r5, #0
   17f5a:	e9c2 bc00 	strd	fp, ip, [r2]
   17f5e:	688b      	ldr	r3, [r1, #8]
   17f60:	f641 6184 	movw	r1, #7812	; 0x1e84
   17f64:	fb01 3000 	mla	r0, r1, r0, r3
   17f68:	6090      	str	r0, [r2, #8]
   17f6a:	4b08      	ldr	r3, [pc, #32]	; (17f8c <os_deltatime+0x48>)
   17f6c:	4298      	cmp	r0, r3
   17f6e:	dd0a      	ble.n	17f86 <os_deltatime+0x42>
   17f70:	f11b 0401 	adds.w	r4, fp, #1
   17f74:	f14c 0500 	adc.w	r5, ip, #0
   17f78:	e9c2 4500 	strd	r4, r5, [r2]
   17f7c:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   17f80:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   17f84:	6090      	str	r0, [r2, #8]
}
   17f86:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   17f8a:	4770      	bx	lr
   17f8c:	000f423f 	.word	0x000f423f

00017f90 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   17f90:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   17f92:	1e04      	subs	r4, r0, #0
   17f94:	db0d      	blt.n	17fb2 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   17f96:	f000 f8a1 	bl	180dc <os_arch_save_sr>
   17f9a:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   17f9c:	4a11      	ldr	r2, [pc, #68]	; (17fe4 <os_time_tick+0x54>)
   17f9e:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   17fa0:	18e0      	adds	r0, r4, r3
   17fa2:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   17fa4:	ea90 0f03 	teq	r0, r3
   17fa8:	d409      	bmi.n	17fbe <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   17faa:	4628      	mov	r0, r5
   17fac:	f000 f89c 	bl	180e8 <os_arch_restore_sr>
}
   17fb0:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   17fb2:	2300      	movs	r3, #0
   17fb4:	461a      	mov	r2, r3
   17fb6:	4619      	mov	r1, r3
   17fb8:	4618      	mov	r0, r3
   17fba:	f7fe fdf9 	bl	16bb0 <__assert_func>
        delta = g_os_time - basetod.ostime;
   17fbe:	4e0a      	ldr	r6, [pc, #40]	; (17fe8 <os_time_tick+0x58>)
   17fc0:	4631      	mov	r1, r6
   17fc2:	f851 4b08 	ldr.w	r4, [r1], #8
   17fc6:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   17fc8:	460a      	mov	r2, r1
   17fca:	4620      	mov	r0, r4
   17fcc:	f7ff ffba 	bl	17f44 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   17fd0:	f106 0118 	add.w	r1, r6, #24
   17fd4:	460a      	mov	r2, r1
   17fd6:	4620      	mov	r0, r4
   17fd8:	f7ff ffb4 	bl	17f44 <os_deltatime>
        basetod.ostime = g_os_time;
   17fdc:	4b01      	ldr	r3, [pc, #4]	; (17fe4 <os_time_tick+0x54>)
   17fde:	681b      	ldr	r3, [r3, #0]
   17fe0:	6033      	str	r3, [r6, #0]
   17fe2:	e7e2      	b.n	17faa <os_time_tick+0x1a>
   17fe4:	2000b660 	.word	0x2000b660
   17fe8:	2000b158 	.word	0x2000b158

00017fec <os_time_get>:
}
   17fec:	4b01      	ldr	r3, [pc, #4]	; (17ff4 <os_time_get+0x8>)
   17fee:	6818      	ldr	r0, [r3, #0]
   17ff0:	4770      	bx	lr
   17ff2:	bf00      	nop
   17ff4:	2000b660 	.word	0x2000b660

00017ff8 <os_time_advance>:

void
os_time_advance(int ticks)
{
   17ff8:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   17ffa:	1e04      	subs	r4, r0, #0
   17ffc:	db09      	blt.n	18012 <os_time_advance+0x1a>

    if (ticks > 0) {
   17ffe:	2c00      	cmp	r4, #0
   18000:	dd06      	ble.n	18010 <os_time_advance+0x18>
        if (!os_started()) {
   18002:	f7fe fe8f 	bl	16d24 <os_started>
   18006:	b950      	cbnz	r0, 1801e <os_time_advance+0x26>
            g_os_time += ticks;
   18008:	4a0a      	ldr	r2, [pc, #40]	; (18034 <os_time_advance+0x3c>)
   1800a:	6813      	ldr	r3, [r2, #0]
   1800c:	441c      	add	r4, r3
   1800e:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   18010:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   18012:	2300      	movs	r3, #0
   18014:	461a      	mov	r2, r3
   18016:	4619      	mov	r1, r3
   18018:	4618      	mov	r0, r3
   1801a:	f7fe fdc9 	bl	16bb0 <__assert_func>
            os_time_tick(ticks);
   1801e:	4620      	mov	r0, r4
   18020:	f7ff ffb6 	bl	17f90 <os_time_tick>
            os_callout_tick();
   18024:	f7fe ffa6 	bl	16f74 <os_callout_tick>
            os_sched_os_timer_exp();
   18028:	f7ff fe12 	bl	17c50 <os_sched_os_timer_exp>
            os_sched(NULL);
   1802c:	2000      	movs	r0, #0
   1802e:	f7ff fe53 	bl	17cd8 <os_sched>
}
   18032:	e7ed      	b.n	18010 <os_time_advance+0x18>
   18034:	2000b660 	.word	0x2000b660

00018038 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   18038:	b900      	cbnz	r0, 1803c <os_time_delay+0x4>
   1803a:	4770      	bx	lr
{
   1803c:	b538      	push	{r3, r4, r5, lr}
   1803e:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   18040:	f000 f84c 	bl	180dc <os_arch_save_sr>
   18044:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   18046:	f7ff fd73 	bl	17b30 <os_sched_get_current_task>
   1804a:	4621      	mov	r1, r4
   1804c:	f7ff fd7c 	bl	17b48 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   18050:	4628      	mov	r0, r5
   18052:	f000 f849 	bl	180e8 <os_arch_restore_sr>
        os_sched(NULL);
   18056:	2000      	movs	r0, #0
   18058:	f7ff fe3e 	bl	17cd8 <os_sched>
    }
}
   1805c:	bd38      	pop	{r3, r4, r5, pc}
	...

00018060 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   18060:	b570      	push	{r4, r5, r6, lr}
   18062:	4605      	mov	r5, r0
   18064:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   18066:	f000 f839 	bl	180dc <os_arch_save_sr>
   1806a:	4606      	mov	r6, r0
    if (tv != NULL) {
   1806c:	b145      	cbz	r5, 18080 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1806e:	f7ff ffbd 	bl	17fec <os_time_get>
   18072:	4908      	ldr	r1, [pc, #32]	; (18094 <os_gettimeofday+0x34>)
   18074:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   18078:	462a      	mov	r2, r5
   1807a:	1ac0      	subs	r0, r0, r3
   1807c:	f7ff ff62 	bl	17f44 <os_deltatime>
    }

    if (tz != NULL) {
   18080:	b114      	cbz	r4, 18088 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   18082:	4b04      	ldr	r3, [pc, #16]	; (18094 <os_gettimeofday+0x34>)
   18084:	6a98      	ldr	r0, [r3, #40]	; 0x28
   18086:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   18088:	4630      	mov	r0, r6
   1808a:	f000 f82d 	bl	180e8 <os_arch_restore_sr>

    return (0);
}
   1808e:	2000      	movs	r0, #0
   18090:	bd70      	pop	{r4, r5, r6, pc}
   18092:	bf00      	nop
   18094:	2000b158 	.word	0x2000b158

00018098 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   18098:	b538      	push	{r3, r4, r5, lr}
   1809a:	4604      	mov	r4, r0
   1809c:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1809e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   180a2:	2300      	movs	r3, #0
   180a4:	01c0      	lsls	r0, r0, #7
   180a6:	0e61      	lsrs	r1, r4, #25
   180a8:	f002 f88a 	bl	1a1c0 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   180ac:	2901      	cmp	r1, #1
   180ae:	bf08      	it	eq
   180b0:	2800      	cmpeq	r0, #0
   180b2:	d202      	bcs.n	180ba <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   180b4:	6028      	str	r0, [r5, #0]
    return 0;
   180b6:	2000      	movs	r0, #0
}
   180b8:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   180ba:	2002      	movs	r0, #2
   180bc:	e7fc      	b.n	180b8 <os_time_ms_to_ticks+0x20>

000180be <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   180be:	b508      	push	{r3, lr}
    os_time_advance(1);
   180c0:	2001      	movs	r0, #1
   180c2:	f7ff ff99 	bl	17ff8 <os_time_advance>
}
   180c6:	bd08      	pop	{r3, pc}

000180c8 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   180c8:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   180ca:	f7ff fd19 	bl	17b00 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   180ce:	4b02      	ldr	r3, [pc, #8]	; (180d8 <os_arch_ctx_sw+0x10>)
   180d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   180d4:	605a      	str	r2, [r3, #4]
}
   180d6:	bd08      	pop	{r3, pc}
   180d8:	e000ed00 	.word	0xe000ed00

000180dc <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   180dc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   180e0:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   180e2:	f000 0001 	and.w	r0, r0, #1
   180e6:	4770      	bx	lr

000180e8 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   180e8:	b900      	cbnz	r0, 180ec <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   180ea:	b662      	cpsie	i
        __enable_irq();
    }
}
   180ec:	4770      	bx	lr

000180ee <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   180ee:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   180f2:	f000 0001 	and.w	r0, r0, #1
   180f6:	4770      	bx	lr

000180f8 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   180f8:	b570      	push	{r4, r5, r6, lr}
   180fa:	4606      	mov	r6, r0
   180fc:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   180fe:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   18102:	2309      	movs	r3, #9
   18104:	e003      	b.n	1810e <os_arch_task_stack_init+0x16>
        s[i] = 0;
   18106:	2200      	movs	r2, #0
   18108:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   1810c:	3301      	adds	r3, #1
   1810e:	2b0d      	cmp	r3, #13
   18110:	ddf9      	ble.n	18106 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   18112:	4620      	mov	r0, r4
   18114:	f000 f8b6 	bl	18284 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   18118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1811c:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   18120:	6973      	ldr	r3, [r6, #20]
   18122:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   18126:	69b3      	ldr	r3, [r6, #24]
   18128:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   1812c:	f06f 0302 	mvn.w	r3, #2
   18130:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   18134:	4620      	mov	r0, r4
   18136:	bd70      	pop	{r4, r5, r6, pc}

00018138 <os_arch_init>:

void
os_arch_init(void)
{
   18138:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1813a:	4a04      	ldr	r2, [pc, #16]	; (1814c <os_arch_init+0x14>)
   1813c:	6953      	ldr	r3, [r2, #20]
   1813e:	f043 0310 	orr.w	r3, r3, #16
   18142:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   18144:	f7fe fdf4 	bl	16d30 <os_init_idle_task>
}
   18148:	bd08      	pop	{r3, pc}
   1814a:	bf00      	nop
   1814c:	e000ed00 	.word	0xe000ed00

00018150 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   18150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   18152:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   18156:	b90c      	cbnz	r4, 1815c <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   18158:	2400      	movs	r4, #0
   1815a:	e009      	b.n	18170 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1815c:	2007      	movs	r0, #7
   1815e:	e02e      	b.n	181be <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   18160:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   18164:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   18168:	26ff      	movs	r6, #255	; 0xff
   1816a:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1816e:	3401      	adds	r4, #1
   18170:	2cef      	cmp	r4, #239	; 0xef
   18172:	d9f5      	bls.n	18160 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   18174:	f06f 040d 	mvn.w	r4, #13
   18178:	e007      	b.n	1818a <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1817a:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1817c:	4e12      	ldr	r6, [pc, #72]	; (181c8 <os_arch_os_init+0x78>)
   1817e:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18180:	3510      	adds	r5, #16
   18182:	4f12      	ldr	r7, [pc, #72]	; (181cc <os_arch_os_init+0x7c>)
   18184:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   18188:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1818a:	2c25      	cmp	r4, #37	; 0x25
   1818c:	ddf5      	ble.n	1817a <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1818e:	4c0e      	ldr	r4, [pc, #56]	; (181c8 <os_arch_os_init+0x78>)
   18190:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18192:	4e0f      	ldr	r6, [pc, #60]	; (181d0 <os_arch_os_init+0x80>)
   18194:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18196:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18198:	4e0e      	ldr	r6, [pc, #56]	; (181d4 <os_arch_os_init+0x84>)
   1819a:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1819c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1819e:	4e0e      	ldr	r6, [pc, #56]	; (181d8 <os_arch_os_init+0x88>)
   181a0:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   181a2:	25e0      	movs	r5, #224	; 0xe0
   181a4:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   181a8:	2520      	movs	r5, #32
   181aa:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   181ac:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   181b0:	f014 0f01 	tst.w	r4, #1
   181b4:	d004      	beq.n	181c0 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   181b6:	f8df c024 	ldr.w	ip, [pc, #36]	; 181dc <os_arch_os_init+0x8c>
   181ba:	df00      	svc	0
        err = OS_OK;
   181bc:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   181be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   181c0:	f7ff ffba 	bl	18138 <os_arch_init>
        err = OS_OK;
   181c4:	2000      	movs	r0, #0
   181c6:	e7fa      	b.n	181be <os_arch_os_init+0x6e>
   181c8:	e000ed00 	.word	0xe000ed00
   181cc:	00018323 	.word	0x00018323
   181d0:	0001828b 	.word	0x0001828b
   181d4:	000182d1 	.word	0x000182d1
   181d8:	00018317 	.word	0x00018317
   181dc:	00018139 	.word	0x00018139

000181e0 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   181e0:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   181e2:	f7ff fd73 	bl	17ccc <os_sched_next_task>
   181e6:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   181e8:	f7ff fca8 	bl	17b3c <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   181ec:	6823      	ldr	r3, [r4, #0]
   181ee:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   181f0:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   181f4:	2106      	movs	r1, #6
   181f6:	2080      	movs	r0, #128	; 0x80
   181f8:	f000 fde8 	bl	18dcc <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   181fc:	4b03      	ldr	r3, [pc, #12]	; (1820c <os_arch_start+0x2c>)
   181fe:	2201      	movs	r2, #1
   18200:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   18202:	4620      	mov	r0, r4
   18204:	f7ff ff60 	bl	180c8 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   18208:	69a0      	ldr	r0, [r4, #24]
   1820a:	bd10      	pop	{r4, pc}
   1820c:	2000b628 	.word	0x2000b628

00018210 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   18210:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   18212:	4814      	ldr	r0, [pc, #80]	; (18264 <os_arch_os_start+0x54>)
   18214:	6800      	ldr	r0, [r0, #0]
   18216:	3804      	subs	r0, #4
   18218:	f000 f82a 	bl	18270 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1821c:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   18220:	b9d4      	cbnz	r4, 18258 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   18222:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   18226:	f004 0403 	and.w	r4, r4, #3
   1822a:	2c03      	cmp	r4, #3
   1822c:	d808      	bhi.n	18240 <os_arch_os_start+0x30>
   1822e:	e8df f004 	tbb	[pc, r4]
   18232:	1515      	.short	0x1515
   18234:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   18236:	4c0c      	ldr	r4, [pc, #48]	; (18268 <os_arch_os_start+0x58>)
   18238:	6824      	ldr	r4, [r4, #0]
   1823a:	f014 0f01 	tst.w	r4, #1
   1823e:	d10f      	bne.n	18260 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   18240:	f8df c028 	ldr.w	ip, [pc, #40]	; 1826c <os_arch_os_start+0x5c>
   18244:	df00      	svc	0
   18246:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   18248:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1824a:	4c07      	ldr	r4, [pc, #28]	; (18268 <os_arch_os_start+0x58>)
   1824c:	6824      	ldr	r4, [r4, #0]
   1824e:	f014 0f01 	tst.w	r4, #1
   18252:	d1f5      	bne.n	18240 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   18254:	2008      	movs	r0, #8
   18256:	e7f7      	b.n	18248 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   18258:	2007      	movs	r0, #7
   1825a:	e7f5      	b.n	18248 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   1825c:	2008      	movs	r0, #8
   1825e:	e7f3      	b.n	18248 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   18260:	2008      	movs	r0, #8
   18262:	e7f1      	b.n	18248 <os_arch_os_start+0x38>
   18264:	2000b588 	.word	0x2000b588
   18268:	2000b188 	.word	0x2000b188
   1826c:	000181e1 	.word	0x000181e1

00018270 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   18270:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   18274:	4832      	ldr	r0, [pc, #200]	; (18340 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   18276:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   18278:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1827a:	f380 8814 	msr	CONTROL, r0
        ISB
   1827e:	f3bf 8f6f 	isb	sy
        BX      LR
   18282:	4770      	bx	lr

00018284 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   18284:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   18288:	4770      	bx	lr

0001828a <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   1828a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1828e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   18290:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   18294:	b951      	cbnz	r1, 182ac <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   18296:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1829a:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   1829c:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1829e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   182a2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   182a6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   182aa:	4770      	bx	lr

000182ac <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   182ac:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   182ae:	4a25      	ldr	r2, [pc, #148]	; (18344 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   182b0:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   182b2:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   182b4:	d809      	bhi.n	182ca <SVC_Done>

        LDR     R4,=SVC_Table-4
   182b6:	4c24      	ldr	r4, [pc, #144]	; (18348 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   182b8:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   182bc:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   182c0:	47a0      	blx	r4

        MRS     R12,PSP
   182c2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   182c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

000182ca <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   182ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   182ce:	4770      	bx	lr

000182d0 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   182d0:	4b1e      	ldr	r3, [pc, #120]	; (1834c <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   182d2:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   182d4:	4b1e      	ldr	r3, [pc, #120]	; (18350 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   182d6:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   182d8:	4291      	cmp	r1, r2
        IT      EQ
   182da:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   182dc:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   182de:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   182e2:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   182e6:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   182e8:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   182ec:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   182f0:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   182f4:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   182f6:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   182fa:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   182fe:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   18302:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   18304:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   18308:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1830c:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   18310:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   18314:	4770      	bx	lr

00018316 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   18316:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   18318:	f7ff fed1 	bl	180be <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1831c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   18320:	4770      	bx	lr

00018322 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   18322:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   18326:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   18328:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   1832c:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   18330:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   18334:	4668      	mov	r0, sp
        BL      os_default_irq
   18336:	f7fe fc61 	bl	16bfc <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   1833a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   1833e:	4770      	bx	lr
        LDR     R0,=os_flags
   18340:	2000b188 	.word	0x2000b188
        LDR     R2,=SVC_Count
   18344:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   18348:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1834c:	2000010c 	.word	0x2000010c
        LDR     R3,=g_current_task      /* Get current task */
   18350:	2000b650 	.word	0x2000b650

00018354 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   18354:	b470      	push	{r4, r5, r6}
   18356:	f04f 0500 	mov.w	r5, #0
   1835a:	f022 0603 	bic.w	r6, r2, #3
   1835e:	e005      	b.n	1836c <test1>

00018360 <loop1>:
   18360:	5943      	ldr	r3, [r0, r5]
   18362:	594c      	ldr	r4, [r1, r5]
   18364:	42a3      	cmp	r3, r4
   18366:	d104      	bne.n	18372 <res1>
   18368:	f105 0504 	add.w	r5, r5, #4

0001836c <test1>:
   1836c:	42b5      	cmp	r5, r6
   1836e:	d1f7      	bne.n	18360 <loop1>
   18370:	e00d      	b.n	1838e <test2>

00018372 <res1>:
   18372:	ba1b      	rev	r3, r3
   18374:	ba24      	rev	r4, r4
   18376:	1b1b      	subs	r3, r3, r4
   18378:	bf8c      	ite	hi
   1837a:	2301      	movhi	r3, #1
   1837c:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   18380:	e009      	b.n	18396 <done>

00018382 <loop2>:
   18382:	5d43      	ldrb	r3, [r0, r5]
   18384:	5d4c      	ldrb	r4, [r1, r5]
   18386:	1b1b      	subs	r3, r3, r4
   18388:	d105      	bne.n	18396 <done>
   1838a:	f105 0501 	add.w	r5, r5, #1

0001838e <test2>:
   1838e:	4295      	cmp	r5, r2
   18390:	d1f7      	bne.n	18382 <loop2>
   18392:	f04f 0300 	mov.w	r3, #0

00018396 <done>:
   18396:	4618      	mov	r0, r3
   18398:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1839a:	4770      	bx	lr

0001839c <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1839c:	e001      	b.n	183a2 <test1>

0001839e <loop1>:
   1839e:	588b      	ldr	r3, [r1, r2]
   183a0:	5083      	str	r3, [r0, r2]

000183a2 <test1>:
   183a2:	3a04      	subs	r2, #4
   183a4:	d5fb      	bpl.n	1839e <loop1>
   183a6:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   183aa:	e001      	b.n	183b0 <test2>

000183ac <loop2>:
   183ac:	5c8b      	ldrb	r3, [r1, r2]
   183ae:	5483      	strb	r3, [r0, r2]

000183b0 <test2>:
   183b0:	3a01      	subs	r2, #1
   183b2:	d5fb      	bpl.n	183ac <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   183b4:	4770      	bx	lr

000183b6 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   183b6:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   183b8:	4605      	mov	r5, r0
   183ba:	b2c9      	uxtb	r1, r1
   183bc:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   183c0:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   183c4:	18ab      	adds	r3, r5, r2
   183c6:	2403      	movs	r4, #3
   183c8:	4023      	ands	r3, r4
   183ca:	1ad3      	subs	r3, r2, r3
   183cc:	d40b      	bmi.n	183e6 <memset+0x30>
   183ce:	e001      	b.n	183d4 <memset+0x1e>
   183d0:	3a01      	subs	r2, #1
   183d2:	54a9      	strb	r1, [r5, r2]
   183d4:	429a      	cmp	r2, r3
   183d6:	d1fb      	bne.n	183d0 <memset+0x1a>
   183d8:	e000      	b.n	183dc <memset+0x26>
   183da:	50a9      	str	r1, [r5, r2]
   183dc:	3a04      	subs	r2, #4
   183de:	d5fc      	bpl.n	183da <memset+0x24>
   183e0:	3204      	adds	r2, #4
   183e2:	e000      	b.n	183e6 <memset+0x30>
   183e4:	54a9      	strb	r1, [r5, r2]
   183e6:	3a01      	subs	r2, #1
   183e8:	d5fc      	bpl.n	183e4 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   183ea:	bc30      	pop	{r4, r5}
   183ec:	4770      	bx	lr

000183ee <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   183ee:	b430      	push	{r4, r5}
   183f0:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   183f2:	1c55      	adds	r5, r2, #1
   183f4:	7813      	ldrb	r3, [r2, #0]
   183f6:	1c4c      	adds	r4, r1, #1
   183f8:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   183fa:	1a18      	subs	r0, r3, r0
   183fc:	d103      	bne.n	18406 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   183fe:	462a      	mov	r2, r5
   18400:	4621      	mov	r1, r4
		if (d || !ch)
   18402:	2b00      	cmp	r3, #0
   18404:	d1f5      	bne.n	183f2 <strcmp+0x4>
			break;
	}

	return d;
}
   18406:	bc30      	pop	{r4, r5}
   18408:	4770      	bx	lr

0001840a <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1840a:	4603      	mov	r3, r0
	while (*ss)
   1840c:	e000      	b.n	18410 <strlen+0x6>
		ss++;
   1840e:	3301      	adds	r3, #1
	while (*ss)
   18410:	781a      	ldrb	r2, [r3, #0]
   18412:	2a00      	cmp	r2, #0
   18414:	d1fb      	bne.n	1840e <strlen+0x4>
	return ss - s;
}
   18416:	1a18      	subs	r0, r3, r0
   18418:	4770      	bx	lr

0001841a <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1841a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1841e:	b082      	sub	sp, #8
   18420:	e9cd 0100 	strd	r0, r1, [sp]
   18424:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   18426:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   1842a:	2401      	movs	r4, #1
   1842c:	2500      	movs	r5, #0
    while (num / d >= p->base)
   1842e:	e004      	b.n	1843a <ui2a+0x20>
        d *= p->base;
   18430:	fb06 f305 	mul.w	r3, r6, r5
   18434:	fba4 4506 	umull	r4, r5, r4, r6
   18438:	441d      	add	r5, r3
    while (num / d >= p->base)
   1843a:	4622      	mov	r2, r4
   1843c:	462b      	mov	r3, r5
   1843e:	e9dd 0100 	ldrd	r0, r1, [sp]
   18442:	f001 febd 	bl	1a1c0 <__aeabi_uldivmod>
   18446:	f899 6003 	ldrb.w	r6, [r9, #3]
   1844a:	2700      	movs	r7, #0
   1844c:	42b9      	cmp	r1, r7
   1844e:	bf08      	it	eq
   18450:	42b0      	cmpeq	r0, r6
   18452:	d2ed      	bcs.n	18430 <ui2a+0x16>
    int n = 0;
   18454:	f04f 0a00 	mov.w	sl, #0
   18458:	e007      	b.n	1846a <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1845a:	2330      	movs	r3, #48	; 0x30
   1845c:	441e      	add	r6, r3
   1845e:	f888 6000 	strb.w	r6, [r8]
            ++n;
   18462:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   18466:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   1846a:	ea54 0305 	orrs.w	r3, r4, r5
   1846e:	d02e      	beq.n	184ce <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   18470:	4622      	mov	r2, r4
   18472:	462b      	mov	r3, r5
   18474:	e9dd 0100 	ldrd	r0, r1, [sp]
   18478:	f001 fea2 	bl	1a1c0 <__aeabi_uldivmod>
   1847c:	4606      	mov	r6, r0
   1847e:	460f      	mov	r7, r1
        num %= d;
   18480:	4622      	mov	r2, r4
   18482:	462b      	mov	r3, r5
   18484:	e9dd 0100 	ldrd	r0, r1, [sp]
   18488:	f001 fe9a 	bl	1a1c0 <__aeabi_uldivmod>
   1848c:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   18490:	f899 2003 	ldrb.w	r2, [r9, #3]
   18494:	2300      	movs	r3, #0
   18496:	4620      	mov	r0, r4
   18498:	4629      	mov	r1, r5
   1849a:	f001 fe91 	bl	1a1c0 <__aeabi_uldivmod>
   1849e:	4604      	mov	r4, r0
   184a0:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   184a2:	f1ba 0f00 	cmp.w	sl, #0
   184a6:	d105      	bne.n	184b4 <ui2a+0x9a>
   184a8:	ea56 0307 	orrs.w	r3, r6, r7
   184ac:	d102      	bne.n	184b4 <ui2a+0x9a>
   184ae:	ea54 0305 	orrs.w	r3, r4, r5
   184b2:	d1da      	bne.n	1846a <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   184b4:	2f00      	cmp	r7, #0
   184b6:	bf08      	it	eq
   184b8:	2e0a      	cmpeq	r6, #10
   184ba:	d3ce      	bcc.n	1845a <ui2a+0x40>
   184bc:	f899 3002 	ldrb.w	r3, [r9, #2]
   184c0:	f013 0f04 	tst.w	r3, #4
   184c4:	d001      	beq.n	184ca <ui2a+0xb0>
   184c6:	2337      	movs	r3, #55	; 0x37
   184c8:	e7c8      	b.n	1845c <ui2a+0x42>
   184ca:	2357      	movs	r3, #87	; 0x57
   184cc:	e7c6      	b.n	1845c <ui2a+0x42>
        }
    }
    *bf = 0;
   184ce:	2300      	movs	r3, #0
   184d0:	f888 3000 	strb.w	r3, [r8]
}
   184d4:	b002      	add	sp, #8
   184d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000184da <i2a>:

static void i2a(long long int num, struct param *p)
{
   184da:	b508      	push	{r3, lr}
    if (num < 0) {
   184dc:	2800      	cmp	r0, #0
   184de:	f171 0300 	sbcs.w	r3, r1, #0
   184e2:	db02      	blt.n	184ea <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   184e4:	f7ff ff99 	bl	1841a <ui2a>
}
   184e8:	bd08      	pop	{r3, pc}
        num = -num;
   184ea:	4240      	negs	r0, r0
   184ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   184f0:	7893      	ldrb	r3, [r2, #2]
   184f2:	f043 0301 	orr.w	r3, r3, #1
   184f6:	7093      	strb	r3, [r2, #2]
   184f8:	e7f4      	b.n	184e4 <i2a+0xa>

000184fa <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   184fa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   184fe:	b2db      	uxtb	r3, r3
   18500:	2b09      	cmp	r3, #9
   18502:	d90b      	bls.n	1851c <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   18504:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   18508:	b2db      	uxtb	r3, r3
   1850a:	2b05      	cmp	r3, #5
   1850c:	d908      	bls.n	18520 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1850e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   18512:	b2db      	uxtb	r3, r3
   18514:	2b05      	cmp	r3, #5
   18516:	d805      	bhi.n	18524 <a2d+0x2a>
        return ch - 'A' + 10;
   18518:	3837      	subs	r0, #55	; 0x37
   1851a:	4770      	bx	lr
        return ch - '0';
   1851c:	3830      	subs	r0, #48	; 0x30
   1851e:	4770      	bx	lr
        return ch - 'a' + 10;
   18520:	3857      	subs	r0, #87	; 0x57
   18522:	4770      	bx	lr
    else
        return -1;
   18524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18528:	4770      	bx	lr

0001852a <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1852a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1852e:	4605      	mov	r5, r0
   18530:	4688      	mov	r8, r1
   18532:	4617      	mov	r7, r2
   18534:	4699      	mov	r9, r3
    const char *p = *src;
   18536:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   18538:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1853a:	4628      	mov	r0, r5
   1853c:	f7ff ffdd 	bl	184fa <a2d>
   18540:	2800      	cmp	r0, #0
   18542:	db06      	blt.n	18552 <a2i+0x28>
        if (digit > base)
   18544:	42b8      	cmp	r0, r7
   18546:	dc04      	bgt.n	18552 <a2i+0x28>
            break;
        num = num * base + digit;
   18548:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   1854c:	7825      	ldrb	r5, [r4, #0]
   1854e:	3401      	adds	r4, #1
   18550:	e7f3      	b.n	1853a <a2i+0x10>
    }
    *src = p;
   18552:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   18556:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   1855a:	4628      	mov	r0, r5
   1855c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00018560 <putf>:

static int putf(FILE *putp, char c)
{
   18560:	b500      	push	{lr}
   18562:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   18564:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   18568:	6803      	ldr	r3, [r0, #0]
   1856a:	681b      	ldr	r3, [r3, #0]
   1856c:	b14b      	cbz	r3, 18582 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1856e:	2201      	movs	r2, #1
   18570:	f10d 0107 	add.w	r1, sp, #7
   18574:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   18576:	2801      	cmp	r0, #1
   18578:	d005      	beq.n	18586 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1857a:	2000      	movs	r0, #0
    else
        return 1;
}
   1857c:	b003      	add	sp, #12
   1857e:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   18582:	2000      	movs	r0, #0
   18584:	e7fa      	b.n	1857c <putf+0x1c>
        return 1;
   18586:	2001      	movs	r0, #1
   18588:	e7f8      	b.n	1857c <putf+0x1c>
	...

0001858c <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18590:	4606      	mov	r6, r0
   18592:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   18594:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   18596:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   18598:	e001      	b.n	1859e <putchw+0x12>
        n--;
   1859a:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   1859c:	4613      	mov	r3, r2
   1859e:	1c5a      	adds	r2, r3, #1
   185a0:	781b      	ldrb	r3, [r3, #0]
   185a2:	b10b      	cbz	r3, 185a8 <putchw+0x1c>
   185a4:	2c00      	cmp	r4, #0
   185a6:	dcf8      	bgt.n	1859a <putchw+0xe>
    if (p->sign)
   185a8:	78bb      	ldrb	r3, [r7, #2]
   185aa:	f013 0f01 	tst.w	r3, #1
   185ae:	d000      	beq.n	185b2 <putchw+0x26>
        n--;
   185b0:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   185b2:	887b      	ldrh	r3, [r7, #2]
   185b4:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   185b8:	b29b      	uxth	r3, r3
   185ba:	f241 0202 	movw	r2, #4098	; 0x1002
   185be:	4293      	cmp	r3, r2
   185c0:	d01c      	beq.n	185fc <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   185c2:	f640 0202 	movw	r2, #2050	; 0x802
   185c6:	4293      	cmp	r3, r2
   185c8:	d01a      	beq.n	18600 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   185ca:	683b      	ldr	r3, [r7, #0]
   185cc:	4d35      	ldr	r5, [pc, #212]	; (186a4 <putchw+0x118>)
   185ce:	401d      	ands	r5, r3
   185d0:	b1f5      	cbz	r5, 18610 <putchw+0x84>
    unsigned written = 0;
   185d2:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   185d4:	78bb      	ldrb	r3, [r7, #2]
   185d6:	f013 0f01 	tst.w	r3, #1
   185da:	d11f      	bne.n	1861c <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   185dc:	887b      	ldrh	r3, [r7, #2]
   185de:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   185e2:	b29b      	uxth	r3, r3
   185e4:	f241 0202 	movw	r2, #4098	; 0x1002
   185e8:	4293      	cmp	r3, r2
   185ea:	d01d      	beq.n	18628 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   185ec:	f640 0202 	movw	r2, #2050	; 0x802
   185f0:	4293      	cmp	r3, r2
   185f2:	d02a      	beq.n	1864a <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   185f4:	787b      	ldrb	r3, [r7, #1]
   185f6:	bba3      	cbnz	r3, 18662 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   185f8:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   185fa:	e03d      	b.n	18678 <putchw+0xec>
        n -= 2;
   185fc:	3c02      	subs	r4, #2
   185fe:	e7e4      	b.n	185ca <putchw+0x3e>
        n--;
   18600:	3c01      	subs	r4, #1
   18602:	e7e2      	b.n	185ca <putchw+0x3e>
            written += putf(putp, ' ');
   18604:	2120      	movs	r1, #32
   18606:	4630      	mov	r0, r6
   18608:	f7ff ffaa 	bl	18560 <putf>
   1860c:	4405      	add	r5, r0
        while (n-- > 0)
   1860e:	4644      	mov	r4, r8
   18610:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   18614:	2c00      	cmp	r4, #0
   18616:	dcf5      	bgt.n	18604 <putchw+0x78>
   18618:	4644      	mov	r4, r8
   1861a:	e7db      	b.n	185d4 <putchw+0x48>
        written += putf(putp, '-');
   1861c:	212d      	movs	r1, #45	; 0x2d
   1861e:	4630      	mov	r0, r6
   18620:	f7ff ff9e 	bl	18560 <putf>
   18624:	4405      	add	r5, r0
   18626:	e7d9      	b.n	185dc <putchw+0x50>
        written += putf(putp, '0');
   18628:	2130      	movs	r1, #48	; 0x30
   1862a:	4630      	mov	r0, r6
   1862c:	f7ff ff98 	bl	18560 <putf>
   18630:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   18632:	78bb      	ldrb	r3, [r7, #2]
   18634:	f013 0f04 	tst.w	r3, #4
   18638:	d005      	beq.n	18646 <putchw+0xba>
   1863a:	2158      	movs	r1, #88	; 0x58
   1863c:	4630      	mov	r0, r6
   1863e:	f7ff ff8f 	bl	18560 <putf>
   18642:	4405      	add	r5, r0
   18644:	e7d6      	b.n	185f4 <putchw+0x68>
   18646:	2178      	movs	r1, #120	; 0x78
   18648:	e7f8      	b.n	1863c <putchw+0xb0>
        written += putf(putp, '0');
   1864a:	2130      	movs	r1, #48	; 0x30
   1864c:	4630      	mov	r0, r6
   1864e:	f7ff ff87 	bl	18560 <putf>
   18652:	4405      	add	r5, r0
   18654:	e7ce      	b.n	185f4 <putchw+0x68>
            written += putf(putp, '0');
   18656:	2130      	movs	r1, #48	; 0x30
   18658:	4630      	mov	r0, r6
   1865a:	f7ff ff81 	bl	18560 <putf>
   1865e:	4405      	add	r5, r0
        while (n-- > 0)
   18660:	4644      	mov	r4, r8
   18662:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   18666:	2c00      	cmp	r4, #0
   18668:	dcf5      	bgt.n	18656 <putchw+0xca>
   1866a:	4644      	mov	r4, r8
   1866c:	e7c4      	b.n	185f8 <putchw+0x6c>
        written += putf(putp, ch);
   1866e:	4630      	mov	r0, r6
   18670:	f7ff ff76 	bl	18560 <putf>
   18674:	4405      	add	r5, r0
    while ((ch = *bf++))
   18676:	4643      	mov	r3, r8
   18678:	f103 0801 	add.w	r8, r3, #1
   1867c:	7819      	ldrb	r1, [r3, #0]
   1867e:	2900      	cmp	r1, #0
   18680:	d1f5      	bne.n	1866e <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   18682:	78bb      	ldrb	r3, [r7, #2]
   18684:	f013 0f08 	tst.w	r3, #8
   18688:	d106      	bne.n	18698 <putchw+0x10c>
   1868a:	e008      	b.n	1869e <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   1868c:	2120      	movs	r1, #32
   1868e:	4630      	mov	r0, r6
   18690:	f7ff ff66 	bl	18560 <putf>
   18694:	4405      	add	r5, r0
        while (n-- > 0)
   18696:	463c      	mov	r4, r7
   18698:	1e67      	subs	r7, r4, #1
   1869a:	2c00      	cmp	r4, #0
   1869c:	dcf6      	bgt.n	1868c <putchw+0x100>
    }
    
    return written;
}
   1869e:	4628      	mov	r0, r5
   186a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   186a4:	0008ff00 	.word	0x0008ff00

000186a8 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   186a8:	b160      	cbz	r0, 186c4 <intarg+0x1c>
   186aa:	2801      	cmp	r0, #1
   186ac:	d017      	beq.n	186de <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   186ae:	bb19      	cbnz	r1, 186f8 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   186b0:	6813      	ldr	r3, [r2, #0]
   186b2:	3307      	adds	r3, #7
   186b4:	f023 0307 	bic.w	r3, r3, #7
   186b8:	f103 0108 	add.w	r1, r3, #8
   186bc:	6011      	str	r1, [r2, #0]
   186be:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   186c2:	4770      	bx	lr
        if (sign) {
   186c4:	b129      	cbz	r1, 186d2 <intarg+0x2a>
            val = va_arg(*va, int);
   186c6:	6813      	ldr	r3, [r2, #0]
   186c8:	1d19      	adds	r1, r3, #4
   186ca:	6011      	str	r1, [r2, #0]
   186cc:	6818      	ldr	r0, [r3, #0]
   186ce:	17c1      	asrs	r1, r0, #31
   186d0:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   186d2:	6813      	ldr	r3, [r2, #0]
   186d4:	1d19      	adds	r1, r3, #4
   186d6:	6011      	str	r1, [r2, #0]
   186d8:	6818      	ldr	r0, [r3, #0]
   186da:	2100      	movs	r1, #0
   186dc:	4770      	bx	lr
        if (sign) {
   186de:	b129      	cbz	r1, 186ec <intarg+0x44>
            val = va_arg(*va, long);
   186e0:	6813      	ldr	r3, [r2, #0]
   186e2:	1d19      	adds	r1, r3, #4
   186e4:	6011      	str	r1, [r2, #0]
   186e6:	6818      	ldr	r0, [r3, #0]
   186e8:	17c1      	asrs	r1, r0, #31
   186ea:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   186ec:	6813      	ldr	r3, [r2, #0]
   186ee:	1d19      	adds	r1, r3, #4
   186f0:	6011      	str	r1, [r2, #0]
   186f2:	6818      	ldr	r0, [r3, #0]
   186f4:	2100      	movs	r1, #0
   186f6:	4770      	bx	lr
            val = va_arg(*va, long long);
   186f8:	6813      	ldr	r3, [r2, #0]
   186fa:	3307      	adds	r3, #7
   186fc:	f023 0307 	bic.w	r3, r3, #7
   18700:	f103 0108 	add.w	r1, r3, #8
   18704:	6011      	str	r1, [r2, #0]
   18706:	e9d3 0100 	ldrd	r0, r1, [r3]
   1870a:	4770      	bx	lr

0001870c <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1870c:	b570      	push	{r4, r5, r6, lr}
   1870e:	b08a      	sub	sp, #40	; 0x28
   18710:	4605      	mov	r5, r0
   18712:	9101      	str	r1, [sp, #4]
   18714:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   18716:	ab02      	add	r3, sp, #8
   18718:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1871a:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   1871c:	9b01      	ldr	r3, [sp, #4]
   1871e:	1c5a      	adds	r2, r3, #1
   18720:	9201      	str	r2, [sp, #4]
   18722:	7819      	ldrb	r1, [r3, #0]
   18724:	2900      	cmp	r1, #0
   18726:	f000 811c 	beq.w	18962 <tfp_format+0x256>
        if (ch != '%') {
   1872a:	2925      	cmp	r1, #37	; 0x25
   1872c:	d004      	beq.n	18738 <tfp_format+0x2c>
            written += putf(putp, ch);
   1872e:	4628      	mov	r0, r5
   18730:	f7ff ff16 	bl	18560 <putf>
   18734:	4404      	add	r4, r0
   18736:	e7f1      	b.n	1871c <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   18738:	2200      	movs	r2, #0
   1873a:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1873e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   18742:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   18746:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   1874a:	f362 0382 	bfi	r3, r2, #2, #1
   1874e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   18752:	9b01      	ldr	r3, [sp, #4]
   18754:	1c5a      	adds	r2, r3, #1
   18756:	9201      	str	r2, [sp, #4]
   18758:	7818      	ldrb	r0, [r3, #0]
   1875a:	b128      	cbz	r0, 18768 <tfp_format+0x5c>
                switch (ch) {
   1875c:	282d      	cmp	r0, #45	; 0x2d
   1875e:	d04e      	beq.n	187fe <tfp_format+0xf2>
   18760:	2830      	cmp	r0, #48	; 0x30
   18762:	d03c      	beq.n	187de <tfp_format+0xd2>
   18764:	2823      	cmp	r0, #35	; 0x23
   18766:	d043      	beq.n	187f0 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   18768:	282a      	cmp	r0, #42	; 0x2a
   1876a:	d052      	beq.n	18812 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1876c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   18770:	b2db      	uxtb	r3, r3
   18772:	2b09      	cmp	r3, #9
   18774:	d961      	bls.n	1883a <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   18776:	286c      	cmp	r0, #108	; 0x6c
   18778:	d065      	beq.n	18846 <tfp_format+0x13a>
            lng = 0;
   1877a:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   1877c:	287a      	cmp	r0, #122	; 0x7a
   1877e:	d06f      	beq.n	18860 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   18780:	2869      	cmp	r0, #105	; 0x69
   18782:	f000 808e 	beq.w	188a2 <tfp_format+0x196>
   18786:	d970      	bls.n	1886a <tfp_format+0x15e>
   18788:	2873      	cmp	r0, #115	; 0x73
   1878a:	f000 80dd 	beq.w	18948 <tfp_format+0x23c>
   1878e:	f200 8099 	bhi.w	188c4 <tfp_format+0x1b8>
   18792:	286f      	cmp	r0, #111	; 0x6f
   18794:	f000 80c7 	beq.w	18926 <tfp_format+0x21a>
   18798:	2870      	cmp	r0, #112	; 0x70
   1879a:	d1bf      	bne.n	1871c <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   1879c:	9b00      	ldr	r3, [sp, #0]
   1879e:	1d1a      	adds	r2, r3, #4
   187a0:	9200      	str	r2, [sp, #0]
   187a2:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   187a4:	2310      	movs	r3, #16
   187a6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   187aa:	aa08      	add	r2, sp, #32
   187ac:	2100      	movs	r1, #0
   187ae:	f7ff fe34 	bl	1841a <ui2a>
                p.width = 2 * sizeof(void*);
   187b2:	2308      	movs	r3, #8
   187b4:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   187b8:	2301      	movs	r3, #1
   187ba:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   187be:	2130      	movs	r1, #48	; 0x30
   187c0:	4628      	mov	r0, r5
   187c2:	f7ff fecd 	bl	18560 <putf>
   187c6:	4404      	add	r4, r0
                written += putf(putp, 'x');
   187c8:	2178      	movs	r1, #120	; 0x78
   187ca:	4628      	mov	r0, r5
   187cc:	f7ff fec8 	bl	18560 <putf>
   187d0:	4404      	add	r4, r0
                written += putchw(putp, &p);
   187d2:	a908      	add	r1, sp, #32
   187d4:	4628      	mov	r0, r5
   187d6:	f7ff fed9 	bl	1858c <putchw>
   187da:	4404      	add	r4, r0
                break;
   187dc:	e79e      	b.n	1871c <tfp_format+0x10>
                    if (!p.left) {
   187de:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   187e2:	f013 0f08 	tst.w	r3, #8
   187e6:	d1b4      	bne.n	18752 <tfp_format+0x46>
                        p.lz = 1;
   187e8:	2301      	movs	r3, #1
   187ea:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   187ee:	e7b0      	b.n	18752 <tfp_format+0x46>
                    p.alt = 1;
   187f0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   187f4:	f043 0302 	orr.w	r3, r3, #2
   187f8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   187fc:	e7a9      	b.n	18752 <tfp_format+0x46>
                    p.left = 1;
   187fe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   18802:	f043 0308 	orr.w	r3, r3, #8
   18806:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1880a:	2300      	movs	r3, #0
   1880c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   18810:	e79f      	b.n	18752 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   18812:	466a      	mov	r2, sp
   18814:	2101      	movs	r1, #1
   18816:	2000      	movs	r0, #0
   18818:	f7ff ff46 	bl	186a8 <intarg>
                if (i > UCHAR_MAX) {
   1881c:	28ff      	cmp	r0, #255	; 0xff
   1881e:	dd07      	ble.n	18830 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   18820:	23ff      	movs	r3, #255	; 0xff
   18822:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   18826:	9b01      	ldr	r3, [sp, #4]
   18828:	1c5a      	adds	r2, r3, #1
   1882a:	9201      	str	r2, [sp, #4]
   1882c:	7818      	ldrb	r0, [r3, #0]
   1882e:	e7a2      	b.n	18776 <tfp_format+0x6a>
                } else if (i > 0) {
   18830:	2800      	cmp	r0, #0
   18832:	ddf8      	ble.n	18826 <tfp_format+0x11a>
                    p.width = i;
   18834:	f88d 0020 	strb.w	r0, [sp, #32]
   18838:	e7f5      	b.n	18826 <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1883a:	ab08      	add	r3, sp, #32
   1883c:	220a      	movs	r2, #10
   1883e:	a901      	add	r1, sp, #4
   18840:	f7ff fe73 	bl	1852a <a2i>
   18844:	e797      	b.n	18776 <tfp_format+0x6a>
                ch = *(fmt++);
   18846:	9b01      	ldr	r3, [sp, #4]
   18848:	1c5a      	adds	r2, r3, #1
   1884a:	9201      	str	r2, [sp, #4]
   1884c:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   1884e:	286c      	cmp	r0, #108	; 0x6c
   18850:	d001      	beq.n	18856 <tfp_format+0x14a>
                lng = 1;
   18852:	2601      	movs	r6, #1
   18854:	e792      	b.n	1877c <tfp_format+0x70>
                    ch = *(fmt++);
   18856:	1c9a      	adds	r2, r3, #2
   18858:	9201      	str	r2, [sp, #4]
   1885a:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   1885c:	2602      	movs	r6, #2
   1885e:	e78d      	b.n	1877c <tfp_format+0x70>
                ch = *(fmt++);
   18860:	9b01      	ldr	r3, [sp, #4]
   18862:	1c5a      	adds	r2, r3, #1
   18864:	9201      	str	r2, [sp, #4]
   18866:	7818      	ldrb	r0, [r3, #0]
   18868:	e78a      	b.n	18780 <tfp_format+0x74>
            switch (ch) {
   1886a:	2858      	cmp	r0, #88	; 0x58
   1886c:	d040      	beq.n	188f0 <tfp_format+0x1e4>
   1886e:	d80a      	bhi.n	18886 <tfp_format+0x17a>
   18870:	2800      	cmp	r0, #0
   18872:	d076      	beq.n	18962 <tfp_format+0x256>
   18874:	2825      	cmp	r0, #37	; 0x25
   18876:	f47f af51 	bne.w	1871c <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1887a:	4601      	mov	r1, r0
   1887c:	4628      	mov	r0, r5
   1887e:	f7ff fe6f 	bl	18560 <putf>
   18882:	4404      	add	r4, r0
                break;
   18884:	e74a      	b.n	1871c <tfp_format+0x10>
            switch (ch) {
   18886:	2863      	cmp	r0, #99	; 0x63
   18888:	d108      	bne.n	1889c <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   1888a:	9b00      	ldr	r3, [sp, #0]
   1888c:	1d1a      	adds	r2, r3, #4
   1888e:	9200      	str	r2, [sp, #0]
   18890:	7819      	ldrb	r1, [r3, #0]
   18892:	4628      	mov	r0, r5
   18894:	f7ff fe64 	bl	18560 <putf>
   18898:	4404      	add	r4, r0
                break;
   1889a:	e73f      	b.n	1871c <tfp_format+0x10>
            switch (ch) {
   1889c:	2864      	cmp	r0, #100	; 0x64
   1889e:	f47f af3d 	bne.w	1871c <tfp_format+0x10>
                p.base = 10;
   188a2:	230a      	movs	r3, #10
   188a4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   188a8:	466a      	mov	r2, sp
   188aa:	2101      	movs	r1, #1
   188ac:	4630      	mov	r0, r6
   188ae:	f7ff fefb 	bl	186a8 <intarg>
   188b2:	aa08      	add	r2, sp, #32
   188b4:	f7ff fe11 	bl	184da <i2a>
                written += putchw(putp, &p);
   188b8:	a908      	add	r1, sp, #32
   188ba:	4628      	mov	r0, r5
   188bc:	f7ff fe66 	bl	1858c <putchw>
   188c0:	4404      	add	r4, r0
                break;
   188c2:	e72b      	b.n	1871c <tfp_format+0x10>
            switch (ch) {
   188c4:	2875      	cmp	r0, #117	; 0x75
   188c6:	d110      	bne.n	188ea <tfp_format+0x1de>
                p.base = 10;
   188c8:	230a      	movs	r3, #10
   188ca:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   188ce:	466a      	mov	r2, sp
   188d0:	2100      	movs	r1, #0
   188d2:	4630      	mov	r0, r6
   188d4:	f7ff fee8 	bl	186a8 <intarg>
   188d8:	aa08      	add	r2, sp, #32
   188da:	f7ff fd9e 	bl	1841a <ui2a>
                written += putchw(putp, &p);
   188de:	a908      	add	r1, sp, #32
   188e0:	4628      	mov	r0, r5
   188e2:	f7ff fe53 	bl	1858c <putchw>
   188e6:	4404      	add	r4, r0
                break;
   188e8:	e718      	b.n	1871c <tfp_format+0x10>
            switch (ch) {
   188ea:	2878      	cmp	r0, #120	; 0x78
   188ec:	f47f af16 	bne.w	1871c <tfp_format+0x10>
                p.base = 16;
   188f0:	2310      	movs	r3, #16
   188f2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   188f6:	2858      	cmp	r0, #88	; 0x58
   188f8:	bf14      	ite	ne
   188fa:	2300      	movne	r3, #0
   188fc:	2301      	moveq	r3, #1
   188fe:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   18902:	f363 0282 	bfi	r2, r3, #2, #1
   18906:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1890a:	466a      	mov	r2, sp
   1890c:	2100      	movs	r1, #0
   1890e:	4630      	mov	r0, r6
   18910:	f7ff feca 	bl	186a8 <intarg>
   18914:	aa08      	add	r2, sp, #32
   18916:	f7ff fd80 	bl	1841a <ui2a>
                written += putchw(putp, &p);
   1891a:	a908      	add	r1, sp, #32
   1891c:	4628      	mov	r0, r5
   1891e:	f7ff fe35 	bl	1858c <putchw>
   18922:	4404      	add	r4, r0
                break;
   18924:	e6fa      	b.n	1871c <tfp_format+0x10>
                p.base = 8;
   18926:	2308      	movs	r3, #8
   18928:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1892c:	466a      	mov	r2, sp
   1892e:	2100      	movs	r1, #0
   18930:	4630      	mov	r0, r6
   18932:	f7ff feb9 	bl	186a8 <intarg>
   18936:	aa08      	add	r2, sp, #32
   18938:	f7ff fd6f 	bl	1841a <ui2a>
                written += putchw(putp, &p);
   1893c:	a908      	add	r1, sp, #32
   1893e:	4628      	mov	r0, r5
   18940:	f7ff fe24 	bl	1858c <putchw>
   18944:	4404      	add	r4, r0
                break;
   18946:	e6e9      	b.n	1871c <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   18948:	9b00      	ldr	r3, [sp, #0]
   1894a:	1d1a      	adds	r2, r3, #4
   1894c:	9200      	str	r2, [sp, #0]
   1894e:	681b      	ldr	r3, [r3, #0]
   18950:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   18952:	a908      	add	r1, sp, #32
   18954:	4628      	mov	r0, r5
   18956:	f7ff fe19 	bl	1858c <putchw>
   1895a:	4404      	add	r4, r0
                p.bf = bf;
   1895c:	ab02      	add	r3, sp, #8
   1895e:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   18960:	e6dc      	b.n	1871c <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   18962:	4620      	mov	r0, r4
   18964:	b00a      	add	sp, #40	; 0x28
   18966:	bd70      	pop	{r4, r5, r6, pc}

00018968 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   18968:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1896a:	f7ff fecf 	bl	1870c <tfp_format>
}
   1896e:	bd08      	pop	{r3, pc}

00018970 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   18970:	b40f      	push	{r0, r1, r2, r3}
   18972:	b500      	push	{lr}
   18974:	b083      	sub	sp, #12
   18976:	aa04      	add	r2, sp, #16
   18978:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1897c:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1897e:	4b04      	ldr	r3, [pc, #16]	; (18990 <printf+0x20>)
   18980:	6818      	ldr	r0, [r3, #0]
   18982:	f7ff fff1 	bl	18968 <vfprintf>
    va_end(va);
    return rv;
}
   18986:	b003      	add	sp, #12
   18988:	f85d eb04 	ldr.w	lr, [sp], #4
   1898c:	b004      	add	sp, #16
   1898e:	4770      	bx	lr
   18990:	0001e514 	.word	0x0001e514

00018994 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   18994:	b5f0      	push	{r4, r5, r6, r7, lr}
   18996:	b085      	sub	sp, #20
   18998:	4605      	mov	r5, r0
   1899a:	460c      	mov	r4, r1
   1899c:	4616      	mov	r6, r2
   1899e:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   189a0:	460a      	mov	r2, r1
   189a2:	4601      	mov	r1, r0
   189a4:	4668      	mov	r0, sp
   189a6:	f000 f835 	bl	18a14 <fmemopen_w>
    tfp_format(f, fmt, va);
   189aa:	463a      	mov	r2, r7
   189ac:	4631      	mov	r1, r6
   189ae:	f7ff fead 	bl	1870c <tfp_format>
    if (size > 0) {
   189b2:	b12c      	cbz	r4, 189c0 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   189b4:	9b02      	ldr	r3, [sp, #8]
   189b6:	42a3      	cmp	r3, r4
   189b8:	d305      	bcc.n	189c6 <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   189ba:	3c01      	subs	r4, #1
   189bc:	2300      	movs	r3, #0
   189be:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   189c0:	9802      	ldr	r0, [sp, #8]
   189c2:	b005      	add	sp, #20
   189c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   189c6:	9b01      	ldr	r3, [sp, #4]
   189c8:	2200      	movs	r2, #0
   189ca:	701a      	strb	r2, [r3, #0]
   189cc:	e7f8      	b.n	189c0 <vsnprintf+0x2c>
	...

000189d0 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   189d0:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   189d2:	460a      	mov	r2, r1
   189d4:	4601      	mov	r1, r0
   189d6:	4b02      	ldr	r3, [pc, #8]	; (189e0 <vprintf+0x10>)
   189d8:	6818      	ldr	r0, [r3, #0]
   189da:	f7ff ffc5 	bl	18968 <vfprintf>
}
   189de:	bd08      	pop	{r3, pc}
   189e0:	0001e514 	.word	0x0001e514

000189e4 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   189e4:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   189e6:	2500      	movs	r5, #0
    
    while (n--)
   189e8:	e000      	b.n	189ec <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   189ea:	4622      	mov	r2, r4
    while (n--)
   189ec:	1e54      	subs	r4, r2, #1
   189ee:	b16a      	cbz	r2, 18a0c <memfile_write+0x28>
        f->bytes_written++;
   189f0:	6883      	ldr	r3, [r0, #8]
   189f2:	3301      	adds	r3, #1
   189f4:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   189f6:	68c2      	ldr	r2, [r0, #12]
   189f8:	4293      	cmp	r3, r2
   189fa:	d8f6      	bhi.n	189ea <memfile_write+0x6>
            *f->buffer++ = *bp++;
   189fc:	6843      	ldr	r3, [r0, #4]
   189fe:	1c5a      	adds	r2, r3, #1
   18a00:	6042      	str	r2, [r0, #4]
   18a02:	780a      	ldrb	r2, [r1, #0]
   18a04:	701a      	strb	r2, [r3, #0]
            i++;
   18a06:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   18a08:	3101      	adds	r1, #1
   18a0a:	e7ee      	b.n	189ea <memfile_write+0x6>
        }
    }
    
    return i;
}
   18a0c:	4628      	mov	r0, r5
   18a0e:	bc30      	pop	{r4, r5}
   18a10:	4770      	bx	lr
	...

00018a14 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   18a14:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   18a16:	4c04      	ldr	r4, [pc, #16]	; (18a28 <fmemopen_w+0x14>)
   18a18:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   18a1a:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   18a1c:	2100      	movs	r1, #0
   18a1e:	6081      	str	r1, [r0, #8]
    storage->size = size;
   18a20:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   18a22:	f85d 4b04 	ldr.w	r4, [sp], #4
   18a26:	4770      	bx	lr
   18a28:	0001e50c 	.word	0x0001e50c

00018a2c <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   18a2c:	2000      	movs	r0, #0
   18a2e:	4770      	bx	lr

00018a30 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   18a30:	b510      	push	{r4, lr}
   18a32:	4608      	mov	r0, r1
   18a34:	4614      	mov	r4, r2
    console_write(bp, n);
   18a36:	4611      	mov	r1, r2
   18a38:	f7fd f9b8 	bl	15dac <console_write>
    return n;
}
   18a3c:	4620      	mov	r0, r4
   18a3e:	bd10      	pop	{r4, pc}

00018a40 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   18a40:	b508      	push	{r3, lr}
    sysinit();
   18a42:	f7fd fa1b 	bl	15e7c <sysinit_start>
   18a46:	f000 f81b 	bl	18a80 <sysinit_app>
   18a4a:	f7fd fa1d 	bl	15e88 <sysinit_end>
}
   18a4e:	bd08      	pop	{r3, pc}

00018a50 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   18a50:	b570      	push	{r4, r5, r6, lr}
   18a52:	b082      	sub	sp, #8
   18a54:	460c      	mov	r4, r1
   18a56:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   18a58:	b29d      	uxth	r5, r3
   18a5a:	9b07      	ldr	r3, [sp, #28]
   18a5c:	9300      	str	r3, [sp, #0]
   18a5e:	4603      	mov	r3, r0
   18a60:	9a06      	ldr	r2, [sp, #24]
   18a62:	4629      	mov	r1, r5
   18a64:	4620      	mov	r0, r4
   18a66:	f7fe fdeb 	bl	17640 <os_mempool_init>
    if (rc != 0) {
   18a6a:	b108      	cbz	r0, 18a70 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   18a6c:	b002      	add	sp, #8
   18a6e:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   18a70:	462b      	mov	r3, r5
   18a72:	9a06      	ldr	r2, [sp, #24]
   18a74:	b292      	uxth	r2, r2
   18a76:	4621      	mov	r1, r4
   18a78:	4630      	mov	r0, r6
   18a7a:	f7fe fc96 	bl	173aa <os_mbuf_pool_init>
   18a7e:	e7f5      	b.n	18a6c <mem_init_mbuf_pool+0x1c>

00018a80 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   18a80:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   18a82:	f7fe f9f3 	bl	16e6c <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   18a86:	f001 f985 	bl	19d94 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   18a8a:	f7fd f9a3 	bl	15dd4 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   18a8e:	f001 fac7 	bl	1a020 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   18a92:	f001 f9b7 	bl	19e04 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   18a96:	f001 f8e1 	bl	19c5c <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   18a9a:	f001 f8f1 	bl	19c80 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   18a9e:	f001 f8f0 	bl	19c82 <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   18aa2:	f001 f8ef 	bl	19c84 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   18aa6:	f001 f8ee 	bl	19c86 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   18aaa:	f001 f8ed 	bl	19c88 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   18aae:	f000 fbd1 	bl	19254 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   18ab2:	f000 fd1f 	bl	194f4 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   18ab6:	f000 ff3d 	bl	19934 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   18aba:	f000 feb3 	bl	19824 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   18abe:	f000 fe3d 	bl	1973c <init_sensor_coap>
}
   18ac2:	bd08      	pop	{r3, pc}

00018ac4 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   18ac4:	b908      	cbnz	r0, 18aca <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   18ac6:	4802      	ldr	r0, [pc, #8]	; (18ad0 <hal_bsp_flash_dev+0xc>)
   18ac8:	4770      	bx	lr
    }

    return NULL;
   18aca:	2000      	movs	r0, #0
}
   18acc:	4770      	bx	lr
   18ace:	bf00      	nop
   18ad0:	0001e518 	.word	0x0001e518

00018ad4 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   18ad4:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   18ad6:	f7ef fb73 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   18ada:	f000 fbb3 	bl	19244 <nrf52_periph_create>
}
   18ade:	bd08      	pop	{r3, pc}

00018ae0 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   18ae0:	2300      	movs	r3, #0
   18ae2:	4a07      	ldr	r2, [pc, #28]	; (18b00 <nrf52k_flash_wait_ready+0x20>)
   18ae4:	4293      	cmp	r3, r2
   18ae6:	dc06      	bgt.n	18af6 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   18ae8:	4a06      	ldr	r2, [pc, #24]	; (18b04 <nrf52k_flash_wait_ready+0x24>)
   18aea:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   18aee:	2a01      	cmp	r2, #1
   18af0:	d004      	beq.n	18afc <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   18af2:	3301      	adds	r3, #1
   18af4:	e7f5      	b.n	18ae2 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   18af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18afa:	4770      	bx	lr
            return 0;
   18afc:	2000      	movs	r0, #0
}
   18afe:	4770      	bx	lr
   18b00:	0001869f 	.word	0x0001869f
   18b04:	4001e000 	.word	0x4001e000

00018b08 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   18b08:	b538      	push	{r3, r4, r5, lr}
   18b0a:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   18b0c:	f7ff ffe8 	bl	18ae0 <nrf52k_flash_wait_ready>
   18b10:	b9f0      	cbnz	r0, 18b50 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18b12:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18b16:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   18b18:	4b0f      	ldr	r3, [pc, #60]	; (18b58 <nrf52k_flash_erase_sector+0x50>)
   18b1a:	2202      	movs	r2, #2
   18b1c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   18b20:	f7ff ffde 	bl	18ae0 <nrf52k_flash_wait_ready>
   18b24:	b148      	cbz	r0, 18b3a <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   18b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   18b2a:	4a0b      	ldr	r2, [pc, #44]	; (18b58 <nrf52k_flash_erase_sector+0x50>)
   18b2c:	2100      	movs	r1, #0
   18b2e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   18b32:	b904      	cbnz	r4, 18b36 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   18b34:	b662      	cpsie	i
    return rc;
}
   18b36:	4618      	mov	r0, r3
   18b38:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   18b3a:	4b07      	ldr	r3, [pc, #28]	; (18b58 <nrf52k_flash_erase_sector+0x50>)
   18b3c:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   18b40:	f7ff ffce 	bl	18ae0 <nrf52k_flash_wait_ready>
   18b44:	4603      	mov	r3, r0
   18b46:	2800      	cmp	r0, #0
   18b48:	d0ef      	beq.n	18b2a <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   18b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18b4e:	e7ec      	b.n	18b2a <nrf52k_flash_erase_sector+0x22>
        return -1;
   18b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18b54:	e7ef      	b.n	18b36 <nrf52k_flash_erase_sector+0x2e>
   18b56:	bf00      	nop
   18b58:	4001e000 	.word	0x4001e000

00018b5c <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   18b5c:	2000      	movs	r0, #0
   18b5e:	4770      	bx	lr

00018b60 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   18b60:	297f      	cmp	r1, #127	; 0x7f
   18b62:	dc06      	bgt.n	18b72 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   18b64:	0309      	lsls	r1, r1, #12
   18b66:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   18b68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   18b6c:	601a      	str	r2, [r3, #0]
}
   18b6e:	2000      	movs	r0, #0
   18b70:	4770      	bx	lr
{
   18b72:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   18b74:	2300      	movs	r3, #0
   18b76:	461a      	mov	r2, r3
   18b78:	4619      	mov	r1, r3
   18b7a:	4618      	mov	r0, r3
   18b7c:	f7fe f818 	bl	16bb0 <__assert_func>

00018b80 <nrf52k_flash_write>:
{
   18b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   18b84:	b082      	sub	sp, #8
   18b86:	460d      	mov	r5, r1
   18b88:	4616      	mov	r6, r2
   18b8a:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   18b8c:	f7ff ffa8 	bl	18ae0 <nrf52k_flash_wait_ready>
   18b90:	2800      	cmp	r0, #0
   18b92:	d158      	bne.n	18c46 <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18b94:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18b98:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   18b9a:	4b2c      	ldr	r3, [pc, #176]	; (18c4c <nrf52k_flash_write+0xcc>)
   18b9c:	2201      	movs	r2, #1
   18b9e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   18ba2:	f015 0803 	ands.w	r8, r5, #3
   18ba6:	d10b      	bne.n	18bc0 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   18ba8:	2c03      	cmp	r4, #3
   18baa:	d925      	bls.n	18bf8 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   18bac:	f7ff ff98 	bl	18ae0 <nrf52k_flash_wait_ready>
   18bb0:	2800      	cmp	r0, #0
   18bb2:	d139      	bne.n	18c28 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   18bb4:	f856 3b04 	ldr.w	r3, [r6], #4
   18bb8:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   18bbc:	3c04      	subs	r4, #4
   18bbe:	e7f3      	b.n	18ba8 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   18bc0:	f7ff ff8e 	bl	18ae0 <nrf52k_flash_wait_ready>
   18bc4:	bb68      	cbnz	r0, 18c22 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   18bc6:	f025 0a03 	bic.w	sl, r5, #3
   18bca:	f8da 3000 	ldr.w	r3, [sl]
   18bce:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   18bd0:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   18bd4:	45a1      	cmp	r9, r4
   18bd6:	d900      	bls.n	18bda <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   18bd8:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   18bda:	464a      	mov	r2, r9
   18bdc:	4631      	mov	r1, r6
   18bde:	ab01      	add	r3, sp, #4
   18be0:	eb03 0008 	add.w	r0, r3, r8
   18be4:	f7ff fbda 	bl	1839c <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   18be8:	9b01      	ldr	r3, [sp, #4]
   18bea:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   18bee:	444d      	add	r5, r9
        num_bytes -= cnt;
   18bf0:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   18bf4:	444e      	add	r6, r9
   18bf6:	e7d7      	b.n	18ba8 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   18bf8:	b164      	cbz	r4, 18c14 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   18bfa:	682b      	ldr	r3, [r5, #0]
   18bfc:	a802      	add	r0, sp, #8
   18bfe:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   18c02:	4622      	mov	r2, r4
   18c04:	4631      	mov	r1, r6
   18c06:	f7ff fbc9 	bl	1839c <memcpy>
        if (nrf52k_flash_wait_ready()) {
   18c0a:	f7ff ff69 	bl	18ae0 <nrf52k_flash_wait_ready>
   18c0e:	b9b8      	cbnz	r0, 18c40 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   18c10:	9b01      	ldr	r3, [sp, #4]
   18c12:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   18c14:	f7ff ff64 	bl	18ae0 <nrf52k_flash_wait_ready>
   18c18:	4603      	mov	r3, r0
   18c1a:	b138      	cbz	r0, 18c2c <nrf52k_flash_write+0xac>
        rc = -1;
   18c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18c20:	e004      	b.n	18c2c <nrf52k_flash_write+0xac>
    int rc = -1;
   18c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18c26:	e001      	b.n	18c2c <nrf52k_flash_write+0xac>
   18c28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   18c2c:	4a07      	ldr	r2, [pc, #28]	; (18c4c <nrf52k_flash_write+0xcc>)
   18c2e:	2100      	movs	r1, #0
   18c30:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   18c34:	b907      	cbnz	r7, 18c38 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   18c36:	b662      	cpsie	i
}
   18c38:	4618      	mov	r0, r3
   18c3a:	b002      	add	sp, #8
   18c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   18c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18c44:	e7f2      	b.n	18c2c <nrf52k_flash_write+0xac>
        return -1;
   18c46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18c4a:	e7f5      	b.n	18c38 <nrf52k_flash_write+0xb8>
   18c4c:	4001e000 	.word	0x4001e000

00018c50 <nrf52k_flash_read>:
{
   18c50:	b508      	push	{r3, lr}
   18c52:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   18c54:	461a      	mov	r2, r3
   18c56:	f7ff fba1 	bl	1839c <memcpy>
}
   18c5a:	2000      	movs	r0, #0
   18c5c:	bd08      	pop	{r3, pc}
	...

00018c60 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   18c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   18c62:	f7ff fa3b 	bl	180dc <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   18c66:	4b31      	ldr	r3, [pc, #196]	; (18d2c <nrf52_timer_handler+0xcc>)
   18c68:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   18c6c:	4b30      	ldr	r3, [pc, #192]	; (18d30 <nrf52_timer_handler+0xd0>)
   18c6e:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   18c70:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   18c74:	d225      	bcs.n	18cc2 <nrf52_timer_handler+0x62>
   18c76:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   18c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   18c7c:	d227      	bcs.n	18cce <nrf52_timer_handler+0x6e>
    result = x - y;
   18c7e:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   18c80:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   18c84:	d129      	bne.n	18cda <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   18c86:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   18c8a:	4f29      	ldr	r7, [pc, #164]	; (18d30 <nrf52_timer_handler+0xd0>)
   18c8c:	683c      	ldr	r4, [r7, #0]
   18c8e:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   18c92:	4628      	mov	r0, r5
   18c94:	f7ff f9b0 	bl	17ff8 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   18c98:	4b24      	ldr	r3, [pc, #144]	; (18d2c <nrf52_timer_handler+0xcc>)
   18c9a:	2200      	movs	r2, #0
   18c9c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   18ca0:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   18ca2:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   18ca4:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   18ca8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   18cac:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   18cae:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   18cb0:	f7ff fa1d 	bl	180ee <os_arch_in_critical>
   18cb4:	bb28      	cbnz	r0, 18d02 <nrf52_timer_handler+0xa2>
   18cb6:	2300      	movs	r3, #0
   18cb8:	461a      	mov	r2, r3
   18cba:	4619      	mov	r1, r3
   18cbc:	4618      	mov	r0, r3
   18cbe:	f7fd ff77 	bl	16bb0 <__assert_func>
    assert(x <= 0xffffff);
   18cc2:	2300      	movs	r3, #0
   18cc4:	461a      	mov	r2, r3
   18cc6:	4619      	mov	r1, r3
   18cc8:	4618      	mov	r0, r3
   18cca:	f7fd ff71 	bl	16bb0 <__assert_func>
    assert(y <= 0xffffff);
   18cce:	2300      	movs	r3, #0
   18cd0:	461a      	mov	r2, r3
   18cd2:	4619      	mov	r1, r3
   18cd4:	4618      	mov	r0, r3
   18cd6:	f7fd ff6b 	bl	16bb0 <__assert_func>
        return (result | 0xff800000);
   18cda:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   18cde:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   18ce2:	e7d2      	b.n	18c8a <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   18ce4:	2300      	movs	r3, #0
   18ce6:	461a      	mov	r2, r3
   18ce8:	4619      	mov	r1, r3
   18cea:	4618      	mov	r0, r3
   18cec:	f7fd ff60 	bl	16bb0 <__assert_func>
        return (result | 0xff800000);
   18cf0:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   18cf4:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   18cf8:	2a02      	cmp	r2, #2
   18cfa:	dc13      	bgt.n	18d24 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   18cfc:	4a0c      	ldr	r2, [pc, #48]	; (18d30 <nrf52_timer_handler+0xd0>)
   18cfe:	6814      	ldr	r4, [r2, #0]
   18d00:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   18d02:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   18d06:	4a09      	ldr	r2, [pc, #36]	; (18d2c <nrf52_timer_handler+0xcc>)
   18d08:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   18d0c:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   18d10:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   18d14:	d2e6      	bcs.n	18ce4 <nrf52_timer_handler+0x84>
    result = x - y;
   18d16:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   18d18:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   18d1c:	d1e8      	bne.n	18cf0 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   18d1e:	f3c2 0216 	ubfx	r2, r2, #0, #23
   18d22:	e7e9      	b.n	18cf8 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   18d24:	4630      	mov	r0, r6
   18d26:	f7ff f9df 	bl	180e8 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   18d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18d2c:	40011000 	.word	0x40011000
   18d30:	2000b664 	.word	0x2000b664

00018d34 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   18d34:	b538      	push	{r3, r4, r5, lr}
   18d36:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   18d38:	f7ff f9d9 	bl	180ee <os_arch_in_critical>
   18d3c:	b1a0      	cbz	r0, 18d68 <os_tick_idle+0x34>

    if (ticks > 0) {
   18d3e:	2d00      	cmp	r5, #0
   18d40:	d038      	beq.n	18db4 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   18d42:	4b20      	ldr	r3, [pc, #128]	; (18dc4 <os_tick_idle+0x90>)
   18d44:	685b      	ldr	r3, [r3, #4]
   18d46:	42ab      	cmp	r3, r5
   18d48:	d200      	bcs.n	18d4c <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   18d4a:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   18d4c:	4b1d      	ldr	r3, [pc, #116]	; (18dc4 <os_tick_idle+0x90>)
   18d4e:	689c      	ldr	r4, [r3, #8]
   18d50:	681a      	ldr	r2, [r3, #0]
   18d52:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   18d56:	f7ff f9ca 	bl	180ee <os_arch_in_critical>
   18d5a:	b9d0      	cbnz	r0, 18d92 <os_tick_idle+0x5e>
   18d5c:	2300      	movs	r3, #0
   18d5e:	461a      	mov	r2, r3
   18d60:	4619      	mov	r1, r3
   18d62:	4618      	mov	r0, r3
   18d64:	f7fd ff24 	bl	16bb0 <__assert_func>
    OS_ASSERT_CRITICAL();
   18d68:	2300      	movs	r3, #0
   18d6a:	461a      	mov	r2, r3
   18d6c:	4619      	mov	r1, r3
   18d6e:	4618      	mov	r0, r3
   18d70:	f7fd ff1e 	bl	16bb0 <__assert_func>
    assert(y <= 0xffffff);
   18d74:	2300      	movs	r3, #0
   18d76:	461a      	mov	r2, r3
   18d78:	4619      	mov	r1, r3
   18d7a:	4618      	mov	r0, r3
   18d7c:	f7fd ff18 	bl	16bb0 <__assert_func>
        return (result | 0xff800000);
   18d80:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   18d84:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   18d88:	2b02      	cmp	r3, #2
   18d8a:	dc13      	bgt.n	18db4 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   18d8c:	4b0d      	ldr	r3, [pc, #52]	; (18dc4 <os_tick_idle+0x90>)
   18d8e:	681c      	ldr	r4, [r3, #0]
   18d90:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   18d92:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   18d96:	4b0c      	ldr	r3, [pc, #48]	; (18dc8 <os_tick_idle+0x94>)
   18d98:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   18d9c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   18da0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   18da4:	d2e6      	bcs.n	18d74 <os_tick_idle+0x40>
    result = x - y;
   18da6:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   18da8:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   18dac:	d1e8      	bne.n	18d80 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   18dae:	f3c3 0316 	ubfx	r3, r3, #0, #23
   18db2:	e7e9      	b.n	18d88 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   18db4:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   18db8:	bf30      	wfi

    if (ticks > 0) {
   18dba:	b905      	cbnz	r5, 18dbe <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   18dbc:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   18dbe:	f7ff ff4f 	bl	18c60 <nrf52_timer_handler>
}
   18dc2:	e7fb      	b.n	18dbc <os_tick_idle+0x88>
   18dc4:	2000b664 	.word	0x2000b664
   18dc8:	40011000 	.word	0x40011000

00018dcc <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   18dcc:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   18dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   18dd2:	fbb3 f3f0 	udiv	r3, r3, r0
   18dd6:	fb00 f303 	mul.w	r3, r0, r3
   18dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   18dde:	d136      	bne.n	18e4e <os_tick_init+0x82>
   18de0:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   18de2:	4d1e      	ldr	r5, [pc, #120]	; (18e5c <os_tick_init+0x90>)
   18de4:	2600      	movs	r6, #0
   18de6:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   18de8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   18dec:	fbb3 f0f0 	udiv	r0, r3, r0
   18df0:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   18df2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   18df6:	fbb3 f0f0 	udiv	r0, r3, r0
   18dfa:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   18dfc:	f7ff f96e 	bl	180dc <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   18e00:	0164      	lsls	r4, r4, #5
   18e02:	b2e4      	uxtb	r4, r4
   18e04:	4b16      	ldr	r3, [pc, #88]	; (18e60 <os_tick_init+0x94>)
   18e06:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18e0a:	4a16      	ldr	r2, [pc, #88]	; (18e64 <os_tick_init+0x98>)
   18e0c:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18e0e:	4916      	ldr	r1, [pc, #88]	; (18e68 <os_tick_init+0x9c>)
   18e10:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18e14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   18e18:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   18e1a:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   18e1e:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   18e22:	2201      	movs	r2, #1
   18e24:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   18e26:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   18e28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18e2c:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   18e30:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   18e34:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   18e38:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   18e3c:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   18e40:	6829      	ldr	r1, [r5, #0]
   18e42:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   18e46:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   18e48:	f7ff f94e 	bl	180e8 <os_arch_restore_sr>
}
   18e4c:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   18e4e:	2300      	movs	r3, #0
   18e50:	461a      	mov	r2, r3
   18e52:	4619      	mov	r1, r3
   18e54:	4618      	mov	r0, r3
   18e56:	f7fd feab 	bl	16bb0 <__assert_func>
   18e5a:	bf00      	nop
   18e5c:	2000b664 	.word	0x2000b664
   18e60:	e000e100 	.word	0xe000e100
   18e64:	e000ed00 	.word	0xe000ed00
   18e68:	00018c61 	.word	0x00018c61

00018e6c <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   18e6c:	2301      	movs	r3, #1
   18e6e:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   18e70:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   18e74:	4770      	bx	lr
	...

00018e78 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   18e78:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   18e7a:	7883      	ldrb	r3, [r0, #2]
   18e7c:	b393      	cbz	r3, 18ee4 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   18e7e:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   18e80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   18e84:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   18e88:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   18e8a:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   18e8e:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   18e92:	b11d      	cbz	r5, 18e9c <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   18e94:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   18e98:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   18e9c:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   18e9e:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   18ea0:	2b02      	cmp	r3, #2
   18ea2:	dc0e      	bgt.n	18ec2 <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   18ea4:	7842      	ldrb	r2, [r0, #1]
   18ea6:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   18ea8:	2b00      	cmp	r3, #0
   18eaa:	db15      	blt.n	18ed8 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18eac:	f002 021f 	and.w	r2, r2, #31
   18eb0:	095b      	lsrs	r3, r3, #5
   18eb2:	2101      	movs	r1, #1
   18eb4:	fa01 f202 	lsl.w	r2, r1, r2
   18eb8:	3340      	adds	r3, #64	; 0x40
   18eba:	491b      	ldr	r1, [pc, #108]	; (18f28 <nrf_timer_set_ocmp+0xb0>)
   18ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   18ec0:	e00a      	b.n	18ed8 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   18ec2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   18ec6:	d208      	bcs.n	18eda <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   18ec8:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   18ecc:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   18ed0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   18ed4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   18ed8:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   18eda:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   18ede:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   18ee2:	e7f5      	b.n	18ed0 <nrf_timer_set_ocmp+0x58>
   18ee4:	460d      	mov	r5, r1
   18ee6:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   18ee8:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   18eea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   18eee:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   18ef2:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   18ef6:	2200      	movs	r2, #0
   18ef8:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   18efc:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   18f00:	f7ff ffb4 	bl	18e6c <nrf_read_timer_cntr>
   18f04:	1b40      	subs	r0, r0, r5
   18f06:	2800      	cmp	r0, #0
   18f08:	dbe6      	blt.n	18ed8 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   18f0a:	7862      	ldrb	r2, [r4, #1]
   18f0c:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   18f0e:	2b00      	cmp	r3, #0
   18f10:	dbe2      	blt.n	18ed8 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18f12:	f002 021f 	and.w	r2, r2, #31
   18f16:	095b      	lsrs	r3, r3, #5
   18f18:	2101      	movs	r1, #1
   18f1a:	fa01 f202 	lsl.w	r2, r1, r2
   18f1e:	3340      	adds	r3, #64	; 0x40
   18f20:	4901      	ldr	r1, [pc, #4]	; (18f28 <nrf_timer_set_ocmp+0xb0>)
   18f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   18f26:	e7d7      	b.n	18ed8 <nrf_timer_set_ocmp+0x60>
   18f28:	e000e100 	.word	0xe000e100

00018f2c <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   18f2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   18f30:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   18f34:	4770      	bx	lr

00018f36 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   18f36:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   18f3a:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   18f3e:	4770      	bx	lr

00018f40 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   18f40:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   18f42:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18f44:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18f48:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   18f4a:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   18f4c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   18f50:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   18f54:	b1ad      	cbz	r5, 18f82 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   18f56:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   18f5a:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   18f5c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   18f60:	2500      	movs	r5, #0
   18f62:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   18f66:	7840      	ldrb	r0, [r0, #1]
   18f68:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   18f6a:	42aa      	cmp	r2, r5
   18f6c:	db09      	blt.n	18f82 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18f6e:	f000 001f 	and.w	r0, r0, #31
   18f72:	0952      	lsrs	r2, r2, #5
   18f74:	2501      	movs	r5, #1
   18f76:	fa05 f000 	lsl.w	r0, r5, r0
   18f7a:	3240      	adds	r2, #64	; 0x40
   18f7c:	4d04      	ldr	r5, [pc, #16]	; (18f90 <hal_timer_read_bsptimer+0x50>)
   18f7e:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   18f82:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   18f86:	b904      	cbnz	r4, 18f8a <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   18f88:	b662      	cpsie	i

    return tcntr;
}
   18f8a:	bc30      	pop	{r4, r5}
   18f8c:	4770      	bx	lr
   18f8e:	bf00      	nop
   18f90:	e000e100 	.word	0xe000e100

00018f94 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   18f94:	b570      	push	{r4, r5, r6, lr}
   18f96:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   18f98:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   18f9c:	b672      	cpsid	i
   18f9e:	e013      	b.n	18fc8 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   18fa0:	6928      	ldr	r0, [r5, #16]
   18fa2:	f7ff ff63 	bl	18e6c <nrf_read_timer_cntr>
            delta = 0;
   18fa6:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   18fa8:	68e3      	ldr	r3, [r4, #12]
   18faa:	1ac0      	subs	r0, r0, r3
   18fac:	4290      	cmp	r0, r2
   18fae:	db19      	blt.n	18fe4 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   18fb0:	6923      	ldr	r3, [r4, #16]
   18fb2:	b1a3      	cbz	r3, 18fde <hal_timer_chk_queue+0x4a>
   18fb4:	6962      	ldr	r2, [r4, #20]
   18fb6:	615a      	str	r2, [r3, #20]
   18fb8:	6963      	ldr	r3, [r4, #20]
   18fba:	6922      	ldr	r2, [r4, #16]
   18fbc:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   18fbe:	2300      	movs	r3, #0
   18fc0:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   18fc2:	6863      	ldr	r3, [r4, #4]
   18fc4:	68a0      	ldr	r0, [r4, #8]
   18fc6:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   18fc8:	696c      	ldr	r4, [r5, #20]
   18fca:	b15c      	cbz	r4, 18fe4 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   18fcc:	78ab      	ldrb	r3, [r5, #2]
   18fce:	2b00      	cmp	r3, #0
   18fd0:	d0e6      	beq.n	18fa0 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   18fd2:	4628      	mov	r0, r5
   18fd4:	f7ff ffb4 	bl	18f40 <hal_timer_read_bsptimer>
            delta = -3;
   18fd8:	f06f 0202 	mvn.w	r2, #2
   18fdc:	e7e4      	b.n	18fa8 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   18fde:	6963      	ldr	r3, [r4, #20]
   18fe0:	61ab      	str	r3, [r5, #24]
   18fe2:	e7e9      	b.n	18fb8 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   18fe4:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   18fe6:	b133      	cbz	r3, 18ff6 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   18fe8:	68d9      	ldr	r1, [r3, #12]
   18fea:	4628      	mov	r0, r5
   18fec:	f7ff ff44 	bl	18e78 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   18ff0:	b906      	cbnz	r6, 18ff4 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   18ff2:	b662      	cpsie	i
}
   18ff4:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   18ff6:	78ab      	ldrb	r3, [r5, #2]
   18ff8:	b11b      	cbz	r3, 19002 <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   18ffa:	6928      	ldr	r0, [r5, #16]
   18ffc:	f7ff ff9b 	bl	18f36 <nrf_rtc_disable_ocmp>
   19000:	e7f6      	b.n	18ff0 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   19002:	6928      	ldr	r0, [r5, #16]
   19004:	f7ff ff92 	bl	18f2c <nrf_timer_disable_ocmp>
   19008:	e7f2      	b.n	18ff0 <hal_timer_chk_queue+0x5c>

0001900a <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1900a:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1900c:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1900e:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   19012:	b113      	cbz	r3, 1901a <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   19014:	2300      	movs	r3, #0
   19016:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1901a:	6883      	ldr	r3, [r0, #8]
   1901c:	3301      	adds	r3, #1
   1901e:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   19020:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   19024:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   19028:	d100      	bne.n	1902c <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1902a:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1902c:	f7ff ffb2 	bl	18f94 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   19030:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   19034:	e7f9      	b.n	1902a <hal_timer_irq_handler+0x20>
	...

00019038 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   19038:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1903a:	4802      	ldr	r0, [pc, #8]	; (19044 <nrf52_timer0_irq_handler+0xc>)
   1903c:	f7ff ffe5 	bl	1900a <hal_timer_irq_handler>
}
   19040:	bd08      	pop	{r3, pc}
   19042:	bf00      	nop
   19044:	2000b670 	.word	0x2000b670

00019048 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   19048:	2805      	cmp	r0, #5
   1904a:	dc1c      	bgt.n	19086 <hal_timer_init+0x3e>
   1904c:	4b12      	ldr	r3, [pc, #72]	; (19098 <hal_timer_init+0x50>)
   1904e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19052:	b1d3      	cbz	r3, 1908a <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   19054:	781a      	ldrb	r2, [r3, #0]
   19056:	b9d2      	cbnz	r2, 1908e <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   19058:	b9d8      	cbnz	r0, 19092 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1905a:	4a10      	ldr	r2, [pc, #64]	; (1909c <hal_timer_init+0x54>)
   1905c:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1905e:	2208      	movs	r2, #8
   19060:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19062:	4b0f      	ldr	r3, [pc, #60]	; (190a0 <hal_timer_init+0x58>)
   19064:	f44f 7280 	mov.w	r2, #256	; 0x100
   19068:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1906c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   19070:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19074:	22e0      	movs	r2, #224	; 0xe0
   19076:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1907a:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1907e:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19080:	4a08      	ldr	r2, [pc, #32]	; (190a4 <hal_timer_init+0x5c>)
   19082:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   19084:	4770      	bx	lr

err:
    return rc;
   19086:	2016      	movs	r0, #22
   19088:	4770      	bx	lr
   1908a:	2016      	movs	r0, #22
   1908c:	4770      	bx	lr
   1908e:	2016      	movs	r0, #22
   19090:	4770      	bx	lr
   19092:	2016      	movs	r0, #22
}
   19094:	4770      	bx	lr
   19096:	bf00      	nop
   19098:	0001e54c 	.word	0x0001e54c
   1909c:	40008000 	.word	0x40008000
   190a0:	e000e100 	.word	0xe000e100
   190a4:	00019039 	.word	0x00019039

000190a8 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   190a8:	2805      	cmp	r0, #5
   190aa:	dc65      	bgt.n	19178 <hal_timer_config+0xd0>
   190ac:	4b39      	ldr	r3, [pc, #228]	; (19194 <hal_timer_config+0xec>)
   190ae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   190b2:	2800      	cmp	r0, #0
   190b4:	d062      	beq.n	1917c <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   190b6:	4b38      	ldr	r3, [pc, #224]	; (19198 <hal_timer_config+0xf0>)
   190b8:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   190bc:	7803      	ldrb	r3, [r0, #0]
   190be:	2b00      	cmp	r3, #0
   190c0:	d15e      	bne.n	19180 <hal_timer_config+0xd8>
   190c2:	2900      	cmp	r1, #0
   190c4:	d05e      	beq.n	19184 <hal_timer_config+0xdc>
   190c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   190ca:	d85d      	bhi.n	19188 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   190cc:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   190ce:	2a00      	cmp	r2, #0
   190d0:	d05c      	beq.n	1918c <hal_timer_config+0xe4>
{
   190d2:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   190d4:	2901      	cmp	r1, #1
   190d6:	d013      	beq.n	19100 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   190d8:	2301      	movs	r3, #1
   190da:	2b09      	cmp	r3, #9
   190dc:	d810      	bhi.n	19100 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   190de:	2201      	movs	r2, #1
   190e0:	409a      	lsls	r2, r3
   190e2:	428a      	cmp	r2, r1
   190e4:	d202      	bcs.n	190ec <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   190e6:	3301      	adds	r3, #1
   190e8:	b2db      	uxtb	r3, r3
   190ea:	e7f6      	b.n	190da <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   190ec:	1e5c      	subs	r4, r3, #1
   190ee:	2501      	movs	r5, #1
   190f0:	fa05 f404 	lsl.w	r4, r5, r4
   190f4:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   190f6:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   190f8:	428c      	cmp	r4, r1
   190fa:	d201      	bcs.n	19100 <hal_timer_config+0x58>
                    prescaler -= 1;
   190fc:	3b01      	subs	r3, #1
   190fe:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   19100:	4a25      	ldr	r2, [pc, #148]	; (19198 <hal_timer_config+0xf0>)
   19102:	411a      	asrs	r2, r3
   19104:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   19106:	2201      	movs	r2, #1
   19108:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1910a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1910e:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   19110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   19114:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   19118:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1911c:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   19120:	d00c      	beq.n	1913c <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   19122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   19126:	2100      	movs	r1, #0
   19128:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1912c:	2101      	movs	r1, #1
   1912e:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   19130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   19134:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   19138:	2a00      	cmp	r2, #0
   1913a:	d0f9      	beq.n	19130 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1913c:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1913e:	2101      	movs	r1, #1
   19140:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   19142:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   19144:	2500      	movs	r5, #0
   19146:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1914a:	2503      	movs	r5, #3
   1914c:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   19150:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   19154:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   19156:	7842      	ldrb	r2, [r0, #1]
   19158:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1915a:	2b00      	cmp	r3, #0
   1915c:	db07      	blt.n	1916e <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1915e:	f002 021f 	and.w	r2, r2, #31
   19162:	095b      	lsrs	r3, r3, #5
   19164:	fa01 f202 	lsl.w	r2, r1, r2
   19168:	490c      	ldr	r1, [pc, #48]	; (1919c <hal_timer_config+0xf4>)
   1916a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1916e:	b97c      	cbnz	r4, 19190 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   19170:	b662      	cpsie	i

    return 0;
   19172:	2000      	movs	r0, #0

err:
    return rc;
}
   19174:	bc30      	pop	{r4, r5}
   19176:	4770      	bx	lr
    return rc;
   19178:	2016      	movs	r0, #22
   1917a:	4770      	bx	lr
   1917c:	2016      	movs	r0, #22
   1917e:	4770      	bx	lr
   19180:	2016      	movs	r0, #22
   19182:	4770      	bx	lr
   19184:	2016      	movs	r0, #22
   19186:	4770      	bx	lr
   19188:	2016      	movs	r0, #22
   1918a:	4770      	bx	lr
   1918c:	2016      	movs	r0, #22
}
   1918e:	4770      	bx	lr
    return 0;
   19190:	2000      	movs	r0, #0
   19192:	e7ef      	b.n	19174 <hal_timer_config+0xcc>
   19194:	0001e54c 	.word	0x0001e54c
   19198:	00f42400 	.word	0x00f42400
   1919c:	e000e100 	.word	0xe000e100

000191a0 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   191a0:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   191a2:	2805      	cmp	r0, #5
   191a4:	dc0c      	bgt.n	191c0 <hal_timer_read+0x20>
   191a6:	4b09      	ldr	r3, [pc, #36]	; (191cc <hal_timer_read+0x2c>)
   191a8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   191ac:	b140      	cbz	r0, 191c0 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   191ae:	7883      	ldrb	r3, [r0, #2]
   191b0:	b91b      	cbnz	r3, 191ba <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   191b2:	6900      	ldr	r0, [r0, #16]
   191b4:	f7ff fe5a 	bl	18e6c <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   191b8:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   191ba:	f7ff fec1 	bl	18f40 <hal_timer_read_bsptimer>
   191be:	e7fb      	b.n	191b8 <hal_timer_read+0x18>
    assert(0);
   191c0:	2300      	movs	r3, #0
   191c2:	461a      	mov	r2, r3
   191c4:	4619      	mov	r1, r3
   191c6:	4618      	mov	r0, r3
   191c8:	f7fd fcf2 	bl	16bb0 <__assert_func>
   191cc:	0001e54c 	.word	0x0001e54c

000191d0 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   191d0:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   191d2:	2100      	movs	r1, #0
   191d4:	4608      	mov	r0, r1
   191d6:	f7ff ff37 	bl	19048 <hal_timer_init>
    assert(rc == 0);
   191da:	b920      	cbnz	r0, 191e6 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   191dc:	4808      	ldr	r0, [pc, #32]	; (19200 <nrf52_periph_create_timers+0x30>)
   191de:	f7fd ff11 	bl	17004 <os_cputime_init>
    assert(rc == 0);
   191e2:	b930      	cbnz	r0, 191f2 <nrf52_periph_create_timers+0x22>
#endif
}
   191e4:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   191e6:	2300      	movs	r3, #0
   191e8:	461a      	mov	r2, r3
   191ea:	4619      	mov	r1, r3
   191ec:	4618      	mov	r0, r3
   191ee:	f7fd fcdf 	bl	16bb0 <__assert_func>
    assert(rc == 0);
   191f2:	2300      	movs	r3, #0
   191f4:	461a      	mov	r2, r3
   191f6:	4619      	mov	r1, r3
   191f8:	4618      	mov	r0, r3
   191fa:	f7fd fcd9 	bl	16bb0 <__assert_func>
   191fe:	bf00      	nop
   19200:	000f4240 	.word	0x000f4240

00019204 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   19204:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   19206:	4906      	ldr	r1, [pc, #24]	; (19220 <nrf52_periph_create_i2c+0x1c>)
   19208:	2001      	movs	r0, #1
   1920a:	f7fd f82b 	bl	16264 <hal_i2c_init>
    assert(rc == 0);
   1920e:	b900      	cbnz	r0, 19212 <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   19210:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   19212:	2300      	movs	r3, #0
   19214:	461a      	mov	r2, r3
   19216:	4619      	mov	r1, r3
   19218:	4618      	mov	r0, r3
   1921a:	f7fd fcc9 	bl	16bb0 <__assert_func>
   1921e:	bf00      	nop
   19220:	0001e564 	.word	0x0001e564

00019224 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   19224:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   19226:	2200      	movs	r2, #0
   19228:	4905      	ldr	r1, [pc, #20]	; (19240 <nrf52_periph_create_spi+0x1c>)
   1922a:	4610      	mov	r0, r2
   1922c:	f7fd fb4e 	bl	168cc <hal_spi_init>
    assert(rc == 0);
   19230:	b900      	cbnz	r0, 19234 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   19232:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   19234:	2300      	movs	r3, #0
   19236:	461a      	mov	r2, r3
   19238:	4619      	mov	r1, r3
   1923a:	4618      	mov	r0, r3
   1923c:	f7fd fcb8 	bl	16bb0 <__assert_func>
   19240:	0001e570 	.word	0x0001e570

00019244 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   19244:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   19246:	f7ff ffc3 	bl	191d0 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1924a:	f7ff ffdb 	bl	19204 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1924e:	f7ff ffe9 	bl	19224 <nrf52_periph_create_spi>
}
   19252:	bd08      	pop	{r3, pc}

00019254 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   19254:	4770      	bx	lr
	...

00019258 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   19258:	4b08      	ldr	r3, [pc, #32]	; (1927c <sensor_mgr_remove+0x24>)
   1925a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1925c:	4282      	cmp	r2, r0
   1925e:	d104      	bne.n	1926a <sensor_mgr_remove+0x12>
   19260:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   19264:	631a      	str	r2, [r3, #48]	; 0x30
   19266:	4770      	bx	lr
   19268:	461a      	mov	r2, r3
   1926a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1926e:	4283      	cmp	r3, r0
   19270:	d1fa      	bne.n	19268 <sensor_mgr_remove+0x10>
   19272:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   19276:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1927a:	4770      	bx	lr
   1927c:	2000b690 	.word	0x2000b690

00019280 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   19280:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   19282:	6a03      	ldr	r3, [r0, #32]
   19284:	b993      	cbnz	r3, 192ac <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   19286:	4b15      	ldr	r3, [pc, #84]	; (192dc <sensor_mgr_insert+0x5c>)
   19288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1928a:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1928c:	e002      	b.n	19294 <sensor_mgr_insert+0x14>
            prev = cursor;
   1928e:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   19290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   19294:	2b00      	cmp	r3, #0
   19296:	d1fa      	bne.n	1928e <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   19298:	b1c9      	cbz	r1, 192ce <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1929a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1929e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   192a2:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   192a6:	f85d 4b04 	ldr.w	r4, [sp], #4
   192aa:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   192ac:	4b0b      	ldr	r3, [pc, #44]	; (192dc <sensor_mgr_insert+0x5c>)
   192ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   192b0:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   192b2:	2b00      	cmp	r3, #0
   192b4:	d0f0      	beq.n	19298 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   192b6:	6a1a      	ldr	r2, [r3, #32]
   192b8:	2a00      	cmp	r2, #0
   192ba:	d0ed      	beq.n	19298 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   192bc:	6a42      	ldr	r2, [r0, #36]	; 0x24
   192be:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   192c0:	1b12      	subs	r2, r2, r4
   192c2:	2a00      	cmp	r2, #0
   192c4:	dbe8      	blt.n	19298 <sensor_mgr_insert+0x18>
        prev = cursor;
   192c6:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   192c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   192cc:	e7f1      	b.n	192b2 <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   192ce:	4b03      	ldr	r3, [pc, #12]	; (192dc <sensor_mgr_insert+0x5c>)
   192d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   192d2:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   192d6:	6318      	str	r0, [r3, #48]	; 0x30
   192d8:	e7e5      	b.n	192a6 <sensor_mgr_insert+0x26>
   192da:	bf00      	nop
   192dc:	2000b690 	.word	0x2000b690

000192e0 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   192e0:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   192e2:	fab0 f080 	clz	r0, r0
   192e6:	0940      	lsrs	r0, r0, #5
   192e8:	4770      	bx	lr
	...

000192ec <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   192ec:	4b01      	ldr	r3, [pc, #4]	; (192f4 <sensor_mgr_evq_set+0x8>)
   192ee:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   192f0:	4770      	bx	lr
   192f2:	bf00      	nop
   192f4:	2000b690 	.word	0x2000b690

000192f8 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   192f8:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   192fc:	e9d1 2300 	ldrd	r2, r3, [r1]
   19300:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   19304:	ea02 0b04 	and.w	fp, r2, r4
   19308:	ea03 0c05 	and.w	ip, r3, r5
   1930c:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   19310:	ea0b 0200 	and.w	r2, fp, r0
   19314:	ea0c 0301 	and.w	r3, ip, r1
   19318:	4313      	orrs	r3, r2
}
   1931a:	bf14      	ite	ne
   1931c:	2001      	movne	r0, #1
   1931e:	2000      	moveq	r0, #0
   19320:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   19324:	4770      	bx	lr

00019326 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   19326:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1932a:	b083      	sub	sp, #12
   1932c:	4605      	mov	r5, r0
   1932e:	4689      	mov	r9, r1
   19330:	4690      	mov	r8, r2
   19332:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   19336:	790b      	ldrb	r3, [r1, #4]
   19338:	2b01      	cmp	r3, #1
   1933a:	d013      	beq.n	19364 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1933c:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1933e:	e000      	b.n	19342 <sensor_read_data_func+0x1c>
   19340:	6924      	ldr	r4, [r4, #16]
   19342:	b17c      	cbz	r4, 19364 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   19344:	e9d4 0100 	ldrd	r0, r1, [r4]
   19348:	ea00 0206 	and.w	r2, r0, r6
   1934c:	ea01 0307 	and.w	r3, r1, r7
   19350:	4313      	orrs	r3, r2
   19352:	d0f5      	beq.n	19340 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   19354:	68a3      	ldr	r3, [r4, #8]
   19356:	68e1      	ldr	r1, [r4, #12]
   19358:	e9cd 6700 	strd	r6, r7, [sp]
   1935c:	4642      	mov	r2, r8
   1935e:	4628      	mov	r0, r5
   19360:	4798      	blx	r3
   19362:	e7ed      	b.n	19340 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   19364:	f8d9 3000 	ldr.w	r3, [r9]
   19368:	b14b      	cbz	r3, 1937e <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1936a:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1936e:	e9cd 6700 	strd	r6, r7, [sp]
   19372:	4642      	mov	r2, r8
   19374:	4628      	mov	r0, r5
   19376:	4798      	blx	r3
    }

    return (0);
}
   19378:	b003      	add	sp, #12
   1937a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1937e:	2000      	movs	r0, #0
   19380:	e7fa      	b.n	19378 <sensor_read_data_func+0x52>
	...

00019384 <sensor_base_ts_update_event>:
{
   19384:	b530      	push	{r4, r5, lr}
   19386:	b087      	sub	sp, #28
    ticks = os_time_get();
   19388:	f7fe fe30 	bl	17fec <os_time_get>
   1938c:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1938e:	a901      	add	r1, sp, #4
   19390:	a802      	add	r0, sp, #8
   19392:	f7fe fe65 	bl	18060 <os_gettimeofday>
    if (rc) {
   19396:	b138      	cbz	r0, 193a8 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   19398:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1939c:	4621      	mov	r1, r4
   1939e:	4809      	ldr	r0, [pc, #36]	; (193c4 <sensor_base_ts_update_event+0x40>)
   193a0:	f7fd fdac 	bl	16efc <os_callout_reset>
}
   193a4:	b007      	add	sp, #28
   193a6:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   193a8:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   193ac:	4d06      	ldr	r5, [pc, #24]	; (193c8 <sensor_base_ts_update_event+0x44>)
   193ae:	ab06      	add	r3, sp, #24
   193b0:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   193b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   193b8:	9b01      	ldr	r3, [sp, #4]
   193ba:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   193bc:	f7fd fe28 	bl	17010 <os_cputime_get32>
   193c0:	6168      	str	r0, [r5, #20]
   193c2:	e7eb      	b.n	1939c <sensor_base_ts_update_event+0x18>
   193c4:	2000b6c4 	.word	0x2000b6c4
   193c8:	2000b6e8 	.word	0x2000b6e8

000193cc <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   193cc:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   193d0:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   193d2:	f7fd fe1d 	bl	17010 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   193d6:	4a0e      	ldr	r2, [pc, #56]	; (19410 <sensor_up_timestamp+0x44>)
   193d8:	6955      	ldr	r5, [r2, #20]
   193da:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   193dc:	6460      	str	r0, [r4, #68]	; 0x44
   193de:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   193e0:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   193e4:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   193e6:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   193e8:	4b0a      	ldr	r3, [pc, #40]	; (19414 <sensor_up_timestamp+0x48>)
   193ea:	fba3 c305 	umull	ip, r3, r3, r5
   193ee:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   193f0:	eb10 0b03 	adds.w	fp, r0, r3
   193f4:	f141 0c00 	adc.w	ip, r1, #0
   193f8:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   193fc:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   19400:	4905      	ldr	r1, [pc, #20]	; (19418 <sensor_up_timestamp+0x4c>)
   19402:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   19406:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   19408:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1940a:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1940e:	bf00      	nop
   19410:	2000b6e8 	.word	0x2000b6e8
   19414:	431bde83 	.word	0x431bde83
   19418:	000f4240 	.word	0x000f4240

0001941c <sensor_mgr_lock>:
{
   1941c:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1941e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19422:	4804      	ldr	r0, [pc, #16]	; (19434 <sensor_mgr_lock+0x18>)
   19424:	f7fe fa5c 	bl	178e0 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   19428:	b108      	cbz	r0, 1942e <sensor_mgr_lock+0x12>
   1942a:	2809      	cmp	r0, #9
   1942c:	d000      	beq.n	19430 <sensor_mgr_lock+0x14>
}
   1942e:	bd08      	pop	{r3, pc}
        return (0);
   19430:	2000      	movs	r0, #0
   19432:	e7fc      	b.n	1942e <sensor_mgr_lock+0x12>
   19434:	2000b690 	.word	0x2000b690

00019438 <sensor_mgr_unlock>:
{
   19438:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1943a:	4802      	ldr	r0, [pc, #8]	; (19444 <sensor_mgr_unlock+0xc>)
   1943c:	f7fe f9f4 	bl	17828 <os_mutex_release>
}
   19440:	bd08      	pop	{r3, pc}
   19442:	bf00      	nop
   19444:	2000b690 	.word	0x2000b690

00019448 <sensor_mgr_evq_get>:
}
   19448:	4b01      	ldr	r3, [pc, #4]	; (19450 <sensor_mgr_evq_get+0x8>)
   1944a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1944c:	4770      	bx	lr
   1944e:	bf00      	nop
   19450:	2000b690 	.word	0x2000b690

00019454 <sensor_mgr_init>:
{
   19454:	b570      	push	{r4, r5, r6, lr}
   19456:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   19458:	f7fd ff68 	bl	1732c <os_eventq_dflt_get>
   1945c:	f7ff ff46 	bl	192ec <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   19460:	4b1c      	ldr	r3, [pc, #112]	; (194d4 <sensor_mgr_init+0x80>)
   19462:	9300      	str	r3, [sp, #0]
   19464:	4b1c      	ldr	r3, [pc, #112]	; (194d8 <sensor_mgr_init+0x84>)
   19466:	2218      	movs	r2, #24
   19468:	2105      	movs	r1, #5
   1946a:	481c      	ldr	r0, [pc, #112]	; (194dc <sensor_mgr_init+0x88>)
   1946c:	f7fe f8e8 	bl	17640 <os_mempool_init>
    assert(rc == OS_OK);
   19470:	bb50      	cbnz	r0, 194c8 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   19472:	f7ff ffe9 	bl	19448 <sensor_mgr_evq_get>
   19476:	4e1a      	ldr	r6, [pc, #104]	; (194e0 <sensor_mgr_init+0x8c>)
   19478:	2300      	movs	r3, #0
   1947a:	4a1a      	ldr	r2, [pc, #104]	; (194e4 <sensor_mgr_init+0x90>)
   1947c:	4601      	mov	r1, r0
   1947e:	4630      	mov	r0, r6
   19480:	f7fd fd10 	bl	16ea4 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   19484:	ad04      	add	r5, sp, #16
   19486:	a903      	add	r1, sp, #12
   19488:	4628      	mov	r0, r5
   1948a:	f7fe fde9 	bl	18060 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1948e:	4c16      	ldr	r4, [pc, #88]	; (194e8 <sensor_mgr_init+0x94>)
   19490:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   19494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   19498:	9b03      	ldr	r3, [sp, #12]
   1949a:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1949c:	f7fd fdb8 	bl	17010 <os_cputime_get32>
   194a0:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   194a2:	f7ff ffd1 	bl	19448 <sensor_mgr_evq_get>
   194a6:	4c11      	ldr	r4, [pc, #68]	; (194ec <sensor_mgr_init+0x98>)
   194a8:	2300      	movs	r3, #0
   194aa:	4a11      	ldr	r2, [pc, #68]	; (194f0 <sensor_mgr_init+0x9c>)
   194ac:	4601      	mov	r1, r0
   194ae:	4620      	mov	r0, r4
   194b0:	f7fd fcf8 	bl	16ea4 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   194b4:	2180      	movs	r1, #128	; 0x80
   194b6:	4620      	mov	r0, r4
   194b8:	f7fd fd20 	bl	16efc <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   194bc:	f1a6 000c 	sub.w	r0, r6, #12
   194c0:	f7fe f9a8 	bl	17814 <os_mutex_init>
}
   194c4:	b008      	add	sp, #32
   194c6:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   194c8:	2300      	movs	r3, #0
   194ca:	461a      	mov	r2, r3
   194cc:	4619      	mov	r1, r3
   194ce:	4618      	mov	r0, r3
   194d0:	f7fd fb6e 	bl	16bb0 <__assert_func>
   194d4:	0001e574 	.word	0x0001e574
   194d8:	2000b18c 	.word	0x2000b18c
   194dc:	2000b204 	.word	0x2000b204
   194e0:	2000b69c 	.word	0x2000b69c
   194e4:	000196c1 	.word	0x000196c1
   194e8:	2000b6e8 	.word	0x2000b6e8
   194ec:	2000b6c4 	.word	0x2000b6c4
   194f0:	00019385 	.word	0x00019385

000194f4 <sensor_pkg_init>:
{
   194f4:	b508      	push	{r3, lr}
    sensor_mgr_init();
   194f6:	f7ff ffad 	bl	19454 <sensor_mgr_init>
}
   194fa:	bd08      	pop	{r3, pc}

000194fc <sensor_lock>:
{
   194fc:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   194fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19502:	3004      	adds	r0, #4
   19504:	f7fe f9ec 	bl	178e0 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   19508:	b108      	cbz	r0, 1950e <sensor_lock+0x12>
   1950a:	2809      	cmp	r0, #9
   1950c:	d000      	beq.n	19510 <sensor_lock+0x14>
}
   1950e:	bd08      	pop	{r3, pc}
        return (0);
   19510:	2000      	movs	r0, #0
   19512:	e7fc      	b.n	1950e <sensor_lock+0x12>

00019514 <sensor_unlock>:
{
   19514:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   19516:	3004      	adds	r0, #4
   19518:	f7fe f986 	bl	17828 <os_mutex_release>
}
   1951c:	bd08      	pop	{r3, pc}

0001951e <sensor_update_nextrun>:
{
   1951e:	b530      	push	{r4, r5, lr}
   19520:	b083      	sub	sp, #12
   19522:	4604      	mov	r4, r0
   19524:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   19526:	a901      	add	r1, sp, #4
   19528:	6a00      	ldr	r0, [r0, #32]
   1952a:	f7fe fdb5 	bl	18098 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1952e:	4620      	mov	r0, r4
   19530:	f7ff ffe4 	bl	194fc <sensor_lock>
    sensor_mgr_remove(sensor);
   19534:	4620      	mov	r0, r4
   19536:	f7ff fe8f 	bl	19258 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1953a:	9b01      	ldr	r3, [sp, #4]
   1953c:	441d      	add	r5, r3
   1953e:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   19540:	4620      	mov	r0, r4
   19542:	f7ff fe9d 	bl	19280 <sensor_mgr_insert>
    sensor_unlock(sensor);
   19546:	4620      	mov	r0, r4
   19548:	f7ff ffe4 	bl	19514 <sensor_unlock>
}
   1954c:	b003      	add	sp, #12
   1954e:	bd30      	pop	{r4, r5, pc}

00019550 <sensor_calc_nextrun_delta>:
{
   19550:	b538      	push	{r3, r4, r5, lr}
   19552:	4605      	mov	r5, r0
   19554:	460c      	mov	r4, r1
    sensor_lock(sensor);
   19556:	f7ff ffd1 	bl	194fc <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1955a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1955c:	1b0c      	subs	r4, r1, r4
   1955e:	d404      	bmi.n	1956a <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   19560:	4628      	mov	r0, r5
   19562:	f7ff ffd7 	bl	19514 <sensor_unlock>
}
   19566:	4620      	mov	r0, r4
   19568:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1956a:	2400      	movs	r4, #0
   1956c:	e7f8      	b.n	19560 <sensor_calc_nextrun_delta+0x10>
	...

00019570 <sensor_find_min_nextrun_sensor>:
{
   19570:	b570      	push	{r4, r5, r6, lr}
   19572:	4606      	mov	r6, r0
   19574:	460d      	mov	r5, r1
    sensor_mgr_lock();
   19576:	f7ff ff51 	bl	1941c <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1957a:	4b05      	ldr	r3, [pc, #20]	; (19590 <sensor_find_min_nextrun_sensor+0x20>)
   1957c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1957e:	4631      	mov	r1, r6
   19580:	4620      	mov	r0, r4
   19582:	f7ff ffe5 	bl	19550 <sensor_calc_nextrun_delta>
   19586:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   19588:	f7ff ff56 	bl	19438 <sensor_mgr_unlock>
}
   1958c:	4620      	mov	r0, r4
   1958e:	bd70      	pop	{r4, r5, r6, pc}
   19590:	2000b690 	.word	0x2000b690

00019594 <sensor_mgr_register>:
{
   19594:	b538      	push	{r3, r4, r5, lr}
   19596:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   19598:	f7ff ff40 	bl	1941c <sensor_mgr_lock>
    if (rc != 0) {
   1959c:	4604      	mov	r4, r0
   1959e:	b108      	cbz	r0, 195a4 <sensor_mgr_register+0x10>
}
   195a0:	4620      	mov	r0, r4
   195a2:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   195a4:	4628      	mov	r0, r5
   195a6:	f7ff ffa9 	bl	194fc <sensor_lock>
    if (rc != 0) {
   195aa:	4604      	mov	r4, r0
   195ac:	2800      	cmp	r0, #0
   195ae:	d1f7      	bne.n	195a0 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   195b0:	4628      	mov	r0, r5
   195b2:	f7ff fe65 	bl	19280 <sensor_mgr_insert>
    sensor_unlock(sensor);
   195b6:	4628      	mov	r0, r5
   195b8:	f7ff ffac 	bl	19514 <sensor_unlock>
    sensor_mgr_unlock();
   195bc:	f7ff ff3c 	bl	19438 <sensor_mgr_unlock>
    return (0);
   195c0:	e7ee      	b.n	195a0 <sensor_mgr_register+0xc>

000195c2 <sensor_init>:
{
   195c2:	b538      	push	{r3, r4, r5, lr}
   195c4:	4604      	mov	r4, r0
   195c6:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   195c8:	2288      	movs	r2, #136	; 0x88
   195ca:	2100      	movs	r1, #0
   195cc:	f7fe fef3 	bl	183b6 <memset>
    rc = os_mutex_init(&sensor->s_lock);
   195d0:	1d20      	adds	r0, r4, #4
   195d2:	f7fe f91f 	bl	17814 <os_mutex_init>
    if (rc != 0) {
   195d6:	4603      	mov	r3, r0
   195d8:	b900      	cbnz	r0, 195dc <sensor_init+0x1a>
    sensor->s_dev = dev;
   195da:	6025      	str	r5, [r4, #0]
}
   195dc:	4618      	mov	r0, r3
   195de:	bd38      	pop	{r3, r4, r5, pc}

000195e0 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   195e0:	b530      	push	{r4, r5, lr}
   195e2:	b089      	sub	sp, #36	; 0x24
   195e4:	4604      	mov	r4, r0
   195e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   195ea:	f7ff ff87 	bl	194fc <sensor_lock>
    if (rc) {
   195ee:	4605      	mov	r5, r0
   195f0:	b9f8      	cbnz	r0, 19632 <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   195f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   195f4:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   195f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   195f8:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   195fa:	a904      	add	r1, sp, #16
   195fc:	4620      	mov	r0, r4
   195fe:	f7ff fe7b 	bl	192f8 <sensor_mgr_match_bytype>
   19602:	b1e0      	cbz	r0, 1963e <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   19604:	4620      	mov	r0, r4
   19606:	f7ff fee1 	bl	193cc <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1960a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1960c:	6819      	ldr	r1, [r3, #0]
   1960e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19610:	9302      	str	r3, [sp, #8]
   19612:	ab06      	add	r3, sp, #24
   19614:	9301      	str	r3, [sp, #4]
   19616:	4b0b      	ldr	r3, [pc, #44]	; (19644 <sensor_read+0x64>)
   19618:	9300      	str	r3, [sp, #0]
   1961a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1961e:	4620      	mov	r0, r4
   19620:	4788      	blx	r1
                                  timeout);
    if (rc) {
   19622:	4605      	mov	r5, r0
   19624:	b128      	cbz	r0, 19632 <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   19626:	6f23      	ldr	r3, [r4, #112]	; 0x70
   19628:	b11b      	cbz	r3, 19632 <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1962a:	4602      	mov	r2, r0
   1962c:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1962e:	4620      	mov	r0, r4
   19630:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   19632:	4620      	mov	r0, r4
   19634:	f7ff ff6e 	bl	19514 <sensor_unlock>
    return (rc);
}
   19638:	4628      	mov	r0, r5
   1963a:	b009      	add	sp, #36	; 0x24
   1963c:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1963e:	f06f 0503 	mvn.w	r5, #3
   19642:	e7f6      	b.n	19632 <sensor_read+0x52>
   19644:	00019327 	.word	0x00019327

00019648 <sensor_mgr_poll_bytype>:
{
   19648:	b5f0      	push	{r4, r5, r6, r7, lr}
   1964a:	b085      	sub	sp, #20
   1964c:	4616      	mov	r6, r2
   1964e:	461f      	mov	r7, r3
   19650:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   19652:	b10c      	cbz	r4, 19658 <sensor_mgr_poll_bytype+0x10>
   19654:	8aa3      	ldrh	r3, [r4, #20]
   19656:	b9cb      	cbnz	r3, 1968c <sensor_mgr_poll_bytype+0x44>
   19658:	4632      	mov	r2, r6
   1965a:	463b      	mov	r3, r7
   1965c:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1965e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19662:	9102      	str	r1, [sp, #8]
   19664:	2100      	movs	r1, #0
   19666:	9101      	str	r1, [sp, #4]
   19668:	9100      	str	r1, [sp, #0]
   1966a:	f7ff ffb9 	bl	195e0 <sensor_read>
        sensor_lock(sensor);
   1966e:	4628      	mov	r0, r5
   19670:	f7ff ff44 	bl	194fc <sensor_lock>
        if (stt) {
   19674:	b12c      	cbz	r4, 19682 <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   19676:	8aa3      	ldrh	r3, [r4, #20]
   19678:	b91b      	cbnz	r3, 19682 <sensor_mgr_poll_bytype+0x3a>
   1967a:	8a63      	ldrh	r3, [r4, #18]
   1967c:	b10b      	cbz	r3, 19682 <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1967e:	3b01      	subs	r3, #1
   19680:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   19682:	4628      	mov	r0, r5
   19684:	f7ff ff46 	bl	19514 <sensor_unlock>
}
   19688:	b005      	add	sp, #20
   1968a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1968c:	3b01      	subs	r3, #1
   1968e:	82a3      	strh	r3, [r4, #20]
}
   19690:	e7fa      	b.n	19688 <sensor_mgr_poll_bytype+0x40>

00019692 <sensor_poll_per_type_trait>:
{
   19692:	b570      	push	{r4, r5, r6, lr}
   19694:	b082      	sub	sp, #8
   19696:	4605      	mov	r5, r0
   19698:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1969a:	f7ff ff2f 	bl	194fc <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1969e:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   196a0:	e007      	b.n	196b2 <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   196a2:	e9d4 2300 	ldrd	r2, r3, [r4]
   196a6:	9601      	str	r6, [sp, #4]
   196a8:	9400      	str	r4, [sp, #0]
   196aa:	4628      	mov	r0, r5
   196ac:	f7ff ffcc 	bl	19648 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   196b0:	6a24      	ldr	r4, [r4, #32]
   196b2:	2c00      	cmp	r4, #0
   196b4:	d1f5      	bne.n	196a2 <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   196b6:	4628      	mov	r0, r5
   196b8:	f7ff ff2c 	bl	19514 <sensor_unlock>
}
   196bc:	b002      	add	sp, #8
   196be:	bd70      	pop	{r4, r5, r6, pc}

000196c0 <sensor_mgr_wakeup_event>:
{
   196c0:	b570      	push	{r4, r5, r6, lr}
   196c2:	b084      	sub	sp, #16
    now = os_time_get();
   196c4:	f7fe fc92 	bl	17fec <os_time_get>
   196c8:	4605      	mov	r5, r0
    sensor_mgr_lock();
   196ca:	f7ff fea7 	bl	1941c <sensor_mgr_lock>
   196ce:	e012      	b.n	196f6 <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   196d0:	4620      	mov	r0, r4
   196d2:	f7ff ff1f 	bl	19514 <sensor_unlock>
            sensor_mgr_unlock();
   196d6:	f7ff feaf 	bl	19438 <sensor_mgr_unlock>
}
   196da:	b004      	add	sp, #16
   196dc:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   196de:	4632      	mov	r2, r6
   196e0:	4629      	mov	r1, r5
   196e2:	4620      	mov	r0, r4
   196e4:	f7ff ffd5 	bl	19692 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   196e8:	4629      	mov	r1, r5
   196ea:	4620      	mov	r0, r4
   196ec:	f7ff ff17 	bl	1951e <sensor_update_nextrun>
        sensor_unlock(cursor);
   196f0:	4620      	mov	r0, r4
   196f2:	f7ff ff0f 	bl	19514 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   196f6:	a903      	add	r1, sp, #12
   196f8:	4628      	mov	r0, r5
   196fa:	f7ff ff39 	bl	19570 <sensor_find_min_nextrun_sensor>
   196fe:	4604      	mov	r4, r0
        sensor_lock(cursor);
   19700:	f7ff fefc 	bl	194fc <sensor_lock>
        if (!cursor->s_poll_rate) {
   19704:	6a23      	ldr	r3, [r4, #32]
   19706:	2b00      	cmp	r3, #0
   19708:	d0e2      	beq.n	196d0 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1970a:	9e03      	ldr	r6, [sp, #12]
   1970c:	b96e      	cbnz	r6, 1972a <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1970e:	4620      	mov	r0, r4
   19710:	f7ff fde6 	bl	192e0 <sensor_type_traits_empty>
   19714:	2800      	cmp	r0, #0
   19716:	d0e2      	beq.n	196de <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   19718:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1971c:	9501      	str	r5, [sp, #4]
   1971e:	2100      	movs	r1, #0
   19720:	9100      	str	r1, [sp, #0]
   19722:	4620      	mov	r0, r4
   19724:	f7ff ff90 	bl	19648 <sensor_mgr_poll_bytype>
   19728:	e7de      	b.n	196e8 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1972a:	f7ff fe85 	bl	19438 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1972e:	9903      	ldr	r1, [sp, #12]
   19730:	4801      	ldr	r0, [pc, #4]	; (19738 <sensor_mgr_wakeup_event+0x78>)
   19732:	f7fd fbe3 	bl	16efc <os_callout_reset>
   19736:	e7d0      	b.n	196da <sensor_mgr_wakeup_event+0x1a>
   19738:	2000b69c 	.word	0x2000b69c

0001973c <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1973c:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1973e:	2101      	movs	r1, #1
   19740:	4806      	ldr	r0, [pc, #24]	; (1975c <init_sensor_coap+0x20>)
   19742:	f7fe faf1 	bl	17d28 <os_sem_init>
    assert(rc == OS_OK);
   19746:	b918      	cbnz	r0, 19750 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   19748:	4b05      	ldr	r3, [pc, #20]	; (19760 <init_sensor_coap+0x24>)
   1974a:	2201      	movs	r2, #1
   1974c:	701a      	strb	r2, [r3, #0]
}
   1974e:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   19750:	2300      	movs	r3, #0
   19752:	461a      	mov	r2, r3
   19754:	4619      	mov	r1, r3
   19756:	4618      	mov	r0, r3
   19758:	f7fd fa2a 	bl	16bb0 <__assert_func>
   1975c:	2000b220 	.word	0x2000b220
   19760:	2000b228 	.word	0x2000b228

00019764 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   19764:	4b04      	ldr	r3, [pc, #16]	; (19778 <is_sensor_node+0x14>)
   19766:	e9d3 2300 	ldrd	r2, r3, [r3]
   1976a:	4313      	orrs	r3, r2
   1976c:	d101      	bne.n	19772 <is_sensor_node+0xe>
    return false;
   1976e:	2000      	movs	r0, #0
}
   19770:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   19772:	2001      	movs	r0, #1
   19774:	4770      	bx	lr
   19776:	bf00      	nop
   19778:	2000b240 	.word	0x2000b240

0001977c <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1977c:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1977e:	4b16      	ldr	r3, [pc, #88]	; (197d8 <get_hardware_id+0x5c>)
   19780:	681b      	ldr	r3, [r3, #0]
   19782:	b10b      	cbz	r3, 19788 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   19784:	4815      	ldr	r0, [pc, #84]	; (197dc <get_hardware_id+0x60>)
   19786:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   19788:	f000 fcee 	bl	1a168 <hal_bsp_hw_id_len>
   1978c:	4b12      	ldr	r3, [pc, #72]	; (197d8 <get_hardware_id+0x5c>)
   1978e:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   19790:	280b      	cmp	r0, #11
   19792:	d914      	bls.n	197be <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   19794:	210c      	movs	r1, #12
   19796:	4811      	ldr	r0, [pc, #68]	; (197dc <get_hardware_id+0x60>)
   19798:	f000 fce8 	bl	1a16c <hal_bsp_hw_id>
   1979c:	4b0e      	ldr	r3, [pc, #56]	; (197d8 <get_hardware_id+0x5c>)
   1979e:	6018      	str	r0, [r3, #0]
   197a0:	2800      	cmp	r0, #0
   197a2:	dd12      	ble.n	197ca <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   197a4:	490e      	ldr	r1, [pc, #56]	; (197e0 <get_hardware_id+0x64>)
   197a6:	480f      	ldr	r0, [pc, #60]	; (197e4 <get_hardware_id+0x68>)
   197a8:	f7fc fb3a 	bl	15e20 <console_printf>
   197ac:	4b0a      	ldr	r3, [pc, #40]	; (197d8 <get_hardware_id+0x5c>)
   197ae:	6819      	ldr	r1, [r3, #0]
   197b0:	480a      	ldr	r0, [pc, #40]	; (197dc <get_hardware_id+0x60>)
   197b2:	f7fc fac5 	bl	15d40 <console_dump>
   197b6:	480c      	ldr	r0, [pc, #48]	; (197e8 <get_hardware_id+0x6c>)
   197b8:	f7fc fb32 	bl	15e20 <console_printf>
   197bc:	e7e2      	b.n	19784 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   197be:	2300      	movs	r3, #0
   197c0:	461a      	mov	r2, r3
   197c2:	4619      	mov	r1, r3
   197c4:	4618      	mov	r0, r3
   197c6:	f7fd f9f3 	bl	16bb0 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   197ca:	2300      	movs	r3, #0
   197cc:	461a      	mov	r2, r3
   197ce:	4619      	mov	r1, r3
   197d0:	4618      	mov	r0, r3
   197d2:	f7fd f9ed 	bl	16bb0 <__assert_func>
   197d6:	bf00      	nop
   197d8:	2000b238 	.word	0x2000b238
   197dc:	2000b22c 	.word	0x2000b22c
   197e0:	0001e618 	.word	0x0001e618
   197e4:	0001e5d0 	.word	0x0001e5d0
   197e8:	0001e730 	.word	0x0001e730

000197ec <is_collector_node>:
bool is_collector_node(void) {
   197ec:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   197ee:	f7ff ffc5 	bl	1977c <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   197f2:	220c      	movs	r2, #12
   197f4:	4903      	ldr	r1, [pc, #12]	; (19804 <is_collector_node+0x18>)
   197f6:	f7fe fdad 	bl	18354 <memcmp>
   197fa:	b108      	cbz	r0, 19800 <is_collector_node+0x14>
    return false; 
   197fc:	2000      	movs	r0, #0
}
   197fe:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   19800:	2001      	movs	r0, #1
   19802:	e7fc      	b.n	197fe <is_collector_node+0x12>
   19804:	0001e588 	.word	0x0001e588

00019808 <is_standalone_node>:
bool is_standalone_node(void) {
   19808:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1980a:	f7ff ffef 	bl	197ec <is_collector_node>
   1980e:	b928      	cbnz	r0, 1981c <is_standalone_node+0x14>
   19810:	4604      	mov	r4, r0
   19812:	f7ff ffa7 	bl	19764 <is_sensor_node>
   19816:	b910      	cbnz	r0, 1981e <is_standalone_node+0x16>
   19818:	2401      	movs	r4, #1
   1981a:	e000      	b.n	1981e <is_standalone_node+0x16>
    return false;
   1981c:	2400      	movs	r4, #0
}
   1981e:	4620      	mov	r0, r4
   19820:	bd10      	pop	{r4, pc}
	...

00019824 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   19824:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   19826:	2400      	movs	r4, #0
   19828:	2c04      	cmp	r4, #4
   1982a:	dc15      	bgt.n	19858 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1982c:	4b23      	ldr	r3, [pc, #140]	; (198bc <sensor_network_init+0x98>)
   1982e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   19832:	e9d3 2300 	ldrd	r2, r3, [r3]
   19836:	4922      	ldr	r1, [pc, #136]	; (198c0 <sensor_network_init+0x9c>)
   19838:	4822      	ldr	r0, [pc, #136]	; (198c4 <sensor_network_init+0xa0>)
   1983a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1983e:	f000 fcaf 	bl	1a1a0 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   19842:	3001      	adds	r0, #1
   19844:	280b      	cmp	r0, #11
   19846:	dc01      	bgt.n	1984c <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   19848:	3401      	adds	r4, #1
   1984a:	e7ed      	b.n	19828 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1984c:	2300      	movs	r3, #0
   1984e:	461a      	mov	r2, r3
   19850:	4619      	mov	r1, r3
   19852:	4618      	mov	r0, r3
   19854:	f7fd f9ac 	bl	16bb0 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   19858:	f7ff ff90 	bl	1977c <get_hardware_id>
   1985c:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1985e:	2400      	movs	r4, #0
   19860:	2c04      	cmp	r4, #4
   19862:	dc19      	bgt.n	19898 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   19864:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   19868:	0093      	lsls	r3, r2, #2
   1986a:	220c      	movs	r2, #12
   1986c:	4916      	ldr	r1, [pc, #88]	; (198c8 <sensor_network_init+0xa4>)
   1986e:	4419      	add	r1, r3
   19870:	4628      	mov	r0, r5
   19872:	f7fe fd6f 	bl	18354 <memcmp>
   19876:	b108      	cbz	r0, 1987c <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   19878:	3401      	adds	r4, #1
   1987a:	e7f1      	b.n	19860 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1987c:	4b0f      	ldr	r3, [pc, #60]	; (198bc <sensor_network_init+0x98>)
   1987e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   19882:	e9d3 0100 	ldrd	r0, r1, [r3]
   19886:	4b11      	ldr	r3, [pc, #68]	; (198cc <sensor_network_init+0xa8>)
   19888:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1988c:	1c63      	adds	r3, r4, #1
   1988e:	4a10      	ldr	r2, [pc, #64]	; (198d0 <sensor_network_init+0xac>)
   19890:	4910      	ldr	r1, [pc, #64]	; (198d4 <sensor_network_init+0xb0>)
   19892:	4811      	ldr	r0, [pc, #68]	; (198d8 <sensor_network_init+0xb4>)
   19894:	f7fc fac4 	bl	15e20 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   19898:	f7ff ffa8 	bl	197ec <is_collector_node>
   1989c:	b940      	cbnz	r0, 198b0 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1989e:	f7ff ffb3 	bl	19808 <is_standalone_node>
   198a2:	b150      	cbz	r0, 198ba <sensor_network_init+0x96>
   198a4:	4a0a      	ldr	r2, [pc, #40]	; (198d0 <sensor_network_init+0xac>)
   198a6:	490b      	ldr	r1, [pc, #44]	; (198d4 <sensor_network_init+0xb0>)
   198a8:	480c      	ldr	r0, [pc, #48]	; (198dc <sensor_network_init+0xb8>)
   198aa:	f7fc fab9 	bl	15e20 <console_printf>
}
   198ae:	e004      	b.n	198ba <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   198b0:	4a07      	ldr	r2, [pc, #28]	; (198d0 <sensor_network_init+0xac>)
   198b2:	4908      	ldr	r1, [pc, #32]	; (198d4 <sensor_network_init+0xb0>)
   198b4:	480a      	ldr	r0, [pc, #40]	; (198e0 <sensor_network_init+0xbc>)
   198b6:	f7fc fab3 	bl	15e20 <console_printf>
}
   198ba:	bd38      	pop	{r3, r4, r5, pc}
   198bc:	0001e630 	.word	0x0001e630
   198c0:	0001e5d8 	.word	0x0001e5d8
   198c4:	20000128 	.word	0x20000128
   198c8:	0001e594 	.word	0x0001e594
   198cc:	2000b240 	.word	0x2000b240
   198d0:	0001e5e0 	.word	0x0001e5e0
   198d4:	0001e618 	.word	0x0001e618
   198d8:	0001e5e8 	.word	0x0001e5e8
   198dc:	0001e608 	.word	0x0001e608
   198e0:	0001e5f8 	.word	0x0001e5f8

000198e4 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   198e4:	b530      	push	{r4, r5, lr}
   198e6:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   198e8:	2200      	movs	r2, #0
   198ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   198ee:	4810      	ldr	r0, [pc, #64]	; (19930 <config_device+0x4c>)
   198f0:	f7fd fc2c 	bl	1714c <os_dev_open>
    assert(dev != NULL);
   198f4:	b178      	cbz	r0, 19916 <config_device+0x32>
   198f6:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   198f8:	4668      	mov	r0, sp
   198fa:	f000 f86c 	bl	199d6 <temp_stub_default_cfg>
    assert(rc == 0);
   198fe:	b980      	cbnz	r0, 19922 <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   19900:	4669      	mov	r1, sp
   19902:	4620      	mov	r0, r4
   19904:	f000 f900 	bl	19b08 <temp_stub_config>
   19908:	4605      	mov	r5, r0
    os_dev_close(dev);
   1990a:	4620      	mov	r0, r4
   1990c:	f7fd fc40 	bl	17190 <os_dev_close>
    return rc;
}
   19910:	4628      	mov	r0, r5
   19912:	b003      	add	sp, #12
   19914:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   19916:	2300      	movs	r3, #0
   19918:	461a      	mov	r2, r3
   1991a:	4619      	mov	r1, r3
   1991c:	4618      	mov	r0, r3
   1991e:	f7fd f947 	bl	16bb0 <__assert_func>
    assert(rc == 0);
   19922:	2300      	movs	r3, #0
   19924:	461a      	mov	r2, r3
   19926:	4619      	mov	r1, r3
   19928:	4618      	mov	r0, r3
   1992a:	f7fd f941 	bl	16bb0 <__assert_func>
   1992e:	bf00      	nop
   19930:	0001e658 	.word	0x0001e658

00019934 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   19934:	b510      	push	{r4, lr}
   19936:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   19938:	4c10      	ldr	r4, [pc, #64]	; (1997c <temp_stub_create+0x48>)
   1993a:	4621      	mov	r1, r4
   1993c:	4810      	ldr	r0, [pc, #64]	; (19980 <temp_stub_create+0x4c>)
   1993e:	f7fc fa6f 	bl	15e20 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   19942:	4b10      	ldr	r3, [pc, #64]	; (19984 <temp_stub_create+0x50>)
   19944:	9301      	str	r3, [sp, #4]
   19946:	4b10      	ldr	r3, [pc, #64]	; (19988 <temp_stub_create+0x54>)
   19948:	9300      	str	r3, [sp, #0]
   1994a:	2300      	movs	r3, #0
   1994c:	2201      	movs	r2, #1
   1994e:	4621      	mov	r1, r4
   19950:	480e      	ldr	r0, [pc, #56]	; (1998c <temp_stub_create+0x58>)
   19952:	f7fd fbb5 	bl	170c0 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   19956:	b920      	cbnz	r0, 19962 <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   19958:	f7ff ffc4 	bl	198e4 <config_device>
    assert(rc == 0);
   1995c:	b938      	cbnz	r0, 1996e <temp_stub_create+0x3a>
}
   1995e:	b002      	add	sp, #8
   19960:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   19962:	2300      	movs	r3, #0
   19964:	461a      	mov	r2, r3
   19966:	4619      	mov	r1, r3
   19968:	4618      	mov	r0, r3
   1996a:	f7fd f921 	bl	16bb0 <__assert_func>
    assert(rc == 0);
   1996e:	2300      	movs	r3, #0
   19970:	461a      	mov	r2, r3
   19972:	4619      	mov	r1, r3
   19974:	4618      	mov	r0, r3
   19976:	f7fd f91b 	bl	16bb0 <__assert_func>
   1997a:	bf00      	nop
   1997c:	0001e658 	.word	0x0001e658
   19980:	0001e664 	.word	0x0001e664
   19984:	2000b280 	.word	0x2000b280
   19988:	000199e5 	.word	0x000199e5
   1998c:	2000b298 	.word	0x2000b298

00019990 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   19990:	2000      	movs	r0, #0
   19992:	4770      	bx	lr

00019994 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   19994:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   19998:	2100      	movs	r1, #0
   1999a:	ea50 0301 	orrs.w	r3, r0, r1
   1999e:	d004      	beq.n	199aa <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   199a0:	9b00      	ldr	r3, [sp, #0]
   199a2:	2201      	movs	r2, #1
   199a4:	701a      	strb	r2, [r3, #0]
    return (0);
   199a6:	2000      	movs	r0, #0
   199a8:	4770      	bx	lr
err:
    return (rc);
   199aa:	f06f 0001 	mvn.w	r0, #1
}
   199ae:	4770      	bx	lr

000199b0 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   199b0:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   199b2:	b120      	cbz	r0, 199be <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   199b4:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   199b8:	d007      	beq.n	199ca <temp_stub_open+0x1a>
}
   199ba:	2000      	movs	r0, #0
   199bc:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   199be:	2300      	movs	r3, #0
   199c0:	461a      	mov	r2, r3
   199c2:	4619      	mov	r1, r3
   199c4:	4618      	mov	r0, r3
   199c6:	f7fd f8f3 	bl	16bb0 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   199ca:	2300      	movs	r3, #0
   199cc:	461a      	mov	r2, r3
   199ce:	4619      	mov	r1, r3
   199d0:	4618      	mov	r0, r3
   199d2:	f7fd f8ed 	bl	16bb0 <__assert_func>

000199d6 <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   199d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   199da:	2300      	movs	r3, #0
   199dc:	e9c0 2300 	strd	r2, r3, [r0]
}
   199e0:	2000      	movs	r0, #0
   199e2:	4770      	bx	lr

000199e4 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   199e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   199e6:	b379      	cbz	r1, 19a48 <temp_stub_init+0x64>
   199e8:	460d      	mov	r5, r1
   199ea:	b380      	cbz	r0, 19a4e <temp_stub_init+0x6a>
   199ec:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   199ee:	30b0      	adds	r0, #176	; 0xb0
   199f0:	f7ff fff1 	bl	199d6 <temp_stub_default_cfg>
    if (rc) { goto err; }
   199f4:	4603      	mov	r3, r0
   199f6:	b108      	cbz	r0, 199fc <temp_stub_init+0x18>
}
   199f8:	4618      	mov	r0, r3
   199fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   199fc:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   19a00:	4621      	mov	r1, r4
   19a02:	4630      	mov	r0, r6
   19a04:	f7ff fddd 	bl	195c2 <sensor_init>
    if (rc != 0) { goto err; }
   19a08:	4603      	mov	r3, r0
   19a0a:	2800      	cmp	r0, #0
   19a0c:	d1f4      	bne.n	199f8 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   19a0e:	4b11      	ldr	r3, [pc, #68]	; (19a54 <temp_stub_init+0x70>)
   19a10:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   19a12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   19a16:	2300      	movs	r3, #0
   19a18:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   19a1c:	682a      	ldr	r2, [r5, #0]
   19a1e:	686f      	ldr	r7, [r5, #4]
   19a20:	68a8      	ldr	r0, [r5, #8]
   19a22:	68e9      	ldr	r1, [r5, #12]
   19a24:	6722      	str	r2, [r4, #112]	; 0x70
   19a26:	6767      	str	r7, [r4, #116]	; 0x74
   19a28:	67a0      	str	r0, [r4, #120]	; 0x78
   19a2a:	67e1      	str	r1, [r4, #124]	; 0x7c
   19a2c:	692a      	ldr	r2, [r5, #16]
   19a2e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   19a32:	4630      	mov	r0, r6
   19a34:	f7ff fdae 	bl	19594 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   19a38:	4603      	mov	r3, r0
   19a3a:	2800      	cmp	r0, #0
   19a3c:	d1dc      	bne.n	199f8 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   19a3e:	4a06      	ldr	r2, [pc, #24]	; (19a58 <temp_stub_init+0x74>)
   19a40:	6022      	str	r2, [r4, #0]
   19a42:	4a06      	ldr	r2, [pc, #24]	; (19a5c <temp_stub_init+0x78>)
   19a44:	60e2      	str	r2, [r4, #12]
    return (0);
   19a46:	e7d7      	b.n	199f8 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   19a48:	f06f 0308 	mvn.w	r3, #8
   19a4c:	e7d4      	b.n	199f8 <temp_stub_init+0x14>
   19a4e:	f06f 0308 	mvn.w	r3, #8
   19a52:	e7d1      	b.n	199f8 <temp_stub_init+0x14>
   19a54:	0001e674 	.word	0x0001e674
   19a58:	000199b1 	.word	0x000199b1
   19a5c:	00019991 	.word	0x00019991

00019a60 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   19a60:	b538      	push	{r3, r4, r5, lr}
   19a62:	460d      	mov	r5, r1
   19a64:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   19a66:	4808      	ldr	r0, [pc, #32]	; (19a88 <temp_stub_get_raw_temperature+0x28>)
   19a68:	f7fc f9da 	bl	15e20 <console_printf>
    assert(temp_sum);
   19a6c:	b134      	cbz	r4, 19a7c <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   19a6e:	f240 61dd 	movw	r1, #1757	; 0x6dd
   19a72:	fb01 f105 	mul.w	r1, r1, r5
   19a76:	6021      	str	r1, [r4, #0]
}
   19a78:	2000      	movs	r0, #0
   19a7a:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   19a7c:	2300      	movs	r3, #0
   19a7e:	461a      	mov	r2, r3
   19a80:	4619      	mov	r1, r3
   19a82:	4618      	mov	r0, r3
   19a84:	f7fd f894 	bl	16bb0 <__assert_func>
   19a88:	0001e69c 	.word	0x0001e69c

00019a8c <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   19a8c:	b530      	push	{r4, r5, lr}
   19a8e:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   19a90:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   19a94:	2500      	movs	r5, #0
   19a96:	ea54 0305 	orrs.w	r3, r4, r5
   19a9a:	d032      	beq.n	19b02 <temp_stub_sensor_read+0x76>
   19a9c:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   19a9e:	6805      	ldr	r5, [r0, #0]
   19aa0:	b165      	cbz	r5, 19abc <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   19aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19aa6:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   19aa8:	2200      	movs	r2, #0
   19aaa:	4611      	mov	r1, r2
   19aac:	4628      	mov	r0, r5
   19aae:	f7ff ff7f 	bl	199b0 <temp_stub_open>
        if (rc) { goto err; }
   19ab2:	4603      	mov	r3, r0
   19ab4:	b140      	cbz	r0, 19ac8 <temp_stub_sensor_read+0x3c>
}
   19ab6:	4618      	mov	r0, r3
   19ab8:	b007      	add	sp, #28
   19aba:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   19abc:	2300      	movs	r3, #0
   19abe:	461a      	mov	r2, r3
   19ac0:	4619      	mov	r1, r3
   19ac2:	4618      	mov	r0, r3
   19ac4:	f7fd f874 	bl	16bb0 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   19ac8:	2300      	movs	r3, #0
   19aca:	aa03      	add	r2, sp, #12
   19acc:	2101      	movs	r1, #1
   19ace:	4628      	mov	r0, r5
   19ad0:	f7ff ffc6 	bl	19a60 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   19ad4:	4603      	mov	r3, r0
   19ad6:	2800      	cmp	r0, #0
   19ad8:	d1ed      	bne.n	19ab6 <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   19ada:	9a03      	ldr	r2, [sp, #12]
   19adc:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   19ade:	2201      	movs	r2, #1
   19ae0:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   19ae4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19ae6:	2a00      	cmp	r2, #0
   19ae8:	d0e5      	beq.n	19ab6 <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   19aea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   19aee:	2300      	movs	r3, #0
   19af0:	e9cd 2300 	strd	r2, r3, [sp]
   19af4:	aa04      	add	r2, sp, #16
   19af6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   19af8:	4620      	mov	r0, r4
   19afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19afc:	4798      	blx	r3
   19afe:	4603      	mov	r3, r0
   19b00:	e7d9      	b.n	19ab6 <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   19b02:	f06f 0301 	mvn.w	r3, #1
   19b06:	e7d6      	b.n	19ab6 <temp_stub_sensor_read+0x2a>

00019b08 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   19b08:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   19b0a:	f110 0f70 	cmn.w	r0, #112	; 0x70
   19b0e:	d009      	beq.n	19b24 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   19b10:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   19b14:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   19b18:	e9d1 2300 	ldrd	r2, r3, [r1]
   19b1c:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   19b20:	2000      	movs	r0, #0
   19b22:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   19b24:	2300      	movs	r3, #0
   19b26:	461a      	mov	r2, r3
   19b28:	4619      	mov	r1, r3
   19b2a:	4618      	mov	r0, r3
   19b2c:	f7fd f840 	bl	16bb0 <__assert_func>

00019b30 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   19b30:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   19b32:	e002      	b.n	19b3a <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   19b34:	4618      	mov	r0, r3
   19b36:	f000 f85b 	bl	19bf0 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   19b3a:	4808      	ldr	r0, [pc, #32]	; (19b5c <oc_buffer_tx+0x2c>)
   19b3c:	f7fd fc03 	bl	17346 <os_mqueue_get>
   19b40:	4603      	mov	r3, r0
   19b42:	b148      	cbz	r0, 19b58 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   19b44:	2200      	movs	r2, #0
   19b46:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   19b48:	7e1a      	ldrb	r2, [r3, #24]
   19b4a:	f012 0f08 	tst.w	r2, #8
   19b4e:	d0f1      	beq.n	19b34 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   19b50:	4618      	mov	r0, r3
   19b52:	f000 f85d 	bl	19c10 <oc_send_multicast_message>
   19b56:	e7f0      	b.n	19b3a <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   19b58:	bd08      	pop	{r3, pc}
   19b5a:	bf00      	nop
   19b5c:	2000b370 	.word	0x2000b370

00019b60 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   19b60:	b500      	push	{lr}
   19b62:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   19b64:	4808      	ldr	r0, [pc, #32]	; (19b88 <oc_buffer_rx+0x28>)
   19b66:	f7fd fbee 	bl	17346 <os_mqueue_get>
   19b6a:	9001      	str	r0, [sp, #4]
   19b6c:	b140      	cbz	r0, 19b80 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   19b6e:	a801      	add	r0, sp, #4
   19b70:	f000 faa2 	bl	1a0b8 <__wrap_coap_receive>
#endif
        if (m) {
   19b74:	9801      	ldr	r0, [sp, #4]
   19b76:	2800      	cmp	r0, #0
   19b78:	d0f4      	beq.n	19b64 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   19b7a:	f7fd fc59 	bl	17430 <os_mbuf_free_chain>
   19b7e:	e7f1      	b.n	19b64 <oc_buffer_rx+0x4>
        }
    }
}
   19b80:	b003      	add	sp, #12
   19b82:	f85d fb04 	ldr.w	pc, [sp], #4
   19b86:	bf00      	nop
   19b88:	2000b358 	.word	0x2000b358

00019b8c <oc_buffer_init>:

void
oc_buffer_init(void)
{
   19b8c:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   19b8e:	2200      	movs	r2, #0
   19b90:	4904      	ldr	r1, [pc, #16]	; (19ba4 <oc_buffer_init+0x18>)
   19b92:	4805      	ldr	r0, [pc, #20]	; (19ba8 <oc_buffer_init+0x1c>)
   19b94:	f7fd fbce 	bl	17334 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   19b98:	2200      	movs	r2, #0
   19b9a:	4904      	ldr	r1, [pc, #16]	; (19bac <oc_buffer_init+0x20>)
   19b9c:	4804      	ldr	r0, [pc, #16]	; (19bb0 <oc_buffer_init+0x24>)
   19b9e:	f7fd fbc9 	bl	17334 <os_mqueue_init>
}
   19ba2:	bd08      	pop	{r3, pc}
   19ba4:	00019b61 	.word	0x00019b61
   19ba8:	2000b358 	.word	0x2000b358
   19bac:	00019b31 	.word	0x00019b31
   19bb0:	2000b370 	.word	0x2000b370

00019bb4 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   19bb4:	b500      	push	{lr}
   19bb6:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   19bb8:	4b07      	ldr	r3, [pc, #28]	; (19bd8 <oc_ri_mem_init+0x24>)
   19bba:	9300      	str	r3, [sp, #0]
   19bbc:	4b07      	ldr	r3, [pc, #28]	; (19bdc <oc_ri_mem_init+0x28>)
   19bbe:	2264      	movs	r2, #100	; 0x64
   19bc0:	2102      	movs	r1, #2
   19bc2:	4807      	ldr	r0, [pc, #28]	; (19be0 <oc_ri_mem_init+0x2c>)
   19bc4:	f7fd fd3c 	bl	17640 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   19bc8:	f000 f860 	bl	19c8c <oc_rep_init>
#endif
    oc_buffer_init();
   19bcc:	f7ff ffde 	bl	19b8c <oc_buffer_init>
}
   19bd0:	b003      	add	sp, #12
   19bd2:	f85d fb04 	ldr.w	pc, [sp], #4
   19bd6:	bf00      	nop
   19bd8:	0001e6b4 	.word	0x0001e6b4
   19bdc:	2000b388 	.word	0x2000b388
   19be0:	2000b450 	.word	0x2000b450

00019be4 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   19be4:	4b01      	ldr	r3, [pc, #4]	; (19bec <oc_evq_set+0x8>)
   19be6:	6018      	str	r0, [r3, #0]
}
   19be8:	4770      	bx	lr
   19bea:	bf00      	nop
   19bec:	2000b46c 	.word	0x2000b46c

00019bf0 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   19bf0:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   19bf2:	7e03      	ldrb	r3, [r0, #24]
   19bf4:	f003 0307 	and.w	r3, r3, #7
   19bf8:	4a04      	ldr	r2, [pc, #16]	; (19c0c <oc_send_buffer+0x1c>)
   19bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   19bfe:	b113      	cbz	r3, 19c06 <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   19c00:	68db      	ldr	r3, [r3, #12]
   19c02:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   19c04:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   19c06:	f7fd fc13 	bl	17430 <os_mbuf_free_chain>
}
   19c0a:	e7fb      	b.n	19c04 <oc_send_buffer+0x14>
   19c0c:	2000b700 	.word	0x2000b700

00019c10 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   19c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c14:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   19c16:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   19c18:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   19c1a:	e002      	b.n	19c22 <oc_send_multicast_message+0x12>
   19c1c:	4635      	mov	r5, r6
   19c1e:	3401      	adds	r4, #1
   19c20:	462e      	mov	r6, r5
   19c22:	2c07      	cmp	r4, #7
   19c24:	dc12      	bgt.n	19c4c <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   19c26:	4b0c      	ldr	r3, [pc, #48]	; (19c58 <oc_send_multicast_message+0x48>)
   19c28:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   19c2c:	2d00      	cmp	r5, #0
   19c2e:	d0f5      	beq.n	19c1c <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   19c30:	2e00      	cmp	r6, #0
   19c32:	d0f4      	beq.n	19c1e <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   19c34:	4638      	mov	r0, r7
   19c36:	f7fd fc6b 	bl	17510 <os_mbuf_dup>
   19c3a:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   19c3c:	6933      	ldr	r3, [r6, #16]
   19c3e:	4638      	mov	r0, r7
   19c40:	4798      	blx	r3
            if (!n) {
   19c42:	f1b8 0f00 	cmp.w	r8, #0
   19c46:	d005      	beq.n	19c54 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   19c48:	4647      	mov	r7, r8
   19c4a:	e7e8      	b.n	19c1e <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   19c4c:	b116      	cbz	r6, 19c54 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   19c4e:	6933      	ldr	r3, [r6, #16]
   19c50:	4638      	mov	r0, r7
   19c52:	4798      	blx	r3
    }
}
   19c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19c58:	2000b700 	.word	0x2000b700

00019c5c <oc_init>:
    return rc;
}

void
oc_init(void)
{
   19c5c:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   19c5e:	4b07      	ldr	r3, [pc, #28]	; (19c7c <oc_init+0x20>)
   19c60:	781b      	ldrb	r3, [r3, #0]
   19c62:	b133      	cbz	r3, 19c72 <oc_init+0x16>
    oc_ri_mem_init();
   19c64:	f7ff ffa6 	bl	19bb4 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   19c68:	f7fd fb60 	bl	1732c <os_eventq_dflt_get>
   19c6c:	f7ff ffba 	bl	19be4 <oc_evq_set>
}
   19c70:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   19c72:	461a      	mov	r2, r3
   19c74:	4619      	mov	r1, r3
   19c76:	4618      	mov	r0, r3
   19c78:	f7fc ff9a 	bl	16bb0 <__assert_func>
   19c7c:	2000b55c 	.word	0x2000b55c

00019c80 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   19c80:	4770      	bx	lr

00019c82 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   19c82:	4770      	bx	lr

00019c84 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   19c84:	4770      	bx	lr

00019c86 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   19c86:	4770      	bx	lr

00019c88 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   19c88:	4770      	bx	lr
	...

00019c8c <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   19c8c:	b500      	push	{lr}
   19c8e:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   19c90:	4b05      	ldr	r3, [pc, #20]	; (19ca8 <oc_rep_init+0x1c>)
   19c92:	9300      	str	r3, [sp, #0]
   19c94:	4b05      	ldr	r3, [pc, #20]	; (19cac <oc_rep_init+0x20>)
   19c96:	2218      	movs	r2, #24
   19c98:	2102      	movs	r1, #2
   19c9a:	4805      	ldr	r0, [pc, #20]	; (19cb0 <oc_rep_init+0x24>)
   19c9c:	f7fd fcd0 	bl	17640 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   19ca0:	b003      	add	sp, #12
   19ca2:	f85d fb04 	ldr.w	pc, [sp], #4
   19ca6:	bf00      	nop
   19ca8:	0001e6c0 	.word	0x0001e6c0
   19cac:	2000b48c 	.word	0x2000b48c
   19cb0:	2000b470 	.word	0x2000b470

00019cb4 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   19cb4:	b570      	push	{r4, r5, r6, lr}
   19cb6:	b086      	sub	sp, #24
   19cb8:	4605      	mov	r5, r0
   19cba:	460e      	mov	r6, r1
   19cbc:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   19cbe:	2300      	movs	r3, #0
   19cc0:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   19cc2:	f000 f9ad 	bl	1a020 <mfg_init>

    mfg_open(&reader);
   19cc6:	a801      	add	r0, sp, #4
   19cc8:	f000 f9c6 	bl	1a058 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   19ccc:	6823      	ldr	r3, [r4, #0]
   19cce:	42ab      	cmp	r3, r5
   19cd0:	da29      	bge.n	19d26 <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   19cd2:	2102      	movs	r1, #2
   19cd4:	a801      	add	r0, sp, #4
   19cd6:	f000 f98c 	bl	19ff2 <mfg_seek_next_with_type>
   19cda:	4603      	mov	r3, r0
        switch (rc) {
   19cdc:	f110 0f0f 	cmn.w	r0, #15
   19ce0:	d003      	beq.n	19cea <flash_map_read_mfg+0x36>
   19ce2:	b120      	cbz	r0, 19cee <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   19ce4:	4618      	mov	r0, r3
   19ce6:	b006      	add	sp, #24
   19ce8:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   19cea:	2300      	movs	r3, #0
   19cec:	e7fa      	b.n	19ce4 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   19cee:	a903      	add	r1, sp, #12
   19cf0:	a801      	add	r0, sp, #4
   19cf2:	f000 f98b 	bl	1a00c <mfg_read_tlv_flash_area>
        if (rc != 0) {
   19cf6:	4603      	mov	r3, r0
   19cf8:	2800      	cmp	r0, #0
   19cfa:	d1f3      	bne.n	19ce4 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   19cfc:	6823      	ldr	r3, [r4, #0]
   19cfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   19d02:	009a      	lsls	r2, r3, #2
   19d04:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   19d06:	f89d 100c 	ldrb.w	r1, [sp, #12]
   19d0a:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   19d0c:	f89d 200d 	ldrb.w	r2, [sp, #13]
   19d10:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   19d12:	f8dd 200e 	ldr.w	r2, [sp, #14]
   19d16:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   19d18:	f8dd 2012 	ldr.w	r2, [sp, #18]
   19d1c:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   19d1e:	6823      	ldr	r3, [r4, #0]
   19d20:	3301      	adds	r3, #1
   19d22:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   19d24:	e7d2      	b.n	19ccc <flash_map_read_mfg+0x18>
            return -1;
   19d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19d2a:	e7db      	b.n	19ce4 <flash_map_read_mfg+0x30>

00019d2c <flash_area_open>:
{
   19d2c:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   19d2e:	4b0d      	ldr	r3, [pc, #52]	; (19d64 <flash_area_open+0x38>)
   19d30:	681d      	ldr	r5, [r3, #0]
   19d32:	b1a5      	cbz	r5, 19d5e <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   19d34:	2300      	movs	r3, #0
   19d36:	4a0c      	ldr	r2, [pc, #48]	; (19d68 <flash_area_open+0x3c>)
   19d38:	6812      	ldr	r2, [r2, #0]
   19d3a:	429a      	cmp	r2, r3
   19d3c:	dd0b      	ble.n	19d56 <flash_area_open+0x2a>
        area = flash_map + i;
   19d3e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   19d42:	00a2      	lsls	r2, r4, #2
   19d44:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   19d46:	5caa      	ldrb	r2, [r5, r2]
   19d48:	4282      	cmp	r2, r0
   19d4a:	d001      	beq.n	19d50 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   19d4c:	3301      	adds	r3, #1
   19d4e:	e7f2      	b.n	19d36 <flash_area_open+0xa>
            *fap = area;
   19d50:	600c      	str	r4, [r1, #0]
            return 0;
   19d52:	2000      	movs	r0, #0
   19d54:	e001      	b.n	19d5a <flash_area_open+0x2e>
    return SYS_ENOENT;
   19d56:	f06f 0003 	mvn.w	r0, #3
}
   19d5a:	bc30      	pop	{r4, r5}
   19d5c:	4770      	bx	lr
        return SYS_EACCES;
   19d5e:	f06f 0006 	mvn.w	r0, #6
   19d62:	e7fa      	b.n	19d5a <flash_area_open+0x2e>
   19d64:	2000b724 	.word	0x2000b724
   19d68:	2000b720 	.word	0x2000b720

00019d6c <flash_area_read>:
{
   19d6c:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   19d6e:	6884      	ldr	r4, [r0, #8]
   19d70:	428c      	cmp	r4, r1
   19d72:	d308      	bcc.n	19d86 <flash_area_read+0x1a>
   19d74:	18cd      	adds	r5, r1, r3
   19d76:	42ac      	cmp	r4, r5
   19d78:	d308      	bcc.n	19d8c <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   19d7a:	6844      	ldr	r4, [r0, #4]
   19d7c:	4421      	add	r1, r4
   19d7e:	7840      	ldrb	r0, [r0, #1]
   19d80:	f000 f9c8 	bl	1a114 <hal_flash_read>
}
   19d84:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   19d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d8a:	e7fb      	b.n	19d84 <flash_area_read+0x18>
   19d8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19d90:	e7f8      	b.n	19d84 <flash_area_read+0x18>
	...

00019d94 <flash_map_init>:

void
flash_map_init(void)
{
   19d94:	b510      	push	{r4, lr}
   19d96:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   19d98:	4b14      	ldr	r3, [pc, #80]	; (19dec <flash_map_init+0x58>)
   19d9a:	781b      	ldrb	r3, [r3, #0]
   19d9c:	b303      	cbz	r3, 19de0 <flash_map_init+0x4c>

    rc = hal_flash_init();
   19d9e:	f000 f9a5 	bl	1a0ec <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   19da2:	b138      	cbz	r0, 19db4 <flash_map_init+0x20>
   19da4:	2000      	movs	r0, #0
   19da6:	9000      	str	r0, [sp, #0]
   19da8:	4b11      	ldr	r3, [pc, #68]	; (19df0 <flash_map_init+0x5c>)
   19daa:	681c      	ldr	r4, [r3, #0]
   19dac:	4603      	mov	r3, r0
   19dae:	4602      	mov	r2, r0
   19db0:	4601      	mov	r1, r0
   19db2:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   19db4:	4b0f      	ldr	r3, [pc, #60]	; (19df4 <flash_map_init+0x60>)
   19db6:	4a10      	ldr	r2, [pc, #64]	; (19df8 <flash_map_init+0x64>)
   19db8:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   19dba:	4b10      	ldr	r3, [pc, #64]	; (19dfc <flash_map_init+0x68>)
   19dbc:	2206      	movs	r2, #6
   19dbe:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   19dc0:	aa03      	add	r2, sp, #12
   19dc2:	490f      	ldr	r1, [pc, #60]	; (19e00 <flash_map_init+0x6c>)
   19dc4:	200a      	movs	r0, #10
   19dc6:	f7ff ff75 	bl	19cb4 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   19dca:	b938      	cbnz	r0, 19ddc <flash_map_init+0x48>
   19dcc:	9b03      	ldr	r3, [sp, #12]
   19dce:	2b00      	cmp	r3, #0
   19dd0:	dd04      	ble.n	19ddc <flash_map_init+0x48>
        flash_map = mfg_areas;
   19dd2:	4a08      	ldr	r2, [pc, #32]	; (19df4 <flash_map_init+0x60>)
   19dd4:	490a      	ldr	r1, [pc, #40]	; (19e00 <flash_map_init+0x6c>)
   19dd6:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   19dd8:	4a08      	ldr	r2, [pc, #32]	; (19dfc <flash_map_init+0x68>)
   19dda:	6013      	str	r3, [r2, #0]
    }
}
   19ddc:	b004      	add	sp, #16
   19dde:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   19de0:	461a      	mov	r2, r3
   19de2:	4619      	mov	r1, r3
   19de4:	4618      	mov	r0, r3
   19de6:	f7fc fee3 	bl	16bb0 <__assert_func>
   19dea:	bf00      	nop
   19dec:	2000b55c 	.word	0x2000b55c
   19df0:	200000fc 	.word	0x200000fc
   19df4:	2000b724 	.word	0x2000b724
   19df8:	0001e6cc 	.word	0x0001e6cc
   19dfc:	2000b720 	.word	0x2000b720
   19e00:	2000b4bc 	.word	0x2000b4bc

00019e04 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   19e04:	4770      	bx	lr
	...

00019e08 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   19e08:	b530      	push	{r4, r5, lr}
   19e0a:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   19e0c:	7885      	ldrb	r5, [r0, #2]
   19e0e:	4b21      	ldr	r3, [pc, #132]	; (19e94 <mfg_seek_next_aux+0x8c>)
   19e10:	681b      	ldr	r3, [r3, #0]
   19e12:	429d      	cmp	r5, r3
   19e14:	da32      	bge.n	19e7c <mfg_seek_next_aux+0x74>
   19e16:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   19e18:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   19e1c:	0093      	lsls	r3, r2, #2
   19e1e:	a901      	add	r1, sp, #4
   19e20:	4a1d      	ldr	r2, [pc, #116]	; (19e98 <mfg_seek_next_aux+0x90>)
   19e22:	5cd0      	ldrb	r0, [r2, r3]
   19e24:	f7ff ff82 	bl	19d2c <flash_area_open>
    if (rc != 0) {
   19e28:	bb58      	cbnz	r0, 19e82 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   19e2a:	6862      	ldr	r2, [r4, #4]
   19e2c:	b9c2      	cbnz	r2, 19e60 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   19e2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   19e32:	00aa      	lsls	r2, r5, #2
   19e34:	4b18      	ldr	r3, [pc, #96]	; (19e98 <mfg_seek_next_aux+0x90>)
   19e36:	4413      	add	r3, r2
   19e38:	685b      	ldr	r3, [r3, #4]
   19e3a:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   19e3c:	6861      	ldr	r1, [r4, #4]
   19e3e:	9801      	ldr	r0, [sp, #4]
   19e40:	6883      	ldr	r3, [r0, #8]
   19e42:	3b08      	subs	r3, #8
   19e44:	4299      	cmp	r1, r3
   19e46:	d310      	bcc.n	19e6a <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   19e48:	78a3      	ldrb	r3, [r4, #2]
   19e4a:	1c59      	adds	r1, r3, #1
   19e4c:	4a11      	ldr	r2, [pc, #68]	; (19e94 <mfg_seek_next_aux+0x8c>)
   19e4e:	6812      	ldr	r2, [r2, #0]
   19e50:	4291      	cmp	r1, r2
   19e52:	da19      	bge.n	19e88 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   19e54:	2200      	movs	r2, #0
   19e56:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   19e58:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   19e5a:	f06f 0305 	mvn.w	r3, #5
   19e5e:	e015      	b.n	19e8c <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   19e60:	7863      	ldrb	r3, [r4, #1]
   19e62:	4413      	add	r3, r2
   19e64:	3302      	adds	r3, #2
   19e66:	6063      	str	r3, [r4, #4]
   19e68:	e7e8      	b.n	19e3c <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   19e6a:	2302      	movs	r3, #2
   19e6c:	4622      	mov	r2, r4
   19e6e:	f7ff ff7d 	bl	19d6c <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   19e72:	4603      	mov	r3, r0
   19e74:	b150      	cbz	r0, 19e8c <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   19e76:	f06f 0304 	mvn.w	r3, #4
   19e7a:	e007      	b.n	19e8c <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   19e7c:	f06f 0301 	mvn.w	r3, #1
   19e80:	e004      	b.n	19e8c <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   19e82:	f06f 0304 	mvn.w	r3, #4
   19e86:	e001      	b.n	19e8c <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   19e88:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   19e8c:	4618      	mov	r0, r3
   19e8e:	b003      	add	sp, #12
   19e90:	bd30      	pop	{r4, r5, pc}
   19e92:	bf00      	nop
   19e94:	2000b550 	.word	0x2000b550
   19e98:	2000b538 	.word	0x2000b538

00019e9c <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   19e9c:	b530      	push	{r4, r5, lr}
   19e9e:	b085      	sub	sp, #20
   19ea0:	4605      	mov	r5, r0
   19ea2:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   19ea4:	a903      	add	r1, sp, #12
   19ea6:	f7ff ff41 	bl	19d2c <flash_area_open>
    if (rc != 0) {
   19eaa:	b9e8      	cbnz	r0, 19ee8 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   19eac:	9803      	ldr	r0, [sp, #12]
   19eae:	6881      	ldr	r1, [r0, #8]
   19eb0:	2308      	movs	r3, #8
   19eb2:	aa01      	add	r2, sp, #4
   19eb4:	3908      	subs	r1, #8
   19eb6:	f7ff ff59 	bl	19d6c <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   19eba:	4601      	mov	r1, r0
   19ebc:	b9b8      	cbnz	r0, 19eee <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   19ebe:	9a02      	ldr	r2, [sp, #8]
   19ec0:	4b11      	ldr	r3, [pc, #68]	; (19f08 <mfg_read_mmr+0x6c>)
   19ec2:	429a      	cmp	r2, r3
   19ec4:	d116      	bne.n	19ef4 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   19ec6:	f89d 3006 	ldrb.w	r3, [sp, #6]
   19eca:	2b02      	cmp	r3, #2
   19ecc:	d115      	bne.n	19efa <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   19ece:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   19ed2:	9b03      	ldr	r3, [sp, #12]
   19ed4:	689b      	ldr	r3, [r3, #8]
   19ed6:	429a      	cmp	r2, r3
   19ed8:	d812      	bhi.n	19f00 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   19eda:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   19edc:	7025      	strb	r5, [r4, #0]
   19ede:	6063      	str	r3, [r4, #4]
   19ee0:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   19ee2:	4608      	mov	r0, r1
   19ee4:	b005      	add	sp, #20
   19ee6:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   19ee8:	f06f 0104 	mvn.w	r1, #4
   19eec:	e7f9      	b.n	19ee2 <mfg_read_mmr+0x46>
        return SYS_EIO;
   19eee:	f06f 0104 	mvn.w	r1, #4
   19ef2:	e7f6      	b.n	19ee2 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   19ef4:	f06f 0108 	mvn.w	r1, #8
   19ef8:	e7f3      	b.n	19ee2 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   19efa:	f06f 010b 	mvn.w	r1, #11
   19efe:	e7f0      	b.n	19ee2 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   19f00:	f06f 0108 	mvn.w	r1, #8
   19f04:	e7ed      	b.n	19ee2 <mfg_read_mmr+0x46>
   19f06:	bf00      	nop
   19f08:	3bb2a269 	.word	0x3bb2a269

00019f0c <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   19f0c:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   19f0e:	2300      	movs	r3, #0
   19f10:	4a11      	ldr	r2, [pc, #68]	; (19f58 <mfg_read_next_mmr+0x4c>)
   19f12:	6812      	ldr	r2, [r2, #0]
   19f14:	429a      	cmp	r2, r3
   19f16:	dd08      	ble.n	19f2a <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   19f18:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   19f1c:	008a      	lsls	r2, r1, #2
   19f1e:	490f      	ldr	r1, [pc, #60]	; (19f5c <mfg_read_next_mmr+0x50>)
   19f20:	5c8a      	ldrb	r2, [r1, r2]
   19f22:	4282      	cmp	r2, r0
   19f24:	d011      	beq.n	19f4a <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   19f26:	3301      	adds	r3, #1
   19f28:	e7f2      	b.n	19f10 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   19f2a:	2a01      	cmp	r2, #1
   19f2c:	dc11      	bgt.n	19f52 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   19f2e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   19f32:	0093      	lsls	r3, r2, #2
   19f34:	4909      	ldr	r1, [pc, #36]	; (19f5c <mfg_read_next_mmr+0x50>)
   19f36:	4419      	add	r1, r3
   19f38:	f7ff ffb0 	bl	19e9c <mfg_read_mmr>
    if (rc != 0) {
   19f3c:	4603      	mov	r3, r0
   19f3e:	b930      	cbnz	r0, 19f4e <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   19f40:	4905      	ldr	r1, [pc, #20]	; (19f58 <mfg_read_next_mmr+0x4c>)
   19f42:	680a      	ldr	r2, [r1, #0]
   19f44:	3201      	adds	r2, #1
   19f46:	600a      	str	r2, [r1, #0]
    return 0;
   19f48:	e001      	b.n	19f4e <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   19f4a:	f06f 030a 	mvn.w	r3, #10
}
   19f4e:	4618      	mov	r0, r3
   19f50:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   19f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19f56:	e7fa      	b.n	19f4e <mfg_read_next_mmr+0x42>
   19f58:	2000b550 	.word	0x2000b550
   19f5c:	2000b538 	.word	0x2000b538

00019f60 <mfg_open_flash_area>:
{
   19f60:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   19f62:	7883      	ldrb	r3, [r0, #2]
   19f64:	4a0b      	ldr	r2, [pc, #44]	; (19f94 <mfg_open_flash_area+0x34>)
   19f66:	6812      	ldr	r2, [r2, #0]
   19f68:	4293      	cmp	r3, r2
   19f6a:	da0a      	bge.n	19f82 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   19f6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   19f70:	009a      	lsls	r2, r3, #2
   19f72:	4b09      	ldr	r3, [pc, #36]	; (19f98 <mfg_open_flash_area+0x38>)
   19f74:	5c98      	ldrb	r0, [r3, r2]
   19f76:	f7ff fed9 	bl	19d2c <flash_area_open>
    if (rc != 0) {
   19f7a:	4603      	mov	r3, r0
   19f7c:	b938      	cbnz	r0, 19f8e <mfg_open_flash_area+0x2e>
}
   19f7e:	4618      	mov	r0, r3
   19f80:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   19f82:	2300      	movs	r3, #0
   19f84:	461a      	mov	r2, r3
   19f86:	4619      	mov	r1, r3
   19f88:	4618      	mov	r0, r3
   19f8a:	f7fc fe11 	bl	16bb0 <__assert_func>
        return SYS_EIO;
   19f8e:	f06f 0304 	mvn.w	r3, #4
   19f92:	e7f4      	b.n	19f7e <mfg_open_flash_area+0x1e>
   19f94:	2000b550 	.word	0x2000b550
   19f98:	2000b538 	.word	0x2000b538

00019f9c <mfg_read_tlv_body>:
{
   19f9c:	b570      	push	{r4, r5, r6, lr}
   19f9e:	b082      	sub	sp, #8
   19fa0:	4606      	mov	r6, r0
   19fa2:	460c      	mov	r4, r1
   19fa4:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   19fa6:	a901      	add	r1, sp, #4
   19fa8:	f7ff ffda 	bl	19f60 <mfg_open_flash_area>
    if (rc != 0) {
   19fac:	4603      	mov	r3, r0
   19fae:	b110      	cbz	r0, 19fb6 <mfg_read_tlv_body+0x1a>
}
   19fb0:	4618      	mov	r0, r3
   19fb2:	b002      	add	sp, #8
   19fb4:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   19fb6:	462a      	mov	r2, r5
   19fb8:	2100      	movs	r1, #0
   19fba:	4620      	mov	r0, r4
   19fbc:	f7fe f9fb 	bl	183b6 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   19fc0:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   19fc2:	6871      	ldr	r1, [r6, #4]
   19fc4:	42ab      	cmp	r3, r5
   19fc6:	bfa8      	it	ge
   19fc8:	462b      	movge	r3, r5
   19fca:	4622      	mov	r2, r4
   19fcc:	3102      	adds	r1, #2
   19fce:	9801      	ldr	r0, [sp, #4]
   19fd0:	f7ff fecc 	bl	19d6c <flash_area_read>
    if (rc != 0) {
   19fd4:	4603      	mov	r3, r0
   19fd6:	2800      	cmp	r0, #0
   19fd8:	d0ea      	beq.n	19fb0 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   19fda:	f06f 0304 	mvn.w	r3, #4
   19fde:	e7e7      	b.n	19fb0 <mfg_read_tlv_body+0x14>

00019fe0 <mfg_seek_next>:
{
   19fe0:	b510      	push	{r4, lr}
   19fe2:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   19fe4:	4620      	mov	r0, r4
   19fe6:	f7ff ff0f 	bl	19e08 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   19fea:	f110 0f06 	cmn.w	r0, #6
   19fee:	d0f9      	beq.n	19fe4 <mfg_seek_next+0x4>
}
   19ff0:	bd10      	pop	{r4, pc}

00019ff2 <mfg_seek_next_with_type>:
{
   19ff2:	b538      	push	{r3, r4, r5, lr}
   19ff4:	4604      	mov	r4, r0
   19ff6:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   19ff8:	4620      	mov	r0, r4
   19ffa:	f7ff fff1 	bl	19fe0 <mfg_seek_next>
        if (rc != 0) {
   19ffe:	4602      	mov	r2, r0
   1a000:	b910      	cbnz	r0, 1a008 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1a002:	7823      	ldrb	r3, [r4, #0]
   1a004:	42ab      	cmp	r3, r5
   1a006:	d1f7      	bne.n	19ff8 <mfg_seek_next_with_type+0x6>
}
   1a008:	4610      	mov	r0, r2
   1a00a:	bd38      	pop	{r3, r4, r5, pc}

0001a00c <mfg_read_tlv_flash_area>:
{
   1a00c:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1a00e:	220a      	movs	r2, #10
   1a010:	f7ff ffc4 	bl	19f9c <mfg_read_tlv_body>
}
   1a014:	bd08      	pop	{r3, pc}

0001a016 <mfg_read_tlv_mmr_ref>:
{
   1a016:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1a018:	2201      	movs	r2, #1
   1a01a:	f7ff ffbf 	bl	19f9c <mfg_read_tlv_body>
}
   1a01e:	bd08      	pop	{r3, pc}

0001a020 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1a020:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1a022:	4b0b      	ldr	r3, [pc, #44]	; (1a050 <mfg_init+0x30>)
   1a024:	781b      	ldrb	r3, [r3, #0]
   1a026:	b94b      	cbnz	r3, 1a03c <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1a028:	4b09      	ldr	r3, [pc, #36]	; (1a050 <mfg_init+0x30>)
   1a02a:	2201      	movs	r2, #1
   1a02c:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1a02e:	4b09      	ldr	r3, [pc, #36]	; (1a054 <mfg_init+0x34>)
   1a030:	781b      	ldrb	r3, [r3, #0]
   1a032:	b123      	cbz	r3, 1a03e <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1a034:	2000      	movs	r0, #0
   1a036:	f7ff ff69 	bl	19f0c <mfg_read_next_mmr>
    if (rc != 0) {
   1a03a:	b128      	cbz	r0, 1a048 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1a03c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1a03e:	461a      	mov	r2, r3
   1a040:	4619      	mov	r1, r3
   1a042:	4618      	mov	r0, r3
   1a044:	f7fc fdb4 	bl	16bb0 <__assert_func>
    rc = mfg_read_mmr_refs();
   1a048:	f000 f80e 	bl	1a068 <mfg_read_mmr_refs>
err:
   1a04c:	e7f6      	b.n	1a03c <mfg_init+0x1c>
   1a04e:	bf00      	nop
   1a050:	2000b534 	.word	0x2000b534
   1a054:	2000b55c 	.word	0x2000b55c

0001a058 <mfg_open>:
{
   1a058:	b510      	push	{r4, lr}
   1a05a:	4604      	mov	r4, r0
    mfg_init();
   1a05c:	f7ff ffe0 	bl	1a020 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1a060:	2300      	movs	r3, #0
   1a062:	6023      	str	r3, [r4, #0]
   1a064:	6063      	str	r3, [r4, #4]
}
   1a066:	bd10      	pop	{r4, pc}

0001a068 <mfg_read_mmr_refs>:
{
   1a068:	b500      	push	{lr}
   1a06a:	b085      	sub	sp, #20
    mfg_open(&reader);
   1a06c:	a801      	add	r0, sp, #4
   1a06e:	f7ff fff3 	bl	1a058 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1a072:	2104      	movs	r1, #4
   1a074:	eb0d 0001 	add.w	r0, sp, r1
   1a078:	f7ff ffbb 	bl	19ff2 <mfg_seek_next_with_type>
   1a07c:	4603      	mov	r3, r0
        switch (rc) {
   1a07e:	f110 0f0f 	cmn.w	r0, #15
   1a082:	d004      	beq.n	1a08e <mfg_read_mmr_refs+0x26>
   1a084:	b128      	cbz	r0, 1a092 <mfg_read_mmr_refs+0x2a>
}
   1a086:	4618      	mov	r0, r3
   1a088:	b005      	add	sp, #20
   1a08a:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1a08e:	2300      	movs	r3, #0
   1a090:	e7f9      	b.n	1a086 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1a092:	a903      	add	r1, sp, #12
   1a094:	a801      	add	r0, sp, #4
   1a096:	f7ff ffbe 	bl	1a016 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1a09a:	4603      	mov	r3, r0
   1a09c:	2800      	cmp	r0, #0
   1a09e:	d1f2      	bne.n	1a086 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1a0a0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1a0a4:	f7ff ff32 	bl	19f0c <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1a0a8:	4603      	mov	r3, r0
   1a0aa:	2800      	cmp	r0, #0
   1a0ac:	d0e1      	beq.n	1a072 <mfg_read_mmr_refs+0xa>
   1a0ae:	f110 0f0b 	cmn.w	r0, #11
   1a0b2:	d0de      	beq.n	1a072 <mfg_read_mmr_refs+0xa>
   1a0b4:	e7e7      	b.n	1a086 <mfg_read_mmr_refs+0x1e>
	...

0001a0b8 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1a0b8:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1a0ba:	4803      	ldr	r0, [pc, #12]	; (1a0c8 <__wrap_coap_receive+0x10>)
   1a0bc:	f7fb feb0 	bl	15e20 <console_printf>
    return -1;
}
   1a0c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a0c4:	bd08      	pop	{r3, pc}
   1a0c6:	bf00      	nop
   1a0c8:	0001e714 	.word	0x0001e714

0001a0cc <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1a0cc:	4770      	bx	lr

0001a0ce <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1a0ce:	6843      	ldr	r3, [r0, #4]
   1a0d0:	428b      	cmp	r3, r1
   1a0d2:	d808      	bhi.n	1a0e6 <hal_flash_check_addr+0x18>
   1a0d4:	6882      	ldr	r2, [r0, #8]
   1a0d6:	4413      	add	r3, r2
   1a0d8:	428b      	cmp	r3, r1
   1a0da:	d301      	bcc.n	1a0e0 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1a0dc:	2000      	movs	r0, #0
}
   1a0de:	4770      	bx	lr
        return SYS_EINVAL;
   1a0e0:	f06f 0001 	mvn.w	r0, #1
   1a0e4:	4770      	bx	lr
   1a0e6:	f06f 0001 	mvn.w	r0, #1
   1a0ea:	4770      	bx	lr

0001a0ec <hal_flash_init>:
{
   1a0ec:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1a0ee:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1a0f0:	462c      	mov	r4, r5
   1a0f2:	e001      	b.n	1a0f8 <hal_flash_init+0xc>
   1a0f4:	3401      	adds	r4, #1
   1a0f6:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1a0f8:	4620      	mov	r0, r4
   1a0fa:	f7fe fce3 	bl	18ac4 <hal_bsp_flash_dev>
        if (!hf) {
   1a0fe:	b138      	cbz	r0, 1a110 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1a100:	6802      	ldr	r2, [r0, #0]
   1a102:	6952      	ldr	r2, [r2, #20]
   1a104:	4790      	blx	r2
   1a106:	2800      	cmp	r0, #0
   1a108:	d0f4      	beq.n	1a0f4 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1a10a:	f06f 0504 	mvn.w	r5, #4
   1a10e:	e7f1      	b.n	1a0f4 <hal_flash_init+0x8>
}
   1a110:	4628      	mov	r0, r5
   1a112:	bd38      	pop	{r3, r4, r5, pc}

0001a114 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1a114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a118:	460d      	mov	r5, r1
   1a11a:	4690      	mov	r8, r2
   1a11c:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1a11e:	f7fe fcd1 	bl	18ac4 <hal_bsp_flash_dev>
    if (!hf) {
   1a122:	b1c0      	cbz	r0, 1a156 <hal_flash_read+0x42>
   1a124:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1a126:	4629      	mov	r1, r5
   1a128:	f7ff ffd1 	bl	1a0ce <hal_flash_check_addr>
   1a12c:	b9b0      	cbnz	r0, 1a15c <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1a12e:	19a9      	adds	r1, r5, r6
   1a130:	4620      	mov	r0, r4
   1a132:	f7ff ffcc 	bl	1a0ce <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1a136:	b9a0      	cbnz	r0, 1a162 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1a138:	6823      	ldr	r3, [r4, #0]
   1a13a:	681f      	ldr	r7, [r3, #0]
   1a13c:	4633      	mov	r3, r6
   1a13e:	4642      	mov	r2, r8
   1a140:	4629      	mov	r1, r5
   1a142:	4620      	mov	r0, r4
   1a144:	47b8      	blx	r7
    if (rc != 0) {
   1a146:	4603      	mov	r3, r0
   1a148:	b910      	cbnz	r0, 1a150 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1a14a:	4618      	mov	r0, r3
   1a14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1a150:	f06f 0304 	mvn.w	r3, #4
   1a154:	e7f9      	b.n	1a14a <hal_flash_read+0x36>
        return SYS_EINVAL;
   1a156:	f06f 0301 	mvn.w	r3, #1
   1a15a:	e7f6      	b.n	1a14a <hal_flash_read+0x36>
        return SYS_EINVAL;
   1a15c:	f06f 0301 	mvn.w	r3, #1
   1a160:	e7f3      	b.n	1a14a <hal_flash_read+0x36>
   1a162:	f06f 0301 	mvn.w	r3, #1
   1a166:	e7f0      	b.n	1a14a <hal_flash_read+0x36>

0001a168 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1a168:	2010      	movs	r0, #16
   1a16a:	4770      	bx	lr

0001a16c <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1a16c:	b570      	push	{r4, r5, r6, lr}
   1a16e:	4606      	mov	r6, r0
   1a170:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1a172:	460d      	mov	r5, r1
   1a174:	2908      	cmp	r1, #8
   1a176:	bf28      	it	cs
   1a178:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1a17a:	462a      	mov	r2, r5
   1a17c:	4906      	ldr	r1, [pc, #24]	; (1a198 <hal_bsp_hw_id+0x2c>)
   1a17e:	f7fe f90d 	bl	1839c <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1a182:	1b64      	subs	r4, r4, r5
   1a184:	2c08      	cmp	r4, #8
   1a186:	bf28      	it	cs
   1a188:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1a18a:	4622      	mov	r2, r4
   1a18c:	4903      	ldr	r1, [pc, #12]	; (1a19c <hal_bsp_hw_id+0x30>)
   1a18e:	1970      	adds	r0, r6, r5
   1a190:	f7fe f904 	bl	1839c <memcpy>

    return len + cnt;
}
   1a194:	1928      	adds	r0, r5, r4
   1a196:	bd70      	pop	{r4, r5, r6, pc}
   1a198:	10000060 	.word	0x10000060
   1a19c:	100000a4 	.word	0x100000a4

0001a1a0 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1a1a0:	b40e      	push	{r1, r2, r3}
   1a1a2:	b500      	push	{lr}
   1a1a4:	b082      	sub	sp, #8
   1a1a6:	ab03      	add	r3, sp, #12
   1a1a8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1a1ac:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1a1ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1a1b2:	f7fe fbef 	bl	18994 <vsnprintf>
	va_end(ap);

	return rv;
}
   1a1b6:	b002      	add	sp, #8
   1a1b8:	f85d eb04 	ldr.w	lr, [sp], #4
   1a1bc:	b003      	add	sp, #12
   1a1be:	4770      	bx	lr

0001a1c0 <__aeabi_uldivmod>:
   1a1c0:	b953      	cbnz	r3, 1a1d8 <__aeabi_uldivmod+0x18>
   1a1c2:	b94a      	cbnz	r2, 1a1d8 <__aeabi_uldivmod+0x18>
   1a1c4:	2900      	cmp	r1, #0
   1a1c6:	bf08      	it	eq
   1a1c8:	2800      	cmpeq	r0, #0
   1a1ca:	bf1c      	itt	ne
   1a1cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1a1d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1a1d4:	f000 b972 	b.w	1a4bc <__aeabi_idiv0>
   1a1d8:	f1ad 0c08 	sub.w	ip, sp, #8
   1a1dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1a1e0:	f000 f806 	bl	1a1f0 <__udivmoddi4>
   1a1e4:	f8dd e004 	ldr.w	lr, [sp, #4]
   1a1e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1a1ec:	b004      	add	sp, #16
   1a1ee:	4770      	bx	lr

0001a1f0 <__udivmoddi4>:
   1a1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a1f4:	9e08      	ldr	r6, [sp, #32]
   1a1f6:	4604      	mov	r4, r0
   1a1f8:	4688      	mov	r8, r1
   1a1fa:	2b00      	cmp	r3, #0
   1a1fc:	d14b      	bne.n	1a296 <__udivmoddi4+0xa6>
   1a1fe:	428a      	cmp	r2, r1
   1a200:	4615      	mov	r5, r2
   1a202:	d967      	bls.n	1a2d4 <__udivmoddi4+0xe4>
   1a204:	fab2 f282 	clz	r2, r2
   1a208:	b14a      	cbz	r2, 1a21e <__udivmoddi4+0x2e>
   1a20a:	f1c2 0720 	rsb	r7, r2, #32
   1a20e:	fa01 f302 	lsl.w	r3, r1, r2
   1a212:	fa20 f707 	lsr.w	r7, r0, r7
   1a216:	4095      	lsls	r5, r2
   1a218:	ea47 0803 	orr.w	r8, r7, r3
   1a21c:	4094      	lsls	r4, r2
   1a21e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1a222:	0c23      	lsrs	r3, r4, #16
   1a224:	fbb8 f7fe 	udiv	r7, r8, lr
   1a228:	fa1f fc85 	uxth.w	ip, r5
   1a22c:	fb0e 8817 	mls	r8, lr, r7, r8
   1a230:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1a234:	fb07 f10c 	mul.w	r1, r7, ip
   1a238:	4299      	cmp	r1, r3
   1a23a:	d909      	bls.n	1a250 <__udivmoddi4+0x60>
   1a23c:	18eb      	adds	r3, r5, r3
   1a23e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1a242:	f080 811b 	bcs.w	1a47c <__udivmoddi4+0x28c>
   1a246:	4299      	cmp	r1, r3
   1a248:	f240 8118 	bls.w	1a47c <__udivmoddi4+0x28c>
   1a24c:	3f02      	subs	r7, #2
   1a24e:	442b      	add	r3, r5
   1a250:	1a5b      	subs	r3, r3, r1
   1a252:	b2a4      	uxth	r4, r4
   1a254:	fbb3 f0fe 	udiv	r0, r3, lr
   1a258:	fb0e 3310 	mls	r3, lr, r0, r3
   1a25c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1a260:	fb00 fc0c 	mul.w	ip, r0, ip
   1a264:	45a4      	cmp	ip, r4
   1a266:	d909      	bls.n	1a27c <__udivmoddi4+0x8c>
   1a268:	192c      	adds	r4, r5, r4
   1a26a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1a26e:	f080 8107 	bcs.w	1a480 <__udivmoddi4+0x290>
   1a272:	45a4      	cmp	ip, r4
   1a274:	f240 8104 	bls.w	1a480 <__udivmoddi4+0x290>
   1a278:	3802      	subs	r0, #2
   1a27a:	442c      	add	r4, r5
   1a27c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1a280:	eba4 040c 	sub.w	r4, r4, ip
   1a284:	2700      	movs	r7, #0
   1a286:	b11e      	cbz	r6, 1a290 <__udivmoddi4+0xa0>
   1a288:	40d4      	lsrs	r4, r2
   1a28a:	2300      	movs	r3, #0
   1a28c:	e9c6 4300 	strd	r4, r3, [r6]
   1a290:	4639      	mov	r1, r7
   1a292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a296:	428b      	cmp	r3, r1
   1a298:	d909      	bls.n	1a2ae <__udivmoddi4+0xbe>
   1a29a:	2e00      	cmp	r6, #0
   1a29c:	f000 80eb 	beq.w	1a476 <__udivmoddi4+0x286>
   1a2a0:	2700      	movs	r7, #0
   1a2a2:	e9c6 0100 	strd	r0, r1, [r6]
   1a2a6:	4638      	mov	r0, r7
   1a2a8:	4639      	mov	r1, r7
   1a2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a2ae:	fab3 f783 	clz	r7, r3
   1a2b2:	2f00      	cmp	r7, #0
   1a2b4:	d147      	bne.n	1a346 <__udivmoddi4+0x156>
   1a2b6:	428b      	cmp	r3, r1
   1a2b8:	d302      	bcc.n	1a2c0 <__udivmoddi4+0xd0>
   1a2ba:	4282      	cmp	r2, r0
   1a2bc:	f200 80fa 	bhi.w	1a4b4 <__udivmoddi4+0x2c4>
   1a2c0:	1a84      	subs	r4, r0, r2
   1a2c2:	eb61 0303 	sbc.w	r3, r1, r3
   1a2c6:	2001      	movs	r0, #1
   1a2c8:	4698      	mov	r8, r3
   1a2ca:	2e00      	cmp	r6, #0
   1a2cc:	d0e0      	beq.n	1a290 <__udivmoddi4+0xa0>
   1a2ce:	e9c6 4800 	strd	r4, r8, [r6]
   1a2d2:	e7dd      	b.n	1a290 <__udivmoddi4+0xa0>
   1a2d4:	b902      	cbnz	r2, 1a2d8 <__udivmoddi4+0xe8>
   1a2d6:	deff      	udf	#255	; 0xff
   1a2d8:	fab2 f282 	clz	r2, r2
   1a2dc:	2a00      	cmp	r2, #0
   1a2de:	f040 808f 	bne.w	1a400 <__udivmoddi4+0x210>
   1a2e2:	1b49      	subs	r1, r1, r5
   1a2e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1a2e8:	fa1f f885 	uxth.w	r8, r5
   1a2ec:	2701      	movs	r7, #1
   1a2ee:	fbb1 fcfe 	udiv	ip, r1, lr
   1a2f2:	0c23      	lsrs	r3, r4, #16
   1a2f4:	fb0e 111c 	mls	r1, lr, ip, r1
   1a2f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1a2fc:	fb08 f10c 	mul.w	r1, r8, ip
   1a300:	4299      	cmp	r1, r3
   1a302:	d907      	bls.n	1a314 <__udivmoddi4+0x124>
   1a304:	18eb      	adds	r3, r5, r3
   1a306:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1a30a:	d202      	bcs.n	1a312 <__udivmoddi4+0x122>
   1a30c:	4299      	cmp	r1, r3
   1a30e:	f200 80cd 	bhi.w	1a4ac <__udivmoddi4+0x2bc>
   1a312:	4684      	mov	ip, r0
   1a314:	1a59      	subs	r1, r3, r1
   1a316:	b2a3      	uxth	r3, r4
   1a318:	fbb1 f0fe 	udiv	r0, r1, lr
   1a31c:	fb0e 1410 	mls	r4, lr, r0, r1
   1a320:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1a324:	fb08 f800 	mul.w	r8, r8, r0
   1a328:	45a0      	cmp	r8, r4
   1a32a:	d907      	bls.n	1a33c <__udivmoddi4+0x14c>
   1a32c:	192c      	adds	r4, r5, r4
   1a32e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1a332:	d202      	bcs.n	1a33a <__udivmoddi4+0x14a>
   1a334:	45a0      	cmp	r8, r4
   1a336:	f200 80b6 	bhi.w	1a4a6 <__udivmoddi4+0x2b6>
   1a33a:	4618      	mov	r0, r3
   1a33c:	eba4 0408 	sub.w	r4, r4, r8
   1a340:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1a344:	e79f      	b.n	1a286 <__udivmoddi4+0x96>
   1a346:	f1c7 0c20 	rsb	ip, r7, #32
   1a34a:	40bb      	lsls	r3, r7
   1a34c:	fa22 fe0c 	lsr.w	lr, r2, ip
   1a350:	ea4e 0e03 	orr.w	lr, lr, r3
   1a354:	fa01 f407 	lsl.w	r4, r1, r7
   1a358:	fa20 f50c 	lsr.w	r5, r0, ip
   1a35c:	fa21 f30c 	lsr.w	r3, r1, ip
   1a360:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1a364:	4325      	orrs	r5, r4
   1a366:	fbb3 f9f8 	udiv	r9, r3, r8
   1a36a:	0c2c      	lsrs	r4, r5, #16
   1a36c:	fb08 3319 	mls	r3, r8, r9, r3
   1a370:	fa1f fa8e 	uxth.w	sl, lr
   1a374:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1a378:	fb09 f40a 	mul.w	r4, r9, sl
   1a37c:	429c      	cmp	r4, r3
   1a37e:	fa02 f207 	lsl.w	r2, r2, r7
   1a382:	fa00 f107 	lsl.w	r1, r0, r7
   1a386:	d90b      	bls.n	1a3a0 <__udivmoddi4+0x1b0>
   1a388:	eb1e 0303 	adds.w	r3, lr, r3
   1a38c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1a390:	f080 8087 	bcs.w	1a4a2 <__udivmoddi4+0x2b2>
   1a394:	429c      	cmp	r4, r3
   1a396:	f240 8084 	bls.w	1a4a2 <__udivmoddi4+0x2b2>
   1a39a:	f1a9 0902 	sub.w	r9, r9, #2
   1a39e:	4473      	add	r3, lr
   1a3a0:	1b1b      	subs	r3, r3, r4
   1a3a2:	b2ad      	uxth	r5, r5
   1a3a4:	fbb3 f0f8 	udiv	r0, r3, r8
   1a3a8:	fb08 3310 	mls	r3, r8, r0, r3
   1a3ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1a3b0:	fb00 fa0a 	mul.w	sl, r0, sl
   1a3b4:	45a2      	cmp	sl, r4
   1a3b6:	d908      	bls.n	1a3ca <__udivmoddi4+0x1da>
   1a3b8:	eb1e 0404 	adds.w	r4, lr, r4
   1a3bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1a3c0:	d26b      	bcs.n	1a49a <__udivmoddi4+0x2aa>
   1a3c2:	45a2      	cmp	sl, r4
   1a3c4:	d969      	bls.n	1a49a <__udivmoddi4+0x2aa>
   1a3c6:	3802      	subs	r0, #2
   1a3c8:	4474      	add	r4, lr
   1a3ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1a3ce:	fba0 8902 	umull	r8, r9, r0, r2
   1a3d2:	eba4 040a 	sub.w	r4, r4, sl
   1a3d6:	454c      	cmp	r4, r9
   1a3d8:	46c2      	mov	sl, r8
   1a3da:	464b      	mov	r3, r9
   1a3dc:	d354      	bcc.n	1a488 <__udivmoddi4+0x298>
   1a3de:	d051      	beq.n	1a484 <__udivmoddi4+0x294>
   1a3e0:	2e00      	cmp	r6, #0
   1a3e2:	d069      	beq.n	1a4b8 <__udivmoddi4+0x2c8>
   1a3e4:	ebb1 050a 	subs.w	r5, r1, sl
   1a3e8:	eb64 0403 	sbc.w	r4, r4, r3
   1a3ec:	fa04 fc0c 	lsl.w	ip, r4, ip
   1a3f0:	40fd      	lsrs	r5, r7
   1a3f2:	40fc      	lsrs	r4, r7
   1a3f4:	ea4c 0505 	orr.w	r5, ip, r5
   1a3f8:	e9c6 5400 	strd	r5, r4, [r6]
   1a3fc:	2700      	movs	r7, #0
   1a3fe:	e747      	b.n	1a290 <__udivmoddi4+0xa0>
   1a400:	f1c2 0320 	rsb	r3, r2, #32
   1a404:	fa20 f703 	lsr.w	r7, r0, r3
   1a408:	4095      	lsls	r5, r2
   1a40a:	fa01 f002 	lsl.w	r0, r1, r2
   1a40e:	fa21 f303 	lsr.w	r3, r1, r3
   1a412:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1a416:	4338      	orrs	r0, r7
   1a418:	0c01      	lsrs	r1, r0, #16
   1a41a:	fbb3 f7fe 	udiv	r7, r3, lr
   1a41e:	fa1f f885 	uxth.w	r8, r5
   1a422:	fb0e 3317 	mls	r3, lr, r7, r3
   1a426:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1a42a:	fb07 f308 	mul.w	r3, r7, r8
   1a42e:	428b      	cmp	r3, r1
   1a430:	fa04 f402 	lsl.w	r4, r4, r2
   1a434:	d907      	bls.n	1a446 <__udivmoddi4+0x256>
   1a436:	1869      	adds	r1, r5, r1
   1a438:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1a43c:	d22f      	bcs.n	1a49e <__udivmoddi4+0x2ae>
   1a43e:	428b      	cmp	r3, r1
   1a440:	d92d      	bls.n	1a49e <__udivmoddi4+0x2ae>
   1a442:	3f02      	subs	r7, #2
   1a444:	4429      	add	r1, r5
   1a446:	1acb      	subs	r3, r1, r3
   1a448:	b281      	uxth	r1, r0
   1a44a:	fbb3 f0fe 	udiv	r0, r3, lr
   1a44e:	fb0e 3310 	mls	r3, lr, r0, r3
   1a452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1a456:	fb00 f308 	mul.w	r3, r0, r8
   1a45a:	428b      	cmp	r3, r1
   1a45c:	d907      	bls.n	1a46e <__udivmoddi4+0x27e>
   1a45e:	1869      	adds	r1, r5, r1
   1a460:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1a464:	d217      	bcs.n	1a496 <__udivmoddi4+0x2a6>
   1a466:	428b      	cmp	r3, r1
   1a468:	d915      	bls.n	1a496 <__udivmoddi4+0x2a6>
   1a46a:	3802      	subs	r0, #2
   1a46c:	4429      	add	r1, r5
   1a46e:	1ac9      	subs	r1, r1, r3
   1a470:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1a474:	e73b      	b.n	1a2ee <__udivmoddi4+0xfe>
   1a476:	4637      	mov	r7, r6
   1a478:	4630      	mov	r0, r6
   1a47a:	e709      	b.n	1a290 <__udivmoddi4+0xa0>
   1a47c:	4607      	mov	r7, r0
   1a47e:	e6e7      	b.n	1a250 <__udivmoddi4+0x60>
   1a480:	4618      	mov	r0, r3
   1a482:	e6fb      	b.n	1a27c <__udivmoddi4+0x8c>
   1a484:	4541      	cmp	r1, r8
   1a486:	d2ab      	bcs.n	1a3e0 <__udivmoddi4+0x1f0>
   1a488:	ebb8 0a02 	subs.w	sl, r8, r2
   1a48c:	eb69 020e 	sbc.w	r2, r9, lr
   1a490:	3801      	subs	r0, #1
   1a492:	4613      	mov	r3, r2
   1a494:	e7a4      	b.n	1a3e0 <__udivmoddi4+0x1f0>
   1a496:	4660      	mov	r0, ip
   1a498:	e7e9      	b.n	1a46e <__udivmoddi4+0x27e>
   1a49a:	4618      	mov	r0, r3
   1a49c:	e795      	b.n	1a3ca <__udivmoddi4+0x1da>
   1a49e:	4667      	mov	r7, ip
   1a4a0:	e7d1      	b.n	1a446 <__udivmoddi4+0x256>
   1a4a2:	4681      	mov	r9, r0
   1a4a4:	e77c      	b.n	1a3a0 <__udivmoddi4+0x1b0>
   1a4a6:	3802      	subs	r0, #2
   1a4a8:	442c      	add	r4, r5
   1a4aa:	e747      	b.n	1a33c <__udivmoddi4+0x14c>
   1a4ac:	f1ac 0c02 	sub.w	ip, ip, #2
   1a4b0:	442b      	add	r3, r5
   1a4b2:	e72f      	b.n	1a314 <__udivmoddi4+0x124>
   1a4b4:	4638      	mov	r0, r7
   1a4b6:	e708      	b.n	1a2ca <__udivmoddi4+0xda>
   1a4b8:	4637      	mov	r7, r6
   1a4ba:	e6e9      	b.n	1a290 <__udivmoddi4+0xa0>

0001a4bc <__aeabi_idiv0>:
   1a4bc:	4770      	bx	lr
   1a4be:	bf00      	nop

0001a4c0 <__aeabi_memclr>:
   1a4c0:	2200      	movs	r2, #0
   1a4c2:	f000 b803 	b.w	1a4cc <__aeabi_memset>
   1a4c6:	bf00      	nop

0001a4c8 <__aeabi_memcpy>:
   1a4c8:	f7fd bf68 	b.w	1839c <memcpy>

0001a4cc <__aeabi_memset>:
   1a4cc:	b470      	push	{r4, r5, r6}
   1a4ce:	0784      	lsls	r4, r0, #30
   1a4d0:	d046      	beq.n	1a560 <__aeabi_memset+0x94>
   1a4d2:	1e4c      	subs	r4, r1, #1
   1a4d4:	2900      	cmp	r1, #0
   1a4d6:	d041      	beq.n	1a55c <__aeabi_memset+0x90>
   1a4d8:	b2d5      	uxtb	r5, r2
   1a4da:	4603      	mov	r3, r0
   1a4dc:	e002      	b.n	1a4e4 <__aeabi_memset+0x18>
   1a4de:	1e61      	subs	r1, r4, #1
   1a4e0:	b3e4      	cbz	r4, 1a55c <__aeabi_memset+0x90>
   1a4e2:	460c      	mov	r4, r1
   1a4e4:	f803 5b01 	strb.w	r5, [r3], #1
   1a4e8:	0799      	lsls	r1, r3, #30
   1a4ea:	d1f8      	bne.n	1a4de <__aeabi_memset+0x12>
   1a4ec:	2c03      	cmp	r4, #3
   1a4ee:	d92e      	bls.n	1a54e <__aeabi_memset+0x82>
   1a4f0:	b2d5      	uxtb	r5, r2
   1a4f2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1a4f6:	2c0f      	cmp	r4, #15
   1a4f8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1a4fc:	d919      	bls.n	1a532 <__aeabi_memset+0x66>
   1a4fe:	4626      	mov	r6, r4
   1a500:	f103 0110 	add.w	r1, r3, #16
   1a504:	3e10      	subs	r6, #16
   1a506:	2e0f      	cmp	r6, #15
   1a508:	f841 5c10 	str.w	r5, [r1, #-16]
   1a50c:	f841 5c0c 	str.w	r5, [r1, #-12]
   1a510:	f841 5c08 	str.w	r5, [r1, #-8]
   1a514:	f841 5c04 	str.w	r5, [r1, #-4]
   1a518:	f101 0110 	add.w	r1, r1, #16
   1a51c:	d8f2      	bhi.n	1a504 <__aeabi_memset+0x38>
   1a51e:	f1a4 0110 	sub.w	r1, r4, #16
   1a522:	f021 010f 	bic.w	r1, r1, #15
   1a526:	f004 040f 	and.w	r4, r4, #15
   1a52a:	3110      	adds	r1, #16
   1a52c:	2c03      	cmp	r4, #3
   1a52e:	440b      	add	r3, r1
   1a530:	d90d      	bls.n	1a54e <__aeabi_memset+0x82>
   1a532:	461e      	mov	r6, r3
   1a534:	4621      	mov	r1, r4
   1a536:	3904      	subs	r1, #4
   1a538:	2903      	cmp	r1, #3
   1a53a:	f846 5b04 	str.w	r5, [r6], #4
   1a53e:	d8fa      	bhi.n	1a536 <__aeabi_memset+0x6a>
   1a540:	1f21      	subs	r1, r4, #4
   1a542:	f021 0103 	bic.w	r1, r1, #3
   1a546:	3104      	adds	r1, #4
   1a548:	440b      	add	r3, r1
   1a54a:	f004 0403 	and.w	r4, r4, #3
   1a54e:	b12c      	cbz	r4, 1a55c <__aeabi_memset+0x90>
   1a550:	b2d2      	uxtb	r2, r2
   1a552:	441c      	add	r4, r3
   1a554:	f803 2b01 	strb.w	r2, [r3], #1
   1a558:	42a3      	cmp	r3, r4
   1a55a:	d1fb      	bne.n	1a554 <__aeabi_memset+0x88>
   1a55c:	bc70      	pop	{r4, r5, r6}
   1a55e:	4770      	bx	lr
   1a560:	460c      	mov	r4, r1
   1a562:	4603      	mov	r3, r0
   1a564:	e7c2      	b.n	1a4ec <__aeabi_memset+0x20>
   1a566:	6f74      	.short	0x6f74
   1a568:	20686375 	.word	0x20686375
   1a56c:	20746f6e 	.word	0x20746f6e
   1a570:	646e6168 	.word	0x646e6168
   1a574:	0a64656c 	.word	0x0a64656c
   1a578:	20505344 	.word	0x20505344
   1a57c:	6c696166 	.word	0x6c696166
   1a580:	20484354 	.word	0x20484354
   1a584:	6c696166 	.word	0x6c696166
   1a588:	20544547 	.word	0x20544547
   1a58c:	6c696166 	.word	0x6c696166
   1a590:	204e5552 	.word	0x204e5552
   1a594:	6c696166 	.word	0x6c696166
   1a598:	74737572 	.word	0x74737572
   1a59c:	7070612f 	.word	0x7070612f
   1a5a0:	6372732f 	.word	0x6372732f
   1a5a4:	62696c2f 	.word	0x62696c2f
   1a5a8:	0073722e 	.word	0x0073722e
   1a5ac:	0001a598 	.word	0x0001a598
   1a5b0:	00000013 	.word	0x00000013
   1a5b4:	0000005c 	.word	0x0000005c
   1a5b8:	00000005 	.word	0x00000005
   1a5bc:	20505344 	.word	0x20505344
   1a5c0:	74736574 	.word	0x74736574
   1a5c4:	69616620 	.word	0x69616620
   1a5c8:	0000006c 	.word	0x0000006c
   1a5cc:	0001a598 	.word	0x0001a598
   1a5d0:	00000013 	.word	0x00000013
   1a5d4:	00000061 	.word	0x00000061
   1a5d8:	00000005 	.word	0x00000005
   1a5dc:	0001a598 	.word	0x0001a598
   1a5e0:	00000013 	.word	0x00000013
   1a5e4:	00000065 	.word	0x00000065
   1a5e8:	00000005 	.word	0x00000005
   1a5ec:	0001a598 	.word	0x0001a598
   1a5f0:	00000013 	.word	0x00000013
   1a5f4:	0000007d 	.word	0x0000007d
   1a5f8:	0000000d 	.word	0x0000000d
   1a5fc:	0001a598 	.word	0x0001a598
   1a600:	00000013 	.word	0x00000013
   1a604:	0000007c 	.word	0x0000007c
   1a608:	00000009 	.word	0x00000009
   1a60c:	696e6170 	.word	0x696e6170
   1a610:	2063      	.short	0x2063
   1a612:	6f6e      	.short	0x6f6e
   1a614:	636f6c20 	.word	0x636f6c20
   1a618:	0a          	.byte	0x0a
   1a619:	61          	.byte	0x61
   1a61a:	2074      	.short	0x2074
   1a61c:	6e696c20 	.word	0x6e696c20
   1a620:	2065      	.short	0x2065
   1a622:	000a      	.short	0x000a
   1a624:	0001a598 	.word	0x0001a598
   1a628:	00000013 	.word	0x00000013
   1a62c:	00000095 	.word	0x00000095
   1a630:	00000014 	.word	0x00000014
   1a634:	00000000 	.word	0x00000000
   1a638:	0001a634 	.word	0x0001a634
   1a63c:	0001a638 	.word	0x0001a638
   1a640:	65737361 	.word	0x65737361
   1a644:	6f697472 	.word	0x6f697472
   1a648:	6166206e 	.word	0x6166206e
   1a64c:	64656c69 	.word	0x64656c69
   1a650:	2860203a 	.word	0x2860203a
   1a654:	7466656c 	.word	0x7466656c
   1a658:	203d3d20 	.word	0x203d3d20
   1a65c:	68676972 	.word	0x68676972
   1a660:	0a602974 	.word	0x0a602974
   1a664:	656c2020 	.word	0x656c2020
   1a668:	203a7466 	.word	0x203a7466
   1a66c:	60          	.byte	0x60
   1a66d:	60          	.byte	0x60
   1a66e:	0a2c      	.short	0x0a2c
   1a670:	67697220 	.word	0x67697220
   1a674:	203a7468 	.word	0x203a7468
   1a678:	60          	.byte	0x60
   1a679:	60          	.byte	0x60
   1a67a:	203a      	.short	0x203a
   1a67c:	0001a640 	.word	0x0001a640
   1a680:	0000002d 	.word	0x0000002d
   1a684:	0001a66d 	.word	0x0001a66d
   1a688:	0000000c 	.word	0x0000000c
   1a68c:	0001a679 	.word	0x0001a679
   1a690:	00000003 	.word	0x00000003
   1a694:	0001a67c 	.word	0x0001a67c
   1a698:	6e206f6e 	.word	0x6e206f6e
   1a69c:	006c6c75 	.word	0x006c6c75
   1a6a0:	0001a698 	.word	0x0001a698
   1a6a4:	00000007 	.word	0x00000007
   1a6a8:	0001a6a0 	.word	0x0001a6a0
   1a6ac:	0001a6ac 	.word	0x0001a6ac
   1a6b0:	74737572 	.word	0x74737572
   1a6b4:	6e796d2f 	.word	0x6e796d2f
   1a6b8:	2f747765 	.word	0x2f747765
   1a6bc:	2f637273 	.word	0x2f637273
   1a6c0:	2e62696c 	.word	0x2e62696c
   1a6c4:	00007372 	.word	0x00007372
   1a6c8:	0001a6b0 	.word	0x0001a6b0
   1a6cc:	00000016 	.word	0x00000016
   1a6d0:	000000db 	.word	0x000000db
   1a6d4:	00000011 	.word	0x00000011
   1a6d8:	00008b6b 	.word	0x00008b6b
   1a6dc:	00000004 	.word	0x00000004
   1a6e0:	00000004 	.word	0x00000004
   1a6e4:	0000c86d 	.word	0x0000c86d
   1a6e8:	656d6f53 	.word	0x656d6f53
   1a6ec:	656e6f4e 	.word	0x656e6f4e
   1a6f0:	00008b63 	.word	0x00008b63
   1a6f4:	00000004 	.word	0x00000004
   1a6f8:	00000004 	.word	0x00000004
   1a6fc:	00008fb9 	.word	0x00008fb9
   1a700:	00000060 	.word	0x00000060
   1a704:	0001a700 	.word	0x0001a700
   1a708:	20697073 	.word	0x20697073
   1a70c:	73756c66 	.word	0x73756c66
   1a710:	61662068 	.word	0x61662068
   1a714:	6c69      	.short	0x6c69
   1a716:	552f      	.short	0x552f
   1a718:	73726573 	.word	0x73726573
   1a71c:	70754c2f 	.word	0x70754c2f
   1a720:	502f7970 	.word	0x502f7970
   1a724:	54656e69 	.word	0x54656e69
   1a728:	2f656d69 	.word	0x2f656d69
   1a72c:	656e6970 	.word	0x656e6970
   1a730:	656d6974 	.word	0x656d6974
   1a734:	7375722d 	.word	0x7375722d
   1a738:	796d2d74 	.word	0x796d2d74
   1a73c:	7477656e 	.word	0x7477656e
   1a740:	7375722f 	.word	0x7375722f
   1a744:	74732f74 	.word	0x74732f74
   1a748:	35333737 	.word	0x35333737
   1a74c:	64636c2d 	.word	0x64636c2d
   1a750:	7461622d 	.word	0x7461622d
   1a754:	722d6863 	.word	0x722d6863
   1a758:	72732f73 	.word	0x72732f73
   1a75c:	696c2f63 	.word	0x696c2f63
   1a760:	73722e62 	.word	0x73722e62
   1a764:	0001a716 	.word	0x0001a716
   1a768:	0000004e 	.word	0x0000004e
   1a76c:	000000fe 	.word	0x000000fe
   1a770:	00000009 	.word	0x00000009
   1a774:	20697073 	.word	0x20697073
   1a778:	61746164 	.word	0x61746164
   1a77c:	69616620 	.word	0x69616620
   1a780:	0000006c 	.word	0x0000006c
   1a784:	0001a716 	.word	0x0001a716
   1a788:	0000004e 	.word	0x0000004e
   1a78c:	000000b0 	.word	0x000000b0
   1a790:	00000009 	.word	0x00000009
   1a794:	0001a716 	.word	0x0001a716
   1a798:	0000004e 	.word	0x0000004e
   1a79c:	000000f3 	.word	0x000000f3
   1a7a0:	00000009 	.word	0x00000009
   1a7a4:	0001a716 	.word	0x0001a716
   1a7a8:	0000004e 	.word	0x0000004e
   1a7ac:	00000098 	.word	0x00000098
   1a7b0:	0000000d 	.word	0x0000000d
   1a7b4:	20697073 	.word	0x20697073
   1a7b8:	20646d63 	.word	0x20646d63
   1a7bc:	6c696166 	.word	0x6c696166
   1a7c0:	0001a716 	.word	0x0001a716
   1a7c4:	0000004e 	.word	0x0000004e
   1a7c8:	00000097 	.word	0x00000097
   1a7cc:	00000009 	.word	0x00000009
   1a7d0:	0001a716 	.word	0x0001a716
   1a7d4:	0000004e 	.word	0x0000004e
   1a7d8:	0000009d 	.word	0x0000009d
   1a7dc:	00000011 	.word	0x00000011
   1a7e0:	0001a716 	.word	0x0001a716
   1a7e4:	0000004e 	.word	0x0000004e
   1a7e8:	0000009c 	.word	0x0000009c
   1a7ec:	0000000d 	.word	0x0000000d
   1a7f0:	0001a716 	.word	0x0001a716
   1a7f4:	0000004e 	.word	0x0000004e
   1a7f8:	000000c5 	.word	0x000000c5
   1a7fc:	0000002d 	.word	0x0000002d
   1a800:	0001a716 	.word	0x0001a716
   1a804:	0000004e 	.word	0x0000004e
   1a808:	000000c9 	.word	0x000000c9
   1a80c:	0000002d 	.word	0x0000002d
   1a810:	0001a716 	.word	0x0001a716
   1a814:	0000004e 	.word	0x0000004e
   1a818:	000000d8 	.word	0x000000d8
   1a81c:	00000019 	.word	0x00000019

0001a820 <str.0>:
   1a820:	65747461 2074706d 61206f74 77206464     attempt to add w
   1a830:	20687469 7265766f 776f6c66 0001a716     ith overflow....
   1a840:	0000004e 000000d9 00000019 0001a716     N...............
   1a850:	0000004e 000000db 00000019 0001a716     N...............
   1a860:	0000004e 000000dc 00000019 20697073     N...........spi 
   1a870:	74696e69 69616620 0000006c 0001a716     init fail.......
   1a880:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1a890:	0001a88c 012d2c01 00002d2c 0001a894     .....,-.,-......
   1a8a0:	00000007 0001a8a0 008402a2 0001a8a8     ................
   1a8b0:	000000c5 0001a8b0 0000000a 0001a8b8     ................
   1a8c0:	00002a8a 0001a8c0 0000ee8a 0001a8c8     .*..............
   1a8d0:	0000000e 0001a8d0 00000000 0001a8d8     ................
   1a8e0:	00000008 0001a8e0 00000005 0001a8e8     ................
   1a8f0:	0001a716 0000004e 00000088 00000009     ....N...........
   1a900:	0000bc5d 00000004 00000004 0000c86d     ]...........m...
   1a910:	74737552 756f7420 73206863 6f736e65     Rust touch senso
   1a920:	00000a72 00000000 0001a924 65737361     r.......$...asse
   1a930:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1a940:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1a950:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1a960:	203a7468 203a6060 0001a92c 0000002d     ht: ``: ,...-...
   1a970:	0001a959 0000000c 0001a965 00000003     Y.......e.......
   1a980:	0001a968 20515249 74696e69 69616620     h...IRQ init fai
   1a990:	0000006c 0001a984 0000000d 0001a994     l...............
   1a9a0:	0001a9a0 74737572 7070612f 6372732f     ....rust/app/src
   1a9b0:	756f742f 735f6863 6f736e65 73722e72     /touch_sensor.rs
   1a9c0:	0001a9a4 0000001c 0000003f 00000005     ........?.......
   1a9d0:	20633269 72646461 0001a9a4 0000001c     i2c addr........
   1a9e0:	0000004b 00000011 63756f74 74616468     K.......touchdat
   1a9f0:	61662061 00006c69 0001a9a4 0000001c     a fail..........
   1aa00:	00000056 00000009 0001a9a4 0000001c     V...............
   1aa10:	0000005a 00000031 64616572 756f7420     Z...1...read tou
   1aa20:	61646863 66206174 006c6961 0001a9a4     chdata fail.....
   1aa30:	0000001c 00000089 00000005 0001a9a4     ................
   1aa40:	0000001c 00000095 00000037 00000000     ........7.......

0001aa50 <str.0>:
   1aa50:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1aa60:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1aa70:	00000077 0001a9a4 0000001c 00000095     w...............
   1aa80:	00000024 00000000 00000000 00000000     $...............

0001aa90 <str.1>:
   1aa90:	65747461 2074706d 61206f74 77206464     attempt to add w
   1aaa0:	20687469 7265766f 776f6c66 0001a9a4     ith overflow....
   1aab0:	0000001c 00000095 00000020 0001a9a4     ........ .......
   1aac0:	0000001c 00000099 00000009 0001a9a4     ................
   1aad0:	0000001c 0000009a 00000037 0001a9a4     ........7.......
   1aae0:	0000001c 0000009a 00000023 0001a9a4     ........#.......
   1aaf0:	0000001c 0000009a 0000001f 0001a9a4     ................
   1ab00:	0000001c 0000009b 00000037 0001a9a4     ........7.......
   1ab10:	0000001c 0000009b 00000023 0001a9a4     ........#.......
   1ab20:	0000001c 0000009b 0000001f 0001a9a4     ................
   1ab30:	0000001c 0000009c 00000009 0001a9a4     ................
   1ab40:	0000001c 0000009e 00000037 0001a9a4     ........7.......
   1ab50:	0000001c 0000009e 00000023 0001a9a4     ........#.......
   1ab60:	0000001c 0000009e 0000001f 0001a9a4     ................
   1ab70:	0000001c 0000009f 00000037 0001a9a4     ........7.......
   1ab80:	0000001c 0000009f 00000023 0001a9a4     ........#.......
   1ab90:	0000001c 0000009f 0000001f 0001a9a4     ................
   1aba0:	0000001c 000000a0 00000009 0001a9a4     ................
   1abb0:	0000001c 000000a4 00000030 0001a9a4     ........0.......
   1abc0:	0000001c 000000a4 0000001a 0001a9a4     ................
   1abd0:	0000001c 000000a4 00000016 0001a9a4     ................
   1abe0:	0000001c 000000a3 00000009 0001a9a4     ................
   1abf0:	0000001c 000000a6 00000030 0001a9a4     ........0.......
   1ac00:	0000001c 000000a6 0000001a 0001a9a4     ................
   1ac10:	0000001c 000000a6 00000016 0001a9a4     ................
   1ac20:	0000001c 000000a5 00000009 0001a9a4     ................
   1ac30:	0000001c 000000aa 0000002d 0001a9a4     ........-.......
   1ac40:	0000001c 000000aa 0000001a 0001a9a4     ................
   1ac50:	0000001c 000000aa 00000016 0001a9a4     ................
   1ac60:	0000001c 000000a9 00000009 0001a9a4     ................
   1ac70:	0000001c 000000ac 0000002d 0001a9a4     ........-.......
   1ac80:	0000001c 000000ac 0000001a 0001a9a4     ................
   1ac90:	0000001c 000000ac 00000016 0001a9a4     ................
   1aca0:	0000001c 000000ab 00000009 0001a9a4     ................
   1acb0:	0000001c 000000af 0000000d 0001a9a4     ................
   1acc0:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1acd0:	00667562 0001a9a4 0000001c 000000f1     buf.............
   1ace0:	00000005 0001a9a4 0000001c 000000f2     ................
   1acf0:	0000000d 0001a9a4 0000001c 000000f2     ................
   1ad00:	00000005 20633269 6c696166 7375520a     ....i2c fail.Rus
   1ad10:	65742074 64207473 6c707369 490a7961     t test display.I
   1ad20:	204d4120 454e4950 454d4954 6c6c6163      AM PINETIMEcall
   1ad30:	60206465 6974704f 3a3a6e6f 72776e75     ed `Option::unwr
   1ad40:	29287061 6e6f2060 60206120 656e6f4e     ap()` on a `None
   1ad50:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1ad60:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1ad70:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1ad80:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1ad90:	2f333238 65626d65 64656464 6172672d     823/embedded-gra
   1ada0:	63696870 2e302d73 2f322e35 2f637273     phics-0.5.2/src/
   1adb0:	726f6f63 73722e64 0001ad57 00000061     coord.rsW...a...
   1adc0:	0000004f 00000018 00000000 00000000     O...............

0001add0 <str.1>:
   1add0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1ade0:	20687469 7265766f 776f6c66 0001ad57     ith overflowW...
   1adf0:	00000061 0000004f 0000002a 00000000     a...O...*.......

0001ae00 <str.2>:
   1ae00:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1ae10:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1ae20:	726e5577 68636165 656c6261 646e6920     wUnreachable ind
   1ae30:	00207865 0001ae21 00000012 0001ae34     ex .!.......4...
   1ae40:	0001ad57 00000061 00000070 00000016     W...a...p.......
   1ae50:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   1ae60:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   1ae70:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   1ae80:	39393236 65396264 33323863 626d652f     6299db9ec823/emb
   1ae90:	65646465 72672d64 69687061 302d7363     edded-graphics-0
   1aea0:	322e352e 6372732f 6e6f662f 662f7374     .5.2/src/fonts/f
   1aeb0:	31746e6f 36317832 0073722e 0001ae50     ont12x16.rs.P...
   1aec0:	0000006b 00000010 00000014 00697073     k...........spi.
   1aed0:	0001a924 65737361 6f697472 6166206e     $...assertion fa
   1aee0:	64656c69 2860203a 7466656c 203d3d20     iled: `(left == 
   1aef0:	68676972 0a602974 656c2020 203a7466     right)`.  left: 
   1af00:	0a2c6060 67697220 203a7468 203a6060     ``,. right: ``: 
   1af10:	0001aed4 0000002d 0001af01 0000000c     ....-...........
   1af20:	0001af0d 00000003 0001af10 20697073     ............spi 
   1af30:	666e6f63 66206769 006c6961 0001af2c     config fail.,...
   1af40:	0000000f 0001af3c 0001af48 74737572     ....<...H...rust
   1af50:	6e796d2f 2f747765 2f637273 2e697073     /mynewt/src/spi.
   1af60:	00007372 0001af4c 00000016 00000050     rs..L.......P...
   1af70:	0000004a 20697073 66206263 006c6961     J...spi cb fail.
   1af80:	0001af74 0000000b 0001af80 0001af4c     t...........L...
   1af90:	00000016 00000057 00000005 20697073     ....W.......spi 
   1afa0:	62616e65 6620656c 006c6961 0001af9c     enable fail.....
   1afb0:	0000000f 0001afac 0001af4c 00000016     ........L.......
   1afc0:	0000005a 00000037 6f697067 69616620     Z...7...gpio fai
   1afd0:	0000006c 0001afc8 00000009 0001afd4     l...............
   1afe0:	0001af4c 00000016 0000005b 00000040     L.......[...@...
   1aff0:	0001af4c 00000016 0000005c 00000040     L.......\...@...
   1b000:	6575716d 66206575 006c6961 0001b000     mqueue fail.....
   1b010:	0000000b 0001b00c 0001af4c 00000016     ........L.......
   1b020:	00000065 00000005 206d6573 6c696166     e.......sem fail
   1b030:	20697073 6c696166 0001b028 00000008     spi fail(.......
   1b040:	0001b038 0001af4c 00000016 00000069     8...L.......i...
   1b050:	00000005 0001af4c 00000016 0000006d     ....L.......m...
   1b060:	00000005 00000000 0001aecc 00000004     ................
   1b070:	0001b064 6e657665 66207174 006c6961     d...eventq fail.
   1b080:	0001af4c 00000016 00000081 00000009     L...............
   1b090:	63206f6e 6220646d 00657479 0001af4c     no cmd byte.L...
   1b0a0:	00000016 00000097 00000005 0001af4c     ............L...
   1b0b0:	00000016 00000099 00000016 00000000     ................

0001b0c0 <str.0>:
   1b0c0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1b0d0:	20687469 7265766f 776f6c66 20697073     ith overflowspi 
   1b0e0:	7265766f 776f6c66 0001af4c 00000016     overflowL.......
   1b0f0:	00000099 00000005 0001af4c 00000016     ........L.......
   1b100:	000000a8 00000012 0001af4c 00000016     ........L.......
   1b110:	000000c1 00000035 00000000 00000000     ....5...........

0001b120 <str.1>:
   1b120:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1b130:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1b140:	00000077 0001af4c 00000016 000000c4     w...L...........
   1b150:	0000000f 20746e69 20697073 6c696166     ....int spi fail
   1b160:	0001af4c 00000016 00000101 00000011     L...............
   1b170:	0001af4c 00000016 00000111 00000015     L...............

0001b180 <str.2>:
   1b180:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1b190:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1b1a0:	00000077 0001af4c 00000016 0000010f     w...L...........
   1b1b0:	00000011 0001af4c 00000016 00000117     ....L...........
   1b1c0:	00000011 0001af4c 00000016 00000124     ....L.......$...
   1b1d0:	00000009 20646162 20697073 006e656c     ....bad spi len.
   1b1e0:	0001af4c 00000016 0000012b 00000005     L.......+.......
   1b1f0:	0001b030 00000008 0001b1f0 0001af4c     0...........L...
   1b200:	00000016 00000141 00000009 0001af4c     ....A.......L...
   1b210:	00000016 0000014a 00000009 0001af4c     ....J.......L...
   1b220:	00000016 0000014e 00000030 0001af4c     ....N...0...L...
   1b230:	00000016 0000015a 00000005 0001af4c     ....Z.......L...
   1b240:	00000016 0000015f 00000017 0001a924     ...._.......$...
   1b250:	65737361 6f697472 6166206e 64656c69     assertion failed
   1b260:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   1b270:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   1b280:	67697220 203a7468 203a6060 0001b250      right: ``: P...
   1b290:	0000002d 0001b27d 0000000c 0001b289     -...}...........
   1b2a0:	00000003 0001b28c 20697073 666e6f63     ........spi conf
   1b2b0:	66206769 006c6961 0001b2a8 0000000f     ig fail.........
   1b2c0:	0001b2b8 0001b2c4 74737572 6e796d2f     ........rust/myn
   1b2d0:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   1b2e0:	0001b2c8 00000016 00000016 00000009     ................
   1b2f0:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1b300:	0001b2f0 0000000f 0001b300 0001b2c8     ................
   1b310:	00000016 00000019 00000009 20697073     ............spi 
   1b320:	74696e69 69616620 0000006c 0001b31c     init fail.......
   1b330:	0000000d 0001b32c 0001b2c8 00000016     ....,...........
   1b340:	0000001c 00000009 6f697067 69616620     ........gpio fai
   1b350:	0000006c 0001b348 00000009 0001b354     l...H.......T...
   1b360:	0001b2c8 00000016 00000045 00000009     ........E.......
   1b370:	0001b2c8 00000016 0000006c 0000001b     ........l.......

0001b380 <str.0>:
   1b380:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1b390:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1b3a0:	73552f77 2f737265 7070754c 632e2f79     w/Users/Luppy/.c
   1b3b0:	6f677261 6765722f 72747369 72732f79     argo/registry/sr
   1b3c0:	69672f63 62756874 6d6f632e 6365312d     c/github.com-1ec
   1b3d0:	39323663 39626439 32386365 6d652f33     c6299db9ec823/em
   1b3e0:	64646562 672d6465 68706172 2d736369     bedded-graphics-
   1b3f0:	2e352e30 72732f32 6f662f63 2f73746e     0.5.2/src/fonts/
   1b400:	746e6f66 6975625f 7265646c 0073722e     font_builder.rs.
   1b410:	0001b3a1 0000006e 000000c9 0000001a     ....n...........

0001b420 <str.0>:
   1b420:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1b430:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1b440:	00000077 0001b3a1 0000006e 000000c9     w.......n.......
   1b450:	0000000c 00000000 00000000 00000000     ................

0001b460 <str.1>:
   1b460:	65747461 2074706d 61206f74 77206464     attempt to add w
   1b470:	20687469 7265766f 776f6c66 0001b3a1     ith overflow....
   1b480:	0000006e 000000ca 00000010 0001b3a1     n...............
   1b490:	0000006e 000000d9 0000002d 0001b3a1     n.......-.......
   1b4a0:	0000006e 000000d9 0000001e 00000000     n...............

0001b4b0 <str.2>:
   1b4b0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1b4c0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1b4d0:	00000077 0001b3a1 0000006e 000000da     w.......n.......
   1b4e0:	0000001e 0001b3a1 0000006e 000000e2     ........n.......
   1b4f0:	00000017 0001b3a1 0000006e 000000e1     ........n.......
   1b500:	00000028 0001b3a1 0000006e 000000e4     (.......n.......
   1b510:	00000017 0001b3a1 0000006e 000000e7     ........n.......
   1b520:	00000022 30c00000 0f0c30c3 c0033c00     "......0.0...<..
   1b530:	00000303 00000000 00000000 3fc0003f     ............?..?
   1b540:	0f03f003 fc0f0ffc 00f0033f 00030000     ........?.......
   1b550:	f003c000 fff0033f 0ffcf003 f0c3fffc     ....?...........
   1b560:	30c00000 0f0c30c3 c0033c00 00000303     ...0.0...<......
	...
   1b578:	3fc0003f 0f03f003 fc0f0ffc 00f0033f     ?..?........?...
   1b588:	00030000 f003c000 fff0033f 0ffcf003     ........?.......
   1b598:	f0c3fffc 30c00000 cf3f30c3 c000c30c     .......0.0?.....
   1b5a8:	33c0000c 0000c000 0c000000 c0c0c3c0     ...3............
   1b5b8:	0c0f0ccc 0c003000 3c0cccc0 000c0000     .....0.....<....
   1b5c8:	0c0c3000 c00cccc0 0cc30ccc 0c0cc000     .0..............
   1b5d8:	30c00000 cf3f30c3 c000c30c 33c0000c     ...0.0?........3
   1b5e8:	0000c000 0c000000 c0c0c3c0 0c0f0ccc     ................
   1b5f8:	0c003000 3c0cccc0 000c0000 0c0c3000     .0.....<.....0..
   1b608:	c00cccc0 0cc30ccc 0c0cc000 30c00000     ...............0
   1b618:	00ccfccf 0003cc30 0c300030 0000c000     ....0...0.0.....
   1b628:	30000000 00c0c0c3 0f330cc0 3000c0f0     ...0......3....0
   1b638:	3c0cccc0 0f30c003 0c000cfc c00ccc00     ...<..0.........
   1b648:	ccc000cc 000cc000 30c00000 00ccfccf     ...........0....
   1b658:	0003cc30 0c300030 0000c000 30000000     0...0.0........0
   1b668:	00c0c0c3 0f330cc0 3000c0f0 3c0cccc0     ......3....0...<
   1b678:	0f30c003 0c000cfc c00ccc00 ccc000cc     ..0.............
   1b688:	000cc000 00c00000 003f3003 000030c0     .........0?..0..
   1b698:	ff300030 0f00fccf c00000fc 0fc0c0cc     0.0.............
   1b6a8:	00c3f000 c000ff0c 00fc033f 00c0c003     ........?.......
   1b6b8:	30000300 fffccf3c cfc0000c 000cfff0     ...0<...........
   1b6c8:	00c00000 003f3003 000030c0 ff300030     .....0?..0..0.0.
   1b6d8:	0f00fccf c00000fc 0fc0c0cc 00c3f000     ................
   1b6e8:	c000ff0c 00fc033f 00c0c003 30000300     ....?..........0
   1b6f8:	fffccf3c cfc0000c 000cfff0 00c00000     <...............
   1b708:	c30cfc0f 00c0cc00 0c300030 0000c000     ........0.0.....
   1b718:	00030000 30c0c0f0 c0ff0c00 00c3c00c     .......0........
   1b728:	3c0cc0c0 0f300000 c0000cfc c00ccccc     ...<..0.........
   1b738:	ccc000cc 3c0cc000 00c00000 c30cfc0f     .......<........
   1b748:	00c0cc00 0c300030 0000c000 00030000     ....0.0.........
   1b758:	30c0c0f0 c0ff0c00 00c3c00c 3c0cc0c0     ...0...........<
   1b768:	0f300000 c0000cfc c00ccccc ccc000cc     ..0.............
   1b778:	3c0cc000 00000000 0cff3003 0000c33c     ...<.....0..<...
   1b788:	33c0000c 003cc000 000c3c00 c0c0c0c0     ...3..<..<......
   1b798:	0c030c0c 00c3c00c 3c30c0c0 000cc003     ..........0<....
   1b7a8:	00003000 c00ccccc 0cc30ccc 0c0cc000     .0..............
   1b7b8:	00000000 0cff3003 0000c33c 33c0000c     .....0..<......3
   1b7c8:	003cc000 000c3c00 c0c0c0c0 0c030c0c     ..<..<..........
   1b7d8:	00c3c00c 3c30c0c0 000cc003 00003000     ......0<.....0..
   1b7e8:	c00ccccc 0cc30ccc 0c0cc000 00c00000     ................
   1b7f8:	000c3003 00c03c3c 00000303 000c0000     .0..<<..........
   1b808:	00003c00 fff0033f 0303f0c3 00033ff0     .<..?........?..
   1b818:	00c0033f 0003c000 c000c000 ff0c0c3f     ?...........?...
   1b828:	0ffcf003 fc03c0fc 00c00000 000c3003     .............0..
   1b838:	00c03c3c 00000303 000c0000 00003c00     <<...........<..
   1b848:	fff0033f 0303f0c3 00033ff0 00c0033f     ?........?..?...
   1b858:	0003c000 c000c000 ff0c0c3f 0ffcf003     ........?.......
   1b868:	fc03c0fc 00000000 00000000 00000000     ................
   1b878:	00000000 00300000 00000000 00000000     ......0.........
	...
   1b894:	00000003 00000000 00000000 00000000     ................
	...
   1b8b8:	00300000 00000000 00000000 00000000     ..0.............
	...
   1b8d0:	00000003 00000000 00000000 00000000     ................
   1b8e0:	00000000 0ff0c3c0 0cc00ccc f0c3c00c     ................
   1b8f0:	fff003ff ccfff003 0cccc00c ff0cccc0     ................
   1b900:	0300f0c3 00000cf0 c0000030 c0000000     ........0.......
   1b910:	00000f00 03c000c0 003c000c 00000000     ..........<.....
   1b920:	0ff0c3c0 0cc00ccc f0c3c00c fff003ff     ................
   1b930:	ccfff003 0cccc00c ff0cccc0 0300f0c3     ................
   1b940:	00000cf0 c0000030 c0000000 00000f00     ....0...........
   1b950:	03c000c0 003c000c 00000000 03c0c0c0     ......<.........
   1b960:	0fc0300c 0cccc03c c00cccc0 0c0c0ccc     .0..<...........
   1b970:	0cccc00c 000cccc0 00c000c3 00003330     ............03..
   1b980:	c000000c c0000000 00c03000 000000c0     .........0......
   1b990:	000c000c 00000000 03c0c0c0 0fc0300c     .............0..
   1b9a0:	0cccc03c c00cccc0 0c0c0ccc 0cccc00c     <...............
   1b9b0:	000cccc0 00c000c3 00003330 c000000c     ........03......
   1b9c0:	c0000000 00c03000 000000c0 000c000c     .....0..........
   1b9d0:	00000000 03c0c0c0 0cc0c00c 0cccf0cc     ................
   1b9e0:	c00cccc0 0c0c00cc 0cccc00c 030c0c33     ............3...
   1b9f0:	00300003 00c0c030 cff00303 c33cf003     ..0.0.........<.
   1ba00:	fc0330f0 0fc003cf 0f0c300c f003cf30     .0.......0..0...
   1ba10:	03c0c0c0 0cc0c00c 0cccf0cc c00cccc0     ................
   1ba20:	0c0c00cc 0cccc00c 030c0c33 00300003     ........3.....0.
   1ba30:	00c0c030 cff00303 c33cf003 fc0330f0     0.........<..0..
   1ba40:	0fc003cf 0f0c300c f003cf30 03c0c0ff     .....0..0.......
   1ba50:	0cc0000f 0ccccccc ff0c0cff 0c0cf003     ................
   1ba60:	ccccc00c 0c30030c 000c0003 00000030     ......0.....0...
   1ba70:	f00c0000 ccc300cc 0c0cfc0c 03c0c0f0     ................
   1ba80:	0c0cc00c 0cccf0cc 03c0c0ff 0cc0000f     ................
   1ba90:	0ccccccc ff0c0cff 0c0cf003 ccccc00c     ................
   1baa0:	0c30030c 000c0003 00000030 f00c0000     ..0.....0.......
   1bab0:	ccc300cc 0c0cfc0c 03c0c0f0 0c0cc00c     ................
   1bac0:	0cccf0cc 03c0c0c0 0cc0c00c 0cccc30c     ................
   1bad0:	cccc0cc0 0c0c0c00 ccccc00c 30c00033     ............3..0
   1bae0:	00030003 00000030 c0fc0300 cfc000cc     ....0...........
   1baf0:	0c0c30fc 03c0c0c0 0c0c000f 0cccc00c     .0..............
   1bb00:	03c0c0c0 0cc0c00c 0cccc30c cccc0cc0     ................
   1bb10:	0c0c0c00 ccccc00c 30c00033 00030003     ........3..0....
   1bb20:	00000030 c0fc0300 cfc000cc 0c0c30fc     0............0..
   1bb30:	03c0c0c0 0c0c000f 0cccc00c c3c0c0c0     ................
   1bb40:	0cc0300c 0cccc00c c3300cc0 0c0c0c0c     .0........0.....
   1bb50:	cc0c330c c0c0c0c0 c0000003 00000030     .3..........0...
   1bb60:	c00c0c00 ccc00ccc fc033000 03c0c0c0     .........0......
   1bb70:	0c0cc00c 0cccc00c c3c0c0c0 0cc0300c     .............0..
   1bb80:	0cccc00c c3300cc0 0c0c0c0c cc0c330c     ......0......3..
   1bb90:	c0c0c0c0 c0000003 00000030 c00c0c00     ........0.......
   1bba0:	ccc00ccc fc033000 03c0c0c0 0c0cc00c     .....0..........
   1bbb0:	0cccc00c 3cf0c3c0 ccff0c0c f0c3c00c     .......<........
   1bbc0:	c0cc03c0 030cf0c3 30030cf0 ffc0c0c0     ...........0....
   1bbd0:	0300f0c3 000000f0 fffc0300 c33ff003     ..............?.
   1bbe0:	0c0030f0 c3f0c3c0 0c3f300c f0c3c00c     .0.......0?.....
   1bbf0:	3cf0c3c0 ccff0c0c f0c3c00c c0cc03c0     ...<............
   1bc00:	030cf0c3 30030cf0 ffc0c0c0 0300f0c3     .......0........
   1bc10:	000000f0 fffc0300 c33ff003 0c0030f0     ..........?..0..
   1bc20:	c3f0c3c0 0c3f300c f0c3c00c 00000000     .....0?.........
	...
   1bc4c:	fc0f0000 00000000 00000000 f0030000     ................
   1bc5c:	3c000000 00000000 00000000 00000000     ...<............
	...
   1bc88:	fc0f0000 00000000 00000000 f0030000     ................
   1bc98:	3c000000 00000000 00000000 00000000     ...<............
   1bca8:	00300000 00000000 00000000 030c3000     ..0..........0..
   1bcb8:	c0c03c00 00f00000 000c0c0c fccfc0f0     .<..............
   1bcc8:	0000003f cfff0000 00000cfc 03c00f3c     ?...........<...
   1bcd8:	c03f00c0 00030000 00000000 00300000     ..?...........0.
	...
   1bcf0:	030c3000 c0c03c00 00f00000 000c0c0c     .0...<..........
   1bd00:	fccfc0f0 0000003f cfff0000 00000cfc     ....?...........
   1bd10:	03c00f3c c03f00c0 00030000 00000000     <.....?.........
   1bd20:	00300000 00000000 00000000 000cc000     ..0.............
   1bd30:	0000c3c0 0000030c 030c3003 0c0c000c     .........0......
   1bd40:	00ccc000 c0c00000 c0003300 0c3000c3     .........3....0.
   1bd50:	c0c30000 000f0000 00000000 00300000     ..............0.
	...
   1bd68:	000cc000 0000c3c0 0000030c 030c3003     .............0..
   1bd78:	0c0c000c 00ccc000 c0c00000 c0003300     .............3..
   1bd88:	0c3000c3 c0c30000 000f0000 cffc03ff     ..0.............
   1bd98:	0cfcfc03 0cccc00c ff0cccc0 000cc0c0     ................
   1bda8:	c00000c0 c000033f 000cfccf cc0c00c0     ....?...........
   1bdb8:	0030c33f c0cc0000 f0030c00 00c0030c     ?.0.............
   1bdc8:	c0c30c0c 00030000 cffc03ff 0cfcfc03     ................
   1bdd8:	0cccc00c ff0cccc0 000cc0c0 c00000c0     ................
   1bde8:	c000033f 000cfccf cc0c00c0 0030c33f     ?...........?.0.
   1bdf8:	c0cc0000 f0030c00 00c0030c c0c30c0c     ................
   1be08:	00030000 f00cccc0 0c3000cc 0cccc00c     ..........0.....
   1be18:	030c0c33 000c0003 c0000030 3fc00fcc     3.......0......?
   1be28:	0300c000 fc0c0030 ffc0ccc0 c0c0f0c3     ....0...........
   1be38:	c0000000 00300030 c03f0c0c 000300f0     ....0.0...?.....
   1be48:	f00cccc0 0c3000cc 0cccc00c 030c0c33     ......0.....3...
   1be58:	000c0003 c0000030 3fc00fcc 0300c000     ....0......?....
   1be68:	fc0c0030 ffc0ccc0 c0c0f0c3 c0000000     0...............
   1be78:	00300030 c03f0c0c 000300f0 c00cccc0     0.0...?.........
   1be88:	0c30f003 ccccc00c 0c0c0c0c 000cc000     ..0.............
   1be98:	c00000c0 330003cc 000cfc0f cc0c00c0     .......3........
   1bea8:	0030033f c0c300c0 00000000 00c00fff     ?.0.............
   1beb8:	c0030c0c c00f00f0 c00cccc0 0c30f003     ..............0.
   1bec8:	ccccc00c 0c0c0c0c 000cc000 c00000c0     ................
   1bed8:	330003cc 000cfc0f cc0c00c0 0030033f     ...3........?.0.
   1bee8:	c0c300c0 00000000 00c00fff c0030c0c     ................
   1bef8:	c00f00f0 c0fc03ff cc300c00 cc0c333c     ..........0.<3..
   1bf08:	30fc0333 000cc000 c00000c0 3f0cc3cc     3..0...........?
   1bf18:	0c0cc000 0c0c0030 00cc0000 c0cc00c0     ....0...........
   1bf28:	f0030000 00000000 c0030c0f 00000000     ................
   1bf38:	c0fc03ff cc300c00 cc0c333c 30fc0333     ......0.<3..3..0
   1bf48:	000cc000 c00000c0 3f0cc3cc 0c0cc000     ...........?....
   1bf58:	0c0c0030 00cc0000 c0cc00c0 f0030000     0...............
   1bf68:	00000000 c0030c0f 00000000 c00c00c0     ................
   1bf78:	030ff00f 30030ccc ff0cc0c0 030c30c0     .......0.....0..
   1bf88:	c0000000 c0f00c3f 030cc0c0 fc0f00c0     ....?...........
   1bf98:	00000000 c0ff0000 00000000 00000000     ................
   1bfa8:	c003f00c 00000000 c00c00c0 030ff00f     ................
   1bfb8:	30030ccc ff0cc0c0 030c30c0 c0000000     ...0.....0......
   1bfc8:	c0f00c3f 030cc0c0 fc0f00c0 00000000     ?...............
   1bfd8:	c0ff0000 00000000 00000000 c003f00c     ................
   1bfe8:	00000000 000c00c0 00000000 00000000     ................
   1bff8:	00f00300 00000000 00000000 0000000c     ................
	...
   1c020:	0000000c 00000c00 000c00c0 00000000     ................
   1c030:	00000000 00f00300 00000000 00000000     ................
   1c040:	0000000c 00000000 00000000 00000000     ................
	...
   1c05c:	0000000c 00000c00 c000003f 00f00ccc     ........?.......
   1c06c:	3c00f0c0 33cc030c c30fc000 3c00f0f0     ...<...3.......<
   1c07c:	f030030c 030c3c00 cc033f30 0c3c00f0     ..0..<..0?....<.
   1c08c:	0033cc03 000f3f00 33c0c003 00fc3c0c     ..3..?.....3.<..
   1c09c:	3c00f000 c000003f 00f00ccc 3c00f0c0     ...<?..........<
   1c0ac:	33cc030c c30fc000 3c00f0f0 f030030c     ...3.......<..0.
   1c0bc:	030c3c00 cc033f30 0c3c00f0 0033cc03     .<..0?....<...3.
   1c0cc:	000f3f00 33c0c003 00fc3c0c 3c00f000     .?.....3.<.....<
   1c0dc:	c3c0ccc0 0030300c c0000c00 00300c33     .....00.....3.0.
   1c0ec:	0c3c0000 c0000c0c 0c000033 0033c000     ..<.....3.....3.
   1c0fc:	30cc3000 33c0000c 0c00300c c0c0c00c     .0.0...3.0......
   1c10c:	0030030c 0330cc0c c0000cc0 c3c0ccc0     ..0...0.........
   1c11c:	0030300c c0000c00 00300c33 0c3c0000     .00.....3.0...<.
   1c12c:	c0000c0c 0c000033 0033c000 30cc3000     ....3.....3..0.0
   1c13c:	33c0000c 0c00300c c0c0c00c 0030030c     ...3.0........0.
   1c14c:	0330cc0c c0000cc0 cc30c3c0 00f0c00c     ..0.......0.....
   1c15c:	f0033fc0 3ff0033f 0cccf003 fccfff00     .?..?..?........
   1c16c:	3ffccfff 033ff003 0ccc30f0 3ff0033f     ...?..?..0..?..?
   1c17c:	033ff003 0cccc330 c00cccc0 0c3f0ccc     ..?.0.........?.
   1c18c:	f0033f30 cc30c3c0 00f0c00c f0033fc0     0?....0......?..
   1c19c:	3ff0033f 0cccf003 fccfff00 3ffccfff     ?..?...........?
   1c1ac:	033ff003 0ccc30f0 3ff0033f 033ff003     ..?..0..?..?..?.
   1c1bc:	0cccc330 c00cccc0 0c3f0ccc f0033f30     0.........?.0?..
   1c1cc:	33ccc0c0 c3300003 0cccc000 c00cccc0     ...3..0.........
   1c1dc:	cccf0ccc 000cc000 0c000cc0 000cc000     ................
   1c1ec:	0ccffcc0 c00cccc0 c0c00ccc 0cccccc0     ................
   1c1fc:	c00cccc0 cf3030c3 0cc000f0 33ccc0c0     .....00........3
   1c20c:	c3300003 0cccc000 c00cccc0 cccf0ccc     ..0.............
   1c21c:	000cc000 0c000cc0 000cc000 0ccffcc0     ................
   1c22c:	c00cccc0 c0c00ccc 0cccccc0 c00cccc0     ................
   1c23c:	cf3030c3 0cc000f0 cf30033f ccf3fc0c     .00.....?.0.....
   1c24c:	fccfff00 fffccfff 0cfcfccf c00ffc00     ................
   1c25c:	0cc00ffc 000cc000 cccc30c0 c00cccc0     .........0......
   1c26c:	c3c00ccc 0cccf030 c00cccc0 cc30c0c0     ....0.........0.
   1c27c:	fcc33f0c cf30033f ccf3fc0c fccfff00     .?..?.0.........
   1c28c:	fffccfff 0cfcfccf c00ffc00 0cc00ffc     ................
   1c29c:	000cc000 cccc30c0 c00cccc0 c3c00ccc     .....0..........
   1c2ac:	0cccf030 c00cccc0 cc30c0c0 fcc33f0c     0.........0..?..
   1c2bc:	33c00c00 cc0c0c00 0cccc00c c00cccc0     ...3............
   1c2cc:	0ccc0ccc 000cc00c 0c000cc0 000cc000     ................
   1c2dc:	3ccc30c0 c00cccc0 ccc00ccc 0cccc00c     .0.<............
   1c2ec:	c00cccc0 0c3fc0c0 0cccc00c 33c00c00     ......?........3
   1c2fc:	cc0c0c00 0cccc00c c00cccc0 0ccc0ccc     ................
   1c30c:	000cc00c 0c000cc0 000cc000 3ccc30c0     .............0.<
   1c31c:	c00cccc0 ccc00ccc 0cccc00c c00cccc0     ................
   1c32c:	0c3fc0c0 0cccc00c 3f000000 c30f30c0     ..?........?.0..
   1c33c:	0cccc0f0 c00cccc0 c3cf0ccc fccffff0     ................
   1c34c:	3ffccfff 033ff003 0c0c3ff0 3ff0033f     ...?..?..?..?..?
   1c35c:	003ff003 f0033f00 3ff0033f 0c30c000     ..?..?..?..?..0.
   1c36c:	fcc33ff0 3f000000 c30f30c0 0cccc0f0     .?.....?.0......
   1c37c:	c00cccc0 c3cf0ccc fccffff0 3ffccfff     ...............?
   1c38c:	033ff003 0c0c3ff0 3ff0033f 003ff003     ..?..?..?..?..?.
   1c39c:	f0033f00 3ff0033f 0c30c000 fcc33ff0     .?..?..?..0..?..
   1c3ac:	03000000 c000fc00 00000000 00000000     ................
   1c3bc:	00000000 000000c0 00000000 00000000     ................
	...
   1c3e0:	0cfc0000 00000000 03000000 c000fc00     ................
	...
   1c3fc:	000000c0 00000000 00000000 00000000     ................
	...
   1c41c:	0cfc0000 00000000 33cc033f 0000c000     ........?..3....
   1c42c:	3c00f000 f030033f 033f3c00 cc03cc30     ...<?.0..<?.0...
   1c43c:	3f3c00f0 0033cc03 3c000000 33f003f0     ..<?..3....<...3
   1c44c:	033c3c00 00000030 00000000 00000000     .<<.0...........
   1c45c:	00000000 33cc033f 0000c000 3c00f000     ....?..3.......<
   1c46c:	f030033f 033f3c00 cc03cc30 3f3c00f0     ?.0..<?.0.....<?
   1c47c:	0033cc03 3c000000 33f003f0 033c3c00     ..3....<...3.<<.
   1c48c:	00000030 00000000 00000000 00000000     0...............
   1c49c:	0030ccc0 00000000 c0000c00 0c00c0c0     ..0.............
   1c4ac:	c0c0c000 300c3000 c0c0000c 000030cc     .....0.0.....0..
   1c4bc:	c00000c0 000c0c0c 000cc000 00000000     ................
	...
   1c4d8:	0030ccc0 00000000 c0000c00 0c00c0c0     ..0.............
   1c4e8:	c0c0c000 300c3000 c0c0000c 000030cc     .....0.0.....0..
   1c4f8:	c00000c0 000c0c0c 000cc000 00000000     ................
	...
   1c514:	3ff0033f 03f3f003 f0033ff0 00f0033f     ?..?.....?..?...
   1c524:	00000000 f00ccc00 3ff0033f 003ff003     ........?..?..?.
   1c534:	0c0c3f00 c00cccc0 0c0f0ccc 0000000c     .?..............
	...
   1c550:	3ff0033f 03f3f003 f0033ff0 00f0033f     ?..?.....?..?...
   1c560:	00000000 f00ccc00 3ff0033f 003ff003     ........?..?..?.
   1c570:	0c0c3f00 c00cccc0 0c0f0ccc 0000000c     .?..............
	...
   1c58c:	000cc000 cc0c0cc0 0cccc000 3c0cccc0     ...............<
   1c59c:	033cc003 0c0f03c0 c00cccc0 cfc00ccc     ..<.............
   1c5ac:	0cccc3fc c00cccc0 cc0c0ccc 0000000c     ................
	...
   1c5c8:	000cc000 cc0c0cc0 0cccc000 3c0cccc0     ...............<
   1c5d8:	033cc003 0c0f03c0 c00cccc0 cfc00ccc     ..<.............
   1c5e8:	0cccc3fc c00cccc0 cc0c0ccc 0000000c     ................
	...
   1c604:	3ffcc33f cc3ffcc3 fccfff00 0cfccfff     ?..?..?.........
   1c614:	000cc000 0ccc3fc0 c00cccc0 c0c00ccc     .....?..........
   1c624:	0ccccc00 c00cccc0 0c0f0ccc 0000000c     ................
	...
   1c640:	3ffcc33f cc3ffcc3 fccfff00 0cfccfff     ?..?..?.........
   1c650:	000cc000 0ccc3fc0 c00cccc0 c0c00ccc     .....?..........
   1c660:	0ccccc00 c00cccc0 0c0f0ccc 0000000c     ................
	...
   1c67c:	c00cccc0 0ccc0ccc 000cc00c 0c000cc0     ................
   1c68c:	000cc000 0cccc0c0 c00cccc0 c0c00ccc     ................
   1c69c:	3cccf0c0 c33cccc3 030cfcc3 000000fc     ...<..<.........
	...
   1c6b8:	c00cccc0 0ccc0ccc 000cc00c 0c000cc0     ................
   1c6c8:	000cc000 0cccc0c0 c00cccc0 c0c00ccc     ................
   1c6d8:	3cccf0c0 c33cccc3 030cfcc3 000000fc     ...<..<.........
	...
   1c6f4:	3ffcc33f c333fcc3 f0033ff0 3ff0033f     ?..?..3..?..?..?
   1c704:	033ff003 0c0c3ff0 3ff0033f 003ff003     ..?..?..?..?..?.
   1c714:	cc033f00 3cccc33c 003f0cc0 0000000c     .?..<..<..?.....
	...
   1c730:	3ffcc33f c333fcc3 f0033ff0 3ff0033f     ?..?..3..?..?..?
   1c740:	033ff003 0c0c3ff0 3ff0033f 003ff003     ..?..?..?..?..?.
   1c750:	cc033f00 3cccc33c 003f0cc0 0000000c     .?..<..<..?.....
	...
   1c774:	000000c0 00000000 00000000 00000000     ................
	...
   1c794:	0300f003 000000f0 00000000 00000000     ................
	...
   1c7b0:	000000c0 00000000 00000000 00000000     ................
	...
   1c7d0:	0300f003 000000f0 00000000 00000000     ................
   1c7e0:	00000000 0001b3a1 0000006e 000000e9     ........n.......
   1c7f0:	00000020 0001b3a1 0000006e 000000e9      .......n.......
   1c800:	00000049 00000000 00000000 00000000     I...............

0001c810 <str.3>:
   1c810:	65747461 2074706d 73206f74 74666968     attempt to shift
   1c820:	66656c20 69772074 6f206874 66726576      left with overf
   1c830:	00776f6c 0001b3a1 0000006e 000000f0     low.....n.......
   1c840:	00000017 0001b3a1 0000006e 000000ef     ........n.......
   1c850:	00000019 0001b3a1 0000006e 000000f2     ........n.......
   1c860:	00000019 0001b3a1 0000006e 000000f4     ........n.......
   1c870:	00000011 0001b3a1 0000006e 000000f8     ........n.......
   1c880:	00000015 0001b3a1 0000006e 000000fd     ........n.......
   1c890:	00000019 6c6c6163 60206465 6974704f     ....called `Opti
   1c8a0:	3a3a6e6f 72776e75 29287061 6e6f2060     on::unwrap()` on
   1c8b0:	60206120 656e6f4e 61762060 2f65756c      a `None` value/
   1c8c0:	72657355 754c2f73 2f797070 7261632e     Users/Luppy/.car
   1c8d0:	722f6f67 73696765 2f797274 2f637273     go/registry/src/
   1c8e0:	68746967 632e6275 312d6d6f 36636365     github.com-1ecc6
   1c8f0:	64393932 63653962 2f333238 70616568     299db9ec823/heap
   1c900:	7373656c 352e302d 732f312e 762f6372     less-0.5.1/src/v
   1c910:	722e6365 00000073 0001c8bf 00000056     ec.rs.......V...
   1c920:	000001e8 0000000d 00000000 00000000     ................

0001c930 <str.0>:
   1c930:	65747461 2074706d 61206f74 77206464     attempt to add w
   1c940:	20687469 7265766f 776f6c66 552f2928     ith overflow()/U
   1c950:	73726573 70754c2f 2e2f7970 67726163     sers/Luppy/.carg
   1c960:	65722f6f 74736967 732f7972 672f6372     o/registry/src/g
   1c970:	75687469 6f632e62 65312d6d 32366363     ithub.com-1ecc62
   1c980:	62643939 38636539 682f3332 6c706165     99db9ec823/heapl
   1c990:	2d737365 2e352e30 72732f31 65762f63     ess-0.5.1/src/ve
   1c9a0:	73722e63 00000000 00000000 00000000     c.rs............

0001c9b0 <str.0>:
   1c9b0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1c9c0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1c9d0:	00000077 0001c94e 00000056 00000066     w...N...V...f...
   1c9e0:	00000009 00000000 00000000 00000000     ................

0001c9f0 <str.1>:
   1c9f0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1ca00:	20687469 7265766f 776f6c66 0001c94e     ith overflowN...
   1ca10:	00000056 0000003e 0000000c 0001c94e     V...>.......N...
   1ca20:	00000056 0000002d 00000009 0001c94e     V...-.......N...
   1ca30:	00000056 0000007e 00000011 0000a457     V...~.......W...
   1ca40:	00000000 00000001 0000faf1 0000a39b     ................
   1ca50:	00000002 00000002 000139df 6c6c6163     .........9..call
   1ca60:	60206465 75736552 3a3a746c 72776e75     ed `Result::unwr
   1ca70:	29287061 6e6f2060 206e6120 72724560     ap()` on an `Err
   1ca80:	61762060 6465756c 20776172 636f6c62     ` valuedraw bloc
   1ca90:	6620736b 726c6961 2f747375 74656970     ks failrust/piet
   1caa0:	626d652d 65646465 69702f64 652d7465     -embedded/piet-e
   1cab0:	6465626d 2d646564 70617267 73636968     mbedded-graphics
   1cac0:	6372732f 7369642f 79616c70 0073722e     /src/display.rs.
   1cad0:	0001ca97 00000038 00000080 00000005     ....8...........
   1cae0:	6576656e 73757272 69702f74 652d7465     neverrust/piet-e
   1caf0:	6465626d 2f646564 74656970 626d652d     mbedded/piet-emb
   1cb00:	65646465 72672d64 69687061 732f7363     edded-graphics/s
   1cb10:	622f6372 68637461 0073722e 0001cae5     rc/batch.rs.....
   1cb20:	00000036 000000be 00000019 0001cae5     6...............
   1cb30:	00000036 000000c3 0000001d 00000000     6...............

0001cb40 <str.0>:
   1cb40:	65747461 2074706d 61206f74 77206464     attempt to add w
   1cb50:	20687469 7265766f 776f6c66 0001cae5     ith overflow....
   1cb60:	00000036 000000d5 00000015 0001cae5     6...............
   1cb70:	00000036 00000104 00000019 0001cae5     6...............
   1cb80:	00000036 00000109 0000001d 0001cae5     6...............
   1cb90:	00000036 0000011d 00000015 6573552f     6.........../Use
   1cba0:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   1cbb0:	69676572 79727473 6372732f 7469672f     registry/src/git
   1cbc0:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   1cbd0:	65396264 33323863 626d652f 65646465     db9ec823/embedde
   1cbe0:	72672d64 69687061 302d7363 322e352e     d-graphics-0.5.2
   1cbf0:	6372732f 6972702f 6974696d 2f736576     /src/primitives/
   1cc00:	74636572 6c676e61 73722e65 0001cb9c     rectangle.rs....
   1cc10:	00000070 000000c0 00000032 00000000     p.......2.......

0001cc20 <str.0>:
   1cc20:	65747461 2074706d 61206f74 77206464     attempt to add w
   1cc30:	20687469 7265766f 776f6c66 0001cb9c     ith overflow....
   1cc40:	00000070 000000c2 00000031 00000000     p.......1.......

0001cc50 <str.1>:
   1cc50:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1cc60:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1cc70:	00000077 0001cb9c 00000070 000000c4     w.......p.......
   1cc80:	00000031 0001cb9c 00000070 000000c6     1.......p.......
   1cc90:	00000031 65707845 64657463 72747320     1...Expected str
   1cca0:	00656b6f 0001cb9c 00000070 000000cc     oke.....p.......
   1ccb0:	00000019 0001cb9c 00000070 000000d5     ........p.......
   1ccc0:	0000000d 0001cb9c 00000070 000000da     ........p.......
   1ccd0:	00000011 6573552f 4c2f7372 79707075     ..../Users/Luppy
   1cce0:	6e69502f 6d695465 69702f65 6974656e     /PineTime/pineti
   1ccf0:	722d656d 2d747375 656e796d 722f7477     me-rust-mynewt/r
   1cd00:	2f747375 74656970 626d652d 65646465     ust/piet-embedde
   1cd10:	69702f64 652d7465 6465626d 2d646564     d/piet-embedded-
   1cd20:	70617267 73636968 6372732f 7369642f     graphics/src/dis
   1cd30:	79616c70 0073722e 0001ccd4 00000063     play.rs.....c...
   1cd40:	00000080 00000005 6573552f 4c2f7372     ......../Users/L
   1cd50:	79707075 61632e2f 2f6f6772 69676572     uppy/.cargo/regi
   1cd60:	79727473 6372732f 7469672f 2e627568     stry/src/github.
   1cd70:	2d6d6f63 63636531 39393236 65396264     com-1ecc6299db9e
   1cd80:	33323863 626d652f 65646465 72672d64     c823/embedded-gr
   1cd90:	69687061 302d7363 322e352e 6372732f     aphics-0.5.2/src
   1cda0:	6972702f 6974696d 2f736576 63726963     /primitives/circ
   1cdb0:	722e656c 00000073 0001cd48 0000006d     le.rs...H...m...
   1cdc0:	00000091 00000010 00000000 00000000     ................

0001cdd0 <str.0>:
   1cdd0:	65747461 2074706d 6e206f74 74616765     attempt to negat
   1cde0:	69772065 6f206874 66726576 00776f6c     e with overflow.
   1cdf0:	0001cd48 0000006d 00000092 00000010     H...m...........
   1ce00:	0001cd48 0000006d 000000b1 00000016     H...m...........

0001ce10 <str.1>:
   1ce10:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1ce20:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1ce30:	00000077 00000000 00000000 00000000     w...............

0001ce40 <str.2>:
   1ce40:	65747461 2074706d 61206f74 77206464     attempt to add w
   1ce50:	20687469 7265766f 776f6c66 0001cd48     ith overflowH...
   1ce60:	0000006d 000000b4 00000019 00000000     m...............

0001ce70 <str.3>:
   1ce70:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1ce80:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1ce90:	00000077 0001cd48 0000006d 000000b5     w...H...m.......
   1cea0:	0000001f 0001cd48 0000006d 000000ba     ....H...m.......
   1ceb0:	00000017 0001cd48 0000006d 000000ba     ....H...m.......
   1cec0:	00000021 0001cd48 0000006d 000000bc     !...H...m.......
   1ced0:	00000023 0001cd48 0000006d 000000bc     #...H...m.......
   1cee0:	0000003f 0001cd48 0000006d 000000c3     ?...H...m.......
   1cef0:	00000015 0001cd48 0000006d 000000c4     ....H...m.......
   1cf00:	00000015 64726f42 63207265 726f6c6f     ....Border color
   1cf10:	746f6e20 66656420 64656e69 0001cd48      not definedH...
   1cf20:	0000006d 000000c5 00000015 0001cd48     m...........H...
   1cf30:	0000006d 000000c9 00000015 0001cd48     m...........H...
   1cf40:	0000006d 000000ca 00000015 6c6c6946     m...........Fill
   1cf50:	6c6f6320 6e20726f 6420746f 6e696665      color not defin
   1cf60:	00006465 0001cd48 0000006d 000000cb     ed..H...m.......
   1cf70:	00000015 0001cd48 0000006d 000000d1     ....H...m.......
   1cf80:	0000000d 0001cd48 0000006d 000000d4     ....H...m.......
   1cf90:	0000001a 0001cd48 0000006d 000000d5     ....H...m.......
   1cfa0:	00000011 6576656e 73552f72 2f737265     ....never/Users/
   1cfb0:	7070754c 69502f79 6954656e 702f656d     Luppy/PineTime/p
   1cfc0:	74656e69 2d656d69 74737572 6e796d2d     inetime-rust-myn
   1cfd0:	2f747765 74737572 6569702f 6d652d74     ewt/rust/piet-em
   1cfe0:	64646562 702f6465 2d746569 65626d65     bedded/piet-embe
   1cff0:	64656464 6172672d 63696870 72732f73     dded-graphics/sr
   1d000:	61622f63 2e686374 00007372 0001cfa9     c/batch.rs......
   1d010:	00000061 000000be 00000019 0001cfa9     a...............
   1d020:	00000061 000000c3 0000001d 00000000     a...............

0001d030 <str.0>:
   1d030:	65747461 2074706d 61206f74 77206464     attempt to add w
   1d040:	20687469 7265766f 776f6c66 0001cfa9     ith overflow....
   1d050:	00000061 000000d5 00000015 0001cfa9     a...............
   1d060:	00000061 00000104 00000019 0001cfa9     a...............
   1d070:	00000061 00000109 0000001d 0001cfa9     a...............
   1d080:	00000061 0000011d 00000015 6573552f     a.........../Use
   1d090:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   1d0a0:	69676572 79727473 6372732f 7469672f     registry/src/git
   1d0b0:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   1d0c0:	65396264 33323863 6165682f 73656c70     db9ec823/heaples
   1d0d0:	2e302d73 2f312e35 2f637273 2e636576     s-0.5.1/src/vec.
   1d0e0:	00007372 0001d08c 00000056 00000066     rs......V...f...
   1d0f0:	00000009 00000000 00000000 00000000     ................

0001d100 <str.0>:
   1d100:	65747461 2074706d 61206f74 77206464     attempt to add w
   1d110:	20687469 7265766f 776f6c66 0001d08c     ith overflow....
   1d120:	00000056 0000003e 0000000c 0001d08c     V...>...........
   1d130:	00000056 0000007e 00000011 00000000     V...~...........

0001d140 <str.1>:
   1d140:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1d150:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1d160:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   1d170:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   1d180:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   1d190:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   1d1a0:	20736920 00000000 00000020 00000008      is .... .......
   1d1b0:	00000002 00000000 00000000 00000002     ................
   1d1c0:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   1d1d0:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   1d1e0:	73722e65 00000000 00000020 00000004     e.rs.... .......
   1d1f0:	00000002 00000000 00000002 00000000     ................
   1d200:	00000003 00000000 00000020 00000008     ........ .......
   1d210:	00000002 00000000 00000001 00000001     ................
   1d220:	00000003 002e2e60 0001d225 00000002     ....`...%.......
   1d230:	65726c61 20796461 72726f62 6465776f     already borrowed
   1d240:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   1d250:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   1d260:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

0001d270 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   1d270:	00010201 00000000 00000000 00000000     ................
   1d280:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   1d290:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   1d2a0:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   1d2b0:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   1d2c0:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   1d2d0:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   1d2e0:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   1d2f0:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   1d300:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   1d310:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   1d320:	656e6f4e 61762060 0065756c 0001d164     None` value.d...
   1d330:	00000000 0000203a 0001d164 00000000     ....: ..d.......
   1d340:	0001d334 00000002 00013b17 00000000     4........;......
   1d350:	00000001 00013b67 74756220 65687420     ....g;.. but the
   1d360:	646e6920 69207865 00002073 0001d184      index is ......
   1d370:	00000020 0001d358 00000012 00013b17      ...X........;..
   1d380:	0000000c 00000004 00013daf 00014105     .........=...A..
   1d390:	000141b5 202c0a2c 2c280a28 30783029     .A..,., (.(,)0x0
   1d3a0:	30313030 30333032 30353034 30373036     0010203040506070
   1d3b0:	31393038 31313130 31333132 31353134     8091011121314151
   1d3c0:	31373136 32393138 32313230 32333232     6171819202122232
   1d3d0:	32353234 32373236 33393238 33313330     4252627282930313
   1d3e0:	33333332 33353334 33373336 34393338     2333435363738394
   1d3f0:	34313430 34333432 34353434 34373436     0414243444546474
   1d400:	35393438 35313530 35333532 35353534     8495051525354555
   1d410:	35373536 36393538 36313630 36333632     6575859606162636
   1d420:	36353634 36373636 37393638 37313730     4656667686970717
   1d430:	37333732 37353734 37373736 38393738     2737475767778798
   1d440:	38313830 38333832 38353834 38373836     0818283848586878
   1d450:	39393838 39313930 39333932 39353934     8899091929394959
   1d460:	39373936 00393938 00013b17 00000004     6979899..;......
   1d470:	00000004 000141d9 000141df 000141e5     .....A...A...A..
   1d480:	2f637273 6362696c 2f65726f 2f746d66     src/libcore/fmt/
   1d490:	2e646f6d 00007372 0001d480 00000016     mod.rs..........
   1d4a0:	0000043b 00000011 0001d480 00000016     ;...............
   1d4b0:	00000445 00000024 2f637273 6362696c     E...$...src/libc
   1d4c0:	2f65726f 63696c73 6f6d2f65 73722e64     ore/slice/mod.rs
   1d4d0:	65646e69 6f202078 6f207475 61722066     index  out of ra
   1d4e0:	2065676e 20726f66 63696c73 666f2065     nge for slice of
   1d4f0:	6e656c20 20687467 0001d4d0 00000006      length ........
   1d500:	0001d4d6 00000022 0001d4b8 00000018     ...."...........
   1d510:	00000a72 00000005 63696c73 6e692065     r.......slice in
   1d520:	20786564 72617473 61207374 62202074     dex starts at  b
   1d530:	65207475 2073646e 00207461 0001d518     ut ends at .....
   1d540:	00000016 0001d52e 0000000d 0001d4b8     ................
   1d550:	00000018 00000a78 00000005 696e6966     ....x.......fini
   1d560:	64656873 73796168 6b636174 79622820     shedhaystack (by
   1d570:	20736574 6167654e 65766974 69736f50     tes NegativePosi
   1d580:	65766974 65746e69 6c617267 61706e55     tiveintegralUnpa
   1d590:	64656b63 69666e49 6574696e 756e694d     ckedInfiniteMinu
   1d5a0:	77615273 7265764f 776f6c66 6b636162     sRawOverflowback
   1d5b0:	72657469 6f746e49 72657449 61636f6c     iterIntoIterloca
   1d5c0:	6e6f6974 61636f4c 6e6f6974 72616573     tionLocationsear
   1d5d0:	72656863 69736f70 6e6f6974 74697263     cherpositioncrit
   1d5e0:	736f705f 656e694c 796e4173 57776152     _posLinesAnyRawW
   1d5f0:	72656b61 6f6c6c41 72724563 38746e69     akerAllocErrint8
   1d600:	745f3478 2f637273 6362696c 2f65726f     x4_tsrc/libcore/
   1d610:	2f727473 2e646f6d 2e5b7372 625d2e2e     str/mod.rs[...]b
   1d620:	20657479 65646e69 69202078 756f2073     yte index  is ou
   1d630:	666f2074 756f6220 2073646e 6020666f     t of bounds of `
   1d640:	0001d61f 0000000b 0001d62a 00000016     ........*.......
   1d650:	0001d224 00000001 0001d604 00000016     $...............
   1d660:	00000853 00000009 69676562 3d3c206e     S.......begin <=
   1d670:	646e6520 00002820 0001d668 0000000e      end (..h.......
   1d680:	0001d294 00000004 0001d240 00000010     ........@.......
   1d690:	0001d224 00000001 0001d604 00000016     $...............
   1d6a0:	00000857 00000005 0001d604 00000016     W...............
   1d6b0:	00000868 0000000e 20736920 20746f6e     h....... is not 
   1d6c0:	68632061 62207261 646e756f 3b797261     a char boundary;
   1d6d0:	20746920 69207369 6469736e 20292065      it is inside ) 
   1d6e0:	6020666f 0001d61f 0000000b 0001d6b8     of `............
   1d6f0:	00000026 0001d56c 00000008 0001d6de     &...l...........
   1d700:	00000006 0001d224 00000001 0001d604     ....$...........
   1d710:	00000016 0000086a 00000005 0001d1c4     ....j...........
   1d720:	00000020 0000001a 00000028 05030100      .......(.......
   1d730:	03060605 08080607 1c0a1109 140c190b     ................
   1d740:	0d0e120d 0310040f 09131212 05170116     ................
   1d750:	03190218 021c071a 161f011d 042b0320     ............ .+.
   1d760:	0b2d022c 0330012e 01320231 02a902a7     ,.-...0.1.2.....
   1d770:	08ab04aa 05fb02fa 03fe04fd 78ad09ff     ...............x
   1d780:	a28d8b79 8b585730 1d1c908c 4b0f0edd     y...0WX........K
   1d790:	2efcfb4c 5d5c3f2f 84e2b55f 92918e8d     L.../?\]_.......
   1d7a0:	bbbab1a9 cac9c6c5 ffe5e4de 12110400     ................
   1d7b0:	37343129 493d3b3a 8e845d4a b4b1a992     )147:;=IJ]......
   1d7c0:	cac6bbba e5e4cfce 0e0d0400 31291211     ..............)1
   1d7d0:	453b3a34 5e4a4946 91846564 cec99d9b     4:;EFIJ^de......
   1d7e0:	29110dcf 64574945 a9918d65 c5bbbab4     ...)EIWde.......
   1d7f0:	e5e4dfc9 110d04f0 65644945 b2848180     ........EIde....
   1d800:	d5bfbebc 83f1f0d7 a6a48b85 c7c5bfbe     ................
   1d810:	dbdacfce cdbd9848 49cfcec6 59574f4e     ....H......INOWY
   1d820:	8e895f5e b7b6b18f c7c6c1bf 171611d7     ^_..............
   1d830:	f7f65c5b 0d80fffe dfde716d 6e1f0f0e     [\......mq.....n
   1d840:	5f1d1c6f afae7e7d 16fabcbb 461f1e17     o.._}~.........F
   1d850:	584f4e47 7e5e5c5a d4c5b57f f1f0dcd5     GNOXZ\^~........
   1d860:	8f7372f5 97967574 2e265f2f b7afa72f     .rs.tu../_&./...
   1d870:	d7cfc7bf 97409adf 1f8f3098 ffcec1c0     ......@..0......
   1d880:	5b5a4f4e 100f0807 efee2f27 3d376f6e     NOZ[....'/..no7=
   1d890:	9045423f 53fffe91 c9c87567 d9d8d1d0     ?BE....Sgu......
   1d8a0:	00fffee7 82225f20 448204df 06041b08     .... _"....D....
   1d8b0:	0eac8111 1e35ab80 03e08015 04010819     ......5.........
   1d8c0:	0434042f 07010307 0a110706 07120f50     /.4.........P...
   1d8d0:	04020855 03090a1c 03070308 03030302     U...............
   1d8e0:	0305040c 0e01060b 033a0515 05060711     ..........:.....
   1d8f0:	07570710 0d150702 03430450 0401032d     ..W.....P.C.-...
   1d900:	0c0f0611 251d043a 046d205f c880256a     ....:..%_ m.j%..
   1d910:	03b08205 fd82061a 15075903 1409170b     .........Y......
   1d920:	6a0c140c 1a060a06 2b075906 2c0a4605     ...j.....Y.+.F.,
   1d930:	01040c04 2c0b3103 0b061a04 06ac8003     .....1.,........
   1d940:	411f060a 032d044c 033c0874 073c030f     ...AL.-.t.<...<.
   1d950:	052b0838 1811ff82 2d112f08 21102003     8.+....../.-. .!
   1d960:	048c800f 0b199782 05948815 073b052f     ............/.;.
   1d970:	09180e02 7430b080 1ad6800c ff80050c     ......0t........
   1d980:	05b68005 c69b0c24 1030d20a 37038d84     ....$.....0....7
   1d990:	145c8109 8008b880 043530c7 0838060a     ..\......05...8.
   1d9a0:	060c0846 031e0b74 0959045a 1c188380     F...t...Z.Y.....
   1d9b0:	4809160a 068a8008 170ca4ab 04a13104     ...H.........1..
   1d9c0:	0726da81 8005050c 6d8111a5 2a287810     ..&........m.x(*
   1d9d0:	80044c06 be80048d 0f031b03 0106000d     .L..............
   1d9e0:	04010301 09080802 0b050a02 11011002     ................
   1d9f0:	13051204 15021411 19021702 1d051c04     ................
   1da00:	6a012408 bc026b03 d402d102 d609d50c     .$.j.k..........
   1da10:	da02d702 e105e001 ee02e802 f904f020     ............ ...
   1da20:	0c02fa06 4e3e3b27 9e9e8f4f 0907069f     ....';>NO.......
   1da30:	563e3d36 04d1d0f3 37361814 35bd5756     6=>V......67VW.5
   1da40:	12e0cfce 9e8e8987 110e0d04 34312912     .............)14
   1da50:	4946453a 644f4e4a b65c5a65 a81c1bb7     :EFIJNOdeZ\.....
   1da60:	09d9d8a9 a8919037 3e3b0a07 928f6966     ....7.....;>fi..
   1da70:	efee5f6f 9b9a625a 9d552827 a4a3a1a0     o_..Zb..'(U.....
   1da80:	baada8a7 0b06c4bc 3a1d150c a651453f     ...........:?EQ.
   1da90:	a0cdcca7 221a1907 c53f3e25 232004c6     ......."%>?... #
   1daa0:	33282625 4a483a38 5553504c 5c5a5856     %&(38:HJLPSUVXZ\
   1dab0:	6563605e 78736b66 a48a7f7d c0b0afaa     ^`cefksx}.......
   1dac0:	a3720cd0 6ecccba4 7b225e6f 2d040305     ..r....no^"{...-
   1dad0:	01046503 82802e2f 0f31031d 0924041c     .e../.....1...$.
   1dae0:	052b051e 2a0e0444 2406aa80 28042404     ..+.D..*...$.$.(
   1daf0:	010b3408 37819080 080a1609 03399880     .4.....7......9.
   1db00:	30090863 03210516 4001051b 054b0438     c..0..!....@8.K.
   1db10:	070a042f 20400709 090c0427 053a0336     /.....@ '...6.:.
   1db20:	0c04071a 37495007 07330d33 810a082e     .....PI73.3.....
   1db30:	81801f26 802a0828 4e091786 430f1e04     &...(.*....N...C
   1db40:	0a07190e 27094706 3f0b7509 3b062a41     .....G.'.u.?A*.;
   1db50:	51060a05 10050106 8b800503 08482060     ...Q........` H.
   1db60:	5ea6800a 0a0b4522 39130d06 2c360a07     ...^"E.....9..6,
   1db70:	c0801004 0c53643c 45a08001 5308481b     ....<dS....E.H.S
   1db80:	0781391d 031d0a46 03374947 060a080e     .9..F...GI7.....
   1db90:	810a0739 c7801936 9b830d32 800b7566     9...6...2...fu..
   1dba0:	84bc8ac4 82d18f2f 82b9a147 042a0739     ..../...G...9.*.
   1dbb0:	0a266002 05280a46 5bb08213 39044b65     .`&.F.(....[eK.9
   1dbc0:	04401107 08f8971c 0da5f382 03311f81     ..@...........1.
   1dbd0:	81080411 6b04898c 09030d05 60931007     .......k.......`
   1dbe0:	730af680 46176e08 0c149a80 80190957     ...s.n.F....W...
   1dbf0:	03478187 150f4285 802b5085 1a032dd5     ..G..B...P+..-..
   1dc00:	70810204 8501053a 29d78000 040a044c     ...p:......)L...
   1dc10:	44118302 c2803d4c 0401063c 341b0555     ...DL=..<...U..4
   1dc20:	2c0e8102 560c6404 5d030d0a 1d393d03     ...,.d.V...].=9.
   1dc30:	09042c0d 060e0207 d6839a80 0b030d0a     .,..............
   1dc40:	590c7405 0c140c07 0a083804 1e082806     .t.Y.....8...(..
   1dc50:	31037752 0ca68003 05030414 85060d03     Rw.1............
   1dc60:	6372736a 62696c2f 65726f63 696e752f     jsrc/libcore/uni
   1dc70:	65646f63 646f6d2f 0073722e 0001dc61     code/mod.rs.a...
   1dc80:	0000001a 00000038 0000000f 0001dc61     ....8.......a...
   1dc90:	0000001a 00000039 00000010              ....9.......

0001dc9c <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   1dc9c:	1b150f04 17120319 0e000011 00000016     ................
	...
   1dcc4:	00130600 00000000 00000000 00000000     ................
   1dcd4:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   1dcf4:	01050000 00000000 00000000 00000000     ................
   1dd04:	00000000 10000000 00000000 0009000b     ................
   1dd14:	                                         ...

0001dd17 <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   1dd33:	00120f00 00000000 00000000 00000000     ................
   1dd43:	0000001f 00000000 00000000 00000000     ................
   1dd53:	1d664649 00000000 00000000 00000000     IFf.............
   1dd63:	00003e8a 00000000 00000000 4b000000     .>.............K
   1dd73:	00000053 00000000 00000000 42236700     S............g#B
	...
   1dd8f:	0000003d 00230000 00000000 00000000     =.....#.........
   1dd9f:	2d000075 00000000 00000000 00000000     u..-............
   1ddaf:	003c4e82 00000000 00000000 63000000     .N<............c
   1ddbf:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   1ddcf:	00000300 00000000 00000000 0000002f     ............/...
   1dddf:	00000000 00001000 13000000 00000800     ................
	...
   1ddf7:	43000000 89007200 00000000 00000000     ...C.r..........
   1de07:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   1de17:	00210000 00000000 00000000 00000000     ..!.............
   1de27:	4100000a 00000000 00000000 00000000     ...A............
   1de37:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   1de47:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   1de57:	00000031 00000053 3a000000 00000000     1...S......:....
   1de67:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   1de77:	0017003b 00000000 00000000 00000000     ;...............
   1de87:	57000055 83000000 00000000 00000000     U..W............
   1de97:	00000059 26000000 00161b6e 00000000     Y......&n.......
   1dea7:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   1deb7:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   1dec7:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   1ded7:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   1dee7:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   1def7:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

0001df08 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   1df10:	00000001 00000000 0000000d 00000000     ................
   1df20:	0000001c 00000000 00000040 00000000     ........@.......
   1df30:	000000b6 00000000 000000bf 00000000     ................
   1df40:	000003f8 00000000 000007f0 00000000     ................
   1df50:	000007ff 00000000 00001000 00000000     ................
   1df60:	00001e00 00000000 00003800 00000000     .........8......
   1df70:	00003f00 00000000 00007f80 00000000     .?..............
   1df80:	00008000 00000000 0001ffc0 00000000     ................
   1df90:	0003ff80 00000000 00078000 00000000     ................
   1dfa0:	007f0000 00000000 00802001 00000000     ......... ......
   1dfb0:	00a30000 00000000 037ffc00 00000000     ................
   1dfc0:	06000000 00000000 07ff0000 00000000     ................
   1dfd0:	09800000 00000000 0e000000 00000000     ................
   1dfe0:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   1dff0:	200ffe40 00000000 30000001 00000000     @.. .......0....
   1e000:	40000000 00000000 4000005c 00000000     ...@....\..@....
   1e010:	60000000 00000000 805c8400 00000000     ...`......\.....
   1e020:	c0000000 00000000 e0000000 00000000     ................
   1e030:	00000000 00000001 0cf00000 00000001     ................
   1e040:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   1e050:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   1e060:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   1e070:	00000000 00000060 00000844 00000060     ....`...D...`...
   1e080:	00000000 000000f0 00000060 00000200     ........`.......
   1e090:	f9ffff7f 000007db 80000000 000007f8     ................
   1e0a0:	e0000000 00000fbc 00000000 00002120     ............ !..
   1e0b0:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   1e0c0:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   1e0d0:	00000000 00003fc0 00000000 0000f000     .....?..........
   1e0e0:	00000000 0000fc00 f8000010 0000fffe     ................
   1e0f0:	0000ffff 0000ffff ffffffff 0000ffff     ................
   1e100:	fffff800 00010000 00000000 0001ffc0     ................
   1e110:	ffff0000 0001ffff 00000000 00030000     ................
   1e120:	00000000 00038000 00000000 0003a340     ............@...
   1e130:	00000000 00080000 000c0000 000c0000     ................
   1e140:	00000004 000ff800 00000000 00180000     ................
   1e150:	001c0000 001c0000 c3000000 001e0001     ................
   1e160:	00000000 001f0000 00800001 001f1fc0     ................
   1e170:	00000007 001fef80 ffffffff 00201fff     .............. .
   1e180:	00023986 00230000 00000002 00403000     .9....#......0@.
   1e190:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   1e1a0:	00000000 007f0000 00000000 00bf2800     .............(..
   1e1b0:	00000000 00cff000 03000000 02a00000     ................
   1e1c0:	fff70000 031021fd 00000003 06780000     .....!........x.
   1e1d0:	00000000 06ff8000 00000000 07c00000     ................
   1e1e0:	00000000 07f20000 00000000 0e040187     ................
   1e1f0:	00000006 10000000 00001008 10000000     ................
   1e200:	00000007 14000000 0000000f 17f00000     ................
   1e210:	00000000 1ff20000 feffe0df 1fffffff     ................
   1e220:	00000000 20000000 00000000 200ff800     ....... ....... 
   1e230:	00000007 33c80000 00000000 3fb00000     .......3.......?
   1e240:	00000000 3ff78000 00000004 40000000     .......?.......@
   1e250:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   1e260:	00000002 50000000 00000003 58000000     .......P.......X
   1e270:	00000000 66fde000 000007fe 79f80000     .......f.......y
   1e280:	00000003 7fc00000 00000000 7ffe0000     ................
   1e290:	00000000 7fff0000 00000000 80000000     ................
   1e2a0:	0000007f 80000000 00000030 8003ffff     ........0.......
   1e2b0:	0000f06e 87000000 00000002 90000000     n...............
   1e2c0:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   1e2d0:	00000000 a7f80000 00000000 b03c8000     ..............<.
   1e2e0:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   1e2f0:	fffe0000 bfffffff 00000011 c0000000     ................
   1e300:	00000000 c19d0000 00000002 d0000000     ................
   1e310:	00000000 f807c3a0 ffffffff f87fffff     ................
   1e320:	ffffffff fbffffff 000021be fc00000c     .........!......
   1e330:	00000000 ff000000 00000002 ff000000     ................
   1e340:	00020000 ffff0000 fff80000 fffffffb     ................
   1e350:	00000000 ffffffff ffffffff ffffffff     ................
   1e360:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

0001e370 <nrf52_hal_i2cs>:
   1e370:	00000000 20000100                       ....... 

0001e378 <nrf52_hal_spis>:
   1e378:	2000b560 00000000 00000000 65737341     `.. ........Asse
   1e388:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   1e398:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   1e3a8:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   1e3b8:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   1e3c8:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   1e3d8:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   1e3e8:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   1e3f8:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   1e408:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   1e418:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   1e428:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   1e438:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   1e448:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   1e458:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   1e468:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   1e478:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   1e488:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   1e498:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   1e4a8:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   1e4b8:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   1e4c8:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   1e4d8:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   1e4e8:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   1e4f8:	00000000 656c6469 00000000 7379736d     ....idle....msys
   1e508:	0000315f                                _1..

0001e50c <MemFile_methods>:
   1e50c:	000189e5 00000000                       ........

0001e514 <stdout>:
   1e514:	2000011c                                ... 

0001e518 <nrf52k_flash_dev>:
   1e518:	0001e530 00000000 00080000 00000080     0...............
   1e528:	00000001 000000ff                       ........

0001e530 <nrf52k_flash_funcs>:
   1e530:	00018c51 00018b81 00018b09 00018b61     Q...........a...
   1e540:	00000000 00018b5d 00000000              ....].......

0001e54c <nrf52_hal_timers>:
   1e54c:	2000b670 00000000 00000000 00000000     p.. ............
	...

0001e564 <hal_i2c1_cfg>:
   1e564:	00000007 00000006 00000064              ........d...

0001e570 <os_bsp_spi0m_cfg>:
   1e570:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   1e580:	7476655f 00000073                       _evts...

0001e588 <COLLECTOR_NODE_HW_ID>:
   1e588:	066aff57 50547878 67242949              W.j.xxTPI)$g

0001e594 <SENSOR_NODE_HW_IDS>:
   1e594:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   1e5a4:	08070605 020b0a09 04030201 08070605     ................
   1e5b4:	030b0a09 04030201 08070605 040b0a09     ................
   1e5c4:	04030201 08070605 050b0a09 77687325     ............%shw
   1e5d4:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   1e5e4:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   1e5f4:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   1e604:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   1e614:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   1e624:	0a732520 00000000 00000000               %s.........

0001e630 <sensor_node_addresses>:
   1e630:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   1e640:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   1e650:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   1e660:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   1e670:	00000a73                                s...

0001e674 <g_temp_stub_sensor_driver>:
   1e674:	00019a8d 00019995 00000000 00000000     ................
	...
   1e69c:	20425453 64616572 6d657420 65732070     STB read temp se
   1e6ac:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   1e6bc:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

0001e6cc <sysflash_map_dflt>:
	...
   1e6d4:	00004000 00000001 00008000 00073c00     .@...........<..
   1e6e4:	00000002 0007bc00 00000400 00000003     ................
   1e6f4:	0007c000 00001000 00000010 00004000     .............@..
   1e704:	00004000 00000011 0007d000 00003000     .@...........0..
   1e714:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   1e724:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  91948	    100	  46816	 138864	  21e70	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
